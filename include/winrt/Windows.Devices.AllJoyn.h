#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.AllJoyn

#include "Windows.Devices.AllJoyn.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.Networking.Sockets.0.h"
#include "Windows.Security.Cryptography.Certificates.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Enumeration {
struct DeviceWatcher;
}}
namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
template<typename K, typename V> struct IMap;
template<typename T> struct IIterable;
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}
namespace Globalization {
struct Language;
}
namespace Security { namespace Credentials {
struct PasswordCredential;
}}}

// defs

template<> struct def<Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism> : enum_type<int> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynStatusStatics> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynStatus> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynBusAttachmentState> : enum_type<int> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusAttachment> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynAboutData> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynAboutData> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynAboutData> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusAttachmentStatics> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusAttachmentFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusAttachment2> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynBusAttachment> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynBusAttachment, Windows::Devices::AllJoyn::IAllJoynBusAttachment2>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusAttachmentStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynBusAttachmentStateChangedEventArgs> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynCredentialsRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynCredentialsRequestedEventArgs> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynCredentialsVerificationRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynCredentialsVerificationRequestedEventArgs> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynAuthenticationCompleteEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynAuthenticationCompleteEventArgs> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynServiceInfoStatics> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynServiceInfoFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynServiceInfo> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynServiceInfo> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynServiceInfo>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynAboutDataViewStatics> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynAboutDataView> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynAboutDataView> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynAboutDataView> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynTrafficType> : enum_type<int> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoinerEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoinerEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoinerEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionJoinedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionJoinedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynSessionJoinedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynCredentials> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynCredentials> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynCredentials> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSession> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionStatics> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynSession> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynSession> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionMemberAddedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionMemberAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynSessionMemberAddedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionMemberRemovedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionMemberRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynSessionMemberRemovedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynSessionLostReason> : enum_type<int> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionLostEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynSessionLostEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynSessionLostEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynProducer> : overridable_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusObjectFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusObject> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynBusObject> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynBusObject>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusObjectStoppedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynBusObjectStoppedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynBusObjectStoppedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner> : overridable_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynProducerStoppedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynProducerStoppedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynProducerStoppedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynWatcherStoppedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynWatcherStoppedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynWatcherStoppedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynServiceInfoRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynServiceInfoRemovedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynServiceInfoRemovedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynMessageInfo> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::IAllJoynMessageInfoFactory> : interface_type<> {};
template<> struct def<Windows::Devices::AllJoyn::AllJoynMessageInfo> : class_type<Platform::Object, Windows::Devices::AllJoyn::IAllJoynMessageInfo>, custom_activators {};

// uuids

template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynStatusStatics> { define_guid(0xD0B7A17E, 0xD29, 0x4DA9, 0x8A, 0xC6, 0x54, 0xC5, 0x54, 0xBE, 0xDB, 0xC5);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusAttachment> { define_guid(0xF309F153, 0x1EED, 0x42C3, 0xA2, 0xE, 0x43, 0x6D, 0x41, 0xFE, 0x62, 0xF6);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynAboutData> { define_guid(0xE5A9BF00, 0x1FA2, 0x4839, 0x93, 0xEF, 0xF9, 0xDF, 0x40, 0x48, 0x90, 0xF7);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusAttachmentStatics> { define_guid(0x839D4D3D, 0x1051, 0x40D7, 0x87, 0x2A, 0x8D, 0x1, 0x41, 0x11, 0x5B, 0x1F);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusAttachmentFactory> { define_guid(0x642EF1A4, 0xAD85, 0x4DDF, 0x90, 0xAE, 0x60, 0x44, 0x52, 0xB2, 0x22, 0x88);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusAttachment2> { define_guid(0x3474CB1E, 0x2368, 0x43B2, 0xB4, 0x3E, 0x6A, 0x3A, 0xC1, 0x27, 0x8D, 0x98);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusAttachmentStateChangedEventArgs> { define_guid(0xD82E75F4, 0xC02A, 0x41EC, 0xA8, 0xD5, 0xEA, 0xB1, 0x55, 0x89, 0x53, 0xAA);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynCredentialsRequestedEventArgs> { define_guid(0x6A87E34E, 0xB069, 0x4B80, 0x9E, 0x1A, 0x41, 0xBC, 0x83, 0x7C, 0x65, 0xD2);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynCredentialsVerificationRequestedEventArgs> { define_guid(0x800A7612, 0xB805, 0x44AF, 0xA2, 0xE1, 0x79, 0x2A, 0xB6, 0x55, 0xA2, 0xD0);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynAuthenticationCompleteEventArgs> { define_guid(0x97B4701C, 0x15DC, 0x4B53, 0xB6, 0xA4, 0x7D, 0x13, 0x43, 0x0, 0xD7, 0xBF);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynServiceInfoStatics> { define_guid(0x5678570A, 0x603A, 0x49FC, 0xB7, 0x50, 0xE, 0xF1, 0x36, 0x9, 0x21, 0x3C);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynServiceInfoFactory> { define_guid(0x7581DABD, 0xFE03, 0x4F4B, 0x94, 0xA4, 0xF0, 0x2F, 0xDC, 0xBD, 0x11, 0xB8);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynServiceInfo> { define_guid(0x4CBE8209, 0xB93E, 0x4182, 0x99, 0x9B, 0xDD, 0xD0, 0x0, 0xF9, 0xC5, 0x75);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynAboutDataViewStatics> { define_guid(0x57EDB688, 0xC5E, 0x416E, 0x88, 0xB5, 0x39, 0xB3, 0x2D, 0x25, 0xC4, 0x7D);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynAboutDataView> { define_guid(0x6823111F, 0x6212, 0x4934, 0x9C, 0x48, 0xE1, 0x9C, 0xA4, 0x98, 0x42, 0x88);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoinerEventArgsFactory> { define_guid(0xB4435BC0, 0x6145, 0x429E, 0x84, 0xDB, 0xD5, 0xBF, 0xE7, 0x72, 0xB1, 0x4F);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoinerEventArgs> { define_guid(0x4EFB5365, 0x3E8A, 0x4257, 0x8F, 0x10, 0x53, 0x9C, 0xE0, 0xD5, 0x6C, 0xF);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionJoinedEventArgsFactory> { define_guid(0x6824D689, 0xD6CB, 0x4D9E, 0xA0, 0x9E, 0x35, 0x80, 0x68, 0x70, 0xB1, 0x7F);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionJoinedEventArgs> { define_guid(0x9E9F5BD0, 0xB5D7, 0x47C5, 0x8D, 0xAB, 0xB0, 0x40, 0xCC, 0x19, 0x28, 0x71);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynCredentials> { define_guid(0x824650F2, 0xA190, 0x40B1, 0xAB, 0xAB, 0x34, 0x9E, 0xC2, 0x44, 0xDF, 0xAA);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSession> { define_guid(0xE8D11B0C, 0xC0D4, 0x406C, 0x88, 0xA9, 0xA9, 0x3E, 0xFA, 0x85, 0xD4, 0xB1);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionStatics> { define_guid(0x9E05D604, 0xA06C, 0x46D4, 0xB4, 0x6C, 0xB, 0xB, 0x54, 0x10, 0x5B, 0x44);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionMemberAddedEventArgsFactory> { define_guid(0x341DE352, 0x1D33, 0x40A1, 0xA1, 0xD3, 0xE5, 0x77, 0x70, 0x20, 0xE1, 0xF1);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionMemberAddedEventArgs> { define_guid(0x49A2798A, 0xDD1, 0x46C1, 0x9C, 0xD6, 0x27, 0x19, 0xE, 0x50, 0x3A, 0x5E);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionMemberRemovedEventArgsFactory> { define_guid(0xC4D355E8, 0x42B8, 0x4B67, 0xB7, 0x57, 0xD0, 0xCF, 0xCA, 0xD5, 0x92, 0x80);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionMemberRemovedEventArgs> { define_guid(0x409A219F, 0xAA4A, 0x4893, 0xB4, 0x30, 0xBA, 0xA1, 0xB6, 0x3C, 0x62, 0x19);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionLostEventArgsFactory> { define_guid(0x13BBFD32, 0xD2F4, 0x49C9, 0x98, 0xE, 0x28, 0x5, 0xE1, 0x35, 0x86, 0xB1);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynSessionLostEventArgs> { define_guid(0xE766A48A, 0x8BB8, 0x4954, 0xAE, 0x67, 0xD2, 0xFA, 0x43, 0xD1, 0xF9, 0x6B);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynProducer> { define_guid(0x9D084679, 0x469B, 0x495A, 0xA7, 0x10, 0xAC, 0x50, 0xF1, 0x23, 0x6, 0x9F);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusObjectFactory> { define_guid(0x2C2F9F0B, 0x8E02, 0x4F9C, 0xAC, 0x27, 0xEA, 0x6D, 0xAD, 0x5D, 0x3B, 0x50);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusObject> { define_guid(0xE8FD825E, 0xF73A, 0x490C, 0x88, 0x4, 0x4, 0xE0, 0x26, 0x64, 0x30, 0x47);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusObjectStoppedEventArgsFactory> { define_guid(0x6B22FD48, 0xD0A3, 0x4255, 0x95, 0x3A, 0x47, 0x72, 0xB4, 0x2, 0x80, 0x73);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynBusObjectStoppedEventArgs> { define_guid(0xDE102115, 0xEF8E, 0x4D42, 0xB9, 0x3B, 0xA2, 0xAE, 0x74, 0x51, 0x97, 0x66);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner> { define_guid(0x4DA817D2, 0xCD1D, 0x4023, 0xA7, 0xC4, 0x16, 0xDE, 0xF8, 0x9C, 0x28, 0xDF);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynProducerStoppedEventArgs> { define_guid(0x51309770, 0x4937, 0x492D, 0x80, 0x80, 0x23, 0x64, 0x39, 0x98, 0x7C, 0xEB);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynProducerStoppedEventArgsFactory> { define_guid(0x56529961, 0xB219, 0x4D6E, 0x9F, 0x78, 0xFA, 0x3F, 0x99, 0xFA, 0x8F, 0xE5);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynWatcherStoppedEventArgs> { define_guid(0xC9FCA03B, 0x701D, 0x4AA8, 0x97, 0xDD, 0xA2, 0xBB, 0xA, 0x8F, 0x5F, 0xA3);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynWatcherStoppedEventArgsFactory> { define_guid(0x878FA5A8, 0x2D50, 0x47E1, 0x90, 0x4A, 0x20, 0xBF, 0xD, 0x48, 0xC7, 0x82);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynServiceInfoRemovedEventArgs> { define_guid(0x3057A95F, 0x1D3F, 0x41F3, 0x89, 0x69, 0xE3, 0x27, 0x92, 0x62, 0x73, 0x96);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynServiceInfoRemovedEventArgsFactory> { define_guid(0xDBF8627, 0x9AFF, 0x4955, 0x92, 0x27, 0x69, 0x53, 0xBA, 0xF4, 0x15, 0x69);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynMessageInfo> { define_guid(0xFF2B0127, 0x2C12, 0x4859, 0xAA, 0x3A, 0xC7, 0x44, 0x61, 0xEE, 0x81, 0x4C);};
template<> struct uuid<Windows::Devices::AllJoyn::IAllJoynMessageInfoFactory> { define_guid(0x34664C2A, 0x8289, 0x43D4, 0xB4, 0xA8, 0x3F, 0x4D, 0xE3, 0x59, 0xF0, 0x43);};

// types

namespace Windows { namespace Devices { namespace AllJoyn {

// IAllJoynStatusStatics
struct IAllJoynStatusStatics : IInspectable {
	virtual STDMETHODIMP _get_Ok(int *value);
	virtual STDMETHODIMP _get_Fail(int *value);
	virtual STDMETHODIMP _get_OperationTimedOut(int *value);
	virtual STDMETHODIMP _get_OtherEndClosed(int *value);
	virtual STDMETHODIMP _get_ConnectionRefused(int *value);
	virtual STDMETHODIMP _get_AuthenticationFailed(int *value);
	virtual STDMETHODIMP _get_AuthenticationRejectedByUser(int *value);
	virtual STDMETHODIMP _get_SslConnectFailed(int *value);
	virtual STDMETHODIMP _get_SslIdentityVerificationFailed(int *value);
	virtual STDMETHODIMP _get_InsufficientSecurity(int *value);
	virtual STDMETHODIMP _get_InvalidArgument1(int *value);
	virtual STDMETHODIMP _get_InvalidArgument2(int *value);
	virtual STDMETHODIMP _get_InvalidArgument3(int *value);
	virtual STDMETHODIMP _get_InvalidArgument4(int *value);
	virtual STDMETHODIMP _get_InvalidArgument5(int *value);
	virtual STDMETHODIMP _get_InvalidArgument6(int *value);
	virtual STDMETHODIMP _get_InvalidArgument7(int *value);
	virtual STDMETHODIMP _get_InvalidArgument8(int *value);
};

// AllJoynStatus
template<typename> struct AllJoynStatus_statics {
	static struct _AuthenticationFailed : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_AuthenticationFailed(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} AuthenticationFailed;
	static struct _AuthenticationRejectedByUser : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_AuthenticationRejectedByUser(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} AuthenticationRejectedByUser;
	static struct _ConnectionRefused : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_ConnectionRefused(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} ConnectionRefused;
	static struct _Fail : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_Fail(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} Fail;
	static struct _InsufficientSecurity : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InsufficientSecurity(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InsufficientSecurity;
	static struct _InvalidArgument1 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument1(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument1;
	static struct _InvalidArgument2 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument2(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument2;
	static struct _InvalidArgument3 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument3(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument3;
	static struct _InvalidArgument4 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument4(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument4;
	static struct _InvalidArgument5 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument5(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument5;
	static struct _InvalidArgument6 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument6(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument6;
	static struct _InvalidArgument7 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument7(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument7;
	static struct _InvalidArgument8 : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_InvalidArgument8(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} InvalidArgument8;
	static struct _Ok : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_Ok(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} Ok;
	static struct _OperationTimedOut : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_OperationTimedOut(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} OperationTimedOut;
	static struct _OtherEndClosed : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_OtherEndClosed(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} OtherEndClosed;
	static struct _SslConnectFailed : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_SslConnectFailed(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} SslConnectFailed;
	static struct _SslIdentityVerificationFailed : property {
		int get() { int value; hrcheck(get_activation_factory<AllJoynStatus, IAllJoynStatusStatics>()->_get_SslIdentityVerificationFailed(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} SslIdentityVerificationFailed;
};
template<typename X> typename AllJoynStatus_statics<X>::_AuthenticationFailed AllJoynStatus_statics<X>::AuthenticationFailed;
template<typename X> typename AllJoynStatus_statics<X>::_AuthenticationRejectedByUser AllJoynStatus_statics<X>::AuthenticationRejectedByUser;
template<typename X> typename AllJoynStatus_statics<X>::_ConnectionRefused AllJoynStatus_statics<X>::ConnectionRefused;
template<typename X> typename AllJoynStatus_statics<X>::_Fail AllJoynStatus_statics<X>::Fail;
template<typename X> typename AllJoynStatus_statics<X>::_InsufficientSecurity AllJoynStatus_statics<X>::InsufficientSecurity;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument1 AllJoynStatus_statics<X>::InvalidArgument1;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument2 AllJoynStatus_statics<X>::InvalidArgument2;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument3 AllJoynStatus_statics<X>::InvalidArgument3;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument4 AllJoynStatus_statics<X>::InvalidArgument4;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument5 AllJoynStatus_statics<X>::InvalidArgument5;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument6 AllJoynStatus_statics<X>::InvalidArgument6;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument7 AllJoynStatus_statics<X>::InvalidArgument7;
template<typename X> typename AllJoynStatus_statics<X>::_InvalidArgument8 AllJoynStatus_statics<X>::InvalidArgument8;
template<typename X> typename AllJoynStatus_statics<X>::_Ok AllJoynStatus_statics<X>::Ok;
template<typename X> typename AllJoynStatus_statics<X>::_OperationTimedOut AllJoynStatus_statics<X>::OperationTimedOut;
template<typename X> typename AllJoynStatus_statics<X>::_OtherEndClosed AllJoynStatus_statics<X>::OtherEndClosed;
template<typename X> typename AllJoynStatus_statics<X>::_SslConnectFailed AllJoynStatus_statics<X>::SslConnectFailed;
template<typename X> typename AllJoynStatus_statics<X>::_SslIdentityVerificationFailed AllJoynStatus_statics<X>::SslIdentityVerificationFailed;

template<typename X> struct statics<AllJoynStatus, X> : X, Windows::Devices::AllJoyn::AllJoynStatus_statics<void> {
	typedef typename X::root_type AllJoynStatus;
};
struct AllJoynStatus : generate<AllJoynStatus> {};

// IAllJoynBusAttachment
struct IAllJoynBusAttachment_raw : IInspectable {
	virtual STDMETHODIMP _get_AboutData(AllJoynAboutData* *value);
	virtual STDMETHODIMP _get_ConnectionSpecification(HSTRING *value);
	virtual STDMETHODIMP _get_State(AllJoynBusAttachmentState *value);
	virtual STDMETHODIMP _get_UniqueName(HSTRING *value);
	virtual STDMETHODIMP _PingAsync(HSTRING uniqueName, Foundation::IAsyncOperation<int>* *operation);
	virtual STDMETHODIMP _Connect();
	virtual STDMETHODIMP _Disconnect();
	virtual STDMETHODIMP _add_StateChanged(Foundation::TypedEventHandler<AllJoynBusAttachment*, AllJoynBusAttachmentStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_AuthenticationMechanisms(Foundation::Collections::IVector<AllJoynAuthenticationMechanism>* *value);
	virtual STDMETHODIMP _add_CredentialsRequested(Foundation::TypedEventHandler<AllJoynBusAttachment*, AllJoynCredentialsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CredentialsRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CredentialsVerificationRequested(Foundation::TypedEventHandler<AllJoynBusAttachment*, AllJoynCredentialsVerificationRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CredentialsVerificationRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AuthenticationComplete(Foundation::TypedEventHandler<AllJoynBusAttachment*, AllJoynAuthenticationCompleteEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AuthenticationComplete(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAllJoynBusAttachment_adaptor : X {
	union {
		struct : property {
			ptr<AllJoynAboutData> get() { AllJoynAboutData* value; hrcheck(enc(&IAllJoynBusAttachment_adaptor::AboutData)->_get_AboutData(&value)); return from_abi(value); }
			ptr<AllJoynAboutData> operator()() { return get(); }
			operator ptr<AllJoynAboutData> () { return get(); }
			ptr<AllJoynAboutData> operator->() { return get(); }
		} AboutData;
		struct : property {
			ptr<Foundation::Collections::IVector<AllJoynAuthenticationMechanism>> get() { Foundation::Collections::IVector<AllJoynAuthenticationMechanism>* value; hrcheck(enc(&IAllJoynBusAttachment_adaptor::AuthenticationMechanisms)->_get_AuthenticationMechanisms(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<AllJoynAuthenticationMechanism>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<AllJoynAuthenticationMechanism>> () { return get(); }
			ptr<Foundation::Collections::IVector<AllJoynAuthenticationMechanism>> operator->() { return get(); }
		} AuthenticationMechanisms;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynBusAttachment_adaptor::ConnectionSpecification)->_get_ConnectionSpecification(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ConnectionSpecification;
		struct : property {
			AllJoynBusAttachmentState get() { AllJoynBusAttachmentState value; hrcheck(enc(&IAllJoynBusAttachment_adaptor::State)->_get_State(&value)); return value; }
			AllJoynBusAttachmentState operator()() { return get(); }
			operator AllJoynBusAttachmentState () { return get(); }
		} State;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynBusAttachment_adaptor::UniqueName)->_get_UniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UniqueName;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynBusAttachment>, ptr<AllJoynAuthenticationCompleteEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynBusAttachment_adaptor::AuthenticationComplete)->_add_AuthenticationComplete(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynBusAttachment_adaptor::AuthenticationComplete)->_remove_AuthenticationComplete(token)); }
		} AuthenticationComplete;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynBusAttachment>, ptr<AllJoynCredentialsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynBusAttachment_adaptor::CredentialsRequested)->_add_CredentialsRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynBusAttachment_adaptor::CredentialsRequested)->_remove_CredentialsRequested(token)); }
		} CredentialsRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynBusAttachment>, ptr<AllJoynCredentialsVerificationRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynBusAttachment_adaptor::CredentialsVerificationRequested)->_add_CredentialsVerificationRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynBusAttachment_adaptor::CredentialsVerificationRequested)->_remove_CredentialsVerificationRequested(token)); }
		} CredentialsVerificationRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynBusAttachment>, ptr<AllJoynBusAttachmentStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynBusAttachment_adaptor::StateChanged)->_add_StateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynBusAttachment_adaptor::StateChanged)->_remove_StateChanged(token)); }
		} StateChanged;
	};
	ptr<Foundation::IAsyncOperation<int>> PingAsync(hstring_ref uniqueName) { Foundation::IAsyncOperation<int>* operation; hrcheck(X::get()->_PingAsync(uniqueName, &operation)); return from_abi(operation); }
	void Connect() { hrcheck(X::get()->_Connect()); }
	void Disconnect() { hrcheck(X::get()->_Disconnect()); }
	IAllJoynBusAttachment_adaptor() {}
};
template<typename X> struct adapt<IAllJoynBusAttachment, X> : Windows::Devices::AllJoyn::IAllJoynBusAttachment_adaptor<X> { typedef adapt IAllJoynBusAttachment; };
struct IAllJoynBusAttachment : IAllJoynBusAttachment_raw, generate<IAllJoynBusAttachment> {};

// IAllJoynAboutData
struct IAllJoynAboutData_raw : IInspectable {
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEnabled(bool value);
	virtual STDMETHODIMP _get_DefaultAppName(HSTRING *value);
	virtual STDMETHODIMP _put_DefaultAppName(HSTRING value);
	virtual STDMETHODIMP _get_AppNames(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_DateOfManufacture(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_DateOfManufacture(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_DefaultDescription(HSTRING *value);
	virtual STDMETHODIMP _put_DefaultDescription(HSTRING value);
	virtual STDMETHODIMP _get_Descriptions(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_DefaultManufacturer(HSTRING *value);
	virtual STDMETHODIMP _put_DefaultManufacturer(HSTRING value);
	virtual STDMETHODIMP _get_Manufacturers(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_ModelNumber(HSTRING *value);
	virtual STDMETHODIMP _put_ModelNumber(HSTRING value);
	virtual STDMETHODIMP _get_SoftwareVersion(HSTRING *value);
	virtual STDMETHODIMP _put_SoftwareVersion(HSTRING value);
	virtual STDMETHODIMP _get_SupportUrl(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_SupportUrl(Foundation::Uri* value);
	virtual STDMETHODIMP _get_AppId(Platform::Guid *value);
	virtual STDMETHODIMP _put_AppId(Platform::Guid value);
};
template<typename X> struct IAllJoynAboutData_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IAllJoynAboutData_adaptor::AppId)->_get_AppId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
			void put(const Platform::Guid& value) { hrcheck(enc(&IAllJoynAboutData_adaptor::AppId)->_put_AppId(value)); }
			void operator=(const Platform::Guid& value) { put(value); }
			void operator()(const Platform::Guid& value) { put(value); }
		} AppId;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&IAllJoynAboutData_adaptor::AppNames)->_get_AppNames(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} AppNames;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAllJoynAboutData_adaptor::DateOfManufacture)->_get_DateOfManufacture(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IAllJoynAboutData_adaptor::DateOfManufacture)->_put_DateOfManufacture(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} DateOfManufacture;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutData_adaptor::DefaultAppName)->_get_DefaultAppName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAllJoynAboutData_adaptor::DefaultAppName)->_put_DefaultAppName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DefaultAppName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutData_adaptor::DefaultDescription)->_get_DefaultDescription(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAllJoynAboutData_adaptor::DefaultDescription)->_put_DefaultDescription(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DefaultDescription;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutData_adaptor::DefaultManufacturer)->_get_DefaultManufacturer(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAllJoynAboutData_adaptor::DefaultManufacturer)->_put_DefaultManufacturer(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DefaultManufacturer;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&IAllJoynAboutData_adaptor::Descriptions)->_get_Descriptions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} Descriptions;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAllJoynAboutData_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAllJoynAboutData_adaptor::IsEnabled)->_put_IsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEnabled;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&IAllJoynAboutData_adaptor::Manufacturers)->_get_Manufacturers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} Manufacturers;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutData_adaptor::ModelNumber)->_get_ModelNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAllJoynAboutData_adaptor::ModelNumber)->_put_ModelNumber(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ModelNumber;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutData_adaptor::SoftwareVersion)->_get_SoftwareVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAllJoynAboutData_adaptor::SoftwareVersion)->_put_SoftwareVersion(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SoftwareVersion;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAllJoynAboutData_adaptor::SupportUrl)->_get_SupportUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IAllJoynAboutData_adaptor::SupportUrl)->_put_SupportUrl(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} SupportUrl;
	};
	IAllJoynAboutData_adaptor() {}
};
template<typename X> struct adapt<IAllJoynAboutData, X> : Windows::Devices::AllJoyn::IAllJoynAboutData_adaptor<X> { typedef adapt IAllJoynAboutData; };
struct IAllJoynAboutData : IAllJoynAboutData_raw, generate<IAllJoynAboutData> {};

// AllJoynAboutData
template<typename X> struct statics<AllJoynAboutData, X> : X {
	typedef typename X::root_type AllJoynAboutData;
};
struct AllJoynAboutData : generate<AllJoynAboutData> {};

// IAllJoynBusAttachmentStatics
struct IAllJoynBusAttachmentStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(AllJoynBusAttachment* *defaultBusAttachment);
	virtual STDMETHODIMP _GetWatcher(Foundation::Collections::IIterable<HSTRING>* requiredInterfaces, Enumeration::DeviceWatcher* *deviceWatcher);
};

// IAllJoynBusAttachmentFactory
struct IAllJoynBusAttachmentFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING connectionSpecification, AllJoynBusAttachment* *result);
};

// IAllJoynBusAttachment2
struct IAllJoynBusAttachment2_raw : IInspectable {
	virtual STDMETHODIMP _GetAboutDataAsync(AllJoynServiceInfo* serviceInfo, Foundation::IAsyncOperation<AllJoynAboutDataView*>* *operation);
	virtual STDMETHODIMP _GetAboutDataWithLanguageAsync(AllJoynServiceInfo* serviceInfo, Globalization::Language* language, Foundation::IAsyncOperation<AllJoynAboutDataView*>* *operation);
	virtual STDMETHODIMP _add_AcceptSessionJoinerRequested(Foundation::TypedEventHandler<AllJoynBusAttachment*, AllJoynAcceptSessionJoinerEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AcceptSessionJoinerRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SessionJoined(Foundation::TypedEventHandler<AllJoynBusAttachment*, AllJoynSessionJoinedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SessionJoined(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAllJoynBusAttachment2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynBusAttachment>, ptr<AllJoynAcceptSessionJoinerEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynBusAttachment2_adaptor::AcceptSessionJoinerRequested)->_add_AcceptSessionJoinerRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynBusAttachment2_adaptor::AcceptSessionJoinerRequested)->_remove_AcceptSessionJoinerRequested(token)); }
		} AcceptSessionJoinerRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynBusAttachment>, ptr<AllJoynSessionJoinedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynBusAttachment2_adaptor::SessionJoined)->_add_SessionJoined(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynBusAttachment2_adaptor::SessionJoined)->_remove_SessionJoined(token)); }
		} SessionJoined;
	};
	ptr<Foundation::IAsyncOperation<ptr<AllJoynAboutDataView>>> GetAboutDataAsync(pptr<AllJoynServiceInfo> serviceInfo) { Foundation::IAsyncOperation<AllJoynAboutDataView*>* operation; hrcheck(X::get()->_GetAboutDataAsync(serviceInfo, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<AllJoynAboutDataView>>> GetAboutDataAsync(pptr<AllJoynServiceInfo> serviceInfo, pptr<Globalization::Language> language) { Foundation::IAsyncOperation<AllJoynAboutDataView*>* operation; hrcheck(X::get()->_GetAboutDataWithLanguageAsync(serviceInfo, language, &operation)); return from_abi(operation); }
	IAllJoynBusAttachment2_adaptor() {}
};
template<typename X> struct adapt<IAllJoynBusAttachment2, X> : Windows::Devices::AllJoyn::IAllJoynBusAttachment2_adaptor<X> { typedef adapt IAllJoynBusAttachment2; };
struct IAllJoynBusAttachment2 : IAllJoynBusAttachment2_raw, generate<IAllJoynBusAttachment2> {};

// AllJoynBusAttachment
template<typename> struct AllJoynBusAttachment_statics {
	static ptr<AllJoynBusAttachment> GetDefault() { AllJoynBusAttachment* defaultBusAttachment; hrcheck(get_activation_factory<AllJoynBusAttachment, IAllJoynBusAttachmentStatics>()->_GetDefault(&defaultBusAttachment)); return from_abi(defaultBusAttachment); }
	static ptr<Enumeration::DeviceWatcher> GetWatcher(pptr<Foundation::Collections::IIterable<hstring>> requiredInterfaces) { Enumeration::DeviceWatcher* deviceWatcher; hrcheck(get_activation_factory<AllJoynBusAttachment, IAllJoynBusAttachmentStatics>()->_GetWatcher(to_abi(requiredInterfaces), &deviceWatcher)); return from_abi(deviceWatcher); }
	static AllJoynBusAttachment *activate() { AllJoynBusAttachment *t; get_activation_factory<AllJoynBusAttachment>()->ActivateInstance((IInspectable**)&t); return t; }
	static AllJoynBusAttachment *activate(hstring_ref connectionSpecification) { AllJoynBusAttachment *result; hrcheck(get_activation_factory<AllJoynBusAttachment, IAllJoynBusAttachmentFactory>()->_Create(connectionSpecification, &result)); return result; }
};

template<typename X> struct statics<AllJoynBusAttachment, X> : X, Windows::Devices::AllJoyn::AllJoynBusAttachment_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynBusAttachment_statics<void>::activate;
	typedef typename X::root_type AllJoynBusAttachment;
};
struct AllJoynBusAttachment : generate<AllJoynBusAttachment> {
	using IAllJoynBusAttachment2::GetAboutDataAsync;
};

// IAllJoynBusAttachmentStateChangedEventArgs
struct IAllJoynBusAttachmentStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(AllJoynBusAttachmentState *value);
	virtual STDMETHODIMP _get_Status(int *value);
};
template<typename X> struct IAllJoynBusAttachmentStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			AllJoynBusAttachmentState get() { AllJoynBusAttachmentState value; hrcheck(enc(&IAllJoynBusAttachmentStateChangedEventArgs_adaptor::State)->_get_State(&value)); return value; }
			AllJoynBusAttachmentState operator()() { return get(); }
			operator AllJoynBusAttachmentState () { return get(); }
		} State;
		struct : property {
			int get() { int value; hrcheck(enc(&IAllJoynBusAttachmentStateChangedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Status;
	};
	IAllJoynBusAttachmentStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynBusAttachmentStateChangedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynBusAttachmentStateChangedEventArgs_adaptor<X> { typedef adapt IAllJoynBusAttachmentStateChangedEventArgs; };
struct IAllJoynBusAttachmentStateChangedEventArgs : IAllJoynBusAttachmentStateChangedEventArgs_raw, generate<IAllJoynBusAttachmentStateChangedEventArgs> {};

// AllJoynBusAttachmentStateChangedEventArgs
template<typename X> struct statics<AllJoynBusAttachmentStateChangedEventArgs, X> : X {
	typedef typename X::root_type AllJoynBusAttachmentStateChangedEventArgs;
};
struct AllJoynBusAttachmentStateChangedEventArgs : generate<AllJoynBusAttachmentStateChangedEventArgs> {};

// IAllJoynCredentialsRequestedEventArgs
struct IAllJoynCredentialsRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AttemptCount(unsigned short *value);
	virtual STDMETHODIMP _get_Credentials(AllJoynCredentials* *value);
	virtual STDMETHODIMP _get_PeerUniqueName(HSTRING *value);
	virtual STDMETHODIMP _get_RequestedUserName(HSTRING *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *result);
};
template<typename X> struct IAllJoynCredentialsRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IAllJoynCredentialsRequestedEventArgs_adaptor::AttemptCount)->_get_AttemptCount(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} AttemptCount;
		struct : property {
			ptr<AllJoynCredentials> get() { AllJoynCredentials* value; hrcheck(enc(&IAllJoynCredentialsRequestedEventArgs_adaptor::Credentials)->_get_Credentials(&value)); return from_abi(value); }
			ptr<AllJoynCredentials> operator()() { return get(); }
			operator ptr<AllJoynCredentials> () { return get(); }
			ptr<AllJoynCredentials> operator->() { return get(); }
		} Credentials;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynCredentialsRequestedEventArgs_adaptor::PeerUniqueName)->_get_PeerUniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PeerUniqueName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynCredentialsRequestedEventArgs_adaptor::RequestedUserName)->_get_RequestedUserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RequestedUserName;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
	IAllJoynCredentialsRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynCredentialsRequestedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynCredentialsRequestedEventArgs_adaptor<X> { typedef adapt IAllJoynCredentialsRequestedEventArgs; };
struct IAllJoynCredentialsRequestedEventArgs : IAllJoynCredentialsRequestedEventArgs_raw, generate<IAllJoynCredentialsRequestedEventArgs> {};

// AllJoynCredentialsRequestedEventArgs
template<typename X> struct statics<AllJoynCredentialsRequestedEventArgs, X> : X {
	typedef typename X::root_type AllJoynCredentialsRequestedEventArgs;
};
struct AllJoynCredentialsRequestedEventArgs : generate<AllJoynCredentialsRequestedEventArgs> {};

// IAllJoynCredentialsVerificationRequestedEventArgs
struct IAllJoynCredentialsVerificationRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AuthenticationMechanism(AllJoynAuthenticationMechanism *value);
	virtual STDMETHODIMP _get_PeerUniqueName(HSTRING *value);
	virtual STDMETHODIMP _get_PeerCertificate(Security::Cryptography::Certificates::Certificate* *value);
	virtual STDMETHODIMP _get_PeerCertificateErrorSeverity(Networking::Sockets::SocketSslErrorSeverity *value);
	virtual STDMETHODIMP _get_PeerCertificateErrors(Foundation::Collections::IVectorView<Security::Cryptography::Certificates::ChainValidationResult>* *value);
	virtual STDMETHODIMP _get_PeerIntermediateCertificates(Foundation::Collections::IVectorView<Security::Cryptography::Certificates::Certificate*>* *value);
	virtual STDMETHODIMP _Accept();
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *result);
};
template<typename X> struct IAllJoynCredentialsVerificationRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			AllJoynAuthenticationMechanism get() { AllJoynAuthenticationMechanism value; hrcheck(enc(&IAllJoynCredentialsVerificationRequestedEventArgs_adaptor::AuthenticationMechanism)->_get_AuthenticationMechanism(&value)); return value; }
			AllJoynAuthenticationMechanism operator()() { return get(); }
			operator AllJoynAuthenticationMechanism () { return get(); }
		} AuthenticationMechanism;
		struct : property {
			ptr<Security::Cryptography::Certificates::Certificate> get() { Security::Cryptography::Certificates::Certificate* value; hrcheck(enc(&IAllJoynCredentialsVerificationRequestedEventArgs_adaptor::PeerCertificate)->_get_PeerCertificate(&value)); return from_abi(value); }
			ptr<Security::Cryptography::Certificates::Certificate> operator()() { return get(); }
			operator ptr<Security::Cryptography::Certificates::Certificate> () { return get(); }
			ptr<Security::Cryptography::Certificates::Certificate> operator->() { return get(); }
		} PeerCertificate;
		struct : property {
			Networking::Sockets::SocketSslErrorSeverity get() { Networking::Sockets::SocketSslErrorSeverity value; hrcheck(enc(&IAllJoynCredentialsVerificationRequestedEventArgs_adaptor::PeerCertificateErrorSeverity)->_get_PeerCertificateErrorSeverity(&value)); return value; }
			Networking::Sockets::SocketSslErrorSeverity operator()() { return get(); }
			operator Networking::Sockets::SocketSslErrorSeverity () { return get(); }
		} PeerCertificateErrorSeverity;
		struct : property {
			ptr<Foundation::Collections::IVectorView<Security::Cryptography::Certificates::ChainValidationResult>> get() { Foundation::Collections::IVectorView<Security::Cryptography::Certificates::ChainValidationResult>* value; hrcheck(enc(&IAllJoynCredentialsVerificationRequestedEventArgs_adaptor::PeerCertificateErrors)->_get_PeerCertificateErrors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<Security::Cryptography::Certificates::ChainValidationResult>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<Security::Cryptography::Certificates::ChainValidationResult>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<Security::Cryptography::Certificates::ChainValidationResult>> operator->() { return get(); }
		} PeerCertificateErrors;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> get() { Foundation::Collections::IVectorView<Security::Cryptography::Certificates::Certificate*>* value; hrcheck(enc(&IAllJoynCredentialsVerificationRequestedEventArgs_adaptor::PeerIntermediateCertificates)->_get_PeerIntermediateCertificates(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> operator->() { return get(); }
		} PeerIntermediateCertificates;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynCredentialsVerificationRequestedEventArgs_adaptor::PeerUniqueName)->_get_PeerUniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PeerUniqueName;
	};
	void Accept() { hrcheck(X::get()->_Accept()); }
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
	IAllJoynCredentialsVerificationRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynCredentialsVerificationRequestedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynCredentialsVerificationRequestedEventArgs_adaptor<X> { typedef adapt IAllJoynCredentialsVerificationRequestedEventArgs; };
struct IAllJoynCredentialsVerificationRequestedEventArgs : IAllJoynCredentialsVerificationRequestedEventArgs_raw, generate<IAllJoynCredentialsVerificationRequestedEventArgs> {};

// AllJoynCredentialsVerificationRequestedEventArgs
template<typename X> struct statics<AllJoynCredentialsVerificationRequestedEventArgs, X> : X {
	typedef typename X::root_type AllJoynCredentialsVerificationRequestedEventArgs;
};
struct AllJoynCredentialsVerificationRequestedEventArgs : generate<AllJoynCredentialsVerificationRequestedEventArgs> {};

// IAllJoynAuthenticationCompleteEventArgs
struct IAllJoynAuthenticationCompleteEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AuthenticationMechanism(AllJoynAuthenticationMechanism *value);
	virtual STDMETHODIMP _get_PeerUniqueName(HSTRING *value);
	virtual STDMETHODIMP _get_Succeeded(bool *value);
};
template<typename X> struct IAllJoynAuthenticationCompleteEventArgs_adaptor : X {
	union {
		struct : property {
			AllJoynAuthenticationMechanism get() { AllJoynAuthenticationMechanism value; hrcheck(enc(&IAllJoynAuthenticationCompleteEventArgs_adaptor::AuthenticationMechanism)->_get_AuthenticationMechanism(&value)); return value; }
			AllJoynAuthenticationMechanism operator()() { return get(); }
			operator AllJoynAuthenticationMechanism () { return get(); }
		} AuthenticationMechanism;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAuthenticationCompleteEventArgs_adaptor::PeerUniqueName)->_get_PeerUniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PeerUniqueName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAllJoynAuthenticationCompleteEventArgs_adaptor::Succeeded)->_get_Succeeded(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Succeeded;
	};
	IAllJoynAuthenticationCompleteEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynAuthenticationCompleteEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynAuthenticationCompleteEventArgs_adaptor<X> { typedef adapt IAllJoynAuthenticationCompleteEventArgs; };
struct IAllJoynAuthenticationCompleteEventArgs : IAllJoynAuthenticationCompleteEventArgs_raw, generate<IAllJoynAuthenticationCompleteEventArgs> {};

// AllJoynAuthenticationCompleteEventArgs
template<typename X> struct statics<AllJoynAuthenticationCompleteEventArgs, X> : X {
	typedef typename X::root_type AllJoynAuthenticationCompleteEventArgs;
};
struct AllJoynAuthenticationCompleteEventArgs : generate<AllJoynAuthenticationCompleteEventArgs> {};

// IAllJoynServiceInfoStatics
struct IAllJoynServiceInfoStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<AllJoynServiceInfo*>* *operation);
};

// IAllJoynServiceInfoFactory
struct IAllJoynServiceInfoFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING uniqueName, HSTRING objectPath, unsigned short sessionPort, AllJoynServiceInfo* *result);
};

// IAllJoynServiceInfo
struct IAllJoynServiceInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_UniqueName(HSTRING *value);
	virtual STDMETHODIMP _get_ObjectPath(HSTRING *value);
	virtual STDMETHODIMP _get_SessionPort(unsigned short *value);
};
template<typename X> struct IAllJoynServiceInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynServiceInfo_adaptor::ObjectPath)->_get_ObjectPath(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ObjectPath;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IAllJoynServiceInfo_adaptor::SessionPort)->_get_SessionPort(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} SessionPort;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynServiceInfo_adaptor::UniqueName)->_get_UniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UniqueName;
	};
	IAllJoynServiceInfo_adaptor() {}
};
template<typename X> struct adapt<IAllJoynServiceInfo, X> : Windows::Devices::AllJoyn::IAllJoynServiceInfo_adaptor<X> { typedef adapt IAllJoynServiceInfo; };
struct IAllJoynServiceInfo : IAllJoynServiceInfo_raw, generate<IAllJoynServiceInfo> {};

// AllJoynServiceInfo
template<typename> struct AllJoynServiceInfo_statics {
	static ptr<Foundation::IAsyncOperation<ptr<AllJoynServiceInfo>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<AllJoynServiceInfo*>* operation; hrcheck(get_activation_factory<AllJoynServiceInfo, IAllJoynServiceInfoStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static AllJoynServiceInfo *activate(hstring_ref uniqueName, hstring_ref objectPath, unsigned short sessionPort) { AllJoynServiceInfo *result; hrcheck(get_activation_factory<AllJoynServiceInfo, IAllJoynServiceInfoFactory>()->_Create(uniqueName, objectPath, sessionPort, &result)); return result; }
};

template<typename X> struct statics<AllJoynServiceInfo, X> : X, Windows::Devices::AllJoyn::AllJoynServiceInfo_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynServiceInfo_statics<void>::activate;
	typedef typename X::root_type AllJoynServiceInfo;
};
struct AllJoynServiceInfo : generate<AllJoynServiceInfo> {};

// IAllJoynAboutDataViewStatics
struct IAllJoynAboutDataViewStatics : IInspectable {
	virtual STDMETHODIMP _GetDataBySessionPortAsync(HSTRING uniqueName, AllJoynBusAttachment* busAttachment, unsigned short sessionPort, Foundation::IAsyncOperation<AllJoynAboutDataView*>* *operation);
	virtual STDMETHODIMP _GetDataBySessionPortWithLanguageAsync(HSTRING uniqueName, AllJoynBusAttachment* busAttachment, unsigned short sessionPort, Globalization::Language* language, Foundation::IAsyncOperation<AllJoynAboutDataView*>* *operation);
};

// IAllJoynAboutDataView
struct IAllJoynAboutDataView_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(int *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
	virtual STDMETHODIMP _get_AJSoftwareVersion(HSTRING *value);
	virtual STDMETHODIMP _get_AppId(Platform::Guid *value);
	virtual STDMETHODIMP _get_DateOfManufacture(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_DefaultLanguage(Globalization::Language* *value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_HardwareVersion(HSTRING *value);
	virtual STDMETHODIMP _get_ModelNumber(HSTRING *value);
	virtual STDMETHODIMP _get_SoftwareVersion(HSTRING *value);
	virtual STDMETHODIMP _get_SupportedLanguages(Foundation::Collections::IVectorView<Globalization::Language*>* *value);
	virtual STDMETHODIMP _get_SupportUrl(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_AppName(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceName(HSTRING *value);
	virtual STDMETHODIMP _get_Manufacturer(HSTRING *value);
};
template<typename X> struct IAllJoynAboutDataView_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::AJSoftwareVersion)->_get_AJSoftwareVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AJSoftwareVersion;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::AppId)->_get_AppId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} AppId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::AppName)->_get_AppName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppName;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::DateOfManufacture)->_get_DateOfManufacture(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} DateOfManufacture;
		struct : property {
			ptr<Globalization::Language> get() { Globalization::Language* value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::DefaultLanguage)->_get_DefaultLanguage(&value)); return from_abi(value); }
			ptr<Globalization::Language> operator()() { return get(); }
			operator ptr<Globalization::Language> () { return get(); }
			ptr<Globalization::Language> operator->() { return get(); }
		} DefaultLanguage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::DeviceName)->_get_DeviceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::HardwareVersion)->_get_HardwareVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} HardwareVersion;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::Manufacturer)->_get_Manufacturer(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Manufacturer;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::ModelNumber)->_get_ModelNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ModelNumber;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::SoftwareVersion)->_get_SoftwareVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SoftwareVersion;
		struct : property {
			int get() { int value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::Status)->_get_Status(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Status;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::SupportUrl)->_get_SupportUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} SupportUrl;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Globalization::Language>>> get() { Foundation::Collections::IVectorView<Globalization::Language*>* value; hrcheck(enc(&IAllJoynAboutDataView_adaptor::SupportedLanguages)->_get_SupportedLanguages(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Globalization::Language>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Globalization::Language>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Globalization::Language>>> operator->() { return get(); }
		} SupportedLanguages;
	};
	IAllJoynAboutDataView_adaptor() {}
};
template<typename X> struct adapt<IAllJoynAboutDataView, X> : Windows::Devices::AllJoyn::IAllJoynAboutDataView_adaptor<X> { typedef adapt IAllJoynAboutDataView; };
struct IAllJoynAboutDataView : IAllJoynAboutDataView_raw, generate<IAllJoynAboutDataView> {};

// AllJoynAboutDataView
template<typename> struct AllJoynAboutDataView_statics {
	static ptr<Foundation::IAsyncOperation<ptr<AllJoynAboutDataView>>> GetDataBySessionPortAsync(hstring_ref uniqueName, pptr<AllJoynBusAttachment> busAttachment, unsigned short sessionPort) { Foundation::IAsyncOperation<AllJoynAboutDataView*>* operation; hrcheck(get_activation_factory<AllJoynAboutDataView, IAllJoynAboutDataViewStatics>()->_GetDataBySessionPortAsync(uniqueName, busAttachment, sessionPort, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<AllJoynAboutDataView>>> GetDataBySessionPortAsync(hstring_ref uniqueName, pptr<AllJoynBusAttachment> busAttachment, unsigned short sessionPort, pptr<Globalization::Language> language) { Foundation::IAsyncOperation<AllJoynAboutDataView*>* operation; hrcheck(get_activation_factory<AllJoynAboutDataView, IAllJoynAboutDataViewStatics>()->_GetDataBySessionPortWithLanguageAsync(uniqueName, busAttachment, sessionPort, language, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<AllJoynAboutDataView, X> : X, Windows::Devices::AllJoyn::AllJoynAboutDataView_statics<void> {
	typedef typename X::root_type AllJoynAboutDataView;
};
struct AllJoynAboutDataView : generate<AllJoynAboutDataView> {};

// IAllJoynAcceptSessionJoinerEventArgsFactory
struct IAllJoynAcceptSessionJoinerEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING uniqueName, unsigned short sessionPort, AllJoynTrafficType trafficType, unsigned char proximity, IAllJoynAcceptSessionJoiner* acceptSessionJoiner, AllJoynAcceptSessionJoinerEventArgs* *result);
};

// IAllJoynAcceptSessionJoinerEventArgs
struct IAllJoynAcceptSessionJoinerEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_UniqueName(HSTRING *value);
	virtual STDMETHODIMP _get_SessionPort(unsigned short *value);
	virtual STDMETHODIMP _get_TrafficType(AllJoynTrafficType *value);
	virtual STDMETHODIMP _get_SamePhysicalNode(bool *value);
	virtual STDMETHODIMP _get_SameNetwork(bool *value);
	virtual STDMETHODIMP _Accept();
};
template<typename X> struct IAllJoynAcceptSessionJoinerEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAllJoynAcceptSessionJoinerEventArgs_adaptor::SameNetwork)->_get_SameNetwork(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SameNetwork;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAllJoynAcceptSessionJoinerEventArgs_adaptor::SamePhysicalNode)->_get_SamePhysicalNode(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SamePhysicalNode;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IAllJoynAcceptSessionJoinerEventArgs_adaptor::SessionPort)->_get_SessionPort(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} SessionPort;
		struct : property {
			AllJoynTrafficType get() { AllJoynTrafficType value; hrcheck(enc(&IAllJoynAcceptSessionJoinerEventArgs_adaptor::TrafficType)->_get_TrafficType(&value)); return value; }
			AllJoynTrafficType operator()() { return get(); }
			operator AllJoynTrafficType () { return get(); }
		} TrafficType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynAcceptSessionJoinerEventArgs_adaptor::UniqueName)->_get_UniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UniqueName;
	};
	void Accept() { hrcheck(X::get()->_Accept()); }
	IAllJoynAcceptSessionJoinerEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynAcceptSessionJoinerEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoinerEventArgs_adaptor<X> { typedef adapt IAllJoynAcceptSessionJoinerEventArgs; };
struct IAllJoynAcceptSessionJoinerEventArgs : IAllJoynAcceptSessionJoinerEventArgs_raw, generate<IAllJoynAcceptSessionJoinerEventArgs> {};

// AllJoynAcceptSessionJoinerEventArgs
template<typename> struct AllJoynAcceptSessionJoinerEventArgs_statics {
	static AllJoynAcceptSessionJoinerEventArgs *activate(hstring_ref uniqueName, unsigned short sessionPort, AllJoynTrafficType trafficType, unsigned char proximity, pptr<IAllJoynAcceptSessionJoiner> acceptSessionJoiner) { AllJoynAcceptSessionJoinerEventArgs *result; hrcheck(get_activation_factory<AllJoynAcceptSessionJoinerEventArgs, IAllJoynAcceptSessionJoinerEventArgsFactory>()->_Create(uniqueName, sessionPort, trafficType, proximity, acceptSessionJoiner, &result)); return result; }
};

template<typename X> struct statics<AllJoynAcceptSessionJoinerEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynAcceptSessionJoinerEventArgs;
};
struct AllJoynAcceptSessionJoinerEventArgs : generate<AllJoynAcceptSessionJoinerEventArgs> {};

// IAllJoynSessionJoinedEventArgsFactory
struct IAllJoynSessionJoinedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(AllJoynSession* session, AllJoynSessionJoinedEventArgs* *result);
};

// IAllJoynSessionJoinedEventArgs
struct IAllJoynSessionJoinedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Session(AllJoynSession* *value);
};
template<typename X> struct IAllJoynSessionJoinedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AllJoynSession> get() { AllJoynSession* value; hrcheck(enc(&IAllJoynSessionJoinedEventArgs_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<AllJoynSession> operator()() { return get(); }
			operator ptr<AllJoynSession> () { return get(); }
			ptr<AllJoynSession> operator->() { return get(); }
		} Session;
	};
	IAllJoynSessionJoinedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynSessionJoinedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynSessionJoinedEventArgs_adaptor<X> { typedef adapt IAllJoynSessionJoinedEventArgs; };
struct IAllJoynSessionJoinedEventArgs : IAllJoynSessionJoinedEventArgs_raw, generate<IAllJoynSessionJoinedEventArgs> {};

// AllJoynSessionJoinedEventArgs
template<typename> struct AllJoynSessionJoinedEventArgs_statics {
	static AllJoynSessionJoinedEventArgs *activate(pptr<AllJoynSession> session) { AllJoynSessionJoinedEventArgs *result; hrcheck(get_activation_factory<AllJoynSessionJoinedEventArgs, IAllJoynSessionJoinedEventArgsFactory>()->_Create(session, &result)); return result; }
};

template<typename X> struct statics<AllJoynSessionJoinedEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynSessionJoinedEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynSessionJoinedEventArgs;
};
struct AllJoynSessionJoinedEventArgs : generate<AllJoynSessionJoinedEventArgs> {};

// IAllJoynCredentials
struct IAllJoynCredentials_raw : IInspectable {
	virtual STDMETHODIMP _get_AuthenticationMechanism(AllJoynAuthenticationMechanism *value);
	virtual STDMETHODIMP _get_Certificate(Security::Cryptography::Certificates::Certificate* *value);
	virtual STDMETHODIMP _put_Certificate(Security::Cryptography::Certificates::Certificate* value);
	virtual STDMETHODIMP _get_PasswordCredential(Security::Credentials::PasswordCredential* *value);
	virtual STDMETHODIMP _put_PasswordCredential(Security::Credentials::PasswordCredential* value);
	virtual STDMETHODIMP _get_Timeout(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_Timeout(Foundation::TimeSpan value);
};
template<typename X> struct IAllJoynCredentials_adaptor : X {
	union {
		struct : property {
			AllJoynAuthenticationMechanism get() { AllJoynAuthenticationMechanism value; hrcheck(enc(&IAllJoynCredentials_adaptor::AuthenticationMechanism)->_get_AuthenticationMechanism(&value)); return value; }
			AllJoynAuthenticationMechanism operator()() { return get(); }
			operator AllJoynAuthenticationMechanism () { return get(); }
		} AuthenticationMechanism;
		struct : property {
			ptr<Security::Cryptography::Certificates::Certificate> get() { Security::Cryptography::Certificates::Certificate* value; hrcheck(enc(&IAllJoynCredentials_adaptor::Certificate)->_get_Certificate(&value)); return from_abi(value); }
			ptr<Security::Cryptography::Certificates::Certificate> operator()() { return get(); }
			operator ptr<Security::Cryptography::Certificates::Certificate> () { return get(); }
			ptr<Security::Cryptography::Certificates::Certificate> operator->() { return get(); }
			void put(pptr<Security::Cryptography::Certificates::Certificate> value) { hrcheck(enc(&IAllJoynCredentials_adaptor::Certificate)->_put_Certificate(value)); }
			void operator=(pptr<Security::Cryptography::Certificates::Certificate> value) { put(value); }
			void operator()(pptr<Security::Cryptography::Certificates::Certificate> value) { put(value); }
		} Certificate;
		struct : property {
			ptr<Security::Credentials::PasswordCredential> get() { Security::Credentials::PasswordCredential* value; hrcheck(enc(&IAllJoynCredentials_adaptor::PasswordCredential)->_get_PasswordCredential(&value)); return from_abi(value); }
			ptr<Security::Credentials::PasswordCredential> operator()() { return get(); }
			operator ptr<Security::Credentials::PasswordCredential> () { return get(); }
			ptr<Security::Credentials::PasswordCredential> operator->() { return get(); }
			void put(pptr<Security::Credentials::PasswordCredential> value) { hrcheck(enc(&IAllJoynCredentials_adaptor::PasswordCredential)->_put_PasswordCredential(value)); }
			void operator=(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
			void operator()(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
		} PasswordCredential;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAllJoynCredentials_adaptor::Timeout)->_get_Timeout(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IAllJoynCredentials_adaptor::Timeout)->_put_Timeout(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} Timeout;
	};
	IAllJoynCredentials_adaptor() {}
};
template<typename X> struct adapt<IAllJoynCredentials, X> : Windows::Devices::AllJoyn::IAllJoynCredentials_adaptor<X> { typedef adapt IAllJoynCredentials; };
struct IAllJoynCredentials : IAllJoynCredentials_raw, generate<IAllJoynCredentials> {};

// AllJoynCredentials
template<typename X> struct statics<AllJoynCredentials, X> : X {
	typedef typename X::root_type AllJoynCredentials;
};
struct AllJoynCredentials : generate<AllJoynCredentials> {};

// IAllJoynSession
struct IAllJoynSession_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(int *value);
	virtual STDMETHODIMP _get_Status(int *value);
	virtual STDMETHODIMP _RemoveMemberAsync(HSTRING uniqueName, Foundation::IAsyncOperation<int>* *operation);
	virtual STDMETHODIMP _add_MemberAdded(Foundation::TypedEventHandler<AllJoynSession*, AllJoynSessionMemberAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MemberAdded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MemberRemoved(Foundation::TypedEventHandler<AllJoynSession*, AllJoynSessionMemberRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MemberRemoved(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Lost(Foundation::TypedEventHandler<AllJoynSession*, AllJoynSessionLostEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Lost(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAllJoynSession_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IAllJoynSession_adaptor::Id)->_get_Id(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Id;
		struct : property {
			int get() { int value; hrcheck(enc(&IAllJoynSession_adaptor::Status)->_get_Status(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynSession>, ptr<AllJoynSessionLostEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynSession_adaptor::Lost)->_add_Lost(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynSession_adaptor::Lost)->_remove_Lost(token)); }
		} Lost;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynSession>, ptr<AllJoynSessionMemberAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynSession_adaptor::MemberAdded)->_add_MemberAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynSession_adaptor::MemberAdded)->_remove_MemberAdded(token)); }
		} MemberAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynSession>, ptr<AllJoynSessionMemberRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynSession_adaptor::MemberRemoved)->_add_MemberRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynSession_adaptor::MemberRemoved)->_remove_MemberRemoved(token)); }
		} MemberRemoved;
	};
	ptr<Foundation::IAsyncOperation<int>> RemoveMemberAsync(hstring_ref uniqueName) { Foundation::IAsyncOperation<int>* operation; hrcheck(X::get()->_RemoveMemberAsync(uniqueName, &operation)); return from_abi(operation); }
	IAllJoynSession_adaptor() {}
};
template<typename X> struct adapt<IAllJoynSession, X> : Windows::Devices::AllJoyn::IAllJoynSession_adaptor<X> { typedef adapt IAllJoynSession; };
struct IAllJoynSession : IAllJoynSession_raw, generate<IAllJoynSession> {};

// IAllJoynSessionStatics
struct IAllJoynSessionStatics : IInspectable {
	virtual STDMETHODIMP _GetFromServiceInfoAsync(AllJoynServiceInfo* serviceInfo, Foundation::IAsyncOperation<AllJoynSession*>* *operation);
	virtual STDMETHODIMP _GetFromServiceInfoAndBusAttachmentAsync(AllJoynServiceInfo* serviceInfo, AllJoynBusAttachment* busAttachment, Foundation::IAsyncOperation<AllJoynSession*>* *operation);
};

// AllJoynSession
template<typename> struct AllJoynSession_statics {
	static ptr<Foundation::IAsyncOperation<ptr<AllJoynSession>>> GetFromServiceInfoAsync(pptr<AllJoynServiceInfo> serviceInfo) { Foundation::IAsyncOperation<AllJoynSession*>* operation; hrcheck(get_activation_factory<AllJoynSession, IAllJoynSessionStatics>()->_GetFromServiceInfoAsync(serviceInfo, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<AllJoynSession>>> GetFromServiceInfoAsync(pptr<AllJoynServiceInfo> serviceInfo, pptr<AllJoynBusAttachment> busAttachment) { Foundation::IAsyncOperation<AllJoynSession*>* operation; hrcheck(get_activation_factory<AllJoynSession, IAllJoynSessionStatics>()->_GetFromServiceInfoAndBusAttachmentAsync(serviceInfo, busAttachment, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<AllJoynSession, X> : X, Windows::Devices::AllJoyn::AllJoynSession_statics<void> {
	typedef typename X::root_type AllJoynSession;
};
struct AllJoynSession : generate<AllJoynSession> {};

// IAllJoynSessionMemberAddedEventArgsFactory
struct IAllJoynSessionMemberAddedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING uniqueName, AllJoynSessionMemberAddedEventArgs* *result);
};

// IAllJoynSessionMemberAddedEventArgs
struct IAllJoynSessionMemberAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_UniqueName(HSTRING *value);
};
template<typename X> struct IAllJoynSessionMemberAddedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynSessionMemberAddedEventArgs_adaptor::UniqueName)->_get_UniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UniqueName;
	};
	IAllJoynSessionMemberAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynSessionMemberAddedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynSessionMemberAddedEventArgs_adaptor<X> { typedef adapt IAllJoynSessionMemberAddedEventArgs; };
struct IAllJoynSessionMemberAddedEventArgs : IAllJoynSessionMemberAddedEventArgs_raw, generate<IAllJoynSessionMemberAddedEventArgs> {};

// AllJoynSessionMemberAddedEventArgs
template<typename> struct AllJoynSessionMemberAddedEventArgs_statics {
	static AllJoynSessionMemberAddedEventArgs *activate(hstring_ref uniqueName) { AllJoynSessionMemberAddedEventArgs *result; hrcheck(get_activation_factory<AllJoynSessionMemberAddedEventArgs, IAllJoynSessionMemberAddedEventArgsFactory>()->_Create(uniqueName, &result)); return result; }
};

template<typename X> struct statics<AllJoynSessionMemberAddedEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynSessionMemberAddedEventArgs;
};
struct AllJoynSessionMemberAddedEventArgs : generate<AllJoynSessionMemberAddedEventArgs> {};

// IAllJoynSessionMemberRemovedEventArgsFactory
struct IAllJoynSessionMemberRemovedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING uniqueName, AllJoynSessionMemberRemovedEventArgs* *result);
};

// IAllJoynSessionMemberRemovedEventArgs
struct IAllJoynSessionMemberRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_UniqueName(HSTRING *value);
};
template<typename X> struct IAllJoynSessionMemberRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynSessionMemberRemovedEventArgs_adaptor::UniqueName)->_get_UniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UniqueName;
	};
	IAllJoynSessionMemberRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynSessionMemberRemovedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynSessionMemberRemovedEventArgs_adaptor<X> { typedef adapt IAllJoynSessionMemberRemovedEventArgs; };
struct IAllJoynSessionMemberRemovedEventArgs : IAllJoynSessionMemberRemovedEventArgs_raw, generate<IAllJoynSessionMemberRemovedEventArgs> {};

// AllJoynSessionMemberRemovedEventArgs
template<typename> struct AllJoynSessionMemberRemovedEventArgs_statics {
	static AllJoynSessionMemberRemovedEventArgs *activate(hstring_ref uniqueName) { AllJoynSessionMemberRemovedEventArgs *result; hrcheck(get_activation_factory<AllJoynSessionMemberRemovedEventArgs, IAllJoynSessionMemberRemovedEventArgsFactory>()->_Create(uniqueName, &result)); return result; }
};

template<typename X> struct statics<AllJoynSessionMemberRemovedEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynSessionMemberRemovedEventArgs;
};
struct AllJoynSessionMemberRemovedEventArgs : generate<AllJoynSessionMemberRemovedEventArgs> {};

// IAllJoynSessionLostEventArgsFactory
struct IAllJoynSessionLostEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(AllJoynSessionLostReason reason, AllJoynSessionLostEventArgs* *result);
};

// IAllJoynSessionLostEventArgs
struct IAllJoynSessionLostEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(AllJoynSessionLostReason *value);
};
template<typename X> struct IAllJoynSessionLostEventArgs_adaptor : X {
	union {
		struct : property {
			AllJoynSessionLostReason get() { AllJoynSessionLostReason value; hrcheck(enc(&IAllJoynSessionLostEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			AllJoynSessionLostReason operator()() { return get(); }
			operator AllJoynSessionLostReason () { return get(); }
		} Reason;
	};
	IAllJoynSessionLostEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynSessionLostEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynSessionLostEventArgs_adaptor<X> { typedef adapt IAllJoynSessionLostEventArgs; };
struct IAllJoynSessionLostEventArgs : IAllJoynSessionLostEventArgs_raw, generate<IAllJoynSessionLostEventArgs> {};

// AllJoynSessionLostEventArgs
template<typename> struct AllJoynSessionLostEventArgs_statics {
	static AllJoynSessionLostEventArgs *activate(AllJoynSessionLostReason reason) { AllJoynSessionLostEventArgs *result; hrcheck(get_activation_factory<AllJoynSessionLostEventArgs, IAllJoynSessionLostEventArgsFactory>()->_Create(reason, &result)); return result; }
};

template<typename X> struct statics<AllJoynSessionLostEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynSessionLostEventArgs;
};
struct AllJoynSessionLostEventArgs : generate<AllJoynSessionLostEventArgs> {};

// IAllJoynProducer
struct IAllJoynProducer_raw : IInspectable {
	virtual STDMETHODIMP _SetBusObject(AllJoynBusObject* busObject) = 0;
};
template<typename X> struct IAllJoynProducer_adaptor : X {
	void SetBusObject(pptr<AllJoynBusObject> busObject) { hrcheck(X::get()->_SetBusObject(busObject)); }
};
template<typename X> struct adapt<IAllJoynProducer, X> : Windows::Devices::AllJoyn::IAllJoynProducer_adaptor<X> { typedef adapt IAllJoynProducer; };
template<typename X> struct IAllJoynProducer_unadaptor : X {
	STDMETHODIMP _SetBusObject(AllJoynBusObject* busObject) { return hrtry([&, this] { X::get()->SetBusObject(busObject); }); }
};
template<typename X> struct unadapt<IAllJoynProducer, X> : Windows::Devices::AllJoyn::IAllJoynProducer_unadaptor<X> {};
struct IAllJoynProducer : IAllJoynProducer_raw, generate<IAllJoynProducer> {};

// IAllJoynBusObjectFactory
struct IAllJoynBusObjectFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING objectPath, AllJoynBusObject* *result);
	virtual STDMETHODIMP _CreateWithBusAttachment(HSTRING objectPath, AllJoynBusAttachment* busAttachment, AllJoynBusObject* *result);
};

// IAllJoynBusObject
struct IAllJoynBusObject_raw : IInspectable {
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _AddProducer(IAllJoynProducer* producer);
	virtual STDMETHODIMP _get_BusAttachment(AllJoynBusAttachment* *value);
	virtual STDMETHODIMP _get_Session(AllJoynSession* *value);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<AllJoynBusObject*, AllJoynBusObjectStoppedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAllJoynBusObject_adaptor : X {
	union {
		struct : property {
			ptr<AllJoynBusAttachment> get() { AllJoynBusAttachment* value; hrcheck(enc(&IAllJoynBusObject_adaptor::BusAttachment)->_get_BusAttachment(&value)); return from_abi(value); }
			ptr<AllJoynBusAttachment> operator()() { return get(); }
			operator ptr<AllJoynBusAttachment> () { return get(); }
			ptr<AllJoynBusAttachment> operator->() { return get(); }
		} BusAttachment;
		struct : property {
			ptr<AllJoynSession> get() { AllJoynSession* value; hrcheck(enc(&IAllJoynBusObject_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<AllJoynSession> operator()() { return get(); }
			operator ptr<AllJoynSession> () { return get(); }
			ptr<AllJoynSession> operator->() { return get(); }
		} Session;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AllJoynBusObject>, ptr<AllJoynBusObjectStoppedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAllJoynBusObject_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAllJoynBusObject_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	void AddProducer(pptr<IAllJoynProducer> producer) { hrcheck(X::get()->_AddProducer(producer)); }
	IAllJoynBusObject_adaptor() {}
};
template<typename X> struct adapt<IAllJoynBusObject, X> : Windows::Devices::AllJoyn::IAllJoynBusObject_adaptor<X> { typedef adapt IAllJoynBusObject; };
struct IAllJoynBusObject : IAllJoynBusObject_raw, generate<IAllJoynBusObject> {};

// AllJoynBusObject
template<typename> struct AllJoynBusObject_statics {
	static AllJoynBusObject *activate(hstring_ref objectPath) { AllJoynBusObject *result; hrcheck(get_activation_factory<AllJoynBusObject, IAllJoynBusObjectFactory>()->_Create(objectPath, &result)); return result; }
	static AllJoynBusObject *activate(hstring_ref objectPath, pptr<AllJoynBusAttachment> busAttachment) { AllJoynBusObject *result; hrcheck(get_activation_factory<AllJoynBusObject, IAllJoynBusObjectFactory>()->_CreateWithBusAttachment(objectPath, busAttachment, &result)); return result; }
	static AllJoynBusObject *activate() { AllJoynBusObject *t; get_activation_factory<AllJoynBusObject>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<AllJoynBusObject, X> : X, Windows::Devices::AllJoyn::AllJoynBusObject_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynBusObject_statics<void>::activate;
	typedef typename X::root_type AllJoynBusObject;
};
struct AllJoynBusObject : generate<AllJoynBusObject> {};

// IAllJoynBusObjectStoppedEventArgsFactory
struct IAllJoynBusObjectStoppedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(int status, AllJoynBusObjectStoppedEventArgs* *result);
};

// IAllJoynBusObjectStoppedEventArgs
struct IAllJoynBusObjectStoppedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(int *value);
};
template<typename X> struct IAllJoynBusObjectStoppedEventArgs_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IAllJoynBusObjectStoppedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Status;
	};
	IAllJoynBusObjectStoppedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynBusObjectStoppedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynBusObjectStoppedEventArgs_adaptor<X> { typedef adapt IAllJoynBusObjectStoppedEventArgs; };
struct IAllJoynBusObjectStoppedEventArgs : IAllJoynBusObjectStoppedEventArgs_raw, generate<IAllJoynBusObjectStoppedEventArgs> {};

// AllJoynBusObjectStoppedEventArgs
template<typename> struct AllJoynBusObjectStoppedEventArgs_statics {
	static AllJoynBusObjectStoppedEventArgs *activate(int status) { AllJoynBusObjectStoppedEventArgs *result; hrcheck(get_activation_factory<AllJoynBusObjectStoppedEventArgs, IAllJoynBusObjectStoppedEventArgsFactory>()->_Create(status, &result)); return result; }
};

template<typename X> struct statics<AllJoynBusObjectStoppedEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynBusObjectStoppedEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynBusObjectStoppedEventArgs;
};
struct AllJoynBusObjectStoppedEventArgs : generate<AllJoynBusObjectStoppedEventArgs> {};

// IAllJoynAcceptSessionJoiner
struct IAllJoynAcceptSessionJoiner_raw : IInspectable {
	virtual STDMETHODIMP _Accept() = 0;
};
template<typename X> struct IAllJoynAcceptSessionJoiner_adaptor : X {
	void Accept() { hrcheck(X::get()->_Accept()); }
};
template<typename X> struct adapt<IAllJoynAcceptSessionJoiner, X> : Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner_adaptor<X> { typedef adapt IAllJoynAcceptSessionJoiner; };
template<typename X> struct IAllJoynAcceptSessionJoiner_unadaptor : X {
	STDMETHODIMP _Accept() { return hrtry([&, this] { X::get()->Accept(); }); }
};
template<typename X> struct unadapt<IAllJoynAcceptSessionJoiner, X> : Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner_unadaptor<X> {};
struct IAllJoynAcceptSessionJoiner : IAllJoynAcceptSessionJoiner_raw, generate<IAllJoynAcceptSessionJoiner> {};

// IAllJoynProducerStoppedEventArgs
struct IAllJoynProducerStoppedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(int *value);
};
template<typename X> struct IAllJoynProducerStoppedEventArgs_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IAllJoynProducerStoppedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Status;
	};
	IAllJoynProducerStoppedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynProducerStoppedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynProducerStoppedEventArgs_adaptor<X> { typedef adapt IAllJoynProducerStoppedEventArgs; };
struct IAllJoynProducerStoppedEventArgs : IAllJoynProducerStoppedEventArgs_raw, generate<IAllJoynProducerStoppedEventArgs> {};

// IAllJoynProducerStoppedEventArgsFactory
struct IAllJoynProducerStoppedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(int status, AllJoynProducerStoppedEventArgs* *result);
};

// AllJoynProducerStoppedEventArgs
template<typename> struct AllJoynProducerStoppedEventArgs_statics {
	static AllJoynProducerStoppedEventArgs *activate(int status) { AllJoynProducerStoppedEventArgs *result; hrcheck(get_activation_factory<AllJoynProducerStoppedEventArgs, IAllJoynProducerStoppedEventArgsFactory>()->_Create(status, &result)); return result; }
};

template<typename X> struct statics<AllJoynProducerStoppedEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynProducerStoppedEventArgs;
};
struct AllJoynProducerStoppedEventArgs : generate<AllJoynProducerStoppedEventArgs> {};

// IAllJoynWatcherStoppedEventArgs
struct IAllJoynWatcherStoppedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(int *value);
};
template<typename X> struct IAllJoynWatcherStoppedEventArgs_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IAllJoynWatcherStoppedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Status;
	};
	IAllJoynWatcherStoppedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynWatcherStoppedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynWatcherStoppedEventArgs_adaptor<X> { typedef adapt IAllJoynWatcherStoppedEventArgs; };
struct IAllJoynWatcherStoppedEventArgs : IAllJoynWatcherStoppedEventArgs_raw, generate<IAllJoynWatcherStoppedEventArgs> {};

// IAllJoynWatcherStoppedEventArgsFactory
struct IAllJoynWatcherStoppedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(int status, AllJoynWatcherStoppedEventArgs* *result);
};

// AllJoynWatcherStoppedEventArgs
template<typename> struct AllJoynWatcherStoppedEventArgs_statics {
	static AllJoynWatcherStoppedEventArgs *activate(int status) { AllJoynWatcherStoppedEventArgs *result; hrcheck(get_activation_factory<AllJoynWatcherStoppedEventArgs, IAllJoynWatcherStoppedEventArgsFactory>()->_Create(status, &result)); return result; }
};

template<typename X> struct statics<AllJoynWatcherStoppedEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynWatcherStoppedEventArgs;
};
struct AllJoynWatcherStoppedEventArgs : generate<AllJoynWatcherStoppedEventArgs> {};

// IAllJoynServiceInfoRemovedEventArgs
struct IAllJoynServiceInfoRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_UniqueName(HSTRING *value);
};
template<typename X> struct IAllJoynServiceInfoRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynServiceInfoRemovedEventArgs_adaptor::UniqueName)->_get_UniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UniqueName;
	};
	IAllJoynServiceInfoRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAllJoynServiceInfoRemovedEventArgs, X> : Windows::Devices::AllJoyn::IAllJoynServiceInfoRemovedEventArgs_adaptor<X> { typedef adapt IAllJoynServiceInfoRemovedEventArgs; };
struct IAllJoynServiceInfoRemovedEventArgs : IAllJoynServiceInfoRemovedEventArgs_raw, generate<IAllJoynServiceInfoRemovedEventArgs> {};

// IAllJoynServiceInfoRemovedEventArgsFactory
struct IAllJoynServiceInfoRemovedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING uniqueName, AllJoynServiceInfoRemovedEventArgs* *result);
};

// AllJoynServiceInfoRemovedEventArgs
template<typename> struct AllJoynServiceInfoRemovedEventArgs_statics {
	static AllJoynServiceInfoRemovedEventArgs *activate(hstring_ref uniqueName) { AllJoynServiceInfoRemovedEventArgs *result; hrcheck(get_activation_factory<AllJoynServiceInfoRemovedEventArgs, IAllJoynServiceInfoRemovedEventArgsFactory>()->_Create(uniqueName, &result)); return result; }
};

template<typename X> struct statics<AllJoynServiceInfoRemovedEventArgs, X> : X, Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs_statics<void>::activate;
	typedef typename X::root_type AllJoynServiceInfoRemovedEventArgs;
};
struct AllJoynServiceInfoRemovedEventArgs : generate<AllJoynServiceInfoRemovedEventArgs> {};

// IAllJoynMessageInfo
struct IAllJoynMessageInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_SenderUniqueName(HSTRING *value);
};
template<typename X> struct IAllJoynMessageInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAllJoynMessageInfo_adaptor::SenderUniqueName)->_get_SenderUniqueName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SenderUniqueName;
	};
	IAllJoynMessageInfo_adaptor() {}
};
template<typename X> struct adapt<IAllJoynMessageInfo, X> : Windows::Devices::AllJoyn::IAllJoynMessageInfo_adaptor<X> { typedef adapt IAllJoynMessageInfo; };
struct IAllJoynMessageInfo : IAllJoynMessageInfo_raw, generate<IAllJoynMessageInfo> {};

// IAllJoynMessageInfoFactory
struct IAllJoynMessageInfoFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING senderUniqueName, AllJoynMessageInfo* *result);
};

// AllJoynMessageInfo
template<typename> struct AllJoynMessageInfo_statics {
	static AllJoynMessageInfo *activate(hstring_ref senderUniqueName) { AllJoynMessageInfo *result; hrcheck(get_activation_factory<AllJoynMessageInfo, IAllJoynMessageInfoFactory>()->_Create(senderUniqueName, &result)); return result; }
};

template<typename X> struct statics<AllJoynMessageInfo, X> : X, Windows::Devices::AllJoyn::AllJoynMessageInfo_statics<void> {
	using Windows::Devices::AllJoyn::AllJoynMessageInfo_statics<void>::activate;
	typedef typename X::root_type AllJoynMessageInfo;
};
struct AllJoynMessageInfo : generate<AllJoynMessageInfo> {};
}}}
} // namespace iso_winrt
