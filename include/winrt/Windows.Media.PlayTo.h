#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.PlayTo

#include "Windows.Media.PlayTo.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
struct IPropertySet;
template<typename K, typename V> struct IMapView;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamWithContentType;
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::Media::PlayTo::ISourceChangeRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::SourceChangeRequestedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::ISourceChangeRequestedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IMuteChangeRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::MuteChangeRequestedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IMuteChangeRequestedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::VolumeChangeRequestedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IPlayToReceiver> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToReceiver> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToReceiver> {};
template<> struct def<Windows::Media::PlayTo::IPlayToSource> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToConnectionState> : enum_type<int> {};
template<> struct def<Windows::Media::PlayTo::IPlayToConnection> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToConnection> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToConnection> {};
template<> struct def<Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToSource> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToSource, Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri> {};
template<> struct def<Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs> {};
template<> struct def<Windows::Media::PlayTo::PlayToConnectionError> : enum_type<int> {};
template<> struct def<Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToConnectionErrorEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToSourceSelectedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IPlayToSourceDeferral> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToSourceDeferral> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToSourceDeferral> {};
template<> struct def<Windows::Media::PlayTo::IPlayToSourceRequest> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToSourceRequest> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToSourceRequest> {};
template<> struct def<Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToSourceRequestedEventArgs> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs> {};
template<> struct def<Windows::Media::PlayTo::IPlayToManager> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::IPlayToManagerStatics> : interface_type<> {};
template<> struct def<Windows::Media::PlayTo::PlayToManager> : class_type<Platform::Object, Windows::Media::PlayTo::IPlayToManager> {};

// uuids

template<> struct uuid<Windows::Media::PlayTo::ISourceChangeRequestedEventArgs> { define_guid(0xFB3F3A96, 0x7AA6, 0x4A8B, 0x86, 0xE7, 0x54, 0xF6, 0xC6, 0xD3, 0x4F, 0x64);};
template<> struct uuid<Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs> { define_guid(0xF5661AE, 0x2C88, 0x4CCA, 0x85, 0x40, 0xD5, 0x86, 0x9, 0x5D, 0x13, 0xA5);};
template<> struct uuid<Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs> { define_guid(0x99711324, 0xEDC7, 0x4BF5, 0x91, 0xF6, 0x3C, 0x86, 0x27, 0xDB, 0x59, 0xE5);};
template<> struct uuid<Windows::Media::PlayTo::IMuteChangeRequestedEventArgs> { define_guid(0xE4B4F5F6, 0xAF1F, 0x4F1E, 0xB4, 0x37, 0x7D, 0xA3, 0x24, 0x0, 0xE1, 0xD4);};
template<> struct uuid<Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs> { define_guid(0x6F026D5C, 0xCF75, 0x4C2B, 0x91, 0x3E, 0x6D, 0x7C, 0x6C, 0x32, 0x91, 0x79);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToReceiver> { define_guid(0xAC15CF47, 0xA162, 0x4AA6, 0xAF, 0x1B, 0x3A, 0xA3, 0x5F, 0x3B, 0x90, 0x69);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToSource> { define_guid(0x7F138A08, 0xFBB7, 0x4B09, 0x83, 0x56, 0xAA, 0x5F, 0x4E, 0x33, 0x5C, 0x31);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToConnection> { define_guid(0x112FBFC8, 0xF235, 0x4FDE, 0x8D, 0x41, 0x9B, 0xF2, 0x7C, 0x9E, 0x9A, 0x40);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri> { define_guid(0xAAB253EB, 0x3301, 0x4DC4, 0xAF, 0xBA, 0xB2, 0xF2, 0xED, 0x96, 0x35, 0xA0);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs> { define_guid(0x68C4B50F, 0xC20, 0x4980, 0x86, 0x2, 0x58, 0xC6, 0x22, 0x38, 0xD4, 0x23);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs> { define_guid(0xFAE3193A, 0x683, 0x47D9, 0x8D, 0xF0, 0x18, 0xCB, 0xB4, 0x89, 0x84, 0xD8);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs> { define_guid(0xBF5EADA6, 0x88E6, 0x445F, 0x9D, 0x40, 0xD9, 0xB9, 0xF8, 0x93, 0x98, 0x96);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs> { define_guid(0xC9D8511, 0x5202, 0x4DCB, 0x8C, 0x67, 0xAB, 0xDA, 0x12, 0xBB, 0x3C, 0x12);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToSourceDeferral> { define_guid(0x4100891D, 0x278E, 0x4F29, 0x85, 0x9B, 0xA9, 0xE5, 0x1, 0x5, 0x3E, 0x7D);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToSourceRequest> { define_guid(0xF8584665, 0x64F4, 0x44A0, 0xAC, 0xD, 0x46, 0x8D, 0x2B, 0x8F, 0xDA, 0x83);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs> { define_guid(0xC5CDC330, 0x29DF, 0x4EC6, 0x9D, 0xA9, 0x9F, 0xBD, 0xFC, 0xFC, 0x1B, 0x3E);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToManager> { define_guid(0xF56A206E, 0x1B77, 0x42EF, 0x8F, 0xD, 0xB9, 0x49, 0xF8, 0xD9, 0xB2, 0x60);};
template<> struct uuid<Windows::Media::PlayTo::IPlayToManagerStatics> { define_guid(0x64E6A887, 0x3982, 0x4F3B, 0xBA, 0x20, 0x61, 0x55, 0xE4, 0x35, 0x32, 0x5B);};

// types

namespace Windows { namespace Media { namespace PlayTo {

// ISourceChangeRequestedEventArgs
struct ISourceChangeRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Stream(Storage::Streams::IRandomAccessStreamWithContentType* *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Author(HSTRING *value);
	virtual STDMETHODIMP _get_Album(HSTRING *value);
	virtual STDMETHODIMP _get_Genre(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_Date(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_Rating(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct ISourceChangeRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Album)->_get_Album(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Album;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Author)->_get_Author(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Author;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Date)->_get_Date(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} Date;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Genre)->_get_Genre(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Genre;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Rating)->_get_Rating(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} Rating;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> get() { Storage::Streams::IRandomAccessStreamWithContentType* value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Stream)->_get_Stream(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamWithContentType> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator->() { return get(); }
		} Stream;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} Thumbnail;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISourceChangeRequestedEventArgs_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	ISourceChangeRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISourceChangeRequestedEventArgs, X> : Windows::Media::PlayTo::ISourceChangeRequestedEventArgs_adaptor<X> { typedef adapt ISourceChangeRequestedEventArgs; };
struct ISourceChangeRequestedEventArgs : ISourceChangeRequestedEventArgs_raw, generate<ISourceChangeRequestedEventArgs> {};

// SourceChangeRequestedEventArgs
template<typename X> struct statics<SourceChangeRequestedEventArgs, X> : X {
	typedef typename X::root_type SourceChangeRequestedEventArgs;
};
struct SourceChangeRequestedEventArgs : generate<SourceChangeRequestedEventArgs> {};

// IPlaybackRateChangeRequestedEventArgs
struct IPlaybackRateChangeRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Rate(double *value);
};
template<typename X> struct IPlaybackRateChangeRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IPlaybackRateChangeRequestedEventArgs_adaptor::Rate)->_get_Rate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Rate;
	};
	IPlaybackRateChangeRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPlaybackRateChangeRequestedEventArgs, X> : Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs_adaptor<X> { typedef adapt IPlaybackRateChangeRequestedEventArgs; };
struct IPlaybackRateChangeRequestedEventArgs : IPlaybackRateChangeRequestedEventArgs_raw, generate<IPlaybackRateChangeRequestedEventArgs> {};

// PlaybackRateChangeRequestedEventArgs
template<typename X> struct statics<PlaybackRateChangeRequestedEventArgs, X> : X {
	typedef typename X::root_type PlaybackRateChangeRequestedEventArgs;
};
struct PlaybackRateChangeRequestedEventArgs : generate<PlaybackRateChangeRequestedEventArgs> {};

// ICurrentTimeChangeRequestedEventArgs
struct ICurrentTimeChangeRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Time(Foundation::TimeSpan *value);
};
template<typename X> struct ICurrentTimeChangeRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ICurrentTimeChangeRequestedEventArgs_adaptor::Time)->_get_Time(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Time;
	};
	ICurrentTimeChangeRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICurrentTimeChangeRequestedEventArgs, X> : Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs_adaptor<X> { typedef adapt ICurrentTimeChangeRequestedEventArgs; };
struct ICurrentTimeChangeRequestedEventArgs : ICurrentTimeChangeRequestedEventArgs_raw, generate<ICurrentTimeChangeRequestedEventArgs> {};

// CurrentTimeChangeRequestedEventArgs
template<typename X> struct statics<CurrentTimeChangeRequestedEventArgs, X> : X {
	typedef typename X::root_type CurrentTimeChangeRequestedEventArgs;
};
struct CurrentTimeChangeRequestedEventArgs : generate<CurrentTimeChangeRequestedEventArgs> {};

// IMuteChangeRequestedEventArgs
struct IMuteChangeRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Mute(bool *value);
};
template<typename X> struct IMuteChangeRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMuteChangeRequestedEventArgs_adaptor::Mute)->_get_Mute(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Mute;
	};
	IMuteChangeRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMuteChangeRequestedEventArgs, X> : Windows::Media::PlayTo::IMuteChangeRequestedEventArgs_adaptor<X> { typedef adapt IMuteChangeRequestedEventArgs; };
struct IMuteChangeRequestedEventArgs : IMuteChangeRequestedEventArgs_raw, generate<IMuteChangeRequestedEventArgs> {};

// MuteChangeRequestedEventArgs
template<typename X> struct statics<MuteChangeRequestedEventArgs, X> : X {
	typedef typename X::root_type MuteChangeRequestedEventArgs;
};
struct MuteChangeRequestedEventArgs : generate<MuteChangeRequestedEventArgs> {};

// IVolumeChangeRequestedEventArgs
struct IVolumeChangeRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Volume(double *value);
};
template<typename X> struct IVolumeChangeRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IVolumeChangeRequestedEventArgs_adaptor::Volume)->_get_Volume(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Volume;
	};
	IVolumeChangeRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IVolumeChangeRequestedEventArgs, X> : Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs_adaptor<X> { typedef adapt IVolumeChangeRequestedEventArgs; };
struct IVolumeChangeRequestedEventArgs : IVolumeChangeRequestedEventArgs_raw, generate<IVolumeChangeRequestedEventArgs> {};

// VolumeChangeRequestedEventArgs
template<typename X> struct statics<VolumeChangeRequestedEventArgs, X> : X {
	typedef typename X::root_type VolumeChangeRequestedEventArgs;
};
struct VolumeChangeRequestedEventArgs : generate<VolumeChangeRequestedEventArgs> {};

// IPlayToReceiver
struct IPlayToReceiver_raw : IInspectable {
	virtual STDMETHODIMP _add_PlayRequested(Foundation::TypedEventHandler<PlayToReceiver*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlayRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PauseRequested(Foundation::TypedEventHandler<PlayToReceiver*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PauseRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceChangeRequested(Foundation::TypedEventHandler<PlayToReceiver*, SourceChangeRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceChangeRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PlaybackRateChangeRequested(Foundation::TypedEventHandler<PlayToReceiver*, PlaybackRateChangeRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlaybackRateChangeRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CurrentTimeChangeRequested(Foundation::TypedEventHandler<PlayToReceiver*, CurrentTimeChangeRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CurrentTimeChangeRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MuteChangeRequested(Foundation::TypedEventHandler<PlayToReceiver*, MuteChangeRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MuteChangeRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VolumeChangeRequested(Foundation::TypedEventHandler<PlayToReceiver*, VolumeChangeRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VolumeChangeRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TimeUpdateRequested(Foundation::TypedEventHandler<PlayToReceiver*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TimeUpdateRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_StopRequested(Foundation::TypedEventHandler<PlayToReceiver*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StopRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _NotifyVolumeChange(double volume, bool mute);
	virtual STDMETHODIMP _NotifyRateChange(double rate);
	virtual STDMETHODIMP _NotifyLoadedMetadata();
	virtual STDMETHODIMP _NotifyTimeUpdate(Foundation::TimeSpan currentTime);
	virtual STDMETHODIMP _NotifyDurationChange(Foundation::TimeSpan duration);
	virtual STDMETHODIMP _NotifySeeking();
	virtual STDMETHODIMP _NotifySeeked();
	virtual STDMETHODIMP _NotifyPaused();
	virtual STDMETHODIMP _NotifyPlaying();
	virtual STDMETHODIMP _NotifyEnded();
	virtual STDMETHODIMP _NotifyError();
	virtual STDMETHODIMP _NotifyStopped();
	virtual STDMETHODIMP _get_FriendlyName(HSTRING *value);
	virtual STDMETHODIMP _put_FriendlyName(HSTRING value);
	virtual STDMETHODIMP _put_SupportsImage(bool value);
	virtual STDMETHODIMP _get_SupportsImage(bool *value);
	virtual STDMETHODIMP _put_SupportsAudio(bool value);
	virtual STDMETHODIMP _get_SupportsAudio(bool *value);
	virtual STDMETHODIMP _put_SupportsVideo(bool value);
	virtual STDMETHODIMP _get_SupportsVideo(bool *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IPropertySet* *value);
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _StopAsync(Foundation::IAsyncAction* *action);
};
template<typename X> struct IPlayToReceiver_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPlayToReceiver_adaptor::FriendlyName)->_get_FriendlyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPlayToReceiver_adaptor::FriendlyName)->_put_FriendlyName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} FriendlyName;
		struct : property {
			ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(enc(&IPlayToReceiver_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
			operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
			ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
		} Properties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPlayToReceiver_adaptor::SupportsAudio)->_get_SupportsAudio(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPlayToReceiver_adaptor::SupportsAudio)->_put_SupportsAudio(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SupportsAudio;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPlayToReceiver_adaptor::SupportsImage)->_get_SupportsImage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPlayToReceiver_adaptor::SupportsImage)->_put_SupportsImage(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SupportsImage;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPlayToReceiver_adaptor::SupportsVideo)->_get_SupportsVideo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPlayToReceiver_adaptor::SupportsVideo)->_put_SupportsVideo(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SupportsVideo;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, ptr<CurrentTimeChangeRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::CurrentTimeChangeRequested)->_add_CurrentTimeChangeRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::CurrentTimeChangeRequested)->_remove_CurrentTimeChangeRequested(token)); }
		} CurrentTimeChangeRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, ptr<MuteChangeRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::MuteChangeRequested)->_add_MuteChangeRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::MuteChangeRequested)->_remove_MuteChangeRequested(token)); }
		} MuteChangeRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::PauseRequested)->_add_PauseRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::PauseRequested)->_remove_PauseRequested(token)); }
		} PauseRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::PlayRequested)->_add_PlayRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::PlayRequested)->_remove_PlayRequested(token)); }
		} PlayRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, ptr<PlaybackRateChangeRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::PlaybackRateChangeRequested)->_add_PlaybackRateChangeRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::PlaybackRateChangeRequested)->_remove_PlaybackRateChangeRequested(token)); }
		} PlaybackRateChangeRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, ptr<SourceChangeRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::SourceChangeRequested)->_add_SourceChangeRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::SourceChangeRequested)->_remove_SourceChangeRequested(token)); }
		} SourceChangeRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::StopRequested)->_add_StopRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::StopRequested)->_remove_StopRequested(token)); }
		} StopRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::TimeUpdateRequested)->_add_TimeUpdateRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::TimeUpdateRequested)->_remove_TimeUpdateRequested(token)); }
		} TimeUpdateRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToReceiver>, ptr<VolumeChangeRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToReceiver_adaptor::VolumeChangeRequested)->_add_VolumeChangeRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToReceiver_adaptor::VolumeChangeRequested)->_remove_VolumeChangeRequested(token)); }
		} VolumeChangeRequested;
	};
	void NotifyVolumeChange(double volume, bool mute) { hrcheck(X::get()->_NotifyVolumeChange(volume, mute)); }
	void NotifyRateChange(double rate) { hrcheck(X::get()->_NotifyRateChange(rate)); }
	void NotifyLoadedMetadata() { hrcheck(X::get()->_NotifyLoadedMetadata()); }
	void NotifyTimeUpdate(const Foundation::TimeSpan& currentTime) { hrcheck(X::get()->_NotifyTimeUpdate(currentTime)); }
	void NotifyDurationChange(const Foundation::TimeSpan& duration) { hrcheck(X::get()->_NotifyDurationChange(duration)); }
	void NotifySeeking() { hrcheck(X::get()->_NotifySeeking()); }
	void NotifySeeked() { hrcheck(X::get()->_NotifySeeked()); }
	void NotifyPaused() { hrcheck(X::get()->_NotifyPaused()); }
	void NotifyPlaying() { hrcheck(X::get()->_NotifyPlaying()); }
	void NotifyEnded() { hrcheck(X::get()->_NotifyEnded()); }
	void NotifyError() { hrcheck(X::get()->_NotifyError()); }
	void NotifyStopped() { hrcheck(X::get()->_NotifyStopped()); }
	ptr<Foundation::IAsyncAction> StartAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_StartAsync(&action)); return from_abi(action); }
	ptr<Foundation::IAsyncAction> StopAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_StopAsync(&action)); return from_abi(action); }
	IPlayToReceiver_adaptor() {}
};
template<typename X> struct adapt<IPlayToReceiver, X> : Windows::Media::PlayTo::IPlayToReceiver_adaptor<X> { typedef adapt IPlayToReceiver; };
struct IPlayToReceiver : IPlayToReceiver_raw, generate<IPlayToReceiver> {};

// PlayToReceiver
template<typename X> struct statics<PlayToReceiver, X> : X {
	typedef typename X::root_type PlayToReceiver;
};
struct PlayToReceiver : generate<PlayToReceiver> {};

// IPlayToSource
struct IPlayToSource_raw : IInspectable {
	virtual STDMETHODIMP _get_Connection(PlayToConnection* *value);
	virtual STDMETHODIMP _get_Next(PlayToSource* *value);
	virtual STDMETHODIMP _put_Next(PlayToSource* value);
	virtual STDMETHODIMP _PlayNext();
};
template<typename X> struct IPlayToSource_adaptor : X {
	union {
		struct : property {
			ptr<PlayToConnection> get() { PlayToConnection* value; hrcheck(enc(&IPlayToSource_adaptor::Connection)->_get_Connection(&value)); return from_abi(value); }
			ptr<PlayToConnection> operator()() { return get(); }
			operator ptr<PlayToConnection> () { return get(); }
			ptr<PlayToConnection> operator->() { return get(); }
		} Connection;
		struct : property {
			ptr<PlayToSource> get() { PlayToSource* value; hrcheck(enc(&IPlayToSource_adaptor::Next)->_get_Next(&value)); return from_abi(value); }
			ptr<PlayToSource> operator()() { return get(); }
			operator ptr<PlayToSource> () { return get(); }
			ptr<PlayToSource> operator->() { return get(); }
			void put(pptr<PlayToSource> value) { hrcheck(enc(&IPlayToSource_adaptor::Next)->_put_Next(value)); }
			void operator=(pptr<PlayToSource> value) { put(value); }
			void operator()(pptr<PlayToSource> value) { put(value); }
		} Next;
	};
	void PlayNext() { hrcheck(X::get()->_PlayNext()); }
	IPlayToSource_adaptor() {}
};
template<typename X> struct adapt<IPlayToSource, X> : Windows::Media::PlayTo::IPlayToSource_adaptor<X> { typedef adapt IPlayToSource; };
struct IPlayToSource : IPlayToSource_raw, generate<IPlayToSource> {};

// IPlayToConnection
struct IPlayToConnection_raw : IInspectable {
	virtual STDMETHODIMP _get_State(PlayToConnectionState *value);
	virtual STDMETHODIMP _add_StateChanged(Foundation::TypedEventHandler<PlayToConnection*, PlayToConnectionStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Transferred(Foundation::TypedEventHandler<PlayToConnection*, PlayToConnectionTransferredEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Transferred(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Error(Foundation::TypedEventHandler<PlayToConnection*, PlayToConnectionErrorEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Error(Foundation::EventRegistrationToken token);
};
template<typename X> struct IPlayToConnection_adaptor : X {
	union {
		struct : property {
			PlayToConnectionState get() { PlayToConnectionState value; hrcheck(enc(&IPlayToConnection_adaptor::State)->_get_State(&value)); return value; }
			PlayToConnectionState operator()() { return get(); }
			operator PlayToConnectionState () { return get(); }
		} State;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToConnection>, ptr<PlayToConnectionErrorEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToConnection_adaptor::Error)->_add_Error(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToConnection_adaptor::Error)->_remove_Error(token)); }
		} Error;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToConnection>, ptr<PlayToConnectionStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToConnection_adaptor::StateChanged)->_add_StateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToConnection_adaptor::StateChanged)->_remove_StateChanged(token)); }
		} StateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToConnection>, ptr<PlayToConnectionTransferredEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToConnection_adaptor::Transferred)->_add_Transferred(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToConnection_adaptor::Transferred)->_remove_Transferred(token)); }
		} Transferred;
	};
	IPlayToConnection_adaptor() {}
};
template<typename X> struct adapt<IPlayToConnection, X> : Windows::Media::PlayTo::IPlayToConnection_adaptor<X> { typedef adapt IPlayToConnection; };
struct IPlayToConnection : IPlayToConnection_raw, generate<IPlayToConnection> {};

// PlayToConnection
template<typename X> struct statics<PlayToConnection, X> : X {
	typedef typename X::root_type PlayToConnection;
};
struct PlayToConnection : generate<PlayToConnection> {};

// IPlayToSourceWithPreferredSourceUri
struct IPlayToSourceWithPreferredSourceUri_raw : IInspectable {
	virtual STDMETHODIMP _get_PreferredSourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_PreferredSourceUri(Foundation::Uri* value);
};
template<typename X> struct IPlayToSourceWithPreferredSourceUri_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IPlayToSourceWithPreferredSourceUri_adaptor::PreferredSourceUri)->_get_PreferredSourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IPlayToSourceWithPreferredSourceUri_adaptor::PreferredSourceUri)->_put_PreferredSourceUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} PreferredSourceUri;
	};
	IPlayToSourceWithPreferredSourceUri_adaptor() {}
};
template<typename X> struct adapt<IPlayToSourceWithPreferredSourceUri, X> : Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri_adaptor<X> { typedef adapt IPlayToSourceWithPreferredSourceUri; };
struct IPlayToSourceWithPreferredSourceUri : IPlayToSourceWithPreferredSourceUri_raw, generate<IPlayToSourceWithPreferredSourceUri> {};

// PlayToSource
template<typename X> struct statics<PlayToSource, X> : X {
	typedef typename X::root_type PlayToSource;
};
struct PlayToSource : generate<PlayToSource> {};

// IPlayToConnectionStateChangedEventArgs
struct IPlayToConnectionStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PreviousState(PlayToConnectionState *value);
	virtual STDMETHODIMP _get_CurrentState(PlayToConnectionState *value);
};
template<typename X> struct IPlayToConnectionStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			PlayToConnectionState get() { PlayToConnectionState value; hrcheck(enc(&IPlayToConnectionStateChangedEventArgs_adaptor::CurrentState)->_get_CurrentState(&value)); return value; }
			PlayToConnectionState operator()() { return get(); }
			operator PlayToConnectionState () { return get(); }
		} CurrentState;
		struct : property {
			PlayToConnectionState get() { PlayToConnectionState value; hrcheck(enc(&IPlayToConnectionStateChangedEventArgs_adaptor::PreviousState)->_get_PreviousState(&value)); return value; }
			PlayToConnectionState operator()() { return get(); }
			operator PlayToConnectionState () { return get(); }
		} PreviousState;
	};
	IPlayToConnectionStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPlayToConnectionStateChangedEventArgs, X> : Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs_adaptor<X> { typedef adapt IPlayToConnectionStateChangedEventArgs; };
struct IPlayToConnectionStateChangedEventArgs : IPlayToConnectionStateChangedEventArgs_raw, generate<IPlayToConnectionStateChangedEventArgs> {};

// PlayToConnectionStateChangedEventArgs
template<typename X> struct statics<PlayToConnectionStateChangedEventArgs, X> : X {
	typedef typename X::root_type PlayToConnectionStateChangedEventArgs;
};
struct PlayToConnectionStateChangedEventArgs : generate<PlayToConnectionStateChangedEventArgs> {};

// IPlayToConnectionTransferredEventArgs
struct IPlayToConnectionTransferredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PreviousSource(PlayToSource* *value);
	virtual STDMETHODIMP _get_CurrentSource(PlayToSource* *value);
};
template<typename X> struct IPlayToConnectionTransferredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PlayToSource> get() { PlayToSource* value; hrcheck(enc(&IPlayToConnectionTransferredEventArgs_adaptor::CurrentSource)->_get_CurrentSource(&value)); return from_abi(value); }
			ptr<PlayToSource> operator()() { return get(); }
			operator ptr<PlayToSource> () { return get(); }
			ptr<PlayToSource> operator->() { return get(); }
		} CurrentSource;
		struct : property {
			ptr<PlayToSource> get() { PlayToSource* value; hrcheck(enc(&IPlayToConnectionTransferredEventArgs_adaptor::PreviousSource)->_get_PreviousSource(&value)); return from_abi(value); }
			ptr<PlayToSource> operator()() { return get(); }
			operator ptr<PlayToSource> () { return get(); }
			ptr<PlayToSource> operator->() { return get(); }
		} PreviousSource;
	};
	IPlayToConnectionTransferredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPlayToConnectionTransferredEventArgs, X> : Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs_adaptor<X> { typedef adapt IPlayToConnectionTransferredEventArgs; };
struct IPlayToConnectionTransferredEventArgs : IPlayToConnectionTransferredEventArgs_raw, generate<IPlayToConnectionTransferredEventArgs> {};

// PlayToConnectionTransferredEventArgs
template<typename X> struct statics<PlayToConnectionTransferredEventArgs, X> : X {
	typedef typename X::root_type PlayToConnectionTransferredEventArgs;
};
struct PlayToConnectionTransferredEventArgs : generate<PlayToConnectionTransferredEventArgs> {};

// IPlayToConnectionErrorEventArgs
struct IPlayToConnectionErrorEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Code(PlayToConnectionError *value);
	virtual STDMETHODIMP _get_Message(HSTRING *value);
};
template<typename X> struct IPlayToConnectionErrorEventArgs_adaptor : X {
	union {
		struct : property {
			PlayToConnectionError get() { PlayToConnectionError value; hrcheck(enc(&IPlayToConnectionErrorEventArgs_adaptor::Code)->_get_Code(&value)); return value; }
			PlayToConnectionError operator()() { return get(); }
			operator PlayToConnectionError () { return get(); }
		} Code;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPlayToConnectionErrorEventArgs_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Message;
	};
	IPlayToConnectionErrorEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPlayToConnectionErrorEventArgs, X> : Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs_adaptor<X> { typedef adapt IPlayToConnectionErrorEventArgs; };
struct IPlayToConnectionErrorEventArgs : IPlayToConnectionErrorEventArgs_raw, generate<IPlayToConnectionErrorEventArgs> {};

// PlayToConnectionErrorEventArgs
template<typename X> struct statics<PlayToConnectionErrorEventArgs, X> : X {
	typedef typename X::root_type PlayToConnectionErrorEventArgs;
};
struct PlayToConnectionErrorEventArgs : generate<PlayToConnectionErrorEventArgs> {};

// IPlayToSourceSelectedEventArgs
struct IPlayToSourceSelectedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FriendlyName(HSTRING *value);
	virtual STDMETHODIMP _get_Icon(Storage::Streams::IRandomAccessStreamWithContentType* *value);
	virtual STDMETHODIMP _get_SupportsImage(bool *value);
	virtual STDMETHODIMP _get_SupportsAudio(bool *value);
	virtual STDMETHODIMP _get_SupportsVideo(bool *value);
};
template<typename X> struct IPlayToSourceSelectedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPlayToSourceSelectedEventArgs_adaptor::FriendlyName)->_get_FriendlyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FriendlyName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> get() { Storage::Streams::IRandomAccessStreamWithContentType* value; hrcheck(enc(&IPlayToSourceSelectedEventArgs_adaptor::Icon)->_get_Icon(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamWithContentType> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator->() { return get(); }
		} Icon;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPlayToSourceSelectedEventArgs_adaptor::SupportsAudio)->_get_SupportsAudio(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SupportsAudio;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPlayToSourceSelectedEventArgs_adaptor::SupportsImage)->_get_SupportsImage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SupportsImage;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPlayToSourceSelectedEventArgs_adaptor::SupportsVideo)->_get_SupportsVideo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SupportsVideo;
	};
	IPlayToSourceSelectedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPlayToSourceSelectedEventArgs, X> : Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs_adaptor<X> { typedef adapt IPlayToSourceSelectedEventArgs; };
struct IPlayToSourceSelectedEventArgs : IPlayToSourceSelectedEventArgs_raw, generate<IPlayToSourceSelectedEventArgs> {};

// PlayToSourceSelectedEventArgs
template<typename X> struct statics<PlayToSourceSelectedEventArgs, X> : X {
	typedef typename X::root_type PlayToSourceSelectedEventArgs;
};
struct PlayToSourceSelectedEventArgs : generate<PlayToSourceSelectedEventArgs> {};

// IPlayToSourceDeferral
struct IPlayToSourceDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IPlayToSourceDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IPlayToSourceDeferral, X> : Windows::Media::PlayTo::IPlayToSourceDeferral_adaptor<X> { typedef adapt IPlayToSourceDeferral; };
struct IPlayToSourceDeferral : IPlayToSourceDeferral_raw, generate<IPlayToSourceDeferral> {};

// PlayToSourceDeferral
template<typename X> struct statics<PlayToSourceDeferral, X> : X {
	typedef typename X::root_type PlayToSourceDeferral;
};
struct PlayToSourceDeferral : generate<PlayToSourceDeferral> {};

// IPlayToSourceRequest
struct IPlayToSourceRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
	virtual STDMETHODIMP _DisplayErrorString(HSTRING errorString);
	virtual STDMETHODIMP _GetDeferral(PlayToSourceDeferral* *deferral);
	virtual STDMETHODIMP _SetSource(PlayToSource* value);
};
template<typename X> struct IPlayToSourceRequest_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPlayToSourceRequest_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	void DisplayErrorString(hstring_ref errorString) { hrcheck(X::get()->_DisplayErrorString(errorString)); }
	ptr<PlayToSourceDeferral> GetDeferral() { PlayToSourceDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	void SetSource(pptr<PlayToSource> value) { hrcheck(X::get()->_SetSource(value)); }
	IPlayToSourceRequest_adaptor() {}
};
template<typename X> struct adapt<IPlayToSourceRequest, X> : Windows::Media::PlayTo::IPlayToSourceRequest_adaptor<X> { typedef adapt IPlayToSourceRequest; };
struct IPlayToSourceRequest : IPlayToSourceRequest_raw, generate<IPlayToSourceRequest> {};

// PlayToSourceRequest
template<typename X> struct statics<PlayToSourceRequest, X> : X {
	typedef typename X::root_type PlayToSourceRequest;
};
struct PlayToSourceRequest : generate<PlayToSourceRequest> {};

// IPlayToSourceRequestedEventArgs
struct IPlayToSourceRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SourceRequest(PlayToSourceRequest* *value);
};
template<typename X> struct IPlayToSourceRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PlayToSourceRequest> get() { PlayToSourceRequest* value; hrcheck(enc(&IPlayToSourceRequestedEventArgs_adaptor::SourceRequest)->_get_SourceRequest(&value)); return from_abi(value); }
			ptr<PlayToSourceRequest> operator()() { return get(); }
			operator ptr<PlayToSourceRequest> () { return get(); }
			ptr<PlayToSourceRequest> operator->() { return get(); }
		} SourceRequest;
	};
	IPlayToSourceRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPlayToSourceRequestedEventArgs, X> : Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs_adaptor<X> { typedef adapt IPlayToSourceRequestedEventArgs; };
struct IPlayToSourceRequestedEventArgs : IPlayToSourceRequestedEventArgs_raw, generate<IPlayToSourceRequestedEventArgs> {};

// PlayToSourceRequestedEventArgs
template<typename X> struct statics<PlayToSourceRequestedEventArgs, X> : X {
	typedef typename X::root_type PlayToSourceRequestedEventArgs;
};
struct PlayToSourceRequestedEventArgs : generate<PlayToSourceRequestedEventArgs> {};

// IPlayToManager
struct IPlayToManager_raw : IInspectable {
	virtual STDMETHODIMP _add_SourceRequested(Foundation::TypedEventHandler<PlayToManager*, PlayToSourceRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceSelected(Foundation::TypedEventHandler<PlayToManager*, PlayToSourceSelectedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceSelected(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _put_DefaultSourceSelection(bool value);
	virtual STDMETHODIMP _get_DefaultSourceSelection(bool *value);
};
template<typename X> struct IPlayToManager_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPlayToManager_adaptor::DefaultSourceSelection)->_get_DefaultSourceSelection(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPlayToManager_adaptor::DefaultSourceSelection)->_put_DefaultSourceSelection(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} DefaultSourceSelection;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToManager>, ptr<PlayToSourceRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToManager_adaptor::SourceRequested)->_add_SourceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToManager_adaptor::SourceRequested)->_remove_SourceRequested(token)); }
		} SourceRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PlayToManager>, ptr<PlayToSourceSelectedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPlayToManager_adaptor::SourceSelected)->_add_SourceSelected(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPlayToManager_adaptor::SourceSelected)->_remove_SourceSelected(token)); }
		} SourceSelected;
	};
	IPlayToManager_adaptor() {}
};
template<typename X> struct adapt<IPlayToManager, X> : Windows::Media::PlayTo::IPlayToManager_adaptor<X> { typedef adapt IPlayToManager; };
struct IPlayToManager : IPlayToManager_raw, generate<IPlayToManager> {};

// IPlayToManagerStatics
struct IPlayToManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(PlayToManager* *playToManager);
	virtual STDMETHODIMP _ShowPlayToUI();
};

// PlayToManager
template<typename> struct PlayToManager_statics {
	static ptr<PlayToManager> GetForCurrentView() { PlayToManager* playToManager; hrcheck(get_activation_factory<PlayToManager, IPlayToManagerStatics>()->_GetForCurrentView(&playToManager)); return from_abi(playToManager); }
	static void ShowPlayToUI() { hrcheck(get_activation_factory<PlayToManager, IPlayToManagerStatics>()->_ShowPlayToUI()); }
};

template<typename X> struct statics<PlayToManager, X> : X, Windows::Media::PlayTo::PlayToManager_statics<void> {
	typedef typename X::root_type PlayToManager;
};
struct PlayToManager : generate<PlayToManager> {};
}}}
} // namespace iso_winrt
