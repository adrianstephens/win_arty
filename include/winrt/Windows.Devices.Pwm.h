#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Pwm

#include "Windows.Devices.Pwm.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Pwm { namespace Provider {
struct IPwmProvider;
}}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::Devices::Pwm::IPwmController> : interface_type<> {};
template<> struct def<Windows::Devices::Pwm::PwmPulsePolarity> : enum_type<int> {};
template<> struct def<Windows::Devices::Pwm::IPwmPin> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Pwm::PwmPin> : class_type<Platform::Object, Windows::Devices::Pwm::IPwmPin> {};
template<> struct def<Windows::Devices::Pwm::IPwmControllerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Pwm::IPwmControllerStatics3> : interface_type<> {};
template<> struct def<Windows::Devices::Pwm::IPwmControllerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Pwm::PwmController> : class_type<Platform::Object, Windows::Devices::Pwm::IPwmController> {};

// uuids

template<> struct uuid<Windows::Devices::Pwm::IPwmController> { define_guid(0xC45F5C85, 0xD2E8, 0x42CF, 0x9B, 0xD6, 0xCF, 0x5E, 0xD0, 0x29, 0xE6, 0xA7);};
template<> struct uuid<Windows::Devices::Pwm::IPwmPin> { define_guid(0x22972DC8, 0xC6CF, 0x4821, 0xB7, 0xF9, 0xC6, 0x45, 0x4F, 0xB6, 0xAF, 0x79);};
template<> struct uuid<Windows::Devices::Pwm::IPwmControllerStatics> { define_guid(0x4263BDA1, 0x8946, 0x4404, 0xBD, 0x48, 0x81, 0xDD, 0x12, 0x4A, 0xF4, 0xD9);};
template<> struct uuid<Windows::Devices::Pwm::IPwmControllerStatics3> { define_guid(0xB2581871, 0x229, 0x4344, 0xAE, 0x3F, 0x9B, 0x7C, 0xD0, 0xE6, 0x6B, 0x94);};
template<> struct uuid<Windows::Devices::Pwm::IPwmControllerStatics2> { define_guid(0x44FC5B1F, 0xF119, 0x4BDD, 0x97, 0xAD, 0xF7, 0x6E, 0xF9, 0x86, 0x73, 0x6D);};

// types

namespace Windows { namespace Devices { namespace Pwm {

// IPwmController
struct IPwmController_raw : IInspectable {
	virtual STDMETHODIMP _get_PinCount(int *value);
	virtual STDMETHODIMP _get_ActualFrequency(double *value);
	virtual STDMETHODIMP _SetDesiredFrequency(double desiredFrequency, double *result);
	virtual STDMETHODIMP _get_MinFrequency(double *value);
	virtual STDMETHODIMP _get_MaxFrequency(double *value);
	virtual STDMETHODIMP _OpenPin(int pinNumber, PwmPin* *pin);
};
template<typename X> struct IPwmController_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IPwmController_adaptor::ActualFrequency)->_get_ActualFrequency(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} ActualFrequency;
		struct : property {
			double get() { double value; hrcheck(enc(&IPwmController_adaptor::MaxFrequency)->_get_MaxFrequency(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} MaxFrequency;
		struct : property {
			double get() { double value; hrcheck(enc(&IPwmController_adaptor::MinFrequency)->_get_MinFrequency(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} MinFrequency;
		struct : property {
			int get() { int value; hrcheck(enc(&IPwmController_adaptor::PinCount)->_get_PinCount(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} PinCount;
	};
	double SetDesiredFrequency(double desiredFrequency) { double result; hrcheck(X::get()->_SetDesiredFrequency(desiredFrequency, &result)); return result; }
	ptr<PwmPin> OpenPin(int pinNumber) { PwmPin* pin; hrcheck(X::get()->_OpenPin(pinNumber, &pin)); return from_abi(pin); }
	IPwmController_adaptor() {}
};
template<typename X> struct adapt<IPwmController, X> : Windows::Devices::Pwm::IPwmController_adaptor<X> { typedef adapt IPwmController; };
struct IPwmController : IPwmController_raw, generate<IPwmController> {};

// IPwmPin
struct IPwmPin_raw : IInspectable {
	virtual STDMETHODIMP _get_Controller(PwmController* *value);
	virtual STDMETHODIMP _GetActiveDutyCyclePercentage(double *result);
	virtual STDMETHODIMP _SetActiveDutyCyclePercentage(double dutyCyclePercentage);
	virtual STDMETHODIMP _get_Polarity(PwmPulsePolarity *value);
	virtual STDMETHODIMP _put_Polarity(PwmPulsePolarity value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _get_IsStarted(bool *value);
};
template<typename X> struct IPwmPin_adaptor : X {
	union {
		struct : property {
			ptr<PwmController> get() { PwmController* value; hrcheck(enc(&IPwmPin_adaptor::Controller)->_get_Controller(&value)); return from_abi(value); }
			ptr<PwmController> operator()() { return get(); }
			operator ptr<PwmController> () { return get(); }
			ptr<PwmController> operator->() { return get(); }
		} Controller;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPwmPin_adaptor::IsStarted)->_get_IsStarted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStarted;
		struct : property {
			PwmPulsePolarity get() { PwmPulsePolarity value; hrcheck(enc(&IPwmPin_adaptor::Polarity)->_get_Polarity(&value)); return value; }
			PwmPulsePolarity operator()() { return get(); }
			operator PwmPulsePolarity () { return get(); }
			void put(PwmPulsePolarity value) { hrcheck(enc(&IPwmPin_adaptor::Polarity)->_put_Polarity(value)); }
			void operator=(PwmPulsePolarity value) { put(value); }
			void operator()(PwmPulsePolarity value) { put(value); }
		} Polarity;
	};
	double GetActiveDutyCyclePercentage() { double result; hrcheck(X::get()->_GetActiveDutyCyclePercentage(&result)); return result; }
	void SetActiveDutyCyclePercentage(double dutyCyclePercentage) { hrcheck(X::get()->_SetActiveDutyCyclePercentage(dutyCyclePercentage)); }
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IPwmPin_adaptor() {}
};
template<typename X> struct adapt<IPwmPin, X> : Windows::Devices::Pwm::IPwmPin_adaptor<X> { typedef adapt IPwmPin; };
struct IPwmPin : IPwmPin_raw, generate<IPwmPin> {};

// PwmPin
template<typename X> struct statics<PwmPin, X> : X {
	typedef typename X::root_type PwmPin;
};
struct PwmPin : generate<PwmPin> {};

// IPwmControllerStatics
struct IPwmControllerStatics : IInspectable {
	virtual STDMETHODIMP _GetControllersAsync(Provider::IPwmProvider* provider, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PwmController*>*>* *operation);
};

// IPwmControllerStatics3
struct IPwmControllerStatics3 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _GetDeviceSelectorFromFriendlyName(HSTRING friendlyName, HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<PwmController*>* *operation);
};

// IPwmControllerStatics2
struct IPwmControllerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<PwmController*>* *operation);
};

// PwmController
template<typename> struct PwmController_statics {
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<PwmController, IPwmControllerStatics3>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static hstring GetDeviceSelector(hstring_ref friendlyName) { HSTRING result; hrcheck(get_activation_factory<PwmController, IPwmControllerStatics3>()->_GetDeviceSelectorFromFriendlyName(friendlyName, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<PwmController>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<PwmController*>* operation; hrcheck(get_activation_factory<PwmController, IPwmControllerStatics3>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<PwmController>>> GetDefaultAsync() { Foundation::IAsyncOperation<PwmController*>* operation; hrcheck(get_activation_factory<PwmController, IPwmControllerStatics2>()->_GetDefaultAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PwmController>>>>> GetControllersAsync(pptr<Provider::IPwmProvider> provider) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PwmController*>*>* operation; hrcheck(get_activation_factory<PwmController, IPwmControllerStatics>()->_GetControllersAsync(provider, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<PwmController, X> : X, Windows::Devices::Pwm::PwmController_statics<void> {
	typedef typename X::root_type PwmController;
};
struct PwmController : generate<PwmController> {};
}}}
} // namespace iso_winrt
