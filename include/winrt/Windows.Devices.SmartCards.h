#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.SmartCards

#include "Windows.Devices.SmartCards.0.h"
#include "Windows.Security.Cryptography.Core.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::SmartCards::SmartCardBackgroundTriggerContract> : value_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardTriggerType> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardLaunchBehavior> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardTriggerDetails2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardTriggerDetails3> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardTriggerDetails> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardTriggerDetails, Windows::Devices::SmartCards::ISmartCardTriggerDetails2, Windows::Devices::SmartCards::ISmartCardTriggerDetails3> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulatorContract> : value_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulatorEnablementPolicy> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulationCategory> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulationType> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardAppletIdGroupActivationPolicy> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardActivationPolicyChangeResult> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedReason> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulatorConnectionSource> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardAutomaticResponseStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardUnlockPromptingBehavior> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyAlgorithm> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramMaterialType> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramMaterialProtectionMethod> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramAlgorithm> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageFormat> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCapabilities> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageConfirmationResponseFormat> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramPlacementOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramGeneratorOperationStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptographicKeyAttestationStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorStatics3> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulator2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulator> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulator> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardEmulator, Windows::Devices::SmartCards::ISmartCardEmulator2> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAppletIdGroupRegistration> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardAppletIdGroupRegistration> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardAppletIdGroupRegistration> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAppletIdGroupStatics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAppletIdGroupFactory> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAppletIdGroup> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardAppletIdGroup> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardAppletIdGroup>, custom_activators {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgsWithCryptograms> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulatorApduReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs, Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgsWithCryptograms, Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs2> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorConnectionDeactivatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulatorConnectionDeactivatedEventArgs> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardEmulatorConnectionDeactivatedEventArgs> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardEmulatorConnectionProperties> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardEmulatorConnectionProperties> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardEmulatorConnectionProperties> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApduFactory> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu3> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu, Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu2, Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu3>, custom_activators {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramPlacementStep> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramPlacementStep> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramPlacementStep> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPossessionProof> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyCharacteristics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyCharacteristics> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyCharacteristics> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPackageCharacteristics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramMaterialPackageCharacteristics> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPackageCharacteristics> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramMaterialCharacteristics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramMaterialCharacteristics> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramMaterialCharacteristics> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramGeneratorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramGeneratorStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramGenerator2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardCryptogramGenerator> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramGenerator> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramGenerator, Windows::Devices::SmartCards::ISmartCardCryptogramGenerator2> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramStorageKeyInfo> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo, Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo2> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramMaterialPossessionProof> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPossessionProof> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardReaderKind> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardReaderStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption> : enum_type<int> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardReaderStatics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardReader> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardReader> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardReader> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardConnect> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCard> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCard> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCard, Windows::Devices::SmartCards::ISmartCardConnect> {};
template<> struct def<Windows::Devices::SmartCards::ICardAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::CardAddedEventArgs> : class_type<Platform::Object, Windows::Devices::SmartCards::ICardAddedEventArgs> {};
template<> struct def<Windows::Devices::SmartCards::ICardRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::CardRemovedEventArgs> : class_type<Platform::Object, Windows::Devices::SmartCards::ICardRemovedEventArgs> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardProvisioningStatics> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardProvisioningStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardProvisioning2> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardProvisioning> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardProvisioning> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardProvisioning, Windows::Devices::SmartCards::ISmartCardProvisioning2> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardPinPolicy> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardPinPolicy> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardPinPolicy> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardChallengeContext> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardChallengeContext> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardChallengeContext> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardPinResetHandler> : delegate_type {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardPinResetRequest> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardPinResetRequest> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardPinResetRequest> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardPinResetDeferral> : interface_type<> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardPinResetDeferral> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardPinResetDeferral> {};
template<> struct def<Windows::Devices::SmartCards::ISmartCardConnection> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::SmartCards::SmartCardConnection> : class_type<Platform::Object, Windows::Devices::SmartCards::ISmartCardConnection> {};

// uuids

template<> struct uuid<Windows::Devices::SmartCards::ISmartCardTriggerDetails> { define_guid(0x5F9BF11E, 0x39EF, 0x4F2B, 0xB4, 0x4F, 0xA, 0x91, 0x55, 0xB1, 0x77, 0xBC);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardTriggerDetails2> { define_guid(0x2945C569, 0x8975, 0x4A51, 0x9E, 0x1A, 0x5F, 0x8A, 0x76, 0xEE, 0x51, 0xAF);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardTriggerDetails3> { define_guid(0xB3E2C27D, 0x18C6, 0x4BA8, 0x83, 0x76, 0xEF, 0x3, 0xD4, 0x91, 0x26, 0x66);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorStatics> { define_guid(0x7A9BFC4B, 0xC4D3, 0x494F, 0xB8, 0xA2, 0x62, 0x15, 0xD8, 0x1E, 0x85, 0xB2);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorStatics3> { define_guid(0x59EA142A, 0x9F09, 0x43F5, 0x85, 0x65, 0xCF, 0xA8, 0x14, 0x8E, 0x4C, 0xB2);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorStatics2> { define_guid(0x69AE9F8A, 0xB775, 0x488B, 0x84, 0x36, 0x6C, 0x1E, 0x28, 0xED, 0x73, 0x1F);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulator2> { define_guid(0xFE3FC0B8, 0x8529, 0x411A, 0x80, 0x7B, 0x48, 0xED, 0xC2, 0xA0, 0xAB, 0x44);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulator> { define_guid(0xDFB906B2, 0x875E, 0x47E5, 0x80, 0x77, 0xE8, 0xBF, 0xF1, 0xB1, 0xC6, 0xFB);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAppletIdGroupRegistration> { define_guid(0xDF1208D1, 0x31BB, 0x5596, 0x43, 0xB1, 0x6D, 0x69, 0xA0, 0x25, 0x7B, 0x3A);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAppletIdGroupStatics> { define_guid(0xAB2899A9, 0xE76C, 0x45CF, 0xBF, 0x1D, 0x90, 0xEA, 0xA6, 0x20, 0x59, 0x27);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAppletIdGroupFactory> { define_guid(0x9105EB4D, 0x4A65, 0x4E41, 0x80, 0x61, 0xCB, 0xE8, 0x3F, 0x36, 0x95, 0xE5);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAppletIdGroup> { define_guid(0x7DB165E6, 0x6264, 0x56F4, 0x5E, 0x3, 0xC8, 0x63, 0x85, 0x39, 0x5E, 0xB1);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs2> { define_guid(0x8BF93DF0, 0x22E1, 0x4238, 0x86, 0x10, 0x94, 0xCE, 0x4A, 0x96, 0x54, 0x25);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgsWithCryptograms> { define_guid(0xD550BAC7, 0xB7BF, 0x4E29, 0x92, 0x94, 0xC, 0x4A, 0xC3, 0xC9, 0x41, 0xBD);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs> { define_guid(0xD55D1576, 0x69D2, 0x5333, 0x5B, 0x5F, 0xF8, 0xC0, 0xD6, 0xE9, 0xF0, 0x9F);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorConnectionDeactivatedEventArgs> { define_guid(0x2186D8D3, 0xC5EB, 0x5262, 0x43, 0xDF, 0x62, 0xA0, 0xA1, 0xB5, 0x55, 0x57);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardEmulatorConnectionProperties> { define_guid(0x4E2CA5EE, 0xF969, 0x507D, 0x6C, 0xF9, 0x34, 0xE2, 0xD1, 0x8D, 0xF3, 0x11);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApduFactory> { define_guid(0xE97EA2FA, 0xD02C, 0x4C55, 0xB0, 0x2A, 0x8C, 0xFF, 0x7F, 0xA9, 0xF0, 0x5B);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu3> { define_guid(0xBF43DA74, 0x6576, 0x4392, 0x93, 0x67, 0xFE, 0x3B, 0xC9, 0xE2, 0xD4, 0x96);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu2> { define_guid(0x44AEBB14, 0x559D, 0x4531, 0x4E, 0x51, 0x89, 0xDB, 0x6F, 0xA8, 0xA5, 0x7A);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu> { define_guid(0x52152BAB, 0xC63E, 0x4531, 0xA8, 0x57, 0xD7, 0x56, 0xD9, 0x9B, 0x98, 0x6A);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramPlacementStep> { define_guid(0x947B03EB, 0x8342, 0x4792, 0xA2, 0xE5, 0x92, 0x56, 0x36, 0x37, 0x8A, 0x53);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo> { define_guid(0x77B0F00D, 0xB097, 0x4F61, 0xA2, 0x6A, 0x95, 0x61, 0x63, 0x9C, 0x9C, 0x3A);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo2> { define_guid(0x440F9, 0xF7FD, 0x417D, 0x89, 0xE1, 0xFB, 0xB0, 0x38, 0x2A, 0xDC, 0x4D);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPossessionProof> { define_guid(0xE5B9AB8C, 0xA141, 0x4135, 0x9A, 0xDD, 0xB0, 0xD2, 0xE3, 0xAA, 0x1F, 0xC9);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyCharacteristics> { define_guid(0x8552546E, 0x4457, 0x4825, 0xB4, 0x64, 0x63, 0x54, 0x71, 0xA3, 0x9F, 0x5C);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult> { define_guid(0x8C7CE857, 0xA7E7, 0x489D, 0xB9, 0xD6, 0x36, 0x80, 0x61, 0x51, 0x50, 0x12);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPackageCharacteristics> { define_guid(0xFFB58E1F, 0x692, 0x4C47, 0x93, 0xCF, 0x34, 0xD9, 0x1F, 0x9D, 0xCD, 0x0);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> { define_guid(0x4E6A8A5C, 0x9773, 0x46C4, 0xA3, 0x2F, 0xB1, 0xE5, 0x43, 0x15, 0x9E, 0x4);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramMaterialCharacteristics> { define_guid(0xFC9AC5CC, 0xC1D7, 0x4153, 0x92, 0x3B, 0xA2, 0xD4, 0x3C, 0x6C, 0x8D, 0x49);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult> { define_guid(0x2798E029, 0xD687, 0x4C92, 0x86, 0xC6, 0x39, 0x9E, 0x9A, 0xE, 0xCB, 0x9);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramGeneratorStatics> { define_guid(0x9933910, 0xCB9C, 0x4015, 0x96, 0x7D, 0x52, 0x34, 0xF3, 0xB0, 0x29, 0x0);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramGeneratorStatics2> { define_guid(0x9BDF5E5, 0xB4BD, 0x4E23, 0xA5, 0x88, 0x74, 0x46, 0x92, 0x4, 0xC1, 0x28);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramGenerator2> { define_guid(0x7116AA34, 0x5D6D, 0x4B4A, 0x96, 0xA3, 0xEF, 0xA4, 0x7D, 0x2A, 0x7E, 0x25);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardCryptogramGenerator> { define_guid(0xE39F587B, 0xEDD3, 0x4E49, 0xB5, 0x94, 0xF, 0xF5, 0xE4, 0xD0, 0xC7, 0x6F);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardReaderStatics> { define_guid(0x103C04E1, 0xA1CA, 0x48F2, 0xA2, 0x81, 0x5B, 0x6F, 0x66, 0x9A, 0xF1, 0x7);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardReader> { define_guid(0x1074B4E0, 0x54C2, 0x4DF0, 0x81, 0x7A, 0x14, 0xC1, 0x43, 0x78, 0xF0, 0x6C);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardConnect> { define_guid(0x2FDF87E5, 0x28D, 0x491E, 0xA0, 0x58, 0x33, 0x82, 0xC3, 0x98, 0x6F, 0x40);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCard> { define_guid(0x1B718871, 0x6434, 0x43F4, 0xB5, 0x5A, 0x6A, 0x29, 0x62, 0x38, 0x70, 0xAA);};
template<> struct uuid<Windows::Devices::SmartCards::ICardAddedEventArgs> { define_guid(0x18BBEF98, 0xF18B, 0x4DD3, 0xB1, 0x18, 0xDF, 0xB2, 0xC8, 0xE2, 0x3C, 0xC6);};
template<> struct uuid<Windows::Devices::SmartCards::ICardRemovedEventArgs> { define_guid(0x15331AAF, 0x22D7, 0x4945, 0xAF, 0xC9, 0x3, 0xB4, 0x6F, 0x42, 0xA6, 0xCD);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardProvisioningStatics> { define_guid(0x13882848, 0xD13, 0x4E70, 0x97, 0x35, 0x51, 0xDA, 0xEC, 0xA5, 0x25, 0x4F);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardProvisioningStatics2> { define_guid(0x3447C6A8, 0xC9A0, 0x4BD6, 0xB5, 0xD, 0x25, 0x1F, 0x4E, 0x8D, 0x3A, 0x62);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardProvisioning2> { define_guid(0x10FD28EB, 0x3F79, 0x4B66, 0x9B, 0x7C, 0x11, 0xC1, 0x49, 0xB7, 0xD0, 0xBC);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardProvisioning> { define_guid(0x19EEEDBD, 0x1FAB, 0x477C, 0xB7, 0x12, 0x1A, 0x2C, 0x5A, 0xF1, 0xFD, 0x6E);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardPinPolicy> { define_guid(0x183CE184, 0x4DB6, 0x4841, 0xAC, 0x9E, 0x2A, 0xC1, 0xF3, 0x9B, 0x73, 0x4);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardChallengeContext> { define_guid(0x192A5319, 0xC9C4, 0x4947, 0x81, 0xCC, 0x44, 0x79, 0x4A, 0x61, 0xEF, 0x91);};
template<> struct uuid<Windows::Devices::SmartCards::SmartCardPinResetHandler> { define_guid(0x138D5E40, 0xF3BC, 0x4A5C, 0xB4, 0x1D, 0x4B, 0x4E, 0xF6, 0x84, 0xE2, 0x37);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardPinResetRequest> { define_guid(0x12FE3C4D, 0x5FB9, 0x4E8E, 0x9F, 0xF6, 0x61, 0xF4, 0x75, 0x12, 0x4F, 0xEF);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardPinResetDeferral> { define_guid(0x18C94AAC, 0x7805, 0x4004, 0x85, 0xE4, 0xBB, 0xEF, 0xAC, 0x8F, 0x68, 0x84);};
template<> struct uuid<Windows::Devices::SmartCards::ISmartCardConnection> { define_guid(0x7EDB991A, 0xA81A, 0x47BC, 0xA6, 0x49, 0x15, 0x6B, 0xE6, 0xB7, 0xF2, 0x31);};

// types

namespace Windows { namespace Devices { namespace SmartCards {

// ISmartCardTriggerDetails
struct ISmartCardTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_TriggerType(SmartCardTriggerType *value);
	virtual STDMETHODIMP _get_SourceAppletId(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_TriggerData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct ISmartCardTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardTriggerDetails_adaptor::SourceAppletId)->_get_SourceAppletId(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} SourceAppletId;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardTriggerDetails_adaptor::TriggerData)->_get_TriggerData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} TriggerData;
		struct : property {
			SmartCardTriggerType get() { SmartCardTriggerType value; hrcheck(enc(&ISmartCardTriggerDetails_adaptor::TriggerType)->_get_TriggerType(&value)); return value; }
			SmartCardTriggerType operator()() { return get(); }
			operator SmartCardTriggerType () { return get(); }
		} TriggerType;
	};
	ISmartCardTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<ISmartCardTriggerDetails, X> : Windows::Devices::SmartCards::ISmartCardTriggerDetails_adaptor<X> { typedef adapt ISmartCardTriggerDetails; };
struct ISmartCardTriggerDetails : ISmartCardTriggerDetails_raw, generate<ISmartCardTriggerDetails> {};

// ISmartCardTriggerDetails2
struct ISmartCardTriggerDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_Emulator(SmartCardEmulator* *value);
	virtual STDMETHODIMP _TryLaunchCurrentAppAsync(HSTRING arguments, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryLaunchCurrentAppWithBehaviorAsync(HSTRING arguments, SmartCardLaunchBehavior behavior, Foundation::IAsyncOperation<bool>* *result);
};
template<typename X> struct ISmartCardTriggerDetails2_adaptor : X {
	union {
		struct : property {
			ptr<SmartCardEmulator> get() { SmartCardEmulator* value; hrcheck(enc(&ISmartCardTriggerDetails2_adaptor::Emulator)->_get_Emulator(&value)); return from_abi(value); }
			ptr<SmartCardEmulator> operator()() { return get(); }
			operator ptr<SmartCardEmulator> () { return get(); }
			ptr<SmartCardEmulator> operator->() { return get(); }
		} Emulator;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryLaunchCurrentAppAsync(hstring_ref arguments) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryLaunchCurrentAppAsync(arguments, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryLaunchCurrentAppAsync(hstring_ref arguments, SmartCardLaunchBehavior behavior) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryLaunchCurrentAppWithBehaviorAsync(arguments, behavior, &result)); return from_abi(result); }
	ISmartCardTriggerDetails2_adaptor() {}
};
template<typename X> struct adapt<ISmartCardTriggerDetails2, X> : Windows::Devices::SmartCards::ISmartCardTriggerDetails2_adaptor<X> { typedef adapt ISmartCardTriggerDetails2; };
struct ISmartCardTriggerDetails2 : ISmartCardTriggerDetails2_raw, generate<ISmartCardTriggerDetails2> {};

// ISmartCardTriggerDetails3
struct ISmartCardTriggerDetails3_raw : IInspectable {
	virtual STDMETHODIMP _get_SmartCard(SmartCards::SmartCard* *value);
};
template<typename X> struct ISmartCardTriggerDetails3_adaptor : X {
	union {
		struct : property {
			ptr<SmartCards::SmartCard> get() { SmartCards::SmartCard* value; hrcheck(enc(&ISmartCardTriggerDetails3_adaptor::SmartCard)->_get_SmartCard(&value)); return from_abi(value); }
			ptr<SmartCards::SmartCard> operator()() { return get(); }
			operator ptr<SmartCards::SmartCard> () { return get(); }
			ptr<SmartCards::SmartCard> operator->() { return get(); }
		} SmartCard;
	};
	ISmartCardTriggerDetails3_adaptor() {}
};
template<typename X> struct adapt<ISmartCardTriggerDetails3, X> : Windows::Devices::SmartCards::ISmartCardTriggerDetails3_adaptor<X> { typedef adapt ISmartCardTriggerDetails3; };
struct ISmartCardTriggerDetails3 : ISmartCardTriggerDetails3_raw, generate<ISmartCardTriggerDetails3> {};

// SmartCardTriggerDetails
template<typename X> struct statics<SmartCardTriggerDetails, X> : X {
	typedef typename X::root_type SmartCardTriggerDetails;
};
struct SmartCardTriggerDetails : generate<SmartCardTriggerDetails> {
	using ISmartCardTriggerDetails2::TryLaunchCurrentAppAsync;
};

// ISmartCardEmulatorStatics
struct ISmartCardEmulatorStatics : IInspectable {
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<SmartCardEmulator*>* *result);
};

// ISmartCardEmulatorStatics3
struct ISmartCardEmulatorStatics3 : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *result);
};

// ISmartCardEmulatorStatics2
struct ISmartCardEmulatorStatics2 : IInspectable {
	virtual STDMETHODIMP _GetAppletIdGroupRegistrationsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SmartCardAppletIdGroupRegistration*>*>* *result);
	virtual STDMETHODIMP _RegisterAppletIdGroupAsync(SmartCardAppletIdGroup* appletIdGroup, Foundation::IAsyncOperation<SmartCardAppletIdGroupRegistration*>* *result);
	virtual STDMETHODIMP _UnregisterAppletIdGroupAsync(SmartCardAppletIdGroupRegistration* registration, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _get_MaxAppletIdGroupRegistrations(unsigned short *value);
};

// ISmartCardEmulator2
struct ISmartCardEmulator2_raw : IInspectable {
	virtual STDMETHODIMP _add_ApduReceived(Foundation::TypedEventHandler<SmartCardEmulator*, SmartCardEmulatorApduReceivedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ApduReceived(Foundation::EventRegistrationToken value);
	virtual STDMETHODIMP _add_ConnectionDeactivated(Foundation::TypedEventHandler<SmartCardEmulator*, SmartCardEmulatorConnectionDeactivatedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ConnectionDeactivated(Foundation::EventRegistrationToken value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _IsHostCardEmulationSupported(bool *value);
};
template<typename X> struct ISmartCardEmulator2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SmartCardEmulator>, ptr<SmartCardEmulatorApduReceivedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISmartCardEmulator2_adaptor::ApduReceived)->_add_ApduReceived(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& value) { hrcheck(enc(&ISmartCardEmulator2_adaptor::ApduReceived)->_remove_ApduReceived(value)); }
		} ApduReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SmartCardEmulator>, ptr<SmartCardEmulatorConnectionDeactivatedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISmartCardEmulator2_adaptor::ConnectionDeactivated)->_add_ConnectionDeactivated(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& value) { hrcheck(enc(&ISmartCardEmulator2_adaptor::ConnectionDeactivated)->_remove_ConnectionDeactivated(value)); }
		} ConnectionDeactivated;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	bool IsHostCardEmulationSupported() { bool value; hrcheck(X::get()->_IsHostCardEmulationSupported(&value)); return value; }
	ISmartCardEmulator2_adaptor() {}
};
template<typename X> struct adapt<ISmartCardEmulator2, X> : Windows::Devices::SmartCards::ISmartCardEmulator2_adaptor<X> { typedef adapt ISmartCardEmulator2; };
struct ISmartCardEmulator2 : ISmartCardEmulator2_raw, generate<ISmartCardEmulator2> {};

// ISmartCardEmulator
struct ISmartCardEmulator_raw : IInspectable {
	virtual STDMETHODIMP _get_EnablementPolicy(SmartCardEmulatorEnablementPolicy *value);
};
template<typename X> struct ISmartCardEmulator_adaptor : X {
	union {
		struct : property {
			SmartCardEmulatorEnablementPolicy get() { SmartCardEmulatorEnablementPolicy value; hrcheck(enc(&ISmartCardEmulator_adaptor::EnablementPolicy)->_get_EnablementPolicy(&value)); return value; }
			SmartCardEmulatorEnablementPolicy operator()() { return get(); }
			operator SmartCardEmulatorEnablementPolicy () { return get(); }
		} EnablementPolicy;
	};
	ISmartCardEmulator_adaptor() {}
};
template<typename X> struct adapt<ISmartCardEmulator, X> : Windows::Devices::SmartCards::ISmartCardEmulator_adaptor<X> { typedef adapt ISmartCardEmulator; };
struct ISmartCardEmulator : ISmartCardEmulator_raw, generate<ISmartCardEmulator> {};

// SmartCardEmulator
template<typename> struct SmartCardEmulator_statics {
	static struct _MaxAppletIdGroupRegistrations : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<SmartCardEmulator, ISmartCardEmulatorStatics2>()->_get_MaxAppletIdGroupRegistrations(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} MaxAppletIdGroupRegistrations;
	static bool IsSupported() { bool result; hrcheck(get_activation_factory<SmartCardEmulator, ISmartCardEmulatorStatics3>()->_IsSupported(&result)); return result; }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<SmartCardAppletIdGroupRegistration>>>>> GetAppletIdGroupRegistrationsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SmartCardAppletIdGroupRegistration*>*>* result; hrcheck(get_activation_factory<SmartCardEmulator, ISmartCardEmulatorStatics2>()->_GetAppletIdGroupRegistrationsAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardAppletIdGroupRegistration>>> RegisterAppletIdGroupAsync(pptr<SmartCardAppletIdGroup> appletIdGroup) { Foundation::IAsyncOperation<SmartCardAppletIdGroupRegistration*>* result; hrcheck(get_activation_factory<SmartCardEmulator, ISmartCardEmulatorStatics2>()->_RegisterAppletIdGroupAsync(appletIdGroup, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> UnregisterAppletIdGroupAsync(pptr<SmartCardAppletIdGroupRegistration> registration) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<SmartCardEmulator, ISmartCardEmulatorStatics2>()->_UnregisterAppletIdGroupAsync(registration, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardEmulator>>> GetDefaultAsync() { Foundation::IAsyncOperation<SmartCardEmulator*>* result; hrcheck(get_activation_factory<SmartCardEmulator, ISmartCardEmulatorStatics>()->_GetDefaultAsync(&result)); return from_abi(result); }
};
template<typename X> typename SmartCardEmulator_statics<X>::_MaxAppletIdGroupRegistrations SmartCardEmulator_statics<X>::MaxAppletIdGroupRegistrations;

template<typename X> struct statics<SmartCardEmulator, X> : X, Windows::Devices::SmartCards::SmartCardEmulator_statics<void> {
	typedef typename X::root_type SmartCardEmulator;
};
struct SmartCardEmulator : generate<SmartCardEmulator> {};

// ISmartCardAppletIdGroupRegistration
struct ISmartCardAppletIdGroupRegistration_raw : IInspectable {
	virtual STDMETHODIMP _get_ActivationPolicy(SmartCardAppletIdGroupActivationPolicy *value);
	virtual STDMETHODIMP _get_AppletIdGroup(SmartCardAppletIdGroup* *value);
	virtual STDMETHODIMP _RequestActivationPolicyChangeAsync(SmartCardAppletIdGroupActivationPolicy policy, Foundation::IAsyncOperation<SmartCardActivationPolicyChangeResult>* *result);
	virtual STDMETHODIMP _get_Id(Platform::Guid *value);
	virtual STDMETHODIMP _SetAutomaticResponseApdusAsync(Foundation::Collections::IIterable<SmartCardAutomaticResponseApdu*>* apdus, Foundation::IAsyncAction* *result);
};
template<typename X> struct ISmartCardAppletIdGroupRegistration_adaptor : X {
	union {
		struct : property {
			SmartCardAppletIdGroupActivationPolicy get() { SmartCardAppletIdGroupActivationPolicy value; hrcheck(enc(&ISmartCardAppletIdGroupRegistration_adaptor::ActivationPolicy)->_get_ActivationPolicy(&value)); return value; }
			SmartCardAppletIdGroupActivationPolicy operator()() { return get(); }
			operator SmartCardAppletIdGroupActivationPolicy () { return get(); }
		} ActivationPolicy;
		struct : property {
			ptr<SmartCardAppletIdGroup> get() { SmartCardAppletIdGroup* value; hrcheck(enc(&ISmartCardAppletIdGroupRegistration_adaptor::AppletIdGroup)->_get_AppletIdGroup(&value)); return from_abi(value); }
			ptr<SmartCardAppletIdGroup> operator()() { return get(); }
			operator ptr<SmartCardAppletIdGroup> () { return get(); }
			ptr<SmartCardAppletIdGroup> operator->() { return get(); }
		} AppletIdGroup;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ISmartCardAppletIdGroupRegistration_adaptor::Id)->_get_Id(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} Id;
	};
	ptr<Foundation::IAsyncOperation<SmartCardActivationPolicyChangeResult>> RequestActivationPolicyChangeAsync(SmartCardAppletIdGroupActivationPolicy policy) { Foundation::IAsyncOperation<SmartCardActivationPolicyChangeResult>* result; hrcheck(X::get()->_RequestActivationPolicyChangeAsync(policy, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SetAutomaticResponseApdusAsync(pptr<Foundation::Collections::IIterable<ptr<SmartCardAutomaticResponseApdu>>> apdus) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SetAutomaticResponseApdusAsync(to_abi(apdus), &result)); return from_abi(result); }
	ISmartCardAppletIdGroupRegistration_adaptor() {}
};
template<typename X> struct adapt<ISmartCardAppletIdGroupRegistration, X> : Windows::Devices::SmartCards::ISmartCardAppletIdGroupRegistration_adaptor<X> { typedef adapt ISmartCardAppletIdGroupRegistration; };
struct ISmartCardAppletIdGroupRegistration : ISmartCardAppletIdGroupRegistration_raw, generate<ISmartCardAppletIdGroupRegistration> {};

// SmartCardAppletIdGroupRegistration
template<typename X> struct statics<SmartCardAppletIdGroupRegistration, X> : X {
	typedef typename X::root_type SmartCardAppletIdGroupRegistration;
};
struct SmartCardAppletIdGroupRegistration : generate<SmartCardAppletIdGroupRegistration> {};

// ISmartCardAppletIdGroupStatics
struct ISmartCardAppletIdGroupStatics : IInspectable {
	virtual STDMETHODIMP _get_MaxAppletIds(unsigned short *value);
};

// ISmartCardAppletIdGroupFactory
struct ISmartCardAppletIdGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING displayName, Foundation::Collections::IVector<Storage::Streams::IBuffer*>* appletIds, SmartCardEmulationCategory emulationCategory, SmartCardEmulationType emulationType, SmartCardAppletIdGroup* *result);
};

// ISmartCardAppletIdGroup
struct ISmartCardAppletIdGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_AppletIds(Foundation::Collections::IVector<Storage::Streams::IBuffer*>* *value);
	virtual STDMETHODIMP _get_SmartCardEmulationCategory(SmartCards::SmartCardEmulationCategory *value);
	virtual STDMETHODIMP _put_SmartCardEmulationCategory(SmartCards::SmartCardEmulationCategory value);
	virtual STDMETHODIMP _get_SmartCardEmulationType(SmartCards::SmartCardEmulationType *value);
	virtual STDMETHODIMP _put_SmartCardEmulationType(SmartCards::SmartCardEmulationType value);
	virtual STDMETHODIMP _get_AutomaticEnablement(bool *value);
	virtual STDMETHODIMP _put_AutomaticEnablement(bool value);
};
template<typename X> struct ISmartCardAppletIdGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Storage::Streams::IBuffer>>> get() { Foundation::Collections::IVector<Storage::Streams::IBuffer*>* value; hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::AppletIds)->_get_AppletIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Storage::Streams::IBuffer>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Storage::Streams::IBuffer>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Storage::Streams::IBuffer>>> operator->() { return get(); }
		} AppletIds;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::AutomaticEnablement)->_get_AutomaticEnablement(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::AutomaticEnablement)->_put_AutomaticEnablement(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutomaticEnablement;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			SmartCards::SmartCardEmulationCategory get() { SmartCards::SmartCardEmulationCategory value; hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::SmartCardEmulationCategory)->_get_SmartCardEmulationCategory(&value)); return value; }
			SmartCards::SmartCardEmulationCategory operator()() { return get(); }
			operator SmartCards::SmartCardEmulationCategory () { return get(); }
			void put(SmartCards::SmartCardEmulationCategory value) { hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::SmartCardEmulationCategory)->_put_SmartCardEmulationCategory(value)); }
			void operator=(SmartCards::SmartCardEmulationCategory value) { put(value); }
			void operator()(SmartCards::SmartCardEmulationCategory value) { put(value); }
		} SmartCardEmulationCategory;
		struct : property {
			SmartCards::SmartCardEmulationType get() { SmartCards::SmartCardEmulationType value; hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::SmartCardEmulationType)->_get_SmartCardEmulationType(&value)); return value; }
			SmartCards::SmartCardEmulationType operator()() { return get(); }
			operator SmartCards::SmartCardEmulationType () { return get(); }
			void put(SmartCards::SmartCardEmulationType value) { hrcheck(enc(&ISmartCardAppletIdGroup_adaptor::SmartCardEmulationType)->_put_SmartCardEmulationType(value)); }
			void operator=(SmartCards::SmartCardEmulationType value) { put(value); }
			void operator()(SmartCards::SmartCardEmulationType value) { put(value); }
		} SmartCardEmulationType;
	};
	ISmartCardAppletIdGroup_adaptor() {}
};
template<typename X> struct adapt<ISmartCardAppletIdGroup, X> : Windows::Devices::SmartCards::ISmartCardAppletIdGroup_adaptor<X> { typedef adapt ISmartCardAppletIdGroup; };
struct ISmartCardAppletIdGroup : ISmartCardAppletIdGroup_raw, generate<ISmartCardAppletIdGroup> {};

// SmartCardAppletIdGroup
template<typename> struct SmartCardAppletIdGroup_statics {
	static struct _MaxAppletIds : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<SmartCardAppletIdGroup, ISmartCardAppletIdGroupStatics>()->_get_MaxAppletIds(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} MaxAppletIds;
	static SmartCardAppletIdGroup *activate(hstring_ref displayName, pptr<Foundation::Collections::IVector<ptr<Storage::Streams::IBuffer>>> appletIds, SmartCards::SmartCardEmulationCategory emulationCategory, SmartCards::SmartCardEmulationType emulationType) { SmartCardAppletIdGroup *result; hrcheck(get_activation_factory<SmartCardAppletIdGroup, ISmartCardAppletIdGroupFactory>()->_Create(displayName, to_abi(appletIds), emulationCategory, emulationType, &result)); return result; }
};
template<typename X> typename SmartCardAppletIdGroup_statics<X>::_MaxAppletIds SmartCardAppletIdGroup_statics<X>::MaxAppletIds;

template<typename X> struct statics<SmartCardAppletIdGroup, X> : X, Windows::Devices::SmartCards::SmartCardAppletIdGroup_statics<void> {
	using Windows::Devices::SmartCards::SmartCardAppletIdGroup_statics<void>::activate;
	typedef typename X::root_type SmartCardAppletIdGroup;
};
struct SmartCardAppletIdGroup : generate<SmartCardAppletIdGroup> {};

// ISmartCardEmulatorApduReceivedEventArgs2
struct ISmartCardEmulatorApduReceivedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_State(unsigned *value);
	virtual STDMETHODIMP _TryRespondWithStateAsync(Storage::Streams::IBuffer* responseApdu, Foundation::IReference<unsigned>* nextState, Foundation::IAsyncOperation<bool>* *result);
};
template<typename X> struct ISmartCardEmulatorApduReceivedEventArgs2_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmartCardEmulatorApduReceivedEventArgs2_adaptor::State)->_get_State(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} State;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryRespondAsync(pptr<Storage::Streams::IBuffer> responseApdu, pptr<Foundation::IReference<unsigned>> nextState) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryRespondWithStateAsync(responseApdu, to_abi(nextState), &result)); return from_abi(result); }
	ISmartCardEmulatorApduReceivedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<ISmartCardEmulatorApduReceivedEventArgs2, X> : Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs2_adaptor<X> { typedef adapt ISmartCardEmulatorApduReceivedEventArgs2; };
struct ISmartCardEmulatorApduReceivedEventArgs2 : ISmartCardEmulatorApduReceivedEventArgs2_raw, generate<ISmartCardEmulatorApduReceivedEventArgs2> {};

// ISmartCardEmulatorApduReceivedEventArgsWithCryptograms
struct ISmartCardEmulatorApduReceivedEventArgsWithCryptograms_raw : IInspectable {
	virtual STDMETHODIMP _TryRespondWithCryptogramsAsync(Storage::Streams::IBuffer* responseTemplate, Foundation::Collections::IIterable<SmartCardCryptogramPlacementStep*>* cryptogramPlacementSteps, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
	virtual STDMETHODIMP _TryRespondWithCryptogramsAndStateAsync(Storage::Streams::IBuffer* responseTemplate, Foundation::Collections::IIterable<SmartCardCryptogramPlacementStep*>* cryptogramPlacementSteps, Foundation::IReference<unsigned>* nextState, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
};
template<typename X> struct ISmartCardEmulatorApduReceivedEventArgsWithCryptograms_adaptor : X {
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> TryRespondWithCryptogramsAsync(pptr<Storage::Streams::IBuffer> responseTemplate, pptr<Foundation::Collections::IIterable<ptr<SmartCardCryptogramPlacementStep>>> cryptogramPlacementSteps) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_TryRespondWithCryptogramsAsync(responseTemplate, to_abi(cryptogramPlacementSteps), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> TryRespondWithCryptogramsAsync(pptr<Storage::Streams::IBuffer> responseTemplate, pptr<Foundation::Collections::IIterable<ptr<SmartCardCryptogramPlacementStep>>> cryptogramPlacementSteps, pptr<Foundation::IReference<unsigned>> nextState) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_TryRespondWithCryptogramsAndStateAsync(responseTemplate, to_abi(cryptogramPlacementSteps), to_abi(nextState), &result)); return from_abi(result); }
};
template<typename X> struct adapt<ISmartCardEmulatorApduReceivedEventArgsWithCryptograms, X> : Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgsWithCryptograms_adaptor<X> { typedef adapt ISmartCardEmulatorApduReceivedEventArgsWithCryptograms; };
struct ISmartCardEmulatorApduReceivedEventArgsWithCryptograms : ISmartCardEmulatorApduReceivedEventArgsWithCryptograms_raw, generate<ISmartCardEmulatorApduReceivedEventArgsWithCryptograms> {};

// ISmartCardEmulatorApduReceivedEventArgs
struct ISmartCardEmulatorApduReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_CommandApdu(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_ConnectionProperties(SmartCardEmulatorConnectionProperties* *value);
	virtual STDMETHODIMP _TryRespondAsync(Storage::Streams::IBuffer* responseApdu, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _get_AutomaticResponseStatus(SmartCardAutomaticResponseStatus *value);
};
template<typename X> struct ISmartCardEmulatorApduReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			SmartCardAutomaticResponseStatus get() { SmartCardAutomaticResponseStatus value; hrcheck(enc(&ISmartCardEmulatorApduReceivedEventArgs_adaptor::AutomaticResponseStatus)->_get_AutomaticResponseStatus(&value)); return value; }
			SmartCardAutomaticResponseStatus operator()() { return get(); }
			operator SmartCardAutomaticResponseStatus () { return get(); }
		} AutomaticResponseStatus;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardEmulatorApduReceivedEventArgs_adaptor::CommandApdu)->_get_CommandApdu(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} CommandApdu;
		struct : property {
			ptr<SmartCardEmulatorConnectionProperties> get() { SmartCardEmulatorConnectionProperties* value; hrcheck(enc(&ISmartCardEmulatorApduReceivedEventArgs_adaptor::ConnectionProperties)->_get_ConnectionProperties(&value)); return from_abi(value); }
			ptr<SmartCardEmulatorConnectionProperties> operator()() { return get(); }
			operator ptr<SmartCardEmulatorConnectionProperties> () { return get(); }
			ptr<SmartCardEmulatorConnectionProperties> operator->() { return get(); }
		} ConnectionProperties;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryRespondAsync(pptr<Storage::Streams::IBuffer> responseApdu) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryRespondAsync(responseApdu, &result)); return from_abi(result); }
	ISmartCardEmulatorApduReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISmartCardEmulatorApduReceivedEventArgs, X> : Windows::Devices::SmartCards::ISmartCardEmulatorApduReceivedEventArgs_adaptor<X> { typedef adapt ISmartCardEmulatorApduReceivedEventArgs; };
struct ISmartCardEmulatorApduReceivedEventArgs : ISmartCardEmulatorApduReceivedEventArgs_raw, generate<ISmartCardEmulatorApduReceivedEventArgs> {};

// SmartCardEmulatorApduReceivedEventArgs
template<typename X> struct statics<SmartCardEmulatorApduReceivedEventArgs, X> : X {
	typedef typename X::root_type SmartCardEmulatorApduReceivedEventArgs;
};
struct SmartCardEmulatorApduReceivedEventArgs : generate<SmartCardEmulatorApduReceivedEventArgs> {
	using ISmartCardEmulatorApduReceivedEventArgsWithCryptograms::TryRespondWithCryptogramsAsync;
	using ISmartCardEmulatorApduReceivedEventArgs::TryRespondAsync;
	using ISmartCardEmulatorApduReceivedEventArgs2::TryRespondAsync;
};

// ISmartCardEmulatorConnectionDeactivatedEventArgs
struct ISmartCardEmulatorConnectionDeactivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ConnectionProperties(SmartCardEmulatorConnectionProperties* *value);
	virtual STDMETHODIMP _get_Reason(SmartCardEmulatorConnectionDeactivatedReason *value);
};
template<typename X> struct ISmartCardEmulatorConnectionDeactivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SmartCardEmulatorConnectionProperties> get() { SmartCardEmulatorConnectionProperties* value; hrcheck(enc(&ISmartCardEmulatorConnectionDeactivatedEventArgs_adaptor::ConnectionProperties)->_get_ConnectionProperties(&value)); return from_abi(value); }
			ptr<SmartCardEmulatorConnectionProperties> operator()() { return get(); }
			operator ptr<SmartCardEmulatorConnectionProperties> () { return get(); }
			ptr<SmartCardEmulatorConnectionProperties> operator->() { return get(); }
		} ConnectionProperties;
		struct : property {
			SmartCardEmulatorConnectionDeactivatedReason get() { SmartCardEmulatorConnectionDeactivatedReason value; hrcheck(enc(&ISmartCardEmulatorConnectionDeactivatedEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			SmartCardEmulatorConnectionDeactivatedReason operator()() { return get(); }
			operator SmartCardEmulatorConnectionDeactivatedReason () { return get(); }
		} Reason;
	};
	ISmartCardEmulatorConnectionDeactivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISmartCardEmulatorConnectionDeactivatedEventArgs, X> : Windows::Devices::SmartCards::ISmartCardEmulatorConnectionDeactivatedEventArgs_adaptor<X> { typedef adapt ISmartCardEmulatorConnectionDeactivatedEventArgs; };
struct ISmartCardEmulatorConnectionDeactivatedEventArgs : ISmartCardEmulatorConnectionDeactivatedEventArgs_raw, generate<ISmartCardEmulatorConnectionDeactivatedEventArgs> {};

// SmartCardEmulatorConnectionDeactivatedEventArgs
template<typename X> struct statics<SmartCardEmulatorConnectionDeactivatedEventArgs, X> : X {
	typedef typename X::root_type SmartCardEmulatorConnectionDeactivatedEventArgs;
};
struct SmartCardEmulatorConnectionDeactivatedEventArgs : generate<SmartCardEmulatorConnectionDeactivatedEventArgs> {};

// ISmartCardEmulatorConnectionProperties
struct ISmartCardEmulatorConnectionProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(Platform::Guid *value);
	virtual STDMETHODIMP _get_Source(SmartCardEmulatorConnectionSource *value);
};
template<typename X> struct ISmartCardEmulatorConnectionProperties_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ISmartCardEmulatorConnectionProperties_adaptor::Id)->_get_Id(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} Id;
		struct : property {
			SmartCardEmulatorConnectionSource get() { SmartCardEmulatorConnectionSource value; hrcheck(enc(&ISmartCardEmulatorConnectionProperties_adaptor::Source)->_get_Source(&value)); return value; }
			SmartCardEmulatorConnectionSource operator()() { return get(); }
			operator SmartCardEmulatorConnectionSource () { return get(); }
		} Source;
	};
	ISmartCardEmulatorConnectionProperties_adaptor() {}
};
template<typename X> struct adapt<ISmartCardEmulatorConnectionProperties, X> : Windows::Devices::SmartCards::ISmartCardEmulatorConnectionProperties_adaptor<X> { typedef adapt ISmartCardEmulatorConnectionProperties; };
struct ISmartCardEmulatorConnectionProperties : ISmartCardEmulatorConnectionProperties_raw, generate<ISmartCardEmulatorConnectionProperties> {};

// SmartCardEmulatorConnectionProperties
template<typename X> struct statics<SmartCardEmulatorConnectionProperties, X> : X {
	typedef typename X::root_type SmartCardEmulatorConnectionProperties;
};
struct SmartCardEmulatorConnectionProperties : generate<SmartCardEmulatorConnectionProperties> {};

// ISmartCardAutomaticResponseApduFactory
struct ISmartCardAutomaticResponseApduFactory : IInspectable {
	virtual STDMETHODIMP _Create(Storage::Streams::IBuffer* commandApdu, Storage::Streams::IBuffer* responseApdu, SmartCardAutomaticResponseApdu* *result);
};

// ISmartCardAutomaticResponseApdu3
struct ISmartCardAutomaticResponseApdu3_raw : IInspectable {
	virtual STDMETHODIMP _get_AllowWhenCryptogramGeneratorNotPrepared(bool *value);
	virtual STDMETHODIMP _put_AllowWhenCryptogramGeneratorNotPrepared(bool value);
};
template<typename X> struct ISmartCardAutomaticResponseApdu3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmartCardAutomaticResponseApdu3_adaptor::AllowWhenCryptogramGeneratorNotPrepared)->_get_AllowWhenCryptogramGeneratorNotPrepared(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu3_adaptor::AllowWhenCryptogramGeneratorNotPrepared)->_put_AllowWhenCryptogramGeneratorNotPrepared(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowWhenCryptogramGeneratorNotPrepared;
	};
	ISmartCardAutomaticResponseApdu3_adaptor() {}
};
template<typename X> struct adapt<ISmartCardAutomaticResponseApdu3, X> : Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu3_adaptor<X> { typedef adapt ISmartCardAutomaticResponseApdu3; };
struct ISmartCardAutomaticResponseApdu3 : ISmartCardAutomaticResponseApdu3_raw, generate<ISmartCardAutomaticResponseApdu3> {};

// ISmartCardAutomaticResponseApdu2
struct ISmartCardAutomaticResponseApdu2_raw : IInspectable {
	virtual STDMETHODIMP _get_InputState(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_InputState(Foundation::IReference<unsigned>* value);
	virtual STDMETHODIMP _get_OutputState(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_OutputState(Foundation::IReference<unsigned>* value);
};
template<typename X> struct ISmartCardAutomaticResponseApdu2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&ISmartCardAutomaticResponseApdu2_adaptor::InputState)->_get_InputState(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu2_adaptor::InputState)->_put_InputState(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} InputState;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&ISmartCardAutomaticResponseApdu2_adaptor::OutputState)->_get_OutputState(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu2_adaptor::OutputState)->_put_OutputState(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} OutputState;
	};
	ISmartCardAutomaticResponseApdu2_adaptor() {}
};
template<typename X> struct adapt<ISmartCardAutomaticResponseApdu2, X> : Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu2_adaptor<X> { typedef adapt ISmartCardAutomaticResponseApdu2; };
struct ISmartCardAutomaticResponseApdu2 : ISmartCardAutomaticResponseApdu2_raw, generate<ISmartCardAutomaticResponseApdu2> {};

// ISmartCardAutomaticResponseApdu
struct ISmartCardAutomaticResponseApdu_raw : IInspectable {
	virtual STDMETHODIMP _get_CommandApdu(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_CommandApdu(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_CommandApduBitMask(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_CommandApduBitMask(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_ShouldMatchLength(bool *value);
	virtual STDMETHODIMP _put_ShouldMatchLength(bool value);
	virtual STDMETHODIMP _get_AppletId(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_AppletId(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_ResponseApdu(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_ResponseApdu(Storage::Streams::IBuffer* value);
};
template<typename X> struct ISmartCardAutomaticResponseApdu_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::AppletId)->_get_AppletId(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::AppletId)->_put_AppletId(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} AppletId;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::CommandApdu)->_get_CommandApdu(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::CommandApdu)->_put_CommandApdu(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} CommandApdu;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::CommandApduBitMask)->_get_CommandApduBitMask(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::CommandApduBitMask)->_put_CommandApduBitMask(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} CommandApduBitMask;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::ResponseApdu)->_get_ResponseApdu(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::ResponseApdu)->_put_ResponseApdu(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} ResponseApdu;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::ShouldMatchLength)->_get_ShouldMatchLength(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISmartCardAutomaticResponseApdu_adaptor::ShouldMatchLength)->_put_ShouldMatchLength(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShouldMatchLength;
	};
	ISmartCardAutomaticResponseApdu_adaptor() {}
};
template<typename X> struct adapt<ISmartCardAutomaticResponseApdu, X> : Windows::Devices::SmartCards::ISmartCardAutomaticResponseApdu_adaptor<X> { typedef adapt ISmartCardAutomaticResponseApdu; };
struct ISmartCardAutomaticResponseApdu : ISmartCardAutomaticResponseApdu_raw, generate<ISmartCardAutomaticResponseApdu> {};

// SmartCardAutomaticResponseApdu
template<typename> struct SmartCardAutomaticResponseApdu_statics {
	static SmartCardAutomaticResponseApdu *activate(pptr<Storage::Streams::IBuffer> commandApdu, pptr<Storage::Streams::IBuffer> responseApdu) { SmartCardAutomaticResponseApdu *result; hrcheck(get_activation_factory<SmartCardAutomaticResponseApdu, ISmartCardAutomaticResponseApduFactory>()->_Create(commandApdu, responseApdu, &result)); return result; }
};

template<typename X> struct statics<SmartCardAutomaticResponseApdu, X> : X, Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu_statics<void> {
	using Windows::Devices::SmartCards::SmartCardAutomaticResponseApdu_statics<void>::activate;
	typedef typename X::root_type SmartCardAutomaticResponseApdu;
};
struct SmartCardAutomaticResponseApdu : generate<SmartCardAutomaticResponseApdu> {};

// ISmartCardCryptogramPlacementStep
struct ISmartCardCryptogramPlacementStep_raw : IInspectable {
	virtual STDMETHODIMP _get_Algorithm(SmartCardCryptogramAlgorithm *value);
	virtual STDMETHODIMP _put_Algorithm(SmartCardCryptogramAlgorithm value);
	virtual STDMETHODIMP _get_SourceData(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_SourceData(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_CryptogramMaterialPackageName(HSTRING *value);
	virtual STDMETHODIMP _put_CryptogramMaterialPackageName(HSTRING value);
	virtual STDMETHODIMP _get_CryptogramMaterialName(HSTRING *value);
	virtual STDMETHODIMP _put_CryptogramMaterialName(HSTRING value);
	virtual STDMETHODIMP _get_TemplateOffset(int *value);
	virtual STDMETHODIMP _put_TemplateOffset(int value);
	virtual STDMETHODIMP _get_CryptogramOffset(int *value);
	virtual STDMETHODIMP _put_CryptogramOffset(int value);
	virtual STDMETHODIMP _get_CryptogramLength(int *value);
	virtual STDMETHODIMP _put_CryptogramLength(int value);
	virtual STDMETHODIMP _get_CryptogramPlacementOptions(SmartCardCryptogramPlacementOptions *value);
	virtual STDMETHODIMP _put_CryptogramPlacementOptions(SmartCardCryptogramPlacementOptions value);
	virtual STDMETHODIMP _get_ChainedOutputStep(SmartCardCryptogramPlacementStep* *value);
	virtual STDMETHODIMP _put_ChainedOutputStep(SmartCardCryptogramPlacementStep* value);
};
template<typename X> struct ISmartCardCryptogramPlacementStep_adaptor : X {
	union {
		struct : property {
			SmartCardCryptogramAlgorithm get() { SmartCardCryptogramAlgorithm value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::Algorithm)->_get_Algorithm(&value)); return value; }
			SmartCardCryptogramAlgorithm operator()() { return get(); }
			operator SmartCardCryptogramAlgorithm () { return get(); }
			void put(SmartCardCryptogramAlgorithm value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::Algorithm)->_put_Algorithm(value)); }
			void operator=(SmartCardCryptogramAlgorithm value) { put(value); }
			void operator()(SmartCardCryptogramAlgorithm value) { put(value); }
		} Algorithm;
		struct : property {
			ptr<SmartCardCryptogramPlacementStep> get() { SmartCardCryptogramPlacementStep* value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::ChainedOutputStep)->_get_ChainedOutputStep(&value)); return from_abi(value); }
			ptr<SmartCardCryptogramPlacementStep> operator()() { return get(); }
			operator ptr<SmartCardCryptogramPlacementStep> () { return get(); }
			ptr<SmartCardCryptogramPlacementStep> operator->() { return get(); }
			void put(pptr<SmartCardCryptogramPlacementStep> value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::ChainedOutputStep)->_put_ChainedOutputStep(value)); }
			void operator=(pptr<SmartCardCryptogramPlacementStep> value) { put(value); }
			void operator()(pptr<SmartCardCryptogramPlacementStep> value) { put(value); }
		} ChainedOutputStep;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramLength)->_get_CryptogramLength(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramLength)->_put_CryptogramLength(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} CryptogramLength;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramMaterialName)->_get_CryptogramMaterialName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramMaterialName)->_put_CryptogramMaterialName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CryptogramMaterialName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramMaterialPackageName)->_get_CryptogramMaterialPackageName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramMaterialPackageName)->_put_CryptogramMaterialPackageName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CryptogramMaterialPackageName;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramOffset)->_get_CryptogramOffset(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramOffset)->_put_CryptogramOffset(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} CryptogramOffset;
		struct : property {
			SmartCardCryptogramPlacementOptions get() { SmartCardCryptogramPlacementOptions value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramPlacementOptions)->_get_CryptogramPlacementOptions(&value)); return value; }
			SmartCardCryptogramPlacementOptions operator()() { return get(); }
			operator SmartCardCryptogramPlacementOptions () { return get(); }
			void put(SmartCardCryptogramPlacementOptions value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::CryptogramPlacementOptions)->_put_CryptogramPlacementOptions(value)); }
			void operator=(SmartCardCryptogramPlacementOptions value) { put(value); }
			void operator()(SmartCardCryptogramPlacementOptions value) { put(value); }
		} CryptogramPlacementOptions;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::SourceData)->_get_SourceData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::SourceData)->_put_SourceData(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} SourceData;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::TemplateOffset)->_get_TemplateOffset(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmartCardCryptogramPlacementStep_adaptor::TemplateOffset)->_put_TemplateOffset(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} TemplateOffset;
	};
	ISmartCardCryptogramPlacementStep_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramPlacementStep, X> : Windows::Devices::SmartCards::ISmartCardCryptogramPlacementStep_adaptor<X> { typedef adapt ISmartCardCryptogramPlacementStep; };
struct ISmartCardCryptogramPlacementStep : ISmartCardCryptogramPlacementStep_raw, generate<ISmartCardCryptogramPlacementStep> {};

// SmartCardCryptogramPlacementStep
template<typename X> struct statics<SmartCardCryptogramPlacementStep, X> : X {
	typedef typename X::root_type SmartCardCryptogramPlacementStep;
};
struct SmartCardCryptogramPlacementStep : generate<SmartCardCryptogramPlacementStep> {};

// ISmartCardCryptogramStorageKeyInfo
struct ISmartCardCryptogramStorageKeyInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_OperationStatus(SmartCardCryptogramGeneratorOperationStatus *value);
	virtual STDMETHODIMP _get_PublicKeyBlobType(Security::Cryptography::Core::CryptographicPublicKeyBlobType *value);
	virtual STDMETHODIMP _get_PublicKey(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_AttestationStatus(SmartCardCryptographicKeyAttestationStatus *value);
	virtual STDMETHODIMP _get_Attestation(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_AttestationCertificateChain(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_Capabilities(SmartCardCryptogramStorageKeyCapabilities *value);
};
template<typename X> struct ISmartCardCryptogramStorageKeyInfo_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo_adaptor::Attestation)->_get_Attestation(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Attestation;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo_adaptor::AttestationCertificateChain)->_get_AttestationCertificateChain(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} AttestationCertificateChain;
		struct : property {
			SmartCardCryptographicKeyAttestationStatus get() { SmartCardCryptographicKeyAttestationStatus value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo_adaptor::AttestationStatus)->_get_AttestationStatus(&value)); return value; }
			SmartCardCryptographicKeyAttestationStatus operator()() { return get(); }
			operator SmartCardCryptographicKeyAttestationStatus () { return get(); }
		} AttestationStatus;
		struct : property {
			SmartCardCryptogramStorageKeyCapabilities get() { SmartCardCryptogramStorageKeyCapabilities value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo_adaptor::Capabilities)->_get_Capabilities(&value)); return value; }
			SmartCardCryptogramStorageKeyCapabilities operator()() { return get(); }
			operator SmartCardCryptogramStorageKeyCapabilities () { return get(); }
		} Capabilities;
		struct : property {
			SmartCardCryptogramGeneratorOperationStatus get() { SmartCardCryptogramGeneratorOperationStatus value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo_adaptor::OperationStatus)->_get_OperationStatus(&value)); return value; }
			SmartCardCryptogramGeneratorOperationStatus operator()() { return get(); }
			operator SmartCardCryptogramGeneratorOperationStatus () { return get(); }
		} OperationStatus;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo_adaptor::PublicKey)->_get_PublicKey(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} PublicKey;
		struct : property {
			Security::Cryptography::Core::CryptographicPublicKeyBlobType get() { Security::Cryptography::Core::CryptographicPublicKeyBlobType value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo_adaptor::PublicKeyBlobType)->_get_PublicKeyBlobType(&value)); return value; }
			Security::Cryptography::Core::CryptographicPublicKeyBlobType operator()() { return get(); }
			operator Security::Cryptography::Core::CryptographicPublicKeyBlobType () { return get(); }
		} PublicKeyBlobType;
	};
	ISmartCardCryptogramStorageKeyInfo_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramStorageKeyInfo, X> : Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo_adaptor<X> { typedef adapt ISmartCardCryptogramStorageKeyInfo; };
struct ISmartCardCryptogramStorageKeyInfo : ISmartCardCryptogramStorageKeyInfo_raw, generate<ISmartCardCryptogramStorageKeyInfo> {};

// ISmartCardCryptogramStorageKeyInfo2
struct ISmartCardCryptogramStorageKeyInfo2_raw : IInspectable {
	virtual STDMETHODIMP _get_OperationalRequirements(HSTRING *value);
};
template<typename X> struct ISmartCardCryptogramStorageKeyInfo2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardCryptogramStorageKeyInfo2_adaptor::OperationalRequirements)->_get_OperationalRequirements(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} OperationalRequirements;
	};
	ISmartCardCryptogramStorageKeyInfo2_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramStorageKeyInfo2, X> : Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyInfo2_adaptor<X> { typedef adapt ISmartCardCryptogramStorageKeyInfo2; };
struct ISmartCardCryptogramStorageKeyInfo2 : ISmartCardCryptogramStorageKeyInfo2_raw, generate<ISmartCardCryptogramStorageKeyInfo2> {};

// ISmartCardCryptogramMaterialPossessionProof
struct ISmartCardCryptogramMaterialPossessionProof_raw : IInspectable {
	virtual STDMETHODIMP _get_OperationStatus(SmartCardCryptogramGeneratorOperationStatus *value);
	virtual STDMETHODIMP _get_Proof(Storage::Streams::IBuffer* *value);
};
template<typename X> struct ISmartCardCryptogramMaterialPossessionProof_adaptor : X {
	union {
		struct : property {
			SmartCardCryptogramGeneratorOperationStatus get() { SmartCardCryptogramGeneratorOperationStatus value; hrcheck(enc(&ISmartCardCryptogramMaterialPossessionProof_adaptor::OperationStatus)->_get_OperationStatus(&value)); return value; }
			SmartCardCryptogramGeneratorOperationStatus operator()() { return get(); }
			operator SmartCardCryptogramGeneratorOperationStatus () { return get(); }
		} OperationStatus;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardCryptogramMaterialPossessionProof_adaptor::Proof)->_get_Proof(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Proof;
	};
	ISmartCardCryptogramMaterialPossessionProof_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramMaterialPossessionProof, X> : Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPossessionProof_adaptor<X> { typedef adapt ISmartCardCryptogramMaterialPossessionProof; };
struct ISmartCardCryptogramMaterialPossessionProof : ISmartCardCryptogramMaterialPossessionProof_raw, generate<ISmartCardCryptogramMaterialPossessionProof> {};

// ISmartCardCryptogramStorageKeyCharacteristics
struct ISmartCardCryptogramStorageKeyCharacteristics_raw : IInspectable {
	virtual STDMETHODIMP _get_StorageKeyName(HSTRING *value);
	virtual STDMETHODIMP _get_DateCreated(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Algorithm(SmartCardCryptogramStorageKeyAlgorithm *value);
	virtual STDMETHODIMP _get_Capabilities(SmartCardCryptogramStorageKeyCapabilities *value);
};
template<typename X> struct ISmartCardCryptogramStorageKeyCharacteristics_adaptor : X {
	union {
		struct : property {
			SmartCardCryptogramStorageKeyAlgorithm get() { SmartCardCryptogramStorageKeyAlgorithm value; hrcheck(enc(&ISmartCardCryptogramStorageKeyCharacteristics_adaptor::Algorithm)->_get_Algorithm(&value)); return value; }
			SmartCardCryptogramStorageKeyAlgorithm operator()() { return get(); }
			operator SmartCardCryptogramStorageKeyAlgorithm () { return get(); }
		} Algorithm;
		struct : property {
			SmartCardCryptogramStorageKeyCapabilities get() { SmartCardCryptogramStorageKeyCapabilities value; hrcheck(enc(&ISmartCardCryptogramStorageKeyCharacteristics_adaptor::Capabilities)->_get_Capabilities(&value)); return value; }
			SmartCardCryptogramStorageKeyCapabilities operator()() { return get(); }
			operator SmartCardCryptogramStorageKeyCapabilities () { return get(); }
		} Capabilities;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmartCardCryptogramStorageKeyCharacteristics_adaptor::DateCreated)->_get_DateCreated(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} DateCreated;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardCryptogramStorageKeyCharacteristics_adaptor::StorageKeyName)->_get_StorageKeyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} StorageKeyName;
	};
	ISmartCardCryptogramStorageKeyCharacteristics_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramStorageKeyCharacteristics, X> : Windows::Devices::SmartCards::ISmartCardCryptogramStorageKeyCharacteristics_adaptor<X> { typedef adapt ISmartCardCryptogramStorageKeyCharacteristics; };
struct ISmartCardCryptogramStorageKeyCharacteristics : ISmartCardCryptogramStorageKeyCharacteristics_raw, generate<ISmartCardCryptogramStorageKeyCharacteristics> {};

// ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult
struct ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_raw : IInspectable {
	virtual STDMETHODIMP _get_OperationStatus(SmartCardCryptogramGeneratorOperationStatus *value);
	virtual STDMETHODIMP _get_Characteristics(Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCharacteristics*>* *value);
};
template<typename X> struct ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramStorageKeyCharacteristics>>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCharacteristics*>* value; hrcheck(enc(&ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_adaptor::Characteristics)->_get_Characteristics(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramStorageKeyCharacteristics>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramStorageKeyCharacteristics>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramStorageKeyCharacteristics>>> operator->() { return get(); }
		} Characteristics;
		struct : property {
			SmartCardCryptogramGeneratorOperationStatus get() { SmartCardCryptogramGeneratorOperationStatus value; hrcheck(enc(&ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_adaptor::OperationStatus)->_get_OperationStatus(&value)); return value; }
			SmartCardCryptogramGeneratorOperationStatus operator()() { return get(); }
			operator SmartCardCryptogramGeneratorOperationStatus () { return get(); }
		} OperationStatus;
	};
	ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult, X> : Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_adaptor<X> { typedef adapt ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult; };
struct ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult : ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult_raw, generate<ISmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult> {};

// SmartCardCryptogramStorageKeyCharacteristics
template<typename X> struct statics<SmartCardCryptogramStorageKeyCharacteristics, X> : X {
	typedef typename X::root_type SmartCardCryptogramStorageKeyCharacteristics;
};
struct SmartCardCryptogramStorageKeyCharacteristics : generate<SmartCardCryptogramStorageKeyCharacteristics> {};

// ISmartCardCryptogramMaterialPackageCharacteristics
struct ISmartCardCryptogramMaterialPackageCharacteristics_raw : IInspectable {
	virtual STDMETHODIMP _get_PackageName(HSTRING *value);
	virtual STDMETHODIMP _get_StorageKeyName(HSTRING *value);
	virtual STDMETHODIMP _get_DateImported(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_PackageFormat(SmartCardCryptogramMaterialPackageFormat *value);
};
template<typename X> struct ISmartCardCryptogramMaterialPackageCharacteristics_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmartCardCryptogramMaterialPackageCharacteristics_adaptor::DateImported)->_get_DateImported(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} DateImported;
		struct : property {
			SmartCardCryptogramMaterialPackageFormat get() { SmartCardCryptogramMaterialPackageFormat value; hrcheck(enc(&ISmartCardCryptogramMaterialPackageCharacteristics_adaptor::PackageFormat)->_get_PackageFormat(&value)); return value; }
			SmartCardCryptogramMaterialPackageFormat operator()() { return get(); }
			operator SmartCardCryptogramMaterialPackageFormat () { return get(); }
		} PackageFormat;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardCryptogramMaterialPackageCharacteristics_adaptor::PackageName)->_get_PackageName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PackageName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardCryptogramMaterialPackageCharacteristics_adaptor::StorageKeyName)->_get_StorageKeyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} StorageKeyName;
	};
	ISmartCardCryptogramMaterialPackageCharacteristics_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramMaterialPackageCharacteristics, X> : Windows::Devices::SmartCards::ISmartCardCryptogramMaterialPackageCharacteristics_adaptor<X> { typedef adapt ISmartCardCryptogramMaterialPackageCharacteristics; };
struct ISmartCardCryptogramMaterialPackageCharacteristics : ISmartCardCryptogramMaterialPackageCharacteristics_raw, generate<ISmartCardCryptogramMaterialPackageCharacteristics> {};

// ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult
struct ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_raw : IInspectable {
	virtual STDMETHODIMP _get_OperationStatus(SmartCardCryptogramGeneratorOperationStatus *value);
	virtual STDMETHODIMP _get_Characteristics(Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageCharacteristics*>* *value);
};
template<typename X> struct ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialPackageCharacteristics>>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageCharacteristics*>* value; hrcheck(enc(&ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_adaptor::Characteristics)->_get_Characteristics(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialPackageCharacteristics>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialPackageCharacteristics>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialPackageCharacteristics>>> operator->() { return get(); }
		} Characteristics;
		struct : property {
			SmartCardCryptogramGeneratorOperationStatus get() { SmartCardCryptogramGeneratorOperationStatus value; hrcheck(enc(&ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_adaptor::OperationStatus)->_get_OperationStatus(&value)); return value; }
			SmartCardCryptogramGeneratorOperationStatus operator()() { return get(); }
			operator SmartCardCryptogramGeneratorOperationStatus () { return get(); }
		} OperationStatus;
	};
	ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult, X> : Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_adaptor<X> { typedef adapt ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult; };
struct ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult : ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult_raw, generate<ISmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> {};

// SmartCardCryptogramMaterialPackageCharacteristics
template<typename X> struct statics<SmartCardCryptogramMaterialPackageCharacteristics, X> : X {
	typedef typename X::root_type SmartCardCryptogramMaterialPackageCharacteristics;
};
struct SmartCardCryptogramMaterialPackageCharacteristics : generate<SmartCardCryptogramMaterialPackageCharacteristics> {};

// ISmartCardCryptogramMaterialCharacteristics
struct ISmartCardCryptogramMaterialCharacteristics_raw : IInspectable {
	virtual STDMETHODIMP _get_MaterialName(HSTRING *value);
	virtual STDMETHODIMP _get_AllowedAlgorithms(Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>* *value);
	virtual STDMETHODIMP _get_AllowedProofOfPossessionAlgorithms(Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>* *value);
	virtual STDMETHODIMP _get_AllowedValidations(Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>* *value);
	virtual STDMETHODIMP _get_MaterialType(SmartCardCryptogramMaterialType *value);
	virtual STDMETHODIMP _get_ProtectionMethod(SmartCardCryptogramMaterialProtectionMethod *value);
	virtual STDMETHODIMP _get_ProtectionVersion(int *value);
	virtual STDMETHODIMP _get_MaterialLength(int *value);
};
template<typename X> struct ISmartCardCryptogramMaterialCharacteristics_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>* value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::AllowedAlgorithms)->_get_AllowedAlgorithms(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> operator->() { return get(); }
		} AllowedAlgorithms;
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>* value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::AllowedProofOfPossessionAlgorithms)->_get_AllowedProofOfPossessionAlgorithms(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> operator->() { return get(); }
		} AllowedProofOfPossessionAlgorithms;
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>* value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::AllowedValidations)->_get_AllowedValidations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> operator->() { return get(); }
		} AllowedValidations;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::MaterialLength)->_get_MaterialLength(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaterialLength;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::MaterialName)->_get_MaterialName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MaterialName;
		struct : property {
			SmartCardCryptogramMaterialType get() { SmartCardCryptogramMaterialType value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::MaterialType)->_get_MaterialType(&value)); return value; }
			SmartCardCryptogramMaterialType operator()() { return get(); }
			operator SmartCardCryptogramMaterialType () { return get(); }
		} MaterialType;
		struct : property {
			SmartCardCryptogramMaterialProtectionMethod get() { SmartCardCryptogramMaterialProtectionMethod value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::ProtectionMethod)->_get_ProtectionMethod(&value)); return value; }
			SmartCardCryptogramMaterialProtectionMethod operator()() { return get(); }
			operator SmartCardCryptogramMaterialProtectionMethod () { return get(); }
		} ProtectionMethod;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmartCardCryptogramMaterialCharacteristics_adaptor::ProtectionVersion)->_get_ProtectionVersion(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ProtectionVersion;
	};
	ISmartCardCryptogramMaterialCharacteristics_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramMaterialCharacteristics, X> : Windows::Devices::SmartCards::ISmartCardCryptogramMaterialCharacteristics_adaptor<X> { typedef adapt ISmartCardCryptogramMaterialCharacteristics; };
struct ISmartCardCryptogramMaterialCharacteristics : ISmartCardCryptogramMaterialCharacteristics_raw, generate<ISmartCardCryptogramMaterialCharacteristics> {};

// ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult
struct ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_raw : IInspectable {
	virtual STDMETHODIMP _get_OperationStatus(SmartCardCryptogramGeneratorOperationStatus *value);
	virtual STDMETHODIMP _get_Characteristics(Foundation::Collections::IVectorView<SmartCardCryptogramMaterialCharacteristics*>* *value);
};
template<typename X> struct ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialCharacteristics>>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramMaterialCharacteristics*>* value; hrcheck(enc(&ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_adaptor::Characteristics)->_get_Characteristics(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialCharacteristics>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialCharacteristics>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<SmartCardCryptogramMaterialCharacteristics>>> operator->() { return get(); }
		} Characteristics;
		struct : property {
			SmartCardCryptogramGeneratorOperationStatus get() { SmartCardCryptogramGeneratorOperationStatus value; hrcheck(enc(&ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_adaptor::OperationStatus)->_get_OperationStatus(&value)); return value; }
			SmartCardCryptogramGeneratorOperationStatus operator()() { return get(); }
			operator SmartCardCryptogramGeneratorOperationStatus () { return get(); }
		} OperationStatus;
	};
	ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult, X> : Windows::Devices::SmartCards::ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_adaptor<X> { typedef adapt ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult; };
struct ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult : ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult_raw, generate<ISmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult> {};

// SmartCardCryptogramMaterialCharacteristics
template<typename X> struct statics<SmartCardCryptogramMaterialCharacteristics, X> : X {
	typedef typename X::root_type SmartCardCryptogramMaterialCharacteristics;
};
struct SmartCardCryptogramMaterialCharacteristics : generate<SmartCardCryptogramMaterialCharacteristics> {};

// ISmartCardCryptogramGeneratorStatics
struct ISmartCardCryptogramGeneratorStatics : IInspectable {
	virtual STDMETHODIMP _GetSmartCardCryptogramGeneratorAsync(Foundation::IAsyncOperation<SmartCardCryptogramGenerator*>* *result);
};

// ISmartCardCryptogramGeneratorStatics2
struct ISmartCardCryptogramGeneratorStatics2 : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *result);
};

// ISmartCardCryptogramGenerator2
struct ISmartCardCryptogramGenerator2_raw : IInspectable {
	virtual STDMETHODIMP _ValidateRequestApduAsync(SmartCardUnlockPromptingBehavior promptingBehavior, Storage::Streams::IBuffer* apduToValidate, Foundation::Collections::IIterable<SmartCardCryptogramPlacementStep*>* cryptogramPlacementSteps, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
	virtual STDMETHODIMP _GetAllCryptogramStorageKeyCharacteristicsAsync(Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult*>* *result);
	virtual STDMETHODIMP _GetAllCryptogramMaterialPackageCharacteristicsAsync(Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult*>* *result);
	virtual STDMETHODIMP _GetAllCryptogramMaterialPackageCharacteristicsWithStorageKeyAsync(HSTRING storageKeyName, Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult*>* *result);
	virtual STDMETHODIMP _GetAllCryptogramMaterialCharacteristicsAsync(SmartCardUnlockPromptingBehavior promptingBehavior, HSTRING materialPackageName, Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult*>* *result);
};
template<typename X> struct ISmartCardCryptogramGenerator2_adaptor : X {
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> ValidateRequestApduAsync(SmartCardUnlockPromptingBehavior promptingBehavior, pptr<Storage::Streams::IBuffer> apduToValidate, pptr<Foundation::Collections::IIterable<ptr<SmartCardCryptogramPlacementStep>>> cryptogramPlacementSteps) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_ValidateRequestApduAsync(promptingBehavior, apduToValidate, to_abi(cryptogramPlacementSteps), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult>>> GetAllCryptogramStorageKeyCharacteristicsAsync() { Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult*>* result; hrcheck(X::get()->_GetAllCryptogramStorageKeyCharacteristicsAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult>>> GetAllCryptogramMaterialPackageCharacteristicsAsync() { Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult*>* result; hrcheck(X::get()->_GetAllCryptogramMaterialPackageCharacteristicsAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult>>> GetAllCryptogramMaterialPackageCharacteristicsAsync(hstring_ref storageKeyName) { Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult*>* result; hrcheck(X::get()->_GetAllCryptogramMaterialPackageCharacteristicsWithStorageKeyAsync(storageKeyName, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult>>> GetAllCryptogramMaterialCharacteristicsAsync(SmartCardUnlockPromptingBehavior promptingBehavior, hstring_ref materialPackageName) { Foundation::IAsyncOperation<SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult*>* result; hrcheck(X::get()->_GetAllCryptogramMaterialCharacteristicsAsync(promptingBehavior, materialPackageName, &result)); return from_abi(result); }
};
template<typename X> struct adapt<ISmartCardCryptogramGenerator2, X> : Windows::Devices::SmartCards::ISmartCardCryptogramGenerator2_adaptor<X> { typedef adapt ISmartCardCryptogramGenerator2; };
struct ISmartCardCryptogramGenerator2 : ISmartCardCryptogramGenerator2_raw, generate<ISmartCardCryptogramGenerator2> {};

// ISmartCardCryptogramGenerator
struct ISmartCardCryptogramGenerator_raw : IInspectable {
	virtual STDMETHODIMP _get_SupportedCryptogramMaterialTypes(Foundation::Collections::IVectorView<SmartCardCryptogramMaterialType>* *result);
	virtual STDMETHODIMP _get_SupportedCryptogramAlgorithms(Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>* *result);
	virtual STDMETHODIMP _get_SupportedCryptogramMaterialPackageFormats(Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageFormat>* *result);
	virtual STDMETHODIMP _get_SupportedCryptogramMaterialPackageConfirmationResponseFormats(Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>* *result);
	virtual STDMETHODIMP _get_SupportedSmartCardCryptogramStorageKeyCapabilities(Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCapabilities>* *result);
	virtual STDMETHODIMP _DeleteCryptogramMaterialStorageKeyAsync(HSTRING storageKeyName, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
	virtual STDMETHODIMP _CreateCryptogramMaterialStorageKeyAsync(SmartCardUnlockPromptingBehavior promptingBehavior, HSTRING storageKeyName, SmartCardCryptogramStorageKeyAlgorithm algorithm, SmartCardCryptogramStorageKeyCapabilities capabilities, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
	virtual STDMETHODIMP _RequestCryptogramMaterialStorageKeyInfoAsync(SmartCardUnlockPromptingBehavior promptingBehavior, HSTRING storageKeyName, Security::Cryptography::Core::CryptographicPublicKeyBlobType format, Foundation::IAsyncOperation<SmartCardCryptogramStorageKeyInfo*>* *result);
	virtual STDMETHODIMP _ImportCryptogramMaterialPackageAsync(SmartCardCryptogramMaterialPackageFormat format, HSTRING storageKeyName, HSTRING materialPackageName, Storage::Streams::IBuffer* cryptogramMaterialPackage, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
	virtual STDMETHODIMP _TryProvePossessionOfCryptogramMaterialPackageAsync(SmartCardUnlockPromptingBehavior promptingBehavior, SmartCardCryptogramMaterialPackageConfirmationResponseFormat responseFormat, HSTRING materialPackageName, HSTRING materialName, Storage::Streams::IBuffer* challenge, Foundation::IAsyncOperation<SmartCardCryptogramMaterialPossessionProof*>* *result);
	virtual STDMETHODIMP _RequestUnlockCryptogramMaterialForUseAsync(SmartCardUnlockPromptingBehavior promptingBehavior, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
	virtual STDMETHODIMP _DeleteCryptogramMaterialPackageAsync(HSTRING materialPackageName, Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* *result);
};
template<typename X> struct ISmartCardCryptogramGenerator_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>* result; hrcheck(enc(&ISmartCardCryptogramGenerator_adaptor::SupportedCryptogramAlgorithms)->_get_SupportedCryptogramAlgorithms(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramAlgorithm>> operator->() { return get(); }
		} SupportedCryptogramAlgorithms;
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>* result; hrcheck(enc(&ISmartCardCryptogramGenerator_adaptor::SupportedCryptogramMaterialPackageConfirmationResponseFormats)->_get_SupportedCryptogramMaterialPackageConfirmationResponseFormats(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageConfirmationResponseFormat>> operator->() { return get(); }
		} SupportedCryptogramMaterialPackageConfirmationResponseFormats;
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageFormat>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageFormat>* result; hrcheck(enc(&ISmartCardCryptogramGenerator_adaptor::SupportedCryptogramMaterialPackageFormats)->_get_SupportedCryptogramMaterialPackageFormats(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageFormat>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageFormat>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialPackageFormat>> operator->() { return get(); }
		} SupportedCryptogramMaterialPackageFormats;
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialType>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramMaterialType>* result; hrcheck(enc(&ISmartCardCryptogramGenerator_adaptor::SupportedCryptogramMaterialTypes)->_get_SupportedCryptogramMaterialTypes(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialType>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramMaterialType>> operator->() { return get(); }
		} SupportedCryptogramMaterialTypes;
		struct : property {
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCapabilities>> get() { Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCapabilities>* result; hrcheck(enc(&ISmartCardCryptogramGenerator_adaptor::SupportedSmartCardCryptogramStorageKeyCapabilities)->_get_SupportedSmartCardCryptogramStorageKeyCapabilities(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCapabilities>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCapabilities>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<SmartCardCryptogramStorageKeyCapabilities>> operator->() { return get(); }
		} SupportedSmartCardCryptogramStorageKeyCapabilities;
	};
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> DeleteCryptogramMaterialStorageKeyAsync(hstring_ref storageKeyName) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_DeleteCryptogramMaterialStorageKeyAsync(storageKeyName, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> CreateCryptogramMaterialStorageKeyAsync(SmartCardUnlockPromptingBehavior promptingBehavior, hstring_ref storageKeyName, SmartCardCryptogramStorageKeyAlgorithm algorithm, SmartCardCryptogramStorageKeyCapabilities capabilities) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_CreateCryptogramMaterialStorageKeyAsync(promptingBehavior, storageKeyName, algorithm, capabilities, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<SmartCardCryptogramStorageKeyInfo>>> RequestCryptogramMaterialStorageKeyInfoAsync(SmartCardUnlockPromptingBehavior promptingBehavior, hstring_ref storageKeyName, Security::Cryptography::Core::CryptographicPublicKeyBlobType format) { Foundation::IAsyncOperation<SmartCardCryptogramStorageKeyInfo*>* result; hrcheck(X::get()->_RequestCryptogramMaterialStorageKeyInfoAsync(promptingBehavior, storageKeyName, format, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> ImportCryptogramMaterialPackageAsync(SmartCardCryptogramMaterialPackageFormat format, hstring_ref storageKeyName, hstring_ref materialPackageName, pptr<Storage::Streams::IBuffer> cryptogramMaterialPackage) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_ImportCryptogramMaterialPackageAsync(format, storageKeyName, materialPackageName, cryptogramMaterialPackage, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<SmartCardCryptogramMaterialPossessionProof>>> TryProvePossessionOfCryptogramMaterialPackageAsync(SmartCardUnlockPromptingBehavior promptingBehavior, SmartCardCryptogramMaterialPackageConfirmationResponseFormat responseFormat, hstring_ref materialPackageName, hstring_ref materialName, pptr<Storage::Streams::IBuffer> challenge) { Foundation::IAsyncOperation<SmartCardCryptogramMaterialPossessionProof*>* result; hrcheck(X::get()->_TryProvePossessionOfCryptogramMaterialPackageAsync(promptingBehavior, responseFormat, materialPackageName, materialName, challenge, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> RequestUnlockCryptogramMaterialForUseAsync(SmartCardUnlockPromptingBehavior promptingBehavior) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_RequestUnlockCryptogramMaterialForUseAsync(promptingBehavior, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>> DeleteCryptogramMaterialPackageAsync(hstring_ref materialPackageName) { Foundation::IAsyncOperation<SmartCardCryptogramGeneratorOperationStatus>* result; hrcheck(X::get()->_DeleteCryptogramMaterialPackageAsync(materialPackageName, &result)); return from_abi(result); }
	ISmartCardCryptogramGenerator_adaptor() {}
};
template<typename X> struct adapt<ISmartCardCryptogramGenerator, X> : Windows::Devices::SmartCards::ISmartCardCryptogramGenerator_adaptor<X> { typedef adapt ISmartCardCryptogramGenerator; };
struct ISmartCardCryptogramGenerator : ISmartCardCryptogramGenerator_raw, generate<ISmartCardCryptogramGenerator> {};

// SmartCardCryptogramGenerator
template<typename> struct SmartCardCryptogramGenerator_statics {
	static bool IsSupported() { bool result; hrcheck(get_activation_factory<SmartCardCryptogramGenerator, ISmartCardCryptogramGeneratorStatics2>()->_IsSupported(&result)); return result; }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardCryptogramGenerator>>> GetSmartCardCryptogramGeneratorAsync() { Foundation::IAsyncOperation<SmartCardCryptogramGenerator*>* result; hrcheck(get_activation_factory<SmartCardCryptogramGenerator, ISmartCardCryptogramGeneratorStatics>()->_GetSmartCardCryptogramGeneratorAsync(&result)); return from_abi(result); }
};

template<typename X> struct statics<SmartCardCryptogramGenerator, X> : X, Windows::Devices::SmartCards::SmartCardCryptogramGenerator_statics<void> {
	typedef typename X::root_type SmartCardCryptogramGenerator;
};
struct SmartCardCryptogramGenerator : generate<SmartCardCryptogramGenerator> {
	using ISmartCardCryptogramGenerator2::GetAllCryptogramMaterialPackageCharacteristicsAsync;
};

// SmartCardCryptogramStorageKeyInfo
template<typename X> struct statics<SmartCardCryptogramStorageKeyInfo, X> : X {
	typedef typename X::root_type SmartCardCryptogramStorageKeyInfo;
};
struct SmartCardCryptogramStorageKeyInfo : generate<SmartCardCryptogramStorageKeyInfo> {};

// SmartCardCryptogramMaterialPossessionProof
template<typename X> struct statics<SmartCardCryptogramMaterialPossessionProof, X> : X {
	typedef typename X::root_type SmartCardCryptogramMaterialPossessionProof;
};
struct SmartCardCryptogramMaterialPossessionProof : generate<SmartCardCryptogramMaterialPossessionProof> {};

// SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult
template<typename X> struct statics<SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult, X> : X {
	typedef typename X::root_type SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult;
};
struct SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult : generate<SmartCardCryptogramGetAllCryptogramStorageKeyCharacteristicsResult> {};

// SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult
template<typename X> struct statics<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult, X> : X {
	typedef typename X::root_type SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult;
};
struct SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult : generate<SmartCardCryptogramGetAllCryptogramMaterialPackageCharacteristicsResult> {};

// SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult
template<typename X> struct statics<SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult, X> : X {
	typedef typename X::root_type SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult;
};
struct SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult : generate<SmartCardCryptogramGetAllCryptogramMaterialCharacteristicsResult> {};

// ISmartCardReaderStatics
struct ISmartCardReaderStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *selector);
	virtual STDMETHODIMP _GetDeviceSelectorWithKind(SmartCardReaderKind kind, HSTRING *selector);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<SmartCardReader*>* *result);
};

// ISmartCardReader
struct ISmartCardReader_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_Kind(SmartCardReaderKind *value);
	virtual STDMETHODIMP _GetStatusAsync(Foundation::IAsyncOperation<SmartCardReaderStatus>* *result);
	virtual STDMETHODIMP _FindAllCardsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SmartCard*>*>* *result);
	virtual STDMETHODIMP _add_CardAdded(Foundation::TypedEventHandler<SmartCardReader*, CardAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CardAdded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CardRemoved(Foundation::TypedEventHandler<SmartCardReader*, CardRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CardRemoved(Foundation::EventRegistrationToken token);
};
template<typename X> struct ISmartCardReader_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardReader_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			SmartCardReaderKind get() { SmartCardReaderKind value; hrcheck(enc(&ISmartCardReader_adaptor::Kind)->_get_Kind(&value)); return value; }
			SmartCardReaderKind operator()() { return get(); }
			operator SmartCardReaderKind () { return get(); }
		} Kind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmartCardReader_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SmartCardReader>, ptr<CardAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISmartCardReader_adaptor::CardAdded)->_add_CardAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISmartCardReader_adaptor::CardAdded)->_remove_CardAdded(token)); }
		} CardAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SmartCardReader>, ptr<CardRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISmartCardReader_adaptor::CardRemoved)->_add_CardRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISmartCardReader_adaptor::CardRemoved)->_remove_CardRemoved(token)); }
		} CardRemoved;
	};
	ptr<Foundation::IAsyncOperation<SmartCardReaderStatus>> GetStatusAsync() { Foundation::IAsyncOperation<SmartCardReaderStatus>* result; hrcheck(X::get()->_GetStatusAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<SmartCard>>>>> FindAllCardsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SmartCard*>*>* result; hrcheck(X::get()->_FindAllCardsAsync(&result)); return from_abi(result); }
	ISmartCardReader_adaptor() {}
};
template<typename X> struct adapt<ISmartCardReader, X> : Windows::Devices::SmartCards::ISmartCardReader_adaptor<X> { typedef adapt ISmartCardReader; };
struct ISmartCardReader : ISmartCardReader_raw, generate<ISmartCardReader> {};

// SmartCardReader
template<typename> struct SmartCardReader_statics {
	static hstring GetDeviceSelector() { HSTRING selector; hrcheck(get_activation_factory<SmartCardReader, ISmartCardReaderStatics>()->_GetDeviceSelector(&selector)); return from_abi(selector); }
	static hstring GetDeviceSelector(SmartCardReaderKind kind) { HSTRING selector; hrcheck(get_activation_factory<SmartCardReader, ISmartCardReaderStatics>()->_GetDeviceSelectorWithKind(kind, &selector)); return from_abi(selector); }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardReader>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<SmartCardReader*>* result; hrcheck(get_activation_factory<SmartCardReader, ISmartCardReaderStatics>()->_FromIdAsync(deviceId, &result)); return from_abi(result); }
};

template<typename X> struct statics<SmartCardReader, X> : X, Windows::Devices::SmartCards::SmartCardReader_statics<void> {
	typedef typename X::root_type SmartCardReader;
};
struct SmartCardReader : generate<SmartCardReader> {};

// ISmartCardConnect
struct ISmartCardConnect_raw : IInspectable {
	virtual STDMETHODIMP _ConnectAsync(Foundation::IAsyncOperation<SmartCardConnection*>* *result);
};
template<typename X> struct ISmartCardConnect_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<SmartCardConnection>>> ConnectAsync() { Foundation::IAsyncOperation<SmartCardConnection*>* result; hrcheck(X::get()->_ConnectAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<ISmartCardConnect, X> : Windows::Devices::SmartCards::ISmartCardConnect_adaptor<X> { typedef adapt ISmartCardConnect; };
struct ISmartCardConnect : ISmartCardConnect_raw, generate<ISmartCardConnect> {};

// ISmartCard
struct ISmartCard_raw : IInspectable {
	virtual STDMETHODIMP _get_Reader(SmartCardReader* *value);
	virtual STDMETHODIMP _GetStatusAsync(Foundation::IAsyncOperation<SmartCardStatus>* *result);
	virtual STDMETHODIMP _GetAnswerToResetAsync(Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *result);
};
template<typename X> struct ISmartCard_adaptor : X {
	union {
		struct : property {
			ptr<SmartCardReader> get() { SmartCardReader* value; hrcheck(enc(&ISmartCard_adaptor::Reader)->_get_Reader(&value)); return from_abi(value); }
			ptr<SmartCardReader> operator()() { return get(); }
			operator ptr<SmartCardReader> () { return get(); }
			ptr<SmartCardReader> operator->() { return get(); }
		} Reader;
	};
	ptr<Foundation::IAsyncOperation<SmartCardStatus>> GetStatusAsync() { Foundation::IAsyncOperation<SmartCardStatus>* result; hrcheck(X::get()->_GetStatusAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> GetAnswerToResetAsync() { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* result; hrcheck(X::get()->_GetAnswerToResetAsync(&result)); return from_abi(result); }
	ISmartCard_adaptor() {}
};
template<typename X> struct adapt<ISmartCard, X> : Windows::Devices::SmartCards::ISmartCard_adaptor<X> { typedef adapt ISmartCard; };
struct ISmartCard : ISmartCard_raw, generate<ISmartCard> {};

// SmartCard
template<typename X> struct statics<SmartCard, X> : X {
	typedef typename X::root_type SmartCard;
};
struct SmartCard : generate<SmartCard> {};

// ICardAddedEventArgs
struct ICardAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SmartCard(SmartCards::SmartCard* *value);
};
template<typename X> struct ICardAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SmartCards::SmartCard> get() { SmartCards::SmartCard* value; hrcheck(enc(&ICardAddedEventArgs_adaptor::SmartCard)->_get_SmartCard(&value)); return from_abi(value); }
			ptr<SmartCards::SmartCard> operator()() { return get(); }
			operator ptr<SmartCards::SmartCard> () { return get(); }
			ptr<SmartCards::SmartCard> operator->() { return get(); }
		} SmartCard;
	};
	ICardAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICardAddedEventArgs, X> : Windows::Devices::SmartCards::ICardAddedEventArgs_adaptor<X> { typedef adapt ICardAddedEventArgs; };
struct ICardAddedEventArgs : ICardAddedEventArgs_raw, generate<ICardAddedEventArgs> {};

// CardAddedEventArgs
template<typename X> struct statics<CardAddedEventArgs, X> : X {
	typedef typename X::root_type CardAddedEventArgs;
};
struct CardAddedEventArgs : generate<CardAddedEventArgs> {};

// ICardRemovedEventArgs
struct ICardRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SmartCard(SmartCards::SmartCard* *value);
};
template<typename X> struct ICardRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SmartCards::SmartCard> get() { SmartCards::SmartCard* value; hrcheck(enc(&ICardRemovedEventArgs_adaptor::SmartCard)->_get_SmartCard(&value)); return from_abi(value); }
			ptr<SmartCards::SmartCard> operator()() { return get(); }
			operator ptr<SmartCards::SmartCard> () { return get(); }
			ptr<SmartCards::SmartCard> operator->() { return get(); }
		} SmartCard;
	};
	ICardRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICardRemovedEventArgs, X> : Windows::Devices::SmartCards::ICardRemovedEventArgs_adaptor<X> { typedef adapt ICardRemovedEventArgs; };
struct ICardRemovedEventArgs : ICardRemovedEventArgs_raw, generate<ICardRemovedEventArgs> {};

// CardRemovedEventArgs
template<typename X> struct statics<CardRemovedEventArgs, X> : X {
	typedef typename X::root_type CardRemovedEventArgs;
};
struct CardRemovedEventArgs : generate<CardRemovedEventArgs> {};

// ISmartCardProvisioningStatics
struct ISmartCardProvisioningStatics : IInspectable {
	virtual STDMETHODIMP _FromSmartCardAsync(SmartCard* card, Foundation::IAsyncOperation<SmartCardProvisioning*>* *result);
	virtual STDMETHODIMP _RequestVirtualSmartCardCreationAsync(HSTRING friendlyName, Storage::Streams::IBuffer* administrativeKey, SmartCardPinPolicy* pinPolicy, Foundation::IAsyncOperation<SmartCardProvisioning*>* *result);
	virtual STDMETHODIMP _RequestVirtualSmartCardCreationAsyncWithCardId(HSTRING friendlyName, Storage::Streams::IBuffer* administrativeKey, SmartCardPinPolicy* pinPolicy, Platform::Guid cardId, Foundation::IAsyncOperation<SmartCardProvisioning*>* *result);
	virtual STDMETHODIMP _RequestVirtualSmartCardDeletionAsync(SmartCard* card, Foundation::IAsyncOperation<bool>* *result);
};

// ISmartCardProvisioningStatics2
struct ISmartCardProvisioningStatics2 : IInspectable {
	virtual STDMETHODIMP _RequestAttestedVirtualSmartCardCreationAsync(HSTRING friendlyName, Storage::Streams::IBuffer* administrativeKey, SmartCardPinPolicy* pinPolicy, Foundation::IAsyncOperation<SmartCardProvisioning*>* *result);
	virtual STDMETHODIMP _RequestAttestedVirtualSmartCardCreationAsyncWithCardId(HSTRING friendlyName, Storage::Streams::IBuffer* administrativeKey, SmartCardPinPolicy* pinPolicy, Platform::Guid cardId, Foundation::IAsyncOperation<SmartCardProvisioning*>* *result);
};

// ISmartCardProvisioning2
struct ISmartCardProvisioning2_raw : IInspectable {
	virtual STDMETHODIMP _GetAuthorityKeyContainerNameAsync(Foundation::IAsyncOperation<HSTRING>* *result);
};
template<typename X> struct ISmartCardProvisioning2_adaptor : X {
	ptr<Foundation::IAsyncOperation<hstring>> GetAuthorityKeyContainerNameAsync() { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_GetAuthorityKeyContainerNameAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<ISmartCardProvisioning2, X> : Windows::Devices::SmartCards::ISmartCardProvisioning2_adaptor<X> { typedef adapt ISmartCardProvisioning2; };
struct ISmartCardProvisioning2 : ISmartCardProvisioning2_raw, generate<ISmartCardProvisioning2> {};

// ISmartCardProvisioning
struct ISmartCardProvisioning_raw : IInspectable {
	virtual STDMETHODIMP _get_SmartCard(SmartCards::SmartCard* *value);
	virtual STDMETHODIMP _GetIdAsync(Foundation::IAsyncOperation<Platform::Guid>* *result);
	virtual STDMETHODIMP _GetNameAsync(Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _GetChallengeContextAsync(Foundation::IAsyncOperation<SmartCardChallengeContext*>* *result);
	virtual STDMETHODIMP _RequestPinChangeAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _RequestPinResetAsync(SmartCardPinResetHandler* handler, Foundation::IAsyncOperation<bool>* *result);
};
template<typename X> struct ISmartCardProvisioning_adaptor : X {
	union {
		struct : property {
			ptr<SmartCards::SmartCard> get() { SmartCards::SmartCard* value; hrcheck(enc(&ISmartCardProvisioning_adaptor::SmartCard)->_get_SmartCard(&value)); return from_abi(value); }
			ptr<SmartCards::SmartCard> operator()() { return get(); }
			operator ptr<SmartCards::SmartCard> () { return get(); }
			ptr<SmartCards::SmartCard> operator->() { return get(); }
		} SmartCard;
	};
	ptr<Foundation::IAsyncOperation<Platform::Guid>> GetIdAsync() { Foundation::IAsyncOperation<Platform::Guid>* result; hrcheck(X::get()->_GetIdAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<hstring>> GetNameAsync() { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_GetNameAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<SmartCardChallengeContext>>> GetChallengeContextAsync() { Foundation::IAsyncOperation<SmartCardChallengeContext*>* result; hrcheck(X::get()->_GetChallengeContextAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> RequestPinChangeAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_RequestPinChangeAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> RequestPinResetAsync(handler_ref<SmartCardPinResetHandler> handler) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_RequestPinResetAsync(handler, &result)); return from_abi(result); }
	ISmartCardProvisioning_adaptor() {}
};
template<typename X> struct adapt<ISmartCardProvisioning, X> : Windows::Devices::SmartCards::ISmartCardProvisioning_adaptor<X> { typedef adapt ISmartCardProvisioning; };
struct ISmartCardProvisioning : ISmartCardProvisioning_raw, generate<ISmartCardProvisioning> {};

// SmartCardProvisioning
template<typename> struct SmartCardProvisioning_statics {
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardProvisioning>>> RequestAttestedVirtualSmartCardCreationAsync(hstring_ref friendlyName, pptr<Storage::Streams::IBuffer> administrativeKey, pptr<SmartCardPinPolicy> pinPolicy) { Foundation::IAsyncOperation<SmartCardProvisioning*>* result; hrcheck(get_activation_factory<SmartCardProvisioning, ISmartCardProvisioningStatics2>()->_RequestAttestedVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardProvisioning>>> RequestAttestedVirtualSmartCardCreationAsync(hstring_ref friendlyName, pptr<Storage::Streams::IBuffer> administrativeKey, pptr<SmartCardPinPolicy> pinPolicy, const Platform::Guid& cardId) { Foundation::IAsyncOperation<SmartCardProvisioning*>* result; hrcheck(get_activation_factory<SmartCardProvisioning, ISmartCardProvisioningStatics2>()->_RequestAttestedVirtualSmartCardCreationAsyncWithCardId(friendlyName, administrativeKey, pinPolicy, cardId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardProvisioning>>> FromSmartCardAsync(pptr<SmartCards::SmartCard> card) { Foundation::IAsyncOperation<SmartCardProvisioning*>* result; hrcheck(get_activation_factory<SmartCardProvisioning, ISmartCardProvisioningStatics>()->_FromSmartCardAsync(card, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardProvisioning>>> RequestVirtualSmartCardCreationAsync(hstring_ref friendlyName, pptr<Storage::Streams::IBuffer> administrativeKey, pptr<SmartCardPinPolicy> pinPolicy) { Foundation::IAsyncOperation<SmartCardProvisioning*>* result; hrcheck(get_activation_factory<SmartCardProvisioning, ISmartCardProvisioningStatics>()->_RequestVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<SmartCardProvisioning>>> RequestVirtualSmartCardCreationAsync(hstring_ref friendlyName, pptr<Storage::Streams::IBuffer> administrativeKey, pptr<SmartCardPinPolicy> pinPolicy, const Platform::Guid& cardId) { Foundation::IAsyncOperation<SmartCardProvisioning*>* result; hrcheck(get_activation_factory<SmartCardProvisioning, ISmartCardProvisioningStatics>()->_RequestVirtualSmartCardCreationAsyncWithCardId(friendlyName, administrativeKey, pinPolicy, cardId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<bool>> RequestVirtualSmartCardDeletionAsync(pptr<SmartCards::SmartCard> card) { Foundation::IAsyncOperation<bool>* result; hrcheck(get_activation_factory<SmartCardProvisioning, ISmartCardProvisioningStatics>()->_RequestVirtualSmartCardDeletionAsync(card, &result)); return from_abi(result); }
};

template<typename X> struct statics<SmartCardProvisioning, X> : X, Windows::Devices::SmartCards::SmartCardProvisioning_statics<void> {
	typedef typename X::root_type SmartCardProvisioning;
};
struct SmartCardProvisioning : generate<SmartCardProvisioning> {};

// ISmartCardPinPolicy
struct ISmartCardPinPolicy_raw : IInspectable {
	virtual STDMETHODIMP _get_MinLength(unsigned *value);
	virtual STDMETHODIMP _put_MinLength(unsigned value);
	virtual STDMETHODIMP _get_MaxLength(unsigned *value);
	virtual STDMETHODIMP _put_MaxLength(unsigned value);
	virtual STDMETHODIMP _get_UppercaseLetters(SmartCardPinCharacterPolicyOption *value);
	virtual STDMETHODIMP _put_UppercaseLetters(SmartCardPinCharacterPolicyOption value);
	virtual STDMETHODIMP _get_LowercaseLetters(SmartCardPinCharacterPolicyOption *value);
	virtual STDMETHODIMP _put_LowercaseLetters(SmartCardPinCharacterPolicyOption value);
	virtual STDMETHODIMP _get_Digits(SmartCardPinCharacterPolicyOption *value);
	virtual STDMETHODIMP _put_Digits(SmartCardPinCharacterPolicyOption value);
	virtual STDMETHODIMP _get_SpecialCharacters(SmartCardPinCharacterPolicyOption *value);
	virtual STDMETHODIMP _put_SpecialCharacters(SmartCardPinCharacterPolicyOption value);
};
template<typename X> struct ISmartCardPinPolicy_adaptor : X {
	union {
		struct : property {
			SmartCardPinCharacterPolicyOption get() { SmartCardPinCharacterPolicyOption value; hrcheck(enc(&ISmartCardPinPolicy_adaptor::Digits)->_get_Digits(&value)); return value; }
			SmartCardPinCharacterPolicyOption operator()() { return get(); }
			operator SmartCardPinCharacterPolicyOption () { return get(); }
			void put(SmartCardPinCharacterPolicyOption value) { hrcheck(enc(&ISmartCardPinPolicy_adaptor::Digits)->_put_Digits(value)); }
			void operator=(SmartCardPinCharacterPolicyOption value) { put(value); }
			void operator()(SmartCardPinCharacterPolicyOption value) { put(value); }
		} Digits;
		struct : property {
			SmartCardPinCharacterPolicyOption get() { SmartCardPinCharacterPolicyOption value; hrcheck(enc(&ISmartCardPinPolicy_adaptor::LowercaseLetters)->_get_LowercaseLetters(&value)); return value; }
			SmartCardPinCharacterPolicyOption operator()() { return get(); }
			operator SmartCardPinCharacterPolicyOption () { return get(); }
			void put(SmartCardPinCharacterPolicyOption value) { hrcheck(enc(&ISmartCardPinPolicy_adaptor::LowercaseLetters)->_put_LowercaseLetters(value)); }
			void operator=(SmartCardPinCharacterPolicyOption value) { put(value); }
			void operator()(SmartCardPinCharacterPolicyOption value) { put(value); }
		} LowercaseLetters;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmartCardPinPolicy_adaptor::MaxLength)->_get_MaxLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ISmartCardPinPolicy_adaptor::MaxLength)->_put_MaxLength(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MaxLength;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmartCardPinPolicy_adaptor::MinLength)->_get_MinLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ISmartCardPinPolicy_adaptor::MinLength)->_put_MinLength(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MinLength;
		struct : property {
			SmartCardPinCharacterPolicyOption get() { SmartCardPinCharacterPolicyOption value; hrcheck(enc(&ISmartCardPinPolicy_adaptor::SpecialCharacters)->_get_SpecialCharacters(&value)); return value; }
			SmartCardPinCharacterPolicyOption operator()() { return get(); }
			operator SmartCardPinCharacterPolicyOption () { return get(); }
			void put(SmartCardPinCharacterPolicyOption value) { hrcheck(enc(&ISmartCardPinPolicy_adaptor::SpecialCharacters)->_put_SpecialCharacters(value)); }
			void operator=(SmartCardPinCharacterPolicyOption value) { put(value); }
			void operator()(SmartCardPinCharacterPolicyOption value) { put(value); }
		} SpecialCharacters;
		struct : property {
			SmartCardPinCharacterPolicyOption get() { SmartCardPinCharacterPolicyOption value; hrcheck(enc(&ISmartCardPinPolicy_adaptor::UppercaseLetters)->_get_UppercaseLetters(&value)); return value; }
			SmartCardPinCharacterPolicyOption operator()() { return get(); }
			operator SmartCardPinCharacterPolicyOption () { return get(); }
			void put(SmartCardPinCharacterPolicyOption value) { hrcheck(enc(&ISmartCardPinPolicy_adaptor::UppercaseLetters)->_put_UppercaseLetters(value)); }
			void operator=(SmartCardPinCharacterPolicyOption value) { put(value); }
			void operator()(SmartCardPinCharacterPolicyOption value) { put(value); }
		} UppercaseLetters;
	};
	ISmartCardPinPolicy_adaptor() {}
};
template<typename X> struct adapt<ISmartCardPinPolicy, X> : Windows::Devices::SmartCards::ISmartCardPinPolicy_adaptor<X> { typedef adapt ISmartCardPinPolicy; };
struct ISmartCardPinPolicy : ISmartCardPinPolicy_raw, generate<ISmartCardPinPolicy> {};

// SmartCardPinPolicy
template<typename X> struct statics<SmartCardPinPolicy, X> : X {
	typedef typename X::root_type SmartCardPinPolicy;
};
struct SmartCardPinPolicy : generate<SmartCardPinPolicy> {};

// ISmartCardChallengeContext
struct ISmartCardChallengeContext_raw : IInspectable {
	virtual STDMETHODIMP _get_Challenge(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _VerifyResponseAsync(Storage::Streams::IBuffer* response, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _ProvisionAsync(Storage::Streams::IBuffer* response, bool formatCard, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ProvisionAsyncWithNewCardId(Storage::Streams::IBuffer* response, bool formatCard, Platform::Guid newCardId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ChangeAdministrativeKeyAsync(Storage::Streams::IBuffer* response, Storage::Streams::IBuffer* newAdministrativeKey, Foundation::IAsyncAction* *result);
};
template<typename X> struct ISmartCardChallengeContext_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardChallengeContext_adaptor::Challenge)->_get_Challenge(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Challenge;
	};
	ptr<Foundation::IAsyncOperation<bool>> VerifyResponseAsync(pptr<Storage::Streams::IBuffer> response) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_VerifyResponseAsync(response, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ProvisionAsync(pptr<Storage::Streams::IBuffer> response, bool formatCard) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ProvisionAsync(response, formatCard, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ProvisionAsync(pptr<Storage::Streams::IBuffer> response, bool formatCard, const Platform::Guid& newCardId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ProvisionAsyncWithNewCardId(response, formatCard, newCardId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ChangeAdministrativeKeyAsync(pptr<Storage::Streams::IBuffer> response, pptr<Storage::Streams::IBuffer> newAdministrativeKey) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ChangeAdministrativeKeyAsync(response, newAdministrativeKey, &result)); return from_abi(result); }
	ISmartCardChallengeContext_adaptor() {}
};
template<typename X> struct adapt<ISmartCardChallengeContext, X> : Windows::Devices::SmartCards::ISmartCardChallengeContext_adaptor<X> { typedef adapt ISmartCardChallengeContext; };
struct ISmartCardChallengeContext : ISmartCardChallengeContext_raw, generate<ISmartCardChallengeContext> {};

// SmartCardChallengeContext
template<typename X> struct statics<SmartCardChallengeContext, X> : X {
	typedef typename X::root_type SmartCardChallengeContext;
};
struct SmartCardChallengeContext : generate<SmartCardChallengeContext> {
	using ISmartCardChallengeContext::ProvisionAsync;
};

// SmartCardPinResetHandler
struct SmartCardPinResetHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(SmartCardProvisioning* sender, SmartCardPinResetRequest* request) = 0;
};

// ISmartCardPinResetRequest
struct ISmartCardPinResetRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Challenge(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
	virtual STDMETHODIMP _GetDeferral(SmartCardPinResetDeferral* *result);
	virtual STDMETHODIMP _SetResponse(Storage::Streams::IBuffer* response);
};
template<typename X> struct ISmartCardPinResetRequest_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmartCardPinResetRequest_adaptor::Challenge)->_get_Challenge(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Challenge;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmartCardPinResetRequest_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	ptr<SmartCardPinResetDeferral> GetDeferral() { SmartCardPinResetDeferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
	void SetResponse(pptr<Storage::Streams::IBuffer> response) { hrcheck(X::get()->_SetResponse(response)); }
	ISmartCardPinResetRequest_adaptor() {}
};
template<typename X> struct adapt<ISmartCardPinResetRequest, X> : Windows::Devices::SmartCards::ISmartCardPinResetRequest_adaptor<X> { typedef adapt ISmartCardPinResetRequest; };
struct ISmartCardPinResetRequest : ISmartCardPinResetRequest_raw, generate<ISmartCardPinResetRequest> {};

// SmartCardPinResetRequest
template<typename X> struct statics<SmartCardPinResetRequest, X> : X {
	typedef typename X::root_type SmartCardPinResetRequest;
};
struct SmartCardPinResetRequest : generate<SmartCardPinResetRequest> {};

// ISmartCardPinResetDeferral
struct ISmartCardPinResetDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct ISmartCardPinResetDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<ISmartCardPinResetDeferral, X> : Windows::Devices::SmartCards::ISmartCardPinResetDeferral_adaptor<X> { typedef adapt ISmartCardPinResetDeferral; };
struct ISmartCardPinResetDeferral : ISmartCardPinResetDeferral_raw, generate<ISmartCardPinResetDeferral> {};

// SmartCardPinResetDeferral
template<typename X> struct statics<SmartCardPinResetDeferral, X> : X {
	typedef typename X::root_type SmartCardPinResetDeferral;
};
struct SmartCardPinResetDeferral : generate<SmartCardPinResetDeferral> {};

// ISmartCardConnection
struct ISmartCardConnection_raw : IInspectable {
	virtual STDMETHODIMP _TransmitAsync(Storage::Streams::IBuffer* command, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *result);
};
template<typename X> struct ISmartCardConnection_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> TransmitAsync(pptr<Storage::Streams::IBuffer> command) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* result; hrcheck(X::get()->_TransmitAsync(command, &result)); return from_abi(result); }
};
template<typename X> struct adapt<ISmartCardConnection, X> : Windows::Devices::SmartCards::ISmartCardConnection_adaptor<X> { typedef adapt ISmartCardConnection; };
struct ISmartCardConnection : ISmartCardConnection_raw, generate<ISmartCardConnection> {};

// SmartCardConnection
template<typename X> struct statics<SmartCardConnection, X> : X {
	typedef typename X::root_type SmartCardConnection;
};
struct SmartCardConnection : generate<SmartCardConnection> {};
}}}
} // namespace iso_winrt
