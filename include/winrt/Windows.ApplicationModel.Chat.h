#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Chat

#include "Windows.ApplicationModel.Chat.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
template<typename T> struct IVector;
template<typename K, typename V> struct IMapView;
}}
namespace Media { namespace MediaProperties {
struct MediaEncodingProfile;
}}
namespace Security { namespace Credentials {
struct WebAccount;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Chat::ChatMessageStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageOperatorKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageChangeType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageValidationStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatConversationThreadingKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatStoreChangedEventKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatTransportErrorCodeCategory> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatTransportInterpretedErrorCode> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageTransportKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsServiceKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatItemKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatRestoreHistorySpan> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageTransport> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageTransport2> : interface_type<Windows::ApplicationModel::Chat::IChatMessageTransport> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageTransportConfiguration> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageTransportConfiguration> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageTransportConfiguration> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageChange> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatItem> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessage> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessage4> : interface_type<Windows::ApplicationModel::Chat::IChatMessage> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessage3> : interface_type<Windows::ApplicationModel::Chat::IChatMessage> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessage2> : interface_type<Windows::ApplicationModel::Chat::IChatMessage3> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessage> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessage, Windows::ApplicationModel::Chat::IChatMessage2, Windows::ApplicationModel::Chat::IChatItem, Windows::ApplicationModel::Chat::IChatMessage4> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageChangeReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageChange> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageChange> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageChangeTracker> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageChangeReader> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageChangeReader> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageValidationResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageAttachmentFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageAttachment> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageAttachment2> : interface_type<Windows::ApplicationModel::Chat::IChatMessageAttachment> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageAttachment> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageAttachment, Windows::ApplicationModel::Chat::IChatMessageAttachment2>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Chat::IChatConversationThreadingInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatConversationThreadingInfo> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatConversationThreadingInfo> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatRecipientDeliveryInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatRecipientDeliveryInfo> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatRecipientDeliveryInfo> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatQueryOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageChangeTracker> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageChangeTracker> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageReader2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageReader> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageReader, Windows::ApplicationModel::Chat::IChatMessageReader2> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageValidationResult> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageValidationResult> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageStore3> : interface_type<Windows::ApplicationModel::Chat::IChatMessageStore> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageStore2> : interface_type<Windows::ApplicationModel::Chat::IChatMessageStore> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageStore> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageStore, Windows::ApplicationModel::Chat::IChatMessageStore2, Windows::ApplicationModel::Chat::IChatMessageStore3> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatConversation2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatConversation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatConversation> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatConversation, Windows::ApplicationModel::Chat::IChatConversation2, Windows::ApplicationModel::Chat::IChatItem> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatConversationReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatConversationReader> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatConversationReader> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatQueryOptions> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatQueryOptions> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatSearchReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatSearchReader> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatSearchReader> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageStoreChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageStoreChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageStoreChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageChangedDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageChangedDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageChangedDeferral> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageBlockingStatic> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageManagerStatic> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageTransport> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageTransport, Windows::ApplicationModel::Chat::IChatMessageTransport2> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageManager2Statics> : interface_type<Windows::ApplicationModel::Chat::IChatMessageManagerStatic> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageManagerStatics3> : interface_type<Windows::ApplicationModel::Chat::IChatMessageManagerStatic> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatSyncManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatSyncManager> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatSyncManager> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails2> : interface_type<Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatCapabilities> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatCapabilitiesManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatCapabilities> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatCapabilities> {};
template<> struct def<Windows::ApplicationModel::Chat::IRemoteParticipantComposingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::RemoteParticipantComposingChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRemoteParticipantComposingChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Chat::IChatSyncConfiguration> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatSyncConfiguration> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatSyncConfiguration> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsServiceKindSupportedChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsEndUserMessageManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsEndUserMessageManager> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsEndUserMessageManager> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsTransport> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsTransport> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsTransport> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsTransportConfiguration> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsTransportConfiguration> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsTransportConfiguration> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsServiceKindSupportedChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsServiceKindSupportedChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsEndUserMessageAvailableEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableEventArgs> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsEndUserMessageAction> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsEndUserMessage> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsEndUserMessageAction> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsEndUserMessageAction> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsEndUserMessage> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsEndUserMessage> {};
template<> struct def<Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageNotificationTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails, Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails2> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatMessageBlocking> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Chat::ChatCapabilitiesManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Chat::RcsEndUserMessageAvailableTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableTriggerDetails> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageTransport> { define_guid(0x63A9DBF8, 0xE6B3, 0x5C9A, 0x5F, 0x85, 0xD4, 0x79, 0x25, 0xB9, 0xBD, 0x18);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageTransport2> { define_guid(0x90A75622, 0xD84A, 0x4C22, 0xA9, 0x4D, 0x54, 0x44, 0x44, 0xED, 0xC8, 0xA1);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageTransportConfiguration> { define_guid(0x879FF725, 0x1A08, 0x4ACA, 0xA0, 0x75, 0x33, 0x55, 0x12, 0x63, 0x12, 0xE6);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageChange> { define_guid(0x1C18C355, 0x421E, 0x54B8, 0x6D, 0x38, 0x6B, 0x3A, 0x6C, 0x82, 0xFC, 0xCC);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatItem> { define_guid(0x8751D000, 0xCEB1, 0x4243, 0xB8, 0x3, 0x15, 0xD4, 0x5A, 0x1D, 0xD4, 0x28);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessage> { define_guid(0x4B39052A, 0x1142, 0x5089, 0x76, 0xDA, 0xF2, 0xDB, 0x3D, 0x17, 0xCD, 0x5);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessage4> { define_guid(0x2D144B0F, 0xD2BF, 0x460C, 0xAA, 0x68, 0x6D, 0x3F, 0x84, 0x83, 0xC9, 0xBF);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessage3> { define_guid(0x74EB2FB0, 0x3BA7, 0x459F, 0x8E, 0xB, 0xE8, 0xAF, 0xF, 0xEB, 0xD9, 0xAD);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessage2> { define_guid(0x86668332, 0x543F, 0x49F5, 0xAC, 0x71, 0x6C, 0x2A, 0xFC, 0x65, 0x65, 0xFD);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageChangeReader> { define_guid(0x14267020, 0x28CE, 0x5F26, 0x7B, 0x5, 0x9A, 0x5C, 0x7C, 0xCE, 0x87, 0xCA);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageChangeTracker> { define_guid(0x60B7F066, 0x70A0, 0x5224, 0x50, 0x8C, 0x24, 0x2E, 0xF7, 0xC1, 0xD0, 0x6F);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageValidationResult> { define_guid(0x25E93A03, 0x28EC, 0x5889, 0x56, 0x9B, 0x7E, 0x48, 0x6B, 0x12, 0x6F, 0x18);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageAttachmentFactory> { define_guid(0x205852A2, 0xA356, 0x5B71, 0x6C, 0xA9, 0x66, 0xC9, 0x85, 0xB7, 0xD0, 0xD5);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageAttachment> { define_guid(0xC7C4FD74, 0xBF63, 0x58EB, 0x50, 0x8C, 0x8B, 0x86, 0x3F, 0xF1, 0x6B, 0x67);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageAttachment2> { define_guid(0x5ED99270, 0x7DD1, 0x4A87, 0xA8, 0xCE, 0xAC, 0xDD, 0x87, 0xD8, 0xD, 0xC8);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatConversationThreadingInfo> { define_guid(0x331C21DC, 0x7A07, 0x4422, 0xA3, 0x2C, 0x24, 0xBE, 0x7C, 0x6D, 0xAB, 0x24);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatRecipientDeliveryInfo> { define_guid(0xFFC7B2A2, 0x283C, 0x4C0A, 0x8A, 0xE, 0x8C, 0x33, 0xBD, 0xBF, 0x5, 0x45);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatQueryOptions> { define_guid(0x2FD364A6, 0xBF36, 0x42F7, 0xB7, 0xE7, 0x92, 0x3C, 0xA, 0xAB, 0xFE, 0x16);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageStore> { define_guid(0x31F2FD01, 0xCCF6, 0x580B, 0x49, 0x76, 0xA, 0x7, 0xDD, 0x5D, 0x3B, 0x47);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageReader2> { define_guid(0x89643683, 0x64BB, 0x470D, 0x9D, 0xF4, 0xD, 0xE8, 0xBE, 0x1A, 0x5, 0xBF);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageReader> { define_guid(0xB6EA78CE, 0x4489, 0x56F9, 0x76, 0xAA, 0xE2, 0x4, 0x68, 0x25, 0x14, 0xCF);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageStore3> { define_guid(0x9ADBBB09, 0x4345, 0x4EC1, 0x8B, 0x74, 0xB7, 0x33, 0x82, 0x43, 0x71, 0x9C);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageStore2> { define_guid(0xAD4DC4EE, 0x3AD4, 0x491B, 0xB3, 0x11, 0xAB, 0xDF, 0x9B, 0xB2, 0x27, 0x68);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageChangedEventArgs> { define_guid(0xB6B73E2D, 0x691C, 0x4EDF, 0x86, 0x60, 0x6E, 0xB9, 0x89, 0x68, 0x92, 0xE3);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatConversation2> { define_guid(0xA030CD1, 0x983A, 0x47AA, 0x9A, 0x90, 0xEE, 0x48, 0xEE, 0x99, 0x7B, 0x59);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatConversation> { define_guid(0xA58C080D, 0x1A6F, 0x46DC, 0x8F, 0x3D, 0xF5, 0x2, 0x86, 0x60, 0xB6, 0xEE);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatConversationReader> { define_guid(0x55136D2, 0xDE32, 0x4A47, 0xA9, 0x3A, 0xB3, 0xDC, 0x8, 0x33, 0x85, 0x2B);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatSearchReader> { define_guid(0x4665FE49, 0x9020, 0x4752, 0x98, 0xD, 0x39, 0x61, 0x23, 0x25, 0xF5, 0x89);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageStoreChangedEventArgs> { define_guid(0x65C66FAC, 0xFE8C, 0x46D4, 0x91, 0x19, 0x57, 0xB8, 0x41, 0x3, 0x11, 0xD5);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageChangedDeferral> { define_guid(0xFBC6B30C, 0x788C, 0x4DCC, 0xAC, 0xE7, 0x62, 0x82, 0x38, 0x29, 0x68, 0xCF);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageBlockingStatic> { define_guid(0xF6B9A380, 0xCDEA, 0x11E4, 0x88, 0x30, 0x8, 0x0, 0x20, 0xC, 0x9A, 0x66);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageManagerStatic> { define_guid(0xF15C60F7, 0xD5E8, 0x5E92, 0x55, 0x6D, 0xE0, 0x3B, 0x60, 0x25, 0x31, 0x4);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageManager2Statics> { define_guid(0x1D45390F, 0x9F4F, 0x4E35, 0x96, 0x4E, 0x1B, 0x9C, 0xA6, 0x1A, 0xC0, 0x44);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageManagerStatics3> { define_guid(0x208B830D, 0x6755, 0x48CC, 0x9A, 0xB3, 0xFD, 0x3, 0xC4, 0x63, 0xFC, 0x92);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatSyncManager> { define_guid(0x7BA52C63, 0x2650, 0x486F, 0xB4, 0xB4, 0x6B, 0xD9, 0xD3, 0xD6, 0x3C, 0x84);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails> { define_guid(0xFD344DFB, 0x3063, 0x4E17, 0x85, 0x86, 0xC6, 0xC0, 0x82, 0x62, 0xE6, 0xC0);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails2> { define_guid(0x6BB522E0, 0xAA07, 0x4FD1, 0x94, 0x71, 0x77, 0x93, 0x4F, 0xB7, 0x5E, 0xE6);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatCapabilities> { define_guid(0x3AFF77BC, 0x39C9, 0x4DD1, 0xAD, 0x2D, 0x39, 0x64, 0xDD, 0x9D, 0x40, 0x3F);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatCapabilitiesManagerStatics> { define_guid(0xB57A2F30, 0x7041, 0x458E, 0xB0, 0xCF, 0x7C, 0xD, 0x9F, 0xEA, 0x33, 0x3A);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRemoteParticipantComposingChangedEventArgs> { define_guid(0x1EC045A7, 0xCFC9, 0x45C9, 0x98, 0x76, 0x44, 0x9F, 0x2B, 0xC1, 0x80, 0xF5);};
template<> struct uuid<Windows::ApplicationModel::Chat::IChatSyncConfiguration> { define_guid(0x9F869B2, 0x69F4, 0x4AFF, 0x82, 0xB6, 0x6, 0x99, 0x2F, 0xF4, 0x2, 0xD2);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsServiceKindSupportedChangedEventArgs> { define_guid(0xF47EA244, 0xE783, 0x4866, 0xB3, 0xA7, 0x4E, 0x5C, 0xCF, 0x2, 0x30, 0x70);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsManagerStatics> { define_guid(0x7D270AC5, 0xABD, 0x4F31, 0x9B, 0x99, 0xA5, 0x9E, 0x71, 0xA7, 0xB7, 0x31);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsEndUserMessageManager> { define_guid(0x3054AE5A, 0x4D1F, 0x4B59, 0x94, 0x33, 0x12, 0x6C, 0x73, 0x4E, 0x86, 0xA6);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsTransport> { define_guid(0xFEA34759, 0xF37C, 0x4319, 0x85, 0x46, 0xEC, 0x84, 0xD2, 0x1D, 0x30, 0xFF);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsTransportConfiguration> { define_guid(0x1FCCB102, 0x2472, 0x4BB9, 0x99, 0x88, 0xC1, 0x21, 0x1C, 0x83, 0xE8, 0xA9);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableEventArgs> { define_guid(0x2D45AE01, 0x3F89, 0x41EA, 0x97, 0x2, 0x9E, 0x9E, 0xD4, 0x11, 0xAA, 0x98);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsEndUserMessageAction> { define_guid(0x92378737, 0x9B42, 0x46D3, 0x9D, 0x5E, 0x3C, 0x1B, 0x2D, 0xAE, 0x7C, 0xB8);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsEndUserMessage> { define_guid(0xD7CDA5EB, 0xCBD7, 0x4F3B, 0x85, 0x26, 0xB5, 0x6, 0xDE, 0xC3, 0x5C, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableTriggerDetails> { define_guid(0x5B97742D, 0x351F, 0x4692, 0xB4, 0x1E, 0x1B, 0x3, 0x5D, 0xC1, 0x89, 0x86);};

// types

namespace Windows { namespace ApplicationModel { namespace Chat {

// IChatMessageTransport
struct IChatMessageTransport_raw : IInspectable {
	virtual STDMETHODIMP _get_IsAppSetAsNotificationProvider(bool *value);
	virtual STDMETHODIMP _get_IsActive(bool *value);
	virtual STDMETHODIMP _get_TransportFriendlyName(HSTRING *value);
	virtual STDMETHODIMP _get_TransportId(HSTRING *value);
	virtual STDMETHODIMP _RequestSetAsNotificationProviderAsync(Foundation::IAsyncAction* *value);
};
template<typename X> struct IChatMessageTransport_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IChatMessageTransport_adaptor::IsActive)->_get_IsActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsActive;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IChatMessageTransport_adaptor::IsAppSetAsNotificationProvider)->_get_IsAppSetAsNotificationProvider(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAppSetAsNotificationProvider;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessageTransport_adaptor::TransportFriendlyName)->_get_TransportFriendlyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TransportFriendlyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessageTransport_adaptor::TransportId)->_get_TransportId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TransportId;
	};
	ptr<Foundation::IAsyncAction> RequestSetAsNotificationProviderAsync() { Foundation::IAsyncAction* value; hrcheck(X::get()->_RequestSetAsNotificationProviderAsync(&value)); return from_abi(value); }
	IChatMessageTransport_adaptor() {}
};
template<typename X> struct adapt<IChatMessageTransport, X> : Windows::ApplicationModel::Chat::IChatMessageTransport_adaptor<X> { typedef adapt IChatMessageTransport; };
struct IChatMessageTransport : IChatMessageTransport_raw, generate<IChatMessageTransport> {};

// IChatMessageTransport2
struct IChatMessageTransport2_raw : IInspectable {
	virtual STDMETHODIMP _get_Configuration(ChatMessageTransportConfiguration* *result);
	virtual STDMETHODIMP _get_TransportKind(ChatMessageTransportKind *result);
};
template<typename X> struct IChatMessageTransport2_adaptor : X {
	union {
		struct : property {
			ptr<ChatMessageTransportConfiguration> get() { ChatMessageTransportConfiguration* result; hrcheck(enc(&IChatMessageTransport2_adaptor::Configuration)->_get_Configuration(&result)); return from_abi(result); }
			ptr<ChatMessageTransportConfiguration> operator()() { return get(); }
			operator ptr<ChatMessageTransportConfiguration> () { return get(); }
			ptr<ChatMessageTransportConfiguration> operator->() { return get(); }
		} Configuration;
		struct : property {
			ChatMessageTransportKind get() { ChatMessageTransportKind result; hrcheck(enc(&IChatMessageTransport2_adaptor::TransportKind)->_get_TransportKind(&result)); return result; }
			ChatMessageTransportKind operator()() { return get(); }
			operator ChatMessageTransportKind () { return get(); }
		} TransportKind;
	};
	IChatMessageTransport2_adaptor() {}
};
template<typename X> struct adapt<IChatMessageTransport2, X> : Windows::ApplicationModel::Chat::IChatMessageTransport2_adaptor<X> { typedef adapt IChatMessageTransport2; };
struct IChatMessageTransport2 : IChatMessageTransport2_raw, generate<IChatMessageTransport2> {};

// IChatMessageTransportConfiguration
struct IChatMessageTransportConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxAttachmentCount(int *result);
	virtual STDMETHODIMP _get_MaxMessageSizeInKilobytes(int *result);
	virtual STDMETHODIMP _get_MaxRecipientCount(int *result);
	virtual STDMETHODIMP _get_SupportedVideoFormat(Media::MediaProperties::MediaEncodingProfile* *result);
	virtual STDMETHODIMP _get_ExtendedProperties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *result);
};
template<typename X> struct IChatMessageTransportConfiguration_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* result; hrcheck(enc(&IChatMessageTransportConfiguration_adaptor::ExtendedProperties)->_get_ExtendedProperties(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} ExtendedProperties;
		struct : property {
			int get() { int result; hrcheck(enc(&IChatMessageTransportConfiguration_adaptor::MaxAttachmentCount)->_get_MaxAttachmentCount(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxAttachmentCount;
		struct : property {
			int get() { int result; hrcheck(enc(&IChatMessageTransportConfiguration_adaptor::MaxMessageSizeInKilobytes)->_get_MaxMessageSizeInKilobytes(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxMessageSizeInKilobytes;
		struct : property {
			int get() { int result; hrcheck(enc(&IChatMessageTransportConfiguration_adaptor::MaxRecipientCount)->_get_MaxRecipientCount(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxRecipientCount;
		struct : property {
			ptr<Media::MediaProperties::MediaEncodingProfile> get() { Media::MediaProperties::MediaEncodingProfile* result; hrcheck(enc(&IChatMessageTransportConfiguration_adaptor::SupportedVideoFormat)->_get_SupportedVideoFormat(&result)); return from_abi(result); }
			ptr<Media::MediaProperties::MediaEncodingProfile> operator()() { return get(); }
			operator ptr<Media::MediaProperties::MediaEncodingProfile> () { return get(); }
			ptr<Media::MediaProperties::MediaEncodingProfile> operator->() { return get(); }
		} SupportedVideoFormat;
	};
	IChatMessageTransportConfiguration_adaptor() {}
};
template<typename X> struct adapt<IChatMessageTransportConfiguration, X> : Windows::ApplicationModel::Chat::IChatMessageTransportConfiguration_adaptor<X> { typedef adapt IChatMessageTransportConfiguration; };
struct IChatMessageTransportConfiguration : IChatMessageTransportConfiguration_raw, generate<IChatMessageTransportConfiguration> {};

// ChatMessageTransportConfiguration
template<typename X> struct statics<ChatMessageTransportConfiguration, X> : X {
	typedef typename X::root_type ChatMessageTransportConfiguration;
};
struct ChatMessageTransportConfiguration : generate<ChatMessageTransportConfiguration> {};

// IChatMessageChange
struct IChatMessageChange_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeType(ChatMessageChangeType *value);
	virtual STDMETHODIMP _get_Message(ChatMessage* *value);
};
template<typename X> struct IChatMessageChange_adaptor : X {
	union {
		struct : property {
			ChatMessageChangeType get() { ChatMessageChangeType value; hrcheck(enc(&IChatMessageChange_adaptor::ChangeType)->_get_ChangeType(&value)); return value; }
			ChatMessageChangeType operator()() { return get(); }
			operator ChatMessageChangeType () { return get(); }
		} ChangeType;
		struct : property {
			ptr<ChatMessage> get() { ChatMessage* value; hrcheck(enc(&IChatMessageChange_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<ChatMessage> operator()() { return get(); }
			operator ptr<ChatMessage> () { return get(); }
			ptr<ChatMessage> operator->() { return get(); }
		} Message;
	};
	IChatMessageChange_adaptor() {}
};
template<typename X> struct adapt<IChatMessageChange, X> : Windows::ApplicationModel::Chat::IChatMessageChange_adaptor<X> { typedef adapt IChatMessageChange; };
struct IChatMessageChange : IChatMessageChange_raw, generate<IChatMessageChange> {};

// IChatItem
struct IChatItem_raw : IInspectable {
	virtual STDMETHODIMP _get_ItemKind(ChatItemKind *result) = 0;
};
template<typename X> struct IChatItem_adaptor : X {
	union {
		struct : property {
			ChatItemKind get() { ChatItemKind result; hrcheck(enc(&IChatItem_adaptor::ItemKind)->_get_ItemKind(&result)); return result; }
			ChatItemKind operator()() { return get(); }
			operator ChatItemKind () { return get(); }
		} ItemKind;
	};
	IChatItem_adaptor() {}
};
template<typename X> struct adapt<IChatItem, X> : Windows::ApplicationModel::Chat::IChatItem_adaptor<X> { typedef adapt IChatItem; };
template<typename X> struct IChatItem_unadaptor : X {
	STDMETHODIMP _get_ItemKind(ChatItemKind *result) { return hrtry([&, this] { get_prop(result, ItemKind); }); }
};
template<typename X> struct unadapt<IChatItem, X> : Windows::ApplicationModel::Chat::IChatItem_unadaptor<X> {};
struct IChatItem : IChatItem_raw, generate<IChatItem> {};

// IChatMessage
struct IChatMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Attachments(Foundation::Collections::IVector<ChatMessageAttachment*>* *value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _put_Body(HSTRING value);
	virtual STDMETHODIMP _get_From(HSTRING *value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_IsForwardingDisabled(bool *value);
	virtual STDMETHODIMP _get_IsIncoming(bool *value);
	virtual STDMETHODIMP _get_IsRead(bool *value);
	virtual STDMETHODIMP _get_LocalTimestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_NetworkTimestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Recipients(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_RecipientSendStatuses(Foundation::Collections::IMapView<HSTRING, ChatMessageStatus>* *value);
	virtual STDMETHODIMP _get_Status(ChatMessageStatus *value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_TransportFriendlyName(HSTRING *value);
	virtual STDMETHODIMP _get_TransportId(HSTRING *value);
	virtual STDMETHODIMP _put_TransportId(HSTRING value);
};
template<typename X> struct IChatMessage_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ChatMessageAttachment>>> get() { Foundation::Collections::IVector<ChatMessageAttachment*>* value; hrcheck(enc(&IChatMessage_adaptor::Attachments)->_get_Attachments(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ChatMessageAttachment>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ChatMessageAttachment>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ChatMessageAttachment>>> operator->() { return get(); }
		} Attachments;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessage_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatMessage_adaptor::Body)->_put_Body(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Body;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessage_adaptor::From)->_get_From(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} From;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessage_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IChatMessage_adaptor::IsForwardingDisabled)->_get_IsForwardingDisabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsForwardingDisabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IChatMessage_adaptor::IsIncoming)->_get_IsIncoming(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsIncoming;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IChatMessage_adaptor::IsRead)->_get_IsRead(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsRead;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IChatMessage_adaptor::LocalTimestamp)->_get_LocalTimestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LocalTimestamp;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IChatMessage_adaptor::NetworkTimestamp)->_get_NetworkTimestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} NetworkTimestamp;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, ChatMessageStatus>> get() { Foundation::Collections::IMapView<HSTRING, ChatMessageStatus>* value; hrcheck(enc(&IChatMessage_adaptor::RecipientSendStatuses)->_get_RecipientSendStatuses(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, ChatMessageStatus>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, ChatMessageStatus>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, ChatMessageStatus>> operator->() { return get(); }
		} RecipientSendStatuses;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IChatMessage_adaptor::Recipients)->_get_Recipients(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Recipients;
		struct : property {
			ChatMessageStatus get() { ChatMessageStatus value; hrcheck(enc(&IChatMessage_adaptor::Status)->_get_Status(&value)); return value; }
			ChatMessageStatus operator()() { return get(); }
			operator ChatMessageStatus () { return get(); }
		} Status;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessage_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subject;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessage_adaptor::TransportFriendlyName)->_get_TransportFriendlyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TransportFriendlyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessage_adaptor::TransportId)->_get_TransportId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatMessage_adaptor::TransportId)->_put_TransportId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TransportId;
	};
	IChatMessage_adaptor() {}
};
template<typename X> struct adapt<IChatMessage, X> : Windows::ApplicationModel::Chat::IChatMessage_adaptor<X> { typedef adapt IChatMessage; };
struct IChatMessage : IChatMessage_raw, generate<IChatMessage> {};

// IChatMessage4
struct IChatMessage4_raw : IInspectable {
	virtual STDMETHODIMP _get_SyncId(HSTRING *result);
	virtual STDMETHODIMP _put_SyncId(HSTRING value);
};
template<typename X> struct IChatMessage4_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatMessage4_adaptor::SyncId)->_get_SyncId(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatMessage4_adaptor::SyncId)->_put_SyncId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SyncId;
	};
	IChatMessage4_adaptor() {}
};
template<typename X> struct adapt<IChatMessage4, X> : Windows::ApplicationModel::Chat::IChatMessage4_adaptor<X> { typedef adapt IChatMessage4; };
struct IChatMessage4 : IChatMessage4_raw, generate<IChatMessage4> {};

// IChatMessage3
struct IChatMessage3_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
};
template<typename X> struct IChatMessage3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessage3_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RemoteId;
	};
	IChatMessage3_adaptor() {}
};
template<typename X> struct adapt<IChatMessage3, X> : Windows::ApplicationModel::Chat::IChatMessage3_adaptor<X> { typedef adapt IChatMessage3; };
struct IChatMessage3 : IChatMessage3_raw, generate<IChatMessage3> {};

// IChatMessage2
struct IChatMessage2_raw : IInspectable {
	virtual STDMETHODIMP _get_EstimatedDownloadSize(unsigned __int64 *result);
	virtual STDMETHODIMP _put_EstimatedDownloadSize(unsigned __int64 value);
	virtual STDMETHODIMP _put_From(HSTRING value);
	virtual STDMETHODIMP _get_IsAutoReply(bool *result);
	virtual STDMETHODIMP _put_IsAutoReply(bool value);
	virtual STDMETHODIMP _put_IsForwardingDisabled(bool value);
	virtual STDMETHODIMP _get_IsReplyDisabled(bool *result);
	virtual STDMETHODIMP _put_IsIncoming(bool value);
	virtual STDMETHODIMP _put_IsRead(bool value);
	virtual STDMETHODIMP _get_IsSeen(bool *result);
	virtual STDMETHODIMP _put_IsSeen(bool value);
	virtual STDMETHODIMP _get_IsSimMessage(bool *result);
	virtual STDMETHODIMP _put_LocalTimestamp(Foundation::DateTime value);
	virtual STDMETHODIMP _get_MessageKind(ChatMessageKind *result);
	virtual STDMETHODIMP _put_MessageKind(ChatMessageKind value);
	virtual STDMETHODIMP _get_MessageOperatorKind(ChatMessageOperatorKind *result);
	virtual STDMETHODIMP _put_MessageOperatorKind(ChatMessageOperatorKind value);
	virtual STDMETHODIMP _put_NetworkTimestamp(Foundation::DateTime value);
	virtual STDMETHODIMP _get_IsReceivedDuringQuietHours(bool *result);
	virtual STDMETHODIMP _put_IsReceivedDuringQuietHours(bool value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _put_Status(ChatMessageStatus value);
	virtual STDMETHODIMP _put_Subject(HSTRING value);
	virtual STDMETHODIMP _get_ShouldSuppressNotification(bool *result);
	virtual STDMETHODIMP _put_ShouldSuppressNotification(bool value);
	virtual STDMETHODIMP _get_ThreadingInfo(ChatConversationThreadingInfo* *result);
	virtual STDMETHODIMP _put_ThreadingInfo(ChatConversationThreadingInfo* value);
	virtual STDMETHODIMP _get_RecipientsDeliveryInfos(Foundation::Collections::IVector<ChatRecipientDeliveryInfo*>* *result);
};
template<typename X> struct IChatMessage2_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 result; hrcheck(enc(&IChatMessage2_adaptor::EstimatedDownloadSize)->_get_EstimatedDownloadSize(&result)); return result; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
			void put(unsigned __int64 value) { hrcheck(enc(&IChatMessage2_adaptor::EstimatedDownloadSize)->_put_EstimatedDownloadSize(value)); }
			void operator=(unsigned __int64 value) { put(value); }
			void operator()(unsigned __int64 value) { put(value); }
		} EstimatedDownloadSize;
		struct : property {
			void put(hstring_ref value) { hrcheck(enc(&IChatMessage2_adaptor::From)->_put_From(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} From;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessage2_adaptor::IsAutoReply)->_get_IsAutoReply(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IChatMessage2_adaptor::IsAutoReply)->_put_IsAutoReply(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAutoReply;
		struct : property {
			void put(bool value) { hrcheck(enc(&IChatMessage2_adaptor::IsForwardingDisabled)->_put_IsForwardingDisabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsForwardingDisabled;
		struct : property {
			void put(bool value) { hrcheck(enc(&IChatMessage2_adaptor::IsIncoming)->_put_IsIncoming(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsIncoming;
		struct : property {
			void put(bool value) { hrcheck(enc(&IChatMessage2_adaptor::IsRead)->_put_IsRead(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsRead;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessage2_adaptor::IsReceivedDuringQuietHours)->_get_IsReceivedDuringQuietHours(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IChatMessage2_adaptor::IsReceivedDuringQuietHours)->_put_IsReceivedDuringQuietHours(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsReceivedDuringQuietHours;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessage2_adaptor::IsReplyDisabled)->_get_IsReplyDisabled(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsReplyDisabled;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessage2_adaptor::IsSeen)->_get_IsSeen(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IChatMessage2_adaptor::IsSeen)->_put_IsSeen(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSeen;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessage2_adaptor::IsSimMessage)->_get_IsSimMessage(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSimMessage;
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IChatMessage2_adaptor::LocalTimestamp)->_put_LocalTimestamp(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LocalTimestamp;
		struct : property {
			ChatMessageKind get() { ChatMessageKind result; hrcheck(enc(&IChatMessage2_adaptor::MessageKind)->_get_MessageKind(&result)); return result; }
			ChatMessageKind operator()() { return get(); }
			operator ChatMessageKind () { return get(); }
			void put(ChatMessageKind value) { hrcheck(enc(&IChatMessage2_adaptor::MessageKind)->_put_MessageKind(value)); }
			void operator=(ChatMessageKind value) { put(value); }
			void operator()(ChatMessageKind value) { put(value); }
		} MessageKind;
		struct : property {
			ChatMessageOperatorKind get() { ChatMessageOperatorKind result; hrcheck(enc(&IChatMessage2_adaptor::MessageOperatorKind)->_get_MessageOperatorKind(&result)); return result; }
			ChatMessageOperatorKind operator()() { return get(); }
			operator ChatMessageOperatorKind () { return get(); }
			void put(ChatMessageOperatorKind value) { hrcheck(enc(&IChatMessage2_adaptor::MessageOperatorKind)->_put_MessageOperatorKind(value)); }
			void operator=(ChatMessageOperatorKind value) { put(value); }
			void operator()(ChatMessageOperatorKind value) { put(value); }
		} MessageOperatorKind;
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IChatMessage2_adaptor::NetworkTimestamp)->_put_NetworkTimestamp(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} NetworkTimestamp;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ChatRecipientDeliveryInfo>>> get() { Foundation::Collections::IVector<ChatRecipientDeliveryInfo*>* result; hrcheck(enc(&IChatMessage2_adaptor::RecipientsDeliveryInfos)->_get_RecipientsDeliveryInfos(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVector<ptr<ChatRecipientDeliveryInfo>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ChatRecipientDeliveryInfo>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ChatRecipientDeliveryInfo>>> operator->() { return get(); }
		} RecipientsDeliveryInfos;
		struct : property {
			void put(hstring_ref value) { hrcheck(enc(&IChatMessage2_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessage2_adaptor::ShouldSuppressNotification)->_get_ShouldSuppressNotification(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IChatMessage2_adaptor::ShouldSuppressNotification)->_put_ShouldSuppressNotification(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShouldSuppressNotification;
		struct : property {
			void put(ChatMessageStatus value) { hrcheck(enc(&IChatMessage2_adaptor::Status)->_put_Status(value)); }
			void operator=(ChatMessageStatus value) { put(value); }
			void operator()(ChatMessageStatus value) { put(value); }
		} Status;
		struct : property {
			void put(hstring_ref value) { hrcheck(enc(&IChatMessage2_adaptor::Subject)->_put_Subject(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subject;
		struct : property {
			ptr<ChatConversationThreadingInfo> get() { ChatConversationThreadingInfo* result; hrcheck(enc(&IChatMessage2_adaptor::ThreadingInfo)->_get_ThreadingInfo(&result)); return from_abi(result); }
			ptr<ChatConversationThreadingInfo> operator()() { return get(); }
			operator ptr<ChatConversationThreadingInfo> () { return get(); }
			ptr<ChatConversationThreadingInfo> operator->() { return get(); }
			void put(pptr<ChatConversationThreadingInfo> value) { hrcheck(enc(&IChatMessage2_adaptor::ThreadingInfo)->_put_ThreadingInfo(value)); }
			void operator=(pptr<ChatConversationThreadingInfo> value) { put(value); }
			void operator()(pptr<ChatConversationThreadingInfo> value) { put(value); }
		} ThreadingInfo;
	};
	IChatMessage2_adaptor() {}
};
template<typename X> struct adapt<IChatMessage2, X> : Windows::ApplicationModel::Chat::IChatMessage2_adaptor<X> { typedef adapt IChatMessage2; };
struct IChatMessage2 : IChatMessage2_raw, generate<IChatMessage2> {};

// ChatMessage
template<typename X> struct statics<ChatMessage, X> : X {
	typedef typename X::root_type ChatMessage;
};
struct ChatMessage : generate<ChatMessage> {
	using IChatMessage2::From;
	using IChatMessage2::IsIncoming;
	using IChatMessage3::RemoteId;
	using IChatMessage2::NetworkTimestamp;
	using IChatMessage2::Subject;
	using IChatMessage2::Status;
	using IChatMessage2::IsForwardingDisabled;
	using IChatMessage2::LocalTimestamp;
	using IChatMessage2::IsRead;
};

// IChatMessageChangeReader
struct IChatMessageChangeReader_raw : IInspectable {
	virtual STDMETHODIMP _AcceptChanges();
	virtual STDMETHODIMP _AcceptChangesThrough(ChatMessageChange* lastChangeToAcknowledge);
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessageChange*>*>* *value);
};
template<typename X> struct IChatMessageChangeReader_adaptor : X {
	void AcceptChanges() { hrcheck(X::get()->_AcceptChanges()); }
	void AcceptChangesThrough(pptr<ChatMessageChange> lastChangeToAcknowledge) { hrcheck(X::get()->_AcceptChangesThrough(lastChangeToAcknowledge)); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ChatMessageChange>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessageChange*>*>* value; hrcheck(X::get()->_ReadBatchAsync(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IChatMessageChangeReader, X> : Windows::ApplicationModel::Chat::IChatMessageChangeReader_adaptor<X> { typedef adapt IChatMessageChangeReader; };
struct IChatMessageChangeReader : IChatMessageChangeReader_raw, generate<IChatMessageChangeReader> {};

// ChatMessageChange
template<typename X> struct statics<ChatMessageChange, X> : X {
	typedef typename X::root_type ChatMessageChange;
};
struct ChatMessageChange : generate<ChatMessageChange> {};

// IChatMessageChangeTracker
struct IChatMessageChangeTracker_raw : IInspectable {
	virtual STDMETHODIMP _Enable();
	virtual STDMETHODIMP _GetChangeReader(ChatMessageChangeReader* *value);
	virtual STDMETHODIMP _Reset();
};
template<typename X> struct IChatMessageChangeTracker_adaptor : X {
	void Enable() { hrcheck(X::get()->_Enable()); }
	ptr<ChatMessageChangeReader> GetChangeReader() { ChatMessageChangeReader* value; hrcheck(X::get()->_GetChangeReader(&value)); return from_abi(value); }
	void Reset() { hrcheck(X::get()->_Reset()); }
};
template<typename X> struct adapt<IChatMessageChangeTracker, X> : Windows::ApplicationModel::Chat::IChatMessageChangeTracker_adaptor<X> { typedef adapt IChatMessageChangeTracker; };
struct IChatMessageChangeTracker : IChatMessageChangeTracker_raw, generate<IChatMessageChangeTracker> {};

// ChatMessageChangeReader
template<typename X> struct statics<ChatMessageChangeReader, X> : X {
	typedef typename X::root_type ChatMessageChangeReader;
};
struct ChatMessageChangeReader : generate<ChatMessageChangeReader> {};

// IChatMessageValidationResult
struct IChatMessageValidationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxPartCount(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_PartCount(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_RemainingCharacterCountInPart(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_Status(ChatMessageValidationStatus *value);
};
template<typename X> struct IChatMessageValidationResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IChatMessageValidationResult_adaptor::MaxPartCount)->_get_MaxPartCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} MaxPartCount;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IChatMessageValidationResult_adaptor::PartCount)->_get_PartCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} PartCount;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IChatMessageValidationResult_adaptor::RemainingCharacterCountInPart)->_get_RemainingCharacterCountInPart(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} RemainingCharacterCountInPart;
		struct : property {
			ChatMessageValidationStatus get() { ChatMessageValidationStatus value; hrcheck(enc(&IChatMessageValidationResult_adaptor::Status)->_get_Status(&value)); return value; }
			ChatMessageValidationStatus operator()() { return get(); }
			operator ChatMessageValidationStatus () { return get(); }
		} Status;
	};
	IChatMessageValidationResult_adaptor() {}
};
template<typename X> struct adapt<IChatMessageValidationResult, X> : Windows::ApplicationModel::Chat::IChatMessageValidationResult_adaptor<X> { typedef adapt IChatMessageValidationResult; };
struct IChatMessageValidationResult : IChatMessageValidationResult_raw, generate<IChatMessageValidationResult> {};

// IChatMessageAttachmentFactory
struct IChatMessageAttachmentFactory : IInspectable {
	virtual STDMETHODIMP _CreateChatMessageAttachment(HSTRING mimeType, Storage::Streams::IRandomAccessStreamReference* dataStreamReference, ChatMessageAttachment* *value);
};

// IChatMessageAttachment
struct IChatMessageAttachment_raw : IInspectable {
	virtual STDMETHODIMP _get_DataStreamReference(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_DataStreamReference(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_GroupId(unsigned *value);
	virtual STDMETHODIMP _put_GroupId(unsigned value);
	virtual STDMETHODIMP _get_MimeType(HSTRING *value);
	virtual STDMETHODIMP _put_MimeType(HSTRING value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
};
template<typename X> struct IChatMessageAttachment_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IChatMessageAttachment_adaptor::DataStreamReference)->_get_DataStreamReference(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IChatMessageAttachment_adaptor::DataStreamReference)->_put_DataStreamReference(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} DataStreamReference;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IChatMessageAttachment_adaptor::GroupId)->_get_GroupId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IChatMessageAttachment_adaptor::GroupId)->_put_GroupId(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} GroupId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessageAttachment_adaptor::MimeType)->_get_MimeType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatMessageAttachment_adaptor::MimeType)->_put_MimeType(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MimeType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IChatMessageAttachment_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatMessageAttachment_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
	};
	IChatMessageAttachment_adaptor() {}
};
template<typename X> struct adapt<IChatMessageAttachment, X> : Windows::ApplicationModel::Chat::IChatMessageAttachment_adaptor<X> { typedef adapt IChatMessageAttachment; };
struct IChatMessageAttachment : IChatMessageAttachment_raw, generate<IChatMessageAttachment> {};

// IChatMessageAttachment2
struct IChatMessageAttachment2_raw : IInspectable {
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::IRandomAccessStreamReference* *result);
	virtual STDMETHODIMP _put_Thumbnail(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_TransferProgress(double *result);
	virtual STDMETHODIMP _put_TransferProgress(double value);
	virtual STDMETHODIMP _get_OriginalFileName(HSTRING *result);
	virtual STDMETHODIMP _put_OriginalFileName(HSTRING value);
};
template<typename X> struct IChatMessageAttachment2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatMessageAttachment2_adaptor::OriginalFileName)->_get_OriginalFileName(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatMessageAttachment2_adaptor::OriginalFileName)->_put_OriginalFileName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} OriginalFileName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* result; hrcheck(enc(&IChatMessageAttachment2_adaptor::Thumbnail)->_get_Thumbnail(&result)); return from_abi(result); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IChatMessageAttachment2_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Thumbnail;
		struct : property {
			double get() { double result; hrcheck(enc(&IChatMessageAttachment2_adaptor::TransferProgress)->_get_TransferProgress(&result)); return result; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IChatMessageAttachment2_adaptor::TransferProgress)->_put_TransferProgress(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} TransferProgress;
	};
	IChatMessageAttachment2_adaptor() {}
};
template<typename X> struct adapt<IChatMessageAttachment2, X> : Windows::ApplicationModel::Chat::IChatMessageAttachment2_adaptor<X> { typedef adapt IChatMessageAttachment2; };
struct IChatMessageAttachment2 : IChatMessageAttachment2_raw, generate<IChatMessageAttachment2> {};

// ChatMessageAttachment
template<typename> struct ChatMessageAttachment_statics {
	static ChatMessageAttachment *activate(hstring_ref mimeType, pptr<Storage::Streams::IRandomAccessStreamReference> dataStreamReference) { ChatMessageAttachment *value; hrcheck(get_activation_factory<ChatMessageAttachment, IChatMessageAttachmentFactory>()->_CreateChatMessageAttachment(mimeType, dataStreamReference, &value)); return value; }
};

template<typename X> struct statics<ChatMessageAttachment, X> : X, Windows::ApplicationModel::Chat::ChatMessageAttachment_statics<void> {
	using Windows::ApplicationModel::Chat::ChatMessageAttachment_statics<void>::activate;
	typedef typename X::root_type ChatMessageAttachment;
};
struct ChatMessageAttachment : generate<ChatMessageAttachment> {};

// IChatConversationThreadingInfo
struct IChatConversationThreadingInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_ContactId(HSTRING *result);
	virtual STDMETHODIMP _put_ContactId(HSTRING value);
	virtual STDMETHODIMP _get_Custom(HSTRING *result);
	virtual STDMETHODIMP _put_Custom(HSTRING value);
	virtual STDMETHODIMP _get_ConversationId(HSTRING *result);
	virtual STDMETHODIMP _put_ConversationId(HSTRING value);
	virtual STDMETHODIMP _get_Participants(Foundation::Collections::IVector<HSTRING>* *result);
	virtual STDMETHODIMP _get_Kind(ChatConversationThreadingKind *result);
	virtual STDMETHODIMP _put_Kind(ChatConversationThreadingKind value);
};
template<typename X> struct IChatConversationThreadingInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatConversationThreadingInfo_adaptor::ContactId)->_get_ContactId(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatConversationThreadingInfo_adaptor::ContactId)->_put_ContactId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContactId;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatConversationThreadingInfo_adaptor::ConversationId)->_get_ConversationId(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatConversationThreadingInfo_adaptor::ConversationId)->_put_ConversationId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ConversationId;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatConversationThreadingInfo_adaptor::Custom)->_get_Custom(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatConversationThreadingInfo_adaptor::Custom)->_put_Custom(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Custom;
		struct : property {
			ChatConversationThreadingKind get() { ChatConversationThreadingKind result; hrcheck(enc(&IChatConversationThreadingInfo_adaptor::Kind)->_get_Kind(&result)); return result; }
			ChatConversationThreadingKind operator()() { return get(); }
			operator ChatConversationThreadingKind () { return get(); }
			void put(ChatConversationThreadingKind value) { hrcheck(enc(&IChatConversationThreadingInfo_adaptor::Kind)->_put_Kind(value)); }
			void operator=(ChatConversationThreadingKind value) { put(value); }
			void operator()(ChatConversationThreadingKind value) { put(value); }
		} Kind;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* result; hrcheck(enc(&IChatConversationThreadingInfo_adaptor::Participants)->_get_Participants(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Participants;
	};
	IChatConversationThreadingInfo_adaptor() {}
};
template<typename X> struct adapt<IChatConversationThreadingInfo, X> : Windows::ApplicationModel::Chat::IChatConversationThreadingInfo_adaptor<X> { typedef adapt IChatConversationThreadingInfo; };
struct IChatConversationThreadingInfo : IChatConversationThreadingInfo_raw, generate<IChatConversationThreadingInfo> {};

// ChatConversationThreadingInfo
template<typename X> struct statics<ChatConversationThreadingInfo, X> : X {
	typedef typename X::root_type ChatConversationThreadingInfo;
};
struct ChatConversationThreadingInfo : generate<ChatConversationThreadingInfo> {};

// IChatRecipientDeliveryInfo
struct IChatRecipientDeliveryInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_TransportAddress(HSTRING *result);
	virtual STDMETHODIMP _put_TransportAddress(HSTRING value);
	virtual STDMETHODIMP _get_DeliveryTime(Foundation::IReference<Foundation::DateTime>* *result);
	virtual STDMETHODIMP _put_DeliveryTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_ReadTime(Foundation::IReference<Foundation::DateTime>* *result);
	virtual STDMETHODIMP _put_ReadTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_TransportErrorCodeCategory(ChatTransportErrorCodeCategory *result);
	virtual STDMETHODIMP _get_TransportInterpretedErrorCode(ChatTransportInterpretedErrorCode *result);
	virtual STDMETHODIMP _get_TransportErrorCode(int *result);
	virtual STDMETHODIMP _get_IsErrorPermanent(bool *result);
	virtual STDMETHODIMP _get_Status(ChatMessageStatus *result);
};
template<typename X> struct IChatRecipientDeliveryInfo_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::DeliveryTime)->_get_DeliveryTime(&result)); return from_abi(result); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::DeliveryTime)->_put_DeliveryTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} DeliveryTime;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::IsErrorPermanent)->_get_IsErrorPermanent(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsErrorPermanent;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::ReadTime)->_get_ReadTime(&result)); return from_abi(result); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::ReadTime)->_put_ReadTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ReadTime;
		struct : property {
			ChatMessageStatus get() { ChatMessageStatus result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::Status)->_get_Status(&result)); return result; }
			ChatMessageStatus operator()() { return get(); }
			operator ChatMessageStatus () { return get(); }
		} Status;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::TransportAddress)->_get_TransportAddress(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::TransportAddress)->_put_TransportAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TransportAddress;
		struct : property {
			int get() { int result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::TransportErrorCode)->_get_TransportErrorCode(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} TransportErrorCode;
		struct : property {
			ChatTransportErrorCodeCategory get() { ChatTransportErrorCodeCategory result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::TransportErrorCodeCategory)->_get_TransportErrorCodeCategory(&result)); return result; }
			ChatTransportErrorCodeCategory operator()() { return get(); }
			operator ChatTransportErrorCodeCategory () { return get(); }
		} TransportErrorCodeCategory;
		struct : property {
			ChatTransportInterpretedErrorCode get() { ChatTransportInterpretedErrorCode result; hrcheck(enc(&IChatRecipientDeliveryInfo_adaptor::TransportInterpretedErrorCode)->_get_TransportInterpretedErrorCode(&result)); return result; }
			ChatTransportInterpretedErrorCode operator()() { return get(); }
			operator ChatTransportInterpretedErrorCode () { return get(); }
		} TransportInterpretedErrorCode;
	};
	IChatRecipientDeliveryInfo_adaptor() {}
};
template<typename X> struct adapt<IChatRecipientDeliveryInfo, X> : Windows::ApplicationModel::Chat::IChatRecipientDeliveryInfo_adaptor<X> { typedef adapt IChatRecipientDeliveryInfo; };
struct IChatRecipientDeliveryInfo : IChatRecipientDeliveryInfo_raw, generate<IChatRecipientDeliveryInfo> {};

// ChatRecipientDeliveryInfo
template<typename X> struct statics<ChatRecipientDeliveryInfo, X> : X {
	typedef typename X::root_type ChatRecipientDeliveryInfo;
};
struct ChatRecipientDeliveryInfo : generate<ChatRecipientDeliveryInfo> {};

// IChatQueryOptions
struct IChatQueryOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_SearchString(HSTRING *result);
	virtual STDMETHODIMP _put_SearchString(HSTRING value);
};
template<typename X> struct IChatQueryOptions_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatQueryOptions_adaptor::SearchString)->_get_SearchString(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatQueryOptions_adaptor::SearchString)->_put_SearchString(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SearchString;
	};
	IChatQueryOptions_adaptor() {}
};
template<typename X> struct adapt<IChatQueryOptions, X> : Windows::ApplicationModel::Chat::IChatQueryOptions_adaptor<X> { typedef adapt IChatQueryOptions; };
struct IChatQueryOptions : IChatQueryOptions_raw, generate<IChatQueryOptions> {};

// IChatMessageStore
struct IChatMessageStore_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeTracker(ChatMessageChangeTracker* *value);
	virtual STDMETHODIMP _DeleteMessageAsync(HSTRING localMessageId, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _DownloadMessageAsync(HSTRING localChatMessageId, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _GetMessageAsync(HSTRING localChatMessageId, Foundation::IAsyncOperation<ChatMessage*>* *value);
	virtual STDMETHODIMP _GetMessageReader1(ChatMessageReader* *value);
	virtual STDMETHODIMP _GetMessageReader2(Foundation::TimeSpan recentTimeLimit, ChatMessageReader* *value);
	virtual STDMETHODIMP _MarkMessageReadAsync(HSTRING localChatMessageId, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _RetrySendMessageAsync(HSTRING localChatMessageId, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _SendMessageAsync(ChatMessage* chatMessage, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _ValidateMessage(ChatMessage* chatMessage, ChatMessageValidationResult* *value);
	virtual STDMETHODIMP _add_MessageChanged(Foundation::TypedEventHandler<ChatMessageStore*, ChatMessageChangedEventArgs*>* value, Foundation::EventRegistrationToken *returnValue);
	virtual STDMETHODIMP _remove_MessageChanged(Foundation::EventRegistrationToken value);
};
template<typename X> struct IChatMessageStore_adaptor : X {
	union {
		struct : property {
			ptr<ChatMessageChangeTracker> get() { ChatMessageChangeTracker* value; hrcheck(enc(&IChatMessageStore_adaptor::ChangeTracker)->_get_ChangeTracker(&value)); return from_abi(value); }
			ptr<ChatMessageChangeTracker> operator()() { return get(); }
			operator ptr<ChatMessageChangeTracker> () { return get(); }
			ptr<ChatMessageChangeTracker> operator->() { return get(); }
		} ChangeTracker;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ChatMessageStore>, ptr<ChatMessageChangedEventArgs>>> value) { Foundation::EventRegistrationToken returnValue; hrcheck(enc(&IChatMessageStore_adaptor::MessageChanged)->_add_MessageChanged(to_abi(value), &returnValue)); return returnValue; }
			void operator-=(const Foundation::EventRegistrationToken& value) { hrcheck(enc(&IChatMessageStore_adaptor::MessageChanged)->_remove_MessageChanged(value)); }
		} MessageChanged;
	};
	ptr<Foundation::IAsyncAction> DeleteMessageAsync(hstring_ref localMessageId) { Foundation::IAsyncAction* value; hrcheck(X::get()->_DeleteMessageAsync(localMessageId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> DownloadMessageAsync(hstring_ref localChatMessageId) { Foundation::IAsyncAction* value; hrcheck(X::get()->_DownloadMessageAsync(localChatMessageId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ChatMessage>>> GetMessageAsync(hstring_ref localChatMessageId) { Foundation::IAsyncOperation<ChatMessage*>* value; hrcheck(X::get()->_GetMessageAsync(localChatMessageId, &value)); return from_abi(value); }
	ptr<ChatMessageReader> GetMessageReader() { ChatMessageReader* value; hrcheck(X::get()->_GetMessageReader1(&value)); return from_abi(value); }
	ptr<ChatMessageReader> GetMessageReader(const Foundation::TimeSpan& recentTimeLimit) { ChatMessageReader* value; hrcheck(X::get()->_GetMessageReader2(recentTimeLimit, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> MarkMessageReadAsync(hstring_ref localChatMessageId) { Foundation::IAsyncAction* value; hrcheck(X::get()->_MarkMessageReadAsync(localChatMessageId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> RetrySendMessageAsync(hstring_ref localChatMessageId) { Foundation::IAsyncAction* value; hrcheck(X::get()->_RetrySendMessageAsync(localChatMessageId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> SendMessageAsync(pptr<ChatMessage> chatMessage) { Foundation::IAsyncAction* value; hrcheck(X::get()->_SendMessageAsync(chatMessage, &value)); return from_abi(value); }
	ptr<ChatMessageValidationResult> ValidateMessage(pptr<ChatMessage> chatMessage) { ChatMessageValidationResult* value; hrcheck(X::get()->_ValidateMessage(chatMessage, &value)); return from_abi(value); }
	IChatMessageStore_adaptor() {}
};
template<typename X> struct adapt<IChatMessageStore, X> : Windows::ApplicationModel::Chat::IChatMessageStore_adaptor<X> { typedef adapt IChatMessageStore; };
struct IChatMessageStore : IChatMessageStore_raw, generate<IChatMessageStore> {};

// ChatMessageChangeTracker
template<typename X> struct statics<ChatMessageChangeTracker, X> : X {
	typedef typename X::root_type ChatMessageChangeTracker;
};
struct ChatMessageChangeTracker : generate<ChatMessageChangeTracker> {};

// IChatMessageReader2
struct IChatMessageReader2_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchWithCountAsync(int count, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessage*>*>* *result);
};
template<typename X> struct IChatMessageReader2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ChatMessage>>>>> ReadBatchAsync(int count) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessage*>*>* result; hrcheck(X::get()->_ReadBatchWithCountAsync(count, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IChatMessageReader2, X> : Windows::ApplicationModel::Chat::IChatMessageReader2_adaptor<X> { typedef adapt IChatMessageReader2; };
struct IChatMessageReader2 : IChatMessageReader2_raw, generate<IChatMessageReader2> {};

// IChatMessageReader
struct IChatMessageReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessage*>*>* *value);
};
template<typename X> struct IChatMessageReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ChatMessage>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessage*>*>* value; hrcheck(X::get()->_ReadBatchAsync(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IChatMessageReader, X> : Windows::ApplicationModel::Chat::IChatMessageReader_adaptor<X> { typedef adapt IChatMessageReader; };
struct IChatMessageReader : IChatMessageReader_raw, generate<IChatMessageReader> {};

// ChatMessageReader
template<typename X> struct statics<ChatMessageReader, X> : X {
	typedef typename X::root_type ChatMessageReader;
};
struct ChatMessageReader : generate<ChatMessageReader> {
	using IChatMessageReader::ReadBatchAsync;
	using IChatMessageReader2::ReadBatchAsync;
};

// ChatMessageValidationResult
template<typename X> struct statics<ChatMessageValidationResult, X> : X {
	typedef typename X::root_type ChatMessageValidationResult;
};
struct ChatMessageValidationResult : generate<ChatMessageValidationResult> {};

// IChatMessageStore3
struct IChatMessageStore3_raw : IInspectable {
	virtual STDMETHODIMP _GetMessageBySyncIdAsync(HSTRING syncId, Foundation::IAsyncOperation<ChatMessage*>* *result);
};
template<typename X> struct IChatMessageStore3_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<ChatMessage>>> GetMessageBySyncIdAsync(hstring_ref syncId) { Foundation::IAsyncOperation<ChatMessage*>* result; hrcheck(X::get()->_GetMessageBySyncIdAsync(syncId, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IChatMessageStore3, X> : Windows::ApplicationModel::Chat::IChatMessageStore3_adaptor<X> { typedef adapt IChatMessageStore3; };
struct IChatMessageStore3 : IChatMessageStore3_raw, generate<IChatMessageStore3> {};

// IChatMessageStore2
struct IChatMessageStore2_raw : IInspectable {
	virtual STDMETHODIMP _ForwardMessageAsync(HSTRING localChatMessageId, Foundation::Collections::IIterable<HSTRING>* addresses, Foundation::IAsyncOperation<ChatMessage*>* *result);
	virtual STDMETHODIMP _GetConversationAsync(HSTRING conversationId, Foundation::IAsyncOperation<ChatConversation*>* *result);
	virtual STDMETHODIMP _GetConversationForTransportsAsync(HSTRING conversationId, Foundation::Collections::IIterable<HSTRING>* transportIds, Foundation::IAsyncOperation<ChatConversation*>* *result);
	virtual STDMETHODIMP _GetConversationFromThreadingInfoAsync(ChatConversationThreadingInfo* threadingInfo, Foundation::IAsyncOperation<ChatConversation*>* *result);
	virtual STDMETHODIMP _GetConversationReader(ChatConversationReader* *result);
	virtual STDMETHODIMP _GetConversationForTransportsReader(Foundation::Collections::IIterable<HSTRING>* transportIds, ChatConversationReader* *result);
	virtual STDMETHODIMP _GetMessageByRemoteIdAsync(HSTRING transportId, HSTRING remoteId, Foundation::IAsyncOperation<ChatMessage*>* *result);
	virtual STDMETHODIMP _GetUnseenCountAsync(Foundation::IAsyncOperation<int>* *result);
	virtual STDMETHODIMP _GetUnseenCountForTransportsReaderAsync(Foundation::Collections::IIterable<HSTRING>* transportIds, Foundation::IAsyncOperation<int>* *result);
	virtual STDMETHODIMP _MarkAsSeenAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkAsSeenForTransportsAsync(Foundation::Collections::IIterable<HSTRING>* transportIds, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _GetSearchReader(ChatQueryOptions* value, ChatSearchReader* *result);
	virtual STDMETHODIMP _SaveMessageAsync(ChatMessage* chatMessage, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _TryCancelDownloadMessageAsync(HSTRING localChatMessageId, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryCancelSendMessageAsync(HSTRING localChatMessageId, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_StoreChanged(Foundation::TypedEventHandler<ChatMessageStore*, ChatMessageStoreChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StoreChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IChatMessageStore2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ChatMessageStore>, ptr<ChatMessageStoreChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IChatMessageStore2_adaptor::StoreChanged)->_add_StoreChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IChatMessageStore2_adaptor::StoreChanged)->_remove_StoreChanged(token)); }
		} StoreChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<ChatMessage>>> ForwardMessageAsync(hstring_ref localChatMessageId, pptr<Foundation::Collections::IIterable<hstring>> addresses) { Foundation::IAsyncOperation<ChatMessage*>* result; hrcheck(X::get()->_ForwardMessageAsync(localChatMessageId, to_abi(addresses), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<ChatConversation>>> GetConversationAsync(hstring_ref conversationId) { Foundation::IAsyncOperation<ChatConversation*>* result; hrcheck(X::get()->_GetConversationAsync(conversationId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<ChatConversation>>> GetConversationAsync(hstring_ref conversationId, pptr<Foundation::Collections::IIterable<hstring>> transportIds) { Foundation::IAsyncOperation<ChatConversation*>* result; hrcheck(X::get()->_GetConversationForTransportsAsync(conversationId, to_abi(transportIds), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<ChatConversation>>> GetConversationFromThreadingInfoAsync(pptr<ChatConversationThreadingInfo> threadingInfo) { Foundation::IAsyncOperation<ChatConversation*>* result; hrcheck(X::get()->_GetConversationFromThreadingInfoAsync(threadingInfo, &result)); return from_abi(result); }
	ptr<ChatConversationReader> GetConversationReader() { ChatConversationReader* result; hrcheck(X::get()->_GetConversationReader(&result)); return from_abi(result); }
	ptr<ChatConversationReader> GetConversationReader(pptr<Foundation::Collections::IIterable<hstring>> transportIds) { ChatConversationReader* result; hrcheck(X::get()->_GetConversationForTransportsReader(to_abi(transportIds), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<ChatMessage>>> GetMessageByRemoteIdAsync(hstring_ref transportId, hstring_ref remoteId) { Foundation::IAsyncOperation<ChatMessage*>* result; hrcheck(X::get()->_GetMessageByRemoteIdAsync(transportId, remoteId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<int>> GetUnseenCountAsync() { Foundation::IAsyncOperation<int>* result; hrcheck(X::get()->_GetUnseenCountAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<int>> GetUnseenCountAsync(pptr<Foundation::Collections::IIterable<hstring>> transportIds) { Foundation::IAsyncOperation<int>* result; hrcheck(X::get()->_GetUnseenCountForTransportsReaderAsync(to_abi(transportIds), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkAsSeenAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkAsSeenAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkAsSeenAsync(pptr<Foundation::Collections::IIterable<hstring>> transportIds) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkAsSeenForTransportsAsync(to_abi(transportIds), &result)); return from_abi(result); }
	ptr<ChatSearchReader> GetSearchReader(pptr<ChatQueryOptions> value) { ChatSearchReader* result; hrcheck(X::get()->_GetSearchReader(value, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SaveMessageAsync(pptr<ChatMessage> chatMessage) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveMessageAsync(chatMessage, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryCancelDownloadMessageAsync(hstring_ref localChatMessageId) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryCancelDownloadMessageAsync(localChatMessageId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryCancelSendMessageAsync(hstring_ref localChatMessageId) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryCancelSendMessageAsync(localChatMessageId, &result)); return from_abi(result); }
	IChatMessageStore2_adaptor() {}
};
template<typename X> struct adapt<IChatMessageStore2, X> : Windows::ApplicationModel::Chat::IChatMessageStore2_adaptor<X> { typedef adapt IChatMessageStore2; };
struct IChatMessageStore2 : IChatMessageStore2_raw, generate<IChatMessageStore2> {};

// ChatMessageStore
template<typename X> struct statics<ChatMessageStore, X> : X {
	typedef typename X::root_type ChatMessageStore;
};
struct ChatMessageStore : generate<ChatMessageStore> {
	using IChatMessageStore::GetMessageReader;
	using IChatMessageStore2::GetUnseenCountAsync;
	using IChatMessageStore2::GetConversationAsync;
	using IChatMessageStore2::MarkAsSeenAsync;
	using IChatMessageStore2::GetConversationReader;
};

// IChatMessageChangedEventArgs
struct IChatMessageChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(ChatMessageChangedDeferral* *result);
};
template<typename X> struct IChatMessageChangedEventArgs_adaptor : X {
	ptr<ChatMessageChangedDeferral> GetDeferral() { ChatMessageChangedDeferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IChatMessageChangedEventArgs, X> : Windows::ApplicationModel::Chat::IChatMessageChangedEventArgs_adaptor<X> { typedef adapt IChatMessageChangedEventArgs; };
struct IChatMessageChangedEventArgs : IChatMessageChangedEventArgs_raw, generate<IChatMessageChangedEventArgs> {};

// ChatMessageChangedEventArgs
template<typename X> struct statics<ChatMessageChangedEventArgs, X> : X {
	typedef typename X::root_type ChatMessageChangedEventArgs;
};
struct ChatMessageChangedEventArgs : generate<ChatMessageChangedEventArgs> {};

// IChatConversation2
struct IChatConversation2_raw : IInspectable {
	virtual STDMETHODIMP _get_CanModifyParticipants(bool *result);
	virtual STDMETHODIMP _put_CanModifyParticipants(bool value);
};
template<typename X> struct IChatConversation2_adaptor : X {
	union {
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatConversation2_adaptor::CanModifyParticipants)->_get_CanModifyParticipants(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IChatConversation2_adaptor::CanModifyParticipants)->_put_CanModifyParticipants(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanModifyParticipants;
	};
	IChatConversation2_adaptor() {}
};
template<typename X> struct adapt<IChatConversation2, X> : Windows::ApplicationModel::Chat::IChatConversation2_adaptor<X> { typedef adapt IChatConversation2; };
struct IChatConversation2 : IChatConversation2_raw, generate<IChatConversation2> {};

// IChatConversation
struct IChatConversation_raw : IInspectable {
	virtual STDMETHODIMP _get_HasUnreadMessages(bool *result);
	virtual STDMETHODIMP _get_Id(HSTRING *result);
	virtual STDMETHODIMP _get_Subject(HSTRING *result);
	virtual STDMETHODIMP _put_Subject(HSTRING value);
	virtual STDMETHODIMP _get_IsConversationMuted(bool *result);
	virtual STDMETHODIMP _put_IsConversationMuted(bool value);
	virtual STDMETHODIMP _get_MostRecentMessageId(HSTRING *result);
	virtual STDMETHODIMP _get_Participants(Foundation::Collections::IVector<HSTRING>* *result);
	virtual STDMETHODIMP _get_ThreadingInfo(ChatConversationThreadingInfo* *result);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _GetMessageReader(ChatMessageReader* *result);
	virtual STDMETHODIMP _MarkAllMessagesAsReadAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkMessagesAsReadAsync(Foundation::DateTime value, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _NotifyLocalParticipantComposing(HSTRING transportId, HSTRING participantAddress, bool isComposing);
	virtual STDMETHODIMP _NotifyRemoteParticipantComposing(HSTRING transportId, HSTRING participantAddress, bool isComposing);
	virtual STDMETHODIMP _add_RemoteParticipantComposingChanged(Foundation::TypedEventHandler<ChatConversation*, RemoteParticipantComposingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemoteParticipantComposingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IChatConversation_adaptor : X {
	union {
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatConversation_adaptor::HasUnreadMessages)->_get_HasUnreadMessages(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasUnreadMessages;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatConversation_adaptor::Id)->_get_Id(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatConversation_adaptor::IsConversationMuted)->_get_IsConversationMuted(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IChatConversation_adaptor::IsConversationMuted)->_put_IsConversationMuted(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsConversationMuted;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatConversation_adaptor::MostRecentMessageId)->_get_MostRecentMessageId(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MostRecentMessageId;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* result; hrcheck(enc(&IChatConversation_adaptor::Participants)->_get_Participants(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Participants;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatConversation_adaptor::Subject)->_get_Subject(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IChatConversation_adaptor::Subject)->_put_Subject(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subject;
		struct : property {
			ptr<ChatConversationThreadingInfo> get() { ChatConversationThreadingInfo* result; hrcheck(enc(&IChatConversation_adaptor::ThreadingInfo)->_get_ThreadingInfo(&result)); return from_abi(result); }
			ptr<ChatConversationThreadingInfo> operator()() { return get(); }
			operator ptr<ChatConversationThreadingInfo> () { return get(); }
			ptr<ChatConversationThreadingInfo> operator->() { return get(); }
		} ThreadingInfo;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ChatConversation>, ptr<RemoteParticipantComposingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IChatConversation_adaptor::RemoteParticipantComposingChanged)->_add_RemoteParticipantComposingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IChatConversation_adaptor::RemoteParticipantComposingChanged)->_remove_RemoteParticipantComposingChanged(token)); }
		} RemoteParticipantComposingChanged;
	};
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteAsync(&result)); return from_abi(result); }
	ptr<ChatMessageReader> GetMessageReader() { ChatMessageReader* result; hrcheck(X::get()->_GetMessageReader(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkMessagesAsReadAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkAllMessagesAsReadAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkMessagesAsReadAsync(const Foundation::DateTime& value) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkMessagesAsReadAsync(value, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveAsync(&result)); return from_abi(result); }
	void NotifyLocalParticipantComposing(hstring_ref transportId, hstring_ref participantAddress, bool isComposing) { hrcheck(X::get()->_NotifyLocalParticipantComposing(transportId, participantAddress, isComposing)); }
	void NotifyRemoteParticipantComposing(hstring_ref transportId, hstring_ref participantAddress, bool isComposing) { hrcheck(X::get()->_NotifyRemoteParticipantComposing(transportId, participantAddress, isComposing)); }
	IChatConversation_adaptor() {}
};
template<typename X> struct adapt<IChatConversation, X> : Windows::ApplicationModel::Chat::IChatConversation_adaptor<X> { typedef adapt IChatConversation; };
struct IChatConversation : IChatConversation_raw, generate<IChatConversation> {};

// ChatConversation
template<typename X> struct statics<ChatConversation, X> : X {
	typedef typename X::root_type ChatConversation;
};
struct ChatConversation : generate<ChatConversation> {
	using IChatConversation::MarkMessagesAsReadAsync;
};

// IChatConversationReader
struct IChatConversationReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatConversation*>*>* *result);
	virtual STDMETHODIMP _ReadBatchWithCountAsync(int count, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatConversation*>*>* *result);
};
template<typename X> struct IChatConversationReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ChatConversation>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatConversation*>*>* result; hrcheck(X::get()->_ReadBatchAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ChatConversation>>>>> ReadBatchAsync(int count) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatConversation*>*>* result; hrcheck(X::get()->_ReadBatchWithCountAsync(count, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IChatConversationReader, X> : Windows::ApplicationModel::Chat::IChatConversationReader_adaptor<X> { typedef adapt IChatConversationReader; };
struct IChatConversationReader : IChatConversationReader_raw, generate<IChatConversationReader> {};

// ChatConversationReader
template<typename X> struct statics<ChatConversationReader, X> : X {
	typedef typename X::root_type ChatConversationReader;
};
struct ChatConversationReader : generate<ChatConversationReader> {
	using IChatConversationReader::ReadBatchAsync;
};

// ChatQueryOptions
template<typename X> struct statics<ChatQueryOptions, X> : X {
	typedef typename X::root_type ChatQueryOptions;
};
struct ChatQueryOptions : generate<ChatQueryOptions> {};

// IChatSearchReader
struct IChatSearchReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<IChatItem*>*>* *result);
	virtual STDMETHODIMP _ReadBatchWithCountAsync(int count, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<IChatItem*>*>* *result);
};
template<typename X> struct IChatSearchReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<IChatItem>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<IChatItem*>*>* result; hrcheck(X::get()->_ReadBatchAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<IChatItem>>>>> ReadBatchAsync(int count) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<IChatItem*>*>* result; hrcheck(X::get()->_ReadBatchWithCountAsync(count, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IChatSearchReader, X> : Windows::ApplicationModel::Chat::IChatSearchReader_adaptor<X> { typedef adapt IChatSearchReader; };
struct IChatSearchReader : IChatSearchReader_raw, generate<IChatSearchReader> {};

// ChatSearchReader
template<typename X> struct statics<ChatSearchReader, X> : X {
	typedef typename X::root_type ChatSearchReader;
};
struct ChatSearchReader : generate<ChatSearchReader> {
	using IChatSearchReader::ReadBatchAsync;
};

// IChatMessageStoreChangedEventArgs
struct IChatMessageStoreChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *result);
	virtual STDMETHODIMP _get_Kind(ChatStoreChangedEventKind *result);
};
template<typename X> struct IChatMessageStoreChangedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IChatMessageStoreChangedEventArgs_adaptor::Id)->_get_Id(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			ChatStoreChangedEventKind get() { ChatStoreChangedEventKind result; hrcheck(enc(&IChatMessageStoreChangedEventArgs_adaptor::Kind)->_get_Kind(&result)); return result; }
			ChatStoreChangedEventKind operator()() { return get(); }
			operator ChatStoreChangedEventKind () { return get(); }
		} Kind;
	};
	IChatMessageStoreChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IChatMessageStoreChangedEventArgs, X> : Windows::ApplicationModel::Chat::IChatMessageStoreChangedEventArgs_adaptor<X> { typedef adapt IChatMessageStoreChangedEventArgs; };
struct IChatMessageStoreChangedEventArgs : IChatMessageStoreChangedEventArgs_raw, generate<IChatMessageStoreChangedEventArgs> {};

// ChatMessageStoreChangedEventArgs
template<typename X> struct statics<ChatMessageStoreChangedEventArgs, X> : X {
	typedef typename X::root_type ChatMessageStoreChangedEventArgs;
};
struct ChatMessageStoreChangedEventArgs : generate<ChatMessageStoreChangedEventArgs> {};

// IChatMessageChangedDeferral
struct IChatMessageChangedDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IChatMessageChangedDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IChatMessageChangedDeferral, X> : Windows::ApplicationModel::Chat::IChatMessageChangedDeferral_adaptor<X> { typedef adapt IChatMessageChangedDeferral; };
struct IChatMessageChangedDeferral : IChatMessageChangedDeferral_raw, generate<IChatMessageChangedDeferral> {};

// ChatMessageChangedDeferral
template<typename X> struct statics<ChatMessageChangedDeferral, X> : X {
	typedef typename X::root_type ChatMessageChangedDeferral;
};
struct ChatMessageChangedDeferral : generate<ChatMessageChangedDeferral> {};

// IChatMessageBlockingStatic
struct IChatMessageBlockingStatic : IInspectable {
	virtual STDMETHODIMP _MarkMessageAsBlockedAsync(HSTRING localChatMessageId, bool blocked, Foundation::IAsyncAction* *value);
};

// IChatMessageManagerStatic
struct IChatMessageManagerStatic : IInspectable {
	virtual STDMETHODIMP _GetTransportsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessageTransport*>*>* *value);
	virtual STDMETHODIMP _RequestStoreAsync(Foundation::IAsyncOperation<ChatMessageStore*>* *value);
	virtual STDMETHODIMP _ShowComposeSmsMessageAsync(ChatMessage* message, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _ShowSmsSettings();
};

// ChatMessageTransport
template<typename X> struct statics<ChatMessageTransport, X> : X {
	typedef typename X::root_type ChatMessageTransport;
};
struct ChatMessageTransport : generate<ChatMessageTransport> {};

// IChatMessageManager2Statics
struct IChatMessageManager2Statics : IInspectable {
	virtual STDMETHODIMP _RegisterTransportAsync(Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _GetTransportAsync(HSTRING transportId, Foundation::IAsyncOperation<ChatMessageTransport*>* *result);
};

// IChatMessageManagerStatics3
struct IChatMessageManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _RequestSyncManagerAsync(Foundation::IAsyncOperation<ChatSyncManager*>* *result);
};

// IChatSyncManager
struct IChatSyncManager_raw : IInspectable {
	virtual STDMETHODIMP _get_Configuration(ChatSyncConfiguration* *result);
	virtual STDMETHODIMP _AssociateAccountAsync(Security::Credentials::WebAccount* webAccount, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _UnassociateAccountAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _IsAccountAssociated(Security::Credentials::WebAccount* webAccount, bool *result);
	virtual STDMETHODIMP _StartSync();
	virtual STDMETHODIMP _SetConfigurationAsync(ChatSyncConfiguration* configuration, Foundation::IAsyncAction* *result);
};
template<typename X> struct IChatSyncManager_adaptor : X {
	union {
		struct : property {
			ptr<ChatSyncConfiguration> get() { ChatSyncConfiguration* result; hrcheck(enc(&IChatSyncManager_adaptor::Configuration)->_get_Configuration(&result)); return from_abi(result); }
			ptr<ChatSyncConfiguration> operator()() { return get(); }
			operator ptr<ChatSyncConfiguration> () { return get(); }
			ptr<ChatSyncConfiguration> operator->() { return get(); }
		} Configuration;
	};
	ptr<Foundation::IAsyncAction> AssociateAccountAsync(pptr<Security::Credentials::WebAccount> webAccount) { Foundation::IAsyncAction* result; hrcheck(X::get()->_AssociateAccountAsync(webAccount, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> UnassociateAccountAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_UnassociateAccountAsync(&result)); return from_abi(result); }
	bool IsAccountAssociated(pptr<Security::Credentials::WebAccount> webAccount) { bool result; hrcheck(X::get()->_IsAccountAssociated(webAccount, &result)); return result; }
	void StartSync() { hrcheck(X::get()->_StartSync()); }
	ptr<Foundation::IAsyncAction> SetConfigurationAsync(pptr<ChatSyncConfiguration> configuration) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SetConfigurationAsync(configuration, &result)); return from_abi(result); }
	IChatSyncManager_adaptor() {}
};
template<typename X> struct adapt<IChatSyncManager, X> : Windows::ApplicationModel::Chat::IChatSyncManager_adaptor<X> { typedef adapt IChatSyncManager; };
struct IChatSyncManager : IChatSyncManager_raw, generate<IChatSyncManager> {};

// ChatSyncManager
template<typename X> struct statics<ChatSyncManager, X> : X {
	typedef typename X::root_type ChatSyncManager;
};
struct ChatSyncManager : generate<ChatSyncManager> {};

// IChatMessageNotificationTriggerDetails
struct IChatMessageNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_ChatMessage(Chat::ChatMessage* *value);
};
template<typename X> struct IChatMessageNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Chat::ChatMessage> get() { Chat::ChatMessage* value; hrcheck(enc(&IChatMessageNotificationTriggerDetails_adaptor::ChatMessage)->_get_ChatMessage(&value)); return from_abi(value); }
			ptr<Chat::ChatMessage> operator()() { return get(); }
			operator ptr<Chat::ChatMessage> () { return get(); }
			ptr<Chat::ChatMessage> operator->() { return get(); }
		} ChatMessage;
	};
	IChatMessageNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IChatMessageNotificationTriggerDetails, X> : Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails_adaptor<X> { typedef adapt IChatMessageNotificationTriggerDetails; };
struct IChatMessageNotificationTriggerDetails : IChatMessageNotificationTriggerDetails_raw, generate<IChatMessageNotificationTriggerDetails> {};

// IChatMessageNotificationTriggerDetails2
struct IChatMessageNotificationTriggerDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_ShouldDisplayToast(bool *result);
	virtual STDMETHODIMP _get_ShouldUpdateDetailText(bool *result);
	virtual STDMETHODIMP _get_ShouldUpdateBadge(bool *result);
	virtual STDMETHODIMP _get_ShouldUpdateActionCenter(bool *result);
};
template<typename X> struct IChatMessageNotificationTriggerDetails2_adaptor : X {
	union {
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessageNotificationTriggerDetails2_adaptor::ShouldDisplayToast)->_get_ShouldDisplayToast(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ShouldDisplayToast;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessageNotificationTriggerDetails2_adaptor::ShouldUpdateActionCenter)->_get_ShouldUpdateActionCenter(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ShouldUpdateActionCenter;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessageNotificationTriggerDetails2_adaptor::ShouldUpdateBadge)->_get_ShouldUpdateBadge(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ShouldUpdateBadge;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatMessageNotificationTriggerDetails2_adaptor::ShouldUpdateDetailText)->_get_ShouldUpdateDetailText(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ShouldUpdateDetailText;
	};
	IChatMessageNotificationTriggerDetails2_adaptor() {}
};
template<typename X> struct adapt<IChatMessageNotificationTriggerDetails2, X> : Windows::ApplicationModel::Chat::IChatMessageNotificationTriggerDetails2_adaptor<X> { typedef adapt IChatMessageNotificationTriggerDetails2; };
struct IChatMessageNotificationTriggerDetails2 : IChatMessageNotificationTriggerDetails2_raw, generate<IChatMessageNotificationTriggerDetails2> {};

// IChatCapabilities
struct IChatCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_IsOnline(bool *result);
	virtual STDMETHODIMP _get_IsChatCapable(bool *result);
	virtual STDMETHODIMP _get_IsFileTransferCapable(bool *result);
	virtual STDMETHODIMP _get_IsGeoLocationPushCapable(bool *result);
	virtual STDMETHODIMP _get_IsIntegratedMessagingCapable(bool *result);
};
template<typename X> struct IChatCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatCapabilities_adaptor::IsChatCapable)->_get_IsChatCapable(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsChatCapable;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatCapabilities_adaptor::IsFileTransferCapable)->_get_IsFileTransferCapable(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsFileTransferCapable;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatCapabilities_adaptor::IsGeoLocationPushCapable)->_get_IsGeoLocationPushCapable(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsGeoLocationPushCapable;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatCapabilities_adaptor::IsIntegratedMessagingCapable)->_get_IsIntegratedMessagingCapable(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsIntegratedMessagingCapable;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatCapabilities_adaptor::IsOnline)->_get_IsOnline(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOnline;
	};
	IChatCapabilities_adaptor() {}
};
template<typename X> struct adapt<IChatCapabilities, X> : Windows::ApplicationModel::Chat::IChatCapabilities_adaptor<X> { typedef adapt IChatCapabilities; };
struct IChatCapabilities : IChatCapabilities_raw, generate<IChatCapabilities> {};

// IChatCapabilitiesManagerStatics
struct IChatCapabilitiesManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetCachedCapabilitiesAsync(HSTRING address, Foundation::IAsyncOperation<ChatCapabilities*>* *result);
	virtual STDMETHODIMP _GetCapabilitiesFromNetworkAsync(HSTRING address, Foundation::IAsyncOperation<ChatCapabilities*>* *result);
};

// ChatCapabilities
template<typename X> struct statics<ChatCapabilities, X> : X {
	typedef typename X::root_type ChatCapabilities;
};
struct ChatCapabilities : generate<ChatCapabilities> {};

// IRemoteParticipantComposingChangedEventArgs
struct IRemoteParticipantComposingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_TransportId(HSTRING *result);
	virtual STDMETHODIMP _get_ParticipantAddress(HSTRING *result);
	virtual STDMETHODIMP _get_IsComposing(bool *result);
};
template<typename X> struct IRemoteParticipantComposingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool result; hrcheck(enc(&IRemoteParticipantComposingChangedEventArgs_adaptor::IsComposing)->_get_IsComposing(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsComposing;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IRemoteParticipantComposingChangedEventArgs_adaptor::ParticipantAddress)->_get_ParticipantAddress(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ParticipantAddress;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IRemoteParticipantComposingChangedEventArgs_adaptor::TransportId)->_get_TransportId(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TransportId;
	};
	IRemoteParticipantComposingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteParticipantComposingChangedEventArgs, X> : Windows::ApplicationModel::Chat::IRemoteParticipantComposingChangedEventArgs_adaptor<X> { typedef adapt IRemoteParticipantComposingChangedEventArgs; };
struct IRemoteParticipantComposingChangedEventArgs : IRemoteParticipantComposingChangedEventArgs_raw, generate<IRemoteParticipantComposingChangedEventArgs> {};

// RemoteParticipantComposingChangedEventArgs
template<typename X> struct statics<RemoteParticipantComposingChangedEventArgs, X> : X {
	typedef typename X::root_type RemoteParticipantComposingChangedEventArgs;
};
struct RemoteParticipantComposingChangedEventArgs : generate<RemoteParticipantComposingChangedEventArgs> {};

// IChatSyncConfiguration
struct IChatSyncConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSyncEnabled(bool *result);
	virtual STDMETHODIMP _put_IsSyncEnabled(bool value);
	virtual STDMETHODIMP _get_RestoreHistorySpan(ChatRestoreHistorySpan *result);
	virtual STDMETHODIMP _put_RestoreHistorySpan(ChatRestoreHistorySpan value);
};
template<typename X> struct IChatSyncConfiguration_adaptor : X {
	union {
		struct : property {
			bool get() { bool result; hrcheck(enc(&IChatSyncConfiguration_adaptor::IsSyncEnabled)->_get_IsSyncEnabled(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IChatSyncConfiguration_adaptor::IsSyncEnabled)->_put_IsSyncEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSyncEnabled;
		struct : property {
			ChatRestoreHistorySpan get() { ChatRestoreHistorySpan result; hrcheck(enc(&IChatSyncConfiguration_adaptor::RestoreHistorySpan)->_get_RestoreHistorySpan(&result)); return result; }
			ChatRestoreHistorySpan operator()() { return get(); }
			operator ChatRestoreHistorySpan () { return get(); }
			void put(ChatRestoreHistorySpan value) { hrcheck(enc(&IChatSyncConfiguration_adaptor::RestoreHistorySpan)->_put_RestoreHistorySpan(value)); }
			void operator=(ChatRestoreHistorySpan value) { put(value); }
			void operator()(ChatRestoreHistorySpan value) { put(value); }
		} RestoreHistorySpan;
	};
	IChatSyncConfiguration_adaptor() {}
};
template<typename X> struct adapt<IChatSyncConfiguration, X> : Windows::ApplicationModel::Chat::IChatSyncConfiguration_adaptor<X> { typedef adapt IChatSyncConfiguration; };
struct IChatSyncConfiguration : IChatSyncConfiguration_raw, generate<IChatSyncConfiguration> {};

// ChatSyncConfiguration
template<typename X> struct statics<ChatSyncConfiguration, X> : X {
	typedef typename X::root_type ChatSyncConfiguration;
};
struct ChatSyncConfiguration : generate<ChatSyncConfiguration> {};

// IRcsServiceKindSupportedChangedEventArgs
struct IRcsServiceKindSupportedChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceKind(RcsServiceKind *result);
};
template<typename X> struct IRcsServiceKindSupportedChangedEventArgs_adaptor : X {
	union {
		struct : property {
			RcsServiceKind get() { RcsServiceKind result; hrcheck(enc(&IRcsServiceKindSupportedChangedEventArgs_adaptor::ServiceKind)->_get_ServiceKind(&result)); return result; }
			RcsServiceKind operator()() { return get(); }
			operator RcsServiceKind () { return get(); }
		} ServiceKind;
	};
	IRcsServiceKindSupportedChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRcsServiceKindSupportedChangedEventArgs, X> : Windows::ApplicationModel::Chat::IRcsServiceKindSupportedChangedEventArgs_adaptor<X> { typedef adapt IRcsServiceKindSupportedChangedEventArgs; };
struct IRcsServiceKindSupportedChangedEventArgs : IRcsServiceKindSupportedChangedEventArgs_raw, generate<IRcsServiceKindSupportedChangedEventArgs> {};

// IRcsManagerStatics
struct IRcsManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetEndUserMessageManager(RcsEndUserMessageManager* *result);
	virtual STDMETHODIMP _GetTransportsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<RcsTransport*>*>* *value);
	virtual STDMETHODIMP _GetTransportAsync(HSTRING transportId, Foundation::IAsyncOperation<RcsTransport*>* *result);
	virtual STDMETHODIMP _LeaveConversationAsync(ChatConversation* conversation, Foundation::IAsyncAction* *value);
};

// IRcsEndUserMessageManager
struct IRcsEndUserMessageManager_raw : IInspectable {
	virtual STDMETHODIMP _add_MessageAvailableChanged(Foundation::TypedEventHandler<RcsEndUserMessageManager*, RcsEndUserMessageAvailableEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MessageAvailableChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRcsEndUserMessageManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RcsEndUserMessageManager>, ptr<RcsEndUserMessageAvailableEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRcsEndUserMessageManager_adaptor::MessageAvailableChanged)->_add_MessageAvailableChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRcsEndUserMessageManager_adaptor::MessageAvailableChanged)->_remove_MessageAvailableChanged(token)); }
		} MessageAvailableChanged;
	};
	IRcsEndUserMessageManager_adaptor() {}
};
template<typename X> struct adapt<IRcsEndUserMessageManager, X> : Windows::ApplicationModel::Chat::IRcsEndUserMessageManager_adaptor<X> { typedef adapt IRcsEndUserMessageManager; };
struct IRcsEndUserMessageManager : IRcsEndUserMessageManager_raw, generate<IRcsEndUserMessageManager> {};

// RcsEndUserMessageManager
template<typename X> struct statics<RcsEndUserMessageManager, X> : X {
	typedef typename X::root_type RcsEndUserMessageManager;
};
struct RcsEndUserMessageManager : generate<RcsEndUserMessageManager> {};

// IRcsTransport
struct IRcsTransport_raw : IInspectable {
	virtual STDMETHODIMP _get_ExtendedProperties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
	virtual STDMETHODIMP _get_IsActive(bool *value);
	virtual STDMETHODIMP _get_TransportFriendlyName(HSTRING *value);
	virtual STDMETHODIMP _get_TransportId(HSTRING *value);
	virtual STDMETHODIMP _get_Configuration(RcsTransportConfiguration* *result);
	virtual STDMETHODIMP _IsStoreAndForwardEnabled(RcsServiceKind serviceKind, bool *result);
	virtual STDMETHODIMP _IsServiceKindSupported(RcsServiceKind serviceKind, bool *result);
	virtual STDMETHODIMP _add_ServiceKindSupportedChanged(Foundation::TypedEventHandler<RcsTransport*, RcsServiceKindSupportedChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ServiceKindSupportedChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRcsTransport_adaptor : X {
	union {
		struct : property {
			ptr<RcsTransportConfiguration> get() { RcsTransportConfiguration* result; hrcheck(enc(&IRcsTransport_adaptor::Configuration)->_get_Configuration(&result)); return from_abi(result); }
			ptr<RcsTransportConfiguration> operator()() { return get(); }
			operator ptr<RcsTransportConfiguration> () { return get(); }
			ptr<RcsTransportConfiguration> operator->() { return get(); }
		} Configuration;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IRcsTransport_adaptor::ExtendedProperties)->_get_ExtendedProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} ExtendedProperties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRcsTransport_adaptor::IsActive)->_get_IsActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsActive;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRcsTransport_adaptor::TransportFriendlyName)->_get_TransportFriendlyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TransportFriendlyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRcsTransport_adaptor::TransportId)->_get_TransportId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TransportId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RcsTransport>, ptr<RcsServiceKindSupportedChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRcsTransport_adaptor::ServiceKindSupportedChanged)->_add_ServiceKindSupportedChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRcsTransport_adaptor::ServiceKindSupportedChanged)->_remove_ServiceKindSupportedChanged(token)); }
		} ServiceKindSupportedChanged;
	};
	bool IsStoreAndForwardEnabled(RcsServiceKind serviceKind) { bool result; hrcheck(X::get()->_IsStoreAndForwardEnabled(serviceKind, &result)); return result; }
	bool IsServiceKindSupported(RcsServiceKind serviceKind) { bool result; hrcheck(X::get()->_IsServiceKindSupported(serviceKind, &result)); return result; }
	IRcsTransport_adaptor() {}
};
template<typename X> struct adapt<IRcsTransport, X> : Windows::ApplicationModel::Chat::IRcsTransport_adaptor<X> { typedef adapt IRcsTransport; };
struct IRcsTransport : IRcsTransport_raw, generate<IRcsTransport> {};

// RcsTransport
template<typename X> struct statics<RcsTransport, X> : X {
	typedef typename X::root_type RcsTransport;
};
struct RcsTransport : generate<RcsTransport> {};

// IRcsTransportConfiguration
struct IRcsTransportConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxAttachmentCount(int *result);
	virtual STDMETHODIMP _get_MaxMessageSizeInKilobytes(int *result);
	virtual STDMETHODIMP _get_MaxGroupMessageSizeInKilobytes(int *result);
	virtual STDMETHODIMP _get_MaxRecipientCount(int *result);
	virtual STDMETHODIMP _get_MaxFileSizeInKilobytes(int *result);
	virtual STDMETHODIMP _get_WarningFileSizeInKilobytes(int *result);
};
template<typename X> struct IRcsTransportConfiguration_adaptor : X {
	union {
		struct : property {
			int get() { int result; hrcheck(enc(&IRcsTransportConfiguration_adaptor::MaxAttachmentCount)->_get_MaxAttachmentCount(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxAttachmentCount;
		struct : property {
			int get() { int result; hrcheck(enc(&IRcsTransportConfiguration_adaptor::MaxFileSizeInKilobytes)->_get_MaxFileSizeInKilobytes(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxFileSizeInKilobytes;
		struct : property {
			int get() { int result; hrcheck(enc(&IRcsTransportConfiguration_adaptor::MaxGroupMessageSizeInKilobytes)->_get_MaxGroupMessageSizeInKilobytes(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxGroupMessageSizeInKilobytes;
		struct : property {
			int get() { int result; hrcheck(enc(&IRcsTransportConfiguration_adaptor::MaxMessageSizeInKilobytes)->_get_MaxMessageSizeInKilobytes(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxMessageSizeInKilobytes;
		struct : property {
			int get() { int result; hrcheck(enc(&IRcsTransportConfiguration_adaptor::MaxRecipientCount)->_get_MaxRecipientCount(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MaxRecipientCount;
		struct : property {
			int get() { int result; hrcheck(enc(&IRcsTransportConfiguration_adaptor::WarningFileSizeInKilobytes)->_get_WarningFileSizeInKilobytes(&result)); return result; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} WarningFileSizeInKilobytes;
	};
	IRcsTransportConfiguration_adaptor() {}
};
template<typename X> struct adapt<IRcsTransportConfiguration, X> : Windows::ApplicationModel::Chat::IRcsTransportConfiguration_adaptor<X> { typedef adapt IRcsTransportConfiguration; };
struct IRcsTransportConfiguration : IRcsTransportConfiguration_raw, generate<IRcsTransportConfiguration> {};

// RcsTransportConfiguration
template<typename X> struct statics<RcsTransportConfiguration, X> : X {
	typedef typename X::root_type RcsTransportConfiguration;
};
struct RcsTransportConfiguration : generate<RcsTransportConfiguration> {};

// RcsServiceKindSupportedChangedEventArgs
template<typename X> struct statics<RcsServiceKindSupportedChangedEventArgs, X> : X {
	typedef typename X::root_type RcsServiceKindSupportedChangedEventArgs;
};
struct RcsServiceKindSupportedChangedEventArgs : generate<RcsServiceKindSupportedChangedEventArgs> {};

// IRcsEndUserMessageAvailableEventArgs
struct IRcsEndUserMessageAvailableEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsMessageAvailable(bool *result);
	virtual STDMETHODIMP _get_Message(RcsEndUserMessage* *result);
};
template<typename X> struct IRcsEndUserMessageAvailableEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool result; hrcheck(enc(&IRcsEndUserMessageAvailableEventArgs_adaptor::IsMessageAvailable)->_get_IsMessageAvailable(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMessageAvailable;
		struct : property {
			ptr<RcsEndUserMessage> get() { RcsEndUserMessage* result; hrcheck(enc(&IRcsEndUserMessageAvailableEventArgs_adaptor::Message)->_get_Message(&result)); return from_abi(result); }
			ptr<RcsEndUserMessage> operator()() { return get(); }
			operator ptr<RcsEndUserMessage> () { return get(); }
			ptr<RcsEndUserMessage> operator->() { return get(); }
		} Message;
	};
	IRcsEndUserMessageAvailableEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRcsEndUserMessageAvailableEventArgs, X> : Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableEventArgs_adaptor<X> { typedef adapt IRcsEndUserMessageAvailableEventArgs; };
struct IRcsEndUserMessageAvailableEventArgs : IRcsEndUserMessageAvailableEventArgs_raw, generate<IRcsEndUserMessageAvailableEventArgs> {};

// RcsEndUserMessageAvailableEventArgs
template<typename X> struct statics<RcsEndUserMessageAvailableEventArgs, X> : X {
	typedef typename X::root_type RcsEndUserMessageAvailableEventArgs;
};
struct RcsEndUserMessageAvailableEventArgs : generate<RcsEndUserMessageAvailableEventArgs> {};

// IRcsEndUserMessageAction
struct IRcsEndUserMessageAction_raw : IInspectable {
	virtual STDMETHODIMP _get_Label(HSTRING *result);
};
template<typename X> struct IRcsEndUserMessageAction_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IRcsEndUserMessageAction_adaptor::Label)->_get_Label(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Label;
	};
	IRcsEndUserMessageAction_adaptor() {}
};
template<typename X> struct adapt<IRcsEndUserMessageAction, X> : Windows::ApplicationModel::Chat::IRcsEndUserMessageAction_adaptor<X> { typedef adapt IRcsEndUserMessageAction; };
struct IRcsEndUserMessageAction : IRcsEndUserMessageAction_raw, generate<IRcsEndUserMessageAction> {};

// IRcsEndUserMessage
struct IRcsEndUserMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_TransportId(HSTRING *result);
	virtual STDMETHODIMP _get_Title(HSTRING *result);
	virtual STDMETHODIMP _get_Text(HSTRING *result);
	virtual STDMETHODIMP _get_IsPinRequired(bool *result);
	virtual STDMETHODIMP _get_Actions(Foundation::Collections::IVectorView<RcsEndUserMessageAction*>* *result);
	virtual STDMETHODIMP _SendResponseAsync(RcsEndUserMessageAction* action, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _SendResponseWithPinAsync(RcsEndUserMessageAction* action, HSTRING pin, Foundation::IAsyncAction* *result);
};
template<typename X> struct IRcsEndUserMessage_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<RcsEndUserMessageAction>>> get() { Foundation::Collections::IVectorView<RcsEndUserMessageAction*>* result; hrcheck(enc(&IRcsEndUserMessage_adaptor::Actions)->_get_Actions(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVectorView<ptr<RcsEndUserMessageAction>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<RcsEndUserMessageAction>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<RcsEndUserMessageAction>>> operator->() { return get(); }
		} Actions;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IRcsEndUserMessage_adaptor::IsPinRequired)->_get_IsPinRequired(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPinRequired;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IRcsEndUserMessage_adaptor::Text)->_get_Text(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IRcsEndUserMessage_adaptor::Title)->_get_Title(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IRcsEndUserMessage_adaptor::TransportId)->_get_TransportId(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TransportId;
	};
	ptr<Foundation::IAsyncAction> SendResponseAsync(pptr<RcsEndUserMessageAction> action) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SendResponseAsync(action, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SendResponseWithPinAsync(pptr<RcsEndUserMessageAction> action, hstring_ref pin) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SendResponseWithPinAsync(action, pin, &result)); return from_abi(result); }
	IRcsEndUserMessage_adaptor() {}
};
template<typename X> struct adapt<IRcsEndUserMessage, X> : Windows::ApplicationModel::Chat::IRcsEndUserMessage_adaptor<X> { typedef adapt IRcsEndUserMessage; };
struct IRcsEndUserMessage : IRcsEndUserMessage_raw, generate<IRcsEndUserMessage> {};

// RcsEndUserMessageAction
template<typename X> struct statics<RcsEndUserMessageAction, X> : X {
	typedef typename X::root_type RcsEndUserMessageAction;
};
struct RcsEndUserMessageAction : generate<RcsEndUserMessageAction> {};

// RcsEndUserMessage
template<typename X> struct statics<RcsEndUserMessage, X> : X {
	typedef typename X::root_type RcsEndUserMessage;
};
struct RcsEndUserMessage : generate<RcsEndUserMessage> {};

// IRcsEndUserMessageAvailableTriggerDetails
struct IRcsEndUserMessageAvailableTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
};
template<typename X> struct IRcsEndUserMessageAvailableTriggerDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRcsEndUserMessageAvailableTriggerDetails_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRcsEndUserMessageAvailableTriggerDetails_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IRcsEndUserMessageAvailableTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IRcsEndUserMessageAvailableTriggerDetails, X> : Windows::ApplicationModel::Chat::IRcsEndUserMessageAvailableTriggerDetails_adaptor<X> { typedef adapt IRcsEndUserMessageAvailableTriggerDetails; };
struct IRcsEndUserMessageAvailableTriggerDetails : IRcsEndUserMessageAvailableTriggerDetails_raw, generate<IRcsEndUserMessageAvailableTriggerDetails> {};

// ChatMessageManager
template<typename> struct ChatMessageManager_statics {
	static ptr<Foundation::IAsyncOperation<ptr<ChatSyncManager>>> RequestSyncManagerAsync() { Foundation::IAsyncOperation<ChatSyncManager*>* result; hrcheck(get_activation_factory<ChatMessageManager, IChatMessageManagerStatics3>()->_RequestSyncManagerAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<hstring>> RegisterTransportAsync() { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(get_activation_factory<ChatMessageManager, IChatMessageManager2Statics>()->_RegisterTransportAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<ChatMessageTransport>>> GetTransportAsync(hstring_ref transportId) { Foundation::IAsyncOperation<ChatMessageTransport*>* result; hrcheck(get_activation_factory<ChatMessageManager, IChatMessageManager2Statics>()->_GetTransportAsync(transportId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ChatMessageTransport>>>>> GetTransportsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ChatMessageTransport*>*>* value; hrcheck(get_activation_factory<ChatMessageManager, IChatMessageManagerStatic>()->_GetTransportsAsync(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<ChatMessageStore>>> RequestStoreAsync() { Foundation::IAsyncOperation<ChatMessageStore*>* value; hrcheck(get_activation_factory<ChatMessageManager, IChatMessageManagerStatic>()->_RequestStoreAsync(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncAction> ShowComposeSmsMessageAsync(pptr<ChatMessage> message) { Foundation::IAsyncAction* value; hrcheck(get_activation_factory<ChatMessageManager, IChatMessageManagerStatic>()->_ShowComposeSmsMessageAsync(message, &value)); return from_abi(value); }
	static void ShowSmsSettings() { hrcheck(get_activation_factory<ChatMessageManager, IChatMessageManagerStatic>()->_ShowSmsSettings()); }
};

template<typename X> struct statics<ChatMessageManager, X> : X, Windows::ApplicationModel::Chat::ChatMessageManager_statics<void> {
	typedef typename X::root_type ChatMessageManager;
};
struct ChatMessageManager : generate<ChatMessageManager> {};

// ChatMessageNotificationTriggerDetails
template<typename X> struct statics<ChatMessageNotificationTriggerDetails, X> : X {
	typedef typename X::root_type ChatMessageNotificationTriggerDetails;
};
struct ChatMessageNotificationTriggerDetails : generate<ChatMessageNotificationTriggerDetails> {};

// ChatMessageBlocking
template<typename> struct ChatMessageBlocking_statics {
	static ptr<Foundation::IAsyncAction> MarkMessageAsBlockedAsync(hstring_ref localChatMessageId, bool blocked) { Foundation::IAsyncAction* value; hrcheck(get_activation_factory<ChatMessageBlocking, IChatMessageBlockingStatic>()->_MarkMessageAsBlockedAsync(localChatMessageId, blocked, &value)); return from_abi(value); }
};

template<typename X> struct statics<ChatMessageBlocking, X> : X, Windows::ApplicationModel::Chat::ChatMessageBlocking_statics<void> {
	typedef typename X::root_type ChatMessageBlocking;
};
struct ChatMessageBlocking : generate<ChatMessageBlocking> {};

// ChatCapabilitiesManager
template<typename> struct ChatCapabilitiesManager_statics {
	static ptr<Foundation::IAsyncOperation<ptr<ChatCapabilities>>> GetCachedCapabilitiesAsync(hstring_ref address) { Foundation::IAsyncOperation<ChatCapabilities*>* result; hrcheck(get_activation_factory<ChatCapabilitiesManager, IChatCapabilitiesManagerStatics>()->_GetCachedCapabilitiesAsync(address, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<ChatCapabilities>>> GetCapabilitiesFromNetworkAsync(hstring_ref address) { Foundation::IAsyncOperation<ChatCapabilities*>* result; hrcheck(get_activation_factory<ChatCapabilitiesManager, IChatCapabilitiesManagerStatics>()->_GetCapabilitiesFromNetworkAsync(address, &result)); return from_abi(result); }
};

template<typename X> struct statics<ChatCapabilitiesManager, X> : X, Windows::ApplicationModel::Chat::ChatCapabilitiesManager_statics<void> {
	typedef typename X::root_type ChatCapabilitiesManager;
};
struct ChatCapabilitiesManager : generate<ChatCapabilitiesManager> {};

// RcsManager
template<typename> struct RcsManager_statics {
	static ptr<RcsEndUserMessageManager> GetEndUserMessageManager() { RcsEndUserMessageManager* result; hrcheck(get_activation_factory<RcsManager, IRcsManagerStatics>()->_GetEndUserMessageManager(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<RcsTransport>>>>> GetTransportsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<RcsTransport*>*>* value; hrcheck(get_activation_factory<RcsManager, IRcsManagerStatics>()->_GetTransportsAsync(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<RcsTransport>>> GetTransportAsync(hstring_ref transportId) { Foundation::IAsyncOperation<RcsTransport*>* result; hrcheck(get_activation_factory<RcsManager, IRcsManagerStatics>()->_GetTransportAsync(transportId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> LeaveConversationAsync(pptr<ChatConversation> conversation) { Foundation::IAsyncAction* value; hrcheck(get_activation_factory<RcsManager, IRcsManagerStatics>()->_LeaveConversationAsync(conversation, &value)); return from_abi(value); }
};

template<typename X> struct statics<RcsManager, X> : X, Windows::ApplicationModel::Chat::RcsManager_statics<void> {
	typedef typename X::root_type RcsManager;
};
struct RcsManager : generate<RcsManager> {};

// RcsEndUserMessageAvailableTriggerDetails
template<typename X> struct statics<RcsEndUserMessageAvailableTriggerDetails, X> : X {
	typedef typename X::root_type RcsEndUserMessageAvailableTriggerDetails;
};
struct RcsEndUserMessageAvailableTriggerDetails : generate<RcsEndUserMessageAvailableTriggerDetails> {};
}}}
} // namespace iso_winrt
