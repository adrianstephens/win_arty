#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Resources

#include "Windows.UI.Xaml.Resources.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Resources::ICustomXamlResourceLoader> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Resources::CustomXamlResourceLoader> : class_type<Platform::Object, Windows::UI::Xaml::Resources::ICustomXamlResourceLoader, Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides>, composer_type<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderFactory> {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides> { define_guid(0xF851E991, 0xAF02, 0x46E8, 0x9A, 0xF8, 0x42, 0x7B, 0x7E, 0xBF, 0xE9, 0xF8);};
template<> struct uuid<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderStatics> { define_guid(0x224FF617, 0xE4DC, 0x4C27, 0xAD, 0x32, 0xDB, 0x93, 0xD5, 0xD0, 0xE5, 0xDA);};
template<> struct uuid<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderFactory> { define_guid(0x5BFD7E49, 0x7886, 0x44F3, 0x8E, 0xD3, 0x6F, 0xEC, 0x4, 0x63, 0xED, 0x69);};
template<> struct uuid<Windows::UI::Xaml::Resources::ICustomXamlResourceLoader> { define_guid(0x511A84AB, 0x4A88, 0x419F, 0x85, 0x2E, 0x54, 0x8, 0x3B, 0x90, 0xB0, 0x78);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Resources {

// ICustomXamlResourceLoaderOverrides
struct ICustomXamlResourceLoaderOverrides_raw : IInspectable {
	virtual STDMETHODIMP _GetResource(HSTRING resourceId, HSTRING objectType, HSTRING propertyName, HSTRING propertyType, IInspectable* *returnValue) = 0;
};
template<typename X> struct ICustomXamlResourceLoaderOverrides_adaptor : X {
	object GetResource(hstring_ref resourceId, hstring_ref objectType, hstring_ref propertyName, hstring_ref propertyType) { IInspectable* returnValue; hrcheck(X::get()->_GetResource(resourceId, objectType, propertyName, propertyType, &returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<ICustomXamlResourceLoaderOverrides, X> : Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides_adaptor<X> { typedef adapt ICustomXamlResourceLoaderOverrides; };
template<typename X> struct ICustomXamlResourceLoaderOverrides_unadaptor : X {
	STDMETHODIMP _GetResource(HSTRING resourceId, HSTRING objectType, HSTRING propertyName, HSTRING propertyType, IInspectable* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetResource(resourceId, objectType, propertyName, propertyType)); }); }
};
template<typename X> struct unadapt<ICustomXamlResourceLoaderOverrides, X> : Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides_unadaptor<X> {};
struct ICustomXamlResourceLoaderOverrides : ICustomXamlResourceLoaderOverrides_raw, generate<ICustomXamlResourceLoaderOverrides> {};

// ICustomXamlResourceLoaderStatics
struct ICustomXamlResourceLoaderStatics : IInspectable {
	virtual STDMETHODIMP _get_Current(CustomXamlResourceLoader* *value);
	virtual STDMETHODIMP _put_Current(CustomXamlResourceLoader* value);
};

// ICustomXamlResourceLoaderFactory
struct ICustomXamlResourceLoaderFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, CustomXamlResourceLoader* *instance);
};

// ICustomXamlResourceLoader
struct ICustomXamlResourceLoader : IInspectable, generate<ICustomXamlResourceLoader> {};

// CustomXamlResourceLoader
template<typename> struct CustomXamlResourceLoader_statics {
	static struct _Current : property {
		ptr<CustomXamlResourceLoader> get() { CustomXamlResourceLoader* value; hrcheck(get_activation_factory<CustomXamlResourceLoader, ICustomXamlResourceLoaderStatics>()->_get_Current(&value)); return from_abi(value); }
		ptr<CustomXamlResourceLoader> operator()() { return get(); }
		operator ptr<CustomXamlResourceLoader> () { return get(); }
		ptr<CustomXamlResourceLoader> operator->() { return get(); }
		void put(pptr<CustomXamlResourceLoader> value) { hrcheck(get_activation_factory<CustomXamlResourceLoader, ICustomXamlResourceLoaderStatics>()->_put_Current(value)); }
		void operator=(pptr<CustomXamlResourceLoader> value) { put(value); }
		void operator()(pptr<CustomXamlResourceLoader> value) { put(value); }
	} Current;
	static CustomXamlResourceLoader *activate(object_ref outer, IInspectable* *inner) { CustomXamlResourceLoader *instance; hrcheck(get_activation_factory<CustomXamlResourceLoader, ICustomXamlResourceLoaderFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};
template<typename X> typename CustomXamlResourceLoader_statics<X>::_Current CustomXamlResourceLoader_statics<X>::Current;

template<typename X> struct statics<CustomXamlResourceLoader, X> : X, Windows::UI::Xaml::Resources::CustomXamlResourceLoader_statics<void> {
	using Windows::UI::Xaml::Resources::CustomXamlResourceLoader_statics<void>::activate;
	typedef typename X::root_type CustomXamlResourceLoader;
};
struct CustomXamlResourceLoader : generate<CustomXamlResourceLoader> {};
}}}}
} // namespace iso_winrt
