#pragma once
// generated by isopod tools
// namespaces:
// Windows.Graphics.Holographic

#include "Windows.Graphics.Holographic.0.h"
#include "Windows.Perception.Spatial.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Graphics.DirectX.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IVector;
}}
namespace Graphics { namespace DirectX { namespace Direct3D11 {
struct IDirect3DSurface;
struct IDirect3DDevice;
}}}
namespace Perception {
struct PerceptionTimestamp;
}
namespace UI { namespace Core {
struct CoreWindow;
}}}

// defs

template<> struct def<Windows::Graphics::Holographic::HolographicFramePresentResult> : enum_type<int> {};
template<> struct def<Windows::Graphics::Holographic::HolographicFramePresentWaitBehavior> : enum_type<int> {};
template<> struct def<Windows::Graphics::Holographic::HolographicStereoTransform> : value_type<Windows::Foundation::Numerics::Matrix4x4, Windows::Foundation::Numerics::Matrix4x4> {};
template<> struct def<Windows::Graphics::Holographic::HolographicAdapterId> : value_type<unsigned, int> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCamera> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicSpaceCameraAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCamera4> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCamera2> : interface_type<Windows::Graphics::Holographic::IHolographicCamera> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCamera3> : interface_type<Windows::Graphics::Holographic::IHolographicCamera2> {};
template<> struct def<Windows::Graphics::Holographic::HolographicCamera> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicCamera, Windows::Graphics::Holographic::IHolographicCamera4, Windows::Graphics::Holographic::IHolographicCamera3> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicSpaceCameraRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicSpace> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicSpaceStatics3> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicSpaceStatics2> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicSpaceStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicSpaceUserPresence> : enum_type<int> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicSpace2> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicSpace> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicSpace, Windows::Graphics::Holographic::IHolographicSpace2> {};
template<> struct def<Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicSpaceCameraAddedEventArgs> {};
template<> struct def<Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicSpaceCameraRemovedEventArgs> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicFrame> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicFrame2> : interface_type<Windows::Graphics::Holographic::IHolographicFrame> {};
template<> struct def<Windows::Graphics::Holographic::HolographicFrame> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicFrame, Windows::Graphics::Holographic::IHolographicFrame2> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicFramePresentationMonitor> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Graphics::Holographic::HolographicFramePresentationMonitor> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicFramePresentationMonitor> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCameraPose> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCameraPose2> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicFramePrediction> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicCameraPose> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicCameraPose, Windows::Graphics::Holographic::IHolographicCameraPose2> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicReprojectionMode> : enum_type<int> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters2> : interface_type<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters3> : interface_type<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters2> {};
template<> struct def<Windows::Graphics::Holographic::HolographicCameraRenderingParameters> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicCameraRenderingParameters, Windows::Graphics::Holographic::IHolographicCameraRenderingParameters3> {};
template<> struct def<Windows::Graphics::Holographic::HolographicFramePrediction> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicFramePrediction> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicQuadLayerFactory> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicQuadLayer> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicQuadLayer> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicQuadLayer, Windows::Foundation::IClosable>, custom_activators {};
template<> struct def<Windows::Graphics::Holographic::IHolographicQuadLayerUpdateParameters> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicQuadLayerUpdateParameters> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicQuadLayerUpdateParameters> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicFramePresentationReport> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicFramePresentationReport> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicFramePresentationReport> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicCameraViewportParameters> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicCameraViewportParameters> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicCameraViewportParameters> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicDisplayStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicDisplay2> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::IHolographicDisplay> : interface_type<> {};
template<> struct def<Windows::Graphics::Holographic::HolographicDisplay> : class_type<Platform::Object, Windows::Graphics::Holographic::IHolographicDisplay, Windows::Graphics::Holographic::IHolographicDisplay2> {};

// uuids

template<> struct uuid<Windows::Graphics::Holographic::IHolographicCamera> { define_guid(0xE4E98445, 0x9BED, 0x4980, 0x9B, 0xA0, 0xE8, 0x76, 0x80, 0xD1, 0xCB, 0x74);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicSpaceCameraAddedEventArgs> { define_guid(0x58F1DA35, 0xBBB3, 0x3C8F, 0x99, 0x3D, 0x6C, 0x80, 0xE7, 0xFE, 0xB9, 0x9F);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCamera4> { define_guid(0x9A2531D6, 0x4723, 0x4F39, 0xA9, 0xA5, 0x9D, 0x5, 0x18, 0x1D, 0x9B, 0x44);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCamera2> { define_guid(0xB55B9F1A, 0xBA8C, 0x4F84, 0xAD, 0x79, 0x2E, 0x7E, 0x1E, 0x24, 0x50, 0xF3);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCamera3> { define_guid(0x45AA4FB3, 0x7B59, 0x524E, 0x4A, 0x3F, 0x4A, 0x6A, 0xD6, 0x65, 0x4, 0x77);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicSpaceCameraRemovedEventArgs> { define_guid(0x805444A8, 0xF2AE, 0x322E, 0x8D, 0xA9, 0x83, 0x6A, 0xA, 0x95, 0xA4, 0xC1);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicSpace> { define_guid(0x4380DBA6, 0x5E78, 0x434F, 0x80, 0x7C, 0x34, 0x33, 0xD1, 0xEF, 0xE8, 0xB7);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicSpaceStatics3> { define_guid(0x3B00DE3D, 0xB1A3, 0x4DFE, 0x8E, 0x79, 0xFE, 0xC5, 0x90, 0x9E, 0x6D, 0xF8);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicSpaceStatics2> { define_guid(0xE777088, 0x75FC, 0x48AF, 0x87, 0x58, 0x6, 0x52, 0xF6, 0xF0, 0x7C, 0x59);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicSpaceStatics> { define_guid(0x364E6064, 0xC8F2, 0x3BA1, 0x83, 0x91, 0x66, 0xB8, 0x48, 0x9E, 0x67, 0xFD);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicSpace2> { define_guid(0x4F81A9A8, 0xB7FF, 0x4883, 0x98, 0x27, 0x7D, 0x67, 0x72, 0x87, 0xEA, 0x70);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicFrame> { define_guid(0xC6988EB6, 0xA8B9, 0x3054, 0xA6, 0xEB, 0xD6, 0x24, 0xB6, 0x53, 0x63, 0x75);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicFrame2> { define_guid(0x283F37BF, 0x3BF2, 0x5E91, 0x66, 0x33, 0x87, 0x5, 0x74, 0xE6, 0xF2, 0x17);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicFramePresentationMonitor> { define_guid(0xCA87256C, 0x6FAE, 0x428E, 0xBB, 0x83, 0x25, 0xDF, 0xEE, 0x51, 0x13, 0x6B);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCameraPose> { define_guid(0xD7D7E30, 0x12DE, 0x45BD, 0x91, 0x2B, 0xC7, 0xF6, 0x56, 0x15, 0x99, 0xD1);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCameraPose2> { define_guid(0x232BE073, 0x5D2D, 0x4560, 0x81, 0x4E, 0x26, 0x97, 0xC4, 0xFC, 0xE1, 0x6B);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicFramePrediction> { define_guid(0x520F4DE1, 0x5C0A, 0x4E79, 0xA8, 0x1E, 0x6A, 0xBE, 0x2, 0xBB, 0x27, 0x39);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters> { define_guid(0x8EAC2ED1, 0x5BF4, 0x4E16, 0x82, 0x36, 0xAE, 0x8, 0x0, 0xC1, 0x1D, 0xD);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters2> { define_guid(0x261270E3, 0xB696, 0x4634, 0x94, 0xD6, 0xBE, 0x6, 0x81, 0x64, 0x35, 0x99);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCameraRenderingParameters3> { define_guid(0xB1AA513F, 0x136D, 0x4B06, 0xB9, 0xD4, 0xE4, 0xB9, 0x14, 0xCD, 0x6, 0x83);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicQuadLayerFactory> { define_guid(0xA67538F3, 0x5A14, 0x5A10, 0x48, 0x9A, 0x45, 0x50, 0x65, 0xB3, 0x7B, 0x76);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicQuadLayer> { define_guid(0x903460C9, 0xC9D9, 0x5D5C, 0x41, 0xAC, 0xA2, 0xD5, 0xAB, 0xF, 0xD3, 0x31);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicQuadLayerUpdateParameters> { define_guid(0x2B0EA3B0, 0x798D, 0x5BCA, 0x55, 0xC2, 0x2C, 0xC, 0x76, 0x2E, 0xBB, 0x8);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicFramePresentationReport> { define_guid(0x80BAF614, 0xF2F4, 0x4C8A, 0x8D, 0xE3, 0x6, 0x5C, 0x78, 0xF6, 0xD5, 0xDE);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicCameraViewportParameters> { define_guid(0x80CDF3F7, 0x842A, 0x41E1, 0x93, 0xED, 0x56, 0x92, 0xAB, 0x1F, 0xBB, 0x10);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicDisplayStatics> { define_guid(0xCB374983, 0xE7B0, 0x4841, 0x83, 0x55, 0x3A, 0xE5, 0xB5, 0x36, 0xE9, 0xA4);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicDisplay2> { define_guid(0x75AC3F82, 0xE755, 0x436C, 0x8D, 0x96, 0x4D, 0x32, 0xD1, 0x31, 0x47, 0x3E);};
template<> struct uuid<Windows::Graphics::Holographic::IHolographicDisplay> { define_guid(0x9ACEA414, 0x1D9F, 0x4090, 0xA3, 0x88, 0x90, 0xC0, 0x6F, 0x6E, 0xAE, 0x9C);};

// types

namespace Windows { namespace Graphics { namespace Holographic {

// IHolographicCamera
struct IHolographicCamera_raw : IInspectable {
	virtual STDMETHODIMP _get_RenderTargetSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_ViewportScaleFactor(double *value);
	virtual STDMETHODIMP _put_ViewportScaleFactor(double value);
	virtual STDMETHODIMP _get_IsStereo(bool *value);
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _SetNearPlaneDistance(double value);
	virtual STDMETHODIMP _SetFarPlaneDistance(double value);
};
template<typename X> struct IHolographicCamera_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHolographicCamera_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHolographicCamera_adaptor::IsStereo)->_get_IsStereo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStereo;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IHolographicCamera_adaptor::RenderTargetSize)->_get_RenderTargetSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} RenderTargetSize;
		struct : property {
			double get() { double value; hrcheck(enc(&IHolographicCamera_adaptor::ViewportScaleFactor)->_get_ViewportScaleFactor(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IHolographicCamera_adaptor::ViewportScaleFactor)->_put_ViewportScaleFactor(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} ViewportScaleFactor;
	};
	void SetNearPlaneDistance(double value) { hrcheck(X::get()->_SetNearPlaneDistance(value)); }
	void SetFarPlaneDistance(double value) { hrcheck(X::get()->_SetFarPlaneDistance(value)); }
	IHolographicCamera_adaptor() {}
};
template<typename X> struct adapt<IHolographicCamera, X> : Windows::Graphics::Holographic::IHolographicCamera_adaptor<X> { typedef adapt IHolographicCamera; };
struct IHolographicCamera : IHolographicCamera_raw, generate<IHolographicCamera> {};

// IHolographicSpaceCameraAddedEventArgs
struct IHolographicSpaceCameraAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Camera(HolographicCamera* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IHolographicSpaceCameraAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<HolographicCamera> get() { HolographicCamera* value; hrcheck(enc(&IHolographicSpaceCameraAddedEventArgs_adaptor::Camera)->_get_Camera(&value)); return from_abi(value); }
			ptr<HolographicCamera> operator()() { return get(); }
			operator ptr<HolographicCamera> () { return get(); }
			ptr<HolographicCamera> operator->() { return get(); }
		} Camera;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IHolographicSpaceCameraAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IHolographicSpaceCameraAddedEventArgs, X> : Windows::Graphics::Holographic::IHolographicSpaceCameraAddedEventArgs_adaptor<X> { typedef adapt IHolographicSpaceCameraAddedEventArgs; };
struct IHolographicSpaceCameraAddedEventArgs : IHolographicSpaceCameraAddedEventArgs_raw, generate<IHolographicSpaceCameraAddedEventArgs> {};

// IHolographicCamera4
struct IHolographicCamera4_raw : IInspectable {
	virtual STDMETHODIMP _get_CanOverrideViewport(bool *value);
};
template<typename X> struct IHolographicCamera4_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHolographicCamera4_adaptor::CanOverrideViewport)->_get_CanOverrideViewport(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanOverrideViewport;
	};
	IHolographicCamera4_adaptor() {}
};
template<typename X> struct adapt<IHolographicCamera4, X> : Windows::Graphics::Holographic::IHolographicCamera4_adaptor<X> { typedef adapt IHolographicCamera4; };
struct IHolographicCamera4 : IHolographicCamera4_raw, generate<IHolographicCamera4> {};

// IHolographicCamera2
struct IHolographicCamera2_raw : IInspectable {
	virtual STDMETHODIMP _get_LeftViewportParameters(HolographicCameraViewportParameters* *result);
	virtual STDMETHODIMP _get_RightViewportParameters(HolographicCameraViewportParameters* *result);
	virtual STDMETHODIMP _get_Display(HolographicDisplay* *result);
};
template<typename X> struct IHolographicCamera2_adaptor : X {
	union {
		struct : property {
			ptr<HolographicDisplay> get() { HolographicDisplay* result; hrcheck(enc(&IHolographicCamera2_adaptor::Display)->_get_Display(&result)); return from_abi(result); }
			ptr<HolographicDisplay> operator()() { return get(); }
			operator ptr<HolographicDisplay> () { return get(); }
			ptr<HolographicDisplay> operator->() { return get(); }
		} Display;
		struct : property {
			ptr<HolographicCameraViewportParameters> get() { HolographicCameraViewportParameters* result; hrcheck(enc(&IHolographicCamera2_adaptor::LeftViewportParameters)->_get_LeftViewportParameters(&result)); return from_abi(result); }
			ptr<HolographicCameraViewportParameters> operator()() { return get(); }
			operator ptr<HolographicCameraViewportParameters> () { return get(); }
			ptr<HolographicCameraViewportParameters> operator->() { return get(); }
		} LeftViewportParameters;
		struct : property {
			ptr<HolographicCameraViewportParameters> get() { HolographicCameraViewportParameters* result; hrcheck(enc(&IHolographicCamera2_adaptor::RightViewportParameters)->_get_RightViewportParameters(&result)); return from_abi(result); }
			ptr<HolographicCameraViewportParameters> operator()() { return get(); }
			operator ptr<HolographicCameraViewportParameters> () { return get(); }
			ptr<HolographicCameraViewportParameters> operator->() { return get(); }
		} RightViewportParameters;
	};
	IHolographicCamera2_adaptor() {}
};
template<typename X> struct adapt<IHolographicCamera2, X> : Windows::Graphics::Holographic::IHolographicCamera2_adaptor<X> { typedef adapt IHolographicCamera2; };
struct IHolographicCamera2 : IHolographicCamera2_raw, generate<IHolographicCamera2> {};

// IHolographicCamera3
struct IHolographicCamera3_raw : IInspectable {
	virtual STDMETHODIMP _get_IsPrimaryLayerEnabled(bool *value);
	virtual STDMETHODIMP _put_IsPrimaryLayerEnabled(bool value);
	virtual STDMETHODIMP _get_MaxQuadLayerCount(unsigned *value);
	virtual STDMETHODIMP _get_QuadLayers(Foundation::Collections::IVector<HolographicQuadLayer*>* *value);
};
template<typename X> struct IHolographicCamera3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHolographicCamera3_adaptor::IsPrimaryLayerEnabled)->_get_IsPrimaryLayerEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IHolographicCamera3_adaptor::IsPrimaryLayerEnabled)->_put_IsPrimaryLayerEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPrimaryLayerEnabled;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHolographicCamera3_adaptor::MaxQuadLayerCount)->_get_MaxQuadLayerCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxQuadLayerCount;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<HolographicQuadLayer>>> get() { Foundation::Collections::IVector<HolographicQuadLayer*>* value; hrcheck(enc(&IHolographicCamera3_adaptor::QuadLayers)->_get_QuadLayers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<HolographicQuadLayer>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<HolographicQuadLayer>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<HolographicQuadLayer>>> operator->() { return get(); }
		} QuadLayers;
	};
	IHolographicCamera3_adaptor() {}
};
template<typename X> struct adapt<IHolographicCamera3, X> : Windows::Graphics::Holographic::IHolographicCamera3_adaptor<X> { typedef adapt IHolographicCamera3; };
struct IHolographicCamera3 : IHolographicCamera3_raw, generate<IHolographicCamera3> {};

// HolographicCamera
template<typename X> struct statics<HolographicCamera, X> : X {
	typedef typename X::root_type HolographicCamera;
};
struct HolographicCamera : generate<HolographicCamera> {};

// IHolographicSpaceCameraRemovedEventArgs
struct IHolographicSpaceCameraRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Camera(HolographicCamera* *value);
};
template<typename X> struct IHolographicSpaceCameraRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<HolographicCamera> get() { HolographicCamera* value; hrcheck(enc(&IHolographicSpaceCameraRemovedEventArgs_adaptor::Camera)->_get_Camera(&value)); return from_abi(value); }
			ptr<HolographicCamera> operator()() { return get(); }
			operator ptr<HolographicCamera> () { return get(); }
			ptr<HolographicCamera> operator->() { return get(); }
		} Camera;
	};
	IHolographicSpaceCameraRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IHolographicSpaceCameraRemovedEventArgs, X> : Windows::Graphics::Holographic::IHolographicSpaceCameraRemovedEventArgs_adaptor<X> { typedef adapt IHolographicSpaceCameraRemovedEventArgs; };
struct IHolographicSpaceCameraRemovedEventArgs : IHolographicSpaceCameraRemovedEventArgs_raw, generate<IHolographicSpaceCameraRemovedEventArgs> {};

// IHolographicSpace
struct IHolographicSpace_raw : IInspectable {
	virtual STDMETHODIMP _get_PrimaryAdapterId(HolographicAdapterId *value);
	virtual STDMETHODIMP _SetDirect3D11Device(DirectX::Direct3D11::IDirect3DDevice* value);
	virtual STDMETHODIMP _add_CameraAdded(Foundation::TypedEventHandler<HolographicSpace*, HolographicSpaceCameraAddedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_CameraAdded(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_CameraRemoved(Foundation::TypedEventHandler<HolographicSpace*, HolographicSpaceCameraRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_CameraRemoved(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _CreateNextFrame(HolographicFrame* *value);
};
template<typename X> struct IHolographicSpace_adaptor : X {
	union {
		struct : property {
			HolographicAdapterId get() { HolographicAdapterId value; hrcheck(enc(&IHolographicSpace_adaptor::PrimaryAdapterId)->_get_PrimaryAdapterId(&value)); return value; }
			HolographicAdapterId operator()() { return get(); }
			operator HolographicAdapterId () { return get(); }
		} PrimaryAdapterId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HolographicSpace>, ptr<HolographicSpaceCameraAddedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IHolographicSpace_adaptor::CameraAdded)->_add_CameraAdded(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IHolographicSpace_adaptor::CameraAdded)->_remove_CameraAdded(cookie)); }
		} CameraAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HolographicSpace>, ptr<HolographicSpaceCameraRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IHolographicSpace_adaptor::CameraRemoved)->_add_CameraRemoved(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IHolographicSpace_adaptor::CameraRemoved)->_remove_CameraRemoved(cookie)); }
		} CameraRemoved;
	};
	void SetDirect3D11Device(pptr<DirectX::Direct3D11::IDirect3DDevice> value) { hrcheck(X::get()->_SetDirect3D11Device(value)); }
	ptr<HolographicFrame> CreateNextFrame() { HolographicFrame* value; hrcheck(X::get()->_CreateNextFrame(&value)); return from_abi(value); }
	IHolographicSpace_adaptor() {}
};
template<typename X> struct adapt<IHolographicSpace, X> : Windows::Graphics::Holographic::IHolographicSpace_adaptor<X> { typedef adapt IHolographicSpace; };
struct IHolographicSpace : IHolographicSpace_raw, generate<IHolographicSpace> {};

// IHolographicSpaceStatics3
struct IHolographicSpaceStatics3 : IInspectable {
	virtual STDMETHODIMP _get_IsConfigured(bool *value);
};

// IHolographicSpaceStatics2
struct IHolographicSpaceStatics2 : IInspectable {
	virtual STDMETHODIMP _get_IsSupported(bool *value);
	virtual STDMETHODIMP _get_IsAvailable(bool *value);
	virtual STDMETHODIMP _add_IsAvailableChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsAvailableChanged(Foundation::EventRegistrationToken token);
};

// IHolographicSpaceStatics
struct IHolographicSpaceStatics : IInspectable {
	virtual STDMETHODIMP _CreateForCoreWindow(UI::Core::CoreWindow* window, HolographicSpace* *value);
};

// IHolographicSpace2
struct IHolographicSpace2_raw : IInspectable {
	virtual STDMETHODIMP _get_UserPresence(HolographicSpaceUserPresence *value);
	virtual STDMETHODIMP _add_UserPresenceChanged(Foundation::TypedEventHandler<HolographicSpace*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_UserPresenceChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _WaitForNextFrameReady();
	virtual STDMETHODIMP _WaitForNextFrameReadyWithHeadStart(Foundation::TimeSpan requestedHeadStartDuration);
	virtual STDMETHODIMP _CreateFramePresentationMonitor(unsigned maxQueuedReports, HolographicFramePresentationMonitor* *result);
};
template<typename X> struct IHolographicSpace2_adaptor : X {
	union {
		struct : property {
			HolographicSpaceUserPresence get() { HolographicSpaceUserPresence value; hrcheck(enc(&IHolographicSpace2_adaptor::UserPresence)->_get_UserPresence(&value)); return value; }
			HolographicSpaceUserPresence operator()() { return get(); }
			operator HolographicSpaceUserPresence () { return get(); }
		} UserPresence;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HolographicSpace>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHolographicSpace2_adaptor::UserPresenceChanged)->_add_UserPresenceChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHolographicSpace2_adaptor::UserPresenceChanged)->_remove_UserPresenceChanged(token)); }
		} UserPresenceChanged;
	};
	void WaitForNextFrameReady() { hrcheck(X::get()->_WaitForNextFrameReady()); }
	void WaitForNextFrameReadyWithHeadStart(const Foundation::TimeSpan& requestedHeadStartDuration) { hrcheck(X::get()->_WaitForNextFrameReadyWithHeadStart(requestedHeadStartDuration)); }
	ptr<HolographicFramePresentationMonitor> CreateFramePresentationMonitor(unsigned maxQueuedReports) { HolographicFramePresentationMonitor* result; hrcheck(X::get()->_CreateFramePresentationMonitor(maxQueuedReports, &result)); return from_abi(result); }
	IHolographicSpace2_adaptor() {}
};
template<typename X> struct adapt<IHolographicSpace2, X> : Windows::Graphics::Holographic::IHolographicSpace2_adaptor<X> { typedef adapt IHolographicSpace2; };
struct IHolographicSpace2 : IHolographicSpace2_raw, generate<IHolographicSpace2> {};

// HolographicSpace
template<typename> struct HolographicSpace_statics {
	static struct _IsAvailable : property {
		bool get() { bool value; hrcheck(get_activation_factory<HolographicSpace, IHolographicSpaceStatics2>()->_get_IsAvailable(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsAvailable;
	static struct _IsSupported : property {
		bool get() { bool value; hrcheck(get_activation_factory<HolographicSpace, IHolographicSpaceStatics2>()->_get_IsSupported(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsSupported;
	static struct _IsAvailableChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<HolographicSpace, IHolographicSpaceStatics2>()->_add_IsAvailableChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<HolographicSpace, IHolographicSpaceStatics2>()->_remove_IsAvailableChanged(token)); }
	} IsAvailableChanged;
	static struct _IsConfigured : property {
		bool get() { bool value; hrcheck(get_activation_factory<HolographicSpace, IHolographicSpaceStatics3>()->_get_IsConfigured(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsConfigured;
	static ptr<HolographicSpace> CreateForCoreWindow(pptr<UI::Core::CoreWindow> window) { HolographicSpace* value; hrcheck(get_activation_factory<HolographicSpace, IHolographicSpaceStatics>()->_CreateForCoreWindow(window, &value)); return from_abi(value); }
};
template<typename X> typename HolographicSpace_statics<X>::_IsAvailable HolographicSpace_statics<X>::IsAvailable;
template<typename X> typename HolographicSpace_statics<X>::_IsSupported HolographicSpace_statics<X>::IsSupported;
template<typename X> typename HolographicSpace_statics<X>::_IsAvailableChanged HolographicSpace_statics<X>::IsAvailableChanged;
template<typename X> typename HolographicSpace_statics<X>::_IsConfigured HolographicSpace_statics<X>::IsConfigured;

template<typename X> struct statics<HolographicSpace, X> : X, Windows::Graphics::Holographic::HolographicSpace_statics<void> {
	typedef typename X::root_type HolographicSpace;
};
struct HolographicSpace : generate<HolographicSpace> {};

// HolographicSpaceCameraAddedEventArgs
template<typename X> struct statics<HolographicSpaceCameraAddedEventArgs, X> : X {
	typedef typename X::root_type HolographicSpaceCameraAddedEventArgs;
};
struct HolographicSpaceCameraAddedEventArgs : generate<HolographicSpaceCameraAddedEventArgs> {};

// HolographicSpaceCameraRemovedEventArgs
template<typename X> struct statics<HolographicSpaceCameraRemovedEventArgs, X> : X {
	typedef typename X::root_type HolographicSpaceCameraRemovedEventArgs;
};
struct HolographicSpaceCameraRemovedEventArgs : generate<HolographicSpaceCameraRemovedEventArgs> {};

// IHolographicFrame
struct IHolographicFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_AddedCameras(Foundation::Collections::IVectorView<HolographicCamera*>* *value);
	virtual STDMETHODIMP _get_RemovedCameras(Foundation::Collections::IVectorView<HolographicCamera*>* *value);
	virtual STDMETHODIMP _GetRenderingParameters(HolographicCameraPose* cameraPose, HolographicCameraRenderingParameters* *value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_CurrentPrediction(HolographicFramePrediction* *value);
	virtual STDMETHODIMP _UpdateCurrentPrediction();
	virtual STDMETHODIMP _PresentUsingCurrentPrediction(HolographicFramePresentResult *result);
	virtual STDMETHODIMP _PresentUsingCurrentPredictionWithBehavior(HolographicFramePresentWaitBehavior waitBehavior, HolographicFramePresentResult *result);
	virtual STDMETHODIMP _WaitForFrameToFinish();
};
template<typename X> struct IHolographicFrame_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> get() { Foundation::Collections::IVectorView<HolographicCamera*>* value; hrcheck(enc(&IHolographicFrame_adaptor::AddedCameras)->_get_AddedCameras(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> operator->() { return get(); }
		} AddedCameras;
		struct : property {
			ptr<HolographicFramePrediction> get() { HolographicFramePrediction* value; hrcheck(enc(&IHolographicFrame_adaptor::CurrentPrediction)->_get_CurrentPrediction(&value)); return from_abi(value); }
			ptr<HolographicFramePrediction> operator()() { return get(); }
			operator ptr<HolographicFramePrediction> () { return get(); }
			ptr<HolographicFramePrediction> operator->() { return get(); }
		} CurrentPrediction;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IHolographicFrame_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> get() { Foundation::Collections::IVectorView<HolographicCamera*>* value; hrcheck(enc(&IHolographicFrame_adaptor::RemovedCameras)->_get_RemovedCameras(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCamera>>> operator->() { return get(); }
		} RemovedCameras;
	};
	ptr<HolographicCameraRenderingParameters> GetRenderingParameters(pptr<HolographicCameraPose> cameraPose) { HolographicCameraRenderingParameters* value; hrcheck(X::get()->_GetRenderingParameters(cameraPose, &value)); return from_abi(value); }
	void UpdateCurrentPrediction() { hrcheck(X::get()->_UpdateCurrentPrediction()); }
	HolographicFramePresentResult PresentUsingCurrentPrediction() { HolographicFramePresentResult result; hrcheck(X::get()->_PresentUsingCurrentPrediction(&result)); return result; }
	HolographicFramePresentResult PresentUsingCurrentPrediction(HolographicFramePresentWaitBehavior waitBehavior) { HolographicFramePresentResult result; hrcheck(X::get()->_PresentUsingCurrentPredictionWithBehavior(waitBehavior, &result)); return result; }
	void WaitForFrameToFinish() { hrcheck(X::get()->_WaitForFrameToFinish()); }
	IHolographicFrame_adaptor() {}
};
template<typename X> struct adapt<IHolographicFrame, X> : Windows::Graphics::Holographic::IHolographicFrame_adaptor<X> { typedef adapt IHolographicFrame; };
struct IHolographicFrame : IHolographicFrame_raw, generate<IHolographicFrame> {};

// IHolographicFrame2
struct IHolographicFrame2_raw : IInspectable {
	virtual STDMETHODIMP _GetQuadLayerUpdateParameters(HolographicQuadLayer* layer, HolographicQuadLayerUpdateParameters* *value);
};
template<typename X> struct IHolographicFrame2_adaptor : X {
	ptr<HolographicQuadLayerUpdateParameters> GetQuadLayerUpdateParameters(pptr<HolographicQuadLayer> layer) { HolographicQuadLayerUpdateParameters* value; hrcheck(X::get()->_GetQuadLayerUpdateParameters(layer, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IHolographicFrame2, X> : Windows::Graphics::Holographic::IHolographicFrame2_adaptor<X> { typedef adapt IHolographicFrame2; };
struct IHolographicFrame2 : IHolographicFrame2_raw, generate<IHolographicFrame2> {};

// HolographicFrame
template<typename X> struct statics<HolographicFrame, X> : X {
	typedef typename X::root_type HolographicFrame;
};
struct HolographicFrame : generate<HolographicFrame> {
	using IHolographicFrame::PresentUsingCurrentPrediction;
};

// IHolographicFramePresentationMonitor
struct IHolographicFramePresentationMonitor_raw : IInspectable {
	virtual STDMETHODIMP _ReadReports(Foundation::Collections::IVectorView<HolographicFramePresentationReport*>* *result);
};
template<typename X> struct IHolographicFramePresentationMonitor_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<HolographicFramePresentationReport>>> ReadReports() { Foundation::Collections::IVectorView<HolographicFramePresentationReport*>* result; hrcheck(X::get()->_ReadReports(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IHolographicFramePresentationMonitor, X> : Windows::Graphics::Holographic::IHolographicFramePresentationMonitor_adaptor<X> { typedef adapt IHolographicFramePresentationMonitor; };
struct IHolographicFramePresentationMonitor : IHolographicFramePresentationMonitor_raw, generate<IHolographicFramePresentationMonitor> {};

// HolographicFramePresentationMonitor
template<typename X> struct statics<HolographicFramePresentationMonitor, X> : X {
	typedef typename X::root_type HolographicFramePresentationMonitor;
};
struct HolographicFramePresentationMonitor : generate<HolographicFramePresentationMonitor> {};

// IHolographicCameraPose
struct IHolographicCameraPose_raw : IInspectable {
	virtual STDMETHODIMP _get_HolographicCamera(Holographic::HolographicCamera* *value);
	virtual STDMETHODIMP _get_Viewport(Foundation::Rect *value);
	virtual STDMETHODIMP _TryGetViewTransform(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::IReference<HolographicStereoTransform>* *value);
	virtual STDMETHODIMP _get_ProjectionTransform(HolographicStereoTransform *value);
	virtual STDMETHODIMP _TryGetCullingFrustum(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::IReference<Perception::Spatial::SpatialBoundingFrustum>* *value);
	virtual STDMETHODIMP _TryGetVisibleFrustum(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::IReference<Perception::Spatial::SpatialBoundingFrustum>* *value);
	virtual STDMETHODIMP _get_NearPlaneDistance(double *value);
	virtual STDMETHODIMP _get_FarPlaneDistance(double *value);
};
template<typename X> struct IHolographicCameraPose_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IHolographicCameraPose_adaptor::FarPlaneDistance)->_get_FarPlaneDistance(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} FarPlaneDistance;
		struct : property {
			ptr<Holographic::HolographicCamera> get() { Holographic::HolographicCamera* value; hrcheck(enc(&IHolographicCameraPose_adaptor::HolographicCamera)->_get_HolographicCamera(&value)); return from_abi(value); }
			ptr<Holographic::HolographicCamera> operator()() { return get(); }
			operator ptr<Holographic::HolographicCamera> () { return get(); }
			ptr<Holographic::HolographicCamera> operator->() { return get(); }
		} HolographicCamera;
		struct : property {
			double get() { double value; hrcheck(enc(&IHolographicCameraPose_adaptor::NearPlaneDistance)->_get_NearPlaneDistance(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} NearPlaneDistance;
		struct : property {
			HolographicStereoTransform get() { HolographicStereoTransform value; hrcheck(enc(&IHolographicCameraPose_adaptor::ProjectionTransform)->_get_ProjectionTransform(&value)); return value; }
			HolographicStereoTransform operator()() { return get(); }
			operator HolographicStereoTransform () { return get(); }
		} ProjectionTransform;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IHolographicCameraPose_adaptor::Viewport)->_get_Viewport(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} Viewport;
	};
	ptr<Foundation::IReference<HolographicStereoTransform>> TryGetViewTransform(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { Foundation::IReference<HolographicStereoTransform>* value; hrcheck(X::get()->_TryGetViewTransform(coordinateSystem, &value)); return from_abi(value); }
	ptr<Foundation::IReference<Perception::Spatial::SpatialBoundingFrustum>> TryGetCullingFrustum(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { Foundation::IReference<Perception::Spatial::SpatialBoundingFrustum>* value; hrcheck(X::get()->_TryGetCullingFrustum(coordinateSystem, &value)); return from_abi(value); }
	ptr<Foundation::IReference<Perception::Spatial::SpatialBoundingFrustum>> TryGetVisibleFrustum(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { Foundation::IReference<Perception::Spatial::SpatialBoundingFrustum>* value; hrcheck(X::get()->_TryGetVisibleFrustum(coordinateSystem, &value)); return from_abi(value); }
	IHolographicCameraPose_adaptor() {}
};
template<typename X> struct adapt<IHolographicCameraPose, X> : Windows::Graphics::Holographic::IHolographicCameraPose_adaptor<X> { typedef adapt IHolographicCameraPose; };
struct IHolographicCameraPose : IHolographicCameraPose_raw, generate<IHolographicCameraPose> {};

// IHolographicCameraPose2
struct IHolographicCameraPose2_raw : IInspectable {
	virtual STDMETHODIMP _OverrideViewTransform(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, HolographicStereoTransform coordinateSystemToViewTransform);
	virtual STDMETHODIMP _OverrideProjectionTransform(HolographicStereoTransform projectionTransform);
	virtual STDMETHODIMP _OverrideViewport(Foundation::Rect leftViewport, Foundation::Rect rightViewport);
};
template<typename X> struct IHolographicCameraPose2_adaptor : X {
	void OverrideViewTransform(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem, const HolographicStereoTransform& coordinateSystemToViewTransform) { hrcheck(X::get()->_OverrideViewTransform(coordinateSystem, coordinateSystemToViewTransform)); }
	void OverrideProjectionTransform(const HolographicStereoTransform& projectionTransform) { hrcheck(X::get()->_OverrideProjectionTransform(projectionTransform)); }
	void OverrideViewport(const Foundation::Rect& leftViewport, const Foundation::Rect& rightViewport) { hrcheck(X::get()->_OverrideViewport(leftViewport, rightViewport)); }
};
template<typename X> struct adapt<IHolographicCameraPose2, X> : Windows::Graphics::Holographic::IHolographicCameraPose2_adaptor<X> { typedef adapt IHolographicCameraPose2; };
struct IHolographicCameraPose2 : IHolographicCameraPose2_raw, generate<IHolographicCameraPose2> {};

// IHolographicFramePrediction
struct IHolographicFramePrediction_raw : IInspectable {
	virtual STDMETHODIMP _get_CameraPoses(Foundation::Collections::IVectorView<HolographicCameraPose*>* *value);
	virtual STDMETHODIMP _get_Timestamp(Perception::PerceptionTimestamp* *value);
};
template<typename X> struct IHolographicFramePrediction_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCameraPose>>> get() { Foundation::Collections::IVectorView<HolographicCameraPose*>* value; hrcheck(enc(&IHolographicFramePrediction_adaptor::CameraPoses)->_get_CameraPoses(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCameraPose>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HolographicCameraPose>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HolographicCameraPose>>> operator->() { return get(); }
		} CameraPoses;
		struct : property {
			ptr<Perception::PerceptionTimestamp> get() { Perception::PerceptionTimestamp* value; hrcheck(enc(&IHolographicFramePrediction_adaptor::Timestamp)->_get_Timestamp(&value)); return from_abi(value); }
			ptr<Perception::PerceptionTimestamp> operator()() { return get(); }
			operator ptr<Perception::PerceptionTimestamp> () { return get(); }
			ptr<Perception::PerceptionTimestamp> operator->() { return get(); }
		} Timestamp;
	};
	IHolographicFramePrediction_adaptor() {}
};
template<typename X> struct adapt<IHolographicFramePrediction, X> : Windows::Graphics::Holographic::IHolographicFramePrediction_adaptor<X> { typedef adapt IHolographicFramePrediction; };
struct IHolographicFramePrediction : IHolographicFramePrediction_raw, generate<IHolographicFramePrediction> {};

// HolographicCameraPose
template<typename X> struct statics<HolographicCameraPose, X> : X {
	typedef typename X::root_type HolographicCameraPose;
};
struct HolographicCameraPose : generate<HolographicCameraPose> {};

// IHolographicCameraRenderingParameters
struct IHolographicCameraRenderingParameters_raw : IInspectable {
	virtual STDMETHODIMP _SetFocusPoint(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::Numerics::Vector3 position);
	virtual STDMETHODIMP _SetFocusPointWithNormal(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::Numerics::Vector3 position, Foundation::Numerics::Vector3 normal);
	virtual STDMETHODIMP _SetFocusPointWithNormalLinearVelocity(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::Numerics::Vector3 position, Foundation::Numerics::Vector3 normal, Foundation::Numerics::Vector3 linearVelocity);
	virtual STDMETHODIMP _get_Direct3D11Device(DirectX::Direct3D11::IDirect3DDevice* *value);
	virtual STDMETHODIMP _get_Direct3D11BackBuffer(DirectX::Direct3D11::IDirect3DSurface* *value);
};
template<typename X> struct IHolographicCameraRenderingParameters_adaptor : X {
	union {
		struct : property {
			ptr<DirectX::Direct3D11::IDirect3DSurface> get() { DirectX::Direct3D11::IDirect3DSurface* value; hrcheck(enc(&IHolographicCameraRenderingParameters_adaptor::Direct3D11BackBuffer)->_get_Direct3D11BackBuffer(&value)); return from_abi(value); }
			ptr<DirectX::Direct3D11::IDirect3DSurface> operator()() { return get(); }
			operator ptr<DirectX::Direct3D11::IDirect3DSurface> () { return get(); }
			ptr<DirectX::Direct3D11::IDirect3DSurface> operator->() { return get(); }
		} Direct3D11BackBuffer;
		struct : property {
			ptr<DirectX::Direct3D11::IDirect3DDevice> get() { DirectX::Direct3D11::IDirect3DDevice* value; hrcheck(enc(&IHolographicCameraRenderingParameters_adaptor::Direct3D11Device)->_get_Direct3D11Device(&value)); return from_abi(value); }
			ptr<DirectX::Direct3D11::IDirect3DDevice> operator()() { return get(); }
			operator ptr<DirectX::Direct3D11::IDirect3DDevice> () { return get(); }
			ptr<DirectX::Direct3D11::IDirect3DDevice> operator->() { return get(); }
		} Direct3D11Device;
	};
	void SetFocusPoint(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem, const Foundation::Numerics::Vector3& position) { hrcheck(X::get()->_SetFocusPoint(coordinateSystem, position)); }
	void SetFocusPoint(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem, const Foundation::Numerics::Vector3& position, const Foundation::Numerics::Vector3& normal) { hrcheck(X::get()->_SetFocusPointWithNormal(coordinateSystem, position, normal)); }
	void SetFocusPoint(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem, const Foundation::Numerics::Vector3& position, const Foundation::Numerics::Vector3& normal, const Foundation::Numerics::Vector3& linearVelocity) { hrcheck(X::get()->_SetFocusPointWithNormalLinearVelocity(coordinateSystem, position, normal, linearVelocity)); }
	IHolographicCameraRenderingParameters_adaptor() {}
};
template<typename X> struct adapt<IHolographicCameraRenderingParameters, X> : Windows::Graphics::Holographic::IHolographicCameraRenderingParameters_adaptor<X> { typedef adapt IHolographicCameraRenderingParameters; };
struct IHolographicCameraRenderingParameters : IHolographicCameraRenderingParameters_raw, generate<IHolographicCameraRenderingParameters> {};

// IHolographicCameraRenderingParameters2
struct IHolographicCameraRenderingParameters2_raw : IInspectable {
	virtual STDMETHODIMP _get_ReprojectionMode(HolographicReprojectionMode *value);
	virtual STDMETHODIMP _put_ReprojectionMode(HolographicReprojectionMode value);
	virtual STDMETHODIMP _CommitDirect3D11DepthBuffer(DirectX::Direct3D11::IDirect3DSurface* value);
};
template<typename X> struct IHolographicCameraRenderingParameters2_adaptor : X {
	union {
		struct : property {
			HolographicReprojectionMode get() { HolographicReprojectionMode value; hrcheck(enc(&IHolographicCameraRenderingParameters2_adaptor::ReprojectionMode)->_get_ReprojectionMode(&value)); return value; }
			HolographicReprojectionMode operator()() { return get(); }
			operator HolographicReprojectionMode () { return get(); }
			void put(HolographicReprojectionMode value) { hrcheck(enc(&IHolographicCameraRenderingParameters2_adaptor::ReprojectionMode)->_put_ReprojectionMode(value)); }
			void operator=(HolographicReprojectionMode value) { put(value); }
			void operator()(HolographicReprojectionMode value) { put(value); }
		} ReprojectionMode;
	};
	void CommitDirect3D11DepthBuffer(pptr<DirectX::Direct3D11::IDirect3DSurface> value) { hrcheck(X::get()->_CommitDirect3D11DepthBuffer(value)); }
	IHolographicCameraRenderingParameters2_adaptor() {}
};
template<typename X> struct adapt<IHolographicCameraRenderingParameters2, X> : Windows::Graphics::Holographic::IHolographicCameraRenderingParameters2_adaptor<X> { typedef adapt IHolographicCameraRenderingParameters2; };
struct IHolographicCameraRenderingParameters2 : IHolographicCameraRenderingParameters2_raw, generate<IHolographicCameraRenderingParameters2> {};

// IHolographicCameraRenderingParameters3
struct IHolographicCameraRenderingParameters3_raw : IInspectable {
	virtual STDMETHODIMP _get_IsContentProtectionEnabled(bool *value);
	virtual STDMETHODIMP _put_IsContentProtectionEnabled(bool value);
};
template<typename X> struct IHolographicCameraRenderingParameters3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHolographicCameraRenderingParameters3_adaptor::IsContentProtectionEnabled)->_get_IsContentProtectionEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IHolographicCameraRenderingParameters3_adaptor::IsContentProtectionEnabled)->_put_IsContentProtectionEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsContentProtectionEnabled;
	};
	IHolographicCameraRenderingParameters3_adaptor() {}
};
template<typename X> struct adapt<IHolographicCameraRenderingParameters3, X> : Windows::Graphics::Holographic::IHolographicCameraRenderingParameters3_adaptor<X> { typedef adapt IHolographicCameraRenderingParameters3; };
struct IHolographicCameraRenderingParameters3 : IHolographicCameraRenderingParameters3_raw, generate<IHolographicCameraRenderingParameters3> {};

// HolographicCameraRenderingParameters
template<typename X> struct statics<HolographicCameraRenderingParameters, X> : X {
	typedef typename X::root_type HolographicCameraRenderingParameters;
};
struct HolographicCameraRenderingParameters : generate<HolographicCameraRenderingParameters> {
	using IHolographicCameraRenderingParameters::SetFocusPoint;
};

// HolographicFramePrediction
template<typename X> struct statics<HolographicFramePrediction, X> : X {
	typedef typename X::root_type HolographicFramePrediction;
};
struct HolographicFramePrediction : generate<HolographicFramePrediction> {};

// IHolographicQuadLayerFactory
struct IHolographicQuadLayerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Size size, HolographicQuadLayer* *value);
	virtual STDMETHODIMP _CreateWithPixelFormat(Foundation::Size size, DirectX::DirectXPixelFormat pixelFormat, HolographicQuadLayer* *value);
};

// IHolographicQuadLayer
struct IHolographicQuadLayer_raw : IInspectable {
	virtual STDMETHODIMP _get_PixelFormat(DirectX::DirectXPixelFormat *value);
	virtual STDMETHODIMP _get_Size(Foundation::Size *value);
};
template<typename X> struct IHolographicQuadLayer_adaptor : X {
	union {
		struct : property {
			DirectX::DirectXPixelFormat get() { DirectX::DirectXPixelFormat value; hrcheck(enc(&IHolographicQuadLayer_adaptor::PixelFormat)->_get_PixelFormat(&value)); return value; }
			DirectX::DirectXPixelFormat operator()() { return get(); }
			operator DirectX::DirectXPixelFormat () { return get(); }
		} PixelFormat;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IHolographicQuadLayer_adaptor::Size)->_get_Size(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} Size;
	};
	IHolographicQuadLayer_adaptor() {}
};
template<typename X> struct adapt<IHolographicQuadLayer, X> : Windows::Graphics::Holographic::IHolographicQuadLayer_adaptor<X> { typedef adapt IHolographicQuadLayer; };
struct IHolographicQuadLayer : IHolographicQuadLayer_raw, generate<IHolographicQuadLayer> {};

// HolographicQuadLayer
template<typename> struct HolographicQuadLayer_statics {
	static HolographicQuadLayer *activate(const Foundation::Size& size) { HolographicQuadLayer *value; hrcheck(get_activation_factory<HolographicQuadLayer, IHolographicQuadLayerFactory>()->_Create(size, &value)); return value; }
	static HolographicQuadLayer *activate(const Foundation::Size& size, DirectX::DirectXPixelFormat pixelFormat) { HolographicQuadLayer *value; hrcheck(get_activation_factory<HolographicQuadLayer, IHolographicQuadLayerFactory>()->_CreateWithPixelFormat(size, pixelFormat, &value)); return value; }
};

template<typename X> struct statics<HolographicQuadLayer, X> : X, Windows::Graphics::Holographic::HolographicQuadLayer_statics<void> {
	using Windows::Graphics::Holographic::HolographicQuadLayer_statics<void>::activate;
	typedef typename X::root_type HolographicQuadLayer;
};
struct HolographicQuadLayer : generate<HolographicQuadLayer> {};

// IHolographicQuadLayerUpdateParameters
struct IHolographicQuadLayerUpdateParameters_raw : IInspectable {
	virtual STDMETHODIMP _AcquireBufferToUpdateContent(DirectX::Direct3D11::IDirect3DSurface* *value);
	virtual STDMETHODIMP _UpdateViewport(Foundation::Rect value);
	virtual STDMETHODIMP _UpdateContentProtectionEnabled(bool value);
	virtual STDMETHODIMP _UpdateExtents(Foundation::Numerics::Vector2 value);
	virtual STDMETHODIMP _UpdateLocationWithStationaryMode(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::Numerics::Vector3 position, Foundation::Numerics::Quaternion orientation);
	virtual STDMETHODIMP _UpdateLocationWithDisplayRelativeMode(Foundation::Numerics::Vector3 position, Foundation::Numerics::Quaternion orientation);
};
template<typename X> struct IHolographicQuadLayerUpdateParameters_adaptor : X {
	ptr<DirectX::Direct3D11::IDirect3DSurface> AcquireBufferToUpdateContent() { DirectX::Direct3D11::IDirect3DSurface* value; hrcheck(X::get()->_AcquireBufferToUpdateContent(&value)); return from_abi(value); }
	void UpdateViewport(const Foundation::Rect& value) { hrcheck(X::get()->_UpdateViewport(value)); }
	void UpdateContentProtectionEnabled(bool value) { hrcheck(X::get()->_UpdateContentProtectionEnabled(value)); }
	void UpdateExtents(const Foundation::Numerics::Vector2& value) { hrcheck(X::get()->_UpdateExtents(value)); }
	void UpdateLocationWithStationaryMode(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem, const Foundation::Numerics::Vector3& position, const Foundation::Numerics::Quaternion& orientation) { hrcheck(X::get()->_UpdateLocationWithStationaryMode(coordinateSystem, position, orientation)); }
	void UpdateLocationWithDisplayRelativeMode(const Foundation::Numerics::Vector3& position, const Foundation::Numerics::Quaternion& orientation) { hrcheck(X::get()->_UpdateLocationWithDisplayRelativeMode(position, orientation)); }
};
template<typename X> struct adapt<IHolographicQuadLayerUpdateParameters, X> : Windows::Graphics::Holographic::IHolographicQuadLayerUpdateParameters_adaptor<X> { typedef adapt IHolographicQuadLayerUpdateParameters; };
struct IHolographicQuadLayerUpdateParameters : IHolographicQuadLayerUpdateParameters_raw, generate<IHolographicQuadLayerUpdateParameters> {};

// HolographicQuadLayerUpdateParameters
template<typename X> struct statics<HolographicQuadLayerUpdateParameters, X> : X {
	typedef typename X::root_type HolographicQuadLayerUpdateParameters;
};
struct HolographicQuadLayerUpdateParameters : generate<HolographicQuadLayerUpdateParameters> {};

// IHolographicFramePresentationReport
struct IHolographicFramePresentationReport_raw : IInspectable {
	virtual STDMETHODIMP _get_CompositorGpuDuration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_AppGpuDuration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_AppGpuOverrun(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MissedPresentationOpportunityCount(unsigned *value);
	virtual STDMETHODIMP _get_PresentationCount(unsigned *value);
};
template<typename X> struct IHolographicFramePresentationReport_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IHolographicFramePresentationReport_adaptor::AppGpuDuration)->_get_AppGpuDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} AppGpuDuration;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IHolographicFramePresentationReport_adaptor::AppGpuOverrun)->_get_AppGpuOverrun(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} AppGpuOverrun;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IHolographicFramePresentationReport_adaptor::CompositorGpuDuration)->_get_CompositorGpuDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} CompositorGpuDuration;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHolographicFramePresentationReport_adaptor::MissedPresentationOpportunityCount)->_get_MissedPresentationOpportunityCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MissedPresentationOpportunityCount;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHolographicFramePresentationReport_adaptor::PresentationCount)->_get_PresentationCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PresentationCount;
	};
	IHolographicFramePresentationReport_adaptor() {}
};
template<typename X> struct adapt<IHolographicFramePresentationReport, X> : Windows::Graphics::Holographic::IHolographicFramePresentationReport_adaptor<X> { typedef adapt IHolographicFramePresentationReport; };
struct IHolographicFramePresentationReport : IHolographicFramePresentationReport_raw, generate<IHolographicFramePresentationReport> {};

// HolographicFramePresentationReport
template<typename X> struct statics<HolographicFramePresentationReport, X> : X {
	typedef typename X::root_type HolographicFramePresentationReport;
};
struct HolographicFramePresentationReport : generate<HolographicFramePresentationReport> {};

// IHolographicCameraViewportParameters
struct IHolographicCameraViewportParameters_raw : IInspectable {
	virtual STDMETHODIMP _get_HiddenAreaMesh(unsigned *valueSize, Foundation::Numerics::Vector2 **value);
	virtual STDMETHODIMP _get_VisibleAreaMesh(unsigned *valueSize, Foundation::Numerics::Vector2 **value);
};
template<typename X> struct IHolographicCameraViewportParameters_adaptor : X {
	union {
		struct : property {
			szarray<Foundation::Numerics::Vector2> get() { szarray<Foundation::Numerics::Vector2> value; hrcheck(enc(&IHolographicCameraViewportParameters_adaptor::HiddenAreaMesh)->_get_HiddenAreaMesh(&value.size, &value.p)); return value; }
			szarray<Foundation::Numerics::Vector2> operator()() { return get(); }
			operator szarray<Foundation::Numerics::Vector2> () { return get(); }
		} HiddenAreaMesh;
		struct : property {
			szarray<Foundation::Numerics::Vector2> get() { szarray<Foundation::Numerics::Vector2> value; hrcheck(enc(&IHolographicCameraViewportParameters_adaptor::VisibleAreaMesh)->_get_VisibleAreaMesh(&value.size, &value.p)); return value; }
			szarray<Foundation::Numerics::Vector2> operator()() { return get(); }
			operator szarray<Foundation::Numerics::Vector2> () { return get(); }
		} VisibleAreaMesh;
	};
	IHolographicCameraViewportParameters_adaptor() {}
};
template<typename X> struct adapt<IHolographicCameraViewportParameters, X> : Windows::Graphics::Holographic::IHolographicCameraViewportParameters_adaptor<X> { typedef adapt IHolographicCameraViewportParameters; };
struct IHolographicCameraViewportParameters : IHolographicCameraViewportParameters_raw, generate<IHolographicCameraViewportParameters> {};

// HolographicCameraViewportParameters
template<typename X> struct statics<HolographicCameraViewportParameters, X> : X {
	typedef typename X::root_type HolographicCameraViewportParameters;
};
struct HolographicCameraViewportParameters : generate<HolographicCameraViewportParameters> {};

// IHolographicDisplayStatics
struct IHolographicDisplayStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(HolographicDisplay* *result);
};

// IHolographicDisplay2
struct IHolographicDisplay2_raw : IInspectable {
	virtual STDMETHODIMP _get_RefreshRate(double *value);
};
template<typename X> struct IHolographicDisplay2_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IHolographicDisplay2_adaptor::RefreshRate)->_get_RefreshRate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} RefreshRate;
	};
	IHolographicDisplay2_adaptor() {}
};
template<typename X> struct adapt<IHolographicDisplay2, X> : Windows::Graphics::Holographic::IHolographicDisplay2_adaptor<X> { typedef adapt IHolographicDisplay2; };
struct IHolographicDisplay2 : IHolographicDisplay2_raw, generate<IHolographicDisplay2> {};

// IHolographicDisplay
struct IHolographicDisplay_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_MaxViewportSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_IsStereo(bool *value);
	virtual STDMETHODIMP _get_IsOpaque(bool *value);
	virtual STDMETHODIMP _get_AdapterId(HolographicAdapterId *value);
	virtual STDMETHODIMP _get_SpatialLocator(Perception::Spatial::SpatialLocator* *value);
};
template<typename X> struct IHolographicDisplay_adaptor : X {
	union {
		struct : property {
			HolographicAdapterId get() { HolographicAdapterId value; hrcheck(enc(&IHolographicDisplay_adaptor::AdapterId)->_get_AdapterId(&value)); return value; }
			HolographicAdapterId operator()() { return get(); }
			operator HolographicAdapterId () { return get(); }
		} AdapterId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IHolographicDisplay_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHolographicDisplay_adaptor::IsOpaque)->_get_IsOpaque(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOpaque;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHolographicDisplay_adaptor::IsStereo)->_get_IsStereo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStereo;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IHolographicDisplay_adaptor::MaxViewportSize)->_get_MaxViewportSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} MaxViewportSize;
		struct : property {
			ptr<Perception::Spatial::SpatialLocator> get() { Perception::Spatial::SpatialLocator* value; hrcheck(enc(&IHolographicDisplay_adaptor::SpatialLocator)->_get_SpatialLocator(&value)); return from_abi(value); }
			ptr<Perception::Spatial::SpatialLocator> operator()() { return get(); }
			operator ptr<Perception::Spatial::SpatialLocator> () { return get(); }
			ptr<Perception::Spatial::SpatialLocator> operator->() { return get(); }
		} SpatialLocator;
	};
	IHolographicDisplay_adaptor() {}
};
template<typename X> struct adapt<IHolographicDisplay, X> : Windows::Graphics::Holographic::IHolographicDisplay_adaptor<X> { typedef adapt IHolographicDisplay; };
struct IHolographicDisplay : IHolographicDisplay_raw, generate<IHolographicDisplay> {};

// HolographicDisplay
template<typename> struct HolographicDisplay_statics {
	static ptr<HolographicDisplay> GetDefault() { HolographicDisplay* result; hrcheck(get_activation_factory<HolographicDisplay, IHolographicDisplayStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<HolographicDisplay, X> : X, Windows::Graphics::Holographic::HolographicDisplay_statics<void> {
	typedef typename X::root_type HolographicDisplay;
};
struct HolographicDisplay : generate<HolographicDisplay> {};
}}}
} // namespace iso_winrt
