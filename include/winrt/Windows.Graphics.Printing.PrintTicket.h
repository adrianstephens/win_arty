#pragma once
// generated by isopod tools
// namespaces:
// Windows.Graphics.Printing.PrintTicket

#include "Windows.Graphics.Printing.PrintTicket.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Data { namespace Xml { namespace Dom {
struct IXmlNode;
}}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketFeatureSelectionType> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDataType> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketValueType> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IPrintTicketValue> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketValue> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IPrintTicketValue> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IPrintTicketOption> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketOption> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IPrintTicketOption> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IPrintTicketFeature> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketFeature> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IPrintTicketFeature> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterDefinition> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketParameterDefinition> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterDefinition> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IPrintTicketCapabilities> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketCapabilities> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IPrintTicketCapabilities> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterInitializer> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::PrintTicketParameterInitializer> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterInitializer> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicketValidationResult> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicketValidationResult> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicketValidationResult> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicket> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTicket::WorkflowPrintTicket> : class_type<Platform::Object, Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicket> {};

// uuids

template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IPrintTicketValue> { define_guid(0x66B30A32, 0x244D, 0x4E22, 0xA9, 0x8B, 0xBB, 0x3C, 0xF1, 0xF2, 0xDD, 0x91);};
template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IPrintTicketOption> { define_guid(0xB086CF90, 0xB367, 0x4E4B, 0xBD, 0x48, 0x9C, 0x78, 0xA0, 0xBB, 0x31, 0xCE);};
template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IPrintTicketFeature> { define_guid(0xE7607D6A, 0x59F5, 0x4103, 0x88, 0x58, 0xB9, 0x77, 0x10, 0x96, 0x3D, 0x39);};
template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterDefinition> { define_guid(0xD6BAB4E4, 0x2962, 0x4C01, 0xB7, 0xF3, 0x9A, 0x92, 0x94, 0xEB, 0x83, 0x35);};
template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IPrintTicketCapabilities> { define_guid(0x8C45508B, 0xBBDC, 0x4256, 0xA1, 0x42, 0x2F, 0xD6, 0x15, 0xEC, 0xB4, 0x16);};
template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterInitializer> { define_guid(0x5E3335BB, 0xA0A5, 0x48B1, 0x9D, 0x5C, 0x7, 0x11, 0x6D, 0xDC, 0x59, 0x7A);};
template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicketValidationResult> { define_guid(0xAD1F392, 0xDA7B, 0x4A36, 0xBF, 0x36, 0x6A, 0x99, 0xA6, 0x2E, 0x20, 0x59);};
template<> struct uuid<Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicket> { define_guid(0x41D52285, 0x35E8, 0x448E, 0xA8, 0xC5, 0xE4, 0xB6, 0xA2, 0xCF, 0x82, 0x6C);};

// types

namespace Windows { namespace Graphics { namespace Printing { namespace PrintTicket {

// IPrintTicketValue
struct IPrintTicketValue_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(PrintTicketValueType *value);
	virtual STDMETHODIMP _GetValueAsInteger(int *value);
	virtual STDMETHODIMP _GetValueAsString(HSTRING *value);
};
template<typename X> struct IPrintTicketValue_adaptor : X {
	union {
		struct : property {
			PrintTicketValueType get() { PrintTicketValueType value; hrcheck(enc(&IPrintTicketValue_adaptor::Type)->_get_Type(&value)); return value; }
			PrintTicketValueType operator()() { return get(); }
			operator PrintTicketValueType () { return get(); }
		} Type;
	};
	int GetValueAsInteger() { int value; hrcheck(X::get()->_GetValueAsInteger(&value)); return value; }
	hstring GetValueAsString() { HSTRING value; hrcheck(X::get()->_GetValueAsString(&value)); return from_abi(value); }
	IPrintTicketValue_adaptor() {}
};
template<typename X> struct adapt<IPrintTicketValue, X> : Windows::Graphics::Printing::PrintTicket::IPrintTicketValue_adaptor<X> { typedef adapt IPrintTicketValue; };
struct IPrintTicketValue : IPrintTicketValue_raw, generate<IPrintTicketValue> {};

// PrintTicketValue
template<typename X> struct statics<PrintTicketValue, X> : X {
	typedef typename X::root_type PrintTicketValue;
};
struct PrintTicketValue : generate<PrintTicketValue> {};

// IPrintTicketOption
struct IPrintTicketOption_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNamespace(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNode(Data::Xml::Dom::IXmlNode* *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _GetPropertyNode(HSTRING name, HSTRING xmlNamespace, Data::Xml::Dom::IXmlNode* *result);
	virtual STDMETHODIMP _GetScoredPropertyNode(HSTRING name, HSTRING xmlNamespace, Data::Xml::Dom::IXmlNode* *result);
	virtual STDMETHODIMP _GetPropertyValue(HSTRING name, HSTRING xmlNamespace, PrintTicketValue* *result);
	virtual STDMETHODIMP _GetScoredPropertyValue(HSTRING name, HSTRING xmlNamespace, PrintTicketValue* *result);
};
template<typename X> struct IPrintTicketOption_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketOption_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketOption_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketOption_adaptor::XmlNamespace)->_get_XmlNamespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} XmlNamespace;
		struct : property {
			ptr<Data::Xml::Dom::IXmlNode> get() { Data::Xml::Dom::IXmlNode* value; hrcheck(enc(&IPrintTicketOption_adaptor::XmlNode)->_get_XmlNode(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::IXmlNode> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::IXmlNode> () { return get(); }
			ptr<Data::Xml::Dom::IXmlNode> operator->() { return get(); }
		} XmlNode;
	};
	ptr<Data::Xml::Dom::IXmlNode> GetPropertyNode(hstring_ref name, hstring_ref xmlNamespace) { Data::Xml::Dom::IXmlNode* result; hrcheck(X::get()->_GetPropertyNode(name, xmlNamespace, &result)); return from_abi(result); }
	ptr<Data::Xml::Dom::IXmlNode> GetScoredPropertyNode(hstring_ref name, hstring_ref xmlNamespace) { Data::Xml::Dom::IXmlNode* result; hrcheck(X::get()->_GetScoredPropertyNode(name, xmlNamespace, &result)); return from_abi(result); }
	ptr<PrintTicketValue> GetPropertyValue(hstring_ref name, hstring_ref xmlNamespace) { PrintTicketValue* result; hrcheck(X::get()->_GetPropertyValue(name, xmlNamespace, &result)); return from_abi(result); }
	ptr<PrintTicketValue> GetScoredPropertyValue(hstring_ref name, hstring_ref xmlNamespace) { PrintTicketValue* result; hrcheck(X::get()->_GetScoredPropertyValue(name, xmlNamespace, &result)); return from_abi(result); }
	IPrintTicketOption_adaptor() {}
};
template<typename X> struct adapt<IPrintTicketOption, X> : Windows::Graphics::Printing::PrintTicket::IPrintTicketOption_adaptor<X> { typedef adapt IPrintTicketOption; };
struct IPrintTicketOption : IPrintTicketOption_raw, generate<IPrintTicketOption> {};

// PrintTicketOption
template<typename X> struct statics<PrintTicketOption, X> : X {
	typedef typename X::root_type PrintTicketOption;
};
struct PrintTicketOption : generate<PrintTicketOption> {};

// IPrintTicketFeature
struct IPrintTicketFeature_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNamespace(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNode(Data::Xml::Dom::IXmlNode* *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _GetOption(HSTRING name, HSTRING xmlNamespace, PrintTicketOption* *result);
	virtual STDMETHODIMP _get_Options(Foundation::Collections::IVectorView<PrintTicketOption*>* *result);
	virtual STDMETHODIMP _GetSelectedOption(PrintTicketOption* *value);
	virtual STDMETHODIMP _SetSelectedOption(PrintTicketOption* value);
	virtual STDMETHODIMP _get_SelectionType(PrintTicketFeatureSelectionType *value);
};
template<typename X> struct IPrintTicketFeature_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketFeature_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketFeature_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PrintTicketOption>>> get() { Foundation::Collections::IVectorView<PrintTicketOption*>* result; hrcheck(enc(&IPrintTicketFeature_adaptor::Options)->_get_Options(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVectorView<ptr<PrintTicketOption>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PrintTicketOption>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PrintTicketOption>>> operator->() { return get(); }
		} Options;
		struct : property {
			PrintTicketFeatureSelectionType get() { PrintTicketFeatureSelectionType value; hrcheck(enc(&IPrintTicketFeature_adaptor::SelectionType)->_get_SelectionType(&value)); return value; }
			PrintTicketFeatureSelectionType operator()() { return get(); }
			operator PrintTicketFeatureSelectionType () { return get(); }
		} SelectionType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketFeature_adaptor::XmlNamespace)->_get_XmlNamespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} XmlNamespace;
		struct : property {
			ptr<Data::Xml::Dom::IXmlNode> get() { Data::Xml::Dom::IXmlNode* value; hrcheck(enc(&IPrintTicketFeature_adaptor::XmlNode)->_get_XmlNode(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::IXmlNode> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::IXmlNode> () { return get(); }
			ptr<Data::Xml::Dom::IXmlNode> operator->() { return get(); }
		} XmlNode;
	};
	ptr<PrintTicketOption> GetOption(hstring_ref name, hstring_ref xmlNamespace) { PrintTicketOption* result; hrcheck(X::get()->_GetOption(name, xmlNamespace, &result)); return from_abi(result); }
	ptr<PrintTicketOption> GetSelectedOption() { PrintTicketOption* value; hrcheck(X::get()->_GetSelectedOption(&value)); return from_abi(value); }
	void SetSelectedOption(pptr<PrintTicketOption> value) { hrcheck(X::get()->_SetSelectedOption(value)); }
	IPrintTicketFeature_adaptor() {}
};
template<typename X> struct adapt<IPrintTicketFeature, X> : Windows::Graphics::Printing::PrintTicket::IPrintTicketFeature_adaptor<X> { typedef adapt IPrintTicketFeature; };
struct IPrintTicketFeature : IPrintTicketFeature_raw, generate<IPrintTicketFeature> {};

// PrintTicketFeature
template<typename X> struct statics<PrintTicketFeature, X> : X {
	typedef typename X::root_type PrintTicketFeature;
};
struct PrintTicketFeature : generate<PrintTicketFeature> {};

// IPrintTicketParameterDefinition
struct IPrintTicketParameterDefinition_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNamespace(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNode(Data::Xml::Dom::IXmlNode* *value);
	virtual STDMETHODIMP _get_DataType(PrintTicketParameterDataType *value);
	virtual STDMETHODIMP _get_UnitType(HSTRING *value);
	virtual STDMETHODIMP _get_RangeMin(int *value);
	virtual STDMETHODIMP _get_RangeMax(int *value);
};
template<typename X> struct IPrintTicketParameterDefinition_adaptor : X {
	union {
		struct : property {
			PrintTicketParameterDataType get() { PrintTicketParameterDataType value; hrcheck(enc(&IPrintTicketParameterDefinition_adaptor::DataType)->_get_DataType(&value)); return value; }
			PrintTicketParameterDataType operator()() { return get(); }
			operator PrintTicketParameterDataType () { return get(); }
		} DataType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketParameterDefinition_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			int get() { int value; hrcheck(enc(&IPrintTicketParameterDefinition_adaptor::RangeMax)->_get_RangeMax(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RangeMax;
		struct : property {
			int get() { int value; hrcheck(enc(&IPrintTicketParameterDefinition_adaptor::RangeMin)->_get_RangeMin(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RangeMin;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketParameterDefinition_adaptor::UnitType)->_get_UnitType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UnitType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketParameterDefinition_adaptor::XmlNamespace)->_get_XmlNamespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} XmlNamespace;
		struct : property {
			ptr<Data::Xml::Dom::IXmlNode> get() { Data::Xml::Dom::IXmlNode* value; hrcheck(enc(&IPrintTicketParameterDefinition_adaptor::XmlNode)->_get_XmlNode(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::IXmlNode> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::IXmlNode> () { return get(); }
			ptr<Data::Xml::Dom::IXmlNode> operator->() { return get(); }
		} XmlNode;
	};
	IPrintTicketParameterDefinition_adaptor() {}
};
template<typename X> struct adapt<IPrintTicketParameterDefinition, X> : Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterDefinition_adaptor<X> { typedef adapt IPrintTicketParameterDefinition; };
struct IPrintTicketParameterDefinition : IPrintTicketParameterDefinition_raw, generate<IPrintTicketParameterDefinition> {};

// PrintTicketParameterDefinition
template<typename X> struct statics<PrintTicketParameterDefinition, X> : X {
	typedef typename X::root_type PrintTicketParameterDefinition;
};
struct PrintTicketParameterDefinition : generate<PrintTicketParameterDefinition> {};

// IPrintTicketCapabilities
struct IPrintTicketCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNamespace(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNode(Data::Xml::Dom::IXmlNode* *value);
	virtual STDMETHODIMP _get_DocumentBindingFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentCollateFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentDuplexFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentHolePunchFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentInputBinFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentNUpFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentStapleFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_JobPasscodeFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageBorderlessFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageMediaSizeFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageMediaTypeFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageOrientationFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageOutputColorFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageOutputQualityFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageResolutionFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _GetFeature(HSTRING name, HSTRING xmlNamespace, PrintTicketFeature* *result);
	virtual STDMETHODIMP _GetParameterDefinition(HSTRING name, HSTRING xmlNamespace, PrintTicketParameterDefinition* *result);
};
template<typename X> struct IPrintTicketCapabilities_adaptor : X {
	union {
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::DocumentBindingFeature)->_get_DocumentBindingFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentBindingFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::DocumentCollateFeature)->_get_DocumentCollateFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentCollateFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::DocumentDuplexFeature)->_get_DocumentDuplexFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentDuplexFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::DocumentHolePunchFeature)->_get_DocumentHolePunchFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentHolePunchFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::DocumentInputBinFeature)->_get_DocumentInputBinFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentInputBinFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::DocumentNUpFeature)->_get_DocumentNUpFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentNUpFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::DocumentStapleFeature)->_get_DocumentStapleFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentStapleFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::JobPasscodeFeature)->_get_JobPasscodeFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} JobPasscodeFeature;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::PageBorderlessFeature)->_get_PageBorderlessFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageBorderlessFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::PageMediaSizeFeature)->_get_PageMediaSizeFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageMediaSizeFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::PageMediaTypeFeature)->_get_PageMediaTypeFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageMediaTypeFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::PageOrientationFeature)->_get_PageOrientationFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageOrientationFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::PageOutputColorFeature)->_get_PageOutputColorFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageOutputColorFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::PageOutputQualityFeature)->_get_PageOutputQualityFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageOutputQualityFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::PageResolutionFeature)->_get_PageResolutionFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageResolutionFeature;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::XmlNamespace)->_get_XmlNamespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} XmlNamespace;
		struct : property {
			ptr<Data::Xml::Dom::IXmlNode> get() { Data::Xml::Dom::IXmlNode* value; hrcheck(enc(&IPrintTicketCapabilities_adaptor::XmlNode)->_get_XmlNode(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::IXmlNode> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::IXmlNode> () { return get(); }
			ptr<Data::Xml::Dom::IXmlNode> operator->() { return get(); }
		} XmlNode;
	};
	ptr<PrintTicketFeature> GetFeature(hstring_ref name, hstring_ref xmlNamespace) { PrintTicketFeature* result; hrcheck(X::get()->_GetFeature(name, xmlNamespace, &result)); return from_abi(result); }
	ptr<PrintTicketParameterDefinition> GetParameterDefinition(hstring_ref name, hstring_ref xmlNamespace) { PrintTicketParameterDefinition* result; hrcheck(X::get()->_GetParameterDefinition(name, xmlNamespace, &result)); return from_abi(result); }
	IPrintTicketCapabilities_adaptor() {}
};
template<typename X> struct adapt<IPrintTicketCapabilities, X> : Windows::Graphics::Printing::PrintTicket::IPrintTicketCapabilities_adaptor<X> { typedef adapt IPrintTicketCapabilities; };
struct IPrintTicketCapabilities : IPrintTicketCapabilities_raw, generate<IPrintTicketCapabilities> {};

// PrintTicketCapabilities
template<typename X> struct statics<PrintTicketCapabilities, X> : X {
	typedef typename X::root_type PrintTicketCapabilities;
};
struct PrintTicketCapabilities : generate<PrintTicketCapabilities> {};

// IPrintTicketParameterInitializer
struct IPrintTicketParameterInitializer_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNamespace(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNode(Data::Xml::Dom::IXmlNode* *value);
	virtual STDMETHODIMP _put_Value(PrintTicketValue* value);
	virtual STDMETHODIMP _get_Value(PrintTicketValue* *value);
};
template<typename X> struct IPrintTicketParameterInitializer_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketParameterInitializer_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<PrintTicketValue> get() { PrintTicketValue* value; hrcheck(enc(&IPrintTicketParameterInitializer_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<PrintTicketValue> operator()() { return get(); }
			operator ptr<PrintTicketValue> () { return get(); }
			ptr<PrintTicketValue> operator->() { return get(); }
			void put(pptr<PrintTicketValue> value) { hrcheck(enc(&IPrintTicketParameterInitializer_adaptor::Value)->_put_Value(value)); }
			void operator=(pptr<PrintTicketValue> value) { put(value); }
			void operator()(pptr<PrintTicketValue> value) { put(value); }
		} Value;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrintTicketParameterInitializer_adaptor::XmlNamespace)->_get_XmlNamespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} XmlNamespace;
		struct : property {
			ptr<Data::Xml::Dom::IXmlNode> get() { Data::Xml::Dom::IXmlNode* value; hrcheck(enc(&IPrintTicketParameterInitializer_adaptor::XmlNode)->_get_XmlNode(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::IXmlNode> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::IXmlNode> () { return get(); }
			ptr<Data::Xml::Dom::IXmlNode> operator->() { return get(); }
		} XmlNode;
	};
	IPrintTicketParameterInitializer_adaptor() {}
};
template<typename X> struct adapt<IPrintTicketParameterInitializer, X> : Windows::Graphics::Printing::PrintTicket::IPrintTicketParameterInitializer_adaptor<X> { typedef adapt IPrintTicketParameterInitializer; };
struct IPrintTicketParameterInitializer : IPrintTicketParameterInitializer_raw, generate<IPrintTicketParameterInitializer> {};

// PrintTicketParameterInitializer
template<typename X> struct statics<PrintTicketParameterInitializer, X> : X {
	typedef typename X::root_type PrintTicketParameterInitializer;
};
struct PrintTicketParameterInitializer : generate<PrintTicketParameterInitializer> {};

// IWorkflowPrintTicketValidationResult
struct IWorkflowPrintTicketValidationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Validated(bool *value);
	virtual STDMETHODIMP _get_ExtendedError(Foundation::HResult *value);
};
template<typename X> struct IWorkflowPrintTicketValidationResult_adaptor : X {
	union {
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IWorkflowPrintTicketValidationResult_adaptor::ExtendedError)->_get_ExtendedError(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ExtendedError;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWorkflowPrintTicketValidationResult_adaptor::Validated)->_get_Validated(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Validated;
	};
	IWorkflowPrintTicketValidationResult_adaptor() {}
};
template<typename X> struct adapt<IWorkflowPrintTicketValidationResult, X> : Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicketValidationResult_adaptor<X> { typedef adapt IWorkflowPrintTicketValidationResult; };
struct IWorkflowPrintTicketValidationResult : IWorkflowPrintTicketValidationResult_raw, generate<IWorkflowPrintTicketValidationResult> {};

// WorkflowPrintTicketValidationResult
template<typename X> struct statics<WorkflowPrintTicketValidationResult, X> : X {
	typedef typename X::root_type WorkflowPrintTicketValidationResult;
};
struct WorkflowPrintTicketValidationResult : generate<WorkflowPrintTicketValidationResult> {};

// IWorkflowPrintTicket
struct IWorkflowPrintTicket_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNamespace(HSTRING *value);
	virtual STDMETHODIMP _get_XmlNode(Data::Xml::Dom::IXmlNode* *value);
	virtual STDMETHODIMP _GetCapabilities(PrintTicketCapabilities* *result);
	virtual STDMETHODIMP _get_DocumentBindingFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentCollateFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentDuplexFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentHolePunchFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentInputBinFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentNUpFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_DocumentStapleFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_JobPasscodeFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageBorderlessFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageMediaSizeFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageMediaTypeFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageOrientationFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageOutputColorFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageOutputQualityFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _get_PageResolutionFeature(PrintTicketFeature* *value);
	virtual STDMETHODIMP _GetFeature(HSTRING name, HSTRING xmlNamespace, PrintTicketFeature* *result);
	virtual STDMETHODIMP _NotifyXmlChangedAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ValidateAsync(Foundation::IAsyncOperation<WorkflowPrintTicketValidationResult*>* *operation);
	virtual STDMETHODIMP _GetParameterInitializer(HSTRING name, HSTRING xmlNamespace, PrintTicketParameterInitializer* *result);
	virtual STDMETHODIMP _SetParameterInitializerAsInteger(HSTRING name, HSTRING xmlNamespace, int integerValue, PrintTicketParameterInitializer* *result);
	virtual STDMETHODIMP _SetParameterInitializerAsString(HSTRING name, HSTRING xmlNamespace, HSTRING stringValue, PrintTicketParameterInitializer* *result);
	virtual STDMETHODIMP _MergeAndValidateTicket(WorkflowPrintTicket* deltaShemaTicket, WorkflowPrintTicket* *result);
};
template<typename X> struct IWorkflowPrintTicket_adaptor : X {
	union {
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::DocumentBindingFeature)->_get_DocumentBindingFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentBindingFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::DocumentCollateFeature)->_get_DocumentCollateFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentCollateFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::DocumentDuplexFeature)->_get_DocumentDuplexFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentDuplexFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::DocumentHolePunchFeature)->_get_DocumentHolePunchFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentHolePunchFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::DocumentInputBinFeature)->_get_DocumentInputBinFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentInputBinFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::DocumentNUpFeature)->_get_DocumentNUpFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentNUpFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::DocumentStapleFeature)->_get_DocumentStapleFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} DocumentStapleFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::JobPasscodeFeature)->_get_JobPasscodeFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} JobPasscodeFeature;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::PageBorderlessFeature)->_get_PageBorderlessFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageBorderlessFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::PageMediaSizeFeature)->_get_PageMediaSizeFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageMediaSizeFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::PageMediaTypeFeature)->_get_PageMediaTypeFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageMediaTypeFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::PageOrientationFeature)->_get_PageOrientationFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageOrientationFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::PageOutputColorFeature)->_get_PageOutputColorFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageOutputColorFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::PageOutputQualityFeature)->_get_PageOutputQualityFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageOutputQualityFeature;
		struct : property {
			ptr<PrintTicketFeature> get() { PrintTicketFeature* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::PageResolutionFeature)->_get_PageResolutionFeature(&value)); return from_abi(value); }
			ptr<PrintTicketFeature> operator()() { return get(); }
			operator ptr<PrintTicketFeature> () { return get(); }
			ptr<PrintTicketFeature> operator->() { return get(); }
		} PageResolutionFeature;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::XmlNamespace)->_get_XmlNamespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} XmlNamespace;
		struct : property {
			ptr<Data::Xml::Dom::IXmlNode> get() { Data::Xml::Dom::IXmlNode* value; hrcheck(enc(&IWorkflowPrintTicket_adaptor::XmlNode)->_get_XmlNode(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::IXmlNode> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::IXmlNode> () { return get(); }
			ptr<Data::Xml::Dom::IXmlNode> operator->() { return get(); }
		} XmlNode;
	};
	ptr<PrintTicketCapabilities> GetCapabilities() { PrintTicketCapabilities* result; hrcheck(X::get()->_GetCapabilities(&result)); return from_abi(result); }
	ptr<PrintTicketFeature> GetFeature(hstring_ref name, hstring_ref xmlNamespace) { PrintTicketFeature* result; hrcheck(X::get()->_GetFeature(name, xmlNamespace, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> NotifyXmlChangedAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_NotifyXmlChangedAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<WorkflowPrintTicketValidationResult>>> ValidateAsync() { Foundation::IAsyncOperation<WorkflowPrintTicketValidationResult*>* operation; hrcheck(X::get()->_ValidateAsync(&operation)); return from_abi(operation); }
	ptr<PrintTicketParameterInitializer> GetParameterInitializer(hstring_ref name, hstring_ref xmlNamespace) { PrintTicketParameterInitializer* result; hrcheck(X::get()->_GetParameterInitializer(name, xmlNamespace, &result)); return from_abi(result); }
	ptr<PrintTicketParameterInitializer> SetParameterInitializerAsInteger(hstring_ref name, hstring_ref xmlNamespace, int integerValue) { PrintTicketParameterInitializer* result; hrcheck(X::get()->_SetParameterInitializerAsInteger(name, xmlNamespace, integerValue, &result)); return from_abi(result); }
	ptr<PrintTicketParameterInitializer> SetParameterInitializerAsString(hstring_ref name, hstring_ref xmlNamespace, hstring_ref stringValue) { PrintTicketParameterInitializer* result; hrcheck(X::get()->_SetParameterInitializerAsString(name, xmlNamespace, stringValue, &result)); return from_abi(result); }
	ptr<WorkflowPrintTicket> MergeAndValidateTicket(pptr<WorkflowPrintTicket> deltaShemaTicket) { WorkflowPrintTicket* result; hrcheck(X::get()->_MergeAndValidateTicket(deltaShemaTicket, &result)); return from_abi(result); }
	IWorkflowPrintTicket_adaptor() {}
};
template<typename X> struct adapt<IWorkflowPrintTicket, X> : Windows::Graphics::Printing::PrintTicket::IWorkflowPrintTicket_adaptor<X> { typedef adapt IWorkflowPrintTicket; };
struct IWorkflowPrintTicket : IWorkflowPrintTicket_raw, generate<IWorkflowPrintTicket> {};

// WorkflowPrintTicket
template<typename X> struct statics<WorkflowPrintTicket, X> : X {
	typedef typename X::root_type WorkflowPrintTicket;
};
struct WorkflowPrintTicket : generate<WorkflowPrintTicket> {};
}}}}
} // namespace iso_winrt
