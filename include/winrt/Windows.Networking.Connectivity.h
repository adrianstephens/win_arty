#pragma once
// generated by isopod tools
// namespaces:
// Windows.Networking.Connectivity

#include "Windows.Networking.Connectivity.0.h"
#include "Windows.Networking.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IBuffer;
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::Networking::Connectivity::IIPInformation> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IPInformation> : class_type<Platform::Object, Windows::Networking::Connectivity::IIPInformation> {};
template<> struct def<Windows::Networking::Connectivity::NetworkCostType> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::NetworkConnectivityLevel> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::NetworkTypes> : enum_type<unsigned> {};
template<> struct def<Windows::Networking::Connectivity::RoamingStates> : enum_type<unsigned> {};
template<> struct def<Windows::Networking::Connectivity::NetworkAuthenticationType> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::NetworkEncryptionType> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::DomainConnectivityLevel> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::DataUsageGranularity> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::CellularApnAuthenticationType> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::TriStates> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::NetworkUsageStates> : value_type<Windows::Networking::Connectivity::TriStates, Windows::Networking::Connectivity::TriStates> {};
template<> struct def<Windows::Networking::Connectivity::IDataUsage> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IDataPlanUsage> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IDataPlanStatus> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::DataPlanUsage> : class_type<Platform::Object, Windows::Networking::Connectivity::IDataPlanUsage> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionCost> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionCost2> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::INetworkSecuritySettings> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionProfile> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::ConnectionCost> : class_type<Platform::Object, Windows::Networking::Connectivity::IConnectionCost, Windows::Networking::Connectivity::IConnectionCost2> {};
template<> struct def<Windows::Networking::Connectivity::DataPlanStatus> : class_type<Platform::Object, Windows::Networking::Connectivity::IDataPlanStatus> {};
template<> struct def<Windows::Networking::Connectivity::INetworkAdapter> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::NetworkAdapter> : class_type<Platform::Object, Windows::Networking::Connectivity::INetworkAdapter> {};
template<> struct def<Windows::Networking::Connectivity::DataUsage> : class_type<Platform::Object, Windows::Networking::Connectivity::IDataUsage> {};
template<> struct def<Windows::Networking::Connectivity::NetworkSecuritySettings> : class_type<Platform::Object, Windows::Networking::Connectivity::INetworkSecuritySettings> {};
template<> struct def<Windows::Networking::Connectivity::IWlanConnectionProfileDetails> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IConnectivityInterval> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::INetworkUsage> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IAttributedNetworkUsage> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IProviderNetworkUsage> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionProfile2> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::WlanConnectionProfileDetails> : class_type<Platform::Object, Windows::Networking::Connectivity::IWlanConnectionProfileDetails> {};
template<> struct def<Windows::Networking::Connectivity::NetworkUsage> : class_type<Platform::Object, Windows::Networking::Connectivity::INetworkUsage> {};
template<> struct def<Windows::Networking::Connectivity::ConnectivityInterval> : class_type<Platform::Object, Windows::Networking::Connectivity::IConnectivityInterval> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionProfile3> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::AttributedNetworkUsage> : class_type<Platform::Object, Windows::Networking::Connectivity::IAttributedNetworkUsage> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionProfile4> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::ProviderNetworkUsage> : class_type<Platform::Object, Windows::Networking::Connectivity::IProviderNetworkUsage> {};
template<> struct def<Windows::Networking::Connectivity::ILanIdentifierData> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::ILanIdentifier> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::LanIdentifierData> : class_type<Platform::Object, Windows::Networking::Connectivity::ILanIdentifierData> {};
template<> struct def<Windows::Networking::Connectivity::NetworkStatusChangedEventHandler> : delegate_type {};
template<> struct def<Windows::Networking::Connectivity::INetworkInformationStatics> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::ConnectionProfile> : class_type<Platform::Object, Windows::Networking::Connectivity::IConnectionProfile, Windows::Networking::Connectivity::IConnectionProfile2, Windows::Networking::Connectivity::IConnectionProfile3, Windows::Networking::Connectivity::IConnectionProfile4> {};
template<> struct def<Windows::Networking::Connectivity::LanIdentifier> : class_type<Platform::Object, Windows::Networking::Connectivity::ILanIdentifier> {};
template<> struct def<Windows::Networking::Connectivity::IProxyConfiguration> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::ProxyConfiguration> : class_type<Platform::Object, Windows::Networking::Connectivity::IProxyConfiguration> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionProfileFilter> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionProfileFilter2> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionProfileFilter3> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::INetworkInformationStatics2> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::ConnectionProfileFilter> : class_type<Platform::Object, Windows::Networking::Connectivity::IConnectionProfileFilter, Windows::Networking::Connectivity::IConnectionProfileFilter2, Windows::Networking::Connectivity::IConnectionProfileFilter3> {};
template<> struct def<Windows::Networking::Connectivity::INetworkItem> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::NetworkItem> : class_type<Platform::Object, Windows::Networking::Connectivity::INetworkItem> {};
template<> struct def<Windows::Networking::Connectivity::IConnectionSession> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Networking::Connectivity::IRoutePolicy> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IRoutePolicyFactory> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::RoutePolicy> : class_type<Platform::Object, Windows::Networking::Connectivity::IRoutePolicy>, custom_activators {};
template<> struct def<Windows::Networking::Connectivity::ICellularApnContext> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::ICellularApnContext2> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IConnectivityManagerStatics> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::CellularApnContext> : class_type<Platform::Object, Windows::Networking::Connectivity::ICellularApnContext, Windows::Networking::Connectivity::ICellularApnContext2> {};
template<> struct def<Windows::Networking::Connectivity::ConnectionSession> : class_type<Platform::Object, Windows::Networking::Connectivity::IConnectionSession> {};
template<> struct def<Windows::Networking::Connectivity::INetworkStateChangeEventDetails> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::INetworkStateChangeEventDetails2> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::NetworkInformation> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Networking::Connectivity::ConnectivityManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Networking::Connectivity::NetworkStateChangeEventDetails> : class_type<Platform::Object, Windows::Networking::Connectivity::INetworkStateChangeEventDetails, Windows::Networking::Connectivity::INetworkStateChangeEventDetails2> {};
template<> struct def<Windows::Networking::Connectivity::WwanContract> : value_type<> {};
template<> struct def<Windows::Networking::Connectivity::WwanNetworkRegistrationState> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::WwanNetworkIPKind> : enum_type<int> {};
template<> struct def<Windows::Networking::Connectivity::WwanDataClass> : enum_type<unsigned> {};
template<> struct def<Windows::Networking::Connectivity::IWwanConnectionProfileDetails> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::IWwanConnectionProfileDetails2> : interface_type<> {};
template<> struct def<Windows::Networking::Connectivity::WwanConnectionProfileDetails> : class_type<Platform::Object, Windows::Networking::Connectivity::IWwanConnectionProfileDetails, Windows::Networking::Connectivity::IWwanConnectionProfileDetails2> {};

// uuids

template<> struct uuid<Windows::Networking::Connectivity::IIPInformation> { define_guid(0xD85145E0, 0x138F, 0x47D7, 0x9B, 0x3A, 0x36, 0xBB, 0x48, 0x8C, 0xEF, 0x33);};
template<> struct uuid<Windows::Networking::Connectivity::IDataUsage> { define_guid(0xC1431DD3, 0xB146, 0x4D39, 0xB9, 0x59, 0xC, 0x69, 0xB0, 0x96, 0xC5, 0x12);};
template<> struct uuid<Windows::Networking::Connectivity::IDataPlanUsage> { define_guid(0xB921492D, 0x3B44, 0x47FF, 0xB3, 0x61, 0xBE, 0x59, 0xE6, 0x9E, 0xD1, 0xB0);};
template<> struct uuid<Windows::Networking::Connectivity::IDataPlanStatus> { define_guid(0x977A8B8C, 0x3885, 0x40F3, 0x88, 0x51, 0x42, 0xCD, 0x2B, 0xD5, 0x68, 0xBB);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionCost> { define_guid(0xBAD7D829, 0x3416, 0x4B10, 0xA2, 0x2, 0xBA, 0xC0, 0xB0, 0x75, 0xBD, 0xAE);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionCost2> { define_guid(0x8E113A05, 0xE209, 0x4549, 0xBB, 0x25, 0x5E, 0xD, 0xB6, 0x91, 0xCB, 0x5);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkSecuritySettings> { define_guid(0x7CA07E8D, 0x917B, 0x4B5F, 0xB8, 0x4D, 0x28, 0xF7, 0xA5, 0xAC, 0x54, 0x2);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionProfile> { define_guid(0x71BA143C, 0x598E, 0x49D0, 0x84, 0xEB, 0x8F, 0xEB, 0xAE, 0xDC, 0xC1, 0x95);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkAdapter> { define_guid(0x3B542E03, 0x5388, 0x496C, 0xA8, 0xA3, 0xAF, 0xFD, 0x39, 0xAE, 0xC2, 0xE6);};
template<> struct uuid<Windows::Networking::Connectivity::IWlanConnectionProfileDetails> { define_guid(0x562098CB, 0xB35A, 0x4BF1, 0xA8, 0x84, 0xB7, 0x55, 0x7E, 0x88, 0xFF, 0x86);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectivityInterval> { define_guid(0x4FAA3FFF, 0x6746, 0x4824, 0xA9, 0x64, 0xEE, 0xD8, 0xE8, 0x7F, 0x87, 0x9);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkUsage> { define_guid(0x49DA8FCE, 0x9985, 0x4927, 0xBF, 0x5B, 0x7, 0x2B, 0x5C, 0x65, 0xF8, 0xD9);};
template<> struct uuid<Windows::Networking::Connectivity::IAttributedNetworkUsage> { define_guid(0xF769B039, 0xECA2, 0x45EB, 0xAD, 0xE1, 0xB0, 0x36, 0x8B, 0x75, 0x6C, 0x49);};
template<> struct uuid<Windows::Networking::Connectivity::IProviderNetworkUsage> { define_guid(0x5EC69E04, 0x7931, 0x48C8, 0xB8, 0xF3, 0x46, 0x30, 0xF, 0xA4, 0x27, 0x28);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionProfile2> { define_guid(0xE2045145, 0x4C9F, 0x400C, 0x91, 0x50, 0x7E, 0xC7, 0xD6, 0xE2, 0x88, 0x8A);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionProfile3> { define_guid(0x578C2528, 0x4CD9, 0x4161, 0x80, 0x45, 0x20, 0x1C, 0xFD, 0x5B, 0x11, 0x5C);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionProfile4> { define_guid(0x7A2D42CD, 0x81E0, 0x4AE6, 0xAB, 0xED, 0xAB, 0x9C, 0xA1, 0x3E, 0xB7, 0x14);};
template<> struct uuid<Windows::Networking::Connectivity::ILanIdentifierData> { define_guid(0xA74E83C3, 0xD639, 0x45BE, 0xA3, 0x6A, 0xC4, 0xE4, 0xAE, 0xAF, 0x6D, 0x9B);};
template<> struct uuid<Windows::Networking::Connectivity::ILanIdentifier> { define_guid(0x48AA53AA, 0x1108, 0x4546, 0xA6, 0xCB, 0x9A, 0x74, 0xDA, 0x4B, 0x7B, 0xA0);};
template<> struct uuid<Windows::Networking::Connectivity::NetworkStatusChangedEventHandler> { define_guid(0x71BA143F, 0x598E, 0x49D0, 0x84, 0xEB, 0x8F, 0xEB, 0xAE, 0xDC, 0xC1, 0x95);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkInformationStatics> { define_guid(0x5074F851, 0x950D, 0x4165, 0x9C, 0x15, 0x36, 0x56, 0x19, 0x48, 0x1E, 0xEA);};
template<> struct uuid<Windows::Networking::Connectivity::IProxyConfiguration> { define_guid(0xEF3A60B4, 0x9004, 0x4DD6, 0xB7, 0xD8, 0xB3, 0xE5, 0x2, 0xF4, 0xAA, 0xD0);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionProfileFilter> { define_guid(0x204C7CC8, 0xBD2D, 0x4E8D, 0xA4, 0xB3, 0x45, 0x5E, 0xC3, 0x37, 0x38, 0x8A);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionProfileFilter2> { define_guid(0xCD068EE1, 0xC3FC, 0x4FAD, 0x9D, 0xDC, 0x59, 0x3F, 0xAA, 0x4B, 0x78, 0x85);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionProfileFilter3> { define_guid(0xAAA09C0, 0x5014, 0x447C, 0x88, 0x9, 0xAE, 0xE4, 0xCB, 0xA, 0xF9, 0x4A);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkInformationStatics2> { define_guid(0x459CED14, 0x2832, 0x49B6, 0xBA, 0x6E, 0xE2, 0x65, 0xF0, 0x47, 0x86, 0xA8);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkItem> { define_guid(0x1BC4D39, 0xF5E0, 0x4567, 0xA2, 0x8C, 0x42, 0x8, 0xC, 0x83, 0x1B, 0x2B);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectionSession> { define_guid(0xFF905D4C, 0xF83B, 0x41B0, 0x8A, 0xC, 0x14, 0x62, 0xD9, 0xC5, 0x6B, 0x73);};
template<> struct uuid<Windows::Networking::Connectivity::IRoutePolicy> { define_guid(0x11ABC4AC, 0xFC7, 0x42E4, 0x87, 0x42, 0x56, 0x99, 0x23, 0xB1, 0xCA, 0x11);};
template<> struct uuid<Windows::Networking::Connectivity::IRoutePolicyFactory> { define_guid(0x36027933, 0xA18E, 0x4DB5, 0xA6, 0x97, 0xF5, 0x8F, 0xA7, 0x36, 0x4E, 0x44);};
template<> struct uuid<Windows::Networking::Connectivity::ICellularApnContext> { define_guid(0x6FA529F4, 0xEFFD, 0x4542, 0x9A, 0xB2, 0x70, 0x5B, 0xBF, 0x94, 0x94, 0x3A);};
template<> struct uuid<Windows::Networking::Connectivity::ICellularApnContext2> { define_guid(0x76B0EB1A, 0xAC49, 0x4350, 0xB1, 0xE5, 0xDC, 0x47, 0x63, 0xBC, 0x69, 0xC7);};
template<> struct uuid<Windows::Networking::Connectivity::IConnectivityManagerStatics> { define_guid(0x5120D4B1, 0x4FB1, 0x48B0, 0xAF, 0xC9, 0x42, 0xE0, 0x9, 0x2A, 0x81, 0x64);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkStateChangeEventDetails> { define_guid(0x1F0CF333, 0xD7A6, 0x44DD, 0xA4, 0xE9, 0x68, 0x7C, 0x47, 0x6B, 0x90, 0x3D);};
template<> struct uuid<Windows::Networking::Connectivity::INetworkStateChangeEventDetails2> { define_guid(0xD643C0E8, 0x30D3, 0x4F6A, 0xAD, 0x47, 0x6A, 0x18, 0x73, 0xCE, 0xB3, 0xC1);};
template<> struct uuid<Windows::Networking::Connectivity::IWwanConnectionProfileDetails> { define_guid(0xE4DA8FE, 0x835F, 0x4DF3, 0x82, 0xFD, 0xDF, 0x55, 0x6E, 0xBC, 0x9, 0xEF);};
template<> struct uuid<Windows::Networking::Connectivity::IWwanConnectionProfileDetails2> { define_guid(0x7A754EDE, 0xA1ED, 0x48B2, 0x8E, 0x92, 0xB4, 0x60, 0x3, 0x3D, 0x52, 0xE2);};

// types

namespace Windows { namespace Networking { namespace Connectivity {

// IIPInformation
struct IIPInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAdapter(Connectivity::NetworkAdapter* *value);
	virtual STDMETHODIMP _get_PrefixLength(Foundation::IReference<unsigned char>* *value);
};
template<typename X> struct IIPInformation_adaptor : X {
	union {
		struct : property {
			ptr<Connectivity::NetworkAdapter> get() { Connectivity::NetworkAdapter* value; hrcheck(enc(&IIPInformation_adaptor::NetworkAdapter)->_get_NetworkAdapter(&value)); return from_abi(value); }
			ptr<Connectivity::NetworkAdapter> operator()() { return get(); }
			operator ptr<Connectivity::NetworkAdapter> () { return get(); }
			ptr<Connectivity::NetworkAdapter> operator->() { return get(); }
		} NetworkAdapter;
		struct : property {
			ptr<Foundation::IReference<unsigned char>> get() { Foundation::IReference<unsigned char>* value; hrcheck(enc(&IIPInformation_adaptor::PrefixLength)->_get_PrefixLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned char>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned char>> () { return get(); }
			ptr<Foundation::IReference<unsigned char>> operator->() { return get(); }
		} PrefixLength;
	};
	IIPInformation_adaptor() {}
};
template<typename X> struct adapt<IIPInformation, X> : Windows::Networking::Connectivity::IIPInformation_adaptor<X> { typedef adapt IIPInformation; };
struct IIPInformation : IIPInformation_raw, generate<IIPInformation> {};

// IPInformation
template<typename X> struct statics<IPInformation, X> : X {
	typedef typename X::root_type IPInformation;
};
struct IPInformation : generate<IPInformation> {};

// IDataUsage
struct IDataUsage_raw : IInspectable {
	virtual STDMETHODIMP _get_BytesSent(unsigned __int64 *value);
	virtual STDMETHODIMP _get_BytesReceived(unsigned __int64 *value);
};
template<typename X> struct IDataUsage_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IDataUsage_adaptor::BytesReceived)->_get_BytesReceived(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesReceived;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IDataUsage_adaptor::BytesSent)->_get_BytesSent(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesSent;
	};
	IDataUsage_adaptor() {}
};
template<typename X> struct adapt<IDataUsage, X> : Windows::Networking::Connectivity::IDataUsage_adaptor<X> { typedef adapt IDataUsage; };
struct IDataUsage : IDataUsage_raw, generate<IDataUsage> {};

// IDataPlanUsage
struct IDataPlanUsage_raw : IInspectable {
	virtual STDMETHODIMP _get_MegabytesUsed(unsigned *value);
	virtual STDMETHODIMP _get_LastSyncTime(Foundation::DateTime *value);
};
template<typename X> struct IDataPlanUsage_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IDataPlanUsage_adaptor::LastSyncTime)->_get_LastSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LastSyncTime;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IDataPlanUsage_adaptor::MegabytesUsed)->_get_MegabytesUsed(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MegabytesUsed;
	};
	IDataPlanUsage_adaptor() {}
};
template<typename X> struct adapt<IDataPlanUsage, X> : Windows::Networking::Connectivity::IDataPlanUsage_adaptor<X> { typedef adapt IDataPlanUsage; };
struct IDataPlanUsage : IDataPlanUsage_raw, generate<IDataPlanUsage> {};

// IDataPlanStatus
struct IDataPlanStatus_raw : IInspectable {
	virtual STDMETHODIMP _get_DataPlanUsage(Connectivity::DataPlanUsage* *value);
	virtual STDMETHODIMP _get_DataLimitInMegabytes(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_InboundBitsPerSecond(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_OutboundBitsPerSecond(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_NextBillingCycle(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_MaxTransferSizeInMegabytes(Foundation::IReference<unsigned>* *value);
};
template<typename X> struct IDataPlanStatus_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IDataPlanStatus_adaptor::DataLimitInMegabytes)->_get_DataLimitInMegabytes(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} DataLimitInMegabytes;
		struct : property {
			ptr<Connectivity::DataPlanUsage> get() { Connectivity::DataPlanUsage* value; hrcheck(enc(&IDataPlanStatus_adaptor::DataPlanUsage)->_get_DataPlanUsage(&value)); return from_abi(value); }
			ptr<Connectivity::DataPlanUsage> operator()() { return get(); }
			operator ptr<Connectivity::DataPlanUsage> () { return get(); }
			ptr<Connectivity::DataPlanUsage> operator->() { return get(); }
		} DataPlanUsage;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IDataPlanStatus_adaptor::InboundBitsPerSecond)->_get_InboundBitsPerSecond(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} InboundBitsPerSecond;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IDataPlanStatus_adaptor::MaxTransferSizeInMegabytes)->_get_MaxTransferSizeInMegabytes(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} MaxTransferSizeInMegabytes;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IDataPlanStatus_adaptor::NextBillingCycle)->_get_NextBillingCycle(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} NextBillingCycle;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IDataPlanStatus_adaptor::OutboundBitsPerSecond)->_get_OutboundBitsPerSecond(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} OutboundBitsPerSecond;
	};
	IDataPlanStatus_adaptor() {}
};
template<typename X> struct adapt<IDataPlanStatus, X> : Windows::Networking::Connectivity::IDataPlanStatus_adaptor<X> { typedef adapt IDataPlanStatus; };
struct IDataPlanStatus : IDataPlanStatus_raw, generate<IDataPlanStatus> {};

// DataPlanUsage
template<typename X> struct statics<DataPlanUsage, X> : X {
	typedef typename X::root_type DataPlanUsage;
};
struct DataPlanUsage : generate<DataPlanUsage> {};

// IConnectionCost
struct IConnectionCost_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkCostType(Connectivity::NetworkCostType *value);
	virtual STDMETHODIMP _get_Roaming(bool *value);
	virtual STDMETHODIMP _get_OverDataLimit(bool *value);
	virtual STDMETHODIMP _get_ApproachingDataLimit(bool *value);
};
template<typename X> struct IConnectionCost_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionCost_adaptor::ApproachingDataLimit)->_get_ApproachingDataLimit(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ApproachingDataLimit;
		struct : property {
			Connectivity::NetworkCostType get() { Connectivity::NetworkCostType value; hrcheck(enc(&IConnectionCost_adaptor::NetworkCostType)->_get_NetworkCostType(&value)); return value; }
			Connectivity::NetworkCostType operator()() { return get(); }
			operator Connectivity::NetworkCostType () { return get(); }
		} NetworkCostType;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionCost_adaptor::OverDataLimit)->_get_OverDataLimit(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} OverDataLimit;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionCost_adaptor::Roaming)->_get_Roaming(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Roaming;
	};
	IConnectionCost_adaptor() {}
};
template<typename X> struct adapt<IConnectionCost, X> : Windows::Networking::Connectivity::IConnectionCost_adaptor<X> { typedef adapt IConnectionCost; };
struct IConnectionCost : IConnectionCost_raw, generate<IConnectionCost> {};

// IConnectionCost2
struct IConnectionCost2_raw : IInspectable {
	virtual STDMETHODIMP _get_BackgroundDataUsageRestricted(bool *value);
};
template<typename X> struct IConnectionCost2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionCost2_adaptor::BackgroundDataUsageRestricted)->_get_BackgroundDataUsageRestricted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} BackgroundDataUsageRestricted;
	};
	IConnectionCost2_adaptor() {}
};
template<typename X> struct adapt<IConnectionCost2, X> : Windows::Networking::Connectivity::IConnectionCost2_adaptor<X> { typedef adapt IConnectionCost2; };
struct IConnectionCost2 : IConnectionCost2_raw, generate<IConnectionCost2> {};

// INetworkSecuritySettings
struct INetworkSecuritySettings_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAuthenticationType(Connectivity::NetworkAuthenticationType *value);
	virtual STDMETHODIMP _get_NetworkEncryptionType(Connectivity::NetworkEncryptionType *value);
};
template<typename X> struct INetworkSecuritySettings_adaptor : X {
	union {
		struct : property {
			Connectivity::NetworkAuthenticationType get() { Connectivity::NetworkAuthenticationType value; hrcheck(enc(&INetworkSecuritySettings_adaptor::NetworkAuthenticationType)->_get_NetworkAuthenticationType(&value)); return value; }
			Connectivity::NetworkAuthenticationType operator()() { return get(); }
			operator Connectivity::NetworkAuthenticationType () { return get(); }
		} NetworkAuthenticationType;
		struct : property {
			Connectivity::NetworkEncryptionType get() { Connectivity::NetworkEncryptionType value; hrcheck(enc(&INetworkSecuritySettings_adaptor::NetworkEncryptionType)->_get_NetworkEncryptionType(&value)); return value; }
			Connectivity::NetworkEncryptionType operator()() { return get(); }
			operator Connectivity::NetworkEncryptionType () { return get(); }
		} NetworkEncryptionType;
	};
	INetworkSecuritySettings_adaptor() {}
};
template<typename X> struct adapt<INetworkSecuritySettings, X> : Windows::Networking::Connectivity::INetworkSecuritySettings_adaptor<X> { typedef adapt INetworkSecuritySettings; };
struct INetworkSecuritySettings : INetworkSecuritySettings_raw, generate<INetworkSecuritySettings> {};

// IConnectionProfile
struct IConnectionProfile_raw : IInspectable {
	virtual STDMETHODIMP _get_ProfileName(HSTRING *value);
	virtual STDMETHODIMP _GetNetworkConnectivityLevel(NetworkConnectivityLevel *value);
	virtual STDMETHODIMP _GetNetworkNames(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _GetConnectionCost(ConnectionCost* *value);
	virtual STDMETHODIMP _GetDataPlanStatus(DataPlanStatus* *value);
	virtual STDMETHODIMP _get_NetworkAdapter(Connectivity::NetworkAdapter* *value);
	virtual STDMETHODIMP _GetLocalUsage(Foundation::DateTime StartTime, Foundation::DateTime EndTime, DataUsage* *value);
	virtual STDMETHODIMP _GetLocalUsagePerRoamingStates(Foundation::DateTime StartTime, Foundation::DateTime EndTime, RoamingStates States, DataUsage* *value);
	virtual STDMETHODIMP _get_NetworkSecuritySettings(Connectivity::NetworkSecuritySettings* *value);
};
template<typename X> struct IConnectionProfile_adaptor : X {
	union {
		struct : property {
			ptr<Connectivity::NetworkAdapter> get() { Connectivity::NetworkAdapter* value; hrcheck(enc(&IConnectionProfile_adaptor::NetworkAdapter)->_get_NetworkAdapter(&value)); return from_abi(value); }
			ptr<Connectivity::NetworkAdapter> operator()() { return get(); }
			operator ptr<Connectivity::NetworkAdapter> () { return get(); }
			ptr<Connectivity::NetworkAdapter> operator->() { return get(); }
		} NetworkAdapter;
		struct : property {
			ptr<Connectivity::NetworkSecuritySettings> get() { Connectivity::NetworkSecuritySettings* value; hrcheck(enc(&IConnectionProfile_adaptor::NetworkSecuritySettings)->_get_NetworkSecuritySettings(&value)); return from_abi(value); }
			ptr<Connectivity::NetworkSecuritySettings> operator()() { return get(); }
			operator ptr<Connectivity::NetworkSecuritySettings> () { return get(); }
			ptr<Connectivity::NetworkSecuritySettings> operator->() { return get(); }
		} NetworkSecuritySettings;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IConnectionProfile_adaptor::ProfileName)->_get_ProfileName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProfileName;
	};
	NetworkConnectivityLevel GetNetworkConnectivityLevel() { NetworkConnectivityLevel value; hrcheck(X::get()->_GetNetworkConnectivityLevel(&value)); return value; }
	ptr<Foundation::Collections::IVectorView<hstring>> GetNetworkNames() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(X::get()->_GetNetworkNames(&value)); return from_abi(value); }
	ptr<ConnectionCost> GetConnectionCost() { ConnectionCost* value; hrcheck(X::get()->_GetConnectionCost(&value)); return from_abi(value); }
	ptr<DataPlanStatus> GetDataPlanStatus() { DataPlanStatus* value; hrcheck(X::get()->_GetDataPlanStatus(&value)); return from_abi(value); }
	ptr<DataUsage> GetLocalUsage(const Foundation::DateTime& StartTime, const Foundation::DateTime& EndTime) { DataUsage* value; hrcheck(X::get()->_GetLocalUsage(StartTime, EndTime, &value)); return from_abi(value); }
	ptr<DataUsage> GetLocalUsage(const Foundation::DateTime& StartTime, const Foundation::DateTime& EndTime, RoamingStates States) { DataUsage* value; hrcheck(X::get()->_GetLocalUsagePerRoamingStates(StartTime, EndTime, States, &value)); return from_abi(value); }
	IConnectionProfile_adaptor() {}
};
template<typename X> struct adapt<IConnectionProfile, X> : Windows::Networking::Connectivity::IConnectionProfile_adaptor<X> { typedef adapt IConnectionProfile; };
struct IConnectionProfile : IConnectionProfile_raw, generate<IConnectionProfile> {};

// ConnectionCost
template<typename X> struct statics<ConnectionCost, X> : X {
	typedef typename X::root_type ConnectionCost;
};
struct ConnectionCost : generate<ConnectionCost> {};

// DataPlanStatus
template<typename X> struct statics<DataPlanStatus, X> : X {
	typedef typename X::root_type DataPlanStatus;
};
struct DataPlanStatus : generate<DataPlanStatus> {};

// INetworkAdapter
struct INetworkAdapter_raw : IInspectable {
	virtual STDMETHODIMP _get_OutboundMaxBitsPerSecond(unsigned __int64 *value);
	virtual STDMETHODIMP _get_InboundMaxBitsPerSecond(unsigned __int64 *value);
	virtual STDMETHODIMP _get_IanaInterfaceType(unsigned *value);
	virtual STDMETHODIMP _get_NetworkItem(Connectivity::NetworkItem* *value);
	virtual STDMETHODIMP _get_NetworkAdapterId(Platform::Guid *value);
	virtual STDMETHODIMP _GetConnectedProfileAsync(Foundation::IAsyncOperation<ConnectionProfile*>* *value);
};
template<typename X> struct INetworkAdapter_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&INetworkAdapter_adaptor::IanaInterfaceType)->_get_IanaInterfaceType(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} IanaInterfaceType;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&INetworkAdapter_adaptor::InboundMaxBitsPerSecond)->_get_InboundMaxBitsPerSecond(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} InboundMaxBitsPerSecond;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&INetworkAdapter_adaptor::NetworkAdapterId)->_get_NetworkAdapterId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} NetworkAdapterId;
		struct : property {
			ptr<Connectivity::NetworkItem> get() { Connectivity::NetworkItem* value; hrcheck(enc(&INetworkAdapter_adaptor::NetworkItem)->_get_NetworkItem(&value)); return from_abi(value); }
			ptr<Connectivity::NetworkItem> operator()() { return get(); }
			operator ptr<Connectivity::NetworkItem> () { return get(); }
			ptr<Connectivity::NetworkItem> operator->() { return get(); }
		} NetworkItem;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&INetworkAdapter_adaptor::OutboundMaxBitsPerSecond)->_get_OutboundMaxBitsPerSecond(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} OutboundMaxBitsPerSecond;
	};
	ptr<Foundation::IAsyncOperation<ptr<ConnectionProfile>>> GetConnectedProfileAsync() { Foundation::IAsyncOperation<ConnectionProfile*>* value; hrcheck(X::get()->_GetConnectedProfileAsync(&value)); return from_abi(value); }
	INetworkAdapter_adaptor() {}
};
template<typename X> struct adapt<INetworkAdapter, X> : Windows::Networking::Connectivity::INetworkAdapter_adaptor<X> { typedef adapt INetworkAdapter; };
struct INetworkAdapter : INetworkAdapter_raw, generate<INetworkAdapter> {};

// NetworkAdapter
template<typename X> struct statics<NetworkAdapter, X> : X {
	typedef typename X::root_type NetworkAdapter;
};
struct NetworkAdapter : generate<NetworkAdapter> {};

// DataUsage
template<typename X> struct statics<DataUsage, X> : X {
	typedef typename X::root_type DataUsage;
};
struct DataUsage : generate<DataUsage> {};

// NetworkSecuritySettings
template<typename X> struct statics<NetworkSecuritySettings, X> : X {
	typedef typename X::root_type NetworkSecuritySettings;
};
struct NetworkSecuritySettings : generate<NetworkSecuritySettings> {};

// IWlanConnectionProfileDetails
struct IWlanConnectionProfileDetails_raw : IInspectable {
	virtual STDMETHODIMP _GetConnectedSsid(HSTRING *value);
};
template<typename X> struct IWlanConnectionProfileDetails_adaptor : X {
	hstring GetConnectedSsid() { HSTRING value; hrcheck(X::get()->_GetConnectedSsid(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IWlanConnectionProfileDetails, X> : Windows::Networking::Connectivity::IWlanConnectionProfileDetails_adaptor<X> { typedef adapt IWlanConnectionProfileDetails; };
struct IWlanConnectionProfileDetails : IWlanConnectionProfileDetails_raw, generate<IWlanConnectionProfileDetails> {};

// IConnectivityInterval
struct IConnectivityInterval_raw : IInspectable {
	virtual STDMETHODIMP _get_StartTime(Foundation::DateTime *startTime);
	virtual STDMETHODIMP _get_ConnectionDuration(Foundation::TimeSpan *duration);
};
template<typename X> struct IConnectivityInterval_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan duration; hrcheck(enc(&IConnectivityInterval_adaptor::ConnectionDuration)->_get_ConnectionDuration(&duration)); return duration; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} ConnectionDuration;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime startTime; hrcheck(enc(&IConnectivityInterval_adaptor::StartTime)->_get_StartTime(&startTime)); return startTime; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} StartTime;
	};
	IConnectivityInterval_adaptor() {}
};
template<typename X> struct adapt<IConnectivityInterval, X> : Windows::Networking::Connectivity::IConnectivityInterval_adaptor<X> { typedef adapt IConnectivityInterval; };
struct IConnectivityInterval : IConnectivityInterval_raw, generate<IConnectivityInterval> {};

// INetworkUsage
struct INetworkUsage_raw : IInspectable {
	virtual STDMETHODIMP _get_BytesSent(unsigned __int64 *value);
	virtual STDMETHODIMP _get_BytesReceived(unsigned __int64 *value);
	virtual STDMETHODIMP _get_ConnectionDuration(Foundation::TimeSpan *duration);
};
template<typename X> struct INetworkUsage_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&INetworkUsage_adaptor::BytesReceived)->_get_BytesReceived(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesReceived;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&INetworkUsage_adaptor::BytesSent)->_get_BytesSent(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesSent;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan duration; hrcheck(enc(&INetworkUsage_adaptor::ConnectionDuration)->_get_ConnectionDuration(&duration)); return duration; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} ConnectionDuration;
	};
	INetworkUsage_adaptor() {}
};
template<typename X> struct adapt<INetworkUsage, X> : Windows::Networking::Connectivity::INetworkUsage_adaptor<X> { typedef adapt INetworkUsage; };
struct INetworkUsage : INetworkUsage_raw, generate<INetworkUsage> {};

// IAttributedNetworkUsage
struct IAttributedNetworkUsage_raw : IInspectable {
	virtual STDMETHODIMP _get_BytesSent(unsigned __int64 *value);
	virtual STDMETHODIMP _get_BytesReceived(unsigned __int64 *value);
	virtual STDMETHODIMP _get_AttributionId(HSTRING *value);
	virtual STDMETHODIMP _get_AttributionName(HSTRING *value);
	virtual STDMETHODIMP _get_AttributionThumbnail(Storage::Streams::IRandomAccessStreamReference* *value);
};
template<typename X> struct IAttributedNetworkUsage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAttributedNetworkUsage_adaptor::AttributionId)->_get_AttributionId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AttributionId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAttributedNetworkUsage_adaptor::AttributionName)->_get_AttributionName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AttributionName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IAttributedNetworkUsage_adaptor::AttributionThumbnail)->_get_AttributionThumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} AttributionThumbnail;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAttributedNetworkUsage_adaptor::BytesReceived)->_get_BytesReceived(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesReceived;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAttributedNetworkUsage_adaptor::BytesSent)->_get_BytesSent(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesSent;
	};
	IAttributedNetworkUsage_adaptor() {}
};
template<typename X> struct adapt<IAttributedNetworkUsage, X> : Windows::Networking::Connectivity::IAttributedNetworkUsage_adaptor<X> { typedef adapt IAttributedNetworkUsage; };
struct IAttributedNetworkUsage : IAttributedNetworkUsage_raw, generate<IAttributedNetworkUsage> {};

// IProviderNetworkUsage
struct IProviderNetworkUsage_raw : IInspectable {
	virtual STDMETHODIMP _get_BytesSent(unsigned __int64 *value);
	virtual STDMETHODIMP _get_BytesReceived(unsigned __int64 *value);
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
};
template<typename X> struct IProviderNetworkUsage_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProviderNetworkUsage_adaptor::BytesReceived)->_get_BytesReceived(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesReceived;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProviderNetworkUsage_adaptor::BytesSent)->_get_BytesSent(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BytesSent;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProviderNetworkUsage_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderId;
	};
	IProviderNetworkUsage_adaptor() {}
};
template<typename X> struct adapt<IProviderNetworkUsage, X> : Windows::Networking::Connectivity::IProviderNetworkUsage_adaptor<X> { typedef adapt IProviderNetworkUsage; };
struct IProviderNetworkUsage : IProviderNetworkUsage_raw, generate<IProviderNetworkUsage> {};

// IConnectionProfile2
struct IConnectionProfile2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsWwanConnectionProfile(bool *value);
	virtual STDMETHODIMP _get_IsWlanConnectionProfile(bool *value);
	virtual STDMETHODIMP _get_WwanConnectionProfileDetails(Connectivity::WwanConnectionProfileDetails* *value);
	virtual STDMETHODIMP _get_WlanConnectionProfileDetails(Connectivity::WlanConnectionProfileDetails* *value);
	virtual STDMETHODIMP _get_ServiceProviderGuid(Foundation::IReference<Platform::Guid>* *value);
	virtual STDMETHODIMP _GetSignalBars(Foundation::IReference<unsigned char>* *value);
	virtual STDMETHODIMP _GetDomainConnectivityLevel(DomainConnectivityLevel *value);
	virtual STDMETHODIMP _GetNetworkUsageAsync(Foundation::DateTime startTime, Foundation::DateTime endTime, DataUsageGranularity granularity, NetworkUsageStates states, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<NetworkUsage*>*>* *value);
	virtual STDMETHODIMP _GetConnectivityIntervalsAsync(Foundation::DateTime startTime, Foundation::DateTime endTime, NetworkUsageStates states, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ConnectivityInterval*>*>* *value);
};
template<typename X> struct IConnectionProfile2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionProfile2_adaptor::IsWlanConnectionProfile)->_get_IsWlanConnectionProfile(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsWlanConnectionProfile;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionProfile2_adaptor::IsWwanConnectionProfile)->_get_IsWwanConnectionProfile(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsWwanConnectionProfile;
		struct : property {
			ptr<Foundation::IReference<Platform::Guid>> get() { Foundation::IReference<Platform::Guid>* value; hrcheck(enc(&IConnectionProfile2_adaptor::ServiceProviderGuid)->_get_ServiceProviderGuid(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Platform::Guid>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Platform::Guid>> () { return get(); }
			ptr<Foundation::IReference<Platform::Guid>> operator->() { return get(); }
		} ServiceProviderGuid;
		struct : property {
			ptr<Connectivity::WlanConnectionProfileDetails> get() { Connectivity::WlanConnectionProfileDetails* value; hrcheck(enc(&IConnectionProfile2_adaptor::WlanConnectionProfileDetails)->_get_WlanConnectionProfileDetails(&value)); return from_abi(value); }
			ptr<Connectivity::WlanConnectionProfileDetails> operator()() { return get(); }
			operator ptr<Connectivity::WlanConnectionProfileDetails> () { return get(); }
			ptr<Connectivity::WlanConnectionProfileDetails> operator->() { return get(); }
		} WlanConnectionProfileDetails;
		struct : property {
			ptr<Connectivity::WwanConnectionProfileDetails> get() { Connectivity::WwanConnectionProfileDetails* value; hrcheck(enc(&IConnectionProfile2_adaptor::WwanConnectionProfileDetails)->_get_WwanConnectionProfileDetails(&value)); return from_abi(value); }
			ptr<Connectivity::WwanConnectionProfileDetails> operator()() { return get(); }
			operator ptr<Connectivity::WwanConnectionProfileDetails> () { return get(); }
			ptr<Connectivity::WwanConnectionProfileDetails> operator->() { return get(); }
		} WwanConnectionProfileDetails;
	};
	ptr<Foundation::IReference<unsigned char>> GetSignalBars() { Foundation::IReference<unsigned char>* value; hrcheck(X::get()->_GetSignalBars(&value)); return from_abi(value); }
	DomainConnectivityLevel GetDomainConnectivityLevel() { DomainConnectivityLevel value; hrcheck(X::get()->_GetDomainConnectivityLevel(&value)); return value; }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<NetworkUsage>>>>> GetNetworkUsageAsync(const Foundation::DateTime& startTime, const Foundation::DateTime& endTime, DataUsageGranularity granularity, const NetworkUsageStates& states) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<NetworkUsage*>*>* value; hrcheck(X::get()->_GetNetworkUsageAsync(startTime, endTime, granularity, states, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ConnectivityInterval>>>>> GetConnectivityIntervalsAsync(const Foundation::DateTime& startTime, const Foundation::DateTime& endTime, const NetworkUsageStates& states) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ConnectivityInterval*>*>* value; hrcheck(X::get()->_GetConnectivityIntervalsAsync(startTime, endTime, states, &value)); return from_abi(value); }
	IConnectionProfile2_adaptor() {}
};
template<typename X> struct adapt<IConnectionProfile2, X> : Windows::Networking::Connectivity::IConnectionProfile2_adaptor<X> { typedef adapt IConnectionProfile2; };
struct IConnectionProfile2 : IConnectionProfile2_raw, generate<IConnectionProfile2> {};

// WlanConnectionProfileDetails
template<typename X> struct statics<WlanConnectionProfileDetails, X> : X {
	typedef typename X::root_type WlanConnectionProfileDetails;
};
struct WlanConnectionProfileDetails : generate<WlanConnectionProfileDetails> {};

// NetworkUsage
template<typename X> struct statics<NetworkUsage, X> : X {
	typedef typename X::root_type NetworkUsage;
};
struct NetworkUsage : generate<NetworkUsage> {};

// ConnectivityInterval
template<typename X> struct statics<ConnectivityInterval, X> : X {
	typedef typename X::root_type ConnectivityInterval;
};
struct ConnectivityInterval : generate<ConnectivityInterval> {};

// IConnectionProfile3
struct IConnectionProfile3_raw : IInspectable {
	virtual STDMETHODIMP _GetAttributedNetworkUsageAsync(Foundation::DateTime startTime, Foundation::DateTime endTime, NetworkUsageStates states, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AttributedNetworkUsage*>*>* *value);
};
template<typename X> struct IConnectionProfile3_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<AttributedNetworkUsage>>>>> GetAttributedNetworkUsageAsync(const Foundation::DateTime& startTime, const Foundation::DateTime& endTime, const NetworkUsageStates& states) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AttributedNetworkUsage*>*>* value; hrcheck(X::get()->_GetAttributedNetworkUsageAsync(startTime, endTime, states, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IConnectionProfile3, X> : Windows::Networking::Connectivity::IConnectionProfile3_adaptor<X> { typedef adapt IConnectionProfile3; };
struct IConnectionProfile3 : IConnectionProfile3_raw, generate<IConnectionProfile3> {};

// AttributedNetworkUsage
template<typename X> struct statics<AttributedNetworkUsage, X> : X {
	typedef typename X::root_type AttributedNetworkUsage;
};
struct AttributedNetworkUsage : generate<AttributedNetworkUsage> {};

// IConnectionProfile4
struct IConnectionProfile4_raw : IInspectable {
	virtual STDMETHODIMP _GetProviderNetworkUsageAsync(Foundation::DateTime startTime, Foundation::DateTime endTime, NetworkUsageStates states, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ProviderNetworkUsage*>*>* *value);
};
template<typename X> struct IConnectionProfile4_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ProviderNetworkUsage>>>>> GetProviderNetworkUsageAsync(const Foundation::DateTime& startTime, const Foundation::DateTime& endTime, const NetworkUsageStates& states) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ProviderNetworkUsage*>*>* value; hrcheck(X::get()->_GetProviderNetworkUsageAsync(startTime, endTime, states, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IConnectionProfile4, X> : Windows::Networking::Connectivity::IConnectionProfile4_adaptor<X> { typedef adapt IConnectionProfile4; };
struct IConnectionProfile4 : IConnectionProfile4_raw, generate<IConnectionProfile4> {};

// ProviderNetworkUsage
template<typename X> struct statics<ProviderNetworkUsage, X> : X {
	typedef typename X::root_type ProviderNetworkUsage;
};
struct ProviderNetworkUsage : generate<ProviderNetworkUsage> {};

// ILanIdentifierData
struct ILanIdentifierData_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(unsigned *value);
	virtual STDMETHODIMP _get_Value(Foundation::Collections::IVectorView<unsigned char>* *value);
};
template<typename X> struct ILanIdentifierData_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILanIdentifierData_adaptor::Type)->_get_Type(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Type;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned char>> get() { Foundation::Collections::IVectorView<unsigned char>* value; hrcheck(enc(&ILanIdentifierData_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned char>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned char>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned char>> operator->() { return get(); }
		} Value;
	};
	ILanIdentifierData_adaptor() {}
};
template<typename X> struct adapt<ILanIdentifierData, X> : Windows::Networking::Connectivity::ILanIdentifierData_adaptor<X> { typedef adapt ILanIdentifierData; };
struct ILanIdentifierData : ILanIdentifierData_raw, generate<ILanIdentifierData> {};

// ILanIdentifier
struct ILanIdentifier_raw : IInspectable {
	virtual STDMETHODIMP _get_InfrastructureId(LanIdentifierData* *value);
	virtual STDMETHODIMP _get_PortId(LanIdentifierData* *value);
	virtual STDMETHODIMP _get_NetworkAdapterId(Platform::Guid *value);
};
template<typename X> struct ILanIdentifier_adaptor : X {
	union {
		struct : property {
			ptr<LanIdentifierData> get() { LanIdentifierData* value; hrcheck(enc(&ILanIdentifier_adaptor::InfrastructureId)->_get_InfrastructureId(&value)); return from_abi(value); }
			ptr<LanIdentifierData> operator()() { return get(); }
			operator ptr<LanIdentifierData> () { return get(); }
			ptr<LanIdentifierData> operator->() { return get(); }
		} InfrastructureId;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ILanIdentifier_adaptor::NetworkAdapterId)->_get_NetworkAdapterId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} NetworkAdapterId;
		struct : property {
			ptr<LanIdentifierData> get() { LanIdentifierData* value; hrcheck(enc(&ILanIdentifier_adaptor::PortId)->_get_PortId(&value)); return from_abi(value); }
			ptr<LanIdentifierData> operator()() { return get(); }
			operator ptr<LanIdentifierData> () { return get(); }
			ptr<LanIdentifierData> operator->() { return get(); }
		} PortId;
	};
	ILanIdentifier_adaptor() {}
};
template<typename X> struct adapt<ILanIdentifier, X> : Windows::Networking::Connectivity::ILanIdentifier_adaptor<X> { typedef adapt ILanIdentifier; };
struct ILanIdentifier : ILanIdentifier_raw, generate<ILanIdentifier> {};

// LanIdentifierData
template<typename X> struct statics<LanIdentifierData, X> : X {
	typedef typename X::root_type LanIdentifierData;
};
struct LanIdentifierData : generate<LanIdentifierData> {};

// NetworkStatusChangedEventHandler
struct NetworkStatusChangedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IInspectable* sender) = 0;
};

// INetworkInformationStatics
struct INetworkInformationStatics : IInspectable {
	virtual STDMETHODIMP _GetConnectionProfiles(Foundation::Collections::IVectorView<ConnectionProfile*>* *value);
	virtual STDMETHODIMP _GetInternetConnectionProfile(ConnectionProfile* *value);
	virtual STDMETHODIMP _GetLanIdentifiers(Foundation::Collections::IVectorView<LanIdentifier*>* *value);
	virtual STDMETHODIMP _GetHostNames(Foundation::Collections::IVectorView<HostName*>* *value);
	virtual STDMETHODIMP _GetProxyConfigurationAsync(Foundation::Uri* uri, Foundation::IAsyncOperation<ProxyConfiguration*>* *value);
	virtual STDMETHODIMP _GetSortedEndpointPairs(Foundation::Collections::IIterable<EndpointPair*>* destinationList, HostNameSortOptions sortOptions, Foundation::Collections::IVectorView<EndpointPair*>* *value);
	virtual STDMETHODIMP _add_NetworkStatusChanged(NetworkStatusChangedEventHandler* networkStatusHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_NetworkStatusChanged(Foundation::EventRegistrationToken eventCookie);
};

// ConnectionProfile
template<typename X> struct statics<ConnectionProfile, X> : X {
	typedef typename X::root_type ConnectionProfile;
};
struct ConnectionProfile : generate<ConnectionProfile> {
	using IConnectionProfile::GetLocalUsage;
};

// LanIdentifier
template<typename X> struct statics<LanIdentifier, X> : X {
	typedef typename X::root_type LanIdentifier;
};
struct LanIdentifier : generate<LanIdentifier> {};

// IProxyConfiguration
struct IProxyConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_ProxyUris(Foundation::Collections::IVectorView<Foundation::Uri*>* *value);
	virtual STDMETHODIMP _get_CanConnectDirectly(bool *value);
};
template<typename X> struct IProxyConfiguration_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IProxyConfiguration_adaptor::CanConnectDirectly)->_get_CanConnectDirectly(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanConnectDirectly;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> get() { Foundation::Collections::IVectorView<Foundation::Uri*>* value; hrcheck(enc(&IProxyConfiguration_adaptor::ProxyUris)->_get_ProxyUris(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> operator->() { return get(); }
		} ProxyUris;
	};
	IProxyConfiguration_adaptor() {}
};
template<typename X> struct adapt<IProxyConfiguration, X> : Windows::Networking::Connectivity::IProxyConfiguration_adaptor<X> { typedef adapt IProxyConfiguration; };
struct IProxyConfiguration : IProxyConfiguration_raw, generate<IProxyConfiguration> {};

// ProxyConfiguration
template<typename X> struct statics<ProxyConfiguration, X> : X {
	typedef typename X::root_type ProxyConfiguration;
};
struct ProxyConfiguration : generate<ProxyConfiguration> {};

// IConnectionProfileFilter
struct IConnectionProfileFilter_raw : IInspectable {
	virtual STDMETHODIMP _put_IsConnected(bool value);
	virtual STDMETHODIMP _get_IsConnected(bool *value);
	virtual STDMETHODIMP _put_IsWwanConnectionProfile(bool value);
	virtual STDMETHODIMP _get_IsWwanConnectionProfile(bool *value);
	virtual STDMETHODIMP _put_IsWlanConnectionProfile(bool value);
	virtual STDMETHODIMP _get_IsWlanConnectionProfile(bool *value);
	virtual STDMETHODIMP _put_NetworkCostType(Connectivity::NetworkCostType value);
	virtual STDMETHODIMP _get_NetworkCostType(Connectivity::NetworkCostType *value);
	virtual STDMETHODIMP _put_ServiceProviderGuid(Foundation::IReference<Platform::Guid>* value);
	virtual STDMETHODIMP _get_ServiceProviderGuid(Foundation::IReference<Platform::Guid>* *value);
};
template<typename X> struct IConnectionProfileFilter_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionProfileFilter_adaptor::IsConnected)->_get_IsConnected(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IConnectionProfileFilter_adaptor::IsConnected)->_put_IsConnected(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsConnected;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionProfileFilter_adaptor::IsWlanConnectionProfile)->_get_IsWlanConnectionProfile(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IConnectionProfileFilter_adaptor::IsWlanConnectionProfile)->_put_IsWlanConnectionProfile(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsWlanConnectionProfile;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IConnectionProfileFilter_adaptor::IsWwanConnectionProfile)->_get_IsWwanConnectionProfile(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IConnectionProfileFilter_adaptor::IsWwanConnectionProfile)->_put_IsWwanConnectionProfile(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsWwanConnectionProfile;
		struct : property {
			Connectivity::NetworkCostType get() { Connectivity::NetworkCostType value; hrcheck(enc(&IConnectionProfileFilter_adaptor::NetworkCostType)->_get_NetworkCostType(&value)); return value; }
			Connectivity::NetworkCostType operator()() { return get(); }
			operator Connectivity::NetworkCostType () { return get(); }
			void put(Connectivity::NetworkCostType value) { hrcheck(enc(&IConnectionProfileFilter_adaptor::NetworkCostType)->_put_NetworkCostType(value)); }
			void operator=(Connectivity::NetworkCostType value) { put(value); }
			void operator()(Connectivity::NetworkCostType value) { put(value); }
		} NetworkCostType;
		struct : property {
			ptr<Foundation::IReference<Platform::Guid>> get() { Foundation::IReference<Platform::Guid>* value; hrcheck(enc(&IConnectionProfileFilter_adaptor::ServiceProviderGuid)->_get_ServiceProviderGuid(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Platform::Guid>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Platform::Guid>> () { return get(); }
			ptr<Foundation::IReference<Platform::Guid>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Platform::Guid>> value) { hrcheck(enc(&IConnectionProfileFilter_adaptor::ServiceProviderGuid)->_put_ServiceProviderGuid(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Platform::Guid>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Platform::Guid>> value) { put(to_abi(value)); }
		} ServiceProviderGuid;
	};
	IConnectionProfileFilter_adaptor() {}
};
template<typename X> struct adapt<IConnectionProfileFilter, X> : Windows::Networking::Connectivity::IConnectionProfileFilter_adaptor<X> { typedef adapt IConnectionProfileFilter; };
struct IConnectionProfileFilter : IConnectionProfileFilter_raw, generate<IConnectionProfileFilter> {};

// IConnectionProfileFilter2
struct IConnectionProfileFilter2_raw : IInspectable {
	virtual STDMETHODIMP _put_IsRoaming(Foundation::IReference<bool>* value);
	virtual STDMETHODIMP _get_IsRoaming(Foundation::IReference<bool>* *value);
	virtual STDMETHODIMP _put_IsOverDataLimit(Foundation::IReference<bool>* value);
	virtual STDMETHODIMP _get_IsOverDataLimit(Foundation::IReference<bool>* *value);
	virtual STDMETHODIMP _put_IsBackgroundDataUsageRestricted(Foundation::IReference<bool>* value);
	virtual STDMETHODIMP _get_IsBackgroundDataUsageRestricted(Foundation::IReference<bool>* *value);
	virtual STDMETHODIMP _get_RawData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IConnectionProfileFilter2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<bool>> get() { Foundation::IReference<bool>* value; hrcheck(enc(&IConnectionProfileFilter2_adaptor::IsBackgroundDataUsageRestricted)->_get_IsBackgroundDataUsageRestricted(&value)); return from_abi(value); }
			ptr<Foundation::IReference<bool>> operator()() { return get(); }
			operator ptr<Foundation::IReference<bool>> () { return get(); }
			ptr<Foundation::IReference<bool>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<bool>> value) { hrcheck(enc(&IConnectionProfileFilter2_adaptor::IsBackgroundDataUsageRestricted)->_put_IsBackgroundDataUsageRestricted(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
		} IsBackgroundDataUsageRestricted;
		struct : property {
			ptr<Foundation::IReference<bool>> get() { Foundation::IReference<bool>* value; hrcheck(enc(&IConnectionProfileFilter2_adaptor::IsOverDataLimit)->_get_IsOverDataLimit(&value)); return from_abi(value); }
			ptr<Foundation::IReference<bool>> operator()() { return get(); }
			operator ptr<Foundation::IReference<bool>> () { return get(); }
			ptr<Foundation::IReference<bool>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<bool>> value) { hrcheck(enc(&IConnectionProfileFilter2_adaptor::IsOverDataLimit)->_put_IsOverDataLimit(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
		} IsOverDataLimit;
		struct : property {
			ptr<Foundation::IReference<bool>> get() { Foundation::IReference<bool>* value; hrcheck(enc(&IConnectionProfileFilter2_adaptor::IsRoaming)->_get_IsRoaming(&value)); return from_abi(value); }
			ptr<Foundation::IReference<bool>> operator()() { return get(); }
			operator ptr<Foundation::IReference<bool>> () { return get(); }
			ptr<Foundation::IReference<bool>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<bool>> value) { hrcheck(enc(&IConnectionProfileFilter2_adaptor::IsRoaming)->_put_IsRoaming(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
		} IsRoaming;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IConnectionProfileFilter2_adaptor::RawData)->_get_RawData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} RawData;
	};
	IConnectionProfileFilter2_adaptor() {}
};
template<typename X> struct adapt<IConnectionProfileFilter2, X> : Windows::Networking::Connectivity::IConnectionProfileFilter2_adaptor<X> { typedef adapt IConnectionProfileFilter2; };
struct IConnectionProfileFilter2 : IConnectionProfileFilter2_raw, generate<IConnectionProfileFilter2> {};

// IConnectionProfileFilter3
struct IConnectionProfileFilter3_raw : IInspectable {
	virtual STDMETHODIMP _put_PurposeGuid(Foundation::IReference<Platform::Guid>* value);
	virtual STDMETHODIMP _get_PurposeGuid(Foundation::IReference<Platform::Guid>* *value);
};
template<typename X> struct IConnectionProfileFilter3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Platform::Guid>> get() { Foundation::IReference<Platform::Guid>* value; hrcheck(enc(&IConnectionProfileFilter3_adaptor::PurposeGuid)->_get_PurposeGuid(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Platform::Guid>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Platform::Guid>> () { return get(); }
			ptr<Foundation::IReference<Platform::Guid>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Platform::Guid>> value) { hrcheck(enc(&IConnectionProfileFilter3_adaptor::PurposeGuid)->_put_PurposeGuid(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Platform::Guid>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Platform::Guid>> value) { put(to_abi(value)); }
		} PurposeGuid;
	};
	IConnectionProfileFilter3_adaptor() {}
};
template<typename X> struct adapt<IConnectionProfileFilter3, X> : Windows::Networking::Connectivity::IConnectionProfileFilter3_adaptor<X> { typedef adapt IConnectionProfileFilter3; };
struct IConnectionProfileFilter3 : IConnectionProfileFilter3_raw, generate<IConnectionProfileFilter3> {};

// INetworkInformationStatics2
struct INetworkInformationStatics2 : IInspectable {
	virtual STDMETHODIMP _FindConnectionProfilesAsync(ConnectionProfileFilter* pProfileFilter, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ConnectionProfile*>*>* *value);
};

// ConnectionProfileFilter
template<typename X> struct statics<ConnectionProfileFilter, X> : X {
	typedef typename X::root_type ConnectionProfileFilter;
};
struct ConnectionProfileFilter : generate<ConnectionProfileFilter> {};

// INetworkItem
struct INetworkItem_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkId(Platform::Guid *value);
	virtual STDMETHODIMP _GetNetworkTypes(NetworkTypes *value);
};
template<typename X> struct INetworkItem_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&INetworkItem_adaptor::NetworkId)->_get_NetworkId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} NetworkId;
	};
	NetworkTypes GetNetworkTypes() { NetworkTypes value; hrcheck(X::get()->_GetNetworkTypes(&value)); return value; }
	INetworkItem_adaptor() {}
};
template<typename X> struct adapt<INetworkItem, X> : Windows::Networking::Connectivity::INetworkItem_adaptor<X> { typedef adapt INetworkItem; };
struct INetworkItem : INetworkItem_raw, generate<INetworkItem> {};

// NetworkItem
template<typename X> struct statics<NetworkItem, X> : X {
	typedef typename X::root_type NetworkItem;
};
struct NetworkItem : generate<NetworkItem> {};

// IConnectionSession
struct IConnectionSession_raw : IInspectable {
	virtual STDMETHODIMP _get_ConnectionProfile(Connectivity::ConnectionProfile* *value);
};
template<typename X> struct IConnectionSession_adaptor : X {
	union {
		struct : property {
			ptr<Connectivity::ConnectionProfile> get() { Connectivity::ConnectionProfile* value; hrcheck(enc(&IConnectionSession_adaptor::ConnectionProfile)->_get_ConnectionProfile(&value)); return from_abi(value); }
			ptr<Connectivity::ConnectionProfile> operator()() { return get(); }
			operator ptr<Connectivity::ConnectionProfile> () { return get(); }
			ptr<Connectivity::ConnectionProfile> operator->() { return get(); }
		} ConnectionProfile;
	};
	IConnectionSession_adaptor() {}
};
template<typename X> struct adapt<IConnectionSession, X> : Windows::Networking::Connectivity::IConnectionSession_adaptor<X> { typedef adapt IConnectionSession; };
struct IConnectionSession : IConnectionSession_raw, generate<IConnectionSession> {};

// IRoutePolicy
struct IRoutePolicy_raw : IInspectable {
	virtual STDMETHODIMP _get_ConnectionProfile(Connectivity::ConnectionProfile* *value);
	virtual STDMETHODIMP _get_HostName(Networking::HostName* *value);
	virtual STDMETHODIMP _get_HostNameType(DomainNameType *value);
};
template<typename X> struct IRoutePolicy_adaptor : X {
	union {
		struct : property {
			ptr<Connectivity::ConnectionProfile> get() { Connectivity::ConnectionProfile* value; hrcheck(enc(&IRoutePolicy_adaptor::ConnectionProfile)->_get_ConnectionProfile(&value)); return from_abi(value); }
			ptr<Connectivity::ConnectionProfile> operator()() { return get(); }
			operator ptr<Connectivity::ConnectionProfile> () { return get(); }
			ptr<Connectivity::ConnectionProfile> operator->() { return get(); }
		} ConnectionProfile;
		struct : property {
			ptr<Networking::HostName> get() { Networking::HostName* value; hrcheck(enc(&IRoutePolicy_adaptor::HostName)->_get_HostName(&value)); return from_abi(value); }
			ptr<Networking::HostName> operator()() { return get(); }
			operator ptr<Networking::HostName> () { return get(); }
			ptr<Networking::HostName> operator->() { return get(); }
		} HostName;
		struct : property {
			DomainNameType get() { DomainNameType value; hrcheck(enc(&IRoutePolicy_adaptor::HostNameType)->_get_HostNameType(&value)); return value; }
			DomainNameType operator()() { return get(); }
			operator DomainNameType () { return get(); }
		} HostNameType;
	};
	IRoutePolicy_adaptor() {}
};
template<typename X> struct adapt<IRoutePolicy, X> : Windows::Networking::Connectivity::IRoutePolicy_adaptor<X> { typedef adapt IRoutePolicy; };
struct IRoutePolicy : IRoutePolicy_raw, generate<IRoutePolicy> {};

// IRoutePolicyFactory
struct IRoutePolicyFactory : IInspectable {
	virtual STDMETHODIMP _CreateRoutePolicy(ConnectionProfile* connectionProfile, HostName* hostName, DomainNameType type, RoutePolicy* *routePolicy);
};

// RoutePolicy
template<typename> struct RoutePolicy_statics {
	static RoutePolicy *activate(pptr<Connectivity::ConnectionProfile> connectionProfile, pptr<Networking::HostName> hostName, DomainNameType type) { RoutePolicy *routePolicy; hrcheck(get_activation_factory<RoutePolicy, IRoutePolicyFactory>()->_CreateRoutePolicy(connectionProfile, hostName, type, &routePolicy)); return routePolicy; }
};

template<typename X> struct statics<RoutePolicy, X> : X, Windows::Networking::Connectivity::RoutePolicy_statics<void> {
	using Windows::Networking::Connectivity::RoutePolicy_statics<void>::activate;
	typedef typename X::root_type RoutePolicy;
};
struct RoutePolicy : generate<RoutePolicy> {};

// ICellularApnContext
struct ICellularApnContext_raw : IInspectable {
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
	virtual STDMETHODIMP _put_ProviderId(HSTRING value);
	virtual STDMETHODIMP _get_AccessPointName(HSTRING *value);
	virtual STDMETHODIMP _put_AccessPointName(HSTRING value);
	virtual STDMETHODIMP _get_UserName(HSTRING *value);
	virtual STDMETHODIMP _put_UserName(HSTRING value);
	virtual STDMETHODIMP _get_Password(HSTRING *value);
	virtual STDMETHODIMP _put_Password(HSTRING value);
	virtual STDMETHODIMP _get_IsCompressionEnabled(bool *value);
	virtual STDMETHODIMP _put_IsCompressionEnabled(bool value);
	virtual STDMETHODIMP _get_AuthenticationType(CellularApnAuthenticationType *value);
	virtual STDMETHODIMP _put_AuthenticationType(CellularApnAuthenticationType value);
};
template<typename X> struct ICellularApnContext_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICellularApnContext_adaptor::AccessPointName)->_get_AccessPointName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICellularApnContext_adaptor::AccessPointName)->_put_AccessPointName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AccessPointName;
		struct : property {
			CellularApnAuthenticationType get() { CellularApnAuthenticationType value; hrcheck(enc(&ICellularApnContext_adaptor::AuthenticationType)->_get_AuthenticationType(&value)); return value; }
			CellularApnAuthenticationType operator()() { return get(); }
			operator CellularApnAuthenticationType () { return get(); }
			void put(CellularApnAuthenticationType value) { hrcheck(enc(&ICellularApnContext_adaptor::AuthenticationType)->_put_AuthenticationType(value)); }
			void operator=(CellularApnAuthenticationType value) { put(value); }
			void operator()(CellularApnAuthenticationType value) { put(value); }
		} AuthenticationType;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICellularApnContext_adaptor::IsCompressionEnabled)->_get_IsCompressionEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICellularApnContext_adaptor::IsCompressionEnabled)->_put_IsCompressionEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCompressionEnabled;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICellularApnContext_adaptor::Password)->_get_Password(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICellularApnContext_adaptor::Password)->_put_Password(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Password;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICellularApnContext_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICellularApnContext_adaptor::ProviderId)->_put_ProviderId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ProviderId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICellularApnContext_adaptor::UserName)->_get_UserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICellularApnContext_adaptor::UserName)->_put_UserName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} UserName;
	};
	ICellularApnContext_adaptor() {}
};
template<typename X> struct adapt<ICellularApnContext, X> : Windows::Networking::Connectivity::ICellularApnContext_adaptor<X> { typedef adapt ICellularApnContext; };
struct ICellularApnContext : ICellularApnContext_raw, generate<ICellularApnContext> {};

// ICellularApnContext2
struct ICellularApnContext2_raw : IInspectable {
	virtual STDMETHODIMP _get_ProfileName(HSTRING *value);
	virtual STDMETHODIMP _put_ProfileName(HSTRING value);
};
template<typename X> struct ICellularApnContext2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICellularApnContext2_adaptor::ProfileName)->_get_ProfileName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICellularApnContext2_adaptor::ProfileName)->_put_ProfileName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ProfileName;
	};
	ICellularApnContext2_adaptor() {}
};
template<typename X> struct adapt<ICellularApnContext2, X> : Windows::Networking::Connectivity::ICellularApnContext2_adaptor<X> { typedef adapt ICellularApnContext2; };
struct ICellularApnContext2 : ICellularApnContext2_raw, generate<ICellularApnContext2> {};

// IConnectivityManagerStatics
struct IConnectivityManagerStatics : IInspectable {
	virtual STDMETHODIMP _AcquireConnectionAsync(CellularApnContext* cellularApnContext, Foundation::IAsyncOperation<ConnectionSession*>* *operation);
	virtual STDMETHODIMP _AddHttpRoutePolicy(RoutePolicy* routePolicy);
	virtual STDMETHODIMP _RemoveHttpRoutePolicy(RoutePolicy* routePolicy);
};

// CellularApnContext
template<typename X> struct statics<CellularApnContext, X> : X {
	typedef typename X::root_type CellularApnContext;
};
struct CellularApnContext : generate<CellularApnContext> {};

// ConnectionSession
template<typename X> struct statics<ConnectionSession, X> : X {
	typedef typename X::root_type ConnectionSession;
};
struct ConnectionSession : generate<ConnectionSession> {};

// INetworkStateChangeEventDetails
struct INetworkStateChangeEventDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_HasNewInternetConnectionProfile(bool *value);
	virtual STDMETHODIMP _get_HasNewConnectionCost(bool *value);
	virtual STDMETHODIMP _get_HasNewNetworkConnectivityLevel(bool *value);
	virtual STDMETHODIMP _get_HasNewDomainConnectivityLevel(bool *value);
	virtual STDMETHODIMP _get_HasNewHostNameList(bool *value);
	virtual STDMETHODIMP _get_HasNewWwanRegistrationState(bool *value);
};
template<typename X> struct INetworkStateChangeEventDetails_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails_adaptor::HasNewConnectionCost)->_get_HasNewConnectionCost(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewConnectionCost;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails_adaptor::HasNewDomainConnectivityLevel)->_get_HasNewDomainConnectivityLevel(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewDomainConnectivityLevel;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails_adaptor::HasNewHostNameList)->_get_HasNewHostNameList(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewHostNameList;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails_adaptor::HasNewInternetConnectionProfile)->_get_HasNewInternetConnectionProfile(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewInternetConnectionProfile;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails_adaptor::HasNewNetworkConnectivityLevel)->_get_HasNewNetworkConnectivityLevel(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewNetworkConnectivityLevel;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails_adaptor::HasNewWwanRegistrationState)->_get_HasNewWwanRegistrationState(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewWwanRegistrationState;
	};
	INetworkStateChangeEventDetails_adaptor() {}
};
template<typename X> struct adapt<INetworkStateChangeEventDetails, X> : Windows::Networking::Connectivity::INetworkStateChangeEventDetails_adaptor<X> { typedef adapt INetworkStateChangeEventDetails; };
struct INetworkStateChangeEventDetails : INetworkStateChangeEventDetails_raw, generate<INetworkStateChangeEventDetails> {};

// INetworkStateChangeEventDetails2
struct INetworkStateChangeEventDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_HasNewTetheringOperationalState(bool *value);
	virtual STDMETHODIMP _get_HasNewTetheringClientCount(bool *value);
};
template<typename X> struct INetworkStateChangeEventDetails2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails2_adaptor::HasNewTetheringClientCount)->_get_HasNewTetheringClientCount(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewTetheringClientCount;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INetworkStateChangeEventDetails2_adaptor::HasNewTetheringOperationalState)->_get_HasNewTetheringOperationalState(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNewTetheringOperationalState;
	};
	INetworkStateChangeEventDetails2_adaptor() {}
};
template<typename X> struct adapt<INetworkStateChangeEventDetails2, X> : Windows::Networking::Connectivity::INetworkStateChangeEventDetails2_adaptor<X> { typedef adapt INetworkStateChangeEventDetails2; };
struct INetworkStateChangeEventDetails2 : INetworkStateChangeEventDetails2_raw, generate<INetworkStateChangeEventDetails2> {};

// NetworkInformation
template<typename> struct NetworkInformation_statics {
	static struct _NetworkStatusChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<NetworkStatusChangedEventHandler> networkStatusHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_add_NetworkStatusChanged(networkStatusHandler, &eventCookie)); return eventCookie; }
		void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_remove_NetworkStatusChanged(eventCookie)); }
	} NetworkStatusChanged;
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ConnectionProfile>>>>> FindConnectionProfilesAsync(pptr<ConnectionProfileFilter> pProfileFilter) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ConnectionProfile*>*>* value; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics2>()->_FindConnectionProfilesAsync(pProfileFilter, &value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVectorView<ptr<ConnectionProfile>>> GetConnectionProfiles() { Foundation::Collections::IVectorView<ConnectionProfile*>* value; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_GetConnectionProfiles(&value)); return from_abi(value); }
	static ptr<ConnectionProfile> GetInternetConnectionProfile() { ConnectionProfile* value; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_GetInternetConnectionProfile(&value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVectorView<ptr<LanIdentifier>>> GetLanIdentifiers() { Foundation::Collections::IVectorView<LanIdentifier*>* value; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_GetLanIdentifiers(&value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVectorView<ptr<HostName>>> GetHostNames() { Foundation::Collections::IVectorView<HostName*>* value; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_GetHostNames(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<ProxyConfiguration>>> GetProxyConfigurationAsync(pptr<Foundation::Uri> uri) { Foundation::IAsyncOperation<ProxyConfiguration*>* value; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_GetProxyConfigurationAsync(uri, &value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVectorView<ptr<EndpointPair>>> GetSortedEndpointPairs(pptr<Foundation::Collections::IIterable<ptr<EndpointPair>>> destinationList, HostNameSortOptions sortOptions) { Foundation::Collections::IVectorView<EndpointPair*>* value; hrcheck(get_activation_factory<NetworkInformation, INetworkInformationStatics>()->_GetSortedEndpointPairs(to_abi(destinationList), sortOptions, &value)); return from_abi(value); }
};
template<typename X> typename NetworkInformation_statics<X>::_NetworkStatusChanged NetworkInformation_statics<X>::NetworkStatusChanged;

template<typename X> struct statics<NetworkInformation, X> : X, Windows::Networking::Connectivity::NetworkInformation_statics<void> {
	typedef typename X::root_type NetworkInformation;
};
struct NetworkInformation : generate<NetworkInformation> {};

// ConnectivityManager
template<typename> struct ConnectivityManager_statics {
	static ptr<Foundation::IAsyncOperation<ptr<ConnectionSession>>> AcquireConnectionAsync(pptr<CellularApnContext> cellularApnContext) { Foundation::IAsyncOperation<ConnectionSession*>* operation; hrcheck(get_activation_factory<ConnectivityManager, IConnectivityManagerStatics>()->_AcquireConnectionAsync(cellularApnContext, &operation)); return from_abi(operation); }
	static void AddHttpRoutePolicy(pptr<RoutePolicy> routePolicy) { hrcheck(get_activation_factory<ConnectivityManager, IConnectivityManagerStatics>()->_AddHttpRoutePolicy(routePolicy)); }
	static void RemoveHttpRoutePolicy(pptr<RoutePolicy> routePolicy) { hrcheck(get_activation_factory<ConnectivityManager, IConnectivityManagerStatics>()->_RemoveHttpRoutePolicy(routePolicy)); }
};

template<typename X> struct statics<ConnectivityManager, X> : X, Windows::Networking::Connectivity::ConnectivityManager_statics<void> {
	typedef typename X::root_type ConnectivityManager;
};
struct ConnectivityManager : generate<ConnectivityManager> {};

// NetworkStateChangeEventDetails
template<typename X> struct statics<NetworkStateChangeEventDetails, X> : X {
	typedef typename X::root_type NetworkStateChangeEventDetails;
};
struct NetworkStateChangeEventDetails : generate<NetworkStateChangeEventDetails> {};

// IWwanConnectionProfileDetails
struct IWwanConnectionProfileDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_HomeProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_AccessPointName(HSTRING *value);
	virtual STDMETHODIMP _GetNetworkRegistrationState(WwanNetworkRegistrationState *value);
	virtual STDMETHODIMP _GetCurrentDataClass(WwanDataClass *value);
};
template<typename X> struct IWwanConnectionProfileDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWwanConnectionProfileDetails_adaptor::AccessPointName)->_get_AccessPointName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccessPointName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWwanConnectionProfileDetails_adaptor::HomeProviderId)->_get_HomeProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} HomeProviderId;
	};
	WwanNetworkRegistrationState GetNetworkRegistrationState() { WwanNetworkRegistrationState value; hrcheck(X::get()->_GetNetworkRegistrationState(&value)); return value; }
	WwanDataClass GetCurrentDataClass() { WwanDataClass value; hrcheck(X::get()->_GetCurrentDataClass(&value)); return value; }
	IWwanConnectionProfileDetails_adaptor() {}
};
template<typename X> struct adapt<IWwanConnectionProfileDetails, X> : Windows::Networking::Connectivity::IWwanConnectionProfileDetails_adaptor<X> { typedef adapt IWwanConnectionProfileDetails; };
struct IWwanConnectionProfileDetails : IWwanConnectionProfileDetails_raw, generate<IWwanConnectionProfileDetails> {};

// IWwanConnectionProfileDetails2
struct IWwanConnectionProfileDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_IPKind(WwanNetworkIPKind *value);
	virtual STDMETHODIMP _get_PurposeGuids(Foundation::Collections::IVectorView<Platform::Guid>* *value);
};
template<typename X> struct IWwanConnectionProfileDetails2_adaptor : X {
	union {
		struct : property {
			WwanNetworkIPKind get() { WwanNetworkIPKind value; hrcheck(enc(&IWwanConnectionProfileDetails2_adaptor::IPKind)->_get_IPKind(&value)); return value; }
			WwanNetworkIPKind operator()() { return get(); }
			operator WwanNetworkIPKind () { return get(); }
		} IPKind;
		struct : property {
			ptr<Foundation::Collections::IVectorView<Platform::Guid>> get() { Foundation::Collections::IVectorView<Platform::Guid>* value; hrcheck(enc(&IWwanConnectionProfileDetails2_adaptor::PurposeGuids)->_get_PurposeGuids(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<Platform::Guid>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<Platform::Guid>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<Platform::Guid>> operator->() { return get(); }
		} PurposeGuids;
	};
	IWwanConnectionProfileDetails2_adaptor() {}
};
template<typename X> struct adapt<IWwanConnectionProfileDetails2, X> : Windows::Networking::Connectivity::IWwanConnectionProfileDetails2_adaptor<X> { typedef adapt IWwanConnectionProfileDetails2; };
struct IWwanConnectionProfileDetails2 : IWwanConnectionProfileDetails2_raw, generate<IWwanConnectionProfileDetails2> {};

// WwanConnectionProfileDetails
template<typename X> struct statics<WwanConnectionProfileDetails, X> : X {
	typedef typename X::root_type WwanConnectionProfileDetails;
};
struct WwanConnectionProfileDetails : generate<WwanConnectionProfileDetails> {};
}}}
} // namespace iso_winrt
