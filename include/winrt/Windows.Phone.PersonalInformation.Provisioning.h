#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.PersonalInformation.Provisioning

#include "Windows.Phone.PersonalInformation.Provisioning.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
template<typename T> struct IVectorView;
}}
namespace Phone { namespace PersonalInformation {
struct ContactStore;
}}
namespace Storage { namespace Streams {
struct IInputStream;
}}}

// defs

template<> struct def<Windows::Phone::PersonalInformation::Provisioning::IContactPartnerProvisioningManagerStatics2> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::Provisioning::IContactPartnerProvisioningManagerStatics> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::Provisioning::ContactPartnerProvisioningManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Phone::PersonalInformation::Provisioning::IMessagePartnerProvisioningManagerStatics> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::Provisioning::MessagePartnerProvisioningManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Phone::PersonalInformation::Provisioning::IContactPartnerProvisioningManagerStatics2> { define_guid(0xC26155F7, 0x55ED, 0x475D, 0x93, 0x34, 0xC5, 0xD4, 0x84, 0xC3, 0xF, 0x1A);};
template<> struct uuid<Windows::Phone::PersonalInformation::Provisioning::IContactPartnerProvisioningManagerStatics> { define_guid(0xC0D79A21, 0x1AF, 0x4FD3, 0x98, 0xCD, 0xB3, 0xD6, 0x56, 0xDE, 0x15, 0xF4);};
template<> struct uuid<Windows::Phone::PersonalInformation::Provisioning::IMessagePartnerProvisioningManagerStatics> { define_guid(0x8A1B0850, 0x73C5, 0x457C, 0xBC, 0x59, 0xED, 0x7D, 0x61, 0x5C, 0x5, 0xA4);};

// types

namespace Windows { namespace Phone { namespace PersonalInformation { namespace Provisioning {

// IContactPartnerProvisioningManagerStatics2
struct IContactPartnerProvisioningManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _AssociateSocialNetworkAccountAsync(ContactStore* store, HSTRING networkName, HSTRING networkAccountId, Foundation::IAsyncAction* *result);
};

// IContactPartnerProvisioningManagerStatics
struct IContactPartnerProvisioningManagerStatics : IInspectable {
	virtual STDMETHODIMP _AssociateNetworkAccountAsync(ContactStore* store, HSTRING networkName, HSTRING networkAccountId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ImportVcardToSystemAsync(Storage::Streams::IInputStream* stream, Foundation::IAsyncAction* *result);
};

// ContactPartnerProvisioningManager
template<typename> struct ContactPartnerProvisioningManager_statics {
	static ptr<Foundation::IAsyncAction> AssociateNetworkAccountAsync(pptr<ContactStore> store, hstring_ref networkName, hstring_ref networkAccountId) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<ContactPartnerProvisioningManager, IContactPartnerProvisioningManagerStatics>()->_AssociateNetworkAccountAsync(store, networkName, networkAccountId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> ImportVcardToSystemAsync(pptr<Storage::Streams::IInputStream> stream) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<ContactPartnerProvisioningManager, IContactPartnerProvisioningManagerStatics>()->_ImportVcardToSystemAsync(stream, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> AssociateSocialNetworkAccountAsync(pptr<ContactStore> store, hstring_ref networkName, hstring_ref networkAccountId) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<ContactPartnerProvisioningManager, IContactPartnerProvisioningManagerStatics2>()->_AssociateSocialNetworkAccountAsync(store, networkName, networkAccountId, &result)); return from_abi(result); }
};

template<typename X> struct statics<ContactPartnerProvisioningManager, X> : X, Windows::Phone::PersonalInformation::Provisioning::ContactPartnerProvisioningManager_statics<void> {
	typedef typename X::root_type ContactPartnerProvisioningManager;
};
struct ContactPartnerProvisioningManager : generate<ContactPartnerProvisioningManager> {};

// IMessagePartnerProvisioningManagerStatics
struct IMessagePartnerProvisioningManagerStatics : IInspectable {
	virtual STDMETHODIMP _ImportSmsToSystemAsync(bool incoming, bool read, HSTRING body, HSTRING sender, Foundation::Collections::IVectorView<HSTRING>* recipients, Foundation::DateTime deliveryTime, Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _ImportMmsToSystemAsync(bool incoming, bool read, HSTRING subject, HSTRING sender, Foundation::Collections::IVectorView<HSTRING>* recipients, Foundation::DateTime deliveryTime, Foundation::Collections::IVectorView<Foundation::Collections::IMapView<HSTRING, IInspectable*>*>* attachments, Foundation::IAsyncAction* *action);
};

// MessagePartnerProvisioningManager
template<typename> struct MessagePartnerProvisioningManager_statics {
	static ptr<Foundation::IAsyncAction> ImportSmsToSystemAsync(bool incoming, bool read, hstring_ref body, hstring_ref sender, pptr<Foundation::Collections::IVectorView<hstring>> recipients, const Foundation::DateTime& deliveryTime) { Foundation::IAsyncAction* action; hrcheck(get_activation_factory<MessagePartnerProvisioningManager, IMessagePartnerProvisioningManagerStatics>()->_ImportSmsToSystemAsync(incoming, read, body, sender, to_abi(recipients), deliveryTime, &action)); return from_abi(action); }
	static ptr<Foundation::IAsyncAction> ImportMmsToSystemAsync(bool incoming, bool read, hstring_ref subject, hstring_ref sender, pptr<Foundation::Collections::IVectorView<hstring>> recipients, const Foundation::DateTime& deliveryTime, pptr<Foundation::Collections::IVectorView<ptr<Foundation::Collections::IMapView<hstring, object>>>> attachments) { Foundation::IAsyncAction* action; hrcheck(get_activation_factory<MessagePartnerProvisioningManager, IMessagePartnerProvisioningManagerStatics>()->_ImportMmsToSystemAsync(incoming, read, subject, sender, to_abi(recipients), deliveryTime, to_abi(attachments), &action)); return from_abi(action); }
};

template<typename X> struct statics<MessagePartnerProvisioningManager, X> : X, Windows::Phone::PersonalInformation::Provisioning::MessagePartnerProvisioningManager_statics<void> {
	typedef typename X::root_type MessagePartnerProvisioningManager;
};
struct MessagePartnerProvisioningManager : generate<MessagePartnerProvisioningManager> {};
}}}}
} // namespace iso_winrt
