#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Search.Core

#include "Windows.ApplicationModel.Search.Core.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Search {
struct SearchQueryLinguisticDetails;
struct LocalContentSuggestionSettings;
struct SearchSuggestionsRequest;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IObservableVector;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Search::Core::SearchCoreContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Search::Core::SearchSuggestionKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Search::Core::ISearchSuggestion> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::Core::SearchSuggestion> : class_type<Platform::Object, Windows::ApplicationModel::Search::Core::ISearchSuggestion> {};
template<> struct def<Windows::ApplicationModel::Search::Core::ISearchSuggestionsRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::Core::IRequestingFocusOnKeyboardInputEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::Core::ISearchSuggestionManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::Core::SearchSuggestionManager> : class_type<Platform::Object, Windows::ApplicationModel::Search::Core::ISearchSuggestionManager> {};
template<> struct def<Windows::ApplicationModel::Search::Core::SearchSuggestionsRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Search::Core::ISearchSuggestionsRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Search::Core::RequestingFocusOnKeyboardInputEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Search::Core::IRequestingFocusOnKeyboardInputEventArgs> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Search::Core::ISearchSuggestion> { define_guid(0x5B5554B0, 0x1527, 0x437B, 0x95, 0xC5, 0x8D, 0x18, 0xD2, 0xB8, 0xAF, 0x55);};
template<> struct uuid<Windows::ApplicationModel::Search::Core::ISearchSuggestionsRequestedEventArgs> { define_guid(0x6FD519E5, 0x9E7E, 0x4AB4, 0x8B, 0xE3, 0xC7, 0x6B, 0x1B, 0xD4, 0x34, 0x4A);};
template<> struct uuid<Windows::ApplicationModel::Search::Core::IRequestingFocusOnKeyboardInputEventArgs> { define_guid(0xA1195F27, 0xB1A7, 0x41A2, 0x87, 0x9D, 0x6A, 0x68, 0x68, 0x7E, 0x59, 0x85);};
template<> struct uuid<Windows::ApplicationModel::Search::Core::ISearchSuggestionManager> { define_guid(0x3F0C50A1, 0xCB9D, 0x497B, 0xB5, 0x0, 0x3C, 0x4, 0xAC, 0x95, 0x9A, 0xD2);};

// types

namespace Windows { namespace ApplicationModel { namespace Search { namespace Core {

// ISearchSuggestion
struct ISearchSuggestion_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(SearchSuggestionKind *value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
	virtual STDMETHODIMP _get_DetailText(HSTRING *value);
	virtual STDMETHODIMP _get_Image(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_ImageAlternateText(HSTRING *value);
};
template<typename X> struct ISearchSuggestion_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchSuggestion_adaptor::DetailText)->_get_DetailText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DetailText;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&ISearchSuggestion_adaptor::Image)->_get_Image(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} Image;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchSuggestion_adaptor::ImageAlternateText)->_get_ImageAlternateText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ImageAlternateText;
		struct : property {
			SearchSuggestionKind get() { SearchSuggestionKind value; hrcheck(enc(&ISearchSuggestion_adaptor::Kind)->_get_Kind(&value)); return value; }
			SearchSuggestionKind operator()() { return get(); }
			operator SearchSuggestionKind () { return get(); }
		} Kind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchSuggestion_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Tag;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchSuggestion_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text;
	};
	ISearchSuggestion_adaptor() {}
};
template<typename X> struct adapt<ISearchSuggestion, X> : Windows::ApplicationModel::Search::Core::ISearchSuggestion_adaptor<X> { typedef adapt ISearchSuggestion; };
struct ISearchSuggestion : ISearchSuggestion_raw, generate<ISearchSuggestion> {};

// SearchSuggestion
template<typename X> struct statics<SearchSuggestion, X> : X {
	typedef typename X::root_type SearchSuggestion;
};
struct SearchSuggestion : generate<SearchSuggestion> {};

// ISearchSuggestionsRequestedEventArgs
struct ISearchSuggestionsRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_QueryText(HSTRING *value);
	virtual STDMETHODIMP _get_Language(HSTRING *value);
	virtual STDMETHODIMP _get_LinguisticDetails(SearchQueryLinguisticDetails* *value);
	virtual STDMETHODIMP _get_Request(SearchSuggestionsRequest* *value);
};
template<typename X> struct ISearchSuggestionsRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchSuggestionsRequestedEventArgs_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Language;
		struct : property {
			ptr<SearchQueryLinguisticDetails> get() { SearchQueryLinguisticDetails* value; hrcheck(enc(&ISearchSuggestionsRequestedEventArgs_adaptor::LinguisticDetails)->_get_LinguisticDetails(&value)); return from_abi(value); }
			ptr<SearchQueryLinguisticDetails> operator()() { return get(); }
			operator ptr<SearchQueryLinguisticDetails> () { return get(); }
			ptr<SearchQueryLinguisticDetails> operator->() { return get(); }
		} LinguisticDetails;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchSuggestionsRequestedEventArgs_adaptor::QueryText)->_get_QueryText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QueryText;
		struct : property {
			ptr<SearchSuggestionsRequest> get() { SearchSuggestionsRequest* value; hrcheck(enc(&ISearchSuggestionsRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<SearchSuggestionsRequest> operator()() { return get(); }
			operator ptr<SearchSuggestionsRequest> () { return get(); }
			ptr<SearchSuggestionsRequest> operator->() { return get(); }
		} Request;
	};
	ISearchSuggestionsRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISearchSuggestionsRequestedEventArgs, X> : Windows::ApplicationModel::Search::Core::ISearchSuggestionsRequestedEventArgs_adaptor<X> { typedef adapt ISearchSuggestionsRequestedEventArgs; };
struct ISearchSuggestionsRequestedEventArgs : ISearchSuggestionsRequestedEventArgs_raw, generate<ISearchSuggestionsRequestedEventArgs> {};

// IRequestingFocusOnKeyboardInputEventArgs
struct IRequestingFocusOnKeyboardInputEventArgs : IInspectable, generate<IRequestingFocusOnKeyboardInputEventArgs> {};

// ISearchSuggestionManager
struct ISearchSuggestionManager_raw : IInspectable {
	virtual STDMETHODIMP _get_SearchHistoryEnabled(bool *value);
	virtual STDMETHODIMP _put_SearchHistoryEnabled(bool value);
	virtual STDMETHODIMP _get_SearchHistoryContext(HSTRING *value);
	virtual STDMETHODIMP _put_SearchHistoryContext(HSTRING value);
	virtual STDMETHODIMP _SetLocalContentSuggestionSettings(LocalContentSuggestionSettings* settings);
	virtual STDMETHODIMP _SetQuery(HSTRING queryText);
	virtual STDMETHODIMP _SetQueryWithLanguage(HSTRING queryText, HSTRING language);
	virtual STDMETHODIMP _SetQueryWithSearchQueryLinguisticDetails(HSTRING queryText, HSTRING language, SearchQueryLinguisticDetails* linguisticDetails);
	virtual STDMETHODIMP _get_Suggestions(Foundation::Collections::IObservableVector<SearchSuggestion*>* *value);
	virtual STDMETHODIMP _AddToHistory(HSTRING queryText);
	virtual STDMETHODIMP _AddToHistoryWithLanguage(HSTRING queryText, HSTRING language);
	virtual STDMETHODIMP _ClearHistory();
	virtual STDMETHODIMP _add_SuggestionsRequested(Foundation::TypedEventHandler<SearchSuggestionManager*, SearchSuggestionsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SuggestionsRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RequestingFocusOnKeyboardInput(Foundation::TypedEventHandler<SearchSuggestionManager*, RequestingFocusOnKeyboardInputEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RequestingFocusOnKeyboardInput(Foundation::EventRegistrationToken token);
};
template<typename X> struct ISearchSuggestionManager_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchSuggestionManager_adaptor::SearchHistoryContext)->_get_SearchHistoryContext(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISearchSuggestionManager_adaptor::SearchHistoryContext)->_put_SearchHistoryContext(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SearchHistoryContext;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISearchSuggestionManager_adaptor::SearchHistoryEnabled)->_get_SearchHistoryEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISearchSuggestionManager_adaptor::SearchHistoryEnabled)->_put_SearchHistoryEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SearchHistoryEnabled;
		struct : property {
			ptr<Foundation::Collections::IObservableVector<ptr<SearchSuggestion>>> get() { Foundation::Collections::IObservableVector<SearchSuggestion*>* value; hrcheck(enc(&ISearchSuggestionManager_adaptor::Suggestions)->_get_Suggestions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IObservableVector<ptr<SearchSuggestion>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IObservableVector<ptr<SearchSuggestion>>> () { return get(); }
			ptr<Foundation::Collections::IObservableVector<ptr<SearchSuggestion>>> operator->() { return get(); }
		} Suggestions;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SearchSuggestionManager>, ptr<RequestingFocusOnKeyboardInputEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISearchSuggestionManager_adaptor::RequestingFocusOnKeyboardInput)->_add_RequestingFocusOnKeyboardInput(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISearchSuggestionManager_adaptor::RequestingFocusOnKeyboardInput)->_remove_RequestingFocusOnKeyboardInput(token)); }
		} RequestingFocusOnKeyboardInput;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SearchSuggestionManager>, ptr<SearchSuggestionsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISearchSuggestionManager_adaptor::SuggestionsRequested)->_add_SuggestionsRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISearchSuggestionManager_adaptor::SuggestionsRequested)->_remove_SuggestionsRequested(token)); }
		} SuggestionsRequested;
	};
	void SetLocalContentSuggestionSettings(pptr<LocalContentSuggestionSettings> settings) { hrcheck(X::get()->_SetLocalContentSuggestionSettings(settings)); }
	void SetQuery(hstring_ref queryText) { hrcheck(X::get()->_SetQuery(queryText)); }
	void SetQuery(hstring_ref queryText, hstring_ref language) { hrcheck(X::get()->_SetQueryWithLanguage(queryText, language)); }
	void SetQuery(hstring_ref queryText, hstring_ref language, pptr<SearchQueryLinguisticDetails> linguisticDetails) { hrcheck(X::get()->_SetQueryWithSearchQueryLinguisticDetails(queryText, language, linguisticDetails)); }
	void AddToHistory(hstring_ref queryText) { hrcheck(X::get()->_AddToHistory(queryText)); }
	void AddToHistory(hstring_ref queryText, hstring_ref language) { hrcheck(X::get()->_AddToHistoryWithLanguage(queryText, language)); }
	void ClearHistory() { hrcheck(X::get()->_ClearHistory()); }
	ISearchSuggestionManager_adaptor() {}
};
template<typename X> struct adapt<ISearchSuggestionManager, X> : Windows::ApplicationModel::Search::Core::ISearchSuggestionManager_adaptor<X> { typedef adapt ISearchSuggestionManager; };
struct ISearchSuggestionManager : ISearchSuggestionManager_raw, generate<ISearchSuggestionManager> {};

// SearchSuggestionManager
template<typename X> struct statics<SearchSuggestionManager, X> : X {
	typedef typename X::root_type SearchSuggestionManager;
};
struct SearchSuggestionManager : generate<SearchSuggestionManager> {
	using ISearchSuggestionManager::SetQuery;
	using ISearchSuggestionManager::AddToHistory;
};

// SearchSuggestionsRequestedEventArgs
template<typename X> struct statics<SearchSuggestionsRequestedEventArgs, X> : X {
	typedef typename X::root_type SearchSuggestionsRequestedEventArgs;
};
struct SearchSuggestionsRequestedEventArgs : generate<SearchSuggestionsRequestedEventArgs> {};

// RequestingFocusOnKeyboardInputEventArgs
template<typename X> struct statics<RequestingFocusOnKeyboardInputEventArgs, X> : X {
	typedef typename X::root_type RequestingFocusOnKeyboardInputEventArgs;
};
struct RequestingFocusOnKeyboardInputEventArgs : generate<RequestingFocusOnKeyboardInputEventArgs> {};
}}}}
} // namespace iso_winrt
