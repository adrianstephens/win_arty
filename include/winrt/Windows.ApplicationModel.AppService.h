#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.AppService

#include "Windows.ApplicationModel.AppService.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel {
struct AppInfo;
}
namespace Foundation { namespace Collections {
struct ValueSet;
template<typename T> struct IVectorView;
}}
namespace System { namespace RemoteSystems {
struct RemoteSystemConnectionRequest;
}
struct User;
}}

// defs

template<> struct def<Windows::ApplicationModel::AppService::AppServiceClosedStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceConnectionStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceResponseStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceClosedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceRequestReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceRequest> : class_type<Platform::Object, Windows::ApplicationModel::AppService::IAppServiceRequest> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceDeferral> : class_type<Platform::Object, Windows::ApplicationModel::AppService::IAppServiceDeferral> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceConnection> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceResponse> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceResponse> : class_type<Platform::Object, Windows::ApplicationModel::AppService::IAppServiceResponse> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceConnection2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceConnection> : class_type<Platform::Object, Windows::ApplicationModel::AppService::IAppServiceConnection, Windows::ApplicationModel::AppService::IAppServiceConnection2> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::AppService::IAppServiceRequestReceivedEventArgs> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceClosedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::AppService::IAppServiceClosedEventArgs> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceTriggerDetails2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceTriggerDetails3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::IAppServiceCatalogStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::AppService::IAppServiceTriggerDetails, Windows::ApplicationModel::AppService::IAppServiceTriggerDetails2, Windows::ApplicationModel::AppService::IAppServiceTriggerDetails3> {};
template<> struct def<Windows::ApplicationModel::AppService::AppServiceCatalog> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceDeferral> { define_guid(0x7E1B5322, 0xEAB0, 0x4248, 0xAE, 0x4, 0xFD, 0xF9, 0x38, 0x38, 0xE4, 0x72);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceClosedEventArgs> { define_guid(0xDE6016F6, 0xCB03, 0x4D35, 0xAC, 0x8D, 0xCC, 0x63, 0x3, 0x23, 0x97, 0x31);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceRequestReceivedEventArgs> { define_guid(0x6E122360, 0xFF65, 0x44AE, 0x9E, 0x45, 0x85, 0x7F, 0xE4, 0x18, 0x6, 0x81);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceRequest> { define_guid(0x20E58D9D, 0x18DE, 0x4B01, 0x80, 0xBA, 0x90, 0xA7, 0x62, 0x4, 0xE3, 0xC8);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceConnection> { define_guid(0x9DD474A2, 0x871F, 0x4D52, 0x89, 0xA9, 0x9E, 0x9, 0x5, 0x31, 0xBD, 0x27);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceResponse> { define_guid(0x8D503CEC, 0x9AA3, 0x4E68, 0x95, 0x59, 0x9D, 0xE6, 0x3E, 0x37, 0x2C, 0xE4);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceConnection2> { define_guid(0x8BDFCD5F, 0x2302, 0x4FBD, 0x80, 0x61, 0x52, 0x51, 0x1C, 0x2F, 0x8B, 0xF9);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceTriggerDetails> { define_guid(0x88A2DCAC, 0xAD28, 0x41B8, 0x80, 0xBB, 0xBD, 0xF1, 0xB2, 0x16, 0x9E, 0x19);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceTriggerDetails2> { define_guid(0xE83D54B2, 0x28CC, 0x43F2, 0xB4, 0x65, 0xC0, 0x48, 0x2E, 0x59, 0xE2, 0xDC);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceTriggerDetails3> { define_guid(0xFBD71E21, 0x7939, 0x4E68, 0x9E, 0x3C, 0x77, 0x80, 0x14, 0x7A, 0xAB, 0xB6);};
template<> struct uuid<Windows::ApplicationModel::AppService::IAppServiceCatalogStatics> { define_guid(0xEF0D2507, 0xD132, 0x4C85, 0x83, 0x95, 0x3C, 0x31, 0xD5, 0xA1, 0xE9, 0x41);};

// types

namespace Windows { namespace ApplicationModel { namespace AppService {

// IAppServiceDeferral
struct IAppServiceDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IAppServiceDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IAppServiceDeferral, X> : Windows::ApplicationModel::AppService::IAppServiceDeferral_adaptor<X> { typedef adapt IAppServiceDeferral; };
struct IAppServiceDeferral : IAppServiceDeferral_raw, generate<IAppServiceDeferral> {};

// IAppServiceClosedEventArgs
struct IAppServiceClosedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(AppServiceClosedStatus *value);
};
template<typename X> struct IAppServiceClosedEventArgs_adaptor : X {
	union {
		struct : property {
			AppServiceClosedStatus get() { AppServiceClosedStatus value; hrcheck(enc(&IAppServiceClosedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			AppServiceClosedStatus operator()() { return get(); }
			operator AppServiceClosedStatus () { return get(); }
		} Status;
	};
	IAppServiceClosedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppServiceClosedEventArgs, X> : Windows::ApplicationModel::AppService::IAppServiceClosedEventArgs_adaptor<X> { typedef adapt IAppServiceClosedEventArgs; };
struct IAppServiceClosedEventArgs : IAppServiceClosedEventArgs_raw, generate<IAppServiceClosedEventArgs> {};

// IAppServiceRequestReceivedEventArgs
struct IAppServiceRequestReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(AppServiceRequest* *value);
	virtual STDMETHODIMP _GetDeferral(AppServiceDeferral* *value);
};
template<typename X> struct IAppServiceRequestReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AppServiceRequest> get() { AppServiceRequest* value; hrcheck(enc(&IAppServiceRequestReceivedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<AppServiceRequest> operator()() { return get(); }
			operator ptr<AppServiceRequest> () { return get(); }
			ptr<AppServiceRequest> operator->() { return get(); }
		} Request;
	};
	ptr<AppServiceDeferral> GetDeferral() { AppServiceDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IAppServiceRequestReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppServiceRequestReceivedEventArgs, X> : Windows::ApplicationModel::AppService::IAppServiceRequestReceivedEventArgs_adaptor<X> { typedef adapt IAppServiceRequestReceivedEventArgs; };
struct IAppServiceRequestReceivedEventArgs : IAppServiceRequestReceivedEventArgs_raw, generate<IAppServiceRequestReceivedEventArgs> {};

// IAppServiceRequest
struct IAppServiceRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Message(Foundation::Collections::ValueSet* *value);
	virtual STDMETHODIMP _SendResponseAsync(Foundation::Collections::ValueSet* message, Foundation::IAsyncOperation<AppServiceResponseStatus>* *operation);
};
template<typename X> struct IAppServiceRequest_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IAppServiceRequest_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Message;
	};
	ptr<Foundation::IAsyncOperation<AppServiceResponseStatus>> SendResponseAsync(pptr<Foundation::Collections::ValueSet> message) { Foundation::IAsyncOperation<AppServiceResponseStatus>* operation; hrcheck(X::get()->_SendResponseAsync(message, &operation)); return from_abi(operation); }
	IAppServiceRequest_adaptor() {}
};
template<typename X> struct adapt<IAppServiceRequest, X> : Windows::ApplicationModel::AppService::IAppServiceRequest_adaptor<X> { typedef adapt IAppServiceRequest; };
struct IAppServiceRequest : IAppServiceRequest_raw, generate<IAppServiceRequest> {};

// AppServiceRequest
template<typename X> struct statics<AppServiceRequest, X> : X {
	typedef typename X::root_type AppServiceRequest;
};
struct AppServiceRequest : generate<AppServiceRequest> {};

// AppServiceDeferral
template<typename X> struct statics<AppServiceDeferral, X> : X {
	typedef typename X::root_type AppServiceDeferral;
};
struct AppServiceDeferral : generate<AppServiceDeferral> {};

// IAppServiceConnection
struct IAppServiceConnection_raw : IInspectable {
	virtual STDMETHODIMP _get_AppServiceName(HSTRING *value);
	virtual STDMETHODIMP _put_AppServiceName(HSTRING value);
	virtual STDMETHODIMP _get_PackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _put_PackageFamilyName(HSTRING value);
	virtual STDMETHODIMP _OpenAsync(Foundation::IAsyncOperation<AppServiceConnectionStatus>* *operation);
	virtual STDMETHODIMP _SendMessageAsync(Foundation::Collections::ValueSet* message, Foundation::IAsyncOperation<AppServiceResponse*>* *operation);
	virtual STDMETHODIMP _add_RequestReceived(Foundation::TypedEventHandler<AppServiceConnection*, AppServiceRequestReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RequestReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ServiceClosed(Foundation::TypedEventHandler<AppServiceConnection*, AppServiceClosedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ServiceClosed(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppServiceConnection_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppServiceConnection_adaptor::AppServiceName)->_get_AppServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppServiceConnection_adaptor::AppServiceName)->_put_AppServiceName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AppServiceName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppServiceConnection_adaptor::PackageFamilyName)->_get_PackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppServiceConnection_adaptor::PackageFamilyName)->_put_PackageFamilyName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PackageFamilyName;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppServiceConnection>, ptr<AppServiceRequestReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppServiceConnection_adaptor::RequestReceived)->_add_RequestReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppServiceConnection_adaptor::RequestReceived)->_remove_RequestReceived(token)); }
		} RequestReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppServiceConnection>, ptr<AppServiceClosedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppServiceConnection_adaptor::ServiceClosed)->_add_ServiceClosed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppServiceConnection_adaptor::ServiceClosed)->_remove_ServiceClosed(token)); }
		} ServiceClosed;
	};
	ptr<Foundation::IAsyncOperation<AppServiceConnectionStatus>> OpenAsync() { Foundation::IAsyncOperation<AppServiceConnectionStatus>* operation; hrcheck(X::get()->_OpenAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<AppServiceResponse>>> SendMessageAsync(pptr<Foundation::Collections::ValueSet> message) { Foundation::IAsyncOperation<AppServiceResponse*>* operation; hrcheck(X::get()->_SendMessageAsync(message, &operation)); return from_abi(operation); }
	IAppServiceConnection_adaptor() {}
};
template<typename X> struct adapt<IAppServiceConnection, X> : Windows::ApplicationModel::AppService::IAppServiceConnection_adaptor<X> { typedef adapt IAppServiceConnection; };
struct IAppServiceConnection : IAppServiceConnection_raw, generate<IAppServiceConnection> {};

// IAppServiceResponse
struct IAppServiceResponse_raw : IInspectable {
	virtual STDMETHODIMP _get_Message(Foundation::Collections::ValueSet* *value);
	virtual STDMETHODIMP _get_Status(AppServiceResponseStatus *value);
};
template<typename X> struct IAppServiceResponse_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IAppServiceResponse_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Message;
		struct : property {
			AppServiceResponseStatus get() { AppServiceResponseStatus value; hrcheck(enc(&IAppServiceResponse_adaptor::Status)->_get_Status(&value)); return value; }
			AppServiceResponseStatus operator()() { return get(); }
			operator AppServiceResponseStatus () { return get(); }
		} Status;
	};
	IAppServiceResponse_adaptor() {}
};
template<typename X> struct adapt<IAppServiceResponse, X> : Windows::ApplicationModel::AppService::IAppServiceResponse_adaptor<X> { typedef adapt IAppServiceResponse; };
struct IAppServiceResponse : IAppServiceResponse_raw, generate<IAppServiceResponse> {};

// AppServiceResponse
template<typename X> struct statics<AppServiceResponse, X> : X {
	typedef typename X::root_type AppServiceResponse;
};
struct AppServiceResponse : generate<AppServiceResponse> {};

// IAppServiceConnection2
struct IAppServiceConnection2_raw : IInspectable {
	virtual STDMETHODIMP _OpenRemoteAsync(System::RemoteSystems::RemoteSystemConnectionRequest* remoteSystemConnectionRequest, Foundation::IAsyncOperation<AppServiceConnectionStatus>* *operation);
	virtual STDMETHODIMP _get_User(System::User* *value);
	virtual STDMETHODIMP _put_User(System::User* value);
};
template<typename X> struct IAppServiceConnection2_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IAppServiceConnection2_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
			void put(pptr<System::User> value) { hrcheck(enc(&IAppServiceConnection2_adaptor::User)->_put_User(value)); }
			void operator=(pptr<System::User> value) { put(value); }
			void operator()(pptr<System::User> value) { put(value); }
		} User;
	};
	ptr<Foundation::IAsyncOperation<AppServiceConnectionStatus>> OpenRemoteAsync(pptr<System::RemoteSystems::RemoteSystemConnectionRequest> remoteSystemConnectionRequest) { Foundation::IAsyncOperation<AppServiceConnectionStatus>* operation; hrcheck(X::get()->_OpenRemoteAsync(remoteSystemConnectionRequest, &operation)); return from_abi(operation); }
	IAppServiceConnection2_adaptor() {}
};
template<typename X> struct adapt<IAppServiceConnection2, X> : Windows::ApplicationModel::AppService::IAppServiceConnection2_adaptor<X> { typedef adapt IAppServiceConnection2; };
struct IAppServiceConnection2 : IAppServiceConnection2_raw, generate<IAppServiceConnection2> {};

// AppServiceConnection
template<typename X> struct statics<AppServiceConnection, X> : X {
	typedef typename X::root_type AppServiceConnection;
};
struct AppServiceConnection : generate<AppServiceConnection> {};

// AppServiceRequestReceivedEventArgs
template<typename X> struct statics<AppServiceRequestReceivedEventArgs, X> : X {
	typedef typename X::root_type AppServiceRequestReceivedEventArgs;
};
struct AppServiceRequestReceivedEventArgs : generate<AppServiceRequestReceivedEventArgs> {};

// AppServiceClosedEventArgs
template<typename X> struct statics<AppServiceClosedEventArgs, X> : X {
	typedef typename X::root_type AppServiceClosedEventArgs;
};
struct AppServiceClosedEventArgs : generate<AppServiceClosedEventArgs> {};

// IAppServiceTriggerDetails
struct IAppServiceTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _get_AppServiceConnection(AppService::AppServiceConnection* *value);
};
template<typename X> struct IAppServiceTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<AppService::AppServiceConnection> get() { AppService::AppServiceConnection* value; hrcheck(enc(&IAppServiceTriggerDetails_adaptor::AppServiceConnection)->_get_AppServiceConnection(&value)); return from_abi(value); }
			ptr<AppService::AppServiceConnection> operator()() { return get(); }
			operator ptr<AppService::AppServiceConnection> () { return get(); }
			ptr<AppService::AppServiceConnection> operator->() { return get(); }
		} AppServiceConnection;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppServiceTriggerDetails_adaptor::CallerPackageFamilyName)->_get_CallerPackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CallerPackageFamilyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppServiceTriggerDetails_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	IAppServiceTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IAppServiceTriggerDetails, X> : Windows::ApplicationModel::AppService::IAppServiceTriggerDetails_adaptor<X> { typedef adapt IAppServiceTriggerDetails; };
struct IAppServiceTriggerDetails : IAppServiceTriggerDetails_raw, generate<IAppServiceTriggerDetails> {};

// IAppServiceTriggerDetails2
struct IAppServiceTriggerDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsRemoteSystemConnection(bool *value);
};
template<typename X> struct IAppServiceTriggerDetails2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppServiceTriggerDetails2_adaptor::IsRemoteSystemConnection)->_get_IsRemoteSystemConnection(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsRemoteSystemConnection;
	};
	IAppServiceTriggerDetails2_adaptor() {}
};
template<typename X> struct adapt<IAppServiceTriggerDetails2, X> : Windows::ApplicationModel::AppService::IAppServiceTriggerDetails2_adaptor<X> { typedef adapt IAppServiceTriggerDetails2; };
struct IAppServiceTriggerDetails2 : IAppServiceTriggerDetails2_raw, generate<IAppServiceTriggerDetails2> {};

// IAppServiceTriggerDetails3
struct IAppServiceTriggerDetails3_raw : IInspectable {
	virtual STDMETHODIMP _CheckCallerForCapabilityAsync(HSTRING capabilityName, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IAppServiceTriggerDetails3_adaptor : X {
	ptr<Foundation::IAsyncOperation<bool>> CheckCallerForCapabilityAsync(hstring_ref capabilityName) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_CheckCallerForCapabilityAsync(capabilityName, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IAppServiceTriggerDetails3, X> : Windows::ApplicationModel::AppService::IAppServiceTriggerDetails3_adaptor<X> { typedef adapt IAppServiceTriggerDetails3; };
struct IAppServiceTriggerDetails3 : IAppServiceTriggerDetails3_raw, generate<IAppServiceTriggerDetails3> {};

// IAppServiceCatalogStatics
struct IAppServiceCatalogStatics : IInspectable {
	virtual STDMETHODIMP _FindAppServiceProvidersAsync(HSTRING appServiceName, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppInfo*>*>* *operation);
};

// AppServiceTriggerDetails
template<typename X> struct statics<AppServiceTriggerDetails, X> : X {
	typedef typename X::root_type AppServiceTriggerDetails;
};
struct AppServiceTriggerDetails : generate<AppServiceTriggerDetails> {};

// AppServiceCatalog
template<typename> struct AppServiceCatalog_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<AppInfo>>>>> FindAppServiceProvidersAsync(hstring_ref appServiceName) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppInfo*>*>* operation; hrcheck(get_activation_factory<AppServiceCatalog, IAppServiceCatalogStatics>()->_FindAppServiceProvidersAsync(appServiceName, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<AppServiceCatalog, X> : X, Windows::ApplicationModel::AppService::AppServiceCatalog_statics<void> {
	typedef typename X::root_type AppServiceCatalog;
};
struct AppServiceCatalog : generate<AppServiceCatalog> {};
}}}
} // namespace iso_winrt
