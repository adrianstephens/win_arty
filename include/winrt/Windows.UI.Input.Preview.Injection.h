#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Input.Preview.Injection

#include "Windows.UI.Input.Preview.Injection.0.h"
#include "Windows.Gaming.Input.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
}}}

// defs

template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputTouchParameters> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputPointerOptions> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputButtonChangeKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputPenButtons> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputPenParameters> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputMouseOptions> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputKeyOptions> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputShortcut> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputVisualizationMode> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputRectangle> : value_type<int, int, int, int> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputPoint> : value_type<int, int> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputPointerInfo> : value_type<unsigned, Windows::UI::Input::Preview::Injection::InjectedInputPointerOptions, Windows::UI::Input::Preview::Injection::InjectedInputPoint, unsigned, unsigned __int64> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInjectedInputTouchInfo> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInjectedInputPenInfo> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInjectedInputMouseInfo> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInjectedInputKeyboardInfo> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInjectedInputGamepadInfo> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInjectedInputGamepadInfoFactory> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputGamepadInfo> : class_type<Platform::Object, Windows::UI::Input::Preview::Injection::IInjectedInputGamepadInfo>, custom_activators {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInputInjector> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputKeyboardInfo> : class_type<Platform::Object, Windows::UI::Input::Preview::Injection::IInjectedInputKeyboardInfo> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputMouseInfo> : class_type<Platform::Object, Windows::UI::Input::Preview::Injection::IInjectedInputMouseInfo> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputTouchInfo> : class_type<Platform::Object, Windows::UI::Input::Preview::Injection::IInjectedInputTouchInfo> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InjectedInputPenInfo> : class_type<Platform::Object, Windows::UI::Input::Preview::Injection::IInjectedInputPenInfo> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInputInjector2> : interface_type<Windows::UI::Input::Preview::Injection::IInputInjector> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInputInjectorStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::Preview::Injection::IInputInjectorStatics2> : interface_type<Windows::UI::Input::Preview::Injection::IInputInjectorStatics> {};
template<> struct def<Windows::UI::Input::Preview::Injection::InputInjector> : class_type<Platform::Object, Windows::UI::Input::Preview::Injection::IInputInjector, Windows::UI::Input::Preview::Injection::IInputInjector2> {};

// uuids

template<> struct uuid<Windows::UI::Input::Preview::Injection::IInjectedInputTouchInfo> { define_guid(0x224FD1DF, 0x43E8, 0x5EF5, 0x51, 0xA, 0x69, 0xCA, 0x8C, 0x9B, 0x4C, 0x28);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInjectedInputPenInfo> { define_guid(0x6B40AD03, 0xCA1E, 0x5527, 0x7E, 0x2, 0x28, 0x28, 0x54, 0xB, 0xB1, 0xD4);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInjectedInputMouseInfo> { define_guid(0x96F56E6B, 0xE47A, 0x5CF4, 0x41, 0x8D, 0x8A, 0x5F, 0xB9, 0x67, 0xC, 0x7D);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInjectedInputKeyboardInfo> { define_guid(0x4B46D140, 0x2B6A, 0x5FFA, 0x7E, 0xAE, 0xBD, 0x7, 0x7B, 0x5, 0x2A, 0xCD);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInjectedInputGamepadInfo> { define_guid(0x20AE9A3F, 0xDF11, 0x4572, 0xA9, 0xAB, 0xD7, 0x5B, 0x8A, 0x5E, 0x48, 0xAD);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInjectedInputGamepadInfoFactory> { define_guid(0x59596876, 0x6C39, 0x4EC4, 0x8B, 0x2A, 0x29, 0xEF, 0x7D, 0xE1, 0x8A, 0xCA);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInputInjector> { define_guid(0x8EC26F84, 0xB02, 0x4BD2, 0xAD, 0x7A, 0x3D, 0x46, 0x58, 0xBE, 0x3E, 0x18);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInputInjector2> { define_guid(0x8E7A905D, 0x1453, 0x43A7, 0x9B, 0xCB, 0x6, 0xD6, 0xD7, 0xB3, 0x5, 0xF7);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInputInjectorStatics> { define_guid(0xDEAE6943, 0x7402, 0x4141, 0xA5, 0xC6, 0xC, 0x1, 0xAA, 0x57, 0xB1, 0x6A);};
template<> struct uuid<Windows::UI::Input::Preview::Injection::IInputInjectorStatics2> { define_guid(0xA4DB38FB, 0xDD8C, 0x414F, 0x95, 0xEA, 0xF8, 0x7E, 0xF4, 0xC0, 0xAE, 0x6C);};

// types

namespace Windows { namespace UI { namespace Input { namespace Preview { namespace Injection {

// IInjectedInputTouchInfo
struct IInjectedInputTouchInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(InjectedInputRectangle *value);
	virtual STDMETHODIMP _put_Contact(InjectedInputRectangle value);
	virtual STDMETHODIMP _get_Orientation(int *value);
	virtual STDMETHODIMP _put_Orientation(int value);
	virtual STDMETHODIMP _get_PointerInfo(InjectedInputPointerInfo *value);
	virtual STDMETHODIMP _put_PointerInfo(InjectedInputPointerInfo value);
	virtual STDMETHODIMP _get_Pressure(double *value);
	virtual STDMETHODIMP _put_Pressure(double value);
	virtual STDMETHODIMP _get_TouchParameters(InjectedInputTouchParameters *value);
	virtual STDMETHODIMP _put_TouchParameters(InjectedInputTouchParameters value);
};
template<typename X> struct IInjectedInputTouchInfo_adaptor : X {
	union {
		struct : property {
			InjectedInputRectangle get() { InjectedInputRectangle value; hrcheck(enc(&IInjectedInputTouchInfo_adaptor::Contact)->_get_Contact(&value)); return value; }
			InjectedInputRectangle operator()() { return get(); }
			operator InjectedInputRectangle () { return get(); }
			void put(const InjectedInputRectangle& value) { hrcheck(enc(&IInjectedInputTouchInfo_adaptor::Contact)->_put_Contact(value)); }
			void operator=(const InjectedInputRectangle& value) { put(value); }
			void operator()(const InjectedInputRectangle& value) { put(value); }
		} Contact;
		struct : property {
			int get() { int value; hrcheck(enc(&IInjectedInputTouchInfo_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IInjectedInputTouchInfo_adaptor::Orientation)->_put_Orientation(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Orientation;
		struct : property {
			InjectedInputPointerInfo get() { InjectedInputPointerInfo value; hrcheck(enc(&IInjectedInputTouchInfo_adaptor::PointerInfo)->_get_PointerInfo(&value)); return value; }
			InjectedInputPointerInfo operator()() { return get(); }
			operator InjectedInputPointerInfo () { return get(); }
			void put(const InjectedInputPointerInfo& value) { hrcheck(enc(&IInjectedInputTouchInfo_adaptor::PointerInfo)->_put_PointerInfo(value)); }
			void operator=(const InjectedInputPointerInfo& value) { put(value); }
			void operator()(const InjectedInputPointerInfo& value) { put(value); }
		} PointerInfo;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputTouchInfo_adaptor::Pressure)->_get_Pressure(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputTouchInfo_adaptor::Pressure)->_put_Pressure(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Pressure;
		struct : property {
			InjectedInputTouchParameters get() { InjectedInputTouchParameters value; hrcheck(enc(&IInjectedInputTouchInfo_adaptor::TouchParameters)->_get_TouchParameters(&value)); return value; }
			InjectedInputTouchParameters operator()() { return get(); }
			operator InjectedInputTouchParameters () { return get(); }
			void put(InjectedInputTouchParameters value) { hrcheck(enc(&IInjectedInputTouchInfo_adaptor::TouchParameters)->_put_TouchParameters(value)); }
			void operator=(InjectedInputTouchParameters value) { put(value); }
			void operator()(InjectedInputTouchParameters value) { put(value); }
		} TouchParameters;
	};
	IInjectedInputTouchInfo_adaptor() {}
};
template<typename X> struct adapt<IInjectedInputTouchInfo, X> : Windows::UI::Input::Preview::Injection::IInjectedInputTouchInfo_adaptor<X> { typedef adapt IInjectedInputTouchInfo; };
struct IInjectedInputTouchInfo : IInjectedInputTouchInfo_raw, generate<IInjectedInputTouchInfo> {};

// IInjectedInputPenInfo
struct IInjectedInputPenInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerInfo(InjectedInputPointerInfo *value);
	virtual STDMETHODIMP _put_PointerInfo(InjectedInputPointerInfo value);
	virtual STDMETHODIMP _get_PenButtons(InjectedInputPenButtons *value);
	virtual STDMETHODIMP _put_PenButtons(InjectedInputPenButtons value);
	virtual STDMETHODIMP _get_PenParameters(InjectedInputPenParameters *value);
	virtual STDMETHODIMP _put_PenParameters(InjectedInputPenParameters value);
	virtual STDMETHODIMP _get_Pressure(double *value);
	virtual STDMETHODIMP _put_Pressure(double value);
	virtual STDMETHODIMP _get_Rotation(double *value);
	virtual STDMETHODIMP _put_Rotation(double value);
	virtual STDMETHODIMP _get_TiltX(int *value);
	virtual STDMETHODIMP _put_TiltX(int value);
	virtual STDMETHODIMP _get_TiltY(int *value);
	virtual STDMETHODIMP _put_TiltY(int value);
};
template<typename X> struct IInjectedInputPenInfo_adaptor : X {
	union {
		struct : property {
			InjectedInputPenButtons get() { InjectedInputPenButtons value; hrcheck(enc(&IInjectedInputPenInfo_adaptor::PenButtons)->_get_PenButtons(&value)); return value; }
			InjectedInputPenButtons operator()() { return get(); }
			operator InjectedInputPenButtons () { return get(); }
			void put(InjectedInputPenButtons value) { hrcheck(enc(&IInjectedInputPenInfo_adaptor::PenButtons)->_put_PenButtons(value)); }
			void operator=(InjectedInputPenButtons value) { put(value); }
			void operator()(InjectedInputPenButtons value) { put(value); }
		} PenButtons;
		struct : property {
			InjectedInputPenParameters get() { InjectedInputPenParameters value; hrcheck(enc(&IInjectedInputPenInfo_adaptor::PenParameters)->_get_PenParameters(&value)); return value; }
			InjectedInputPenParameters operator()() { return get(); }
			operator InjectedInputPenParameters () { return get(); }
			void put(InjectedInputPenParameters value) { hrcheck(enc(&IInjectedInputPenInfo_adaptor::PenParameters)->_put_PenParameters(value)); }
			void operator=(InjectedInputPenParameters value) { put(value); }
			void operator()(InjectedInputPenParameters value) { put(value); }
		} PenParameters;
		struct : property {
			InjectedInputPointerInfo get() { InjectedInputPointerInfo value; hrcheck(enc(&IInjectedInputPenInfo_adaptor::PointerInfo)->_get_PointerInfo(&value)); return value; }
			InjectedInputPointerInfo operator()() { return get(); }
			operator InjectedInputPointerInfo () { return get(); }
			void put(const InjectedInputPointerInfo& value) { hrcheck(enc(&IInjectedInputPenInfo_adaptor::PointerInfo)->_put_PointerInfo(value)); }
			void operator=(const InjectedInputPointerInfo& value) { put(value); }
			void operator()(const InjectedInputPointerInfo& value) { put(value); }
		} PointerInfo;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputPenInfo_adaptor::Pressure)->_get_Pressure(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputPenInfo_adaptor::Pressure)->_put_Pressure(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Pressure;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputPenInfo_adaptor::Rotation)->_get_Rotation(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputPenInfo_adaptor::Rotation)->_put_Rotation(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Rotation;
		struct : property {
			int get() { int value; hrcheck(enc(&IInjectedInputPenInfo_adaptor::TiltX)->_get_TiltX(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IInjectedInputPenInfo_adaptor::TiltX)->_put_TiltX(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} TiltX;
		struct : property {
			int get() { int value; hrcheck(enc(&IInjectedInputPenInfo_adaptor::TiltY)->_get_TiltY(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IInjectedInputPenInfo_adaptor::TiltY)->_put_TiltY(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} TiltY;
	};
	IInjectedInputPenInfo_adaptor() {}
};
template<typename X> struct adapt<IInjectedInputPenInfo, X> : Windows::UI::Input::Preview::Injection::IInjectedInputPenInfo_adaptor<X> { typedef adapt IInjectedInputPenInfo; };
struct IInjectedInputPenInfo : IInjectedInputPenInfo_raw, generate<IInjectedInputPenInfo> {};

// IInjectedInputMouseInfo
struct IInjectedInputMouseInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_MouseOptions(InjectedInputMouseOptions *value);
	virtual STDMETHODIMP _put_MouseOptions(InjectedInputMouseOptions value);
	virtual STDMETHODIMP _get_MouseData(unsigned *value);
	virtual STDMETHODIMP _put_MouseData(unsigned value);
	virtual STDMETHODIMP _get_DeltaY(int *value);
	virtual STDMETHODIMP _put_DeltaY(int value);
	virtual STDMETHODIMP _get_DeltaX(int *value);
	virtual STDMETHODIMP _put_DeltaX(int value);
	virtual STDMETHODIMP _get_TimeOffsetInMilliseconds(unsigned *value);
	virtual STDMETHODIMP _put_TimeOffsetInMilliseconds(unsigned value);
};
template<typename X> struct IInjectedInputMouseInfo_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IInjectedInputMouseInfo_adaptor::DeltaX)->_get_DeltaX(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IInjectedInputMouseInfo_adaptor::DeltaX)->_put_DeltaX(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} DeltaX;
		struct : property {
			int get() { int value; hrcheck(enc(&IInjectedInputMouseInfo_adaptor::DeltaY)->_get_DeltaY(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IInjectedInputMouseInfo_adaptor::DeltaY)->_put_DeltaY(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} DeltaY;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IInjectedInputMouseInfo_adaptor::MouseData)->_get_MouseData(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IInjectedInputMouseInfo_adaptor::MouseData)->_put_MouseData(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MouseData;
		struct : property {
			InjectedInputMouseOptions get() { InjectedInputMouseOptions value; hrcheck(enc(&IInjectedInputMouseInfo_adaptor::MouseOptions)->_get_MouseOptions(&value)); return value; }
			InjectedInputMouseOptions operator()() { return get(); }
			operator InjectedInputMouseOptions () { return get(); }
			void put(InjectedInputMouseOptions value) { hrcheck(enc(&IInjectedInputMouseInfo_adaptor::MouseOptions)->_put_MouseOptions(value)); }
			void operator=(InjectedInputMouseOptions value) { put(value); }
			void operator()(InjectedInputMouseOptions value) { put(value); }
		} MouseOptions;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IInjectedInputMouseInfo_adaptor::TimeOffsetInMilliseconds)->_get_TimeOffsetInMilliseconds(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IInjectedInputMouseInfo_adaptor::TimeOffsetInMilliseconds)->_put_TimeOffsetInMilliseconds(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} TimeOffsetInMilliseconds;
	};
	IInjectedInputMouseInfo_adaptor() {}
};
template<typename X> struct adapt<IInjectedInputMouseInfo, X> : Windows::UI::Input::Preview::Injection::IInjectedInputMouseInfo_adaptor<X> { typedef adapt IInjectedInputMouseInfo; };
struct IInjectedInputMouseInfo : IInjectedInputMouseInfo_raw, generate<IInjectedInputMouseInfo> {};

// IInjectedInputKeyboardInfo
struct IInjectedInputKeyboardInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_KeyOptions(InjectedInputKeyOptions *value);
	virtual STDMETHODIMP _put_KeyOptions(InjectedInputKeyOptions value);
	virtual STDMETHODIMP _get_ScanCode(unsigned short *value);
	virtual STDMETHODIMP _put_ScanCode(unsigned short value);
	virtual STDMETHODIMP _get_VirtualKey(unsigned short *value);
	virtual STDMETHODIMP _put_VirtualKey(unsigned short value);
};
template<typename X> struct IInjectedInputKeyboardInfo_adaptor : X {
	union {
		struct : property {
			InjectedInputKeyOptions get() { InjectedInputKeyOptions value; hrcheck(enc(&IInjectedInputKeyboardInfo_adaptor::KeyOptions)->_get_KeyOptions(&value)); return value; }
			InjectedInputKeyOptions operator()() { return get(); }
			operator InjectedInputKeyOptions () { return get(); }
			void put(InjectedInputKeyOptions value) { hrcheck(enc(&IInjectedInputKeyboardInfo_adaptor::KeyOptions)->_put_KeyOptions(value)); }
			void operator=(InjectedInputKeyOptions value) { put(value); }
			void operator()(InjectedInputKeyOptions value) { put(value); }
		} KeyOptions;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IInjectedInputKeyboardInfo_adaptor::ScanCode)->_get_ScanCode(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
			void put(unsigned short value) { hrcheck(enc(&IInjectedInputKeyboardInfo_adaptor::ScanCode)->_put_ScanCode(value)); }
			void operator=(unsigned short value) { put(value); }
			void operator()(unsigned short value) { put(value); }
		} ScanCode;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IInjectedInputKeyboardInfo_adaptor::VirtualKey)->_get_VirtualKey(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
			void put(unsigned short value) { hrcheck(enc(&IInjectedInputKeyboardInfo_adaptor::VirtualKey)->_put_VirtualKey(value)); }
			void operator=(unsigned short value) { put(value); }
			void operator()(unsigned short value) { put(value); }
		} VirtualKey;
	};
	IInjectedInputKeyboardInfo_adaptor() {}
};
template<typename X> struct adapt<IInjectedInputKeyboardInfo, X> : Windows::UI::Input::Preview::Injection::IInjectedInputKeyboardInfo_adaptor<X> { typedef adapt IInjectedInputKeyboardInfo; };
struct IInjectedInputKeyboardInfo : IInjectedInputKeyboardInfo_raw, generate<IInjectedInputKeyboardInfo> {};

// IInjectedInputGamepadInfo
struct IInjectedInputGamepadInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Buttons(Gaming::Input::GamepadButtons *value);
	virtual STDMETHODIMP _put_Buttons(Gaming::Input::GamepadButtons value);
	virtual STDMETHODIMP _get_LeftThumbstickX(double *value);
	virtual STDMETHODIMP _put_LeftThumbstickX(double value);
	virtual STDMETHODIMP _get_LeftThumbstickY(double *value);
	virtual STDMETHODIMP _put_LeftThumbstickY(double value);
	virtual STDMETHODIMP _get_LeftTrigger(double *value);
	virtual STDMETHODIMP _put_LeftTrigger(double value);
	virtual STDMETHODIMP _get_RightThumbstickX(double *value);
	virtual STDMETHODIMP _put_RightThumbstickX(double value);
	virtual STDMETHODIMP _get_RightThumbstickY(double *value);
	virtual STDMETHODIMP _put_RightThumbstickY(double value);
	virtual STDMETHODIMP _get_RightTrigger(double *value);
	virtual STDMETHODIMP _put_RightTrigger(double value);
};
template<typename X> struct IInjectedInputGamepadInfo_adaptor : X {
	union {
		struct : property {
			Gaming::Input::GamepadButtons get() { Gaming::Input::GamepadButtons value; hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::Buttons)->_get_Buttons(&value)); return value; }
			Gaming::Input::GamepadButtons operator()() { return get(); }
			operator Gaming::Input::GamepadButtons () { return get(); }
			void put(Gaming::Input::GamepadButtons value) { hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::Buttons)->_put_Buttons(value)); }
			void operator=(Gaming::Input::GamepadButtons value) { put(value); }
			void operator()(Gaming::Input::GamepadButtons value) { put(value); }
		} Buttons;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::LeftThumbstickX)->_get_LeftThumbstickX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::LeftThumbstickX)->_put_LeftThumbstickX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} LeftThumbstickX;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::LeftThumbstickY)->_get_LeftThumbstickY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::LeftThumbstickY)->_put_LeftThumbstickY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} LeftThumbstickY;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::LeftTrigger)->_get_LeftTrigger(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::LeftTrigger)->_put_LeftTrigger(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} LeftTrigger;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::RightThumbstickX)->_get_RightThumbstickX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::RightThumbstickX)->_put_RightThumbstickX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} RightThumbstickX;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::RightThumbstickY)->_get_RightThumbstickY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::RightThumbstickY)->_put_RightThumbstickY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} RightThumbstickY;
		struct : property {
			double get() { double value; hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::RightTrigger)->_get_RightTrigger(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInjectedInputGamepadInfo_adaptor::RightTrigger)->_put_RightTrigger(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} RightTrigger;
	};
	IInjectedInputGamepadInfo_adaptor() {}
};
template<typename X> struct adapt<IInjectedInputGamepadInfo, X> : Windows::UI::Input::Preview::Injection::IInjectedInputGamepadInfo_adaptor<X> { typedef adapt IInjectedInputGamepadInfo; };
struct IInjectedInputGamepadInfo : IInjectedInputGamepadInfo_raw, generate<IInjectedInputGamepadInfo> {};

// IInjectedInputGamepadInfoFactory
struct IInjectedInputGamepadInfoFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceFromGamepadReading(Gaming::Input::GamepadReading reading, InjectedInputGamepadInfo* *value);
};

// InjectedInputGamepadInfo
template<typename> struct InjectedInputGamepadInfo_statics {
	static InjectedInputGamepadInfo *activate() { InjectedInputGamepadInfo *t; get_activation_factory<InjectedInputGamepadInfo>()->ActivateInstance((IInspectable**)&t); return t; }
	static InjectedInputGamepadInfo *activate(const Gaming::Input::GamepadReading& reading) { InjectedInputGamepadInfo *value; hrcheck(get_activation_factory<InjectedInputGamepadInfo, IInjectedInputGamepadInfoFactory>()->_CreateInstance(reading, &value)); return value; }
};

template<typename X> struct statics<InjectedInputGamepadInfo, X> : X, Windows::UI::Input::Preview::Injection::InjectedInputGamepadInfo_statics<void> {
	using Windows::UI::Input::Preview::Injection::InjectedInputGamepadInfo_statics<void>::activate;
	typedef typename X::root_type InjectedInputGamepadInfo;
};
struct InjectedInputGamepadInfo : generate<InjectedInputGamepadInfo> {};

// IInputInjector
struct IInputInjector_raw : IInspectable {
	virtual STDMETHODIMP _InjectKeyboardInput(Foundation::Collections::IIterable<InjectedInputKeyboardInfo*>* input);
	virtual STDMETHODIMP _InjectMouseInput(Foundation::Collections::IIterable<InjectedInputMouseInfo*>* input);
	virtual STDMETHODIMP _InitializeTouchInjection(InjectedInputVisualizationMode visualMode);
	virtual STDMETHODIMP _InjectTouchInput(Foundation::Collections::IIterable<InjectedInputTouchInfo*>* input);
	virtual STDMETHODIMP _UninitializeTouchInjection();
	virtual STDMETHODIMP _InitializePenInjection(InjectedInputVisualizationMode visualMode);
	virtual STDMETHODIMP _InjectPenInput(InjectedInputPenInfo* input);
	virtual STDMETHODIMP _UninitializePenInjection();
	virtual STDMETHODIMP _InjectShortcut(InjectedInputShortcut shortcut);
};
template<typename X> struct IInputInjector_adaptor : X {
	void InjectKeyboardInput(pptr<Foundation::Collections::IIterable<ptr<InjectedInputKeyboardInfo>>> input) { hrcheck(X::get()->_InjectKeyboardInput(to_abi(input))); }
	void InjectMouseInput(pptr<Foundation::Collections::IIterable<ptr<InjectedInputMouseInfo>>> input) { hrcheck(X::get()->_InjectMouseInput(to_abi(input))); }
	void InitializeTouchInjection(InjectedInputVisualizationMode visualMode) { hrcheck(X::get()->_InitializeTouchInjection(visualMode)); }
	void InjectTouchInput(pptr<Foundation::Collections::IIterable<ptr<InjectedInputTouchInfo>>> input) { hrcheck(X::get()->_InjectTouchInput(to_abi(input))); }
	void UninitializeTouchInjection() { hrcheck(X::get()->_UninitializeTouchInjection()); }
	void InitializePenInjection(InjectedInputVisualizationMode visualMode) { hrcheck(X::get()->_InitializePenInjection(visualMode)); }
	void InjectPenInput(pptr<InjectedInputPenInfo> input) { hrcheck(X::get()->_InjectPenInput(input)); }
	void UninitializePenInjection() { hrcheck(X::get()->_UninitializePenInjection()); }
	void InjectShortcut(InjectedInputShortcut shortcut) { hrcheck(X::get()->_InjectShortcut(shortcut)); }
};
template<typename X> struct adapt<IInputInjector, X> : Windows::UI::Input::Preview::Injection::IInputInjector_adaptor<X> { typedef adapt IInputInjector; };
struct IInputInjector : IInputInjector_raw, generate<IInputInjector> {};

// InjectedInputKeyboardInfo
template<typename X> struct statics<InjectedInputKeyboardInfo, X> : X {
	typedef typename X::root_type InjectedInputKeyboardInfo;
};
struct InjectedInputKeyboardInfo : generate<InjectedInputKeyboardInfo> {};

// InjectedInputMouseInfo
template<typename X> struct statics<InjectedInputMouseInfo, X> : X {
	typedef typename X::root_type InjectedInputMouseInfo;
};
struct InjectedInputMouseInfo : generate<InjectedInputMouseInfo> {};

// InjectedInputTouchInfo
template<typename X> struct statics<InjectedInputTouchInfo, X> : X {
	typedef typename X::root_type InjectedInputTouchInfo;
};
struct InjectedInputTouchInfo : generate<InjectedInputTouchInfo> {};

// InjectedInputPenInfo
template<typename X> struct statics<InjectedInputPenInfo, X> : X {
	typedef typename X::root_type InjectedInputPenInfo;
};
struct InjectedInputPenInfo : generate<InjectedInputPenInfo> {};

// IInputInjector2
struct IInputInjector2_raw : IInspectable {
	virtual STDMETHODIMP _InitializeGamepadInjection();
	virtual STDMETHODIMP _InjectGamepadInput(InjectedInputGamepadInfo* input);
	virtual STDMETHODIMP _UninitializeGamepadInjection();
};
template<typename X> struct IInputInjector2_adaptor : X {
	void InitializeGamepadInjection() { hrcheck(X::get()->_InitializeGamepadInjection()); }
	void InjectGamepadInput(pptr<InjectedInputGamepadInfo> input) { hrcheck(X::get()->_InjectGamepadInput(input)); }
	void UninitializeGamepadInjection() { hrcheck(X::get()->_UninitializeGamepadInjection()); }
};
template<typename X> struct adapt<IInputInjector2, X> : Windows::UI::Input::Preview::Injection::IInputInjector2_adaptor<X> { typedef adapt IInputInjector2; };
struct IInputInjector2 : IInputInjector2_raw, generate<IInputInjector2> {};

// IInputInjectorStatics
struct IInputInjectorStatics : IInspectable {
	virtual STDMETHODIMP _TryCreate(InputInjector* *instance);
};

// IInputInjectorStatics2
struct IInputInjectorStatics2 : IInspectable {
	virtual STDMETHODIMP _TryCreateForAppBroadcastOnly(InputInjector* *instance);
};

// InputInjector
template<typename> struct InputInjector_statics {
	static ptr<InputInjector> TryCreateForAppBroadcastOnly() { InputInjector* instance; hrcheck(get_activation_factory<InputInjector, IInputInjectorStatics2>()->_TryCreateForAppBroadcastOnly(&instance)); return from_abi(instance); }
	static ptr<InputInjector> TryCreate() { InputInjector* instance; hrcheck(get_activation_factory<InputInjector, IInputInjectorStatics>()->_TryCreate(&instance)); return from_abi(instance); }
};

template<typename X> struct statics<InputInjector, X> : X, Windows::UI::Input::Preview::Injection::InputInjector_statics<void> {
	typedef typename X::root_type InputInjector;
};
struct InputInjector : generate<InputInjector> {};
}}}}}
} // namespace iso_winrt
