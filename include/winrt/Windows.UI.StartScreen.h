#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.StartScreen

#include "Windows.UI.StartScreen.0.h"
#include "Windows.Perception.Spatial.0.h"
#include "Windows.UI.Popups.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Core {
struct AppListEntry;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::UI::StartScreen::JumpListSystemGroupKind> : enum_type<int> {};
template<> struct def<Windows::UI::StartScreen::JumpListItemKind> : enum_type<int> {};
template<> struct def<Windows::UI::StartScreen::IJumpListItem> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::IJumpListItemStatics> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::JumpListItem> : class_type<Platform::Object, Windows::UI::StartScreen::IJumpListItem> {};
template<> struct def<Windows::UI::StartScreen::IJumpList> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::IJumpListStatics> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::JumpList> : class_type<Platform::Object, Windows::UI::StartScreen::IJumpList> {};
template<> struct def<Windows::UI::StartScreen::TileOptions> : enum_type<unsigned> {};
template<> struct def<Windows::UI::StartScreen::TileSize> : enum_type<int> {};
template<> struct def<Windows::UI::StartScreen::ForegroundText> : enum_type<int> {};
template<> struct def<Windows::UI::StartScreen::TileMixedRealityModelActivationBehavior> : enum_type<int> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTile> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTile2> : interface_type<Windows::UI::StartScreen::ISecondaryTile> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTileVisualElements4> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTileVisualElements3> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTileVisualElements2> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTileVisualElements> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::SecondaryTileVisualElements> : class_type<Platform::Object, Windows::UI::StartScreen::ISecondaryTileVisualElements, Windows::UI::StartScreen::ISecondaryTileVisualElements2, Windows::UI::StartScreen::ISecondaryTileVisualElements3, Windows::UI::StartScreen::ISecondaryTileVisualElements4> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTileStatics> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTileFactory> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::ISecondaryTileFactory2> : interface_type<Windows::UI::StartScreen::ISecondaryTileFactory> {};
template<> struct def<Windows::UI::StartScreen::SecondaryTile> : class_type<Platform::Object, Windows::UI::StartScreen::ISecondaryTile, Windows::UI::StartScreen::ISecondaryTile2>, custom_activators {};
template<> struct def<Windows::UI::StartScreen::IVisualElementsRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::VisualElementsRequestedEventArgs> : class_type<Platform::Object, Windows::UI::StartScreen::IVisualElementsRequestedEventArgs> {};
template<> struct def<Windows::UI::StartScreen::ITileMixedRealityModel> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::ITileMixedRealityModel2> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::TileMixedRealityModel> : class_type<Platform::Object, Windows::UI::StartScreen::ITileMixedRealityModel, Windows::UI::StartScreen::ITileMixedRealityModel2> {};
template<> struct def<Windows::UI::StartScreen::IVisualElementsRequest> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::VisualElementsRequest> : class_type<Platform::Object, Windows::UI::StartScreen::IVisualElementsRequest> {};
template<> struct def<Windows::UI::StartScreen::IVisualElementsRequestDeferral> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::VisualElementsRequestDeferral> : class_type<Platform::Object, Windows::UI::StartScreen::IVisualElementsRequestDeferral> {};
template<> struct def<Windows::UI::StartScreen::IStartScreenManager> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::IStartScreenManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::StartScreen::StartScreenManager> : class_type<Platform::Object, Windows::UI::StartScreen::IStartScreenManager> {};

// uuids

template<> struct uuid<Windows::UI::StartScreen::IJumpListItem> { define_guid(0x7ADB6717, 0x8B5D, 0x4820, 0x99, 0x5B, 0x9B, 0x41, 0x8D, 0xBE, 0x48, 0xB0);};
template<> struct uuid<Windows::UI::StartScreen::IJumpListItemStatics> { define_guid(0xF1BFC4E8, 0xC7AA, 0x49CB, 0x8D, 0xDE, 0xEC, 0xFC, 0xCD, 0x7A, 0xD7, 0xE4);};
template<> struct uuid<Windows::UI::StartScreen::IJumpList> { define_guid(0xB0234C3E, 0xCD6F, 0x4CB6, 0xA6, 0x11, 0x61, 0xFD, 0x50, 0x5F, 0x3E, 0xD1);};
template<> struct uuid<Windows::UI::StartScreen::IJumpListStatics> { define_guid(0xA7E0C681, 0xE67E, 0x4B74, 0x82, 0x50, 0x3F, 0x32, 0x2C, 0x4D, 0x92, 0xC3);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTile> { define_guid(0x9E9E51E0, 0x2BB5, 0x4BC0, 0xBB, 0x8D, 0x42, 0xB2, 0x3A, 0xBC, 0xC8, 0x8D);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTile2> { define_guid(0xB2F6CC35, 0x3250, 0x4990, 0x92, 0x3C, 0x29, 0x4A, 0xB4, 0xB6, 0x94, 0xDD);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTileVisualElements4> { define_guid(0x66566117, 0xB544, 0x40D2, 0x8D, 0x12, 0x74, 0xD4, 0xEC, 0x24, 0xD0, 0x4C);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTileVisualElements3> { define_guid(0x56B55AD6, 0xD15C, 0x40F4, 0x81, 0xE7, 0x57, 0xFF, 0xD8, 0xF8, 0xA4, 0xE9);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTileVisualElements2> { define_guid(0xFD2E31D0, 0x57DC, 0x4794, 0x8E, 0xCF, 0x56, 0x82, 0xF5, 0xF3, 0xE6, 0xEF);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTileVisualElements> { define_guid(0x1D8DF333, 0x815E, 0x413F, 0x9F, 0x50, 0xA8, 0x1D, 0xA7, 0xA, 0x96, 0xB2);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTileStatics> { define_guid(0x99908DAE, 0xD051, 0x4676, 0x87, 0xFE, 0x9E, 0xC2, 0x42, 0xD8, 0x3C, 0x74);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTileFactory> { define_guid(0x57F52CA0, 0x51BC, 0x4ABF, 0x8E, 0xBF, 0x62, 0x7A, 0x3, 0x98, 0xB0, 0x5A);};
template<> struct uuid<Windows::UI::StartScreen::ISecondaryTileFactory2> { define_guid(0x274B8A3B, 0x522D, 0x448E, 0x9E, 0xB2, 0xD0, 0x67, 0x2A, 0xB3, 0x45, 0xC8);};
template<> struct uuid<Windows::UI::StartScreen::IVisualElementsRequestedEventArgs> { define_guid(0x7B6FC982, 0x3A0D, 0x4ECE, 0xAF, 0x96, 0xCD, 0x17, 0xE1, 0xB0, 0xB, 0x2D);};
template<> struct uuid<Windows::UI::StartScreen::ITileMixedRealityModel> { define_guid(0xB0764E5B, 0x887D, 0x4242, 0x9A, 0x19, 0x3D, 0xA, 0x4E, 0xA7, 0x80, 0x31);};
template<> struct uuid<Windows::UI::StartScreen::ITileMixedRealityModel2> { define_guid(0x439470B2, 0xD7C5, 0x410B, 0x83, 0x19, 0x94, 0x86, 0xA2, 0x7B, 0x6C, 0x67);};
template<> struct uuid<Windows::UI::StartScreen::IVisualElementsRequest> { define_guid(0xC138333A, 0x9308, 0x4072, 0x88, 0xCC, 0xD0, 0x68, 0xDB, 0x34, 0x7C, 0x68);};
template<> struct uuid<Windows::UI::StartScreen::IVisualElementsRequestDeferral> { define_guid(0xA1656EB0, 0x126, 0x4357, 0x82, 0x4, 0xBD, 0x82, 0xBB, 0x2A, 0x4, 0x6D);};
template<> struct uuid<Windows::UI::StartScreen::IStartScreenManager> { define_guid(0x4A1DCBCB, 0x26E9, 0x4EB4, 0x89, 0x33, 0x85, 0x9E, 0xB6, 0xEC, 0xDB, 0x29);};
template<> struct uuid<Windows::UI::StartScreen::IStartScreenManagerStatics> { define_guid(0x7865EF0F, 0xB585, 0x464E, 0x89, 0x93, 0x34, 0xE8, 0xF8, 0x73, 0x8D, 0x48);};

// types

namespace Windows { namespace UI { namespace StartScreen {

// IJumpListItem
struct IJumpListItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(JumpListItemKind *value);
	virtual STDMETHODIMP _get_Arguments(HSTRING *value);
	virtual STDMETHODIMP _get_RemovedByUser(bool *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_GroupName(HSTRING *value);
	virtual STDMETHODIMP _put_GroupName(HSTRING value);
	virtual STDMETHODIMP _get_Logo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Logo(Foundation::Uri* value);
};
template<typename X> struct IJumpListItem_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IJumpListItem_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Arguments;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IJumpListItem_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IJumpListItem_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IJumpListItem_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IJumpListItem_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IJumpListItem_adaptor::GroupName)->_get_GroupName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IJumpListItem_adaptor::GroupName)->_put_GroupName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} GroupName;
		struct : property {
			JumpListItemKind get() { JumpListItemKind value; hrcheck(enc(&IJumpListItem_adaptor::Kind)->_get_Kind(&value)); return value; }
			JumpListItemKind operator()() { return get(); }
			operator JumpListItemKind () { return get(); }
		} Kind;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IJumpListItem_adaptor::Logo)->_get_Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IJumpListItem_adaptor::Logo)->_put_Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Logo;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IJumpListItem_adaptor::RemovedByUser)->_get_RemovedByUser(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} RemovedByUser;
	};
	IJumpListItem_adaptor() {}
};
template<typename X> struct adapt<IJumpListItem, X> : Windows::UI::StartScreen::IJumpListItem_adaptor<X> { typedef adapt IJumpListItem; };
struct IJumpListItem : IJumpListItem_raw, generate<IJumpListItem> {};

// IJumpListItemStatics
struct IJumpListItemStatics : IInspectable {
	virtual STDMETHODIMP _CreateWithArguments(HSTRING arguments, HSTRING displayName, JumpListItem* *result);
	virtual STDMETHODIMP _CreateSeparator(JumpListItem* *result);
};

// JumpListItem
template<typename> struct JumpListItem_statics {
	static ptr<JumpListItem> CreateWithArguments(hstring_ref arguments, hstring_ref displayName) { JumpListItem* result; hrcheck(get_activation_factory<JumpListItem, IJumpListItemStatics>()->_CreateWithArguments(arguments, displayName, &result)); return from_abi(result); }
	static ptr<JumpListItem> CreateSeparator() { JumpListItem* result; hrcheck(get_activation_factory<JumpListItem, IJumpListItemStatics>()->_CreateSeparator(&result)); return from_abi(result); }
};

template<typename X> struct statics<JumpListItem, X> : X, Windows::UI::StartScreen::JumpListItem_statics<void> {
	typedef typename X::root_type JumpListItem;
};
struct JumpListItem : generate<JumpListItem> {};

// IJumpList
struct IJumpList_raw : IInspectable {
	virtual STDMETHODIMP _get_Items(Foundation::Collections::IVector<JumpListItem*>* *value);
	virtual STDMETHODIMP _get_SystemGroupKind(JumpListSystemGroupKind *value);
	virtual STDMETHODIMP _put_SystemGroupKind(JumpListSystemGroupKind value);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IJumpList_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<JumpListItem>>> get() { Foundation::Collections::IVector<JumpListItem*>* value; hrcheck(enc(&IJumpList_adaptor::Items)->_get_Items(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<JumpListItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<JumpListItem>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<JumpListItem>>> operator->() { return get(); }
		} Items;
		struct : property {
			JumpListSystemGroupKind get() { JumpListSystemGroupKind value; hrcheck(enc(&IJumpList_adaptor::SystemGroupKind)->_get_SystemGroupKind(&value)); return value; }
			JumpListSystemGroupKind operator()() { return get(); }
			operator JumpListSystemGroupKind () { return get(); }
			void put(JumpListSystemGroupKind value) { hrcheck(enc(&IJumpList_adaptor::SystemGroupKind)->_put_SystemGroupKind(value)); }
			void operator=(JumpListSystemGroupKind value) { put(value); }
			void operator()(JumpListSystemGroupKind value) { put(value); }
		} SystemGroupKind;
	};
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveAsync(&result)); return from_abi(result); }
	IJumpList_adaptor() {}
};
template<typename X> struct adapt<IJumpList, X> : Windows::UI::StartScreen::IJumpList_adaptor<X> { typedef adapt IJumpList; };
struct IJumpList : IJumpList_raw, generate<IJumpList> {};

// IJumpListStatics
struct IJumpListStatics : IInspectable {
	virtual STDMETHODIMP _LoadCurrentAsync(Foundation::IAsyncOperation<JumpList*>* *result);
	virtual STDMETHODIMP _IsSupported(bool *result);
};

// JumpList
template<typename> struct JumpList_statics {
	static ptr<Foundation::IAsyncOperation<ptr<JumpList>>> LoadCurrentAsync() { Foundation::IAsyncOperation<JumpList*>* result; hrcheck(get_activation_factory<JumpList, IJumpListStatics>()->_LoadCurrentAsync(&result)); return from_abi(result); }
	static bool IsSupported() { bool result; hrcheck(get_activation_factory<JumpList, IJumpListStatics>()->_IsSupported(&result)); return result; }
};

template<typename X> struct statics<JumpList, X> : X, Windows::UI::StartScreen::JumpList_statics<void> {
	typedef typename X::root_type JumpList;
};
struct JumpList : generate<JumpList> {};

// ISecondaryTile
struct ISecondaryTile_raw : IInspectable {
	virtual STDMETHODIMP _put_TileId(HSTRING value);
	virtual STDMETHODIMP _get_TileId(HSTRING *value);
	virtual STDMETHODIMP _put_Arguments(HSTRING value);
	virtual STDMETHODIMP _get_Arguments(HSTRING *value);
	virtual STDMETHODIMP _put_ShortName(HSTRING value);
	virtual STDMETHODIMP _get_ShortName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Logo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_SmallLogo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_SmallLogo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_WideLogo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_WideLogo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_LockScreenBadgeLogo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_LockScreenBadgeLogo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_LockScreenDisplayBadgeAndTileText(bool value);
	virtual STDMETHODIMP _get_LockScreenDisplayBadgeAndTileText(bool *value);
	virtual STDMETHODIMP _put_TileOptions(StartScreen::TileOptions value);
	virtual STDMETHODIMP _get_TileOptions(StartScreen::TileOptions *value);
	virtual STDMETHODIMP _put_ForegroundText(StartScreen::ForegroundText value);
	virtual STDMETHODIMP _get_ForegroundText(StartScreen::ForegroundText *value);
	virtual STDMETHODIMP _put_BackgroundColor(Color value);
	virtual STDMETHODIMP _get_BackgroundColor(Color *value);
	virtual STDMETHODIMP _RequestCreateAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestCreateAsyncWithPoint(Foundation::Point invocationPoint, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestCreateAsyncWithRect(Foundation::Rect selection, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestCreateAsyncWithRectAndPlacement(Foundation::Rect selection, Popups::Placement preferredPlacement, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestDeleteAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestDeleteAsyncWithPoint(Foundation::Point invocationPoint, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestDeleteAsyncWithRect(Foundation::Rect selection, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestDeleteAsyncWithRectAndPlacement(Foundation::Rect selection, Popups::Placement preferredPlacement, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _UpdateAsync(Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ISecondaryTile_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryTile_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISecondaryTile_adaptor::Arguments)->_put_Arguments(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Arguments;
		struct : property {
			Color get() { Color value; hrcheck(enc(&ISecondaryTile_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&ISecondaryTile_adaptor::BackgroundColor)->_put_BackgroundColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} BackgroundColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryTile_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISecondaryTile_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			StartScreen::ForegroundText get() { StartScreen::ForegroundText value; hrcheck(enc(&ISecondaryTile_adaptor::ForegroundText)->_get_ForegroundText(&value)); return value; }
			StartScreen::ForegroundText operator()() { return get(); }
			operator StartScreen::ForegroundText () { return get(); }
			void put(StartScreen::ForegroundText value) { hrcheck(enc(&ISecondaryTile_adaptor::ForegroundText)->_put_ForegroundText(value)); }
			void operator=(StartScreen::ForegroundText value) { put(value); }
			void operator()(StartScreen::ForegroundText value) { put(value); }
		} ForegroundText;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTile_adaptor::LockScreenBadgeLogo)->_get_LockScreenBadgeLogo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTile_adaptor::LockScreenBadgeLogo)->_put_LockScreenBadgeLogo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} LockScreenBadgeLogo;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISecondaryTile_adaptor::LockScreenDisplayBadgeAndTileText)->_get_LockScreenDisplayBadgeAndTileText(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISecondaryTile_adaptor::LockScreenDisplayBadgeAndTileText)->_put_LockScreenDisplayBadgeAndTileText(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} LockScreenDisplayBadgeAndTileText;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTile_adaptor::Logo)->_get_Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTile_adaptor::Logo)->_put_Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Logo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryTile_adaptor::ShortName)->_get_ShortName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISecondaryTile_adaptor::ShortName)->_put_ShortName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ShortName;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTile_adaptor::SmallLogo)->_get_SmallLogo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTile_adaptor::SmallLogo)->_put_SmallLogo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} SmallLogo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryTile_adaptor::TileId)->_get_TileId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISecondaryTile_adaptor::TileId)->_put_TileId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TileId;
		struct : property {
			StartScreen::TileOptions get() { StartScreen::TileOptions value; hrcheck(enc(&ISecondaryTile_adaptor::TileOptions)->_get_TileOptions(&value)); return value; }
			StartScreen::TileOptions operator()() { return get(); }
			operator StartScreen::TileOptions () { return get(); }
			void put(StartScreen::TileOptions value) { hrcheck(enc(&ISecondaryTile_adaptor::TileOptions)->_put_TileOptions(value)); }
			void operator=(StartScreen::TileOptions value) { put(value); }
			void operator()(StartScreen::TileOptions value) { put(value); }
		} TileOptions;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTile_adaptor::WideLogo)->_get_WideLogo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTile_adaptor::WideLogo)->_put_WideLogo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} WideLogo;
	};
	ptr<Foundation::IAsyncOperation<bool>> RequestCreateAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestCreateAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestCreateAsync(const Foundation::Point& invocationPoint) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestCreateAsyncWithPoint(invocationPoint, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestCreateForSelectionAsync(const Foundation::Rect& selection) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestCreateAsyncWithRect(selection, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestCreateForSelectionAsync(const Foundation::Rect& selection, Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestCreateAsyncWithRectAndPlacement(selection, preferredPlacement, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestDeleteAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestDeleteAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestDeleteAsync(const Foundation::Point& invocationPoint) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestDeleteAsyncWithPoint(invocationPoint, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestDeleteForSelectionAsync(const Foundation::Rect& selection) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestDeleteAsyncWithRect(selection, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestDeleteForSelectionAsync(const Foundation::Rect& selection, Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestDeleteAsyncWithRectAndPlacement(selection, preferredPlacement, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> UpdateAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_UpdateAsync(&operation)); return from_abi(operation); }
	ISecondaryTile_adaptor() {}
};
template<typename X> struct adapt<ISecondaryTile, X> : Windows::UI::StartScreen::ISecondaryTile_adaptor<X> { typedef adapt ISecondaryTile; };
struct ISecondaryTile : ISecondaryTile_raw, generate<ISecondaryTile> {};

// ISecondaryTile2
struct ISecondaryTile2_raw : IInspectable {
	virtual STDMETHODIMP _put_PhoneticName(HSTRING value);
	virtual STDMETHODIMP _get_PhoneticName(HSTRING *value);
	virtual STDMETHODIMP _get_VisualElements(SecondaryTileVisualElements* *value);
	virtual STDMETHODIMP _put_RoamingEnabled(bool value);
	virtual STDMETHODIMP _get_RoamingEnabled(bool *value);
	virtual STDMETHODIMP _add_VisualElementsRequested(Foundation::TypedEventHandler<SecondaryTile*, VisualElementsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VisualElementsRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct ISecondaryTile2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryTile2_adaptor::PhoneticName)->_get_PhoneticName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISecondaryTile2_adaptor::PhoneticName)->_put_PhoneticName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PhoneticName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISecondaryTile2_adaptor::RoamingEnabled)->_get_RoamingEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISecondaryTile2_adaptor::RoamingEnabled)->_put_RoamingEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} RoamingEnabled;
		struct : property {
			ptr<SecondaryTileVisualElements> get() { SecondaryTileVisualElements* value; hrcheck(enc(&ISecondaryTile2_adaptor::VisualElements)->_get_VisualElements(&value)); return from_abi(value); }
			ptr<SecondaryTileVisualElements> operator()() { return get(); }
			operator ptr<SecondaryTileVisualElements> () { return get(); }
			ptr<SecondaryTileVisualElements> operator->() { return get(); }
		} VisualElements;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SecondaryTile>, ptr<VisualElementsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISecondaryTile2_adaptor::VisualElementsRequested)->_add_VisualElementsRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISecondaryTile2_adaptor::VisualElementsRequested)->_remove_VisualElementsRequested(token)); }
		} VisualElementsRequested;
	};
	ISecondaryTile2_adaptor() {}
};
template<typename X> struct adapt<ISecondaryTile2, X> : Windows::UI::StartScreen::ISecondaryTile2_adaptor<X> { typedef adapt ISecondaryTile2; };
struct ISecondaryTile2 : ISecondaryTile2_raw, generate<ISecondaryTile2> {};

// ISecondaryTileVisualElements4
struct ISecondaryTileVisualElements4_raw : IInspectable {
	virtual STDMETHODIMP _get_MixedRealityModel(TileMixedRealityModel* *value);
};
template<typename X> struct ISecondaryTileVisualElements4_adaptor : X {
	union {
		struct : property {
			ptr<TileMixedRealityModel> get() { TileMixedRealityModel* value; hrcheck(enc(&ISecondaryTileVisualElements4_adaptor::MixedRealityModel)->_get_MixedRealityModel(&value)); return from_abi(value); }
			ptr<TileMixedRealityModel> operator()() { return get(); }
			operator ptr<TileMixedRealityModel> () { return get(); }
			ptr<TileMixedRealityModel> operator->() { return get(); }
		} MixedRealityModel;
	};
	ISecondaryTileVisualElements4_adaptor() {}
};
template<typename X> struct adapt<ISecondaryTileVisualElements4, X> : Windows::UI::StartScreen::ISecondaryTileVisualElements4_adaptor<X> { typedef adapt ISecondaryTileVisualElements4; };
struct ISecondaryTileVisualElements4 : ISecondaryTileVisualElements4_raw, generate<ISecondaryTileVisualElements4> {};

// ISecondaryTileVisualElements3
struct ISecondaryTileVisualElements3_raw : IInspectable {
	virtual STDMETHODIMP _put_Square44x44Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Square44x44Logo(Foundation::Uri* *value);
};
template<typename X> struct ISecondaryTileVisualElements3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTileVisualElements3_adaptor::Square44x44Logo)->_get_Square44x44Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTileVisualElements3_adaptor::Square44x44Logo)->_put_Square44x44Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Square44x44Logo;
	};
	ISecondaryTileVisualElements3_adaptor() {}
};
template<typename X> struct adapt<ISecondaryTileVisualElements3, X> : Windows::UI::StartScreen::ISecondaryTileVisualElements3_adaptor<X> { typedef adapt ISecondaryTileVisualElements3; };
struct ISecondaryTileVisualElements3 : ISecondaryTileVisualElements3_raw, generate<ISecondaryTileVisualElements3> {};

// ISecondaryTileVisualElements2
struct ISecondaryTileVisualElements2_raw : IInspectable {
	virtual STDMETHODIMP _put_Square71x71Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Square71x71Logo(Foundation::Uri* *value);
};
template<typename X> struct ISecondaryTileVisualElements2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTileVisualElements2_adaptor::Square71x71Logo)->_get_Square71x71Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTileVisualElements2_adaptor::Square71x71Logo)->_put_Square71x71Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Square71x71Logo;
	};
	ISecondaryTileVisualElements2_adaptor() {}
};
template<typename X> struct adapt<ISecondaryTileVisualElements2, X> : Windows::UI::StartScreen::ISecondaryTileVisualElements2_adaptor<X> { typedef adapt ISecondaryTileVisualElements2; };
struct ISecondaryTileVisualElements2 : ISecondaryTileVisualElements2_raw, generate<ISecondaryTileVisualElements2> {};

// ISecondaryTileVisualElements
struct ISecondaryTileVisualElements_raw : IInspectable {
	virtual STDMETHODIMP _put_Square30x30Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Square30x30Logo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Square70x70Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Square70x70Logo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Square150x150Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Square150x150Logo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Wide310x150Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Wide310x150Logo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Square310x310Logo(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Square310x310Logo(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ForegroundText(StartScreen::ForegroundText value);
	virtual STDMETHODIMP _get_ForegroundText(StartScreen::ForegroundText *value);
	virtual STDMETHODIMP _put_BackgroundColor(Color value);
	virtual STDMETHODIMP _get_BackgroundColor(Color *value);
	virtual STDMETHODIMP _put_ShowNameOnSquare150x150Logo(bool value);
	virtual STDMETHODIMP _get_ShowNameOnSquare150x150Logo(bool *value);
	virtual STDMETHODIMP _put_ShowNameOnWide310x150Logo(bool value);
	virtual STDMETHODIMP _get_ShowNameOnWide310x150Logo(bool *value);
	virtual STDMETHODIMP _put_ShowNameOnSquare310x310Logo(bool value);
	virtual STDMETHODIMP _get_ShowNameOnSquare310x310Logo(bool *value);
};
template<typename X> struct ISecondaryTileVisualElements_adaptor : X {
	union {
		struct : property {
			Color get() { Color value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::BackgroundColor)->_put_BackgroundColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} BackgroundColor;
		struct : property {
			StartScreen::ForegroundText get() { StartScreen::ForegroundText value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ForegroundText)->_get_ForegroundText(&value)); return value; }
			StartScreen::ForegroundText operator()() { return get(); }
			operator StartScreen::ForegroundText () { return get(); }
			void put(StartScreen::ForegroundText value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ForegroundText)->_put_ForegroundText(value)); }
			void operator=(StartScreen::ForegroundText value) { put(value); }
			void operator()(StartScreen::ForegroundText value) { put(value); }
		} ForegroundText;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ShowNameOnSquare150x150Logo)->_get_ShowNameOnSquare150x150Logo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ShowNameOnSquare150x150Logo)->_put_ShowNameOnSquare150x150Logo(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShowNameOnSquare150x150Logo;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ShowNameOnSquare310x310Logo)->_get_ShowNameOnSquare310x310Logo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ShowNameOnSquare310x310Logo)->_put_ShowNameOnSquare310x310Logo(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShowNameOnSquare310x310Logo;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ShowNameOnWide310x150Logo)->_get_ShowNameOnWide310x150Logo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::ShowNameOnWide310x150Logo)->_put_ShowNameOnWide310x150Logo(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShowNameOnWide310x150Logo;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square150x150Logo)->_get_Square150x150Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square150x150Logo)->_put_Square150x150Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Square150x150Logo;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square30x30Logo)->_get_Square30x30Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square30x30Logo)->_put_Square30x30Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Square30x30Logo;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square310x310Logo)->_get_Square310x310Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square310x310Logo)->_put_Square310x310Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Square310x310Logo;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square70x70Logo)->_get_Square70x70Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Square70x70Logo)->_put_Square70x70Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Square70x70Logo;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Wide310x150Logo)->_get_Wide310x150Logo(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISecondaryTileVisualElements_adaptor::Wide310x150Logo)->_put_Wide310x150Logo(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Wide310x150Logo;
	};
	ISecondaryTileVisualElements_adaptor() {}
};
template<typename X> struct adapt<ISecondaryTileVisualElements, X> : Windows::UI::StartScreen::ISecondaryTileVisualElements_adaptor<X> { typedef adapt ISecondaryTileVisualElements; };
struct ISecondaryTileVisualElements : ISecondaryTileVisualElements_raw, generate<ISecondaryTileVisualElements> {};

// SecondaryTileVisualElements
template<typename X> struct statics<SecondaryTileVisualElements, X> : X {
	typedef typename X::root_type SecondaryTileVisualElements;
};
struct SecondaryTileVisualElements : generate<SecondaryTileVisualElements> {};

// ISecondaryTileStatics
struct ISecondaryTileStatics : IInspectable {
	virtual STDMETHODIMP _Exists(HSTRING tileId, bool *exists);
	virtual STDMETHODIMP _FindAllAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryTile*>*>* *operation);
	virtual STDMETHODIMP _FindAllForApplicationAsync(HSTRING applicationId, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryTile*>*>* *operation);
	virtual STDMETHODIMP _FindAllForPackageAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryTile*>*>* *operation);
};

// ISecondaryTileFactory
struct ISecondaryTileFactory : IInspectable {
	virtual STDMETHODIMP _CreateTile(HSTRING tileId, HSTRING shortName, HSTRING displayName, HSTRING arguments, TileOptions tileOptions, Foundation::Uri* logoReference, SecondaryTile* *value);
	virtual STDMETHODIMP _CreateWideTile(HSTRING tileId, HSTRING shortName, HSTRING displayName, HSTRING arguments, TileOptions tileOptions, Foundation::Uri* logoReference, Foundation::Uri* wideLogoReference, SecondaryTile* *value);
	virtual STDMETHODIMP _CreateWithId(HSTRING tileId, SecondaryTile* *value);
};

// ISecondaryTileFactory2
struct ISecondaryTileFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateMinimalTile(HSTRING tileId, HSTRING displayName, HSTRING arguments, Foundation::Uri* square150x150Logo, TileSize desiredSize, SecondaryTile* *value);
};

// SecondaryTile
template<typename> struct SecondaryTile_statics {
	static bool Exists(hstring_ref tileId) { bool exists; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileStatics>()->_Exists(tileId, &exists)); return exists; }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<SecondaryTile>>>>> FindAllAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryTile*>*>* operation; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileStatics>()->_FindAllAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<SecondaryTile>>>>> FindAllAsync(hstring_ref applicationId) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryTile*>*>* operation; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileStatics>()->_FindAllForApplicationAsync(applicationId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<SecondaryTile>>>>> FindAllForPackageAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryTile*>*>* operation; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileStatics>()->_FindAllForPackageAsync(&operation)); return from_abi(operation); }
	static SecondaryTile *activate(hstring_ref tileId, hstring_ref displayName, hstring_ref arguments, pptr<Foundation::Uri> square150x150Logo, TileSize desiredSize) { SecondaryTile *value; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileFactory2>()->_CreateMinimalTile(tileId, displayName, arguments, square150x150Logo, desiredSize, &value)); return value; }
	static SecondaryTile *activate() { SecondaryTile *t; get_activation_factory<SecondaryTile>()->ActivateInstance((IInspectable**)&t); return t; }
	static SecondaryTile *activate(hstring_ref tileId, hstring_ref shortName, hstring_ref displayName, hstring_ref arguments, StartScreen::TileOptions tileOptions, pptr<Foundation::Uri> logoReference) { SecondaryTile *value; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileFactory>()->_CreateTile(tileId, shortName, displayName, arguments, tileOptions, logoReference, &value)); return value; }
	static SecondaryTile *activate(hstring_ref tileId, hstring_ref shortName, hstring_ref displayName, hstring_ref arguments, StartScreen::TileOptions tileOptions, pptr<Foundation::Uri> logoReference, pptr<Foundation::Uri> wideLogoReference) { SecondaryTile *value; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileFactory>()->_CreateWideTile(tileId, shortName, displayName, arguments, tileOptions, logoReference, wideLogoReference, &value)); return value; }
	static SecondaryTile *activate(hstring_ref tileId) { SecondaryTile *value; hrcheck(get_activation_factory<SecondaryTile, ISecondaryTileFactory>()->_CreateWithId(tileId, &value)); return value; }
};

template<typename X> struct statics<SecondaryTile, X> : X, Windows::UI::StartScreen::SecondaryTile_statics<void> {
	using Windows::UI::StartScreen::SecondaryTile_statics<void>::activate;
	typedef typename X::root_type SecondaryTile;
};
struct SecondaryTile : generate<SecondaryTile> {
	using ISecondaryTile::RequestDeleteForSelectionAsync;
	using ISecondaryTile::RequestCreateAsync;
	using ISecondaryTile::RequestCreateForSelectionAsync;
	using ISecondaryTile::RequestDeleteAsync;
};

// IVisualElementsRequestedEventArgs
struct IVisualElementsRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(VisualElementsRequest* *value);
};
template<typename X> struct IVisualElementsRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<VisualElementsRequest> get() { VisualElementsRequest* value; hrcheck(enc(&IVisualElementsRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<VisualElementsRequest> operator()() { return get(); }
			operator ptr<VisualElementsRequest> () { return get(); }
			ptr<VisualElementsRequest> operator->() { return get(); }
		} Request;
	};
	IVisualElementsRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IVisualElementsRequestedEventArgs, X> : Windows::UI::StartScreen::IVisualElementsRequestedEventArgs_adaptor<X> { typedef adapt IVisualElementsRequestedEventArgs; };
struct IVisualElementsRequestedEventArgs : IVisualElementsRequestedEventArgs_raw, generate<IVisualElementsRequestedEventArgs> {};

// VisualElementsRequestedEventArgs
template<typename X> struct statics<VisualElementsRequestedEventArgs, X> : X {
	typedef typename X::root_type VisualElementsRequestedEventArgs;
};
struct VisualElementsRequestedEventArgs : generate<VisualElementsRequestedEventArgs> {};

// ITileMixedRealityModel
struct ITileMixedRealityModel_raw : IInspectable {
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_BoundingBox(Foundation::IReference<Perception::Spatial::SpatialBoundingBox>* value);
	virtual STDMETHODIMP _get_BoundingBox(Foundation::IReference<Perception::Spatial::SpatialBoundingBox>* *value);
};
template<typename X> struct ITileMixedRealityModel_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Perception::Spatial::SpatialBoundingBox>> get() { Foundation::IReference<Perception::Spatial::SpatialBoundingBox>* value; hrcheck(enc(&ITileMixedRealityModel_adaptor::BoundingBox)->_get_BoundingBox(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Perception::Spatial::SpatialBoundingBox>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Perception::Spatial::SpatialBoundingBox>> () { return get(); }
			ptr<Foundation::IReference<Perception::Spatial::SpatialBoundingBox>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Perception::Spatial::SpatialBoundingBox>> value) { hrcheck(enc(&ITileMixedRealityModel_adaptor::BoundingBox)->_put_BoundingBox(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Perception::Spatial::SpatialBoundingBox>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Perception::Spatial::SpatialBoundingBox>> value) { put(to_abi(value)); }
		} BoundingBox;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ITileMixedRealityModel_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ITileMixedRealityModel_adaptor::Uri)->_put_Uri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Uri;
	};
	ITileMixedRealityModel_adaptor() {}
};
template<typename X> struct adapt<ITileMixedRealityModel, X> : Windows::UI::StartScreen::ITileMixedRealityModel_adaptor<X> { typedef adapt ITileMixedRealityModel; };
struct ITileMixedRealityModel : ITileMixedRealityModel_raw, generate<ITileMixedRealityModel> {};

// ITileMixedRealityModel2
struct ITileMixedRealityModel2_raw : IInspectable {
	virtual STDMETHODIMP _put_ActivationBehavior(TileMixedRealityModelActivationBehavior value);
	virtual STDMETHODIMP _get_ActivationBehavior(TileMixedRealityModelActivationBehavior *value);
};
template<typename X> struct ITileMixedRealityModel2_adaptor : X {
	union {
		struct : property {
			TileMixedRealityModelActivationBehavior get() { TileMixedRealityModelActivationBehavior value; hrcheck(enc(&ITileMixedRealityModel2_adaptor::ActivationBehavior)->_get_ActivationBehavior(&value)); return value; }
			TileMixedRealityModelActivationBehavior operator()() { return get(); }
			operator TileMixedRealityModelActivationBehavior () { return get(); }
			void put(TileMixedRealityModelActivationBehavior value) { hrcheck(enc(&ITileMixedRealityModel2_adaptor::ActivationBehavior)->_put_ActivationBehavior(value)); }
			void operator=(TileMixedRealityModelActivationBehavior value) { put(value); }
			void operator()(TileMixedRealityModelActivationBehavior value) { put(value); }
		} ActivationBehavior;
	};
	ITileMixedRealityModel2_adaptor() {}
};
template<typename X> struct adapt<ITileMixedRealityModel2, X> : Windows::UI::StartScreen::ITileMixedRealityModel2_adaptor<X> { typedef adapt ITileMixedRealityModel2; };
struct ITileMixedRealityModel2 : ITileMixedRealityModel2_raw, generate<ITileMixedRealityModel2> {};

// TileMixedRealityModel
template<typename X> struct statics<TileMixedRealityModel, X> : X {
	typedef typename X::root_type TileMixedRealityModel;
};
struct TileMixedRealityModel : generate<TileMixedRealityModel> {};

// IVisualElementsRequest
struct IVisualElementsRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_VisualElements(SecondaryTileVisualElements* *value);
	virtual STDMETHODIMP _get_AlternateVisualElements(Foundation::Collections::IVectorView<SecondaryTileVisualElements*>* *value);
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
	virtual STDMETHODIMP _GetDeferral(VisualElementsRequestDeferral* *deferral);
};
template<typename X> struct IVisualElementsRequest_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<SecondaryTileVisualElements>>> get() { Foundation::Collections::IVectorView<SecondaryTileVisualElements*>* value; hrcheck(enc(&IVisualElementsRequest_adaptor::AlternateVisualElements)->_get_AlternateVisualElements(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<SecondaryTileVisualElements>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<SecondaryTileVisualElements>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<SecondaryTileVisualElements>>> operator->() { return get(); }
		} AlternateVisualElements;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IVisualElementsRequest_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
		struct : property {
			ptr<SecondaryTileVisualElements> get() { SecondaryTileVisualElements* value; hrcheck(enc(&IVisualElementsRequest_adaptor::VisualElements)->_get_VisualElements(&value)); return from_abi(value); }
			ptr<SecondaryTileVisualElements> operator()() { return get(); }
			operator ptr<SecondaryTileVisualElements> () { return get(); }
			ptr<SecondaryTileVisualElements> operator->() { return get(); }
		} VisualElements;
	};
	ptr<VisualElementsRequestDeferral> GetDeferral() { VisualElementsRequestDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	IVisualElementsRequest_adaptor() {}
};
template<typename X> struct adapt<IVisualElementsRequest, X> : Windows::UI::StartScreen::IVisualElementsRequest_adaptor<X> { typedef adapt IVisualElementsRequest; };
struct IVisualElementsRequest : IVisualElementsRequest_raw, generate<IVisualElementsRequest> {};

// VisualElementsRequest
template<typename X> struct statics<VisualElementsRequest, X> : X {
	typedef typename X::root_type VisualElementsRequest;
};
struct VisualElementsRequest : generate<VisualElementsRequest> {};

// IVisualElementsRequestDeferral
struct IVisualElementsRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IVisualElementsRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IVisualElementsRequestDeferral, X> : Windows::UI::StartScreen::IVisualElementsRequestDeferral_adaptor<X> { typedef adapt IVisualElementsRequestDeferral; };
struct IVisualElementsRequestDeferral : IVisualElementsRequestDeferral_raw, generate<IVisualElementsRequestDeferral> {};

// VisualElementsRequestDeferral
template<typename X> struct statics<VisualElementsRequestDeferral, X> : X {
	typedef typename X::root_type VisualElementsRequestDeferral;
};
struct VisualElementsRequestDeferral : generate<VisualElementsRequestDeferral> {};

// IStartScreenManager
struct IStartScreenManager_raw : IInspectable {
	virtual STDMETHODIMP _get_User(System::User* *value);
	virtual STDMETHODIMP _SupportsAppListEntry(ApplicationModel::Core::AppListEntry* appListEntry, bool *result);
	virtual STDMETHODIMP _ContainsAppListEntryAsync(ApplicationModel::Core::AppListEntry* appListEntry, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestAddAppListEntryAsync(ApplicationModel::Core::AppListEntry* appListEntry, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IStartScreenManager_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IStartScreenManager_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	bool SupportsAppListEntry(pptr<ApplicationModel::Core::AppListEntry> appListEntry) { bool result; hrcheck(X::get()->_SupportsAppListEntry(appListEntry, &result)); return result; }
	ptr<Foundation::IAsyncOperation<bool>> ContainsAppListEntryAsync(pptr<ApplicationModel::Core::AppListEntry> appListEntry) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_ContainsAppListEntryAsync(appListEntry, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestAddAppListEntryAsync(pptr<ApplicationModel::Core::AppListEntry> appListEntry) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestAddAppListEntryAsync(appListEntry, &operation)); return from_abi(operation); }
	IStartScreenManager_adaptor() {}
};
template<typename X> struct adapt<IStartScreenManager, X> : Windows::UI::StartScreen::IStartScreenManager_adaptor<X> { typedef adapt IStartScreenManager; };
struct IStartScreenManager : IStartScreenManager_raw, generate<IStartScreenManager> {};

// IStartScreenManagerStatics
struct IStartScreenManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(StartScreenManager* *value);
	virtual STDMETHODIMP _GetForUser(System::User* user, StartScreenManager* *result);
};

// StartScreenManager
template<typename> struct StartScreenManager_statics {
	static ptr<StartScreenManager> GetDefault() { StartScreenManager* value; hrcheck(get_activation_factory<StartScreenManager, IStartScreenManagerStatics>()->_GetDefault(&value)); return from_abi(value); }
	static ptr<StartScreenManager> GetForUser(pptr<System::User> user) { StartScreenManager* result; hrcheck(get_activation_factory<StartScreenManager, IStartScreenManagerStatics>()->_GetForUser(user, &result)); return from_abi(result); }
};

template<typename X> struct statics<StartScreenManager, X> : X, Windows::UI::StartScreen::StartScreenManager_statics<void> {
	typedef typename X::root_type StartScreenManager;
};
struct StartScreenManager : generate<StartScreenManager> {};
}}}
} // namespace iso_winrt
