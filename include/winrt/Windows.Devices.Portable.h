#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Portable

#include "Windows.Devices.Portable.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Storage {
struct StorageFolder;
}}

// defs

template<> struct def<Windows::Devices::Portable::ServiceDeviceType> : enum_type<int> {};
template<> struct def<Windows::Devices::Portable::IStorageDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Portable::IServiceDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Portable::StorageDevice> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Portable::ServiceDevice> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Portable::PortableDeviceContract> : value_type<> {};

// uuids

template<> struct uuid<Windows::Devices::Portable::IStorageDeviceStatics> { define_guid(0x5ECE44EE, 0x1B23, 0x4DD2, 0x86, 0x52, 0xBC, 0x16, 0x4F, 0x0, 0x31, 0x28);};
template<> struct uuid<Windows::Devices::Portable::IServiceDeviceStatics> { define_guid(0xA88214E1, 0x59C7, 0x4A20, 0xAB, 0xA6, 0x9F, 0x67, 0x7, 0x93, 0x72, 0x30);};

// types

namespace Windows { namespace Devices { namespace Portable {

// IStorageDeviceStatics
struct IStorageDeviceStatics : IInspectable {
	virtual STDMETHODIMP _FromId(HSTRING deviceId, Storage::StorageFolder* *deviceRoot);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *selector);
};

// IServiceDeviceStatics
struct IServiceDeviceStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(ServiceDeviceType serviceType, HSTRING *selector);
	virtual STDMETHODIMP _GetDeviceSelectorFromServiceId(Platform::Guid serviceId, HSTRING *selector);
};

// StorageDevice
template<typename> struct StorageDevice_statics {
	static ptr<Storage::StorageFolder> FromId(hstring_ref deviceId) { Storage::StorageFolder* deviceRoot; hrcheck(get_activation_factory<StorageDevice, IStorageDeviceStatics>()->_FromId(deviceId, &deviceRoot)); return from_abi(deviceRoot); }
	static hstring GetDeviceSelector() { HSTRING selector; hrcheck(get_activation_factory<StorageDevice, IStorageDeviceStatics>()->_GetDeviceSelector(&selector)); return from_abi(selector); }
};

template<typename X> struct statics<StorageDevice, X> : X, Windows::Devices::Portable::StorageDevice_statics<void> {
	typedef typename X::root_type StorageDevice;
};
struct StorageDevice : generate<StorageDevice> {};

// ServiceDevice
template<typename> struct ServiceDevice_statics {
	static hstring GetDeviceSelector(ServiceDeviceType serviceType) { HSTRING selector; hrcheck(get_activation_factory<ServiceDevice, IServiceDeviceStatics>()->_GetDeviceSelector(serviceType, &selector)); return from_abi(selector); }
	static hstring GetDeviceSelectorFromServiceId(const Platform::Guid& serviceId) { HSTRING selector; hrcheck(get_activation_factory<ServiceDevice, IServiceDeviceStatics>()->_GetDeviceSelectorFromServiceId(serviceId, &selector)); return from_abi(selector); }
};

template<typename X> struct statics<ServiceDevice, X> : X, Windows::Devices::Portable::ServiceDevice_statics<void> {
	typedef typename X::root_type ServiceDevice;
};
struct ServiceDevice : generate<ServiceDevice> {};
}}}
} // namespace iso_winrt
