#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Payments

#include "Windows.ApplicationModel.Payments.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
struct ValueSet;
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}
struct IAsyncAction;
struct Uri;
template<typename TResult> struct IAsyncOperation;
}}

// defs

template<> struct def<Windows::ApplicationModel::Payments::PaymentRequestStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentRequestCompletionStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentRequestChangeKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentOptionPresence> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentShippingType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentCanMakePaymentResultStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentMerchantInfoFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentMerchantInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentMerchantInfo> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentMerchantInfo>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentDetailsFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentDetails> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentDetails>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentMethodDataFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentMethodData> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentMethodData> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentMethodData>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentOptions> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentOptions> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequest2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequestFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequestFactory2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentRequest> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentRequest, Windows::ApplicationModel::Payments::IPaymentRequest2>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentResponse> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentTokenFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentToken> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentToken> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentToken>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentShippingOptionFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentShippingOption> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentShippingOption> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentShippingOption>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentAddress> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentAddress> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentAddress> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentItemFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentItem> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentItem> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentItem>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentDetailsModifierFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentDetailsModifier> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentDetailsModifier> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentDetailsModifier>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentCurrencyAmount> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentCurrencyAmountFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentCurrencyAmount> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentCurrencyAmount>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequestChangedArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequestChangedResultFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequestChangedResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentRequestChangedResult> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentRequestChangedResult>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentRequestChangedHandler> : delegate_type {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentRequestChangedArgs> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentRequestChangedArgs> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentMediator> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentRequestSubmitResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentRequestSubmitResult> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentRequestSubmitResult> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentMediator2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentCanMakePaymentResultFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::IPaymentCanMakePaymentResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentCanMakePaymentResult>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentResponse> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentResponse> {};
template<> struct def<Windows::ApplicationModel::Payments::PaymentMediator> : class_type<Platform::Object, Windows::ApplicationModel::Payments::IPaymentMediator, Windows::ApplicationModel::Payments::IPaymentMediator2> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequest> { define_guid(0xB74942E1, 0xED7B, 0x47EB, 0xBC, 0x8, 0x78, 0xCC, 0x5D, 0x68, 0x96, 0xB6);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentMerchantInfoFactory> { define_guid(0x9E89CED3, 0xCCB7, 0x4167, 0xA8, 0xEC, 0xE1, 0xA, 0xE9, 0x6D, 0xBC, 0xD1);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentMerchantInfo> { define_guid(0x63445050, 0xE94, 0x4ED6, 0xAA, 0xCB, 0xE6, 0x1, 0x2B, 0xD3, 0x27, 0xA7);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentDetailsFactory> { define_guid(0xCFE8AFEE, 0xC0EA, 0x4CA1, 0x8B, 0xC7, 0x6D, 0xE6, 0x7B, 0x1F, 0x37, 0x63);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentDetails> { define_guid(0x53BB2D7D, 0xE0EB, 0x4053, 0x8E, 0xAE, 0xCE, 0x7C, 0x48, 0xE0, 0x29, 0x45);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentMethodDataFactory> { define_guid(0x8ADDD27F, 0x9BAA, 0x4A82, 0x83, 0x42, 0xA8, 0x21, 0x9, 0x92, 0xA3, 0x6B);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentMethodData> { define_guid(0xD1D3CAF4, 0xDE98, 0x4129, 0xB1, 0xB7, 0xC3, 0xAD, 0x86, 0x23, 0x7B, 0xF4);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentOptions> { define_guid(0xAAA30854, 0x1F2B, 0x4365, 0x82, 0x51, 0x1, 0xB5, 0x89, 0x15, 0xA5, 0xBC);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequest2> { define_guid(0xB63CCFB5, 0x5998, 0x493E, 0xA0, 0x4C, 0x67, 0x4, 0x8A, 0x50, 0xF1, 0x41);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequestFactory> { define_guid(0x3E8A79DC, 0x6B74, 0x42D3, 0xB1, 0x3, 0xF0, 0xDE, 0x35, 0xFB, 0x18, 0x48);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequestFactory2> { define_guid(0xE6CE1325, 0xA506, 0x4372, 0xB7, 0xEF, 0x1A, 0x3, 0x1D, 0x56, 0x62, 0xD1);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentResponse> { define_guid(0xE1389457, 0x8BD2, 0x4888, 0x9F, 0xA8, 0x97, 0x98, 0x55, 0x45, 0x10, 0x8E);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentTokenFactory> { define_guid(0x988CD7AA, 0x4753, 0x4904, 0x83, 0x73, 0xDD, 0x7B, 0x8, 0xB9, 0x95, 0xC1);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentToken> { define_guid(0xBBCAC013, 0xCCD0, 0x41F2, 0xB2, 0xA1, 0xA, 0x2E, 0x4B, 0x5D, 0xCE, 0x25);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentShippingOptionFactory> { define_guid(0x5DE5F917, 0xB2D7, 0x446B, 0x9D, 0x73, 0x61, 0x23, 0xFB, 0xCA, 0x3B, 0xC6);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentShippingOption> { define_guid(0x13372ADA, 0x9753, 0x4574, 0x89, 0x66, 0x93, 0x14, 0x5A, 0x76, 0xC7, 0xF9);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentAddress> { define_guid(0x5F2264E9, 0x6F3A, 0x4166, 0xA0, 0x18, 0xA, 0xB, 0x6, 0xBB, 0x32, 0xB5);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentItemFactory> { define_guid(0xC6AB7AD8, 0x2503, 0x4D1D, 0xA7, 0x78, 0x2, 0xB2, 0xE5, 0x92, 0x7B, 0x2C);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentItem> { define_guid(0x685AC88B, 0x79B2, 0x4B76, 0x9E, 0x3, 0xA8, 0x76, 0x22, 0x3D, 0xFE, 0x72);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentDetailsModifierFactory> { define_guid(0x79005286, 0x54DE, 0x429C, 0x9E, 0x4F, 0x5D, 0xCE, 0x6E, 0x10, 0xEB, 0xCE);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentDetailsModifier> { define_guid(0xBE1C7D65, 0x4323, 0x41D7, 0xB3, 0x5, 0xDF, 0xCB, 0x76, 0x5F, 0x69, 0xDE);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentCurrencyAmount> { define_guid(0xE3A3E9E0, 0xB41F, 0x4987, 0xBD, 0xCB, 0x7, 0x13, 0x31, 0xF2, 0xDA, 0xA4);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentCurrencyAmountFactory> { define_guid(0x3257D338, 0x140C, 0x4575, 0x85, 0x35, 0xF7, 0x73, 0x17, 0x8C, 0x9, 0xA7);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequestChangedArgs> { define_guid(0xC6145E44, 0xCD8B, 0x4BE4, 0xB5, 0x55, 0x27, 0xC9, 0x91, 0x94, 0xC0, 0xC5);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequestChangedResultFactory> { define_guid(0x8740F56, 0x1D33, 0x4431, 0x81, 0x4B, 0x67, 0xEA, 0x24, 0xBF, 0x21, 0xDB);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequestChangedResult> { define_guid(0xDF699E5C, 0x16C4, 0x47AD, 0x94, 0x1, 0x84, 0x40, 0xEC, 0x7, 0x57, 0xDB);};
template<> struct uuid<Windows::ApplicationModel::Payments::PaymentRequestChangedHandler> { define_guid(0x5078B9E1, 0xF398, 0x4F2C, 0xA2, 0x7E, 0x94, 0xD3, 0x71, 0xCF, 0x6C, 0x7D);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentMediator> { define_guid(0xFB0EE829, 0xEC0C, 0x449A, 0x83, 0xDA, 0x7A, 0xE3, 0x7, 0x33, 0x65, 0xA2);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentRequestSubmitResult> { define_guid(0x7B9C3912, 0x30F2, 0x4E90, 0xB2, 0x49, 0x8C, 0xE7, 0xD7, 0x8F, 0xFE, 0x56);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentMediator2> { define_guid(0xCEEF98F1, 0xE407, 0x4128, 0x8E, 0x73, 0xD9, 0x3D, 0x5F, 0x82, 0x27, 0x86);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentCanMakePaymentResultFactory> { define_guid(0xBBDCAA3E, 0x7D49, 0x4F69, 0xAA, 0x53, 0x2A, 0xF, 0x81, 0x64, 0xB7, 0xC9);};
template<> struct uuid<Windows::ApplicationModel::Payments::IPaymentCanMakePaymentResult> { define_guid(0x7696FE55, 0xD5D3, 0x4D3D, 0xB3, 0x45, 0x45, 0x59, 0x17, 0x59, 0xC5, 0x10);};

// types

namespace Windows { namespace ApplicationModel { namespace Payments {

// IPaymentRequest
struct IPaymentRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_MerchantInfo(PaymentMerchantInfo* *value);
	virtual STDMETHODIMP _get_Details(PaymentDetails* *value);
	virtual STDMETHODIMP _get_MethodData(Foundation::Collections::IVectorView<PaymentMethodData*>* *value);
	virtual STDMETHODIMP _get_Options(PaymentOptions* *value);
};
template<typename X> struct IPaymentRequest_adaptor : X {
	union {
		struct : property {
			ptr<PaymentDetails> get() { PaymentDetails* value; hrcheck(enc(&IPaymentRequest_adaptor::Details)->_get_Details(&value)); return from_abi(value); }
			ptr<PaymentDetails> operator()() { return get(); }
			operator ptr<PaymentDetails> () { return get(); }
			ptr<PaymentDetails> operator->() { return get(); }
		} Details;
		struct : property {
			ptr<PaymentMerchantInfo> get() { PaymentMerchantInfo* value; hrcheck(enc(&IPaymentRequest_adaptor::MerchantInfo)->_get_MerchantInfo(&value)); return from_abi(value); }
			ptr<PaymentMerchantInfo> operator()() { return get(); }
			operator ptr<PaymentMerchantInfo> () { return get(); }
			ptr<PaymentMerchantInfo> operator->() { return get(); }
		} MerchantInfo;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PaymentMethodData>>> get() { Foundation::Collections::IVectorView<PaymentMethodData*>* value; hrcheck(enc(&IPaymentRequest_adaptor::MethodData)->_get_MethodData(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentMethodData>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PaymentMethodData>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentMethodData>>> operator->() { return get(); }
		} MethodData;
		struct : property {
			ptr<PaymentOptions> get() { PaymentOptions* value; hrcheck(enc(&IPaymentRequest_adaptor::Options)->_get_Options(&value)); return from_abi(value); }
			ptr<PaymentOptions> operator()() { return get(); }
			operator ptr<PaymentOptions> () { return get(); }
			ptr<PaymentOptions> operator->() { return get(); }
		} Options;
	};
	IPaymentRequest_adaptor() {}
};
template<typename X> struct adapt<IPaymentRequest, X> : Windows::ApplicationModel::Payments::IPaymentRequest_adaptor<X> { typedef adapt IPaymentRequest; };
struct IPaymentRequest : IPaymentRequest_raw, generate<IPaymentRequest> {};

// IPaymentMerchantInfoFactory
struct IPaymentMerchantInfoFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Uri* uri, PaymentMerchantInfo* *result);
};

// IPaymentMerchantInfo
struct IPaymentMerchantInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_PackageFullName(HSTRING *value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
};
template<typename X> struct IPaymentMerchantInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentMerchantInfo_adaptor::PackageFullName)->_get_PackageFullName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PackageFullName;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IPaymentMerchantInfo_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IPaymentMerchantInfo_adaptor() {}
};
template<typename X> struct adapt<IPaymentMerchantInfo, X> : Windows::ApplicationModel::Payments::IPaymentMerchantInfo_adaptor<X> { typedef adapt IPaymentMerchantInfo; };
struct IPaymentMerchantInfo : IPaymentMerchantInfo_raw, generate<IPaymentMerchantInfo> {};

// PaymentMerchantInfo
template<typename> struct PaymentMerchantInfo_statics {
	static PaymentMerchantInfo *activate() { PaymentMerchantInfo *t; get_activation_factory<PaymentMerchantInfo>()->ActivateInstance((IInspectable**)&t); return t; }
	static PaymentMerchantInfo *activate(pptr<Foundation::Uri> uri) { PaymentMerchantInfo *result; hrcheck(get_activation_factory<PaymentMerchantInfo, IPaymentMerchantInfoFactory>()->_Create(uri, &result)); return result; }
};

template<typename X> struct statics<PaymentMerchantInfo, X> : X, Windows::ApplicationModel::Payments::PaymentMerchantInfo_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentMerchantInfo_statics<void>::activate;
	typedef typename X::root_type PaymentMerchantInfo;
};
struct PaymentMerchantInfo : generate<PaymentMerchantInfo> {};

// IPaymentDetailsFactory
struct IPaymentDetailsFactory : IInspectable {
	virtual STDMETHODIMP _Create(PaymentItem* total, PaymentDetails* *result);
	virtual STDMETHODIMP _CreateWithDisplayItems(PaymentItem* total, Foundation::Collections::IIterable<PaymentItem*>* displayItems, PaymentDetails* *result);
};

// IPaymentDetails
struct IPaymentDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Total(PaymentItem* *value);
	virtual STDMETHODIMP _put_Total(PaymentItem* value);
	virtual STDMETHODIMP _get_DisplayItems(Foundation::Collections::IVectorView<PaymentItem*>* *value);
	virtual STDMETHODIMP _put_DisplayItems(Foundation::Collections::IVectorView<PaymentItem*>* value);
	virtual STDMETHODIMP _get_ShippingOptions(Foundation::Collections::IVectorView<PaymentShippingOption*>* *value);
	virtual STDMETHODIMP _put_ShippingOptions(Foundation::Collections::IVectorView<PaymentShippingOption*>* value);
	virtual STDMETHODIMP _get_Modifiers(Foundation::Collections::IVectorView<PaymentDetailsModifier*>* *value);
	virtual STDMETHODIMP _put_Modifiers(Foundation::Collections::IVectorView<PaymentDetailsModifier*>* value);
};
template<typename X> struct IPaymentDetails_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> get() { Foundation::Collections::IVectorView<PaymentItem*>* value; hrcheck(enc(&IPaymentDetails_adaptor::DisplayItems)->_get_DisplayItems(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> operator->() { return get(); }
			void put(pptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> value) { hrcheck(enc(&IPaymentDetails_adaptor::DisplayItems)->_put_DisplayItems(to_abi(value))); }
			void operator=(pptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> value) { put(to_abi(value)); }
		} DisplayItems;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PaymentDetailsModifier>>> get() { Foundation::Collections::IVectorView<PaymentDetailsModifier*>* value; hrcheck(enc(&IPaymentDetails_adaptor::Modifiers)->_get_Modifiers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentDetailsModifier>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PaymentDetailsModifier>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentDetailsModifier>>> operator->() { return get(); }
			void put(pptr<Foundation::Collections::IVectorView<ptr<PaymentDetailsModifier>>> value) { hrcheck(enc(&IPaymentDetails_adaptor::Modifiers)->_put_Modifiers(to_abi(value))); }
			void operator=(pptr<Foundation::Collections::IVectorView<ptr<PaymentDetailsModifier>>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::Collections::IVectorView<ptr<PaymentDetailsModifier>>> value) { put(to_abi(value)); }
		} Modifiers;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PaymentShippingOption>>> get() { Foundation::Collections::IVectorView<PaymentShippingOption*>* value; hrcheck(enc(&IPaymentDetails_adaptor::ShippingOptions)->_get_ShippingOptions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentShippingOption>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PaymentShippingOption>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentShippingOption>>> operator->() { return get(); }
			void put(pptr<Foundation::Collections::IVectorView<ptr<PaymentShippingOption>>> value) { hrcheck(enc(&IPaymentDetails_adaptor::ShippingOptions)->_put_ShippingOptions(to_abi(value))); }
			void operator=(pptr<Foundation::Collections::IVectorView<ptr<PaymentShippingOption>>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::Collections::IVectorView<ptr<PaymentShippingOption>>> value) { put(to_abi(value)); }
		} ShippingOptions;
		struct : property {
			ptr<PaymentItem> get() { PaymentItem* value; hrcheck(enc(&IPaymentDetails_adaptor::Total)->_get_Total(&value)); return from_abi(value); }
			ptr<PaymentItem> operator()() { return get(); }
			operator ptr<PaymentItem> () { return get(); }
			ptr<PaymentItem> operator->() { return get(); }
			void put(pptr<PaymentItem> value) { hrcheck(enc(&IPaymentDetails_adaptor::Total)->_put_Total(value)); }
			void operator=(pptr<PaymentItem> value) { put(value); }
			void operator()(pptr<PaymentItem> value) { put(value); }
		} Total;
	};
	IPaymentDetails_adaptor() {}
};
template<typename X> struct adapt<IPaymentDetails, X> : Windows::ApplicationModel::Payments::IPaymentDetails_adaptor<X> { typedef adapt IPaymentDetails; };
struct IPaymentDetails : IPaymentDetails_raw, generate<IPaymentDetails> {};

// PaymentDetails
template<typename> struct PaymentDetails_statics {
	static PaymentDetails *activate() { PaymentDetails *t; get_activation_factory<PaymentDetails>()->ActivateInstance((IInspectable**)&t); return t; }
	static PaymentDetails *activate(pptr<PaymentItem> total) { PaymentDetails *result; hrcheck(get_activation_factory<PaymentDetails, IPaymentDetailsFactory>()->_Create(total, &result)); return result; }
	static PaymentDetails *activate(pptr<PaymentItem> total, pptr<Foundation::Collections::IIterable<ptr<PaymentItem>>> displayItems) { PaymentDetails *result; hrcheck(get_activation_factory<PaymentDetails, IPaymentDetailsFactory>()->_CreateWithDisplayItems(total, to_abi(displayItems), &result)); return result; }
};

template<typename X> struct statics<PaymentDetails, X> : X, Windows::ApplicationModel::Payments::PaymentDetails_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentDetails_statics<void>::activate;
	typedef typename X::root_type PaymentDetails;
};
struct PaymentDetails : generate<PaymentDetails> {};

// IPaymentMethodDataFactory
struct IPaymentMethodDataFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Collections::IIterable<HSTRING>* supportedMethodIds, PaymentMethodData* *result);
	virtual STDMETHODIMP _CreateWithJsonData(Foundation::Collections::IIterable<HSTRING>* supportedMethodIds, HSTRING jsonData, PaymentMethodData* *result);
};

// IPaymentMethodData
struct IPaymentMethodData_raw : IInspectable {
	virtual STDMETHODIMP _get_SupportedMethodIds(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_JsonData(HSTRING *value);
};
template<typename X> struct IPaymentMethodData_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentMethodData_adaptor::JsonData)->_get_JsonData(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} JsonData;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPaymentMethodData_adaptor::SupportedMethodIds)->_get_SupportedMethodIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} SupportedMethodIds;
	};
	IPaymentMethodData_adaptor() {}
};
template<typename X> struct adapt<IPaymentMethodData, X> : Windows::ApplicationModel::Payments::IPaymentMethodData_adaptor<X> { typedef adapt IPaymentMethodData; };
struct IPaymentMethodData : IPaymentMethodData_raw, generate<IPaymentMethodData> {};

// PaymentMethodData
template<typename> struct PaymentMethodData_statics {
	static PaymentMethodData *activate(pptr<Foundation::Collections::IIterable<hstring>> supportedMethodIds) { PaymentMethodData *result; hrcheck(get_activation_factory<PaymentMethodData, IPaymentMethodDataFactory>()->_Create(to_abi(supportedMethodIds), &result)); return result; }
	static PaymentMethodData *activate(pptr<Foundation::Collections::IIterable<hstring>> supportedMethodIds, hstring_ref jsonData) { PaymentMethodData *result; hrcheck(get_activation_factory<PaymentMethodData, IPaymentMethodDataFactory>()->_CreateWithJsonData(to_abi(supportedMethodIds), jsonData, &result)); return result; }
};

template<typename X> struct statics<PaymentMethodData, X> : X, Windows::ApplicationModel::Payments::PaymentMethodData_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentMethodData_statics<void>::activate;
	typedef typename X::root_type PaymentMethodData;
};
struct PaymentMethodData : generate<PaymentMethodData> {};

// IPaymentOptions
struct IPaymentOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_RequestPayerEmail(PaymentOptionPresence *value);
	virtual STDMETHODIMP _put_RequestPayerEmail(PaymentOptionPresence value);
	virtual STDMETHODIMP _get_RequestPayerName(PaymentOptionPresence *value);
	virtual STDMETHODIMP _put_RequestPayerName(PaymentOptionPresence value);
	virtual STDMETHODIMP _get_RequestPayerPhoneNumber(PaymentOptionPresence *value);
	virtual STDMETHODIMP _put_RequestPayerPhoneNumber(PaymentOptionPresence value);
	virtual STDMETHODIMP _get_RequestShipping(bool *value);
	virtual STDMETHODIMP _put_RequestShipping(bool value);
	virtual STDMETHODIMP _get_ShippingType(PaymentShippingType *value);
	virtual STDMETHODIMP _put_ShippingType(PaymentShippingType value);
};
template<typename X> struct IPaymentOptions_adaptor : X {
	union {
		struct : property {
			PaymentOptionPresence get() { PaymentOptionPresence value; hrcheck(enc(&IPaymentOptions_adaptor::RequestPayerEmail)->_get_RequestPayerEmail(&value)); return value; }
			PaymentOptionPresence operator()() { return get(); }
			operator PaymentOptionPresence () { return get(); }
			void put(PaymentOptionPresence value) { hrcheck(enc(&IPaymentOptions_adaptor::RequestPayerEmail)->_put_RequestPayerEmail(value)); }
			void operator=(PaymentOptionPresence value) { put(value); }
			void operator()(PaymentOptionPresence value) { put(value); }
		} RequestPayerEmail;
		struct : property {
			PaymentOptionPresence get() { PaymentOptionPresence value; hrcheck(enc(&IPaymentOptions_adaptor::RequestPayerName)->_get_RequestPayerName(&value)); return value; }
			PaymentOptionPresence operator()() { return get(); }
			operator PaymentOptionPresence () { return get(); }
			void put(PaymentOptionPresence value) { hrcheck(enc(&IPaymentOptions_adaptor::RequestPayerName)->_put_RequestPayerName(value)); }
			void operator=(PaymentOptionPresence value) { put(value); }
			void operator()(PaymentOptionPresence value) { put(value); }
		} RequestPayerName;
		struct : property {
			PaymentOptionPresence get() { PaymentOptionPresence value; hrcheck(enc(&IPaymentOptions_adaptor::RequestPayerPhoneNumber)->_get_RequestPayerPhoneNumber(&value)); return value; }
			PaymentOptionPresence operator()() { return get(); }
			operator PaymentOptionPresence () { return get(); }
			void put(PaymentOptionPresence value) { hrcheck(enc(&IPaymentOptions_adaptor::RequestPayerPhoneNumber)->_put_RequestPayerPhoneNumber(value)); }
			void operator=(PaymentOptionPresence value) { put(value); }
			void operator()(PaymentOptionPresence value) { put(value); }
		} RequestPayerPhoneNumber;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPaymentOptions_adaptor::RequestShipping)->_get_RequestShipping(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPaymentOptions_adaptor::RequestShipping)->_put_RequestShipping(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} RequestShipping;
		struct : property {
			PaymentShippingType get() { PaymentShippingType value; hrcheck(enc(&IPaymentOptions_adaptor::ShippingType)->_get_ShippingType(&value)); return value; }
			PaymentShippingType operator()() { return get(); }
			operator PaymentShippingType () { return get(); }
			void put(PaymentShippingType value) { hrcheck(enc(&IPaymentOptions_adaptor::ShippingType)->_put_ShippingType(value)); }
			void operator=(PaymentShippingType value) { put(value); }
			void operator()(PaymentShippingType value) { put(value); }
		} ShippingType;
	};
	IPaymentOptions_adaptor() {}
};
template<typename X> struct adapt<IPaymentOptions, X> : Windows::ApplicationModel::Payments::IPaymentOptions_adaptor<X> { typedef adapt IPaymentOptions; };
struct IPaymentOptions : IPaymentOptions_raw, generate<IPaymentOptions> {};

// PaymentOptions
template<typename X> struct statics<PaymentOptions, X> : X {
	typedef typename X::root_type PaymentOptions;
};
struct PaymentOptions : generate<PaymentOptions> {};

// IPaymentRequest2
struct IPaymentRequest2_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
};
template<typename X> struct IPaymentRequest2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentRequest2_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
	};
	IPaymentRequest2_adaptor() {}
};
template<typename X> struct adapt<IPaymentRequest2, X> : Windows::ApplicationModel::Payments::IPaymentRequest2_adaptor<X> { typedef adapt IPaymentRequest2; };
struct IPaymentRequest2 : IPaymentRequest2_raw, generate<IPaymentRequest2> {};

// IPaymentRequestFactory
struct IPaymentRequestFactory : IInspectable {
	virtual STDMETHODIMP _Create(PaymentDetails* details, Foundation::Collections::IIterable<PaymentMethodData*>* methodData, PaymentRequest* *result);
	virtual STDMETHODIMP _CreateWithMerchantInfo(PaymentDetails* details, Foundation::Collections::IIterable<PaymentMethodData*>* methodData, PaymentMerchantInfo* merchantInfo, PaymentRequest* *result);
	virtual STDMETHODIMP _CreateWithMerchantInfoAndOptions(PaymentDetails* details, Foundation::Collections::IIterable<PaymentMethodData*>* methodData, PaymentMerchantInfo* merchantInfo, PaymentOptions* options, PaymentRequest* *result);
};

// IPaymentRequestFactory2
struct IPaymentRequestFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateWithMerchantInfoOptionsAndId(PaymentDetails* details, Foundation::Collections::IIterable<PaymentMethodData*>* methodData, PaymentMerchantInfo* merchantInfo, PaymentOptions* options, HSTRING id, PaymentRequest* *result);
};

// PaymentRequest
template<typename> struct PaymentRequest_statics {
	static PaymentRequest *activate(pptr<PaymentDetails> details, pptr<Foundation::Collections::IIterable<ptr<PaymentMethodData>>> methodData) { PaymentRequest *result; hrcheck(get_activation_factory<PaymentRequest, IPaymentRequestFactory>()->_Create(details, to_abi(methodData), &result)); return result; }
	static PaymentRequest *activate(pptr<PaymentDetails> details, pptr<Foundation::Collections::IIterable<ptr<PaymentMethodData>>> methodData, pptr<PaymentMerchantInfo> merchantInfo) { PaymentRequest *result; hrcheck(get_activation_factory<PaymentRequest, IPaymentRequestFactory>()->_CreateWithMerchantInfo(details, to_abi(methodData), merchantInfo, &result)); return result; }
	static PaymentRequest *activate(pptr<PaymentDetails> details, pptr<Foundation::Collections::IIterable<ptr<PaymentMethodData>>> methodData, pptr<PaymentMerchantInfo> merchantInfo, pptr<PaymentOptions> options) { PaymentRequest *result; hrcheck(get_activation_factory<PaymentRequest, IPaymentRequestFactory>()->_CreateWithMerchantInfoAndOptions(details, to_abi(methodData), merchantInfo, options, &result)); return result; }
	static PaymentRequest *activate(pptr<PaymentDetails> details, pptr<Foundation::Collections::IIterable<ptr<PaymentMethodData>>> methodData, pptr<PaymentMerchantInfo> merchantInfo, pptr<PaymentOptions> options, hstring_ref id) { PaymentRequest *result; hrcheck(get_activation_factory<PaymentRequest, IPaymentRequestFactory2>()->_CreateWithMerchantInfoOptionsAndId(details, to_abi(methodData), merchantInfo, options, id, &result)); return result; }
};

template<typename X> struct statics<PaymentRequest, X> : X, Windows::ApplicationModel::Payments::PaymentRequest_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentRequest_statics<void>::activate;
	typedef typename X::root_type PaymentRequest;
};
struct PaymentRequest : generate<PaymentRequest> {};

// IPaymentResponse
struct IPaymentResponse_raw : IInspectable {
	virtual STDMETHODIMP _get_PaymentToken(Payments::PaymentToken* *value);
	virtual STDMETHODIMP _get_ShippingOption(PaymentShippingOption* *value);
	virtual STDMETHODIMP _get_ShippingAddress(PaymentAddress* *value);
	virtual STDMETHODIMP _get_PayerEmail(HSTRING *value);
	virtual STDMETHODIMP _get_PayerName(HSTRING *value);
	virtual STDMETHODIMP _get_PayerPhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _CompleteAsync(PaymentRequestCompletionStatus status, Foundation::IAsyncAction* *result);
};
template<typename X> struct IPaymentResponse_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentResponse_adaptor::PayerEmail)->_get_PayerEmail(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PayerEmail;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentResponse_adaptor::PayerName)->_get_PayerName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PayerName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentResponse_adaptor::PayerPhoneNumber)->_get_PayerPhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PayerPhoneNumber;
		struct : property {
			ptr<Payments::PaymentToken> get() { Payments::PaymentToken* value; hrcheck(enc(&IPaymentResponse_adaptor::PaymentToken)->_get_PaymentToken(&value)); return from_abi(value); }
			ptr<Payments::PaymentToken> operator()() { return get(); }
			operator ptr<Payments::PaymentToken> () { return get(); }
			ptr<Payments::PaymentToken> operator->() { return get(); }
		} PaymentToken;
		struct : property {
			ptr<PaymentAddress> get() { PaymentAddress* value; hrcheck(enc(&IPaymentResponse_adaptor::ShippingAddress)->_get_ShippingAddress(&value)); return from_abi(value); }
			ptr<PaymentAddress> operator()() { return get(); }
			operator ptr<PaymentAddress> () { return get(); }
			ptr<PaymentAddress> operator->() { return get(); }
		} ShippingAddress;
		struct : property {
			ptr<PaymentShippingOption> get() { PaymentShippingOption* value; hrcheck(enc(&IPaymentResponse_adaptor::ShippingOption)->_get_ShippingOption(&value)); return from_abi(value); }
			ptr<PaymentShippingOption> operator()() { return get(); }
			operator ptr<PaymentShippingOption> () { return get(); }
			ptr<PaymentShippingOption> operator->() { return get(); }
		} ShippingOption;
	};
	ptr<Foundation::IAsyncAction> CompleteAsync(PaymentRequestCompletionStatus status) { Foundation::IAsyncAction* result; hrcheck(X::get()->_CompleteAsync(status, &result)); return from_abi(result); }
	IPaymentResponse_adaptor() {}
};
template<typename X> struct adapt<IPaymentResponse, X> : Windows::ApplicationModel::Payments::IPaymentResponse_adaptor<X> { typedef adapt IPaymentResponse; };
struct IPaymentResponse : IPaymentResponse_raw, generate<IPaymentResponse> {};

// IPaymentTokenFactory
struct IPaymentTokenFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING paymentMethodId, PaymentToken* *result);
	virtual STDMETHODIMP _CreateWithJsonDetails(HSTRING paymentMethodId, HSTRING jsonDetails, PaymentToken* *result);
};

// IPaymentToken
struct IPaymentToken_raw : IInspectable {
	virtual STDMETHODIMP _get_PaymentMethodId(HSTRING *value);
	virtual STDMETHODIMP _get_JsonDetails(HSTRING *value);
};
template<typename X> struct IPaymentToken_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentToken_adaptor::JsonDetails)->_get_JsonDetails(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} JsonDetails;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentToken_adaptor::PaymentMethodId)->_get_PaymentMethodId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PaymentMethodId;
	};
	IPaymentToken_adaptor() {}
};
template<typename X> struct adapt<IPaymentToken, X> : Windows::ApplicationModel::Payments::IPaymentToken_adaptor<X> { typedef adapt IPaymentToken; };
struct IPaymentToken : IPaymentToken_raw, generate<IPaymentToken> {};

// PaymentToken
template<typename> struct PaymentToken_statics {
	static PaymentToken *activate(hstring_ref paymentMethodId) { PaymentToken *result; hrcheck(get_activation_factory<PaymentToken, IPaymentTokenFactory>()->_Create(paymentMethodId, &result)); return result; }
	static PaymentToken *activate(hstring_ref paymentMethodId, hstring_ref jsonDetails) { PaymentToken *result; hrcheck(get_activation_factory<PaymentToken, IPaymentTokenFactory>()->_CreateWithJsonDetails(paymentMethodId, jsonDetails, &result)); return result; }
};

template<typename X> struct statics<PaymentToken, X> : X, Windows::ApplicationModel::Payments::PaymentToken_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentToken_statics<void>::activate;
	typedef typename X::root_type PaymentToken;
};
struct PaymentToken : generate<PaymentToken> {};

// IPaymentShippingOptionFactory
struct IPaymentShippingOptionFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING label, PaymentCurrencyAmount* amount, PaymentShippingOption* *result);
	virtual STDMETHODIMP _CreateWithSelected(HSTRING label, PaymentCurrencyAmount* amount, bool selected, PaymentShippingOption* *result);
	virtual STDMETHODIMP _CreateWithSelectedAndTag(HSTRING label, PaymentCurrencyAmount* amount, bool selected, HSTRING tag, PaymentShippingOption* *result);
};

// IPaymentShippingOption
struct IPaymentShippingOption_raw : IInspectable {
	virtual STDMETHODIMP _get_Label(HSTRING *value);
	virtual STDMETHODIMP _put_Label(HSTRING value);
	virtual STDMETHODIMP _get_Amount(PaymentCurrencyAmount* *value);
	virtual STDMETHODIMP _put_Amount(PaymentCurrencyAmount* value);
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
	virtual STDMETHODIMP _put_Tag(HSTRING value);
	virtual STDMETHODIMP _get_IsSelected(bool *value);
	virtual STDMETHODIMP _put_IsSelected(bool value);
};
template<typename X> struct IPaymentShippingOption_adaptor : X {
	union {
		struct : property {
			ptr<PaymentCurrencyAmount> get() { PaymentCurrencyAmount* value; hrcheck(enc(&IPaymentShippingOption_adaptor::Amount)->_get_Amount(&value)); return from_abi(value); }
			ptr<PaymentCurrencyAmount> operator()() { return get(); }
			operator ptr<PaymentCurrencyAmount> () { return get(); }
			ptr<PaymentCurrencyAmount> operator->() { return get(); }
			void put(pptr<PaymentCurrencyAmount> value) { hrcheck(enc(&IPaymentShippingOption_adaptor::Amount)->_put_Amount(value)); }
			void operator=(pptr<PaymentCurrencyAmount> value) { put(value); }
			void operator()(pptr<PaymentCurrencyAmount> value) { put(value); }
		} Amount;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPaymentShippingOption_adaptor::IsSelected)->_get_IsSelected(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPaymentShippingOption_adaptor::IsSelected)->_put_IsSelected(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSelected;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentShippingOption_adaptor::Label)->_get_Label(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentShippingOption_adaptor::Label)->_put_Label(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Label;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentShippingOption_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentShippingOption_adaptor::Tag)->_put_Tag(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Tag;
	};
	IPaymentShippingOption_adaptor() {}
};
template<typename X> struct adapt<IPaymentShippingOption, X> : Windows::ApplicationModel::Payments::IPaymentShippingOption_adaptor<X> { typedef adapt IPaymentShippingOption; };
struct IPaymentShippingOption : IPaymentShippingOption_raw, generate<IPaymentShippingOption> {};

// PaymentShippingOption
template<typename> struct PaymentShippingOption_statics {
	static PaymentShippingOption *activate(hstring_ref label, pptr<PaymentCurrencyAmount> amount) { PaymentShippingOption *result; hrcheck(get_activation_factory<PaymentShippingOption, IPaymentShippingOptionFactory>()->_Create(label, amount, &result)); return result; }
	static PaymentShippingOption *activate(hstring_ref label, pptr<PaymentCurrencyAmount> amount, bool selected) { PaymentShippingOption *result; hrcheck(get_activation_factory<PaymentShippingOption, IPaymentShippingOptionFactory>()->_CreateWithSelected(label, amount, selected, &result)); return result; }
	static PaymentShippingOption *activate(hstring_ref label, pptr<PaymentCurrencyAmount> amount, bool selected, hstring_ref tag) { PaymentShippingOption *result; hrcheck(get_activation_factory<PaymentShippingOption, IPaymentShippingOptionFactory>()->_CreateWithSelectedAndTag(label, amount, selected, tag, &result)); return result; }
};

template<typename X> struct statics<PaymentShippingOption, X> : X, Windows::ApplicationModel::Payments::PaymentShippingOption_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentShippingOption_statics<void>::activate;
	typedef typename X::root_type PaymentShippingOption;
};
struct PaymentShippingOption : generate<PaymentShippingOption> {};

// IPaymentAddress
struct IPaymentAddress_raw : IInspectable {
	virtual STDMETHODIMP _get_Country(HSTRING *value);
	virtual STDMETHODIMP _put_Country(HSTRING value);
	virtual STDMETHODIMP _get_AddressLines(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _put_AddressLines(Foundation::Collections::IVectorView<HSTRING>* value);
	virtual STDMETHODIMP _get_Region(HSTRING *value);
	virtual STDMETHODIMP _put_Region(HSTRING value);
	virtual STDMETHODIMP _get_City(HSTRING *value);
	virtual STDMETHODIMP _put_City(HSTRING value);
	virtual STDMETHODIMP _get_DependentLocality(HSTRING *value);
	virtual STDMETHODIMP _put_DependentLocality(HSTRING value);
	virtual STDMETHODIMP _get_PostalCode(HSTRING *value);
	virtual STDMETHODIMP _put_PostalCode(HSTRING value);
	virtual STDMETHODIMP _get_SortingCode(HSTRING *value);
	virtual STDMETHODIMP _put_SortingCode(HSTRING value);
	virtual STDMETHODIMP _get_LanguageCode(HSTRING *value);
	virtual STDMETHODIMP _put_LanguageCode(HSTRING value);
	virtual STDMETHODIMP _get_Organization(HSTRING *value);
	virtual STDMETHODIMP _put_Organization(HSTRING value);
	virtual STDMETHODIMP _get_Recipient(HSTRING *value);
	virtual STDMETHODIMP _put_Recipient(HSTRING value);
	virtual STDMETHODIMP _get_PhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _put_PhoneNumber(HSTRING value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::ValueSet* *value);
};
template<typename X> struct IPaymentAddress_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPaymentAddress_adaptor::AddressLines)->_get_AddressLines(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
			void put(pptr<Foundation::Collections::IVectorView<hstring>> value) { hrcheck(enc(&IPaymentAddress_adaptor::AddressLines)->_put_AddressLines(to_abi(value))); }
			void operator=(pptr<Foundation::Collections::IVectorView<hstring>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::Collections::IVectorView<hstring>> value) { put(to_abi(value)); }
		} AddressLines;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::City)->_get_City(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::City)->_put_City(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} City;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::Country)->_get_Country(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::Country)->_put_Country(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Country;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::DependentLocality)->_get_DependentLocality(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::DependentLocality)->_put_DependentLocality(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DependentLocality;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::LanguageCode)->_get_LanguageCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::LanguageCode)->_put_LanguageCode(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} LanguageCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::Organization)->_get_Organization(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::Organization)->_put_Organization(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Organization;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::PhoneNumber)->_get_PhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::PhoneNumber)->_put_PhoneNumber(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PhoneNumber;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::PostalCode)->_get_PostalCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::PostalCode)->_put_PostalCode(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PostalCode;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IPaymentAddress_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Properties;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::Recipient)->_get_Recipient(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::Recipient)->_put_Recipient(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Recipient;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::Region)->_get_Region(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::Region)->_put_Region(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Region;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentAddress_adaptor::SortingCode)->_get_SortingCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentAddress_adaptor::SortingCode)->_put_SortingCode(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SortingCode;
	};
	IPaymentAddress_adaptor() {}
};
template<typename X> struct adapt<IPaymentAddress, X> : Windows::ApplicationModel::Payments::IPaymentAddress_adaptor<X> { typedef adapt IPaymentAddress; };
struct IPaymentAddress : IPaymentAddress_raw, generate<IPaymentAddress> {};

// PaymentAddress
template<typename X> struct statics<PaymentAddress, X> : X {
	typedef typename X::root_type PaymentAddress;
};
struct PaymentAddress : generate<PaymentAddress> {};

// IPaymentItemFactory
struct IPaymentItemFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING label, PaymentCurrencyAmount* amount, PaymentItem* *result);
};

// IPaymentItem
struct IPaymentItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Label(HSTRING *value);
	virtual STDMETHODIMP _put_Label(HSTRING value);
	virtual STDMETHODIMP _get_Amount(PaymentCurrencyAmount* *value);
	virtual STDMETHODIMP _put_Amount(PaymentCurrencyAmount* value);
	virtual STDMETHODIMP _get_Pending(bool *value);
	virtual STDMETHODIMP _put_Pending(bool value);
};
template<typename X> struct IPaymentItem_adaptor : X {
	union {
		struct : property {
			ptr<PaymentCurrencyAmount> get() { PaymentCurrencyAmount* value; hrcheck(enc(&IPaymentItem_adaptor::Amount)->_get_Amount(&value)); return from_abi(value); }
			ptr<PaymentCurrencyAmount> operator()() { return get(); }
			operator ptr<PaymentCurrencyAmount> () { return get(); }
			ptr<PaymentCurrencyAmount> operator->() { return get(); }
			void put(pptr<PaymentCurrencyAmount> value) { hrcheck(enc(&IPaymentItem_adaptor::Amount)->_put_Amount(value)); }
			void operator=(pptr<PaymentCurrencyAmount> value) { put(value); }
			void operator()(pptr<PaymentCurrencyAmount> value) { put(value); }
		} Amount;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentItem_adaptor::Label)->_get_Label(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentItem_adaptor::Label)->_put_Label(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Label;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPaymentItem_adaptor::Pending)->_get_Pending(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPaymentItem_adaptor::Pending)->_put_Pending(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Pending;
	};
	IPaymentItem_adaptor() {}
};
template<typename X> struct adapt<IPaymentItem, X> : Windows::ApplicationModel::Payments::IPaymentItem_adaptor<X> { typedef adapt IPaymentItem; };
struct IPaymentItem : IPaymentItem_raw, generate<IPaymentItem> {};

// PaymentItem
template<typename> struct PaymentItem_statics {
	static PaymentItem *activate(hstring_ref label, pptr<PaymentCurrencyAmount> amount) { PaymentItem *result; hrcheck(get_activation_factory<PaymentItem, IPaymentItemFactory>()->_Create(label, amount, &result)); return result; }
};

template<typename X> struct statics<PaymentItem, X> : X, Windows::ApplicationModel::Payments::PaymentItem_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentItem_statics<void>::activate;
	typedef typename X::root_type PaymentItem;
};
struct PaymentItem : generate<PaymentItem> {};

// IPaymentDetailsModifierFactory
struct IPaymentDetailsModifierFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Collections::IIterable<HSTRING>* supportedMethodIds, PaymentItem* total, PaymentDetailsModifier* *result);
	virtual STDMETHODIMP _CreateWithAdditionalDisplayItems(Foundation::Collections::IIterable<HSTRING>* supportedMethodIds, PaymentItem* total, Foundation::Collections::IIterable<PaymentItem*>* additionalDisplayItems, PaymentDetailsModifier* *result);
	virtual STDMETHODIMP _CreateWithAdditionalDisplayItemsAndJsonData(Foundation::Collections::IIterable<HSTRING>* supportedMethodIds, PaymentItem* total, Foundation::Collections::IIterable<PaymentItem*>* additionalDisplayItems, HSTRING jsonData, PaymentDetailsModifier* *result);
};

// IPaymentDetailsModifier
struct IPaymentDetailsModifier_raw : IInspectable {
	virtual STDMETHODIMP _get_JsonData(HSTRING *value);
	virtual STDMETHODIMP _get_SupportedMethodIds(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_Total(PaymentItem* *value);
	virtual STDMETHODIMP _get_AdditionalDisplayItems(Foundation::Collections::IVectorView<PaymentItem*>* *value);
};
template<typename X> struct IPaymentDetailsModifier_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> get() { Foundation::Collections::IVectorView<PaymentItem*>* value; hrcheck(enc(&IPaymentDetailsModifier_adaptor::AdditionalDisplayItems)->_get_AdditionalDisplayItems(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PaymentItem>>> operator->() { return get(); }
		} AdditionalDisplayItems;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentDetailsModifier_adaptor::JsonData)->_get_JsonData(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} JsonData;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPaymentDetailsModifier_adaptor::SupportedMethodIds)->_get_SupportedMethodIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} SupportedMethodIds;
		struct : property {
			ptr<PaymentItem> get() { PaymentItem* value; hrcheck(enc(&IPaymentDetailsModifier_adaptor::Total)->_get_Total(&value)); return from_abi(value); }
			ptr<PaymentItem> operator()() { return get(); }
			operator ptr<PaymentItem> () { return get(); }
			ptr<PaymentItem> operator->() { return get(); }
		} Total;
	};
	IPaymentDetailsModifier_adaptor() {}
};
template<typename X> struct adapt<IPaymentDetailsModifier, X> : Windows::ApplicationModel::Payments::IPaymentDetailsModifier_adaptor<X> { typedef adapt IPaymentDetailsModifier; };
struct IPaymentDetailsModifier : IPaymentDetailsModifier_raw, generate<IPaymentDetailsModifier> {};

// PaymentDetailsModifier
template<typename> struct PaymentDetailsModifier_statics {
	static PaymentDetailsModifier *activate(pptr<Foundation::Collections::IIterable<hstring>> supportedMethodIds, pptr<PaymentItem> total) { PaymentDetailsModifier *result; hrcheck(get_activation_factory<PaymentDetailsModifier, IPaymentDetailsModifierFactory>()->_Create(to_abi(supportedMethodIds), total, &result)); return result; }
	static PaymentDetailsModifier *activate(pptr<Foundation::Collections::IIterable<hstring>> supportedMethodIds, pptr<PaymentItem> total, pptr<Foundation::Collections::IIterable<ptr<PaymentItem>>> additionalDisplayItems) { PaymentDetailsModifier *result; hrcheck(get_activation_factory<PaymentDetailsModifier, IPaymentDetailsModifierFactory>()->_CreateWithAdditionalDisplayItems(to_abi(supportedMethodIds), total, to_abi(additionalDisplayItems), &result)); return result; }
	static PaymentDetailsModifier *activate(pptr<Foundation::Collections::IIterable<hstring>> supportedMethodIds, pptr<PaymentItem> total, pptr<Foundation::Collections::IIterable<ptr<PaymentItem>>> additionalDisplayItems, hstring_ref jsonData) { PaymentDetailsModifier *result; hrcheck(get_activation_factory<PaymentDetailsModifier, IPaymentDetailsModifierFactory>()->_CreateWithAdditionalDisplayItemsAndJsonData(to_abi(supportedMethodIds), total, to_abi(additionalDisplayItems), jsonData, &result)); return result; }
};

template<typename X> struct statics<PaymentDetailsModifier, X> : X, Windows::ApplicationModel::Payments::PaymentDetailsModifier_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentDetailsModifier_statics<void>::activate;
	typedef typename X::root_type PaymentDetailsModifier;
};
struct PaymentDetailsModifier : generate<PaymentDetailsModifier> {};

// IPaymentCurrencyAmount
struct IPaymentCurrencyAmount_raw : IInspectable {
	virtual STDMETHODIMP _get_Currency(HSTRING *value);
	virtual STDMETHODIMP _put_Currency(HSTRING value);
	virtual STDMETHODIMP _get_CurrencySystem(HSTRING *value);
	virtual STDMETHODIMP _put_CurrencySystem(HSTRING value);
	virtual STDMETHODIMP _get_Value(HSTRING *value);
	virtual STDMETHODIMP _put_Value(HSTRING value);
};
template<typename X> struct IPaymentCurrencyAmount_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentCurrencyAmount_adaptor::Currency)->_get_Currency(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentCurrencyAmount_adaptor::Currency)->_put_Currency(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Currency;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentCurrencyAmount_adaptor::CurrencySystem)->_get_CurrencySystem(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentCurrencyAmount_adaptor::CurrencySystem)->_put_CurrencySystem(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CurrencySystem;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentCurrencyAmount_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentCurrencyAmount_adaptor::Value)->_put_Value(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Value;
	};
	IPaymentCurrencyAmount_adaptor() {}
};
template<typename X> struct adapt<IPaymentCurrencyAmount, X> : Windows::ApplicationModel::Payments::IPaymentCurrencyAmount_adaptor<X> { typedef adapt IPaymentCurrencyAmount; };
struct IPaymentCurrencyAmount : IPaymentCurrencyAmount_raw, generate<IPaymentCurrencyAmount> {};

// IPaymentCurrencyAmountFactory
struct IPaymentCurrencyAmountFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING value, HSTRING currency, PaymentCurrencyAmount* *result);
	virtual STDMETHODIMP _CreateWithCurrencySystem(HSTRING value, HSTRING currency, HSTRING currencySystem, PaymentCurrencyAmount* *result);
};

// PaymentCurrencyAmount
template<typename> struct PaymentCurrencyAmount_statics {
	static PaymentCurrencyAmount *activate(hstring_ref value, hstring_ref currency) { PaymentCurrencyAmount *result; hrcheck(get_activation_factory<PaymentCurrencyAmount, IPaymentCurrencyAmountFactory>()->_Create(value, currency, &result)); return result; }
	static PaymentCurrencyAmount *activate(hstring_ref value, hstring_ref currency, hstring_ref currencySystem) { PaymentCurrencyAmount *result; hrcheck(get_activation_factory<PaymentCurrencyAmount, IPaymentCurrencyAmountFactory>()->_CreateWithCurrencySystem(value, currency, currencySystem, &result)); return result; }
};

template<typename X> struct statics<PaymentCurrencyAmount, X> : X, Windows::ApplicationModel::Payments::PaymentCurrencyAmount_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentCurrencyAmount_statics<void>::activate;
	typedef typename X::root_type PaymentCurrencyAmount;
};
struct PaymentCurrencyAmount : generate<PaymentCurrencyAmount> {};

// IPaymentRequestChangedArgs
struct IPaymentRequestChangedArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeKind(PaymentRequestChangeKind *value);
	virtual STDMETHODIMP _get_ShippingAddress(PaymentAddress* *value);
	virtual STDMETHODIMP _get_SelectedShippingOption(PaymentShippingOption* *value);
	virtual STDMETHODIMP _Acknowledge(PaymentRequestChangedResult* changeResult);
};
template<typename X> struct IPaymentRequestChangedArgs_adaptor : X {
	union {
		struct : property {
			PaymentRequestChangeKind get() { PaymentRequestChangeKind value; hrcheck(enc(&IPaymentRequestChangedArgs_adaptor::ChangeKind)->_get_ChangeKind(&value)); return value; }
			PaymentRequestChangeKind operator()() { return get(); }
			operator PaymentRequestChangeKind () { return get(); }
		} ChangeKind;
		struct : property {
			ptr<PaymentShippingOption> get() { PaymentShippingOption* value; hrcheck(enc(&IPaymentRequestChangedArgs_adaptor::SelectedShippingOption)->_get_SelectedShippingOption(&value)); return from_abi(value); }
			ptr<PaymentShippingOption> operator()() { return get(); }
			operator ptr<PaymentShippingOption> () { return get(); }
			ptr<PaymentShippingOption> operator->() { return get(); }
		} SelectedShippingOption;
		struct : property {
			ptr<PaymentAddress> get() { PaymentAddress* value; hrcheck(enc(&IPaymentRequestChangedArgs_adaptor::ShippingAddress)->_get_ShippingAddress(&value)); return from_abi(value); }
			ptr<PaymentAddress> operator()() { return get(); }
			operator ptr<PaymentAddress> () { return get(); }
			ptr<PaymentAddress> operator->() { return get(); }
		} ShippingAddress;
	};
	void Acknowledge(pptr<PaymentRequestChangedResult> changeResult) { hrcheck(X::get()->_Acknowledge(changeResult)); }
	IPaymentRequestChangedArgs_adaptor() {}
};
template<typename X> struct adapt<IPaymentRequestChangedArgs, X> : Windows::ApplicationModel::Payments::IPaymentRequestChangedArgs_adaptor<X> { typedef adapt IPaymentRequestChangedArgs; };
struct IPaymentRequestChangedArgs : IPaymentRequestChangedArgs_raw, generate<IPaymentRequestChangedArgs> {};

// IPaymentRequestChangedResultFactory
struct IPaymentRequestChangedResultFactory : IInspectable {
	virtual STDMETHODIMP _Create(bool changeAcceptedByMerchant, PaymentRequestChangedResult* *result);
	virtual STDMETHODIMP _CreateWithPaymentDetails(bool changeAcceptedByMerchant, PaymentDetails* updatedPaymentDetails, PaymentRequestChangedResult* *result);
};

// IPaymentRequestChangedResult
struct IPaymentRequestChangedResult_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeAcceptedByMerchant(bool *value);
	virtual STDMETHODIMP _put_ChangeAcceptedByMerchant(bool value);
	virtual STDMETHODIMP _get_Message(HSTRING *value);
	virtual STDMETHODIMP _put_Message(HSTRING value);
	virtual STDMETHODIMP _get_UpdatedPaymentDetails(PaymentDetails* *value);
	virtual STDMETHODIMP _put_UpdatedPaymentDetails(PaymentDetails* value);
};
template<typename X> struct IPaymentRequestChangedResult_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPaymentRequestChangedResult_adaptor::ChangeAcceptedByMerchant)->_get_ChangeAcceptedByMerchant(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPaymentRequestChangedResult_adaptor::ChangeAcceptedByMerchant)->_put_ChangeAcceptedByMerchant(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ChangeAcceptedByMerchant;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentRequestChangedResult_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentRequestChangedResult_adaptor::Message)->_put_Message(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Message;
		struct : property {
			ptr<PaymentDetails> get() { PaymentDetails* value; hrcheck(enc(&IPaymentRequestChangedResult_adaptor::UpdatedPaymentDetails)->_get_UpdatedPaymentDetails(&value)); return from_abi(value); }
			ptr<PaymentDetails> operator()() { return get(); }
			operator ptr<PaymentDetails> () { return get(); }
			ptr<PaymentDetails> operator->() { return get(); }
			void put(pptr<PaymentDetails> value) { hrcheck(enc(&IPaymentRequestChangedResult_adaptor::UpdatedPaymentDetails)->_put_UpdatedPaymentDetails(value)); }
			void operator=(pptr<PaymentDetails> value) { put(value); }
			void operator()(pptr<PaymentDetails> value) { put(value); }
		} UpdatedPaymentDetails;
	};
	IPaymentRequestChangedResult_adaptor() {}
};
template<typename X> struct adapt<IPaymentRequestChangedResult, X> : Windows::ApplicationModel::Payments::IPaymentRequestChangedResult_adaptor<X> { typedef adapt IPaymentRequestChangedResult; };
struct IPaymentRequestChangedResult : IPaymentRequestChangedResult_raw, generate<IPaymentRequestChangedResult> {};

// PaymentRequestChangedResult
template<typename> struct PaymentRequestChangedResult_statics {
	static PaymentRequestChangedResult *activate(bool changeAcceptedByMerchant) { PaymentRequestChangedResult *result; hrcheck(get_activation_factory<PaymentRequestChangedResult, IPaymentRequestChangedResultFactory>()->_Create(changeAcceptedByMerchant, &result)); return result; }
	static PaymentRequestChangedResult *activate(bool changeAcceptedByMerchant, pptr<PaymentDetails> updatedPaymentDetails) { PaymentRequestChangedResult *result; hrcheck(get_activation_factory<PaymentRequestChangedResult, IPaymentRequestChangedResultFactory>()->_CreateWithPaymentDetails(changeAcceptedByMerchant, updatedPaymentDetails, &result)); return result; }
};

template<typename X> struct statics<PaymentRequestChangedResult, X> : X, Windows::ApplicationModel::Payments::PaymentRequestChangedResult_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentRequestChangedResult_statics<void>::activate;
	typedef typename X::root_type PaymentRequestChangedResult;
};
struct PaymentRequestChangedResult : generate<PaymentRequestChangedResult> {};

// PaymentRequestChangedHandler
struct PaymentRequestChangedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(PaymentRequest* paymentRequest, PaymentRequestChangedArgs* args) = 0;
};

// PaymentRequestChangedArgs
template<typename X> struct statics<PaymentRequestChangedArgs, X> : X {
	typedef typename X::root_type PaymentRequestChangedArgs;
};
struct PaymentRequestChangedArgs : generate<PaymentRequestChangedArgs> {};

// IPaymentMediator
struct IPaymentMediator_raw : IInspectable {
	virtual STDMETHODIMP _GetSupportedMethodIdsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* *result);
	virtual STDMETHODIMP _SubmitPaymentRequestAsync(PaymentRequest* paymentRequest, Foundation::IAsyncOperation<PaymentRequestSubmitResult*>* *result);
	virtual STDMETHODIMP _SubmitPaymentRequestWithChangeHandlerAsync(PaymentRequest* paymentRequest, PaymentRequestChangedHandler* changeHandler, Foundation::IAsyncOperation<PaymentRequestSubmitResult*>* *result);
};
template<typename X> struct IPaymentMediator_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<hstring>>>> GetSupportedMethodIdsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* result; hrcheck(X::get()->_GetSupportedMethodIdsAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PaymentRequestSubmitResult>>> SubmitPaymentRequestAsync(pptr<PaymentRequest> paymentRequest) { Foundation::IAsyncOperation<PaymentRequestSubmitResult*>* result; hrcheck(X::get()->_SubmitPaymentRequestAsync(paymentRequest, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PaymentRequestSubmitResult>>> SubmitPaymentRequestAsync(pptr<PaymentRequest> paymentRequest, handler_ref<PaymentRequestChangedHandler> changeHandler) { Foundation::IAsyncOperation<PaymentRequestSubmitResult*>* result; hrcheck(X::get()->_SubmitPaymentRequestWithChangeHandlerAsync(paymentRequest, changeHandler, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPaymentMediator, X> : Windows::ApplicationModel::Payments::IPaymentMediator_adaptor<X> { typedef adapt IPaymentMediator; };
struct IPaymentMediator : IPaymentMediator_raw, generate<IPaymentMediator> {};

// IPaymentRequestSubmitResult
struct IPaymentRequestSubmitResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(PaymentRequestStatus *value);
	virtual STDMETHODIMP _get_Response(PaymentResponse* *value);
};
template<typename X> struct IPaymentRequestSubmitResult_adaptor : X {
	union {
		struct : property {
			ptr<PaymentResponse> get() { PaymentResponse* value; hrcheck(enc(&IPaymentRequestSubmitResult_adaptor::Response)->_get_Response(&value)); return from_abi(value); }
			ptr<PaymentResponse> operator()() { return get(); }
			operator ptr<PaymentResponse> () { return get(); }
			ptr<PaymentResponse> operator->() { return get(); }
		} Response;
		struct : property {
			PaymentRequestStatus get() { PaymentRequestStatus value; hrcheck(enc(&IPaymentRequestSubmitResult_adaptor::Status)->_get_Status(&value)); return value; }
			PaymentRequestStatus operator()() { return get(); }
			operator PaymentRequestStatus () { return get(); }
		} Status;
	};
	IPaymentRequestSubmitResult_adaptor() {}
};
template<typename X> struct adapt<IPaymentRequestSubmitResult, X> : Windows::ApplicationModel::Payments::IPaymentRequestSubmitResult_adaptor<X> { typedef adapt IPaymentRequestSubmitResult; };
struct IPaymentRequestSubmitResult : IPaymentRequestSubmitResult_raw, generate<IPaymentRequestSubmitResult> {};

// PaymentRequestSubmitResult
template<typename X> struct statics<PaymentRequestSubmitResult, X> : X {
	typedef typename X::root_type PaymentRequestSubmitResult;
};
struct PaymentRequestSubmitResult : generate<PaymentRequestSubmitResult> {};

// IPaymentMediator2
struct IPaymentMediator2_raw : IInspectable {
	virtual STDMETHODIMP _CanMakePaymentAsync(PaymentRequest* paymentRequest, Foundation::IAsyncOperation<PaymentCanMakePaymentResult*>* *result);
};
template<typename X> struct IPaymentMediator2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<PaymentCanMakePaymentResult>>> CanMakePaymentAsync(pptr<PaymentRequest> paymentRequest) { Foundation::IAsyncOperation<PaymentCanMakePaymentResult*>* result; hrcheck(X::get()->_CanMakePaymentAsync(paymentRequest, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPaymentMediator2, X> : Windows::ApplicationModel::Payments::IPaymentMediator2_adaptor<X> { typedef adapt IPaymentMediator2; };
struct IPaymentMediator2 : IPaymentMediator2_raw, generate<IPaymentMediator2> {};

// IPaymentCanMakePaymentResultFactory
struct IPaymentCanMakePaymentResultFactory : IInspectable {
	virtual STDMETHODIMP _Create(PaymentCanMakePaymentResultStatus value, PaymentCanMakePaymentResult* *result);
};

// IPaymentCanMakePaymentResult
struct IPaymentCanMakePaymentResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(PaymentCanMakePaymentResultStatus *value);
};
template<typename X> struct IPaymentCanMakePaymentResult_adaptor : X {
	union {
		struct : property {
			PaymentCanMakePaymentResultStatus get() { PaymentCanMakePaymentResultStatus value; hrcheck(enc(&IPaymentCanMakePaymentResult_adaptor::Status)->_get_Status(&value)); return value; }
			PaymentCanMakePaymentResultStatus operator()() { return get(); }
			operator PaymentCanMakePaymentResultStatus () { return get(); }
		} Status;
	};
	IPaymentCanMakePaymentResult_adaptor() {}
};
template<typename X> struct adapt<IPaymentCanMakePaymentResult, X> : Windows::ApplicationModel::Payments::IPaymentCanMakePaymentResult_adaptor<X> { typedef adapt IPaymentCanMakePaymentResult; };
struct IPaymentCanMakePaymentResult : IPaymentCanMakePaymentResult_raw, generate<IPaymentCanMakePaymentResult> {};

// PaymentCanMakePaymentResult
template<typename> struct PaymentCanMakePaymentResult_statics {
	static PaymentCanMakePaymentResult *activate(PaymentCanMakePaymentResultStatus value) { PaymentCanMakePaymentResult *result; hrcheck(get_activation_factory<PaymentCanMakePaymentResult, IPaymentCanMakePaymentResultFactory>()->_Create(value, &result)); return result; }
};

template<typename X> struct statics<PaymentCanMakePaymentResult, X> : X, Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult_statics<void> {
	using Windows::ApplicationModel::Payments::PaymentCanMakePaymentResult_statics<void>::activate;
	typedef typename X::root_type PaymentCanMakePaymentResult;
};
struct PaymentCanMakePaymentResult : generate<PaymentCanMakePaymentResult> {};

// PaymentResponse
template<typename X> struct statics<PaymentResponse, X> : X {
	typedef typename X::root_type PaymentResponse;
};
struct PaymentResponse : generate<PaymentResponse> {};

// PaymentMediator
template<typename X> struct statics<PaymentMediator, X> : X {
	typedef typename X::root_type PaymentMediator;
};
struct PaymentMediator : generate<PaymentMediator> {
	using IPaymentMediator::SubmitPaymentRequestAsync;
};
}}}
} // namespace iso_winrt
