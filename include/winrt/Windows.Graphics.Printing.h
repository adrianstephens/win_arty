#pragma once
// generated by isopod tools
// namespaces:
// Windows.Graphics.Printing

#include "Windows.Graphics.Printing.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace DataTransfer {
struct DataPackagePropertySet;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVector;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStream;
}}}

// defs

template<> struct def<Windows::Graphics::Printing::PrintPageDescription> : value_type<Windows::Foundation::Size, Windows::Foundation::Rect, unsigned, unsigned> {};
template<> struct def<Windows::Graphics::Printing::PrintMediaSize> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintMediaType> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintOrientation> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintQuality> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintColorMode> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintDuplex> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintCollation> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintStaple> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintHolePunch> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintBinding> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::PrintBordering> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::IPrintPageRange> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintPageRangeFactory> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintPageRange> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintPageRange>, custom_activators {};
template<> struct def<Windows::Graphics::Printing::IPrintPageRangeOptions> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintPageRangeOptions> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintPageRangeOptions> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties> : overridable_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintPageInfo> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintPageInfo> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintPageInfo> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskOptions> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskOptions2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration> : overridable_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskOptionsCore> : overridable_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskOptions> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskOptionsCore, Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties, Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration, Windows::Graphics::Printing::IPrintTaskOptions, Windows::Graphics::Printing::IPrintTaskOptions2> {};
template<> struct def<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic3> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::StandardPrintTaskOptions> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Graphics::Printing::IPrintDocumentSource> : overridable_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskProgressingEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskProgressingEventArgs> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskProgressingEventArgs> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskCompletion> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskCompletedEventArgs> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskCompletedEventArgs> {};
template<> struct def<Windows::Graphics::Printing::IPrintTask> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintTask2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTask> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTask, Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport, Windows::Graphics::Printing::IPrintTask2> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskSourceRequestedArgs> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskSourceRequestedHandler> : delegate_type {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskRequestedDeferral> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskRequestedDeferral> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskRequestedDeferral> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskRequest> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskRequest> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskRequest> {};
template<> struct def<Windows::Graphics::Printing::IPrintTaskRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintTaskRequestedEventArgs> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintTaskRequestedEventArgs> {};
template<> struct def<Windows::Graphics::Printing::IPrintManagerStatic> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintManagerStatic2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::IPrintManager> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing::PrintManager> : class_type<Platform::Object, Windows::Graphics::Printing::IPrintManager> {};

// uuids

template<> struct uuid<Windows::Graphics::Printing::IPrintPageRange> { define_guid(0xF8A06C54, 0x6E7C, 0x51C5, 0x57, 0xFD, 0x6, 0x60, 0xC2, 0xD7, 0x15, 0x13);};
template<> struct uuid<Windows::Graphics::Printing::IPrintPageRangeFactory> { define_guid(0x408FD45F, 0xE047, 0x5F85, 0x71, 0x29, 0xFB, 0x8, 0x5A, 0x4F, 0xAD, 0x14);};
template<> struct uuid<Windows::Graphics::Printing::IPrintPageRangeOptions> { define_guid(0xCE6DB728, 0x1357, 0x46B2, 0xA9, 0x23, 0x79, 0xF9, 0x95, 0xF4, 0x48, 0xFC);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties> { define_guid(0xC1B71832, 0x9E93, 0x4E55, 0x81, 0x4B, 0x33, 0x26, 0xA5, 0x9E, 0xFC, 0xE1);};
template<> struct uuid<Windows::Graphics::Printing::IPrintPageInfo> { define_guid(0xDD4BE9C9, 0xA6A1, 0x4ADA, 0x93, 0xE, 0xDA, 0x87, 0x2A, 0x4F, 0x23, 0xD3);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskOptions> { define_guid(0x5A0A66BB, 0xD289, 0x41BB, 0x96, 0xDD, 0x57, 0xE2, 0x83, 0x38, 0xAE, 0x3F);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskOptions2> { define_guid(0xEB9B1606, 0x9A36, 0x4B59, 0x86, 0x17, 0xB2, 0x17, 0x84, 0x92, 0x62, 0xE1);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration> { define_guid(0x62E69E23, 0x9A1E, 0x4336, 0xB7, 0x4F, 0x3C, 0xC7, 0xF4, 0xCF, 0xF7, 0x9);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskOptionsCore> { define_guid(0x1BDBB474, 0x4ED1, 0x41EB, 0xBE, 0x3C, 0x72, 0xD1, 0x8E, 0xD6, 0x73, 0x37);};
template<> struct uuid<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic> { define_guid(0xB4483D26, 0xDD0, 0x4CD4, 0xBA, 0xFF, 0x93, 0xF, 0xC7, 0xD6, 0xA5, 0x74);};
template<> struct uuid<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic2> { define_guid(0x3BE38BF4, 0x7A44, 0x4269, 0x9A, 0x52, 0x81, 0x26, 0x1E, 0x28, 0x9E, 0xE9);};
template<> struct uuid<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic3> { define_guid(0xBBF68E86, 0x3858, 0x41B3, 0xA7, 0x99, 0x55, 0xDD, 0x98, 0x88, 0xD4, 0x75);};
template<> struct uuid<Windows::Graphics::Printing::IPrintDocumentSource> { define_guid(0xDEDC0C30, 0xF1EB, 0x47DF, 0xAA, 0xE6, 0xED, 0x54, 0x27, 0x51, 0x1F, 0x1);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskProgressingEventArgs> { define_guid(0x810CD3CB, 0xB410, 0x4282, 0xA0, 0x73, 0x5A, 0xC3, 0x78, 0x23, 0x41, 0x74);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskCompletedEventArgs> { define_guid(0x5BCD34AF, 0x24E9, 0x4C10, 0x8D, 0x7, 0x14, 0xC3, 0x46, 0xBA, 0x3F, 0xCE);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTask> { define_guid(0x61D80247, 0x6CF6, 0x4FAD, 0x84, 0xE2, 0xA5, 0xE8, 0x2E, 0x2D, 0x4C, 0xEB);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTask2> { define_guid(0x36234877, 0x3E53, 0x4D9D, 0x8F, 0x5E, 0x31, 0x6A, 0xC8, 0xDE, 0xDA, 0xE1);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport> { define_guid(0x295D70C0, 0xC2CB, 0x4B7D, 0xB0, 0xEA, 0x93, 0x9, 0x50, 0x91, 0xA2, 0x20);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral> { define_guid(0x4A1560D1, 0x6992, 0x4D9D, 0x85, 0x55, 0x4C, 0xA4, 0x56, 0x3F, 0xB1, 0x66);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs> { define_guid(0xF9F067BE, 0xF456, 0x41F0, 0x9C, 0x98, 0x5C, 0xE7, 0x3E, 0x85, 0x14, 0x10);};
template<> struct uuid<Windows::Graphics::Printing::PrintTaskSourceRequestedHandler> { define_guid(0x6C109FA8, 0x5CB6, 0x4B3A, 0x86, 0x63, 0xF3, 0x9C, 0xB0, 0x2D, 0xC9, 0xB4);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskRequestedDeferral> { define_guid(0xCFEFB3F0, 0xCE3E, 0x42C7, 0x94, 0x96, 0x64, 0x80, 0xC, 0x62, 0x2C, 0x44);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskRequest> { define_guid(0x6FF61E2E, 0x2722, 0x4240, 0xA6, 0x7C, 0xF3, 0x64, 0x84, 0x9A, 0x17, 0xF3);};
template<> struct uuid<Windows::Graphics::Printing::IPrintTaskRequestedEventArgs> { define_guid(0xD0AFF924, 0xA31B, 0x454C, 0xA7, 0xB6, 0x5D, 0xC, 0xC5, 0x22, 0xFC, 0x16);};
template<> struct uuid<Windows::Graphics::Printing::IPrintManagerStatic> { define_guid(0x58185DCD, 0xE634, 0x4654, 0x84, 0xF0, 0xE0, 0x15, 0x2A, 0x82, 0x17, 0xAC);};
template<> struct uuid<Windows::Graphics::Printing::IPrintManagerStatic2> { define_guid(0x35A99955, 0xE6AB, 0x4139, 0x9A, 0xBD, 0xB8, 0x6A, 0x72, 0x9B, 0x35, 0x98);};
template<> struct uuid<Windows::Graphics::Printing::IPrintManager> { define_guid(0xFF2A9694, 0x8C99, 0x44FD, 0xAE, 0x4A, 0x19, 0xD9, 0xAA, 0x9A, 0xF, 0xA);};

// types

namespace Windows { namespace Graphics { namespace Printing {

// IPrintPageRange
struct IPrintPageRange_raw : IInspectable {
	virtual STDMETHODIMP _get_FirstPageNumber(int *value);
	virtual STDMETHODIMP _get_LastPageNumber(int *value);
};
template<typename X> struct IPrintPageRange_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IPrintPageRange_adaptor::FirstPageNumber)->_get_FirstPageNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstPageNumber;
		struct : property {
			int get() { int value; hrcheck(enc(&IPrintPageRange_adaptor::LastPageNumber)->_get_LastPageNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastPageNumber;
	};
	IPrintPageRange_adaptor() {}
};
template<typename X> struct adapt<IPrintPageRange, X> : Windows::Graphics::Printing::IPrintPageRange_adaptor<X> { typedef adapt IPrintPageRange; };
struct IPrintPageRange : IPrintPageRange_raw, generate<IPrintPageRange> {};

// IPrintPageRangeFactory
struct IPrintPageRangeFactory : IInspectable {
	virtual STDMETHODIMP _Create(int firstPage, int lastPage, PrintPageRange* *result);
	virtual STDMETHODIMP _CreateWithSinglePage(int page, PrintPageRange* *result);
};

// PrintPageRange
template<typename> struct PrintPageRange_statics {
	static PrintPageRange *activate(int firstPage, int lastPage) { PrintPageRange *result; hrcheck(get_activation_factory<PrintPageRange, IPrintPageRangeFactory>()->_Create(firstPage, lastPage, &result)); return result; }
	static PrintPageRange *activate(int page) { PrintPageRange *result; hrcheck(get_activation_factory<PrintPageRange, IPrintPageRangeFactory>()->_CreateWithSinglePage(page, &result)); return result; }
};

template<typename X> struct statics<PrintPageRange, X> : X, Windows::Graphics::Printing::PrintPageRange_statics<void> {
	using Windows::Graphics::Printing::PrintPageRange_statics<void>::activate;
	typedef typename X::root_type PrintPageRange;
};
struct PrintPageRange : generate<PrintPageRange> {};

// IPrintPageRangeOptions
struct IPrintPageRangeOptions_raw : IInspectable {
	virtual STDMETHODIMP _put_AllowAllPages(bool value);
	virtual STDMETHODIMP _get_AllowAllPages(bool *value);
	virtual STDMETHODIMP _put_AllowCurrentPage(bool value);
	virtual STDMETHODIMP _get_AllowCurrentPage(bool *value);
	virtual STDMETHODIMP _put_AllowCustomSetOfPages(bool value);
	virtual STDMETHODIMP _get_AllowCustomSetOfPages(bool *value);
};
template<typename X> struct IPrintPageRangeOptions_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrintPageRangeOptions_adaptor::AllowAllPages)->_get_AllowAllPages(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPrintPageRangeOptions_adaptor::AllowAllPages)->_put_AllowAllPages(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowAllPages;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrintPageRangeOptions_adaptor::AllowCurrentPage)->_get_AllowCurrentPage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPrintPageRangeOptions_adaptor::AllowCurrentPage)->_put_AllowCurrentPage(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowCurrentPage;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrintPageRangeOptions_adaptor::AllowCustomSetOfPages)->_get_AllowCustomSetOfPages(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPrintPageRangeOptions_adaptor::AllowCustomSetOfPages)->_put_AllowCustomSetOfPages(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowCustomSetOfPages;
	};
	IPrintPageRangeOptions_adaptor() {}
};
template<typename X> struct adapt<IPrintPageRangeOptions, X> : Windows::Graphics::Printing::IPrintPageRangeOptions_adaptor<X> { typedef adapt IPrintPageRangeOptions; };
struct IPrintPageRangeOptions : IPrintPageRangeOptions_raw, generate<IPrintPageRangeOptions> {};

// PrintPageRangeOptions
template<typename X> struct statics<PrintPageRangeOptions, X> : X {
	typedef typename X::root_type PrintPageRangeOptions;
};
struct PrintPageRangeOptions : generate<PrintPageRangeOptions> {};

// IPrintTaskOptionsCoreProperties
struct IPrintTaskOptionsCoreProperties_raw : IInspectable {
	virtual STDMETHODIMP _put_MediaSize(PrintMediaSize value) = 0;
	virtual STDMETHODIMP _get_MediaSize(PrintMediaSize *value) = 0;
	virtual STDMETHODIMP _put_MediaType(PrintMediaType value) = 0;
	virtual STDMETHODIMP _get_MediaType(PrintMediaType *value) = 0;
	virtual STDMETHODIMP _put_Orientation(PrintOrientation value) = 0;
	virtual STDMETHODIMP _get_Orientation(PrintOrientation *value) = 0;
	virtual STDMETHODIMP _put_PrintQuality(Printing::PrintQuality value) = 0;
	virtual STDMETHODIMP _get_PrintQuality(Printing::PrintQuality *value) = 0;
	virtual STDMETHODIMP _put_ColorMode(PrintColorMode value) = 0;
	virtual STDMETHODIMP _get_ColorMode(PrintColorMode *value) = 0;
	virtual STDMETHODIMP _put_Duplex(PrintDuplex value) = 0;
	virtual STDMETHODIMP _get_Duplex(PrintDuplex *value) = 0;
	virtual STDMETHODIMP _put_Collation(PrintCollation value) = 0;
	virtual STDMETHODIMP _get_Collation(PrintCollation *value) = 0;
	virtual STDMETHODIMP _put_Staple(PrintStaple value) = 0;
	virtual STDMETHODIMP _get_Staple(PrintStaple *value) = 0;
	virtual STDMETHODIMP _put_HolePunch(PrintHolePunch value) = 0;
	virtual STDMETHODIMP _get_HolePunch(PrintHolePunch *value) = 0;
	virtual STDMETHODIMP _put_Binding(PrintBinding value) = 0;
	virtual STDMETHODIMP _get_Binding(PrintBinding *value) = 0;
	virtual STDMETHODIMP _get_MinCopies(unsigned *value) = 0;
	virtual STDMETHODIMP _get_MaxCopies(unsigned *value) = 0;
	virtual STDMETHODIMP _put_NumberOfCopies(unsigned value) = 0;
	virtual STDMETHODIMP _get_NumberOfCopies(unsigned *value) = 0;
};
template<typename X> struct IPrintTaskOptionsCoreProperties_adaptor : X {
	union {
		struct : property {
			PrintBinding get() { PrintBinding value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Binding)->_get_Binding(&value)); return value; }
			PrintBinding operator()() { return get(); }
			operator PrintBinding () { return get(); }
			void put(PrintBinding value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Binding)->_put_Binding(value)); }
			void operator=(PrintBinding value) { put(value); }
			void operator()(PrintBinding value) { put(value); }
		} Binding;
		struct : property {
			PrintCollation get() { PrintCollation value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Collation)->_get_Collation(&value)); return value; }
			PrintCollation operator()() { return get(); }
			operator PrintCollation () { return get(); }
			void put(PrintCollation value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Collation)->_put_Collation(value)); }
			void operator=(PrintCollation value) { put(value); }
			void operator()(PrintCollation value) { put(value); }
		} Collation;
		struct : property {
			PrintColorMode get() { PrintColorMode value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::ColorMode)->_get_ColorMode(&value)); return value; }
			PrintColorMode operator()() { return get(); }
			operator PrintColorMode () { return get(); }
			void put(PrintColorMode value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::ColorMode)->_put_ColorMode(value)); }
			void operator=(PrintColorMode value) { put(value); }
			void operator()(PrintColorMode value) { put(value); }
		} ColorMode;
		struct : property {
			PrintDuplex get() { PrintDuplex value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Duplex)->_get_Duplex(&value)); return value; }
			PrintDuplex operator()() { return get(); }
			operator PrintDuplex () { return get(); }
			void put(PrintDuplex value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Duplex)->_put_Duplex(value)); }
			void operator=(PrintDuplex value) { put(value); }
			void operator()(PrintDuplex value) { put(value); }
		} Duplex;
		struct : property {
			PrintHolePunch get() { PrintHolePunch value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::HolePunch)->_get_HolePunch(&value)); return value; }
			PrintHolePunch operator()() { return get(); }
			operator PrintHolePunch () { return get(); }
			void put(PrintHolePunch value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::HolePunch)->_put_HolePunch(value)); }
			void operator=(PrintHolePunch value) { put(value); }
			void operator()(PrintHolePunch value) { put(value); }
		} HolePunch;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::MaxCopies)->_get_MaxCopies(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxCopies;
		struct : property {
			PrintMediaSize get() { PrintMediaSize value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::MediaSize)->_get_MediaSize(&value)); return value; }
			PrintMediaSize operator()() { return get(); }
			operator PrintMediaSize () { return get(); }
			void put(PrintMediaSize value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::MediaSize)->_put_MediaSize(value)); }
			void operator=(PrintMediaSize value) { put(value); }
			void operator()(PrintMediaSize value) { put(value); }
		} MediaSize;
		struct : property {
			PrintMediaType get() { PrintMediaType value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::MediaType)->_get_MediaType(&value)); return value; }
			PrintMediaType operator()() { return get(); }
			operator PrintMediaType () { return get(); }
			void put(PrintMediaType value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::MediaType)->_put_MediaType(value)); }
			void operator=(PrintMediaType value) { put(value); }
			void operator()(PrintMediaType value) { put(value); }
		} MediaType;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::MinCopies)->_get_MinCopies(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinCopies;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::NumberOfCopies)->_get_NumberOfCopies(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::NumberOfCopies)->_put_NumberOfCopies(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} NumberOfCopies;
		struct : property {
			PrintOrientation get() { PrintOrientation value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			PrintOrientation operator()() { return get(); }
			operator PrintOrientation () { return get(); }
			void put(PrintOrientation value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Orientation)->_put_Orientation(value)); }
			void operator=(PrintOrientation value) { put(value); }
			void operator()(PrintOrientation value) { put(value); }
		} Orientation;
		struct : property {
			Printing::PrintQuality get() { Printing::PrintQuality value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::PrintQuality)->_get_PrintQuality(&value)); return value; }
			Printing::PrintQuality operator()() { return get(); }
			operator Printing::PrintQuality () { return get(); }
			void put(Printing::PrintQuality value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::PrintQuality)->_put_PrintQuality(value)); }
			void operator=(Printing::PrintQuality value) { put(value); }
			void operator()(Printing::PrintQuality value) { put(value); }
		} PrintQuality;
		struct : property {
			PrintStaple get() { PrintStaple value; hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Staple)->_get_Staple(&value)); return value; }
			PrintStaple operator()() { return get(); }
			operator PrintStaple () { return get(); }
			void put(PrintStaple value) { hrcheck(enc(&IPrintTaskOptionsCoreProperties_adaptor::Staple)->_put_Staple(value)); }
			void operator=(PrintStaple value) { put(value); }
			void operator()(PrintStaple value) { put(value); }
		} Staple;
	};
	IPrintTaskOptionsCoreProperties_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskOptionsCoreProperties, X> : Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties_adaptor<X> { typedef adapt IPrintTaskOptionsCoreProperties; };
template<typename X> struct IPrintTaskOptionsCoreProperties_unadaptor : X {
	STDMETHODIMP _put_MediaSize(PrintMediaSize value) { return hrtry([&, this] { put_prop(value, MediaSize); }); }
	STDMETHODIMP _get_MediaSize(PrintMediaSize *value) { return hrtry([&, this] { get_prop(value, MediaSize); }); }
	STDMETHODIMP _put_MediaType(PrintMediaType value) { return hrtry([&, this] { put_prop(value, MediaType); }); }
	STDMETHODIMP _get_MediaType(PrintMediaType *value) { return hrtry([&, this] { get_prop(value, MediaType); }); }
	STDMETHODIMP _put_Orientation(PrintOrientation value) { return hrtry([&, this] { put_prop(value, Orientation); }); }
	STDMETHODIMP _get_Orientation(PrintOrientation *value) { return hrtry([&, this] { get_prop(value, Orientation); }); }
	STDMETHODIMP _put_PrintQuality(Printing::PrintQuality value) { return hrtry([&, this] { put_prop(value, PrintQuality); }); }
	STDMETHODIMP _get_PrintQuality(Printing::PrintQuality *value) { return hrtry([&, this] { get_prop(value, PrintQuality); }); }
	STDMETHODIMP _put_ColorMode(PrintColorMode value) { return hrtry([&, this] { put_prop(value, ColorMode); }); }
	STDMETHODIMP _get_ColorMode(PrintColorMode *value) { return hrtry([&, this] { get_prop(value, ColorMode); }); }
	STDMETHODIMP _put_Duplex(PrintDuplex value) { return hrtry([&, this] { put_prop(value, Duplex); }); }
	STDMETHODIMP _get_Duplex(PrintDuplex *value) { return hrtry([&, this] { get_prop(value, Duplex); }); }
	STDMETHODIMP _put_Collation(PrintCollation value) { return hrtry([&, this] { put_prop(value, Collation); }); }
	STDMETHODIMP _get_Collation(PrintCollation *value) { return hrtry([&, this] { get_prop(value, Collation); }); }
	STDMETHODIMP _put_Staple(PrintStaple value) { return hrtry([&, this] { put_prop(value, Staple); }); }
	STDMETHODIMP _get_Staple(PrintStaple *value) { return hrtry([&, this] { get_prop(value, Staple); }); }
	STDMETHODIMP _put_HolePunch(PrintHolePunch value) { return hrtry([&, this] { put_prop(value, HolePunch); }); }
	STDMETHODIMP _get_HolePunch(PrintHolePunch *value) { return hrtry([&, this] { get_prop(value, HolePunch); }); }
	STDMETHODIMP _put_Binding(PrintBinding value) { return hrtry([&, this] { put_prop(value, Binding); }); }
	STDMETHODIMP _get_Binding(PrintBinding *value) { return hrtry([&, this] { get_prop(value, Binding); }); }
	STDMETHODIMP _get_MinCopies(unsigned *value) { return hrtry([&, this] { get_prop(value, MinCopies); }); }
	STDMETHODIMP _get_MaxCopies(unsigned *value) { return hrtry([&, this] { get_prop(value, MaxCopies); }); }
	STDMETHODIMP _put_NumberOfCopies(unsigned value) { return hrtry([&, this] { put_prop(value, NumberOfCopies); }); }
	STDMETHODIMP _get_NumberOfCopies(unsigned *value) { return hrtry([&, this] { get_prop(value, NumberOfCopies); }); }
};
template<typename X> struct unadapt<IPrintTaskOptionsCoreProperties, X> : Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties_unadaptor<X> {};
struct IPrintTaskOptionsCoreProperties : IPrintTaskOptionsCoreProperties_raw, generate<IPrintTaskOptionsCoreProperties> {};

// IPrintPageInfo
struct IPrintPageInfo_raw : IInspectable {
	virtual STDMETHODIMP _put_MediaSize(PrintMediaSize value);
	virtual STDMETHODIMP _get_MediaSize(PrintMediaSize *value);
	virtual STDMETHODIMP _put_PageSize(Foundation::Size value);
	virtual STDMETHODIMP _get_PageSize(Foundation::Size *value);
	virtual STDMETHODIMP _put_DpiX(unsigned value);
	virtual STDMETHODIMP _get_DpiX(unsigned *value);
	virtual STDMETHODIMP _put_DpiY(unsigned value);
	virtual STDMETHODIMP _get_DpiY(unsigned *value);
	virtual STDMETHODIMP _put_Orientation(PrintOrientation value);
	virtual STDMETHODIMP _get_Orientation(PrintOrientation *value);
};
template<typename X> struct IPrintPageInfo_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrintPageInfo_adaptor::DpiX)->_get_DpiX(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPrintPageInfo_adaptor::DpiX)->_put_DpiX(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DpiX;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrintPageInfo_adaptor::DpiY)->_get_DpiY(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPrintPageInfo_adaptor::DpiY)->_put_DpiY(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DpiY;
		struct : property {
			PrintMediaSize get() { PrintMediaSize value; hrcheck(enc(&IPrintPageInfo_adaptor::MediaSize)->_get_MediaSize(&value)); return value; }
			PrintMediaSize operator()() { return get(); }
			operator PrintMediaSize () { return get(); }
			void put(PrintMediaSize value) { hrcheck(enc(&IPrintPageInfo_adaptor::MediaSize)->_put_MediaSize(value)); }
			void operator=(PrintMediaSize value) { put(value); }
			void operator()(PrintMediaSize value) { put(value); }
		} MediaSize;
		struct : property {
			PrintOrientation get() { PrintOrientation value; hrcheck(enc(&IPrintPageInfo_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			PrintOrientation operator()() { return get(); }
			operator PrintOrientation () { return get(); }
			void put(PrintOrientation value) { hrcheck(enc(&IPrintPageInfo_adaptor::Orientation)->_put_Orientation(value)); }
			void operator=(PrintOrientation value) { put(value); }
			void operator()(PrintOrientation value) { put(value); }
		} Orientation;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IPrintPageInfo_adaptor::PageSize)->_get_PageSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
			void put(const Foundation::Size& value) { hrcheck(enc(&IPrintPageInfo_adaptor::PageSize)->_put_PageSize(value)); }
			void operator=(const Foundation::Size& value) { put(value); }
			void operator()(const Foundation::Size& value) { put(value); }
		} PageSize;
	};
	IPrintPageInfo_adaptor() {}
};
template<typename X> struct adapt<IPrintPageInfo, X> : Windows::Graphics::Printing::IPrintPageInfo_adaptor<X> { typedef adapt IPrintPageInfo; };
struct IPrintPageInfo : IPrintPageInfo_raw, generate<IPrintPageInfo> {};

// PrintPageInfo
template<typename X> struct statics<PrintPageInfo, X> : X {
	typedef typename X::root_type PrintPageInfo;
};
struct PrintPageInfo : generate<PrintPageInfo> {};

// IPrintTaskOptions
struct IPrintTaskOptions_raw : IInspectable {
	virtual STDMETHODIMP _put_Bordering(PrintBordering value);
	virtual STDMETHODIMP _get_Bordering(PrintBordering *value);
	virtual STDMETHODIMP _GetPagePrintTicket(PrintPageInfo* printPageInfo, Storage::Streams::IRandomAccessStream* *printTicket);
};
template<typename X> struct IPrintTaskOptions_adaptor : X {
	union {
		struct : property {
			PrintBordering get() { PrintBordering value; hrcheck(enc(&IPrintTaskOptions_adaptor::Bordering)->_get_Bordering(&value)); return value; }
			PrintBordering operator()() { return get(); }
			operator PrintBordering () { return get(); }
			void put(PrintBordering value) { hrcheck(enc(&IPrintTaskOptions_adaptor::Bordering)->_put_Bordering(value)); }
			void operator=(PrintBordering value) { put(value); }
			void operator()(PrintBordering value) { put(value); }
		} Bordering;
	};
	ptr<Storage::Streams::IRandomAccessStream> GetPagePrintTicket(pptr<PrintPageInfo> printPageInfo) { Storage::Streams::IRandomAccessStream* printTicket; hrcheck(X::get()->_GetPagePrintTicket(printPageInfo, &printTicket)); return from_abi(printTicket); }
	IPrintTaskOptions_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskOptions, X> : Windows::Graphics::Printing::IPrintTaskOptions_adaptor<X> { typedef adapt IPrintTaskOptions; };
struct IPrintTaskOptions : IPrintTaskOptions_raw, generate<IPrintTaskOptions> {};

// IPrintTaskOptions2
struct IPrintTaskOptions2_raw : IInspectable {
	virtual STDMETHODIMP _get_PageRangeOptions(PrintPageRangeOptions* *value);
	virtual STDMETHODIMP _get_CustomPageRanges(Foundation::Collections::IVector<PrintPageRange*>* *value);
};
template<typename X> struct IPrintTaskOptions2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<PrintPageRange>>> get() { Foundation::Collections::IVector<PrintPageRange*>* value; hrcheck(enc(&IPrintTaskOptions2_adaptor::CustomPageRanges)->_get_CustomPageRanges(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<PrintPageRange>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<PrintPageRange>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<PrintPageRange>>> operator->() { return get(); }
		} CustomPageRanges;
		struct : property {
			ptr<PrintPageRangeOptions> get() { PrintPageRangeOptions* value; hrcheck(enc(&IPrintTaskOptions2_adaptor::PageRangeOptions)->_get_PageRangeOptions(&value)); return from_abi(value); }
			ptr<PrintPageRangeOptions> operator()() { return get(); }
			operator ptr<PrintPageRangeOptions> () { return get(); }
			ptr<PrintPageRangeOptions> operator->() { return get(); }
		} PageRangeOptions;
	};
	IPrintTaskOptions2_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskOptions2, X> : Windows::Graphics::Printing::IPrintTaskOptions2_adaptor<X> { typedef adapt IPrintTaskOptions2; };
struct IPrintTaskOptions2 : IPrintTaskOptions2_raw, generate<IPrintTaskOptions2> {};

// IPrintTaskOptionsCoreUIConfiguration
struct IPrintTaskOptionsCoreUIConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayedOptions(Foundation::Collections::IVector<HSTRING>* *value) = 0;
};
template<typename X> struct IPrintTaskOptionsCoreUIConfiguration_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IPrintTaskOptionsCoreUIConfiguration_adaptor::DisplayedOptions)->_get_DisplayedOptions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} DisplayedOptions;
	};
	IPrintTaskOptionsCoreUIConfiguration_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskOptionsCoreUIConfiguration, X> : Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration_adaptor<X> { typedef adapt IPrintTaskOptionsCoreUIConfiguration; };
template<typename X> struct IPrintTaskOptionsCoreUIConfiguration_unadaptor : X {
	STDMETHODIMP _get_DisplayedOptions(Foundation::Collections::IVector<HSTRING>* *value) { return hrtry([&, this] { get_prop(value, DisplayedOptions); }); }
};
template<typename X> struct unadapt<IPrintTaskOptionsCoreUIConfiguration, X> : Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration_unadaptor<X> {};
struct IPrintTaskOptionsCoreUIConfiguration : IPrintTaskOptionsCoreUIConfiguration_raw, generate<IPrintTaskOptionsCoreUIConfiguration> {};

// IPrintTaskOptionsCore
struct IPrintTaskOptionsCore_raw : IInspectable {
	virtual STDMETHODIMP _GetPageDescription(unsigned jobPageNumber, PrintPageDescription *description) = 0;
};
template<typename X> struct IPrintTaskOptionsCore_adaptor : X {
	PrintPageDescription GetPageDescription(unsigned jobPageNumber) { PrintPageDescription description; hrcheck(X::get()->_GetPageDescription(jobPageNumber, &description)); return description; }
};
template<typename X> struct adapt<IPrintTaskOptionsCore, X> : Windows::Graphics::Printing::IPrintTaskOptionsCore_adaptor<X> { typedef adapt IPrintTaskOptionsCore; };
template<typename X> struct IPrintTaskOptionsCore_unadaptor : X {
	STDMETHODIMP _GetPageDescription(unsigned jobPageNumber, PrintPageDescription *description) { return hrtry([&, this] { *description = X::get()->GetPageDescription(jobPageNumber); }); }
};
template<typename X> struct unadapt<IPrintTaskOptionsCore, X> : Windows::Graphics::Printing::IPrintTaskOptionsCore_unadaptor<X> {};
struct IPrintTaskOptionsCore : IPrintTaskOptionsCore_raw, generate<IPrintTaskOptionsCore> {};

// PrintTaskOptions
template<typename X> struct statics<PrintTaskOptions, X> : X {
	typedef typename X::root_type PrintTaskOptions;
};
struct PrintTaskOptions : generate<PrintTaskOptions> {};

// IStandardPrintTaskOptionsStatic
struct IStandardPrintTaskOptionsStatic : IInspectable {
	virtual STDMETHODIMP _get_MediaSize(HSTRING *value);
	virtual STDMETHODIMP _get_MediaType(HSTRING *value);
	virtual STDMETHODIMP _get_Orientation(HSTRING *value);
	virtual STDMETHODIMP _get_PrintQuality(HSTRING *value);
	virtual STDMETHODIMP _get_ColorMode(HSTRING *value);
	virtual STDMETHODIMP _get_Duplex(HSTRING *value);
	virtual STDMETHODIMP _get_Collation(HSTRING *value);
	virtual STDMETHODIMP _get_Staple(HSTRING *value);
	virtual STDMETHODIMP _get_HolePunch(HSTRING *value);
	virtual STDMETHODIMP _get_Binding(HSTRING *value);
	virtual STDMETHODIMP _get_Copies(HSTRING *value);
	virtual STDMETHODIMP _get_NUp(HSTRING *value);
	virtual STDMETHODIMP _get_InputBin(HSTRING *value);
};

// IStandardPrintTaskOptionsStatic2
struct IStandardPrintTaskOptionsStatic2 : IInspectable {
	virtual STDMETHODIMP _get_Bordering(HSTRING *value);
};

// IStandardPrintTaskOptionsStatic3
struct IStandardPrintTaskOptionsStatic3 : IInspectable {
	virtual STDMETHODIMP _get_CustomPageRanges(HSTRING *value);
};

// StandardPrintTaskOptions
template<typename> struct StandardPrintTaskOptions_statics {
	static struct _Binding : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_Binding(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Binding;
	static struct _Collation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_Collation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Collation;
	static struct _ColorMode : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_ColorMode(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ColorMode;
	static struct _Copies : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_Copies(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Copies;
	static struct _Duplex : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_Duplex(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Duplex;
	static struct _HolePunch : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_HolePunch(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HolePunch;
	static struct _InputBin : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_InputBin(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} InputBin;
	static struct _MediaSize : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_MediaSize(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MediaSize;
	static struct _MediaType : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_MediaType(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MediaType;
	static struct _NUp : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_NUp(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NUp;
	static struct _Orientation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_Orientation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Orientation;
	static struct _PrintQuality : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_PrintQuality(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PrintQuality;
	static struct _Staple : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>()->_get_Staple(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Staple;
	static struct _Bordering : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic2>()->_get_Bordering(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Bordering;
	static struct _CustomPageRanges : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic3>()->_get_CustomPageRanges(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CustomPageRanges;
};
template<typename X> typename StandardPrintTaskOptions_statics<X>::_Binding StandardPrintTaskOptions_statics<X>::Binding;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_Collation StandardPrintTaskOptions_statics<X>::Collation;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_ColorMode StandardPrintTaskOptions_statics<X>::ColorMode;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_Copies StandardPrintTaskOptions_statics<X>::Copies;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_Duplex StandardPrintTaskOptions_statics<X>::Duplex;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_HolePunch StandardPrintTaskOptions_statics<X>::HolePunch;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_InputBin StandardPrintTaskOptions_statics<X>::InputBin;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_MediaSize StandardPrintTaskOptions_statics<X>::MediaSize;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_MediaType StandardPrintTaskOptions_statics<X>::MediaType;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_NUp StandardPrintTaskOptions_statics<X>::NUp;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_Orientation StandardPrintTaskOptions_statics<X>::Orientation;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_PrintQuality StandardPrintTaskOptions_statics<X>::PrintQuality;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_Staple StandardPrintTaskOptions_statics<X>::Staple;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_Bordering StandardPrintTaskOptions_statics<X>::Bordering;
template<typename X> typename StandardPrintTaskOptions_statics<X>::_CustomPageRanges StandardPrintTaskOptions_statics<X>::CustomPageRanges;

template<typename X> struct statics<StandardPrintTaskOptions, X> : X, Windows::Graphics::Printing::StandardPrintTaskOptions_statics<void> {
	typedef typename X::root_type StandardPrintTaskOptions;
};
struct StandardPrintTaskOptions : generate<StandardPrintTaskOptions> {};

// IPrintDocumentSource
struct IPrintDocumentSource : IInspectable, generate<IPrintDocumentSource> {};

// IPrintTaskProgressingEventArgs
struct IPrintTaskProgressingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DocumentPageCount(unsigned *value);
};
template<typename X> struct IPrintTaskProgressingEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrintTaskProgressingEventArgs_adaptor::DocumentPageCount)->_get_DocumentPageCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} DocumentPageCount;
	};
	IPrintTaskProgressingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskProgressingEventArgs, X> : Windows::Graphics::Printing::IPrintTaskProgressingEventArgs_adaptor<X> { typedef adapt IPrintTaskProgressingEventArgs; };
struct IPrintTaskProgressingEventArgs : IPrintTaskProgressingEventArgs_raw, generate<IPrintTaskProgressingEventArgs> {};

// PrintTaskProgressingEventArgs
template<typename X> struct statics<PrintTaskProgressingEventArgs, X> : X {
	typedef typename X::root_type PrintTaskProgressingEventArgs;
};
struct PrintTaskProgressingEventArgs : generate<PrintTaskProgressingEventArgs> {};

// IPrintTaskCompletedEventArgs
struct IPrintTaskCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Completion(PrintTaskCompletion *value);
};
template<typename X> struct IPrintTaskCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			PrintTaskCompletion get() { PrintTaskCompletion value; hrcheck(enc(&IPrintTaskCompletedEventArgs_adaptor::Completion)->_get_Completion(&value)); return value; }
			PrintTaskCompletion operator()() { return get(); }
			operator PrintTaskCompletion () { return get(); }
		} Completion;
	};
	IPrintTaskCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskCompletedEventArgs, X> : Windows::Graphics::Printing::IPrintTaskCompletedEventArgs_adaptor<X> { typedef adapt IPrintTaskCompletedEventArgs; };
struct IPrintTaskCompletedEventArgs : IPrintTaskCompletedEventArgs_raw, generate<IPrintTaskCompletedEventArgs> {};

// PrintTaskCompletedEventArgs
template<typename X> struct statics<PrintTaskCompletedEventArgs, X> : X {
	typedef typename X::root_type PrintTaskCompletedEventArgs;
};
struct PrintTaskCompletedEventArgs : generate<PrintTaskCompletedEventArgs> {};

// IPrintTask
struct IPrintTask_raw : IInspectable {
	virtual STDMETHODIMP _get_Properties(ApplicationModel::DataTransfer::DataPackagePropertySet* *value);
	virtual STDMETHODIMP _get_Source(IPrintDocumentSource* *value);
	virtual STDMETHODIMP _get_Options(PrintTaskOptions* *value);
	virtual STDMETHODIMP _add_Previewing(Foundation::TypedEventHandler<PrintTask*, IInspectable*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Previewing(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_Submitting(Foundation::TypedEventHandler<PrintTask*, IInspectable*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Submitting(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_Progressing(Foundation::TypedEventHandler<PrintTask*, PrintTaskProgressingEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Progressing(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_Completed(Foundation::TypedEventHandler<PrintTask*, PrintTaskCompletedEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Completed(Foundation::EventRegistrationToken eventCookie);
};
template<typename X> struct IPrintTask_adaptor : X {
	union {
		struct : property {
			ptr<PrintTaskOptions> get() { PrintTaskOptions* value; hrcheck(enc(&IPrintTask_adaptor::Options)->_get_Options(&value)); return from_abi(value); }
			ptr<PrintTaskOptions> operator()() { return get(); }
			operator ptr<PrintTaskOptions> () { return get(); }
			ptr<PrintTaskOptions> operator->() { return get(); }
		} Options;
		struct : property {
			ptr<ApplicationModel::DataTransfer::DataPackagePropertySet> get() { ApplicationModel::DataTransfer::DataPackagePropertySet* value; hrcheck(enc(&IPrintTask_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<ApplicationModel::DataTransfer::DataPackagePropertySet> operator()() { return get(); }
			operator ptr<ApplicationModel::DataTransfer::DataPackagePropertySet> () { return get(); }
			ptr<ApplicationModel::DataTransfer::DataPackagePropertySet> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<IPrintDocumentSource> get() { IPrintDocumentSource* value; hrcheck(enc(&IPrintTask_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<IPrintDocumentSource> operator()() { return get(); }
			operator ptr<IPrintDocumentSource> () { return get(); }
			ptr<IPrintDocumentSource> operator->() { return get(); }
		} Source;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PrintTask>, ptr<PrintTaskCompletedEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrintTask_adaptor::Completed)->_add_Completed(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrintTask_adaptor::Completed)->_remove_Completed(eventCookie)); }
		} Completed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PrintTask>, object>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrintTask_adaptor::Previewing)->_add_Previewing(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrintTask_adaptor::Previewing)->_remove_Previewing(eventCookie)); }
		} Previewing;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PrintTask>, ptr<PrintTaskProgressingEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrintTask_adaptor::Progressing)->_add_Progressing(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrintTask_adaptor::Progressing)->_remove_Progressing(eventCookie)); }
		} Progressing;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PrintTask>, object>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrintTask_adaptor::Submitting)->_add_Submitting(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrintTask_adaptor::Submitting)->_remove_Submitting(eventCookie)); }
		} Submitting;
	};
	IPrintTask_adaptor() {}
};
template<typename X> struct adapt<IPrintTask, X> : Windows::Graphics::Printing::IPrintTask_adaptor<X> { typedef adapt IPrintTask; };
struct IPrintTask : IPrintTask_raw, generate<IPrintTask> {};

// IPrintTask2
struct IPrintTask2_raw : IInspectable {
	virtual STDMETHODIMP _put_IsPreviewEnabled(bool value);
	virtual STDMETHODIMP _get_IsPreviewEnabled(bool *value);
};
template<typename X> struct IPrintTask2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrintTask2_adaptor::IsPreviewEnabled)->_get_IsPreviewEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPrintTask2_adaptor::IsPreviewEnabled)->_put_IsPreviewEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPreviewEnabled;
	};
	IPrintTask2_adaptor() {}
};
template<typename X> struct adapt<IPrintTask2, X> : Windows::Graphics::Printing::IPrintTask2_adaptor<X> { typedef adapt IPrintTask2; };
struct IPrintTask2 : IPrintTask2_raw, generate<IPrintTask2> {};

// IPrintTaskTargetDeviceSupport
struct IPrintTaskTargetDeviceSupport_raw : IInspectable {
	virtual STDMETHODIMP _put_IsPrinterTargetEnabled(bool value);
	virtual STDMETHODIMP _get_IsPrinterTargetEnabled(bool *value);
	virtual STDMETHODIMP _put_Is3DManufacturingTargetEnabled(bool value);
	virtual STDMETHODIMP _get_Is3DManufacturingTargetEnabled(bool *value);
};
template<typename X> struct IPrintTaskTargetDeviceSupport_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrintTaskTargetDeviceSupport_adaptor::Is3DManufacturingTargetEnabled)->_get_Is3DManufacturingTargetEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPrintTaskTargetDeviceSupport_adaptor::Is3DManufacturingTargetEnabled)->_put_Is3DManufacturingTargetEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Is3DManufacturingTargetEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrintTaskTargetDeviceSupport_adaptor::IsPrinterTargetEnabled)->_get_IsPrinterTargetEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPrintTaskTargetDeviceSupport_adaptor::IsPrinterTargetEnabled)->_put_IsPrinterTargetEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPrinterTargetEnabled;
	};
	IPrintTaskTargetDeviceSupport_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskTargetDeviceSupport, X> : Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport_adaptor<X> { typedef adapt IPrintTaskTargetDeviceSupport; };
struct IPrintTaskTargetDeviceSupport : IPrintTaskTargetDeviceSupport_raw, generate<IPrintTaskTargetDeviceSupport> {};

// PrintTask
template<typename X> struct statics<PrintTask, X> : X {
	typedef typename X::root_type PrintTask;
};
struct PrintTask : generate<PrintTask> {};

// IPrintTaskSourceRequestedDeferral
struct IPrintTaskSourceRequestedDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IPrintTaskSourceRequestedDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IPrintTaskSourceRequestedDeferral, X> : Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral_adaptor<X> { typedef adapt IPrintTaskSourceRequestedDeferral; };
struct IPrintTaskSourceRequestedDeferral : IPrintTaskSourceRequestedDeferral_raw, generate<IPrintTaskSourceRequestedDeferral> {};

// PrintTaskSourceRequestedDeferral
template<typename X> struct statics<PrintTaskSourceRequestedDeferral, X> : X {
	typedef typename X::root_type PrintTaskSourceRequestedDeferral;
};
struct PrintTaskSourceRequestedDeferral : generate<PrintTaskSourceRequestedDeferral> {};

// IPrintTaskSourceRequestedArgs
struct IPrintTaskSourceRequestedArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
	virtual STDMETHODIMP _SetSource(IPrintDocumentSource* source);
	virtual STDMETHODIMP _GetDeferral(PrintTaskSourceRequestedDeferral* *deferral);
};
template<typename X> struct IPrintTaskSourceRequestedArgs_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPrintTaskSourceRequestedArgs_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	void SetSource(pptr<IPrintDocumentSource> source) { hrcheck(X::get()->_SetSource(source)); }
	ptr<PrintTaskSourceRequestedDeferral> GetDeferral() { PrintTaskSourceRequestedDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	IPrintTaskSourceRequestedArgs_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskSourceRequestedArgs, X> : Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs_adaptor<X> { typedef adapt IPrintTaskSourceRequestedArgs; };
struct IPrintTaskSourceRequestedArgs : IPrintTaskSourceRequestedArgs_raw, generate<IPrintTaskSourceRequestedArgs> {};

// PrintTaskSourceRequestedArgs
template<typename X> struct statics<PrintTaskSourceRequestedArgs, X> : X {
	typedef typename X::root_type PrintTaskSourceRequestedArgs;
};
struct PrintTaskSourceRequestedArgs : generate<PrintTaskSourceRequestedArgs> {};

// PrintTaskSourceRequestedHandler
struct PrintTaskSourceRequestedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(PrintTaskSourceRequestedArgs* args) = 0;
};

// IPrintTaskRequestedDeferral
struct IPrintTaskRequestedDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IPrintTaskRequestedDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IPrintTaskRequestedDeferral, X> : Windows::Graphics::Printing::IPrintTaskRequestedDeferral_adaptor<X> { typedef adapt IPrintTaskRequestedDeferral; };
struct IPrintTaskRequestedDeferral : IPrintTaskRequestedDeferral_raw, generate<IPrintTaskRequestedDeferral> {};

// PrintTaskRequestedDeferral
template<typename X> struct statics<PrintTaskRequestedDeferral, X> : X {
	typedef typename X::root_type PrintTaskRequestedDeferral;
};
struct PrintTaskRequestedDeferral : generate<PrintTaskRequestedDeferral> {};

// IPrintTaskRequest
struct IPrintTaskRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
	virtual STDMETHODIMP _CreatePrintTask(HSTRING title, PrintTaskSourceRequestedHandler* handler, PrintTask* *task);
	virtual STDMETHODIMP _GetDeferral(PrintTaskRequestedDeferral* *deferral);
};
template<typename X> struct IPrintTaskRequest_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPrintTaskRequest_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	ptr<PrintTask> CreatePrintTask(hstring_ref title, handler_ref<PrintTaskSourceRequestedHandler> handler) { PrintTask* task; hrcheck(X::get()->_CreatePrintTask(title, handler, &task)); return from_abi(task); }
	ptr<PrintTaskRequestedDeferral> GetDeferral() { PrintTaskRequestedDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	IPrintTaskRequest_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskRequest, X> : Windows::Graphics::Printing::IPrintTaskRequest_adaptor<X> { typedef adapt IPrintTaskRequest; };
struct IPrintTaskRequest : IPrintTaskRequest_raw, generate<IPrintTaskRequest> {};

// PrintTaskRequest
template<typename X> struct statics<PrintTaskRequest, X> : X {
	typedef typename X::root_type PrintTaskRequest;
};
struct PrintTaskRequest : generate<PrintTaskRequest> {};

// IPrintTaskRequestedEventArgs
struct IPrintTaskRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(PrintTaskRequest* *value);
};
template<typename X> struct IPrintTaskRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PrintTaskRequest> get() { PrintTaskRequest* value; hrcheck(enc(&IPrintTaskRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<PrintTaskRequest> operator()() { return get(); }
			operator ptr<PrintTaskRequest> () { return get(); }
			ptr<PrintTaskRequest> operator->() { return get(); }
		} Request;
	};
	IPrintTaskRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskRequestedEventArgs, X> : Windows::Graphics::Printing::IPrintTaskRequestedEventArgs_adaptor<X> { typedef adapt IPrintTaskRequestedEventArgs; };
struct IPrintTaskRequestedEventArgs : IPrintTaskRequestedEventArgs_raw, generate<IPrintTaskRequestedEventArgs> {};

// PrintTaskRequestedEventArgs
template<typename X> struct statics<PrintTaskRequestedEventArgs, X> : X {
	typedef typename X::root_type PrintTaskRequestedEventArgs;
};
struct PrintTaskRequestedEventArgs : generate<PrintTaskRequestedEventArgs> {};

// IPrintManagerStatic
struct IPrintManagerStatic : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(PrintManager* *printingManager);
	virtual STDMETHODIMP _ShowPrintUIAsync(Foundation::IAsyncOperation<bool>* *operation);
};

// IPrintManagerStatic2
struct IPrintManagerStatic2 : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *result);
};

// IPrintManager
struct IPrintManager_raw : IInspectable {
	virtual STDMETHODIMP _add_PrintTaskRequested(Foundation::TypedEventHandler<PrintManager*, PrintTaskRequestedEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_PrintTaskRequested(Foundation::EventRegistrationToken eventCookie);
};
template<typename X> struct IPrintManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PrintManager>, ptr<PrintTaskRequestedEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrintManager_adaptor::PrintTaskRequested)->_add_PrintTaskRequested(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrintManager_adaptor::PrintTaskRequested)->_remove_PrintTaskRequested(eventCookie)); }
		} PrintTaskRequested;
	};
	IPrintManager_adaptor() {}
};
template<typename X> struct adapt<IPrintManager, X> : Windows::Graphics::Printing::IPrintManager_adaptor<X> { typedef adapt IPrintManager; };
struct IPrintManager : IPrintManager_raw, generate<IPrintManager> {};

// PrintManager
template<typename> struct PrintManager_statics {
	static bool IsSupported() { bool result; hrcheck(get_activation_factory<PrintManager, IPrintManagerStatic2>()->_IsSupported(&result)); return result; }
	static ptr<PrintManager> GetForCurrentView() { PrintManager* printingManager; hrcheck(get_activation_factory<PrintManager, IPrintManagerStatic>()->_GetForCurrentView(&printingManager)); return from_abi(printingManager); }
	static ptr<Foundation::IAsyncOperation<bool>> ShowPrintUIAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<PrintManager, IPrintManagerStatic>()->_ShowPrintUIAsync(&operation)); return from_abi(operation); }
};

template<typename X> struct statics<PrintManager, X> : X, Windows::Graphics::Printing::PrintManager_statics<void> {
	typedef typename X::root_type PrintManager;
};
struct PrintManager : generate<PrintManager> {};
}}}
} // namespace iso_winrt
