#pragma once
// generated by isopod tools
// namespaces:
// Windows.Security.Authentication.Web

#include "Windows.Security.Authentication.Web.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
struct ValueSet;
}
template<typename TResult> struct IAsyncOperation;
struct Uri;
}}

// defs

template<> struct def<Windows::Security::Authentication::Web::WebAuthenticationStatus> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Web::WebAuthenticationOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Security::Authentication::Web::IWebAuthenticationResult> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::WebAuthenticationResult> : class_type<Platform::Object, Windows::Security::Authentication::Web::IWebAuthenticationResult> {};
template<> struct def<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics2> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::WebAuthenticationBroker> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Authentication::Web::TokenBindingKeyType> : enum_type<int> {};

// uuids

template<> struct uuid<Windows::Security::Authentication::Web::IWebAuthenticationResult> { define_guid(0x64002B4B, 0xEDE9, 0x470A, 0xA5, 0xCD, 0x3, 0x23, 0xFA, 0xF6, 0xE2, 0x62);};
template<> struct uuid<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics> { define_guid(0x2F149F1A, 0xE673, 0x40B5, 0xBC, 0x22, 0x20, 0x1A, 0x68, 0x64, 0xA3, 0x7B);};
template<> struct uuid<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics2> { define_guid(0x73CDFB9E, 0x14E7, 0x41DA, 0xA9, 0x71, 0xAA, 0xF4, 0x41, 0xB, 0x62, 0x1E);};

// types

namespace Windows { namespace Security { namespace Authentication { namespace Web {

// IWebAuthenticationResult
struct IWebAuthenticationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_ResponseData(HSTRING *value);
	virtual STDMETHODIMP _get_ResponseStatus(WebAuthenticationStatus *value);
	virtual STDMETHODIMP _get_ResponseErrorDetail(unsigned *value);
};
template<typename X> struct IWebAuthenticationResult_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebAuthenticationResult_adaptor::ResponseData)->_get_ResponseData(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResponseData;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWebAuthenticationResult_adaptor::ResponseErrorDetail)->_get_ResponseErrorDetail(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ResponseErrorDetail;
		struct : property {
			WebAuthenticationStatus get() { WebAuthenticationStatus value; hrcheck(enc(&IWebAuthenticationResult_adaptor::ResponseStatus)->_get_ResponseStatus(&value)); return value; }
			WebAuthenticationStatus operator()() { return get(); }
			operator WebAuthenticationStatus () { return get(); }
		} ResponseStatus;
	};
	IWebAuthenticationResult_adaptor() {}
};
template<typename X> struct adapt<IWebAuthenticationResult, X> : Windows::Security::Authentication::Web::IWebAuthenticationResult_adaptor<X> { typedef adapt IWebAuthenticationResult; };
struct IWebAuthenticationResult : IWebAuthenticationResult_raw, generate<IWebAuthenticationResult> {};

// WebAuthenticationResult
template<typename X> struct statics<WebAuthenticationResult, X> : X {
	typedef typename X::root_type WebAuthenticationResult;
};
struct WebAuthenticationResult : generate<WebAuthenticationResult> {};

// IWebAuthenticationBrokerStatics
struct IWebAuthenticationBrokerStatics : IInspectable {
	virtual STDMETHODIMP _AuthenticateWithCallbackUriAsync(WebAuthenticationOptions options, Foundation::Uri* requestUri, Foundation::Uri* callbackUri, Foundation::IAsyncOperation<WebAuthenticationResult*>* *asyncInfo);
	virtual STDMETHODIMP _AuthenticateWithoutCallbackUriAsync(WebAuthenticationOptions options, Foundation::Uri* requestUri, Foundation::IAsyncOperation<WebAuthenticationResult*>* *asyncInfo);
	virtual STDMETHODIMP _GetCurrentApplicationCallbackUri(Foundation::Uri* *callbackUri);
};

// IWebAuthenticationBrokerStatics2
struct IWebAuthenticationBrokerStatics2 : IInspectable {
	virtual STDMETHODIMP _AuthenticateAndContinue(Foundation::Uri* requestUri);
	virtual STDMETHODIMP _AuthenticateWithCallbackUriAndContinue(Foundation::Uri* requestUri, Foundation::Uri* callbackUri);
	virtual STDMETHODIMP _AuthenticateWithCallbackUriContinuationDataAndOptionsAndContinue(Foundation::Uri* requestUri, Foundation::Uri* callbackUri, Foundation::Collections::ValueSet* continuationData, WebAuthenticationOptions options);
	virtual STDMETHODIMP _AuthenticateSilentlyAsync(Foundation::Uri* requestUri, Foundation::IAsyncOperation<WebAuthenticationResult*>* *asyncInfo);
	virtual STDMETHODIMP _AuthenticateSilentlyWithOptionsAsync(Foundation::Uri* requestUri, WebAuthenticationOptions options, Foundation::IAsyncOperation<WebAuthenticationResult*>* *asyncInfo);
};

// WebAuthenticationBroker
template<typename> struct WebAuthenticationBroker_statics {
	static void AuthenticateAndContinue(pptr<Foundation::Uri> requestUri) { hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>()->_AuthenticateAndContinue(requestUri)); }
	static void AuthenticateAndContinue(pptr<Foundation::Uri> requestUri, pptr<Foundation::Uri> callbackUri) { hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>()->_AuthenticateWithCallbackUriAndContinue(requestUri, callbackUri)); }
	static void AuthenticateAndContinue(pptr<Foundation::Uri> requestUri, pptr<Foundation::Uri> callbackUri, pptr<Foundation::Collections::ValueSet> continuationData, WebAuthenticationOptions options) { hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>()->_AuthenticateWithCallbackUriContinuationDataAndOptionsAndContinue(requestUri, callbackUri, continuationData, options)); }
	static ptr<Foundation::IAsyncOperation<ptr<WebAuthenticationResult>>> AuthenticateSilentlyAsync(pptr<Foundation::Uri> requestUri) { Foundation::IAsyncOperation<WebAuthenticationResult*>* asyncInfo; hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>()->_AuthenticateSilentlyAsync(requestUri, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<WebAuthenticationResult>>> AuthenticateSilentlyAsync(pptr<Foundation::Uri> requestUri, WebAuthenticationOptions options) { Foundation::IAsyncOperation<WebAuthenticationResult*>* asyncInfo; hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>()->_AuthenticateSilentlyWithOptionsAsync(requestUri, options, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<WebAuthenticationResult>>> AuthenticateAsync(WebAuthenticationOptions options, pptr<Foundation::Uri> requestUri, pptr<Foundation::Uri> callbackUri) { Foundation::IAsyncOperation<WebAuthenticationResult*>* asyncInfo; hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>()->_AuthenticateWithCallbackUriAsync(options, requestUri, callbackUri, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<WebAuthenticationResult>>> AuthenticateAsync(WebAuthenticationOptions options, pptr<Foundation::Uri> requestUri) { Foundation::IAsyncOperation<WebAuthenticationResult*>* asyncInfo; hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>()->_AuthenticateWithoutCallbackUriAsync(options, requestUri, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::Uri> GetCurrentApplicationCallbackUri() { Foundation::Uri* callbackUri; hrcheck(get_activation_factory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>()->_GetCurrentApplicationCallbackUri(&callbackUri)); return from_abi(callbackUri); }
};

template<typename X> struct statics<WebAuthenticationBroker, X> : X, Windows::Security::Authentication::Web::WebAuthenticationBroker_statics<void> {
	typedef typename X::root_type WebAuthenticationBroker;
};
struct WebAuthenticationBroker : generate<WebAuthenticationBroker> {};
}}}}
} // namespace iso_winrt
