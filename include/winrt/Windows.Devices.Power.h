#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Power

#include "Windows.Devices.Power.0.h"
#include "Windows.System.Power.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Devices::Power::IBatteryReport> : interface_type<> {};
template<> struct def<Windows::Devices::Power::BatteryReport> : class_type<Platform::Object, Windows::Devices::Power::IBatteryReport> {};
template<> struct def<Windows::Devices::Power::IBatteryStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Power::IBattery> : interface_type<> {};
template<> struct def<Windows::Devices::Power::Battery> : class_type<Platform::Object, Windows::Devices::Power::IBattery> {};

// uuids

template<> struct uuid<Windows::Devices::Power::IBatteryReport> { define_guid(0xC9858C3A, 0x4E13, 0x420A, 0xA8, 0xD0, 0x24, 0xF1, 0x8F, 0x39, 0x54, 0x1);};
template<> struct uuid<Windows::Devices::Power::IBatteryStatics> { define_guid(0x79CD72B6, 0x9E5E, 0x4452, 0xBE, 0xA6, 0xDF, 0xCD, 0x54, 0x1E, 0x59, 0x7F);};
template<> struct uuid<Windows::Devices::Power::IBattery> { define_guid(0xBC894FC6, 0x72, 0x47C8, 0x8B, 0x5D, 0x61, 0x4A, 0xAA, 0x7A, 0x43, 0x7E);};

// types

namespace Windows { namespace Devices { namespace Power {

// IBatteryReport
struct IBatteryReport_raw : IInspectable {
	virtual STDMETHODIMP _get_ChargeRateInMilliwatts(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_DesignCapacityInMilliwattHours(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_FullChargeCapacityInMilliwattHours(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_RemainingCapacityInMilliwattHours(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_Status(System::Power::BatteryStatus *value);
};
template<typename X> struct IBatteryReport_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IBatteryReport_adaptor::ChargeRateInMilliwatts)->_get_ChargeRateInMilliwatts(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} ChargeRateInMilliwatts;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IBatteryReport_adaptor::DesignCapacityInMilliwattHours)->_get_DesignCapacityInMilliwattHours(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} DesignCapacityInMilliwattHours;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IBatteryReport_adaptor::FullChargeCapacityInMilliwattHours)->_get_FullChargeCapacityInMilliwattHours(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} FullChargeCapacityInMilliwattHours;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IBatteryReport_adaptor::RemainingCapacityInMilliwattHours)->_get_RemainingCapacityInMilliwattHours(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} RemainingCapacityInMilliwattHours;
		struct : property {
			System::Power::BatteryStatus get() { System::Power::BatteryStatus value; hrcheck(enc(&IBatteryReport_adaptor::Status)->_get_Status(&value)); return value; }
			System::Power::BatteryStatus operator()() { return get(); }
			operator System::Power::BatteryStatus () { return get(); }
		} Status;
	};
	IBatteryReport_adaptor() {}
};
template<typename X> struct adapt<IBatteryReport, X> : Windows::Devices::Power::IBatteryReport_adaptor<X> { typedef adapt IBatteryReport; };
struct IBatteryReport : IBatteryReport_raw, generate<IBatteryReport> {};

// BatteryReport
template<typename X> struct statics<BatteryReport, X> : X {
	typedef typename X::root_type BatteryReport;
};
struct BatteryReport : generate<BatteryReport> {};

// IBatteryStatics
struct IBatteryStatics : IInspectable {
	virtual STDMETHODIMP _get_AggregateBattery(Battery* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Battery*>* *result);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
};

// IBattery
struct IBattery_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _GetReport(BatteryReport* *result);
	virtual STDMETHODIMP _add_ReportUpdated(Foundation::TypedEventHandler<Battery*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReportUpdated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBattery_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBattery_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Battery>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBattery_adaptor::ReportUpdated)->_add_ReportUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBattery_adaptor::ReportUpdated)->_remove_ReportUpdated(token)); }
		} ReportUpdated;
	};
	ptr<BatteryReport> GetReport() { BatteryReport* result; hrcheck(X::get()->_GetReport(&result)); return from_abi(result); }
	IBattery_adaptor() {}
};
template<typename X> struct adapt<IBattery, X> : Windows::Devices::Power::IBattery_adaptor<X> { typedef adapt IBattery; };
struct IBattery : IBattery_raw, generate<IBattery> {};

// Battery
template<typename> struct Battery_statics {
	static struct _AggregateBattery : property {
		ptr<Battery> get() { Battery* result; hrcheck(get_activation_factory<Battery, IBatteryStatics>()->_get_AggregateBattery(&result)); return from_abi(result); }
		ptr<Battery> operator()() { return get(); }
		operator ptr<Battery> () { return get(); }
		ptr<Battery> operator->() { return get(); }
	} AggregateBattery;
	static ptr<Foundation::IAsyncOperation<ptr<Battery>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Battery*>* result; hrcheck(get_activation_factory<Battery, IBatteryStatics>()->_FromIdAsync(deviceId, &result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<Battery, IBatteryStatics>()->_GetDeviceSelector(&result)); return from_abi(result); }
};
template<typename X> typename Battery_statics<X>::_AggregateBattery Battery_statics<X>::AggregateBattery;

template<typename X> struct statics<Battery, X> : X, Windows::Devices::Power::Battery_statics<void> {
	typedef typename X::root_type Battery;
};
struct Battery : generate<Battery> {};
}}}
} // namespace iso_winrt
