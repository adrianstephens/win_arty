#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Background

#include "Windows.Devices.Background.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Devices::Background::IDeviceUseDetails> : interface_type<> {};
template<> struct def<Windows::Devices::Background::DeviceUseDetails> : class_type<Platform::Object, Windows::Devices::Background::IDeviceUseDetails> {};
template<> struct def<Windows::Devices::Background::IDeviceServicingDetails> : interface_type<> {};
template<> struct def<Windows::Devices::Background::DeviceServicingDetails> : class_type<Platform::Object, Windows::Devices::Background::IDeviceServicingDetails> {};

// uuids

template<> struct uuid<Windows::Devices::Background::IDeviceUseDetails> { define_guid(0x7D565141, 0x557E, 0x4154, 0xB9, 0x94, 0xE4, 0xF7, 0xA1, 0x1F, 0xB3, 0x23);};
template<> struct uuid<Windows::Devices::Background::IDeviceServicingDetails> { define_guid(0x4AABEE29, 0x2344, 0x4AC4, 0x85, 0x27, 0x4A, 0x8E, 0xF6, 0x90, 0x56, 0x45);};

// types

namespace Windows { namespace Devices { namespace Background {

// IDeviceUseDetails
struct IDeviceUseDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Arguments(HSTRING *value);
};
template<typename X> struct IDeviceUseDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceUseDetails_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Arguments;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceUseDetails_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IDeviceUseDetails_adaptor() {}
};
template<typename X> struct adapt<IDeviceUseDetails, X> : Windows::Devices::Background::IDeviceUseDetails_adaptor<X> { typedef adapt IDeviceUseDetails; };
struct IDeviceUseDetails : IDeviceUseDetails_raw, generate<IDeviceUseDetails> {};

// DeviceUseDetails
template<typename X> struct statics<DeviceUseDetails, X> : X {
	typedef typename X::root_type DeviceUseDetails;
};
struct DeviceUseDetails : generate<DeviceUseDetails> {};

// IDeviceServicingDetails
struct IDeviceServicingDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Arguments(HSTRING *value);
	virtual STDMETHODIMP _get_ExpectedDuration(Foundation::TimeSpan *value);
};
template<typename X> struct IDeviceServicingDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceServicingDetails_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Arguments;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceServicingDetails_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IDeviceServicingDetails_adaptor::ExpectedDuration)->_get_ExpectedDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} ExpectedDuration;
	};
	IDeviceServicingDetails_adaptor() {}
};
template<typename X> struct adapt<IDeviceServicingDetails, X> : Windows::Devices::Background::IDeviceServicingDetails_adaptor<X> { typedef adapt IDeviceServicingDetails; };
struct IDeviceServicingDetails : IDeviceServicingDetails_raw, generate<IDeviceServicingDetails> {};

// DeviceServicingDetails
template<typename X> struct statics<DeviceServicingDetails, X> : X {
	typedef typename X::root_type DeviceServicingDetails;
};
struct DeviceServicingDetails : generate<DeviceServicingDetails> {};
}}}
} // namespace iso_winrt
