#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Notifications

#include "Windows.UI.Notifications.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel {
struct AppInfo;
}
namespace Data { namespace Xml { namespace Dom {
struct XmlDocument;
}}}
namespace Foundation { namespace Collections {
template<typename K, typename V> struct IKeyValuePair;
template<typename K, typename V> struct IMap;
template<typename T> struct IVector;
template<typename T> struct IIterable;
struct ValueSet;
template<typename T> struct IVectorView;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::UI::Notifications::IShownTileNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ShownTileNotification> : class_type<Platform::Object, Windows::UI::Notifications::IShownTileNotification> {};
template<> struct def<Windows::UI::Notifications::NotificationSetting> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::ToastDismissalReason> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::BadgeTemplateType> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::TileFlyoutTemplateType> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::TileTemplateType> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::ToastTemplateType> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::PeriodicUpdateRecurrence> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::ToastHistoryChangedType> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::AdaptiveNotificationContentKind> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::NotificationMirroring> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::NotificationKinds> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Notifications::UserNotificationChangedKind> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::NotificationUpdateResult> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::ToastNotificationPriority> : enum_type<int> {};
template<> struct def<Windows::UI::Notifications::IUserNotificationChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IUserNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::INotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::Notification> : class_type<Platform::Object, Windows::UI::Notifications::INotification> {};
template<> struct def<Windows::UI::Notifications::INotificationVisual> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::INotificationBinding> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::NotificationBinding> : class_type<Platform::Object, Windows::UI::Notifications::INotificationBinding> {};
template<> struct def<Windows::UI::Notifications::IAdaptiveNotificationContent> : overridable_type<> {};
template<> struct def<Windows::UI::Notifications::IAdaptiveNotificationText> : interface_type<Windows::UI::Notifications::IAdaptiveNotificationContent> {};
template<> struct def<Windows::UI::Notifications::AdaptiveNotificationText> : class_type<Platform::Object, Windows::UI::Notifications::IAdaptiveNotificationText> {};
template<> struct def<Windows::UI::Notifications::IKnownNotificationBindingsStatics> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IKnownAdaptiveNotificationHintsStatics> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IKnownAdaptiveNotificationTextStylesStatics> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastDismissedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastFailedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastActivatedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ITileUpdateManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ITileUpdater2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ITileUpdater> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::TileUpdater> : class_type<Platform::Object, Windows::UI::Notifications::ITileUpdater, Windows::UI::Notifications::ITileUpdater2> {};
template<> struct def<Windows::UI::Notifications::ITileUpdateManagerStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ITileUpdateManagerForUser> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::TileUpdateManagerForUser> : class_type<Platform::Object, Windows::UI::Notifications::ITileUpdateManagerForUser> {};
template<> struct def<Windows::UI::Notifications::ITileNotificationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ITileNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::TileNotification> : class_type<Platform::Object, Windows::UI::Notifications::ITileNotification>, custom_activators {};
template<> struct def<Windows::UI::Notifications::IScheduledTileNotificationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IScheduledTileNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ScheduledTileNotification> : class_type<Platform::Object, Windows::UI::Notifications::IScheduledTileNotification>, custom_activators {};
template<> struct def<Windows::UI::Notifications::ITileFlyoutUpdateManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ITileFlyoutUpdater> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::TileFlyoutUpdater> : class_type<Platform::Object, Windows::UI::Notifications::ITileFlyoutUpdater> {};
template<> struct def<Windows::UI::Notifications::ITileFlyoutNotificationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ITileFlyoutNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::TileFlyoutNotification> : class_type<Platform::Object, Windows::UI::Notifications::ITileFlyoutNotification>, custom_activators {};
template<> struct def<Windows::UI::Notifications::IBadgeUpdateManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IBadgeUpdater> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::BadgeUpdater> : class_type<Platform::Object, Windows::UI::Notifications::IBadgeUpdater> {};
template<> struct def<Windows::UI::Notifications::IBadgeUpdateManagerStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IBadgeUpdateManagerForUser> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::BadgeUpdateManagerForUser> : class_type<Platform::Object, Windows::UI::Notifications::IBadgeUpdateManagerForUser> {};
template<> struct def<Windows::UI::Notifications::IBadgeNotificationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IBadgeNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::BadgeNotification> : class_type<Platform::Object, Windows::UI::Notifications::IBadgeNotification>, custom_activators {};
template<> struct def<Windows::UI::Notifications::IToastNotificationManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotifier2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotifier> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ToastNotifier> : class_type<Platform::Object, Windows::UI::Notifications::IToastNotifier, Windows::UI::Notifications::IToastNotifier2> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotification4> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotification3> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotification2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ToastNotification> : class_type<Platform::Object, Windows::UI::Notifications::IToastNotification, Windows::UI::Notifications::IToastNotification2, Windows::UI::Notifications::IToastNotification3, Windows::UI::Notifications::IToastNotification4>, custom_activators {};
template<> struct def<Windows::UI::Notifications::IScheduledToastNotificationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IScheduledToastNotification4> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IScheduledToastNotification3> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IScheduledToastNotification2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IScheduledToastNotification> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ScheduledToastNotification> : class_type<Platform::Object, Windows::UI::Notifications::IScheduledToastNotification, Windows::UI::Notifications::IScheduledToastNotification2, Windows::UI::Notifications::IScheduledToastNotification3, Windows::UI::Notifications::IScheduledToastNotification4>, custom_activators {};
template<> struct def<Windows::UI::Notifications::INotificationDataFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::INotificationData> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::NotificationData> : class_type<Platform::Object, Windows::UI::Notifications::INotificationData>, custom_activators {};
template<> struct def<Windows::UI::Notifications::IToastCollectionManager> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastCollectionFactory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastCollection> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ToastCollection> : class_type<Platform::Object, Windows::UI::Notifications::IToastCollection>, custom_activators {};
template<> struct def<Windows::UI::Notifications::ToastDismissedEventArgs> : class_type<Platform::Object, Windows::UI::Notifications::IToastDismissedEventArgs> {};
template<> struct def<Windows::UI::Notifications::ToastFailedEventArgs> : class_type<Platform::Object, Windows::UI::Notifications::IToastFailedEventArgs> {};
template<> struct def<Windows::UI::Notifications::NotificationVisual> : class_type<Platform::Object, Windows::UI::Notifications::INotificationVisual> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationManagerStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationHistory2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationHistory> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ToastNotificationHistory> : class_type<Platform::Object, Windows::UI::Notifications::IToastNotificationHistory, Windows::UI::Notifications::IToastNotificationHistory2> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationManagerStatics4> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationManagerForUser2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationManagerForUser> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ToastNotificationManagerForUser> : class_type<Platform::Object, Windows::UI::Notifications::IToastNotificationManagerForUser, Windows::UI::Notifications::IToastNotificationManagerForUser2> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationManagerStatics5> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::ToastCollectionManager> : class_type<Platform::Object, Windows::UI::Notifications::IToastCollectionManager> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail2> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::IToastNotificationActionTriggerDetail> : interface_type<> {};
template<> struct def<Windows::UI::Notifications::UserNotificationChangedEventArgs> : class_type<Platform::Object, Windows::UI::Notifications::IUserNotificationChangedEventArgs> {};
template<> struct def<Windows::UI::Notifications::UserNotification> : class_type<Platform::Object, Windows::UI::Notifications::IUserNotification> {};
template<> struct def<Windows::UI::Notifications::KnownAdaptiveNotificationHints> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Notifications::KnownNotificationBindings> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Notifications::KnownAdaptiveNotificationTextStyles> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Notifications::TileUpdateManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Notifications::BadgeUpdateManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Notifications::TileFlyoutUpdateManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Notifications::ToastNotificationManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Notifications::ToastActivatedEventArgs> : class_type<Platform::Object, Windows::UI::Notifications::IToastActivatedEventArgs> {};
template<> struct def<Windows::UI::Notifications::ToastNotificationHistoryChangedTriggerDetail> : class_type<Platform::Object, Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail, Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail2> {};
template<> struct def<Windows::UI::Notifications::ToastNotificationActionTriggerDetail> : class_type<Platform::Object, Windows::UI::Notifications::IToastNotificationActionTriggerDetail> {};

// uuids

template<> struct uuid<Windows::UI::Notifications::IShownTileNotification> { define_guid(0x342D8988, 0x5AF2, 0x481A, 0xA6, 0xA3, 0xF2, 0xFD, 0xC7, 0x8D, 0xE8, 0x8E);};
template<> struct uuid<Windows::UI::Notifications::IUserNotificationChangedEventArgs> { define_guid(0xB6BD6839, 0x79CF, 0x4B25, 0x82, 0xC0, 0xC, 0xE1, 0xEE, 0xF8, 0x1F, 0x8C);};
template<> struct uuid<Windows::UI::Notifications::IUserNotification> { define_guid(0xADF7E52F, 0x4E53, 0x42D5, 0x9C, 0x33, 0xEB, 0x5E, 0xA5, 0x15, 0xB2, 0x3E);};
template<> struct uuid<Windows::UI::Notifications::INotification> { define_guid(0x108037FE, 0xEB76, 0x4F82, 0x97, 0xBC, 0xDA, 0x7, 0x53, 0xA, 0x2E, 0x20);};
template<> struct uuid<Windows::UI::Notifications::INotificationVisual> { define_guid(0x68835B8E, 0xAA56, 0x4E11, 0x86, 0xD3, 0x5F, 0x9A, 0x69, 0x57, 0xBC, 0x5B);};
template<> struct uuid<Windows::UI::Notifications::INotificationBinding> { define_guid(0xF29E4B85, 0x370, 0x4AD3, 0xB4, 0xEA, 0xDA, 0x9E, 0x35, 0xE7, 0xEA, 0xBF);};
template<> struct uuid<Windows::UI::Notifications::IAdaptiveNotificationContent> { define_guid(0xEB0DBE66, 0x7448, 0x448D, 0x9D, 0xB8, 0xD7, 0x8A, 0xCD, 0x2A, 0xBB, 0xA9);};
template<> struct uuid<Windows::UI::Notifications::IAdaptiveNotificationText> { define_guid(0x46D4A3BE, 0x609A, 0x4326, 0xA4, 0xB, 0xBF, 0xDE, 0x87, 0x20, 0x34, 0xA3);};
template<> struct uuid<Windows::UI::Notifications::IKnownNotificationBindingsStatics> { define_guid(0x79427BAE, 0xA8B7, 0x4D58, 0x89, 0xEA, 0x76, 0xA7, 0xB7, 0xBC, 0xCD, 0xED);};
template<> struct uuid<Windows::UI::Notifications::IKnownAdaptiveNotificationHintsStatics> { define_guid(0x6206598, 0xD496, 0x497D, 0x86, 0x92, 0x4F, 0x7D, 0x7C, 0x27, 0x70, 0xDF);};
template<> struct uuid<Windows::UI::Notifications::IKnownAdaptiveNotificationTextStylesStatics> { define_guid(0x202192D7, 0x8996, 0x45AA, 0x8B, 0xA1, 0xD4, 0x61, 0xD7, 0x2C, 0x2A, 0x1B);};
template<> struct uuid<Windows::UI::Notifications::IToastDismissedEventArgs> { define_guid(0x3F89D935, 0xD9CB, 0x4538, 0xA0, 0xF0, 0xFF, 0xE7, 0x65, 0x99, 0x38, 0xF8);};
template<> struct uuid<Windows::UI::Notifications::IToastFailedEventArgs> { define_guid(0x35176862, 0xCFD4, 0x44F8, 0xAD, 0x64, 0xF5, 0x0, 0xFD, 0x89, 0x6C, 0x3B);};
template<> struct uuid<Windows::UI::Notifications::IToastActivatedEventArgs> { define_guid(0xE3BF92F3, 0xC197, 0x436F, 0x82, 0x65, 0x6, 0x25, 0x82, 0x4F, 0x8D, 0xAC);};
template<> struct uuid<Windows::UI::Notifications::ITileUpdateManagerStatics> { define_guid(0xDA159E5D, 0x3EA9, 0x4986, 0x8D, 0x84, 0xB0, 0x9D, 0x5E, 0x12, 0x27, 0x6D);};
template<> struct uuid<Windows::UI::Notifications::ITileUpdater2> { define_guid(0xA2266E12, 0x15EE, 0x43ED, 0x83, 0xF5, 0x65, 0xB3, 0x52, 0xBB, 0x1A, 0x84);};
template<> struct uuid<Windows::UI::Notifications::ITileUpdater> { define_guid(0x942A48B, 0x1D91, 0x44EC, 0x92, 0x43, 0xC1, 0xE8, 0x21, 0xC2, 0x9A, 0x20);};
template<> struct uuid<Windows::UI::Notifications::ITileUpdateManagerStatics2> { define_guid(0x731C1DDC, 0x8E14, 0x4B7C, 0xA3, 0x4B, 0x9D, 0x22, 0xDE, 0x76, 0xC8, 0x4D);};
template<> struct uuid<Windows::UI::Notifications::ITileUpdateManagerForUser> { define_guid(0x55141348, 0x2EE2, 0x4E2D, 0x9C, 0xC1, 0x21, 0x6A, 0x20, 0xDE, 0xCC, 0x9F);};
template<> struct uuid<Windows::UI::Notifications::ITileNotificationFactory> { define_guid(0xC6ABDD6E, 0x4928, 0x46C8, 0xBD, 0xBF, 0x81, 0xA0, 0x47, 0xDE, 0xA0, 0xD4);};
template<> struct uuid<Windows::UI::Notifications::ITileNotification> { define_guid(0xEBAEC8FA, 0x50EC, 0x4C18, 0xB4, 0xD0, 0x3A, 0xF0, 0x2E, 0x55, 0x40, 0xAB);};
template<> struct uuid<Windows::UI::Notifications::IScheduledTileNotificationFactory> { define_guid(0x3383138A, 0x98C0, 0x4C3B, 0xBB, 0xD6, 0x4A, 0x63, 0x3C, 0x7C, 0xFC, 0x29);};
template<> struct uuid<Windows::UI::Notifications::IScheduledTileNotification> { define_guid(0xABCA6D5, 0x99DC, 0x4C78, 0xA1, 0x1C, 0xC9, 0xE7, 0xF8, 0x6D, 0x7E, 0xF7);};
template<> struct uuid<Windows::UI::Notifications::ITileFlyoutUpdateManagerStatics> { define_guid(0x4363B0B, 0x1AC0, 0x4B99, 0x88, 0xE7, 0xAD, 0xA8, 0x3E, 0x95, 0x3D, 0x48);};
template<> struct uuid<Windows::UI::Notifications::ITileFlyoutUpdater> { define_guid(0x8D40C76A, 0xC465, 0x4052, 0xA7, 0x40, 0x5C, 0x26, 0x54, 0xC1, 0xA0, 0x89);};
template<> struct uuid<Windows::UI::Notifications::ITileFlyoutNotificationFactory> { define_guid(0xEF556FF5, 0x5226, 0x4F2B, 0xB2, 0x78, 0x88, 0xA3, 0x5D, 0xFE, 0x56, 0x9F);};
template<> struct uuid<Windows::UI::Notifications::ITileFlyoutNotification> { define_guid(0x9A53B261, 0xC70C, 0x42BE, 0xB2, 0xF3, 0xF4, 0x2A, 0xA9, 0x7D, 0x34, 0xE5);};
template<> struct uuid<Windows::UI::Notifications::IBadgeUpdateManagerStatics> { define_guid(0x33400FAA, 0x6DD5, 0x4105, 0xAE, 0xBC, 0x9B, 0x50, 0xFC, 0xA4, 0x92, 0xDA);};
template<> struct uuid<Windows::UI::Notifications::IBadgeUpdater> { define_guid(0xB5FA1FD4, 0x7562, 0x4F6C, 0xBF, 0xA3, 0x1B, 0x6E, 0xD2, 0xE5, 0x7F, 0x2F);};
template<> struct uuid<Windows::UI::Notifications::IBadgeUpdateManagerStatics2> { define_guid(0x979A35CE, 0xF940, 0x48BF, 0x94, 0xE8, 0xCA, 0x24, 0x4D, 0x40, 0xB, 0x41);};
template<> struct uuid<Windows::UI::Notifications::IBadgeUpdateManagerForUser> { define_guid(0x996B21BC, 0x386, 0x44E5, 0xBA, 0x8D, 0xC, 0x10, 0x77, 0xA6, 0x2E, 0x92);};
template<> struct uuid<Windows::UI::Notifications::IBadgeNotificationFactory> { define_guid(0xEDF255CE, 0x618, 0x4D59, 0x94, 0x8A, 0x5A, 0x61, 0x4, 0xC, 0x52, 0xF9);};
template<> struct uuid<Windows::UI::Notifications::IBadgeNotification> { define_guid(0x75CB4CA, 0xD08A, 0x4E2F, 0x92, 0x33, 0x7E, 0x28, 0x9C, 0x1F, 0x77, 0x22);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationManagerStatics> { define_guid(0x50AC103F, 0xD235, 0x4598, 0xBB, 0xEF, 0x98, 0xFE, 0x4D, 0x1A, 0x3A, 0xD4);};
template<> struct uuid<Windows::UI::Notifications::IToastNotifier2> { define_guid(0x354389C6, 0x7C01, 0x4BD5, 0x9C, 0x20, 0x60, 0x43, 0x40, 0xCD, 0x2B, 0x74);};
template<> struct uuid<Windows::UI::Notifications::IToastNotifier> { define_guid(0x75927B93, 0x3F3, 0x41EC, 0x91, 0xD3, 0x6E, 0x5B, 0xAC, 0x1B, 0x38, 0xE7);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationFactory> { define_guid(0x4124B20, 0x82C6, 0x4229, 0xB1, 0x9, 0xFD, 0x9E, 0xD4, 0x66, 0x2B, 0x53);};
template<> struct uuid<Windows::UI::Notifications::IToastNotification4> { define_guid(0x15154935, 0x28EA, 0x4727, 0x88, 0xE9, 0xC5, 0x86, 0x80, 0xE2, 0xD1, 0x18);};
template<> struct uuid<Windows::UI::Notifications::IToastNotification3> { define_guid(0x31E8AED8, 0x8141, 0x4F99, 0xBC, 0xA, 0xC4, 0xED, 0x21, 0x29, 0x7D, 0x77);};
template<> struct uuid<Windows::UI::Notifications::IToastNotification2> { define_guid(0x9DFB9FD1, 0x143A, 0x490E, 0x90, 0xBF, 0xB9, 0xFB, 0xA7, 0x13, 0x2D, 0xE7);};
template<> struct uuid<Windows::UI::Notifications::IToastNotification> { define_guid(0x997E2675, 0x59E, 0x4E60, 0x8B, 0x6, 0x17, 0x60, 0x91, 0x7C, 0x8B, 0x80);};
template<> struct uuid<Windows::UI::Notifications::IScheduledToastNotificationFactory> { define_guid(0xE7BED191, 0xBB9, 0x4189, 0x83, 0x94, 0x31, 0x76, 0x1B, 0x47, 0x6F, 0xD7);};
template<> struct uuid<Windows::UI::Notifications::IScheduledToastNotification4> { define_guid(0x1D4761FD, 0xBDEF, 0x4E4A, 0x96, 0xBE, 0x1, 0x1, 0x36, 0x9B, 0x58, 0xD2);};
template<> struct uuid<Windows::UI::Notifications::IScheduledToastNotification3> { define_guid(0x98429E8B, 0xBD32, 0x4A3B, 0x9D, 0x15, 0x22, 0xAE, 0xA4, 0x94, 0x62, 0xA1);};
template<> struct uuid<Windows::UI::Notifications::IScheduledToastNotification2> { define_guid(0xA66EA09C, 0x31B4, 0x43B0, 0xB5, 0xDD, 0x7A, 0x40, 0xE8, 0x53, 0x63, 0xB1);};
template<> struct uuid<Windows::UI::Notifications::IScheduledToastNotification> { define_guid(0x79F577F8, 0xDE7, 0x48CD, 0x97, 0x40, 0x9B, 0x37, 0x4, 0x90, 0xC8, 0x38);};
template<> struct uuid<Windows::UI::Notifications::INotificationDataFactory> { define_guid(0x23C1E33A, 0x1C10, 0x46FB, 0x80, 0x40, 0xDE, 0xC3, 0x84, 0x62, 0x1C, 0xF8);};
template<> struct uuid<Windows::UI::Notifications::INotificationData> { define_guid(0x9FFD2312, 0x9D6A, 0x4AAF, 0xB6, 0xAC, 0xFF, 0x17, 0xF0, 0xC1, 0xF2, 0x80);};
template<> struct uuid<Windows::UI::Notifications::IToastCollectionManager> { define_guid(0x2A1821FE, 0x179D, 0x49BC, 0xB7, 0x9D, 0xA5, 0x27, 0x92, 0xD, 0x36, 0x65);};
template<> struct uuid<Windows::UI::Notifications::IToastCollectionFactory> { define_guid(0x164DD3D7, 0x73C4, 0x44F7, 0xB4, 0xFF, 0xFB, 0x6D, 0x4B, 0xF1, 0xF4, 0xC6);};
template<> struct uuid<Windows::UI::Notifications::IToastCollection> { define_guid(0xA8BC3B0, 0xE0BE, 0x4858, 0xBC, 0x2A, 0x89, 0xDF, 0xE0, 0xB3, 0x28, 0x63);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationManagerStatics2> { define_guid(0x7AB93C52, 0xE48, 0x4750, 0xBA, 0x9D, 0x1A, 0x41, 0x13, 0x98, 0x18, 0x47);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationHistory2> { define_guid(0x3BC3D253, 0x2F31, 0x4092, 0x91, 0x29, 0x8A, 0xD5, 0xAB, 0xF0, 0x67, 0xDA);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationHistory> { define_guid(0x5CADDC63, 0x1D3, 0x4C97, 0x98, 0x6F, 0x5, 0x33, 0x48, 0x3F, 0xEE, 0x14);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationManagerStatics4> { define_guid(0x8F993FD3, 0xE516, 0x45FB, 0x81, 0x30, 0x39, 0x8E, 0x93, 0xFA, 0x52, 0xC3);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationManagerForUser2> { define_guid(0x679C64B7, 0x81AB, 0x42C2, 0x88, 0x19, 0xC9, 0x58, 0x76, 0x77, 0x53, 0xF4);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationManagerForUser> { define_guid(0x79AB57F6, 0x43FE, 0x487B, 0x8A, 0x7F, 0x99, 0x56, 0x72, 0x0, 0xAE, 0x94);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationManagerStatics5> { define_guid(0xD6F5F569, 0xD40D, 0x407C, 0x89, 0x89, 0x88, 0xCA, 0xB4, 0x2C, 0xFD, 0x14);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail> { define_guid(0xDB037FFA, 0x68, 0x412C, 0x9C, 0x83, 0x26, 0x7C, 0x37, 0xF6, 0x56, 0x70);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail2> { define_guid(0xB36E982, 0xC871, 0x49FB, 0xBA, 0xBB, 0x25, 0xBD, 0xBC, 0x4C, 0xC4, 0x5B);};
template<> struct uuid<Windows::UI::Notifications::IToastNotificationActionTriggerDetail> { define_guid(0x9445135A, 0x38F3, 0x42F6, 0x96, 0xAA, 0x79, 0x55, 0xB0, 0xF0, 0x3D, 0xA2);};

// types

namespace Windows { namespace UI { namespace Notifications {

// IShownTileNotification
struct IShownTileNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Arguments(HSTRING *value);
};
template<typename X> struct IShownTileNotification_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IShownTileNotification_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Arguments;
	};
	IShownTileNotification_adaptor() {}
};
template<typename X> struct adapt<IShownTileNotification, X> : Windows::UI::Notifications::IShownTileNotification_adaptor<X> { typedef adapt IShownTileNotification; };
struct IShownTileNotification : IShownTileNotification_raw, generate<IShownTileNotification> {};

// ShownTileNotification
template<typename X> struct statics<ShownTileNotification, X> : X {
	typedef typename X::root_type ShownTileNotification;
};
struct ShownTileNotification : generate<ShownTileNotification> {};

// IUserNotificationChangedEventArgs
struct IUserNotificationChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeKind(UserNotificationChangedKind *value);
	virtual STDMETHODIMP _get_UserNotificationId(unsigned *value);
};
template<typename X> struct IUserNotificationChangedEventArgs_adaptor : X {
	union {
		struct : property {
			UserNotificationChangedKind get() { UserNotificationChangedKind value; hrcheck(enc(&IUserNotificationChangedEventArgs_adaptor::ChangeKind)->_get_ChangeKind(&value)); return value; }
			UserNotificationChangedKind operator()() { return get(); }
			operator UserNotificationChangedKind () { return get(); }
		} ChangeKind;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUserNotificationChangedEventArgs_adaptor::UserNotificationId)->_get_UserNotificationId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} UserNotificationId;
	};
	IUserNotificationChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserNotificationChangedEventArgs, X> : Windows::UI::Notifications::IUserNotificationChangedEventArgs_adaptor<X> { typedef adapt IUserNotificationChangedEventArgs; };
struct IUserNotificationChangedEventArgs : IUserNotificationChangedEventArgs_raw, generate<IUserNotificationChangedEventArgs> {};

// IUserNotification
struct IUserNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Notification(Notifications::Notification* *value);
	virtual STDMETHODIMP _get_AppInfo(ApplicationModel::AppInfo* *value);
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_CreationTime(Foundation::DateTime *value);
};
template<typename X> struct IUserNotification_adaptor : X {
	union {
		struct : property {
			ptr<ApplicationModel::AppInfo> get() { ApplicationModel::AppInfo* value; hrcheck(enc(&IUserNotification_adaptor::AppInfo)->_get_AppInfo(&value)); return from_abi(value); }
			ptr<ApplicationModel::AppInfo> operator()() { return get(); }
			operator ptr<ApplicationModel::AppInfo> () { return get(); }
			ptr<ApplicationModel::AppInfo> operator->() { return get(); }
		} AppInfo;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IUserNotification_adaptor::CreationTime)->_get_CreationTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} CreationTime;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUserNotification_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			ptr<Notifications::Notification> get() { Notifications::Notification* value; hrcheck(enc(&IUserNotification_adaptor::Notification)->_get_Notification(&value)); return from_abi(value); }
			ptr<Notifications::Notification> operator()() { return get(); }
			operator ptr<Notifications::Notification> () { return get(); }
			ptr<Notifications::Notification> operator->() { return get(); }
		} Notification;
	};
	IUserNotification_adaptor() {}
};
template<typename X> struct adapt<IUserNotification, X> : Windows::UI::Notifications::IUserNotification_adaptor<X> { typedef adapt IUserNotification; };
struct IUserNotification : IUserNotification_raw, generate<IUserNotification> {};

// INotification
struct INotification_raw : IInspectable {
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_ExpirationTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Visual(NotificationVisual* *value);
	virtual STDMETHODIMP _put_Visual(NotificationVisual* value);
};
template<typename X> struct INotification_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&INotification_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&INotification_adaptor::ExpirationTime)->_put_ExpirationTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationTime;
		struct : property {
			ptr<NotificationVisual> get() { NotificationVisual* value; hrcheck(enc(&INotification_adaptor::Visual)->_get_Visual(&value)); return from_abi(value); }
			ptr<NotificationVisual> operator()() { return get(); }
			operator ptr<NotificationVisual> () { return get(); }
			ptr<NotificationVisual> operator->() { return get(); }
			void put(pptr<NotificationVisual> value) { hrcheck(enc(&INotification_adaptor::Visual)->_put_Visual(value)); }
			void operator=(pptr<NotificationVisual> value) { put(value); }
			void operator()(pptr<NotificationVisual> value) { put(value); }
		} Visual;
	};
	INotification_adaptor() {}
};
template<typename X> struct adapt<INotification, X> : Windows::UI::Notifications::INotification_adaptor<X> { typedef adapt INotification; };
struct INotification : INotification_raw, generate<INotification> {};

// Notification
template<typename X> struct statics<Notification, X> : X {
	typedef typename X::root_type Notification;
};
struct Notification : generate<Notification> {};

// INotificationVisual
struct INotificationVisual_raw : IInspectable {
	virtual STDMETHODIMP _get_Language(HSTRING *value);
	virtual STDMETHODIMP _put_Language(HSTRING value);
	virtual STDMETHODIMP _get_Bindings(Foundation::Collections::IVector<NotificationBinding*>* *result);
	virtual STDMETHODIMP _GetBinding(HSTRING templateName, NotificationBinding* *result);
};
template<typename X> struct INotificationVisual_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<NotificationBinding>>> get() { Foundation::Collections::IVector<NotificationBinding*>* result; hrcheck(enc(&INotificationVisual_adaptor::Bindings)->_get_Bindings(&result)); return from_abi(result); }
			ptr<Foundation::Collections::IVector<ptr<NotificationBinding>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<NotificationBinding>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<NotificationBinding>>> operator->() { return get(); }
		} Bindings;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INotificationVisual_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&INotificationVisual_adaptor::Language)->_put_Language(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Language;
	};
	ptr<NotificationBinding> GetBinding(hstring_ref templateName) { NotificationBinding* result; hrcheck(X::get()->_GetBinding(templateName, &result)); return from_abi(result); }
	INotificationVisual_adaptor() {}
};
template<typename X> struct adapt<INotificationVisual, X> : Windows::UI::Notifications::INotificationVisual_adaptor<X> { typedef adapt INotificationVisual; };
struct INotificationVisual : INotificationVisual_raw, generate<INotificationVisual> {};

// INotificationBinding
struct INotificationBinding_raw : IInspectable {
	virtual STDMETHODIMP _get_Template(HSTRING *value);
	virtual STDMETHODIMP _put_Template(HSTRING value);
	virtual STDMETHODIMP _get_Language(HSTRING *value);
	virtual STDMETHODIMP _put_Language(HSTRING value);
	virtual STDMETHODIMP _get_Hints(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _GetTextElements(Foundation::Collections::IVectorView<AdaptiveNotificationText*>* *result);
};
template<typename X> struct INotificationBinding_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&INotificationBinding_adaptor::Hints)->_get_Hints(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} Hints;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INotificationBinding_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&INotificationBinding_adaptor::Language)->_put_Language(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INotificationBinding_adaptor::Template)->_get_Template(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&INotificationBinding_adaptor::Template)->_put_Template(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Template;
	};
	ptr<Foundation::Collections::IVectorView<ptr<AdaptiveNotificationText>>> GetTextElements() { Foundation::Collections::IVectorView<AdaptiveNotificationText*>* result; hrcheck(X::get()->_GetTextElements(&result)); return from_abi(result); }
	INotificationBinding_adaptor() {}
};
template<typename X> struct adapt<INotificationBinding, X> : Windows::UI::Notifications::INotificationBinding_adaptor<X> { typedef adapt INotificationBinding; };
struct INotificationBinding : INotificationBinding_raw, generate<INotificationBinding> {};

// NotificationBinding
template<typename X> struct statics<NotificationBinding, X> : X {
	typedef typename X::root_type NotificationBinding;
};
struct NotificationBinding : generate<NotificationBinding> {};

// IAdaptiveNotificationContent
struct IAdaptiveNotificationContent_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(AdaptiveNotificationContentKind *value) = 0;
	virtual STDMETHODIMP _get_Hints(Foundation::Collections::IMap<HSTRING, HSTRING>* *value) = 0;
};
template<typename X> struct IAdaptiveNotificationContent_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&IAdaptiveNotificationContent_adaptor::Hints)->_get_Hints(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} Hints;
		struct : property {
			AdaptiveNotificationContentKind get() { AdaptiveNotificationContentKind value; hrcheck(enc(&IAdaptiveNotificationContent_adaptor::Kind)->_get_Kind(&value)); return value; }
			AdaptiveNotificationContentKind operator()() { return get(); }
			operator AdaptiveNotificationContentKind () { return get(); }
		} Kind;
	};
	IAdaptiveNotificationContent_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveNotificationContent, X> : Windows::UI::Notifications::IAdaptiveNotificationContent_adaptor<X> { typedef adapt IAdaptiveNotificationContent; };
template<typename X> struct IAdaptiveNotificationContent_unadaptor : X {
	STDMETHODIMP _get_Kind(AdaptiveNotificationContentKind *value) { return hrtry([&, this] { get_prop(value, Kind); }); }
	STDMETHODIMP _get_Hints(Foundation::Collections::IMap<HSTRING, HSTRING>* *value) { return hrtry([&, this] { get_prop(value, Hints); }); }
};
template<typename X> struct unadapt<IAdaptiveNotificationContent, X> : Windows::UI::Notifications::IAdaptiveNotificationContent_unadaptor<X> {};
struct IAdaptiveNotificationContent : IAdaptiveNotificationContent_raw, generate<IAdaptiveNotificationContent> {};

// IAdaptiveNotificationText
struct IAdaptiveNotificationText_raw : IInspectable {
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
	virtual STDMETHODIMP _get_Language(HSTRING *value);
	virtual STDMETHODIMP _put_Language(HSTRING value);
};
template<typename X> struct IAdaptiveNotificationText_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdaptiveNotificationText_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAdaptiveNotificationText_adaptor::Language)->_put_Language(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdaptiveNotificationText_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAdaptiveNotificationText_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
	};
	IAdaptiveNotificationText_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveNotificationText, X> : Windows::UI::Notifications::IAdaptiveNotificationText_adaptor<X> { typedef adapt IAdaptiveNotificationText; };
struct IAdaptiveNotificationText : IAdaptiveNotificationText_raw, generate<IAdaptiveNotificationText> {};

// AdaptiveNotificationText
template<typename X> struct statics<AdaptiveNotificationText, X> : X {
	typedef typename X::root_type AdaptiveNotificationText;
};
struct AdaptiveNotificationText : generate<AdaptiveNotificationText> {};

// IKnownNotificationBindingsStatics
struct IKnownNotificationBindingsStatics : IInspectable {
	virtual STDMETHODIMP _get_ToastGeneric(HSTRING *value);
};

// IKnownAdaptiveNotificationHintsStatics
struct IKnownAdaptiveNotificationHintsStatics : IInspectable {
	virtual STDMETHODIMP _get_Style(HSTRING *value);
	virtual STDMETHODIMP _get_Wrap(HSTRING *value);
	virtual STDMETHODIMP _get_MaxLines(HSTRING *value);
	virtual STDMETHODIMP _get_MinLines(HSTRING *value);
	virtual STDMETHODIMP _get_TextStacking(HSTRING *value);
	virtual STDMETHODIMP _get_Align(HSTRING *value);
};

// IKnownAdaptiveNotificationTextStylesStatics
struct IKnownAdaptiveNotificationTextStylesStatics : IInspectable {
	virtual STDMETHODIMP _get_Caption(HSTRING *value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _get_Base(HSTRING *value);
	virtual STDMETHODIMP _get_Subtitle(HSTRING *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Subheader(HSTRING *value);
	virtual STDMETHODIMP _get_Header(HSTRING *value);
	virtual STDMETHODIMP _get_TitleNumeral(HSTRING *value);
	virtual STDMETHODIMP _get_SubheaderNumeral(HSTRING *value);
	virtual STDMETHODIMP _get_HeaderNumeral(HSTRING *value);
	virtual STDMETHODIMP _get_CaptionSubtle(HSTRING *value);
	virtual STDMETHODIMP _get_BodySubtle(HSTRING *value);
	virtual STDMETHODIMP _get_BaseSubtle(HSTRING *value);
	virtual STDMETHODIMP _get_SubtitleSubtle(HSTRING *value);
	virtual STDMETHODIMP _get_TitleSubtle(HSTRING *value);
	virtual STDMETHODIMP _get_SubheaderSubtle(HSTRING *value);
	virtual STDMETHODIMP _get_SubheaderNumeralSubtle(HSTRING *value);
	virtual STDMETHODIMP _get_HeaderSubtle(HSTRING *value);
	virtual STDMETHODIMP _get_HeaderNumeralSubtle(HSTRING *value);
};

// IToastDismissedEventArgs
struct IToastDismissedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(ToastDismissalReason *value);
};
template<typename X> struct IToastDismissedEventArgs_adaptor : X {
	union {
		struct : property {
			ToastDismissalReason get() { ToastDismissalReason value; hrcheck(enc(&IToastDismissedEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			ToastDismissalReason operator()() { return get(); }
			operator ToastDismissalReason () { return get(); }
		} Reason;
	};
	IToastDismissedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IToastDismissedEventArgs, X> : Windows::UI::Notifications::IToastDismissedEventArgs_adaptor<X> { typedef adapt IToastDismissedEventArgs; };
struct IToastDismissedEventArgs : IToastDismissedEventArgs_raw, generate<IToastDismissedEventArgs> {};

// IToastFailedEventArgs
struct IToastFailedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ErrorCode(Foundation::HResult *value);
};
template<typename X> struct IToastFailedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IToastFailedEventArgs_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ErrorCode;
	};
	IToastFailedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IToastFailedEventArgs, X> : Windows::UI::Notifications::IToastFailedEventArgs_adaptor<X> { typedef adapt IToastFailedEventArgs; };
struct IToastFailedEventArgs : IToastFailedEventArgs_raw, generate<IToastFailedEventArgs> {};

// IToastActivatedEventArgs
struct IToastActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Arguments(HSTRING *value);
};
template<typename X> struct IToastActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastActivatedEventArgs_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Arguments;
	};
	IToastActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IToastActivatedEventArgs, X> : Windows::UI::Notifications::IToastActivatedEventArgs_adaptor<X> { typedef adapt IToastActivatedEventArgs; };
struct IToastActivatedEventArgs : IToastActivatedEventArgs_raw, generate<IToastActivatedEventArgs> {};

// ITileUpdateManagerStatics
struct ITileUpdateManagerStatics : IInspectable {
	virtual STDMETHODIMP _CreateTileUpdaterForApplication(TileUpdater* *updater);
	virtual STDMETHODIMP _CreateTileUpdaterForApplicationWithId(HSTRING applicationId, TileUpdater* *updater);
	virtual STDMETHODIMP _CreateTileUpdaterForSecondaryTile(HSTRING tileId, TileUpdater* *updater);
	virtual STDMETHODIMP _GetTemplateContent(TileTemplateType type, Data::Xml::Dom::XmlDocument* *content);
};

// ITileUpdater2
struct ITileUpdater2_raw : IInspectable {
	virtual STDMETHODIMP _EnableNotificationQueueForSquare150x150(bool enable);
	virtual STDMETHODIMP _EnableNotificationQueueForWide310x150(bool enable);
	virtual STDMETHODIMP _EnableNotificationQueueForSquare310x310(bool enable);
};
template<typename X> struct ITileUpdater2_adaptor : X {
	void EnableNotificationQueueForSquare150x150(bool enable) { hrcheck(X::get()->_EnableNotificationQueueForSquare150x150(enable)); }
	void EnableNotificationQueueForWide310x150(bool enable) { hrcheck(X::get()->_EnableNotificationQueueForWide310x150(enable)); }
	void EnableNotificationQueueForSquare310x310(bool enable) { hrcheck(X::get()->_EnableNotificationQueueForSquare310x310(enable)); }
};
template<typename X> struct adapt<ITileUpdater2, X> : Windows::UI::Notifications::ITileUpdater2_adaptor<X> { typedef adapt ITileUpdater2; };
struct ITileUpdater2 : ITileUpdater2_raw, generate<ITileUpdater2> {};

// ITileUpdater
struct ITileUpdater_raw : IInspectable {
	virtual STDMETHODIMP _Update(TileNotification* notification);
	virtual STDMETHODIMP _Clear();
	virtual STDMETHODIMP _EnableNotificationQueue(bool enable);
	virtual STDMETHODIMP _get_Setting(NotificationSetting *value);
	virtual STDMETHODIMP _AddToSchedule(ScheduledTileNotification* scheduledTile);
	virtual STDMETHODIMP _RemoveFromSchedule(ScheduledTileNotification* scheduledTile);
	virtual STDMETHODIMP _GetScheduledTileNotifications(Foundation::Collections::IVectorView<ScheduledTileNotification*>* *scheduledTiles);
	virtual STDMETHODIMP _StartPeriodicUpdate(Foundation::Uri* tileContent, PeriodicUpdateRecurrence requestedInterval);
	virtual STDMETHODIMP _StartPeriodicUpdateAtTime(Foundation::Uri* tileContent, Foundation::DateTime startTime, PeriodicUpdateRecurrence requestedInterval);
	virtual STDMETHODIMP _StopPeriodicUpdate();
	virtual STDMETHODIMP _StartPeriodicUpdateBatch(Foundation::Collections::IIterable<Foundation::Uri*>* tileContents, PeriodicUpdateRecurrence requestedInterval);
	virtual STDMETHODIMP _StartPeriodicUpdateBatchAtTime(Foundation::Collections::IIterable<Foundation::Uri*>* tileContents, Foundation::DateTime startTime, PeriodicUpdateRecurrence requestedInterval);
};
template<typename X> struct ITileUpdater_adaptor : X {
	union {
		struct : property {
			NotificationSetting get() { NotificationSetting value; hrcheck(enc(&ITileUpdater_adaptor::Setting)->_get_Setting(&value)); return value; }
			NotificationSetting operator()() { return get(); }
			operator NotificationSetting () { return get(); }
		} Setting;
	};
	void Update(pptr<TileNotification> notification) { hrcheck(X::get()->_Update(notification)); }
	void Clear() { hrcheck(X::get()->_Clear()); }
	void EnableNotificationQueue(bool enable) { hrcheck(X::get()->_EnableNotificationQueue(enable)); }
	void AddToSchedule(pptr<ScheduledTileNotification> scheduledTile) { hrcheck(X::get()->_AddToSchedule(scheduledTile)); }
	void RemoveFromSchedule(pptr<ScheduledTileNotification> scheduledTile) { hrcheck(X::get()->_RemoveFromSchedule(scheduledTile)); }
	ptr<Foundation::Collections::IVectorView<ptr<ScheduledTileNotification>>> GetScheduledTileNotifications() { Foundation::Collections::IVectorView<ScheduledTileNotification*>* scheduledTiles; hrcheck(X::get()->_GetScheduledTileNotifications(&scheduledTiles)); return from_abi(scheduledTiles); }
	void StartPeriodicUpdate(pptr<Foundation::Uri> tileContent, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdate(tileContent, requestedInterval)); }
	void StartPeriodicUpdate(pptr<Foundation::Uri> tileContent, const Foundation::DateTime& startTime, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdateAtTime(tileContent, startTime, requestedInterval)); }
	void StopPeriodicUpdate() { hrcheck(X::get()->_StopPeriodicUpdate()); }
	void StartPeriodicUpdateBatch(pptr<Foundation::Collections::IIterable<ptr<Foundation::Uri>>> tileContents, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdateBatch(to_abi(tileContents), requestedInterval)); }
	void StartPeriodicUpdateBatch(pptr<Foundation::Collections::IIterable<ptr<Foundation::Uri>>> tileContents, const Foundation::DateTime& startTime, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdateBatchAtTime(to_abi(tileContents), startTime, requestedInterval)); }
	ITileUpdater_adaptor() {}
};
template<typename X> struct adapt<ITileUpdater, X> : Windows::UI::Notifications::ITileUpdater_adaptor<X> { typedef adapt ITileUpdater; };
struct ITileUpdater : ITileUpdater_raw, generate<ITileUpdater> {};

// TileUpdater
template<typename X> struct statics<TileUpdater, X> : X {
	typedef typename X::root_type TileUpdater;
};
struct TileUpdater : generate<TileUpdater> {
	using ITileUpdater::StartPeriodicUpdateBatch;
	using ITileUpdater::StartPeriodicUpdate;
};

// ITileUpdateManagerStatics2
struct ITileUpdateManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, TileUpdateManagerForUser* *result);
};

// ITileUpdateManagerForUser
struct ITileUpdateManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _CreateTileUpdaterForApplication(TileUpdater* *updater);
	virtual STDMETHODIMP _CreateTileUpdaterForApplicationWithId(HSTRING applicationId, TileUpdater* *updater);
	virtual STDMETHODIMP _CreateTileUpdaterForSecondaryTile(HSTRING tileId, TileUpdater* *updater);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct ITileUpdateManagerForUser_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&ITileUpdateManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<TileUpdater> CreateTileUpdaterForApplicationForUser() { TileUpdater* updater; hrcheck(X::get()->_CreateTileUpdaterForApplication(&updater)); return from_abi(updater); }
	ptr<TileUpdater> CreateTileUpdaterForApplication(hstring_ref applicationId) { TileUpdater* updater; hrcheck(X::get()->_CreateTileUpdaterForApplicationWithId(applicationId, &updater)); return from_abi(updater); }
	ptr<TileUpdater> CreateTileUpdaterForSecondaryTile(hstring_ref tileId) { TileUpdater* updater; hrcheck(X::get()->_CreateTileUpdaterForSecondaryTile(tileId, &updater)); return from_abi(updater); }
	ITileUpdateManagerForUser_adaptor() {}
};
template<typename X> struct adapt<ITileUpdateManagerForUser, X> : Windows::UI::Notifications::ITileUpdateManagerForUser_adaptor<X> { typedef adapt ITileUpdateManagerForUser; };
struct ITileUpdateManagerForUser : ITileUpdateManagerForUser_raw, generate<ITileUpdateManagerForUser> {};

// TileUpdateManagerForUser
template<typename X> struct statics<TileUpdateManagerForUser, X> : X {
	typedef typename X::root_type TileUpdateManagerForUser;
};
struct TileUpdateManagerForUser : generate<TileUpdateManagerForUser> {};

// ITileNotificationFactory
struct ITileNotificationFactory : IInspectable {
	virtual STDMETHODIMP _CreateTileNotification(Data::Xml::Dom::XmlDocument* content, TileNotification* *notification);
};

// ITileNotification
struct ITileNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Content(Data::Xml::Dom::XmlDocument* *value);
	virtual STDMETHODIMP _put_ExpirationTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_Tag(HSTRING value);
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
};
template<typename X> struct ITileNotification_adaptor : X {
	union {
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&ITileNotification_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} Content;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&ITileNotification_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&ITileNotification_adaptor::ExpirationTime)->_put_ExpirationTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITileNotification_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ITileNotification_adaptor::Tag)->_put_Tag(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Tag;
	};
	ITileNotification_adaptor() {}
};
template<typename X> struct adapt<ITileNotification, X> : Windows::UI::Notifications::ITileNotification_adaptor<X> { typedef adapt ITileNotification; };
struct ITileNotification : ITileNotification_raw, generate<ITileNotification> {};

// TileNotification
template<typename> struct TileNotification_statics {
	static TileNotification *activate(pptr<Data::Xml::Dom::XmlDocument> content) { TileNotification *notification; hrcheck(get_activation_factory<TileNotification, ITileNotificationFactory>()->_CreateTileNotification(content, &notification)); return notification; }
};

template<typename X> struct statics<TileNotification, X> : X, Windows::UI::Notifications::TileNotification_statics<void> {
	using Windows::UI::Notifications::TileNotification_statics<void>::activate;
	typedef typename X::root_type TileNotification;
};
struct TileNotification : generate<TileNotification> {};

// IScheduledTileNotificationFactory
struct IScheduledTileNotificationFactory : IInspectable {
	virtual STDMETHODIMP _CreateScheduledTileNotification(Data::Xml::Dom::XmlDocument* content, Foundation::DateTime deliveryTime, ScheduledTileNotification* *notification);
};

// IScheduledTileNotification
struct IScheduledTileNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Content(Data::Xml::Dom::XmlDocument* *value);
	virtual STDMETHODIMP _get_DeliveryTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_ExpirationTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_Tag(HSTRING value);
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
};
template<typename X> struct IScheduledTileNotification_adaptor : X {
	union {
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&IScheduledTileNotification_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} Content;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IScheduledTileNotification_adaptor::DeliveryTime)->_get_DeliveryTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} DeliveryTime;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IScheduledTileNotification_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IScheduledTileNotification_adaptor::ExpirationTime)->_put_ExpirationTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IScheduledTileNotification_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IScheduledTileNotification_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IScheduledTileNotification_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IScheduledTileNotification_adaptor::Tag)->_put_Tag(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Tag;
	};
	IScheduledTileNotification_adaptor() {}
};
template<typename X> struct adapt<IScheduledTileNotification, X> : Windows::UI::Notifications::IScheduledTileNotification_adaptor<X> { typedef adapt IScheduledTileNotification; };
struct IScheduledTileNotification : IScheduledTileNotification_raw, generate<IScheduledTileNotification> {};

// ScheduledTileNotification
template<typename> struct ScheduledTileNotification_statics {
	static ScheduledTileNotification *activate(pptr<Data::Xml::Dom::XmlDocument> content, const Foundation::DateTime& deliveryTime) { ScheduledTileNotification *notification; hrcheck(get_activation_factory<ScheduledTileNotification, IScheduledTileNotificationFactory>()->_CreateScheduledTileNotification(content, deliveryTime, &notification)); return notification; }
};

template<typename X> struct statics<ScheduledTileNotification, X> : X, Windows::UI::Notifications::ScheduledTileNotification_statics<void> {
	using Windows::UI::Notifications::ScheduledTileNotification_statics<void>::activate;
	typedef typename X::root_type ScheduledTileNotification;
};
struct ScheduledTileNotification : generate<ScheduledTileNotification> {};

// ITileFlyoutUpdateManagerStatics
struct ITileFlyoutUpdateManagerStatics : IInspectable {
	virtual STDMETHODIMP _CreateTileFlyoutUpdaterForApplication(TileFlyoutUpdater* *updater);
	virtual STDMETHODIMP _CreateTileFlyoutUpdaterForApplicationWithId(HSTRING applicationId, TileFlyoutUpdater* *updater);
	virtual STDMETHODIMP _CreateTileFlyoutUpdaterForSecondaryTile(HSTRING tileId, TileFlyoutUpdater* *updater);
	virtual STDMETHODIMP _GetTemplateContent(TileFlyoutTemplateType type, Data::Xml::Dom::XmlDocument* *content);
};

// ITileFlyoutUpdater
struct ITileFlyoutUpdater_raw : IInspectable {
	virtual STDMETHODIMP _Update(TileFlyoutNotification* notification);
	virtual STDMETHODIMP _Clear();
	virtual STDMETHODIMP _StartPeriodicUpdate(Foundation::Uri* tileFlyoutContent, PeriodicUpdateRecurrence requestedInterval);
	virtual STDMETHODIMP _StartPeriodicUpdateAtTime(Foundation::Uri* tileFlyoutContent, Foundation::DateTime startTime, PeriodicUpdateRecurrence requestedInterval);
	virtual STDMETHODIMP _StopPeriodicUpdate();
	virtual STDMETHODIMP _get_Setting(NotificationSetting *value);
};
template<typename X> struct ITileFlyoutUpdater_adaptor : X {
	union {
		struct : property {
			NotificationSetting get() { NotificationSetting value; hrcheck(enc(&ITileFlyoutUpdater_adaptor::Setting)->_get_Setting(&value)); return value; }
			NotificationSetting operator()() { return get(); }
			operator NotificationSetting () { return get(); }
		} Setting;
	};
	void Update(pptr<TileFlyoutNotification> notification) { hrcheck(X::get()->_Update(notification)); }
	void Clear() { hrcheck(X::get()->_Clear()); }
	void StartPeriodicUpdate(pptr<Foundation::Uri> tileFlyoutContent, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdate(tileFlyoutContent, requestedInterval)); }
	void StartPeriodicUpdate(pptr<Foundation::Uri> tileFlyoutContent, const Foundation::DateTime& startTime, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdateAtTime(tileFlyoutContent, startTime, requestedInterval)); }
	void StopPeriodicUpdate() { hrcheck(X::get()->_StopPeriodicUpdate()); }
	ITileFlyoutUpdater_adaptor() {}
};
template<typename X> struct adapt<ITileFlyoutUpdater, X> : Windows::UI::Notifications::ITileFlyoutUpdater_adaptor<X> { typedef adapt ITileFlyoutUpdater; };
struct ITileFlyoutUpdater : ITileFlyoutUpdater_raw, generate<ITileFlyoutUpdater> {};

// TileFlyoutUpdater
template<typename X> struct statics<TileFlyoutUpdater, X> : X {
	typedef typename X::root_type TileFlyoutUpdater;
};
struct TileFlyoutUpdater : generate<TileFlyoutUpdater> {
	using ITileFlyoutUpdater::StartPeriodicUpdate;
};

// ITileFlyoutNotificationFactory
struct ITileFlyoutNotificationFactory : IInspectable {
	virtual STDMETHODIMP _CreateTileFlyoutNotification(Data::Xml::Dom::XmlDocument* content, TileFlyoutNotification* *notification);
};

// ITileFlyoutNotification
struct ITileFlyoutNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Content(Data::Xml::Dom::XmlDocument* *value);
	virtual STDMETHODIMP _put_ExpirationTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::IReference<Foundation::DateTime>* *value);
};
template<typename X> struct ITileFlyoutNotification_adaptor : X {
	union {
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&ITileFlyoutNotification_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} Content;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&ITileFlyoutNotification_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&ITileFlyoutNotification_adaptor::ExpirationTime)->_put_ExpirationTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationTime;
	};
	ITileFlyoutNotification_adaptor() {}
};
template<typename X> struct adapt<ITileFlyoutNotification, X> : Windows::UI::Notifications::ITileFlyoutNotification_adaptor<X> { typedef adapt ITileFlyoutNotification; };
struct ITileFlyoutNotification : ITileFlyoutNotification_raw, generate<ITileFlyoutNotification> {};

// TileFlyoutNotification
template<typename> struct TileFlyoutNotification_statics {
	static TileFlyoutNotification *activate(pptr<Data::Xml::Dom::XmlDocument> content) { TileFlyoutNotification *notification; hrcheck(get_activation_factory<TileFlyoutNotification, ITileFlyoutNotificationFactory>()->_CreateTileFlyoutNotification(content, &notification)); return notification; }
};

template<typename X> struct statics<TileFlyoutNotification, X> : X, Windows::UI::Notifications::TileFlyoutNotification_statics<void> {
	using Windows::UI::Notifications::TileFlyoutNotification_statics<void>::activate;
	typedef typename X::root_type TileFlyoutNotification;
};
struct TileFlyoutNotification : generate<TileFlyoutNotification> {};

// IBadgeUpdateManagerStatics
struct IBadgeUpdateManagerStatics : IInspectable {
	virtual STDMETHODIMP _CreateBadgeUpdaterForApplication(BadgeUpdater* *updater);
	virtual STDMETHODIMP _CreateBadgeUpdaterForApplicationWithId(HSTRING applicationId, BadgeUpdater* *updater);
	virtual STDMETHODIMP _CreateBadgeUpdaterForSecondaryTile(HSTRING tileId, BadgeUpdater* *updater);
	virtual STDMETHODIMP _GetTemplateContent(BadgeTemplateType type, Data::Xml::Dom::XmlDocument* *content);
};

// IBadgeUpdater
struct IBadgeUpdater_raw : IInspectable {
	virtual STDMETHODIMP _Update(BadgeNotification* notification);
	virtual STDMETHODIMP _Clear();
	virtual STDMETHODIMP _StartPeriodicUpdate(Foundation::Uri* badgeContent, PeriodicUpdateRecurrence requestedInterval);
	virtual STDMETHODIMP _StartPeriodicUpdateAtTime(Foundation::Uri* badgeContent, Foundation::DateTime startTime, PeriodicUpdateRecurrence requestedInterval);
	virtual STDMETHODIMP _StopPeriodicUpdate();
};
template<typename X> struct IBadgeUpdater_adaptor : X {
	void Update(pptr<BadgeNotification> notification) { hrcheck(X::get()->_Update(notification)); }
	void Clear() { hrcheck(X::get()->_Clear()); }
	void StartPeriodicUpdate(pptr<Foundation::Uri> badgeContent, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdate(badgeContent, requestedInterval)); }
	void StartPeriodicUpdate(pptr<Foundation::Uri> badgeContent, const Foundation::DateTime& startTime, PeriodicUpdateRecurrence requestedInterval) { hrcheck(X::get()->_StartPeriodicUpdateAtTime(badgeContent, startTime, requestedInterval)); }
	void StopPeriodicUpdate() { hrcheck(X::get()->_StopPeriodicUpdate()); }
};
template<typename X> struct adapt<IBadgeUpdater, X> : Windows::UI::Notifications::IBadgeUpdater_adaptor<X> { typedef adapt IBadgeUpdater; };
struct IBadgeUpdater : IBadgeUpdater_raw, generate<IBadgeUpdater> {};

// BadgeUpdater
template<typename X> struct statics<BadgeUpdater, X> : X {
	typedef typename X::root_type BadgeUpdater;
};
struct BadgeUpdater : generate<BadgeUpdater> {
	using IBadgeUpdater::StartPeriodicUpdate;
};

// IBadgeUpdateManagerStatics2
struct IBadgeUpdateManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, BadgeUpdateManagerForUser* *result);
};

// IBadgeUpdateManagerForUser
struct IBadgeUpdateManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _CreateBadgeUpdaterForApplication(BadgeUpdater* *result);
	virtual STDMETHODIMP _CreateBadgeUpdaterForApplicationWithId(HSTRING applicationId, BadgeUpdater* *result);
	virtual STDMETHODIMP _CreateBadgeUpdaterForSecondaryTile(HSTRING tileId, BadgeUpdater* *result);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IBadgeUpdateManagerForUser_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IBadgeUpdateManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<BadgeUpdater> CreateBadgeUpdaterForApplication() { BadgeUpdater* result; hrcheck(X::get()->_CreateBadgeUpdaterForApplication(&result)); return from_abi(result); }
	ptr<BadgeUpdater> CreateBadgeUpdaterForApplication(hstring_ref applicationId) { BadgeUpdater* result; hrcheck(X::get()->_CreateBadgeUpdaterForApplicationWithId(applicationId, &result)); return from_abi(result); }
	ptr<BadgeUpdater> CreateBadgeUpdaterForSecondaryTile(hstring_ref tileId) { BadgeUpdater* result; hrcheck(X::get()->_CreateBadgeUpdaterForSecondaryTile(tileId, &result)); return from_abi(result); }
	IBadgeUpdateManagerForUser_adaptor() {}
};
template<typename X> struct adapt<IBadgeUpdateManagerForUser, X> : Windows::UI::Notifications::IBadgeUpdateManagerForUser_adaptor<X> { typedef adapt IBadgeUpdateManagerForUser; };
struct IBadgeUpdateManagerForUser : IBadgeUpdateManagerForUser_raw, generate<IBadgeUpdateManagerForUser> {};

// BadgeUpdateManagerForUser
template<typename X> struct statics<BadgeUpdateManagerForUser, X> : X {
	typedef typename X::root_type BadgeUpdateManagerForUser;
};
struct BadgeUpdateManagerForUser : generate<BadgeUpdateManagerForUser> {
	using IBadgeUpdateManagerForUser::CreateBadgeUpdaterForApplication;
};

// IBadgeNotificationFactory
struct IBadgeNotificationFactory : IInspectable {
	virtual STDMETHODIMP _CreateBadgeNotification(Data::Xml::Dom::XmlDocument* content, BadgeNotification* *notification);
};

// IBadgeNotification
struct IBadgeNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Content(Data::Xml::Dom::XmlDocument* *value);
	virtual STDMETHODIMP _put_ExpirationTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::IReference<Foundation::DateTime>* *value);
};
template<typename X> struct IBadgeNotification_adaptor : X {
	union {
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&IBadgeNotification_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} Content;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IBadgeNotification_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IBadgeNotification_adaptor::ExpirationTime)->_put_ExpirationTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationTime;
	};
	IBadgeNotification_adaptor() {}
};
template<typename X> struct adapt<IBadgeNotification, X> : Windows::UI::Notifications::IBadgeNotification_adaptor<X> { typedef adapt IBadgeNotification; };
struct IBadgeNotification : IBadgeNotification_raw, generate<IBadgeNotification> {};

// BadgeNotification
template<typename> struct BadgeNotification_statics {
	static BadgeNotification *activate(pptr<Data::Xml::Dom::XmlDocument> content) { BadgeNotification *notification; hrcheck(get_activation_factory<BadgeNotification, IBadgeNotificationFactory>()->_CreateBadgeNotification(content, &notification)); return notification; }
};

template<typename X> struct statics<BadgeNotification, X> : X, Windows::UI::Notifications::BadgeNotification_statics<void> {
	using Windows::UI::Notifications::BadgeNotification_statics<void>::activate;
	typedef typename X::root_type BadgeNotification;
};
struct BadgeNotification : generate<BadgeNotification> {};

// IToastNotificationManagerStatics
struct IToastNotificationManagerStatics : IInspectable {
	virtual STDMETHODIMP _CreateToastNotifier(ToastNotifier* *notifier);
	virtual STDMETHODIMP _CreateToastNotifierWithId(HSTRING applicationId, ToastNotifier* *notifier);
	virtual STDMETHODIMP _GetTemplateContent(ToastTemplateType type, Data::Xml::Dom::XmlDocument* *content);
};

// IToastNotifier2
struct IToastNotifier2_raw : IInspectable {
	virtual STDMETHODIMP _UpdateWithTagAndGroup(NotificationData* data, HSTRING tag, HSTRING group, NotificationUpdateResult *result);
	virtual STDMETHODIMP _UpdateWithTag(NotificationData* data, HSTRING tag, NotificationUpdateResult *result);
};
template<typename X> struct IToastNotifier2_adaptor : X {
	NotificationUpdateResult Update(pptr<NotificationData> data, hstring_ref tag, hstring_ref group) { NotificationUpdateResult result; hrcheck(X::get()->_UpdateWithTagAndGroup(data, tag, group, &result)); return result; }
	NotificationUpdateResult Update(pptr<NotificationData> data, hstring_ref tag) { NotificationUpdateResult result; hrcheck(X::get()->_UpdateWithTag(data, tag, &result)); return result; }
};
template<typename X> struct adapt<IToastNotifier2, X> : Windows::UI::Notifications::IToastNotifier2_adaptor<X> { typedef adapt IToastNotifier2; };
struct IToastNotifier2 : IToastNotifier2_raw, generate<IToastNotifier2> {};

// IToastNotifier
struct IToastNotifier_raw : IInspectable {
	virtual STDMETHODIMP _Show(ToastNotification* notification);
	virtual STDMETHODIMP _Hide(ToastNotification* notification);
	virtual STDMETHODIMP _get_Setting(NotificationSetting *value);
	virtual STDMETHODIMP _AddToSchedule(ScheduledToastNotification* scheduledToast);
	virtual STDMETHODIMP _RemoveFromSchedule(ScheduledToastNotification* scheduledToast);
	virtual STDMETHODIMP _GetScheduledToastNotifications(Foundation::Collections::IVectorView<ScheduledToastNotification*>* *scheduledToasts);
};
template<typename X> struct IToastNotifier_adaptor : X {
	union {
		struct : property {
			NotificationSetting get() { NotificationSetting value; hrcheck(enc(&IToastNotifier_adaptor::Setting)->_get_Setting(&value)); return value; }
			NotificationSetting operator()() { return get(); }
			operator NotificationSetting () { return get(); }
		} Setting;
	};
	void Show(pptr<ToastNotification> notification) { hrcheck(X::get()->_Show(notification)); }
	void Hide(pptr<ToastNotification> notification) { hrcheck(X::get()->_Hide(notification)); }
	void AddToSchedule(pptr<ScheduledToastNotification> scheduledToast) { hrcheck(X::get()->_AddToSchedule(scheduledToast)); }
	void RemoveFromSchedule(pptr<ScheduledToastNotification> scheduledToast) { hrcheck(X::get()->_RemoveFromSchedule(scheduledToast)); }
	ptr<Foundation::Collections::IVectorView<ptr<ScheduledToastNotification>>> GetScheduledToastNotifications() { Foundation::Collections::IVectorView<ScheduledToastNotification*>* scheduledToasts; hrcheck(X::get()->_GetScheduledToastNotifications(&scheduledToasts)); return from_abi(scheduledToasts); }
	IToastNotifier_adaptor() {}
};
template<typename X> struct adapt<IToastNotifier, X> : Windows::UI::Notifications::IToastNotifier_adaptor<X> { typedef adapt IToastNotifier; };
struct IToastNotifier : IToastNotifier_raw, generate<IToastNotifier> {};

// ToastNotifier
template<typename X> struct statics<ToastNotifier, X> : X {
	typedef typename X::root_type ToastNotifier;
};
struct ToastNotifier : generate<ToastNotifier> {
	using IToastNotifier2::Update;
};

// IToastNotificationFactory
struct IToastNotificationFactory : IInspectable {
	virtual STDMETHODIMP _CreateToastNotification(Data::Xml::Dom::XmlDocument* content, ToastNotification* *notification);
};

// IToastNotification4
struct IToastNotification4_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(NotificationData* *value);
	virtual STDMETHODIMP _put_Data(NotificationData* value);
	virtual STDMETHODIMP _get_Priority(ToastNotificationPriority *value);
	virtual STDMETHODIMP _put_Priority(ToastNotificationPriority value);
};
template<typename X> struct IToastNotification4_adaptor : X {
	union {
		struct : property {
			ptr<NotificationData> get() { NotificationData* value; hrcheck(enc(&IToastNotification4_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<NotificationData> operator()() { return get(); }
			operator ptr<NotificationData> () { return get(); }
			ptr<NotificationData> operator->() { return get(); }
			void put(pptr<NotificationData> value) { hrcheck(enc(&IToastNotification4_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<NotificationData> value) { put(value); }
			void operator()(pptr<NotificationData> value) { put(value); }
		} Data;
		struct : property {
			ToastNotificationPriority get() { ToastNotificationPriority value; hrcheck(enc(&IToastNotification4_adaptor::Priority)->_get_Priority(&value)); return value; }
			ToastNotificationPriority operator()() { return get(); }
			operator ToastNotificationPriority () { return get(); }
			void put(ToastNotificationPriority value) { hrcheck(enc(&IToastNotification4_adaptor::Priority)->_put_Priority(value)); }
			void operator=(ToastNotificationPriority value) { put(value); }
			void operator()(ToastNotificationPriority value) { put(value); }
		} Priority;
	};
	IToastNotification4_adaptor() {}
};
template<typename X> struct adapt<IToastNotification4, X> : Windows::UI::Notifications::IToastNotification4_adaptor<X> { typedef adapt IToastNotification4; };
struct IToastNotification4 : IToastNotification4_raw, generate<IToastNotification4> {};

// IToastNotification3
struct IToastNotification3_raw : IInspectable {
	virtual STDMETHODIMP _get_NotificationMirroring(Notifications::NotificationMirroring *value);
	virtual STDMETHODIMP _put_NotificationMirroring(Notifications::NotificationMirroring value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
};
template<typename X> struct IToastNotification3_adaptor : X {
	union {
		struct : property {
			Notifications::NotificationMirroring get() { Notifications::NotificationMirroring value; hrcheck(enc(&IToastNotification3_adaptor::NotificationMirroring)->_get_NotificationMirroring(&value)); return value; }
			Notifications::NotificationMirroring operator()() { return get(); }
			operator Notifications::NotificationMirroring () { return get(); }
			void put(Notifications::NotificationMirroring value) { hrcheck(enc(&IToastNotification3_adaptor::NotificationMirroring)->_put_NotificationMirroring(value)); }
			void operator=(Notifications::NotificationMirroring value) { put(value); }
			void operator()(Notifications::NotificationMirroring value) { put(value); }
		} NotificationMirroring;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotification3_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IToastNotification3_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
	};
	IToastNotification3_adaptor() {}
};
template<typename X> struct adapt<IToastNotification3, X> : Windows::UI::Notifications::IToastNotification3_adaptor<X> { typedef adapt IToastNotification3; };
struct IToastNotification3 : IToastNotification3_raw, generate<IToastNotification3> {};

// IToastNotification2
struct IToastNotification2_raw : IInspectable {
	virtual STDMETHODIMP _put_Tag(HSTRING value);
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
	virtual STDMETHODIMP _put_Group(HSTRING value);
	virtual STDMETHODIMP _get_Group(HSTRING *value);
	virtual STDMETHODIMP _put_SuppressPopup(bool value);
	virtual STDMETHODIMP _get_SuppressPopup(bool *value);
};
template<typename X> struct IToastNotification2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotification2_adaptor::Group)->_get_Group(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IToastNotification2_adaptor::Group)->_put_Group(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Group;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IToastNotification2_adaptor::SuppressPopup)->_get_SuppressPopup(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IToastNotification2_adaptor::SuppressPopup)->_put_SuppressPopup(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SuppressPopup;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotification2_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IToastNotification2_adaptor::Tag)->_put_Tag(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Tag;
	};
	IToastNotification2_adaptor() {}
};
template<typename X> struct adapt<IToastNotification2, X> : Windows::UI::Notifications::IToastNotification2_adaptor<X> { typedef adapt IToastNotification2; };
struct IToastNotification2 : IToastNotification2_raw, generate<IToastNotification2> {};

// IToastNotification
struct IToastNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Content(Data::Xml::Dom::XmlDocument* *value);
	virtual STDMETHODIMP _put_ExpirationTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _add_Dismissed(Foundation::TypedEventHandler<ToastNotification*, ToastDismissedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_Dismissed(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_Activated(Foundation::TypedEventHandler<ToastNotification*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_Activated(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_Failed(Foundation::TypedEventHandler<ToastNotification*, ToastFailedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Failed(Foundation::EventRegistrationToken token);
};
template<typename X> struct IToastNotification_adaptor : X {
	union {
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&IToastNotification_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} Content;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IToastNotification_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IToastNotification_adaptor::ExpirationTime)->_put_ExpirationTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationTime;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ToastNotification>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IToastNotification_adaptor::Activated)->_add_Activated(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IToastNotification_adaptor::Activated)->_remove_Activated(cookie)); }
		} Activated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ToastNotification>, ptr<ToastDismissedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IToastNotification_adaptor::Dismissed)->_add_Dismissed(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IToastNotification_adaptor::Dismissed)->_remove_Dismissed(cookie)); }
		} Dismissed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ToastNotification>, ptr<ToastFailedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IToastNotification_adaptor::Failed)->_add_Failed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IToastNotification_adaptor::Failed)->_remove_Failed(token)); }
		} Failed;
	};
	IToastNotification_adaptor() {}
};
template<typename X> struct adapt<IToastNotification, X> : Windows::UI::Notifications::IToastNotification_adaptor<X> { typedef adapt IToastNotification; };
struct IToastNotification : IToastNotification_raw, generate<IToastNotification> {};

// ToastNotification
template<typename> struct ToastNotification_statics {
	static ToastNotification *activate(pptr<Data::Xml::Dom::XmlDocument> content) { ToastNotification *notification; hrcheck(get_activation_factory<ToastNotification, IToastNotificationFactory>()->_CreateToastNotification(content, &notification)); return notification; }
};

template<typename X> struct statics<ToastNotification, X> : X, Windows::UI::Notifications::ToastNotification_statics<void> {
	using Windows::UI::Notifications::ToastNotification_statics<void>::activate;
	typedef typename X::root_type ToastNotification;
};
struct ToastNotification : generate<ToastNotification> {};

// IScheduledToastNotificationFactory
struct IScheduledToastNotificationFactory : IInspectable {
	virtual STDMETHODIMP _CreateScheduledToastNotification(Data::Xml::Dom::XmlDocument* content, Foundation::DateTime deliveryTime, ScheduledToastNotification* *notification);
	virtual STDMETHODIMP _CreateScheduledToastNotificationRecurring(Data::Xml::Dom::XmlDocument* content, Foundation::DateTime deliveryTime, Foundation::TimeSpan snoozeInterval, unsigned maximumSnoozeCount, ScheduledToastNotification* *notification);
};

// IScheduledToastNotification4
struct IScheduledToastNotification4_raw : IInspectable {
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_ExpirationTime(Foundation::IReference<Foundation::DateTime>* value);
};
template<typename X> struct IScheduledToastNotification4_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IScheduledToastNotification4_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IScheduledToastNotification4_adaptor::ExpirationTime)->_put_ExpirationTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationTime;
	};
	IScheduledToastNotification4_adaptor() {}
};
template<typename X> struct adapt<IScheduledToastNotification4, X> : Windows::UI::Notifications::IScheduledToastNotification4_adaptor<X> { typedef adapt IScheduledToastNotification4; };
struct IScheduledToastNotification4 : IScheduledToastNotification4_raw, generate<IScheduledToastNotification4> {};

// IScheduledToastNotification3
struct IScheduledToastNotification3_raw : IInspectable {
	virtual STDMETHODIMP _get_NotificationMirroring(Notifications::NotificationMirroring *value);
	virtual STDMETHODIMP _put_NotificationMirroring(Notifications::NotificationMirroring value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
};
template<typename X> struct IScheduledToastNotification3_adaptor : X {
	union {
		struct : property {
			Notifications::NotificationMirroring get() { Notifications::NotificationMirroring value; hrcheck(enc(&IScheduledToastNotification3_adaptor::NotificationMirroring)->_get_NotificationMirroring(&value)); return value; }
			Notifications::NotificationMirroring operator()() { return get(); }
			operator Notifications::NotificationMirroring () { return get(); }
			void put(Notifications::NotificationMirroring value) { hrcheck(enc(&IScheduledToastNotification3_adaptor::NotificationMirroring)->_put_NotificationMirroring(value)); }
			void operator=(Notifications::NotificationMirroring value) { put(value); }
			void operator()(Notifications::NotificationMirroring value) { put(value); }
		} NotificationMirroring;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IScheduledToastNotification3_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IScheduledToastNotification3_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
	};
	IScheduledToastNotification3_adaptor() {}
};
template<typename X> struct adapt<IScheduledToastNotification3, X> : Windows::UI::Notifications::IScheduledToastNotification3_adaptor<X> { typedef adapt IScheduledToastNotification3; };
struct IScheduledToastNotification3 : IScheduledToastNotification3_raw, generate<IScheduledToastNotification3> {};

// IScheduledToastNotification2
struct IScheduledToastNotification2_raw : IInspectable {
	virtual STDMETHODIMP _put_Tag(HSTRING value);
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
	virtual STDMETHODIMP _put_Group(HSTRING value);
	virtual STDMETHODIMP _get_Group(HSTRING *value);
	virtual STDMETHODIMP _put_SuppressPopup(bool value);
	virtual STDMETHODIMP _get_SuppressPopup(bool *value);
};
template<typename X> struct IScheduledToastNotification2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IScheduledToastNotification2_adaptor::Group)->_get_Group(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IScheduledToastNotification2_adaptor::Group)->_put_Group(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Group;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IScheduledToastNotification2_adaptor::SuppressPopup)->_get_SuppressPopup(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IScheduledToastNotification2_adaptor::SuppressPopup)->_put_SuppressPopup(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SuppressPopup;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IScheduledToastNotification2_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IScheduledToastNotification2_adaptor::Tag)->_put_Tag(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Tag;
	};
	IScheduledToastNotification2_adaptor() {}
};
template<typename X> struct adapt<IScheduledToastNotification2, X> : Windows::UI::Notifications::IScheduledToastNotification2_adaptor<X> { typedef adapt IScheduledToastNotification2; };
struct IScheduledToastNotification2 : IScheduledToastNotification2_raw, generate<IScheduledToastNotification2> {};

// IScheduledToastNotification
struct IScheduledToastNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Content(Data::Xml::Dom::XmlDocument* *value);
	virtual STDMETHODIMP _get_DeliveryTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_SnoozeInterval(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_MaximumSnoozeCount(unsigned *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
};
template<typename X> struct IScheduledToastNotification_adaptor : X {
	union {
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&IScheduledToastNotification_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} Content;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IScheduledToastNotification_adaptor::DeliveryTime)->_get_DeliveryTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} DeliveryTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IScheduledToastNotification_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IScheduledToastNotification_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IScheduledToastNotification_adaptor::MaximumSnoozeCount)->_get_MaximumSnoozeCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaximumSnoozeCount;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IScheduledToastNotification_adaptor::SnoozeInterval)->_get_SnoozeInterval(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} SnoozeInterval;
	};
	IScheduledToastNotification_adaptor() {}
};
template<typename X> struct adapt<IScheduledToastNotification, X> : Windows::UI::Notifications::IScheduledToastNotification_adaptor<X> { typedef adapt IScheduledToastNotification; };
struct IScheduledToastNotification : IScheduledToastNotification_raw, generate<IScheduledToastNotification> {};

// ScheduledToastNotification
template<typename> struct ScheduledToastNotification_statics {
	static ScheduledToastNotification *activate(pptr<Data::Xml::Dom::XmlDocument> content, const Foundation::DateTime& deliveryTime) { ScheduledToastNotification *notification; hrcheck(get_activation_factory<ScheduledToastNotification, IScheduledToastNotificationFactory>()->_CreateScheduledToastNotification(content, deliveryTime, &notification)); return notification; }
	static ScheduledToastNotification *activate(pptr<Data::Xml::Dom::XmlDocument> content, const Foundation::DateTime& deliveryTime, const Foundation::TimeSpan& snoozeInterval, unsigned maximumSnoozeCount) { ScheduledToastNotification *notification; hrcheck(get_activation_factory<ScheduledToastNotification, IScheduledToastNotificationFactory>()->_CreateScheduledToastNotificationRecurring(content, deliveryTime, snoozeInterval, maximumSnoozeCount, &notification)); return notification; }
};

template<typename X> struct statics<ScheduledToastNotification, X> : X, Windows::UI::Notifications::ScheduledToastNotification_statics<void> {
	using Windows::UI::Notifications::ScheduledToastNotification_statics<void>::activate;
	typedef typename X::root_type ScheduledToastNotification;
};
struct ScheduledToastNotification : generate<ScheduledToastNotification> {};

// INotificationDataFactory
struct INotificationDataFactory : IInspectable {
	virtual STDMETHODIMP _CreateNotificationDataWithValuesAndSequenceNumber(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, HSTRING>*>* initialValues, unsigned sequenceNumber, NotificationData* *result);
	virtual STDMETHODIMP _CreateNotificationDataWithValues(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, HSTRING>*>* initialValues, NotificationData* *result);
};

// INotificationData
struct INotificationData_raw : IInspectable {
	virtual STDMETHODIMP _get_Values(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_SequenceNumber(unsigned *value);
	virtual STDMETHODIMP _put_SequenceNumber(unsigned value);
};
template<typename X> struct INotificationData_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&INotificationData_adaptor::SequenceNumber)->_get_SequenceNumber(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&INotificationData_adaptor::SequenceNumber)->_put_SequenceNumber(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} SequenceNumber;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&INotificationData_adaptor::Values)->_get_Values(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} Values;
	};
	INotificationData_adaptor() {}
};
template<typename X> struct adapt<INotificationData, X> : Windows::UI::Notifications::INotificationData_adaptor<X> { typedef adapt INotificationData; };
struct INotificationData : INotificationData_raw, generate<INotificationData> {};

// NotificationData
template<typename> struct NotificationData_statics {
	static NotificationData *activate() { NotificationData *t; get_activation_factory<NotificationData>()->ActivateInstance((IInspectable**)&t); return t; }
	static NotificationData *activate(pptr<Foundation::Collections::IIterable<ptr<Foundation::Collections::IKeyValuePair<hstring, hstring>>>> initialValues, unsigned sequenceNumber) { NotificationData *result; hrcheck(get_activation_factory<NotificationData, INotificationDataFactory>()->_CreateNotificationData(to_abi(initialValues), sequenceNumber, &result)); return result; }
	static NotificationData *activate(pptr<Foundation::Collections::IIterable<ptr<Foundation::Collections::IKeyValuePair<hstring, hstring>>>> initialValues) { NotificationData *result; hrcheck(get_activation_factory<NotificationData, INotificationDataFactory>()->_CreateNotificationData(to_abi(initialValues), &result)); return result; }
};

template<typename X> struct statics<NotificationData, X> : X, Windows::UI::Notifications::NotificationData_statics<void> {
	using Windows::UI::Notifications::NotificationData_statics<void>::activate;
	typedef typename X::root_type NotificationData;
};
struct NotificationData : generate<NotificationData> {};

// IToastCollectionManager
struct IToastCollectionManager_raw : IInspectable {
	virtual STDMETHODIMP _SaveToastCollectionAsync(ToastCollection* collection, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _FindAllToastCollectionsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ToastCollection*>*>* *operation);
	virtual STDMETHODIMP _GetToastCollectionAsync(HSTRING collectionId, Foundation::IAsyncOperation<ToastCollection*>* *operation);
	virtual STDMETHODIMP _RemoveToastCollectionAsync(HSTRING collectionId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _RemoveAllToastCollectionsAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _get_User(System::User* *value);
	virtual STDMETHODIMP _get_AppId(HSTRING *value);
};
template<typename X> struct IToastCollectionManager_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastCollectionManager_adaptor::AppId)->_get_AppId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppId;
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IToastCollectionManager_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<Foundation::IAsyncAction> SaveToastCollectionAsync(pptr<ToastCollection> collection) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SaveToastCollectionAsync(collection, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ToastCollection>>>>> FindAllToastCollectionsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ToastCollection*>*>* operation; hrcheck(X::get()->_FindAllToastCollectionsAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ToastCollection>>> GetToastCollectionAsync(hstring_ref collectionId) { Foundation::IAsyncOperation<ToastCollection*>* operation; hrcheck(X::get()->_GetToastCollectionAsync(collectionId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> RemoveToastCollectionAsync(hstring_ref collectionId) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_RemoveToastCollectionAsync(collectionId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> RemoveAllToastCollectionsAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_RemoveAllToastCollectionsAsync(&operation)); return from_abi(operation); }
	IToastCollectionManager_adaptor() {}
};
template<typename X> struct adapt<IToastCollectionManager, X> : Windows::UI::Notifications::IToastCollectionManager_adaptor<X> { typedef adapt IToastCollectionManager; };
struct IToastCollectionManager : IToastCollectionManager_raw, generate<IToastCollectionManager> {};

// IToastCollectionFactory
struct IToastCollectionFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(HSTRING collectionId, HSTRING displayName, HSTRING launchArgs, Foundation::Uri* iconUri, ToastCollection* *result);
};

// IToastCollection
struct IToastCollection_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_LaunchArgs(HSTRING *value);
	virtual STDMETHODIMP _put_LaunchArgs(HSTRING value);
	virtual STDMETHODIMP _get_Icon(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Icon(Foundation::Uri* value);
};
template<typename X> struct IToastCollection_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastCollection_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IToastCollection_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IToastCollection_adaptor::Icon)->_get_Icon(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IToastCollection_adaptor::Icon)->_put_Icon(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Icon;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastCollection_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastCollection_adaptor::LaunchArgs)->_get_LaunchArgs(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IToastCollection_adaptor::LaunchArgs)->_put_LaunchArgs(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} LaunchArgs;
	};
	IToastCollection_adaptor() {}
};
template<typename X> struct adapt<IToastCollection, X> : Windows::UI::Notifications::IToastCollection_adaptor<X> { typedef adapt IToastCollection; };
struct IToastCollection : IToastCollection_raw, generate<IToastCollection> {};

// ToastCollection
template<typename> struct ToastCollection_statics {
	static ToastCollection *activate(hstring_ref collectionId, hstring_ref displayName, hstring_ref launchArgs, pptr<Foundation::Uri> iconUri) { ToastCollection *result; hrcheck(get_activation_factory<ToastCollection, IToastCollectionFactory>()->_CreateInstance(collectionId, displayName, launchArgs, iconUri, &result)); return result; }
};

template<typename X> struct statics<ToastCollection, X> : X, Windows::UI::Notifications::ToastCollection_statics<void> {
	using Windows::UI::Notifications::ToastCollection_statics<void>::activate;
	typedef typename X::root_type ToastCollection;
};
struct ToastCollection : generate<ToastCollection> {};

// ToastDismissedEventArgs
template<typename X> struct statics<ToastDismissedEventArgs, X> : X {
	typedef typename X::root_type ToastDismissedEventArgs;
};
struct ToastDismissedEventArgs : generate<ToastDismissedEventArgs> {};

// ToastFailedEventArgs
template<typename X> struct statics<ToastFailedEventArgs, X> : X {
	typedef typename X::root_type ToastFailedEventArgs;
};
struct ToastFailedEventArgs : generate<ToastFailedEventArgs> {};

// NotificationVisual
template<typename X> struct statics<NotificationVisual, X> : X {
	typedef typename X::root_type NotificationVisual;
};
struct NotificationVisual : generate<NotificationVisual> {};

// IToastNotificationManagerStatics2
struct IToastNotificationManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _get_History(ToastNotificationHistory* *value);
};

// IToastNotificationHistory2
struct IToastNotificationHistory2_raw : IInspectable {
	virtual STDMETHODIMP _GetHistory(Foundation::Collections::IVectorView<ToastNotification*>* *toasts);
	virtual STDMETHODIMP _GetHistoryWithId(HSTRING applicationId, Foundation::Collections::IVectorView<ToastNotification*>* *toasts);
};
template<typename X> struct IToastNotificationHistory2_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<ToastNotification>>> GetHistory() { Foundation::Collections::IVectorView<ToastNotification*>* toasts; hrcheck(X::get()->_GetHistory(&toasts)); return from_abi(toasts); }
	ptr<Foundation::Collections::IVectorView<ptr<ToastNotification>>> GetHistory(hstring_ref applicationId) { Foundation::Collections::IVectorView<ToastNotification*>* toasts; hrcheck(X::get()->_GetHistoryWithId(applicationId, &toasts)); return from_abi(toasts); }
};
template<typename X> struct adapt<IToastNotificationHistory2, X> : Windows::UI::Notifications::IToastNotificationHistory2_adaptor<X> { typedef adapt IToastNotificationHistory2; };
struct IToastNotificationHistory2 : IToastNotificationHistory2_raw, generate<IToastNotificationHistory2> {};

// IToastNotificationHistory
struct IToastNotificationHistory_raw : IInspectable {
	virtual STDMETHODIMP _RemoveGroup(HSTRING group);
	virtual STDMETHODIMP _RemoveGroupWithId(HSTRING group, HSTRING applicationId);
	virtual STDMETHODIMP _RemoveGroupedTagWithId(HSTRING tag, HSTRING group, HSTRING applicationId);
	virtual STDMETHODIMP _RemoveGroupedTag(HSTRING tag, HSTRING group);
	virtual STDMETHODIMP _Remove(HSTRING tag);
	virtual STDMETHODIMP _Clear();
	virtual STDMETHODIMP _ClearWithId(HSTRING applicationId);
};
template<typename X> struct IToastNotificationHistory_adaptor : X {
	void RemoveGroup(hstring_ref group) { hrcheck(X::get()->_RemoveGroup(group)); }
	void RemoveGroup(hstring_ref group, hstring_ref applicationId) { hrcheck(X::get()->_RemoveGroupWithId(group, applicationId)); }
	void Remove(hstring_ref tag, hstring_ref group, hstring_ref applicationId) { hrcheck(X::get()->_RemoveGroupedTagWithId(tag, group, applicationId)); }
	void Remove(hstring_ref tag, hstring_ref group) { hrcheck(X::get()->_RemoveGroupedTag(tag, group)); }
	void Remove(hstring_ref tag) { hrcheck(X::get()->_Remove(tag)); }
	void Clear() { hrcheck(X::get()->_Clear()); }
	void Clear(hstring_ref applicationId) { hrcheck(X::get()->_ClearWithId(applicationId)); }
};
template<typename X> struct adapt<IToastNotificationHistory, X> : Windows::UI::Notifications::IToastNotificationHistory_adaptor<X> { typedef adapt IToastNotificationHistory; };
struct IToastNotificationHistory : IToastNotificationHistory_raw, generate<IToastNotificationHistory> {};

// ToastNotificationHistory
template<typename X> struct statics<ToastNotificationHistory, X> : X {
	typedef typename X::root_type ToastNotificationHistory;
};
struct ToastNotificationHistory : generate<ToastNotificationHistory> {
	using IToastNotificationHistory::Clear;
	using IToastNotificationHistory::Remove;
	using IToastNotificationHistory2::GetHistory;
	using IToastNotificationHistory::RemoveGroup;
};

// IToastNotificationManagerStatics4
struct IToastNotificationManagerStatics4 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, ToastNotificationManagerForUser* *result);
	virtual STDMETHODIMP _ConfigureNotificationMirroring(NotificationMirroring value);
};

// IToastNotificationManagerForUser2
struct IToastNotificationManagerForUser2_raw : IInspectable {
	virtual STDMETHODIMP _GetToastNotifierForToastCollectionIdAsync(HSTRING collectionId, Foundation::IAsyncOperation<ToastNotifier*>* *operation);
	virtual STDMETHODIMP _GetHistoryForToastCollectionIdAsync(HSTRING collectionId, Foundation::IAsyncOperation<ToastNotificationHistory*>* *operation);
	virtual STDMETHODIMP _GetToastCollectionManager(ToastCollectionManager* *result);
	virtual STDMETHODIMP _GetToastCollectionManagerWithAppId(HSTRING appId, ToastCollectionManager* *result);
};
template<typename X> struct IToastNotificationManagerForUser2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<ToastNotifier>>> GetToastNotifierForToastCollectionIdAsync(hstring_ref collectionId) { Foundation::IAsyncOperation<ToastNotifier*>* operation; hrcheck(X::get()->_GetToastNotifierForToastCollectionIdAsync(collectionId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ToastNotificationHistory>>> GetHistoryForToastCollectionIdAsync(hstring_ref collectionId) { Foundation::IAsyncOperation<ToastNotificationHistory*>* operation; hrcheck(X::get()->_GetHistoryForToastCollectionIdAsync(collectionId, &operation)); return from_abi(operation); }
	ptr<ToastCollectionManager> GetToastCollectionManager() { ToastCollectionManager* result; hrcheck(X::get()->_GetToastCollectionManager(&result)); return from_abi(result); }
	ptr<ToastCollectionManager> GetToastCollectionManager(hstring_ref appId) { ToastCollectionManager* result; hrcheck(X::get()->_GetToastCollectionManagerWithAppId(appId, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IToastNotificationManagerForUser2, X> : Windows::UI::Notifications::IToastNotificationManagerForUser2_adaptor<X> { typedef adapt IToastNotificationManagerForUser2; };
struct IToastNotificationManagerForUser2 : IToastNotificationManagerForUser2_raw, generate<IToastNotificationManagerForUser2> {};

// IToastNotificationManagerForUser
struct IToastNotificationManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _CreateToastNotifier(ToastNotifier* *result);
	virtual STDMETHODIMP _CreateToastNotifierWithId(HSTRING applicationId, ToastNotifier* *result);
	virtual STDMETHODIMP _get_History(ToastNotificationHistory* *value);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IToastNotificationManagerForUser_adaptor : X {
	union {
		struct : property {
			ptr<ToastNotificationHistory> get() { ToastNotificationHistory* value; hrcheck(enc(&IToastNotificationManagerForUser_adaptor::History)->_get_History(&value)); return from_abi(value); }
			ptr<ToastNotificationHistory> operator()() { return get(); }
			operator ptr<ToastNotificationHistory> () { return get(); }
			ptr<ToastNotificationHistory> operator->() { return get(); }
		} History;
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IToastNotificationManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<ToastNotifier> CreateToastNotifier() { ToastNotifier* result; hrcheck(X::get()->_CreateToastNotifier(&result)); return from_abi(result); }
	ptr<ToastNotifier> CreateToastNotifier(hstring_ref applicationId) { ToastNotifier* result; hrcheck(X::get()->_CreateToastNotifierWithId(applicationId, &result)); return from_abi(result); }
	IToastNotificationManagerForUser_adaptor() {}
};
template<typename X> struct adapt<IToastNotificationManagerForUser, X> : Windows::UI::Notifications::IToastNotificationManagerForUser_adaptor<X> { typedef adapt IToastNotificationManagerForUser; };
struct IToastNotificationManagerForUser : IToastNotificationManagerForUser_raw, generate<IToastNotificationManagerForUser> {};

// ToastNotificationManagerForUser
template<typename X> struct statics<ToastNotificationManagerForUser, X> : X {
	typedef typename X::root_type ToastNotificationManagerForUser;
};
struct ToastNotificationManagerForUser : generate<ToastNotificationManagerForUser> {
	using IToastNotificationManagerForUser::CreateToastNotifier;
	using IToastNotificationManagerForUser2::GetToastCollectionManager;
};

// IToastNotificationManagerStatics5
struct IToastNotificationManagerStatics5 : IInspectable {
	virtual STDMETHODIMP _GetDefault(ToastNotificationManagerForUser* *value);
};

// ToastCollectionManager
template<typename X> struct statics<ToastCollectionManager, X> : X {
	typedef typename X::root_type ToastCollectionManager;
};
struct ToastCollectionManager : generate<ToastCollectionManager> {};

// IToastNotificationHistoryChangedTriggerDetail
struct IToastNotificationHistoryChangedTriggerDetail_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeType(ToastHistoryChangedType *value);
};
template<typename X> struct IToastNotificationHistoryChangedTriggerDetail_adaptor : X {
	union {
		struct : property {
			ToastHistoryChangedType get() { ToastHistoryChangedType value; hrcheck(enc(&IToastNotificationHistoryChangedTriggerDetail_adaptor::ChangeType)->_get_ChangeType(&value)); return value; }
			ToastHistoryChangedType operator()() { return get(); }
			operator ToastHistoryChangedType () { return get(); }
		} ChangeType;
	};
	IToastNotificationHistoryChangedTriggerDetail_adaptor() {}
};
template<typename X> struct adapt<IToastNotificationHistoryChangedTriggerDetail, X> : Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail_adaptor<X> { typedef adapt IToastNotificationHistoryChangedTriggerDetail; };
struct IToastNotificationHistoryChangedTriggerDetail : IToastNotificationHistoryChangedTriggerDetail_raw, generate<IToastNotificationHistoryChangedTriggerDetail> {};

// IToastNotificationHistoryChangedTriggerDetail2
struct IToastNotificationHistoryChangedTriggerDetail2_raw : IInspectable {
	virtual STDMETHODIMP _get_CollectionId(HSTRING *collectionId);
};
template<typename X> struct IToastNotificationHistoryChangedTriggerDetail2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING collectionId; hrcheck(enc(&IToastNotificationHistoryChangedTriggerDetail2_adaptor::CollectionId)->_get_CollectionId(&collectionId)); return from_abi(collectionId); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CollectionId;
	};
	IToastNotificationHistoryChangedTriggerDetail2_adaptor() {}
};
template<typename X> struct adapt<IToastNotificationHistoryChangedTriggerDetail2, X> : Windows::UI::Notifications::IToastNotificationHistoryChangedTriggerDetail2_adaptor<X> { typedef adapt IToastNotificationHistoryChangedTriggerDetail2; };
struct IToastNotificationHistoryChangedTriggerDetail2 : IToastNotificationHistoryChangedTriggerDetail2_raw, generate<IToastNotificationHistoryChangedTriggerDetail2> {};

// IToastNotificationActionTriggerDetail
struct IToastNotificationActionTriggerDetail_raw : IInspectable {
	virtual STDMETHODIMP _get_Argument(HSTRING *argument);
	virtual STDMETHODIMP _get_UserInput(Foundation::Collections::ValueSet* *inputs);
};
template<typename X> struct IToastNotificationActionTriggerDetail_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING argument; hrcheck(enc(&IToastNotificationActionTriggerDetail_adaptor::Argument)->_get_Argument(&argument)); return from_abi(argument); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Argument;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* inputs; hrcheck(enc(&IToastNotificationActionTriggerDetail_adaptor::UserInput)->_get_UserInput(&inputs)); return from_abi(inputs); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} UserInput;
	};
	IToastNotificationActionTriggerDetail_adaptor() {}
};
template<typename X> struct adapt<IToastNotificationActionTriggerDetail, X> : Windows::UI::Notifications::IToastNotificationActionTriggerDetail_adaptor<X> { typedef adapt IToastNotificationActionTriggerDetail; };
struct IToastNotificationActionTriggerDetail : IToastNotificationActionTriggerDetail_raw, generate<IToastNotificationActionTriggerDetail> {};

// UserNotificationChangedEventArgs
template<typename X> struct statics<UserNotificationChangedEventArgs, X> : X {
	typedef typename X::root_type UserNotificationChangedEventArgs;
};
struct UserNotificationChangedEventArgs : generate<UserNotificationChangedEventArgs> {};

// UserNotification
template<typename X> struct statics<UserNotification, X> : X {
	typedef typename X::root_type UserNotification;
};
struct UserNotification : generate<UserNotification> {};

// KnownAdaptiveNotificationHints
template<typename> struct KnownAdaptiveNotificationHints_statics {
	static struct _Align : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationHints, IKnownAdaptiveNotificationHintsStatics>()->_get_Align(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Align;
	static struct _MaxLines : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationHints, IKnownAdaptiveNotificationHintsStatics>()->_get_MaxLines(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MaxLines;
	static struct _MinLines : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationHints, IKnownAdaptiveNotificationHintsStatics>()->_get_MinLines(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MinLines;
	static struct _Style : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationHints, IKnownAdaptiveNotificationHintsStatics>()->_get_Style(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Style;
	static struct _TextStacking : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationHints, IKnownAdaptiveNotificationHintsStatics>()->_get_TextStacking(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TextStacking;
	static struct _Wrap : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationHints, IKnownAdaptiveNotificationHintsStatics>()->_get_Wrap(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wrap;
};
template<typename X> typename KnownAdaptiveNotificationHints_statics<X>::_Align KnownAdaptiveNotificationHints_statics<X>::Align;
template<typename X> typename KnownAdaptiveNotificationHints_statics<X>::_MaxLines KnownAdaptiveNotificationHints_statics<X>::MaxLines;
template<typename X> typename KnownAdaptiveNotificationHints_statics<X>::_MinLines KnownAdaptiveNotificationHints_statics<X>::MinLines;
template<typename X> typename KnownAdaptiveNotificationHints_statics<X>::_Style KnownAdaptiveNotificationHints_statics<X>::Style;
template<typename X> typename KnownAdaptiveNotificationHints_statics<X>::_TextStacking KnownAdaptiveNotificationHints_statics<X>::TextStacking;
template<typename X> typename KnownAdaptiveNotificationHints_statics<X>::_Wrap KnownAdaptiveNotificationHints_statics<X>::Wrap;

template<typename X> struct statics<KnownAdaptiveNotificationHints, X> : X, Windows::UI::Notifications::KnownAdaptiveNotificationHints_statics<void> {
	typedef typename X::root_type KnownAdaptiveNotificationHints;
};
struct KnownAdaptiveNotificationHints : generate<KnownAdaptiveNotificationHints> {};

// KnownNotificationBindings
template<typename> struct KnownNotificationBindings_statics {
	static struct _ToastGeneric : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownNotificationBindings, IKnownNotificationBindingsStatics>()->_get_ToastGeneric(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ToastGeneric;
};
template<typename X> typename KnownNotificationBindings_statics<X>::_ToastGeneric KnownNotificationBindings_statics<X>::ToastGeneric;

template<typename X> struct statics<KnownNotificationBindings, X> : X, Windows::UI::Notifications::KnownNotificationBindings_statics<void> {
	typedef typename X::root_type KnownNotificationBindings;
};
struct KnownNotificationBindings : generate<KnownNotificationBindings> {};

// KnownAdaptiveNotificationTextStyles
template<typename> struct KnownAdaptiveNotificationTextStyles_statics {
	static struct _Base : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_Base(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Base;
	static struct _BaseSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_BaseSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BaseSubtle;
	static struct _Body : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_Body(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Body;
	static struct _BodySubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_BodySubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BodySubtle;
	static struct _Caption : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_Caption(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Caption;
	static struct _CaptionSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_CaptionSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CaptionSubtle;
	static struct _Header : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_Header(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Header;
	static struct _HeaderNumeral : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_HeaderNumeral(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HeaderNumeral;
	static struct _HeaderNumeralSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_HeaderNumeralSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HeaderNumeralSubtle;
	static struct _HeaderSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_HeaderSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HeaderSubtle;
	static struct _Subheader : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_Subheader(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Subheader;
	static struct _SubheaderNumeral : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_SubheaderNumeral(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SubheaderNumeral;
	static struct _SubheaderNumeralSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_SubheaderNumeralSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SubheaderNumeralSubtle;
	static struct _SubheaderSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_SubheaderSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SubheaderSubtle;
	static struct _Subtitle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_Subtitle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Subtitle;
	static struct _SubtitleSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_SubtitleSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SubtitleSubtle;
	static struct _Title : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_Title(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Title;
	static struct _TitleNumeral : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_TitleNumeral(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TitleNumeral;
	static struct _TitleSubtle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownAdaptiveNotificationTextStyles, IKnownAdaptiveNotificationTextStylesStatics>()->_get_TitleSubtle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TitleSubtle;
};
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_Base KnownAdaptiveNotificationTextStyles_statics<X>::Base;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_BaseSubtle KnownAdaptiveNotificationTextStyles_statics<X>::BaseSubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_Body KnownAdaptiveNotificationTextStyles_statics<X>::Body;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_BodySubtle KnownAdaptiveNotificationTextStyles_statics<X>::BodySubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_Caption KnownAdaptiveNotificationTextStyles_statics<X>::Caption;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_CaptionSubtle KnownAdaptiveNotificationTextStyles_statics<X>::CaptionSubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_Header KnownAdaptiveNotificationTextStyles_statics<X>::Header;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_HeaderNumeral KnownAdaptiveNotificationTextStyles_statics<X>::HeaderNumeral;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_HeaderNumeralSubtle KnownAdaptiveNotificationTextStyles_statics<X>::HeaderNumeralSubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_HeaderSubtle KnownAdaptiveNotificationTextStyles_statics<X>::HeaderSubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_Subheader KnownAdaptiveNotificationTextStyles_statics<X>::Subheader;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_SubheaderNumeral KnownAdaptiveNotificationTextStyles_statics<X>::SubheaderNumeral;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_SubheaderNumeralSubtle KnownAdaptiveNotificationTextStyles_statics<X>::SubheaderNumeralSubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_SubheaderSubtle KnownAdaptiveNotificationTextStyles_statics<X>::SubheaderSubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_Subtitle KnownAdaptiveNotificationTextStyles_statics<X>::Subtitle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_SubtitleSubtle KnownAdaptiveNotificationTextStyles_statics<X>::SubtitleSubtle;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_Title KnownAdaptiveNotificationTextStyles_statics<X>::Title;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_TitleNumeral KnownAdaptiveNotificationTextStyles_statics<X>::TitleNumeral;
template<typename X> typename KnownAdaptiveNotificationTextStyles_statics<X>::_TitleSubtle KnownAdaptiveNotificationTextStyles_statics<X>::TitleSubtle;

template<typename X> struct statics<KnownAdaptiveNotificationTextStyles, X> : X, Windows::UI::Notifications::KnownAdaptiveNotificationTextStyles_statics<void> {
	typedef typename X::root_type KnownAdaptiveNotificationTextStyles;
};
struct KnownAdaptiveNotificationTextStyles : generate<KnownAdaptiveNotificationTextStyles> {};

// TileUpdateManager
template<typename> struct TileUpdateManager_statics {
	static ptr<TileUpdateManagerForUser> GetForUser(pptr<System::User> user) { TileUpdateManagerForUser* result; hrcheck(get_activation_factory<TileUpdateManager, ITileUpdateManagerStatics2>()->_GetForUser(user, &result)); return from_abi(result); }
	static ptr<TileUpdater> CreateTileUpdaterForApplication() { TileUpdater* updater; hrcheck(get_activation_factory<TileUpdateManager, ITileUpdateManagerStatics>()->_CreateTileUpdaterForApplication(&updater)); return from_abi(updater); }
	static ptr<TileUpdater> CreateTileUpdaterForApplication(hstring_ref applicationId) { TileUpdater* updater; hrcheck(get_activation_factory<TileUpdateManager, ITileUpdateManagerStatics>()->_CreateTileUpdaterForApplicationWithId(applicationId, &updater)); return from_abi(updater); }
	static ptr<TileUpdater> CreateTileUpdaterForSecondaryTile(hstring_ref tileId) { TileUpdater* updater; hrcheck(get_activation_factory<TileUpdateManager, ITileUpdateManagerStatics>()->_CreateTileUpdaterForSecondaryTile(tileId, &updater)); return from_abi(updater); }
	static ptr<Data::Xml::Dom::XmlDocument> GetTemplateContent(TileTemplateType type) { Data::Xml::Dom::XmlDocument* content; hrcheck(get_activation_factory<TileUpdateManager, ITileUpdateManagerStatics>()->_GetTemplateContent(type, &content)); return from_abi(content); }
};

template<typename X> struct statics<TileUpdateManager, X> : X, Windows::UI::Notifications::TileUpdateManager_statics<void> {
	typedef typename X::root_type TileUpdateManager;
};
struct TileUpdateManager : generate<TileUpdateManager> {};

// BadgeUpdateManager
template<typename> struct BadgeUpdateManager_statics {
	static ptr<BadgeUpdateManagerForUser> GetForUser(pptr<System::User> user) { BadgeUpdateManagerForUser* result; hrcheck(get_activation_factory<BadgeUpdateManager, IBadgeUpdateManagerStatics2>()->_GetForUser(user, &result)); return from_abi(result); }
	static ptr<BadgeUpdater> CreateBadgeUpdaterForApplication() { BadgeUpdater* updater; hrcheck(get_activation_factory<BadgeUpdateManager, IBadgeUpdateManagerStatics>()->_CreateBadgeUpdaterForApplication(&updater)); return from_abi(updater); }
	static ptr<BadgeUpdater> CreateBadgeUpdaterForApplication(hstring_ref applicationId) { BadgeUpdater* updater; hrcheck(get_activation_factory<BadgeUpdateManager, IBadgeUpdateManagerStatics>()->_CreateBadgeUpdaterForApplicationWithId(applicationId, &updater)); return from_abi(updater); }
	static ptr<BadgeUpdater> CreateBadgeUpdaterForSecondaryTile(hstring_ref tileId) { BadgeUpdater* updater; hrcheck(get_activation_factory<BadgeUpdateManager, IBadgeUpdateManagerStatics>()->_CreateBadgeUpdaterForSecondaryTile(tileId, &updater)); return from_abi(updater); }
	static ptr<Data::Xml::Dom::XmlDocument> GetTemplateContent(BadgeTemplateType type) { Data::Xml::Dom::XmlDocument* content; hrcheck(get_activation_factory<BadgeUpdateManager, IBadgeUpdateManagerStatics>()->_GetTemplateContent(type, &content)); return from_abi(content); }
};

template<typename X> struct statics<BadgeUpdateManager, X> : X, Windows::UI::Notifications::BadgeUpdateManager_statics<void> {
	typedef typename X::root_type BadgeUpdateManager;
};
struct BadgeUpdateManager : generate<BadgeUpdateManager> {};

// TileFlyoutUpdateManager
template<typename> struct TileFlyoutUpdateManager_statics {
	static ptr<TileFlyoutUpdater> CreateTileFlyoutUpdaterForApplication() { TileFlyoutUpdater* updater; hrcheck(get_activation_factory<TileFlyoutUpdateManager, ITileFlyoutUpdateManagerStatics>()->_CreateTileFlyoutUpdaterForApplication(&updater)); return from_abi(updater); }
	static ptr<TileFlyoutUpdater> CreateTileFlyoutUpdaterForApplication(hstring_ref applicationId) { TileFlyoutUpdater* updater; hrcheck(get_activation_factory<TileFlyoutUpdateManager, ITileFlyoutUpdateManagerStatics>()->_CreateTileFlyoutUpdaterForApplicationWithId(applicationId, &updater)); return from_abi(updater); }
	static ptr<TileFlyoutUpdater> CreateTileFlyoutUpdaterForSecondaryTile(hstring_ref tileId) { TileFlyoutUpdater* updater; hrcheck(get_activation_factory<TileFlyoutUpdateManager, ITileFlyoutUpdateManagerStatics>()->_CreateTileFlyoutUpdaterForSecondaryTile(tileId, &updater)); return from_abi(updater); }
	static ptr<Data::Xml::Dom::XmlDocument> GetTemplateContent(TileFlyoutTemplateType type) { Data::Xml::Dom::XmlDocument* content; hrcheck(get_activation_factory<TileFlyoutUpdateManager, ITileFlyoutUpdateManagerStatics>()->_GetTemplateContent(type, &content)); return from_abi(content); }
};

template<typename X> struct statics<TileFlyoutUpdateManager, X> : X, Windows::UI::Notifications::TileFlyoutUpdateManager_statics<void> {
	typedef typename X::root_type TileFlyoutUpdateManager;
};
struct TileFlyoutUpdateManager : generate<TileFlyoutUpdateManager> {};

// ToastNotificationManager
template<typename> struct ToastNotificationManager_statics {
	static struct _History : property {
		ptr<ToastNotificationHistory> get() { ToastNotificationHistory* value; hrcheck(get_activation_factory<ToastNotificationManager, IToastNotificationManagerStatics2>()->_get_History(&value)); return from_abi(value); }
		ptr<ToastNotificationHistory> operator()() { return get(); }
		operator ptr<ToastNotificationHistory> () { return get(); }
		ptr<ToastNotificationHistory> operator->() { return get(); }
	} History;
	static ptr<ToastNotificationManagerForUser> GetDefault() { ToastNotificationManagerForUser* value; hrcheck(get_activation_factory<ToastNotificationManager, IToastNotificationManagerStatics5>()->_GetDefault(&value)); return from_abi(value); }
	static ptr<ToastNotificationManagerForUser> GetForUser(pptr<System::User> user) { ToastNotificationManagerForUser* result; hrcheck(get_activation_factory<ToastNotificationManager, IToastNotificationManagerStatics4>()->_GetForUser(user, &result)); return from_abi(result); }
	static void ConfigureNotificationMirroring(NotificationMirroring value) { hrcheck(get_activation_factory<ToastNotificationManager, IToastNotificationManagerStatics4>()->_ConfigureNotificationMirroring(value)); }
	static ptr<ToastNotifier> CreateToastNotifier() { ToastNotifier* notifier; hrcheck(get_activation_factory<ToastNotificationManager, IToastNotificationManagerStatics>()->_CreateToastNotifier(&notifier)); return from_abi(notifier); }
	static ptr<ToastNotifier> CreateToastNotifier(hstring_ref applicationId) { ToastNotifier* notifier; hrcheck(get_activation_factory<ToastNotificationManager, IToastNotificationManagerStatics>()->_CreateToastNotifierWithId(applicationId, &notifier)); return from_abi(notifier); }
	static ptr<Data::Xml::Dom::XmlDocument> GetTemplateContent(ToastTemplateType type) { Data::Xml::Dom::XmlDocument* content; hrcheck(get_activation_factory<ToastNotificationManager, IToastNotificationManagerStatics>()->_GetTemplateContent(type, &content)); return from_abi(content); }
};
template<typename X> typename ToastNotificationManager_statics<X>::_History ToastNotificationManager_statics<X>::History;

template<typename X> struct statics<ToastNotificationManager, X> : X, Windows::UI::Notifications::ToastNotificationManager_statics<void> {
	typedef typename X::root_type ToastNotificationManager;
};
struct ToastNotificationManager : generate<ToastNotificationManager> {};

// ToastActivatedEventArgs
template<typename X> struct statics<ToastActivatedEventArgs, X> : X {
	typedef typename X::root_type ToastActivatedEventArgs;
};
struct ToastActivatedEventArgs : generate<ToastActivatedEventArgs> {};

// ToastNotificationHistoryChangedTriggerDetail
template<typename X> struct statics<ToastNotificationHistoryChangedTriggerDetail, X> : X {
	typedef typename X::root_type ToastNotificationHistoryChangedTriggerDetail;
};
struct ToastNotificationHistoryChangedTriggerDetail : generate<ToastNotificationHistoryChangedTriggerDetail> {};

// ToastNotificationActionTriggerDetail
template<typename X> struct statics<ToastNotificationActionTriggerDetail, X> : X {
	typedef typename X::root_type ToastNotificationActionTriggerDetail;
};
struct ToastNotificationActionTriggerDetail : generate<ToastNotificationActionTriggerDetail> {};
}}}
} // namespace iso_winrt
