#pragma once
// generated by isopod tools
// namespaces:
// Windows.Storage.Pickers.Provider

#include "Windows.Storage.Pickers.Provider.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Storage {
struct IStorageFile;
}}

// defs

template<> struct def<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::FileRemovedEventArgs> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::IFileRemovedEventArgs> {};
template<> struct def<Windows::Storage::Pickers::Provider::AddFileResult> : enum_type<int> {};
template<> struct def<Windows::Storage::Pickers::Provider::FileSelectionMode> : enum_type<int> {};
template<> struct def<Windows::Storage::Pickers::Provider::IFileOpenPickerUI> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::FileOpenPickerUI> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::IFileOpenPickerUI> {};
template<> struct def<Windows::Storage::Pickers::Provider::IPickerClosingEventArgs> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::PickerClosingEventArgs> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::IPickerClosingEventArgs> {};
template<> struct def<Windows::Storage::Pickers::Provider::IPickerClosingOperation> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::PickerClosingOperation> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::IPickerClosingOperation> {};
template<> struct def<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::PickerClosingDeferral> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::IPickerClosingDeferral> {};
template<> struct def<Windows::Storage::Pickers::Provider::SetFileNameResult> : enum_type<int> {};
template<> struct def<Windows::Storage::Pickers::Provider::IFileSavePickerUI> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::FileSavePickerUI> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::IFileSavePickerUI> {};
template<> struct def<Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs> {};
template<> struct def<Windows::Storage::Pickers::Provider::ITargetFileRequest> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::TargetFileRequest> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::ITargetFileRequest> {};
template<> struct def<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> : interface_type<> {};
template<> struct def<Windows::Storage::Pickers::Provider::TargetFileRequestDeferral> : class_type<Platform::Object, Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> {};

// uuids

template<> struct uuid<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs> { define_guid(0x13043DA7, 0x7FCA, 0x4C2B, 0x9E, 0xCA, 0x68, 0x90, 0xF9, 0xF0, 0x1, 0x85);};
template<> struct uuid<Windows::Storage::Pickers::Provider::IFileOpenPickerUI> { define_guid(0xDDA45A10, 0xF9D4, 0x40C4, 0x8A, 0xF5, 0xC5, 0xB6, 0xB5, 0xA6, 0x1D, 0x1D);};
template<> struct uuid<Windows::Storage::Pickers::Provider::IPickerClosingEventArgs> { define_guid(0x7E59F224, 0xB332, 0x4F12, 0x8B, 0x9F, 0xA8, 0xC2, 0xF0, 0x6B, 0x32, 0xCD);};
template<> struct uuid<Windows::Storage::Pickers::Provider::IPickerClosingOperation> { define_guid(0x4CE9FB84, 0xBEEE, 0x4E39, 0xA7, 0x73, 0xFC, 0x5F, 0xE, 0xAE, 0x32, 0x8D);};
template<> struct uuid<Windows::Storage::Pickers::Provider::IPickerClosingDeferral> { define_guid(0x7AF7F71E, 0x1A67, 0x4A31, 0xAE, 0x80, 0xE9, 0x7, 0x70, 0x8A, 0x61, 0x9B);};
template<> struct uuid<Windows::Storage::Pickers::Provider::IFileSavePickerUI> { define_guid(0x9656C1E7, 0x3E56, 0x43CC, 0x8A, 0x39, 0x33, 0xC7, 0x3D, 0x9D, 0x54, 0x2B);};
template<> struct uuid<Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs> { define_guid(0xB163DBC1, 0x1B51, 0x4C89, 0xA5, 0x91, 0xF, 0xD4, 0xB, 0x3C, 0x57, 0xC9);};
template<> struct uuid<Windows::Storage::Pickers::Provider::ITargetFileRequest> { define_guid(0x42BD3355, 0x7F88, 0x478B, 0x8E, 0x81, 0x69, 0xB, 0x20, 0x34, 0x6, 0x78);};
template<> struct uuid<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral> { define_guid(0x4AEE9D91, 0xBF15, 0x4DA9, 0x95, 0xF6, 0xF6, 0xB7, 0xD5, 0x58, 0x22, 0x5B);};

// types

namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

// IFileRemovedEventArgs
struct IFileRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
};
template<typename X> struct IFileRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileRemovedEventArgs_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
	};
	IFileRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFileRemovedEventArgs, X> : Windows::Storage::Pickers::Provider::IFileRemovedEventArgs_adaptor<X> { typedef adapt IFileRemovedEventArgs; };
struct IFileRemovedEventArgs : IFileRemovedEventArgs_raw, generate<IFileRemovedEventArgs> {};

// FileRemovedEventArgs
template<typename X> struct statics<FileRemovedEventArgs, X> : X {
	typedef typename X::root_type FileRemovedEventArgs;
};
struct FileRemovedEventArgs : generate<FileRemovedEventArgs> {};

// IFileOpenPickerUI
struct IFileOpenPickerUI_raw : IInspectable {
	virtual STDMETHODIMP _AddFile(HSTRING id, IStorageFile* file, AddFileResult *addResult);
	virtual STDMETHODIMP _RemoveFile(HSTRING id);
	virtual STDMETHODIMP _ContainsFile(HSTRING id, bool *isContained);
	virtual STDMETHODIMP _CanAddFile(IStorageFile* file, bool *canAdd);
	virtual STDMETHODIMP _get_AllowedFileTypes(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_SelectionMode(FileSelectionMode *value);
	virtual STDMETHODIMP _get_SettingsIdentifier(HSTRING *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _add_FileRemoved(Foundation::TypedEventHandler<FileOpenPickerUI*, FileRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FileRemoved(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Closing(Foundation::TypedEventHandler<FileOpenPickerUI*, PickerClosingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Closing(Foundation::EventRegistrationToken token);
};
template<typename X> struct IFileOpenPickerUI_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IFileOpenPickerUI_adaptor::AllowedFileTypes)->_get_AllowedFileTypes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} AllowedFileTypes;
		struct : property {
			FileSelectionMode get() { FileSelectionMode value; hrcheck(enc(&IFileOpenPickerUI_adaptor::SelectionMode)->_get_SelectionMode(&value)); return value; }
			FileSelectionMode operator()() { return get(); }
			operator FileSelectionMode () { return get(); }
		} SelectionMode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileOpenPickerUI_adaptor::SettingsIdentifier)->_get_SettingsIdentifier(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SettingsIdentifier;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileOpenPickerUI_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IFileOpenPickerUI_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<FileOpenPickerUI>, ptr<PickerClosingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IFileOpenPickerUI_adaptor::Closing)->_add_Closing(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IFileOpenPickerUI_adaptor::Closing)->_remove_Closing(token)); }
		} Closing;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<FileOpenPickerUI>, ptr<FileRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IFileOpenPickerUI_adaptor::FileRemoved)->_add_FileRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IFileOpenPickerUI_adaptor::FileRemoved)->_remove_FileRemoved(token)); }
		} FileRemoved;
	};
	AddFileResult AddFile(hstring_ref id, pptr<IStorageFile> file) { AddFileResult addResult; hrcheck(X::get()->_AddFile(id, file, &addResult)); return addResult; }
	void RemoveFile(hstring_ref id) { hrcheck(X::get()->_RemoveFile(id)); }
	bool ContainsFile(hstring_ref id) { bool isContained; hrcheck(X::get()->_ContainsFile(id, &isContained)); return isContained; }
	bool CanAddFile(pptr<IStorageFile> file) { bool canAdd; hrcheck(X::get()->_CanAddFile(file, &canAdd)); return canAdd; }
	IFileOpenPickerUI_adaptor() {}
};
template<typename X> struct adapt<IFileOpenPickerUI, X> : Windows::Storage::Pickers::Provider::IFileOpenPickerUI_adaptor<X> { typedef adapt IFileOpenPickerUI; };
struct IFileOpenPickerUI : IFileOpenPickerUI_raw, generate<IFileOpenPickerUI> {};

// FileOpenPickerUI
template<typename X> struct statics<FileOpenPickerUI, X> : X {
	typedef typename X::root_type FileOpenPickerUI;
};
struct FileOpenPickerUI : generate<FileOpenPickerUI> {};

// IPickerClosingEventArgs
struct IPickerClosingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ClosingOperation(PickerClosingOperation* *value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
};
template<typename X> struct IPickerClosingEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PickerClosingOperation> get() { PickerClosingOperation* value; hrcheck(enc(&IPickerClosingEventArgs_adaptor::ClosingOperation)->_get_ClosingOperation(&value)); return from_abi(value); }
			ptr<PickerClosingOperation> operator()() { return get(); }
			operator ptr<PickerClosingOperation> () { return get(); }
			ptr<PickerClosingOperation> operator->() { return get(); }
		} ClosingOperation;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPickerClosingEventArgs_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
	};
	IPickerClosingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPickerClosingEventArgs, X> : Windows::Storage::Pickers::Provider::IPickerClosingEventArgs_adaptor<X> { typedef adapt IPickerClosingEventArgs; };
struct IPickerClosingEventArgs : IPickerClosingEventArgs_raw, generate<IPickerClosingEventArgs> {};

// PickerClosingEventArgs
template<typename X> struct statics<PickerClosingEventArgs, X> : X {
	typedef typename X::root_type PickerClosingEventArgs;
};
struct PickerClosingEventArgs : generate<PickerClosingEventArgs> {};

// IPickerClosingOperation
struct IPickerClosingOperation_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(PickerClosingDeferral* *value);
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
};
template<typename X> struct IPickerClosingOperation_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPickerClosingOperation_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	ptr<PickerClosingDeferral> GetDeferral() { PickerClosingDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IPickerClosingOperation_adaptor() {}
};
template<typename X> struct adapt<IPickerClosingOperation, X> : Windows::Storage::Pickers::Provider::IPickerClosingOperation_adaptor<X> { typedef adapt IPickerClosingOperation; };
struct IPickerClosingOperation : IPickerClosingOperation_raw, generate<IPickerClosingOperation> {};

// PickerClosingOperation
template<typename X> struct statics<PickerClosingOperation, X> : X {
	typedef typename X::root_type PickerClosingOperation;
};
struct PickerClosingOperation : generate<PickerClosingOperation> {};

// IPickerClosingDeferral
struct IPickerClosingDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IPickerClosingDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IPickerClosingDeferral, X> : Windows::Storage::Pickers::Provider::IPickerClosingDeferral_adaptor<X> { typedef adapt IPickerClosingDeferral; };
struct IPickerClosingDeferral : IPickerClosingDeferral_raw, generate<IPickerClosingDeferral> {};

// PickerClosingDeferral
template<typename X> struct statics<PickerClosingDeferral, X> : X {
	typedef typename X::root_type PickerClosingDeferral;
};
struct PickerClosingDeferral : generate<PickerClosingDeferral> {};

// IFileSavePickerUI
struct IFileSavePickerUI_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_AllowedFileTypes(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_SettingsIdentifier(HSTRING *value);
	virtual STDMETHODIMP _get_FileName(HSTRING *value);
	virtual STDMETHODIMP _TrySetFileName(HSTRING value, SetFileNameResult *result);
	virtual STDMETHODIMP _add_FileNameChanged(Foundation::TypedEventHandler<FileSavePickerUI*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FileNameChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TargetFileRequested(Foundation::TypedEventHandler<FileSavePickerUI*, TargetFileRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TargetFileRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IFileSavePickerUI_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IFileSavePickerUI_adaptor::AllowedFileTypes)->_get_AllowedFileTypes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} AllowedFileTypes;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileSavePickerUI_adaptor::FileName)->_get_FileName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FileName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileSavePickerUI_adaptor::SettingsIdentifier)->_get_SettingsIdentifier(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SettingsIdentifier;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileSavePickerUI_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IFileSavePickerUI_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<FileSavePickerUI>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IFileSavePickerUI_adaptor::FileNameChanged)->_add_FileNameChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IFileSavePickerUI_adaptor::FileNameChanged)->_remove_FileNameChanged(token)); }
		} FileNameChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<FileSavePickerUI>, ptr<TargetFileRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IFileSavePickerUI_adaptor::TargetFileRequested)->_add_TargetFileRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IFileSavePickerUI_adaptor::TargetFileRequested)->_remove_TargetFileRequested(token)); }
		} TargetFileRequested;
	};
	SetFileNameResult TrySetFileName(hstring_ref value) { SetFileNameResult result; hrcheck(X::get()->_TrySetFileName(value, &result)); return result; }
	IFileSavePickerUI_adaptor() {}
};
template<typename X> struct adapt<IFileSavePickerUI, X> : Windows::Storage::Pickers::Provider::IFileSavePickerUI_adaptor<X> { typedef adapt IFileSavePickerUI; };
struct IFileSavePickerUI : IFileSavePickerUI_raw, generate<IFileSavePickerUI> {};

// FileSavePickerUI
template<typename X> struct statics<FileSavePickerUI, X> : X {
	typedef typename X::root_type FileSavePickerUI;
};
struct FileSavePickerUI : generate<FileSavePickerUI> {};

// ITargetFileRequestedEventArgs
struct ITargetFileRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(TargetFileRequest* *value);
};
template<typename X> struct ITargetFileRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<TargetFileRequest> get() { TargetFileRequest* value; hrcheck(enc(&ITargetFileRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<TargetFileRequest> operator()() { return get(); }
			operator ptr<TargetFileRequest> () { return get(); }
			ptr<TargetFileRequest> operator->() { return get(); }
		} Request;
	};
	ITargetFileRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITargetFileRequestedEventArgs, X> : Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs_adaptor<X> { typedef adapt ITargetFileRequestedEventArgs; };
struct ITargetFileRequestedEventArgs : ITargetFileRequestedEventArgs_raw, generate<ITargetFileRequestedEventArgs> {};

// TargetFileRequestedEventArgs
template<typename X> struct statics<TargetFileRequestedEventArgs, X> : X {
	typedef typename X::root_type TargetFileRequestedEventArgs;
};
struct TargetFileRequestedEventArgs : generate<TargetFileRequestedEventArgs> {};

// ITargetFileRequest
struct ITargetFileRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_TargetFile(IStorageFile* *value);
	virtual STDMETHODIMP _put_TargetFile(IStorageFile* value);
	virtual STDMETHODIMP _GetDeferral(TargetFileRequestDeferral* *value);
};
template<typename X> struct ITargetFileRequest_adaptor : X {
	union {
		struct : property {
			ptr<IStorageFile> get() { IStorageFile* value; hrcheck(enc(&ITargetFileRequest_adaptor::TargetFile)->_get_TargetFile(&value)); return from_abi(value); }
			ptr<IStorageFile> operator()() { return get(); }
			operator ptr<IStorageFile> () { return get(); }
			ptr<IStorageFile> operator->() { return get(); }
			void put(pptr<IStorageFile> value) { hrcheck(enc(&ITargetFileRequest_adaptor::TargetFile)->_put_TargetFile(value)); }
			void operator=(pptr<IStorageFile> value) { put(value); }
			void operator()(pptr<IStorageFile> value) { put(value); }
		} TargetFile;
	};
	ptr<TargetFileRequestDeferral> GetDeferral() { TargetFileRequestDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ITargetFileRequest_adaptor() {}
};
template<typename X> struct adapt<ITargetFileRequest, X> : Windows::Storage::Pickers::Provider::ITargetFileRequest_adaptor<X> { typedef adapt ITargetFileRequest; };
struct ITargetFileRequest : ITargetFileRequest_raw, generate<ITargetFileRequest> {};

// TargetFileRequest
template<typename X> struct statics<TargetFileRequest, X> : X {
	typedef typename X::root_type TargetFileRequest;
};
struct TargetFileRequest : generate<TargetFileRequest> {};

// ITargetFileRequestDeferral
struct ITargetFileRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct ITargetFileRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<ITargetFileRequestDeferral, X> : Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral_adaptor<X> { typedef adapt ITargetFileRequestDeferral; };
struct ITargetFileRequestDeferral : ITargetFileRequestDeferral_raw, generate<ITargetFileRequestDeferral> {};

// TargetFileRequestDeferral
template<typename X> struct statics<TargetFileRequestDeferral, X> : X {
	typedef typename X::root_type TargetFileRequestDeferral;
};
struct TargetFileRequestDeferral : generate<TargetFileRequestDeferral> {};
}}}}
} // namespace iso_winrt
