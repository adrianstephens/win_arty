#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.UserDataTasks.DataProvider

#include "Windows.ApplicationModel.UserDataTasks.DataProvider.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace UserDataTasks {
struct UserDataTask;
}}}

// defs

template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderConnection> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskDataProviderConnection> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderConnection> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListCreateOrUpdateTaskRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListSyncManagerSyncRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListSkipOccurrenceRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListCompleteTaskRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListDeleteTaskRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskDataProviderTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderTriggerDetails> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListCreateOrUpdateTaskRequest> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequest> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListSyncManagerSyncRequest> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequest> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListSkipOccurrenceRequest> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequest> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListCompleteTaskRequest> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequest> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::DataProvider::UserDataTaskListDeleteTaskRequest> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequest> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderTriggerDetails> { define_guid(0xAE273202, 0xB1C9, 0x453E, 0xAF, 0xC5, 0xB3, 0xA, 0xF3, 0xBD, 0x21, 0x7D);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderConnection> { define_guid(0x9FF39D1D, 0xA447, 0x428B, 0xAF, 0xE9, 0xE5, 0x40, 0x2B, 0xDE, 0xB0, 0x41);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequestEventArgs> { define_guid(0x12C55A52, 0xE378, 0x419B, 0xAE, 0x38, 0xA5, 0xE9, 0xE6, 0x4, 0x47, 0x6E);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequestEventArgs> { define_guid(0x8EAD1C12, 0x768E, 0x43BD, 0x83, 0x85, 0x5C, 0xDC, 0x35, 0x1F, 0xFD, 0xEA);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequestEventArgs> { define_guid(0x7A3B924A, 0xCC2F, 0x4E7B, 0xAA, 0xCD, 0xA5, 0xB9, 0xD2, 0x9C, 0xFA, 0x4E);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequestEventArgs> { define_guid(0xD77C393D, 0x4CF2, 0x48AD, 0x87, 0xFD, 0x96, 0x3F, 0xE, 0xAA, 0x7A, 0x95);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequestEventArgs> { define_guid(0x6063DAD9, 0xF562, 0x4145, 0x8E, 0xFE, 0xD5, 0x0, 0x78, 0xC9, 0x2B, 0x7F);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequest> { define_guid(0x2133772C, 0x55C2, 0x4300, 0x82, 0x79, 0x4, 0x32, 0x6E, 0x7, 0xCC, 0xE4);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequest> { define_guid(0x40A73807, 0x7590, 0x4149, 0xAE, 0x19, 0xB2, 0x11, 0x43, 0x1A, 0x9F, 0x48);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequest> { define_guid(0xAB87E34D, 0x1CD3, 0x431C, 0x9F, 0x58, 0x8, 0x9A, 0xA4, 0x33, 0x8D, 0x85);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequest> { define_guid(0xF65E14A3, 0x1A42, 0x49DA, 0x85, 0x52, 0x28, 0x73, 0xE5, 0x2C, 0x55, 0xEB);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequest> { define_guid(0x4B863C68, 0x7657, 0x4F3D, 0xB0, 0x74, 0xD4, 0x7E, 0xC8, 0xDF, 0x7, 0xE7);};

// types

namespace Windows { namespace ApplicationModel { namespace UserDataTasks { namespace DataProvider {

// IUserDataTaskDataProviderTriggerDetails
struct IUserDataTaskDataProviderTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Connection(UserDataTaskDataProviderConnection* *value);
};
template<typename X> struct IUserDataTaskDataProviderTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<UserDataTaskDataProviderConnection> get() { UserDataTaskDataProviderConnection* value; hrcheck(enc(&IUserDataTaskDataProviderTriggerDetails_adaptor::Connection)->_get_Connection(&value)); return from_abi(value); }
			ptr<UserDataTaskDataProviderConnection> operator()() { return get(); }
			operator ptr<UserDataTaskDataProviderConnection> () { return get(); }
			ptr<UserDataTaskDataProviderConnection> operator->() { return get(); }
		} Connection;
	};
	IUserDataTaskDataProviderTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskDataProviderTriggerDetails, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderTriggerDetails_adaptor<X> { typedef adapt IUserDataTaskDataProviderTriggerDetails; };
struct IUserDataTaskDataProviderTriggerDetails : IUserDataTaskDataProviderTriggerDetails_raw, generate<IUserDataTaskDataProviderTriggerDetails> {};

// IUserDataTaskDataProviderConnection
struct IUserDataTaskDataProviderConnection_raw : IInspectable {
	virtual STDMETHODIMP _add_CreateOrUpdateTaskRequested(Foundation::TypedEventHandler<UserDataTaskDataProviderConnection*, UserDataTaskListCreateOrUpdateTaskRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CreateOrUpdateTaskRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SyncRequested(Foundation::TypedEventHandler<UserDataTaskDataProviderConnection*, UserDataTaskListSyncManagerSyncRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SyncRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SkipOccurrenceRequested(Foundation::TypedEventHandler<UserDataTaskDataProviderConnection*, UserDataTaskListSkipOccurrenceRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SkipOccurrenceRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CompleteTaskRequested(Foundation::TypedEventHandler<UserDataTaskDataProviderConnection*, UserDataTaskListCompleteTaskRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CompleteTaskRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DeleteTaskRequested(Foundation::TypedEventHandler<UserDataTaskDataProviderConnection*, UserDataTaskListDeleteTaskRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DeleteTaskRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _Start();
};
template<typename X> struct IUserDataTaskDataProviderConnection_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UserDataTaskDataProviderConnection>, ptr<UserDataTaskListCompleteTaskRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::CompleteTaskRequested)->_add_CompleteTaskRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::CompleteTaskRequested)->_remove_CompleteTaskRequested(token)); }
		} CompleteTaskRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UserDataTaskDataProviderConnection>, ptr<UserDataTaskListCreateOrUpdateTaskRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::CreateOrUpdateTaskRequested)->_add_CreateOrUpdateTaskRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::CreateOrUpdateTaskRequested)->_remove_CreateOrUpdateTaskRequested(token)); }
		} CreateOrUpdateTaskRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UserDataTaskDataProviderConnection>, ptr<UserDataTaskListDeleteTaskRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::DeleteTaskRequested)->_add_DeleteTaskRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::DeleteTaskRequested)->_remove_DeleteTaskRequested(token)); }
		} DeleteTaskRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UserDataTaskDataProviderConnection>, ptr<UserDataTaskListSkipOccurrenceRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::SkipOccurrenceRequested)->_add_SkipOccurrenceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::SkipOccurrenceRequested)->_remove_SkipOccurrenceRequested(token)); }
		} SkipOccurrenceRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UserDataTaskDataProviderConnection>, ptr<UserDataTaskListSyncManagerSyncRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::SyncRequested)->_add_SyncRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IUserDataTaskDataProviderConnection_adaptor::SyncRequested)->_remove_SyncRequested(token)); }
		} SyncRequested;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	IUserDataTaskDataProviderConnection_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskDataProviderConnection, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskDataProviderConnection_adaptor<X> { typedef adapt IUserDataTaskDataProviderConnection; };
struct IUserDataTaskDataProviderConnection : IUserDataTaskDataProviderConnection_raw, generate<IUserDataTaskDataProviderConnection> {};

// UserDataTaskDataProviderConnection
template<typename X> struct statics<UserDataTaskDataProviderConnection, X> : X {
	typedef typename X::root_type UserDataTaskDataProviderConnection;
};
struct UserDataTaskDataProviderConnection : generate<UserDataTaskDataProviderConnection> {};

// IUserDataTaskListCreateOrUpdateTaskRequestEventArgs
struct IUserDataTaskListCreateOrUpdateTaskRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(UserDataTaskListCreateOrUpdateTaskRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IUserDataTaskListCreateOrUpdateTaskRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UserDataTaskListCreateOrUpdateTaskRequest> get() { UserDataTaskListCreateOrUpdateTaskRequest* value; hrcheck(enc(&IUserDataTaskListCreateOrUpdateTaskRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<UserDataTaskListCreateOrUpdateTaskRequest> operator()() { return get(); }
			operator ptr<UserDataTaskListCreateOrUpdateTaskRequest> () { return get(); }
			ptr<UserDataTaskListCreateOrUpdateTaskRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IUserDataTaskListCreateOrUpdateTaskRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListCreateOrUpdateTaskRequestEventArgs, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequestEventArgs_adaptor<X> { typedef adapt IUserDataTaskListCreateOrUpdateTaskRequestEventArgs; };
struct IUserDataTaskListCreateOrUpdateTaskRequestEventArgs : IUserDataTaskListCreateOrUpdateTaskRequestEventArgs_raw, generate<IUserDataTaskListCreateOrUpdateTaskRequestEventArgs> {};

// UserDataTaskListCreateOrUpdateTaskRequestEventArgs
template<typename X> struct statics<UserDataTaskListCreateOrUpdateTaskRequestEventArgs, X> : X {
	typedef typename X::root_type UserDataTaskListCreateOrUpdateTaskRequestEventArgs;
};
struct UserDataTaskListCreateOrUpdateTaskRequestEventArgs : generate<UserDataTaskListCreateOrUpdateTaskRequestEventArgs> {};

// IUserDataTaskListSyncManagerSyncRequestEventArgs
struct IUserDataTaskListSyncManagerSyncRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(UserDataTaskListSyncManagerSyncRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IUserDataTaskListSyncManagerSyncRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UserDataTaskListSyncManagerSyncRequest> get() { UserDataTaskListSyncManagerSyncRequest* value; hrcheck(enc(&IUserDataTaskListSyncManagerSyncRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<UserDataTaskListSyncManagerSyncRequest> operator()() { return get(); }
			operator ptr<UserDataTaskListSyncManagerSyncRequest> () { return get(); }
			ptr<UserDataTaskListSyncManagerSyncRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IUserDataTaskListSyncManagerSyncRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListSyncManagerSyncRequestEventArgs, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequestEventArgs_adaptor<X> { typedef adapt IUserDataTaskListSyncManagerSyncRequestEventArgs; };
struct IUserDataTaskListSyncManagerSyncRequestEventArgs : IUserDataTaskListSyncManagerSyncRequestEventArgs_raw, generate<IUserDataTaskListSyncManagerSyncRequestEventArgs> {};

// UserDataTaskListSyncManagerSyncRequestEventArgs
template<typename X> struct statics<UserDataTaskListSyncManagerSyncRequestEventArgs, X> : X {
	typedef typename X::root_type UserDataTaskListSyncManagerSyncRequestEventArgs;
};
struct UserDataTaskListSyncManagerSyncRequestEventArgs : generate<UserDataTaskListSyncManagerSyncRequestEventArgs> {};

// IUserDataTaskListSkipOccurrenceRequestEventArgs
struct IUserDataTaskListSkipOccurrenceRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(UserDataTaskListSkipOccurrenceRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IUserDataTaskListSkipOccurrenceRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UserDataTaskListSkipOccurrenceRequest> get() { UserDataTaskListSkipOccurrenceRequest* value; hrcheck(enc(&IUserDataTaskListSkipOccurrenceRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<UserDataTaskListSkipOccurrenceRequest> operator()() { return get(); }
			operator ptr<UserDataTaskListSkipOccurrenceRequest> () { return get(); }
			ptr<UserDataTaskListSkipOccurrenceRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IUserDataTaskListSkipOccurrenceRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListSkipOccurrenceRequestEventArgs, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequestEventArgs_adaptor<X> { typedef adapt IUserDataTaskListSkipOccurrenceRequestEventArgs; };
struct IUserDataTaskListSkipOccurrenceRequestEventArgs : IUserDataTaskListSkipOccurrenceRequestEventArgs_raw, generate<IUserDataTaskListSkipOccurrenceRequestEventArgs> {};

// UserDataTaskListSkipOccurrenceRequestEventArgs
template<typename X> struct statics<UserDataTaskListSkipOccurrenceRequestEventArgs, X> : X {
	typedef typename X::root_type UserDataTaskListSkipOccurrenceRequestEventArgs;
};
struct UserDataTaskListSkipOccurrenceRequestEventArgs : generate<UserDataTaskListSkipOccurrenceRequestEventArgs> {};

// IUserDataTaskListCompleteTaskRequestEventArgs
struct IUserDataTaskListCompleteTaskRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(UserDataTaskListCompleteTaskRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IUserDataTaskListCompleteTaskRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UserDataTaskListCompleteTaskRequest> get() { UserDataTaskListCompleteTaskRequest* value; hrcheck(enc(&IUserDataTaskListCompleteTaskRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<UserDataTaskListCompleteTaskRequest> operator()() { return get(); }
			operator ptr<UserDataTaskListCompleteTaskRequest> () { return get(); }
			ptr<UserDataTaskListCompleteTaskRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IUserDataTaskListCompleteTaskRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListCompleteTaskRequestEventArgs, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequestEventArgs_adaptor<X> { typedef adapt IUserDataTaskListCompleteTaskRequestEventArgs; };
struct IUserDataTaskListCompleteTaskRequestEventArgs : IUserDataTaskListCompleteTaskRequestEventArgs_raw, generate<IUserDataTaskListCompleteTaskRequestEventArgs> {};

// UserDataTaskListCompleteTaskRequestEventArgs
template<typename X> struct statics<UserDataTaskListCompleteTaskRequestEventArgs, X> : X {
	typedef typename X::root_type UserDataTaskListCompleteTaskRequestEventArgs;
};
struct UserDataTaskListCompleteTaskRequestEventArgs : generate<UserDataTaskListCompleteTaskRequestEventArgs> {};

// IUserDataTaskListDeleteTaskRequestEventArgs
struct IUserDataTaskListDeleteTaskRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(UserDataTaskListDeleteTaskRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IUserDataTaskListDeleteTaskRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UserDataTaskListDeleteTaskRequest> get() { UserDataTaskListDeleteTaskRequest* value; hrcheck(enc(&IUserDataTaskListDeleteTaskRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<UserDataTaskListDeleteTaskRequest> operator()() { return get(); }
			operator ptr<UserDataTaskListDeleteTaskRequest> () { return get(); }
			ptr<UserDataTaskListDeleteTaskRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IUserDataTaskListDeleteTaskRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListDeleteTaskRequestEventArgs, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequestEventArgs_adaptor<X> { typedef adapt IUserDataTaskListDeleteTaskRequestEventArgs; };
struct IUserDataTaskListDeleteTaskRequestEventArgs : IUserDataTaskListDeleteTaskRequestEventArgs_raw, generate<IUserDataTaskListDeleteTaskRequestEventArgs> {};

// UserDataTaskListDeleteTaskRequestEventArgs
template<typename X> struct statics<UserDataTaskListDeleteTaskRequestEventArgs, X> : X {
	typedef typename X::root_type UserDataTaskListDeleteTaskRequestEventArgs;
};
struct UserDataTaskListDeleteTaskRequestEventArgs : generate<UserDataTaskListDeleteTaskRequestEventArgs> {};

// IUserDataTaskListCreateOrUpdateTaskRequest
struct IUserDataTaskListCreateOrUpdateTaskRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskListId(HSTRING *value);
	virtual STDMETHODIMP _get_Task(UserDataTask* *value);
	virtual STDMETHODIMP _ReportCompletedAsync(UserDataTask* createdOrUpdatedUserDataTask, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IUserDataTaskListCreateOrUpdateTaskRequest_adaptor : X {
	union {
		struct : property {
			ptr<UserDataTask> get() { UserDataTask* value; hrcheck(enc(&IUserDataTaskListCreateOrUpdateTaskRequest_adaptor::Task)->_get_Task(&value)); return from_abi(value); }
			ptr<UserDataTask> operator()() { return get(); }
			operator ptr<UserDataTask> () { return get(); }
			ptr<UserDataTask> operator->() { return get(); }
		} Task;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListCreateOrUpdateTaskRequest_adaptor::TaskListId)->_get_TaskListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskListId;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync(pptr<UserDataTask> createdOrUpdatedUserDataTask) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(createdOrUpdatedUserDataTask, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IUserDataTaskListCreateOrUpdateTaskRequest_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListCreateOrUpdateTaskRequest, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCreateOrUpdateTaskRequest_adaptor<X> { typedef adapt IUserDataTaskListCreateOrUpdateTaskRequest; };
struct IUserDataTaskListCreateOrUpdateTaskRequest : IUserDataTaskListCreateOrUpdateTaskRequest_raw, generate<IUserDataTaskListCreateOrUpdateTaskRequest> {};

// IUserDataTaskListSyncManagerSyncRequest
struct IUserDataTaskListSyncManagerSyncRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskListId(HSTRING *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IUserDataTaskListSyncManagerSyncRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListSyncManagerSyncRequest_adaptor::TaskListId)->_get_TaskListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskListId;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IUserDataTaskListSyncManagerSyncRequest_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListSyncManagerSyncRequest, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSyncManagerSyncRequest_adaptor<X> { typedef adapt IUserDataTaskListSyncManagerSyncRequest; };
struct IUserDataTaskListSyncManagerSyncRequest : IUserDataTaskListSyncManagerSyncRequest_raw, generate<IUserDataTaskListSyncManagerSyncRequest> {};

// IUserDataTaskListSkipOccurrenceRequest
struct IUserDataTaskListSkipOccurrenceRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskListId(HSTRING *value);
	virtual STDMETHODIMP _get_TaskId(HSTRING *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IUserDataTaskListSkipOccurrenceRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListSkipOccurrenceRequest_adaptor::TaskId)->_get_TaskId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListSkipOccurrenceRequest_adaptor::TaskListId)->_get_TaskListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskListId;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IUserDataTaskListSkipOccurrenceRequest_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListSkipOccurrenceRequest, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListSkipOccurrenceRequest_adaptor<X> { typedef adapt IUserDataTaskListSkipOccurrenceRequest; };
struct IUserDataTaskListSkipOccurrenceRequest : IUserDataTaskListSkipOccurrenceRequest_raw, generate<IUserDataTaskListSkipOccurrenceRequest> {};

// IUserDataTaskListCompleteTaskRequest
struct IUserDataTaskListCompleteTaskRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskListId(HSTRING *value);
	virtual STDMETHODIMP _get_TaskId(HSTRING *value);
	virtual STDMETHODIMP _ReportCompletedAsync(HSTRING completedTaskId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IUserDataTaskListCompleteTaskRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListCompleteTaskRequest_adaptor::TaskId)->_get_TaskId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListCompleteTaskRequest_adaptor::TaskListId)->_get_TaskListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskListId;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync(hstring_ref completedTaskId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(completedTaskId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IUserDataTaskListCompleteTaskRequest_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListCompleteTaskRequest, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListCompleteTaskRequest_adaptor<X> { typedef adapt IUserDataTaskListCompleteTaskRequest; };
struct IUserDataTaskListCompleteTaskRequest : IUserDataTaskListCompleteTaskRequest_raw, generate<IUserDataTaskListCompleteTaskRequest> {};

// IUserDataTaskListDeleteTaskRequest
struct IUserDataTaskListDeleteTaskRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskListId(HSTRING *value);
	virtual STDMETHODIMP _get_TaskId(HSTRING *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IUserDataTaskListDeleteTaskRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListDeleteTaskRequest_adaptor::TaskId)->_get_TaskId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskListDeleteTaskRequest_adaptor::TaskListId)->_get_TaskListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskListId;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IUserDataTaskListDeleteTaskRequest_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListDeleteTaskRequest, X> : Windows::ApplicationModel::UserDataTasks::DataProvider::IUserDataTaskListDeleteTaskRequest_adaptor<X> { typedef adapt IUserDataTaskListDeleteTaskRequest; };
struct IUserDataTaskListDeleteTaskRequest : IUserDataTaskListDeleteTaskRequest_raw, generate<IUserDataTaskListDeleteTaskRequest> {};

// UserDataTaskDataProviderTriggerDetails
template<typename X> struct statics<UserDataTaskDataProviderTriggerDetails, X> : X {
	typedef typename X::root_type UserDataTaskDataProviderTriggerDetails;
};
struct UserDataTaskDataProviderTriggerDetails : generate<UserDataTaskDataProviderTriggerDetails> {};

// UserDataTaskListCreateOrUpdateTaskRequest
template<typename X> struct statics<UserDataTaskListCreateOrUpdateTaskRequest, X> : X {
	typedef typename X::root_type UserDataTaskListCreateOrUpdateTaskRequest;
};
struct UserDataTaskListCreateOrUpdateTaskRequest : generate<UserDataTaskListCreateOrUpdateTaskRequest> {};

// UserDataTaskListSyncManagerSyncRequest
template<typename X> struct statics<UserDataTaskListSyncManagerSyncRequest, X> : X {
	typedef typename X::root_type UserDataTaskListSyncManagerSyncRequest;
};
struct UserDataTaskListSyncManagerSyncRequest : generate<UserDataTaskListSyncManagerSyncRequest> {};

// UserDataTaskListSkipOccurrenceRequest
template<typename X> struct statics<UserDataTaskListSkipOccurrenceRequest, X> : X {
	typedef typename X::root_type UserDataTaskListSkipOccurrenceRequest;
};
struct UserDataTaskListSkipOccurrenceRequest : generate<UserDataTaskListSkipOccurrenceRequest> {};

// UserDataTaskListCompleteTaskRequest
template<typename X> struct statics<UserDataTaskListCompleteTaskRequest, X> : X {
	typedef typename X::root_type UserDataTaskListCompleteTaskRequest;
};
struct UserDataTaskListCompleteTaskRequest : generate<UserDataTaskListCompleteTaskRequest> {};

// UserDataTaskListDeleteTaskRequest
template<typename X> struct statics<UserDataTaskListDeleteTaskRequest, X> : X {
	typedef typename X::root_type UserDataTaskListDeleteTaskRequest;
};
struct UserDataTaskListDeleteTaskRequest : generate<UserDataTaskListDeleteTaskRequest> {};
}}}}
} // namespace iso_winrt
