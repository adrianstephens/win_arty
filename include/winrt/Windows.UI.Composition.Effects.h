#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Composition.Effects

#include "Windows.UI.Composition.Effects.0.h"
#include "Windows.Graphics.Effects.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::UI::Composition::Effects::ISceneLightingEffect> : interface_type<> {};
template<> struct def<Windows::UI::Composition::Effects::SceneLightingEffectReflectanceModel> : enum_type<int> {};
template<> struct def<Windows::UI::Composition::Effects::ISceneLightingEffect2> : interface_type<> {};
template<> struct def<Windows::UI::Composition::Effects::SceneLightingEffect> : class_type<Platform::Object, Windows::UI::Composition::Effects::ISceneLightingEffect, Windows::Graphics::Effects::IGraphicsEffect, Windows::Graphics::Effects::IGraphicsEffectSource, Windows::UI::Composition::Effects::ISceneLightingEffect2> {};

// uuids

template<> struct uuid<Windows::UI::Composition::Effects::ISceneLightingEffect> { define_guid(0x91BB5E52, 0x95D1, 0x4F8B, 0x9A, 0x5A, 0x64, 0x8, 0xB2, 0x4B, 0x8C, 0x6A);};
template<> struct uuid<Windows::UI::Composition::Effects::ISceneLightingEffect2> { define_guid(0x9E270E81, 0x72F0, 0x4C5C, 0x95, 0xF8, 0x8A, 0x6E, 0x0, 0x24, 0xF4, 0x9);};

// types

namespace Windows { namespace UI { namespace Composition { namespace Effects {

// ISceneLightingEffect
struct ISceneLightingEffect_raw : IInspectable {
	virtual STDMETHODIMP _get_AmbientAmount(float *value);
	virtual STDMETHODIMP _put_AmbientAmount(float value);
	virtual STDMETHODIMP _get_DiffuseAmount(float *value);
	virtual STDMETHODIMP _put_DiffuseAmount(float value);
	virtual STDMETHODIMP _get_NormalMapSource(Graphics::Effects::IGraphicsEffectSource* *value);
	virtual STDMETHODIMP _put_NormalMapSource(Graphics::Effects::IGraphicsEffectSource* value);
	virtual STDMETHODIMP _get_SpecularAmount(float *value);
	virtual STDMETHODIMP _put_SpecularAmount(float value);
	virtual STDMETHODIMP _get_SpecularShine(float *value);
	virtual STDMETHODIMP _put_SpecularShine(float value);
};
template<typename X> struct ISceneLightingEffect_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&ISceneLightingEffect_adaptor::AmbientAmount)->_get_AmbientAmount(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&ISceneLightingEffect_adaptor::AmbientAmount)->_put_AmbientAmount(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} AmbientAmount;
		struct : property {
			float get() { float value; hrcheck(enc(&ISceneLightingEffect_adaptor::DiffuseAmount)->_get_DiffuseAmount(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&ISceneLightingEffect_adaptor::DiffuseAmount)->_put_DiffuseAmount(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} DiffuseAmount;
		struct : property {
			ptr<Graphics::Effects::IGraphicsEffectSource> get() { Graphics::Effects::IGraphicsEffectSource* value; hrcheck(enc(&ISceneLightingEffect_adaptor::NormalMapSource)->_get_NormalMapSource(&value)); return from_abi(value); }
			ptr<Graphics::Effects::IGraphicsEffectSource> operator()() { return get(); }
			operator ptr<Graphics::Effects::IGraphicsEffectSource> () { return get(); }
			ptr<Graphics::Effects::IGraphicsEffectSource> operator->() { return get(); }
			void put(pptr<Graphics::Effects::IGraphicsEffectSource> value) { hrcheck(enc(&ISceneLightingEffect_adaptor::NormalMapSource)->_put_NormalMapSource(value)); }
			void operator=(pptr<Graphics::Effects::IGraphicsEffectSource> value) { put(value); }
			void operator()(pptr<Graphics::Effects::IGraphicsEffectSource> value) { put(value); }
		} NormalMapSource;
		struct : property {
			float get() { float value; hrcheck(enc(&ISceneLightingEffect_adaptor::SpecularAmount)->_get_SpecularAmount(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&ISceneLightingEffect_adaptor::SpecularAmount)->_put_SpecularAmount(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} SpecularAmount;
		struct : property {
			float get() { float value; hrcheck(enc(&ISceneLightingEffect_adaptor::SpecularShine)->_get_SpecularShine(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&ISceneLightingEffect_adaptor::SpecularShine)->_put_SpecularShine(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} SpecularShine;
	};
	ISceneLightingEffect_adaptor() {}
};
template<typename X> struct adapt<ISceneLightingEffect, X> : Windows::UI::Composition::Effects::ISceneLightingEffect_adaptor<X> { typedef adapt ISceneLightingEffect; };
struct ISceneLightingEffect : ISceneLightingEffect_raw, generate<ISceneLightingEffect> {};

// ISceneLightingEffect2
struct ISceneLightingEffect2_raw : IInspectable {
	virtual STDMETHODIMP _get_ReflectanceModel(SceneLightingEffectReflectanceModel *value);
	virtual STDMETHODIMP _put_ReflectanceModel(SceneLightingEffectReflectanceModel value);
};
template<typename X> struct ISceneLightingEffect2_adaptor : X {
	union {
		struct : property {
			SceneLightingEffectReflectanceModel get() { SceneLightingEffectReflectanceModel value; hrcheck(enc(&ISceneLightingEffect2_adaptor::ReflectanceModel)->_get_ReflectanceModel(&value)); return value; }
			SceneLightingEffectReflectanceModel operator()() { return get(); }
			operator SceneLightingEffectReflectanceModel () { return get(); }
			void put(SceneLightingEffectReflectanceModel value) { hrcheck(enc(&ISceneLightingEffect2_adaptor::ReflectanceModel)->_put_ReflectanceModel(value)); }
			void operator=(SceneLightingEffectReflectanceModel value) { put(value); }
			void operator()(SceneLightingEffectReflectanceModel value) { put(value); }
		} ReflectanceModel;
	};
	ISceneLightingEffect2_adaptor() {}
};
template<typename X> struct adapt<ISceneLightingEffect2, X> : Windows::UI::Composition::Effects::ISceneLightingEffect2_adaptor<X> { typedef adapt ISceneLightingEffect2; };
struct ISceneLightingEffect2 : ISceneLightingEffect2_raw, generate<ISceneLightingEffect2> {};

// SceneLightingEffect
template<typename X> struct statics<SceneLightingEffect, X> : X {
	typedef typename X::root_type SceneLightingEffect;
};
struct SceneLightingEffect : generate<SceneLightingEffect> {};
}}}}
} // namespace iso_winrt
