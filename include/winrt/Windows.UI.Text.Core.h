#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Text.Core

#include "Windows.UI.Text.Core.0.h"
#include "Windows.UI.Text.0.h"
#include "Windows.UI.ViewManagement.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Globalization {
struct Language;
}}

// defs

template<> struct def<Windows::UI::Text::Core::CoreTextInputScope> : enum_type<int> {};
template<> struct def<Windows::UI::Text::Core::CoreTextInputPaneDisplayPolicy> : enum_type<int> {};
template<> struct def<Windows::UI::Text::Core::CoreTextTextUpdatingResult> : enum_type<int> {};
template<> struct def<Windows::UI::Text::Core::CoreTextSelectionUpdatingResult> : enum_type<int> {};
template<> struct def<Windows::UI::Text::Core::CoreTextFormatUpdatingResult> : enum_type<int> {};
template<> struct def<Windows::UI::Text::Core::CoreTextFormatUpdatingReason> : enum_type<int> {};
template<> struct def<Windows::UI::Text::Core::CoreTextRange> : value_type<int, int> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextTextRequest> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextTextRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextTextRequest> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextTextRequest> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextSelectionRequest> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextSelectionRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextSelectionRequest> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextSelectionRequest> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextLayoutBounds> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextLayoutRequest> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextLayoutBounds> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextLayoutBounds> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextLayoutRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextLayoutRequest> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextLayoutRequest> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextTextUpdatingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextSelectionUpdatingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextFormatUpdatingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextCompositionStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextCompositionCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextCompositionSegment> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextCompositionSegment> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextCompositionSegment> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextEditContext2> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextEditContext> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextEditContext> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextEditContext, Windows::UI::Text::Core::ICoreTextEditContext2> {};
template<> struct def<Windows::UI::Text::Core::CoreTextTextRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextTextRequestedEventArgs> {};
template<> struct def<Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextSelectionRequestedEventArgs> {};
template<> struct def<Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextLayoutRequestedEventArgs> {};
template<> struct def<Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextTextUpdatingEventArgs> {};
template<> struct def<Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextSelectionUpdatingEventArgs> {};
template<> struct def<Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextFormatUpdatingEventArgs> {};
template<> struct def<Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextCompositionStartedEventArgs> {};
template<> struct def<Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextCompositionCompletedEventArgs> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextServicesManager> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextServicesManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextServicesManager> : class_type<Platform::Object, Windows::UI::Text::Core::ICoreTextServicesManager> {};
template<> struct def<Windows::UI::Text::Core::ICoreTextServicesStatics> : interface_type<> {};
template<> struct def<Windows::UI::Text::Core::CoreTextServicesConstants> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::UI::Text::Core::ICoreTextTextRequest> { define_guid(0x50D950A9, 0xF51E, 0x4CC1, 0x8C, 0xA1, 0xE6, 0x34, 0x6D, 0x1A, 0x61, 0xBE);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextTextRequestedEventArgs> { define_guid(0xF096A2D0, 0x41C6, 0x4C02, 0x8B, 0x1A, 0xD9, 0x53, 0xB0, 0xC, 0xAB, 0xB3);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextSelectionRequest> { define_guid(0xF0A70403, 0x208B, 0x4301, 0x88, 0x3C, 0x74, 0xCA, 0x74, 0x85, 0xFD, 0x8D);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextSelectionRequestedEventArgs> { define_guid(0x13C6682B, 0xF614, 0x421A, 0x8F, 0x4B, 0x9E, 0xC8, 0xA5, 0xA3, 0x7F, 0xCD);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextLayoutBounds> { define_guid(0xE972C974, 0x4436, 0x4917, 0x80, 0xD0, 0xA5, 0x25, 0xE4, 0xCA, 0x67, 0x80);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextLayoutRequest> { define_guid(0x2555A8CC, 0x51FD, 0x4F03, 0x98, 0xBF, 0xAC, 0x78, 0x17, 0x4D, 0x68, 0xE0);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextLayoutRequestedEventArgs> { define_guid(0xB1DC6AE0, 0x9A7B, 0x4E9E, 0xA5, 0x66, 0x4A, 0x6B, 0x5F, 0x8A, 0xD6, 0x76);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextTextUpdatingEventArgs> { define_guid(0xEEA7918D, 0xCC2B, 0x4F03, 0x8F, 0xF6, 0x2, 0xFD, 0x21, 0x7D, 0xB4, 0x50);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextSelectionUpdatingEventArgs> { define_guid(0xD445839F, 0xFE7F, 0x4BD5, 0x8A, 0x26, 0x9, 0x22, 0xC1, 0xB3, 0xE6, 0x39);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextFormatUpdatingEventArgs> { define_guid(0x7310BD33, 0xB4A8, 0x43B1, 0xB3, 0x7B, 0x7, 0x24, 0xD4, 0xAC, 0xA7, 0xAB);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextCompositionStartedEventArgs> { define_guid(0x276B16A9, 0x64E7, 0x4AB0, 0xBC, 0x4B, 0xA0, 0x2D, 0x73, 0x83, 0x5B, 0xFB);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextCompositionCompletedEventArgs> { define_guid(0x1F34EBB6, 0xB79F, 0x4121, 0xA5, 0xE7, 0xFD, 0xA9, 0xB8, 0x61, 0x6E, 0x30);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextCompositionSegment> { define_guid(0x776C6BD9, 0x4EAD, 0x4DA7, 0x8F, 0x47, 0x3A, 0x88, 0xB5, 0x23, 0xCC, 0x34);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextEditContext2> { define_guid(0xB1867DBB, 0x83B, 0x49E1, 0xB2, 0x81, 0x2B, 0x35, 0xD6, 0x2B, 0xF4, 0x66);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextEditContext> { define_guid(0xBF6608AF, 0x4041, 0x47C3, 0xB2, 0x63, 0xA9, 0x18, 0xEB, 0x5E, 0xAE, 0xF2);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextServicesManager> { define_guid(0xC2507D83, 0x6E0A, 0x4A8A, 0xBD, 0xF8, 0x19, 0x48, 0x87, 0x48, 0x54, 0xBA);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextServicesManagerStatics> { define_guid(0x1520A388, 0xE2CF, 0x4D65, 0xAE, 0xB9, 0xB3, 0x2D, 0x86, 0xFE, 0x39, 0xB9);};
template<> struct uuid<Windows::UI::Text::Core::ICoreTextServicesStatics> { define_guid(0x91859A46, 0xECCF, 0x47A4, 0x8A, 0xE7, 0x9, 0x8A, 0x9C, 0x6F, 0xBB, 0x15);};

// types

namespace Windows { namespace UI { namespace Text { namespace Core {

// ICoreTextTextRequest
struct ICoreTextTextRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Range(CoreTextRange *value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextTextRequest_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextTextRequest_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextTextRequest_adaptor::Range)->_get_Range(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
		} Range;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICoreTextTextRequest_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICoreTextTextRequest_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextTextRequest_adaptor() {}
};
template<typename X> struct adapt<ICoreTextTextRequest, X> : Windows::UI::Text::Core::ICoreTextTextRequest_adaptor<X> { typedef adapt ICoreTextTextRequest; };
struct ICoreTextTextRequest : ICoreTextTextRequest_raw, generate<ICoreTextTextRequest> {};

// ICoreTextTextRequestedEventArgs
struct ICoreTextTextRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(CoreTextTextRequest* *value);
};
template<typename X> struct ICoreTextTextRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<CoreTextTextRequest> get() { CoreTextTextRequest* value; hrcheck(enc(&ICoreTextTextRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<CoreTextTextRequest> operator()() { return get(); }
			operator ptr<CoreTextTextRequest> () { return get(); }
			ptr<CoreTextTextRequest> operator->() { return get(); }
		} Request;
	};
	ICoreTextTextRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextTextRequestedEventArgs, X> : Windows::UI::Text::Core::ICoreTextTextRequestedEventArgs_adaptor<X> { typedef adapt ICoreTextTextRequestedEventArgs; };
struct ICoreTextTextRequestedEventArgs : ICoreTextTextRequestedEventArgs_raw, generate<ICoreTextTextRequestedEventArgs> {};

// CoreTextTextRequest
template<typename X> struct statics<CoreTextTextRequest, X> : X {
	typedef typename X::root_type CoreTextTextRequest;
};
struct CoreTextTextRequest : generate<CoreTextTextRequest> {};

// ICoreTextSelectionRequest
struct ICoreTextSelectionRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Selection(CoreTextRange *value);
	virtual STDMETHODIMP _put_Selection(CoreTextRange value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextSelectionRequest_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextSelectionRequest_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextSelectionRequest_adaptor::Selection)->_get_Selection(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
			void put(const CoreTextRange& value) { hrcheck(enc(&ICoreTextSelectionRequest_adaptor::Selection)->_put_Selection(value)); }
			void operator=(const CoreTextRange& value) { put(value); }
			void operator()(const CoreTextRange& value) { put(value); }
		} Selection;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextSelectionRequest_adaptor() {}
};
template<typename X> struct adapt<ICoreTextSelectionRequest, X> : Windows::UI::Text::Core::ICoreTextSelectionRequest_adaptor<X> { typedef adapt ICoreTextSelectionRequest; };
struct ICoreTextSelectionRequest : ICoreTextSelectionRequest_raw, generate<ICoreTextSelectionRequest> {};

// ICoreTextSelectionRequestedEventArgs
struct ICoreTextSelectionRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(CoreTextSelectionRequest* *value);
};
template<typename X> struct ICoreTextSelectionRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<CoreTextSelectionRequest> get() { CoreTextSelectionRequest* value; hrcheck(enc(&ICoreTextSelectionRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<CoreTextSelectionRequest> operator()() { return get(); }
			operator ptr<CoreTextSelectionRequest> () { return get(); }
			ptr<CoreTextSelectionRequest> operator->() { return get(); }
		} Request;
	};
	ICoreTextSelectionRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextSelectionRequestedEventArgs, X> : Windows::UI::Text::Core::ICoreTextSelectionRequestedEventArgs_adaptor<X> { typedef adapt ICoreTextSelectionRequestedEventArgs; };
struct ICoreTextSelectionRequestedEventArgs : ICoreTextSelectionRequestedEventArgs_raw, generate<ICoreTextSelectionRequestedEventArgs> {};

// CoreTextSelectionRequest
template<typename X> struct statics<CoreTextSelectionRequest, X> : X {
	typedef typename X::root_type CoreTextSelectionRequest;
};
struct CoreTextSelectionRequest : generate<CoreTextSelectionRequest> {};

// ICoreTextLayoutBounds
struct ICoreTextLayoutBounds_raw : IInspectable {
	virtual STDMETHODIMP _get_TextBounds(Foundation::Rect *value);
	virtual STDMETHODIMP _put_TextBounds(Foundation::Rect value);
	virtual STDMETHODIMP _get_ControlBounds(Foundation::Rect *value);
	virtual STDMETHODIMP _put_ControlBounds(Foundation::Rect value);
};
template<typename X> struct ICoreTextLayoutBounds_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ICoreTextLayoutBounds_adaptor::ControlBounds)->_get_ControlBounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
			void put(const Foundation::Rect& value) { hrcheck(enc(&ICoreTextLayoutBounds_adaptor::ControlBounds)->_put_ControlBounds(value)); }
			void operator=(const Foundation::Rect& value) { put(value); }
			void operator()(const Foundation::Rect& value) { put(value); }
		} ControlBounds;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ICoreTextLayoutBounds_adaptor::TextBounds)->_get_TextBounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
			void put(const Foundation::Rect& value) { hrcheck(enc(&ICoreTextLayoutBounds_adaptor::TextBounds)->_put_TextBounds(value)); }
			void operator=(const Foundation::Rect& value) { put(value); }
			void operator()(const Foundation::Rect& value) { put(value); }
		} TextBounds;
	};
	ICoreTextLayoutBounds_adaptor() {}
};
template<typename X> struct adapt<ICoreTextLayoutBounds, X> : Windows::UI::Text::Core::ICoreTextLayoutBounds_adaptor<X> { typedef adapt ICoreTextLayoutBounds; };
struct ICoreTextLayoutBounds : ICoreTextLayoutBounds_raw, generate<ICoreTextLayoutBounds> {};

// ICoreTextLayoutRequest
struct ICoreTextLayoutRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Range(CoreTextRange *value);
	virtual STDMETHODIMP _get_LayoutBounds(CoreTextLayoutBounds* *value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextLayoutRequest_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextLayoutRequest_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			ptr<CoreTextLayoutBounds> get() { CoreTextLayoutBounds* value; hrcheck(enc(&ICoreTextLayoutRequest_adaptor::LayoutBounds)->_get_LayoutBounds(&value)); return from_abi(value); }
			ptr<CoreTextLayoutBounds> operator()() { return get(); }
			operator ptr<CoreTextLayoutBounds> () { return get(); }
			ptr<CoreTextLayoutBounds> operator->() { return get(); }
		} LayoutBounds;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextLayoutRequest_adaptor::Range)->_get_Range(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
		} Range;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextLayoutRequest_adaptor() {}
};
template<typename X> struct adapt<ICoreTextLayoutRequest, X> : Windows::UI::Text::Core::ICoreTextLayoutRequest_adaptor<X> { typedef adapt ICoreTextLayoutRequest; };
struct ICoreTextLayoutRequest : ICoreTextLayoutRequest_raw, generate<ICoreTextLayoutRequest> {};

// CoreTextLayoutBounds
template<typename X> struct statics<CoreTextLayoutBounds, X> : X {
	typedef typename X::root_type CoreTextLayoutBounds;
};
struct CoreTextLayoutBounds : generate<CoreTextLayoutBounds> {};

// ICoreTextLayoutRequestedEventArgs
struct ICoreTextLayoutRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(CoreTextLayoutRequest* *value);
};
template<typename X> struct ICoreTextLayoutRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<CoreTextLayoutRequest> get() { CoreTextLayoutRequest* value; hrcheck(enc(&ICoreTextLayoutRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<CoreTextLayoutRequest> operator()() { return get(); }
			operator ptr<CoreTextLayoutRequest> () { return get(); }
			ptr<CoreTextLayoutRequest> operator->() { return get(); }
		} Request;
	};
	ICoreTextLayoutRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextLayoutRequestedEventArgs, X> : Windows::UI::Text::Core::ICoreTextLayoutRequestedEventArgs_adaptor<X> { typedef adapt ICoreTextLayoutRequestedEventArgs; };
struct ICoreTextLayoutRequestedEventArgs : ICoreTextLayoutRequestedEventArgs_raw, generate<ICoreTextLayoutRequestedEventArgs> {};

// CoreTextLayoutRequest
template<typename X> struct statics<CoreTextLayoutRequest, X> : X {
	typedef typename X::root_type CoreTextLayoutRequest;
};
struct CoreTextLayoutRequest : generate<CoreTextLayoutRequest> {};

// ICoreTextTextUpdatingEventArgs
struct ICoreTextTextUpdatingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Range(CoreTextRange *value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _get_NewSelection(CoreTextRange *value);
	virtual STDMETHODIMP _get_InputLanguage(Globalization::Language* *value);
	virtual STDMETHODIMP _get_Result(CoreTextTextUpdatingResult *value);
	virtual STDMETHODIMP _put_Result(CoreTextTextUpdatingResult value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextTextUpdatingEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Globalization::Language> get() { Globalization::Language* value; hrcheck(enc(&ICoreTextTextUpdatingEventArgs_adaptor::InputLanguage)->_get_InputLanguage(&value)); return from_abi(value); }
			ptr<Globalization::Language> operator()() { return get(); }
			operator ptr<Globalization::Language> () { return get(); }
			ptr<Globalization::Language> operator->() { return get(); }
		} InputLanguage;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextTextUpdatingEventArgs_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextTextUpdatingEventArgs_adaptor::NewSelection)->_get_NewSelection(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
		} NewSelection;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextTextUpdatingEventArgs_adaptor::Range)->_get_Range(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
		} Range;
		struct : property {
			CoreTextTextUpdatingResult get() { CoreTextTextUpdatingResult value; hrcheck(enc(&ICoreTextTextUpdatingEventArgs_adaptor::Result)->_get_Result(&value)); return value; }
			CoreTextTextUpdatingResult operator()() { return get(); }
			operator CoreTextTextUpdatingResult () { return get(); }
			void put(CoreTextTextUpdatingResult value) { hrcheck(enc(&ICoreTextTextUpdatingEventArgs_adaptor::Result)->_put_Result(value)); }
			void operator=(CoreTextTextUpdatingResult value) { put(value); }
			void operator()(CoreTextTextUpdatingResult value) { put(value); }
		} Result;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICoreTextTextUpdatingEventArgs_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextTextUpdatingEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextTextUpdatingEventArgs, X> : Windows::UI::Text::Core::ICoreTextTextUpdatingEventArgs_adaptor<X> { typedef adapt ICoreTextTextUpdatingEventArgs; };
struct ICoreTextTextUpdatingEventArgs : ICoreTextTextUpdatingEventArgs_raw, generate<ICoreTextTextUpdatingEventArgs> {};

// ICoreTextSelectionUpdatingEventArgs
struct ICoreTextSelectionUpdatingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Selection(CoreTextRange *value);
	virtual STDMETHODIMP _get_Result(CoreTextSelectionUpdatingResult *value);
	virtual STDMETHODIMP _put_Result(CoreTextSelectionUpdatingResult value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextSelectionUpdatingEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextSelectionUpdatingEventArgs_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			CoreTextSelectionUpdatingResult get() { CoreTextSelectionUpdatingResult value; hrcheck(enc(&ICoreTextSelectionUpdatingEventArgs_adaptor::Result)->_get_Result(&value)); return value; }
			CoreTextSelectionUpdatingResult operator()() { return get(); }
			operator CoreTextSelectionUpdatingResult () { return get(); }
			void put(CoreTextSelectionUpdatingResult value) { hrcheck(enc(&ICoreTextSelectionUpdatingEventArgs_adaptor::Result)->_put_Result(value)); }
			void operator=(CoreTextSelectionUpdatingResult value) { put(value); }
			void operator()(CoreTextSelectionUpdatingResult value) { put(value); }
		} Result;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextSelectionUpdatingEventArgs_adaptor::Selection)->_get_Selection(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
		} Selection;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextSelectionUpdatingEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextSelectionUpdatingEventArgs, X> : Windows::UI::Text::Core::ICoreTextSelectionUpdatingEventArgs_adaptor<X> { typedef adapt ICoreTextSelectionUpdatingEventArgs; };
struct ICoreTextSelectionUpdatingEventArgs : ICoreTextSelectionUpdatingEventArgs_raw, generate<ICoreTextSelectionUpdatingEventArgs> {};

// ICoreTextFormatUpdatingEventArgs
struct ICoreTextFormatUpdatingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Range(CoreTextRange *value);
	virtual STDMETHODIMP _get_TextColor(Foundation::IReference<ViewManagement::UIElementType>* *value);
	virtual STDMETHODIMP _get_BackgroundColor(Foundation::IReference<ViewManagement::UIElementType>* *value);
	virtual STDMETHODIMP _get_UnderlineColor(Foundation::IReference<ViewManagement::UIElementType>* *value);
	virtual STDMETHODIMP _get_UnderlineType(Foundation::IReference<Text::UnderlineType>* *value);
	virtual STDMETHODIMP _get_Reason(CoreTextFormatUpdatingReason *value);
	virtual STDMETHODIMP _get_Result(CoreTextFormatUpdatingResult *value);
	virtual STDMETHODIMP _put_Result(CoreTextFormatUpdatingResult value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextFormatUpdatingEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<ViewManagement::UIElementType>> get() { Foundation::IReference<ViewManagement::UIElementType>* value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<ViewManagement::UIElementType>> operator()() { return get(); }
			operator ptr<Foundation::IReference<ViewManagement::UIElementType>> () { return get(); }
			ptr<Foundation::IReference<ViewManagement::UIElementType>> operator->() { return get(); }
		} BackgroundColor;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::Range)->_get_Range(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
		} Range;
		struct : property {
			CoreTextFormatUpdatingReason get() { CoreTextFormatUpdatingReason value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			CoreTextFormatUpdatingReason operator()() { return get(); }
			operator CoreTextFormatUpdatingReason () { return get(); }
		} Reason;
		struct : property {
			CoreTextFormatUpdatingResult get() { CoreTextFormatUpdatingResult value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::Result)->_get_Result(&value)); return value; }
			CoreTextFormatUpdatingResult operator()() { return get(); }
			operator CoreTextFormatUpdatingResult () { return get(); }
			void put(CoreTextFormatUpdatingResult value) { hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::Result)->_put_Result(value)); }
			void operator=(CoreTextFormatUpdatingResult value) { put(value); }
			void operator()(CoreTextFormatUpdatingResult value) { put(value); }
		} Result;
		struct : property {
			ptr<Foundation::IReference<ViewManagement::UIElementType>> get() { Foundation::IReference<ViewManagement::UIElementType>* value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::TextColor)->_get_TextColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<ViewManagement::UIElementType>> operator()() { return get(); }
			operator ptr<Foundation::IReference<ViewManagement::UIElementType>> () { return get(); }
			ptr<Foundation::IReference<ViewManagement::UIElementType>> operator->() { return get(); }
		} TextColor;
		struct : property {
			ptr<Foundation::IReference<ViewManagement::UIElementType>> get() { Foundation::IReference<ViewManagement::UIElementType>* value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::UnderlineColor)->_get_UnderlineColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<ViewManagement::UIElementType>> operator()() { return get(); }
			operator ptr<Foundation::IReference<ViewManagement::UIElementType>> () { return get(); }
			ptr<Foundation::IReference<ViewManagement::UIElementType>> operator->() { return get(); }
		} UnderlineColor;
		struct : property {
			ptr<Foundation::IReference<Text::UnderlineType>> get() { Foundation::IReference<Text::UnderlineType>* value; hrcheck(enc(&ICoreTextFormatUpdatingEventArgs_adaptor::UnderlineType)->_get_UnderlineType(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Text::UnderlineType>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Text::UnderlineType>> () { return get(); }
			ptr<Foundation::IReference<Text::UnderlineType>> operator->() { return get(); }
		} UnderlineType;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextFormatUpdatingEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextFormatUpdatingEventArgs, X> : Windows::UI::Text::Core::ICoreTextFormatUpdatingEventArgs_adaptor<X> { typedef adapt ICoreTextFormatUpdatingEventArgs; };
struct ICoreTextFormatUpdatingEventArgs : ICoreTextFormatUpdatingEventArgs_raw, generate<ICoreTextFormatUpdatingEventArgs> {};

// ICoreTextCompositionStartedEventArgs
struct ICoreTextCompositionStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextCompositionStartedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextCompositionStartedEventArgs_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextCompositionStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextCompositionStartedEventArgs, X> : Windows::UI::Text::Core::ICoreTextCompositionStartedEventArgs_adaptor<X> { typedef adapt ICoreTextCompositionStartedEventArgs; };
struct ICoreTextCompositionStartedEventArgs : ICoreTextCompositionStartedEventArgs_raw, generate<ICoreTextCompositionStartedEventArgs> {};

// ICoreTextCompositionCompletedEventArgs
struct ICoreTextCompositionCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _get_CompositionSegments(Foundation::Collections::IVectorView<CoreTextCompositionSegment*>* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICoreTextCompositionCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<CoreTextCompositionSegment>>> get() { Foundation::Collections::IVectorView<CoreTextCompositionSegment*>* value; hrcheck(enc(&ICoreTextCompositionCompletedEventArgs_adaptor::CompositionSegments)->_get_CompositionSegments(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<CoreTextCompositionSegment>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<CoreTextCompositionSegment>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<CoreTextCompositionSegment>>> operator->() { return get(); }
		} CompositionSegments;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextCompositionCompletedEventArgs_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICoreTextCompositionCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreTextCompositionCompletedEventArgs, X> : Windows::UI::Text::Core::ICoreTextCompositionCompletedEventArgs_adaptor<X> { typedef adapt ICoreTextCompositionCompletedEventArgs; };
struct ICoreTextCompositionCompletedEventArgs : ICoreTextCompositionCompletedEventArgs_raw, generate<ICoreTextCompositionCompletedEventArgs> {};

// ICoreTextCompositionSegment
struct ICoreTextCompositionSegment_raw : IInspectable {
	virtual STDMETHODIMP _get_PreconversionString(HSTRING *value);
	virtual STDMETHODIMP _get_Range(CoreTextRange *value);
};
template<typename X> struct ICoreTextCompositionSegment_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICoreTextCompositionSegment_adaptor::PreconversionString)->_get_PreconversionString(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PreconversionString;
		struct : property {
			CoreTextRange get() { CoreTextRange value; hrcheck(enc(&ICoreTextCompositionSegment_adaptor::Range)->_get_Range(&value)); return value; }
			CoreTextRange operator()() { return get(); }
			operator CoreTextRange () { return get(); }
		} Range;
	};
	ICoreTextCompositionSegment_adaptor() {}
};
template<typename X> struct adapt<ICoreTextCompositionSegment, X> : Windows::UI::Text::Core::ICoreTextCompositionSegment_adaptor<X> { typedef adapt ICoreTextCompositionSegment; };
struct ICoreTextCompositionSegment : ICoreTextCompositionSegment_raw, generate<ICoreTextCompositionSegment> {};

// CoreTextCompositionSegment
template<typename X> struct statics<CoreTextCompositionSegment, X> : X {
	typedef typename X::root_type CoreTextCompositionSegment;
};
struct CoreTextCompositionSegment : generate<CoreTextCompositionSegment> {};

// ICoreTextEditContext2
struct ICoreTextEditContext2_raw : IInspectable {
	virtual STDMETHODIMP _add_NotifyFocusLeaveCompleted(Foundation::TypedEventHandler<CoreTextEditContext*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_NotifyFocusLeaveCompleted(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ICoreTextEditContext2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext2_adaptor::NotifyFocusLeaveCompleted)->_add_NotifyFocusLeaveCompleted(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext2_adaptor::NotifyFocusLeaveCompleted)->_remove_NotifyFocusLeaveCompleted(cookie)); }
		} NotifyFocusLeaveCompleted;
	};
	ICoreTextEditContext2_adaptor() {}
};
template<typename X> struct adapt<ICoreTextEditContext2, X> : Windows::UI::Text::Core::ICoreTextEditContext2_adaptor<X> { typedef adapt ICoreTextEditContext2; };
struct ICoreTextEditContext2 : ICoreTextEditContext2_raw, generate<ICoreTextEditContext2> {};

// ICoreTextEditContext
struct ICoreTextEditContext_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_InputScope(CoreTextInputScope *value);
	virtual STDMETHODIMP _put_InputScope(CoreTextInputScope value);
	virtual STDMETHODIMP _get_IsReadOnly(bool *value);
	virtual STDMETHODIMP _put_IsReadOnly(bool value);
	virtual STDMETHODIMP _get_InputPaneDisplayPolicy(CoreTextInputPaneDisplayPolicy *value);
	virtual STDMETHODIMP _put_InputPaneDisplayPolicy(CoreTextInputPaneDisplayPolicy value);
	virtual STDMETHODIMP _add_TextRequested(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextTextRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_TextRequested(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_SelectionRequested(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextSelectionRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_SelectionRequested(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_LayoutRequested(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextLayoutRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_LayoutRequested(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_TextUpdating(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextTextUpdatingEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_TextUpdating(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_SelectionUpdating(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextSelectionUpdatingEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_SelectionUpdating(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_FormatUpdating(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextFormatUpdatingEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_FormatUpdating(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_CompositionStarted(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextCompositionStartedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_CompositionStarted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_CompositionCompleted(Foundation::TypedEventHandler<CoreTextEditContext*, CoreTextCompositionCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_CompositionCompleted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_FocusRemoved(Foundation::TypedEventHandler<CoreTextEditContext*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_FocusRemoved(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _NotifyFocusEnter();
	virtual STDMETHODIMP _NotifyFocusLeave();
	virtual STDMETHODIMP _NotifyTextChanged(CoreTextRange modifiedRange, int newLength, CoreTextRange newSelection);
	virtual STDMETHODIMP _NotifySelectionChanged(CoreTextRange selection);
	virtual STDMETHODIMP _NotifyLayoutChanged();
};
template<typename X> struct ICoreTextEditContext_adaptor : X {
	union {
		struct : property {
			CoreTextInputPaneDisplayPolicy get() { CoreTextInputPaneDisplayPolicy value; hrcheck(enc(&ICoreTextEditContext_adaptor::InputPaneDisplayPolicy)->_get_InputPaneDisplayPolicy(&value)); return value; }
			CoreTextInputPaneDisplayPolicy operator()() { return get(); }
			operator CoreTextInputPaneDisplayPolicy () { return get(); }
			void put(CoreTextInputPaneDisplayPolicy value) { hrcheck(enc(&ICoreTextEditContext_adaptor::InputPaneDisplayPolicy)->_put_InputPaneDisplayPolicy(value)); }
			void operator=(CoreTextInputPaneDisplayPolicy value) { put(value); }
			void operator()(CoreTextInputPaneDisplayPolicy value) { put(value); }
		} InputPaneDisplayPolicy;
		struct : property {
			CoreTextInputScope get() { CoreTextInputScope value; hrcheck(enc(&ICoreTextEditContext_adaptor::InputScope)->_get_InputScope(&value)); return value; }
			CoreTextInputScope operator()() { return get(); }
			operator CoreTextInputScope () { return get(); }
			void put(CoreTextInputScope value) { hrcheck(enc(&ICoreTextEditContext_adaptor::InputScope)->_put_InputScope(value)); }
			void operator=(CoreTextInputScope value) { put(value); }
			void operator()(CoreTextInputScope value) { put(value); }
		} InputScope;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreTextEditContext_adaptor::IsReadOnly)->_get_IsReadOnly(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreTextEditContext_adaptor::IsReadOnly)->_put_IsReadOnly(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsReadOnly;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICoreTextEditContext_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICoreTextEditContext_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextCompositionCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::CompositionCompleted)->_add_CompositionCompleted(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::CompositionCompleted)->_remove_CompositionCompleted(cookie)); }
		} CompositionCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextCompositionStartedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::CompositionStarted)->_add_CompositionStarted(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::CompositionStarted)->_remove_CompositionStarted(cookie)); }
		} CompositionStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::FocusRemoved)->_add_FocusRemoved(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::FocusRemoved)->_remove_FocusRemoved(cookie)); }
		} FocusRemoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextFormatUpdatingEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::FormatUpdating)->_add_FormatUpdating(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::FormatUpdating)->_remove_FormatUpdating(cookie)); }
		} FormatUpdating;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextLayoutRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::LayoutRequested)->_add_LayoutRequested(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::LayoutRequested)->_remove_LayoutRequested(cookie)); }
		} LayoutRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextSelectionRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::SelectionRequested)->_add_SelectionRequested(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::SelectionRequested)->_remove_SelectionRequested(cookie)); }
		} SelectionRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextSelectionUpdatingEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::SelectionUpdating)->_add_SelectionUpdating(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::SelectionUpdating)->_remove_SelectionUpdating(cookie)); }
		} SelectionUpdating;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextTextRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::TextRequested)->_add_TextRequested(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::TextRequested)->_remove_TextRequested(cookie)); }
		} TextRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextEditContext>, ptr<CoreTextTextUpdatingEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextEditContext_adaptor::TextUpdating)->_add_TextUpdating(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextEditContext_adaptor::TextUpdating)->_remove_TextUpdating(cookie)); }
		} TextUpdating;
	};
	void NotifyFocusEnter() { hrcheck(X::get()->_NotifyFocusEnter()); }
	void NotifyFocusLeave() { hrcheck(X::get()->_NotifyFocusLeave()); }
	void NotifyTextChanged(const CoreTextRange& modifiedRange, int newLength, const CoreTextRange& newSelection) { hrcheck(X::get()->_NotifyTextChanged(modifiedRange, newLength, newSelection)); }
	void NotifySelectionChanged(const CoreTextRange& selection) { hrcheck(X::get()->_NotifySelectionChanged(selection)); }
	void NotifyLayoutChanged() { hrcheck(X::get()->_NotifyLayoutChanged()); }
	ICoreTextEditContext_adaptor() {}
};
template<typename X> struct adapt<ICoreTextEditContext, X> : Windows::UI::Text::Core::ICoreTextEditContext_adaptor<X> { typedef adapt ICoreTextEditContext; };
struct ICoreTextEditContext : ICoreTextEditContext_raw, generate<ICoreTextEditContext> {};

// CoreTextEditContext
template<typename X> struct statics<CoreTextEditContext, X> : X {
	typedef typename X::root_type CoreTextEditContext;
};
struct CoreTextEditContext : generate<CoreTextEditContext> {};

// CoreTextTextRequestedEventArgs
template<typename X> struct statics<CoreTextTextRequestedEventArgs, X> : X {
	typedef typename X::root_type CoreTextTextRequestedEventArgs;
};
struct CoreTextTextRequestedEventArgs : generate<CoreTextTextRequestedEventArgs> {};

// CoreTextSelectionRequestedEventArgs
template<typename X> struct statics<CoreTextSelectionRequestedEventArgs, X> : X {
	typedef typename X::root_type CoreTextSelectionRequestedEventArgs;
};
struct CoreTextSelectionRequestedEventArgs : generate<CoreTextSelectionRequestedEventArgs> {};

// CoreTextLayoutRequestedEventArgs
template<typename X> struct statics<CoreTextLayoutRequestedEventArgs, X> : X {
	typedef typename X::root_type CoreTextLayoutRequestedEventArgs;
};
struct CoreTextLayoutRequestedEventArgs : generate<CoreTextLayoutRequestedEventArgs> {};

// CoreTextTextUpdatingEventArgs
template<typename X> struct statics<CoreTextTextUpdatingEventArgs, X> : X {
	typedef typename X::root_type CoreTextTextUpdatingEventArgs;
};
struct CoreTextTextUpdatingEventArgs : generate<CoreTextTextUpdatingEventArgs> {};

// CoreTextSelectionUpdatingEventArgs
template<typename X> struct statics<CoreTextSelectionUpdatingEventArgs, X> : X {
	typedef typename X::root_type CoreTextSelectionUpdatingEventArgs;
};
struct CoreTextSelectionUpdatingEventArgs : generate<CoreTextSelectionUpdatingEventArgs> {};

// CoreTextFormatUpdatingEventArgs
template<typename X> struct statics<CoreTextFormatUpdatingEventArgs, X> : X {
	typedef typename X::root_type CoreTextFormatUpdatingEventArgs;
};
struct CoreTextFormatUpdatingEventArgs : generate<CoreTextFormatUpdatingEventArgs> {};

// CoreTextCompositionStartedEventArgs
template<typename X> struct statics<CoreTextCompositionStartedEventArgs, X> : X {
	typedef typename X::root_type CoreTextCompositionStartedEventArgs;
};
struct CoreTextCompositionStartedEventArgs : generate<CoreTextCompositionStartedEventArgs> {};

// CoreTextCompositionCompletedEventArgs
template<typename X> struct statics<CoreTextCompositionCompletedEventArgs, X> : X {
	typedef typename X::root_type CoreTextCompositionCompletedEventArgs;
};
struct CoreTextCompositionCompletedEventArgs : generate<CoreTextCompositionCompletedEventArgs> {};

// ICoreTextServicesManager
struct ICoreTextServicesManager_raw : IInspectable {
	virtual STDMETHODIMP _get_InputLanguage(Globalization::Language* *value);
	virtual STDMETHODIMP _add_InputLanguageChanged(Foundation::TypedEventHandler<CoreTextServicesManager*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_InputLanguageChanged(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _CreateEditContext(CoreTextEditContext* *value);
};
template<typename X> struct ICoreTextServicesManager_adaptor : X {
	union {
		struct : property {
			ptr<Globalization::Language> get() { Globalization::Language* value; hrcheck(enc(&ICoreTextServicesManager_adaptor::InputLanguage)->_get_InputLanguage(&value)); return from_abi(value); }
			ptr<Globalization::Language> operator()() { return get(); }
			operator ptr<Globalization::Language> () { return get(); }
			ptr<Globalization::Language> operator->() { return get(); }
		} InputLanguage;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreTextServicesManager>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreTextServicesManager_adaptor::InputLanguageChanged)->_add_InputLanguageChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTextServicesManager_adaptor::InputLanguageChanged)->_remove_InputLanguageChanged(cookie)); }
		} InputLanguageChanged;
	};
	ptr<CoreTextEditContext> CreateEditContext() { CoreTextEditContext* value; hrcheck(X::get()->_CreateEditContext(&value)); return from_abi(value); }
	ICoreTextServicesManager_adaptor() {}
};
template<typename X> struct adapt<ICoreTextServicesManager, X> : Windows::UI::Text::Core::ICoreTextServicesManager_adaptor<X> { typedef adapt ICoreTextServicesManager; };
struct ICoreTextServicesManager : ICoreTextServicesManager_raw, generate<ICoreTextServicesManager> {};

// ICoreTextServicesManagerStatics
struct ICoreTextServicesManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(CoreTextServicesManager* *value);
};

// CoreTextServicesManager
template<typename> struct CoreTextServicesManager_statics {
	static ptr<CoreTextServicesManager> GetForCurrentView() { CoreTextServicesManager* value; hrcheck(get_activation_factory<CoreTextServicesManager, ICoreTextServicesManagerStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
};

template<typename X> struct statics<CoreTextServicesManager, X> : X, Windows::UI::Text::Core::CoreTextServicesManager_statics<void> {
	typedef typename X::root_type CoreTextServicesManager;
};
struct CoreTextServicesManager : generate<CoreTextServicesManager> {};

// ICoreTextServicesStatics
struct ICoreTextServicesStatics : IInspectable {
	virtual STDMETHODIMP _get_HiddenCharacter(char *value);
};

// CoreTextServicesConstants
template<typename> struct CoreTextServicesConstants_statics {
	static struct _HiddenCharacter : property {
		char get() { char value; hrcheck(get_activation_factory<CoreTextServicesConstants, ICoreTextServicesStatics>()->_get_HiddenCharacter(&value)); return value; }
		char operator()() { return get(); }
		operator char () { return get(); }
	} HiddenCharacter;
};
template<typename X> typename CoreTextServicesConstants_statics<X>::_HiddenCharacter CoreTextServicesConstants_statics<X>::HiddenCharacter;

template<typename X> struct statics<CoreTextServicesConstants, X> : X, Windows::UI::Text::Core::CoreTextServicesConstants_statics<void> {
	typedef typename X::root_type CoreTextServicesConstants;
};
struct CoreTextServicesConstants : generate<CoreTextServicesConstants> {};
}}}}
} // namespace iso_winrt
