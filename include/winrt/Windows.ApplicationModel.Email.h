#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Email

#include "Windows.ApplicationModel.Email.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Appointments {
struct AppointmentRecurrence;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}
namespace Security { namespace Cryptography { namespace Certificates {
struct Certificate;
}}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::ApplicationModel::Email::EmailCertificateValidationStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailStoreAccessType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMessageBodyKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailAttachmentDownloadState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMessageDownloadState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailSpecialFolderKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailQueryKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxChangeType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailQuerySortDirection> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailQuerySortProperty> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailQuerySearchFields> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Email::EmailBatchStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMessageResponseKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMeetingResponseType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxActionKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailImportance> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailFlagState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxSyncStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxOtherAppReadAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxOtherAppWriteAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxSmimeEncryptionAlgorithm> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxSmimeSigningAlgorithm> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxAutoReplyMessageResponseKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailQuerySearchScope> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailRecipientResolutionStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMessageSmimeKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxEmptyFolderStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxCreateFolderStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxDeleteFolderStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMessage4> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMessage3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMessage2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMessage> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMessage> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMessage, Windows::ApplicationModel::Email::IEmailMessage2, Windows::ApplicationModel::Email::IEmailMessage3, Windows::ApplicationModel::Email::IEmailMessage4> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailManagerStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailStore> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailStore> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailManagerStatics3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailManagerForUser> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailManagerForUser> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailManagerForUser> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailbox5> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailbox4> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailbox> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailbox2> : interface_type<Windows::ApplicationModel::Email::IEmailMailbox> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailbox3> : interface_type<Windows::ApplicationModel::Email::IEmailMailbox2> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailbox> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailbox, Windows::ApplicationModel::Email::IEmailMailbox5, Windows::ApplicationModel::Email::IEmailMailbox3, Windows::ApplicationModel::Email::IEmailMailbox4> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailConversationReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailConversationReader> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailConversationReader> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailQueryOptionsFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailQueryOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailQueryOptions> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailQueryOptions>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMessageReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMessageReader> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMessageReader> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailConversation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailConversation> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailConversation> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailFolder> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailFolder> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailFolder> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailRecipient> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailRecipientFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailRecipient> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailRecipient>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Email::IEmailIrmTemplate> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailIrmTemplateFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailIrmTemplate> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailIrmTemplate>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Email::IEmailIrmInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailIrmInfoFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailIrmInfo> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailIrmInfo>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Email::IEmailAttachmentFactory2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailAttachmentFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailAttachment2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailAttachment> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailAttachment> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailAttachment, Windows::ApplicationModel::Email::IEmailAttachment2>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMeetingInfo2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMeetingInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMeetingInfo> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMeetingInfo, Windows::ApplicationModel::Email::IEmailMeetingInfo2> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxChangedDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxChangedDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxChangedDeferral> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailStoreNotificationTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxPolicies> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxPolicies2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxPolicies3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxCapabilities> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxCapabilities2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxCapabilities3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxCapabilities> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxCapabilities, Windows::ApplicationModel::Email::IEmailMailboxCapabilities2, Windows::ApplicationModel::Email::IEmailMailboxCapabilities3> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxChangeTracker> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxChangeTracker> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxChangeTracker> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxPolicies> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxPolicies, Windows::ApplicationModel::Email::IEmailMailboxPolicies2, Windows::ApplicationModel::Email::IEmailMailboxPolicies3> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxSyncManager2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxSyncManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxSyncManager> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxSyncManager, Windows::ApplicationModel::Email::IEmailMailboxSyncManager2> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxAutoReplySettings> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxAutoReplySettings> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxAutoReplySettings> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailRecipientResolutionResult2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailRecipientResolutionResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailRecipientResolutionResult> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailRecipientResolutionResult, Windows::ApplicationModel::Email::IEmailRecipientResolutionResult2> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxCreateFolderResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxCreateFolderResult> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxCreateFolderResult> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxAutoReply> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxAutoReply> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxAutoReply> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailItemCounts> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailItemCounts> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailItemCounts> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxAction> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailQueryTextSearch> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailQueryTextSearch> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailQueryTextSearch> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailConversationBatch> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailConversationBatch> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailConversationBatch> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMessageBatch> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMessageBatch> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMessageBatch> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxChange> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxAction> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxAction> {};
template<> struct def<Windows::ApplicationModel::Email::IEmailMailboxChangeReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxChange> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxChange> {};
template<> struct def<Windows::ApplicationModel::Email::EmailMailboxChangeReader> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailMailboxChangeReader> {};
template<> struct def<Windows::ApplicationModel::Email::EmailManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Email::EmailStoreNotificationTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Email::IEmailStoreNotificationTriggerDetails> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Email::IEmailManagerStatics> { define_guid(0xF5128654, 0x55C5, 0x4890, 0xA8, 0x24, 0x21, 0x6C, 0x26, 0x18, 0xCE, 0x7F);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMessage4> { define_guid(0x317CF181, 0x3E7F, 0x4A05, 0x83, 0x94, 0x3E, 0x10, 0x33, 0x6D, 0xD4, 0x35);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMessage3> { define_guid(0xA1EA675C, 0xE598, 0x4D29, 0xA0, 0x18, 0xFC, 0x7B, 0x7E, 0xEC, 0xE0, 0xA1);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMessage2> { define_guid(0xFDC8248B, 0x9F1A, 0x44DB, 0xBD, 0x3C, 0x65, 0xC3, 0x84, 0x77, 0xF, 0x86);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMessage> { define_guid(0x6C6D948D, 0x80B5, 0x48F8, 0xB0, 0xB1, 0xE0, 0x4E, 0x43, 0xF, 0x44, 0xE5);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailManagerStatics2> { define_guid(0xAC052DA3, 0xB194, 0x425D, 0xB6, 0xD9, 0xD0, 0xF0, 0x41, 0x35, 0xED, 0xA2);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailStore> { define_guid(0xF803226E, 0x9137, 0x4F8B, 0xA4, 0x70, 0x27, 0x9A, 0xC3, 0x5, 0x8E, 0xB6);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailManagerStatics3> { define_guid(0x4A722395, 0x843E, 0x4945, 0xB3, 0xAA, 0x34, 0x9E, 0x7, 0xA3, 0x62, 0xC5);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailManagerForUser> { define_guid(0xF773DE9F, 0x3CA5, 0x4B0F, 0x90, 0xC1, 0x15, 0x6E, 0x40, 0x17, 0x4C, 0xE5);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailbox5> { define_guid(0x39967087, 0x92, 0x49BE, 0xBD, 0xE, 0x5D, 0x4D, 0xC9, 0xD9, 0x6D, 0x90);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailbox4> { define_guid(0x5D1F301B, 0xF222, 0x48A7, 0xB7, 0xB6, 0x71, 0x63, 0x56, 0xCD, 0x26, 0xA1);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailbox> { define_guid(0xA8790649, 0xCF5B, 0x411B, 0x80, 0xB1, 0x4A, 0x6A, 0x14, 0x84, 0xCE, 0x25);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailbox2> { define_guid(0x14F8E404, 0x6CA2, 0x4AB2, 0x92, 0x41, 0x79, 0xCD, 0x7B, 0xF4, 0x63, 0x46);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailbox3> { define_guid(0x3DA5897B, 0x458B, 0x408A, 0x8E, 0x37, 0xAC, 0x8B, 0x5, 0xD8, 0xAF, 0x56);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailConversationReader> { define_guid(0xB4630F82, 0x2875, 0x44C8, 0x9B, 0x8C, 0x85, 0xBE, 0xB3, 0xA3, 0xC6, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailQueryOptionsFactory> { define_guid(0x88F1A1B8, 0x78AB, 0x4EE8, 0xB4, 0xE3, 0x4, 0x6D, 0x6E, 0x2F, 0xE5, 0xE2);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailQueryOptions> { define_guid(0x45504B9B, 0x3E7F, 0x4D52, 0xB6, 0xDD, 0xD6, 0xFD, 0x4E, 0x1F, 0xBD, 0x9A);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMessageReader> { define_guid(0x2F4ABE9F, 0x6213, 0x4A85, 0xA3, 0xB0, 0xF9, 0x2D, 0x1A, 0x83, 0x9D, 0x19);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailConversation> { define_guid(0xDA18C248, 0xA0BC, 0x4349, 0x90, 0x2D, 0x90, 0xF6, 0x63, 0x89, 0xF5, 0x1B);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailFolder> { define_guid(0xA24F7771, 0x996C, 0x4864, 0xB1, 0xBA, 0xED, 0x12, 0x40, 0xE5, 0x7D, 0x11);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailRecipient> { define_guid(0xCAE825B3, 0x4478, 0x4814, 0xB9, 0x0, 0xC9, 0x2, 0xB5, 0xE1, 0x9B, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailRecipientFactory> { define_guid(0x5500B84D, 0xC79A, 0x4EF8, 0xB9, 0x9, 0x72, 0x2E, 0x18, 0xE3, 0x93, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailIrmTemplate> { define_guid(0xF327758D, 0x546D, 0x4BEA, 0xA9, 0x63, 0x54, 0xA3, 0x8B, 0x2C, 0xC0, 0x16);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailIrmTemplateFactory> { define_guid(0x3DA31876, 0x8738, 0x4418, 0xB9, 0xCB, 0x47, 0x1B, 0x93, 0x6F, 0xE7, 0x1E);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailIrmInfo> { define_guid(0x90F52193, 0xB1A0, 0x4EBD, 0xA6, 0xB6, 0xDD, 0xCA, 0x55, 0x60, 0x6E, 0xE);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailIrmInfoFactory> { define_guid(0x314BB18C, 0xE3E6, 0x4D7B, 0xBE, 0x8D, 0x91, 0xA9, 0x63, 0x11, 0xB0, 0x1B);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailAttachmentFactory2> { define_guid(0x23259435, 0x51F9, 0x427D, 0xAD, 0xCD, 0x24, 0x10, 0x23, 0xC8, 0xCF, 0xB7);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailAttachmentFactory> { define_guid(0x796EAC46, 0xED56, 0x4979, 0x87, 0x8, 0xAB, 0xB8, 0xBC, 0x85, 0x4B, 0x7D);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailAttachment2> { define_guid(0x225F1070, 0xB0FF, 0x4571, 0x9D, 0x54, 0xA7, 0x6, 0xC4, 0x8D, 0x55, 0xC6);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailAttachment> { define_guid(0xF353CAF9, 0x57C8, 0x4ADB, 0xB9, 0x92, 0x60, 0xFC, 0xEB, 0x58, 0x4F, 0x54);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMeetingInfo2> { define_guid(0x7E59386D, 0xB0D9, 0x4FE5, 0x86, 0x7C, 0xE3, 0x1E, 0xD2, 0xB5, 0x88, 0xB8);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMeetingInfo> { define_guid(0x31C03FA9, 0x7933, 0x415F, 0xA2, 0x75, 0xD1, 0x65, 0xBA, 0x7, 0x2, 0x6B);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxChangedEventArgs> { define_guid(0x3CFD5F6E, 0x1D4, 0x4E4A, 0xA4, 0x4C, 0xB2, 0x2D, 0xD4, 0x2E, 0xC2, 0x7);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxChangedDeferral> { define_guid(0x779A74C1, 0x97C5, 0x4B54, 0xB3, 0xD, 0x30, 0x62, 0x32, 0x62, 0x3E, 0x6D);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailStoreNotificationTriggerDetails> { define_guid(0xCE17563C, 0x46E6, 0x43C9, 0x96, 0xF7, 0xFA, 0xCF, 0x7D, 0xD7, 0x10, 0xCB);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxPolicies> { define_guid(0x1F3345C5, 0x1C3B, 0x4DC7, 0xB4, 0x10, 0x63, 0x73, 0x78, 0x3E, 0x54, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxPolicies2> { define_guid(0xBAB58AFB, 0xA14B, 0x497C, 0xA8, 0xE2, 0x55, 0xEA, 0xC2, 0x9C, 0xC4, 0xB5);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxPolicies3> { define_guid(0xBDD4A01F, 0x4867, 0x414A, 0x81, 0xA2, 0x80, 0x39, 0x19, 0xC4, 0x41, 0x91);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxCapabilities> { define_guid(0xEEDEC3A6, 0x89DB, 0x4305, 0x82, 0xC4, 0x43, 0x9E, 0xA, 0x33, 0xDA, 0x11);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxCapabilities2> { define_guid(0x69723EE4, 0x2F21, 0x4CBC, 0x88, 0xAB, 0x2E, 0x76, 0x2, 0xA4, 0x80, 0x6B);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxCapabilities3> { define_guid(0xF690E944, 0x56F2, 0x45AA, 0x87, 0x2C, 0xC, 0xE9, 0xF3, 0xDB, 0xB, 0x5C);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxChangeTracker> { define_guid(0x7AE48638, 0x5166, 0x42B7, 0x88, 0x82, 0xFD, 0x21, 0xC9, 0x2B, 0xDD, 0x4B);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxSyncManager2> { define_guid(0xCD8DC97E, 0x95C1, 0x4F89, 0x81, 0xB7, 0xE6, 0xAE, 0xCB, 0x66, 0x95, 0xFC);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxSyncManager> { define_guid(0x517AC55A, 0x3591, 0x4B5D, 0x85, 0xBC, 0xC7, 0x1D, 0xDE, 0x86, 0x22, 0x63);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxAutoReplySettings> { define_guid(0xA87A9FA8, 0xAC6, 0x4B77, 0xBA, 0x77, 0xA6, 0xB9, 0x9E, 0x9A, 0x27, 0xB8);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailRecipientResolutionResult2> { define_guid(0x5E420BB6, 0xCE5B, 0x4BDE, 0xB9, 0xD4, 0xE1, 0x6D, 0xA0, 0xB0, 0x9F, 0xCA);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailRecipientResolutionResult> { define_guid(0x918338FA, 0x8D8D, 0x4573, 0x80, 0xD1, 0x7, 0x17, 0x2A, 0x34, 0xB9, 0x8D);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxCreateFolderResult> { define_guid(0xB228557F, 0x2885, 0x4998, 0xB5, 0x95, 0x8A, 0x2D, 0x37, 0x4C, 0xE9, 0x50);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxAutoReply> { define_guid(0xE223254C, 0x8AB4, 0x485B, 0xB3, 0x1F, 0x4, 0xD1, 0x54, 0x76, 0xBD, 0x59);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailItemCounts> { define_guid(0x5BD13321, 0xFEC8, 0x4BAB, 0x83, 0xBA, 0xB, 0xAF, 0x3C, 0x1F, 0x6C, 0xBD);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxAction> { define_guid(0xAC9889FA, 0x21FA, 0x4927, 0x92, 0x10, 0xD4, 0x10, 0x58, 0x2F, 0xDF, 0x3E);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailQueryTextSearch> { define_guid(0x9FA0A288, 0x3C5D, 0x46A5, 0xA6, 0xE2, 0x31, 0xD6, 0xFD, 0x17, 0xE5, 0x40);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailConversationBatch> { define_guid(0xB8C1AB81, 0x1C5, 0x432A, 0x9D, 0xF1, 0xFE, 0x85, 0xD9, 0x8A, 0x27, 0x9A);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMessageBatch> { define_guid(0x605CD08F, 0x25D9, 0x4F1B, 0x9E, 0x51, 0x5, 0x14, 0xC0, 0x14, 0x96, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxChange> { define_guid(0x61EDF54B, 0x11EF, 0x400C, 0xAD, 0xDE, 0x8C, 0xDE, 0x65, 0xC8, 0x5E, 0x66);};
template<> struct uuid<Windows::ApplicationModel::Email::IEmailMailboxChangeReader> { define_guid(0xBDBD0EBB, 0xC53D, 0x4331, 0x97, 0xBE, 0xBE, 0x75, 0xA2, 0x14, 0x6A, 0x75);};

// types

namespace Windows { namespace ApplicationModel { namespace Email {

// IEmailManagerStatics
struct IEmailManagerStatics : IInspectable {
	virtual STDMETHODIMP _ShowComposeNewEmailAsync(EmailMessage* message, Foundation::IAsyncAction* *asyncAction);
};

// IEmailMessage4
struct IEmailMessage4_raw : IInspectable {
	virtual STDMETHODIMP _get_ReplyTo(Foundation::Collections::IVector<EmailRecipient*>* *value);
	virtual STDMETHODIMP _get_SentRepresenting(EmailRecipient* *value);
	virtual STDMETHODIMP _put_SentRepresenting(EmailRecipient* value);
};
template<typename X> struct IEmailMessage4_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> get() { Foundation::Collections::IVector<EmailRecipient*>* value; hrcheck(enc(&IEmailMessage4_adaptor::ReplyTo)->_get_ReplyTo(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator->() { return get(); }
		} ReplyTo;
		struct : property {
			ptr<EmailRecipient> get() { EmailRecipient* value; hrcheck(enc(&IEmailMessage4_adaptor::SentRepresenting)->_get_SentRepresenting(&value)); return from_abi(value); }
			ptr<EmailRecipient> operator()() { return get(); }
			operator ptr<EmailRecipient> () { return get(); }
			ptr<EmailRecipient> operator->() { return get(); }
			void put(pptr<EmailRecipient> value) { hrcheck(enc(&IEmailMessage4_adaptor::SentRepresenting)->_put_SentRepresenting(value)); }
			void operator=(pptr<EmailRecipient> value) { put(value); }
			void operator()(pptr<EmailRecipient> value) { put(value); }
		} SentRepresenting;
	};
	IEmailMessage4_adaptor() {}
};
template<typename X> struct adapt<IEmailMessage4, X> : Windows::ApplicationModel::Email::IEmailMessage4_adaptor<X> { typedef adapt IEmailMessage4; };
struct IEmailMessage4 : IEmailMessage4_raw, generate<IEmailMessage4> {};

// IEmailMessage3
struct IEmailMessage3_raw : IInspectable {
	virtual STDMETHODIMP _get_SmimeData(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_SmimeData(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_SmimeKind(EmailMessageSmimeKind *value);
	virtual STDMETHODIMP _put_SmimeKind(EmailMessageSmimeKind value);
};
template<typename X> struct IEmailMessage3_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IEmailMessage3_adaptor::SmimeData)->_get_SmimeData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IEmailMessage3_adaptor::SmimeData)->_put_SmimeData(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} SmimeData;
		struct : property {
			EmailMessageSmimeKind get() { EmailMessageSmimeKind value; hrcheck(enc(&IEmailMessage3_adaptor::SmimeKind)->_get_SmimeKind(&value)); return value; }
			EmailMessageSmimeKind operator()() { return get(); }
			operator EmailMessageSmimeKind () { return get(); }
			void put(EmailMessageSmimeKind value) { hrcheck(enc(&IEmailMessage3_adaptor::SmimeKind)->_put_SmimeKind(value)); }
			void operator=(EmailMessageSmimeKind value) { put(value); }
			void operator()(EmailMessageSmimeKind value) { put(value); }
		} SmimeKind;
	};
	IEmailMessage3_adaptor() {}
};
template<typename X> struct adapt<IEmailMessage3, X> : Windows::ApplicationModel::Email::IEmailMessage3_adaptor<X> { typedef adapt IEmailMessage3; };
struct IEmailMessage3 : IEmailMessage3_raw, generate<IEmailMessage3> {};

// IEmailMessage2
struct IEmailMessage2_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_MailboxId(HSTRING *value);
	virtual STDMETHODIMP _get_ConversationId(HSTRING *value);
	virtual STDMETHODIMP _get_FolderId(HSTRING *value);
	virtual STDMETHODIMP _get_AllowInternetImages(bool *value);
	virtual STDMETHODIMP _put_AllowInternetImages(bool value);
	virtual STDMETHODIMP _get_ChangeNumber(unsigned __int64 *value);
	virtual STDMETHODIMP _get_DownloadState(EmailMessageDownloadState *value);
	virtual STDMETHODIMP _put_DownloadState(EmailMessageDownloadState value);
	virtual STDMETHODIMP _get_EstimatedDownloadSizeInBytes(unsigned *value);
	virtual STDMETHODIMP _put_EstimatedDownloadSizeInBytes(unsigned value);
	virtual STDMETHODIMP _get_FlagState(EmailFlagState *value);
	virtual STDMETHODIMP _put_FlagState(EmailFlagState value);
	virtual STDMETHODIMP _get_HasPartialBodies(bool *value);
	virtual STDMETHODIMP _get_Importance(EmailImportance *value);
	virtual STDMETHODIMP _put_Importance(EmailImportance value);
	virtual STDMETHODIMP _get_InResponseToMessageId(HSTRING *value);
	virtual STDMETHODIMP _get_IrmInfo(EmailIrmInfo* *value);
	virtual STDMETHODIMP _put_IrmInfo(EmailIrmInfo* value);
	virtual STDMETHODIMP _get_IsDraftMessage(bool *value);
	virtual STDMETHODIMP _get_IsRead(bool *value);
	virtual STDMETHODIMP _put_IsRead(bool value);
	virtual STDMETHODIMP _get_IsSeen(bool *value);
	virtual STDMETHODIMP _put_IsSeen(bool value);
	virtual STDMETHODIMP _get_IsServerSearchMessage(bool *value);
	virtual STDMETHODIMP _get_IsSmartSendable(bool *value);
	virtual STDMETHODIMP _get_MessageClass(HSTRING *value);
	virtual STDMETHODIMP _put_MessageClass(HSTRING value);
	virtual STDMETHODIMP _get_NormalizedSubject(HSTRING *value);
	virtual STDMETHODIMP _get_OriginalCodePage(int *value);
	virtual STDMETHODIMP _put_OriginalCodePage(int value);
	virtual STDMETHODIMP _get_Preview(HSTRING *value);
	virtual STDMETHODIMP _put_Preview(HSTRING value);
	virtual STDMETHODIMP _get_LastResponseKind(EmailMessageResponseKind *value);
	virtual STDMETHODIMP _put_LastResponseKind(EmailMessageResponseKind value);
	virtual STDMETHODIMP _get_Sender(EmailRecipient* *value);
	virtual STDMETHODIMP _put_Sender(EmailRecipient* value);
	virtual STDMETHODIMP _get_SentTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_SentTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_MeetingInfo(EmailMeetingInfo* *value);
	virtual STDMETHODIMP _put_MeetingInfo(EmailMeetingInfo* value);
	virtual STDMETHODIMP _GetBodyStream(EmailMessageBodyKind type, Storage::Streams::IRandomAccessStreamReference* *result);
	virtual STDMETHODIMP _SetBodyStream(EmailMessageBodyKind type, Storage::Streams::IRandomAccessStreamReference* stream);
};
template<typename X> struct IEmailMessage2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMessage2_adaptor::AllowInternetImages)->_get_AllowInternetImages(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMessage2_adaptor::AllowInternetImages)->_put_AllowInternetImages(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowInternetImages;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IEmailMessage2_adaptor::ChangeNumber)->_get_ChangeNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} ChangeNumber;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::ConversationId)->_get_ConversationId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ConversationId;
		struct : property {
			EmailMessageDownloadState get() { EmailMessageDownloadState value; hrcheck(enc(&IEmailMessage2_adaptor::DownloadState)->_get_DownloadState(&value)); return value; }
			EmailMessageDownloadState operator()() { return get(); }
			operator EmailMessageDownloadState () { return get(); }
			void put(EmailMessageDownloadState value) { hrcheck(enc(&IEmailMessage2_adaptor::DownloadState)->_put_DownloadState(value)); }
			void operator=(EmailMessageDownloadState value) { put(value); }
			void operator()(EmailMessageDownloadState value) { put(value); }
		} DownloadState;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IEmailMessage2_adaptor::EstimatedDownloadSizeInBytes)->_get_EstimatedDownloadSizeInBytes(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IEmailMessage2_adaptor::EstimatedDownloadSizeInBytes)->_put_EstimatedDownloadSizeInBytes(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} EstimatedDownloadSizeInBytes;
		struct : property {
			EmailFlagState get() { EmailFlagState value; hrcheck(enc(&IEmailMessage2_adaptor::FlagState)->_get_FlagState(&value)); return value; }
			EmailFlagState operator()() { return get(); }
			operator EmailFlagState () { return get(); }
			void put(EmailFlagState value) { hrcheck(enc(&IEmailMessage2_adaptor::FlagState)->_put_FlagState(value)); }
			void operator=(EmailFlagState value) { put(value); }
			void operator()(EmailFlagState value) { put(value); }
		} FlagState;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::FolderId)->_get_FolderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FolderId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMessage2_adaptor::HasPartialBodies)->_get_HasPartialBodies(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasPartialBodies;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			EmailImportance get() { EmailImportance value; hrcheck(enc(&IEmailMessage2_adaptor::Importance)->_get_Importance(&value)); return value; }
			EmailImportance operator()() { return get(); }
			operator EmailImportance () { return get(); }
			void put(EmailImportance value) { hrcheck(enc(&IEmailMessage2_adaptor::Importance)->_put_Importance(value)); }
			void operator=(EmailImportance value) { put(value); }
			void operator()(EmailImportance value) { put(value); }
		} Importance;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::InResponseToMessageId)->_get_InResponseToMessageId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} InResponseToMessageId;
		struct : property {
			ptr<EmailIrmInfo> get() { EmailIrmInfo* value; hrcheck(enc(&IEmailMessage2_adaptor::IrmInfo)->_get_IrmInfo(&value)); return from_abi(value); }
			ptr<EmailIrmInfo> operator()() { return get(); }
			operator ptr<EmailIrmInfo> () { return get(); }
			ptr<EmailIrmInfo> operator->() { return get(); }
			void put(pptr<EmailIrmInfo> value) { hrcheck(enc(&IEmailMessage2_adaptor::IrmInfo)->_put_IrmInfo(value)); }
			void operator=(pptr<EmailIrmInfo> value) { put(value); }
			void operator()(pptr<EmailIrmInfo> value) { put(value); }
		} IrmInfo;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMessage2_adaptor::IsDraftMessage)->_get_IsDraftMessage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDraftMessage;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMessage2_adaptor::IsRead)->_get_IsRead(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMessage2_adaptor::IsRead)->_put_IsRead(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsRead;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMessage2_adaptor::IsSeen)->_get_IsSeen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMessage2_adaptor::IsSeen)->_put_IsSeen(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSeen;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMessage2_adaptor::IsServerSearchMessage)->_get_IsServerSearchMessage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsServerSearchMessage;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMessage2_adaptor::IsSmartSendable)->_get_IsSmartSendable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSmartSendable;
		struct : property {
			EmailMessageResponseKind get() { EmailMessageResponseKind value; hrcheck(enc(&IEmailMessage2_adaptor::LastResponseKind)->_get_LastResponseKind(&value)); return value; }
			EmailMessageResponseKind operator()() { return get(); }
			operator EmailMessageResponseKind () { return get(); }
			void put(EmailMessageResponseKind value) { hrcheck(enc(&IEmailMessage2_adaptor::LastResponseKind)->_put_LastResponseKind(value)); }
			void operator=(EmailMessageResponseKind value) { put(value); }
			void operator()(EmailMessageResponseKind value) { put(value); }
		} LastResponseKind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::MailboxId)->_get_MailboxId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MailboxId;
		struct : property {
			ptr<EmailMeetingInfo> get() { EmailMeetingInfo* value; hrcheck(enc(&IEmailMessage2_adaptor::MeetingInfo)->_get_MeetingInfo(&value)); return from_abi(value); }
			ptr<EmailMeetingInfo> operator()() { return get(); }
			operator ptr<EmailMeetingInfo> () { return get(); }
			ptr<EmailMeetingInfo> operator->() { return get(); }
			void put(pptr<EmailMeetingInfo> value) { hrcheck(enc(&IEmailMessage2_adaptor::MeetingInfo)->_put_MeetingInfo(value)); }
			void operator=(pptr<EmailMeetingInfo> value) { put(value); }
			void operator()(pptr<EmailMeetingInfo> value) { put(value); }
		} MeetingInfo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::MessageClass)->_get_MessageClass(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMessage2_adaptor::MessageClass)->_put_MessageClass(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MessageClass;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::NormalizedSubject)->_get_NormalizedSubject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NormalizedSubject;
		struct : property {
			int get() { int value; hrcheck(enc(&IEmailMessage2_adaptor::OriginalCodePage)->_get_OriginalCodePage(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IEmailMessage2_adaptor::OriginalCodePage)->_put_OriginalCodePage(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} OriginalCodePage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::Preview)->_get_Preview(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMessage2_adaptor::Preview)->_put_Preview(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Preview;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage2_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMessage2_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			ptr<EmailRecipient> get() { EmailRecipient* value; hrcheck(enc(&IEmailMessage2_adaptor::Sender)->_get_Sender(&value)); return from_abi(value); }
			ptr<EmailRecipient> operator()() { return get(); }
			operator ptr<EmailRecipient> () { return get(); }
			ptr<EmailRecipient> operator->() { return get(); }
			void put(pptr<EmailRecipient> value) { hrcheck(enc(&IEmailMessage2_adaptor::Sender)->_put_Sender(value)); }
			void operator=(pptr<EmailRecipient> value) { put(value); }
			void operator()(pptr<EmailRecipient> value) { put(value); }
		} Sender;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IEmailMessage2_adaptor::SentTime)->_get_SentTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IEmailMessage2_adaptor::SentTime)->_put_SentTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} SentTime;
	};
	ptr<Storage::Streams::IRandomAccessStreamReference> GetBodyStream(EmailMessageBodyKind type) { Storage::Streams::IRandomAccessStreamReference* result; hrcheck(X::get()->_GetBodyStream(type, &result)); return from_abi(result); }
	void SetBodyStream(EmailMessageBodyKind type, pptr<Storage::Streams::IRandomAccessStreamReference> stream) { hrcheck(X::get()->_SetBodyStream(type, stream)); }
	IEmailMessage2_adaptor() {}
};
template<typename X> struct adapt<IEmailMessage2, X> : Windows::ApplicationModel::Email::IEmailMessage2_adaptor<X> { typedef adapt IEmailMessage2; };
struct IEmailMessage2 : IEmailMessage2_raw, generate<IEmailMessage2> {};

// IEmailMessage
struct IEmailMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _put_Subject(HSTRING value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _put_Body(HSTRING value);
	virtual STDMETHODIMP _get_To(Foundation::Collections::IVector<EmailRecipient*>* *value);
	virtual STDMETHODIMP _get_CC(Foundation::Collections::IVector<EmailRecipient*>* *value);
	virtual STDMETHODIMP _get_Bcc(Foundation::Collections::IVector<EmailRecipient*>* *value);
	virtual STDMETHODIMP _get_Attachments(Foundation::Collections::IVector<EmailAttachment*>* *value);
};
template<typename X> struct IEmailMessage_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<EmailAttachment>>> get() { Foundation::Collections::IVector<EmailAttachment*>* value; hrcheck(enc(&IEmailMessage_adaptor::Attachments)->_get_Attachments(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<EmailAttachment>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<EmailAttachment>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<EmailAttachment>>> operator->() { return get(); }
		} Attachments;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> get() { Foundation::Collections::IVector<EmailRecipient*>* value; hrcheck(enc(&IEmailMessage_adaptor::Bcc)->_get_Bcc(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator->() { return get(); }
		} Bcc;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMessage_adaptor::Body)->_put_Body(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Body;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> get() { Foundation::Collections::IVector<EmailRecipient*>* value; hrcheck(enc(&IEmailMessage_adaptor::CC)->_get_CC(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator->() { return get(); }
		} CC;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMessage_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMessage_adaptor::Subject)->_put_Subject(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subject;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> get() { Foundation::Collections::IVector<EmailRecipient*>* value; hrcheck(enc(&IEmailMessage_adaptor::To)->_get_To(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<EmailRecipient>>> operator->() { return get(); }
		} To;
	};
	IEmailMessage_adaptor() {}
};
template<typename X> struct adapt<IEmailMessage, X> : Windows::ApplicationModel::Email::IEmailMessage_adaptor<X> { typedef adapt IEmailMessage; };
struct IEmailMessage : IEmailMessage_raw, generate<IEmailMessage> {};

// EmailMessage
template<typename X> struct statics<EmailMessage, X> : X {
	typedef typename X::root_type EmailMessage;
};
struct EmailMessage : generate<EmailMessage> {};

// IEmailManagerStatics2
struct IEmailManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _RequestStoreAsync(EmailStoreAccessType accessType, Foundation::IAsyncOperation<EmailStore*>* *result);
};

// IEmailStore
struct IEmailStore_raw : IInspectable {
	virtual STDMETHODIMP _FindMailboxesAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMailbox*>*>* *result);
	virtual STDMETHODIMP _GetConversationReader(EmailConversationReader* *result);
	virtual STDMETHODIMP _GetConversationReaderWithOptions(EmailQueryOptions* options, EmailConversationReader* *result);
	virtual STDMETHODIMP _GetMessageReader(EmailMessageReader* *result);
	virtual STDMETHODIMP _GetMessageReaderWithOptions(EmailQueryOptions* options, EmailMessageReader* *result);
	virtual STDMETHODIMP _GetMailboxAsync(HSTRING id, Foundation::IAsyncOperation<EmailMailbox*>* *result);
	virtual STDMETHODIMP _GetConversationAsync(HSTRING id, Foundation::IAsyncOperation<EmailConversation*>* *result);
	virtual STDMETHODIMP _GetFolderAsync(HSTRING id, Foundation::IAsyncOperation<EmailFolder*>* *result);
	virtual STDMETHODIMP _GetMessageAsync(HSTRING id, Foundation::IAsyncOperation<EmailMessage*>* *result);
	virtual STDMETHODIMP _CreateMailboxAsync(HSTRING accountName, HSTRING accountAddress, Foundation::IAsyncOperation<EmailMailbox*>* *result);
	virtual STDMETHODIMP _CreateMailboxInAccountAsync(HSTRING accountName, HSTRING accountAddress, HSTRING userDataAccountId, Foundation::IAsyncOperation<EmailMailbox*>* *result);
};
template<typename X> struct IEmailStore_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<EmailMailbox>>>>> FindMailboxesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMailbox*>*>* result; hrcheck(X::get()->_FindMailboxesAsync(&result)); return from_abi(result); }
	ptr<EmailConversationReader> GetConversationReader() { EmailConversationReader* result; hrcheck(X::get()->_GetConversationReader(&result)); return from_abi(result); }
	ptr<EmailConversationReader> GetConversationReader(pptr<EmailQueryOptions> options) { EmailConversationReader* result; hrcheck(X::get()->_GetConversationReaderWithOptions(options, &result)); return from_abi(result); }
	ptr<EmailMessageReader> GetMessageReader() { EmailMessageReader* result; hrcheck(X::get()->_GetMessageReader(&result)); return from_abi(result); }
	ptr<EmailMessageReader> GetMessageReader(pptr<EmailQueryOptions> options) { EmailMessageReader* result; hrcheck(X::get()->_GetMessageReaderWithOptions(options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMailbox>>> GetMailboxAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailMailbox*>* result; hrcheck(X::get()->_GetMailboxAsync(id, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailConversation>>> GetConversationAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailConversation*>* result; hrcheck(X::get()->_GetConversationAsync(id, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailFolder>>> GetFolderAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailFolder*>* result; hrcheck(X::get()->_GetFolderAsync(id, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMessage>>> GetMessageAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailMessage*>* result; hrcheck(X::get()->_GetMessageAsync(id, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMailbox>>> CreateMailboxAsync(hstring_ref accountName, hstring_ref accountAddress) { Foundation::IAsyncOperation<EmailMailbox*>* result; hrcheck(X::get()->_CreateMailboxAsync(accountName, accountAddress, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMailbox>>> CreateMailboxAsync(hstring_ref accountName, hstring_ref accountAddress, hstring_ref userDataAccountId) { Foundation::IAsyncOperation<EmailMailbox*>* result; hrcheck(X::get()->_CreateMailboxInAccountAsync(accountName, accountAddress, userDataAccountId, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IEmailStore, X> : Windows::ApplicationModel::Email::IEmailStore_adaptor<X> { typedef adapt IEmailStore; };
struct IEmailStore : IEmailStore_raw, generate<IEmailStore> {};

// EmailStore
template<typename X> struct statics<EmailStore, X> : X {
	typedef typename X::root_type EmailStore;
};
struct EmailStore : generate<EmailStore> {
	using IEmailStore::GetMessageReader;
	using IEmailStore::CreateMailboxAsync;
	using IEmailStore::GetConversationReader;
};

// IEmailManagerStatics3
struct IEmailManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, EmailManagerForUser* *result);
};

// IEmailManagerForUser
struct IEmailManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _ShowComposeNewEmailAsync(EmailMessage* message, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _RequestStoreAsync(EmailStoreAccessType accessType, Foundation::IAsyncOperation<EmailStore*>* *result);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IEmailManagerForUser_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IEmailManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<Foundation::IAsyncAction> ShowComposeNewEmailAsync(pptr<EmailMessage> message) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ShowComposeNewEmailAsync(message, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailStore>>> RequestStoreAsync(EmailStoreAccessType accessType) { Foundation::IAsyncOperation<EmailStore*>* result; hrcheck(X::get()->_RequestStoreAsync(accessType, &result)); return from_abi(result); }
	IEmailManagerForUser_adaptor() {}
};
template<typename X> struct adapt<IEmailManagerForUser, X> : Windows::ApplicationModel::Email::IEmailManagerForUser_adaptor<X> { typedef adapt IEmailManagerForUser; };
struct IEmailManagerForUser : IEmailManagerForUser_raw, generate<IEmailManagerForUser> {};

// EmailManagerForUser
template<typename X> struct statics<EmailManagerForUser, X> : X {
	typedef typename X::root_type EmailManagerForUser;
};
struct EmailManagerForUser : generate<EmailManagerForUser> {};

// IEmailMailbox5
struct IEmailMailbox5_raw : IInspectable {
	virtual STDMETHODIMP _GetChangeTracker(HSTRING identity, EmailMailboxChangeTracker* *result);
};
template<typename X> struct IEmailMailbox5_adaptor : X {
	ptr<EmailMailboxChangeTracker> GetChangeTracker(hstring_ref identity) { EmailMailboxChangeTracker* result; hrcheck(X::get()->_GetChangeTracker(identity, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IEmailMailbox5, X> : Windows::ApplicationModel::Email::IEmailMailbox5_adaptor<X> { typedef adapt IEmailMailbox5; };
struct IEmailMailbox5 : IEmailMailbox5_raw, generate<IEmailMailbox5> {};

// IEmailMailbox4
struct IEmailMailbox4_raw : IInspectable {
	virtual STDMETHODIMP _RegisterSyncManagerAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IEmailMailbox4_adaptor : X {
	ptr<Foundation::IAsyncAction> RegisterSyncManagerAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_RegisterSyncManagerAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IEmailMailbox4, X> : Windows::ApplicationModel::Email::IEmailMailbox4_adaptor<X> { typedef adapt IEmailMailbox4; };
struct IEmailMailbox4 : IEmailMailbox4_raw, generate<IEmailMailbox4> {};

// IEmailMailbox
struct IEmailMailbox_raw : IInspectable {
	virtual STDMETHODIMP _get_Capabilities(EmailMailboxCapabilities* *value);
	virtual STDMETHODIMP _get_ChangeTracker(EmailMailboxChangeTracker* *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_IsOwnedByCurrentApp(bool *value);
	virtual STDMETHODIMP _get_IsDataEncryptedUnderLock(bool *value);
	virtual STDMETHODIMP _get_MailAddress(HSTRING *value);
	virtual STDMETHODIMP _put_MailAddress(HSTRING value);
	virtual STDMETHODIMP _get_MailAddressAliases(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_OtherAppReadAccess(EmailMailboxOtherAppReadAccess *value);
	virtual STDMETHODIMP _put_OtherAppReadAccess(EmailMailboxOtherAppReadAccess value);
	virtual STDMETHODIMP _get_OtherAppWriteAccess(EmailMailboxOtherAppWriteAccess *value);
	virtual STDMETHODIMP _put_OtherAppWriteAccess(EmailMailboxOtherAppWriteAccess value);
	virtual STDMETHODIMP _get_Policies(EmailMailboxPolicies* *value);
	virtual STDMETHODIMP _get_SourceDisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_SyncManager(EmailMailboxSyncManager* *value);
	virtual STDMETHODIMP _get_UserDataAccountId(HSTRING *value);
	virtual STDMETHODIMP _GetConversationReader(EmailConversationReader* *result);
	virtual STDMETHODIMP _GetConversationReaderWithOptions(EmailQueryOptions* options, EmailConversationReader* *result);
	virtual STDMETHODIMP _GetMessageReader(EmailMessageReader* *result);
	virtual STDMETHODIMP _GetMessageReaderWithOptions(EmailQueryOptions* options, EmailMessageReader* *result);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _GetConversationAsync(HSTRING id, Foundation::IAsyncOperation<EmailConversation*>* *result);
	virtual STDMETHODIMP _GetFolderAsync(HSTRING id, Foundation::IAsyncOperation<EmailFolder*>* *result);
	virtual STDMETHODIMP _GetMessageAsync(HSTRING id, Foundation::IAsyncOperation<EmailMessage*>* *result);
	virtual STDMETHODIMP _GetSpecialFolderAsync(EmailSpecialFolderKind folderType, Foundation::IAsyncOperation<EmailFolder*>* *result);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkMessageAsSeenAsync(HSTRING messageId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkFolderAsSeenAsync(HSTRING folderId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkMessageReadAsync(HSTRING messageId, bool isRead, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ChangeMessageFlagStateAsync(HSTRING messageId, EmailFlagState flagState, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _TryMoveMessageAsync(HSTRING messageId, HSTRING newParentFolderId, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryMoveFolderAsync(HSTRING folderId, HSTRING newParentFolderId, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryMoveFolderWithNewNameAsync(HSTRING folderId, HSTRING newParentFolderId, HSTRING newFolderName, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _DeleteMessageAsync(HSTRING messageId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkFolderSyncEnabledAsync(HSTRING folderId, bool isSyncEnabled, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _SendMessageAsync(EmailMessage* message, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _SaveDraftAsync(EmailMessage* message, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _DownloadMessageAsync(HSTRING messageId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _DownloadAttachmentAsync(HSTRING attachmentId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _CreateResponseMessageAsync(HSTRING messageId, EmailMessageResponseKind responseType, HSTRING subject, EmailMessageBodyKind responseHeaderType, HSTRING responseHeader, Foundation::IAsyncOperation<EmailMessage*>* *result);
	virtual STDMETHODIMP _TryUpdateMeetingResponseAsync(EmailMessage* meeting, EmailMeetingResponseType response, HSTRING subject, HSTRING comment, bool sendUpdate, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryForwardMeetingAsync(EmailMessage* meeting, Foundation::Collections::IIterable<EmailRecipient*>* recipients, HSTRING subject, EmailMessageBodyKind forwardHeaderType, HSTRING forwardHeader, HSTRING comment, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryProposeNewTimeForMeetingAsync(EmailMessage* meeting, Foundation::DateTime newStartTime, Foundation::TimeSpan newDuration, HSTRING subject, HSTRING comment, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_MailboxChanged(Foundation::TypedEventHandler<EmailMailbox*, EmailMailboxChangedEventArgs*>* pHandler, Foundation::EventRegistrationToken *pToken);
	virtual STDMETHODIMP _remove_MailboxChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _SmartSendMessageAsync(EmailMessage* message, bool smartSend, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _TrySetAutoReplySettingsAsync(EmailMailboxAutoReplySettings* autoReplySettings, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryGetAutoReplySettingsAsync(EmailMailboxAutoReplyMessageResponseKind requestedFormat, Foundation::IAsyncOperation<EmailMailboxAutoReplySettings*>* *autoReplySettings);
};
template<typename X> struct IEmailMailbox_adaptor : X {
	union {
		struct : property {
			ptr<EmailMailboxCapabilities> get() { EmailMailboxCapabilities* value; hrcheck(enc(&IEmailMailbox_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<EmailMailboxCapabilities> operator()() { return get(); }
			operator ptr<EmailMailboxCapabilities> () { return get(); }
			ptr<EmailMailboxCapabilities> operator->() { return get(); }
		} Capabilities;
		struct : property {
			ptr<EmailMailboxChangeTracker> get() { EmailMailboxChangeTracker* value; hrcheck(enc(&IEmailMailbox_adaptor::ChangeTracker)->_get_ChangeTracker(&value)); return from_abi(value); }
			ptr<EmailMailboxChangeTracker> operator()() { return get(); }
			operator ptr<EmailMailboxChangeTracker> () { return get(); }
			ptr<EmailMailboxChangeTracker> operator->() { return get(); }
		} ChangeTracker;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMailbox_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailbox_adaptor::IsDataEncryptedUnderLock)->_get_IsDataEncryptedUnderLock(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDataEncryptedUnderLock;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailbox_adaptor::IsOwnedByCurrentApp)->_get_IsOwnedByCurrentApp(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOwnedByCurrentApp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox_adaptor::MailAddress)->_get_MailAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMailbox_adaptor::MailAddress)->_put_MailAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MailAddress;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IEmailMailbox_adaptor::MailAddressAliases)->_get_MailAddressAliases(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} MailAddressAliases;
		struct : property {
			EmailMailboxOtherAppReadAccess get() { EmailMailboxOtherAppReadAccess value; hrcheck(enc(&IEmailMailbox_adaptor::OtherAppReadAccess)->_get_OtherAppReadAccess(&value)); return value; }
			EmailMailboxOtherAppReadAccess operator()() { return get(); }
			operator EmailMailboxOtherAppReadAccess () { return get(); }
			void put(EmailMailboxOtherAppReadAccess value) { hrcheck(enc(&IEmailMailbox_adaptor::OtherAppReadAccess)->_put_OtherAppReadAccess(value)); }
			void operator=(EmailMailboxOtherAppReadAccess value) { put(value); }
			void operator()(EmailMailboxOtherAppReadAccess value) { put(value); }
		} OtherAppReadAccess;
		struct : property {
			EmailMailboxOtherAppWriteAccess get() { EmailMailboxOtherAppWriteAccess value; hrcheck(enc(&IEmailMailbox_adaptor::OtherAppWriteAccess)->_get_OtherAppWriteAccess(&value)); return value; }
			EmailMailboxOtherAppWriteAccess operator()() { return get(); }
			operator EmailMailboxOtherAppWriteAccess () { return get(); }
			void put(EmailMailboxOtherAppWriteAccess value) { hrcheck(enc(&IEmailMailbox_adaptor::OtherAppWriteAccess)->_put_OtherAppWriteAccess(value)); }
			void operator=(EmailMailboxOtherAppWriteAccess value) { put(value); }
			void operator()(EmailMailboxOtherAppWriteAccess value) { put(value); }
		} OtherAppWriteAccess;
		struct : property {
			ptr<EmailMailboxPolicies> get() { EmailMailboxPolicies* value; hrcheck(enc(&IEmailMailbox_adaptor::Policies)->_get_Policies(&value)); return from_abi(value); }
			ptr<EmailMailboxPolicies> operator()() { return get(); }
			operator ptr<EmailMailboxPolicies> () { return get(); }
			ptr<EmailMailboxPolicies> operator->() { return get(); }
		} Policies;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox_adaptor::SourceDisplayName)->_get_SourceDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourceDisplayName;
		struct : property {
			ptr<EmailMailboxSyncManager> get() { EmailMailboxSyncManager* value; hrcheck(enc(&IEmailMailbox_adaptor::SyncManager)->_get_SyncManager(&value)); return from_abi(value); }
			ptr<EmailMailboxSyncManager> operator()() { return get(); }
			operator ptr<EmailMailboxSyncManager> () { return get(); }
			ptr<EmailMailboxSyncManager> operator->() { return get(); }
		} SyncManager;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox_adaptor::UserDataAccountId)->_get_UserDataAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserDataAccountId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<EmailMailbox>, ptr<EmailMailboxChangedEventArgs>>> pHandler) { Foundation::EventRegistrationToken pToken; hrcheck(enc(&IEmailMailbox_adaptor::MailboxChanged)->_add_MailboxChanged(to_abi(pHandler), &pToken)); return pToken; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IEmailMailbox_adaptor::MailboxChanged)->_remove_MailboxChanged(token)); }
		} MailboxChanged;
	};
	ptr<EmailConversationReader> GetConversationReader() { EmailConversationReader* result; hrcheck(X::get()->_GetConversationReader(&result)); return from_abi(result); }
	ptr<EmailConversationReader> GetConversationReader(pptr<EmailQueryOptions> options) { EmailConversationReader* result; hrcheck(X::get()->_GetConversationReaderWithOptions(options, &result)); return from_abi(result); }
	ptr<EmailMessageReader> GetMessageReader() { EmailMessageReader* result; hrcheck(X::get()->_GetMessageReader(&result)); return from_abi(result); }
	ptr<EmailMessageReader> GetMessageReader(pptr<EmailQueryOptions> options) { EmailMessageReader* result; hrcheck(X::get()->_GetMessageReaderWithOptions(options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailConversation>>> GetConversationAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailConversation*>* result; hrcheck(X::get()->_GetConversationAsync(id, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailFolder>>> GetFolderAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailFolder*>* result; hrcheck(X::get()->_GetFolderAsync(id, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMessage>>> GetMessageAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailMessage*>* result; hrcheck(X::get()->_GetMessageAsync(id, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailFolder>>> GetSpecialFolderAsync(EmailSpecialFolderKind folderType) { Foundation::IAsyncOperation<EmailFolder*>* result; hrcheck(X::get()->_GetSpecialFolderAsync(folderType, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkMessageAsSeenAsync(hstring_ref messageId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkMessageAsSeenAsync(messageId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkFolderAsSeenAsync(hstring_ref folderId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkFolderAsSeenAsync(folderId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkMessageReadAsync(hstring_ref messageId, bool isRead) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkMessageReadAsync(messageId, isRead, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ChangeMessageFlagStateAsync(hstring_ref messageId, EmailFlagState flagState) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ChangeMessageFlagStateAsync(messageId, flagState, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryMoveMessageAsync(hstring_ref messageId, hstring_ref newParentFolderId) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryMoveMessageAsync(messageId, newParentFolderId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryMoveFolderAsync(hstring_ref folderId, hstring_ref newParentFolderId) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryMoveFolderAsync(folderId, newParentFolderId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryMoveFolderAsync(hstring_ref folderId, hstring_ref newParentFolderId, hstring_ref newFolderName) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryMoveFolderWithNewNameAsync(folderId, newParentFolderId, newFolderName, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeleteMessageAsync(hstring_ref messageId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteMessageAsync(messageId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkFolderSyncEnabledAsync(hstring_ref folderId, bool isSyncEnabled) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkFolderSyncEnabledAsync(folderId, isSyncEnabled, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SendMessageAsync(pptr<EmailMessage> message) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SendMessageAsync(message, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SaveDraftAsync(pptr<EmailMessage> message) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveDraftAsync(message, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DownloadMessageAsync(hstring_ref messageId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_DownloadMessageAsync(messageId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DownloadAttachmentAsync(hstring_ref attachmentId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_DownloadAttachmentAsync(attachmentId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMessage>>> CreateResponseMessageAsync(hstring_ref messageId, EmailMessageResponseKind responseType, hstring_ref subject, EmailMessageBodyKind responseHeaderType, hstring_ref responseHeader) { Foundation::IAsyncOperation<EmailMessage*>* result; hrcheck(X::get()->_CreateResponseMessageAsync(messageId, responseType, subject, responseHeaderType, responseHeader, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryUpdateMeetingResponseAsync(pptr<EmailMessage> meeting, EmailMeetingResponseType response, hstring_ref subject, hstring_ref comment, bool sendUpdate) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryUpdateMeetingResponseAsync(meeting, response, subject, comment, sendUpdate, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryForwardMeetingAsync(pptr<EmailMessage> meeting, pptr<Foundation::Collections::IIterable<ptr<EmailRecipient>>> recipients, hstring_ref subject, EmailMessageBodyKind forwardHeaderType, hstring_ref forwardHeader, hstring_ref comment) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryForwardMeetingAsync(meeting, to_abi(recipients), subject, forwardHeaderType, forwardHeader, comment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryProposeNewTimeForMeetingAsync(pptr<EmailMessage> meeting, const Foundation::DateTime& newStartTime, const Foundation::TimeSpan& newDuration, hstring_ref subject, hstring_ref comment) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryProposeNewTimeForMeetingAsync(meeting, newStartTime, newDuration, subject, comment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SendMessageAsync(pptr<EmailMessage> message, bool smartSend) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SmartSendMessageAsync(message, smartSend, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetAutoReplySettingsAsync(pptr<EmailMailboxAutoReplySettings> autoReplySettings) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TrySetAutoReplySettingsAsync(autoReplySettings, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMailboxAutoReplySettings>>> TryGetAutoReplySettingsAsync(EmailMailboxAutoReplyMessageResponseKind requestedFormat) { Foundation::IAsyncOperation<EmailMailboxAutoReplySettings*>* autoReplySettings; hrcheck(X::get()->_TryGetAutoReplySettingsAsync(requestedFormat, &autoReplySettings)); return from_abi(autoReplySettings); }
	IEmailMailbox_adaptor() {}
};
template<typename X> struct adapt<IEmailMailbox, X> : Windows::ApplicationModel::Email::IEmailMailbox_adaptor<X> { typedef adapt IEmailMailbox; };
struct IEmailMailbox : IEmailMailbox_raw, generate<IEmailMailbox> {};

// IEmailMailbox2
struct IEmailMailbox2_raw : IInspectable {
	virtual STDMETHODIMP _get_LinkedMailboxId(HSTRING *value);
	virtual STDMETHODIMP _get_NetworkAccountId(HSTRING *value);
	virtual STDMETHODIMP _get_NetworkId(HSTRING *value);
};
template<typename X> struct IEmailMailbox2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox2_adaptor::LinkedMailboxId)->_get_LinkedMailboxId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LinkedMailboxId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox2_adaptor::NetworkAccountId)->_get_NetworkAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkAccountId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailbox2_adaptor::NetworkId)->_get_NetworkId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkId;
	};
	IEmailMailbox2_adaptor() {}
};
template<typename X> struct adapt<IEmailMailbox2, X> : Windows::ApplicationModel::Email::IEmailMailbox2_adaptor<X> { typedef adapt IEmailMailbox2; };
struct IEmailMailbox2 : IEmailMailbox2_raw, generate<IEmailMailbox2> {};

// IEmailMailbox3
struct IEmailMailbox3_raw : IInspectable {
	virtual STDMETHODIMP _ResolveRecipientsAsync(Foundation::Collections::IIterable<HSTRING>* recipients, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailRecipientResolutionResult*>*>* *result);
	virtual STDMETHODIMP _ValidateCertificatesAsync(Foundation::Collections::IIterable<Security::Cryptography::Certificates::Certificate*>* certificates, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailCertificateValidationStatus>*>* *result);
	virtual STDMETHODIMP _TryEmptyFolderAsync(HSTRING folderId, Foundation::IAsyncOperation<EmailMailboxEmptyFolderStatus>* *result);
	virtual STDMETHODIMP _TryCreateFolderAsync(HSTRING parentFolderId, HSTRING name, Foundation::IAsyncOperation<EmailMailboxCreateFolderResult*>* *result);
	virtual STDMETHODIMP _TryDeleteFolderAsync(HSTRING folderId, Foundation::IAsyncOperation<EmailMailboxDeleteFolderStatus>* *result);
};
template<typename X> struct IEmailMailbox3_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<EmailRecipientResolutionResult>>>>> ResolveRecipientsAsync(pptr<Foundation::Collections::IIterable<hstring>> recipients) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailRecipientResolutionResult*>*>* result; hrcheck(X::get()->_ResolveRecipientsAsync(to_abi(recipients), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<EmailCertificateValidationStatus>>>> ValidateCertificatesAsync(pptr<Foundation::Collections::IIterable<ptr<Security::Cryptography::Certificates::Certificate>>> certificates) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailCertificateValidationStatus>*>* result; hrcheck(X::get()->_ValidateCertificatesAsync(to_abi(certificates), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<EmailMailboxEmptyFolderStatus>> TryEmptyFolderAsync(hstring_ref folderId) { Foundation::IAsyncOperation<EmailMailboxEmptyFolderStatus>* result; hrcheck(X::get()->_TryEmptyFolderAsync(folderId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMailboxCreateFolderResult>>> TryCreateFolderAsync(hstring_ref parentFolderId, hstring_ref name) { Foundation::IAsyncOperation<EmailMailboxCreateFolderResult*>* result; hrcheck(X::get()->_TryCreateFolderAsync(parentFolderId, name, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<EmailMailboxDeleteFolderStatus>> TryDeleteFolderAsync(hstring_ref folderId) { Foundation::IAsyncOperation<EmailMailboxDeleteFolderStatus>* result; hrcheck(X::get()->_TryDeleteFolderAsync(folderId, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IEmailMailbox3, X> : Windows::ApplicationModel::Email::IEmailMailbox3_adaptor<X> { typedef adapt IEmailMailbox3; };
struct IEmailMailbox3 : IEmailMailbox3_raw, generate<IEmailMailbox3> {};

// EmailMailbox
template<typename X> struct statics<EmailMailbox, X> : X {
	typedef typename X::root_type EmailMailbox;
};
struct EmailMailbox : generate<EmailMailbox> {
	using IEmailMailbox::SendMessageAsync;
	using IEmailMailbox::GetConversationReader;
	using IEmailMailbox::GetMessageReader;
	using IEmailMailbox::TryMoveFolderAsync;
};

// IEmailConversationReader
struct IEmailConversationReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<EmailConversationBatch*>* *result);
};
template<typename X> struct IEmailConversationReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<EmailConversationBatch>>> ReadBatchAsync() { Foundation::IAsyncOperation<EmailConversationBatch*>* result; hrcheck(X::get()->_ReadBatchAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IEmailConversationReader, X> : Windows::ApplicationModel::Email::IEmailConversationReader_adaptor<X> { typedef adapt IEmailConversationReader; };
struct IEmailConversationReader : IEmailConversationReader_raw, generate<IEmailConversationReader> {};

// EmailConversationReader
template<typename X> struct statics<EmailConversationReader, X> : X {
	typedef typename X::root_type EmailConversationReader;
};
struct EmailConversationReader : generate<EmailConversationReader> {};

// IEmailQueryOptionsFactory
struct IEmailQueryOptionsFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithText(HSTRING text, EmailQueryOptions* *result);
	virtual STDMETHODIMP _CreateWithTextAndFields(HSTRING text, EmailQuerySearchFields fields, EmailQueryOptions* *result);
};

// IEmailQueryOptions
struct IEmailQueryOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_TextSearch(EmailQueryTextSearch* *value);
	virtual STDMETHODIMP _get_SortDirection(EmailQuerySortDirection *value);
	virtual STDMETHODIMP _put_SortDirection(EmailQuerySortDirection value);
	virtual STDMETHODIMP _get_SortProperty(EmailQuerySortProperty *value);
	virtual STDMETHODIMP _put_SortProperty(EmailQuerySortProperty value);
	virtual STDMETHODIMP _get_Kind(EmailQueryKind *value);
	virtual STDMETHODIMP _put_Kind(EmailQueryKind value);
	virtual STDMETHODIMP _get_FolderIds(Foundation::Collections::IVector<HSTRING>* *value);
};
template<typename X> struct IEmailQueryOptions_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IEmailQueryOptions_adaptor::FolderIds)->_get_FolderIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} FolderIds;
		struct : property {
			EmailQueryKind get() { EmailQueryKind value; hrcheck(enc(&IEmailQueryOptions_adaptor::Kind)->_get_Kind(&value)); return value; }
			EmailQueryKind operator()() { return get(); }
			operator EmailQueryKind () { return get(); }
			void put(EmailQueryKind value) { hrcheck(enc(&IEmailQueryOptions_adaptor::Kind)->_put_Kind(value)); }
			void operator=(EmailQueryKind value) { put(value); }
			void operator()(EmailQueryKind value) { put(value); }
		} Kind;
		struct : property {
			EmailQuerySortDirection get() { EmailQuerySortDirection value; hrcheck(enc(&IEmailQueryOptions_adaptor::SortDirection)->_get_SortDirection(&value)); return value; }
			EmailQuerySortDirection operator()() { return get(); }
			operator EmailQuerySortDirection () { return get(); }
			void put(EmailQuerySortDirection value) { hrcheck(enc(&IEmailQueryOptions_adaptor::SortDirection)->_put_SortDirection(value)); }
			void operator=(EmailQuerySortDirection value) { put(value); }
			void operator()(EmailQuerySortDirection value) { put(value); }
		} SortDirection;
		struct : property {
			EmailQuerySortProperty get() { EmailQuerySortProperty value; hrcheck(enc(&IEmailQueryOptions_adaptor::SortProperty)->_get_SortProperty(&value)); return value; }
			EmailQuerySortProperty operator()() { return get(); }
			operator EmailQuerySortProperty () { return get(); }
			void put(EmailQuerySortProperty value) { hrcheck(enc(&IEmailQueryOptions_adaptor::SortProperty)->_put_SortProperty(value)); }
			void operator=(EmailQuerySortProperty value) { put(value); }
			void operator()(EmailQuerySortProperty value) { put(value); }
		} SortProperty;
		struct : property {
			ptr<EmailQueryTextSearch> get() { EmailQueryTextSearch* value; hrcheck(enc(&IEmailQueryOptions_adaptor::TextSearch)->_get_TextSearch(&value)); return from_abi(value); }
			ptr<EmailQueryTextSearch> operator()() { return get(); }
			operator ptr<EmailQueryTextSearch> () { return get(); }
			ptr<EmailQueryTextSearch> operator->() { return get(); }
		} TextSearch;
	};
	IEmailQueryOptions_adaptor() {}
};
template<typename X> struct adapt<IEmailQueryOptions, X> : Windows::ApplicationModel::Email::IEmailQueryOptions_adaptor<X> { typedef adapt IEmailQueryOptions; };
struct IEmailQueryOptions : IEmailQueryOptions_raw, generate<IEmailQueryOptions> {};

// EmailQueryOptions
template<typename> struct EmailQueryOptions_statics {
	static EmailQueryOptions *activate() { EmailQueryOptions *t; get_activation_factory<EmailQueryOptions>()->ActivateInstance((IInspectable**)&t); return t; }
	static EmailQueryOptions *activate(hstring_ref text) { EmailQueryOptions *result; hrcheck(get_activation_factory<EmailQueryOptions, IEmailQueryOptionsFactory>()->_CreateWithText(text, &result)); return result; }
	static EmailQueryOptions *activate(hstring_ref text, EmailQuerySearchFields fields) { EmailQueryOptions *result; hrcheck(get_activation_factory<EmailQueryOptions, IEmailQueryOptionsFactory>()->_CreateWithTextAndFields(text, fields, &result)); return result; }
};

template<typename X> struct statics<EmailQueryOptions, X> : X, Windows::ApplicationModel::Email::EmailQueryOptions_statics<void> {
	using Windows::ApplicationModel::Email::EmailQueryOptions_statics<void>::activate;
	typedef typename X::root_type EmailQueryOptions;
};
struct EmailQueryOptions : generate<EmailQueryOptions> {};

// IEmailMessageReader
struct IEmailMessageReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<EmailMessageBatch*>* *result);
};
template<typename X> struct IEmailMessageReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<EmailMessageBatch>>> ReadBatchAsync() { Foundation::IAsyncOperation<EmailMessageBatch*>* result; hrcheck(X::get()->_ReadBatchAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IEmailMessageReader, X> : Windows::ApplicationModel::Email::IEmailMessageReader_adaptor<X> { typedef adapt IEmailMessageReader; };
struct IEmailMessageReader : IEmailMessageReader_raw, generate<IEmailMessageReader> {};

// EmailMessageReader
template<typename X> struct statics<EmailMessageReader, X> : X {
	typedef typename X::root_type EmailMessageReader;
};
struct EmailMessageReader : generate<EmailMessageReader> {};

// IEmailConversation
struct IEmailConversation_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_MailboxId(HSTRING *value);
	virtual STDMETHODIMP _get_FlagState(EmailFlagState *value);
	virtual STDMETHODIMP _get_HasAttachment(bool *value);
	virtual STDMETHODIMP _get_Importance(EmailImportance *value);
	virtual STDMETHODIMP _get_LastEmailResponseKind(EmailMessageResponseKind *value);
	virtual STDMETHODIMP _get_MessageCount(unsigned *value);
	virtual STDMETHODIMP _get_MostRecentMessageId(HSTRING *value);
	virtual STDMETHODIMP _get_MostRecentMessageTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Preview(HSTRING *value);
	virtual STDMETHODIMP _get_LatestSender(EmailRecipient* *value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_UnreadMessageCount(unsigned *value);
	virtual STDMETHODIMP _FindMessagesAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMessage*>*>* *result);
	virtual STDMETHODIMP _FindMessagesWithCountAsync(unsigned count, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMessage*>*>* *result);
};
template<typename X> struct IEmailConversation_adaptor : X {
	union {
		struct : property {
			EmailFlagState get() { EmailFlagState value; hrcheck(enc(&IEmailConversation_adaptor::FlagState)->_get_FlagState(&value)); return value; }
			EmailFlagState operator()() { return get(); }
			operator EmailFlagState () { return get(); }
		} FlagState;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailConversation_adaptor::HasAttachment)->_get_HasAttachment(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasAttachment;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailConversation_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			EmailImportance get() { EmailImportance value; hrcheck(enc(&IEmailConversation_adaptor::Importance)->_get_Importance(&value)); return value; }
			EmailImportance operator()() { return get(); }
			operator EmailImportance () { return get(); }
		} Importance;
		struct : property {
			EmailMessageResponseKind get() { EmailMessageResponseKind value; hrcheck(enc(&IEmailConversation_adaptor::LastEmailResponseKind)->_get_LastEmailResponseKind(&value)); return value; }
			EmailMessageResponseKind operator()() { return get(); }
			operator EmailMessageResponseKind () { return get(); }
		} LastEmailResponseKind;
		struct : property {
			ptr<EmailRecipient> get() { EmailRecipient* value; hrcheck(enc(&IEmailConversation_adaptor::LatestSender)->_get_LatestSender(&value)); return from_abi(value); }
			ptr<EmailRecipient> operator()() { return get(); }
			operator ptr<EmailRecipient> () { return get(); }
			ptr<EmailRecipient> operator->() { return get(); }
		} LatestSender;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailConversation_adaptor::MailboxId)->_get_MailboxId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MailboxId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IEmailConversation_adaptor::MessageCount)->_get_MessageCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MessageCount;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailConversation_adaptor::MostRecentMessageId)->_get_MostRecentMessageId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MostRecentMessageId;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IEmailConversation_adaptor::MostRecentMessageTime)->_get_MostRecentMessageTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} MostRecentMessageTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailConversation_adaptor::Preview)->_get_Preview(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Preview;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailConversation_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subject;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IEmailConversation_adaptor::UnreadMessageCount)->_get_UnreadMessageCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} UnreadMessageCount;
	};
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<EmailMessage>>>>> FindMessagesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMessage*>*>* result; hrcheck(X::get()->_FindMessagesAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<EmailMessage>>>>> FindMessagesAsync(unsigned count) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMessage*>*>* result; hrcheck(X::get()->_FindMessagesWithCountAsync(count, &result)); return from_abi(result); }
	IEmailConversation_adaptor() {}
};
template<typename X> struct adapt<IEmailConversation, X> : Windows::ApplicationModel::Email::IEmailConversation_adaptor<X> { typedef adapt IEmailConversation; };
struct IEmailConversation : IEmailConversation_raw, generate<IEmailConversation> {};

// EmailConversation
template<typename X> struct statics<EmailConversation, X> : X {
	typedef typename X::root_type EmailConversation;
};
struct EmailConversation : generate<EmailConversation> {
	using IEmailConversation::FindMessagesAsync;
};

// IEmailFolder
struct IEmailFolder_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_MailboxId(HSTRING *value);
	virtual STDMETHODIMP _get_ParentFolderId(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_IsSyncEnabled(bool *value);
	virtual STDMETHODIMP _put_IsSyncEnabled(bool value);
	virtual STDMETHODIMP _get_LastSuccessfulSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_LastSuccessfulSyncTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_Kind(EmailSpecialFolderKind *value);
	virtual STDMETHODIMP _CreateFolderAsync(HSTRING name, Foundation::IAsyncOperation<EmailFolder*>* *result);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _FindChildFoldersAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailFolder*>*>* *result);
	virtual STDMETHODIMP _GetConversationReader(EmailConversationReader* *result);
	virtual STDMETHODIMP _GetConversationReaderWithOptions(EmailQueryOptions* options, EmailConversationReader* *result);
	virtual STDMETHODIMP _GetMessageAsync(HSTRING id, Foundation::IAsyncOperation<EmailMessage*>* *result);
	virtual STDMETHODIMP _GetMessageReader(EmailMessageReader* *result);
	virtual STDMETHODIMP _GetMessageReaderWithOptions(EmailQueryOptions* options, EmailMessageReader* *result);
	virtual STDMETHODIMP _GetMessageCountsAsync(Foundation::IAsyncOperation<EmailItemCounts*>* *result);
	virtual STDMETHODIMP _TryMoveAsync(EmailFolder* newParentFolder, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryMoveWithNewNameAsync(EmailFolder* newParentFolder, HSTRING newFolderName, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TrySaveAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _SaveMessageAsync(EmailMessage* message, Foundation::IAsyncAction* *result);
};
template<typename X> struct IEmailFolder_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailFolder_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailFolder_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailFolder_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailFolder_adaptor::IsSyncEnabled)->_get_IsSyncEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailFolder_adaptor::IsSyncEnabled)->_put_IsSyncEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSyncEnabled;
		struct : property {
			EmailSpecialFolderKind get() { EmailSpecialFolderKind value; hrcheck(enc(&IEmailFolder_adaptor::Kind)->_get_Kind(&value)); return value; }
			EmailSpecialFolderKind operator()() { return get(); }
			operator EmailSpecialFolderKind () { return get(); }
		} Kind;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IEmailFolder_adaptor::LastSuccessfulSyncTime)->_get_LastSuccessfulSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IEmailFolder_adaptor::LastSuccessfulSyncTime)->_put_LastSuccessfulSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastSuccessfulSyncTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailFolder_adaptor::MailboxId)->_get_MailboxId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MailboxId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailFolder_adaptor::ParentFolderId)->_get_ParentFolderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ParentFolderId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailFolder_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailFolder_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
	};
	ptr<Foundation::IAsyncOperation<ptr<EmailFolder>>> CreateFolderAsync(hstring_ref name) { Foundation::IAsyncOperation<EmailFolder*>* result; hrcheck(X::get()->_CreateFolderAsync(name, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<EmailFolder>>>>> FindChildFoldersAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailFolder*>*>* result; hrcheck(X::get()->_FindChildFoldersAsync(&result)); return from_abi(result); }
	ptr<EmailConversationReader> GetConversationReader() { EmailConversationReader* result; hrcheck(X::get()->_GetConversationReader(&result)); return from_abi(result); }
	ptr<EmailConversationReader> GetConversationReader(pptr<EmailQueryOptions> options) { EmailConversationReader* result; hrcheck(X::get()->_GetConversationReaderWithOptions(options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailMessage>>> GetMessageAsync(hstring_ref id) { Foundation::IAsyncOperation<EmailMessage*>* result; hrcheck(X::get()->_GetMessageAsync(id, &result)); return from_abi(result); }
	ptr<EmailMessageReader> GetMessageReader() { EmailMessageReader* result; hrcheck(X::get()->_GetMessageReader(&result)); return from_abi(result); }
	ptr<EmailMessageReader> GetMessageReader(pptr<EmailQueryOptions> options) { EmailMessageReader* result; hrcheck(X::get()->_GetMessageReaderWithOptions(options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<EmailItemCounts>>> GetMessageCountsAsync() { Foundation::IAsyncOperation<EmailItemCounts*>* result; hrcheck(X::get()->_GetMessageCountsAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryMoveAsync(pptr<EmailFolder> newParentFolder) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryMoveAsync(newParentFolder, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryMoveAsync(pptr<EmailFolder> newParentFolder, hstring_ref newFolderName) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryMoveWithNewNameAsync(newParentFolder, newFolderName, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TrySaveAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TrySaveAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SaveMessageAsync(pptr<EmailMessage> message) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveMessageAsync(message, &result)); return from_abi(result); }
	IEmailFolder_adaptor() {}
};
template<typename X> struct adapt<IEmailFolder, X> : Windows::ApplicationModel::Email::IEmailFolder_adaptor<X> { typedef adapt IEmailFolder; };
struct IEmailFolder : IEmailFolder_raw, generate<IEmailFolder> {};

// EmailFolder
template<typename X> struct statics<EmailFolder, X> : X {
	typedef typename X::root_type EmailFolder;
};
struct EmailFolder : generate<EmailFolder> {
	using IEmailFolder::GetMessageReader;
	using IEmailFolder::TryMoveAsync;
	using IEmailFolder::GetConversationReader;
};

// IEmailRecipient
struct IEmailRecipient_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Address(HSTRING *value);
	virtual STDMETHODIMP _put_Address(HSTRING value);
};
template<typename X> struct IEmailRecipient_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailRecipient_adaptor::Address)->_get_Address(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailRecipient_adaptor::Address)->_put_Address(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Address;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailRecipient_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailRecipient_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
	};
	IEmailRecipient_adaptor() {}
};
template<typename X> struct adapt<IEmailRecipient, X> : Windows::ApplicationModel::Email::IEmailRecipient_adaptor<X> { typedef adapt IEmailRecipient; };
struct IEmailRecipient : IEmailRecipient_raw, generate<IEmailRecipient> {};

// IEmailRecipientFactory
struct IEmailRecipientFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING address, EmailRecipient* *result);
	virtual STDMETHODIMP _CreateWithName(HSTRING address, HSTRING name, EmailRecipient* *result);
};

// EmailRecipient
template<typename> struct EmailRecipient_statics {
	static EmailRecipient *activate(hstring_ref address) { EmailRecipient *result; hrcheck(get_activation_factory<EmailRecipient, IEmailRecipientFactory>()->_Create(address, &result)); return result; }
	static EmailRecipient *activate(hstring_ref address, hstring_ref name) { EmailRecipient *result; hrcheck(get_activation_factory<EmailRecipient, IEmailRecipientFactory>()->_CreateWithName(address, name, &result)); return result; }
	static EmailRecipient *activate() { EmailRecipient *t; get_activation_factory<EmailRecipient>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<EmailRecipient, X> : X, Windows::ApplicationModel::Email::EmailRecipient_statics<void> {
	using Windows::ApplicationModel::Email::EmailRecipient_statics<void>::activate;
	typedef typename X::root_type EmailRecipient;
};
struct EmailRecipient : generate<EmailRecipient> {};

// IEmailIrmTemplate
struct IEmailIrmTemplate_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
};
template<typename X> struct IEmailIrmTemplate_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailIrmTemplate_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailIrmTemplate_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailIrmTemplate_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailIrmTemplate_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailIrmTemplate_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailIrmTemplate_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
	};
	IEmailIrmTemplate_adaptor() {}
};
template<typename X> struct adapt<IEmailIrmTemplate, X> : Windows::ApplicationModel::Email::IEmailIrmTemplate_adaptor<X> { typedef adapt IEmailIrmTemplate; };
struct IEmailIrmTemplate : IEmailIrmTemplate_raw, generate<IEmailIrmTemplate> {};

// IEmailIrmTemplateFactory
struct IEmailIrmTemplateFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING id, HSTRING name, HSTRING description, EmailIrmTemplate* *result);
};

// EmailIrmTemplate
template<typename> struct EmailIrmTemplate_statics {
	static EmailIrmTemplate *activate() { EmailIrmTemplate *t; get_activation_factory<EmailIrmTemplate>()->ActivateInstance((IInspectable**)&t); return t; }
	static EmailIrmTemplate *activate(hstring_ref id, hstring_ref name, hstring_ref description) { EmailIrmTemplate *result; hrcheck(get_activation_factory<EmailIrmTemplate, IEmailIrmTemplateFactory>()->_Create(id, name, description, &result)); return result; }
};

template<typename X> struct statics<EmailIrmTemplate, X> : X, Windows::ApplicationModel::Email::EmailIrmTemplate_statics<void> {
	using Windows::ApplicationModel::Email::EmailIrmTemplate_statics<void>::activate;
	typedef typename X::root_type EmailIrmTemplate;
};
struct EmailIrmTemplate : generate<EmailIrmTemplate> {};

// IEmailIrmInfo
struct IEmailIrmInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_CanEdit(bool *value);
	virtual STDMETHODIMP _put_CanEdit(bool value);
	virtual STDMETHODIMP _get_CanExtractData(bool *value);
	virtual STDMETHODIMP _put_CanExtractData(bool value);
	virtual STDMETHODIMP _get_CanForward(bool *value);
	virtual STDMETHODIMP _put_CanForward(bool value);
	virtual STDMETHODIMP _get_CanModifyRecipientsOnResponse(bool *value);
	virtual STDMETHODIMP _put_CanModifyRecipientsOnResponse(bool value);
	virtual STDMETHODIMP _get_CanPrintData(bool *value);
	virtual STDMETHODIMP _put_CanPrintData(bool value);
	virtual STDMETHODIMP _get_CanRemoveIrmOnResponse(bool *value);
	virtual STDMETHODIMP _put_CanRemoveIrmOnResponse(bool value);
	virtual STDMETHODIMP _get_CanReply(bool *value);
	virtual STDMETHODIMP _put_CanReply(bool value);
	virtual STDMETHODIMP _get_CanReplyAll(bool *value);
	virtual STDMETHODIMP _put_CanReplyAll(bool value);
	virtual STDMETHODIMP _get_ExpirationDate(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_ExpirationDate(Foundation::DateTime value);
	virtual STDMETHODIMP _get_IsIrmOriginator(bool *value);
	virtual STDMETHODIMP _put_IsIrmOriginator(bool value);
	virtual STDMETHODIMP _get_IsProgramaticAccessAllowed(bool *value);
	virtual STDMETHODIMP _put_IsProgramaticAccessAllowed(bool value);
	virtual STDMETHODIMP _get_Template(EmailIrmTemplate* *value);
	virtual STDMETHODIMP _put_Template(EmailIrmTemplate* value);
};
template<typename X> struct IEmailIrmInfo_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanEdit)->_get_CanEdit(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanEdit)->_put_CanEdit(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanEdit;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanExtractData)->_get_CanExtractData(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanExtractData)->_put_CanExtractData(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanExtractData;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanForward)->_get_CanForward(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanForward)->_put_CanForward(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanForward;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanModifyRecipientsOnResponse)->_get_CanModifyRecipientsOnResponse(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanModifyRecipientsOnResponse)->_put_CanModifyRecipientsOnResponse(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanModifyRecipientsOnResponse;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanPrintData)->_get_CanPrintData(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanPrintData)->_put_CanPrintData(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanPrintData;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanRemoveIrmOnResponse)->_get_CanRemoveIrmOnResponse(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanRemoveIrmOnResponse)->_put_CanRemoveIrmOnResponse(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanRemoveIrmOnResponse;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanReply)->_get_CanReply(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanReply)->_put_CanReply(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanReply;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::CanReplyAll)->_get_CanReplyAll(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::CanReplyAll)->_put_CanReplyAll(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanReplyAll;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IEmailIrmInfo_adaptor::ExpirationDate)->_get_ExpirationDate(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IEmailIrmInfo_adaptor::ExpirationDate)->_put_ExpirationDate(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} ExpirationDate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::IsIrmOriginator)->_get_IsIrmOriginator(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::IsIrmOriginator)->_put_IsIrmOriginator(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsIrmOriginator;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailIrmInfo_adaptor::IsProgramaticAccessAllowed)->_get_IsProgramaticAccessAllowed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailIrmInfo_adaptor::IsProgramaticAccessAllowed)->_put_IsProgramaticAccessAllowed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsProgramaticAccessAllowed;
		struct : property {
			ptr<EmailIrmTemplate> get() { EmailIrmTemplate* value; hrcheck(enc(&IEmailIrmInfo_adaptor::Template)->_get_Template(&value)); return from_abi(value); }
			ptr<EmailIrmTemplate> operator()() { return get(); }
			operator ptr<EmailIrmTemplate> () { return get(); }
			ptr<EmailIrmTemplate> operator->() { return get(); }
			void put(pptr<EmailIrmTemplate> value) { hrcheck(enc(&IEmailIrmInfo_adaptor::Template)->_put_Template(value)); }
			void operator=(pptr<EmailIrmTemplate> value) { put(value); }
			void operator()(pptr<EmailIrmTemplate> value) { put(value); }
		} Template;
	};
	IEmailIrmInfo_adaptor() {}
};
template<typename X> struct adapt<IEmailIrmInfo, X> : Windows::ApplicationModel::Email::IEmailIrmInfo_adaptor<X> { typedef adapt IEmailIrmInfo; };
struct IEmailIrmInfo : IEmailIrmInfo_raw, generate<IEmailIrmInfo> {};

// IEmailIrmInfoFactory
struct IEmailIrmInfoFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::DateTime expiration, EmailIrmTemplate* irmTemplate, EmailIrmInfo* *result);
};

// EmailIrmInfo
template<typename> struct EmailIrmInfo_statics {
	static EmailIrmInfo *activate(const Foundation::DateTime& expiration, pptr<EmailIrmTemplate> irmTemplate) { EmailIrmInfo *result; hrcheck(get_activation_factory<EmailIrmInfo, IEmailIrmInfoFactory>()->_Create(expiration, irmTemplate, &result)); return result; }
	static EmailIrmInfo *activate() { EmailIrmInfo *t; get_activation_factory<EmailIrmInfo>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<EmailIrmInfo, X> : X, Windows::ApplicationModel::Email::EmailIrmInfo_statics<void> {
	using Windows::ApplicationModel::Email::EmailIrmInfo_statics<void>::activate;
	typedef typename X::root_type EmailIrmInfo;
};
struct EmailIrmInfo : generate<EmailIrmInfo> {};

// IEmailAttachmentFactory2
struct IEmailAttachmentFactory2 : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING fileName, Storage::Streams::IRandomAccessStreamReference* data, HSTRING mimeType, EmailAttachment* *result);
};

// IEmailAttachmentFactory
struct IEmailAttachmentFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING fileName, Storage::Streams::IRandomAccessStreamReference* data, EmailAttachment* *result);
};

// IEmailAttachment2
struct IEmailAttachment2_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_ContentId(HSTRING *value);
	virtual STDMETHODIMP _put_ContentId(HSTRING value);
	virtual STDMETHODIMP _get_ContentLocation(HSTRING *value);
	virtual STDMETHODIMP _put_ContentLocation(HSTRING value);
	virtual STDMETHODIMP _get_DownloadState(EmailAttachmentDownloadState *value);
	virtual STDMETHODIMP _put_DownloadState(EmailAttachmentDownloadState value);
	virtual STDMETHODIMP _get_EstimatedDownloadSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _put_EstimatedDownloadSizeInBytes(unsigned __int64 value);
	virtual STDMETHODIMP _get_IsFromBaseMessage(bool *value);
	virtual STDMETHODIMP _get_IsInline(bool *value);
	virtual STDMETHODIMP _put_IsInline(bool value);
	virtual STDMETHODIMP _get_MimeType(HSTRING *value);
	virtual STDMETHODIMP _put_MimeType(HSTRING value);
};
template<typename X> struct IEmailAttachment2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailAttachment2_adaptor::ContentId)->_get_ContentId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailAttachment2_adaptor::ContentId)->_put_ContentId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContentId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailAttachment2_adaptor::ContentLocation)->_get_ContentLocation(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailAttachment2_adaptor::ContentLocation)->_put_ContentLocation(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContentLocation;
		struct : property {
			EmailAttachmentDownloadState get() { EmailAttachmentDownloadState value; hrcheck(enc(&IEmailAttachment2_adaptor::DownloadState)->_get_DownloadState(&value)); return value; }
			EmailAttachmentDownloadState operator()() { return get(); }
			operator EmailAttachmentDownloadState () { return get(); }
			void put(EmailAttachmentDownloadState value) { hrcheck(enc(&IEmailAttachment2_adaptor::DownloadState)->_put_DownloadState(value)); }
			void operator=(EmailAttachmentDownloadState value) { put(value); }
			void operator()(EmailAttachmentDownloadState value) { put(value); }
		} DownloadState;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IEmailAttachment2_adaptor::EstimatedDownloadSizeInBytes)->_get_EstimatedDownloadSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
			void put(unsigned __int64 value) { hrcheck(enc(&IEmailAttachment2_adaptor::EstimatedDownloadSizeInBytes)->_put_EstimatedDownloadSizeInBytes(value)); }
			void operator=(unsigned __int64 value) { put(value); }
			void operator()(unsigned __int64 value) { put(value); }
		} EstimatedDownloadSizeInBytes;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailAttachment2_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailAttachment2_adaptor::IsFromBaseMessage)->_get_IsFromBaseMessage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsFromBaseMessage;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailAttachment2_adaptor::IsInline)->_get_IsInline(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailAttachment2_adaptor::IsInline)->_put_IsInline(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsInline;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailAttachment2_adaptor::MimeType)->_get_MimeType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailAttachment2_adaptor::MimeType)->_put_MimeType(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MimeType;
	};
	IEmailAttachment2_adaptor() {}
};
template<typename X> struct adapt<IEmailAttachment2, X> : Windows::ApplicationModel::Email::IEmailAttachment2_adaptor<X> { typedef adapt IEmailAttachment2; };
struct IEmailAttachment2 : IEmailAttachment2_raw, generate<IEmailAttachment2> {};

// IEmailAttachment
struct IEmailAttachment_raw : IInspectable {
	virtual STDMETHODIMP _get_FileName(HSTRING *value);
	virtual STDMETHODIMP _put_FileName(HSTRING value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Data(Storage::Streams::IRandomAccessStreamReference* value);
};
template<typename X> struct IEmailAttachment_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IEmailAttachment_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IEmailAttachment_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Data;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailAttachment_adaptor::FileName)->_get_FileName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailAttachment_adaptor::FileName)->_put_FileName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} FileName;
	};
	IEmailAttachment_adaptor() {}
};
template<typename X> struct adapt<IEmailAttachment, X> : Windows::ApplicationModel::Email::IEmailAttachment_adaptor<X> { typedef adapt IEmailAttachment; };
struct IEmailAttachment : IEmailAttachment_raw, generate<IEmailAttachment> {};

// EmailAttachment
template<typename> struct EmailAttachment_statics {
	static EmailAttachment *activate() { EmailAttachment *t; get_activation_factory<EmailAttachment>()->ActivateInstance((IInspectable**)&t); return t; }
	static EmailAttachment *activate(hstring_ref fileName, pptr<Storage::Streams::IRandomAccessStreamReference> data) { EmailAttachment *result; hrcheck(get_activation_factory<EmailAttachment, IEmailAttachmentFactory>()->_Create(fileName, data, &result)); return result; }
	static EmailAttachment *activate(hstring_ref fileName, pptr<Storage::Streams::IRandomAccessStreamReference> data, hstring_ref mimeType) { EmailAttachment *result; hrcheck(get_activation_factory<EmailAttachment, IEmailAttachmentFactory2>()->_Create(fileName, data, mimeType, &result)); return result; }
};

template<typename X> struct statics<EmailAttachment, X> : X, Windows::ApplicationModel::Email::EmailAttachment_statics<void> {
	using Windows::ApplicationModel::Email::EmailAttachment_statics<void>::activate;
	typedef typename X::root_type EmailAttachment;
};
struct EmailAttachment : generate<EmailAttachment> {};

// IEmailMeetingInfo2
struct IEmailMeetingInfo2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsReportedOutOfDateByServer(bool *value);
};
template<typename X> struct IEmailMeetingInfo2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMeetingInfo2_adaptor::IsReportedOutOfDateByServer)->_get_IsReportedOutOfDateByServer(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsReportedOutOfDateByServer;
	};
	IEmailMeetingInfo2_adaptor() {}
};
template<typename X> struct adapt<IEmailMeetingInfo2, X> : Windows::ApplicationModel::Email::IEmailMeetingInfo2_adaptor<X> { typedef adapt IEmailMeetingInfo2; };
struct IEmailMeetingInfo2 : IEmailMeetingInfo2_raw, generate<IEmailMeetingInfo2> {};

// IEmailMeetingInfo
struct IEmailMeetingInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_AllowNewTimeProposal(bool *value);
	virtual STDMETHODIMP _put_AllowNewTimeProposal(bool value);
	virtual STDMETHODIMP _get_AppointmentRoamingId(HSTRING *value);
	virtual STDMETHODIMP _put_AppointmentRoamingId(HSTRING value);
	virtual STDMETHODIMP _get_AppointmentOriginalStartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_AppointmentOriginalStartTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_Duration(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_IsAllDay(bool *value);
	virtual STDMETHODIMP _put_IsAllDay(bool value);
	virtual STDMETHODIMP _get_IsResponseRequested(bool *value);
	virtual STDMETHODIMP _put_IsResponseRequested(bool value);
	virtual STDMETHODIMP _get_Location(HSTRING *value);
	virtual STDMETHODIMP _put_Location(HSTRING value);
	virtual STDMETHODIMP _get_ProposedStartTime(Foundation::IReference<Foundation::DateTime>* *proposedStartTime);
	virtual STDMETHODIMP _put_ProposedStartTime(Foundation::IReference<Foundation::DateTime>* proposedStartTime);
	virtual STDMETHODIMP _get_ProposedDuration(Foundation::IReference<Foundation::TimeSpan>* *duration);
	virtual STDMETHODIMP _put_ProposedDuration(Foundation::IReference<Foundation::TimeSpan>* duration);
	virtual STDMETHODIMP _get_RecurrenceStartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_RecurrenceStartTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Recurrence(Appointments::AppointmentRecurrence* *value);
	virtual STDMETHODIMP _put_Recurrence(Appointments::AppointmentRecurrence* value);
	virtual STDMETHODIMP _get_RemoteChangeNumber(unsigned __int64 *value);
	virtual STDMETHODIMP _put_RemoteChangeNumber(unsigned __int64 value);
	virtual STDMETHODIMP _get_StartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_StartTime(Foundation::DateTime value);
};
template<typename X> struct IEmailMeetingInfo_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMeetingInfo_adaptor::AllowNewTimeProposal)->_get_AllowNewTimeProposal(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::AllowNewTimeProposal)->_put_AllowNewTimeProposal(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowNewTimeProposal;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IEmailMeetingInfo_adaptor::AppointmentOriginalStartTime)->_get_AppointmentOriginalStartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::AppointmentOriginalStartTime)->_put_AppointmentOriginalStartTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} AppointmentOriginalStartTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMeetingInfo_adaptor::AppointmentRoamingId)->_get_AppointmentRoamingId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::AppointmentRoamingId)->_put_AppointmentRoamingId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AppointmentRoamingId;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IEmailMeetingInfo_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::Duration)->_put_Duration(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} Duration;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMeetingInfo_adaptor::IsAllDay)->_get_IsAllDay(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::IsAllDay)->_put_IsAllDay(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAllDay;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMeetingInfo_adaptor::IsResponseRequested)->_get_IsResponseRequested(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::IsResponseRequested)->_put_IsResponseRequested(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsResponseRequested;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMeetingInfo_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::Location)->_put_Location(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Location;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* duration; hrcheck(enc(&IEmailMeetingInfo_adaptor::ProposedDuration)->_get_ProposedDuration(&duration)); return from_abi(duration); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> duration) { hrcheck(enc(&IEmailMeetingInfo_adaptor::ProposedDuration)->_put_ProposedDuration(to_abi(duration))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> duration) { put(to_abi(duration)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> duration) { put(to_abi(duration)); }
		} ProposedDuration;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* proposedStartTime; hrcheck(enc(&IEmailMeetingInfo_adaptor::ProposedStartTime)->_get_ProposedStartTime(&proposedStartTime)); return from_abi(proposedStartTime); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> proposedStartTime) { hrcheck(enc(&IEmailMeetingInfo_adaptor::ProposedStartTime)->_put_ProposedStartTime(to_abi(proposedStartTime))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> proposedStartTime) { put(to_abi(proposedStartTime)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> proposedStartTime) { put(to_abi(proposedStartTime)); }
		} ProposedStartTime;
		struct : property {
			ptr<Appointments::AppointmentRecurrence> get() { Appointments::AppointmentRecurrence* value; hrcheck(enc(&IEmailMeetingInfo_adaptor::Recurrence)->_get_Recurrence(&value)); return from_abi(value); }
			ptr<Appointments::AppointmentRecurrence> operator()() { return get(); }
			operator ptr<Appointments::AppointmentRecurrence> () { return get(); }
			ptr<Appointments::AppointmentRecurrence> operator->() { return get(); }
			void put(pptr<Appointments::AppointmentRecurrence> value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::Recurrence)->_put_Recurrence(value)); }
			void operator=(pptr<Appointments::AppointmentRecurrence> value) { put(value); }
			void operator()(pptr<Appointments::AppointmentRecurrence> value) { put(value); }
		} Recurrence;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IEmailMeetingInfo_adaptor::RecurrenceStartTime)->_get_RecurrenceStartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::RecurrenceStartTime)->_put_RecurrenceStartTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} RecurrenceStartTime;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IEmailMeetingInfo_adaptor::RemoteChangeNumber)->_get_RemoteChangeNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
			void put(unsigned __int64 value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::RemoteChangeNumber)->_put_RemoteChangeNumber(value)); }
			void operator=(unsigned __int64 value) { put(value); }
			void operator()(unsigned __int64 value) { put(value); }
		} RemoteChangeNumber;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IEmailMeetingInfo_adaptor::StartTime)->_get_StartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IEmailMeetingInfo_adaptor::StartTime)->_put_StartTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} StartTime;
	};
	IEmailMeetingInfo_adaptor() {}
};
template<typename X> struct adapt<IEmailMeetingInfo, X> : Windows::ApplicationModel::Email::IEmailMeetingInfo_adaptor<X> { typedef adapt IEmailMeetingInfo; };
struct IEmailMeetingInfo : IEmailMeetingInfo_raw, generate<IEmailMeetingInfo> {};

// EmailMeetingInfo
template<typename X> struct statics<EmailMeetingInfo, X> : X {
	typedef typename X::root_type EmailMeetingInfo;
};
struct EmailMeetingInfo : generate<EmailMeetingInfo> {};

// IEmailMailboxChangedEventArgs
struct IEmailMailboxChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(EmailMailboxChangedDeferral* *result);
};
template<typename X> struct IEmailMailboxChangedEventArgs_adaptor : X {
	ptr<EmailMailboxChangedDeferral> GetDeferral() { EmailMailboxChangedDeferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IEmailMailboxChangedEventArgs, X> : Windows::ApplicationModel::Email::IEmailMailboxChangedEventArgs_adaptor<X> { typedef adapt IEmailMailboxChangedEventArgs; };
struct IEmailMailboxChangedEventArgs : IEmailMailboxChangedEventArgs_raw, generate<IEmailMailboxChangedEventArgs> {};

// IEmailMailboxChangedDeferral
struct IEmailMailboxChangedDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IEmailMailboxChangedDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IEmailMailboxChangedDeferral, X> : Windows::ApplicationModel::Email::IEmailMailboxChangedDeferral_adaptor<X> { typedef adapt IEmailMailboxChangedDeferral; };
struct IEmailMailboxChangedDeferral : IEmailMailboxChangedDeferral_raw, generate<IEmailMailboxChangedDeferral> {};

// EmailMailboxChangedDeferral
template<typename X> struct statics<EmailMailboxChangedDeferral, X> : X {
	typedef typename X::root_type EmailMailboxChangedDeferral;
};
struct EmailMailboxChangedDeferral : generate<EmailMailboxChangedDeferral> {};

// IEmailStoreNotificationTriggerDetails
struct IEmailStoreNotificationTriggerDetails : IInspectable, generate<IEmailStoreNotificationTriggerDetails> {};

// IEmailMailboxPolicies
struct IEmailMailboxPolicies_raw : IInspectable {
	virtual STDMETHODIMP _get_AllowedSmimeEncryptionAlgorithmNegotiation(EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation *value);
	virtual STDMETHODIMP _get_AllowSmimeSoftCertificates(bool *value);
	virtual STDMETHODIMP _get_RequiredSmimeEncryptionAlgorithm(Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>* *value);
	virtual STDMETHODIMP _get_RequiredSmimeSigningAlgorithm(Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>* *value);
};
template<typename X> struct IEmailMailboxPolicies_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxPolicies_adaptor::AllowSmimeSoftCertificates)->_get_AllowSmimeSoftCertificates(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AllowSmimeSoftCertificates;
		struct : property {
			EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation get() { EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation value; hrcheck(enc(&IEmailMailboxPolicies_adaptor::AllowedSmimeEncryptionAlgorithmNegotiation)->_get_AllowedSmimeEncryptionAlgorithmNegotiation(&value)); return value; }
			EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation operator()() { return get(); }
			operator EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation () { return get(); }
		} AllowedSmimeEncryptionAlgorithmNegotiation;
		struct : property {
			ptr<Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>> get() { Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>* value; hrcheck(enc(&IEmailMailboxPolicies_adaptor::RequiredSmimeEncryptionAlgorithm)->_get_RequiredSmimeEncryptionAlgorithm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>> operator()() { return get(); }
			operator ptr<Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>> () { return get(); }
			ptr<Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>> operator->() { return get(); }
		} RequiredSmimeEncryptionAlgorithm;
		struct : property {
			ptr<Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>> get() { Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>* value; hrcheck(enc(&IEmailMailboxPolicies_adaptor::RequiredSmimeSigningAlgorithm)->_get_RequiredSmimeSigningAlgorithm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>> operator()() { return get(); }
			operator ptr<Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>> () { return get(); }
			ptr<Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>> operator->() { return get(); }
		} RequiredSmimeSigningAlgorithm;
	};
	IEmailMailboxPolicies_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxPolicies, X> : Windows::ApplicationModel::Email::IEmailMailboxPolicies_adaptor<X> { typedef adapt IEmailMailboxPolicies; };
struct IEmailMailboxPolicies : IEmailMailboxPolicies_raw, generate<IEmailMailboxPolicies> {};

// IEmailMailboxPolicies2
struct IEmailMailboxPolicies2_raw : IInspectable {
	virtual STDMETHODIMP _get_MustEncryptSmimeMessages(bool *value);
	virtual STDMETHODIMP _get_MustSignSmimeMessages(bool *value);
};
template<typename X> struct IEmailMailboxPolicies2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxPolicies2_adaptor::MustEncryptSmimeMessages)->_get_MustEncryptSmimeMessages(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} MustEncryptSmimeMessages;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxPolicies2_adaptor::MustSignSmimeMessages)->_get_MustSignSmimeMessages(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} MustSignSmimeMessages;
	};
	IEmailMailboxPolicies2_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxPolicies2, X> : Windows::ApplicationModel::Email::IEmailMailboxPolicies2_adaptor<X> { typedef adapt IEmailMailboxPolicies2; };
struct IEmailMailboxPolicies2 : IEmailMailboxPolicies2_raw, generate<IEmailMailboxPolicies2> {};

// IEmailMailboxPolicies3
struct IEmailMailboxPolicies3_raw : IInspectable {
	virtual STDMETHODIMP _put_AllowedSmimeEncryptionAlgorithmNegotiation(EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation value);
	virtual STDMETHODIMP _put_AllowSmimeSoftCertificates(bool value);
	virtual STDMETHODIMP _put_RequiredSmimeEncryptionAlgorithm(Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>* value);
	virtual STDMETHODIMP _put_RequiredSmimeSigningAlgorithm(Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>* value);
	virtual STDMETHODIMP _put_MustEncryptSmimeMessages(bool value);
	virtual STDMETHODIMP _put_MustSignSmimeMessages(bool value);
};
template<typename X> struct IEmailMailboxPolicies3_adaptor : X {
	union {
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxPolicies3_adaptor::AllowSmimeSoftCertificates)->_put_AllowSmimeSoftCertificates(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowSmimeSoftCertificates;
		struct : property {
			void put(EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation value) { hrcheck(enc(&IEmailMailboxPolicies3_adaptor::AllowedSmimeEncryptionAlgorithmNegotiation)->_put_AllowedSmimeEncryptionAlgorithmNegotiation(value)); }
			void operator=(EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation value) { put(value); }
			void operator()(EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation value) { put(value); }
		} AllowedSmimeEncryptionAlgorithmNegotiation;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxPolicies3_adaptor::MustEncryptSmimeMessages)->_put_MustEncryptSmimeMessages(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} MustEncryptSmimeMessages;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxPolicies3_adaptor::MustSignSmimeMessages)->_put_MustSignSmimeMessages(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} MustSignSmimeMessages;
		struct : property {
			void put(pptr<Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>> value) { hrcheck(enc(&IEmailMailboxPolicies3_adaptor::RequiredSmimeEncryptionAlgorithm)->_put_RequiredSmimeEncryptionAlgorithm(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<EmailMailboxSmimeEncryptionAlgorithm>> value) { put(to_abi(value)); }
		} RequiredSmimeEncryptionAlgorithm;
		struct : property {
			void put(pptr<Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>> value) { hrcheck(enc(&IEmailMailboxPolicies3_adaptor::RequiredSmimeSigningAlgorithm)->_put_RequiredSmimeSigningAlgorithm(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<EmailMailboxSmimeSigningAlgorithm>> value) { put(to_abi(value)); }
		} RequiredSmimeSigningAlgorithm;
	};
	IEmailMailboxPolicies3_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxPolicies3, X> : Windows::ApplicationModel::Email::IEmailMailboxPolicies3_adaptor<X> { typedef adapt IEmailMailboxPolicies3; };
struct IEmailMailboxPolicies3 : IEmailMailboxPolicies3_raw, generate<IEmailMailboxPolicies3> {};

// IEmailMailboxCapabilities
struct IEmailMailboxCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_CanForwardMeetings(bool *value);
	virtual STDMETHODIMP _get_CanGetAndSetExternalAutoReplies(bool *value);
	virtual STDMETHODIMP _get_CanGetAndSetInternalAutoReplies(bool *value);
	virtual STDMETHODIMP _get_CanUpdateMeetingResponses(bool *value);
	virtual STDMETHODIMP _get_CanServerSearchFolders(bool *value);
	virtual STDMETHODIMP _get_CanServerSearchMailbox(bool *value);
	virtual STDMETHODIMP _get_CanProposeNewTimeForMeetings(bool *value);
	virtual STDMETHODIMP _get_CanSmartSend(bool *value);
};
template<typename X> struct IEmailMailboxCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanForwardMeetings)->_get_CanForwardMeetings(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanForwardMeetings;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanGetAndSetExternalAutoReplies)->_get_CanGetAndSetExternalAutoReplies(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanGetAndSetExternalAutoReplies;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanGetAndSetInternalAutoReplies)->_get_CanGetAndSetInternalAutoReplies(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanGetAndSetInternalAutoReplies;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanProposeNewTimeForMeetings)->_get_CanProposeNewTimeForMeetings(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanProposeNewTimeForMeetings;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanServerSearchFolders)->_get_CanServerSearchFolders(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanServerSearchFolders;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanServerSearchMailbox)->_get_CanServerSearchMailbox(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanServerSearchMailbox;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanSmartSend)->_get_CanSmartSend(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanSmartSend;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities_adaptor::CanUpdateMeetingResponses)->_get_CanUpdateMeetingResponses(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanUpdateMeetingResponses;
	};
	IEmailMailboxCapabilities_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxCapabilities, X> : Windows::ApplicationModel::Email::IEmailMailboxCapabilities_adaptor<X> { typedef adapt IEmailMailboxCapabilities; };
struct IEmailMailboxCapabilities : IEmailMailboxCapabilities_raw, generate<IEmailMailboxCapabilities> {};

// IEmailMailboxCapabilities2
struct IEmailMailboxCapabilities2_raw : IInspectable {
	virtual STDMETHODIMP _get_CanResolveRecipients(bool *value);
	virtual STDMETHODIMP _get_CanValidateCertificates(bool *value);
	virtual STDMETHODIMP _get_CanEmptyFolder(bool *value);
	virtual STDMETHODIMP _get_CanCreateFolder(bool *value);
	virtual STDMETHODIMP _get_CanDeleteFolder(bool *value);
	virtual STDMETHODIMP _get_CanMoveFolder(bool *value);
};
template<typename X> struct IEmailMailboxCapabilities2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities2_adaptor::CanCreateFolder)->_get_CanCreateFolder(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanCreateFolder;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities2_adaptor::CanDeleteFolder)->_get_CanDeleteFolder(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanDeleteFolder;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities2_adaptor::CanEmptyFolder)->_get_CanEmptyFolder(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanEmptyFolder;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities2_adaptor::CanMoveFolder)->_get_CanMoveFolder(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanMoveFolder;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities2_adaptor::CanResolveRecipients)->_get_CanResolveRecipients(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanResolveRecipients;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxCapabilities2_adaptor::CanValidateCertificates)->_get_CanValidateCertificates(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanValidateCertificates;
	};
	IEmailMailboxCapabilities2_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxCapabilities2, X> : Windows::ApplicationModel::Email::IEmailMailboxCapabilities2_adaptor<X> { typedef adapt IEmailMailboxCapabilities2; };
struct IEmailMailboxCapabilities2 : IEmailMailboxCapabilities2_raw, generate<IEmailMailboxCapabilities2> {};

// IEmailMailboxCapabilities3
struct IEmailMailboxCapabilities3_raw : IInspectable {
	virtual STDMETHODIMP _put_CanForwardMeetings(bool value);
	virtual STDMETHODIMP _put_CanGetAndSetExternalAutoReplies(bool value);
	virtual STDMETHODIMP _put_CanGetAndSetInternalAutoReplies(bool value);
	virtual STDMETHODIMP _put_CanUpdateMeetingResponses(bool value);
	virtual STDMETHODIMP _put_CanServerSearchFolders(bool value);
	virtual STDMETHODIMP _put_CanServerSearchMailbox(bool value);
	virtual STDMETHODIMP _put_CanProposeNewTimeForMeetings(bool value);
	virtual STDMETHODIMP _put_CanSmartSend(bool value);
	virtual STDMETHODIMP _put_CanResolveRecipients(bool value);
	virtual STDMETHODIMP _put_CanValidateCertificates(bool value);
	virtual STDMETHODIMP _put_CanEmptyFolder(bool value);
	virtual STDMETHODIMP _put_CanCreateFolder(bool value);
	virtual STDMETHODIMP _put_CanDeleteFolder(bool value);
	virtual STDMETHODIMP _put_CanMoveFolder(bool value);
};
template<typename X> struct IEmailMailboxCapabilities3_adaptor : X {
	union {
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanCreateFolder)->_put_CanCreateFolder(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanCreateFolder;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanDeleteFolder)->_put_CanDeleteFolder(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanDeleteFolder;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanEmptyFolder)->_put_CanEmptyFolder(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanEmptyFolder;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanForwardMeetings)->_put_CanForwardMeetings(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanForwardMeetings;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanGetAndSetExternalAutoReplies)->_put_CanGetAndSetExternalAutoReplies(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanGetAndSetExternalAutoReplies;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanGetAndSetInternalAutoReplies)->_put_CanGetAndSetInternalAutoReplies(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanGetAndSetInternalAutoReplies;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanMoveFolder)->_put_CanMoveFolder(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanMoveFolder;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanProposeNewTimeForMeetings)->_put_CanProposeNewTimeForMeetings(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanProposeNewTimeForMeetings;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanResolveRecipients)->_put_CanResolveRecipients(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanResolveRecipients;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanServerSearchFolders)->_put_CanServerSearchFolders(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanServerSearchFolders;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanServerSearchMailbox)->_put_CanServerSearchMailbox(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanServerSearchMailbox;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanSmartSend)->_put_CanSmartSend(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanSmartSend;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanUpdateMeetingResponses)->_put_CanUpdateMeetingResponses(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanUpdateMeetingResponses;
		struct : property {
			void put(bool value) { hrcheck(enc(&IEmailMailboxCapabilities3_adaptor::CanValidateCertificates)->_put_CanValidateCertificates(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanValidateCertificates;
	};
	IEmailMailboxCapabilities3_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxCapabilities3, X> : Windows::ApplicationModel::Email::IEmailMailboxCapabilities3_adaptor<X> { typedef adapt IEmailMailboxCapabilities3; };
struct IEmailMailboxCapabilities3 : IEmailMailboxCapabilities3_raw, generate<IEmailMailboxCapabilities3> {};

// EmailMailboxCapabilities
template<typename X> struct statics<EmailMailboxCapabilities, X> : X {
	typedef typename X::root_type EmailMailboxCapabilities;
};
struct EmailMailboxCapabilities : generate<EmailMailboxCapabilities> {
	using IEmailMailboxCapabilities2::CanResolveRecipients;
	using IEmailMailboxCapabilities::CanSmartSend;
	using IEmailMailboxCapabilities::CanServerSearchFolders;
	using IEmailMailboxCapabilities2::CanEmptyFolder;
	using IEmailMailboxCapabilities::CanGetAndSetInternalAutoReplies;
	using IEmailMailboxCapabilities2::CanMoveFolder;
	using IEmailMailboxCapabilities::CanUpdateMeetingResponses;
	using IEmailMailboxCapabilities::CanProposeNewTimeForMeetings;
	using IEmailMailboxCapabilities::CanForwardMeetings;
	using IEmailMailboxCapabilities2::CanValidateCertificates;
	using IEmailMailboxCapabilities::CanServerSearchMailbox;
	using IEmailMailboxCapabilities2::CanCreateFolder;
	using IEmailMailboxCapabilities::CanGetAndSetExternalAutoReplies;
	using IEmailMailboxCapabilities2::CanDeleteFolder;
};

// IEmailMailboxChangeTracker
struct IEmailMailboxChangeTracker_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTracking(bool *value);
	virtual STDMETHODIMP _Enable();
	virtual STDMETHODIMP _GetChangeReader(EmailMailboxChangeReader* *value);
	virtual STDMETHODIMP _Reset();
};
template<typename X> struct IEmailMailboxChangeTracker_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxChangeTracker_adaptor::IsTracking)->_get_IsTracking(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTracking;
	};
	void Enable() { hrcheck(X::get()->_Enable()); }
	ptr<EmailMailboxChangeReader> GetChangeReader() { EmailMailboxChangeReader* value; hrcheck(X::get()->_GetChangeReader(&value)); return from_abi(value); }
	void Reset() { hrcheck(X::get()->_Reset()); }
	IEmailMailboxChangeTracker_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxChangeTracker, X> : Windows::ApplicationModel::Email::IEmailMailboxChangeTracker_adaptor<X> { typedef adapt IEmailMailboxChangeTracker; };
struct IEmailMailboxChangeTracker : IEmailMailboxChangeTracker_raw, generate<IEmailMailboxChangeTracker> {};

// EmailMailboxChangeTracker
template<typename X> struct statics<EmailMailboxChangeTracker, X> : X {
	typedef typename X::root_type EmailMailboxChangeTracker;
};
struct EmailMailboxChangeTracker : generate<EmailMailboxChangeTracker> {};

// EmailMailboxPolicies
template<typename X> struct statics<EmailMailboxPolicies, X> : X {
	typedef typename X::root_type EmailMailboxPolicies;
};
struct EmailMailboxPolicies : generate<EmailMailboxPolicies> {
	using IEmailMailboxPolicies2::MustEncryptSmimeMessages;
	using IEmailMailboxPolicies::AllowedSmimeEncryptionAlgorithmNegotiation;
	using IEmailMailboxPolicies::RequiredSmimeSigningAlgorithm;
	using IEmailMailboxPolicies::AllowSmimeSoftCertificates;
	using IEmailMailboxPolicies::RequiredSmimeEncryptionAlgorithm;
	using IEmailMailboxPolicies2::MustSignSmimeMessages;
};

// IEmailMailboxSyncManager2
struct IEmailMailboxSyncManager2_raw : IInspectable {
	virtual STDMETHODIMP _put_Status(EmailMailboxSyncStatus value);
	virtual STDMETHODIMP _put_LastSuccessfulSyncTime(Foundation::DateTime value);
	virtual STDMETHODIMP _put_LastAttemptedSyncTime(Foundation::DateTime value);
};
template<typename X> struct IEmailMailboxSyncManager2_adaptor : X {
	union {
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IEmailMailboxSyncManager2_adaptor::LastAttemptedSyncTime)->_put_LastAttemptedSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastAttemptedSyncTime;
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IEmailMailboxSyncManager2_adaptor::LastSuccessfulSyncTime)->_put_LastSuccessfulSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastSuccessfulSyncTime;
		struct : property {
			void put(EmailMailboxSyncStatus value) { hrcheck(enc(&IEmailMailboxSyncManager2_adaptor::Status)->_put_Status(value)); }
			void operator=(EmailMailboxSyncStatus value) { put(value); }
			void operator()(EmailMailboxSyncStatus value) { put(value); }
		} Status;
	};
	IEmailMailboxSyncManager2_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxSyncManager2, X> : Windows::ApplicationModel::Email::IEmailMailboxSyncManager2_adaptor<X> { typedef adapt IEmailMailboxSyncManager2; };
struct IEmailMailboxSyncManager2 : IEmailMailboxSyncManager2_raw, generate<IEmailMailboxSyncManager2> {};

// IEmailMailboxSyncManager
struct IEmailMailboxSyncManager_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(EmailMailboxSyncStatus *value);
	virtual STDMETHODIMP _get_LastSuccessfulSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_LastAttemptedSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _SyncAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_SyncStatusChanged(Foundation::TypedEventHandler<EmailMailboxSyncManager*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SyncStatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IEmailMailboxSyncManager_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IEmailMailboxSyncManager_adaptor::LastAttemptedSyncTime)->_get_LastAttemptedSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LastAttemptedSyncTime;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IEmailMailboxSyncManager_adaptor::LastSuccessfulSyncTime)->_get_LastSuccessfulSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LastSuccessfulSyncTime;
		struct : property {
			EmailMailboxSyncStatus get() { EmailMailboxSyncStatus value; hrcheck(enc(&IEmailMailboxSyncManager_adaptor::Status)->_get_Status(&value)); return value; }
			EmailMailboxSyncStatus operator()() { return get(); }
			operator EmailMailboxSyncStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<EmailMailboxSyncManager>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IEmailMailboxSyncManager_adaptor::SyncStatusChanged)->_add_SyncStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IEmailMailboxSyncManager_adaptor::SyncStatusChanged)->_remove_SyncStatusChanged(token)); }
		} SyncStatusChanged;
	};
	ptr<Foundation::IAsyncOperation<bool>> SyncAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_SyncAsync(&result)); return from_abi(result); }
	IEmailMailboxSyncManager_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxSyncManager, X> : Windows::ApplicationModel::Email::IEmailMailboxSyncManager_adaptor<X> { typedef adapt IEmailMailboxSyncManager; };
struct IEmailMailboxSyncManager : IEmailMailboxSyncManager_raw, generate<IEmailMailboxSyncManager> {};

// EmailMailboxSyncManager
template<typename X> struct statics<EmailMailboxSyncManager, X> : X {
	typedef typename X::root_type EmailMailboxSyncManager;
};
struct EmailMailboxSyncManager : generate<EmailMailboxSyncManager> {
	using IEmailMailboxSyncManager::LastAttemptedSyncTime;
	using IEmailMailboxSyncManager::Status;
	using IEmailMailboxSyncManager::LastSuccessfulSyncTime;
};

// EmailMailboxChangedEventArgs
template<typename X> struct statics<EmailMailboxChangedEventArgs, X> : X {
	typedef typename X::root_type EmailMailboxChangedEventArgs;
};
struct EmailMailboxChangedEventArgs : generate<EmailMailboxChangedEventArgs> {};

// IEmailMailboxAutoReplySettings
struct IEmailMailboxAutoReplySettings_raw : IInspectable {
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEnabled(bool value);
	virtual STDMETHODIMP _get_ResponseKind(EmailMailboxAutoReplyMessageResponseKind *value);
	virtual STDMETHODIMP _put_ResponseKind(EmailMailboxAutoReplyMessageResponseKind value);
	virtual STDMETHODIMP _get_StartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_StartTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_EndTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_EndTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_InternalReply(EmailMailboxAutoReply* *value);
	virtual STDMETHODIMP _get_KnownExternalReply(EmailMailboxAutoReply* *value);
	virtual STDMETHODIMP _get_UnknownExternalReply(EmailMailboxAutoReply* *value);
};
template<typename X> struct IEmailMailboxAutoReplySettings_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::EndTime)->_get_EndTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::EndTime)->_put_EndTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} EndTime;
		struct : property {
			ptr<EmailMailboxAutoReply> get() { EmailMailboxAutoReply* value; hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::InternalReply)->_get_InternalReply(&value)); return from_abi(value); }
			ptr<EmailMailboxAutoReply> operator()() { return get(); }
			operator ptr<EmailMailboxAutoReply> () { return get(); }
			ptr<EmailMailboxAutoReply> operator->() { return get(); }
		} InternalReply;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::IsEnabled)->_put_IsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEnabled;
		struct : property {
			ptr<EmailMailboxAutoReply> get() { EmailMailboxAutoReply* value; hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::KnownExternalReply)->_get_KnownExternalReply(&value)); return from_abi(value); }
			ptr<EmailMailboxAutoReply> operator()() { return get(); }
			operator ptr<EmailMailboxAutoReply> () { return get(); }
			ptr<EmailMailboxAutoReply> operator->() { return get(); }
		} KnownExternalReply;
		struct : property {
			EmailMailboxAutoReplyMessageResponseKind get() { EmailMailboxAutoReplyMessageResponseKind value; hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::ResponseKind)->_get_ResponseKind(&value)); return value; }
			EmailMailboxAutoReplyMessageResponseKind operator()() { return get(); }
			operator EmailMailboxAutoReplyMessageResponseKind () { return get(); }
			void put(EmailMailboxAutoReplyMessageResponseKind value) { hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::ResponseKind)->_put_ResponseKind(value)); }
			void operator=(EmailMailboxAutoReplyMessageResponseKind value) { put(value); }
			void operator()(EmailMailboxAutoReplyMessageResponseKind value) { put(value); }
		} ResponseKind;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::StartTime)->_get_StartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::StartTime)->_put_StartTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} StartTime;
		struct : property {
			ptr<EmailMailboxAutoReply> get() { EmailMailboxAutoReply* value; hrcheck(enc(&IEmailMailboxAutoReplySettings_adaptor::UnknownExternalReply)->_get_UnknownExternalReply(&value)); return from_abi(value); }
			ptr<EmailMailboxAutoReply> operator()() { return get(); }
			operator ptr<EmailMailboxAutoReply> () { return get(); }
			ptr<EmailMailboxAutoReply> operator->() { return get(); }
		} UnknownExternalReply;
	};
	IEmailMailboxAutoReplySettings_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxAutoReplySettings, X> : Windows::ApplicationModel::Email::IEmailMailboxAutoReplySettings_adaptor<X> { typedef adapt IEmailMailboxAutoReplySettings; };
struct IEmailMailboxAutoReplySettings : IEmailMailboxAutoReplySettings_raw, generate<IEmailMailboxAutoReplySettings> {};

// EmailMailboxAutoReplySettings
template<typename X> struct statics<EmailMailboxAutoReplySettings, X> : X {
	typedef typename X::root_type EmailMailboxAutoReplySettings;
};
struct EmailMailboxAutoReplySettings : generate<EmailMailboxAutoReplySettings> {};

// IEmailRecipientResolutionResult2
struct IEmailRecipientResolutionResult2_raw : IInspectable {
	virtual STDMETHODIMP _put_Status(EmailRecipientResolutionStatus value);
	virtual STDMETHODIMP _SetPublicKeys(Foundation::Collections::IIterable<Security::Cryptography::Certificates::Certificate*>* value);
};
template<typename X> struct IEmailRecipientResolutionResult2_adaptor : X {
	union {
		struct : property {
			void put(EmailRecipientResolutionStatus value) { hrcheck(enc(&IEmailRecipientResolutionResult2_adaptor::Status)->_put_Status(value)); }
			void operator=(EmailRecipientResolutionStatus value) { put(value); }
			void operator()(EmailRecipientResolutionStatus value) { put(value); }
		} Status;
	};
	void SetPublicKeys(pptr<Foundation::Collections::IIterable<ptr<Security::Cryptography::Certificates::Certificate>>> value) { hrcheck(X::get()->_SetPublicKeys(to_abi(value))); }
	IEmailRecipientResolutionResult2_adaptor() {}
};
template<typename X> struct adapt<IEmailRecipientResolutionResult2, X> : Windows::ApplicationModel::Email::IEmailRecipientResolutionResult2_adaptor<X> { typedef adapt IEmailRecipientResolutionResult2; };
struct IEmailRecipientResolutionResult2 : IEmailRecipientResolutionResult2_raw, generate<IEmailRecipientResolutionResult2> {};

// IEmailRecipientResolutionResult
struct IEmailRecipientResolutionResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(EmailRecipientResolutionStatus *value);
	virtual STDMETHODIMP _get_PublicKeys(Foundation::Collections::IVectorView<Security::Cryptography::Certificates::Certificate*>* *value);
};
template<typename X> struct IEmailRecipientResolutionResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> get() { Foundation::Collections::IVectorView<Security::Cryptography::Certificates::Certificate*>* value; hrcheck(enc(&IEmailRecipientResolutionResult_adaptor::PublicKeys)->_get_PublicKeys(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Security::Cryptography::Certificates::Certificate>>> operator->() { return get(); }
		} PublicKeys;
		struct : property {
			EmailRecipientResolutionStatus get() { EmailRecipientResolutionStatus value; hrcheck(enc(&IEmailRecipientResolutionResult_adaptor::Status)->_get_Status(&value)); return value; }
			EmailRecipientResolutionStatus operator()() { return get(); }
			operator EmailRecipientResolutionStatus () { return get(); }
		} Status;
	};
	IEmailRecipientResolutionResult_adaptor() {}
};
template<typename X> struct adapt<IEmailRecipientResolutionResult, X> : Windows::ApplicationModel::Email::IEmailRecipientResolutionResult_adaptor<X> { typedef adapt IEmailRecipientResolutionResult; };
struct IEmailRecipientResolutionResult : IEmailRecipientResolutionResult_raw, generate<IEmailRecipientResolutionResult> {};

// EmailRecipientResolutionResult
template<typename X> struct statics<EmailRecipientResolutionResult, X> : X {
	typedef typename X::root_type EmailRecipientResolutionResult;
};
struct EmailRecipientResolutionResult : generate<EmailRecipientResolutionResult> {
	using IEmailRecipientResolutionResult::Status;
};

// IEmailMailboxCreateFolderResult
struct IEmailMailboxCreateFolderResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(EmailMailboxCreateFolderStatus *value);
	virtual STDMETHODIMP _get_Folder(EmailFolder* *value);
};
template<typename X> struct IEmailMailboxCreateFolderResult_adaptor : X {
	union {
		struct : property {
			ptr<EmailFolder> get() { EmailFolder* value; hrcheck(enc(&IEmailMailboxCreateFolderResult_adaptor::Folder)->_get_Folder(&value)); return from_abi(value); }
			ptr<EmailFolder> operator()() { return get(); }
			operator ptr<EmailFolder> () { return get(); }
			ptr<EmailFolder> operator->() { return get(); }
		} Folder;
		struct : property {
			EmailMailboxCreateFolderStatus get() { EmailMailboxCreateFolderStatus value; hrcheck(enc(&IEmailMailboxCreateFolderResult_adaptor::Status)->_get_Status(&value)); return value; }
			EmailMailboxCreateFolderStatus operator()() { return get(); }
			operator EmailMailboxCreateFolderStatus () { return get(); }
		} Status;
	};
	IEmailMailboxCreateFolderResult_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxCreateFolderResult, X> : Windows::ApplicationModel::Email::IEmailMailboxCreateFolderResult_adaptor<X> { typedef adapt IEmailMailboxCreateFolderResult; };
struct IEmailMailboxCreateFolderResult : IEmailMailboxCreateFolderResult_raw, generate<IEmailMailboxCreateFolderResult> {};

// EmailMailboxCreateFolderResult
template<typename X> struct statics<EmailMailboxCreateFolderResult, X> : X {
	typedef typename X::root_type EmailMailboxCreateFolderResult;
};
struct EmailMailboxCreateFolderResult : generate<EmailMailboxCreateFolderResult> {};

// IEmailMailboxAutoReply
struct IEmailMailboxAutoReply_raw : IInspectable {
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEnabled(bool value);
	virtual STDMETHODIMP _get_Response(HSTRING *value);
	virtual STDMETHODIMP _put_Response(HSTRING value);
};
template<typename X> struct IEmailMailboxAutoReply_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailMailboxAutoReply_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IEmailMailboxAutoReply_adaptor::IsEnabled)->_put_IsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEnabled;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailMailboxAutoReply_adaptor::Response)->_get_Response(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailMailboxAutoReply_adaptor::Response)->_put_Response(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Response;
	};
	IEmailMailboxAutoReply_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxAutoReply, X> : Windows::ApplicationModel::Email::IEmailMailboxAutoReply_adaptor<X> { typedef adapt IEmailMailboxAutoReply; };
struct IEmailMailboxAutoReply : IEmailMailboxAutoReply_raw, generate<IEmailMailboxAutoReply> {};

// EmailMailboxAutoReply
template<typename X> struct statics<EmailMailboxAutoReply, X> : X {
	typedef typename X::root_type EmailMailboxAutoReply;
};
struct EmailMailboxAutoReply : generate<EmailMailboxAutoReply> {};

// IEmailItemCounts
struct IEmailItemCounts_raw : IInspectable {
	virtual STDMETHODIMP _get_Flagged(unsigned *value);
	virtual STDMETHODIMP _get_Important(unsigned *value);
	virtual STDMETHODIMP _get_Total(unsigned *value);
	virtual STDMETHODIMP _get_Unread(unsigned *value);
};
template<typename X> struct IEmailItemCounts_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IEmailItemCounts_adaptor::Flagged)->_get_Flagged(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Flagged;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IEmailItemCounts_adaptor::Important)->_get_Important(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Important;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IEmailItemCounts_adaptor::Total)->_get_Total(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Total;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IEmailItemCounts_adaptor::Unread)->_get_Unread(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Unread;
	};
	IEmailItemCounts_adaptor() {}
};
template<typename X> struct adapt<IEmailItemCounts, X> : Windows::ApplicationModel::Email::IEmailItemCounts_adaptor<X> { typedef adapt IEmailItemCounts; };
struct IEmailItemCounts : IEmailItemCounts_raw, generate<IEmailItemCounts> {};

// EmailItemCounts
template<typename X> struct statics<EmailItemCounts, X> : X {
	typedef typename X::root_type EmailItemCounts;
};
struct EmailItemCounts : generate<EmailItemCounts> {};

// IEmailMailboxAction
struct IEmailMailboxAction_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(EmailMailboxActionKind *value);
	virtual STDMETHODIMP _get_ChangeNumber(unsigned __int64 *value);
};
template<typename X> struct IEmailMailboxAction_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IEmailMailboxAction_adaptor::ChangeNumber)->_get_ChangeNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} ChangeNumber;
		struct : property {
			EmailMailboxActionKind get() { EmailMailboxActionKind value; hrcheck(enc(&IEmailMailboxAction_adaptor::Kind)->_get_Kind(&value)); return value; }
			EmailMailboxActionKind operator()() { return get(); }
			operator EmailMailboxActionKind () { return get(); }
		} Kind;
	};
	IEmailMailboxAction_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxAction, X> : Windows::ApplicationModel::Email::IEmailMailboxAction_adaptor<X> { typedef adapt IEmailMailboxAction; };
struct IEmailMailboxAction : IEmailMailboxAction_raw, generate<IEmailMailboxAction> {};

// IEmailQueryTextSearch
struct IEmailQueryTextSearch_raw : IInspectable {
	virtual STDMETHODIMP _get_Fields(EmailQuerySearchFields *value);
	virtual STDMETHODIMP _put_Fields(EmailQuerySearchFields value);
	virtual STDMETHODIMP _get_SearchScope(EmailQuerySearchScope *value);
	virtual STDMETHODIMP _put_SearchScope(EmailQuerySearchScope value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
};
template<typename X> struct IEmailQueryTextSearch_adaptor : X {
	union {
		struct : property {
			EmailQuerySearchFields get() { EmailQuerySearchFields value; hrcheck(enc(&IEmailQueryTextSearch_adaptor::Fields)->_get_Fields(&value)); return value; }
			EmailQuerySearchFields operator()() { return get(); }
			operator EmailQuerySearchFields () { return get(); }
			void put(EmailQuerySearchFields value) { hrcheck(enc(&IEmailQueryTextSearch_adaptor::Fields)->_put_Fields(value)); }
			void operator=(EmailQuerySearchFields value) { put(value); }
			void operator()(EmailQuerySearchFields value) { put(value); }
		} Fields;
		struct : property {
			EmailQuerySearchScope get() { EmailQuerySearchScope value; hrcheck(enc(&IEmailQueryTextSearch_adaptor::SearchScope)->_get_SearchScope(&value)); return value; }
			EmailQuerySearchScope operator()() { return get(); }
			operator EmailQuerySearchScope () { return get(); }
			void put(EmailQuerySearchScope value) { hrcheck(enc(&IEmailQueryTextSearch_adaptor::SearchScope)->_put_SearchScope(value)); }
			void operator=(EmailQuerySearchScope value) { put(value); }
			void operator()(EmailQuerySearchScope value) { put(value); }
		} SearchScope;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailQueryTextSearch_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEmailQueryTextSearch_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
	};
	IEmailQueryTextSearch_adaptor() {}
};
template<typename X> struct adapt<IEmailQueryTextSearch, X> : Windows::ApplicationModel::Email::IEmailQueryTextSearch_adaptor<X> { typedef adapt IEmailQueryTextSearch; };
struct IEmailQueryTextSearch : IEmailQueryTextSearch_raw, generate<IEmailQueryTextSearch> {};

// EmailQueryTextSearch
template<typename X> struct statics<EmailQueryTextSearch, X> : X {
	typedef typename X::root_type EmailQueryTextSearch;
};
struct EmailQueryTextSearch : generate<EmailQueryTextSearch> {};

// IEmailConversationBatch
struct IEmailConversationBatch_raw : IInspectable {
	virtual STDMETHODIMP _get_Conversations(Foundation::Collections::IVectorView<EmailConversation*>* *value);
	virtual STDMETHODIMP _get_Status(EmailBatchStatus *value);
};
template<typename X> struct IEmailConversationBatch_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<EmailConversation>>> get() { Foundation::Collections::IVectorView<EmailConversation*>* value; hrcheck(enc(&IEmailConversationBatch_adaptor::Conversations)->_get_Conversations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<EmailConversation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<EmailConversation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<EmailConversation>>> operator->() { return get(); }
		} Conversations;
		struct : property {
			EmailBatchStatus get() { EmailBatchStatus value; hrcheck(enc(&IEmailConversationBatch_adaptor::Status)->_get_Status(&value)); return value; }
			EmailBatchStatus operator()() { return get(); }
			operator EmailBatchStatus () { return get(); }
		} Status;
	};
	IEmailConversationBatch_adaptor() {}
};
template<typename X> struct adapt<IEmailConversationBatch, X> : Windows::ApplicationModel::Email::IEmailConversationBatch_adaptor<X> { typedef adapt IEmailConversationBatch; };
struct IEmailConversationBatch : IEmailConversationBatch_raw, generate<IEmailConversationBatch> {};

// EmailConversationBatch
template<typename X> struct statics<EmailConversationBatch, X> : X {
	typedef typename X::root_type EmailConversationBatch;
};
struct EmailConversationBatch : generate<EmailConversationBatch> {};

// IEmailMessageBatch
struct IEmailMessageBatch_raw : IInspectable {
	virtual STDMETHODIMP _get_Messages(Foundation::Collections::IVectorView<EmailMessage*>* *value);
	virtual STDMETHODIMP _get_Status(EmailBatchStatus *value);
};
template<typename X> struct IEmailMessageBatch_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<EmailMessage>>> get() { Foundation::Collections::IVectorView<EmailMessage*>* value; hrcheck(enc(&IEmailMessageBatch_adaptor::Messages)->_get_Messages(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<EmailMessage>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<EmailMessage>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<EmailMessage>>> operator->() { return get(); }
		} Messages;
		struct : property {
			EmailBatchStatus get() { EmailBatchStatus value; hrcheck(enc(&IEmailMessageBatch_adaptor::Status)->_get_Status(&value)); return value; }
			EmailBatchStatus operator()() { return get(); }
			operator EmailBatchStatus () { return get(); }
		} Status;
	};
	IEmailMessageBatch_adaptor() {}
};
template<typename X> struct adapt<IEmailMessageBatch, X> : Windows::ApplicationModel::Email::IEmailMessageBatch_adaptor<X> { typedef adapt IEmailMessageBatch; };
struct IEmailMessageBatch : IEmailMessageBatch_raw, generate<IEmailMessageBatch> {};

// EmailMessageBatch
template<typename X> struct statics<EmailMessageBatch, X> : X {
	typedef typename X::root_type EmailMessageBatch;
};
struct EmailMessageBatch : generate<EmailMessageBatch> {};

// IEmailMailboxChange
struct IEmailMailboxChange_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeType(EmailMailboxChangeType *value);
	virtual STDMETHODIMP _get_MailboxActions(Foundation::Collections::IVector<EmailMailboxAction*>* *value);
	virtual STDMETHODIMP _get_Message(EmailMessage* *value);
	virtual STDMETHODIMP _get_Folder(EmailFolder* *value);
};
template<typename X> struct IEmailMailboxChange_adaptor : X {
	union {
		struct : property {
			EmailMailboxChangeType get() { EmailMailboxChangeType value; hrcheck(enc(&IEmailMailboxChange_adaptor::ChangeType)->_get_ChangeType(&value)); return value; }
			EmailMailboxChangeType operator()() { return get(); }
			operator EmailMailboxChangeType () { return get(); }
		} ChangeType;
		struct : property {
			ptr<EmailFolder> get() { EmailFolder* value; hrcheck(enc(&IEmailMailboxChange_adaptor::Folder)->_get_Folder(&value)); return from_abi(value); }
			ptr<EmailFolder> operator()() { return get(); }
			operator ptr<EmailFolder> () { return get(); }
			ptr<EmailFolder> operator->() { return get(); }
		} Folder;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<EmailMailboxAction>>> get() { Foundation::Collections::IVector<EmailMailboxAction*>* value; hrcheck(enc(&IEmailMailboxChange_adaptor::MailboxActions)->_get_MailboxActions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<EmailMailboxAction>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<EmailMailboxAction>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<EmailMailboxAction>>> operator->() { return get(); }
		} MailboxActions;
		struct : property {
			ptr<EmailMessage> get() { EmailMessage* value; hrcheck(enc(&IEmailMailboxChange_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<EmailMessage> operator()() { return get(); }
			operator ptr<EmailMessage> () { return get(); }
			ptr<EmailMessage> operator->() { return get(); }
		} Message;
	};
	IEmailMailboxChange_adaptor() {}
};
template<typename X> struct adapt<IEmailMailboxChange, X> : Windows::ApplicationModel::Email::IEmailMailboxChange_adaptor<X> { typedef adapt IEmailMailboxChange; };
struct IEmailMailboxChange : IEmailMailboxChange_raw, generate<IEmailMailboxChange> {};

// EmailMailboxAction
template<typename X> struct statics<EmailMailboxAction, X> : X {
	typedef typename X::root_type EmailMailboxAction;
};
struct EmailMailboxAction : generate<EmailMailboxAction> {};

// IEmailMailboxChangeReader
struct IEmailMailboxChangeReader_raw : IInspectable {
	virtual STDMETHODIMP _AcceptChanges();
	virtual STDMETHODIMP _AcceptChangesThrough(EmailMailboxChange* lastChangeToAcknowledge);
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMailboxChange*>*>* *value);
};
template<typename X> struct IEmailMailboxChangeReader_adaptor : X {
	void AcceptChanges() { hrcheck(X::get()->_AcceptChanges()); }
	void AcceptChangesThrough(pptr<EmailMailboxChange> lastChangeToAcknowledge) { hrcheck(X::get()->_AcceptChangesThrough(lastChangeToAcknowledge)); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<EmailMailboxChange>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EmailMailboxChange*>*>* value; hrcheck(X::get()->_ReadBatchAsync(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IEmailMailboxChangeReader, X> : Windows::ApplicationModel::Email::IEmailMailboxChangeReader_adaptor<X> { typedef adapt IEmailMailboxChangeReader; };
struct IEmailMailboxChangeReader : IEmailMailboxChangeReader_raw, generate<IEmailMailboxChangeReader> {};

// EmailMailboxChange
template<typename X> struct statics<EmailMailboxChange, X> : X {
	typedef typename X::root_type EmailMailboxChange;
};
struct EmailMailboxChange : generate<EmailMailboxChange> {};

// EmailMailboxChangeReader
template<typename X> struct statics<EmailMailboxChangeReader, X> : X {
	typedef typename X::root_type EmailMailboxChangeReader;
};
struct EmailMailboxChangeReader : generate<EmailMailboxChangeReader> {};

// EmailManager
template<typename> struct EmailManager_statics {
	static ptr<EmailManagerForUser> GetForUser(pptr<System::User> user) { EmailManagerForUser* result; hrcheck(get_activation_factory<EmailManager, IEmailManagerStatics3>()->_GetForUser(user, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<EmailStore>>> RequestStoreAsync(EmailStoreAccessType accessType) { Foundation::IAsyncOperation<EmailStore*>* result; hrcheck(get_activation_factory<EmailManager, IEmailManagerStatics2>()->_RequestStoreAsync(accessType, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> ShowComposeNewEmailAsync(pptr<EmailMessage> message) { Foundation::IAsyncAction* asyncAction; hrcheck(get_activation_factory<EmailManager, IEmailManagerStatics>()->_ShowComposeNewEmailAsync(message, &asyncAction)); return from_abi(asyncAction); }
};

template<typename X> struct statics<EmailManager, X> : X, Windows::ApplicationModel::Email::EmailManager_statics<void> {
	typedef typename X::root_type EmailManager;
};
struct EmailManager : generate<EmailManager> {};

// EmailStoreNotificationTriggerDetails
template<typename X> struct statics<EmailStoreNotificationTriggerDetails, X> : X {
	typedef typename X::root_type EmailStoreNotificationTriggerDetails;
};
struct EmailStoreNotificationTriggerDetails : generate<EmailStoreNotificationTriggerDetails> {};
}}}
} // namespace iso_winrt
