#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Automation.Peers

#include "Windows.UI.Xaml.Automation.Peers.0.h"
#include "Windows.UI.Xaml.Automation.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.Xaml.h"
#include "Windows.UI.Xaml.Automation.Provider.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
template<typename T> struct IVector;
}}
namespace UI { namespace Xaml { namespace Controls { namespace Primitives {
struct Thumb;
struct ColorPickerSlider;
struct RangeBase;
struct ScrollBar;
struct Selector;
struct ColorSpectrum;
struct RepeatButton;
struct ButtonBase;
struct ToggleButton;
}
struct CheckBox;
struct FlyoutPresenter;
struct RadioButton;
struct HubSection;
struct MenuFlyoutItem;
struct CalendarDatePicker;
struct MenuFlyoutPresenter;
struct ListBox;
struct CaptureElement;
struct FlipView;
struct ComboBox;
struct Image;
struct ListViewBase;
struct AutoSuggestBox;
struct ScrollViewer;
struct DatePicker;
struct RichTextBlockOverflow;
struct RichTextBlock;
struct GridViewHeaderItem;
struct TextBlock;
struct GridViewItem;
struct ListViewHeaderItem;
struct ListViewItem;
struct AppBar;
struct NavigationViewItem;
struct TreeViewItem;
struct HyperlinkButton;
struct ToggleMenuFlyoutItem;
struct Button;
struct AppBarButton;
struct SemanticZoom;
struct AppBarToggleButton;
struct Hub;
struct GridView;
struct TimePicker;
struct ListView;
struct ItemsControl;
struct TreeViewList;
struct Slider;
struct MediaElement;
struct ProgressBar;
struct MediaPlayerElement;
struct SearchBox;
struct ListBoxItem;
struct FlipViewItem;
struct ComboBoxItem;
struct Pivot;
struct SettingsFlyout;
struct PivotItem;
struct GroupItem;
struct ToggleSwitch;
struct TextBox;
struct PersonPicture;
struct ProgressRing;
struct RatingControl;
struct PasswordBox;
struct MediaTransportControls;
struct RichEditBox;
struct ListViewBaseHeaderItem;
}}}}

// defs

template<> struct def<Windows::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IImageAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IImageAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides2> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMediaTransportControlsAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMediaTransportControlsAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutoSuggestBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutoSuggestBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ICalendarDatePickerAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ICalendarDatePickerAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IHubAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IHubAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMediaPlayerElementAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMediaPlayerElementAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AccessibilityView> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationControlType> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationEvents> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationHeadingLevel> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationLandmarkType> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationLiveSetting> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationNavigationDirection> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationNotificationKind> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationNotificationProcessing> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationOrientation> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationStructureChangeType> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::PatternInterface> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RawElementProviderRuntimeId> : value_type<unsigned, unsigned> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerStatics3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer5> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer6> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer7> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeer8> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationPeer> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IAutomationPeer3, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3, Windows::UI::Xaml::Automation::Peers::IAutomationPeer4, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4, Windows::UI::Xaml::Automation::Peers::IAutomationPeer5, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5, Windows::UI::Xaml::Automation::Peers::IAutomationPeer6, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6, Windows::UI::Xaml::Automation::Peers::IAutomationPeer7, Windows::UI::Xaml::Automation::Peers::IAutomationPeer8, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutomationPeerAnnotation> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RatingControlAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::CaptureElementAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ComboBoxItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::FlipViewItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::GroupItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ImageAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IImageAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IImageAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListBoxItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::MediaTransportControlsAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IMediaTransportControlsAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IMediaTransportControlsAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::PasswordBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ProgressRingAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RichTextBlockAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RichTextBlockOverflowAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::SettingsFlyoutAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::TextBlockAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::TextBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ThumbAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::DatePickerAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::FlyoutPresenterAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::GridViewItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::HubAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IHubAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IHubAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::MediaElementAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::MediaPlayerElementAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IMediaPlayerElementAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IMediaPlayerElementAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RichEditBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::SearchBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::TimePickerAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::GridViewHeaderItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListViewHeaderItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::HyperlinkButtonAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RepeatButtonAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AutoSuggestBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutoSuggestBoxAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::MenuFlyoutItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AppBarButtonAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides2>, composer_type<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::MenuFlyoutPresenterAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IRangeValueProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ProgressBarAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ScrollBarAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer, Windows::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::HubSectionAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ScrollViewerAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IDropTargetProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListViewAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::SemanticZoomAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ToggleSwitchAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::CheckBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::RadioButtonAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ToggleMenuFlyoutItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AppBarToggleButtonAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeer>, composer_type<Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::CalendarDatePickerAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ICalendarDatePickerAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider, Windows::UI::Xaml::Automation::Provider::IValueProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::ICalendarDatePickerAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ComboBoxItemDataAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::FlipViewItemDataAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListBoxItemDataAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::GridViewItemDataAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListViewItemDataAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider, Windows::UI::Xaml::Automation::Provider::IValueProvider, Windows::UI::Xaml::Automation::Provider::IWindowProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::AppBarAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider, Windows::UI::Xaml::Automation::Provider::IWindowProvider>, composer_type<Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeerFactory> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IInkToolbarAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::InkToolbarAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IInkToolbarAutomationPeer> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IMapControlAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::MapControlAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IMapControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollProvider, Windows::UI::Xaml::Automation::Provider::ITransformProvider2, Windows::UI::Xaml::Automation::Provider::ITransformProvider> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ILoopingSelectorItemDataAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::LoopingSelectorItemDataAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::ILoopingSelectorItemDataAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IDatePickerFlyoutPresenterAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::DatePickerFlyoutPresenterAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IDatePickerFlyoutPresenterAutomationPeer> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IListPickerFlyoutPresenterAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ListPickerFlyoutPresenterAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListPickerFlyoutPresenterAutomationPeer> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::LoopingSelectorAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Provider::IScrollProvider, Windows::UI::Xaml::Automation::Provider::ISelectionProvider> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ILoopingSelectorItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::LoopingSelectorItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ILoopingSelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPickerFlyoutPresenterAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::PickerFlyoutPresenterAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IPickerFlyoutPresenterAutomationPeer> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPivotItemAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPivotItemAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::PivotItemAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IPivotItemAutomationPeer>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::PivotItemDataAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::ITimePickerFlyoutPresenterAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::TimePickerFlyoutPresenterAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ITimePickerFlyoutPresenterAutomationPeer> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPivotAutomationPeer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::IPivotAutomationPeerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::Peers::PivotAutomationPeer> : class_type<Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::IPivotAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollProvider, Windows::UI::Xaml::Automation::Provider::ISelectionProvider>, custom_activators {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeer> { define_guid(0x15D5BA03, 0x10D, 0x4FF7, 0x90, 0x87, 0xF4, 0xDD, 0x9, 0xF8, 0x31, 0xB7);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IColorSpectrumAutomationPeerFactory> { define_guid(0xAC400E1, 0xB743, 0x4496, 0x83, 0x7A, 0x88, 0x89, 0xE6, 0xAC, 0x64, 0x97);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeer> { define_guid(0xA514215A, 0x7293, 0x4577, 0x92, 0x4C, 0x47, 0xD4, 0xE0, 0xBF, 0x9B, 0x90);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IColorPickerSliderAutomationPeerFactory> { define_guid(0x1A55C77E, 0x9DD6, 0x45A3, 0x90, 0x42, 0xB4, 0x2, 0x0, 0xFE, 0xA1, 0xA9);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeer> { define_guid(0x309847A5, 0x9971, 0x4D8D, 0xA8, 0x1C, 0x8, 0x5C, 0x70, 0x86, 0xA1, 0xB9);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::INavigationViewItemAutomationPeerFactory> { define_guid(0xBC2835D, 0xAA38, 0x4F97, 0x96, 0x64, 0xE6, 0xFC, 0x82, 0x1D, 0x81, 0xED);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeer> { define_guid(0x27156D4C, 0xA66F, 0x4AAF, 0x82, 0x86, 0x4F, 0x79, 0x6D, 0x30, 0x62, 0x8C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPersonPictureAutomationPeerFactory> { define_guid(0xA95F1F6D, 0x2524, 0x44A4, 0x97, 0xFD, 0x11, 0x81, 0x13, 0x1, 0x0, 0xAD);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRatingControlAutomationPeer> { define_guid(0x3D14349A, 0x9963, 0x4A47, 0x82, 0x3C, 0xF4, 0x57, 0xCB, 0x32, 0x9, 0xD5);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRatingControlAutomationPeerFactory> { define_guid(0xF179F272, 0x9846, 0x4632, 0x8B, 0x9C, 0xBE, 0x6F, 0xA8, 0xD3, 0xC9, 0xBB);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeer> { define_guid(0x71C1B5BC, 0xBB29, 0x4479, 0xA8, 0xA8, 0x60, 0x6B, 0xE6, 0xB8, 0x23, 0xAE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITreeViewListAutomationPeerFactory> { define_guid(0xF597E2, 0xF811, 0x475A, 0xBF, 0xE6, 0x29, 0xF, 0xE7, 0x7, 0xFA, 0x88);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeer> { define_guid(0x2331D648, 0xB617, 0x437F, 0x92, 0xC, 0x71, 0xD4, 0x50, 0x50, 0x3E, 0x65);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITreeViewItemAutomationPeerFactory> { define_guid(0x73D388BF, 0x1D01, 0x4159, 0x82, 0xC0, 0x2B, 0x29, 0x96, 0xDB, 0xFD, 0xCE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer> { define_guid(0x953C34F6, 0x3B31, 0x47A7, 0xB3, 0xBF, 0x25, 0xD3, 0xAE, 0x99, 0xC3, 0x17);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IItemAutomationPeerFactory> { define_guid(0x29065073, 0xDE3D, 0x4D3F, 0x97, 0xB4, 0x4D, 0x6F, 0x9D, 0x53, 0x44, 0x4D);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer> { define_guid(0xA4F3B5B6, 0x7585, 0x4E0B, 0x96, 0xD2, 0x8, 0xCF, 0x6F, 0x28, 0xBE, 0xFA);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeerFactory> { define_guid(0x8A04091E, 0xE6B2, 0x4C60, 0xA7, 0x59, 0xC1, 0x3C, 0xA4, 0x51, 0x65, 0xED);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeer> { define_guid(0xDCC44EE0, 0xFA45, 0x45C6, 0x8B, 0xB7, 0x32, 0xD, 0x80, 0x8F, 0x59, 0x58);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeerFactory> { define_guid(0x9B92EF48, 0x85E9, 0x4869, 0xB1, 0x75, 0x8F, 0x7C, 0xF4, 0x5A, 0x6D, 0x9F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeer> { define_guid(0x12DDC76E, 0x9552, 0x446A, 0x82, 0xEE, 0x93, 0x8C, 0xC3, 0x71, 0x80, 0xF);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeerFactory> { define_guid(0x134AC7FC, 0x397A, 0x403F, 0xA6, 0xEC, 0x1C, 0xE8, 0xBE, 0xDA, 0x15, 0xE5);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeer> { define_guid(0xC83034DE, 0xFA08, 0x4BD3, 0xAE, 0xB2, 0xD2, 0xE5, 0xBF, 0xA0, 0x4D, 0xF9);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeerFactory> { define_guid(0x69109356, 0xD0E5, 0x4C10, 0xA0, 0x9C, 0xAD, 0xB, 0xF1, 0xB0, 0xCB, 0x1);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeer> { define_guid(0x1914FE6D, 0x740, 0x4236, 0x9E, 0xE1, 0x38, 0xCF, 0x19, 0xC1, 0xC3, 0x88);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeerFactory> { define_guid(0x56A64567, 0xF21C, 0x4C90, 0xB3, 0x79, 0x15, 0xA2, 0x7C, 0x7F, 0x84, 0x9);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IImageAutomationPeer> { define_guid(0x9B0BBF8C, 0x60A2, 0x48BF, 0xAB, 0x2C, 0x1A, 0x52, 0xA4, 0x51, 0xD2, 0xD4);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IImageAutomationPeerFactory> { define_guid(0x90304003, 0x687D, 0x47BF, 0xB3, 0xA2, 0x4B, 0xAB, 0xCA, 0xD8, 0xEF, 0x50);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer> { define_guid(0x96E76BF1, 0x37F7, 0x4088, 0x92, 0x5D, 0x65, 0x26, 0x8E, 0x83, 0xE3, 0x4D);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerFactory> { define_guid(0x4038A259, 0x2E1A, 0x49CA, 0xA5, 0x33, 0xC6, 0x4F, 0x18, 0x15, 0x77, 0xE6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer2> { define_guid(0xC48D8917, 0x95A8, 0x47B8, 0xA5, 0x17, 0xBF, 0x89, 0x1A, 0x6C, 0x3, 0x9B);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides2> { define_guid(0x361DC0E8, 0xB56F, 0x45E9, 0x80, 0xFE, 0x10, 0xA0, 0xFB, 0xF, 0xE1, 0x77);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeer> { define_guid(0x1BC6E1C6, 0x2997, 0x42DF, 0x99, 0xEB, 0x92, 0xBC, 0x1D, 0xD1, 0x49, 0xFB);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeerFactory> { define_guid(0x509F9DD8, 0xB0AA, 0x443F, 0xA1, 0x10, 0x41, 0x20, 0x9A, 0xF4, 0x4F, 0x1C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMediaTransportControlsAutomationPeer> { define_guid(0xA3AD8D93, 0x79F8, 0x4958, 0xA3, 0xC8, 0x98, 0xD, 0xEF, 0xB8, 0x3D, 0x15);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMediaTransportControlsAutomationPeerFactory> { define_guid(0xF41CB003, 0xE103, 0x4AB0, 0x81, 0x2A, 0xA0, 0x8F, 0xBD, 0xB5, 0x70, 0xCE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeer> { define_guid(0x684F065E, 0x3DF3, 0x4B9F, 0x82, 0xAD, 0x88, 0x19, 0xDB, 0x3B, 0x21, 0x8A);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeerFactory> { define_guid(0xAC3D7EDE, 0xDCA4, 0x481C, 0xB5, 0x20, 0x4A, 0x9B, 0x3F, 0x3B, 0x17, 0x9C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeer> { define_guid(0xBC305EEE, 0x39D3, 0x4EEB, 0xAC, 0x33, 0x23, 0x94, 0xDE, 0x12, 0x3E, 0x2E);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeerFactory> { define_guid(0xF3DB204B, 0x157E, 0x40BC, 0x95, 0x93, 0x55, 0xBC, 0x5C, 0x71, 0xA4, 0xF6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer> { define_guid(0xE454B549, 0x4B2C, 0x42AD, 0xB0, 0x4B, 0xD3, 0x59, 0x47, 0xD1, 0xEE, 0x50);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeerFactory> { define_guid(0x827C7601, 0x3078, 0x4479, 0x95, 0xEA, 0x91, 0x37, 0x4C, 0xA0, 0x62, 0x7);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeer> { define_guid(0x93A01A9C, 0x9609, 0x41FA, 0x82, 0xF3, 0x90, 0x9C, 0x9, 0xF4, 0x9A, 0x72);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeerFactory> { define_guid(0x2038AE61, 0x1389, 0x467A, 0xAE, 0xD6, 0x37, 0x33, 0x4D, 0xA9, 0x62, 0x2B);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeer> { define_guid(0x8C9A409A, 0x2736, 0x437B, 0xAB, 0x36, 0xA1, 0x6A, 0x20, 0x2F, 0x10, 0x5D);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeerFactory> { define_guid(0xBD5EB663, 0x2C14, 0x4665, 0xAD, 0xEF, 0xF2, 0xB0, 0x33, 0x94, 0x7B, 0xEB);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer> { define_guid(0xAE8B3477, 0x860A, 0x45BB, 0xBF, 0x7C, 0xE1, 0xB2, 0x74, 0x19, 0xD1, 0xDD);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeerFactory> { define_guid(0x66D7EDFB, 0x786D, 0x4362, 0xA9, 0x64, 0xEB, 0xFB, 0x21, 0x77, 0x6C, 0x30);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeer> { define_guid(0x3C2FAC6C, 0xA977, 0x47FC, 0xB4, 0x4E, 0x27, 0x54, 0xC0, 0xB2, 0xBE, 0xA9);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeerFactory> { define_guid(0xF518D44D, 0xA493, 0x4496, 0xB0, 0x77, 0x96, 0x74, 0xC7, 0xF4, 0xC5, 0xFA);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeer> { define_guid(0xD0DE0CDB, 0x30CF, 0x47A6, 0xA5, 0xEB, 0x9C, 0x77, 0xF0, 0xB0, 0xD6, 0xDD);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeerFactory> { define_guid(0xF94762BD, 0x8A14, 0x40E4, 0x94, 0xA7, 0x3F, 0x33, 0xC9, 0x22, 0xE9, 0x45);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeer> { define_guid(0xBE2057F5, 0x6715, 0x4E69, 0xA0, 0x50, 0x92, 0xBD, 0xC, 0xE2, 0x32, 0xA9);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeerFactory> { define_guid(0x76BF924B, 0x7CA0, 0x4B01, 0xBC, 0x5C, 0xA8, 0xCF, 0x4D, 0x36, 0x91, 0xDE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeer> { define_guid(0x3A4F1CA0, 0x5E5D, 0x4D26, 0x90, 0x67, 0xE7, 0x40, 0xBF, 0x65, 0x7A, 0x9F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeerFactory> { define_guid(0x1F0C067, 0x966B, 0x4130, 0xB8, 0x72, 0x46, 0x9E, 0x42, 0xBD, 0x4A, 0x7F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeer> { define_guid(0xDC2949B5, 0xB45E, 0x4D6D, 0x89, 0x2F, 0xD9, 0x42, 0x2C, 0x95, 0xE, 0xFB);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeerFactory> { define_guid(0x970743FF, 0xAF41, 0x4600, 0xB5, 0x5D, 0x26, 0xD4, 0x3D, 0xF8, 0x60, 0xE1);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeer> { define_guid(0xC011F174, 0xE89E, 0x4790, 0xBF, 0x9A, 0x78, 0xEB, 0xB5, 0xF5, 0x9E, 0x9F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeerFactory> { define_guid(0x31F933E3, 0xFEF8, 0x4419, 0x9D, 0xF5, 0xD9, 0xEF, 0x71, 0x96, 0xEA, 0x34);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer> { define_guid(0xFB77EFBE, 0x39EC, 0x4508, 0x8A, 0xC3, 0x51, 0xA1, 0x42, 0x40, 0x27, 0xD7);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeerFactory> { define_guid(0x3FDB9F49, 0xF4AB, 0x4780, 0x86, 0x44, 0x3, 0x37, 0x62, 0x99, 0xA1, 0x75);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer> { define_guid(0x4FEF6DF2, 0x289C, 0x4C04, 0x83, 0x1B, 0x5A, 0x66, 0x8C, 0x6D, 0x71, 0x4);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeerFactory> { define_guid(0x14A8D4F6, 0x469A, 0x41BA, 0x9D, 0x93, 0x44, 0xA1, 0xA5, 0x5D, 0xA8, 0x72);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeer> { define_guid(0xB0986175, 0xBC, 0x4118, 0x8A, 0x6F, 0x16, 0xEE, 0x9C, 0x15, 0xD9, 0x68);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeerFactory> { define_guid(0x3C864393, 0xAEA, 0x4E78, 0xBC, 0x11, 0xB7, 0x75, 0xCA, 0xC4, 0x11, 0x4C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeer> { define_guid(0xAA7AFCB1, 0xEDF, 0x46D9, 0xAA, 0x9E, 0xE, 0xB2, 0x1D, 0x14, 0x0, 0x97);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeerFactory> { define_guid(0x59BC1661, 0xC182, 0x49AF, 0x95, 0x26, 0x44, 0xB8, 0x8E, 0x62, 0x84, 0x55);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeer> { define_guid(0xFD7D5FEE, 0xFDE0, 0x482A, 0x80, 0x84, 0xDC, 0xEB, 0xBA, 0x5B, 0x98, 0x6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeerFactory> { define_guid(0xD7924E16, 0xBD8D, 0x4662, 0xA9, 0x95, 0x20, 0xFF, 0x9A, 0x5, 0x60, 0x93);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeer> { define_guid(0x93F48F86, 0xD840, 0x4FB6, 0xAC, 0x2F, 0x5F, 0x77, 0x9B, 0x85, 0x4B, 0xD);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeerFactory> { define_guid(0x364679AB, 0xB80F, 0x41B4, 0x8E, 0xEA, 0x2F, 0x52, 0x51, 0xBC, 0x73, 0x9C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeer> { define_guid(0x29E41AD5, 0xA8AC, 0x4E8A, 0x83, 0xD8, 0x9, 0xE3, 0x7E, 0x5, 0x42, 0x57);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeerFactory> { define_guid(0x6A6FF9D4, 0x575E, 0x4E60, 0xBD, 0xD6, 0xEC, 0x14, 0x41, 0x9B, 0x4F, 0xF6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeer> { define_guid(0x69E0C369, 0xBBE7, 0x41F2, 0x87, 0xCA, 0xAA, 0xD8, 0x13, 0xFE, 0x55, 0xE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeerFactory> { define_guid(0xE1302110, 0xAFEB, 0x4595, 0x8E, 0x3D, 0xED, 0xC0, 0x84, 0x4A, 0x2B, 0x21);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer> { define_guid(0x162AC829, 0x7115, 0x43EC, 0xB3, 0x83, 0xA7, 0xB7, 0x16, 0x44, 0x6, 0x9D);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeerFactory> { define_guid(0x7B525646, 0x829B, 0x4DCC, 0xBD, 0x52, 0x5A, 0x8D, 0x3, 0x99, 0x38, 0x7A);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer> { define_guid(0xEC30015A, 0xD611, 0x46D0, 0xAE, 0x4F, 0x6E, 0xCF, 0x27, 0xDF, 0xBA, 0xA5);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeerFactory> { define_guid(0x971B8056, 0x9A7A, 0x4DF9, 0x95, 0xFA, 0x6F, 0x5C, 0x4, 0xC9, 0x1C, 0xAC);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer> { define_guid(0x62DBE6C5, 0xBC0A, 0x45BB, 0xBF, 0x77, 0xEA, 0xF, 0x15, 0x2, 0x89, 0x1F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeerFactory> { define_guid(0xC9218CC4, 0xAD4B, 0x4D03, 0xA6, 0xA4, 0x7D, 0x59, 0xE6, 0x36, 0x0, 0x4);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeer> { define_guid(0xEB15BC42, 0xC0A9, 0x46C6, 0xAC, 0x24, 0xB8, 0x3D, 0xE4, 0x29, 0xC7, 0x33);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeerFactory> { define_guid(0xB75C775D, 0xEB8F, 0x44EF, 0xA2, 0x7C, 0xE2, 0x6A, 0xC7, 0xDE, 0x83, 0x33);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer> { define_guid(0x7EB40D0B, 0x75C5, 0x4263, 0xBA, 0x6A, 0xD4, 0xA5, 0x4F, 0xB0, 0xF2, 0x39);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeerFactory> { define_guid(0x98E5B0D, 0x1B90, 0x40B9, 0x9B, 0xE3, 0xB2, 0x32, 0x67, 0xEB, 0x13, 0xCF);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeer> { define_guid(0x8EC0353A, 0x4284, 0x4B00, 0xAE, 0xF8, 0xA2, 0x68, 0x8E, 0xA5, 0xE3, 0xC4);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeerFactory> { define_guid(0x4395AB0D, 0x8D83, 0x483C, 0x88, 0xEB, 0xE2, 0x61, 0x7B, 0xD, 0x29, 0x3F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeer> { define_guid(0x8CD0D608, 0xB402, 0x4A6E, 0xBD, 0x9A, 0x34, 0x3F, 0x88, 0x45, 0xEB, 0x32);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeerFactory> { define_guid(0xE2362185, 0x7DF6, 0x49F7, 0x8A, 0xBC, 0x4C, 0x33, 0xF1, 0xA3, 0xD4, 0x6E);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeer> { define_guid(0x7E6A5ED8, 0xB30, 0x4743, 0xB1, 0x2, 0xDC, 0xDF, 0x54, 0x8E, 0x31, 0x31);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeerFactory> { define_guid(0x4940C4FD, 0x3D88, 0x49CA, 0x8F, 0x31, 0x92, 0x41, 0x87, 0xAF, 0xB, 0xFE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeer> { define_guid(0x8B4ACFEB, 0x89FA, 0x4F13, 0x84, 0xBE, 0x35, 0xCA, 0x5B, 0x7C, 0x95, 0x90);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeerFactory> { define_guid(0x8360F4E2, 0xE396, 0x4517, 0xAF, 0x5D, 0xF4, 0xCF, 0x34, 0xC5, 0x4E, 0xDF);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutoSuggestBoxAutomationPeer> { define_guid(0x2F32C302, 0xF99B, 0x491D, 0x97, 0x26, 0xA5, 0xE1, 0x81, 0x64, 0x3E, 0xFA);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutoSuggestBoxAutomationPeerFactory> { define_guid(0x80046849, 0x18E7, 0x4475, 0xB3, 0x62, 0x4B, 0xBD, 0x53, 0xD2, 0x45, 0x62);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ICalendarDatePickerAutomationPeer> { define_guid(0x40D8938E, 0xDB5E, 0x4B03, 0xBE, 0xBA, 0xD1, 0xF, 0x62, 0x41, 0x97, 0x87);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ICalendarDatePickerAutomationPeerFactory> { define_guid(0xAB705DD2, 0xD293, 0x45BF, 0x9F, 0x19, 0x26, 0xF7, 0x60, 0x3A, 0x5E, 0x9B);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeer> { define_guid(0xD07D357F, 0xA0B9, 0x45DC, 0x99, 0x1A, 0x76, 0xC5, 0x5, 0xE7, 0xD0, 0xF5);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeerFactory> { define_guid(0xE5667D19, 0x9157, 0x4436, 0x9F, 0x4D, 0x7F, 0xB9, 0x91, 0x74, 0xB4, 0x8E);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeer> { define_guid(0xA01840B4, 0x5FCA, 0x456F, 0x98, 0xEA, 0x30, 0xE, 0xB4, 0xB, 0x58, 0x5E);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeerFactory> { define_guid(0xF350155F, 0x8924, 0x44C0, 0xBA, 0x44, 0x65, 0x3F, 0xE7, 0x9F, 0x1E, 0xFB);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeer> { define_guid(0x93EF2D07, 0x346C, 0x4166, 0xA4, 0xBA, 0xBC, 0x6A, 0x18, 0x1E, 0x7F, 0x33);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeerFactory> { define_guid(0xFAFEC376, 0xF22E, 0x466D, 0x91, 0x3C, 0xAE, 0x24, 0xCC, 0xDB, 0x16, 0xF);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IHubAutomationPeer> { define_guid(0x4DDEE056, 0x4EBC, 0x4620, 0xA0, 0x5D, 0x90, 0x3E, 0x3C, 0x9A, 0x4E, 0xAD);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IHubAutomationPeerFactory> { define_guid(0xC762D43F, 0x79DD, 0x43EE, 0x87, 0x77, 0x8D, 0x8, 0xB3, 0x9A, 0xA0, 0x65);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeer> { define_guid(0x16D91FF7, 0x7431, 0x4D82, 0x83, 0xCE, 0xCF, 0xA3, 0x19, 0x2B, 0xF, 0x18);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeerFactory> { define_guid(0xC68E27E8, 0x17EC, 0x4329, 0x91, 0xAE, 0x2D, 0xB, 0x23, 0x39, 0xD4, 0x98);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer> { define_guid(0x7CB8B732, 0xC1F0, 0x4A3C, 0xBC, 0x14, 0x85, 0xDD, 0x48, 0xDE, 0xDB, 0x85);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeerFactory> { define_guid(0x40EC995F, 0xD631, 0x4004, 0x83, 0x2E, 0x6D, 0x86, 0x43, 0xE5, 0x15, 0x61);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer> { define_guid(0xCA114E70, 0xA16D, 0x4D09, 0xA1, 0xCF, 0x18, 0x56, 0xEF, 0x98, 0xA9, 0xEC);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeerFactory> { define_guid(0xC47DFBC0, 0xFACC, 0x4024, 0xA7, 0x3B, 0x17, 0xEC, 0x4E, 0x66, 0x26, 0x54);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeer> { define_guid(0xBA0B9FC2, 0xA6E2, 0x41A5, 0xB1, 0x7A, 0xD1, 0x59, 0x46, 0x13, 0xEF, 0xBA);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeerFactory> { define_guid(0xB2AD3B28, 0x7575, 0x4173, 0x9B, 0xC7, 0x80, 0x36, 0x7A, 0x16, 0x4E, 0xD2);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMediaPlayerElementAutomationPeer> { define_guid(0x2BED209, 0x3F65, 0x4FDD, 0xB5, 0xCA, 0xC4, 0x75, 0xD, 0x4E, 0x6E, 0xA4);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMediaPlayerElementAutomationPeerFactory> { define_guid(0x8848077, 0x82AF, 0x4D19, 0xB1, 0x70, 0x28, 0x2A, 0x9E, 0xE, 0x7F, 0x37);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeer> { define_guid(0x1FC19462, 0x21DF, 0x456E, 0xAA, 0x11, 0x8F, 0xAC, 0x6B, 0x4B, 0x2A, 0xF6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeerFactory> { define_guid(0xD08BFCB8, 0x20D1, 0x45D8, 0xA2, 0xC2, 0x2F, 0x13, 0xD, 0xF7, 0x14, 0xE0);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeer> { define_guid(0xC69F5C04, 0x16EE, 0x467A, 0xA8, 0x33, 0xC3, 0xDA, 0x84, 0x58, 0xAD, 0x64);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeerFactory> { define_guid(0x752C8399, 0xD296, 0x4D87, 0x90, 0x20, 0xA4, 0x75, 0xE, 0x88, 0x5B, 0x3C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeer> { define_guid(0xD985F259, 0x1B09, 0x4E88, 0x88, 0xFD, 0x42, 0x17, 0x50, 0xDC, 0x6B, 0x45);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeerFactory> { define_guid(0x270DFF7D, 0xD96D, 0x48F9, 0xA3, 0x6A, 0xC2, 0x52, 0xAA, 0x9C, 0x46, 0x70);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeer> { define_guid(0x854011A4, 0x18A6, 0x4F30, 0x93, 0x9B, 0x88, 0x71, 0xAF, 0xA3, 0xF5, 0xE9);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeerFactory> { define_guid(0xB3C01430, 0x7FAA, 0x41BB, 0x8E, 0x91, 0x7C, 0x76, 0x1C, 0x52, 0x67, 0xF1);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeer> { define_guid(0xA43D44EF, 0x3285, 0x4DF7, 0xB4, 0xA4, 0xE4, 0xCD, 0xF3, 0x6A, 0x3A, 0x17);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeerFactory> { define_guid(0x978F6671, 0x47F8, 0x40A7, 0x9E, 0x21, 0x68, 0x12, 0x8B, 0x16, 0xB4, 0xFD);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeer> { define_guid(0x6B57EAFE, 0x6AF1, 0x4903, 0x83, 0x73, 0x34, 0x37, 0xBF, 0x35, 0x23, 0x45);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeerFactory> { define_guid(0x94364B77, 0x8F6C, 0x4837, 0xAA, 0xE3, 0x94, 0xD0, 0x10, 0xD8, 0xD1, 0x62);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeer> { define_guid(0xE3DCEF3A, 0xE08A, 0x48E7, 0xB2, 0x3A, 0x2B, 0xE5, 0xB6, 0x6E, 0x47, 0x4E);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeerFactory> { define_guid(0x2C80B4D2, 0xFFC2, 0x4157, 0x88, 0xDD, 0x59, 0xCD, 0x92, 0xE3, 0x97, 0x15);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeer> { define_guid(0xF3F4868F, 0x29D4, 0x4094, 0x8C, 0x54, 0xEA, 0x61, 0xA8, 0x82, 0x94, 0xA4);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeerFactory> { define_guid(0xA65E7A88, 0x770D, 0x402C, 0x99, 0x6F, 0x67, 0x50, 0x6A, 0xF2, 0xA4, 0xAF);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeer> { define_guid(0x67AB1E4B, 0xAD61, 0x4C88, 0xBA, 0x45, 0xF, 0x3A, 0x8D, 0x6, 0x1F, 0x8F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeerFactory> { define_guid(0x7668694, 0x2CA5, 0x4BE4, 0xA8, 0xB9, 0x59, 0x2D, 0x48, 0xF7, 0x60, 0x87);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeer> { define_guid(0x15A8D7FD, 0xD7A5, 0x4A6C, 0x96, 0x3C, 0x6F, 0x7C, 0xE4, 0x64, 0x67, 0x1A);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeerFactory> { define_guid(0xD0DB12BB, 0xD715, 0x4523, 0xAC, 0xC0, 0x1E, 0x10, 0x72, 0xD8, 0xE3, 0x2B);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeer> { define_guid(0xE244A871, 0xFCBB, 0x48FC, 0x8A, 0x93, 0x41, 0xEA, 0x13, 0x4B, 0x53, 0xCE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeerFactory> { define_guid(0x7B5172D, 0x761D, 0x452B, 0x9E, 0x6D, 0xFA, 0x2A, 0x8B, 0xE0, 0xAD, 0x26);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeer> { define_guid(0x443262B2, 0x4F6D, 0x4B76, 0x9D, 0x2E, 0x3E, 0xFF, 0x77, 0x7E, 0x88, 0x64);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeerFactory> { define_guid(0xAEF0342A, 0xACB7, 0x42DC, 0x97, 0xE3, 0x84, 0x70, 0x71, 0x86, 0x5F, 0xD6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeer> { define_guid(0x8464EFAD, 0x9655, 0x4AFF, 0x95, 0x50, 0x63, 0xAE, 0x9E, 0xC8, 0xFE, 0x9C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeerFactory> { define_guid(0xD6F9139D, 0x2C1, 0x4221, 0x95, 0x91, 0x7D, 0x4E, 0xFE, 0xB7, 0x47, 0x1);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer> { define_guid(0x87EC7649, 0xB83D, 0x4E55, 0x9A, 0xFD, 0xBD, 0x83, 0x5E, 0x74, 0x8F, 0x5C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeerFactory> { define_guid(0x70D3C2BE, 0x8950, 0x4647, 0x93, 0x62, 0xFD, 0x0, 0x2F, 0x8F, 0xF8, 0x2E);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeer> { define_guid(0x1C4401A4, 0xD951, 0x49CA, 0x8F, 0x82, 0xC7, 0xF3, 0xC6, 0x6, 0x81, 0xB0);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeerFactory> { define_guid(0x8ACA59DD, 0x22A7, 0x4800, 0x89, 0x4B, 0xC1, 0xF4, 0x85, 0xF3, 0x89, 0x53);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeer> { define_guid(0x73CECC87, 0xC0DC, 0x4260, 0x91, 0x48, 0x75, 0xE9, 0x86, 0x4A, 0x72, 0x30);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeerFactory> { define_guid(0x65F39174, 0xEAA2, 0x4E44, 0x8B, 0xE6, 0x4C, 0xCA, 0x28, 0xCD, 0x2, 0x88);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer> { define_guid(0x35AAC87A, 0x62EE, 0x4D3E, 0xA2, 0x4C, 0x2B, 0xC8, 0x43, 0x2D, 0x68, 0xB7);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides> { define_guid(0xBEA93E67, 0xDBEE, 0x4F7B, 0xAF, 0xD, 0xA7, 0x9A, 0xAE, 0x53, 0x33, 0xBF);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected> { define_guid(0xF4B40E52, 0x642F, 0x4629, 0xA5, 0x4A, 0xEA, 0x5D, 0x23, 0x49, 0xC4, 0x48);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerStatics> { define_guid(0x562F7FB0, 0xA331, 0x4A9C, 0x9D, 0xEC, 0xBF, 0xB7, 0x58, 0x6F, 0xFF, 0xFF);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerFactory> { define_guid(0x20C27545, 0xA88B, 0x43C8, 0xBC, 0x24, 0xCE, 0xA9, 0xDA, 0xFD, 0x4, 0xA3);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer2> { define_guid(0xEA1F89C7, 0xEBF5, 0x4AB8, 0x88, 0xF7, 0x68, 0xD, 0x82, 0x1D, 0xAC, 0x61);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2> { define_guid(0x2603682A, 0x9DA6, 0x4023, 0xB4, 0x96, 0x49, 0x6E, 0x5E, 0xF2, 0x28, 0xD2);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer3> { define_guid(0xD3CFB977, 0x84, 0x41D7, 0xA2, 0x21, 0x28, 0x15, 0x8D, 0x3B, 0xC3, 0x2C);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3> { define_guid(0xB6F0C4AD, 0x4D39, 0x49E6, 0xBB, 0x91, 0xD9, 0x24, 0xEE, 0xFD, 0x85, 0x38);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerStatics3> { define_guid(0x572C5714, 0x7F87, 0x4271, 0x81, 0x9F, 0x6C, 0xF4, 0xC4, 0xD0, 0x22, 0xD0);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer4> { define_guid(0x761CE752, 0x73C1, 0x4F44, 0xBE, 0x75, 0x43, 0xC4, 0x9E, 0xC0, 0xD4, 0xD5);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4> { define_guid(0xB186CDA2, 0x5D46, 0x4BCD, 0xA8, 0x11, 0x26, 0x9A, 0xD1, 0x5B, 0x3A, 0xEE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer5> { define_guid(0xF632E1C6, 0xA3F, 0x4574, 0x9F, 0xEF, 0xCD, 0xC1, 0x51, 0x76, 0x56, 0x74);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5> { define_guid(0x2C847C85, 0x781E, 0x49F7, 0x9F, 0xEF, 0xB9, 0xE1, 0x4D, 0x1, 0x47, 0x7);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer6> { define_guid(0xCAF8608F, 0x13FF, 0x42FB, 0x86, 0x6D, 0x22, 0x20, 0x64, 0x34, 0xCC, 0x6B);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6> { define_guid(0xE98BABE7, 0xF6FF, 0x444C, 0x9C, 0xD, 0x27, 0x7E, 0xAF, 0xA, 0xD9, 0xC0);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer7> { define_guid(0x796B3287, 0xE642, 0x48AB, 0xB2, 0x23, 0x52, 0x8, 0xB4, 0x1D, 0xA9, 0xD6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeer8> { define_guid(0x5C6A1FE6, 0x9A55, 0x4D7F, 0x94, 0x98, 0xCF, 0xE4, 0x29, 0xE9, 0x2D, 0xA8);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8> { define_guid(0xE1EBBD4, 0xA003, 0x4936, 0x81, 0x75, 0xF5, 0x45, 0x7C, 0x7, 0xF0, 0xC6);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation> { define_guid(0xC456061, 0x52CF, 0x43FA, 0x82, 0xF8, 0x7, 0xF1, 0x37, 0x35, 0x1E, 0x5A);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationStatics> { define_guid(0x8809A87D, 0x9B2, 0x4D45, 0xB7, 0x8B, 0x1D, 0x3B, 0x3B, 0x9, 0xF6, 0x61);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotationFactory> { define_guid(0xF59C439E, 0xC65B, 0x43CD, 0x90, 0x9, 0x3, 0xFC, 0x2, 0x33, 0x63, 0xA7);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer> { define_guid(0xB90AD781, 0xBFEB, 0x4451, 0xBD, 0x47, 0x9F, 0x3A, 0x63, 0xEB, 0xD2, 0x4A);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerStatics> { define_guid(0xB9C0B997, 0x2820, 0x44A1, 0xA5, 0xA8, 0x9B, 0x80, 0x1E, 0xDC, 0x26, 0x9E);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory> { define_guid(0xDB9B8BC, 0xB812, 0x48E3, 0xAF, 0x1F, 0xDB, 0xC5, 0x76, 0x0, 0xC3, 0x25);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IInkToolbarAutomationPeer> { define_guid(0x123BAAA4, 0xF2E8, 0x4BCB, 0x93, 0x82, 0x5D, 0xFD, 0xD1, 0x1F, 0xE4, 0x5F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IMapControlAutomationPeer> { define_guid(0x425BEEE4, 0xF2E8, 0x4BCB, 0x93, 0x82, 0x5D, 0xFD, 0xD1, 0x1F, 0xE4, 0x5F);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ILoopingSelectorItemDataAutomationPeer> { define_guid(0xEF567E32, 0x7CD2, 0x4D32, 0x95, 0x90, 0x1F, 0x58, 0x8D, 0x5E, 0xF3, 0x8D);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IDatePickerFlyoutPresenterAutomationPeer> { define_guid(0x752AED38, 0xC2BF, 0x4880, 0x82, 0xB2, 0xA6, 0xC0, 0x5E, 0x90, 0xC1, 0x35);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IListPickerFlyoutPresenterAutomationPeer> { define_guid(0x56DFDC58, 0x2395, 0x4060, 0x80, 0x47, 0x8E, 0xA4, 0x63, 0x69, 0x8A, 0x24);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ILoopingSelectorAutomationPeer> { define_guid(0x50B406CA, 0xBAE9, 0x4816, 0x8A, 0x3A, 0xC, 0xB4, 0xF9, 0x64, 0x78, 0xA2);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ILoopingSelectorItemAutomationPeer> { define_guid(0xD3FA68BF, 0x4CF, 0x4F4C, 0x8D, 0x3E, 0x47, 0x80, 0xA1, 0x9D, 0x47, 0x88);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPickerFlyoutPresenterAutomationPeer> { define_guid(0x28414BF7, 0x8382, 0x4EAE, 0x93, 0xC1, 0xD6, 0xF0, 0x35, 0xAA, 0x81, 0x55);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPivotItemAutomationPeer> { define_guid(0x1A4241AD, 0x5D55, 0x4D27, 0xB4, 0xF, 0x2D, 0x37, 0x50, 0x6F, 0xBE, 0x78);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPivotItemAutomationPeerFactory> { define_guid(0xF2810471, 0x183F, 0x416B, 0xB4, 0x1A, 0x1E, 0x5A, 0x95, 0x8A, 0x91, 0xF4);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeer> { define_guid(0xA2A3B788, 0xEA1D, 0x48B7, 0x88, 0xEE, 0xF0, 0x8B, 0x6A, 0xA0, 0x7F, 0xEE);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPivotItemDataAutomationPeerFactory> { define_guid(0x517A2480, 0xD3B6, 0x412E, 0x82, 0xB6, 0x94, 0xA0, 0xA8, 0x4C, 0x13, 0xB0);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::ITimePickerFlyoutPresenterAutomationPeer> { define_guid(0xDA93EE27, 0x82F1, 0x4701, 0x87, 0x6, 0xBE, 0x29, 0x7B, 0xF0, 0x60, 0x43);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPivotAutomationPeer> { define_guid(0xE715A8F8, 0x3B9D, 0x402C, 0x81, 0xE2, 0x6E, 0x91, 0x2E, 0xF5, 0x89, 0x81);};
template<> struct uuid<Windows::UI::Xaml::Automation::Peers::IPivotAutomationPeerFactory> { define_guid(0x3EFE0F94, 0xC91, 0x4341, 0xB9, 0xAC, 0x1B, 0x56, 0xB4, 0xE6, 0xB8, 0x4F);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Peers {

// IColorSpectrumAutomationPeer
struct IColorSpectrumAutomationPeer : IInspectable, generate<IColorSpectrumAutomationPeer> {};

// IColorSpectrumAutomationPeerFactory
struct IColorSpectrumAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::ColorSpectrum* owner, IInspectable* outer, IInspectable* *inner, ColorSpectrumAutomationPeer* *instance);
};

// IColorPickerSliderAutomationPeer
struct IColorPickerSliderAutomationPeer : IInspectable, generate<IColorPickerSliderAutomationPeer> {};

// IColorPickerSliderAutomationPeerFactory
struct IColorPickerSliderAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::ColorPickerSlider* owner, IInspectable* outer, IInspectable* *inner, ColorPickerSliderAutomationPeer* *instance);
};

// INavigationViewItemAutomationPeer
struct INavigationViewItemAutomationPeer : IInspectable, generate<INavigationViewItemAutomationPeer> {};

// INavigationViewItemAutomationPeerFactory
struct INavigationViewItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::NavigationViewItem* owner, IInspectable* outer, IInspectable* *inner, NavigationViewItemAutomationPeer* *instance);
};

// IPersonPictureAutomationPeer
struct IPersonPictureAutomationPeer : IInspectable, generate<IPersonPictureAutomationPeer> {};

// IPersonPictureAutomationPeerFactory
struct IPersonPictureAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::PersonPicture* owner, IInspectable* outer, IInspectable* *inner, PersonPictureAutomationPeer* *instance);
};

// IRatingControlAutomationPeer
struct IRatingControlAutomationPeer : IInspectable, generate<IRatingControlAutomationPeer> {};

// IRatingControlAutomationPeerFactory
struct IRatingControlAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::RatingControl* owner, IInspectable* outer, IInspectable* *inner, RatingControlAutomationPeer* *instance);
};

// ITreeViewListAutomationPeer
struct ITreeViewListAutomationPeer : IInspectable, generate<ITreeViewListAutomationPeer> {};

// ITreeViewListAutomationPeerFactory
struct ITreeViewListAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::TreeViewList* owner, IInspectable* outer, IInspectable* *inner, TreeViewListAutomationPeer* *instance);
};

// ITreeViewItemAutomationPeer
struct ITreeViewItemAutomationPeer : IInspectable, generate<ITreeViewItemAutomationPeer> {};

// ITreeViewItemAutomationPeerFactory
struct ITreeViewItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::TreeViewItem* owner, IInspectable* outer, IInspectable* *inner, TreeViewItemAutomationPeer* *instance);
};

// IItemAutomationPeer
struct IItemAutomationPeer_raw : IInspectable {
	virtual STDMETHODIMP _get_Item(IInspectable* *value);
	virtual STDMETHODIMP _get_ItemsControlAutomationPeer(Peers::ItemsControlAutomationPeer* *value);
};
template<typename X> struct IItemAutomationPeer_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IItemAutomationPeer_adaptor::Item)->_get_Item(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Item;
		struct : property {
			ptr<Peers::ItemsControlAutomationPeer> get() { Peers::ItemsControlAutomationPeer* value; hrcheck(enc(&IItemAutomationPeer_adaptor::ItemsControlAutomationPeer)->_get_ItemsControlAutomationPeer(&value)); return from_abi(value); }
			ptr<Peers::ItemsControlAutomationPeer> operator()() { return get(); }
			operator ptr<Peers::ItemsControlAutomationPeer> () { return get(); }
			ptr<Peers::ItemsControlAutomationPeer> operator->() { return get(); }
		} ItemsControlAutomationPeer;
	};
	IItemAutomationPeer_adaptor() {}
};
template<typename X> struct adapt<IItemAutomationPeer, X> : Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer_adaptor<X> { typedef adapt IItemAutomationPeer; };
struct IItemAutomationPeer : IItemAutomationPeer_raw, generate<IItemAutomationPeer> {};

// IItemAutomationPeerFactory
struct IItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, ItemsControlAutomationPeer* parent, IInspectable* outer, IInspectable* *inner, ItemAutomationPeer* *instance);
};

// IButtonBaseAutomationPeer
struct IButtonBaseAutomationPeer : IInspectable, generate<IButtonBaseAutomationPeer> {};

// IButtonBaseAutomationPeerFactory
struct IButtonBaseAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::ButtonBase* owner, IInspectable* outer, IInspectable* *inner, ButtonBaseAutomationPeer* *instance);
};

// ICaptureElementAutomationPeer
struct ICaptureElementAutomationPeer : IInspectable, generate<ICaptureElementAutomationPeer> {};

// ICaptureElementAutomationPeerFactory
struct ICaptureElementAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::CaptureElement* owner, IInspectable* outer, IInspectable* *inner, CaptureElementAutomationPeer* *instance);
};

// IComboBoxItemAutomationPeer
struct IComboBoxItemAutomationPeer : IInspectable, generate<IComboBoxItemAutomationPeer> {};

// IComboBoxItemAutomationPeerFactory
struct IComboBoxItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ComboBoxItem* owner, IInspectable* outer, IInspectable* *inner, ComboBoxItemAutomationPeer* *instance);
};

// IFlipViewItemAutomationPeer
struct IFlipViewItemAutomationPeer : IInspectable, generate<IFlipViewItemAutomationPeer> {};

// IFlipViewItemAutomationPeerFactory
struct IFlipViewItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::FlipViewItem* owner, IInspectable* outer, IInspectable* *inner, FlipViewItemAutomationPeer* *instance);
};

// IGroupItemAutomationPeer
struct IGroupItemAutomationPeer : IInspectable, generate<IGroupItemAutomationPeer> {};

// IGroupItemAutomationPeerFactory
struct IGroupItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::GroupItem* owner, IInspectable* outer, IInspectable* *inner, GroupItemAutomationPeer* *instance);
};

// IImageAutomationPeer
struct IImageAutomationPeer : IInspectable, generate<IImageAutomationPeer> {};

// IImageAutomationPeerFactory
struct IImageAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Image* owner, IInspectable* outer, IInspectable* *inner, ImageAutomationPeer* *instance);
};

// IItemsControlAutomationPeer
struct IItemsControlAutomationPeer : IInspectable, generate<IItemsControlAutomationPeer> {};

// IItemsControlAutomationPeerFactory
struct IItemsControlAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ItemsControl* owner, IInspectable* outer, IInspectable* *inner, ItemsControlAutomationPeer* *instance);
};

// IItemsControlAutomationPeer2
struct IItemsControlAutomationPeer2_raw : IInspectable {
	virtual STDMETHODIMP _CreateItemAutomationPeer(IInspectable* item, ItemAutomationPeer* *returnValue);
};
template<typename X> struct IItemsControlAutomationPeer2_adaptor : X {
	ptr<ItemAutomationPeer> CreateItemAutomationPeer(object_ref item) { ItemAutomationPeer* returnValue; hrcheck(X::get()->_CreateItemAutomationPeer(item, &returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IItemsControlAutomationPeer2, X> : Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer2_adaptor<X> { typedef adapt IItemsControlAutomationPeer2; };
struct IItemsControlAutomationPeer2 : IItemsControlAutomationPeer2_raw, generate<IItemsControlAutomationPeer2> {};

// IItemsControlAutomationPeerOverrides2
struct IItemsControlAutomationPeerOverrides2_raw : IInspectable {
	virtual STDMETHODIMP _OnCreateItemAutomationPeer(IInspectable* item, ItemAutomationPeer* *returnValue) = 0;
};
template<typename X> struct IItemsControlAutomationPeerOverrides2_adaptor : X {
	ptr<ItemAutomationPeer> OnCreateItemAutomationPeer(object_ref item) { ItemAutomationPeer* returnValue; hrcheck(X::get()->_OnCreateItemAutomationPeer(item, &returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IItemsControlAutomationPeerOverrides2, X> : Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides2_adaptor<X> { typedef adapt IItemsControlAutomationPeerOverrides2; };
template<typename X> struct IItemsControlAutomationPeerOverrides2_unadaptor : X {
	STDMETHODIMP _OnCreateItemAutomationPeer(IInspectable* item, ItemAutomationPeer* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->OnCreateItemAutomationPeer(item)); }); }
};
template<typename X> struct unadapt<IItemsControlAutomationPeerOverrides2, X> : Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerOverrides2_unadaptor<X> {};
struct IItemsControlAutomationPeerOverrides2 : IItemsControlAutomationPeerOverrides2_raw, generate<IItemsControlAutomationPeerOverrides2> {};

// IListBoxItemAutomationPeer
struct IListBoxItemAutomationPeer : IInspectable, generate<IListBoxItemAutomationPeer> {};

// IListBoxItemAutomationPeerFactory
struct IListBoxItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ListBoxItem* owner, IInspectable* outer, IInspectable* *inner, ListBoxItemAutomationPeer* *instance);
};

// IMediaTransportControlsAutomationPeer
struct IMediaTransportControlsAutomationPeer : IInspectable, generate<IMediaTransportControlsAutomationPeer> {};

// IMediaTransportControlsAutomationPeerFactory
struct IMediaTransportControlsAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::MediaTransportControls* owner, IInspectable* outer, IInspectable* *inner, MediaTransportControlsAutomationPeer* *instance);
};

// IPasswordBoxAutomationPeer
struct IPasswordBoxAutomationPeer : IInspectable, generate<IPasswordBoxAutomationPeer> {};

// IPasswordBoxAutomationPeerFactory
struct IPasswordBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::PasswordBox* owner, IInspectable* outer, IInspectable* *inner, PasswordBoxAutomationPeer* *instance);
};

// IProgressRingAutomationPeer
struct IProgressRingAutomationPeer : IInspectable, generate<IProgressRingAutomationPeer> {};

// IProgressRingAutomationPeerFactory
struct IProgressRingAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ProgressRing* owner, IInspectable* outer, IInspectable* *inner, ProgressRingAutomationPeer* *instance);
};

// IRangeBaseAutomationPeer
struct IRangeBaseAutomationPeer : IInspectable, generate<IRangeBaseAutomationPeer> {};

// IRangeBaseAutomationPeerFactory
struct IRangeBaseAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::RangeBase* owner, IInspectable* outer, IInspectable* *inner, RangeBaseAutomationPeer* *instance);
};

// IRichTextBlockAutomationPeer
struct IRichTextBlockAutomationPeer : IInspectable, generate<IRichTextBlockAutomationPeer> {};

// IRichTextBlockAutomationPeerFactory
struct IRichTextBlockAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::RichTextBlock* owner, IInspectable* outer, IInspectable* *inner, RichTextBlockAutomationPeer* *instance);
};

// IRichTextBlockOverflowAutomationPeer
struct IRichTextBlockOverflowAutomationPeer : IInspectable, generate<IRichTextBlockOverflowAutomationPeer> {};

// IRichTextBlockOverflowAutomationPeerFactory
struct IRichTextBlockOverflowAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::RichTextBlockOverflow* owner, IInspectable* outer, IInspectable* *inner, RichTextBlockOverflowAutomationPeer* *instance);
};

// ISelectorItemAutomationPeer
struct ISelectorItemAutomationPeer : IInspectable, generate<ISelectorItemAutomationPeer> {};

// ISelectorItemAutomationPeerFactory
struct ISelectorItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, SelectorAutomationPeer* parent, IInspectable* outer, IInspectable* *inner, SelectorItemAutomationPeer* *instance);
};

// ISemanticZoomAutomationPeer
struct ISemanticZoomAutomationPeer : IInspectable, generate<ISemanticZoomAutomationPeer> {};

// ISemanticZoomAutomationPeerFactory
struct ISemanticZoomAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::SemanticZoom* owner, IInspectable* outer, IInspectable* *inner, SemanticZoomAutomationPeer* *instance);
};

// ISettingsFlyoutAutomationPeer
struct ISettingsFlyoutAutomationPeer : IInspectable, generate<ISettingsFlyoutAutomationPeer> {};

// ISettingsFlyoutAutomationPeerFactory
struct ISettingsFlyoutAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::SettingsFlyout* owner, IInspectable* outer, IInspectable* *inner, SettingsFlyoutAutomationPeer* *instance);
};

// ITextBlockAutomationPeer
struct ITextBlockAutomationPeer : IInspectable, generate<ITextBlockAutomationPeer> {};

// ITextBlockAutomationPeerFactory
struct ITextBlockAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::TextBlock* owner, IInspectable* outer, IInspectable* *inner, TextBlockAutomationPeer* *instance);
};

// ITextBoxAutomationPeer
struct ITextBoxAutomationPeer : IInspectable, generate<ITextBoxAutomationPeer> {};

// ITextBoxAutomationPeerFactory
struct ITextBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::TextBox* owner, IInspectable* outer, IInspectable* *inner, TextBoxAutomationPeer* *instance);
};

// IThumbAutomationPeer
struct IThumbAutomationPeer : IInspectable, generate<IThumbAutomationPeer> {};

// IThumbAutomationPeerFactory
struct IThumbAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::Thumb* owner, IInspectable* outer, IInspectable* *inner, ThumbAutomationPeer* *instance);
};

// IToggleSwitchAutomationPeer
struct IToggleSwitchAutomationPeer : IInspectable, generate<IToggleSwitchAutomationPeer> {};

// IToggleSwitchAutomationPeerFactory
struct IToggleSwitchAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ToggleSwitch* owner, IInspectable* outer, IInspectable* *inner, ToggleSwitchAutomationPeer* *instance);
};

// IButtonAutomationPeer
struct IButtonAutomationPeer : IInspectable, generate<IButtonAutomationPeer> {};

// IButtonAutomationPeerFactory
struct IButtonAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Button* owner, IInspectable* outer, IInspectable* *inner, ButtonAutomationPeer* *instance);
};

// IComboBoxItemDataAutomationPeer
struct IComboBoxItemDataAutomationPeer : IInspectable, generate<IComboBoxItemDataAutomationPeer> {};

// IComboBoxItemDataAutomationPeerFactory
struct IComboBoxItemDataAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, ComboBoxAutomationPeer* parent, IInspectable* outer, IInspectable* *inner, ComboBoxItemDataAutomationPeer* *instance);
};

// IFlipViewItemDataAutomationPeer
struct IFlipViewItemDataAutomationPeer : IInspectable, generate<IFlipViewItemDataAutomationPeer> {};

// IFlipViewItemDataAutomationPeerFactory
struct IFlipViewItemDataAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, FlipViewAutomationPeer* parent, IInspectable* outer, IInspectable* *inner, FlipViewItemDataAutomationPeer* *instance);
};

// IHyperlinkButtonAutomationPeer
struct IHyperlinkButtonAutomationPeer : IInspectable, generate<IHyperlinkButtonAutomationPeer> {};

// IHyperlinkButtonAutomationPeerFactory
struct IHyperlinkButtonAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::HyperlinkButton* owner, IInspectable* outer, IInspectable* *inner, HyperlinkButtonAutomationPeer* *instance);
};

// IListBoxItemDataAutomationPeer
struct IListBoxItemDataAutomationPeer : IInspectable, generate<IListBoxItemDataAutomationPeer> {};

// IListBoxItemDataAutomationPeerFactory
struct IListBoxItemDataAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, ListBoxAutomationPeer* parent, IInspectable* outer, IInspectable* *inner, ListBoxItemDataAutomationPeer* *instance);
};

// IProgressBarAutomationPeer
struct IProgressBarAutomationPeer : IInspectable, generate<IProgressBarAutomationPeer> {};

// IProgressBarAutomationPeerFactory
struct IProgressBarAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ProgressBar* owner, IInspectable* outer, IInspectable* *inner, ProgressBarAutomationPeer* *instance);
};

// IRepeatButtonAutomationPeer
struct IRepeatButtonAutomationPeer : IInspectable, generate<IRepeatButtonAutomationPeer> {};

// IRepeatButtonAutomationPeerFactory
struct IRepeatButtonAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::RepeatButton* owner, IInspectable* outer, IInspectable* *inner, RepeatButtonAutomationPeer* *instance);
};

// IScrollBarAutomationPeer
struct IScrollBarAutomationPeer : IInspectable, generate<IScrollBarAutomationPeer> {};

// IScrollBarAutomationPeerFactory
struct IScrollBarAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::ScrollBar* owner, IInspectable* outer, IInspectable* *inner, ScrollBarAutomationPeer* *instance);
};

// ISelectorAutomationPeer
struct ISelectorAutomationPeer : IInspectable, generate<ISelectorAutomationPeer> {};

// ISelectorAutomationPeerFactory
struct ISelectorAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::Selector* owner, IInspectable* outer, IInspectable* *inner, SelectorAutomationPeer* *instance);
};

// ISliderAutomationPeer
struct ISliderAutomationPeer : IInspectable, generate<ISliderAutomationPeer> {};

// ISliderAutomationPeerFactory
struct ISliderAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Slider* owner, IInspectable* outer, IInspectable* *inner, SliderAutomationPeer* *instance);
};

// IToggleButtonAutomationPeer
struct IToggleButtonAutomationPeer : IInspectable, generate<IToggleButtonAutomationPeer> {};

// IToggleButtonAutomationPeerFactory
struct IToggleButtonAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Primitives::ToggleButton* owner, IInspectable* outer, IInspectable* *inner, ToggleButtonAutomationPeer* *instance);
};

// ICheckBoxAutomationPeer
struct ICheckBoxAutomationPeer : IInspectable, generate<ICheckBoxAutomationPeer> {};

// ICheckBoxAutomationPeerFactory
struct ICheckBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::CheckBox* owner, IInspectable* outer, IInspectable* *inner, CheckBoxAutomationPeer* *instance);
};

// IComboBoxAutomationPeer
struct IComboBoxAutomationPeer : IInspectable, generate<IComboBoxAutomationPeer> {};

// IComboBoxAutomationPeerFactory
struct IComboBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ComboBox* owner, IInspectable* outer, IInspectable* *inner, ComboBoxAutomationPeer* *instance);
};

// IFlipViewAutomationPeer
struct IFlipViewAutomationPeer : IInspectable, generate<IFlipViewAutomationPeer> {};

// IFlipViewAutomationPeerFactory
struct IFlipViewAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::FlipView* owner, IInspectable* outer, IInspectable* *inner, FlipViewAutomationPeer* *instance);
};

// IListBoxAutomationPeer
struct IListBoxAutomationPeer : IInspectable, generate<IListBoxAutomationPeer> {};

// IListBoxAutomationPeerFactory
struct IListBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ListBox* owner, IInspectable* outer, IInspectable* *inner, ListBoxAutomationPeer* *instance);
};

// IRadioButtonAutomationPeer
struct IRadioButtonAutomationPeer : IInspectable, generate<IRadioButtonAutomationPeer> {};

// IRadioButtonAutomationPeerFactory
struct IRadioButtonAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::RadioButton* owner, IInspectable* outer, IInspectable* *inner, RadioButtonAutomationPeer* *instance);
};

// IAppBarAutomationPeer
struct IAppBarAutomationPeer : IInspectable, generate<IAppBarAutomationPeer> {};

// IAppBarAutomationPeerFactory
struct IAppBarAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::AppBar* owner, IInspectable* outer, IInspectable* *inner, AppBarAutomationPeer* *instance);
};

// IAutoSuggestBoxAutomationPeer
struct IAutoSuggestBoxAutomationPeer : IInspectable, generate<IAutoSuggestBoxAutomationPeer> {};

// IAutoSuggestBoxAutomationPeerFactory
struct IAutoSuggestBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::AutoSuggestBox* owner, AutoSuggestBoxAutomationPeer* *instance);
};

// ICalendarDatePickerAutomationPeer
struct ICalendarDatePickerAutomationPeer : IInspectable, generate<ICalendarDatePickerAutomationPeer> {};

// ICalendarDatePickerAutomationPeerFactory
struct ICalendarDatePickerAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::CalendarDatePicker* owner, IInspectable* outer, IInspectable* *inner, CalendarDatePickerAutomationPeer* *instance);
};

// IDatePickerAutomationPeer
struct IDatePickerAutomationPeer : IInspectable, generate<IDatePickerAutomationPeer> {};

// IDatePickerAutomationPeerFactory
struct IDatePickerAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::DatePicker* owner, IInspectable* outer, IInspectable* *inner, DatePickerAutomationPeer* *instance);
};

// IFlyoutPresenterAutomationPeer
struct IFlyoutPresenterAutomationPeer : IInspectable, generate<IFlyoutPresenterAutomationPeer> {};

// IFlyoutPresenterAutomationPeerFactory
struct IFlyoutPresenterAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::FlyoutPresenter* owner, IInspectable* outer, IInspectable* *inner, FlyoutPresenterAutomationPeer* *instance);
};

// IGridViewItemAutomationPeer
struct IGridViewItemAutomationPeer : IInspectable, generate<IGridViewItemAutomationPeer> {};

// IGridViewItemAutomationPeerFactory
struct IGridViewItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::GridViewItem* owner, IInspectable* outer, IInspectable* *inner, GridViewItemAutomationPeer* *instance);
};

// IHubAutomationPeer
struct IHubAutomationPeer : IInspectable, generate<IHubAutomationPeer> {};

// IHubAutomationPeerFactory
struct IHubAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Hub* owner, IInspectable* outer, IInspectable* *inner, HubAutomationPeer* *instance);
};

// IHubSectionAutomationPeer
struct IHubSectionAutomationPeer : IInspectable, generate<IHubSectionAutomationPeer> {};

// IHubSectionAutomationPeerFactory
struct IHubSectionAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::HubSection* owner, IInspectable* outer, IInspectable* *inner, HubSectionAutomationPeer* *instance);
};

// IListViewBaseHeaderItemAutomationPeer
struct IListViewBaseHeaderItemAutomationPeer : IInspectable, generate<IListViewBaseHeaderItemAutomationPeer> {};

// IListViewBaseHeaderItemAutomationPeerFactory
struct IListViewBaseHeaderItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ListViewBaseHeaderItem* owner, IInspectable* outer, IInspectable* *inner, ListViewBaseHeaderItemAutomationPeer* *instance);
};

// IListViewItemAutomationPeer
struct IListViewItemAutomationPeer : IInspectable, generate<IListViewItemAutomationPeer> {};

// IListViewItemAutomationPeerFactory
struct IListViewItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ListViewItem* owner, IInspectable* outer, IInspectable* *inner, ListViewItemAutomationPeer* *instance);
};

// IMediaElementAutomationPeer
struct IMediaElementAutomationPeer : IInspectable, generate<IMediaElementAutomationPeer> {};

// IMediaElementAutomationPeerFactory
struct IMediaElementAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::MediaElement* owner, IInspectable* outer, IInspectable* *inner, MediaElementAutomationPeer* *instance);
};

// IMediaPlayerElementAutomationPeer
struct IMediaPlayerElementAutomationPeer : IInspectable, generate<IMediaPlayerElementAutomationPeer> {};

// IMediaPlayerElementAutomationPeerFactory
struct IMediaPlayerElementAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::MediaPlayerElement* owner, IInspectable* outer, IInspectable* *inner, MediaPlayerElementAutomationPeer* *instance);
};

// IMenuFlyoutItemAutomationPeer
struct IMenuFlyoutItemAutomationPeer : IInspectable, generate<IMenuFlyoutItemAutomationPeer> {};

// IMenuFlyoutItemAutomationPeerFactory
struct IMenuFlyoutItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::MenuFlyoutItem* owner, IInspectable* outer, IInspectable* *inner, MenuFlyoutItemAutomationPeer* *instance);
};

// IRichEditBoxAutomationPeer
struct IRichEditBoxAutomationPeer : IInspectable, generate<IRichEditBoxAutomationPeer> {};

// IRichEditBoxAutomationPeerFactory
struct IRichEditBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::RichEditBox* owner, IInspectable* outer, IInspectable* *inner, RichEditBoxAutomationPeer* *instance);
};

// IScrollViewerAutomationPeer
struct IScrollViewerAutomationPeer : IInspectable, generate<IScrollViewerAutomationPeer> {};

// IScrollViewerAutomationPeerFactory
struct IScrollViewerAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ScrollViewer* owner, IInspectable* outer, IInspectable* *inner, ScrollViewerAutomationPeer* *instance);
};

// ISearchBoxAutomationPeer
struct ISearchBoxAutomationPeer : IInspectable, generate<ISearchBoxAutomationPeer> {};

// ISearchBoxAutomationPeerFactory
struct ISearchBoxAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::SearchBox* owner, IInspectable* outer, IInspectable* *inner, SearchBoxAutomationPeer* *instance);
};

// ITimePickerAutomationPeer
struct ITimePickerAutomationPeer : IInspectable, generate<ITimePickerAutomationPeer> {};

// ITimePickerAutomationPeerFactory
struct ITimePickerAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::TimePicker* owner, IInspectable* outer, IInspectable* *inner, TimePickerAutomationPeer* *instance);
};

// IToggleMenuFlyoutItemAutomationPeer
struct IToggleMenuFlyoutItemAutomationPeer : IInspectable, generate<IToggleMenuFlyoutItemAutomationPeer> {};

// IToggleMenuFlyoutItemAutomationPeerFactory
struct IToggleMenuFlyoutItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ToggleMenuFlyoutItem* owner, IInspectable* outer, IInspectable* *inner, ToggleMenuFlyoutItemAutomationPeer* *instance);
};

// IGridViewHeaderItemAutomationPeer
struct IGridViewHeaderItemAutomationPeer : IInspectable, generate<IGridViewHeaderItemAutomationPeer> {};

// IGridViewHeaderItemAutomationPeerFactory
struct IGridViewHeaderItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::GridViewHeaderItem* owner, IInspectable* outer, IInspectable* *inner, GridViewHeaderItemAutomationPeer* *instance);
};

// IGridViewItemDataAutomationPeer
struct IGridViewItemDataAutomationPeer : IInspectable, generate<IGridViewItemDataAutomationPeer> {};

// IGridViewItemDataAutomationPeerFactory
struct IGridViewItemDataAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, GridViewAutomationPeer* parent, IInspectable* outer, IInspectable* *inner, GridViewItemDataAutomationPeer* *instance);
};

// IListViewHeaderItemAutomationPeer
struct IListViewHeaderItemAutomationPeer : IInspectable, generate<IListViewHeaderItemAutomationPeer> {};

// IListViewHeaderItemAutomationPeerFactory
struct IListViewHeaderItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ListViewHeaderItem* owner, IInspectable* outer, IInspectable* *inner, ListViewHeaderItemAutomationPeer* *instance);
};

// IListViewItemDataAutomationPeer
struct IListViewItemDataAutomationPeer : IInspectable, generate<IListViewItemDataAutomationPeer> {};

// IListViewItemDataAutomationPeerFactory
struct IListViewItemDataAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, ListViewBaseAutomationPeer* parent, IInspectable* outer, IInspectable* *inner, ListViewItemDataAutomationPeer* *instance);
};

// IMenuFlyoutPresenterAutomationPeer
struct IMenuFlyoutPresenterAutomationPeer : IInspectable, generate<IMenuFlyoutPresenterAutomationPeer> {};

// IMenuFlyoutPresenterAutomationPeerFactory
struct IMenuFlyoutPresenterAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::MenuFlyoutPresenter* owner, IInspectable* outer, IInspectable* *inner, MenuFlyoutPresenterAutomationPeer* *instance);
};

// IAppBarButtonAutomationPeer
struct IAppBarButtonAutomationPeer : IInspectable, generate<IAppBarButtonAutomationPeer> {};

// IAppBarButtonAutomationPeerFactory
struct IAppBarButtonAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::AppBarButton* owner, IInspectable* outer, IInspectable* *inner, AppBarButtonAutomationPeer* *instance);
};

// IAppBarToggleButtonAutomationPeer
struct IAppBarToggleButtonAutomationPeer : IInspectable, generate<IAppBarToggleButtonAutomationPeer> {};

// IAppBarToggleButtonAutomationPeerFactory
struct IAppBarToggleButtonAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::AppBarToggleButton* owner, IInspectable* outer, IInspectable* *inner, AppBarToggleButtonAutomationPeer* *instance);
};

// IListViewBaseAutomationPeer
struct IListViewBaseAutomationPeer : IInspectable, generate<IListViewBaseAutomationPeer> {};

// IListViewBaseAutomationPeerFactory
struct IListViewBaseAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ListViewBase* owner, IInspectable* outer, IInspectable* *inner, ListViewBaseAutomationPeer* *instance);
};

// IGridViewAutomationPeer
struct IGridViewAutomationPeer : IInspectable, generate<IGridViewAutomationPeer> {};

// IGridViewAutomationPeerFactory
struct IGridViewAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::GridView* owner, IInspectable* outer, IInspectable* *inner, GridViewAutomationPeer* *instance);
};

// IListViewAutomationPeer
struct IListViewAutomationPeer : IInspectable, generate<IListViewAutomationPeer> {};

// IListViewAutomationPeerFactory
struct IListViewAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::ListView* owner, IInspectable* outer, IInspectable* *inner, ListViewAutomationPeer* *instance);
};

// IAutomationPeer
struct IAutomationPeer_raw : IInspectable {
	virtual STDMETHODIMP _get_EventsSource(AutomationPeer* *value);
	virtual STDMETHODIMP _put_EventsSource(AutomationPeer* value);
	virtual STDMETHODIMP _GetPattern(PatternInterface patternInterface, IInspectable* *returnValue);
	virtual STDMETHODIMP _RaiseAutomationEvent(AutomationEvents eventId);
	virtual STDMETHODIMP _RaisePropertyChangedEvent(AutomationProperty* automationProperty, IInspectable* oldValue, IInspectable* newValue);
	virtual STDMETHODIMP _GetAcceleratorKey(HSTRING *returnValue);
	virtual STDMETHODIMP _GetAccessKey(HSTRING *returnValue);
	virtual STDMETHODIMP _GetAutomationControlType(AutomationControlType *returnValue);
	virtual STDMETHODIMP _GetAutomationId(HSTRING *returnValue);
	virtual STDMETHODIMP _GetBoundingRectangle(Foundation::Rect *returnValue);
	virtual STDMETHODIMP _GetChildren(Foundation::Collections::IVector<AutomationPeer*>* *returnValue);
	virtual STDMETHODIMP _GetClassName(HSTRING *returnValue);
	virtual STDMETHODIMP _GetClickablePoint(Foundation::Point *returnValue);
	virtual STDMETHODIMP _GetHelpText(HSTRING *returnValue);
	virtual STDMETHODIMP _GetItemStatus(HSTRING *returnValue);
	virtual STDMETHODIMP _GetItemType(HSTRING *returnValue);
	virtual STDMETHODIMP _GetLabeledBy(AutomationPeer* *returnValue);
	virtual STDMETHODIMP _GetLocalizedControlType(HSTRING *returnValue);
	virtual STDMETHODIMP _GetName(HSTRING *returnValue);
	virtual STDMETHODIMP _GetOrientation(AutomationOrientation *returnValue);
	virtual STDMETHODIMP _HasKeyboardFocus(bool *returnValue);
	virtual STDMETHODIMP _IsContentElement(bool *returnValue);
	virtual STDMETHODIMP _IsControlElement(bool *returnValue);
	virtual STDMETHODIMP _IsEnabled(bool *returnValue);
	virtual STDMETHODIMP _IsKeyboardFocusable(bool *returnValue);
	virtual STDMETHODIMP _IsOffscreen(bool *returnValue);
	virtual STDMETHODIMP _IsPassword(bool *returnValue);
	virtual STDMETHODIMP _IsRequiredForForm(bool *returnValue);
	virtual STDMETHODIMP _SetFocus();
	virtual STDMETHODIMP _GetParent(AutomationPeer* *returnValue);
	virtual STDMETHODIMP _InvalidatePeer();
	virtual STDMETHODIMP _GetPeerFromPoint(Foundation::Point point, AutomationPeer* *returnValue);
	virtual STDMETHODIMP _GetLiveSetting(AutomationLiveSetting *returnValue);
};
template<typename X> struct IAutomationPeer_adaptor : X {
	union {
		struct : property {
			ptr<AutomationPeer> get() { AutomationPeer* value; hrcheck(enc(&IAutomationPeer_adaptor::EventsSource)->_get_EventsSource(&value)); return from_abi(value); }
			ptr<AutomationPeer> operator()() { return get(); }
			operator ptr<AutomationPeer> () { return get(); }
			ptr<AutomationPeer> operator->() { return get(); }
			void put(pptr<AutomationPeer> value) { hrcheck(enc(&IAutomationPeer_adaptor::EventsSource)->_put_EventsSource(value)); }
			void operator=(pptr<AutomationPeer> value) { put(value); }
			void operator()(pptr<AutomationPeer> value) { put(value); }
		} EventsSource;
	};
	object GetPattern(PatternInterface patternInterface) { IInspectable* returnValue; hrcheck(X::get()->_GetPattern(patternInterface, &returnValue)); return from_abi(returnValue); }
	void RaiseAutomationEvent(AutomationEvents eventId) { hrcheck(X::get()->_RaiseAutomationEvent(eventId)); }
	void RaisePropertyChangedEvent(pptr<AutomationProperty> automationProperty, object_ref oldValue, object_ref newValue) { hrcheck(X::get()->_RaisePropertyChangedEvent(automationProperty, oldValue, newValue)); }
	hstring GetAcceleratorKey() { HSTRING returnValue; hrcheck(X::get()->_GetAcceleratorKey(&returnValue)); return from_abi(returnValue); }
	hstring GetAccessKey() { HSTRING returnValue; hrcheck(X::get()->_GetAccessKey(&returnValue)); return from_abi(returnValue); }
	AutomationControlType GetAutomationControlType() { AutomationControlType returnValue; hrcheck(X::get()->_GetAutomationControlType(&returnValue)); return returnValue; }
	hstring GetAutomationId() { HSTRING returnValue; hrcheck(X::get()->_GetAutomationId(&returnValue)); return from_abi(returnValue); }
	Foundation::Rect GetBoundingRectangle() { Foundation::Rect returnValue; hrcheck(X::get()->_GetBoundingRectangle(&returnValue)); return returnValue; }
	ptr<Foundation::Collections::IVector<ptr<AutomationPeer>>> GetChildren() { Foundation::Collections::IVector<AutomationPeer*>* returnValue; hrcheck(X::get()->_GetChildren(&returnValue)); return from_abi(returnValue); }
	hstring GetClassName() { HSTRING returnValue; hrcheck(X::get()->_GetClassName(&returnValue)); return from_abi(returnValue); }
	Foundation::Point GetClickablePoint() { Foundation::Point returnValue; hrcheck(X::get()->_GetClickablePoint(&returnValue)); return returnValue; }
	hstring GetHelpText() { HSTRING returnValue; hrcheck(X::get()->_GetHelpText(&returnValue)); return from_abi(returnValue); }
	hstring GetItemStatus() { HSTRING returnValue; hrcheck(X::get()->_GetItemStatus(&returnValue)); return from_abi(returnValue); }
	hstring GetItemType() { HSTRING returnValue; hrcheck(X::get()->_GetItemType(&returnValue)); return from_abi(returnValue); }
	ptr<AutomationPeer> GetLabeledBy() { AutomationPeer* returnValue; hrcheck(X::get()->_GetLabeledBy(&returnValue)); return from_abi(returnValue); }
	hstring GetLocalizedControlType() { HSTRING returnValue; hrcheck(X::get()->_GetLocalizedControlType(&returnValue)); return from_abi(returnValue); }
	hstring GetName() { HSTRING returnValue; hrcheck(X::get()->_GetName(&returnValue)); return from_abi(returnValue); }
	AutomationOrientation GetOrientation() { AutomationOrientation returnValue; hrcheck(X::get()->_GetOrientation(&returnValue)); return returnValue; }
	bool HasKeyboardFocus() { bool returnValue; hrcheck(X::get()->_HasKeyboardFocus(&returnValue)); return returnValue; }
	bool IsContentElement() { bool returnValue; hrcheck(X::get()->_IsContentElement(&returnValue)); return returnValue; }
	bool IsControlElement() { bool returnValue; hrcheck(X::get()->_IsControlElement(&returnValue)); return returnValue; }
	bool IsEnabled() { bool returnValue; hrcheck(X::get()->_IsEnabled(&returnValue)); return returnValue; }
	bool IsKeyboardFocusable() { bool returnValue; hrcheck(X::get()->_IsKeyboardFocusable(&returnValue)); return returnValue; }
	bool IsOffscreen() { bool returnValue; hrcheck(X::get()->_IsOffscreen(&returnValue)); return returnValue; }
	bool IsPassword() { bool returnValue; hrcheck(X::get()->_IsPassword(&returnValue)); return returnValue; }
	bool IsRequiredForForm() { bool returnValue; hrcheck(X::get()->_IsRequiredForForm(&returnValue)); return returnValue; }
	void SetFocus() { hrcheck(X::get()->_SetFocus()); }
	ptr<AutomationPeer> GetParent() { AutomationPeer* returnValue; hrcheck(X::get()->_GetParent(&returnValue)); return from_abi(returnValue); }
	void InvalidatePeer() { hrcheck(X::get()->_InvalidatePeer()); }
	ptr<AutomationPeer> GetPeerFromPoint(const Foundation::Point& point) { AutomationPeer* returnValue; hrcheck(X::get()->_GetPeerFromPoint(point, &returnValue)); return from_abi(returnValue); }
	AutomationLiveSetting GetLiveSetting() { AutomationLiveSetting returnValue; hrcheck(X::get()->_GetLiveSetting(&returnValue)); return returnValue; }
	IAutomationPeer_adaptor() {}
};
template<typename X> struct adapt<IAutomationPeer, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeer_adaptor<X> { typedef adapt IAutomationPeer; };
struct IAutomationPeer : IAutomationPeer_raw, generate<IAutomationPeer> {};

// IAutomationPeerOverrides
struct IAutomationPeerOverrides_raw : IInspectable {
	virtual STDMETHODIMP _GetPatternCore(PatternInterface patternInterface, IInspectable* *returnValue) = 0;
	virtual STDMETHODIMP _GetAcceleratorKeyCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetAccessKeyCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetAutomationControlTypeCore(AutomationControlType *returnValue) = 0;
	virtual STDMETHODIMP _GetAutomationIdCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetBoundingRectangleCore(Foundation::Rect *returnValue) = 0;
	virtual STDMETHODIMP _GetChildrenCore(Foundation::Collections::IVector<AutomationPeer*>* *returnValue) = 0;
	virtual STDMETHODIMP _GetClassNameCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetClickablePointCore(Foundation::Point *returnValue) = 0;
	virtual STDMETHODIMP _GetHelpTextCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetItemStatusCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetItemTypeCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetLabeledByCore(AutomationPeer* *returnValue) = 0;
	virtual STDMETHODIMP _GetLocalizedControlTypeCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetNameCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetOrientationCore(AutomationOrientation *returnValue) = 0;
	virtual STDMETHODIMP _HasKeyboardFocusCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsContentElementCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsControlElementCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsEnabledCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsKeyboardFocusableCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsOffscreenCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsPasswordCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsRequiredForFormCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _SetFocusCore() = 0;
	virtual STDMETHODIMP _GetPeerFromPointCore(Foundation::Point point, AutomationPeer* *returnValue) = 0;
	virtual STDMETHODIMP _GetLiveSettingCore(AutomationLiveSetting *returnValue) = 0;
};
template<typename X> struct IAutomationPeerOverrides_adaptor : X {
	object GetPatternCore(PatternInterface patternInterface) { IInspectable* returnValue; hrcheck(X::get()->_GetPatternCore(patternInterface, &returnValue)); return from_abi(returnValue); }
	hstring GetAcceleratorKeyCore() { HSTRING returnValue; hrcheck(X::get()->_GetAcceleratorKeyCore(&returnValue)); return from_abi(returnValue); }
	hstring GetAccessKeyCore() { HSTRING returnValue; hrcheck(X::get()->_GetAccessKeyCore(&returnValue)); return from_abi(returnValue); }
	AutomationControlType GetAutomationControlTypeCore() { AutomationControlType returnValue; hrcheck(X::get()->_GetAutomationControlTypeCore(&returnValue)); return returnValue; }
	hstring GetAutomationIdCore() { HSTRING returnValue; hrcheck(X::get()->_GetAutomationIdCore(&returnValue)); return from_abi(returnValue); }
	Foundation::Rect GetBoundingRectangleCore() { Foundation::Rect returnValue; hrcheck(X::get()->_GetBoundingRectangleCore(&returnValue)); return returnValue; }
	ptr<Foundation::Collections::IVector<ptr<AutomationPeer>>> GetChildrenCore() { Foundation::Collections::IVector<AutomationPeer*>* returnValue; hrcheck(X::get()->_GetChildrenCore(&returnValue)); return from_abi(returnValue); }
	hstring GetClassNameCore() { HSTRING returnValue; hrcheck(X::get()->_GetClassNameCore(&returnValue)); return from_abi(returnValue); }
	Foundation::Point GetClickablePointCore() { Foundation::Point returnValue; hrcheck(X::get()->_GetClickablePointCore(&returnValue)); return returnValue; }
	hstring GetHelpTextCore() { HSTRING returnValue; hrcheck(X::get()->_GetHelpTextCore(&returnValue)); return from_abi(returnValue); }
	hstring GetItemStatusCore() { HSTRING returnValue; hrcheck(X::get()->_GetItemStatusCore(&returnValue)); return from_abi(returnValue); }
	hstring GetItemTypeCore() { HSTRING returnValue; hrcheck(X::get()->_GetItemTypeCore(&returnValue)); return from_abi(returnValue); }
	ptr<AutomationPeer> GetLabeledByCore() { AutomationPeer* returnValue; hrcheck(X::get()->_GetLabeledByCore(&returnValue)); return from_abi(returnValue); }
	hstring GetLocalizedControlTypeCore() { HSTRING returnValue; hrcheck(X::get()->_GetLocalizedControlTypeCore(&returnValue)); return from_abi(returnValue); }
	hstring GetNameCore() { HSTRING returnValue; hrcheck(X::get()->_GetNameCore(&returnValue)); return from_abi(returnValue); }
	AutomationOrientation GetOrientationCore() { AutomationOrientation returnValue; hrcheck(X::get()->_GetOrientationCore(&returnValue)); return returnValue; }
	bool HasKeyboardFocusCore() { bool returnValue; hrcheck(X::get()->_HasKeyboardFocusCore(&returnValue)); return returnValue; }
	bool IsContentElementCore() { bool returnValue; hrcheck(X::get()->_IsContentElementCore(&returnValue)); return returnValue; }
	bool IsControlElementCore() { bool returnValue; hrcheck(X::get()->_IsControlElementCore(&returnValue)); return returnValue; }
	bool IsEnabledCore() { bool returnValue; hrcheck(X::get()->_IsEnabledCore(&returnValue)); return returnValue; }
	bool IsKeyboardFocusableCore() { bool returnValue; hrcheck(X::get()->_IsKeyboardFocusableCore(&returnValue)); return returnValue; }
	bool IsOffscreenCore() { bool returnValue; hrcheck(X::get()->_IsOffscreenCore(&returnValue)); return returnValue; }
	bool IsPasswordCore() { bool returnValue; hrcheck(X::get()->_IsPasswordCore(&returnValue)); return returnValue; }
	bool IsRequiredForFormCore() { bool returnValue; hrcheck(X::get()->_IsRequiredForFormCore(&returnValue)); return returnValue; }
	void SetFocusCore() { hrcheck(X::get()->_SetFocusCore()); }
	ptr<AutomationPeer> GetPeerFromPointCore(const Foundation::Point& point) { AutomationPeer* returnValue; hrcheck(X::get()->_GetPeerFromPointCore(point, &returnValue)); return from_abi(returnValue); }
	AutomationLiveSetting GetLiveSettingCore() { AutomationLiveSetting returnValue; hrcheck(X::get()->_GetLiveSettingCore(&returnValue)); return returnValue; }
};
template<typename X> struct adapt<IAutomationPeerOverrides, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides_adaptor<X> { typedef adapt IAutomationPeerOverrides; };
template<typename X> struct IAutomationPeerOverrides_unadaptor : X {
	STDMETHODIMP _GetPatternCore(PatternInterface patternInterface, IInspectable* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetPatternCore(patternInterface)); }); }
	STDMETHODIMP _GetAcceleratorKeyCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetAcceleratorKeyCore()); }); }
	STDMETHODIMP _GetAccessKeyCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetAccessKeyCore()); }); }
	STDMETHODIMP _GetAutomationControlTypeCore(AutomationControlType *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetAutomationControlTypeCore(); }); }
	STDMETHODIMP _GetAutomationIdCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetAutomationIdCore()); }); }
	STDMETHODIMP _GetBoundingRectangleCore(Foundation::Rect *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetBoundingRectangleCore(); }); }
	STDMETHODIMP _GetChildrenCore(Foundation::Collections::IVector<AutomationPeer*>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetChildrenCore()); }); }
	STDMETHODIMP _GetClassNameCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetClassNameCore()); }); }
	STDMETHODIMP _GetClickablePointCore(Foundation::Point *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetClickablePointCore(); }); }
	STDMETHODIMP _GetHelpTextCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetHelpTextCore()); }); }
	STDMETHODIMP _GetItemStatusCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetItemStatusCore()); }); }
	STDMETHODIMP _GetItemTypeCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetItemTypeCore()); }); }
	STDMETHODIMP _GetLabeledByCore(AutomationPeer* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetLabeledByCore()); }); }
	STDMETHODIMP _GetLocalizedControlTypeCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetLocalizedControlTypeCore()); }); }
	STDMETHODIMP _GetNameCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetNameCore()); }); }
	STDMETHODIMP _GetOrientationCore(AutomationOrientation *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetOrientationCore(); }); }
	STDMETHODIMP _HasKeyboardFocusCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->HasKeyboardFocusCore(); }); }
	STDMETHODIMP _IsContentElementCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsContentElementCore(); }); }
	STDMETHODIMP _IsControlElementCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsControlElementCore(); }); }
	STDMETHODIMP _IsEnabledCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsEnabledCore(); }); }
	STDMETHODIMP _IsKeyboardFocusableCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsKeyboardFocusableCore(); }); }
	STDMETHODIMP _IsOffscreenCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsOffscreenCore(); }); }
	STDMETHODIMP _IsPasswordCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsPasswordCore(); }); }
	STDMETHODIMP _IsRequiredForFormCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsRequiredForFormCore(); }); }
	STDMETHODIMP _SetFocusCore() { return hrtry([&, this] { X::get()->SetFocusCore(); }); }
	STDMETHODIMP _GetPeerFromPointCore(Foundation::Point point, AutomationPeer* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetPeerFromPointCore(point)); }); }
	STDMETHODIMP _GetLiveSettingCore(AutomationLiveSetting *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetLiveSettingCore(); }); }
};
template<typename X> struct unadapt<IAutomationPeerOverrides, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides_unadaptor<X> {};
struct IAutomationPeerOverrides : IAutomationPeerOverrides_raw, generate<IAutomationPeerOverrides> {};

// IAutomationPeerProtected
struct IAutomationPeerProtected_raw : IInspectable {
	virtual STDMETHODIMP _PeerFromProvider(Provider::IRawElementProviderSimple* provider, AutomationPeer* *returnValue);
	virtual STDMETHODIMP _ProviderFromPeer(AutomationPeer* peer, Provider::IRawElementProviderSimple* *returnValue);
};
template<typename X> struct IAutomationPeerProtected_adaptor : X {
	ptr<AutomationPeer> PeerFromProvider(pptr<Provider::IRawElementProviderSimple> provider) { AutomationPeer* returnValue; hrcheck(X::get()->_PeerFromProvider(provider, &returnValue)); return from_abi(returnValue); }
	ptr<Provider::IRawElementProviderSimple> ProviderFromPeer(pptr<AutomationPeer> peer) { Provider::IRawElementProviderSimple* returnValue; hrcheck(X::get()->_ProviderFromPeer(peer, &returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IAutomationPeerProtected, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected_adaptor<X> { typedef adapt IAutomationPeerProtected; };
struct IAutomationPeerProtected : IAutomationPeerProtected_raw, generate<IAutomationPeerProtected> {};

// IAutomationPeerStatics
struct IAutomationPeerStatics : IInspectable {
	virtual STDMETHODIMP _ListenerExists(AutomationEvents eventId, bool *returnValue);
};

// IAutomationPeerFactory
struct IAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, AutomationPeer* *instance);
};

// IAutomationPeer2
struct IAutomationPeer2 : IInspectable, generate<IAutomationPeer2> {};

// IAutomationPeerOverrides2
struct IAutomationPeerOverrides2_raw : IInspectable {
	virtual STDMETHODIMP _ShowContextMenuCore() = 0;
	virtual STDMETHODIMP _GetControlledPeersCore(Foundation::Collections::IVectorView<AutomationPeer*>* *returnValue) = 0;
};
template<typename X> struct IAutomationPeerOverrides2_adaptor : X {
	void ShowContextMenuCore() { hrcheck(X::get()->_ShowContextMenuCore()); }
	ptr<Foundation::Collections::IVectorView<ptr<AutomationPeer>>> GetControlledPeersCore() { Foundation::Collections::IVectorView<AutomationPeer*>* returnValue; hrcheck(X::get()->_GetControlledPeersCore(&returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IAutomationPeerOverrides2, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2_adaptor<X> { typedef adapt IAutomationPeerOverrides2; };
template<typename X> struct IAutomationPeerOverrides2_unadaptor : X {
	STDMETHODIMP _ShowContextMenuCore() { return hrtry([&, this] { X::get()->ShowContextMenuCore(); }); }
	STDMETHODIMP _GetControlledPeersCore(Foundation::Collections::IVectorView<AutomationPeer*>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetControlledPeersCore()); }); }
};
template<typename X> struct unadapt<IAutomationPeerOverrides2, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2_unadaptor<X> {};
struct IAutomationPeerOverrides2 : IAutomationPeerOverrides2_raw, generate<IAutomationPeerOverrides2> {};

// IAutomationPeer3
struct IAutomationPeer3_raw : IInspectable {
	virtual STDMETHODIMP _Navigate(AutomationNavigationDirection direction, IInspectable* *returnValue);
	virtual STDMETHODIMP _GetElementFromPoint(Foundation::Point pointInWindowCoordinates, IInspectable* *returnValue);
	virtual STDMETHODIMP _GetFocusedElement(IInspectable* *returnValue);
	virtual STDMETHODIMP _ShowContextMenu();
	virtual STDMETHODIMP _GetControlledPeers(Foundation::Collections::IVectorView<AutomationPeer*>* *returnValue);
	virtual STDMETHODIMP _GetAnnotations(Foundation::Collections::IVector<AutomationPeerAnnotation*>* *returnValue);
	virtual STDMETHODIMP _SetParent(AutomationPeer* peer);
	virtual STDMETHODIMP _RaiseTextEditTextChangedEvent(AutomationTextEditChangeType automationTextEditChangeType, Foundation::Collections::IVectorView<HSTRING>* changedData);
	virtual STDMETHODIMP _GetPositionInSet(int *returnValue);
	virtual STDMETHODIMP _GetSizeOfSet(int *returnValue);
	virtual STDMETHODIMP _GetLevel(int *returnValue);
	virtual STDMETHODIMP _RaiseStructureChangedEvent(AutomationStructureChangeType structureChangeType, AutomationPeer* child);
};
template<typename X> struct IAutomationPeer3_adaptor : X {
	object Navigate(AutomationNavigationDirection direction) { IInspectable* returnValue; hrcheck(X::get()->_Navigate(direction, &returnValue)); return from_abi(returnValue); }
	object GetElementFromPoint(const Foundation::Point& pointInWindowCoordinates) { IInspectable* returnValue; hrcheck(X::get()->_GetElementFromPoint(pointInWindowCoordinates, &returnValue)); return from_abi(returnValue); }
	object GetFocusedElement() { IInspectable* returnValue; hrcheck(X::get()->_GetFocusedElement(&returnValue)); return from_abi(returnValue); }
	void ShowContextMenu() { hrcheck(X::get()->_ShowContextMenu()); }
	ptr<Foundation::Collections::IVectorView<ptr<AutomationPeer>>> GetControlledPeers() { Foundation::Collections::IVectorView<AutomationPeer*>* returnValue; hrcheck(X::get()->_GetControlledPeers(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::Collections::IVector<ptr<AutomationPeerAnnotation>>> GetAnnotations() { Foundation::Collections::IVector<AutomationPeerAnnotation*>* returnValue; hrcheck(X::get()->_GetAnnotations(&returnValue)); return from_abi(returnValue); }
	void SetParent(pptr<AutomationPeer> peer) { hrcheck(X::get()->_SetParent(peer)); }
	void RaiseTextEditTextChangedEvent(AutomationTextEditChangeType automationTextEditChangeType, pptr<Foundation::Collections::IVectorView<hstring>> changedData) { hrcheck(X::get()->_RaiseTextEditTextChangedEvent(automationTextEditChangeType, to_abi(changedData))); }
	int GetPositionInSet() { int returnValue; hrcheck(X::get()->_GetPositionInSet(&returnValue)); return returnValue; }
	int GetSizeOfSet() { int returnValue; hrcheck(X::get()->_GetSizeOfSet(&returnValue)); return returnValue; }
	int GetLevel() { int returnValue; hrcheck(X::get()->_GetLevel(&returnValue)); return returnValue; }
	void RaiseStructureChangedEvent(AutomationStructureChangeType structureChangeType, pptr<AutomationPeer> child) { hrcheck(X::get()->_RaiseStructureChangedEvent(structureChangeType, child)); }
};
template<typename X> struct adapt<IAutomationPeer3, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeer3_adaptor<X> { typedef adapt IAutomationPeer3; };
struct IAutomationPeer3 : IAutomationPeer3_raw, generate<IAutomationPeer3> {};

// IAutomationPeerOverrides3
struct IAutomationPeerOverrides3_raw : IInspectable {
	virtual STDMETHODIMP _NavigateCore(AutomationNavigationDirection direction, IInspectable* *returnValue) = 0;
	virtual STDMETHODIMP _GetElementFromPointCore(Foundation::Point pointInWindowCoordinates, IInspectable* *returnValue) = 0;
	virtual STDMETHODIMP _GetFocusedElementCore(IInspectable* *returnValue) = 0;
	virtual STDMETHODIMP _GetAnnotationsCore(Foundation::Collections::IVector<AutomationPeerAnnotation*>* *returnValue) = 0;
	virtual STDMETHODIMP _GetPositionInSetCore(int *returnValue) = 0;
	virtual STDMETHODIMP _GetSizeOfSetCore(int *returnValue) = 0;
	virtual STDMETHODIMP _GetLevelCore(int *returnValue) = 0;
};
template<typename X> struct IAutomationPeerOverrides3_adaptor : X {
	object NavigateCore(AutomationNavigationDirection direction) { IInspectable* returnValue; hrcheck(X::get()->_NavigateCore(direction, &returnValue)); return from_abi(returnValue); }
	object GetElementFromPointCore(const Foundation::Point& pointInWindowCoordinates) { IInspectable* returnValue; hrcheck(X::get()->_GetElementFromPointCore(pointInWindowCoordinates, &returnValue)); return from_abi(returnValue); }
	object GetFocusedElementCore() { IInspectable* returnValue; hrcheck(X::get()->_GetFocusedElementCore(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::Collections::IVector<ptr<AutomationPeerAnnotation>>> GetAnnotationsCore() { Foundation::Collections::IVector<AutomationPeerAnnotation*>* returnValue; hrcheck(X::get()->_GetAnnotationsCore(&returnValue)); return from_abi(returnValue); }
	int GetPositionInSetCore() { int returnValue; hrcheck(X::get()->_GetPositionInSetCore(&returnValue)); return returnValue; }
	int GetSizeOfSetCore() { int returnValue; hrcheck(X::get()->_GetSizeOfSetCore(&returnValue)); return returnValue; }
	int GetLevelCore() { int returnValue; hrcheck(X::get()->_GetLevelCore(&returnValue)); return returnValue; }
};
template<typename X> struct adapt<IAutomationPeerOverrides3, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3_adaptor<X> { typedef adapt IAutomationPeerOverrides3; };
template<typename X> struct IAutomationPeerOverrides3_unadaptor : X {
	STDMETHODIMP _NavigateCore(AutomationNavigationDirection direction, IInspectable* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->NavigateCore(direction)); }); }
	STDMETHODIMP _GetElementFromPointCore(Foundation::Point pointInWindowCoordinates, IInspectable* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetElementFromPointCore(pointInWindowCoordinates)); }); }
	STDMETHODIMP _GetFocusedElementCore(IInspectable* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetFocusedElementCore()); }); }
	STDMETHODIMP _GetAnnotationsCore(Foundation::Collections::IVector<AutomationPeerAnnotation*>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetAnnotationsCore()); }); }
	STDMETHODIMP _GetPositionInSetCore(int *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetPositionInSetCore(); }); }
	STDMETHODIMP _GetSizeOfSetCore(int *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetSizeOfSetCore(); }); }
	STDMETHODIMP _GetLevelCore(int *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetLevelCore(); }); }
};
template<typename X> struct unadapt<IAutomationPeerOverrides3, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides3_unadaptor<X> {};
struct IAutomationPeerOverrides3 : IAutomationPeerOverrides3_raw, generate<IAutomationPeerOverrides3> {};

// IAutomationPeerStatics3
struct IAutomationPeerStatics3 : IInspectable {
	virtual STDMETHODIMP _GenerateRawElementProviderRuntimeId(RawElementProviderRuntimeId *returnValue);
};

// IAutomationPeer4
struct IAutomationPeer4_raw : IInspectable {
	virtual STDMETHODIMP _GetLandmarkType(AutomationLandmarkType *returnValue);
	virtual STDMETHODIMP _GetLocalizedLandmarkType(HSTRING *returnValue);
};
template<typename X> struct IAutomationPeer4_adaptor : X {
	AutomationLandmarkType GetLandmarkType() { AutomationLandmarkType returnValue; hrcheck(X::get()->_GetLandmarkType(&returnValue)); return returnValue; }
	hstring GetLocalizedLandmarkType() { HSTRING returnValue; hrcheck(X::get()->_GetLocalizedLandmarkType(&returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IAutomationPeer4, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeer4_adaptor<X> { typedef adapt IAutomationPeer4; };
struct IAutomationPeer4 : IAutomationPeer4_raw, generate<IAutomationPeer4> {};

// IAutomationPeerOverrides4
struct IAutomationPeerOverrides4_raw : IInspectable {
	virtual STDMETHODIMP _GetLandmarkTypeCore(AutomationLandmarkType *returnValue) = 0;
	virtual STDMETHODIMP _GetLocalizedLandmarkTypeCore(HSTRING *returnValue) = 0;
};
template<typename X> struct IAutomationPeerOverrides4_adaptor : X {
	AutomationLandmarkType GetLandmarkTypeCore() { AutomationLandmarkType returnValue; hrcheck(X::get()->_GetLandmarkTypeCore(&returnValue)); return returnValue; }
	hstring GetLocalizedLandmarkTypeCore() { HSTRING returnValue; hrcheck(X::get()->_GetLocalizedLandmarkTypeCore(&returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IAutomationPeerOverrides4, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4_adaptor<X> { typedef adapt IAutomationPeerOverrides4; };
template<typename X> struct IAutomationPeerOverrides4_unadaptor : X {
	STDMETHODIMP _GetLandmarkTypeCore(AutomationLandmarkType *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetLandmarkTypeCore(); }); }
	STDMETHODIMP _GetLocalizedLandmarkTypeCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetLocalizedLandmarkTypeCore()); }); }
};
template<typename X> struct unadapt<IAutomationPeerOverrides4, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides4_unadaptor<X> {};
struct IAutomationPeerOverrides4 : IAutomationPeerOverrides4_raw, generate<IAutomationPeerOverrides4> {};

// IAutomationPeer5
struct IAutomationPeer5_raw : IInspectable {
	virtual STDMETHODIMP _IsPeripheral(bool *returnValue);
	virtual STDMETHODIMP _IsDataValidForForm(bool *returnValue);
	virtual STDMETHODIMP _GetFullDescription(HSTRING *returnValue);
};
template<typename X> struct IAutomationPeer5_adaptor : X {
	bool IsPeripheral() { bool returnValue; hrcheck(X::get()->_IsPeripheral(&returnValue)); return returnValue; }
	bool IsDataValidForForm() { bool returnValue; hrcheck(X::get()->_IsDataValidForForm(&returnValue)); return returnValue; }
	hstring GetFullDescription() { HSTRING returnValue; hrcheck(X::get()->_GetFullDescription(&returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IAutomationPeer5, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeer5_adaptor<X> { typedef adapt IAutomationPeer5; };
struct IAutomationPeer5 : IAutomationPeer5_raw, generate<IAutomationPeer5> {};

// IAutomationPeerOverrides5
struct IAutomationPeerOverrides5_raw : IInspectable {
	virtual STDMETHODIMP _IsPeripheralCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _IsDataValidForFormCore(bool *returnValue) = 0;
	virtual STDMETHODIMP _GetFullDescriptionCore(HSTRING *returnValue) = 0;
	virtual STDMETHODIMP _GetDescribedByCore(Foundation::Collections::IIterable<AutomationPeer*>* *returnValue) = 0;
	virtual STDMETHODIMP _GetFlowsToCore(Foundation::Collections::IIterable<AutomationPeer*>* *returnValue) = 0;
	virtual STDMETHODIMP _GetFlowsFromCore(Foundation::Collections::IIterable<AutomationPeer*>* *returnValue) = 0;
};
template<typename X> struct IAutomationPeerOverrides5_adaptor : X {
	bool IsPeripheralCore() { bool returnValue; hrcheck(X::get()->_IsPeripheralCore(&returnValue)); return returnValue; }
	bool IsDataValidForFormCore() { bool returnValue; hrcheck(X::get()->_IsDataValidForFormCore(&returnValue)); return returnValue; }
	hstring GetFullDescriptionCore() { HSTRING returnValue; hrcheck(X::get()->_GetFullDescriptionCore(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::Collections::IIterable<ptr<AutomationPeer>>> GetDescribedByCore() { Foundation::Collections::IIterable<AutomationPeer*>* returnValue; hrcheck(X::get()->_GetDescribedByCore(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::Collections::IIterable<ptr<AutomationPeer>>> GetFlowsToCore() { Foundation::Collections::IIterable<AutomationPeer*>* returnValue; hrcheck(X::get()->_GetFlowsToCore(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::Collections::IIterable<ptr<AutomationPeer>>> GetFlowsFromCore() { Foundation::Collections::IIterable<AutomationPeer*>* returnValue; hrcheck(X::get()->_GetFlowsFromCore(&returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IAutomationPeerOverrides5, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5_adaptor<X> { typedef adapt IAutomationPeerOverrides5; };
template<typename X> struct IAutomationPeerOverrides5_unadaptor : X {
	STDMETHODIMP _IsPeripheralCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsPeripheralCore(); }); }
	STDMETHODIMP _IsDataValidForFormCore(bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->IsDataValidForFormCore(); }); }
	STDMETHODIMP _GetFullDescriptionCore(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetFullDescriptionCore()); }); }
	STDMETHODIMP _GetDescribedByCore(Foundation::Collections::IIterable<AutomationPeer*>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetDescribedByCore()); }); }
	STDMETHODIMP _GetFlowsToCore(Foundation::Collections::IIterable<AutomationPeer*>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetFlowsToCore()); }); }
	STDMETHODIMP _GetFlowsFromCore(Foundation::Collections::IIterable<AutomationPeer*>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetFlowsFromCore()); }); }
};
template<typename X> struct unadapt<IAutomationPeerOverrides5, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides5_unadaptor<X> {};
struct IAutomationPeerOverrides5 : IAutomationPeerOverrides5_raw, generate<IAutomationPeerOverrides5> {};

// IAutomationPeer6
struct IAutomationPeer6_raw : IInspectable {
	virtual STDMETHODIMP _GetCulture(int *returnValue);
};
template<typename X> struct IAutomationPeer6_adaptor : X {
	int GetCulture() { int returnValue; hrcheck(X::get()->_GetCulture(&returnValue)); return returnValue; }
};
template<typename X> struct adapt<IAutomationPeer6, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeer6_adaptor<X> { typedef adapt IAutomationPeer6; };
struct IAutomationPeer6 : IAutomationPeer6_raw, generate<IAutomationPeer6> {};

// IAutomationPeerOverrides6
struct IAutomationPeerOverrides6_raw : IInspectable {
	virtual STDMETHODIMP _GetCultureCore(int *returnValue) = 0;
};
template<typename X> struct IAutomationPeerOverrides6_adaptor : X {
	int GetCultureCore() { int returnValue; hrcheck(X::get()->_GetCultureCore(&returnValue)); return returnValue; }
};
template<typename X> struct adapt<IAutomationPeerOverrides6, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6_adaptor<X> { typedef adapt IAutomationPeerOverrides6; };
template<typename X> struct IAutomationPeerOverrides6_unadaptor : X {
	STDMETHODIMP _GetCultureCore(int *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetCultureCore(); }); }
};
template<typename X> struct unadapt<IAutomationPeerOverrides6, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides6_unadaptor<X> {};
struct IAutomationPeerOverrides6 : IAutomationPeerOverrides6_raw, generate<IAutomationPeerOverrides6> {};

// IAutomationPeer7
struct IAutomationPeer7_raw : IInspectable {
	virtual STDMETHODIMP _RaiseNotificationEvent(AutomationNotificationKind notificationKind, AutomationNotificationProcessing notificationProcessing, HSTRING displayString, HSTRING activityId);
};
template<typename X> struct IAutomationPeer7_adaptor : X {
	void RaiseNotificationEvent(AutomationNotificationKind notificationKind, AutomationNotificationProcessing notificationProcessing, hstring_ref displayString, hstring_ref activityId) { hrcheck(X::get()->_RaiseNotificationEvent(notificationKind, notificationProcessing, displayString, activityId)); }
};
template<typename X> struct adapt<IAutomationPeer7, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeer7_adaptor<X> { typedef adapt IAutomationPeer7; };
struct IAutomationPeer7 : IAutomationPeer7_raw, generate<IAutomationPeer7> {};

// IAutomationPeer8
struct IAutomationPeer8_raw : IInspectable {
	virtual STDMETHODIMP _GetHeadingLevel(AutomationHeadingLevel *returnValue);
};
template<typename X> struct IAutomationPeer8_adaptor : X {
	AutomationHeadingLevel GetHeadingLevel() { AutomationHeadingLevel returnValue; hrcheck(X::get()->_GetHeadingLevel(&returnValue)); return returnValue; }
};
template<typename X> struct adapt<IAutomationPeer8, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeer8_adaptor<X> { typedef adapt IAutomationPeer8; };
struct IAutomationPeer8 : IAutomationPeer8_raw, generate<IAutomationPeer8> {};

// IAutomationPeerOverrides8
struct IAutomationPeerOverrides8_raw : IInspectable {
	virtual STDMETHODIMP _GetHeadingLevelCore(AutomationHeadingLevel *returnValue) = 0;
};
template<typename X> struct IAutomationPeerOverrides8_adaptor : X {
	AutomationHeadingLevel GetHeadingLevelCore() { AutomationHeadingLevel returnValue; hrcheck(X::get()->_GetHeadingLevelCore(&returnValue)); return returnValue; }
};
template<typename X> struct adapt<IAutomationPeerOverrides8, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8_adaptor<X> { typedef adapt IAutomationPeerOverrides8; };
template<typename X> struct IAutomationPeerOverrides8_unadaptor : X {
	STDMETHODIMP _GetHeadingLevelCore(AutomationHeadingLevel *returnValue) { return hrtry([&, this] { *returnValue = X::get()->GetHeadingLevelCore(); }); }
};
template<typename X> struct unadapt<IAutomationPeerOverrides8, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides8_unadaptor<X> {};
struct IAutomationPeerOverrides8 : IAutomationPeerOverrides8_raw, generate<IAutomationPeerOverrides8> {};

// AutomationPeer
template<typename> struct AutomationPeer_statics {
	static RawElementProviderRuntimeId GenerateRawElementProviderRuntimeId() { RawElementProviderRuntimeId returnValue; hrcheck(get_activation_factory<AutomationPeer, IAutomationPeerStatics3>()->_GenerateRawElementProviderRuntimeId(&returnValue)); return returnValue; }
	static bool ListenerExists(AutomationEvents eventId) { bool returnValue; hrcheck(get_activation_factory<AutomationPeer, IAutomationPeerStatics>()->_ListenerExists(eventId, &returnValue)); return returnValue; }
};

template<typename X> struct statics<AutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::AutomationPeer_statics<void> {
	typedef typename X::root_type AutomationPeer;
};
struct AutomationPeer : generate<AutomationPeer> {};

// IAutomationPeerAnnotation
struct IAutomationPeerAnnotation_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(AnnotationType *value);
	virtual STDMETHODIMP _put_Type(AnnotationType value);
	virtual STDMETHODIMP _get_Peer(AutomationPeer* *value);
	virtual STDMETHODIMP _put_Peer(AutomationPeer* value);
};
template<typename X> struct IAutomationPeerAnnotation_adaptor : X {
	union {
		struct : property {
			ptr<AutomationPeer> get() { AutomationPeer* value; hrcheck(enc(&IAutomationPeerAnnotation_adaptor::Peer)->_get_Peer(&value)); return from_abi(value); }
			ptr<AutomationPeer> operator()() { return get(); }
			operator ptr<AutomationPeer> () { return get(); }
			ptr<AutomationPeer> operator->() { return get(); }
			void put(pptr<AutomationPeer> value) { hrcheck(enc(&IAutomationPeerAnnotation_adaptor::Peer)->_put_Peer(value)); }
			void operator=(pptr<AutomationPeer> value) { put(value); }
			void operator()(pptr<AutomationPeer> value) { put(value); }
		} Peer;
		struct : property {
			AnnotationType get() { AnnotationType value; hrcheck(enc(&IAutomationPeerAnnotation_adaptor::Type)->_get_Type(&value)); return value; }
			AnnotationType operator()() { return get(); }
			operator AnnotationType () { return get(); }
			void put(AnnotationType value) { hrcheck(enc(&IAutomationPeerAnnotation_adaptor::Type)->_put_Type(value)); }
			void operator=(AnnotationType value) { put(value); }
			void operator()(AnnotationType value) { put(value); }
		} Type;
	};
	IAutomationPeerAnnotation_adaptor() {}
};
template<typename X> struct adapt<IAutomationPeerAnnotation, X> : Windows::UI::Xaml::Automation::Peers::IAutomationPeerAnnotation_adaptor<X> { typedef adapt IAutomationPeerAnnotation; };
struct IAutomationPeerAnnotation : IAutomationPeerAnnotation_raw, generate<IAutomationPeerAnnotation> {};

// IAutomationPeerAnnotationStatics
struct IAutomationPeerAnnotationStatics : IInspectable {
	virtual STDMETHODIMP _get_TypeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_PeerProperty(DependencyProperty* *value);
};

// IAutomationPeerAnnotationFactory
struct IAutomationPeerAnnotationFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(AnnotationType type, AutomationPeerAnnotation* *instance);
	virtual STDMETHODIMP _CreateWithPeerParameter(AnnotationType type, AutomationPeer* peer, AutomationPeerAnnotation* *instance);
};

// AutomationPeerAnnotation
template<typename> struct AutomationPeerAnnotation_statics {
	static struct _PeerProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationPeerAnnotation, IAutomationPeerAnnotationStatics>()->_get_PeerProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PeerProperty;
	static struct _TypeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationPeerAnnotation, IAutomationPeerAnnotationStatics>()->_get_TypeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TypeProperty;
	static AutomationPeerAnnotation *activate(AnnotationType type) { AutomationPeerAnnotation *instance; hrcheck(get_activation_factory<AutomationPeerAnnotation, IAutomationPeerAnnotationFactory>()->_CreateInstance(type, &instance)); return instance; }
	static AutomationPeerAnnotation *activate(AnnotationType type, pptr<AutomationPeer> peer) { AutomationPeerAnnotation *instance; hrcheck(get_activation_factory<AutomationPeerAnnotation, IAutomationPeerAnnotationFactory>()->_CreateWithPeerParameter(type, peer, &instance)); return instance; }
	static AutomationPeerAnnotation *activate() { AutomationPeerAnnotation *t; get_activation_factory<AutomationPeerAnnotation>()->ActivateInstance((IInspectable**)&t); return t; }
};
template<typename X> typename AutomationPeerAnnotation_statics<X>::_PeerProperty AutomationPeerAnnotation_statics<X>::PeerProperty;
template<typename X> typename AutomationPeerAnnotation_statics<X>::_TypeProperty AutomationPeerAnnotation_statics<X>::TypeProperty;

template<typename X> struct statics<AutomationPeerAnnotation, X> : X, Windows::UI::Xaml::Automation::Peers::AutomationPeerAnnotation_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::AutomationPeerAnnotation_statics<void>::activate;
	typedef typename X::root_type AutomationPeerAnnotation;
};
struct AutomationPeerAnnotation : generate<AutomationPeerAnnotation> {};

// IFrameworkElementAutomationPeer
struct IFrameworkElementAutomationPeer_raw : IInspectable {
	virtual STDMETHODIMP _get_Owner(UIElement* *value);
};
template<typename X> struct IFrameworkElementAutomationPeer_adaptor : X {
	union {
		struct : property {
			ptr<UIElement> get() { UIElement* value; hrcheck(enc(&IFrameworkElementAutomationPeer_adaptor::Owner)->_get_Owner(&value)); return from_abi(value); }
			ptr<UIElement> operator()() { return get(); }
			operator ptr<UIElement> () { return get(); }
			ptr<UIElement> operator->() { return get(); }
		} Owner;
	};
	IFrameworkElementAutomationPeer_adaptor() {}
};
template<typename X> struct adapt<IFrameworkElementAutomationPeer, X> : Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer_adaptor<X> { typedef adapt IFrameworkElementAutomationPeer; };
struct IFrameworkElementAutomationPeer : IFrameworkElementAutomationPeer_raw, generate<IFrameworkElementAutomationPeer> {};

// IFrameworkElementAutomationPeerStatics
struct IFrameworkElementAutomationPeerStatics : IInspectable {
	virtual STDMETHODIMP _FromElement(UIElement* element, AutomationPeer* *returnValue);
	virtual STDMETHODIMP _CreatePeerForElement(UIElement* element, AutomationPeer* *returnValue);
};

// IFrameworkElementAutomationPeerFactory
struct IFrameworkElementAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(FrameworkElement* owner, IInspectable* outer, IInspectable* *inner, FrameworkElementAutomationPeer* *instance);
};

// FrameworkElementAutomationPeer
template<typename> struct FrameworkElementAutomationPeer_statics {
	static ptr<AutomationPeer> FromElement(pptr<UIElement> element) { AutomationPeer* returnValue; hrcheck(get_activation_factory<FrameworkElementAutomationPeer, IFrameworkElementAutomationPeerStatics>()->_FromElement(element, &returnValue)); return from_abi(returnValue); }
	static ptr<AutomationPeer> CreatePeerForElement(pptr<UIElement> element) { AutomationPeer* returnValue; hrcheck(get_activation_factory<FrameworkElementAutomationPeer, IFrameworkElementAutomationPeerStatics>()->_CreatePeerForElement(element, &returnValue)); return from_abi(returnValue); }
	static FrameworkElementAutomationPeer *activate(pptr<FrameworkElement> owner, object_ref outer, IInspectable* *inner) { FrameworkElementAutomationPeer *instance; hrcheck(get_activation_factory<FrameworkElementAutomationPeer, IFrameworkElementAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<FrameworkElementAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer_statics<void>::activate;
	typedef typename X::root_type FrameworkElementAutomationPeer;
};
struct FrameworkElementAutomationPeer : generate<FrameworkElementAutomationPeer> {};

// ColorSpectrumAutomationPeer
template<typename> struct ColorSpectrumAutomationPeer_statics {
	static ColorSpectrumAutomationPeer *activate(pptr<Controls::Primitives::ColorSpectrum> owner, object_ref outer, IInspectable* *inner) { ColorSpectrumAutomationPeer *instance; hrcheck(get_activation_factory<ColorSpectrumAutomationPeer, IColorSpectrumAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ColorSpectrumAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ColorSpectrumAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ColorSpectrumAutomationPeer;
};
struct ColorSpectrumAutomationPeer : generate<ColorSpectrumAutomationPeer> {};

// PersonPictureAutomationPeer
template<typename> struct PersonPictureAutomationPeer_statics {
	static PersonPictureAutomationPeer *activate(pptr<Controls::PersonPicture> owner, object_ref outer, IInspectable* *inner) { PersonPictureAutomationPeer *instance; hrcheck(get_activation_factory<PersonPictureAutomationPeer, IPersonPictureAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<PersonPictureAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::PersonPictureAutomationPeer_statics<void>::activate;
	typedef typename X::root_type PersonPictureAutomationPeer;
};
struct PersonPictureAutomationPeer : generate<PersonPictureAutomationPeer> {};

// RatingControlAutomationPeer
template<typename> struct RatingControlAutomationPeer_statics {
	static RatingControlAutomationPeer *activate(pptr<Controls::RatingControl> owner, object_ref outer, IInspectable* *inner) { RatingControlAutomationPeer *instance; hrcheck(get_activation_factory<RatingControlAutomationPeer, IRatingControlAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<RatingControlAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::RatingControlAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::RatingControlAutomationPeer_statics<void>::activate;
	typedef typename X::root_type RatingControlAutomationPeer;
};
struct RatingControlAutomationPeer : generate<RatingControlAutomationPeer> {};

// ButtonBaseAutomationPeer
template<typename X> struct statics<ButtonBaseAutomationPeer, X> : X {
	typedef typename X::root_type ButtonBaseAutomationPeer;
};
struct ButtonBaseAutomationPeer : generate<ButtonBaseAutomationPeer> {};

// CaptureElementAutomationPeer
template<typename> struct CaptureElementAutomationPeer_statics {
	static CaptureElementAutomationPeer *activate(pptr<Controls::CaptureElement> owner, object_ref outer, IInspectable* *inner) { CaptureElementAutomationPeer *instance; hrcheck(get_activation_factory<CaptureElementAutomationPeer, ICaptureElementAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<CaptureElementAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::CaptureElementAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::CaptureElementAutomationPeer_statics<void>::activate;
	typedef typename X::root_type CaptureElementAutomationPeer;
};
struct CaptureElementAutomationPeer : generate<CaptureElementAutomationPeer> {};

// ComboBoxItemAutomationPeer
template<typename> struct ComboBoxItemAutomationPeer_statics {
	static ComboBoxItemAutomationPeer *activate(pptr<Controls::ComboBoxItem> owner, object_ref outer, IInspectable* *inner) { ComboBoxItemAutomationPeer *instance; hrcheck(get_activation_factory<ComboBoxItemAutomationPeer, IComboBoxItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ComboBoxItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ComboBoxItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ComboBoxItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ComboBoxItemAutomationPeer;
};
struct ComboBoxItemAutomationPeer : generate<ComboBoxItemAutomationPeer> {};

// FlipViewItemAutomationPeer
template<typename> struct FlipViewItemAutomationPeer_statics {
	static FlipViewItemAutomationPeer *activate(pptr<Controls::FlipViewItem> owner, object_ref outer, IInspectable* *inner) { FlipViewItemAutomationPeer *instance; hrcheck(get_activation_factory<FlipViewItemAutomationPeer, IFlipViewItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<FlipViewItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::FlipViewItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::FlipViewItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type FlipViewItemAutomationPeer;
};
struct FlipViewItemAutomationPeer : generate<FlipViewItemAutomationPeer> {};

// GroupItemAutomationPeer
template<typename> struct GroupItemAutomationPeer_statics {
	static GroupItemAutomationPeer *activate(pptr<Controls::GroupItem> owner, object_ref outer, IInspectable* *inner) { GroupItemAutomationPeer *instance; hrcheck(get_activation_factory<GroupItemAutomationPeer, IGroupItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<GroupItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::GroupItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::GroupItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type GroupItemAutomationPeer;
};
struct GroupItemAutomationPeer : generate<GroupItemAutomationPeer> {};

// ImageAutomationPeer
template<typename> struct ImageAutomationPeer_statics {
	static ImageAutomationPeer *activate(pptr<Controls::Image> owner, object_ref outer, IInspectable* *inner) { ImageAutomationPeer *instance; hrcheck(get_activation_factory<ImageAutomationPeer, IImageAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ImageAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ImageAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ImageAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ImageAutomationPeer;
};
struct ImageAutomationPeer : generate<ImageAutomationPeer> {};

// ListBoxItemAutomationPeer
template<typename> struct ListBoxItemAutomationPeer_statics {
	static ListBoxItemAutomationPeer *activate(pptr<Controls::ListBoxItem> owner, object_ref outer, IInspectable* *inner) { ListBoxItemAutomationPeer *instance; hrcheck(get_activation_factory<ListBoxItemAutomationPeer, IListBoxItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListBoxItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListBoxItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListBoxItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListBoxItemAutomationPeer;
};
struct ListBoxItemAutomationPeer : generate<ListBoxItemAutomationPeer> {};

// MediaTransportControlsAutomationPeer
template<typename> struct MediaTransportControlsAutomationPeer_statics {
	static MediaTransportControlsAutomationPeer *activate(pptr<Controls::MediaTransportControls> owner, object_ref outer, IInspectable* *inner) { MediaTransportControlsAutomationPeer *instance; hrcheck(get_activation_factory<MediaTransportControlsAutomationPeer, IMediaTransportControlsAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MediaTransportControlsAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::MediaTransportControlsAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::MediaTransportControlsAutomationPeer_statics<void>::activate;
	typedef typename X::root_type MediaTransportControlsAutomationPeer;
};
struct MediaTransportControlsAutomationPeer : generate<MediaTransportControlsAutomationPeer> {};

// PasswordBoxAutomationPeer
template<typename> struct PasswordBoxAutomationPeer_statics {
	static PasswordBoxAutomationPeer *activate(pptr<Controls::PasswordBox> owner, object_ref outer, IInspectable* *inner) { PasswordBoxAutomationPeer *instance; hrcheck(get_activation_factory<PasswordBoxAutomationPeer, IPasswordBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<PasswordBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::PasswordBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::PasswordBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type PasswordBoxAutomationPeer;
};
struct PasswordBoxAutomationPeer : generate<PasswordBoxAutomationPeer> {};

// ProgressRingAutomationPeer
template<typename> struct ProgressRingAutomationPeer_statics {
	static ProgressRingAutomationPeer *activate(pptr<Controls::ProgressRing> owner, object_ref outer, IInspectable* *inner) { ProgressRingAutomationPeer *instance; hrcheck(get_activation_factory<ProgressRingAutomationPeer, IProgressRingAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ProgressRingAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ProgressRingAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ProgressRingAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ProgressRingAutomationPeer;
};
struct ProgressRingAutomationPeer : generate<ProgressRingAutomationPeer> {};

// RichTextBlockAutomationPeer
template<typename> struct RichTextBlockAutomationPeer_statics {
	static RichTextBlockAutomationPeer *activate(pptr<Controls::RichTextBlock> owner, object_ref outer, IInspectable* *inner) { RichTextBlockAutomationPeer *instance; hrcheck(get_activation_factory<RichTextBlockAutomationPeer, IRichTextBlockAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<RichTextBlockAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::RichTextBlockAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::RichTextBlockAutomationPeer_statics<void>::activate;
	typedef typename X::root_type RichTextBlockAutomationPeer;
};
struct RichTextBlockAutomationPeer : generate<RichTextBlockAutomationPeer> {};

// RichTextBlockOverflowAutomationPeer
template<typename> struct RichTextBlockOverflowAutomationPeer_statics {
	static RichTextBlockOverflowAutomationPeer *activate(pptr<Controls::RichTextBlockOverflow> owner, object_ref outer, IInspectable* *inner) { RichTextBlockOverflowAutomationPeer *instance; hrcheck(get_activation_factory<RichTextBlockOverflowAutomationPeer, IRichTextBlockOverflowAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<RichTextBlockOverflowAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::RichTextBlockOverflowAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::RichTextBlockOverflowAutomationPeer_statics<void>::activate;
	typedef typename X::root_type RichTextBlockOverflowAutomationPeer;
};
struct RichTextBlockOverflowAutomationPeer : generate<RichTextBlockOverflowAutomationPeer> {};

// SettingsFlyoutAutomationPeer
template<typename> struct SettingsFlyoutAutomationPeer_statics {
	static SettingsFlyoutAutomationPeer *activate(pptr<Controls::SettingsFlyout> owner, object_ref outer, IInspectable* *inner) { SettingsFlyoutAutomationPeer *instance; hrcheck(get_activation_factory<SettingsFlyoutAutomationPeer, ISettingsFlyoutAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<SettingsFlyoutAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::SettingsFlyoutAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::SettingsFlyoutAutomationPeer_statics<void>::activate;
	typedef typename X::root_type SettingsFlyoutAutomationPeer;
};
struct SettingsFlyoutAutomationPeer : generate<SettingsFlyoutAutomationPeer> {};

// TextBlockAutomationPeer
template<typename> struct TextBlockAutomationPeer_statics {
	static TextBlockAutomationPeer *activate(pptr<Controls::TextBlock> owner, object_ref outer, IInspectable* *inner) { TextBlockAutomationPeer *instance; hrcheck(get_activation_factory<TextBlockAutomationPeer, ITextBlockAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<TextBlockAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::TextBlockAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::TextBlockAutomationPeer_statics<void>::activate;
	typedef typename X::root_type TextBlockAutomationPeer;
};
struct TextBlockAutomationPeer : generate<TextBlockAutomationPeer> {};

// TextBoxAutomationPeer
template<typename> struct TextBoxAutomationPeer_statics {
	static TextBoxAutomationPeer *activate(pptr<Controls::TextBox> owner, object_ref outer, IInspectable* *inner) { TextBoxAutomationPeer *instance; hrcheck(get_activation_factory<TextBoxAutomationPeer, ITextBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<TextBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::TextBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::TextBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type TextBoxAutomationPeer;
};
struct TextBoxAutomationPeer : generate<TextBoxAutomationPeer> {};

// ThumbAutomationPeer
template<typename> struct ThumbAutomationPeer_statics {
	static ThumbAutomationPeer *activate(pptr<Controls::Primitives::Thumb> owner, object_ref outer, IInspectable* *inner) { ThumbAutomationPeer *instance; hrcheck(get_activation_factory<ThumbAutomationPeer, IThumbAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ThumbAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ThumbAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ThumbAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ThumbAutomationPeer;
};
struct ThumbAutomationPeer : generate<ThumbAutomationPeer> {};

// DatePickerAutomationPeer
template<typename> struct DatePickerAutomationPeer_statics {
	static DatePickerAutomationPeer *activate(pptr<Controls::DatePicker> owner, object_ref outer, IInspectable* *inner) { DatePickerAutomationPeer *instance; hrcheck(get_activation_factory<DatePickerAutomationPeer, IDatePickerAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<DatePickerAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::DatePickerAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::DatePickerAutomationPeer_statics<void>::activate;
	typedef typename X::root_type DatePickerAutomationPeer;
};
struct DatePickerAutomationPeer : generate<DatePickerAutomationPeer> {};

// FlyoutPresenterAutomationPeer
template<typename> struct FlyoutPresenterAutomationPeer_statics {
	static FlyoutPresenterAutomationPeer *activate(pptr<Controls::FlyoutPresenter> owner, object_ref outer, IInspectable* *inner) { FlyoutPresenterAutomationPeer *instance; hrcheck(get_activation_factory<FlyoutPresenterAutomationPeer, IFlyoutPresenterAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<FlyoutPresenterAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::FlyoutPresenterAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::FlyoutPresenterAutomationPeer_statics<void>::activate;
	typedef typename X::root_type FlyoutPresenterAutomationPeer;
};
struct FlyoutPresenterAutomationPeer : generate<FlyoutPresenterAutomationPeer> {};

// GridViewItemAutomationPeer
template<typename> struct GridViewItemAutomationPeer_statics {
	static GridViewItemAutomationPeer *activate(pptr<Controls::GridViewItem> owner, object_ref outer, IInspectable* *inner) { GridViewItemAutomationPeer *instance; hrcheck(get_activation_factory<GridViewItemAutomationPeer, IGridViewItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<GridViewItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::GridViewItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::GridViewItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type GridViewItemAutomationPeer;
};
struct GridViewItemAutomationPeer : generate<GridViewItemAutomationPeer> {};

// HubAutomationPeer
template<typename> struct HubAutomationPeer_statics {
	static HubAutomationPeer *activate(pptr<Controls::Hub> owner, object_ref outer, IInspectable* *inner) { HubAutomationPeer *instance; hrcheck(get_activation_factory<HubAutomationPeer, IHubAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<HubAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::HubAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::HubAutomationPeer_statics<void>::activate;
	typedef typename X::root_type HubAutomationPeer;
};
struct HubAutomationPeer : generate<HubAutomationPeer> {};

// ListViewBaseHeaderItemAutomationPeer
template<typename X> struct statics<ListViewBaseHeaderItemAutomationPeer, X> : X {
	typedef typename X::root_type ListViewBaseHeaderItemAutomationPeer;
};
struct ListViewBaseHeaderItemAutomationPeer : generate<ListViewBaseHeaderItemAutomationPeer> {};

// ListViewItemAutomationPeer
template<typename> struct ListViewItemAutomationPeer_statics {
	static ListViewItemAutomationPeer *activate(pptr<Controls::ListViewItem> owner, object_ref outer, IInspectable* *inner) { ListViewItemAutomationPeer *instance; hrcheck(get_activation_factory<ListViewItemAutomationPeer, IListViewItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListViewItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListViewItemAutomationPeer;
};
struct ListViewItemAutomationPeer : generate<ListViewItemAutomationPeer> {};

// NavigationViewItemAutomationPeer
template<typename> struct NavigationViewItemAutomationPeer_statics {
	static NavigationViewItemAutomationPeer *activate(pptr<Controls::NavigationViewItem> owner, object_ref outer, IInspectable* *inner) { NavigationViewItemAutomationPeer *instance; hrcheck(get_activation_factory<NavigationViewItemAutomationPeer, INavigationViewItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<NavigationViewItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::NavigationViewItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type NavigationViewItemAutomationPeer;
};
struct NavigationViewItemAutomationPeer : generate<NavigationViewItemAutomationPeer> {};

// MediaElementAutomationPeer
template<typename> struct MediaElementAutomationPeer_statics {
	static MediaElementAutomationPeer *activate(pptr<Controls::MediaElement> owner, object_ref outer, IInspectable* *inner) { MediaElementAutomationPeer *instance; hrcheck(get_activation_factory<MediaElementAutomationPeer, IMediaElementAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MediaElementAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::MediaElementAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::MediaElementAutomationPeer_statics<void>::activate;
	typedef typename X::root_type MediaElementAutomationPeer;
};
struct MediaElementAutomationPeer : generate<MediaElementAutomationPeer> {};

// MediaPlayerElementAutomationPeer
template<typename> struct MediaPlayerElementAutomationPeer_statics {
	static MediaPlayerElementAutomationPeer *activate(pptr<Controls::MediaPlayerElement> owner, object_ref outer, IInspectable* *inner) { MediaPlayerElementAutomationPeer *instance; hrcheck(get_activation_factory<MediaPlayerElementAutomationPeer, IMediaPlayerElementAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MediaPlayerElementAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::MediaPlayerElementAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::MediaPlayerElementAutomationPeer_statics<void>::activate;
	typedef typename X::root_type MediaPlayerElementAutomationPeer;
};
struct MediaPlayerElementAutomationPeer : generate<MediaPlayerElementAutomationPeer> {};

// RichEditBoxAutomationPeer
template<typename> struct RichEditBoxAutomationPeer_statics {
	static RichEditBoxAutomationPeer *activate(pptr<Controls::RichEditBox> owner, object_ref outer, IInspectable* *inner) { RichEditBoxAutomationPeer *instance; hrcheck(get_activation_factory<RichEditBoxAutomationPeer, IRichEditBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<RichEditBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::RichEditBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::RichEditBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type RichEditBoxAutomationPeer;
};
struct RichEditBoxAutomationPeer : generate<RichEditBoxAutomationPeer> {};

// SearchBoxAutomationPeer
template<typename> struct SearchBoxAutomationPeer_statics {
	static SearchBoxAutomationPeer *activate(pptr<Controls::SearchBox> owner, object_ref outer, IInspectable* *inner) { SearchBoxAutomationPeer *instance; hrcheck(get_activation_factory<SearchBoxAutomationPeer, ISearchBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<SearchBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::SearchBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::SearchBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type SearchBoxAutomationPeer;
};
struct SearchBoxAutomationPeer : generate<SearchBoxAutomationPeer> {};

// TimePickerAutomationPeer
template<typename> struct TimePickerAutomationPeer_statics {
	static TimePickerAutomationPeer *activate(pptr<Controls::TimePicker> owner, object_ref outer, IInspectable* *inner) { TimePickerAutomationPeer *instance; hrcheck(get_activation_factory<TimePickerAutomationPeer, ITimePickerAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<TimePickerAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::TimePickerAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::TimePickerAutomationPeer_statics<void>::activate;
	typedef typename X::root_type TimePickerAutomationPeer;
};
struct TimePickerAutomationPeer : generate<TimePickerAutomationPeer> {};

// GridViewHeaderItemAutomationPeer
template<typename> struct GridViewHeaderItemAutomationPeer_statics {
	static GridViewHeaderItemAutomationPeer *activate(pptr<Controls::GridViewHeaderItem> owner, object_ref outer, IInspectable* *inner) { GridViewHeaderItemAutomationPeer *instance; hrcheck(get_activation_factory<GridViewHeaderItemAutomationPeer, IGridViewHeaderItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<GridViewHeaderItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::GridViewHeaderItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::GridViewHeaderItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type GridViewHeaderItemAutomationPeer;
};
struct GridViewHeaderItemAutomationPeer : generate<GridViewHeaderItemAutomationPeer> {};

// ListViewHeaderItemAutomationPeer
template<typename> struct ListViewHeaderItemAutomationPeer_statics {
	static ListViewHeaderItemAutomationPeer *activate(pptr<Controls::ListViewHeaderItem> owner, object_ref outer, IInspectable* *inner) { ListViewHeaderItemAutomationPeer *instance; hrcheck(get_activation_factory<ListViewHeaderItemAutomationPeer, IListViewHeaderItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListViewHeaderItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListViewHeaderItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListViewHeaderItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListViewHeaderItemAutomationPeer;
};
struct ListViewHeaderItemAutomationPeer : generate<ListViewHeaderItemAutomationPeer> {};

// TreeViewItemAutomationPeer
template<typename> struct TreeViewItemAutomationPeer_statics {
	static TreeViewItemAutomationPeer *activate(pptr<Controls::TreeViewItem> owner, object_ref outer, IInspectable* *inner) { TreeViewItemAutomationPeer *instance; hrcheck(get_activation_factory<TreeViewItemAutomationPeer, ITreeViewItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<TreeViewItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::TreeViewItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type TreeViewItemAutomationPeer;
};
struct TreeViewItemAutomationPeer : generate<TreeViewItemAutomationPeer> {};

// ButtonAutomationPeer
template<typename> struct ButtonAutomationPeer_statics {
	static ButtonAutomationPeer *activate(pptr<Controls::Button> owner, object_ref outer, IInspectable* *inner) { ButtonAutomationPeer *instance; hrcheck(get_activation_factory<ButtonAutomationPeer, IButtonAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ButtonAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ButtonAutomationPeer;
};
struct ButtonAutomationPeer : generate<ButtonAutomationPeer> {};

// HyperlinkButtonAutomationPeer
template<typename> struct HyperlinkButtonAutomationPeer_statics {
	static HyperlinkButtonAutomationPeer *activate(pptr<Controls::HyperlinkButton> owner, object_ref outer, IInspectable* *inner) { HyperlinkButtonAutomationPeer *instance; hrcheck(get_activation_factory<HyperlinkButtonAutomationPeer, IHyperlinkButtonAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<HyperlinkButtonAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::HyperlinkButtonAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::HyperlinkButtonAutomationPeer_statics<void>::activate;
	typedef typename X::root_type HyperlinkButtonAutomationPeer;
};
struct HyperlinkButtonAutomationPeer : generate<HyperlinkButtonAutomationPeer> {};

// RepeatButtonAutomationPeer
template<typename> struct RepeatButtonAutomationPeer_statics {
	static RepeatButtonAutomationPeer *activate(pptr<Controls::Primitives::RepeatButton> owner, object_ref outer, IInspectable* *inner) { RepeatButtonAutomationPeer *instance; hrcheck(get_activation_factory<RepeatButtonAutomationPeer, IRepeatButtonAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<RepeatButtonAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::RepeatButtonAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::RepeatButtonAutomationPeer_statics<void>::activate;
	typedef typename X::root_type RepeatButtonAutomationPeer;
};
struct RepeatButtonAutomationPeer : generate<RepeatButtonAutomationPeer> {};

// AutoSuggestBoxAutomationPeer
template<typename> struct AutoSuggestBoxAutomationPeer_statics {
	static AutoSuggestBoxAutomationPeer *activate(pptr<Controls::AutoSuggestBox> owner) { AutoSuggestBoxAutomationPeer *instance; hrcheck(get_activation_factory<AutoSuggestBoxAutomationPeer, IAutoSuggestBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, &instance)); return instance; }
};

template<typename X> struct statics<AutoSuggestBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::AutoSuggestBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::AutoSuggestBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type AutoSuggestBoxAutomationPeer;
};
struct AutoSuggestBoxAutomationPeer : generate<AutoSuggestBoxAutomationPeer> {};

// MenuFlyoutItemAutomationPeer
template<typename> struct MenuFlyoutItemAutomationPeer_statics {
	static MenuFlyoutItemAutomationPeer *activate(pptr<Controls::MenuFlyoutItem> owner, object_ref outer, IInspectable* *inner) { MenuFlyoutItemAutomationPeer *instance; hrcheck(get_activation_factory<MenuFlyoutItemAutomationPeer, IMenuFlyoutItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MenuFlyoutItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::MenuFlyoutItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::MenuFlyoutItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type MenuFlyoutItemAutomationPeer;
};
struct MenuFlyoutItemAutomationPeer : generate<MenuFlyoutItemAutomationPeer> {};

// AppBarButtonAutomationPeer
template<typename> struct AppBarButtonAutomationPeer_statics {
	static AppBarButtonAutomationPeer *activate(pptr<Controls::AppBarButton> owner, object_ref outer, IInspectable* *inner) { AppBarButtonAutomationPeer *instance; hrcheck(get_activation_factory<AppBarButtonAutomationPeer, IAppBarButtonAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<AppBarButtonAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::AppBarButtonAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::AppBarButtonAutomationPeer_statics<void>::activate;
	typedef typename X::root_type AppBarButtonAutomationPeer;
};
struct AppBarButtonAutomationPeer : generate<AppBarButtonAutomationPeer> {};

// ItemsControlAutomationPeer
template<typename> struct ItemsControlAutomationPeer_statics {
	static ItemsControlAutomationPeer *activate(pptr<Controls::ItemsControl> owner, object_ref outer, IInspectable* *inner) { ItemsControlAutomationPeer *instance; hrcheck(get_activation_factory<ItemsControlAutomationPeer, IItemsControlAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ItemsControlAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ItemsControlAutomationPeer;
};
struct ItemsControlAutomationPeer : generate<ItemsControlAutomationPeer> {};

// MenuFlyoutPresenterAutomationPeer
template<typename> struct MenuFlyoutPresenterAutomationPeer_statics {
	static MenuFlyoutPresenterAutomationPeer *activate(pptr<Controls::MenuFlyoutPresenter> owner, object_ref outer, IInspectable* *inner) { MenuFlyoutPresenterAutomationPeer *instance; hrcheck(get_activation_factory<MenuFlyoutPresenterAutomationPeer, IMenuFlyoutPresenterAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MenuFlyoutPresenterAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::MenuFlyoutPresenterAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::MenuFlyoutPresenterAutomationPeer_statics<void>::activate;
	typedef typename X::root_type MenuFlyoutPresenterAutomationPeer;
};
struct MenuFlyoutPresenterAutomationPeer : generate<MenuFlyoutPresenterAutomationPeer> {};

// RangeBaseAutomationPeer
template<typename> struct RangeBaseAutomationPeer_statics {
	static RangeBaseAutomationPeer *activate(pptr<Controls::Primitives::RangeBase> owner, object_ref outer, IInspectable* *inner) { RangeBaseAutomationPeer *instance; hrcheck(get_activation_factory<RangeBaseAutomationPeer, IRangeBaseAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<RangeBaseAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer_statics<void>::activate;
	typedef typename X::root_type RangeBaseAutomationPeer;
};
struct RangeBaseAutomationPeer : generate<RangeBaseAutomationPeer> {};

// ProgressBarAutomationPeer
template<typename> struct ProgressBarAutomationPeer_statics {
	static ProgressBarAutomationPeer *activate(pptr<Controls::ProgressBar> owner, object_ref outer, IInspectable* *inner) { ProgressBarAutomationPeer *instance; hrcheck(get_activation_factory<ProgressBarAutomationPeer, IProgressBarAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ProgressBarAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ProgressBarAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ProgressBarAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ProgressBarAutomationPeer;
};
struct ProgressBarAutomationPeer : generate<ProgressBarAutomationPeer> {};

// ScrollBarAutomationPeer
template<typename> struct ScrollBarAutomationPeer_statics {
	static ScrollBarAutomationPeer *activate(pptr<Controls::Primitives::ScrollBar> owner, object_ref outer, IInspectable* *inner) { ScrollBarAutomationPeer *instance; hrcheck(get_activation_factory<ScrollBarAutomationPeer, IScrollBarAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ScrollBarAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ScrollBarAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ScrollBarAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ScrollBarAutomationPeer;
};
struct ScrollBarAutomationPeer : generate<ScrollBarAutomationPeer> {};

// SliderAutomationPeer
template<typename> struct SliderAutomationPeer_statics {
	static SliderAutomationPeer *activate(pptr<Controls::Slider> owner, object_ref outer, IInspectable* *inner) { SliderAutomationPeer *instance; hrcheck(get_activation_factory<SliderAutomationPeer, ISliderAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<SliderAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer_statics<void>::activate;
	typedef typename X::root_type SliderAutomationPeer;
};
struct SliderAutomationPeer : generate<SliderAutomationPeer> {};

// ColorPickerSliderAutomationPeer
template<typename> struct ColorPickerSliderAutomationPeer_statics {
	static ColorPickerSliderAutomationPeer *activate(pptr<Controls::Primitives::ColorPickerSlider> owner, object_ref outer, IInspectable* *inner) { ColorPickerSliderAutomationPeer *instance; hrcheck(get_activation_factory<ColorPickerSliderAutomationPeer, IColorPickerSliderAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ColorPickerSliderAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ColorPickerSliderAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ColorPickerSliderAutomationPeer;
};
struct ColorPickerSliderAutomationPeer : generate<ColorPickerSliderAutomationPeer> {};

// HubSectionAutomationPeer
template<typename> struct HubSectionAutomationPeer_statics {
	static HubSectionAutomationPeer *activate(pptr<Controls::HubSection> owner, object_ref outer, IInspectable* *inner) { HubSectionAutomationPeer *instance; hrcheck(get_activation_factory<HubSectionAutomationPeer, IHubSectionAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<HubSectionAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::HubSectionAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::HubSectionAutomationPeer_statics<void>::activate;
	typedef typename X::root_type HubSectionAutomationPeer;
};
struct HubSectionAutomationPeer : generate<HubSectionAutomationPeer> {};

// ScrollViewerAutomationPeer
template<typename> struct ScrollViewerAutomationPeer_statics {
	static ScrollViewerAutomationPeer *activate(pptr<Controls::ScrollViewer> owner, object_ref outer, IInspectable* *inner) { ScrollViewerAutomationPeer *instance; hrcheck(get_activation_factory<ScrollViewerAutomationPeer, IScrollViewerAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ScrollViewerAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ScrollViewerAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ScrollViewerAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ScrollViewerAutomationPeer;
};
struct ScrollViewerAutomationPeer : generate<ScrollViewerAutomationPeer> {};

// SelectorAutomationPeer
template<typename> struct SelectorAutomationPeer_statics {
	static SelectorAutomationPeer *activate(pptr<Controls::Primitives::Selector> owner, object_ref outer, IInspectable* *inner) { SelectorAutomationPeer *instance; hrcheck(get_activation_factory<SelectorAutomationPeer, ISelectorAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<SelectorAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer_statics<void>::activate;
	typedef typename X::root_type SelectorAutomationPeer;
};
struct SelectorAutomationPeer : generate<SelectorAutomationPeer> {};

// TreeViewListAutomationPeer
template<typename> struct TreeViewListAutomationPeer_statics {
	static TreeViewListAutomationPeer *activate(pptr<Controls::TreeViewList> owner, object_ref outer, IInspectable* *inner) { TreeViewListAutomationPeer *instance; hrcheck(get_activation_factory<TreeViewListAutomationPeer, ITreeViewListAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<TreeViewListAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::TreeViewListAutomationPeer_statics<void>::activate;
	typedef typename X::root_type TreeViewListAutomationPeer;
};
struct TreeViewListAutomationPeer : generate<TreeViewListAutomationPeer> {};

// FlipViewAutomationPeer
template<typename> struct FlipViewAutomationPeer_statics {
	static FlipViewAutomationPeer *activate(pptr<Controls::FlipView> owner, object_ref outer, IInspectable* *inner) { FlipViewAutomationPeer *instance; hrcheck(get_activation_factory<FlipViewAutomationPeer, IFlipViewAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<FlipViewAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer_statics<void>::activate;
	typedef typename X::root_type FlipViewAutomationPeer;
};
struct FlipViewAutomationPeer : generate<FlipViewAutomationPeer> {};

// ListBoxAutomationPeer
template<typename> struct ListBoxAutomationPeer_statics {
	static ListBoxAutomationPeer *activate(pptr<Controls::ListBox> owner, object_ref outer, IInspectable* *inner) { ListBoxAutomationPeer *instance; hrcheck(get_activation_factory<ListBoxAutomationPeer, IListBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListBoxAutomationPeer;
};
struct ListBoxAutomationPeer : generate<ListBoxAutomationPeer> {};

// ListViewBaseAutomationPeer
template<typename> struct ListViewBaseAutomationPeer_statics {
	static ListViewBaseAutomationPeer *activate(pptr<Controls::ListViewBase> owner, object_ref outer, IInspectable* *inner) { ListViewBaseAutomationPeer *instance; hrcheck(get_activation_factory<ListViewBaseAutomationPeer, IListViewBaseAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListViewBaseAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListViewBaseAutomationPeer;
};
struct ListViewBaseAutomationPeer : generate<ListViewBaseAutomationPeer> {};

// GridViewAutomationPeer
template<typename> struct GridViewAutomationPeer_statics {
	static GridViewAutomationPeer *activate(pptr<Controls::GridView> owner, object_ref outer, IInspectable* *inner) { GridViewAutomationPeer *instance; hrcheck(get_activation_factory<GridViewAutomationPeer, IGridViewAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<GridViewAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer_statics<void>::activate;
	typedef typename X::root_type GridViewAutomationPeer;
};
struct GridViewAutomationPeer : generate<GridViewAutomationPeer> {};

// ListViewAutomationPeer
template<typename> struct ListViewAutomationPeer_statics {
	static ListViewAutomationPeer *activate(pptr<Controls::ListView> owner, object_ref outer, IInspectable* *inner) { ListViewAutomationPeer *instance; hrcheck(get_activation_factory<ListViewAutomationPeer, IListViewAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListViewAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListViewAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListViewAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListViewAutomationPeer;
};
struct ListViewAutomationPeer : generate<ListViewAutomationPeer> {};

// SemanticZoomAutomationPeer
template<typename> struct SemanticZoomAutomationPeer_statics {
	static SemanticZoomAutomationPeer *activate(pptr<Controls::SemanticZoom> owner, object_ref outer, IInspectable* *inner) { SemanticZoomAutomationPeer *instance; hrcheck(get_activation_factory<SemanticZoomAutomationPeer, ISemanticZoomAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<SemanticZoomAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::SemanticZoomAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::SemanticZoomAutomationPeer_statics<void>::activate;
	typedef typename X::root_type SemanticZoomAutomationPeer;
};
struct SemanticZoomAutomationPeer : generate<SemanticZoomAutomationPeer> {};

// ToggleSwitchAutomationPeer
template<typename> struct ToggleSwitchAutomationPeer_statics {
	static ToggleSwitchAutomationPeer *activate(pptr<Controls::ToggleSwitch> owner, object_ref outer, IInspectable* *inner) { ToggleSwitchAutomationPeer *instance; hrcheck(get_activation_factory<ToggleSwitchAutomationPeer, IToggleSwitchAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ToggleSwitchAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ToggleSwitchAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ToggleSwitchAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ToggleSwitchAutomationPeer;
};
struct ToggleSwitchAutomationPeer : generate<ToggleSwitchAutomationPeer> {};

// ToggleButtonAutomationPeer
template<typename> struct ToggleButtonAutomationPeer_statics {
	static ToggleButtonAutomationPeer *activate(pptr<Controls::Primitives::ToggleButton> owner, object_ref outer, IInspectable* *inner) { ToggleButtonAutomationPeer *instance; hrcheck(get_activation_factory<ToggleButtonAutomationPeer, IToggleButtonAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ToggleButtonAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ToggleButtonAutomationPeer;
};
struct ToggleButtonAutomationPeer : generate<ToggleButtonAutomationPeer> {};

// CheckBoxAutomationPeer
template<typename> struct CheckBoxAutomationPeer_statics {
	static CheckBoxAutomationPeer *activate(pptr<Controls::CheckBox> owner, object_ref outer, IInspectable* *inner) { CheckBoxAutomationPeer *instance; hrcheck(get_activation_factory<CheckBoxAutomationPeer, ICheckBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<CheckBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::CheckBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::CheckBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type CheckBoxAutomationPeer;
};
struct CheckBoxAutomationPeer : generate<CheckBoxAutomationPeer> {};

// RadioButtonAutomationPeer
template<typename> struct RadioButtonAutomationPeer_statics {
	static RadioButtonAutomationPeer *activate(pptr<Controls::RadioButton> owner, object_ref outer, IInspectable* *inner) { RadioButtonAutomationPeer *instance; hrcheck(get_activation_factory<RadioButtonAutomationPeer, IRadioButtonAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<RadioButtonAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::RadioButtonAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::RadioButtonAutomationPeer_statics<void>::activate;
	typedef typename X::root_type RadioButtonAutomationPeer;
};
struct RadioButtonAutomationPeer : generate<RadioButtonAutomationPeer> {};

// ToggleMenuFlyoutItemAutomationPeer
template<typename> struct ToggleMenuFlyoutItemAutomationPeer_statics {
	static ToggleMenuFlyoutItemAutomationPeer *activate(pptr<Controls::ToggleMenuFlyoutItem> owner, object_ref outer, IInspectable* *inner) { ToggleMenuFlyoutItemAutomationPeer *instance; hrcheck(get_activation_factory<ToggleMenuFlyoutItemAutomationPeer, IToggleMenuFlyoutItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ToggleMenuFlyoutItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ToggleMenuFlyoutItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ToggleMenuFlyoutItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ToggleMenuFlyoutItemAutomationPeer;
};
struct ToggleMenuFlyoutItemAutomationPeer : generate<ToggleMenuFlyoutItemAutomationPeer> {};

// AppBarToggleButtonAutomationPeer
template<typename> struct AppBarToggleButtonAutomationPeer_statics {
	static AppBarToggleButtonAutomationPeer *activate(pptr<Controls::AppBarToggleButton> owner, object_ref outer, IInspectable* *inner) { AppBarToggleButtonAutomationPeer *instance; hrcheck(get_activation_factory<AppBarToggleButtonAutomationPeer, IAppBarToggleButtonAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<AppBarToggleButtonAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::AppBarToggleButtonAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::AppBarToggleButtonAutomationPeer_statics<void>::activate;
	typedef typename X::root_type AppBarToggleButtonAutomationPeer;
};
struct AppBarToggleButtonAutomationPeer : generate<AppBarToggleButtonAutomationPeer> {};

// CalendarDatePickerAutomationPeer
template<typename> struct CalendarDatePickerAutomationPeer_statics {
	static CalendarDatePickerAutomationPeer *activate(pptr<Controls::CalendarDatePicker> owner, object_ref outer, IInspectable* *inner) { CalendarDatePickerAutomationPeer *instance; hrcheck(get_activation_factory<CalendarDatePickerAutomationPeer, ICalendarDatePickerAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<CalendarDatePickerAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::CalendarDatePickerAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::CalendarDatePickerAutomationPeer_statics<void>::activate;
	typedef typename X::root_type CalendarDatePickerAutomationPeer;
};
struct CalendarDatePickerAutomationPeer : generate<CalendarDatePickerAutomationPeer> {};

// ItemAutomationPeer
template<typename> struct ItemAutomationPeer_statics {
	static ItemAutomationPeer *activate(object_ref item, pptr<Peers::ItemsControlAutomationPeer> parent, object_ref outer, IInspectable* *inner) { ItemAutomationPeer *instance; hrcheck(get_activation_factory<ItemAutomationPeer, IItemAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ItemAutomationPeer;
};
struct ItemAutomationPeer : generate<ItemAutomationPeer> {};

// SelectorItemAutomationPeer
template<typename> struct SelectorItemAutomationPeer_statics {
	static SelectorItemAutomationPeer *activate(object_ref item, pptr<SelectorAutomationPeer> parent, object_ref outer, IInspectable* *inner) { SelectorItemAutomationPeer *instance; hrcheck(get_activation_factory<SelectorItemAutomationPeer, ISelectorItemAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<SelectorItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type SelectorItemAutomationPeer;
};
struct SelectorItemAutomationPeer : generate<SelectorItemAutomationPeer> {};

// ComboBoxItemDataAutomationPeer
template<typename> struct ComboBoxItemDataAutomationPeer_statics {
	static ComboBoxItemDataAutomationPeer *activate(object_ref item, pptr<ComboBoxAutomationPeer> parent, object_ref outer, IInspectable* *inner) { ComboBoxItemDataAutomationPeer *instance; hrcheck(get_activation_factory<ComboBoxItemDataAutomationPeer, IComboBoxItemDataAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ComboBoxItemDataAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ComboBoxItemDataAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ComboBoxItemDataAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ComboBoxItemDataAutomationPeer;
};
struct ComboBoxItemDataAutomationPeer : generate<ComboBoxItemDataAutomationPeer> {};

// FlipViewItemDataAutomationPeer
template<typename> struct FlipViewItemDataAutomationPeer_statics {
	static FlipViewItemDataAutomationPeer *activate(object_ref item, pptr<FlipViewAutomationPeer> parent, object_ref outer, IInspectable* *inner) { FlipViewItemDataAutomationPeer *instance; hrcheck(get_activation_factory<FlipViewItemDataAutomationPeer, IFlipViewItemDataAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<FlipViewItemDataAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::FlipViewItemDataAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::FlipViewItemDataAutomationPeer_statics<void>::activate;
	typedef typename X::root_type FlipViewItemDataAutomationPeer;
};
struct FlipViewItemDataAutomationPeer : generate<FlipViewItemDataAutomationPeer> {};

// ListBoxItemDataAutomationPeer
template<typename> struct ListBoxItemDataAutomationPeer_statics {
	static ListBoxItemDataAutomationPeer *activate(object_ref item, pptr<ListBoxAutomationPeer> parent, object_ref outer, IInspectable* *inner) { ListBoxItemDataAutomationPeer *instance; hrcheck(get_activation_factory<ListBoxItemDataAutomationPeer, IListBoxItemDataAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListBoxItemDataAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListBoxItemDataAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListBoxItemDataAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListBoxItemDataAutomationPeer;
};
struct ListBoxItemDataAutomationPeer : generate<ListBoxItemDataAutomationPeer> {};

// GridViewItemDataAutomationPeer
template<typename> struct GridViewItemDataAutomationPeer_statics {
	static GridViewItemDataAutomationPeer *activate(object_ref item, pptr<GridViewAutomationPeer> parent, object_ref outer, IInspectable* *inner) { GridViewItemDataAutomationPeer *instance; hrcheck(get_activation_factory<GridViewItemDataAutomationPeer, IGridViewItemDataAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<GridViewItemDataAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::GridViewItemDataAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::GridViewItemDataAutomationPeer_statics<void>::activate;
	typedef typename X::root_type GridViewItemDataAutomationPeer;
};
struct GridViewItemDataAutomationPeer : generate<GridViewItemDataAutomationPeer> {};

// ListViewItemDataAutomationPeer
template<typename> struct ListViewItemDataAutomationPeer_statics {
	static ListViewItemDataAutomationPeer *activate(object_ref item, pptr<ListViewBaseAutomationPeer> parent, object_ref outer, IInspectable* *inner) { ListViewItemDataAutomationPeer *instance; hrcheck(get_activation_factory<ListViewItemDataAutomationPeer, IListViewItemDataAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ListViewItemDataAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ListViewItemDataAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ListViewItemDataAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ListViewItemDataAutomationPeer;
};
struct ListViewItemDataAutomationPeer : generate<ListViewItemDataAutomationPeer> {};

// ComboBoxAutomationPeer
template<typename> struct ComboBoxAutomationPeer_statics {
	static ComboBoxAutomationPeer *activate(pptr<Controls::ComboBox> owner, object_ref outer, IInspectable* *inner) { ComboBoxAutomationPeer *instance; hrcheck(get_activation_factory<ComboBoxAutomationPeer, IComboBoxAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<ComboBoxAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer_statics<void>::activate;
	typedef typename X::root_type ComboBoxAutomationPeer;
};
struct ComboBoxAutomationPeer : generate<ComboBoxAutomationPeer> {};

// AppBarAutomationPeer
template<typename> struct AppBarAutomationPeer_statics {
	static AppBarAutomationPeer *activate(pptr<Controls::AppBar> owner, object_ref outer, IInspectable* *inner) { AppBarAutomationPeer *instance; hrcheck(get_activation_factory<AppBarAutomationPeer, IAppBarAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<AppBarAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::AppBarAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::AppBarAutomationPeer_statics<void>::activate;
	typedef typename X::root_type AppBarAutomationPeer;
};
struct AppBarAutomationPeer : generate<AppBarAutomationPeer> {};

// IInkToolbarAutomationPeer
struct IInkToolbarAutomationPeer : IInspectable, generate<IInkToolbarAutomationPeer> {};

// InkToolbarAutomationPeer
template<typename X> struct statics<InkToolbarAutomationPeer, X> : X {
	typedef typename X::root_type InkToolbarAutomationPeer;
};
struct InkToolbarAutomationPeer : generate<InkToolbarAutomationPeer> {};

// IMapControlAutomationPeer
struct IMapControlAutomationPeer : IInspectable, generate<IMapControlAutomationPeer> {};

// MapControlAutomationPeer
template<typename X> struct statics<MapControlAutomationPeer, X> : X {
	typedef typename X::root_type MapControlAutomationPeer;
};
struct MapControlAutomationPeer : generate<MapControlAutomationPeer> {};

// ILoopingSelectorItemDataAutomationPeer
struct ILoopingSelectorItemDataAutomationPeer : IInspectable, generate<ILoopingSelectorItemDataAutomationPeer> {};

// LoopingSelectorItemDataAutomationPeer
template<typename X> struct statics<LoopingSelectorItemDataAutomationPeer, X> : X {
	typedef typename X::root_type LoopingSelectorItemDataAutomationPeer;
};
struct LoopingSelectorItemDataAutomationPeer : generate<LoopingSelectorItemDataAutomationPeer> {};

// IDatePickerFlyoutPresenterAutomationPeer
struct IDatePickerFlyoutPresenterAutomationPeer : IInspectable, generate<IDatePickerFlyoutPresenterAutomationPeer> {};

// DatePickerFlyoutPresenterAutomationPeer
template<typename X> struct statics<DatePickerFlyoutPresenterAutomationPeer, X> : X {
	typedef typename X::root_type DatePickerFlyoutPresenterAutomationPeer;
};
struct DatePickerFlyoutPresenterAutomationPeer : generate<DatePickerFlyoutPresenterAutomationPeer> {};

// IListPickerFlyoutPresenterAutomationPeer
struct IListPickerFlyoutPresenterAutomationPeer : IInspectable, generate<IListPickerFlyoutPresenterAutomationPeer> {};

// ListPickerFlyoutPresenterAutomationPeer
template<typename X> struct statics<ListPickerFlyoutPresenterAutomationPeer, X> : X {
	typedef typename X::root_type ListPickerFlyoutPresenterAutomationPeer;
};
struct ListPickerFlyoutPresenterAutomationPeer : generate<ListPickerFlyoutPresenterAutomationPeer> {};

// ILoopingSelectorAutomationPeer
struct ILoopingSelectorAutomationPeer : IInspectable, generate<ILoopingSelectorAutomationPeer> {};

// LoopingSelectorAutomationPeer
template<typename X> struct statics<LoopingSelectorAutomationPeer, X> : X {
	typedef typename X::root_type LoopingSelectorAutomationPeer;
};
struct LoopingSelectorAutomationPeer : generate<LoopingSelectorAutomationPeer> {};

// ILoopingSelectorItemAutomationPeer
struct ILoopingSelectorItemAutomationPeer : IInspectable, generate<ILoopingSelectorItemAutomationPeer> {};

// LoopingSelectorItemAutomationPeer
template<typename X> struct statics<LoopingSelectorItemAutomationPeer, X> : X {
	typedef typename X::root_type LoopingSelectorItemAutomationPeer;
};
struct LoopingSelectorItemAutomationPeer : generate<LoopingSelectorItemAutomationPeer> {};

// IPickerFlyoutPresenterAutomationPeer
struct IPickerFlyoutPresenterAutomationPeer : IInspectable, generate<IPickerFlyoutPresenterAutomationPeer> {};

// PickerFlyoutPresenterAutomationPeer
template<typename X> struct statics<PickerFlyoutPresenterAutomationPeer, X> : X {
	typedef typename X::root_type PickerFlyoutPresenterAutomationPeer;
};
struct PickerFlyoutPresenterAutomationPeer : generate<PickerFlyoutPresenterAutomationPeer> {};

// IPivotItemAutomationPeer
struct IPivotItemAutomationPeer : IInspectable, generate<IPivotItemAutomationPeer> {};

// IPivotItemAutomationPeerFactory
struct IPivotItemAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::PivotItem* owner, PivotItemAutomationPeer* *instance);
};

// PivotItemAutomationPeer
template<typename> struct PivotItemAutomationPeer_statics {
	static PivotItemAutomationPeer *activate(pptr<Controls::PivotItem> owner) { PivotItemAutomationPeer *instance; hrcheck(get_activation_factory<PivotItemAutomationPeer, IPivotItemAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, &instance)); return instance; }
};

template<typename X> struct statics<PivotItemAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::PivotItemAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::PivotItemAutomationPeer_statics<void>::activate;
	typedef typename X::root_type PivotItemAutomationPeer;
};
struct PivotItemAutomationPeer : generate<PivotItemAutomationPeer> {};

// IPivotItemDataAutomationPeer
struct IPivotItemDataAutomationPeer : IInspectable, generate<IPivotItemDataAutomationPeer> {};

// IPivotItemDataAutomationPeerFactory
struct IPivotItemDataAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithParentAndItem(IInspectable* item, PivotAutomationPeer* parent, PivotItemDataAutomationPeer* *instance);
};

// PivotItemDataAutomationPeer
template<typename> struct PivotItemDataAutomationPeer_statics {
	static PivotItemDataAutomationPeer *activate(object_ref item, pptr<PivotAutomationPeer> parent) { PivotItemDataAutomationPeer *instance; hrcheck(get_activation_factory<PivotItemDataAutomationPeer, IPivotItemDataAutomationPeerFactory>()->_CreateInstanceWithParentAndItem(item, parent, &instance)); return instance; }
};

template<typename X> struct statics<PivotItemDataAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::PivotItemDataAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::PivotItemDataAutomationPeer_statics<void>::activate;
	typedef typename X::root_type PivotItemDataAutomationPeer;
};
struct PivotItemDataAutomationPeer : generate<PivotItemDataAutomationPeer> {};

// ITimePickerFlyoutPresenterAutomationPeer
struct ITimePickerFlyoutPresenterAutomationPeer : IInspectable, generate<ITimePickerFlyoutPresenterAutomationPeer> {};

// TimePickerFlyoutPresenterAutomationPeer
template<typename X> struct statics<TimePickerFlyoutPresenterAutomationPeer, X> : X {
	typedef typename X::root_type TimePickerFlyoutPresenterAutomationPeer;
};
struct TimePickerFlyoutPresenterAutomationPeer : generate<TimePickerFlyoutPresenterAutomationPeer> {};

// IPivotAutomationPeer
struct IPivotAutomationPeer : IInspectable, generate<IPivotAutomationPeer> {};

// IPivotAutomationPeerFactory
struct IPivotAutomationPeerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithOwner(Controls::Pivot* owner, PivotAutomationPeer* *instance);
};

// PivotAutomationPeer
template<typename> struct PivotAutomationPeer_statics {
	static PivotAutomationPeer *activate(pptr<Controls::Pivot> owner) { PivotAutomationPeer *instance; hrcheck(get_activation_factory<PivotAutomationPeer, IPivotAutomationPeerFactory>()->_CreateInstanceWithOwner(owner, &instance)); return instance; }
};

template<typename X> struct statics<PivotAutomationPeer, X> : X, Windows::UI::Xaml::Automation::Peers::PivotAutomationPeer_statics<void> {
	using Windows::UI::Xaml::Automation::Peers::PivotAutomationPeer_statics<void>::activate;
	typedef typename X::root_type PivotAutomationPeer;
};
struct PivotAutomationPeer : generate<PivotAutomationPeer> {};
}}}}}
} // namespace iso_winrt
