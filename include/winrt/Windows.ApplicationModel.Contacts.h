#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Contacts

#include "Windows.ApplicationModel.Contacts.0.h"
#include "Windows.Data.Text.0.h"
#include "Windows.UI.ViewManagement.0.h"
#include "Windows.UI.Popups.0.h"
#include "Windows.UI.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
struct IPropertySet;
template<typename T> struct IVectorView;
template<typename T> struct IVector;
struct ValueSet;
template<typename T> struct IIterable;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
struct IRandomAccessStreamWithContentType;
struct RandomAccessStreamReference;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::ApplicationModel::Contacts::ContactSelectionMode> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactChangeType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactQueryDesiredFields> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactQuerySearchFields> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactQuerySearchScope> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactStoreAccessType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactAnnotationStoreAccessType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactMatchReasonKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactBatchStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactAnnotationOperations> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactNameOrder> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactListSyncStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactCardHeaderKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactCardTabKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactCardOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactCardOptions2> : interface_type<Windows::ApplicationModel::Contacts::IContactCardOptions> {};
template<> struct def<Windows::ApplicationModel::Contacts::IFullContactCardOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactManagerStatics2> : interface_type<Windows::ApplicationModel::Contacts::IContactManagerStatics> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactStore3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactStore2> : interface_type<Windows::ApplicationModel::Contacts::IContactStore> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactStore> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactStore, Windows::ApplicationModel::Contacts::IContactStore2, Windows::ApplicationModel::Contacts::IContactStore3> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactManagerStatics3> : interface_type<Windows::ApplicationModel::Contacts::IContactManagerStatics2> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactAnnotationStore2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactAnnotationStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactAnnotationStore> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactAnnotationStore, Windows::ApplicationModel::Contacts::IContactAnnotationStore2> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactCardOptions> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactCardOptions, Windows::ApplicationModel::Contacts::IContactCardOptions2> {};
template<> struct def<Windows::ApplicationModel::Contacts::FullContactCardOptions> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IFullContactCardOptions> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactManagerStatics4> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactManagerForUser2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactManagerForUser> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactManagerForUser> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactManagerForUser, Windows::ApplicationModel::Contacts::IContactManagerForUser2> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactManagerStatics5> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IAggregateContactManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IAggregateContactManager2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactAnnotation2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactAnnotation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactAnnotation> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactAnnotation, Windows::ApplicationModel::Contacts::IContactAnnotation2> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactAnnotationList> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactAnnotationList> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactAnnotationList> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactStoreNotificationTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactChangeTracker2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactChangeTracker> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactChangeTracker> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactChangeTracker, Windows::ApplicationModel::Contacts::IContactChangeTracker2> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Contacts::AggregateContactManager> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IAggregateContactManager, Windows::ApplicationModel::Contacts::IAggregateContactManager2> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactList3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactList2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactList> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactList> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactList, Windows::ApplicationModel::Contacts::IContactList2, Windows::ApplicationModel::Contacts::IContactList3> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactReader> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactReader> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactQueryOptionsFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactQueryOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactQueryOptions> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactQueryOptions>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactListSyncManager2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactListSyncManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactListSyncManager> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactListSyncManager, Windows::ApplicationModel::Contacts::IContactListSyncManager2> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactListSyncConstraints> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactListSyncConstraints> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactListSyncConstraints> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactListLimitedWriteOperations> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactListLimitedWriteOperations> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactListLimitedWriteOperations> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactChange> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactChangedDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactChangedDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactChangedDeferral> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactChangeReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactChange> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactChange> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactChangeReader> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactChangeReader> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactBatch> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactBatch> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactBatch> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactMatchReason> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactMatchReason> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactMatchReason> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactQueryTextSearch> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactQueryTextSearch> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactQueryTextSearch> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactGroup> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactStoreNotificationTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactStoreNotificationTriggerDetails> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactLaunchActionVerbs> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactGroup> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactGroup> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPicker> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactFieldType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPicker2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPicker3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPickerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactPicker> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactPicker, Windows::ApplicationModel::Contacts::IContactPicker2, Windows::ApplicationModel::Contacts::IContactPicker3> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactEmailKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactPhoneKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactAddressKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactDateKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactRelationship> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactSignificantOther> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactSignificantOther2> : interface_type<Windows::ApplicationModel::Contacts::IContactSignificantOther> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactWebsite> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactWebsite2> : interface_type<Windows::ApplicationModel::Contacts::IContactWebsite> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactEmail> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPhone> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactAddress> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactDate> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactJobInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContact> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactFieldCategory> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactField> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactName> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContact2> : interface_type<Windows::ApplicationModel::Contacts::IContact> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactPhone> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactPhone> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactEmail> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactEmail> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactAddress> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactAddress> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactDate> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactDate> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactJobInfo> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactJobInfo> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactSignificantOther> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactSignificantOther, Windows::ApplicationModel::Contacts::IContactSignificantOther2> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactWebsite> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactWebsite, Windows::ApplicationModel::Contacts::IContactWebsite2> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContact3> : interface_type<Windows::ApplicationModel::Contacts::IContact2> {};
template<> struct def<Windows::ApplicationModel::Contacts::Contact> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContact, Windows::ApplicationModel::Contacts::IContact3, Windows::ApplicationModel::Contacts::IContactName> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactFieldFactory> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactField> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactField>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactLocationField> : interface_type<Windows::ApplicationModel::Contacts::IContactField> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactLocationFieldFactory> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactLocationField> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactLocationField>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactInstantMessageField> : interface_type<Windows::ApplicationModel::Contacts::IContactField> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactInstantMessageField> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactInstantMessageField>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Contacts::IKnownContactFieldStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::KnownContactField> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactInformation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactInformation> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactInformation> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactFieldFactory> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactFieldFactory, Windows::ApplicationModel::Contacts::IContactLocationFieldFactory, Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory> {};
template<> struct def<Windows::ApplicationModel::Contacts::PinnedContactSurface> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::IPinnedContactIdsQueryResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::PinnedContactIdsQueryResult> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IPinnedContactIdsQueryResult> {};
template<> struct def<Windows::ApplicationModel::Contacts::IPinnedContactManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::IPinnedContactManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::PinnedContactManager> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IPinnedContactManager> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPanelLaunchFullAppRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactPanelLaunchFullAppRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactPanelLaunchFullAppRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPanelClosingEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactPanelClosingEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactPanelClosingEventArgs> {};
template<> struct def<Windows::ApplicationModel::Contacts::IContactPanel> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::ContactPanel> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::IContactPanel> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Contacts::IContactCardOptions> { define_guid(0x8C0A4F7E, 0x6AB6, 0x4F3F, 0xBE, 0x72, 0x81, 0x72, 0x36, 0xEE, 0xEA, 0x5B);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactCardOptions2> { define_guid(0x8F271BA0, 0xD74B, 0x4CC6, 0x9F, 0x53, 0x1B, 0xE, 0xB5, 0xD1, 0x27, 0x3C);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IFullContactCardOptions> { define_guid(0x8744436C, 0x5CF9, 0x4683, 0xBD, 0xCA, 0xA1, 0xFD, 0xEB, 0xF8, 0xDB, 0xCE);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader> { define_guid(0xB60AF902, 0x1546, 0x434D, 0x86, 0x9C, 0x6E, 0x35, 0x20, 0x76, 0xE, 0xF3);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactManagerStatics> { define_guid(0x81F21AC0, 0xF661, 0x4708, 0xBA, 0x4F, 0xD3, 0x86, 0xBD, 0xD, 0x62, 0x2E);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactManagerStatics2> { define_guid(0xA178E620, 0x47D8, 0x48CC, 0x96, 0x3C, 0x95, 0x92, 0xB6, 0xE5, 0x10, 0xC6);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactStore3> { define_guid(0xCB882C6C, 0x4E, 0x4050, 0x87, 0xF0, 0x84, 0x4, 0x7, 0xEE, 0x68, 0x18);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactStore> { define_guid(0x2C220B10, 0x3A6C, 0x4293, 0xB9, 0xBC, 0xFE, 0x98, 0x7F, 0x6E, 0xD, 0x52);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactStore2> { define_guid(0x18CE1C22, 0xEBD5, 0x4BFB, 0xB6, 0x90, 0x5F, 0x4F, 0x27, 0xC4, 0xF0, 0xE8);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactManagerStatics3> { define_guid(0xC4CC3D42, 0x7586, 0x492A, 0x93, 0xB, 0x7B, 0xC1, 0x38, 0xFC, 0x21, 0x39);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactAnnotationStore2> { define_guid(0x7EDE23FD, 0x61E7, 0x4967, 0x8E, 0xC5, 0xBD, 0xF2, 0x80, 0xA2, 0x40, 0x63);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactAnnotationStore> { define_guid(0x23ACF4AA, 0x7A77, 0x457D, 0x82, 0x3, 0x98, 0x7F, 0x4B, 0x31, 0xAF, 0x9);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactManagerStatics4> { define_guid(0x24982272, 0x347B, 0x46DC, 0x8D, 0x95, 0x51, 0xBD, 0x41, 0xE1, 0x5A, 0xAF);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactManagerForUser2> { define_guid(0x4D469C2E, 0x3B75, 0x4A73, 0xBB, 0x30, 0x73, 0x66, 0x45, 0x47, 0x22, 0x56);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactManagerForUser> { define_guid(0xB74BBA57, 0x1076, 0x4BEF, 0xAE, 0xF3, 0x54, 0x68, 0x6D, 0x18, 0x38, 0x7D);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactManagerStatics5> { define_guid(0xF7591A87, 0xACB7, 0x4FAD, 0x90, 0xF2, 0xA8, 0xAB, 0x64, 0xCD, 0xBB, 0xA4);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IAggregateContactManager> { define_guid(0x379D5DD, 0xDB5A, 0x4FD3, 0xB5, 0x4E, 0x4D, 0xF1, 0x79, 0x17, 0xA2, 0x12);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IAggregateContactManager2> { define_guid(0x5E8CC2D8, 0xA9CD, 0x4430, 0x9C, 0x4B, 0x1, 0x34, 0x8D, 0xB2, 0xCA, 0x50);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactAnnotation2> { define_guid(0xB691ECF3, 0x4AB7, 0x4A1F, 0x99, 0x41, 0xC, 0x9C, 0xF3, 0x17, 0x1B, 0x75);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactAnnotation> { define_guid(0x821FC2EF, 0x7D41, 0x44A2, 0x84, 0xC3, 0x60, 0xA2, 0x81, 0xDD, 0x7B, 0x86);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactAnnotationList> { define_guid(0x92A486AA, 0x5C88, 0x45B9, 0xAA, 0xD0, 0x46, 0x18, 0x88, 0xE6, 0x8D, 0x8A);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactStoreNotificationTriggerDetails> { define_guid(0xABB298D6, 0x878A, 0x4F8B, 0xA9, 0xCE, 0x46, 0xBB, 0x7D, 0x1C, 0x84, 0xCE);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactChangeTracker2> { define_guid(0x7F8AD0FC, 0x9321, 0x4D18, 0x9C, 0x9, 0xD7, 0x8, 0xC6, 0x3F, 0xCD, 0x31);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactChangeTracker> { define_guid(0x6E992952, 0x309B, 0x404D, 0x97, 0x12, 0xB3, 0x7B, 0xD3, 0x2, 0x78, 0xAA);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactChangedEventArgs> { define_guid(0x525E7FD1, 0x73F3, 0x4B7D, 0xA9, 0x18, 0x58, 0xB, 0xE4, 0x36, 0x61, 0x21);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactList3> { define_guid(0x1578EE57, 0x26FC, 0x41E8, 0xA8, 0x50, 0x5A, 0xA3, 0x25, 0x14, 0xAC, 0xA9);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactList2> { define_guid(0xCB3943B4, 0x4550, 0x4DCB, 0x92, 0x29, 0x40, 0xFF, 0x91, 0xFB, 0x2, 0x3);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactList> { define_guid(0x16DDEC75, 0x392C, 0x4845, 0x9D, 0xFB, 0x51, 0xA3, 0xE7, 0xEF, 0x3E, 0x42);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactReader> { define_guid(0xD397E42E, 0x1488, 0x42F2, 0xBF, 0x64, 0x25, 0x3F, 0x48, 0x84, 0xBF, 0xED);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactQueryOptionsFactory> { define_guid(0x543FBA47, 0x8CE7, 0x46CB, 0x9D, 0xAC, 0x9A, 0xA4, 0x2A, 0x1B, 0xC8, 0xE2);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactQueryOptions> { define_guid(0x4408CC9E, 0x7D7C, 0x42F0, 0x8A, 0xC7, 0xF5, 0x7, 0x33, 0xEC, 0xDB, 0xC1);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactListSyncManager2> { define_guid(0xA9591247, 0xBB55, 0x4E23, 0x81, 0x28, 0x37, 0x1, 0x34, 0xA8, 0x5D, 0xD);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactListSyncManager> { define_guid(0x146E83BE, 0x7925, 0x4ACC, 0x9D, 0xE5, 0x21, 0xDD, 0xD0, 0x6F, 0x86, 0x74);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactListSyncConstraints> { define_guid(0xB2B0BF01, 0x3062, 0x4E2E, 0x96, 0x9D, 0x1, 0x8D, 0x19, 0x87, 0xF3, 0x14);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactListLimitedWriteOperations> { define_guid(0xE19813DA, 0x4A0B, 0x44B8, 0x9A, 0x1F, 0xA0, 0xF3, 0xD2, 0x18, 0x17, 0x5F);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactChange> { define_guid(0x951D4B10, 0x6A59, 0x4720, 0xA4, 0xE1, 0x36, 0x3D, 0x98, 0xC1, 0x35, 0xD5);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactChangedDeferral> { define_guid(0xC5143AE8, 0x1B03, 0x46F8, 0xB6, 0x94, 0xA5, 0x23, 0xE8, 0x3C, 0xFC, 0xB6);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactChangeReader> { define_guid(0x217319FA, 0x2D0C, 0x42E0, 0xA9, 0xDA, 0x3E, 0xCD, 0x56, 0xA7, 0x8A, 0x47);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactBatch> { define_guid(0x35D1972D, 0xBFCE, 0x46BB, 0x93, 0xF8, 0xA5, 0xB0, 0x6E, 0xC5, 0xE2, 0x1);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactMatchReason> { define_guid(0xBC922504, 0xE7D8, 0x413E, 0x95, 0xF4, 0xB7, 0x5C, 0x54, 0xC7, 0x40, 0x77);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactQueryTextSearch> { define_guid(0xF7E3F9CB, 0xA957, 0x439B, 0xA0, 0xB7, 0x1C, 0x2, 0xA1, 0x96, 0x3F, 0xF0);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics> { define_guid(0xFB1232D6, 0xEE73, 0x46E7, 0x87, 0x61, 0x11, 0xCD, 0x1, 0x57, 0x72, 0x8F);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactGroup> { define_guid(0x59BDEB01, 0x9E9A, 0x475D, 0xBF, 0xE5, 0xA3, 0x7B, 0x80, 0x6D, 0x85, 0x2C);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPicker> { define_guid(0xE09FD91, 0x42F8, 0x4055, 0x90, 0xA0, 0x89, 0x6F, 0x96, 0x73, 0x89, 0x36);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPicker2> { define_guid(0xB35011CF, 0x5CEF, 0x4D24, 0xAA, 0xC, 0x34, 0xC, 0x52, 0x8, 0x72, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPicker3> { define_guid(0xE723315, 0xB243, 0x4BED, 0x85, 0x16, 0x22, 0xB1, 0xA7, 0xAC, 0xA, 0xCE);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPickerStatics> { define_guid(0x7488C029, 0x6A53, 0x4258, 0xA3, 0xE9, 0x62, 0xDF, 0xF6, 0x78, 0x4B, 0x6C);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount> { define_guid(0xF6F83553, 0xAA27, 0x4731, 0x8E, 0x4A, 0x3D, 0xEC, 0x5C, 0xE9, 0xEE, 0xC9);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactSignificantOther> { define_guid(0x8873B5AB, 0xC5FB, 0x46D8, 0x93, 0xFE, 0xDA, 0x3F, 0xF1, 0x93, 0x40, 0x54);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactSignificantOther2> { define_guid(0x8D7BD474, 0x3F03, 0x45F8, 0xBA, 0xF, 0xC4, 0xED, 0x37, 0xD6, 0x42, 0x19);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactWebsite> { define_guid(0x9F130176, 0xDC1B, 0x4055, 0xAD, 0x66, 0x65, 0x2F, 0x39, 0xD9, 0x90, 0xE8);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactWebsite2> { define_guid(0xF87EE91E, 0x5647, 0x4068, 0xBB, 0x5E, 0x4B, 0x6F, 0x43, 0x7C, 0xE3, 0x8);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactEmail> { define_guid(0x90A219A9, 0xE3D3, 0x4D63, 0x99, 0x3B, 0x5, 0xB9, 0xA5, 0x39, 0x3A, 0xBF);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPhone> { define_guid(0x467DAB65, 0x2712, 0x4F52, 0xB7, 0x83, 0x9E, 0xA8, 0x11, 0x1C, 0x63, 0xCD);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactAddress> { define_guid(0x9739D39A, 0x42CE, 0x4872, 0x8D, 0x70, 0x30, 0x63, 0xAA, 0x58, 0x4B, 0x70);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactDate> { define_guid(0xFE98AE66, 0xB205, 0x4934, 0x91, 0x74, 0xF, 0xF2, 0xB0, 0x56, 0x57, 0x7);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactJobInfo> { define_guid(0x6D117B4C, 0xCE50, 0x4B43, 0x9E, 0x69, 0xB1, 0x82, 0x58, 0xEA, 0x53, 0x15);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContact> { define_guid(0xEC0072F3, 0x2118, 0x4049, 0x9E, 0xBC, 0x17, 0xF0, 0xAB, 0x69, 0x2B, 0x64);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactField> { define_guid(0xB176486A, 0xD293, 0x492C, 0xA0, 0x58, 0xDB, 0x57, 0x5B, 0x3E, 0x3C, 0xF);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactName> { define_guid(0xF404E97B, 0x9034, 0x453C, 0x8E, 0xBF, 0x14, 0xA, 0x38, 0xC8, 0x6F, 0x1D);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContact2> { define_guid(0xF312F365, 0xBB77, 0x4C94, 0x80, 0x2D, 0x83, 0x28, 0xCE, 0xE4, 0xC, 0x8);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContact3> { define_guid(0x48201E67, 0xE08E, 0x42A4, 0xB5, 0x61, 0x41, 0xD0, 0x8C, 0xA9, 0x57, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactFieldFactory> { define_guid(0x85E2913F, 0xE4A, 0x4A3E, 0x89, 0x94, 0x40, 0x6A, 0xE7, 0xED, 0x64, 0x6E);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactLocationField> { define_guid(0x9EC00F82, 0xAB6E, 0x4B36, 0x89, 0xE3, 0xB2, 0x3B, 0xC0, 0xA1, 0xDA, 0xCC);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactLocationFieldFactory> { define_guid(0xF79932D7, 0x2FDF, 0x43FE, 0x8F, 0x18, 0x41, 0x89, 0x73, 0x90, 0xBC, 0xFE);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactInstantMessageField> { define_guid(0xCCE33B37, 0xD85, 0x41FA, 0xB4, 0x3D, 0xDA, 0x59, 0x9C, 0x3E, 0xB0, 0x9);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory> { define_guid(0xBA0B6794, 0x91A3, 0x4BB2, 0xB1, 0xB9, 0x69, 0xA5, 0xDF, 0xF0, 0xBA, 0x9);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IKnownContactFieldStatics> { define_guid(0x2E0E1B12, 0xD627, 0x4FCA, 0xBA, 0xD4, 0x1F, 0xAF, 0x16, 0x8C, 0x7D, 0x14);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactInformation> { define_guid(0x275EB6D4, 0x6A2E, 0x4278, 0xA9, 0x14, 0xE4, 0x60, 0xD5, 0xF0, 0x88, 0xF6);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IPinnedContactIdsQueryResult> { define_guid(0x7D9B2552, 0x1579, 0x4DDC, 0x87, 0x1F, 0xA3, 0xA, 0x3A, 0xEA, 0x9B, 0xA1);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IPinnedContactManagerStatics> { define_guid(0xF65CCC7E, 0xFDF9, 0x486A, 0xAC, 0xE9, 0xBC, 0x31, 0x1D, 0xA, 0xE7, 0xF0);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IPinnedContactManager> { define_guid(0xFCBC740C, 0xE1D6, 0x45C3, 0xB8, 0xB6, 0xA3, 0x56, 0x4, 0xE1, 0x67, 0xA0);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPanelLaunchFullAppRequestedEventArgs> { define_guid(0x88D61C0E, 0x23B4, 0x4BE8, 0x8A, 0xFC, 0x7, 0x2C, 0x25, 0xA4, 0x19, 0xD);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPanelClosingEventArgs> { define_guid(0x222174D3, 0xCF4B, 0x46D7, 0xB7, 0x39, 0x6E, 0xDC, 0x16, 0x11, 0xB, 0xFB);};
template<> struct uuid<Windows::ApplicationModel::Contacts::IContactPanel> { define_guid(0x41BF1265, 0xD2EE, 0x4B97, 0xA8, 0xA, 0x7D, 0x8D, 0x64, 0xCC, 0xA6, 0xF5);};

// types

namespace Windows { namespace ApplicationModel { namespace Contacts {

// IContactCardOptions
struct IContactCardOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_HeaderKind(ContactCardHeaderKind *value);
	virtual STDMETHODIMP _put_HeaderKind(ContactCardHeaderKind value);
	virtual STDMETHODIMP _get_InitialTabKind(ContactCardTabKind *value);
	virtual STDMETHODIMP _put_InitialTabKind(ContactCardTabKind value);
};
template<typename X> struct IContactCardOptions_adaptor : X {
	union {
		struct : property {
			ContactCardHeaderKind get() { ContactCardHeaderKind value; hrcheck(enc(&IContactCardOptions_adaptor::HeaderKind)->_get_HeaderKind(&value)); return value; }
			ContactCardHeaderKind operator()() { return get(); }
			operator ContactCardHeaderKind () { return get(); }
			void put(ContactCardHeaderKind value) { hrcheck(enc(&IContactCardOptions_adaptor::HeaderKind)->_put_HeaderKind(value)); }
			void operator=(ContactCardHeaderKind value) { put(value); }
			void operator()(ContactCardHeaderKind value) { put(value); }
		} HeaderKind;
		struct : property {
			ContactCardTabKind get() { ContactCardTabKind value; hrcheck(enc(&IContactCardOptions_adaptor::InitialTabKind)->_get_InitialTabKind(&value)); return value; }
			ContactCardTabKind operator()() { return get(); }
			operator ContactCardTabKind () { return get(); }
			void put(ContactCardTabKind value) { hrcheck(enc(&IContactCardOptions_adaptor::InitialTabKind)->_put_InitialTabKind(value)); }
			void operator=(ContactCardTabKind value) { put(value); }
			void operator()(ContactCardTabKind value) { put(value); }
		} InitialTabKind;
	};
	IContactCardOptions_adaptor() {}
};
template<typename X> struct adapt<IContactCardOptions, X> : Windows::ApplicationModel::Contacts::IContactCardOptions_adaptor<X> { typedef adapt IContactCardOptions; };
struct IContactCardOptions : IContactCardOptions_raw, generate<IContactCardOptions> {};

// IContactCardOptions2
struct IContactCardOptions2_raw : IInspectable {
	virtual STDMETHODIMP _get_ServerSearchContactListIds(Foundation::Collections::IVector<HSTRING>* *value);
};
template<typename X> struct IContactCardOptions2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IContactCardOptions2_adaptor::ServerSearchContactListIds)->_get_ServerSearchContactListIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} ServerSearchContactListIds;
	};
	IContactCardOptions2_adaptor() {}
};
template<typename X> struct adapt<IContactCardOptions2, X> : Windows::ApplicationModel::Contacts::IContactCardOptions2_adaptor<X> { typedef adapt IContactCardOptions2; };
struct IContactCardOptions2 : IContactCardOptions2_raw, generate<IContactCardOptions2> {};

// IFullContactCardOptions
struct IFullContactCardOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_DesiredRemainingView(UI::ViewManagement::ViewSizePreference *value);
	virtual STDMETHODIMP _put_DesiredRemainingView(UI::ViewManagement::ViewSizePreference value);
};
template<typename X> struct IFullContactCardOptions_adaptor : X {
	union {
		struct : property {
			UI::ViewManagement::ViewSizePreference get() { UI::ViewManagement::ViewSizePreference value; hrcheck(enc(&IFullContactCardOptions_adaptor::DesiredRemainingView)->_get_DesiredRemainingView(&value)); return value; }
			UI::ViewManagement::ViewSizePreference operator()() { return get(); }
			operator UI::ViewManagement::ViewSizePreference () { return get(); }
			void put(UI::ViewManagement::ViewSizePreference value) { hrcheck(enc(&IFullContactCardOptions_adaptor::DesiredRemainingView)->_put_DesiredRemainingView(value)); }
			void operator=(UI::ViewManagement::ViewSizePreference value) { put(value); }
			void operator()(UI::ViewManagement::ViewSizePreference value) { put(value); }
		} DesiredRemainingView;
	};
	IFullContactCardOptions_adaptor() {}
};
template<typename X> struct adapt<IFullContactCardOptions, X> : Windows::ApplicationModel::Contacts::IFullContactCardOptions_adaptor<X> { typedef adapt IFullContactCardOptions; };
struct IFullContactCardOptions : IFullContactCardOptions_raw, generate<IFullContactCardOptions> {};

// IContactCardDelayedDataLoader
struct IContactCardDelayedDataLoader_raw : IInspectable {
	virtual STDMETHODIMP _SetData(Contact* contact);
};
template<typename X> struct IContactCardDelayedDataLoader_adaptor : X {
	void SetData(pptr<Contact> contact) { hrcheck(X::get()->_SetData(contact)); }
};
template<typename X> struct adapt<IContactCardDelayedDataLoader, X> : Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader_adaptor<X> { typedef adapt IContactCardDelayedDataLoader; };
struct IContactCardDelayedDataLoader : IContactCardDelayedDataLoader_raw, generate<IContactCardDelayedDataLoader> {};

// IContactManagerStatics
struct IContactManagerStatics : IInspectable {
	virtual STDMETHODIMP _ShowContactCard(Contact* contact, Foundation::Rect selection);
	virtual STDMETHODIMP _ShowContactCardWithPlacement(Contact* contact, Foundation::Rect selection, UI::Popups::Placement preferredPlacement);
	virtual STDMETHODIMP _ShowDelayLoadedContactCard(Contact* contact, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, ContactCardDelayedDataLoader* *dataLoader);
};

// ContactCardDelayedDataLoader
template<typename X> struct statics<ContactCardDelayedDataLoader, X> : X {
	typedef typename X::root_type ContactCardDelayedDataLoader;
};
struct ContactCardDelayedDataLoader : generate<ContactCardDelayedDataLoader> {};

// IContactManagerStatics2
struct IContactManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _RequestStoreAsync(Foundation::IAsyncOperation<ContactStore*>* *store);
};

// IContactStore3
struct IContactStore3_raw : IInspectable {
	virtual STDMETHODIMP _GetChangeTracker(HSTRING identity, ContactChangeTracker* *result);
};
template<typename X> struct IContactStore3_adaptor : X {
	ptr<ContactChangeTracker> GetChangeTracker(hstring_ref identity) { ContactChangeTracker* result; hrcheck(X::get()->_GetChangeTracker(identity, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IContactStore3, X> : Windows::ApplicationModel::Contacts::IContactStore3_adaptor<X> { typedef adapt IContactStore3; };
struct IContactStore3 : IContactStore3_raw, generate<IContactStore3> {};

// IContactStore
struct IContactStore_raw : IInspectable {
	virtual STDMETHODIMP _FindContactsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Contact*>*>* *contacts);
	virtual STDMETHODIMP _FindContactsWithSearchTextAsync(HSTRING searchText, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Contact*>*>* *contacts);
	virtual STDMETHODIMP _GetContactAsync(HSTRING contactId, Foundation::IAsyncOperation<Contact*>* *contacts);
};
template<typename X> struct IContactStore_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Contact>>>>> FindContactsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Contact*>*>* contacts; hrcheck(X::get()->_FindContactsAsync(&contacts)); return from_abi(contacts); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Contact>>>>> FindContactsAsync(hstring_ref searchText) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Contact*>*>* contacts; hrcheck(X::get()->_FindContactsWithSearchTextAsync(searchText, &contacts)); return from_abi(contacts); }
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> GetContactAsync(hstring_ref contactId) { Foundation::IAsyncOperation<Contact*>* contacts; hrcheck(X::get()->_GetContactAsync(contactId, &contacts)); return from_abi(contacts); }
};
template<typename X> struct adapt<IContactStore, X> : Windows::ApplicationModel::Contacts::IContactStore_adaptor<X> { typedef adapt IContactStore; };
struct IContactStore : IContactStore_raw, generate<IContactStore> {};

// IContactStore2
struct IContactStore2_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeTracker(ContactChangeTracker* *value);
	virtual STDMETHODIMP _add_ContactChanged(Foundation::TypedEventHandler<ContactStore*, ContactChangedEventArgs*>* value, Foundation::EventRegistrationToken *returnValue);
	virtual STDMETHODIMP _remove_ContactChanged(Foundation::EventRegistrationToken value);
	virtual STDMETHODIMP _get_AggregateContactManager(Contacts::AggregateContactManager* *value);
	virtual STDMETHODIMP _FindContactListsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactList*>*>* *value);
	virtual STDMETHODIMP _GetContactListAsync(HSTRING contactListId, Foundation::IAsyncOperation<ContactList*>* *value);
	virtual STDMETHODIMP _CreateContactListAsync(HSTRING displayName, Foundation::IAsyncOperation<ContactList*>* *value);
	virtual STDMETHODIMP _GetMeContactAsync(Foundation::IAsyncOperation<Contact*>* *meContact);
	virtual STDMETHODIMP _GetContactReader(ContactReader* *value);
	virtual STDMETHODIMP _GetContactReaderWithOptions(ContactQueryOptions* options, ContactReader* *value);
	virtual STDMETHODIMP _CreateContactListInAccountAsync(HSTRING displayName, HSTRING userDataAccountId, Foundation::IAsyncOperation<ContactList*>* *value);
};
template<typename X> struct IContactStore2_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::AggregateContactManager> get() { Contacts::AggregateContactManager* value; hrcheck(enc(&IContactStore2_adaptor::AggregateContactManager)->_get_AggregateContactManager(&value)); return from_abi(value); }
			ptr<Contacts::AggregateContactManager> operator()() { return get(); }
			operator ptr<Contacts::AggregateContactManager> () { return get(); }
			ptr<Contacts::AggregateContactManager> operator->() { return get(); }
		} AggregateContactManager;
		struct : property {
			ptr<ContactChangeTracker> get() { ContactChangeTracker* value; hrcheck(enc(&IContactStore2_adaptor::ChangeTracker)->_get_ChangeTracker(&value)); return from_abi(value); }
			ptr<ContactChangeTracker> operator()() { return get(); }
			operator ptr<ContactChangeTracker> () { return get(); }
			ptr<ContactChangeTracker> operator->() { return get(); }
		} ChangeTracker;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ContactStore>, ptr<ContactChangedEventArgs>>> value) { Foundation::EventRegistrationToken returnValue; hrcheck(enc(&IContactStore2_adaptor::ContactChanged)->_add_ContactChanged(to_abi(value), &returnValue)); return returnValue; }
			void operator-=(const Foundation::EventRegistrationToken& value) { hrcheck(enc(&IContactStore2_adaptor::ContactChanged)->_remove_ContactChanged(value)); }
		} ContactChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactList>>>>> FindContactListsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactList*>*>* value; hrcheck(X::get()->_FindContactListsAsync(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ContactList>>> GetContactListAsync(hstring_ref contactListId) { Foundation::IAsyncOperation<ContactList*>* value; hrcheck(X::get()->_GetContactListAsync(contactListId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ContactList>>> CreateContactListAsync(hstring_ref displayName) { Foundation::IAsyncOperation<ContactList*>* value; hrcheck(X::get()->_CreateContactListAsync(displayName, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> GetMeContactAsync() { Foundation::IAsyncOperation<Contact*>* meContact; hrcheck(X::get()->_GetMeContactAsync(&meContact)); return from_abi(meContact); }
	ptr<ContactReader> GetContactReader() { ContactReader* value; hrcheck(X::get()->_GetContactReader(&value)); return from_abi(value); }
	ptr<ContactReader> GetContactReader(pptr<ContactQueryOptions> options) { ContactReader* value; hrcheck(X::get()->_GetContactReaderWithOptions(options, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ContactList>>> CreateContactListAsync(hstring_ref displayName, hstring_ref userDataAccountId) { Foundation::IAsyncOperation<ContactList*>* value; hrcheck(X::get()->_CreateContactListInAccountAsync(displayName, userDataAccountId, &value)); return from_abi(value); }
	IContactStore2_adaptor() {}
};
template<typename X> struct adapt<IContactStore2, X> : Windows::ApplicationModel::Contacts::IContactStore2_adaptor<X> { typedef adapt IContactStore2; };
struct IContactStore2 : IContactStore2_raw, generate<IContactStore2> {};

// ContactStore
template<typename X> struct statics<ContactStore, X> : X {
	typedef typename X::root_type ContactStore;
};
struct ContactStore : generate<ContactStore> {
	using IContactStore::FindContactsAsync;
	using IContactStore2::GetContactReader;
	using IContactStore2::CreateContactListAsync;
};

// IContactManagerStatics3
struct IContactManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _ConvertContactToVCardAsync(Contact* contact, Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* *vCard);
	virtual STDMETHODIMP _ConvertContactToVCardAsyncWithMaxBytes(Contact* contact, unsigned maxBytes, Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* *vCard);
	virtual STDMETHODIMP _ConvertVCardToContactAsync(Storage::Streams::IRandomAccessStreamReference* vCard, Foundation::IAsyncOperation<Contact*>* *contact);
	virtual STDMETHODIMP _RequestStoreAsyncWithAccessType(ContactStoreAccessType accessType, Foundation::IAsyncOperation<ContactStore*>* *store);
	virtual STDMETHODIMP _RequestAnnotationStoreAsync(ContactAnnotationStoreAccessType accessType, Foundation::IAsyncOperation<ContactAnnotationStore*>* *store);
	virtual STDMETHODIMP _IsShowContactCardSupported(bool *result);
	virtual STDMETHODIMP _ShowContactCardWithOptions(Contact* contact, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, ContactCardOptions* contactCardOptions);
	virtual STDMETHODIMP _IsShowDelayLoadedContactCardSupported(bool *result);
	virtual STDMETHODIMP _ShowDelayLoadedContactCardWithOptions(Contact* contact, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, ContactCardOptions* contactCardOptions, ContactCardDelayedDataLoader* *dataLoader);
	virtual STDMETHODIMP _ShowFullContactCard(Contact* contact, FullContactCardOptions* fullContactCardOptions);
	virtual STDMETHODIMP _get_SystemDisplayNameOrder(ContactNameOrder *value);
	virtual STDMETHODIMP _put_SystemDisplayNameOrder(ContactNameOrder value);
	virtual STDMETHODIMP _get_SystemSortOrder(ContactNameOrder *value);
	virtual STDMETHODIMP _put_SystemSortOrder(ContactNameOrder value);
};

// IContactAnnotationStore2
struct IContactAnnotationStore2_raw : IInspectable {
	virtual STDMETHODIMP _FindAnnotationsForContactListAsync(HSTRING contactListId, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* *annotations);
};
template<typename X> struct IContactAnnotationStore2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactAnnotation>>>>> FindAnnotationsForContactListAsync(hstring_ref contactListId) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* annotations; hrcheck(X::get()->_FindAnnotationsForContactListAsync(contactListId, &annotations)); return from_abi(annotations); }
};
template<typename X> struct adapt<IContactAnnotationStore2, X> : Windows::ApplicationModel::Contacts::IContactAnnotationStore2_adaptor<X> { typedef adapt IContactAnnotationStore2; };
struct IContactAnnotationStore2 : IContactAnnotationStore2_raw, generate<IContactAnnotationStore2> {};

// IContactAnnotationStore
struct IContactAnnotationStore_raw : IInspectable {
	virtual STDMETHODIMP _FindContactIdsByEmailAsync(HSTRING emailAddress, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* *contactIds);
	virtual STDMETHODIMP _FindContactIdsByPhoneNumberAsync(HSTRING phoneNumber, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* *contactIds);
	virtual STDMETHODIMP _FindAnnotationsForContactAsync(Contact* contact, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* *annotations);
	virtual STDMETHODIMP _DisableAnnotationAsync(ContactAnnotation* annotation, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _CreateAnnotationListAsync(Foundation::IAsyncOperation<ContactAnnotationList*>* *value);
	virtual STDMETHODIMP _CreateAnnotationListInAccountAsync(HSTRING userDataAccountId, Foundation::IAsyncOperation<ContactAnnotationList*>* *value);
	virtual STDMETHODIMP _GetAnnotationListAsync(HSTRING annotationListId, Foundation::IAsyncOperation<ContactAnnotationList*>* *value);
	virtual STDMETHODIMP _FindAnnotationListsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotationList*>*>* *lists);
};
template<typename X> struct IContactAnnotationStore_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<hstring>>>> FindContactIdsByEmailAsync(hstring_ref emailAddress) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* contactIds; hrcheck(X::get()->_FindContactIdsByEmailAsync(emailAddress, &contactIds)); return from_abi(contactIds); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<hstring>>>> FindContactIdsByPhoneNumberAsync(hstring_ref phoneNumber) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* contactIds; hrcheck(X::get()->_FindContactIdsByPhoneNumberAsync(phoneNumber, &contactIds)); return from_abi(contactIds); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactAnnotation>>>>> FindAnnotationsForContactAsync(pptr<Contact> contact) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* annotations; hrcheck(X::get()->_FindAnnotationsForContactAsync(contact, &annotations)); return from_abi(annotations); }
	ptr<Foundation::IAsyncAction> DisableAnnotationAsync(pptr<ContactAnnotation> annotation) { Foundation::IAsyncAction* value; hrcheck(X::get()->_DisableAnnotationAsync(annotation, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ContactAnnotationList>>> CreateAnnotationListAsync() { Foundation::IAsyncOperation<ContactAnnotationList*>* value; hrcheck(X::get()->_CreateAnnotationListAsync(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ContactAnnotationList>>> CreateAnnotationListAsync(hstring_ref userDataAccountId) { Foundation::IAsyncOperation<ContactAnnotationList*>* value; hrcheck(X::get()->_CreateAnnotationListInAccountAsync(userDataAccountId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ContactAnnotationList>>> GetAnnotationListAsync(hstring_ref annotationListId) { Foundation::IAsyncOperation<ContactAnnotationList*>* value; hrcheck(X::get()->_GetAnnotationListAsync(annotationListId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactAnnotationList>>>>> FindAnnotationListsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotationList*>*>* lists; hrcheck(X::get()->_FindAnnotationListsAsync(&lists)); return from_abi(lists); }
};
template<typename X> struct adapt<IContactAnnotationStore, X> : Windows::ApplicationModel::Contacts::IContactAnnotationStore_adaptor<X> { typedef adapt IContactAnnotationStore; };
struct IContactAnnotationStore : IContactAnnotationStore_raw, generate<IContactAnnotationStore> {};

// ContactAnnotationStore
template<typename X> struct statics<ContactAnnotationStore, X> : X {
	typedef typename X::root_type ContactAnnotationStore;
};
struct ContactAnnotationStore : generate<ContactAnnotationStore> {
	using IContactAnnotationStore::CreateAnnotationListAsync;
};

// ContactCardOptions
template<typename X> struct statics<ContactCardOptions, X> : X {
	typedef typename X::root_type ContactCardOptions;
};
struct ContactCardOptions : generate<ContactCardOptions> {};

// FullContactCardOptions
template<typename X> struct statics<FullContactCardOptions, X> : X {
	typedef typename X::root_type FullContactCardOptions;
};
struct FullContactCardOptions : generate<FullContactCardOptions> {};

// IContactManagerStatics4
struct IContactManagerStatics4 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, ContactManagerForUser* *result);
};

// IContactManagerForUser2
struct IContactManagerForUser2_raw : IInspectable {
	virtual STDMETHODIMP _ShowFullContactCard(Contact* contact, FullContactCardOptions* fullContactCardOptions);
};
template<typename X> struct IContactManagerForUser2_adaptor : X {
	void ShowFullContactCard(pptr<Contact> contact, pptr<FullContactCardOptions> fullContactCardOptions) { hrcheck(X::get()->_ShowFullContactCard(contact, fullContactCardOptions)); }
};
template<typename X> struct adapt<IContactManagerForUser2, X> : Windows::ApplicationModel::Contacts::IContactManagerForUser2_adaptor<X> { typedef adapt IContactManagerForUser2; };
struct IContactManagerForUser2 : IContactManagerForUser2_raw, generate<IContactManagerForUser2> {};

// IContactManagerForUser
struct IContactManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _ConvertContactToVCardAsync(Contact* contact, Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* *result);
	virtual STDMETHODIMP _ConvertContactToVCardAsyncWithMaxBytes(Contact* contact, unsigned maxBytes, Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* *result);
	virtual STDMETHODIMP _ConvertVCardToContactAsync(Storage::Streams::IRandomAccessStreamReference* vCard, Foundation::IAsyncOperation<Contact*>* *result);
	virtual STDMETHODIMP _RequestStoreAsync(ContactStoreAccessType accessType, Foundation::IAsyncOperation<ContactStore*>* *result);
	virtual STDMETHODIMP _RequestAnnotationStoreAsync(ContactAnnotationStoreAccessType accessType, Foundation::IAsyncOperation<ContactAnnotationStore*>* *result);
	virtual STDMETHODIMP _get_SystemDisplayNameOrder(ContactNameOrder *value);
	virtual STDMETHODIMP _put_SystemDisplayNameOrder(ContactNameOrder value);
	virtual STDMETHODIMP _get_SystemSortOrder(ContactNameOrder *value);
	virtual STDMETHODIMP _put_SystemSortOrder(ContactNameOrder value);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IContactManagerForUser_adaptor : X {
	union {
		struct : property {
			ContactNameOrder get() { ContactNameOrder value; hrcheck(enc(&IContactManagerForUser_adaptor::SystemDisplayNameOrder)->_get_SystemDisplayNameOrder(&value)); return value; }
			ContactNameOrder operator()() { return get(); }
			operator ContactNameOrder () { return get(); }
			void put(ContactNameOrder value) { hrcheck(enc(&IContactManagerForUser_adaptor::SystemDisplayNameOrder)->_put_SystemDisplayNameOrder(value)); }
			void operator=(ContactNameOrder value) { put(value); }
			void operator()(ContactNameOrder value) { put(value); }
		} SystemDisplayNameOrder;
		struct : property {
			ContactNameOrder get() { ContactNameOrder value; hrcheck(enc(&IContactManagerForUser_adaptor::SystemSortOrder)->_get_SystemSortOrder(&value)); return value; }
			ContactNameOrder operator()() { return get(); }
			operator ContactNameOrder () { return get(); }
			void put(ContactNameOrder value) { hrcheck(enc(&IContactManagerForUser_adaptor::SystemSortOrder)->_put_SystemSortOrder(value)); }
			void operator=(ContactNameOrder value) { put(value); }
			void operator()(ContactNameOrder value) { put(value); }
		} SystemSortOrder;
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IContactManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::RandomAccessStreamReference>>> ConvertContactToVCardAsync(pptr<Contact> contact) { Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* result; hrcheck(X::get()->_ConvertContactToVCardAsync(contact, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::RandomAccessStreamReference>>> ConvertContactToVCardAsync(pptr<Contact> contact, unsigned maxBytes) { Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* result; hrcheck(X::get()->_ConvertContactToVCardAsyncWithMaxBytes(contact, maxBytes, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> ConvertVCardToContactAsync(pptr<Storage::Streams::IRandomAccessStreamReference> vCard) { Foundation::IAsyncOperation<Contact*>* result; hrcheck(X::get()->_ConvertVCardToContactAsync(vCard, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<ContactStore>>> RequestStoreAsync(ContactStoreAccessType accessType) { Foundation::IAsyncOperation<ContactStore*>* result; hrcheck(X::get()->_RequestStoreAsync(accessType, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<ContactAnnotationStore>>> RequestAnnotationStoreAsync(ContactAnnotationStoreAccessType accessType) { Foundation::IAsyncOperation<ContactAnnotationStore*>* result; hrcheck(X::get()->_RequestAnnotationStoreAsync(accessType, &result)); return from_abi(result); }
	IContactManagerForUser_adaptor() {}
};
template<typename X> struct adapt<IContactManagerForUser, X> : Windows::ApplicationModel::Contacts::IContactManagerForUser_adaptor<X> { typedef adapt IContactManagerForUser; };
struct IContactManagerForUser : IContactManagerForUser_raw, generate<IContactManagerForUser> {};

// ContactManagerForUser
template<typename X> struct statics<ContactManagerForUser, X> : X {
	typedef typename X::root_type ContactManagerForUser;
};
struct ContactManagerForUser : generate<ContactManagerForUser> {
	using IContactManagerForUser::ConvertContactToVCardAsync;
};

// IContactManagerStatics5
struct IContactManagerStatics5 : IInspectable {
	virtual STDMETHODIMP _IsShowFullContactCardSupportedAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _get_IncludeMiddleNameInSystemDisplayAndSort(bool *value);
	virtual STDMETHODIMP _put_IncludeMiddleNameInSystemDisplayAndSort(bool value);
};

// IAggregateContactManager
struct IAggregateContactManager_raw : IInspectable {
	virtual STDMETHODIMP _FindRawContactsAsync(Contact* contact, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Contact*>*>* *value);
	virtual STDMETHODIMP _TryLinkContactsAsync(Contact* primaryContact, Contact* secondaryContact, Foundation::IAsyncOperation<Contact*>* *contact);
	virtual STDMETHODIMP _UnlinkRawContactAsync(Contact* contact, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _TrySetPreferredSourceForPictureAsync(Contact* aggregateContact, Contact* rawContact, Foundation::IAsyncOperation<bool>* *value);
};
template<typename X> struct IAggregateContactManager_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Contact>>>>> FindRawContactsAsync(pptr<Contact> contact) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Contact*>*>* value; hrcheck(X::get()->_FindRawContactsAsync(contact, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> TryLinkContactsAsync(pptr<Contact> primaryContact, pptr<Contact> secondaryContact) { Foundation::IAsyncOperation<Contact*>* contact; hrcheck(X::get()->_TryLinkContactsAsync(primaryContact, secondaryContact, &contact)); return from_abi(contact); }
	ptr<Foundation::IAsyncAction> UnlinkRawContactAsync(pptr<Contact> contact) { Foundation::IAsyncAction* value; hrcheck(X::get()->_UnlinkRawContactAsync(contact, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetPreferredSourceForPictureAsync(pptr<Contact> aggregateContact, pptr<Contact> rawContact) { Foundation::IAsyncOperation<bool>* value; hrcheck(X::get()->_TrySetPreferredSourceForPictureAsync(aggregateContact, rawContact, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IAggregateContactManager, X> : Windows::ApplicationModel::Contacts::IAggregateContactManager_adaptor<X> { typedef adapt IAggregateContactManager; };
struct IAggregateContactManager : IAggregateContactManager_raw, generate<IAggregateContactManager> {};

// IAggregateContactManager2
struct IAggregateContactManager2_raw : IInspectable {
	virtual STDMETHODIMP _SetRemoteIdentificationInformationAsync(HSTRING contactListId, HSTRING remoteSourceId, HSTRING accountId, Foundation::IAsyncAction* *result);
};
template<typename X> struct IAggregateContactManager2_adaptor : X {
	ptr<Foundation::IAsyncAction> SetRemoteIdentificationInformationAsync(hstring_ref contactListId, hstring_ref remoteSourceId, hstring_ref accountId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SetRemoteIdentificationInformationAsync(contactListId, remoteSourceId, accountId, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IAggregateContactManager2, X> : Windows::ApplicationModel::Contacts::IAggregateContactManager2_adaptor<X> { typedef adapt IAggregateContactManager2; };
struct IAggregateContactManager2 : IAggregateContactManager2_raw, generate<IAggregateContactManager2> {};

// IContactAnnotation2
struct IContactAnnotation2_raw : IInspectable {
	virtual STDMETHODIMP _get_ContactListId(HSTRING *value);
	virtual STDMETHODIMP _put_ContactListId(HSTRING value);
};
template<typename X> struct IContactAnnotation2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotation2_adaptor::ContactListId)->_get_ContactListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAnnotation2_adaptor::ContactListId)->_put_ContactListId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContactListId;
	};
	IContactAnnotation2_adaptor() {}
};
template<typename X> struct adapt<IContactAnnotation2, X> : Windows::ApplicationModel::Contacts::IContactAnnotation2_adaptor<X> { typedef adapt IContactAnnotation2; };
struct IContactAnnotation2 : IContactAnnotation2_raw, generate<IContactAnnotation2> {};

// IContactAnnotation
struct IContactAnnotation_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_AnnotationListId(HSTRING *value);
	virtual STDMETHODIMP _get_ContactId(HSTRING *value);
	virtual STDMETHODIMP _put_ContactId(HSTRING value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_SupportedOperations(ContactAnnotationOperations *value);
	virtual STDMETHODIMP _put_SupportedOperations(ContactAnnotationOperations value);
	virtual STDMETHODIMP _get_IsDisabled(bool *value);
	virtual STDMETHODIMP _get_ProviderProperties(Foundation::Collections::ValueSet* *value);
};
template<typename X> struct IContactAnnotation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotation_adaptor::AnnotationListId)->_get_AnnotationListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AnnotationListId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotation_adaptor::ContactId)->_get_ContactId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAnnotation_adaptor::ContactId)->_put_ContactId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContactId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotation_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContactAnnotation_adaptor::IsDisabled)->_get_IsDisabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDisabled;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IContactAnnotation_adaptor::ProviderProperties)->_get_ProviderProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} ProviderProperties;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotation_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAnnotation_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			ContactAnnotationOperations get() { ContactAnnotationOperations value; hrcheck(enc(&IContactAnnotation_adaptor::SupportedOperations)->_get_SupportedOperations(&value)); return value; }
			ContactAnnotationOperations operator()() { return get(); }
			operator ContactAnnotationOperations () { return get(); }
			void put(ContactAnnotationOperations value) { hrcheck(enc(&IContactAnnotation_adaptor::SupportedOperations)->_put_SupportedOperations(value)); }
			void operator=(ContactAnnotationOperations value) { put(value); }
			void operator()(ContactAnnotationOperations value) { put(value); }
		} SupportedOperations;
	};
	IContactAnnotation_adaptor() {}
};
template<typename X> struct adapt<IContactAnnotation, X> : Windows::ApplicationModel::Contacts::IContactAnnotation_adaptor<X> { typedef adapt IContactAnnotation; };
struct IContactAnnotation : IContactAnnotation_raw, generate<IContactAnnotation> {};

// ContactAnnotation
template<typename X> struct statics<ContactAnnotation, X> : X {
	typedef typename X::root_type ContactAnnotation;
};
struct ContactAnnotation : generate<ContactAnnotation> {};

// IContactAnnotationList
struct IContactAnnotationList_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_ProviderPackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _get_UserDataAccountId(HSTRING *value);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _TrySaveAnnotationAsync(ContactAnnotation* annotation, Foundation::IAsyncOperation<bool>* *ppResult);
	virtual STDMETHODIMP _GetAnnotationAsync(HSTRING annotationId, Foundation::IAsyncOperation<ContactAnnotation*>* *annotation);
	virtual STDMETHODIMP _FindAnnotationsByRemoteIdAsync(HSTRING remoteId, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* *annotations);
	virtual STDMETHODIMP _FindAnnotationsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* *annotations);
	virtual STDMETHODIMP _DeleteAnnotationAsync(ContactAnnotation* annotation, Foundation::IAsyncAction* *value);
};
template<typename X> struct IContactAnnotationList_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotationList_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotationList_adaptor::ProviderPackageFamilyName)->_get_ProviderPackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderPackageFamilyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAnnotationList_adaptor::UserDataAccountId)->_get_UserDataAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserDataAccountId;
	};
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* value; hrcheck(X::get()->_DeleteAsync(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<bool>> TrySaveAnnotationAsync(pptr<ContactAnnotation> annotation) { Foundation::IAsyncOperation<bool>* ppResult; hrcheck(X::get()->_TrySaveAnnotationAsync(annotation, &ppResult)); return from_abi(ppResult); }
	ptr<Foundation::IAsyncOperation<ptr<ContactAnnotation>>> GetAnnotationAsync(hstring_ref annotationId) { Foundation::IAsyncOperation<ContactAnnotation*>* annotation; hrcheck(X::get()->_GetAnnotationAsync(annotationId, &annotation)); return from_abi(annotation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactAnnotation>>>>> FindAnnotationsByRemoteIdAsync(hstring_ref remoteId) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* annotations; hrcheck(X::get()->_FindAnnotationsByRemoteIdAsync(remoteId, &annotations)); return from_abi(annotations); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactAnnotation>>>>> FindAnnotationsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactAnnotation*>*>* annotations; hrcheck(X::get()->_FindAnnotationsAsync(&annotations)); return from_abi(annotations); }
	ptr<Foundation::IAsyncAction> DeleteAnnotationAsync(pptr<ContactAnnotation> annotation) { Foundation::IAsyncAction* value; hrcheck(X::get()->_DeleteAnnotationAsync(annotation, &value)); return from_abi(value); }
	IContactAnnotationList_adaptor() {}
};
template<typename X> struct adapt<IContactAnnotationList, X> : Windows::ApplicationModel::Contacts::IContactAnnotationList_adaptor<X> { typedef adapt IContactAnnotationList; };
struct IContactAnnotationList : IContactAnnotationList_raw, generate<IContactAnnotationList> {};

// ContactAnnotationList
template<typename X> struct statics<ContactAnnotationList, X> : X {
	typedef typename X::root_type ContactAnnotationList;
};
struct ContactAnnotationList : generate<ContactAnnotationList> {};

// IContactStoreNotificationTriggerDetails
struct IContactStoreNotificationTriggerDetails : IInspectable, generate<IContactStoreNotificationTriggerDetails> {};

// IContactChangeTracker2
struct IContactChangeTracker2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTracking(bool *value);
};
template<typename X> struct IContactChangeTracker2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContactChangeTracker2_adaptor::IsTracking)->_get_IsTracking(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTracking;
	};
	IContactChangeTracker2_adaptor() {}
};
template<typename X> struct adapt<IContactChangeTracker2, X> : Windows::ApplicationModel::Contacts::IContactChangeTracker2_adaptor<X> { typedef adapt IContactChangeTracker2; };
struct IContactChangeTracker2 : IContactChangeTracker2_raw, generate<IContactChangeTracker2> {};

// IContactChangeTracker
struct IContactChangeTracker_raw : IInspectable {
	virtual STDMETHODIMP _Enable();
	virtual STDMETHODIMP _GetChangeReader(ContactChangeReader* *value);
	virtual STDMETHODIMP _Reset();
};
template<typename X> struct IContactChangeTracker_adaptor : X {
	void Enable() { hrcheck(X::get()->_Enable()); }
	ptr<ContactChangeReader> GetChangeReader() { ContactChangeReader* value; hrcheck(X::get()->_GetChangeReader(&value)); return from_abi(value); }
	void Reset() { hrcheck(X::get()->_Reset()); }
};
template<typename X> struct adapt<IContactChangeTracker, X> : Windows::ApplicationModel::Contacts::IContactChangeTracker_adaptor<X> { typedef adapt IContactChangeTracker; };
struct IContactChangeTracker : IContactChangeTracker_raw, generate<IContactChangeTracker> {};

// ContactChangeTracker
template<typename X> struct statics<ContactChangeTracker, X> : X {
	typedef typename X::root_type ContactChangeTracker;
};
struct ContactChangeTracker : generate<ContactChangeTracker> {};

// IContactChangedEventArgs
struct IContactChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(ContactChangedDeferral* *value);
};
template<typename X> struct IContactChangedEventArgs_adaptor : X {
	ptr<ContactChangedDeferral> GetDeferral() { ContactChangedDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IContactChangedEventArgs, X> : Windows::ApplicationModel::Contacts::IContactChangedEventArgs_adaptor<X> { typedef adapt IContactChangedEventArgs; };
struct IContactChangedEventArgs : IContactChangedEventArgs_raw, generate<IContactChangedEventArgs> {};

// ContactChangedEventArgs
template<typename X> struct statics<ContactChangedEventArgs, X> : X {
	typedef typename X::root_type ContactChangedEventArgs;
};
struct ContactChangedEventArgs : generate<ContactChangedEventArgs> {};

// AggregateContactManager
template<typename X> struct statics<AggregateContactManager, X> : X {
	typedef typename X::root_type AggregateContactManager;
};
struct AggregateContactManager : generate<AggregateContactManager> {};

// IContactList3
struct IContactList3_raw : IInspectable {
	virtual STDMETHODIMP _get_LimitedWriteOperations(ContactListLimitedWriteOperations* *value);
	virtual STDMETHODIMP _GetChangeTracker(HSTRING identity, ContactChangeTracker* *result);
};
template<typename X> struct IContactList3_adaptor : X {
	union {
		struct : property {
			ptr<ContactListLimitedWriteOperations> get() { ContactListLimitedWriteOperations* value; hrcheck(enc(&IContactList3_adaptor::LimitedWriteOperations)->_get_LimitedWriteOperations(&value)); return from_abi(value); }
			ptr<ContactListLimitedWriteOperations> operator()() { return get(); }
			operator ptr<ContactListLimitedWriteOperations> () { return get(); }
			ptr<ContactListLimitedWriteOperations> operator->() { return get(); }
		} LimitedWriteOperations;
	};
	ptr<ContactChangeTracker> GetChangeTracker(hstring_ref identity) { ContactChangeTracker* result; hrcheck(X::get()->_GetChangeTracker(identity, &result)); return from_abi(result); }
	IContactList3_adaptor() {}
};
template<typename X> struct adapt<IContactList3, X> : Windows::ApplicationModel::Contacts::IContactList3_adaptor<X> { typedef adapt IContactList3; };
struct IContactList3 : IContactList3_raw, generate<IContactList3> {};

// IContactList2
struct IContactList2_raw : IInspectable {
	virtual STDMETHODIMP _RegisterSyncManagerAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _put_SupportsServerSearch(bool value);
	virtual STDMETHODIMP _get_SyncConstraints(ContactListSyncConstraints* *value);
};
template<typename X> struct IContactList2_adaptor : X {
	union {
		struct : property {
			void put(bool value) { hrcheck(enc(&IContactList2_adaptor::SupportsServerSearch)->_put_SupportsServerSearch(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SupportsServerSearch;
		struct : property {
			ptr<ContactListSyncConstraints> get() { ContactListSyncConstraints* value; hrcheck(enc(&IContactList2_adaptor::SyncConstraints)->_get_SyncConstraints(&value)); return from_abi(value); }
			ptr<ContactListSyncConstraints> operator()() { return get(); }
			operator ptr<ContactListSyncConstraints> () { return get(); }
			ptr<ContactListSyncConstraints> operator->() { return get(); }
		} SyncConstraints;
	};
	ptr<Foundation::IAsyncAction> RegisterSyncManagerAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_RegisterSyncManagerAsync(&result)); return from_abi(result); }
	IContactList2_adaptor() {}
};
template<typename X> struct adapt<IContactList2, X> : Windows::ApplicationModel::Contacts::IContactList2_adaptor<X> { typedef adapt IContactList2; };
struct IContactList2 : IContactList2_raw, generate<IContactList2> {};

// IContactList
struct IContactList_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_SourceDisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_IsHidden(bool *value);
	virtual STDMETHODIMP _put_IsHidden(bool value);
	virtual STDMETHODIMP _get_OtherAppReadAccess(ContactListOtherAppReadAccess *value);
	virtual STDMETHODIMP _put_OtherAppReadAccess(ContactListOtherAppReadAccess value);
	virtual STDMETHODIMP _get_OtherAppWriteAccess(ContactListOtherAppWriteAccess *value);
	virtual STDMETHODIMP _put_OtherAppWriteAccess(ContactListOtherAppWriteAccess value);
	virtual STDMETHODIMP _get_ChangeTracker(ContactChangeTracker* *value);
	virtual STDMETHODIMP _get_SyncManager(ContactListSyncManager* *value);
	virtual STDMETHODIMP _get_SupportsServerSearch(bool *value);
	virtual STDMETHODIMP _get_UserDataAccountId(HSTRING *value);
	virtual STDMETHODIMP _add_ContactChanged(Foundation::TypedEventHandler<ContactList*, ContactChangedEventArgs*>* value, Foundation::EventRegistrationToken *returnValue);
	virtual STDMETHODIMP _remove_ContactChanged(Foundation::EventRegistrationToken value);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *returnValue);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *returnValue);
	virtual STDMETHODIMP _GetContactFromRemoteIdAsync(HSTRING remoteId, Foundation::IAsyncOperation<Contact*>* *contact);
	virtual STDMETHODIMP _GetMeContactAsync(Foundation::IAsyncOperation<Contact*>* *meContact);
	virtual STDMETHODIMP _GetContactReader(ContactReader* *value);
	virtual STDMETHODIMP _GetContactReaderWithOptions(ContactQueryOptions* options, ContactReader* *value);
	virtual STDMETHODIMP _SaveContactAsync(Contact* contact, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _DeleteContactAsync(Contact* contact, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _GetContactAsync(HSTRING contactId, Foundation::IAsyncOperation<Contact*>* *contacts);
};
template<typename X> struct IContactList_adaptor : X {
	union {
		struct : property {
			ptr<ContactChangeTracker> get() { ContactChangeTracker* value; hrcheck(enc(&IContactList_adaptor::ChangeTracker)->_get_ChangeTracker(&value)); return from_abi(value); }
			ptr<ContactChangeTracker> operator()() { return get(); }
			operator ptr<ContactChangeTracker> () { return get(); }
			ptr<ContactChangeTracker> operator->() { return get(); }
		} ChangeTracker;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactList_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactList_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactList_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContactList_adaptor::IsHidden)->_get_IsHidden(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IContactList_adaptor::IsHidden)->_put_IsHidden(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsHidden;
		struct : property {
			ContactListOtherAppReadAccess get() { ContactListOtherAppReadAccess value; hrcheck(enc(&IContactList_adaptor::OtherAppReadAccess)->_get_OtherAppReadAccess(&value)); return value; }
			ContactListOtherAppReadAccess operator()() { return get(); }
			operator ContactListOtherAppReadAccess () { return get(); }
			void put(ContactListOtherAppReadAccess value) { hrcheck(enc(&IContactList_adaptor::OtherAppReadAccess)->_put_OtherAppReadAccess(value)); }
			void operator=(ContactListOtherAppReadAccess value) { put(value); }
			void operator()(ContactListOtherAppReadAccess value) { put(value); }
		} OtherAppReadAccess;
		struct : property {
			ContactListOtherAppWriteAccess get() { ContactListOtherAppWriteAccess value; hrcheck(enc(&IContactList_adaptor::OtherAppWriteAccess)->_get_OtherAppWriteAccess(&value)); return value; }
			ContactListOtherAppWriteAccess operator()() { return get(); }
			operator ContactListOtherAppWriteAccess () { return get(); }
			void put(ContactListOtherAppWriteAccess value) { hrcheck(enc(&IContactList_adaptor::OtherAppWriteAccess)->_put_OtherAppWriteAccess(value)); }
			void operator=(ContactListOtherAppWriteAccess value) { put(value); }
			void operator()(ContactListOtherAppWriteAccess value) { put(value); }
		} OtherAppWriteAccess;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactList_adaptor::SourceDisplayName)->_get_SourceDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourceDisplayName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContactList_adaptor::SupportsServerSearch)->_get_SupportsServerSearch(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SupportsServerSearch;
		struct : property {
			ptr<ContactListSyncManager> get() { ContactListSyncManager* value; hrcheck(enc(&IContactList_adaptor::SyncManager)->_get_SyncManager(&value)); return from_abi(value); }
			ptr<ContactListSyncManager> operator()() { return get(); }
			operator ptr<ContactListSyncManager> () { return get(); }
			ptr<ContactListSyncManager> operator->() { return get(); }
		} SyncManager;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactList_adaptor::UserDataAccountId)->_get_UserDataAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserDataAccountId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ContactList>, ptr<ContactChangedEventArgs>>> value) { Foundation::EventRegistrationToken returnValue; hrcheck(enc(&IContactList_adaptor::ContactChanged)->_add_ContactChanged(to_abi(value), &returnValue)); return returnValue; }
			void operator-=(const Foundation::EventRegistrationToken& value) { hrcheck(enc(&IContactList_adaptor::ContactChanged)->_remove_ContactChanged(value)); }
		} ContactChanged;
	};
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_SaveAsync(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_DeleteAsync(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> GetContactFromRemoteIdAsync(hstring_ref remoteId) { Foundation::IAsyncOperation<Contact*>* contact; hrcheck(X::get()->_GetContactFromRemoteIdAsync(remoteId, &contact)); return from_abi(contact); }
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> GetMeContactAsync() { Foundation::IAsyncOperation<Contact*>* meContact; hrcheck(X::get()->_GetMeContactAsync(&meContact)); return from_abi(meContact); }
	ptr<ContactReader> GetContactReader() { ContactReader* value; hrcheck(X::get()->_GetContactReader(&value)); return from_abi(value); }
	ptr<ContactReader> GetContactReader(pptr<ContactQueryOptions> options) { ContactReader* value; hrcheck(X::get()->_GetContactReaderWithOptions(options, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> SaveContactAsync(pptr<Contact> contact) { Foundation::IAsyncAction* value; hrcheck(X::get()->_SaveContactAsync(contact, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> DeleteContactAsync(pptr<Contact> contact) { Foundation::IAsyncAction* value; hrcheck(X::get()->_DeleteContactAsync(contact, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> GetContactAsync(hstring_ref contactId) { Foundation::IAsyncOperation<Contact*>* contacts; hrcheck(X::get()->_GetContactAsync(contactId, &contacts)); return from_abi(contacts); }
	IContactList_adaptor() {}
};
template<typename X> struct adapt<IContactList, X> : Windows::ApplicationModel::Contacts::IContactList_adaptor<X> { typedef adapt IContactList; };
struct IContactList : IContactList_raw, generate<IContactList> {};

// ContactList
template<typename X> struct statics<ContactList, X> : X {
	typedef typename X::root_type ContactList;
};
struct ContactList : generate<ContactList> {
	using IContactList::GetContactReader;
	using IContactList::SupportsServerSearch;
};

// IContactReader
struct IContactReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<ContactBatch*>* *value);
	virtual STDMETHODIMP _GetMatchingPropertiesWithMatchReason(Contact* contact, Foundation::Collections::IVectorView<ContactMatchReason*>* *ppRetVal);
};
template<typename X> struct IContactReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<ContactBatch>>> ReadBatchAsync() { Foundation::IAsyncOperation<ContactBatch*>* value; hrcheck(X::get()->_ReadBatchAsync(&value)); return from_abi(value); }
	ptr<Foundation::Collections::IVectorView<ptr<ContactMatchReason>>> GetMatchingPropertiesWithMatchReason(pptr<Contact> contact) { Foundation::Collections::IVectorView<ContactMatchReason*>* ppRetVal; hrcheck(X::get()->_GetMatchingPropertiesWithMatchReason(contact, &ppRetVal)); return from_abi(ppRetVal); }
};
template<typename X> struct adapt<IContactReader, X> : Windows::ApplicationModel::Contacts::IContactReader_adaptor<X> { typedef adapt IContactReader; };
struct IContactReader : IContactReader_raw, generate<IContactReader> {};

// ContactReader
template<typename X> struct statics<ContactReader, X> : X {
	typedef typename X::root_type ContactReader;
};
struct ContactReader : generate<ContactReader> {};

// IContactQueryOptionsFactory
struct IContactQueryOptionsFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithText(HSTRING text, ContactQueryOptions* *result);
	virtual STDMETHODIMP _CreateWithTextAndFields(HSTRING text, ContactQuerySearchFields fields, ContactQueryOptions* *result);
};

// IContactQueryOptions
struct IContactQueryOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_TextSearch(ContactQueryTextSearch* *value);
	virtual STDMETHODIMP _get_ContactListIds(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_IncludeContactsFromHiddenLists(bool *value);
	virtual STDMETHODIMP _put_IncludeContactsFromHiddenLists(bool value);
	virtual STDMETHODIMP _get_DesiredFields(ContactQueryDesiredFields *value);
	virtual STDMETHODIMP _put_DesiredFields(ContactQueryDesiredFields value);
	virtual STDMETHODIMP _get_DesiredOperations(ContactAnnotationOperations *value);
	virtual STDMETHODIMP _put_DesiredOperations(ContactAnnotationOperations value);
	virtual STDMETHODIMP _get_AnnotationListIds(Foundation::Collections::IVector<HSTRING>* *value);
};
template<typename X> struct IContactQueryOptions_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IContactQueryOptions_adaptor::AnnotationListIds)->_get_AnnotationListIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} AnnotationListIds;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IContactQueryOptions_adaptor::ContactListIds)->_get_ContactListIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} ContactListIds;
		struct : property {
			ContactQueryDesiredFields get() { ContactQueryDesiredFields value; hrcheck(enc(&IContactQueryOptions_adaptor::DesiredFields)->_get_DesiredFields(&value)); return value; }
			ContactQueryDesiredFields operator()() { return get(); }
			operator ContactQueryDesiredFields () { return get(); }
			void put(ContactQueryDesiredFields value) { hrcheck(enc(&IContactQueryOptions_adaptor::DesiredFields)->_put_DesiredFields(value)); }
			void operator=(ContactQueryDesiredFields value) { put(value); }
			void operator()(ContactQueryDesiredFields value) { put(value); }
		} DesiredFields;
		struct : property {
			ContactAnnotationOperations get() { ContactAnnotationOperations value; hrcheck(enc(&IContactQueryOptions_adaptor::DesiredOperations)->_get_DesiredOperations(&value)); return value; }
			ContactAnnotationOperations operator()() { return get(); }
			operator ContactAnnotationOperations () { return get(); }
			void put(ContactAnnotationOperations value) { hrcheck(enc(&IContactQueryOptions_adaptor::DesiredOperations)->_put_DesiredOperations(value)); }
			void operator=(ContactAnnotationOperations value) { put(value); }
			void operator()(ContactAnnotationOperations value) { put(value); }
		} DesiredOperations;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContactQueryOptions_adaptor::IncludeContactsFromHiddenLists)->_get_IncludeContactsFromHiddenLists(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IContactQueryOptions_adaptor::IncludeContactsFromHiddenLists)->_put_IncludeContactsFromHiddenLists(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IncludeContactsFromHiddenLists;
		struct : property {
			ptr<ContactQueryTextSearch> get() { ContactQueryTextSearch* value; hrcheck(enc(&IContactQueryOptions_adaptor::TextSearch)->_get_TextSearch(&value)); return from_abi(value); }
			ptr<ContactQueryTextSearch> operator()() { return get(); }
			operator ptr<ContactQueryTextSearch> () { return get(); }
			ptr<ContactQueryTextSearch> operator->() { return get(); }
		} TextSearch;
	};
	IContactQueryOptions_adaptor() {}
};
template<typename X> struct adapt<IContactQueryOptions, X> : Windows::ApplicationModel::Contacts::IContactQueryOptions_adaptor<X> { typedef adapt IContactQueryOptions; };
struct IContactQueryOptions : IContactQueryOptions_raw, generate<IContactQueryOptions> {};

// ContactQueryOptions
template<typename> struct ContactQueryOptions_statics {
	static ContactQueryOptions *activate(hstring_ref text) { ContactQueryOptions *result; hrcheck(get_activation_factory<ContactQueryOptions, IContactQueryOptionsFactory>()->_CreateWithText(text, &result)); return result; }
	static ContactQueryOptions *activate(hstring_ref text, ContactQuerySearchFields fields) { ContactQueryOptions *result; hrcheck(get_activation_factory<ContactQueryOptions, IContactQueryOptionsFactory>()->_CreateWithTextAndFields(text, fields, &result)); return result; }
	static ContactQueryOptions *activate() { ContactQueryOptions *t; get_activation_factory<ContactQueryOptions>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<ContactQueryOptions, X> : X, Windows::ApplicationModel::Contacts::ContactQueryOptions_statics<void> {
	using Windows::ApplicationModel::Contacts::ContactQueryOptions_statics<void>::activate;
	typedef typename X::root_type ContactQueryOptions;
};
struct ContactQueryOptions : generate<ContactQueryOptions> {};

// IContactListSyncManager2
struct IContactListSyncManager2_raw : IInspectable {
	virtual STDMETHODIMP _put_Status(ContactListSyncStatus value);
	virtual STDMETHODIMP _put_LastSuccessfulSyncTime(Foundation::DateTime value);
	virtual STDMETHODIMP _put_LastAttemptedSyncTime(Foundation::DateTime value);
};
template<typename X> struct IContactListSyncManager2_adaptor : X {
	union {
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IContactListSyncManager2_adaptor::LastAttemptedSyncTime)->_put_LastAttemptedSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastAttemptedSyncTime;
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IContactListSyncManager2_adaptor::LastSuccessfulSyncTime)->_put_LastSuccessfulSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastSuccessfulSyncTime;
		struct : property {
			void put(ContactListSyncStatus value) { hrcheck(enc(&IContactListSyncManager2_adaptor::Status)->_put_Status(value)); }
			void operator=(ContactListSyncStatus value) { put(value); }
			void operator()(ContactListSyncStatus value) { put(value); }
		} Status;
	};
	IContactListSyncManager2_adaptor() {}
};
template<typename X> struct adapt<IContactListSyncManager2, X> : Windows::ApplicationModel::Contacts::IContactListSyncManager2_adaptor<X> { typedef adapt IContactListSyncManager2; };
struct IContactListSyncManager2 : IContactListSyncManager2_raw, generate<IContactListSyncManager2> {};

// IContactListSyncManager
struct IContactListSyncManager_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(ContactListSyncStatus *value);
	virtual STDMETHODIMP _get_LastSuccessfulSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_LastAttemptedSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _SyncAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_SyncStatusChanged(Foundation::TypedEventHandler<ContactListSyncManager*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SyncStatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IContactListSyncManager_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IContactListSyncManager_adaptor::LastAttemptedSyncTime)->_get_LastAttemptedSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LastAttemptedSyncTime;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IContactListSyncManager_adaptor::LastSuccessfulSyncTime)->_get_LastSuccessfulSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LastSuccessfulSyncTime;
		struct : property {
			ContactListSyncStatus get() { ContactListSyncStatus value; hrcheck(enc(&IContactListSyncManager_adaptor::Status)->_get_Status(&value)); return value; }
			ContactListSyncStatus operator()() { return get(); }
			operator ContactListSyncStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ContactListSyncManager>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IContactListSyncManager_adaptor::SyncStatusChanged)->_add_SyncStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IContactListSyncManager_adaptor::SyncStatusChanged)->_remove_SyncStatusChanged(token)); }
		} SyncStatusChanged;
	};
	ptr<Foundation::IAsyncOperation<bool>> SyncAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_SyncAsync(&result)); return from_abi(result); }
	IContactListSyncManager_adaptor() {}
};
template<typename X> struct adapt<IContactListSyncManager, X> : Windows::ApplicationModel::Contacts::IContactListSyncManager_adaptor<X> { typedef adapt IContactListSyncManager; };
struct IContactListSyncManager : IContactListSyncManager_raw, generate<IContactListSyncManager> {};

// ContactListSyncManager
template<typename X> struct statics<ContactListSyncManager, X> : X {
	typedef typename X::root_type ContactListSyncManager;
};
struct ContactListSyncManager : generate<ContactListSyncManager> {
	using IContactListSyncManager::LastAttemptedSyncTime;
	using IContactListSyncManager::Status;
	using IContactListSyncManager::LastSuccessfulSyncTime;
};

// IContactListSyncConstraints
struct IContactListSyncConstraints_raw : IInspectable {
	virtual STDMETHODIMP _get_CanSyncDescriptions(bool *value);
	virtual STDMETHODIMP _put_CanSyncDescriptions(bool value);
	virtual STDMETHODIMP _get_MaxHomePhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxHomePhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxMobilePhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxMobilePhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxWorkPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxWorkPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxOtherPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxOtherPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxPagerPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxPagerPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxBusinessFaxPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxBusinessFaxPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxHomeFaxPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxHomeFaxPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxCompanyPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxCompanyPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxAssistantPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxAssistantPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxRadioPhoneNumbers(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxRadioPhoneNumbers(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxPersonalEmailAddresses(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxPersonalEmailAddresses(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxWorkEmailAddresses(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxWorkEmailAddresses(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxOtherEmailAddresses(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxOtherEmailAddresses(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxHomeAddresses(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxHomeAddresses(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxWorkAddresses(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxWorkAddresses(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxOtherAddresses(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxOtherAddresses(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxBirthdayDates(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxBirthdayDates(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxAnniversaryDates(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxAnniversaryDates(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxOtherDates(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxOtherDates(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxOtherRelationships(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxOtherRelationships(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxSpouseRelationships(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxSpouseRelationships(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxPartnerRelationships(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxPartnerRelationships(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxSiblingRelationships(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxSiblingRelationships(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxParentRelationships(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxParentRelationships(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxChildRelationships(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxChildRelationships(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxJobInfo(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxJobInfo(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_MaxWebsites(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_MaxWebsites(Foundation::IReference<int>* value);
};
template<typename X> struct IContactListSyncConstraints_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContactListSyncConstraints_adaptor::CanSyncDescriptions)->_get_CanSyncDescriptions(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::CanSyncDescriptions)->_put_CanSyncDescriptions(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanSyncDescriptions;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxAnniversaryDates)->_get_MaxAnniversaryDates(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxAnniversaryDates)->_put_MaxAnniversaryDates(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxAnniversaryDates;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxAssistantPhoneNumbers)->_get_MaxAssistantPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxAssistantPhoneNumbers)->_put_MaxAssistantPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxAssistantPhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxBirthdayDates)->_get_MaxBirthdayDates(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxBirthdayDates)->_put_MaxBirthdayDates(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxBirthdayDates;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxBusinessFaxPhoneNumbers)->_get_MaxBusinessFaxPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxBusinessFaxPhoneNumbers)->_put_MaxBusinessFaxPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxBusinessFaxPhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxChildRelationships)->_get_MaxChildRelationships(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxChildRelationships)->_put_MaxChildRelationships(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxChildRelationships;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxCompanyPhoneNumbers)->_get_MaxCompanyPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxCompanyPhoneNumbers)->_put_MaxCompanyPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxCompanyPhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxHomeAddresses)->_get_MaxHomeAddresses(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxHomeAddresses)->_put_MaxHomeAddresses(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxHomeAddresses;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxHomeFaxPhoneNumbers)->_get_MaxHomeFaxPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxHomeFaxPhoneNumbers)->_put_MaxHomeFaxPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxHomeFaxPhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxHomePhoneNumbers)->_get_MaxHomePhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxHomePhoneNumbers)->_put_MaxHomePhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxHomePhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxJobInfo)->_get_MaxJobInfo(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxJobInfo)->_put_MaxJobInfo(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxJobInfo;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxMobilePhoneNumbers)->_get_MaxMobilePhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxMobilePhoneNumbers)->_put_MaxMobilePhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxMobilePhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherAddresses)->_get_MaxOtherAddresses(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherAddresses)->_put_MaxOtherAddresses(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxOtherAddresses;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherDates)->_get_MaxOtherDates(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherDates)->_put_MaxOtherDates(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxOtherDates;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherEmailAddresses)->_get_MaxOtherEmailAddresses(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherEmailAddresses)->_put_MaxOtherEmailAddresses(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxOtherEmailAddresses;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherPhoneNumbers)->_get_MaxOtherPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherPhoneNumbers)->_put_MaxOtherPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxOtherPhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherRelationships)->_get_MaxOtherRelationships(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxOtherRelationships)->_put_MaxOtherRelationships(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxOtherRelationships;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxPagerPhoneNumbers)->_get_MaxPagerPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxPagerPhoneNumbers)->_put_MaxPagerPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxPagerPhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxParentRelationships)->_get_MaxParentRelationships(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxParentRelationships)->_put_MaxParentRelationships(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxParentRelationships;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxPartnerRelationships)->_get_MaxPartnerRelationships(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxPartnerRelationships)->_put_MaxPartnerRelationships(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxPartnerRelationships;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxPersonalEmailAddresses)->_get_MaxPersonalEmailAddresses(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxPersonalEmailAddresses)->_put_MaxPersonalEmailAddresses(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxPersonalEmailAddresses;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxRadioPhoneNumbers)->_get_MaxRadioPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxRadioPhoneNumbers)->_put_MaxRadioPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxRadioPhoneNumbers;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxSiblingRelationships)->_get_MaxSiblingRelationships(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxSiblingRelationships)->_put_MaxSiblingRelationships(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxSiblingRelationships;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxSpouseRelationships)->_get_MaxSpouseRelationships(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxSpouseRelationships)->_put_MaxSpouseRelationships(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxSpouseRelationships;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWebsites)->_get_MaxWebsites(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWebsites)->_put_MaxWebsites(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxWebsites;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWorkAddresses)->_get_MaxWorkAddresses(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWorkAddresses)->_put_MaxWorkAddresses(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxWorkAddresses;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWorkEmailAddresses)->_get_MaxWorkEmailAddresses(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWorkEmailAddresses)->_put_MaxWorkEmailAddresses(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxWorkEmailAddresses;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWorkPhoneNumbers)->_get_MaxWorkPhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactListSyncConstraints_adaptor::MaxWorkPhoneNumbers)->_put_MaxWorkPhoneNumbers(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} MaxWorkPhoneNumbers;
	};
	IContactListSyncConstraints_adaptor() {}
};
template<typename X> struct adapt<IContactListSyncConstraints, X> : Windows::ApplicationModel::Contacts::IContactListSyncConstraints_adaptor<X> { typedef adapt IContactListSyncConstraints; };
struct IContactListSyncConstraints : IContactListSyncConstraints_raw, generate<IContactListSyncConstraints> {};

// ContactListSyncConstraints
template<typename X> struct statics<ContactListSyncConstraints, X> : X {
	typedef typename X::root_type ContactListSyncConstraints;
};
struct ContactListSyncConstraints : generate<ContactListSyncConstraints> {};

// IContactListLimitedWriteOperations
struct IContactListLimitedWriteOperations_raw : IInspectable {
	virtual STDMETHODIMP _TryCreateOrUpdateContactAsync(Contact* contact, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDeleteContactAsync(HSTRING contactId, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IContactListLimitedWriteOperations_adaptor : X {
	ptr<Foundation::IAsyncOperation<bool>> TryCreateOrUpdateContactAsync(pptr<Contact> contact) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryCreateOrUpdateContactAsync(contact, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDeleteContactAsync(hstring_ref contactId) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDeleteContactAsync(contactId, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IContactListLimitedWriteOperations, X> : Windows::ApplicationModel::Contacts::IContactListLimitedWriteOperations_adaptor<X> { typedef adapt IContactListLimitedWriteOperations; };
struct IContactListLimitedWriteOperations : IContactListLimitedWriteOperations_raw, generate<IContactListLimitedWriteOperations> {};

// ContactListLimitedWriteOperations
template<typename X> struct statics<ContactListLimitedWriteOperations, X> : X {
	typedef typename X::root_type ContactListLimitedWriteOperations;
};
struct ContactListLimitedWriteOperations : generate<ContactListLimitedWriteOperations> {};

// IContactChange
struct IContactChange_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeType(ContactChangeType *value);
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value);
};
template<typename X> struct IContactChange_adaptor : X {
	union {
		struct : property {
			ContactChangeType get() { ContactChangeType value; hrcheck(enc(&IContactChange_adaptor::ChangeType)->_get_ChangeType(&value)); return value; }
			ContactChangeType operator()() { return get(); }
			operator ContactChangeType () { return get(); }
		} ChangeType;
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IContactChange_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
		} Contact;
	};
	IContactChange_adaptor() {}
};
template<typename X> struct adapt<IContactChange, X> : Windows::ApplicationModel::Contacts::IContactChange_adaptor<X> { typedef adapt IContactChange; };
struct IContactChange : IContactChange_raw, generate<IContactChange> {};

// IContactChangedDeferral
struct IContactChangedDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IContactChangedDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IContactChangedDeferral, X> : Windows::ApplicationModel::Contacts::IContactChangedDeferral_adaptor<X> { typedef adapt IContactChangedDeferral; };
struct IContactChangedDeferral : IContactChangedDeferral_raw, generate<IContactChangedDeferral> {};

// ContactChangedDeferral
template<typename X> struct statics<ContactChangedDeferral, X> : X {
	typedef typename X::root_type ContactChangedDeferral;
};
struct ContactChangedDeferral : generate<ContactChangedDeferral> {};

// IContactChangeReader
struct IContactChangeReader_raw : IInspectable {
	virtual STDMETHODIMP _AcceptChanges();
	virtual STDMETHODIMP _AcceptChangesThrough(ContactChange* lastChangeToAccept);
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactChange*>*>* *value);
};
template<typename X> struct IContactChangeReader_adaptor : X {
	void AcceptChanges() { hrcheck(X::get()->_AcceptChanges()); }
	void AcceptChangesThrough(pptr<ContactChange> lastChangeToAccept) { hrcheck(X::get()->_AcceptChangesThrough(lastChangeToAccept)); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactChange>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactChange*>*>* value; hrcheck(X::get()->_ReadBatchAsync(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IContactChangeReader, X> : Windows::ApplicationModel::Contacts::IContactChangeReader_adaptor<X> { typedef adapt IContactChangeReader; };
struct IContactChangeReader : IContactChangeReader_raw, generate<IContactChangeReader> {};

// ContactChange
template<typename X> struct statics<ContactChange, X> : X {
	typedef typename X::root_type ContactChange;
};
struct ContactChange : generate<ContactChange> {};

// ContactChangeReader
template<typename X> struct statics<ContactChangeReader, X> : X {
	typedef typename X::root_type ContactChangeReader;
};
struct ContactChangeReader : generate<ContactChangeReader> {};

// IContactBatch
struct IContactBatch_raw : IInspectable {
	virtual STDMETHODIMP _get_Contacts(Foundation::Collections::IVectorView<Contact*>* *value);
	virtual STDMETHODIMP _get_Status(ContactBatchStatus *value);
};
template<typename X> struct IContactBatch_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Contact>>> get() { Foundation::Collections::IVectorView<Contact*>* value; hrcheck(enc(&IContactBatch_adaptor::Contacts)->_get_Contacts(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Contact>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Contact>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Contact>>> operator->() { return get(); }
		} Contacts;
		struct : property {
			ContactBatchStatus get() { ContactBatchStatus value; hrcheck(enc(&IContactBatch_adaptor::Status)->_get_Status(&value)); return value; }
			ContactBatchStatus operator()() { return get(); }
			operator ContactBatchStatus () { return get(); }
		} Status;
	};
	IContactBatch_adaptor() {}
};
template<typename X> struct adapt<IContactBatch, X> : Windows::ApplicationModel::Contacts::IContactBatch_adaptor<X> { typedef adapt IContactBatch; };
struct IContactBatch : IContactBatch_raw, generate<IContactBatch> {};

// ContactBatch
template<typename X> struct statics<ContactBatch, X> : X {
	typedef typename X::root_type ContactBatch;
};
struct ContactBatch : generate<ContactBatch> {};

// IContactMatchReason
struct IContactMatchReason_raw : IInspectable {
	virtual STDMETHODIMP _get_Field(ContactMatchReasonKind *value);
	virtual STDMETHODIMP _get_Segments(Foundation::Collections::IVectorView<Data::Text::TextSegment>* *value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
};
template<typename X> struct IContactMatchReason_adaptor : X {
	union {
		struct : property {
			ContactMatchReasonKind get() { ContactMatchReasonKind value; hrcheck(enc(&IContactMatchReason_adaptor::Field)->_get_Field(&value)); return value; }
			ContactMatchReasonKind operator()() { return get(); }
			operator ContactMatchReasonKind () { return get(); }
		} Field;
		struct : property {
			ptr<Foundation::Collections::IVectorView<Data::Text::TextSegment>> get() { Foundation::Collections::IVectorView<Data::Text::TextSegment>* value; hrcheck(enc(&IContactMatchReason_adaptor::Segments)->_get_Segments(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<Data::Text::TextSegment>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<Data::Text::TextSegment>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<Data::Text::TextSegment>> operator->() { return get(); }
		} Segments;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactMatchReason_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text;
	};
	IContactMatchReason_adaptor() {}
};
template<typename X> struct adapt<IContactMatchReason, X> : Windows::ApplicationModel::Contacts::IContactMatchReason_adaptor<X> { typedef adapt IContactMatchReason; };
struct IContactMatchReason : IContactMatchReason_raw, generate<IContactMatchReason> {};

// ContactMatchReason
template<typename X> struct statics<ContactMatchReason, X> : X {
	typedef typename X::root_type ContactMatchReason;
};
struct ContactMatchReason : generate<ContactMatchReason> {};

// IContactQueryTextSearch
struct IContactQueryTextSearch_raw : IInspectable {
	virtual STDMETHODIMP _get_Fields(ContactQuerySearchFields *value);
	virtual STDMETHODIMP _put_Fields(ContactQuerySearchFields value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
	virtual STDMETHODIMP _get_SearchScope(ContactQuerySearchScope *value);
	virtual STDMETHODIMP _put_SearchScope(ContactQuerySearchScope value);
};
template<typename X> struct IContactQueryTextSearch_adaptor : X {
	union {
		struct : property {
			ContactQuerySearchFields get() { ContactQuerySearchFields value; hrcheck(enc(&IContactQueryTextSearch_adaptor::Fields)->_get_Fields(&value)); return value; }
			ContactQuerySearchFields operator()() { return get(); }
			operator ContactQuerySearchFields () { return get(); }
			void put(ContactQuerySearchFields value) { hrcheck(enc(&IContactQueryTextSearch_adaptor::Fields)->_put_Fields(value)); }
			void operator=(ContactQuerySearchFields value) { put(value); }
			void operator()(ContactQuerySearchFields value) { put(value); }
		} Fields;
		struct : property {
			ContactQuerySearchScope get() { ContactQuerySearchScope value; hrcheck(enc(&IContactQueryTextSearch_adaptor::SearchScope)->_get_SearchScope(&value)); return value; }
			ContactQuerySearchScope operator()() { return get(); }
			operator ContactQuerySearchScope () { return get(); }
			void put(ContactQuerySearchScope value) { hrcheck(enc(&IContactQueryTextSearch_adaptor::SearchScope)->_put_SearchScope(value)); }
			void operator=(ContactQuerySearchScope value) { put(value); }
			void operator()(ContactQuerySearchScope value) { put(value); }
		} SearchScope;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactQueryTextSearch_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactQueryTextSearch_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
	};
	IContactQueryTextSearch_adaptor() {}
};
template<typename X> struct adapt<IContactQueryTextSearch, X> : Windows::ApplicationModel::Contacts::IContactQueryTextSearch_adaptor<X> { typedef adapt IContactQueryTextSearch; };
struct IContactQueryTextSearch : IContactQueryTextSearch_raw, generate<IContactQueryTextSearch> {};

// ContactQueryTextSearch
template<typename X> struct statics<ContactQueryTextSearch, X> : X {
	typedef typename X::root_type ContactQueryTextSearch;
};
struct ContactQueryTextSearch : generate<ContactQueryTextSearch> {};

// IContactLaunchActionVerbsStatics
struct IContactLaunchActionVerbsStatics : IInspectable {
	virtual STDMETHODIMP _get_Call(HSTRING *value);
	virtual STDMETHODIMP _get_Message(HSTRING *value);
	virtual STDMETHODIMP _get_Map(HSTRING *value);
	virtual STDMETHODIMP _get_Post(HSTRING *value);
	virtual STDMETHODIMP _get_VideoCall(HSTRING *value);
};

// IContactGroup
struct IContactGroup : IInspectable, generate<IContactGroup> {};

// ContactStoreNotificationTriggerDetails
template<typename X> struct statics<ContactStoreNotificationTriggerDetails, X> : X {
	typedef typename X::root_type ContactStoreNotificationTriggerDetails;
};
struct ContactStoreNotificationTriggerDetails : generate<ContactStoreNotificationTriggerDetails> {};

// ContactManager
template<typename> struct ContactManager_statics {
	static struct _SystemDisplayNameOrder : property {
		ContactNameOrder get() { ContactNameOrder value; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_get_SystemDisplayNameOrder(&value)); return value; }
		ContactNameOrder operator()() { return get(); }
		operator ContactNameOrder () { return get(); }
		void put(ContactNameOrder value) { hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_put_SystemDisplayNameOrder(value)); }
		void operator=(ContactNameOrder value) { put(value); }
		void operator()(ContactNameOrder value) { put(value); }
	} SystemDisplayNameOrder;
	static struct _SystemSortOrder : property {
		ContactNameOrder get() { ContactNameOrder value; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_get_SystemSortOrder(&value)); return value; }
		ContactNameOrder operator()() { return get(); }
		operator ContactNameOrder () { return get(); }
		void put(ContactNameOrder value) { hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_put_SystemSortOrder(value)); }
		void operator=(ContactNameOrder value) { put(value); }
		void operator()(ContactNameOrder value) { put(value); }
	} SystemSortOrder;
	static struct _IncludeMiddleNameInSystemDisplayAndSort : property {
		bool get() { bool value; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics5>()->_get_IncludeMiddleNameInSystemDisplayAndSort(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<ContactManager, IContactManagerStatics5>()->_put_IncludeMiddleNameInSystemDisplayAndSort(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} IncludeMiddleNameInSystemDisplayAndSort;
	static ptr<Foundation::IAsyncOperation<bool>> IsShowFullContactCardSupportedAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics5>()->_IsShowFullContactCardSupportedAsync(&result)); return from_abi(result); }
	static ptr<ContactManagerForUser> GetForUser(pptr<System::User> user) { ContactManagerForUser* result; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics4>()->_GetForUser(user, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::RandomAccessStreamReference>>> ConvertContactToVCardAsync(pptr<Contact> contact) { Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* vCard; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_ConvertContactToVCardAsync(contact, &vCard)); return from_abi(vCard); }
	static ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::RandomAccessStreamReference>>> ConvertContactToVCardAsync(pptr<Contact> contact, unsigned maxBytes) { Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* vCard; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_ConvertContactToVCardAsyncWithMaxBytes(contact, maxBytes, &vCard)); return from_abi(vCard); }
	static ptr<Foundation::IAsyncOperation<ptr<Contact>>> ConvertVCardToContactAsync(pptr<Storage::Streams::IRandomAccessStreamReference> vCard) { Foundation::IAsyncOperation<Contact*>* contact; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_ConvertVCardToContactAsync(vCard, &contact)); return from_abi(contact); }
	static ptr<Foundation::IAsyncOperation<ptr<ContactStore>>> RequestStoreAsync(ContactStoreAccessType accessType) { Foundation::IAsyncOperation<ContactStore*>* store; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_RequestStoreAsyncWithAccessType(accessType, &store)); return from_abi(store); }
	static ptr<Foundation::IAsyncOperation<ptr<ContactAnnotationStore>>> RequestAnnotationStoreAsync(ContactAnnotationStoreAccessType accessType) { Foundation::IAsyncOperation<ContactAnnotationStore*>* store; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_RequestAnnotationStoreAsync(accessType, &store)); return from_abi(store); }
	static bool IsShowContactCardSupported() { bool result; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_IsShowContactCardSupported(&result)); return result; }
	static void ShowContactCard(pptr<Contact> contact, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, pptr<ContactCardOptions> contactCardOptions) { hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_ShowContactCardWithOptions(contact, selection, preferredPlacement, contactCardOptions)); }
	static bool IsShowDelayLoadedContactCardSupported() { bool result; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_IsShowDelayLoadedContactCardSupported(&result)); return result; }
	static ptr<ContactCardDelayedDataLoader> ShowDelayLoadedContactCard(pptr<Contact> contact, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, pptr<ContactCardOptions> contactCardOptions) { ContactCardDelayedDataLoader* dataLoader; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_ShowDelayLoadedContactCardWithOptions(contact, selection, preferredPlacement, contactCardOptions, &dataLoader)); return from_abi(dataLoader); }
	static void ShowFullContactCard(pptr<Contact> contact, pptr<FullContactCardOptions> fullContactCardOptions) { hrcheck(get_activation_factory<ContactManager, IContactManagerStatics3>()->_ShowFullContactCard(contact, fullContactCardOptions)); }
	static ptr<Foundation::IAsyncOperation<ptr<ContactStore>>> RequestStoreAsync() { Foundation::IAsyncOperation<ContactStore*>* store; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics2>()->_RequestStoreAsync(&store)); return from_abi(store); }
	static void ShowContactCard(pptr<Contact> contact, const Foundation::Rect& selection) { hrcheck(get_activation_factory<ContactManager, IContactManagerStatics>()->_ShowContactCard(contact, selection)); }
	static void ShowContactCard(pptr<Contact> contact, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { hrcheck(get_activation_factory<ContactManager, IContactManagerStatics>()->_ShowContactCardWithPlacement(contact, selection, preferredPlacement)); }
	static ptr<ContactCardDelayedDataLoader> ShowDelayLoadedContactCard(pptr<Contact> contact, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { ContactCardDelayedDataLoader* dataLoader; hrcheck(get_activation_factory<ContactManager, IContactManagerStatics>()->_ShowDelayLoadedContactCard(contact, selection, preferredPlacement, &dataLoader)); return from_abi(dataLoader); }
};
template<typename X> typename ContactManager_statics<X>::_SystemDisplayNameOrder ContactManager_statics<X>::SystemDisplayNameOrder;
template<typename X> typename ContactManager_statics<X>::_SystemSortOrder ContactManager_statics<X>::SystemSortOrder;
template<typename X> typename ContactManager_statics<X>::_IncludeMiddleNameInSystemDisplayAndSort ContactManager_statics<X>::IncludeMiddleNameInSystemDisplayAndSort;

template<typename X> struct statics<ContactManager, X> : X, Windows::ApplicationModel::Contacts::ContactManager_statics<void> {
	typedef typename X::root_type ContactManager;
};
struct ContactManager : generate<ContactManager> {};

// ContactLaunchActionVerbs
template<typename> struct ContactLaunchActionVerbs_statics {
	static struct _Call : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>()->_get_Call(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Call;
	static struct _Map : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>()->_get_Map(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Map;
	static struct _Message : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>()->_get_Message(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Message;
	static struct _Post : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>()->_get_Post(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Post;
	static struct _VideoCall : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>()->_get_VideoCall(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} VideoCall;
};
template<typename X> typename ContactLaunchActionVerbs_statics<X>::_Call ContactLaunchActionVerbs_statics<X>::Call;
template<typename X> typename ContactLaunchActionVerbs_statics<X>::_Map ContactLaunchActionVerbs_statics<X>::Map;
template<typename X> typename ContactLaunchActionVerbs_statics<X>::_Message ContactLaunchActionVerbs_statics<X>::Message;
template<typename X> typename ContactLaunchActionVerbs_statics<X>::_Post ContactLaunchActionVerbs_statics<X>::Post;
template<typename X> typename ContactLaunchActionVerbs_statics<X>::_VideoCall ContactLaunchActionVerbs_statics<X>::VideoCall;

template<typename X> struct statics<ContactLaunchActionVerbs, X> : X, Windows::ApplicationModel::Contacts::ContactLaunchActionVerbs_statics<void> {
	typedef typename X::root_type ContactLaunchActionVerbs;
};
struct ContactLaunchActionVerbs : generate<ContactLaunchActionVerbs> {};

// ContactGroup
template<typename X> struct statics<ContactGroup, X> : X {
	typedef typename X::root_type ContactGroup;
};
struct ContactGroup : generate<ContactGroup> {};

// IContactPicker
struct IContactPicker_raw : IInspectable {
	virtual STDMETHODIMP _get_CommitButtonText(HSTRING *value);
	virtual STDMETHODIMP _put_CommitButtonText(HSTRING value);
	virtual STDMETHODIMP _get_SelectionMode(ContactSelectionMode *value);
	virtual STDMETHODIMP _put_SelectionMode(ContactSelectionMode value);
	virtual STDMETHODIMP _get_DesiredFields(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _PickSingleContactAsync(Foundation::IAsyncOperation<ContactInformation*>* *result);
	virtual STDMETHODIMP _PickMultipleContactsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactInformation*>*>* *result);
};
template<typename X> struct IContactPicker_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactPicker_adaptor::CommitButtonText)->_get_CommitButtonText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactPicker_adaptor::CommitButtonText)->_put_CommitButtonText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CommitButtonText;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IContactPicker_adaptor::DesiredFields)->_get_DesiredFields(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} DesiredFields;
		struct : property {
			ContactSelectionMode get() { ContactSelectionMode value; hrcheck(enc(&IContactPicker_adaptor::SelectionMode)->_get_SelectionMode(&value)); return value; }
			ContactSelectionMode operator()() { return get(); }
			operator ContactSelectionMode () { return get(); }
			void put(ContactSelectionMode value) { hrcheck(enc(&IContactPicker_adaptor::SelectionMode)->_put_SelectionMode(value)); }
			void operator=(ContactSelectionMode value) { put(value); }
			void operator()(ContactSelectionMode value) { put(value); }
		} SelectionMode;
	};
	ptr<Foundation::IAsyncOperation<ptr<ContactInformation>>> PickSingleContactAsync() { Foundation::IAsyncOperation<ContactInformation*>* result; hrcheck(X::get()->_PickSingleContactAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactInformation>>>>> PickMultipleContactsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactInformation*>*>* result; hrcheck(X::get()->_PickMultipleContactsAsync(&result)); return from_abi(result); }
	IContactPicker_adaptor() {}
};
template<typename X> struct adapt<IContactPicker, X> : Windows::ApplicationModel::Contacts::IContactPicker_adaptor<X> { typedef adapt IContactPicker; };
struct IContactPicker : IContactPicker_raw, generate<IContactPicker> {};

// IContactPicker2
struct IContactPicker2_raw : IInspectable {
	virtual STDMETHODIMP _get_DesiredFieldsWithContactFieldType(Foundation::Collections::IVector<ContactFieldType>* *value);
	virtual STDMETHODIMP _PickContactAsync(Foundation::IAsyncOperation<Contact*>* *result);
	virtual STDMETHODIMP _PickContactsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVector<Contact*>*>* *result);
};
template<typename X> struct IContactPicker2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ContactFieldType>> get() { Foundation::Collections::IVector<ContactFieldType>* value; hrcheck(enc(&IContactPicker2_adaptor::DesiredFieldsWithContactFieldType)->_get_DesiredFieldsWithContactFieldType(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ContactFieldType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ContactFieldType>> () { return get(); }
			ptr<Foundation::Collections::IVector<ContactFieldType>> operator->() { return get(); }
		} DesiredFieldsWithContactFieldType;
	};
	ptr<Foundation::IAsyncOperation<ptr<Contact>>> PickContactAsync() { Foundation::IAsyncOperation<Contact*>* result; hrcheck(X::get()->_PickContactAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVector<ptr<Contact>>>>> PickContactsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVector<Contact*>*>* result; hrcheck(X::get()->_PickContactsAsync(&result)); return from_abi(result); }
	IContactPicker2_adaptor() {}
};
template<typename X> struct adapt<IContactPicker2, X> : Windows::ApplicationModel::Contacts::IContactPicker2_adaptor<X> { typedef adapt IContactPicker2; };
struct IContactPicker2 : IContactPicker2_raw, generate<IContactPicker2> {};

// IContactPicker3
struct IContactPicker3_raw : IInspectable {
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IContactPicker3_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IContactPicker3_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	IContactPicker3_adaptor() {}
};
template<typename X> struct adapt<IContactPicker3, X> : Windows::ApplicationModel::Contacts::IContactPicker3_adaptor<X> { typedef adapt IContactPicker3; };
struct IContactPicker3 : IContactPicker3_raw, generate<IContactPicker3> {};

// IContactPickerStatics
struct IContactPickerStatics : IInspectable {
	virtual STDMETHODIMP _CreateForUser(System::User* user, ContactPicker* *result);
	virtual STDMETHODIMP _IsSupportedAsync(Foundation::IAsyncOperation<bool>* *result);
};

// ContactPicker
template<typename> struct ContactPicker_statics {
	static ptr<ContactPicker> CreateForUser(pptr<System::User> user) { ContactPicker* result; hrcheck(get_activation_factory<ContactPicker, IContactPickerStatics>()->_CreateForUser(user, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<bool>> IsSupportedAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(get_activation_factory<ContactPicker, IContactPickerStatics>()->_IsSupportedAsync(&result)); return from_abi(result); }
};

template<typename X> struct statics<ContactPicker, X> : X, Windows::ApplicationModel::Contacts::ContactPicker_statics<void> {
	typedef typename X::root_type ContactPicker;
};
struct ContactPicker : generate<ContactPicker> {};

// IContactConnectedServiceAccount
struct IContactConnectedServiceAccount_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_ServiceName(HSTRING *value);
	virtual STDMETHODIMP _put_ServiceName(HSTRING value);
};
template<typename X> struct IContactConnectedServiceAccount_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactConnectedServiceAccount_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactConnectedServiceAccount_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactConnectedServiceAccount_adaptor::ServiceName)->_get_ServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactConnectedServiceAccount_adaptor::ServiceName)->_put_ServiceName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ServiceName;
	};
	IContactConnectedServiceAccount_adaptor() {}
};
template<typename X> struct adapt<IContactConnectedServiceAccount, X> : Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount_adaptor<X> { typedef adapt IContactConnectedServiceAccount; };
struct IContactConnectedServiceAccount : IContactConnectedServiceAccount_raw, generate<IContactConnectedServiceAccount> {};

// IContactSignificantOther
struct IContactSignificantOther_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
};
template<typename X> struct IContactSignificantOther_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactSignificantOther_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactSignificantOther_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactSignificantOther_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactSignificantOther_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
	};
	IContactSignificantOther_adaptor() {}
};
template<typename X> struct adapt<IContactSignificantOther, X> : Windows::ApplicationModel::Contacts::IContactSignificantOther_adaptor<X> { typedef adapt IContactSignificantOther; };
struct IContactSignificantOther : IContactSignificantOther_raw, generate<IContactSignificantOther> {};

// IContactSignificantOther2
struct IContactSignificantOther2_raw : IInspectable {
	virtual STDMETHODIMP _get_Relationship(ContactRelationship *value);
	virtual STDMETHODIMP _put_Relationship(ContactRelationship value);
};
template<typename X> struct IContactSignificantOther2_adaptor : X {
	union {
		struct : property {
			ContactRelationship get() { ContactRelationship value; hrcheck(enc(&IContactSignificantOther2_adaptor::Relationship)->_get_Relationship(&value)); return value; }
			ContactRelationship operator()() { return get(); }
			operator ContactRelationship () { return get(); }
			void put(ContactRelationship value) { hrcheck(enc(&IContactSignificantOther2_adaptor::Relationship)->_put_Relationship(value)); }
			void operator=(ContactRelationship value) { put(value); }
			void operator()(ContactRelationship value) { put(value); }
		} Relationship;
	};
	IContactSignificantOther2_adaptor() {}
};
template<typename X> struct adapt<IContactSignificantOther2, X> : Windows::ApplicationModel::Contacts::IContactSignificantOther2_adaptor<X> { typedef adapt IContactSignificantOther2; };
struct IContactSignificantOther2 : IContactSignificantOther2_raw, generate<IContactSignificantOther2> {};

// IContactWebsite
struct IContactWebsite_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
};
template<typename X> struct IContactWebsite_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactWebsite_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactWebsite_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IContactWebsite_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IContactWebsite_adaptor::Uri)->_put_Uri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Uri;
	};
	IContactWebsite_adaptor() {}
};
template<typename X> struct adapt<IContactWebsite, X> : Windows::ApplicationModel::Contacts::IContactWebsite_adaptor<X> { typedef adapt IContactWebsite; };
struct IContactWebsite : IContactWebsite_raw, generate<IContactWebsite> {};

// IContactWebsite2
struct IContactWebsite2_raw : IInspectable {
	virtual STDMETHODIMP _get_RawValue(HSTRING *value);
	virtual STDMETHODIMP _put_RawValue(HSTRING value);
};
template<typename X> struct IContactWebsite2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactWebsite2_adaptor::RawValue)->_get_RawValue(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactWebsite2_adaptor::RawValue)->_put_RawValue(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RawValue;
	};
	IContactWebsite2_adaptor() {}
};
template<typename X> struct adapt<IContactWebsite2, X> : Windows::ApplicationModel::Contacts::IContactWebsite2_adaptor<X> { typedef adapt IContactWebsite2; };
struct IContactWebsite2 : IContactWebsite2_raw, generate<IContactWebsite2> {};

// IContactEmail
struct IContactEmail_raw : IInspectable {
	virtual STDMETHODIMP _get_Address(HSTRING *value);
	virtual STDMETHODIMP _put_Address(HSTRING value);
	virtual STDMETHODIMP _get_Kind(ContactEmailKind *value);
	virtual STDMETHODIMP _put_Kind(ContactEmailKind value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
};
template<typename X> struct IContactEmail_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactEmail_adaptor::Address)->_get_Address(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactEmail_adaptor::Address)->_put_Address(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Address;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactEmail_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactEmail_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			ContactEmailKind get() { ContactEmailKind value; hrcheck(enc(&IContactEmail_adaptor::Kind)->_get_Kind(&value)); return value; }
			ContactEmailKind operator()() { return get(); }
			operator ContactEmailKind () { return get(); }
			void put(ContactEmailKind value) { hrcheck(enc(&IContactEmail_adaptor::Kind)->_put_Kind(value)); }
			void operator=(ContactEmailKind value) { put(value); }
			void operator()(ContactEmailKind value) { put(value); }
		} Kind;
	};
	IContactEmail_adaptor() {}
};
template<typename X> struct adapt<IContactEmail, X> : Windows::ApplicationModel::Contacts::IContactEmail_adaptor<X> { typedef adapt IContactEmail; };
struct IContactEmail : IContactEmail_raw, generate<IContactEmail> {};

// IContactPhone
struct IContactPhone_raw : IInspectable {
	virtual STDMETHODIMP _get_Number(HSTRING *value);
	virtual STDMETHODIMP _put_Number(HSTRING value);
	virtual STDMETHODIMP _get_Kind(ContactPhoneKind *value);
	virtual STDMETHODIMP _put_Kind(ContactPhoneKind value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
};
template<typename X> struct IContactPhone_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactPhone_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactPhone_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			ContactPhoneKind get() { ContactPhoneKind value; hrcheck(enc(&IContactPhone_adaptor::Kind)->_get_Kind(&value)); return value; }
			ContactPhoneKind operator()() { return get(); }
			operator ContactPhoneKind () { return get(); }
			void put(ContactPhoneKind value) { hrcheck(enc(&IContactPhone_adaptor::Kind)->_put_Kind(value)); }
			void operator=(ContactPhoneKind value) { put(value); }
			void operator()(ContactPhoneKind value) { put(value); }
		} Kind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactPhone_adaptor::Number)->_get_Number(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactPhone_adaptor::Number)->_put_Number(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Number;
	};
	IContactPhone_adaptor() {}
};
template<typename X> struct adapt<IContactPhone, X> : Windows::ApplicationModel::Contacts::IContactPhone_adaptor<X> { typedef adapt IContactPhone; };
struct IContactPhone : IContactPhone_raw, generate<IContactPhone> {};

// IContactAddress
struct IContactAddress_raw : IInspectable {
	virtual STDMETHODIMP _get_StreetAddress(HSTRING *value);
	virtual STDMETHODIMP _put_StreetAddress(HSTRING value);
	virtual STDMETHODIMP _get_Locality(HSTRING *value);
	virtual STDMETHODIMP _put_Locality(HSTRING value);
	virtual STDMETHODIMP _get_Region(HSTRING *value);
	virtual STDMETHODIMP _put_Region(HSTRING value);
	virtual STDMETHODIMP _get_Country(HSTRING *value);
	virtual STDMETHODIMP _put_Country(HSTRING value);
	virtual STDMETHODIMP _get_PostalCode(HSTRING *value);
	virtual STDMETHODIMP _put_PostalCode(HSTRING value);
	virtual STDMETHODIMP _get_Kind(ContactAddressKind *value);
	virtual STDMETHODIMP _put_Kind(ContactAddressKind value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
};
template<typename X> struct IContactAddress_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::Country)->_get_Country(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::Country)->_put_Country(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Country;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			ContactAddressKind get() { ContactAddressKind value; hrcheck(enc(&IContactAddress_adaptor::Kind)->_get_Kind(&value)); return value; }
			ContactAddressKind operator()() { return get(); }
			operator ContactAddressKind () { return get(); }
			void put(ContactAddressKind value) { hrcheck(enc(&IContactAddress_adaptor::Kind)->_put_Kind(value)); }
			void operator=(ContactAddressKind value) { put(value); }
			void operator()(ContactAddressKind value) { put(value); }
		} Kind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::Locality)->_get_Locality(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::Locality)->_put_Locality(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Locality;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::PostalCode)->_get_PostalCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::PostalCode)->_put_PostalCode(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PostalCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::Region)->_get_Region(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::Region)->_put_Region(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Region;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::StreetAddress)->_get_StreetAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::StreetAddress)->_put_StreetAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} StreetAddress;
	};
	IContactAddress_adaptor() {}
};
template<typename X> struct adapt<IContactAddress, X> : Windows::ApplicationModel::Contacts::IContactAddress_adaptor<X> { typedef adapt IContactAddress; };
struct IContactAddress : IContactAddress_raw, generate<IContactAddress> {};

// IContactDate
struct IContactDate_raw : IInspectable {
	virtual STDMETHODIMP _get_Day(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_Day(Foundation::IReference<unsigned>* value);
	virtual STDMETHODIMP _get_Month(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_Month(Foundation::IReference<unsigned>* value);
	virtual STDMETHODIMP _get_Year(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_Year(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_Kind(ContactDateKind *value);
	virtual STDMETHODIMP _put_Kind(ContactDateKind value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
};
template<typename X> struct IContactDate_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IContactDate_adaptor::Day)->_get_Day(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IContactDate_adaptor::Day)->_put_Day(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} Day;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactDate_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactDate_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			ContactDateKind get() { ContactDateKind value; hrcheck(enc(&IContactDate_adaptor::Kind)->_get_Kind(&value)); return value; }
			ContactDateKind operator()() { return get(); }
			operator ContactDateKind () { return get(); }
			void put(ContactDateKind value) { hrcheck(enc(&IContactDate_adaptor::Kind)->_put_Kind(value)); }
			void operator=(ContactDateKind value) { put(value); }
			void operator()(ContactDateKind value) { put(value); }
		} Kind;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IContactDate_adaptor::Month)->_get_Month(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IContactDate_adaptor::Month)->_put_Month(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} Month;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IContactDate_adaptor::Year)->_get_Year(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IContactDate_adaptor::Year)->_put_Year(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} Year;
	};
	IContactDate_adaptor() {}
};
template<typename X> struct adapt<IContactDate, X> : Windows::ApplicationModel::Contacts::IContactDate_adaptor<X> { typedef adapt IContactDate; };
struct IContactDate : IContactDate_raw, generate<IContactDate> {};

// IContactJobInfo
struct IContactJobInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_CompanyName(HSTRING *value);
	virtual STDMETHODIMP _put_CompanyName(HSTRING value);
	virtual STDMETHODIMP _get_CompanyYomiName(HSTRING *value);
	virtual STDMETHODIMP _put_CompanyYomiName(HSTRING value);
	virtual STDMETHODIMP _get_Department(HSTRING *value);
	virtual STDMETHODIMP _put_Department(HSTRING value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Manager(HSTRING *value);
	virtual STDMETHODIMP _put_Manager(HSTRING value);
	virtual STDMETHODIMP _get_Office(HSTRING *value);
	virtual STDMETHODIMP _put_Office(HSTRING value);
	virtual STDMETHODIMP _get_CompanyAddress(HSTRING *value);
	virtual STDMETHODIMP _put_CompanyAddress(HSTRING value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
};
template<typename X> struct IContactJobInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::CompanyAddress)->_get_CompanyAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::CompanyAddress)->_put_CompanyAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CompanyAddress;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::CompanyName)->_get_CompanyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::CompanyName)->_put_CompanyName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CompanyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::CompanyYomiName)->_get_CompanyYomiName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::CompanyYomiName)->_put_CompanyYomiName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CompanyYomiName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::Department)->_get_Department(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::Department)->_put_Department(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Department;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::Manager)->_get_Manager(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::Manager)->_put_Manager(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Manager;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::Office)->_get_Office(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::Office)->_put_Office(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Office;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactJobInfo_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactJobInfo_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	IContactJobInfo_adaptor() {}
};
template<typename X> struct adapt<IContactJobInfo, X> : Windows::ApplicationModel::Contacts::IContactJobInfo_adaptor<X> { typedef adapt IContactJobInfo; };
struct IContactJobInfo : IContactJobInfo_raw, generate<IContactJobInfo> {};

// IContact
struct IContact_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Thumbnail(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_Fields(Foundation::Collections::IVector<IContactField*>* *value);
};
template<typename X> struct IContact_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<IContactField>>> get() { Foundation::Collections::IVector<IContactField*>* value; hrcheck(enc(&IContact_adaptor::Fields)->_get_Fields(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<IContactField>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<IContactField>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<IContactField>>> operator->() { return get(); }
		} Fields;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IContact_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IContact_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Thumbnail;
	};
	IContact_adaptor() {}
};
template<typename X> struct adapt<IContact, X> : Windows::ApplicationModel::Contacts::IContact_adaptor<X> { typedef adapt IContact; };
struct IContact : IContact_raw, generate<IContact> {};

// IContactField
struct IContactField_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(ContactFieldType *value) = 0;
	virtual STDMETHODIMP _get_Category(ContactFieldCategory *value) = 0;
	virtual STDMETHODIMP _get_Name(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Value(HSTRING *value) = 0;
};
template<typename X> struct IContactField_adaptor : X {
	union {
		struct : property {
			ContactFieldCategory get() { ContactFieldCategory value; hrcheck(enc(&IContactField_adaptor::Category)->_get_Category(&value)); return value; }
			ContactFieldCategory operator()() { return get(); }
			operator ContactFieldCategory () { return get(); }
		} Category;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactField_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ContactFieldType get() { ContactFieldType value; hrcheck(enc(&IContactField_adaptor::Type)->_get_Type(&value)); return value; }
			ContactFieldType operator()() { return get(); }
			operator ContactFieldType () { return get(); }
		} Type;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactField_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Value;
	};
	IContactField_adaptor() {}
};
template<typename X> struct adapt<IContactField, X> : Windows::ApplicationModel::Contacts::IContactField_adaptor<X> { typedef adapt IContactField; };
template<typename X> struct IContactField_unadaptor : X {
	STDMETHODIMP _get_Type(ContactFieldType *value) { return hrtry([&, this] { get_prop(value, Type); }); }
	STDMETHODIMP _get_Category(ContactFieldCategory *value) { return hrtry([&, this] { get_prop(value, Category); }); }
	STDMETHODIMP _get_Name(HSTRING *value) { return hrtry([&, this] { get_prop(value, Name); }); }
	STDMETHODIMP _get_Value(HSTRING *value) { return hrtry([&, this] { get_prop(value, Value); }); }
};
template<typename X> struct unadapt<IContactField, X> : Windows::ApplicationModel::Contacts::IContactField_unadaptor<X> {};
struct IContactField : IContactField_raw, generate<IContactField> {};

// IContactName
struct IContactName_raw : IInspectable {
	virtual STDMETHODIMP _get_FirstName(HSTRING *value);
	virtual STDMETHODIMP _put_FirstName(HSTRING value);
	virtual STDMETHODIMP _get_LastName(HSTRING *value);
	virtual STDMETHODIMP _put_LastName(HSTRING value);
	virtual STDMETHODIMP _get_MiddleName(HSTRING *value);
	virtual STDMETHODIMP _put_MiddleName(HSTRING value);
	virtual STDMETHODIMP _get_YomiGivenName(HSTRING *value);
	virtual STDMETHODIMP _put_YomiGivenName(HSTRING value);
	virtual STDMETHODIMP _get_YomiFamilyName(HSTRING *value);
	virtual STDMETHODIMP _put_YomiFamilyName(HSTRING value);
	virtual STDMETHODIMP _get_HonorificNameSuffix(HSTRING *value);
	virtual STDMETHODIMP _put_HonorificNameSuffix(HSTRING value);
	virtual STDMETHODIMP _get_HonorificNamePrefix(HSTRING *value);
	virtual STDMETHODIMP _put_HonorificNamePrefix(HSTRING value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_YomiDisplayName(HSTRING *value);
};
template<typename X> struct IContactName_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::FirstName)->_get_FirstName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactName_adaptor::FirstName)->_put_FirstName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} FirstName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::HonorificNamePrefix)->_get_HonorificNamePrefix(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactName_adaptor::HonorificNamePrefix)->_put_HonorificNamePrefix(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} HonorificNamePrefix;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::HonorificNameSuffix)->_get_HonorificNameSuffix(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactName_adaptor::HonorificNameSuffix)->_put_HonorificNameSuffix(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} HonorificNameSuffix;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::LastName)->_get_LastName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactName_adaptor::LastName)->_put_LastName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} LastName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::MiddleName)->_get_MiddleName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactName_adaptor::MiddleName)->_put_MiddleName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MiddleName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::YomiDisplayName)->_get_YomiDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} YomiDisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::YomiFamilyName)->_get_YomiFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactName_adaptor::YomiFamilyName)->_put_YomiFamilyName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} YomiFamilyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactName_adaptor::YomiGivenName)->_get_YomiGivenName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactName_adaptor::YomiGivenName)->_put_YomiGivenName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} YomiGivenName;
	};
	IContactName_adaptor() {}
};
template<typename X> struct adapt<IContactName, X> : Windows::ApplicationModel::Contacts::IContactName_adaptor<X> { typedef adapt IContactName; };
struct IContactName : IContactName_raw, generate<IContactName> {};

// IContact2
struct IContact2_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_Notes(HSTRING *value);
	virtual STDMETHODIMP _put_Notes(HSTRING value);
	virtual STDMETHODIMP _get_Phones(Foundation::Collections::IVector<ContactPhone*>* *value);
	virtual STDMETHODIMP _get_Emails(Foundation::Collections::IVector<ContactEmail*>* *value);
	virtual STDMETHODIMP _get_Addresses(Foundation::Collections::IVector<ContactAddress*>* *value);
	virtual STDMETHODIMP _get_ConnectedServiceAccounts(Foundation::Collections::IVector<ContactConnectedServiceAccount*>* *value);
	virtual STDMETHODIMP _get_ImportantDates(Foundation::Collections::IVector<ContactDate*>* *value);
	virtual STDMETHODIMP _get_DataSuppliers(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_JobInfo(Foundation::Collections::IVector<ContactJobInfo*>* *value);
	virtual STDMETHODIMP _get_SignificantOthers(Foundation::Collections::IVector<ContactSignificantOther*>* *value);
	virtual STDMETHODIMP _get_Websites(Foundation::Collections::IVector<ContactWebsite*>* *value);
	virtual STDMETHODIMP _get_ProviderProperties(Foundation::Collections::IPropertySet* *value);
};
template<typename X> struct IContact2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactAddress>>> get() { Foundation::Collections::IVector<ContactAddress*>* value; hrcheck(enc(&IContact2_adaptor::Addresses)->_get_Addresses(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactAddress>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactAddress>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactAddress>>> operator->() { return get(); }
		} Addresses;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactConnectedServiceAccount>>> get() { Foundation::Collections::IVector<ContactConnectedServiceAccount*>* value; hrcheck(enc(&IContact2_adaptor::ConnectedServiceAccounts)->_get_ConnectedServiceAccounts(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactConnectedServiceAccount>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactConnectedServiceAccount>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactConnectedServiceAccount>>> operator->() { return get(); }
		} ConnectedServiceAccounts;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IContact2_adaptor::DataSuppliers)->_get_DataSuppliers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} DataSuppliers;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactEmail>>> get() { Foundation::Collections::IVector<ContactEmail*>* value; hrcheck(enc(&IContact2_adaptor::Emails)->_get_Emails(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactEmail>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactEmail>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactEmail>>> operator->() { return get(); }
		} Emails;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact2_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact2_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactDate>>> get() { Foundation::Collections::IVector<ContactDate*>* value; hrcheck(enc(&IContact2_adaptor::ImportantDates)->_get_ImportantDates(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactDate>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactDate>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactDate>>> operator->() { return get(); }
		} ImportantDates;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactJobInfo>>> get() { Foundation::Collections::IVector<ContactJobInfo*>* value; hrcheck(enc(&IContact2_adaptor::JobInfo)->_get_JobInfo(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactJobInfo>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactJobInfo>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactJobInfo>>> operator->() { return get(); }
		} JobInfo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact2_adaptor::Notes)->_get_Notes(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact2_adaptor::Notes)->_put_Notes(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Notes;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactPhone>>> get() { Foundation::Collections::IVector<ContactPhone*>* value; hrcheck(enc(&IContact2_adaptor::Phones)->_get_Phones(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactPhone>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactPhone>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactPhone>>> operator->() { return get(); }
		} Phones;
		struct : property {
			ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(enc(&IContact2_adaptor::ProviderProperties)->_get_ProviderProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
			operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
			ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
		} ProviderProperties;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactSignificantOther>>> get() { Foundation::Collections::IVector<ContactSignificantOther*>* value; hrcheck(enc(&IContact2_adaptor::SignificantOthers)->_get_SignificantOthers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactSignificantOther>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactSignificantOther>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactSignificantOther>>> operator->() { return get(); }
		} SignificantOthers;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ContactWebsite>>> get() { Foundation::Collections::IVector<ContactWebsite*>* value; hrcheck(enc(&IContact2_adaptor::Websites)->_get_Websites(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ContactWebsite>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ContactWebsite>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ContactWebsite>>> operator->() { return get(); }
		} Websites;
	};
	IContact2_adaptor() {}
};
template<typename X> struct adapt<IContact2, X> : Windows::ApplicationModel::Contacts::IContact2_adaptor<X> { typedef adapt IContact2; };
struct IContact2 : IContact2_raw, generate<IContact2> {};

// ContactPhone
template<typename X> struct statics<ContactPhone, X> : X {
	typedef typename X::root_type ContactPhone;
};
struct ContactPhone : generate<ContactPhone> {};

// ContactEmail
template<typename X> struct statics<ContactEmail, X> : X {
	typedef typename X::root_type ContactEmail;
};
struct ContactEmail : generate<ContactEmail> {};

// ContactAddress
template<typename X> struct statics<ContactAddress, X> : X {
	typedef typename X::root_type ContactAddress;
};
struct ContactAddress : generate<ContactAddress> {};

// ContactConnectedServiceAccount
template<typename X> struct statics<ContactConnectedServiceAccount, X> : X {
	typedef typename X::root_type ContactConnectedServiceAccount;
};
struct ContactConnectedServiceAccount : generate<ContactConnectedServiceAccount> {};

// ContactDate
template<typename X> struct statics<ContactDate, X> : X {
	typedef typename X::root_type ContactDate;
};
struct ContactDate : generate<ContactDate> {};

// ContactJobInfo
template<typename X> struct statics<ContactJobInfo, X> : X {
	typedef typename X::root_type ContactJobInfo;
};
struct ContactJobInfo : generate<ContactJobInfo> {};

// ContactSignificantOther
template<typename X> struct statics<ContactSignificantOther, X> : X {
	typedef typename X::root_type ContactSignificantOther;
};
struct ContactSignificantOther : generate<ContactSignificantOther> {};

// ContactWebsite
template<typename X> struct statics<ContactWebsite, X> : X {
	typedef typename X::root_type ContactWebsite;
};
struct ContactWebsite : generate<ContactWebsite> {};

// IContact3
struct IContact3_raw : IInspectable {
	virtual STDMETHODIMP _get_ContactListId(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayPictureUserUpdateTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_DisplayPictureUserUpdateTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_IsMe(bool *value);
	virtual STDMETHODIMP _get_AggregateId(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_RingToneToken(HSTRING *value);
	virtual STDMETHODIMP _put_RingToneToken(HSTRING value);
	virtual STDMETHODIMP _get_IsDisplayPictureManuallySet(bool *value);
	virtual STDMETHODIMP _get_LargeDisplayPicture(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_SmallDisplayPicture(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_SourceDisplayPicture(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_SourceDisplayPicture(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_TextToneToken(HSTRING *value);
	virtual STDMETHODIMP _put_TextToneToken(HSTRING value);
	virtual STDMETHODIMP _get_IsAggregate(bool *value);
	virtual STDMETHODIMP _get_FullName(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayNameOverride(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayNameOverride(HSTRING value);
	virtual STDMETHODIMP _get_Nickname(HSTRING *value);
	virtual STDMETHODIMP _put_Nickname(HSTRING value);
	virtual STDMETHODIMP _get_SortName(HSTRING *value);
};
template<typename X> struct IContact3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::AggregateId)->_get_AggregateId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AggregateId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::ContactListId)->_get_ContactListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ContactListId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::DisplayNameOverride)->_get_DisplayNameOverride(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact3_adaptor::DisplayNameOverride)->_put_DisplayNameOverride(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayNameOverride;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IContact3_adaptor::DisplayPictureUserUpdateTime)->_get_DisplayPictureUserUpdateTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IContact3_adaptor::DisplayPictureUserUpdateTime)->_put_DisplayPictureUserUpdateTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} DisplayPictureUserUpdateTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::FullName)->_get_FullName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FullName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContact3_adaptor::IsAggregate)->_get_IsAggregate(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAggregate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContact3_adaptor::IsDisplayPictureManuallySet)->_get_IsDisplayPictureManuallySet(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDisplayPictureManuallySet;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContact3_adaptor::IsMe)->_get_IsMe(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMe;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IContact3_adaptor::LargeDisplayPicture)->_get_LargeDisplayPicture(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} LargeDisplayPicture;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::Nickname)->_get_Nickname(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact3_adaptor::Nickname)->_put_Nickname(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Nickname;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact3_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::RingToneToken)->_get_RingToneToken(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact3_adaptor::RingToneToken)->_put_RingToneToken(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RingToneToken;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IContact3_adaptor::SmallDisplayPicture)->_get_SmallDisplayPicture(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} SmallDisplayPicture;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::SortName)->_get_SortName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SortName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IContact3_adaptor::SourceDisplayPicture)->_get_SourceDisplayPicture(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IContact3_adaptor::SourceDisplayPicture)->_put_SourceDisplayPicture(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} SourceDisplayPicture;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContact3_adaptor::TextToneToken)->_get_TextToneToken(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContact3_adaptor::TextToneToken)->_put_TextToneToken(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TextToneToken;
	};
	IContact3_adaptor() {}
};
template<typename X> struct adapt<IContact3, X> : Windows::ApplicationModel::Contacts::IContact3_adaptor<X> { typedef adapt IContact3; };
struct IContact3 : IContact3_raw, generate<IContact3> {};

// Contact
template<typename X> struct statics<Contact, X> : X {
	typedef typename X::root_type Contact;
};
struct Contact : generate<Contact> {};

// IContactFieldFactory
struct IContactFieldFactory_raw : IInspectable {
	virtual STDMETHODIMP _CreateField_Default(HSTRING value, ContactFieldType type, ContactField* *field) = 0;
	virtual STDMETHODIMP _CreateField_Category(HSTRING value, ContactFieldType type, ContactFieldCategory category, ContactField* *field) = 0;
	virtual STDMETHODIMP _CreateField_Custom(HSTRING name, HSTRING value, ContactFieldType type, ContactFieldCategory category, ContactField* *field) = 0;
};
template<typename X> struct IContactFieldFactory_adaptor : X {
	ptr<ContactField> CreateField(hstring_ref value, ContactFieldType type) { ContactField* field; hrcheck(X::get()->_CreateField_Default(value, type, &field)); return from_abi(field); }
	ptr<ContactField> CreateField(hstring_ref value, ContactFieldType type, ContactFieldCategory category) { ContactField* field; hrcheck(X::get()->_CreateField_Category(value, type, category, &field)); return from_abi(field); }
	ptr<ContactField> CreateField(hstring_ref name, hstring_ref value, ContactFieldType type, ContactFieldCategory category) { ContactField* field; hrcheck(X::get()->_CreateField_Custom(name, value, type, category, &field)); return from_abi(field); }
};
template<typename X> struct adapt<IContactFieldFactory, X> : Windows::ApplicationModel::Contacts::IContactFieldFactory_adaptor<X> { typedef adapt IContactFieldFactory; };
template<typename X> struct IContactFieldFactory_unadaptor : X {
	STDMETHODIMP _CreateField_Default(HSTRING value, ContactFieldType type, ContactField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateField(value, type)); }); }
	STDMETHODIMP _CreateField_Category(HSTRING value, ContactFieldType type, ContactFieldCategory category, ContactField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateField(value, type, category)); }); }
	STDMETHODIMP _CreateField_Custom(HSTRING name, HSTRING value, ContactFieldType type, ContactFieldCategory category, ContactField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateField(name, value, type, category)); }); }
};
template<typename X> struct unadapt<IContactFieldFactory, X> : Windows::ApplicationModel::Contacts::IContactFieldFactory_unadaptor<X> {};
struct IContactFieldFactory : IContactFieldFactory_raw, generate<IContactFieldFactory> {};

// ContactField
template<typename> struct ContactField_statics {
	static ContactField *activate(hstring_ref value, ContactFieldType type) { ContactField *field; hrcheck(get_activation_factory<ContactField, IContactFieldFactory>()->_CreateField(value, type, &field)); return field; }
	static ContactField *activate(hstring_ref value, ContactFieldType type, ContactFieldCategory category) { ContactField *field; hrcheck(get_activation_factory<ContactField, IContactFieldFactory>()->_CreateField(value, type, category, &field)); return field; }
	static ContactField *activate(hstring_ref name, hstring_ref value, ContactFieldType type, ContactFieldCategory category) { ContactField *field; hrcheck(get_activation_factory<ContactField, IContactFieldFactory>()->_CreateField(name, value, type, category, &field)); return field; }
};

template<typename X> struct statics<ContactField, X> : X, Windows::ApplicationModel::Contacts::ContactField_statics<void> {
	using Windows::ApplicationModel::Contacts::ContactField_statics<void>::activate;
	typedef typename X::root_type ContactField;
};
struct ContactField : generate<ContactField> {};

// IContactLocationField
struct IContactLocationField_raw : IInspectable {
	virtual STDMETHODIMP _get_UnstructuredAddress(HSTRING *value);
	virtual STDMETHODIMP _get_Street(HSTRING *value);
	virtual STDMETHODIMP _get_City(HSTRING *value);
	virtual STDMETHODIMP _get_Region(HSTRING *value);
	virtual STDMETHODIMP _get_Country(HSTRING *value);
	virtual STDMETHODIMP _get_PostalCode(HSTRING *value);
};
template<typename X> struct IContactLocationField_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactLocationField_adaptor::City)->_get_City(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} City;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactLocationField_adaptor::Country)->_get_Country(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Country;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactLocationField_adaptor::PostalCode)->_get_PostalCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PostalCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactLocationField_adaptor::Region)->_get_Region(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Region;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactLocationField_adaptor::Street)->_get_Street(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Street;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactLocationField_adaptor::UnstructuredAddress)->_get_UnstructuredAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UnstructuredAddress;
	};
	IContactLocationField_adaptor() {}
};
template<typename X> struct adapt<IContactLocationField, X> : Windows::ApplicationModel::Contacts::IContactLocationField_adaptor<X> { typedef adapt IContactLocationField; };
struct IContactLocationField : IContactLocationField_raw, generate<IContactLocationField> {};

// IContactLocationFieldFactory
struct IContactLocationFieldFactory_raw : IInspectable {
	virtual STDMETHODIMP _CreateLocation_Default(HSTRING unstructuredAddress, ContactLocationField* *field) = 0;
	virtual STDMETHODIMP _CreateLocation_Category(HSTRING unstructuredAddress, ContactFieldCategory category, ContactLocationField* *field) = 0;
	virtual STDMETHODIMP _CreateLocation_All(HSTRING unstructuredAddress, ContactFieldCategory category, HSTRING street, HSTRING city, HSTRING region, HSTRING country, HSTRING postalCode, ContactLocationField* *field) = 0;
};
template<typename X> struct IContactLocationFieldFactory_adaptor : X {
	ptr<ContactLocationField> CreateLocation(hstring_ref unstructuredAddress) { ContactLocationField* field; hrcheck(X::get()->_CreateLocation_Default(unstructuredAddress, &field)); return from_abi(field); }
	ptr<ContactLocationField> CreateLocation(hstring_ref unstructuredAddress, ContactFieldCategory category) { ContactLocationField* field; hrcheck(X::get()->_CreateLocation_Category(unstructuredAddress, category, &field)); return from_abi(field); }
	ptr<ContactLocationField> CreateLocation(hstring_ref unstructuredAddress, ContactFieldCategory category, hstring_ref street, hstring_ref city, hstring_ref region, hstring_ref country, hstring_ref postalCode) { ContactLocationField* field; hrcheck(X::get()->_CreateLocation_All(unstructuredAddress, category, street, city, region, country, postalCode, &field)); return from_abi(field); }
};
template<typename X> struct adapt<IContactLocationFieldFactory, X> : Windows::ApplicationModel::Contacts::IContactLocationFieldFactory_adaptor<X> { typedef adapt IContactLocationFieldFactory; };
template<typename X> struct IContactLocationFieldFactory_unadaptor : X {
	STDMETHODIMP _CreateLocation_Default(HSTRING unstructuredAddress, ContactLocationField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateLocation(unstructuredAddress)); }); }
	STDMETHODIMP _CreateLocation_Category(HSTRING unstructuredAddress, ContactFieldCategory category, ContactLocationField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateLocation(unstructuredAddress, category)); }); }
	STDMETHODIMP _CreateLocation_All(HSTRING unstructuredAddress, ContactFieldCategory category, HSTRING street, HSTRING city, HSTRING region, HSTRING country, HSTRING postalCode, ContactLocationField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateLocation(unstructuredAddress, category, street, city, region, country, postalCode)); }); }
};
template<typename X> struct unadapt<IContactLocationFieldFactory, X> : Windows::ApplicationModel::Contacts::IContactLocationFieldFactory_unadaptor<X> {};
struct IContactLocationFieldFactory : IContactLocationFieldFactory_raw, generate<IContactLocationFieldFactory> {};

// ContactLocationField
template<typename> struct ContactLocationField_statics {
	static ContactLocationField *activate(hstring_ref unstructuredAddress) { ContactLocationField *field; hrcheck(get_activation_factory<ContactLocationField, IContactLocationFieldFactory>()->_CreateLocation(unstructuredAddress, &field)); return field; }
	static ContactLocationField *activate(hstring_ref unstructuredAddress, ContactFieldCategory category) { ContactLocationField *field; hrcheck(get_activation_factory<ContactLocationField, IContactLocationFieldFactory>()->_CreateLocation(unstructuredAddress, category, &field)); return field; }
	static ContactLocationField *activate(hstring_ref unstructuredAddress, ContactFieldCategory category, hstring_ref street, hstring_ref city, hstring_ref region, hstring_ref country, hstring_ref postalCode) { ContactLocationField *field; hrcheck(get_activation_factory<ContactLocationField, IContactLocationFieldFactory>()->_CreateLocation(unstructuredAddress, category, street, city, region, country, postalCode, &field)); return field; }
};

template<typename X> struct statics<ContactLocationField, X> : X, Windows::ApplicationModel::Contacts::ContactLocationField_statics<void> {
	using Windows::ApplicationModel::Contacts::ContactLocationField_statics<void>::activate;
	typedef typename X::root_type ContactLocationField;
};
struct ContactLocationField : generate<ContactLocationField> {};

// IContactInstantMessageField
struct IContactInstantMessageField_raw : IInspectable {
	virtual STDMETHODIMP _get_UserName(HSTRING *value);
	virtual STDMETHODIMP _get_Service(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayText(HSTRING *value);
	virtual STDMETHODIMP _get_LaunchUri(Foundation::Uri* *value);
};
template<typename X> struct IContactInstantMessageField_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInstantMessageField_adaptor::DisplayText)->_get_DisplayText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayText;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IContactInstantMessageField_adaptor::LaunchUri)->_get_LaunchUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} LaunchUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInstantMessageField_adaptor::Service)->_get_Service(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Service;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInstantMessageField_adaptor::UserName)->_get_UserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserName;
	};
	IContactInstantMessageField_adaptor() {}
};
template<typename X> struct adapt<IContactInstantMessageField, X> : Windows::ApplicationModel::Contacts::IContactInstantMessageField_adaptor<X> { typedef adapt IContactInstantMessageField; };
struct IContactInstantMessageField : IContactInstantMessageField_raw, generate<IContactInstantMessageField> {};

// IContactInstantMessageFieldFactory
struct IContactInstantMessageFieldFactory_raw : IInspectable {
	virtual STDMETHODIMP _CreateInstantMessage_Default(HSTRING userName, ContactInstantMessageField* *field) = 0;
	virtual STDMETHODIMP _CreateInstantMessage_Category(HSTRING userName, ContactFieldCategory category, ContactInstantMessageField* *field) = 0;
	virtual STDMETHODIMP _CreateInstantMessage_All(HSTRING userName, ContactFieldCategory category, HSTRING service, HSTRING displayText, Foundation::Uri* verb, ContactInstantMessageField* *field) = 0;
};
template<typename X> struct IContactInstantMessageFieldFactory_adaptor : X {
	ptr<ContactInstantMessageField> CreateInstantMessage(hstring_ref userName) { ContactInstantMessageField* field; hrcheck(X::get()->_CreateInstantMessage_Default(userName, &field)); return from_abi(field); }
	ptr<ContactInstantMessageField> CreateInstantMessage(hstring_ref userName, ContactFieldCategory category) { ContactInstantMessageField* field; hrcheck(X::get()->_CreateInstantMessage_Category(userName, category, &field)); return from_abi(field); }
	ptr<ContactInstantMessageField> CreateInstantMessage(hstring_ref userName, ContactFieldCategory category, hstring_ref service, hstring_ref displayText, pptr<Foundation::Uri> verb) { ContactInstantMessageField* field; hrcheck(X::get()->_CreateInstantMessage_All(userName, category, service, displayText, verb, &field)); return from_abi(field); }
};
template<typename X> struct adapt<IContactInstantMessageFieldFactory, X> : Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory_adaptor<X> { typedef adapt IContactInstantMessageFieldFactory; };
template<typename X> struct IContactInstantMessageFieldFactory_unadaptor : X {
	STDMETHODIMP _CreateInstantMessage_Default(HSTRING userName, ContactInstantMessageField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateInstantMessage(userName)); }); }
	STDMETHODIMP _CreateInstantMessage_Category(HSTRING userName, ContactFieldCategory category, ContactInstantMessageField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateInstantMessage(userName, category)); }); }
	STDMETHODIMP _CreateInstantMessage_All(HSTRING userName, ContactFieldCategory category, HSTRING service, HSTRING displayText, Foundation::Uri* verb, ContactInstantMessageField* *field) { return hrtry([&, this] { *field = to_abi(X::get()->CreateInstantMessage(userName, category, service, displayText, verb)); }); }
};
template<typename X> struct unadapt<IContactInstantMessageFieldFactory, X> : Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory_unadaptor<X> {};
struct IContactInstantMessageFieldFactory : IContactInstantMessageFieldFactory_raw, generate<IContactInstantMessageFieldFactory> {};

// ContactInstantMessageField
template<typename> struct ContactInstantMessageField_statics {
	static ContactInstantMessageField *activate(hstring_ref userName) { ContactInstantMessageField *field; hrcheck(get_activation_factory<ContactInstantMessageField, IContactInstantMessageFieldFactory>()->_CreateInstantMessage(userName, &field)); return field; }
	static ContactInstantMessageField *activate(hstring_ref userName, ContactFieldCategory category) { ContactInstantMessageField *field; hrcheck(get_activation_factory<ContactInstantMessageField, IContactInstantMessageFieldFactory>()->_CreateInstantMessage(userName, category, &field)); return field; }
	static ContactInstantMessageField *activate(hstring_ref userName, ContactFieldCategory category, hstring_ref service, hstring_ref displayText, pptr<Foundation::Uri> verb) { ContactInstantMessageField *field; hrcheck(get_activation_factory<ContactInstantMessageField, IContactInstantMessageFieldFactory>()->_CreateInstantMessage(userName, category, service, displayText, verb, &field)); return field; }
};

template<typename X> struct statics<ContactInstantMessageField, X> : X, Windows::ApplicationModel::Contacts::ContactInstantMessageField_statics<void> {
	using Windows::ApplicationModel::Contacts::ContactInstantMessageField_statics<void>::activate;
	typedef typename X::root_type ContactInstantMessageField;
};
struct ContactInstantMessageField : generate<ContactInstantMessageField> {};

// IKnownContactFieldStatics
struct IKnownContactFieldStatics : IInspectable {
	virtual STDMETHODIMP _get_Email(HSTRING *value);
	virtual STDMETHODIMP _get_PhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _get_Location(HSTRING *value);
	virtual STDMETHODIMP _get_InstantMessage(HSTRING *value);
	virtual STDMETHODIMP _ConvertNameToType(HSTRING name, ContactFieldType *type);
	virtual STDMETHODIMP _ConvertTypeToName(ContactFieldType type, HSTRING *name);
};

// KnownContactField
template<typename> struct KnownContactField_statics {
	static struct _Email : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactField, IKnownContactFieldStatics>()->_get_Email(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Email;
	static struct _InstantMessage : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactField, IKnownContactFieldStatics>()->_get_InstantMessage(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} InstantMessage;
	static struct _Location : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactField, IKnownContactFieldStatics>()->_get_Location(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Location;
	static struct _PhoneNumber : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactField, IKnownContactFieldStatics>()->_get_PhoneNumber(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PhoneNumber;
	static ContactFieldType ConvertNameToType(hstring_ref name) { ContactFieldType type; hrcheck(get_activation_factory<KnownContactField, IKnownContactFieldStatics>()->_ConvertNameToType(name, &type)); return type; }
	static hstring ConvertTypeToName(ContactFieldType type) { HSTRING name; hrcheck(get_activation_factory<KnownContactField, IKnownContactFieldStatics>()->_ConvertTypeToName(type, &name)); return from_abi(name); }
};
template<typename X> typename KnownContactField_statics<X>::_Email KnownContactField_statics<X>::Email;
template<typename X> typename KnownContactField_statics<X>::_InstantMessage KnownContactField_statics<X>::InstantMessage;
template<typename X> typename KnownContactField_statics<X>::_Location KnownContactField_statics<X>::Location;
template<typename X> typename KnownContactField_statics<X>::_PhoneNumber KnownContactField_statics<X>::PhoneNumber;

template<typename X> struct statics<KnownContactField, X> : X, Windows::ApplicationModel::Contacts::KnownContactField_statics<void> {
	typedef typename X::root_type KnownContactField;
};
struct KnownContactField : generate<KnownContactField> {};

// IContactInformation
struct IContactInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _GetThumbnailAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamWithContentType*>* *operation);
	virtual STDMETHODIMP _get_Emails(Foundation::Collections::IVectorView<ContactField*>* *value);
	virtual STDMETHODIMP _get_PhoneNumbers(Foundation::Collections::IVectorView<ContactField*>* *value);
	virtual STDMETHODIMP _get_Locations(Foundation::Collections::IVectorView<ContactLocationField*>* *value);
	virtual STDMETHODIMP _get_InstantMessages(Foundation::Collections::IVectorView<ContactInstantMessageField*>* *value);
	virtual STDMETHODIMP _get_CustomFields(Foundation::Collections::IVectorView<ContactField*>* *value);
	virtual STDMETHODIMP _QueryCustomFields(HSTRING customName, Foundation::Collections::IVectorView<ContactField*>* *value);
};
template<typename X> struct IContactInformation_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> get() { Foundation::Collections::IVectorView<ContactField*>* value; hrcheck(enc(&IContactInformation_adaptor::CustomFields)->_get_CustomFields(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> operator->() { return get(); }
		} CustomFields;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> get() { Foundation::Collections::IVectorView<ContactField*>* value; hrcheck(enc(&IContactInformation_adaptor::Emails)->_get_Emails(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> operator->() { return get(); }
		} Emails;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<ContactInstantMessageField>>> get() { Foundation::Collections::IVectorView<ContactInstantMessageField*>* value; hrcheck(enc(&IContactInformation_adaptor::InstantMessages)->_get_InstantMessages(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactInstantMessageField>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<ContactInstantMessageField>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactInstantMessageField>>> operator->() { return get(); }
		} InstantMessages;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<ContactLocationField>>> get() { Foundation::Collections::IVectorView<ContactLocationField*>* value; hrcheck(enc(&IContactInformation_adaptor::Locations)->_get_Locations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactLocationField>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<ContactLocationField>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactLocationField>>> operator->() { return get(); }
		} Locations;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInformation_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> get() { Foundation::Collections::IVectorView<ContactField*>* value; hrcheck(enc(&IContactInformation_adaptor::PhoneNumbers)->_get_PhoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> operator->() { return get(); }
		} PhoneNumbers;
	};
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStreamWithContentType>>> GetThumbnailAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamWithContentType*>* operation; hrcheck(X::get()->_GetThumbnailAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::Collections::IVectorView<ptr<ContactField>>> QueryCustomFields(hstring_ref customName) { Foundation::Collections::IVectorView<ContactField*>* value; hrcheck(X::get()->_QueryCustomFields(customName, &value)); return from_abi(value); }
	IContactInformation_adaptor() {}
};
template<typename X> struct adapt<IContactInformation, X> : Windows::ApplicationModel::Contacts::IContactInformation_adaptor<X> { typedef adapt IContactInformation; };
struct IContactInformation : IContactInformation_raw, generate<IContactInformation> {};

// ContactInformation
template<typename X> struct statics<ContactInformation, X> : X {
	typedef typename X::root_type ContactInformation;
};
struct ContactInformation : generate<ContactInformation> {};

// ContactFieldFactory
template<typename X> struct statics<ContactFieldFactory, X> : X {
	typedef typename X::root_type ContactFieldFactory;
};
struct ContactFieldFactory : generate<ContactFieldFactory> {
	using IContactLocationFieldFactory::CreateLocation;
	using IContactInstantMessageFieldFactory::CreateInstantMessage;
	using IContactFieldFactory::CreateField;
};

// IPinnedContactIdsQueryResult
struct IPinnedContactIdsQueryResult_raw : IInspectable {
	virtual STDMETHODIMP _get_ContactIds(Foundation::Collections::IVector<HSTRING>* *value);
};
template<typename X> struct IPinnedContactIdsQueryResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IPinnedContactIdsQueryResult_adaptor::ContactIds)->_get_ContactIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} ContactIds;
	};
	IPinnedContactIdsQueryResult_adaptor() {}
};
template<typename X> struct adapt<IPinnedContactIdsQueryResult, X> : Windows::ApplicationModel::Contacts::IPinnedContactIdsQueryResult_adaptor<X> { typedef adapt IPinnedContactIdsQueryResult; };
struct IPinnedContactIdsQueryResult : IPinnedContactIdsQueryResult_raw, generate<IPinnedContactIdsQueryResult> {};

// PinnedContactIdsQueryResult
template<typename X> struct statics<PinnedContactIdsQueryResult, X> : X {
	typedef typename X::root_type PinnedContactIdsQueryResult;
};
struct PinnedContactIdsQueryResult : generate<PinnedContactIdsQueryResult> {};

// IPinnedContactManagerStatics
struct IPinnedContactManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(PinnedContactManager* *result);
	virtual STDMETHODIMP _GetForUser(System::User* user, PinnedContactManager* *result);
	virtual STDMETHODIMP _IsSupported(bool *result);
};

// IPinnedContactManager
struct IPinnedContactManager_raw : IInspectable {
	virtual STDMETHODIMP _get_User(System::User* *user);
	virtual STDMETHODIMP _IsPinSurfaceSupported(PinnedContactSurface surface, bool *result);
	virtual STDMETHODIMP _IsContactPinned(Contact* contact, PinnedContactSurface surface, bool *result);
	virtual STDMETHODIMP _RequestPinContactAsync(Contact* contact, PinnedContactSurface surface, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestPinContactsAsync(Foundation::Collections::IIterable<Contact*>* contacts, PinnedContactSurface surface, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestUnpinContactAsync(Contact* contact, PinnedContactSurface surface, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _SignalContactActivity(Contact* contact);
	virtual STDMETHODIMP _GetPinnedContactIdsAsync(Foundation::IAsyncOperation<PinnedContactIdsQueryResult*>* *operation);
};
template<typename X> struct IPinnedContactManager_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* user; hrcheck(enc(&IPinnedContactManager_adaptor::User)->_get_User(&user)); return from_abi(user); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	bool IsPinSurfaceSupported(PinnedContactSurface surface) { bool result; hrcheck(X::get()->_IsPinSurfaceSupported(surface, &result)); return result; }
	bool IsContactPinned(pptr<Contact> contact, PinnedContactSurface surface) { bool result; hrcheck(X::get()->_IsContactPinned(contact, surface, &result)); return result; }
	ptr<Foundation::IAsyncOperation<bool>> RequestPinContactAsync(pptr<Contact> contact, PinnedContactSurface surface) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestPinContactAsync(contact, surface, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestPinContactsAsync(pptr<Foundation::Collections::IIterable<ptr<Contact>>> contacts, PinnedContactSurface surface) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestPinContactsAsync(to_abi(contacts), surface, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestUnpinContactAsync(pptr<Contact> contact, PinnedContactSurface surface) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestUnpinContactAsync(contact, surface, &operation)); return from_abi(operation); }
	void SignalContactActivity(pptr<Contact> contact) { hrcheck(X::get()->_SignalContactActivity(contact)); }
	ptr<Foundation::IAsyncOperation<ptr<PinnedContactIdsQueryResult>>> GetPinnedContactIdsAsync() { Foundation::IAsyncOperation<PinnedContactIdsQueryResult*>* operation; hrcheck(X::get()->_GetPinnedContactIdsAsync(&operation)); return from_abi(operation); }
	IPinnedContactManager_adaptor() {}
};
template<typename X> struct adapt<IPinnedContactManager, X> : Windows::ApplicationModel::Contacts::IPinnedContactManager_adaptor<X> { typedef adapt IPinnedContactManager; };
struct IPinnedContactManager : IPinnedContactManager_raw, generate<IPinnedContactManager> {};

// PinnedContactManager
template<typename> struct PinnedContactManager_statics {
	static ptr<PinnedContactManager> GetDefault() { PinnedContactManager* result; hrcheck(get_activation_factory<PinnedContactManager, IPinnedContactManagerStatics>()->_GetDefault(&result)); return from_abi(result); }
	static ptr<PinnedContactManager> GetForUser(pptr<System::User> user) { PinnedContactManager* result; hrcheck(get_activation_factory<PinnedContactManager, IPinnedContactManagerStatics>()->_GetForUser(user, &result)); return from_abi(result); }
	static bool IsSupported() { bool result; hrcheck(get_activation_factory<PinnedContactManager, IPinnedContactManagerStatics>()->_IsSupported(&result)); return result; }
};

template<typename X> struct statics<PinnedContactManager, X> : X, Windows::ApplicationModel::Contacts::PinnedContactManager_statics<void> {
	typedef typename X::root_type PinnedContactManager;
};
struct PinnedContactManager : generate<PinnedContactManager> {};

// IContactPanelLaunchFullAppRequestedEventArgs
struct IContactPanelLaunchFullAppRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct IContactPanelLaunchFullAppRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContactPanelLaunchFullAppRequestedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IContactPanelLaunchFullAppRequestedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	IContactPanelLaunchFullAppRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactPanelLaunchFullAppRequestedEventArgs, X> : Windows::ApplicationModel::Contacts::IContactPanelLaunchFullAppRequestedEventArgs_adaptor<X> { typedef adapt IContactPanelLaunchFullAppRequestedEventArgs; };
struct IContactPanelLaunchFullAppRequestedEventArgs : IContactPanelLaunchFullAppRequestedEventArgs_raw, generate<IContactPanelLaunchFullAppRequestedEventArgs> {};

// ContactPanelLaunchFullAppRequestedEventArgs
template<typename X> struct statics<ContactPanelLaunchFullAppRequestedEventArgs, X> : X {
	typedef typename X::root_type ContactPanelLaunchFullAppRequestedEventArgs;
};
struct ContactPanelLaunchFullAppRequestedEventArgs : generate<ContactPanelLaunchFullAppRequestedEventArgs> {};

// IContactPanelClosingEventArgs
struct IContactPanelClosingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *deferral);
};
template<typename X> struct IContactPanelClosingEventArgs_adaptor : X {
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
};
template<typename X> struct adapt<IContactPanelClosingEventArgs, X> : Windows::ApplicationModel::Contacts::IContactPanelClosingEventArgs_adaptor<X> { typedef adapt IContactPanelClosingEventArgs; };
struct IContactPanelClosingEventArgs : IContactPanelClosingEventArgs_raw, generate<IContactPanelClosingEventArgs> {};

// ContactPanelClosingEventArgs
template<typename X> struct statics<ContactPanelClosingEventArgs, X> : X {
	typedef typename X::root_type ContactPanelClosingEventArgs;
};
struct ContactPanelClosingEventArgs : generate<ContactPanelClosingEventArgs> {};

// IContactPanel
struct IContactPanel_raw : IInspectable {
	virtual STDMETHODIMP _ClosePanel();
	virtual STDMETHODIMP _get_HeaderColor(Foundation::IReference<UI::Color>* *value);
	virtual STDMETHODIMP _put_HeaderColor(Foundation::IReference<UI::Color>* value);
	virtual STDMETHODIMP _add_LaunchFullAppRequested(Foundation::TypedEventHandler<ContactPanel*, ContactPanelLaunchFullAppRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LaunchFullAppRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Closing(Foundation::TypedEventHandler<ContactPanel*, ContactPanelClosingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Closing(Foundation::EventRegistrationToken token);
};
template<typename X> struct IContactPanel_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<UI::Color>> get() { Foundation::IReference<UI::Color>* value; hrcheck(enc(&IContactPanel_adaptor::HeaderColor)->_get_HeaderColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<UI::Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<UI::Color>> () { return get(); }
			ptr<Foundation::IReference<UI::Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<UI::Color>> value) { hrcheck(enc(&IContactPanel_adaptor::HeaderColor)->_put_HeaderColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<UI::Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<UI::Color>> value) { put(to_abi(value)); }
		} HeaderColor;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ContactPanel>, ptr<ContactPanelClosingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IContactPanel_adaptor::Closing)->_add_Closing(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IContactPanel_adaptor::Closing)->_remove_Closing(token)); }
		} Closing;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ContactPanel>, ptr<ContactPanelLaunchFullAppRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IContactPanel_adaptor::LaunchFullAppRequested)->_add_LaunchFullAppRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IContactPanel_adaptor::LaunchFullAppRequested)->_remove_LaunchFullAppRequested(token)); }
		} LaunchFullAppRequested;
	};
	void ClosePanel() { hrcheck(X::get()->_ClosePanel()); }
	IContactPanel_adaptor() {}
};
template<typename X> struct adapt<IContactPanel, X> : Windows::ApplicationModel::Contacts::IContactPanel_adaptor<X> { typedef adapt IContactPanel; };
struct IContactPanel : IContactPanel_raw, generate<IContactPanel> {};

// ContactPanel
template<typename X> struct statics<ContactPanel, X> : X {
	typedef typename X::root_type ContactPanel;
};
struct ContactPanel : generate<ContactPanel> {};
}}}
} // namespace iso_winrt
