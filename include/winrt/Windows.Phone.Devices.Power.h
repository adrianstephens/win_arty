#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.Devices.Power

#include "Windows.Phone.Devices.Power.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Phone::Devices::Power::IBatteryStatics> : interface_type<> {};
template<> struct def<Windows::Phone::Devices::Power::IBattery> : interface_type<> {};
template<> struct def<Windows::Phone::Devices::Power::Battery> : class_type<Platform::Object, Windows::Phone::Devices::Power::IBattery> {};

// uuids

template<> struct uuid<Windows::Phone::Devices::Power::IBatteryStatics> { define_guid(0xFAF5BC70, 0x6369, 0x11E1, 0xB8, 0x6C, 0x8, 0x0, 0x20, 0xC, 0x9A, 0x66);};
template<> struct uuid<Windows::Phone::Devices::Power::IBattery> { define_guid(0x972ADBDD, 0x6720, 0x4702, 0xA4, 0x76, 0xB9, 0xD3, 0x8A, 0x0, 0x70, 0xE3);};

// types

namespace Windows { namespace Phone { namespace Devices { namespace Power {

// IBatteryStatics
struct IBatteryStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Battery* *result);
};

// IBattery
struct IBattery_raw : IInspectable {
	virtual STDMETHODIMP _get_RemainingChargePercent(int *value);
	virtual STDMETHODIMP _get_RemainingDischargeTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _add_RemainingChargePercentChanged(Foundation::EventHandler<IInspectable*>* changeHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemainingChargePercentChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBattery_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IBattery_adaptor::RemainingChargePercent)->_get_RemainingChargePercent(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RemainingChargePercent;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBattery_adaptor::RemainingDischargeTime)->_get_RemainingDischargeTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RemainingDischargeTime;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> changeHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBattery_adaptor::RemainingChargePercentChanged)->_add_RemainingChargePercentChanged(to_abi(changeHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBattery_adaptor::RemainingChargePercentChanged)->_remove_RemainingChargePercentChanged(token)); }
		} RemainingChargePercentChanged;
	};
	IBattery_adaptor() {}
};
template<typename X> struct adapt<IBattery, X> : Windows::Phone::Devices::Power::IBattery_adaptor<X> { typedef adapt IBattery; };
struct IBattery : IBattery_raw, generate<IBattery> {};

// Battery
template<typename> struct Battery_statics {
	static ptr<Battery> GetDefault() { Battery* result; hrcheck(get_activation_factory<Battery, IBatteryStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Battery, X> : X, Windows::Phone::Devices::Power::Battery_statics<void> {
	typedef typename X::root_type Battery;
};
struct Battery : generate<Battery> {};
}}}}
} // namespace iso_winrt
