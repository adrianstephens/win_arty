#pragma once
// generated by isopod tools
// namespaces:
// Windows.Networking.Proximity

#include "Windows.Networking.Proximity.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMap;
}}
namespace Networking { namespace Sockets {
struct StreamSocket;
}
struct HostName;
}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Networking::Proximity::IProximityMessage> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::ProximityMessage> : class_type<Platform::Object, Windows::Networking::Proximity::IProximityMessage> {};
template<> struct def<Windows::Networking::Proximity::MessageReceivedHandler> : delegate_type {};
template<> struct def<Windows::Networking::Proximity::IProximityDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::IProximityDevice> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::ProximityDevice> : class_type<Platform::Object, Windows::Networking::Proximity::IProximityDevice> {};
template<> struct def<Windows::Networking::Proximity::MessageTransmittedHandler> : delegate_type {};
template<> struct def<Windows::Networking::Proximity::DeviceArrivedEventHandler> : delegate_type {};
template<> struct def<Windows::Networking::Proximity::DeviceDepartedEventHandler> : delegate_type {};
template<> struct def<Windows::Networking::Proximity::TriggeredConnectState> : enum_type<int> {};
template<> struct def<Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> : class_type<Platform::Object, Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs> {};
template<> struct def<Windows::Networking::Proximity::IPeerInformation> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::IPeerInformationWithHostAndService> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::IPeerInformation3> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::PeerInformation> : class_type<Platform::Object, Windows::Networking::Proximity::IPeerInformation, Windows::Networking::Proximity::IPeerInformation3, Windows::Networking::Proximity::IPeerInformationWithHostAndService> {};
template<> struct def<Windows::Networking::Proximity::IConnectionRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::ConnectionRequestedEventArgs> : class_type<Platform::Object, Windows::Networking::Proximity::IConnectionRequestedEventArgs> {};
template<> struct def<Windows::Networking::Proximity::PeerWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::Proximity::IPeerWatcher> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::PeerWatcher> : class_type<Platform::Object, Windows::Networking::Proximity::IPeerWatcher> {};
template<> struct def<Windows::Networking::Proximity::PeerDiscoveryTypes> : enum_type<unsigned> {};
template<> struct def<Windows::Networking::Proximity::PeerRole> : enum_type<int> {};
template<> struct def<Windows::Networking::Proximity::IPeerFinderStatics> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::IPeerFinderStatics2> : interface_type<> {};
template<> struct def<Windows::Networking::Proximity::PeerFinder> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Networking::Proximity::IProximityMessage> { define_guid(0xEFAB0782, 0xF6E1, 0x4675, 0xA0, 0x45, 0xD8, 0xE3, 0x20, 0xC2, 0x48, 0x8);};
template<> struct uuid<Windows::Networking::Proximity::MessageReceivedHandler> { define_guid(0xEFAB0782, 0xF6E2, 0x4675, 0xA0, 0x45, 0xD8, 0xE3, 0x20, 0xC2, 0x48, 0x8);};
template<> struct uuid<Windows::Networking::Proximity::IProximityDeviceStatics> { define_guid(0x914BA01D, 0xF6E1, 0x47C4, 0xA1, 0x4C, 0x14, 0x8A, 0x19, 0x3, 0xD0, 0xC6);};
template<> struct uuid<Windows::Networking::Proximity::IProximityDevice> { define_guid(0xEFA8A552, 0xF6E1, 0x4329, 0xA0, 0xFC, 0xAB, 0x6B, 0xF, 0xD2, 0x82, 0x62);};
template<> struct uuid<Windows::Networking::Proximity::MessageTransmittedHandler> { define_guid(0xEFAA0B4A, 0xF6E2, 0x4D7D, 0x85, 0x6C, 0x78, 0xFC, 0x8E, 0xFC, 0x2, 0x1E);};
template<> struct uuid<Windows::Networking::Proximity::DeviceArrivedEventHandler> { define_guid(0xEFA9DA69, 0xF6E1, 0x49C9, 0xA4, 0x9E, 0x8E, 0xF, 0xC5, 0x8F, 0xB9, 0x11);};
template<> struct uuid<Windows::Networking::Proximity::DeviceDepartedEventHandler> { define_guid(0xEFA9DA69, 0xF6E2, 0x49C9, 0xA4, 0x9E, 0x8E, 0xF, 0xC5, 0x8F, 0xB9, 0x11);};
template<> struct uuid<Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs> { define_guid(0xC6A780AD, 0xF6E1, 0x4D54, 0x96, 0xE2, 0x33, 0xF6, 0x20, 0xBC, 0xA8, 0x8A);};
template<> struct uuid<Windows::Networking::Proximity::IPeerInformation> { define_guid(0x20024F08, 0x9FFF, 0x45F4, 0xB6, 0xE9, 0x40, 0x8B, 0x2E, 0xBE, 0xF3, 0x73);};
template<> struct uuid<Windows::Networking::Proximity::IPeerInformationWithHostAndService> { define_guid(0xECC7CCAD, 0x1B70, 0x4E8B, 0x92, 0xDB, 0xBB, 0xE7, 0x81, 0x41, 0x93, 0x8);};
template<> struct uuid<Windows::Networking::Proximity::IPeerInformation3> { define_guid(0xB20F612A, 0xDBD0, 0x40F8, 0x95, 0xBD, 0x2D, 0x42, 0x9, 0xC7, 0x83, 0x6F);};
template<> struct uuid<Windows::Networking::Proximity::IConnectionRequestedEventArgs> { define_guid(0xEB6891AE, 0x4F1E, 0x4C66, 0xBD, 0xD, 0x46, 0x92, 0x4A, 0x94, 0x2E, 0x8);};
template<> struct uuid<Windows::Networking::Proximity::IPeerWatcher> { define_guid(0x3CEE21F8, 0x2FA6, 0x4679, 0x96, 0x91, 0x3, 0xC9, 0x4A, 0x42, 0xF, 0x34);};
template<> struct uuid<Windows::Networking::Proximity::IPeerFinderStatics> { define_guid(0x914B3B61, 0xF6E1, 0x47C4, 0xA1, 0x4C, 0x14, 0x8A, 0x19, 0x3, 0xD0, 0xC6);};
template<> struct uuid<Windows::Networking::Proximity::IPeerFinderStatics2> { define_guid(0xD6E73C65, 0xFDD0, 0x4B0B, 0x93, 0x12, 0x86, 0x64, 0x8, 0x93, 0x5D, 0x82);};

// types

namespace Windows { namespace Networking { namespace Proximity {

// IProximityMessage
struct IProximityMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_MessageType(HSTRING *value);
	virtual STDMETHODIMP _get_SubscriptionId(__int64 *value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_DataAsString(HSTRING *value);
};
template<typename X> struct IProximityMessage_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IProximityMessage_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Data;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProximityMessage_adaptor::DataAsString)->_get_DataAsString(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DataAsString;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProximityMessage_adaptor::MessageType)->_get_MessageType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MessageType;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IProximityMessage_adaptor::SubscriptionId)->_get_SubscriptionId(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
		} SubscriptionId;
	};
	IProximityMessage_adaptor() {}
};
template<typename X> struct adapt<IProximityMessage, X> : Windows::Networking::Proximity::IProximityMessage_adaptor<X> { typedef adapt IProximityMessage; };
struct IProximityMessage : IProximityMessage_raw, generate<IProximityMessage> {};

// ProximityMessage
template<typename X> struct statics<ProximityMessage, X> : X {
	typedef typename X::root_type ProximityMessage;
};
struct ProximityMessage : generate<ProximityMessage> {};

// MessageReceivedHandler
struct MessageReceivedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(ProximityDevice* sender, ProximityMessage* message) = 0;
};

// IProximityDeviceStatics
struct IProximityDeviceStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *selector);
	virtual STDMETHODIMP _GetDefault(ProximityDevice* *proximityDevice);
	virtual STDMETHODIMP _FromId(HSTRING deviceId, ProximityDevice* *proximityDevice);
};

// IProximityDevice
struct IProximityDevice_raw : IInspectable {
	virtual STDMETHODIMP _SubscribeForMessage(HSTRING messageType, MessageReceivedHandler* messageReceivedHandler, __int64 *subscriptionId);
	virtual STDMETHODIMP _PublishMessage(HSTRING messageType, HSTRING message, __int64 *messageId);
	virtual STDMETHODIMP _PublishMessageWithCallback(HSTRING messageType, HSTRING message, MessageTransmittedHandler* messageTransmittedHandler, __int64 *messageId);
	virtual STDMETHODIMP _PublishBinaryMessage(HSTRING messageType, Storage::Streams::IBuffer* message, __int64 *messageId);
	virtual STDMETHODIMP _PublishBinaryMessageWithCallback(HSTRING messageType, Storage::Streams::IBuffer* message, MessageTransmittedHandler* messageTransmittedHandler, __int64 *messageId);
	virtual STDMETHODIMP _PublishUriMessage(Foundation::Uri* message, __int64 *messageId);
	virtual STDMETHODIMP _PublishUriMessageWithCallback(Foundation::Uri* message, MessageTransmittedHandler* messageTransmittedHandler, __int64 *messageId);
	virtual STDMETHODIMP _StopSubscribingForMessage(__int64 subscriptionId);
	virtual STDMETHODIMP _StopPublishingMessage(__int64 messageId);
	virtual STDMETHODIMP _add_DeviceArrived(DeviceArrivedEventHandler* arrivedHandler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_DeviceArrived(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_DeviceDeparted(DeviceDepartedEventHandler* departedHandler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_DeviceDeparted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_MaxMessageBytes(unsigned *value);
	virtual STDMETHODIMP _get_BitsPerSecond(unsigned __int64 *value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IProximityDevice_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProximityDevice_adaptor::BitsPerSecond)->_get_BitsPerSecond(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BitsPerSecond;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProximityDevice_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IProximityDevice_adaptor::MaxMessageBytes)->_get_MaxMessageBytes(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxMessageBytes;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<DeviceArrivedEventHandler> arrivedHandler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IProximityDevice_adaptor::DeviceArrived)->_add_DeviceArrived(arrivedHandler, &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IProximityDevice_adaptor::DeviceArrived)->_remove_DeviceArrived(cookie)); }
		} DeviceArrived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<DeviceDepartedEventHandler> departedHandler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IProximityDevice_adaptor::DeviceDeparted)->_add_DeviceDeparted(departedHandler, &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IProximityDevice_adaptor::DeviceDeparted)->_remove_DeviceDeparted(cookie)); }
		} DeviceDeparted;
	};
	__int64 SubscribeForMessage(hstring_ref messageType, handler_ref<MessageReceivedHandler> messageReceivedHandler) { __int64 subscriptionId; hrcheck(X::get()->_SubscribeForMessage(messageType, messageReceivedHandler, &subscriptionId)); return subscriptionId; }
	__int64 PublishMessage(hstring_ref messageType, hstring_ref message) { __int64 messageId; hrcheck(X::get()->_PublishMessage(messageType, message, &messageId)); return messageId; }
	__int64 PublishMessage(hstring_ref messageType, hstring_ref message, handler_ref<MessageTransmittedHandler> messageTransmittedHandler) { __int64 messageId; hrcheck(X::get()->_PublishMessageWithCallback(messageType, message, messageTransmittedHandler, &messageId)); return messageId; }
	__int64 PublishBinaryMessage(hstring_ref messageType, pptr<Storage::Streams::IBuffer> message) { __int64 messageId; hrcheck(X::get()->_PublishBinaryMessage(messageType, message, &messageId)); return messageId; }
	__int64 PublishBinaryMessage(hstring_ref messageType, pptr<Storage::Streams::IBuffer> message, handler_ref<MessageTransmittedHandler> messageTransmittedHandler) { __int64 messageId; hrcheck(X::get()->_PublishBinaryMessageWithCallback(messageType, message, messageTransmittedHandler, &messageId)); return messageId; }
	__int64 PublishUriMessage(pptr<Foundation::Uri> message) { __int64 messageId; hrcheck(X::get()->_PublishUriMessage(message, &messageId)); return messageId; }
	__int64 PublishUriMessage(pptr<Foundation::Uri> message, handler_ref<MessageTransmittedHandler> messageTransmittedHandler) { __int64 messageId; hrcheck(X::get()->_PublishUriMessageWithCallback(message, messageTransmittedHandler, &messageId)); return messageId; }
	void StopSubscribingForMessage(__int64 subscriptionId) { hrcheck(X::get()->_StopSubscribingForMessage(subscriptionId)); }
	void StopPublishingMessage(__int64 messageId) { hrcheck(X::get()->_StopPublishingMessage(messageId)); }
	IProximityDevice_adaptor() {}
};
template<typename X> struct adapt<IProximityDevice, X> : Windows::Networking::Proximity::IProximityDevice_adaptor<X> { typedef adapt IProximityDevice; };
struct IProximityDevice : IProximityDevice_raw, generate<IProximityDevice> {};

// ProximityDevice
template<typename> struct ProximityDevice_statics {
	static hstring GetDeviceSelector() { HSTRING selector; hrcheck(get_activation_factory<ProximityDevice, IProximityDeviceStatics>()->_GetDeviceSelector(&selector)); return from_abi(selector); }
	static ptr<ProximityDevice> GetDefault() { ProximityDevice* proximityDevice; hrcheck(get_activation_factory<ProximityDevice, IProximityDeviceStatics>()->_GetDefault(&proximityDevice)); return from_abi(proximityDevice); }
	static ptr<ProximityDevice> FromId(hstring_ref deviceId) { ProximityDevice* proximityDevice; hrcheck(get_activation_factory<ProximityDevice, IProximityDeviceStatics>()->_FromId(deviceId, &proximityDevice)); return from_abi(proximityDevice); }
};

template<typename X> struct statics<ProximityDevice, X> : X, Windows::Networking::Proximity::ProximityDevice_statics<void> {
	typedef typename X::root_type ProximityDevice;
};
struct ProximityDevice : generate<ProximityDevice> {
	using IProximityDevice::PublishMessage;
	using IProximityDevice::PublishBinaryMessage;
	using IProximityDevice::PublishUriMessage;
};

// MessageTransmittedHandler
struct MessageTransmittedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(ProximityDevice* sender, __int64 messageId) = 0;
};

// DeviceArrivedEventHandler
struct DeviceArrivedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(ProximityDevice* sender) = 0;
};

// DeviceDepartedEventHandler
struct DeviceDepartedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(ProximityDevice* sender) = 0;
};

// ITriggeredConnectionStateChangedEventArgs
struct ITriggeredConnectionStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(TriggeredConnectState *value);
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_Socket(Sockets::StreamSocket* *value);
};
template<typename X> struct ITriggeredConnectionStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ITriggeredConnectionStateChangedEventArgs_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			ptr<Sockets::StreamSocket> get() { Sockets::StreamSocket* value; hrcheck(enc(&ITriggeredConnectionStateChangedEventArgs_adaptor::Socket)->_get_Socket(&value)); return from_abi(value); }
			ptr<Sockets::StreamSocket> operator()() { return get(); }
			operator ptr<Sockets::StreamSocket> () { return get(); }
			ptr<Sockets::StreamSocket> operator->() { return get(); }
		} Socket;
		struct : property {
			TriggeredConnectState get() { TriggeredConnectState value; hrcheck(enc(&ITriggeredConnectionStateChangedEventArgs_adaptor::State)->_get_State(&value)); return value; }
			TriggeredConnectState operator()() { return get(); }
			operator TriggeredConnectState () { return get(); }
		} State;
	};
	ITriggeredConnectionStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITriggeredConnectionStateChangedEventArgs, X> : Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs_adaptor<X> { typedef adapt ITriggeredConnectionStateChangedEventArgs; };
struct ITriggeredConnectionStateChangedEventArgs : ITriggeredConnectionStateChangedEventArgs_raw, generate<ITriggeredConnectionStateChangedEventArgs> {};

// TriggeredConnectionStateChangedEventArgs
template<typename X> struct statics<TriggeredConnectionStateChangedEventArgs, X> : X {
	typedef typename X::root_type TriggeredConnectionStateChangedEventArgs;
};
struct TriggeredConnectionStateChangedEventArgs : generate<TriggeredConnectionStateChangedEventArgs> {};

// IPeerInformation
struct IPeerInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
};
template<typename X> struct IPeerInformation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPeerInformation_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
	};
	IPeerInformation_adaptor() {}
};
template<typename X> struct adapt<IPeerInformation, X> : Windows::Networking::Proximity::IPeerInformation_adaptor<X> { typedef adapt IPeerInformation; };
struct IPeerInformation : IPeerInformation_raw, generate<IPeerInformation> {};

// IPeerInformationWithHostAndService
struct IPeerInformationWithHostAndService_raw : IInspectable {
	virtual STDMETHODIMP _get_HostName(Networking::HostName* *value);
	virtual STDMETHODIMP _get_ServiceName(HSTRING *value);
};
template<typename X> struct IPeerInformationWithHostAndService_adaptor : X {
	union {
		struct : property {
			ptr<Networking::HostName> get() { Networking::HostName* value; hrcheck(enc(&IPeerInformationWithHostAndService_adaptor::HostName)->_get_HostName(&value)); return from_abi(value); }
			ptr<Networking::HostName> operator()() { return get(); }
			operator ptr<Networking::HostName> () { return get(); }
			ptr<Networking::HostName> operator->() { return get(); }
		} HostName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPeerInformationWithHostAndService_adaptor::ServiceName)->_get_ServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceName;
	};
	IPeerInformationWithHostAndService_adaptor() {}
};
template<typename X> struct adapt<IPeerInformationWithHostAndService, X> : Windows::Networking::Proximity::IPeerInformationWithHostAndService_adaptor<X> { typedef adapt IPeerInformationWithHostAndService; };
struct IPeerInformationWithHostAndService : IPeerInformationWithHostAndService_raw, generate<IPeerInformationWithHostAndService> {};

// IPeerInformation3
struct IPeerInformation3_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DiscoveryData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IPeerInformation3_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IPeerInformation3_adaptor::DiscoveryData)->_get_DiscoveryData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} DiscoveryData;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPeerInformation3_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
	};
	IPeerInformation3_adaptor() {}
};
template<typename X> struct adapt<IPeerInformation3, X> : Windows::Networking::Proximity::IPeerInformation3_adaptor<X> { typedef adapt IPeerInformation3; };
struct IPeerInformation3 : IPeerInformation3_raw, generate<IPeerInformation3> {};

// PeerInformation
template<typename X> struct statics<PeerInformation, X> : X {
	typedef typename X::root_type PeerInformation;
};
struct PeerInformation : generate<PeerInformation> {};

// IConnectionRequestedEventArgs
struct IConnectionRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PeerInformation(Proximity::PeerInformation* *value);
};
template<typename X> struct IConnectionRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Proximity::PeerInformation> get() { Proximity::PeerInformation* value; hrcheck(enc(&IConnectionRequestedEventArgs_adaptor::PeerInformation)->_get_PeerInformation(&value)); return from_abi(value); }
			ptr<Proximity::PeerInformation> operator()() { return get(); }
			operator ptr<Proximity::PeerInformation> () { return get(); }
			ptr<Proximity::PeerInformation> operator->() { return get(); }
		} PeerInformation;
	};
	IConnectionRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IConnectionRequestedEventArgs, X> : Windows::Networking::Proximity::IConnectionRequestedEventArgs_adaptor<X> { typedef adapt IConnectionRequestedEventArgs; };
struct IConnectionRequestedEventArgs : IConnectionRequestedEventArgs_raw, generate<IConnectionRequestedEventArgs> {};

// ConnectionRequestedEventArgs
template<typename X> struct statics<ConnectionRequestedEventArgs, X> : X {
	typedef typename X::root_type ConnectionRequestedEventArgs;
};
struct ConnectionRequestedEventArgs : generate<ConnectionRequestedEventArgs> {};

// IPeerWatcher
struct IPeerWatcher_raw : IInspectable {
	virtual STDMETHODIMP _add_Added(Foundation::TypedEventHandler<PeerWatcher*, PeerInformation*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Added(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Removed(Foundation::TypedEventHandler<PeerWatcher*, PeerInformation*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Removed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Updated(Foundation::TypedEventHandler<PeerWatcher*, PeerInformation*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Updated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<PeerWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<PeerWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Status(PeerWatcherStatus *status);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
};
template<typename X> struct IPeerWatcher_adaptor : X {
	union {
		struct : property {
			PeerWatcherStatus get() { PeerWatcherStatus status; hrcheck(enc(&IPeerWatcher_adaptor::Status)->_get_Status(&status)); return status; }
			PeerWatcherStatus operator()() { return get(); }
			operator PeerWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PeerWatcher>, ptr<PeerInformation>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPeerWatcher_adaptor::Added)->_add_Added(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPeerWatcher_adaptor::Added)->_remove_Added(token)); }
		} Added;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PeerWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPeerWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPeerWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PeerWatcher>, ptr<PeerInformation>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPeerWatcher_adaptor::Removed)->_add_Removed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPeerWatcher_adaptor::Removed)->_remove_Removed(token)); }
		} Removed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PeerWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPeerWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPeerWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PeerWatcher>, ptr<PeerInformation>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPeerWatcher_adaptor::Updated)->_add_Updated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPeerWatcher_adaptor::Updated)->_remove_Updated(token)); }
		} Updated;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IPeerWatcher_adaptor() {}
};
template<typename X> struct adapt<IPeerWatcher, X> : Windows::Networking::Proximity::IPeerWatcher_adaptor<X> { typedef adapt IPeerWatcher; };
struct IPeerWatcher : IPeerWatcher_raw, generate<IPeerWatcher> {};

// PeerWatcher
template<typename X> struct statics<PeerWatcher, X> : X {
	typedef typename X::root_type PeerWatcher;
};
struct PeerWatcher : generate<PeerWatcher> {};

// IPeerFinderStatics
struct IPeerFinderStatics : IInspectable {
	virtual STDMETHODIMP _get_AllowBluetooth(bool *value);
	virtual STDMETHODIMP _put_AllowBluetooth(bool value);
	virtual STDMETHODIMP _get_AllowInfrastructure(bool *value);
	virtual STDMETHODIMP _put_AllowInfrastructure(bool value);
	virtual STDMETHODIMP _get_AllowWiFiDirect(bool *value);
	virtual STDMETHODIMP _put_AllowWiFiDirect(bool value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_SupportedDiscoveryTypes(PeerDiscoveryTypes *value);
	virtual STDMETHODIMP _get_AlternateIdentities(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _StartWithMessage(HSTRING peerMessage);
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _add_TriggeredConnectionStateChanged(Foundation::TypedEventHandler<IInspectable*, TriggeredConnectionStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_TriggeredConnectionStateChanged(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ConnectionRequested(Foundation::TypedEventHandler<IInspectable*, ConnectionRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ConnectionRequested(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _FindAllPeersAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PeerInformation*>*>* *asyncOp);
	virtual STDMETHODIMP _ConnectAsync(PeerInformation* peerInformation, Foundation::IAsyncOperation<Sockets::StreamSocket*>* *asyncOp);
};

// IPeerFinderStatics2
struct IPeerFinderStatics2 : IInspectable {
	virtual STDMETHODIMP _get_Role(PeerRole *value);
	virtual STDMETHODIMP _put_Role(PeerRole value);
	virtual STDMETHODIMP _get_DiscoveryData(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_DiscoveryData(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _CreateWatcher(PeerWatcher* *watcher);
};

// PeerFinder
template<typename> struct PeerFinder_statics {
	static struct _AllowBluetooth : property {
		bool get() { bool value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_get_AllowBluetooth(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_put_AllowBluetooth(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} AllowBluetooth;
	static struct _AllowInfrastructure : property {
		bool get() { bool value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_get_AllowInfrastructure(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_put_AllowInfrastructure(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} AllowInfrastructure;
	static struct _AllowWiFiDirect : property {
		bool get() { bool value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_get_AllowWiFiDirect(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_put_AllowWiFiDirect(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} AllowWiFiDirect;
	static struct _AlternateIdentities : property {
		ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_get_AlternateIdentities(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
		ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
	} AlternateIdentities;
	static struct _DisplayName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_get_DisplayName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
		void put(hstring_ref value) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_put_DisplayName(value)); }
		void operator=(hstring_ref value) { put(value); }
		void operator()(hstring_ref value) { put(value); }
	} DisplayName;
	static struct _SupportedDiscoveryTypes : property {
		PeerDiscoveryTypes get() { PeerDiscoveryTypes value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_get_SupportedDiscoveryTypes(&value)); return value; }
		PeerDiscoveryTypes operator()() { return get(); }
		operator PeerDiscoveryTypes () { return get(); }
	} SupportedDiscoveryTypes;
	static struct _ConnectionRequested : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<ConnectionRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_add_ConnectionRequested(to_abi(handler), &cookie)); return cookie; }
		void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_remove_ConnectionRequested(cookie)); }
	} ConnectionRequested;
	static struct _TriggeredConnectionStateChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<TriggeredConnectionStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_add_TriggeredConnectionStateChanged(to_abi(handler), &cookie)); return cookie; }
		void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_remove_TriggeredConnectionStateChanged(cookie)); }
	} TriggeredConnectionStateChanged;
	static struct _DiscoveryData : property {
		ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics2>()->_get_DiscoveryData(&value)); return from_abi(value); }
		ptr<Storage::Streams::IBuffer> operator()() { return get(); }
		operator ptr<Storage::Streams::IBuffer> () { return get(); }
		ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics2>()->_put_DiscoveryData(value)); }
		void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
		void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
	} DiscoveryData;
	static struct _Role : property {
		PeerRole get() { PeerRole value; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics2>()->_get_Role(&value)); return value; }
		PeerRole operator()() { return get(); }
		operator PeerRole () { return get(); }
		void put(PeerRole value) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics2>()->_put_Role(value)); }
		void operator=(PeerRole value) { put(value); }
		void operator()(PeerRole value) { put(value); }
	} Role;
	static ptr<PeerWatcher> CreateWatcher() { PeerWatcher* watcher; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics2>()->_CreateWatcher(&watcher)); return from_abi(watcher); }
	static void Start() { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_Start()); }
	static void Start(hstring_ref peerMessage) { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_StartWithMessage(peerMessage)); }
	static void Stop() { hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_Stop()); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PeerInformation>>>>> FindAllPeersAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PeerInformation*>*>* asyncOp; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_FindAllPeersAsync(&asyncOp)); return from_abi(asyncOp); }
	static ptr<Foundation::IAsyncOperation<ptr<Sockets::StreamSocket>>> ConnectAsync(pptr<PeerInformation> peerInformation) { Foundation::IAsyncOperation<Sockets::StreamSocket*>* asyncOp; hrcheck(get_activation_factory<PeerFinder, IPeerFinderStatics>()->_ConnectAsync(peerInformation, &asyncOp)); return from_abi(asyncOp); }
};
template<typename X> typename PeerFinder_statics<X>::_AllowBluetooth PeerFinder_statics<X>::AllowBluetooth;
template<typename X> typename PeerFinder_statics<X>::_AllowInfrastructure PeerFinder_statics<X>::AllowInfrastructure;
template<typename X> typename PeerFinder_statics<X>::_AllowWiFiDirect PeerFinder_statics<X>::AllowWiFiDirect;
template<typename X> typename PeerFinder_statics<X>::_AlternateIdentities PeerFinder_statics<X>::AlternateIdentities;
template<typename X> typename PeerFinder_statics<X>::_DisplayName PeerFinder_statics<X>::DisplayName;
template<typename X> typename PeerFinder_statics<X>::_SupportedDiscoveryTypes PeerFinder_statics<X>::SupportedDiscoveryTypes;
template<typename X> typename PeerFinder_statics<X>::_ConnectionRequested PeerFinder_statics<X>::ConnectionRequested;
template<typename X> typename PeerFinder_statics<X>::_TriggeredConnectionStateChanged PeerFinder_statics<X>::TriggeredConnectionStateChanged;
template<typename X> typename PeerFinder_statics<X>::_DiscoveryData PeerFinder_statics<X>::DiscoveryData;
template<typename X> typename PeerFinder_statics<X>::_Role PeerFinder_statics<X>::Role;

template<typename X> struct statics<PeerFinder, X> : X, Windows::Networking::Proximity::PeerFinder_statics<void> {
	typedef typename X::root_type PeerFinder;
};
struct PeerFinder : generate<PeerFinder> {};
}}}
} // namespace iso_winrt
