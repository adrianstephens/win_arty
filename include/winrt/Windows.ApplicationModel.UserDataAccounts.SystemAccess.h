#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.UserDataAccounts.SystemAccess

#include "Windows.ApplicationModel.UserDataAccounts.SystemAccess.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
}
template<typename TResult> struct IAsyncOperation;
struct IAsyncAction;
struct Uri;
}
namespace Security { namespace Credentials {
struct PasswordCredential;
}}}

// defs

template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::DeviceAccountServerType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::DeviceAccountAuthenticationType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::DeviceAccountSyncScheduleKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::DeviceAccountMailAgeFilter> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::DeviceAccountIconId> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IUserDataAccountSystemAccessManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::DeviceAccountConfiguration> : class_type<Platform::Object, Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration, Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration2> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IUserDataAccountSystemAccessManagerStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataAccounts::SystemAccess::UserDataAccountSystemAccessManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration> { define_guid(0xAD0123A3, 0xFBDC, 0x4D1B, 0xBE, 0x43, 0x5A, 0x27, 0xEA, 0x4A, 0x1B, 0x63);};
template<> struct uuid<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration2> { define_guid(0xF2B2E5A6, 0x728D, 0x4A4A, 0x89, 0x45, 0x2B, 0xF8, 0x58, 0x1, 0x36, 0xDE);};
template<> struct uuid<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IUserDataAccountSystemAccessManagerStatics> { define_guid(0x9D6B11B9, 0xCBE5, 0x45F5, 0x82, 0x2B, 0xC2, 0x67, 0xB8, 0x1D, 0xBD, 0xB6);};
template<> struct uuid<Windows::ApplicationModel::UserDataAccounts::SystemAccess::IUserDataAccountSystemAccessManagerStatics2> { define_guid(0x943F854D, 0x4B4E, 0x439F, 0x83, 0xD3, 0x97, 0x9B, 0x27, 0xC0, 0x5A, 0xC7);};

// types

namespace Windows { namespace ApplicationModel { namespace UserDataAccounts { namespace SystemAccess {

// IDeviceAccountConfiguration
struct IDeviceAccountConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_AccountName(HSTRING *value);
	virtual STDMETHODIMP _put_AccountName(HSTRING value);
	virtual STDMETHODIMP _get_DeviceAccountTypeId(HSTRING *value);
	virtual STDMETHODIMP _put_DeviceAccountTypeId(HSTRING value);
	virtual STDMETHODIMP _get_ServerType(DeviceAccountServerType *value);
	virtual STDMETHODIMP _put_ServerType(DeviceAccountServerType value);
	virtual STDMETHODIMP _get_EmailAddress(HSTRING *value);
	virtual STDMETHODIMP _put_EmailAddress(HSTRING value);
	virtual STDMETHODIMP _get_Domain(HSTRING *value);
	virtual STDMETHODIMP _put_Domain(HSTRING value);
	virtual STDMETHODIMP _get_EmailSyncEnabled(bool *value);
	virtual STDMETHODIMP _put_EmailSyncEnabled(bool value);
	virtual STDMETHODIMP _get_ContactsSyncEnabled(bool *value);
	virtual STDMETHODIMP _put_ContactsSyncEnabled(bool value);
	virtual STDMETHODIMP _get_CalendarSyncEnabled(bool *value);
	virtual STDMETHODIMP _put_CalendarSyncEnabled(bool value);
	virtual STDMETHODIMP _get_IncomingServerAddress(HSTRING *value);
	virtual STDMETHODIMP _put_IncomingServerAddress(HSTRING value);
	virtual STDMETHODIMP _get_IncomingServerPort(int *value);
	virtual STDMETHODIMP _put_IncomingServerPort(int value);
	virtual STDMETHODIMP _get_IncomingServerRequiresSsl(bool *value);
	virtual STDMETHODIMP _put_IncomingServerRequiresSsl(bool value);
	virtual STDMETHODIMP _get_IncomingServerUsername(HSTRING *value);
	virtual STDMETHODIMP _put_IncomingServerUsername(HSTRING value);
	virtual STDMETHODIMP _get_OutgoingServerAddress(HSTRING *value);
	virtual STDMETHODIMP _put_OutgoingServerAddress(HSTRING value);
	virtual STDMETHODIMP _get_OutgoingServerPort(int *value);
	virtual STDMETHODIMP _put_OutgoingServerPort(int value);
	virtual STDMETHODIMP _get_OutgoingServerRequiresSsl(bool *value);
	virtual STDMETHODIMP _put_OutgoingServerRequiresSsl(bool value);
	virtual STDMETHODIMP _get_OutgoingServerUsername(HSTRING *value);
	virtual STDMETHODIMP _put_OutgoingServerUsername(HSTRING value);
};
template<typename X> struct IDeviceAccountConfiguration_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::AccountName)->_get_AccountName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::AccountName)->_put_AccountName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AccountName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::CalendarSyncEnabled)->_get_CalendarSyncEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::CalendarSyncEnabled)->_put_CalendarSyncEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CalendarSyncEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::ContactsSyncEnabled)->_get_ContactsSyncEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::ContactsSyncEnabled)->_put_ContactsSyncEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ContactsSyncEnabled;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::DeviceAccountTypeId)->_get_DeviceAccountTypeId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::DeviceAccountTypeId)->_put_DeviceAccountTypeId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DeviceAccountTypeId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::Domain)->_get_Domain(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::Domain)->_put_Domain(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Domain;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::EmailAddress)->_get_EmailAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::EmailAddress)->_put_EmailAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} EmailAddress;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::EmailSyncEnabled)->_get_EmailSyncEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::EmailSyncEnabled)->_put_EmailSyncEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} EmailSyncEnabled;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerAddress)->_get_IncomingServerAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerAddress)->_put_IncomingServerAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} IncomingServerAddress;
		struct : property {
			int get() { int value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerPort)->_get_IncomingServerPort(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerPort)->_put_IncomingServerPort(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} IncomingServerPort;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerRequiresSsl)->_get_IncomingServerRequiresSsl(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerRequiresSsl)->_put_IncomingServerRequiresSsl(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IncomingServerRequiresSsl;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerUsername)->_get_IncomingServerUsername(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::IncomingServerUsername)->_put_IncomingServerUsername(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} IncomingServerUsername;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerAddress)->_get_OutgoingServerAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerAddress)->_put_OutgoingServerAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} OutgoingServerAddress;
		struct : property {
			int get() { int value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerPort)->_get_OutgoingServerPort(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerPort)->_put_OutgoingServerPort(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} OutgoingServerPort;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerRequiresSsl)->_get_OutgoingServerRequiresSsl(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerRequiresSsl)->_put_OutgoingServerRequiresSsl(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} OutgoingServerRequiresSsl;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerUsername)->_get_OutgoingServerUsername(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::OutgoingServerUsername)->_put_OutgoingServerUsername(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} OutgoingServerUsername;
		struct : property {
			DeviceAccountServerType get() { DeviceAccountServerType value; hrcheck(enc(&IDeviceAccountConfiguration_adaptor::ServerType)->_get_ServerType(&value)); return value; }
			DeviceAccountServerType operator()() { return get(); }
			operator DeviceAccountServerType () { return get(); }
			void put(DeviceAccountServerType value) { hrcheck(enc(&IDeviceAccountConfiguration_adaptor::ServerType)->_put_ServerType(value)); }
			void operator=(DeviceAccountServerType value) { put(value); }
			void operator()(DeviceAccountServerType value) { put(value); }
		} ServerType;
	};
	IDeviceAccountConfiguration_adaptor() {}
};
template<typename X> struct adapt<IDeviceAccountConfiguration, X> : Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration_adaptor<X> { typedef adapt IDeviceAccountConfiguration; };
struct IDeviceAccountConfiguration : IDeviceAccountConfiguration_raw, generate<IDeviceAccountConfiguration> {};

// IDeviceAccountConfiguration2
struct IDeviceAccountConfiguration2_raw : IInspectable {
	virtual STDMETHODIMP _get_IncomingServerCredential(Security::Credentials::PasswordCredential* *value);
	virtual STDMETHODIMP _put_IncomingServerCredential(Security::Credentials::PasswordCredential* value);
	virtual STDMETHODIMP _get_OutgoingServerCredential(Security::Credentials::PasswordCredential* *value);
	virtual STDMETHODIMP _put_OutgoingServerCredential(Security::Credentials::PasswordCredential* value);
	virtual STDMETHODIMP _get_OAuthRefreshToken(HSTRING *value);
	virtual STDMETHODIMP _put_OAuthRefreshToken(HSTRING value);
	virtual STDMETHODIMP _get_IsExternallyManaged(bool *value);
	virtual STDMETHODIMP _put_IsExternallyManaged(bool value);
	virtual STDMETHODIMP _get_AccountIconId(DeviceAccountIconId *value);
	virtual STDMETHODIMP _put_AccountIconId(DeviceAccountIconId value);
	virtual STDMETHODIMP _get_AuthenticationType(DeviceAccountAuthenticationType *value);
	virtual STDMETHODIMP _put_AuthenticationType(DeviceAccountAuthenticationType value);
	virtual STDMETHODIMP _get_IsSsoAuthenticationSupported(bool *value);
	virtual STDMETHODIMP _get_SsoAccountId(HSTRING *value);
	virtual STDMETHODIMP _put_SsoAccountId(HSTRING value);
	virtual STDMETHODIMP _get_AlwaysDownloadFullMessage(bool *value);
	virtual STDMETHODIMP _put_AlwaysDownloadFullMessage(bool value);
	virtual STDMETHODIMP _get_DoesPolicyAllowMailSync(bool *value);
	virtual STDMETHODIMP _get_SyncScheduleKind(DeviceAccountSyncScheduleKind *value);
	virtual STDMETHODIMP _put_SyncScheduleKind(DeviceAccountSyncScheduleKind value);
	virtual STDMETHODIMP _get_MailAgeFilter(DeviceAccountMailAgeFilter *value);
	virtual STDMETHODIMP _put_MailAgeFilter(DeviceAccountMailAgeFilter value);
	virtual STDMETHODIMP _get_IsClientAuthenticationCertificateRequired(bool *value);
	virtual STDMETHODIMP _put_IsClientAuthenticationCertificateRequired(bool value);
	virtual STDMETHODIMP _get_AutoSelectAuthenticationCertificate(bool *value);
	virtual STDMETHODIMP _put_AutoSelectAuthenticationCertificate(bool value);
	virtual STDMETHODIMP _get_AuthenticationCertificateId(HSTRING *value);
	virtual STDMETHODIMP _put_AuthenticationCertificateId(HSTRING value);
	virtual STDMETHODIMP _get_CardDavSyncScheduleKind(DeviceAccountSyncScheduleKind *value);
	virtual STDMETHODIMP _put_CardDavSyncScheduleKind(DeviceAccountSyncScheduleKind value);
	virtual STDMETHODIMP _get_CalDavSyncScheduleKind(DeviceAccountSyncScheduleKind *value);
	virtual STDMETHODIMP _put_CalDavSyncScheduleKind(DeviceAccountSyncScheduleKind value);
	virtual STDMETHODIMP _get_CardDavServerUrl(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_CardDavServerUrl(Foundation::Uri* value);
	virtual STDMETHODIMP _get_CardDavRequiresSsl(bool *value);
	virtual STDMETHODIMP _put_CardDavRequiresSsl(bool value);
	virtual STDMETHODIMP _get_CalDavServerUrl(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_CalDavServerUrl(Foundation::Uri* value);
	virtual STDMETHODIMP _get_CalDavRequiresSsl(bool *value);
	virtual STDMETHODIMP _put_CalDavRequiresSsl(bool value);
	virtual STDMETHODIMP _get_WasModifiedByUser(bool *value);
	virtual STDMETHODIMP _put_WasModifiedByUser(bool value);
	virtual STDMETHODIMP _get_WasIncomingServerCertificateHashConfirmed(bool *value);
	virtual STDMETHODIMP _put_WasIncomingServerCertificateHashConfirmed(bool value);
	virtual STDMETHODIMP _get_IncomingServerCertificateHash(HSTRING *value);
	virtual STDMETHODIMP _put_IncomingServerCertificateHash(HSTRING value);
	virtual STDMETHODIMP _get_IsOutgoingServerAuthenticationRequired(bool *value);
	virtual STDMETHODIMP _put_IsOutgoingServerAuthenticationRequired(bool value);
	virtual STDMETHODIMP _get_IsOutgoingServerAuthenticationEnabled(bool *value);
	virtual STDMETHODIMP _put_IsOutgoingServerAuthenticationEnabled(bool value);
	virtual STDMETHODIMP _get_WasOutgoingServerCertificateHashConfirmed(bool *value);
	virtual STDMETHODIMP _put_WasOutgoingServerCertificateHashConfirmed(bool value);
	virtual STDMETHODIMP _get_OutgoingServerCertificateHash(HSTRING *value);
	virtual STDMETHODIMP _put_OutgoingServerCertificateHash(HSTRING value);
	virtual STDMETHODIMP _get_IsSyncScheduleManagedBySystem(bool *value);
	virtual STDMETHODIMP _put_IsSyncScheduleManagedBySystem(bool value);
};
template<typename X> struct IDeviceAccountConfiguration2_adaptor : X {
	union {
		struct : property {
			DeviceAccountIconId get() { DeviceAccountIconId value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AccountIconId)->_get_AccountIconId(&value)); return value; }
			DeviceAccountIconId operator()() { return get(); }
			operator DeviceAccountIconId () { return get(); }
			void put(DeviceAccountIconId value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AccountIconId)->_put_AccountIconId(value)); }
			void operator=(DeviceAccountIconId value) { put(value); }
			void operator()(DeviceAccountIconId value) { put(value); }
		} AccountIconId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AlwaysDownloadFullMessage)->_get_AlwaysDownloadFullMessage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AlwaysDownloadFullMessage)->_put_AlwaysDownloadFullMessage(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AlwaysDownloadFullMessage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AuthenticationCertificateId)->_get_AuthenticationCertificateId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AuthenticationCertificateId)->_put_AuthenticationCertificateId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AuthenticationCertificateId;
		struct : property {
			DeviceAccountAuthenticationType get() { DeviceAccountAuthenticationType value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AuthenticationType)->_get_AuthenticationType(&value)); return value; }
			DeviceAccountAuthenticationType operator()() { return get(); }
			operator DeviceAccountAuthenticationType () { return get(); }
			void put(DeviceAccountAuthenticationType value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AuthenticationType)->_put_AuthenticationType(value)); }
			void operator=(DeviceAccountAuthenticationType value) { put(value); }
			void operator()(DeviceAccountAuthenticationType value) { put(value); }
		} AuthenticationType;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AutoSelectAuthenticationCertificate)->_get_AutoSelectAuthenticationCertificate(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::AutoSelectAuthenticationCertificate)->_put_AutoSelectAuthenticationCertificate(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoSelectAuthenticationCertificate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CalDavRequiresSsl)->_get_CalDavRequiresSsl(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CalDavRequiresSsl)->_put_CalDavRequiresSsl(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CalDavRequiresSsl;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CalDavServerUrl)->_get_CalDavServerUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CalDavServerUrl)->_put_CalDavServerUrl(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} CalDavServerUrl;
		struct : property {
			DeviceAccountSyncScheduleKind get() { DeviceAccountSyncScheduleKind value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CalDavSyncScheduleKind)->_get_CalDavSyncScheduleKind(&value)); return value; }
			DeviceAccountSyncScheduleKind operator()() { return get(); }
			operator DeviceAccountSyncScheduleKind () { return get(); }
			void put(DeviceAccountSyncScheduleKind value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CalDavSyncScheduleKind)->_put_CalDavSyncScheduleKind(value)); }
			void operator=(DeviceAccountSyncScheduleKind value) { put(value); }
			void operator()(DeviceAccountSyncScheduleKind value) { put(value); }
		} CalDavSyncScheduleKind;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CardDavRequiresSsl)->_get_CardDavRequiresSsl(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CardDavRequiresSsl)->_put_CardDavRequiresSsl(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CardDavRequiresSsl;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CardDavServerUrl)->_get_CardDavServerUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CardDavServerUrl)->_put_CardDavServerUrl(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} CardDavServerUrl;
		struct : property {
			DeviceAccountSyncScheduleKind get() { DeviceAccountSyncScheduleKind value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CardDavSyncScheduleKind)->_get_CardDavSyncScheduleKind(&value)); return value; }
			DeviceAccountSyncScheduleKind operator()() { return get(); }
			operator DeviceAccountSyncScheduleKind () { return get(); }
			void put(DeviceAccountSyncScheduleKind value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::CardDavSyncScheduleKind)->_put_CardDavSyncScheduleKind(value)); }
			void operator=(DeviceAccountSyncScheduleKind value) { put(value); }
			void operator()(DeviceAccountSyncScheduleKind value) { put(value); }
		} CardDavSyncScheduleKind;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::DoesPolicyAllowMailSync)->_get_DoesPolicyAllowMailSync(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} DoesPolicyAllowMailSync;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IncomingServerCertificateHash)->_get_IncomingServerCertificateHash(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IncomingServerCertificateHash)->_put_IncomingServerCertificateHash(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} IncomingServerCertificateHash;
		struct : property {
			ptr<Security::Credentials::PasswordCredential> get() { Security::Credentials::PasswordCredential* value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IncomingServerCredential)->_get_IncomingServerCredential(&value)); return from_abi(value); }
			ptr<Security::Credentials::PasswordCredential> operator()() { return get(); }
			operator ptr<Security::Credentials::PasswordCredential> () { return get(); }
			ptr<Security::Credentials::PasswordCredential> operator->() { return get(); }
			void put(pptr<Security::Credentials::PasswordCredential> value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IncomingServerCredential)->_put_IncomingServerCredential(value)); }
			void operator=(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
			void operator()(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
		} IncomingServerCredential;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsClientAuthenticationCertificateRequired)->_get_IsClientAuthenticationCertificateRequired(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsClientAuthenticationCertificateRequired)->_put_IsClientAuthenticationCertificateRequired(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsClientAuthenticationCertificateRequired;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsExternallyManaged)->_get_IsExternallyManaged(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsExternallyManaged)->_put_IsExternallyManaged(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsExternallyManaged;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsOutgoingServerAuthenticationEnabled)->_get_IsOutgoingServerAuthenticationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsOutgoingServerAuthenticationEnabled)->_put_IsOutgoingServerAuthenticationEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsOutgoingServerAuthenticationEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsOutgoingServerAuthenticationRequired)->_get_IsOutgoingServerAuthenticationRequired(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsOutgoingServerAuthenticationRequired)->_put_IsOutgoingServerAuthenticationRequired(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsOutgoingServerAuthenticationRequired;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsSsoAuthenticationSupported)->_get_IsSsoAuthenticationSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSsoAuthenticationSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsSyncScheduleManagedBySystem)->_get_IsSyncScheduleManagedBySystem(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::IsSyncScheduleManagedBySystem)->_put_IsSyncScheduleManagedBySystem(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSyncScheduleManagedBySystem;
		struct : property {
			DeviceAccountMailAgeFilter get() { DeviceAccountMailAgeFilter value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::MailAgeFilter)->_get_MailAgeFilter(&value)); return value; }
			DeviceAccountMailAgeFilter operator()() { return get(); }
			operator DeviceAccountMailAgeFilter () { return get(); }
			void put(DeviceAccountMailAgeFilter value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::MailAgeFilter)->_put_MailAgeFilter(value)); }
			void operator=(DeviceAccountMailAgeFilter value) { put(value); }
			void operator()(DeviceAccountMailAgeFilter value) { put(value); }
		} MailAgeFilter;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::OAuthRefreshToken)->_get_OAuthRefreshToken(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::OAuthRefreshToken)->_put_OAuthRefreshToken(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} OAuthRefreshToken;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::OutgoingServerCertificateHash)->_get_OutgoingServerCertificateHash(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::OutgoingServerCertificateHash)->_put_OutgoingServerCertificateHash(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} OutgoingServerCertificateHash;
		struct : property {
			ptr<Security::Credentials::PasswordCredential> get() { Security::Credentials::PasswordCredential* value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::OutgoingServerCredential)->_get_OutgoingServerCredential(&value)); return from_abi(value); }
			ptr<Security::Credentials::PasswordCredential> operator()() { return get(); }
			operator ptr<Security::Credentials::PasswordCredential> () { return get(); }
			ptr<Security::Credentials::PasswordCredential> operator->() { return get(); }
			void put(pptr<Security::Credentials::PasswordCredential> value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::OutgoingServerCredential)->_put_OutgoingServerCredential(value)); }
			void operator=(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
			void operator()(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
		} OutgoingServerCredential;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::SsoAccountId)->_get_SsoAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::SsoAccountId)->_put_SsoAccountId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SsoAccountId;
		struct : property {
			DeviceAccountSyncScheduleKind get() { DeviceAccountSyncScheduleKind value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::SyncScheduleKind)->_get_SyncScheduleKind(&value)); return value; }
			DeviceAccountSyncScheduleKind operator()() { return get(); }
			operator DeviceAccountSyncScheduleKind () { return get(); }
			void put(DeviceAccountSyncScheduleKind value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::SyncScheduleKind)->_put_SyncScheduleKind(value)); }
			void operator=(DeviceAccountSyncScheduleKind value) { put(value); }
			void operator()(DeviceAccountSyncScheduleKind value) { put(value); }
		} SyncScheduleKind;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::WasIncomingServerCertificateHashConfirmed)->_get_WasIncomingServerCertificateHashConfirmed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::WasIncomingServerCertificateHashConfirmed)->_put_WasIncomingServerCertificateHashConfirmed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} WasIncomingServerCertificateHashConfirmed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::WasModifiedByUser)->_get_WasModifiedByUser(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::WasModifiedByUser)->_put_WasModifiedByUser(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} WasModifiedByUser;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::WasOutgoingServerCertificateHashConfirmed)->_get_WasOutgoingServerCertificateHashConfirmed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceAccountConfiguration2_adaptor::WasOutgoingServerCertificateHashConfirmed)->_put_WasOutgoingServerCertificateHashConfirmed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} WasOutgoingServerCertificateHashConfirmed;
	};
	IDeviceAccountConfiguration2_adaptor() {}
};
template<typename X> struct adapt<IDeviceAccountConfiguration2, X> : Windows::ApplicationModel::UserDataAccounts::SystemAccess::IDeviceAccountConfiguration2_adaptor<X> { typedef adapt IDeviceAccountConfiguration2; };
struct IDeviceAccountConfiguration2 : IDeviceAccountConfiguration2_raw, generate<IDeviceAccountConfiguration2> {};

// IUserDataAccountSystemAccessManagerStatics
struct IUserDataAccountSystemAccessManagerStatics : IInspectable {
	virtual STDMETHODIMP _AddAndShowDeviceAccountsAsync(Foundation::Collections::IIterable<DeviceAccountConfiguration*>* accounts, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* *result);
};

// DeviceAccountConfiguration
template<typename X> struct statics<DeviceAccountConfiguration, X> : X {
	typedef typename X::root_type DeviceAccountConfiguration;
};
struct DeviceAccountConfiguration : generate<DeviceAccountConfiguration> {};

// IUserDataAccountSystemAccessManagerStatics2
struct IUserDataAccountSystemAccessManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _SuppressLocalAccountWithAccountAsync(HSTRING userDataAccountId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _CreateDeviceAccountAsync(DeviceAccountConfiguration* account, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _DeleteDeviceAccountAsync(HSTRING accountId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _GetDeviceAccountConfigurationAsync(HSTRING accountId, Foundation::IAsyncOperation<DeviceAccountConfiguration*>* *result);
};

// UserDataAccountSystemAccessManager
template<typename> struct UserDataAccountSystemAccessManager_statics {
	static ptr<Foundation::IAsyncAction> SuppressLocalAccountWithAccountAsync(hstring_ref userDataAccountId) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<UserDataAccountSystemAccessManager, IUserDataAccountSystemAccessManagerStatics2>()->_SuppressLocalAccountWithAccountAsync(userDataAccountId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<hstring>> CreateDeviceAccountAsync(pptr<DeviceAccountConfiguration> account) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(get_activation_factory<UserDataAccountSystemAccessManager, IUserDataAccountSystemAccessManagerStatics2>()->_CreateDeviceAccountAsync(account, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> DeleteDeviceAccountAsync(hstring_ref accountId) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<UserDataAccountSystemAccessManager, IUserDataAccountSystemAccessManagerStatics2>()->_DeleteDeviceAccountAsync(accountId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<DeviceAccountConfiguration>>> GetDeviceAccountConfigurationAsync(hstring_ref accountId) { Foundation::IAsyncOperation<DeviceAccountConfiguration*>* result; hrcheck(get_activation_factory<UserDataAccountSystemAccessManager, IUserDataAccountSystemAccessManagerStatics2>()->_GetDeviceAccountConfigurationAsync(accountId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<hstring>>>> AddAndShowDeviceAccountsAsync(pptr<Foundation::Collections::IIterable<ptr<DeviceAccountConfiguration>>> accounts) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* result; hrcheck(get_activation_factory<UserDataAccountSystemAccessManager, IUserDataAccountSystemAccessManagerStatics>()->_AddAndShowDeviceAccountsAsync(to_abi(accounts), &result)); return from_abi(result); }
};

template<typename X> struct statics<UserDataAccountSystemAccessManager, X> : X, Windows::ApplicationModel::UserDataAccounts::SystemAccess::UserDataAccountSystemAccessManager_statics<void> {
	typedef typename X::root_type UserDataAccountSystemAccessManager;
};
struct UserDataAccountSystemAccessManager : generate<UserDataAccountSystemAccessManager> {};
}}}}
} // namespace iso_winrt
