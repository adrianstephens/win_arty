#pragma once
// generated by isopod tools
// namespaces:
// Windows.Storage.FileProperties

#include "Windows.Storage.FileProperties.0.h"
#include "Windows.Storage.Streams.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Geolocation {
struct Geolocator;
struct Geopoint;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVector;
template<typename K, typename V> struct IKeyValuePair;
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMap;
}}
namespace Storage {
struct IStorageFile;
}}

// defs

template<> struct def<Windows::Storage::FileProperties::IGeotagHelperStatics> : interface_type<> {};
template<> struct def<Windows::Storage::FileProperties::GeotagHelper> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Storage::FileProperties::PropertyPrefetchOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Storage::FileProperties::ThumbnailType> : enum_type<int> {};
template<> struct def<Windows::Storage::FileProperties::IThumbnailProperties> : interface_type<> {};
template<> struct def<Windows::Storage::FileProperties::StorageItemThumbnail> : class_type<Platform::Object, Windows::Storage::Streams::IRandomAccessStreamWithContentType, Windows::Storage::Streams::IContentTypeProvider, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IOutputStream, Windows::Foundation::IClosable, Windows::Storage::Streams::IInputStream, Windows::Storage::FileProperties::IThumbnailProperties> {};
template<> struct def<Windows::Storage::FileProperties::ThumbnailMode> : enum_type<int> {};
template<> struct def<Windows::Storage::FileProperties::ThumbnailOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Storage::FileProperties::PhotoOrientation> : enum_type<int> {};
template<> struct def<Windows::Storage::FileProperties::VideoOrientation> : enum_type<int> {};
template<> struct def<Windows::Storage::FileProperties::IStorageItemExtraProperties> : overridable_type<> {};
template<> struct def<Windows::Storage::FileProperties::IStorageItemContentProperties> : interface_type<Windows::Storage::FileProperties::IStorageItemExtraProperties> {};
template<> struct def<Windows::Storage::FileProperties::IMusicProperties> : interface_type<Windows::Storage::FileProperties::IStorageItemExtraProperties> {};
template<> struct def<Windows::Storage::FileProperties::MusicProperties> : class_type<Platform::Object, Windows::Storage::FileProperties::IMusicProperties> {};
template<> struct def<Windows::Storage::FileProperties::IVideoProperties> : interface_type<Windows::Storage::FileProperties::IStorageItemExtraProperties> {};
template<> struct def<Windows::Storage::FileProperties::VideoProperties> : class_type<Platform::Object, Windows::Storage::FileProperties::IVideoProperties> {};
template<> struct def<Windows::Storage::FileProperties::IImageProperties> : interface_type<Windows::Storage::FileProperties::IStorageItemExtraProperties> {};
template<> struct def<Windows::Storage::FileProperties::ImageProperties> : class_type<Platform::Object, Windows::Storage::FileProperties::IImageProperties> {};
template<> struct def<Windows::Storage::FileProperties::IDocumentProperties> : interface_type<Windows::Storage::FileProperties::IStorageItemExtraProperties> {};
template<> struct def<Windows::Storage::FileProperties::DocumentProperties> : class_type<Platform::Object, Windows::Storage::FileProperties::IDocumentProperties> {};
template<> struct def<Windows::Storage::FileProperties::IBasicProperties> : interface_type<> {};
template<> struct def<Windows::Storage::FileProperties::StorageItemContentProperties> : class_type<Platform::Object, Windows::Storage::FileProperties::IStorageItemContentProperties> {};
template<> struct def<Windows::Storage::FileProperties::BasicProperties> : class_type<Platform::Object, Windows::Storage::FileProperties::IBasicProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties> {};

// uuids

template<> struct uuid<Windows::Storage::FileProperties::IGeotagHelperStatics> { define_guid(0x41493244, 0x2524, 0x4655, 0x86, 0xA6, 0xED, 0x16, 0xF5, 0xFC, 0x71, 0x6B);};
template<> struct uuid<Windows::Storage::FileProperties::IThumbnailProperties> { define_guid(0x693DD42F, 0xDBE7, 0x49B5, 0xB3, 0xB3, 0x28, 0x93, 0xAC, 0x5D, 0x34, 0x23);};
template<> struct uuid<Windows::Storage::FileProperties::IStorageItemExtraProperties> { define_guid(0xC54361B2, 0x54CD, 0x432B, 0xBD, 0xBC, 0x4B, 0x19, 0xC4, 0xB4, 0x70, 0xD7);};
template<> struct uuid<Windows::Storage::FileProperties::IStorageItemContentProperties> { define_guid(0x5294BAD, 0xBC38, 0x48BF, 0x85, 0xD7, 0x77, 0xE, 0xE, 0x2A, 0xE0, 0xBA);};
template<> struct uuid<Windows::Storage::FileProperties::IMusicProperties> { define_guid(0xBC8AAB62, 0x66EC, 0x419A, 0xBC, 0x5D, 0xCA, 0x65, 0xA4, 0xCB, 0x46, 0xDA);};
template<> struct uuid<Windows::Storage::FileProperties::IVideoProperties> { define_guid(0x719AE507, 0x68DE, 0x4DB8, 0x97, 0xDE, 0x49, 0x99, 0x8C, 0x5, 0x9F, 0x2F);};
template<> struct uuid<Windows::Storage::FileProperties::IImageProperties> { define_guid(0x523C9424, 0xFCFF, 0x4275, 0xAF, 0xEE, 0xEC, 0xDB, 0x9A, 0xB4, 0x79, 0x73);};
template<> struct uuid<Windows::Storage::FileProperties::IDocumentProperties> { define_guid(0x7EAB19BC, 0x1821, 0x4923, 0xB4, 0xA9, 0xA, 0xEA, 0x40, 0x4D, 0x0, 0x70);};
template<> struct uuid<Windows::Storage::FileProperties::IBasicProperties> { define_guid(0xD05D55DB, 0x785E, 0x4A66, 0xBE, 0x2, 0x9B, 0xEE, 0xC5, 0x8A, 0xEA, 0x81);};

// types

namespace Windows { namespace Storage { namespace FileProperties {

// IGeotagHelperStatics
struct IGeotagHelperStatics : IInspectable {
	virtual STDMETHODIMP _GetGeotagAsync(IStorageFile* file, Foundation::IAsyncOperation<Devices::Geolocation::Geopoint*>* *operation);
	virtual STDMETHODIMP _SetGeotagFromGeolocatorAsync(IStorageFile* file, Devices::Geolocation::Geolocator* geolocator, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _SetGeotagAsync(IStorageFile* file, Devices::Geolocation::Geopoint* geopoint, Foundation::IAsyncAction* *operation);
};

// GeotagHelper
template<typename> struct GeotagHelper_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Devices::Geolocation::Geopoint>>> GetGeotagAsync(pptr<IStorageFile> file) { Foundation::IAsyncOperation<Devices::Geolocation::Geopoint*>* operation; hrcheck(get_activation_factory<GeotagHelper, IGeotagHelperStatics>()->_GetGeotagAsync(file, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> SetGeotagFromGeolocatorAsync(pptr<IStorageFile> file, pptr<Devices::Geolocation::Geolocator> geolocator) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<GeotagHelper, IGeotagHelperStatics>()->_SetGeotagFromGeolocatorAsync(file, geolocator, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> SetGeotagAsync(pptr<IStorageFile> file, pptr<Devices::Geolocation::Geopoint> geopoint) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<GeotagHelper, IGeotagHelperStatics>()->_SetGeotagAsync(file, geopoint, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<GeotagHelper, X> : X, Windows::Storage::FileProperties::GeotagHelper_statics<void> {
	typedef typename X::root_type GeotagHelper;
};
struct GeotagHelper : generate<GeotagHelper> {};

// IThumbnailProperties
struct IThumbnailProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_OriginalWidth(unsigned *value);
	virtual STDMETHODIMP _get_OriginalHeight(unsigned *value);
	virtual STDMETHODIMP _get_ReturnedSmallerCachedSize(bool *value);
	virtual STDMETHODIMP _get_Type(ThumbnailType *value);
};
template<typename X> struct IThumbnailProperties_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IThumbnailProperties_adaptor::OriginalHeight)->_get_OriginalHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} OriginalHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IThumbnailProperties_adaptor::OriginalWidth)->_get_OriginalWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} OriginalWidth;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IThumbnailProperties_adaptor::ReturnedSmallerCachedSize)->_get_ReturnedSmallerCachedSize(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ReturnedSmallerCachedSize;
		struct : property {
			ThumbnailType get() { ThumbnailType value; hrcheck(enc(&IThumbnailProperties_adaptor::Type)->_get_Type(&value)); return value; }
			ThumbnailType operator()() { return get(); }
			operator ThumbnailType () { return get(); }
		} Type;
	};
	IThumbnailProperties_adaptor() {}
};
template<typename X> struct adapt<IThumbnailProperties, X> : Windows::Storage::FileProperties::IThumbnailProperties_adaptor<X> { typedef adapt IThumbnailProperties; };
struct IThumbnailProperties : IThumbnailProperties_raw, generate<IThumbnailProperties> {};

// StorageItemThumbnail
template<typename X> struct statics<StorageItemThumbnail, X> : X {
	typedef typename X::root_type StorageItemThumbnail;
};
struct StorageItemThumbnail : generate<StorageItemThumbnail> {};

// IStorageItemExtraProperties
struct IStorageItemExtraProperties_raw : IInspectable {
	virtual STDMETHODIMP _RetrievePropertiesAsync(Foundation::Collections::IIterable<HSTRING>* propertiesToRetrieve, Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* *operation) = 0;
	virtual STDMETHODIMP _SavePropertiesAsync(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, IInspectable*>*>* propertiesToSave, Foundation::IAsyncAction* *operation) = 0;
	virtual STDMETHODIMP _SavePropertiesAsyncOverloadDefault(Foundation::IAsyncAction* *operation) = 0;
};
template<typename X> struct IStorageItemExtraProperties_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMap<hstring, object>>>> RetrievePropertiesAsync(pptr<Foundation::Collections::IIterable<hstring>> propertiesToRetrieve) { Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* operation; hrcheck(X::get()->_RetrievePropertiesAsync(to_abi(propertiesToRetrieve), &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SavePropertiesAsync(pptr<Foundation::Collections::IIterable<ptr<Foundation::Collections::IKeyValuePair<hstring, object>>>> propertiesToSave) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SavePropertiesAsync(to_abi(propertiesToSave), &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SavePropertiesAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SavePropertiesAsyncOverloadDefault(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IStorageItemExtraProperties, X> : Windows::Storage::FileProperties::IStorageItemExtraProperties_adaptor<X> { typedef adapt IStorageItemExtraProperties; };
template<typename X> struct IStorageItemExtraProperties_unadaptor : X {
	STDMETHODIMP _RetrievePropertiesAsync(Foundation::Collections::IIterable<HSTRING>* propertiesToRetrieve, Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->RetrievePropertiesAsync(propertiesToRetrieve)); }); }
	STDMETHODIMP _SavePropertiesAsync(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, IInspectable*>*>* propertiesToSave, Foundation::IAsyncAction* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->SavePropertiesAsync(propertiesToSave)); }); }
	STDMETHODIMP _SavePropertiesAsyncOverloadDefault(Foundation::IAsyncAction* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->SavePropertiesAsync()); }); }
};
template<typename X> struct unadapt<IStorageItemExtraProperties, X> : Windows::Storage::FileProperties::IStorageItemExtraProperties_unadaptor<X> {};
struct IStorageItemExtraProperties : IStorageItemExtraProperties_raw, generate<IStorageItemExtraProperties> {};

// IStorageItemContentProperties
struct IStorageItemContentProperties_raw : IInspectable {
	virtual STDMETHODIMP _GetMusicPropertiesAsync(Foundation::IAsyncOperation<MusicProperties*>* *operation);
	virtual STDMETHODIMP _GetVideoPropertiesAsync(Foundation::IAsyncOperation<VideoProperties*>* *operation);
	virtual STDMETHODIMP _GetImagePropertiesAsync(Foundation::IAsyncOperation<ImageProperties*>* *operation);
	virtual STDMETHODIMP _GetDocumentPropertiesAsync(Foundation::IAsyncOperation<DocumentProperties*>* *operation);
};
template<typename X> struct IStorageItemContentProperties_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<MusicProperties>>> GetMusicPropertiesAsync() { Foundation::IAsyncOperation<MusicProperties*>* operation; hrcheck(X::get()->_GetMusicPropertiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<VideoProperties>>> GetVideoPropertiesAsync() { Foundation::IAsyncOperation<VideoProperties*>* operation; hrcheck(X::get()->_GetVideoPropertiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ImageProperties>>> GetImagePropertiesAsync() { Foundation::IAsyncOperation<ImageProperties*>* operation; hrcheck(X::get()->_GetImagePropertiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<DocumentProperties>>> GetDocumentPropertiesAsync() { Foundation::IAsyncOperation<DocumentProperties*>* operation; hrcheck(X::get()->_GetDocumentPropertiesAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IStorageItemContentProperties, X> : Windows::Storage::FileProperties::IStorageItemContentProperties_adaptor<X> { typedef adapt IStorageItemContentProperties; };
struct IStorageItemContentProperties : IStorageItemContentProperties_raw, generate<IStorageItemContentProperties> {};

// IMusicProperties
struct IMusicProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Album(HSTRING *value);
	virtual STDMETHODIMP _put_Album(HSTRING value);
	virtual STDMETHODIMP _get_Artist(HSTRING *value);
	virtual STDMETHODIMP _put_Artist(HSTRING value);
	virtual STDMETHODIMP _get_Genre(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_TrackNumber(unsigned *value);
	virtual STDMETHODIMP _put_TrackNumber(unsigned value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Rating(unsigned *value);
	virtual STDMETHODIMP _put_Rating(unsigned value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Bitrate(unsigned *value);
	virtual STDMETHODIMP _get_AlbumArtist(HSTRING *value);
	virtual STDMETHODIMP _put_AlbumArtist(HSTRING value);
	virtual STDMETHODIMP _get_Composers(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Conductors(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Subtitle(HSTRING *value);
	virtual STDMETHODIMP _put_Subtitle(HSTRING value);
	virtual STDMETHODIMP _get_Producers(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Publisher(HSTRING *value);
	virtual STDMETHODIMP _put_Publisher(HSTRING value);
	virtual STDMETHODIMP _get_Writers(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Year(unsigned *value);
	virtual STDMETHODIMP _put_Year(unsigned value);
};
template<typename X> struct IMusicProperties_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMusicProperties_adaptor::Album)->_get_Album(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMusicProperties_adaptor::Album)->_put_Album(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Album;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMusicProperties_adaptor::AlbumArtist)->_get_AlbumArtist(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMusicProperties_adaptor::AlbumArtist)->_put_AlbumArtist(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AlbumArtist;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMusicProperties_adaptor::Artist)->_get_Artist(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMusicProperties_adaptor::Artist)->_put_Artist(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Artist;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMusicProperties_adaptor::Bitrate)->_get_Bitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Bitrate;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IMusicProperties_adaptor::Composers)->_get_Composers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Composers;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IMusicProperties_adaptor::Conductors)->_get_Conductors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Conductors;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMusicProperties_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IMusicProperties_adaptor::Genre)->_get_Genre(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Genre;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IMusicProperties_adaptor::Producers)->_get_Producers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Producers;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMusicProperties_adaptor::Publisher)->_get_Publisher(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMusicProperties_adaptor::Publisher)->_put_Publisher(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Publisher;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMusicProperties_adaptor::Rating)->_get_Rating(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IMusicProperties_adaptor::Rating)->_put_Rating(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Rating;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMusicProperties_adaptor::Subtitle)->_get_Subtitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMusicProperties_adaptor::Subtitle)->_put_Subtitle(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subtitle;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMusicProperties_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMusicProperties_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMusicProperties_adaptor::TrackNumber)->_get_TrackNumber(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IMusicProperties_adaptor::TrackNumber)->_put_TrackNumber(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} TrackNumber;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IMusicProperties_adaptor::Writers)->_get_Writers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Writers;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMusicProperties_adaptor::Year)->_get_Year(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IMusicProperties_adaptor::Year)->_put_Year(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Year;
	};
	IMusicProperties_adaptor() {}
};
template<typename X> struct adapt<IMusicProperties, X> : Windows::Storage::FileProperties::IMusicProperties_adaptor<X> { typedef adapt IMusicProperties; };
struct IMusicProperties : IMusicProperties_raw, generate<IMusicProperties> {};

// MusicProperties
template<typename X> struct statics<MusicProperties, X> : X {
	typedef typename X::root_type MusicProperties;
};
struct MusicProperties : generate<MusicProperties> {
	using IStorageItemExtraProperties::SavePropertiesAsync;
};

// IVideoProperties
struct IVideoProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Rating(unsigned *value);
	virtual STDMETHODIMP _put_Rating(unsigned value);
	virtual STDMETHODIMP _get_Keywords(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Width(unsigned *value);
	virtual STDMETHODIMP _get_Height(unsigned *value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Latitude(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_Longitude(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Subtitle(HSTRING *value);
	virtual STDMETHODIMP _put_Subtitle(HSTRING value);
	virtual STDMETHODIMP _get_Producers(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Publisher(HSTRING *value);
	virtual STDMETHODIMP _put_Publisher(HSTRING value);
	virtual STDMETHODIMP _get_Writers(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Year(unsigned *value);
	virtual STDMETHODIMP _put_Year(unsigned value);
	virtual STDMETHODIMP _get_Bitrate(unsigned *value);
	virtual STDMETHODIMP _get_Directors(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Orientation(VideoOrientation *value);
};
template<typename X> struct IVideoProperties_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoProperties_adaptor::Bitrate)->_get_Bitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Bitrate;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IVideoProperties_adaptor::Directors)->_get_Directors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Directors;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IVideoProperties_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoProperties_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Height;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IVideoProperties_adaptor::Keywords)->_get_Keywords(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Keywords;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IVideoProperties_adaptor::Latitude)->_get_Latitude(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} Latitude;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IVideoProperties_adaptor::Longitude)->_get_Longitude(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} Longitude;
		struct : property {
			VideoOrientation get() { VideoOrientation value; hrcheck(enc(&IVideoProperties_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			VideoOrientation operator()() { return get(); }
			operator VideoOrientation () { return get(); }
		} Orientation;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IVideoProperties_adaptor::Producers)->_get_Producers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Producers;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVideoProperties_adaptor::Publisher)->_get_Publisher(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVideoProperties_adaptor::Publisher)->_put_Publisher(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Publisher;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoProperties_adaptor::Rating)->_get_Rating(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IVideoProperties_adaptor::Rating)->_put_Rating(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Rating;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVideoProperties_adaptor::Subtitle)->_get_Subtitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVideoProperties_adaptor::Subtitle)->_put_Subtitle(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subtitle;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVideoProperties_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVideoProperties_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoProperties_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Width;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IVideoProperties_adaptor::Writers)->_get_Writers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Writers;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoProperties_adaptor::Year)->_get_Year(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IVideoProperties_adaptor::Year)->_put_Year(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Year;
	};
	IVideoProperties_adaptor() {}
};
template<typename X> struct adapt<IVideoProperties, X> : Windows::Storage::FileProperties::IVideoProperties_adaptor<X> { typedef adapt IVideoProperties; };
struct IVideoProperties : IVideoProperties_raw, generate<IVideoProperties> {};

// VideoProperties
template<typename X> struct statics<VideoProperties, X> : X {
	typedef typename X::root_type VideoProperties;
};
struct VideoProperties : generate<VideoProperties> {
	using IStorageItemExtraProperties::SavePropertiesAsync;
};

// IImageProperties
struct IImageProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Rating(unsigned *value);
	virtual STDMETHODIMP _put_Rating(unsigned value);
	virtual STDMETHODIMP _get_Keywords(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_DateTaken(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_DateTaken(Foundation::DateTime value);
	virtual STDMETHODIMP _get_Width(unsigned *value);
	virtual STDMETHODIMP _get_Height(unsigned *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Latitude(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_Longitude(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_CameraManufacturer(HSTRING *value);
	virtual STDMETHODIMP _put_CameraManufacturer(HSTRING value);
	virtual STDMETHODIMP _get_CameraModel(HSTRING *value);
	virtual STDMETHODIMP _put_CameraModel(HSTRING value);
	virtual STDMETHODIMP _get_Orientation(PhotoOrientation *value);
	virtual STDMETHODIMP _get_PeopleNames(Foundation::Collections::IVectorView<HSTRING>* *value);
};
template<typename X> struct IImageProperties_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IImageProperties_adaptor::CameraManufacturer)->_get_CameraManufacturer(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IImageProperties_adaptor::CameraManufacturer)->_put_CameraManufacturer(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CameraManufacturer;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IImageProperties_adaptor::CameraModel)->_get_CameraModel(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IImageProperties_adaptor::CameraModel)->_put_CameraModel(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CameraModel;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IImageProperties_adaptor::DateTaken)->_get_DateTaken(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IImageProperties_adaptor::DateTaken)->_put_DateTaken(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} DateTaken;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IImageProperties_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Height;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IImageProperties_adaptor::Keywords)->_get_Keywords(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Keywords;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IImageProperties_adaptor::Latitude)->_get_Latitude(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} Latitude;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IImageProperties_adaptor::Longitude)->_get_Longitude(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} Longitude;
		struct : property {
			PhotoOrientation get() { PhotoOrientation value; hrcheck(enc(&IImageProperties_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			PhotoOrientation operator()() { return get(); }
			operator PhotoOrientation () { return get(); }
		} Orientation;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IImageProperties_adaptor::PeopleNames)->_get_PeopleNames(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} PeopleNames;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IImageProperties_adaptor::Rating)->_get_Rating(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IImageProperties_adaptor::Rating)->_put_Rating(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Rating;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IImageProperties_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IImageProperties_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IImageProperties_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Width;
	};
	IImageProperties_adaptor() {}
};
template<typename X> struct adapt<IImageProperties, X> : Windows::Storage::FileProperties::IImageProperties_adaptor<X> { typedef adapt IImageProperties; };
struct IImageProperties : IImageProperties_raw, generate<IImageProperties> {};

// ImageProperties
template<typename X> struct statics<ImageProperties, X> : X {
	typedef typename X::root_type ImageProperties;
};
struct ImageProperties : generate<ImageProperties> {
	using IStorageItemExtraProperties::SavePropertiesAsync;
};

// IDocumentProperties
struct IDocumentProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Author(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Keywords(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Comment(HSTRING *value);
	virtual STDMETHODIMP _put_Comment(HSTRING value);
};
template<typename X> struct IDocumentProperties_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IDocumentProperties_adaptor::Author)->_get_Author(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Author;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDocumentProperties_adaptor::Comment)->_get_Comment(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDocumentProperties_adaptor::Comment)->_put_Comment(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Comment;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IDocumentProperties_adaptor::Keywords)->_get_Keywords(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} Keywords;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDocumentProperties_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDocumentProperties_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	IDocumentProperties_adaptor() {}
};
template<typename X> struct adapt<IDocumentProperties, X> : Windows::Storage::FileProperties::IDocumentProperties_adaptor<X> { typedef adapt IDocumentProperties; };
struct IDocumentProperties : IDocumentProperties_raw, generate<IDocumentProperties> {};

// DocumentProperties
template<typename X> struct statics<DocumentProperties, X> : X {
	typedef typename X::root_type DocumentProperties;
};
struct DocumentProperties : generate<DocumentProperties> {
	using IStorageItemExtraProperties::SavePropertiesAsync;
};

// IBasicProperties
struct IBasicProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Size(unsigned __int64 *value);
	virtual STDMETHODIMP _get_DateModified(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_ItemDate(Foundation::DateTime *value);
};
template<typename X> struct IBasicProperties_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IBasicProperties_adaptor::DateModified)->_get_DateModified(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} DateModified;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IBasicProperties_adaptor::ItemDate)->_get_ItemDate(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} ItemDate;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IBasicProperties_adaptor::Size)->_get_Size(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} Size;
	};
	IBasicProperties_adaptor() {}
};
template<typename X> struct adapt<IBasicProperties, X> : Windows::Storage::FileProperties::IBasicProperties_adaptor<X> { typedef adapt IBasicProperties; };
struct IBasicProperties : IBasicProperties_raw, generate<IBasicProperties> {};

// StorageItemContentProperties
template<typename X> struct statics<StorageItemContentProperties, X> : X {
	typedef typename X::root_type StorageItemContentProperties;
};
struct StorageItemContentProperties : generate<StorageItemContentProperties> {
	using IStorageItemExtraProperties::SavePropertiesAsync;
};

// BasicProperties
template<typename X> struct statics<BasicProperties, X> : X {
	typedef typename X::root_type BasicProperties;
};
struct BasicProperties : generate<BasicProperties> {
	using IStorageItemExtraProperties::SavePropertiesAsync;
};
}}}
} // namespace iso_winrt
