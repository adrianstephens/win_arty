#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.Profile.SystemManufacturers

#include "Windows.System.Profile.SystemManufacturers.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
struct Uri;
}}

// defs

template<> struct def<Windows::System::Profile::SystemManufacturers::ISystemSupportInfoStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::SystemManufacturers::IOemSupportInfo> : interface_type<> {};
template<> struct def<Windows::System::Profile::SystemManufacturers::OemSupportInfo> : class_type<Platform::Object, Windows::System::Profile::SystemManufacturers::IOemSupportInfo> {};
template<> struct def<Windows::System::Profile::SystemManufacturers::SystemSupportInfo> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::SystemManufacturers::SystemManufacturersContract> : value_type<> {};
template<> struct def<Windows::System::Profile::SystemManufacturers::ISmbiosInformationStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::SystemManufacturers::SmbiosInformation> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::System::Profile::SystemManufacturers::ISystemSupportInfoStatics> { define_guid(0xEF750974, 0xC422, 0x45D7, 0xA4, 0x4D, 0x5C, 0x1C, 0x0, 0x43, 0xA2, 0xB3);};
template<> struct uuid<Windows::System::Profile::SystemManufacturers::IOemSupportInfo> { define_guid(0x8D2EAE55, 0x87EF, 0x4266, 0x86, 0xD0, 0xC4, 0xAF, 0xBE, 0xB2, 0x9B, 0xB9);};
template<> struct uuid<Windows::System::Profile::SystemManufacturers::ISmbiosInformationStatics> { define_guid(0x80CCA7C, 0x637C, 0x48C4, 0xB7, 0x28, 0xF9, 0x27, 0x38, 0x12, 0xDB, 0x8E);};

// types

namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

// ISystemSupportInfoStatics
struct ISystemSupportInfoStatics : IInspectable {
	virtual STDMETHODIMP _get_LocalSystemEdition(HSTRING *value);
	virtual STDMETHODIMP _get_OemSupportInfo(SystemManufacturers::OemSupportInfo* *value);
};

// IOemSupportInfo
struct IOemSupportInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_SupportLink(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_SupportAppLink(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_SupportProvider(HSTRING *value);
};
template<typename X> struct IOemSupportInfo_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IOemSupportInfo_adaptor::SupportAppLink)->_get_SupportAppLink(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} SupportAppLink;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IOemSupportInfo_adaptor::SupportLink)->_get_SupportLink(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} SupportLink;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IOemSupportInfo_adaptor::SupportProvider)->_get_SupportProvider(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SupportProvider;
	};
	IOemSupportInfo_adaptor() {}
};
template<typename X> struct adapt<IOemSupportInfo, X> : Windows::System::Profile::SystemManufacturers::IOemSupportInfo_adaptor<X> { typedef adapt IOemSupportInfo; };
struct IOemSupportInfo : IOemSupportInfo_raw, generate<IOemSupportInfo> {};

// OemSupportInfo
template<typename X> struct statics<OemSupportInfo, X> : X {
	typedef typename X::root_type OemSupportInfo;
};
struct OemSupportInfo : generate<OemSupportInfo> {};

// SystemSupportInfo
template<typename> struct SystemSupportInfo_statics {
	static struct _LocalSystemEdition : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SystemSupportInfo, ISystemSupportInfoStatics>()->_get_LocalSystemEdition(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LocalSystemEdition;
	static struct _OemSupportInfo : property {
		ptr<SystemManufacturers::OemSupportInfo> get() { SystemManufacturers::OemSupportInfo* value; hrcheck(get_activation_factory<SystemSupportInfo, ISystemSupportInfoStatics>()->_get_OemSupportInfo(&value)); return from_abi(value); }
		ptr<SystemManufacturers::OemSupportInfo> operator()() { return get(); }
		operator ptr<SystemManufacturers::OemSupportInfo> () { return get(); }
		ptr<SystemManufacturers::OemSupportInfo> operator->() { return get(); }
	} OemSupportInfo;
};
template<typename X> typename SystemSupportInfo_statics<X>::_LocalSystemEdition SystemSupportInfo_statics<X>::LocalSystemEdition;
template<typename X> typename SystemSupportInfo_statics<X>::_OemSupportInfo SystemSupportInfo_statics<X>::OemSupportInfo;

template<typename X> struct statics<SystemSupportInfo, X> : X, Windows::System::Profile::SystemManufacturers::SystemSupportInfo_statics<void> {
	typedef typename X::root_type SystemSupportInfo;
};
struct SystemSupportInfo : generate<SystemSupportInfo> {};

// ISmbiosInformationStatics
struct ISmbiosInformationStatics : IInspectable {
	virtual STDMETHODIMP _get_SerialNumber(HSTRING *value);
};

// SmbiosInformation
template<typename> struct SmbiosInformation_statics {
	static struct _SerialNumber : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SmbiosInformation, ISmbiosInformationStatics>()->_get_SerialNumber(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SerialNumber;
};
template<typename X> typename SmbiosInformation_statics<X>::_SerialNumber SmbiosInformation_statics<X>::SerialNumber;

template<typename X> struct statics<SmbiosInformation, X> : X, Windows::System::Profile::SystemManufacturers::SmbiosInformation_statics<void> {
	typedef typename X::root_type SmbiosInformation;
};
struct SmbiosInformation : generate<SmbiosInformation> {};
}}}}
} // namespace iso_winrt
