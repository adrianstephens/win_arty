#pragma once
// generated by isopod tools
// namespaces:
// Windows.Networking.XboxLive

#include "Windows.Networking.XboxLive.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}
namespace Networking {
struct HostName;
}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Networking::XboxLive::XboxLiveSecureSocketsContract> : value_type<> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveNetworkAccessKind> : enum_type<int> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveSocketKind> : enum_type<int> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveEndpointPairCreationBehaviors> : enum_type<unsigned> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveEndpointPairCreationStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveEndpointPairState> : enum_type<int> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveQualityOfServiceMetric> : enum_type<int> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveQualityOfServiceMeasurementStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveDeviceAddressStatics> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveDeviceAddress> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveDeviceAddress> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveDeviceAddress> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveInboundEndpointPairCreatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveEndpointPairStatics> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveEndpointPair> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveEndpointPair> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveEndpointPair> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveEndpointPairCreationResult> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveEndpointPairTemplateStatics> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveEndpointPairTemplate> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveEndpointPairTemplate> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveEndpointPairTemplate> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveInboundEndpointPairCreatedEventArgs> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveInboundEndpointPairCreatedEventArgs> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveEndpointPairCreationResult> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveEndpointPairCreationResult> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveEndpointPairStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveEndpointPairStateChangedEventArgs> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveEndpointPairStateChangedEventArgs> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMetricResult> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveQualityOfServicePrivatePayloadResult> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMeasurementStatics> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMeasurement> : interface_type<> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveQualityOfServiceMetricResult> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMetricResult> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveQualityOfServicePrivatePayloadResult> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveQualityOfServicePrivatePayloadResult> {};
template<> struct def<Windows::Networking::XboxLive::XboxLiveQualityOfServiceMeasurement> : class_type<Platform::Object, Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMeasurement> {};

// uuids

template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveDeviceAddressStatics> { define_guid(0x5954A819, 0x4A79, 0x4931, 0x82, 0x7C, 0x7F, 0x50, 0x3E, 0x96, 0x32, 0x63);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveDeviceAddress> { define_guid(0xF5BBD279, 0x3C86, 0x4B57, 0xA3, 0x1A, 0xB9, 0x46, 0x24, 0x8, 0xFD, 0x1);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveInboundEndpointPairCreatedEventArgs> { define_guid(0xDC183B62, 0x22BA, 0x48D2, 0x80, 0xDE, 0xC2, 0x39, 0x68, 0xBD, 0x19, 0x8B);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveEndpointPairStatics> { define_guid(0x64316B30, 0x217A, 0x4243, 0x8E, 0xE1, 0x67, 0x29, 0x28, 0x1D, 0x27, 0xDB);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveEndpointPair> { define_guid(0x1E9A839B, 0x813E, 0x44E0, 0xB8, 0x7F, 0xC8, 0x7A, 0x9, 0x34, 0x75, 0xE4);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveEndpointPairCreationResult> { define_guid(0xD9A8BB95, 0x2AAB, 0x4D1E, 0x97, 0x94, 0x33, 0xEC, 0xC0, 0xDC, 0xF0, 0xFE);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveEndpointPairTemplateStatics> { define_guid(0x1E13137B, 0x737B, 0x4A23, 0xBC, 0x64, 0x8, 0x70, 0xF7, 0x56, 0x55, 0xBA);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveEndpointPairTemplate> { define_guid(0x6B286ECF, 0x3457, 0x40CE, 0xB9, 0xA1, 0xC0, 0xCF, 0xE0, 0x21, 0x3E, 0xA7);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveEndpointPairStateChangedEventArgs> { define_guid(0x592E3B55, 0xDE08, 0x44E7, 0xAC, 0x3B, 0xB9, 0xB9, 0xA1, 0x69, 0x58, 0x3A);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMetricResult> { define_guid(0xAEEC53D1, 0x3561, 0x4782, 0xB0, 0xCF, 0xD3, 0xAE, 0x29, 0xD9, 0xFA, 0x87);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveQualityOfServicePrivatePayloadResult> { define_guid(0x5A6302AE, 0x6F38, 0x41C0, 0x9F, 0xCC, 0xEA, 0x6C, 0xB9, 0x78, 0xCA, 0xFC);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMeasurementStatics> { define_guid(0x6E352DCA, 0x23CF, 0x440A, 0xB0, 0x77, 0x5E, 0x30, 0x85, 0x7A, 0x82, 0x34);};
template<> struct uuid<Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMeasurement> { define_guid(0x4D682BCE, 0xA5D6, 0x47E6, 0xA2, 0x36, 0xCF, 0xDE, 0x5F, 0xBD, 0xF2, 0xED);};

// types

namespace Windows { namespace Networking { namespace XboxLive {

// IXboxLiveDeviceAddressStatics
struct IXboxLiveDeviceAddressStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromSnapshotBase64(HSTRING base64, XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _CreateFromSnapshotBuffer(Storage::Streams::IBuffer* buffer, XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _CreateFromSnapshotBytes(unsigned bufferSize, unsigned char *buffer, XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _GetLocal(XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _get_MaxSnapshotBytesSize(unsigned *value);
};

// IXboxLiveDeviceAddress
struct IXboxLiveDeviceAddress_raw : IInspectable {
	virtual STDMETHODIMP _add_SnapshotChanged(Foundation::TypedEventHandler<XboxLiveDeviceAddress*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SnapshotChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetSnapshotAsBase64(HSTRING *value);
	virtual STDMETHODIMP _GetSnapshotAsBuffer(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _GetSnapshotAsBytes(unsigned bufferSize, unsigned char *buffer, unsigned *bytesWritten);
	virtual STDMETHODIMP _Compare(XboxLiveDeviceAddress* otherDeviceAddress, int *result);
	virtual STDMETHODIMP _get_IsValid(bool *value);
	virtual STDMETHODIMP _get_IsLocal(bool *value);
	virtual STDMETHODIMP _get_NetworkAccessKind(XboxLiveNetworkAccessKind *value);
};
template<typename X> struct IXboxLiveDeviceAddress_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IXboxLiveDeviceAddress_adaptor::IsLocal)->_get_IsLocal(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsLocal;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IXboxLiveDeviceAddress_adaptor::IsValid)->_get_IsValid(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsValid;
		struct : property {
			XboxLiveNetworkAccessKind get() { XboxLiveNetworkAccessKind value; hrcheck(enc(&IXboxLiveDeviceAddress_adaptor::NetworkAccessKind)->_get_NetworkAccessKind(&value)); return value; }
			XboxLiveNetworkAccessKind operator()() { return get(); }
			operator XboxLiveNetworkAccessKind () { return get(); }
		} NetworkAccessKind;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<XboxLiveDeviceAddress>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IXboxLiveDeviceAddress_adaptor::SnapshotChanged)->_add_SnapshotChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IXboxLiveDeviceAddress_adaptor::SnapshotChanged)->_remove_SnapshotChanged(token)); }
		} SnapshotChanged;
	};
	hstring GetSnapshotAsBase64() { HSTRING value; hrcheck(X::get()->_GetSnapshotAsBase64(&value)); return from_abi(value); }
	ptr<Storage::Streams::IBuffer> GetSnapshotAsBuffer() { Storage::Streams::IBuffer* value; hrcheck(X::get()->_GetSnapshotAsBuffer(&value)); return from_abi(value); }
	unsigned GetSnapshotAsBytes(const szarray<unsigned char>& buffer) { unsigned bytesWritten; hrcheck(X::get()->_GetSnapshotAsBytes(buffer.size, to_abi(buffer.p), &bytesWritten)); return bytesWritten; }
	int Compare(pptr<XboxLiveDeviceAddress> otherDeviceAddress) { int result; hrcheck(X::get()->_Compare(otherDeviceAddress, &result)); return result; }
	IXboxLiveDeviceAddress_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveDeviceAddress, X> : Windows::Networking::XboxLive::IXboxLiveDeviceAddress_adaptor<X> { typedef adapt IXboxLiveDeviceAddress; };
struct IXboxLiveDeviceAddress : IXboxLiveDeviceAddress_raw, generate<IXboxLiveDeviceAddress> {};

// XboxLiveDeviceAddress
template<typename> struct XboxLiveDeviceAddress_statics {
	static struct _MaxSnapshotBytesSize : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<XboxLiveDeviceAddress, IXboxLiveDeviceAddressStatics>()->_get_MaxSnapshotBytesSize(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MaxSnapshotBytesSize;
	static ptr<XboxLiveDeviceAddress> CreateFromSnapshotBase64(hstring_ref base64) { XboxLiveDeviceAddress* value; hrcheck(get_activation_factory<XboxLiveDeviceAddress, IXboxLiveDeviceAddressStatics>()->_CreateFromSnapshotBase64(base64, &value)); return from_abi(value); }
	static ptr<XboxLiveDeviceAddress> CreateFromSnapshotBuffer(pptr<Storage::Streams::IBuffer> buffer) { XboxLiveDeviceAddress* value; hrcheck(get_activation_factory<XboxLiveDeviceAddress, IXboxLiveDeviceAddressStatics>()->_CreateFromSnapshotBuffer(buffer, &value)); return from_abi(value); }
	static ptr<XboxLiveDeviceAddress> CreateFromSnapshotBytes(const szarray<unsigned char>& buffer) { XboxLiveDeviceAddress* value; hrcheck(get_activation_factory<XboxLiveDeviceAddress, IXboxLiveDeviceAddressStatics>()->_CreateFromSnapshotBytes(buffer.size, to_abi(buffer.p), &value)); return from_abi(value); }
	static ptr<XboxLiveDeviceAddress> GetLocal() { XboxLiveDeviceAddress* value; hrcheck(get_activation_factory<XboxLiveDeviceAddress, IXboxLiveDeviceAddressStatics>()->_GetLocal(&value)); return from_abi(value); }
};
template<typename X> typename XboxLiveDeviceAddress_statics<X>::_MaxSnapshotBytesSize XboxLiveDeviceAddress_statics<X>::MaxSnapshotBytesSize;

template<typename X> struct statics<XboxLiveDeviceAddress, X> : X, Windows::Networking::XboxLive::XboxLiveDeviceAddress_statics<void> {
	typedef typename X::root_type XboxLiveDeviceAddress;
};
struct XboxLiveDeviceAddress : generate<XboxLiveDeviceAddress> {};

// IXboxLiveInboundEndpointPairCreatedEventArgs
struct IXboxLiveInboundEndpointPairCreatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_EndpointPair(XboxLiveEndpointPair* *value);
};
template<typename X> struct IXboxLiveInboundEndpointPairCreatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<XboxLiveEndpointPair> get() { XboxLiveEndpointPair* value; hrcheck(enc(&IXboxLiveInboundEndpointPairCreatedEventArgs_adaptor::EndpointPair)->_get_EndpointPair(&value)); return from_abi(value); }
			ptr<XboxLiveEndpointPair> operator()() { return get(); }
			operator ptr<XboxLiveEndpointPair> () { return get(); }
			ptr<XboxLiveEndpointPair> operator->() { return get(); }
		} EndpointPair;
	};
	IXboxLiveInboundEndpointPairCreatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveInboundEndpointPairCreatedEventArgs, X> : Windows::Networking::XboxLive::IXboxLiveInboundEndpointPairCreatedEventArgs_adaptor<X> { typedef adapt IXboxLiveInboundEndpointPairCreatedEventArgs; };
struct IXboxLiveInboundEndpointPairCreatedEventArgs : IXboxLiveInboundEndpointPairCreatedEventArgs_raw, generate<IXboxLiveInboundEndpointPairCreatedEventArgs> {};

// IXboxLiveEndpointPairStatics
struct IXboxLiveEndpointPairStatics : IInspectable {
	virtual STDMETHODIMP _FindEndpointPairBySocketAddressBytes(unsigned localSocketAddressSize, unsigned char *localSocketAddress, unsigned remoteSocketAddressSize, unsigned char *remoteSocketAddress, XboxLiveEndpointPair* *endpointPair);
	virtual STDMETHODIMP _FindEndpointPairByHostNamesAndPorts(HostName* localHostName, HSTRING localPort, HostName* remoteHostName, HSTRING remotePort, XboxLiveEndpointPair* *endpointPair);
};

// IXboxLiveEndpointPair
struct IXboxLiveEndpointPair_raw : IInspectable {
	virtual STDMETHODIMP _add_StateChanged(Foundation::TypedEventHandler<XboxLiveEndpointPair*, XboxLiveEndpointPairStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _GetRemoteSocketAddressBytes(unsigned socketAddressSize, unsigned char *socketAddress);
	virtual STDMETHODIMP _GetLocalSocketAddressBytes(unsigned socketAddressSize, unsigned char *socketAddress);
	virtual STDMETHODIMP _get_State(XboxLiveEndpointPairState *value);
	virtual STDMETHODIMP _get_Template(XboxLiveEndpointPairTemplate* *value);
	virtual STDMETHODIMP _get_RemoteDeviceAddress(XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _get_RemoteHostName(HostName* *value);
	virtual STDMETHODIMP _get_RemotePort(HSTRING *value);
	virtual STDMETHODIMP _get_LocalHostName(HostName* *value);
	virtual STDMETHODIMP _get_LocalPort(HSTRING *value);
};
template<typename X> struct IXboxLiveEndpointPair_adaptor : X {
	union {
		struct : property {
			ptr<HostName> get() { HostName* value; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::LocalHostName)->_get_LocalHostName(&value)); return from_abi(value); }
			ptr<HostName> operator()() { return get(); }
			operator ptr<HostName> () { return get(); }
			ptr<HostName> operator->() { return get(); }
		} LocalHostName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::LocalPort)->_get_LocalPort(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LocalPort;
		struct : property {
			ptr<XboxLiveDeviceAddress> get() { XboxLiveDeviceAddress* value; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::RemoteDeviceAddress)->_get_RemoteDeviceAddress(&value)); return from_abi(value); }
			ptr<XboxLiveDeviceAddress> operator()() { return get(); }
			operator ptr<XboxLiveDeviceAddress> () { return get(); }
			ptr<XboxLiveDeviceAddress> operator->() { return get(); }
		} RemoteDeviceAddress;
		struct : property {
			ptr<HostName> get() { HostName* value; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::RemoteHostName)->_get_RemoteHostName(&value)); return from_abi(value); }
			ptr<HostName> operator()() { return get(); }
			operator ptr<HostName> () { return get(); }
			ptr<HostName> operator->() { return get(); }
		} RemoteHostName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::RemotePort)->_get_RemotePort(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RemotePort;
		struct : property {
			XboxLiveEndpointPairState get() { XboxLiveEndpointPairState value; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::State)->_get_State(&value)); return value; }
			XboxLiveEndpointPairState operator()() { return get(); }
			operator XboxLiveEndpointPairState () { return get(); }
		} State;
		struct : property {
			ptr<XboxLiveEndpointPairTemplate> get() { XboxLiveEndpointPairTemplate* value; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::Template)->_get_Template(&value)); return from_abi(value); }
			ptr<XboxLiveEndpointPairTemplate> operator()() { return get(); }
			operator ptr<XboxLiveEndpointPairTemplate> () { return get(); }
			ptr<XboxLiveEndpointPairTemplate> operator->() { return get(); }
		} Template;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<XboxLiveEndpointPair>, ptr<XboxLiveEndpointPairStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IXboxLiveEndpointPair_adaptor::StateChanged)->_add_StateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IXboxLiveEndpointPair_adaptor::StateChanged)->_remove_StateChanged(token)); }
		} StateChanged;
	};
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_DeleteAsync(&action)); return from_abi(action); }
	void GetRemoteSocketAddressBytes(const szarray<unsigned char>& socketAddress) { hrcheck(X::get()->_GetRemoteSocketAddressBytes(socketAddress.size, to_abi(socketAddress.p))); }
	void GetLocalSocketAddressBytes(const szarray<unsigned char>& socketAddress) { hrcheck(X::get()->_GetLocalSocketAddressBytes(socketAddress.size, to_abi(socketAddress.p))); }
	IXboxLiveEndpointPair_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveEndpointPair, X> : Windows::Networking::XboxLive::IXboxLiveEndpointPair_adaptor<X> { typedef adapt IXboxLiveEndpointPair; };
struct IXboxLiveEndpointPair : IXboxLiveEndpointPair_raw, generate<IXboxLiveEndpointPair> {};

// XboxLiveEndpointPair
template<typename> struct XboxLiveEndpointPair_statics {
	static ptr<XboxLiveEndpointPair> FindEndpointPairBySocketAddressBytes(const szarray<unsigned char>& localSocketAddress, const szarray<unsigned char>& remoteSocketAddress) { XboxLiveEndpointPair* endpointPair; hrcheck(get_activation_factory<XboxLiveEndpointPair, IXboxLiveEndpointPairStatics>()->_FindEndpointPairBySocketAddressBytes(localSocketAddress.size, to_abi(localSocketAddress.p), remoteSocketAddress.size, to_abi(remoteSocketAddress.p), &endpointPair)); return from_abi(endpointPair); }
	static ptr<XboxLiveEndpointPair> FindEndpointPairByHostNamesAndPorts(pptr<HostName> localHostName, hstring_ref localPort, pptr<HostName> remoteHostName, hstring_ref remotePort) { XboxLiveEndpointPair* endpointPair; hrcheck(get_activation_factory<XboxLiveEndpointPair, IXboxLiveEndpointPairStatics>()->_FindEndpointPairByHostNamesAndPorts(localHostName, localPort, remoteHostName, remotePort, &endpointPair)); return from_abi(endpointPair); }
};

template<typename X> struct statics<XboxLiveEndpointPair, X> : X, Windows::Networking::XboxLive::XboxLiveEndpointPair_statics<void> {
	typedef typename X::root_type XboxLiveEndpointPair;
};
struct XboxLiveEndpointPair : generate<XboxLiveEndpointPair> {};

// IXboxLiveEndpointPairCreationResult
struct IXboxLiveEndpointPairCreationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceAddress(XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _get_Status(XboxLiveEndpointPairCreationStatus *value);
	virtual STDMETHODIMP _get_IsExistingPathEvaluation(bool *value);
	virtual STDMETHODIMP _get_EndpointPair(XboxLiveEndpointPair* *value);
};
template<typename X> struct IXboxLiveEndpointPairCreationResult_adaptor : X {
	union {
		struct : property {
			ptr<XboxLiveDeviceAddress> get() { XboxLiveDeviceAddress* value; hrcheck(enc(&IXboxLiveEndpointPairCreationResult_adaptor::DeviceAddress)->_get_DeviceAddress(&value)); return from_abi(value); }
			ptr<XboxLiveDeviceAddress> operator()() { return get(); }
			operator ptr<XboxLiveDeviceAddress> () { return get(); }
			ptr<XboxLiveDeviceAddress> operator->() { return get(); }
		} DeviceAddress;
		struct : property {
			ptr<XboxLiveEndpointPair> get() { XboxLiveEndpointPair* value; hrcheck(enc(&IXboxLiveEndpointPairCreationResult_adaptor::EndpointPair)->_get_EndpointPair(&value)); return from_abi(value); }
			ptr<XboxLiveEndpointPair> operator()() { return get(); }
			operator ptr<XboxLiveEndpointPair> () { return get(); }
			ptr<XboxLiveEndpointPair> operator->() { return get(); }
		} EndpointPair;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IXboxLiveEndpointPairCreationResult_adaptor::IsExistingPathEvaluation)->_get_IsExistingPathEvaluation(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsExistingPathEvaluation;
		struct : property {
			XboxLiveEndpointPairCreationStatus get() { XboxLiveEndpointPairCreationStatus value; hrcheck(enc(&IXboxLiveEndpointPairCreationResult_adaptor::Status)->_get_Status(&value)); return value; }
			XboxLiveEndpointPairCreationStatus operator()() { return get(); }
			operator XboxLiveEndpointPairCreationStatus () { return get(); }
		} Status;
	};
	IXboxLiveEndpointPairCreationResult_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveEndpointPairCreationResult, X> : Windows::Networking::XboxLive::IXboxLiveEndpointPairCreationResult_adaptor<X> { typedef adapt IXboxLiveEndpointPairCreationResult; };
struct IXboxLiveEndpointPairCreationResult : IXboxLiveEndpointPairCreationResult_raw, generate<IXboxLiveEndpointPairCreationResult> {};

// IXboxLiveEndpointPairTemplateStatics
struct IXboxLiveEndpointPairTemplateStatics : IInspectable {
	virtual STDMETHODIMP _GetTemplateByName(HSTRING name, XboxLiveEndpointPairTemplate* *namedTemplate);
	virtual STDMETHODIMP _get_Templates(Foundation::Collections::IVectorView<XboxLiveEndpointPairTemplate*>* *value);
};

// IXboxLiveEndpointPairTemplate
struct IXboxLiveEndpointPairTemplate_raw : IInspectable {
	virtual STDMETHODIMP _add_InboundEndpointPairCreated(Foundation::TypedEventHandler<XboxLiveEndpointPairTemplate*, XboxLiveInboundEndpointPairCreatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_InboundEndpointPairCreated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CreateEndpointPairDefaultAsync(XboxLiveDeviceAddress* deviceAddress, Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* *operation);
	virtual STDMETHODIMP _CreateEndpointPairWithBehaviorsAsync(XboxLiveDeviceAddress* deviceAddress, XboxLiveEndpointPairCreationBehaviors behaviors, Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* *operation);
	virtual STDMETHODIMP _CreateEndpointPairForPortsDefaultAsync(XboxLiveDeviceAddress* deviceAddress, HSTRING initiatorPort, HSTRING acceptorPort, Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* *operation);
	virtual STDMETHODIMP _CreateEndpointPairForPortsWithBehaviorsAsync(XboxLiveDeviceAddress* deviceAddress, HSTRING initiatorPort, HSTRING acceptorPort, XboxLiveEndpointPairCreationBehaviors behaviors, Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* *operation);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_SocketKind(XboxLiveSocketKind *value);
	virtual STDMETHODIMP _get_InitiatorBoundPortRangeLower(unsigned short *value);
	virtual STDMETHODIMP _get_InitiatorBoundPortRangeUpper(unsigned short *value);
	virtual STDMETHODIMP _get_AcceptorBoundPortRangeLower(unsigned short *value);
	virtual STDMETHODIMP _get_AcceptorBoundPortRangeUpper(unsigned short *value);
	virtual STDMETHODIMP _get_EndpointPairs(Foundation::Collections::IVectorView<XboxLiveEndpointPair*>* *value);
};
template<typename X> struct IXboxLiveEndpointPairTemplate_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::AcceptorBoundPortRangeLower)->_get_AcceptorBoundPortRangeLower(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} AcceptorBoundPortRangeLower;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::AcceptorBoundPortRangeUpper)->_get_AcceptorBoundPortRangeUpper(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} AcceptorBoundPortRangeUpper;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPair>>> get() { Foundation::Collections::IVectorView<XboxLiveEndpointPair*>* value; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::EndpointPairs)->_get_EndpointPairs(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPair>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPair>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPair>>> operator->() { return get(); }
		} EndpointPairs;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::InitiatorBoundPortRangeLower)->_get_InitiatorBoundPortRangeLower(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} InitiatorBoundPortRangeLower;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::InitiatorBoundPortRangeUpper)->_get_InitiatorBoundPortRangeUpper(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} InitiatorBoundPortRangeUpper;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			XboxLiveSocketKind get() { XboxLiveSocketKind value; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::SocketKind)->_get_SocketKind(&value)); return value; }
			XboxLiveSocketKind operator()() { return get(); }
			operator XboxLiveSocketKind () { return get(); }
		} SocketKind;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<XboxLiveEndpointPairTemplate>, ptr<XboxLiveInboundEndpointPairCreatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::InboundEndpointPairCreated)->_add_InboundEndpointPairCreated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IXboxLiveEndpointPairTemplate_adaptor::InboundEndpointPairCreated)->_remove_InboundEndpointPairCreated(token)); }
		} InboundEndpointPairCreated;
	};
	ptr<Foundation::IAsyncOperation<ptr<XboxLiveEndpointPairCreationResult>>> CreateEndpointPairAsync(pptr<XboxLiveDeviceAddress> deviceAddress) { Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* operation; hrcheck(X::get()->_CreateEndpointPairDefaultAsync(deviceAddress, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<XboxLiveEndpointPairCreationResult>>> CreateEndpointPairAsync(pptr<XboxLiveDeviceAddress> deviceAddress, XboxLiveEndpointPairCreationBehaviors behaviors) { Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* operation; hrcheck(X::get()->_CreateEndpointPairWithBehaviorsAsync(deviceAddress, behaviors, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<XboxLiveEndpointPairCreationResult>>> CreateEndpointPairForPortsAsync(pptr<XboxLiveDeviceAddress> deviceAddress, hstring_ref initiatorPort, hstring_ref acceptorPort) { Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* operation; hrcheck(X::get()->_CreateEndpointPairForPortsDefaultAsync(deviceAddress, initiatorPort, acceptorPort, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<XboxLiveEndpointPairCreationResult>>> CreateEndpointPairForPortsAsync(pptr<XboxLiveDeviceAddress> deviceAddress, hstring_ref initiatorPort, hstring_ref acceptorPort, XboxLiveEndpointPairCreationBehaviors behaviors) { Foundation::IAsyncOperation<XboxLiveEndpointPairCreationResult*>* operation; hrcheck(X::get()->_CreateEndpointPairForPortsWithBehaviorsAsync(deviceAddress, initiatorPort, acceptorPort, behaviors, &operation)); return from_abi(operation); }
	IXboxLiveEndpointPairTemplate_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveEndpointPairTemplate, X> : Windows::Networking::XboxLive::IXboxLiveEndpointPairTemplate_adaptor<X> { typedef adapt IXboxLiveEndpointPairTemplate; };
struct IXboxLiveEndpointPairTemplate : IXboxLiveEndpointPairTemplate_raw, generate<IXboxLiveEndpointPairTemplate> {};

// XboxLiveEndpointPairTemplate
template<typename> struct XboxLiveEndpointPairTemplate_statics {
	static struct _Templates : property {
		ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPairTemplate>>> get() { Foundation::Collections::IVectorView<XboxLiveEndpointPairTemplate*>* value; hrcheck(get_activation_factory<XboxLiveEndpointPairTemplate, IXboxLiveEndpointPairTemplateStatics>()->_get_Templates(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPairTemplate>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPairTemplate>>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<ptr<XboxLiveEndpointPairTemplate>>> operator->() { return get(); }
	} Templates;
	static ptr<XboxLiveEndpointPairTemplate> GetTemplateByName(hstring_ref name) { XboxLiveEndpointPairTemplate* namedTemplate; hrcheck(get_activation_factory<XboxLiveEndpointPairTemplate, IXboxLiveEndpointPairTemplateStatics>()->_GetTemplateByName(name, &namedTemplate)); return from_abi(namedTemplate); }
};
template<typename X> typename XboxLiveEndpointPairTemplate_statics<X>::_Templates XboxLiveEndpointPairTemplate_statics<X>::Templates;

template<typename X> struct statics<XboxLiveEndpointPairTemplate, X> : X, Windows::Networking::XboxLive::XboxLiveEndpointPairTemplate_statics<void> {
	typedef typename X::root_type XboxLiveEndpointPairTemplate;
};
struct XboxLiveEndpointPairTemplate : generate<XboxLiveEndpointPairTemplate> {
	using IXboxLiveEndpointPairTemplate::CreateEndpointPairAsync;
	using IXboxLiveEndpointPairTemplate::CreateEndpointPairForPortsAsync;
};

// XboxLiveInboundEndpointPairCreatedEventArgs
template<typename X> struct statics<XboxLiveInboundEndpointPairCreatedEventArgs, X> : X {
	typedef typename X::root_type XboxLiveInboundEndpointPairCreatedEventArgs;
};
struct XboxLiveInboundEndpointPairCreatedEventArgs : generate<XboxLiveInboundEndpointPairCreatedEventArgs> {};

// XboxLiveEndpointPairCreationResult
template<typename X> struct statics<XboxLiveEndpointPairCreationResult, X> : X {
	typedef typename X::root_type XboxLiveEndpointPairCreationResult;
};
struct XboxLiveEndpointPairCreationResult : generate<XboxLiveEndpointPairCreationResult> {};

// IXboxLiveEndpointPairStateChangedEventArgs
struct IXboxLiveEndpointPairStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_OldState(XboxLiveEndpointPairState *value);
	virtual STDMETHODIMP _get_NewState(XboxLiveEndpointPairState *value);
};
template<typename X> struct IXboxLiveEndpointPairStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			XboxLiveEndpointPairState get() { XboxLiveEndpointPairState value; hrcheck(enc(&IXboxLiveEndpointPairStateChangedEventArgs_adaptor::NewState)->_get_NewState(&value)); return value; }
			XboxLiveEndpointPairState operator()() { return get(); }
			operator XboxLiveEndpointPairState () { return get(); }
		} NewState;
		struct : property {
			XboxLiveEndpointPairState get() { XboxLiveEndpointPairState value; hrcheck(enc(&IXboxLiveEndpointPairStateChangedEventArgs_adaptor::OldState)->_get_OldState(&value)); return value; }
			XboxLiveEndpointPairState operator()() { return get(); }
			operator XboxLiveEndpointPairState () { return get(); }
		} OldState;
	};
	IXboxLiveEndpointPairStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveEndpointPairStateChangedEventArgs, X> : Windows::Networking::XboxLive::IXboxLiveEndpointPairStateChangedEventArgs_adaptor<X> { typedef adapt IXboxLiveEndpointPairStateChangedEventArgs; };
struct IXboxLiveEndpointPairStateChangedEventArgs : IXboxLiveEndpointPairStateChangedEventArgs_raw, generate<IXboxLiveEndpointPairStateChangedEventArgs> {};

// XboxLiveEndpointPairStateChangedEventArgs
template<typename X> struct statics<XboxLiveEndpointPairStateChangedEventArgs, X> : X {
	typedef typename X::root_type XboxLiveEndpointPairStateChangedEventArgs;
};
struct XboxLiveEndpointPairStateChangedEventArgs : generate<XboxLiveEndpointPairStateChangedEventArgs> {};

// IXboxLiveQualityOfServiceMetricResult
struct IXboxLiveQualityOfServiceMetricResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(XboxLiveQualityOfServiceMeasurementStatus *value);
	virtual STDMETHODIMP _get_DeviceAddress(XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _get_Metric(XboxLiveQualityOfServiceMetric *value);
	virtual STDMETHODIMP _get_Value(unsigned __int64 *value);
};
template<typename X> struct IXboxLiveQualityOfServiceMetricResult_adaptor : X {
	union {
		struct : property {
			ptr<XboxLiveDeviceAddress> get() { XboxLiveDeviceAddress* value; hrcheck(enc(&IXboxLiveQualityOfServiceMetricResult_adaptor::DeviceAddress)->_get_DeviceAddress(&value)); return from_abi(value); }
			ptr<XboxLiveDeviceAddress> operator()() { return get(); }
			operator ptr<XboxLiveDeviceAddress> () { return get(); }
			ptr<XboxLiveDeviceAddress> operator->() { return get(); }
		} DeviceAddress;
		struct : property {
			XboxLiveQualityOfServiceMetric get() { XboxLiveQualityOfServiceMetric value; hrcheck(enc(&IXboxLiveQualityOfServiceMetricResult_adaptor::Metric)->_get_Metric(&value)); return value; }
			XboxLiveQualityOfServiceMetric operator()() { return get(); }
			operator XboxLiveQualityOfServiceMetric () { return get(); }
		} Metric;
		struct : property {
			XboxLiveQualityOfServiceMeasurementStatus get() { XboxLiveQualityOfServiceMeasurementStatus value; hrcheck(enc(&IXboxLiveQualityOfServiceMetricResult_adaptor::Status)->_get_Status(&value)); return value; }
			XboxLiveQualityOfServiceMeasurementStatus operator()() { return get(); }
			operator XboxLiveQualityOfServiceMeasurementStatus () { return get(); }
		} Status;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IXboxLiveQualityOfServiceMetricResult_adaptor::Value)->_get_Value(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} Value;
	};
	IXboxLiveQualityOfServiceMetricResult_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveQualityOfServiceMetricResult, X> : Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMetricResult_adaptor<X> { typedef adapt IXboxLiveQualityOfServiceMetricResult; };
struct IXboxLiveQualityOfServiceMetricResult : IXboxLiveQualityOfServiceMetricResult_raw, generate<IXboxLiveQualityOfServiceMetricResult> {};

// IXboxLiveQualityOfServicePrivatePayloadResult
struct IXboxLiveQualityOfServicePrivatePayloadResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(XboxLiveQualityOfServiceMeasurementStatus *value);
	virtual STDMETHODIMP _get_DeviceAddress(XboxLiveDeviceAddress* *value);
	virtual STDMETHODIMP _get_Value(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IXboxLiveQualityOfServicePrivatePayloadResult_adaptor : X {
	union {
		struct : property {
			ptr<XboxLiveDeviceAddress> get() { XboxLiveDeviceAddress* value; hrcheck(enc(&IXboxLiveQualityOfServicePrivatePayloadResult_adaptor::DeviceAddress)->_get_DeviceAddress(&value)); return from_abi(value); }
			ptr<XboxLiveDeviceAddress> operator()() { return get(); }
			operator ptr<XboxLiveDeviceAddress> () { return get(); }
			ptr<XboxLiveDeviceAddress> operator->() { return get(); }
		} DeviceAddress;
		struct : property {
			XboxLiveQualityOfServiceMeasurementStatus get() { XboxLiveQualityOfServiceMeasurementStatus value; hrcheck(enc(&IXboxLiveQualityOfServicePrivatePayloadResult_adaptor::Status)->_get_Status(&value)); return value; }
			XboxLiveQualityOfServiceMeasurementStatus operator()() { return get(); }
			operator XboxLiveQualityOfServiceMeasurementStatus () { return get(); }
		} Status;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IXboxLiveQualityOfServicePrivatePayloadResult_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Value;
	};
	IXboxLiveQualityOfServicePrivatePayloadResult_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveQualityOfServicePrivatePayloadResult, X> : Windows::Networking::XboxLive::IXboxLiveQualityOfServicePrivatePayloadResult_adaptor<X> { typedef adapt IXboxLiveQualityOfServicePrivatePayloadResult; };
struct IXboxLiveQualityOfServicePrivatePayloadResult : IXboxLiveQualityOfServicePrivatePayloadResult_raw, generate<IXboxLiveQualityOfServicePrivatePayloadResult> {};

// IXboxLiveQualityOfServiceMeasurementStatics
struct IXboxLiveQualityOfServiceMeasurementStatics : IInspectable {
	virtual STDMETHODIMP _PublishPrivatePayloadBytes(unsigned payloadSize, unsigned char *payload);
	virtual STDMETHODIMP _ClearPrivatePayload();
	virtual STDMETHODIMP _get_MaxSimultaneousProbeConnections(unsigned *value);
	virtual STDMETHODIMP _put_MaxSimultaneousProbeConnections(unsigned value);
	virtual STDMETHODIMP _get_IsSystemOutboundBandwidthConstrained(bool *value);
	virtual STDMETHODIMP _put_IsSystemOutboundBandwidthConstrained(bool value);
	virtual STDMETHODIMP _get_IsSystemInboundBandwidthConstrained(bool *value);
	virtual STDMETHODIMP _put_IsSystemInboundBandwidthConstrained(bool value);
	virtual STDMETHODIMP _get_PublishedPrivatePayload(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_PublishedPrivatePayload(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_MaxPrivatePayloadSize(unsigned *value);
};

// IXboxLiveQualityOfServiceMeasurement
struct IXboxLiveQualityOfServiceMeasurement_raw : IInspectable {
	virtual STDMETHODIMP _MeasureAsync(Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _GetMetricResultsForDevice(XboxLiveDeviceAddress* deviceAddress, Foundation::Collections::IVectorView<XboxLiveQualityOfServiceMetricResult*>* *value);
	virtual STDMETHODIMP _GetMetricResultsForMetric(XboxLiveQualityOfServiceMetric metric, Foundation::Collections::IVectorView<XboxLiveQualityOfServiceMetricResult*>* *value);
	virtual STDMETHODIMP _GetMetricResult(XboxLiveDeviceAddress* deviceAddress, XboxLiveQualityOfServiceMetric metric, XboxLiveQualityOfServiceMetricResult* *value);
	virtual STDMETHODIMP _GetPrivatePayloadResult(XboxLiveDeviceAddress* deviceAddress, XboxLiveQualityOfServicePrivatePayloadResult* *value);
	virtual STDMETHODIMP _get_Metrics(Foundation::Collections::IVector<XboxLiveQualityOfServiceMetric>* *value);
	virtual STDMETHODIMP _get_DeviceAddresses(Foundation::Collections::IVector<XboxLiveDeviceAddress*>* *value);
	virtual STDMETHODIMP _get_ShouldRequestPrivatePayloads(bool *value);
	virtual STDMETHODIMP _put_ShouldRequestPrivatePayloads(bool value);
	virtual STDMETHODIMP _get_TimeoutInMilliseconds(unsigned *value);
	virtual STDMETHODIMP _put_TimeoutInMilliseconds(unsigned value);
	virtual STDMETHODIMP _get_NumberOfProbesToAttempt(unsigned *value);
	virtual STDMETHODIMP _put_NumberOfProbesToAttempt(unsigned value);
	virtual STDMETHODIMP _get_NumberOfResultsPending(unsigned *value);
	virtual STDMETHODIMP _get_MetricResults(Foundation::Collections::IVectorView<XboxLiveQualityOfServiceMetricResult*>* *value);
	virtual STDMETHODIMP _get_PrivatePayloadResults(Foundation::Collections::IVectorView<XboxLiveQualityOfServicePrivatePayloadResult*>* *value);
};
template<typename X> struct IXboxLiveQualityOfServiceMeasurement_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<XboxLiveDeviceAddress>>> get() { Foundation::Collections::IVector<XboxLiveDeviceAddress*>* value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::DeviceAddresses)->_get_DeviceAddresses(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<XboxLiveDeviceAddress>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<XboxLiveDeviceAddress>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<XboxLiveDeviceAddress>>> operator->() { return get(); }
		} DeviceAddresses;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServiceMetricResult>>> get() { Foundation::Collections::IVectorView<XboxLiveQualityOfServiceMetricResult*>* value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::MetricResults)->_get_MetricResults(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServiceMetricResult>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServiceMetricResult>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServiceMetricResult>>> operator->() { return get(); }
		} MetricResults;
		struct : property {
			ptr<Foundation::Collections::IVector<XboxLiveQualityOfServiceMetric>> get() { Foundation::Collections::IVector<XboxLiveQualityOfServiceMetric>* value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::Metrics)->_get_Metrics(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<XboxLiveQualityOfServiceMetric>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<XboxLiveQualityOfServiceMetric>> () { return get(); }
			ptr<Foundation::Collections::IVector<XboxLiveQualityOfServiceMetric>> operator->() { return get(); }
		} Metrics;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::NumberOfProbesToAttempt)->_get_NumberOfProbesToAttempt(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::NumberOfProbesToAttempt)->_put_NumberOfProbesToAttempt(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} NumberOfProbesToAttempt;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::NumberOfResultsPending)->_get_NumberOfResultsPending(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} NumberOfResultsPending;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServicePrivatePayloadResult>>> get() { Foundation::Collections::IVectorView<XboxLiveQualityOfServicePrivatePayloadResult*>* value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::PrivatePayloadResults)->_get_PrivatePayloadResults(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServicePrivatePayloadResult>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServicePrivatePayloadResult>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServicePrivatePayloadResult>>> operator->() { return get(); }
		} PrivatePayloadResults;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::ShouldRequestPrivatePayloads)->_get_ShouldRequestPrivatePayloads(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::ShouldRequestPrivatePayloads)->_put_ShouldRequestPrivatePayloads(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShouldRequestPrivatePayloads;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::TimeoutInMilliseconds)->_get_TimeoutInMilliseconds(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IXboxLiveQualityOfServiceMeasurement_adaptor::TimeoutInMilliseconds)->_put_TimeoutInMilliseconds(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} TimeoutInMilliseconds;
	};
	ptr<Foundation::IAsyncAction> MeasureAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_MeasureAsync(&action)); return from_abi(action); }
	ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServiceMetricResult>>> GetMetricResultsForDevice(pptr<XboxLiveDeviceAddress> deviceAddress) { Foundation::Collections::IVectorView<XboxLiveQualityOfServiceMetricResult*>* value; hrcheck(X::get()->_GetMetricResultsForDevice(deviceAddress, &value)); return from_abi(value); }
	ptr<Foundation::Collections::IVectorView<ptr<XboxLiveQualityOfServiceMetricResult>>> GetMetricResultsForMetric(XboxLiveQualityOfServiceMetric metric) { Foundation::Collections::IVectorView<XboxLiveQualityOfServiceMetricResult*>* value; hrcheck(X::get()->_GetMetricResultsForMetric(metric, &value)); return from_abi(value); }
	ptr<XboxLiveQualityOfServiceMetricResult> GetMetricResult(pptr<XboxLiveDeviceAddress> deviceAddress, XboxLiveQualityOfServiceMetric metric) { XboxLiveQualityOfServiceMetricResult* value; hrcheck(X::get()->_GetMetricResult(deviceAddress, metric, &value)); return from_abi(value); }
	ptr<XboxLiveQualityOfServicePrivatePayloadResult> GetPrivatePayloadResult(pptr<XboxLiveDeviceAddress> deviceAddress) { XboxLiveQualityOfServicePrivatePayloadResult* value; hrcheck(X::get()->_GetPrivatePayloadResult(deviceAddress, &value)); return from_abi(value); }
	IXboxLiveQualityOfServiceMeasurement_adaptor() {}
};
template<typename X> struct adapt<IXboxLiveQualityOfServiceMeasurement, X> : Windows::Networking::XboxLive::IXboxLiveQualityOfServiceMeasurement_adaptor<X> { typedef adapt IXboxLiveQualityOfServiceMeasurement; };
struct IXboxLiveQualityOfServiceMeasurement : IXboxLiveQualityOfServiceMeasurement_raw, generate<IXboxLiveQualityOfServiceMeasurement> {};

// XboxLiveQualityOfServiceMetricResult
template<typename X> struct statics<XboxLiveQualityOfServiceMetricResult, X> : X {
	typedef typename X::root_type XboxLiveQualityOfServiceMetricResult;
};
struct XboxLiveQualityOfServiceMetricResult : generate<XboxLiveQualityOfServiceMetricResult> {};

// XboxLiveQualityOfServicePrivatePayloadResult
template<typename X> struct statics<XboxLiveQualityOfServicePrivatePayloadResult, X> : X {
	typedef typename X::root_type XboxLiveQualityOfServicePrivatePayloadResult;
};
struct XboxLiveQualityOfServicePrivatePayloadResult : generate<XboxLiveQualityOfServicePrivatePayloadResult> {};

// XboxLiveQualityOfServiceMeasurement
template<typename> struct XboxLiveQualityOfServiceMeasurement_statics {
	static struct _IsSystemInboundBandwidthConstrained : property {
		bool get() { bool value; hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_get_IsSystemInboundBandwidthConstrained(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_put_IsSystemInboundBandwidthConstrained(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} IsSystemInboundBandwidthConstrained;
	static struct _IsSystemOutboundBandwidthConstrained : property {
		bool get() { bool value; hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_get_IsSystemOutboundBandwidthConstrained(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_put_IsSystemOutboundBandwidthConstrained(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} IsSystemOutboundBandwidthConstrained;
	static struct _MaxPrivatePayloadSize : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_get_MaxPrivatePayloadSize(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MaxPrivatePayloadSize;
	static struct _MaxSimultaneousProbeConnections : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_get_MaxSimultaneousProbeConnections(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
		void put(unsigned value) { hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_put_MaxSimultaneousProbeConnections(value)); }
		void operator=(unsigned value) { put(value); }
		void operator()(unsigned value) { put(value); }
	} MaxSimultaneousProbeConnections;
	static struct _PublishedPrivatePayload : property {
		ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_get_PublishedPrivatePayload(&value)); return from_abi(value); }
		ptr<Storage::Streams::IBuffer> operator()() { return get(); }
		operator ptr<Storage::Streams::IBuffer> () { return get(); }
		ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_put_PublishedPrivatePayload(value)); }
		void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
		void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
	} PublishedPrivatePayload;
	static void PublishPrivatePayloadBytes(const szarray<unsigned char>& payload) { hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_PublishPrivatePayloadBytes(payload.size, to_abi(payload.p))); }
	static void ClearPrivatePayload() { hrcheck(get_activation_factory<XboxLiveQualityOfServiceMeasurement, IXboxLiveQualityOfServiceMeasurementStatics>()->_ClearPrivatePayload()); }
};
template<typename X> typename XboxLiveQualityOfServiceMeasurement_statics<X>::_IsSystemInboundBandwidthConstrained XboxLiveQualityOfServiceMeasurement_statics<X>::IsSystemInboundBandwidthConstrained;
template<typename X> typename XboxLiveQualityOfServiceMeasurement_statics<X>::_IsSystemOutboundBandwidthConstrained XboxLiveQualityOfServiceMeasurement_statics<X>::IsSystemOutboundBandwidthConstrained;
template<typename X> typename XboxLiveQualityOfServiceMeasurement_statics<X>::_MaxPrivatePayloadSize XboxLiveQualityOfServiceMeasurement_statics<X>::MaxPrivatePayloadSize;
template<typename X> typename XboxLiveQualityOfServiceMeasurement_statics<X>::_MaxSimultaneousProbeConnections XboxLiveQualityOfServiceMeasurement_statics<X>::MaxSimultaneousProbeConnections;
template<typename X> typename XboxLiveQualityOfServiceMeasurement_statics<X>::_PublishedPrivatePayload XboxLiveQualityOfServiceMeasurement_statics<X>::PublishedPrivatePayload;

template<typename X> struct statics<XboxLiveQualityOfServiceMeasurement, X> : X, Windows::Networking::XboxLive::XboxLiveQualityOfServiceMeasurement_statics<void> {
	typedef typename X::root_type XboxLiveQualityOfServiceMeasurement;
};
struct XboxLiveQualityOfServiceMeasurement : generate<XboxLiveQualityOfServiceMeasurement> {};
}}}
} // namespace iso_winrt
