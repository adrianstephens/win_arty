#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.RemoteDesktop

#include "Windows.System.RemoteDesktop.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::System::RemoteDesktop::IInteractiveSessionStatics> : interface_type<> {};
template<> struct def<Windows::System::RemoteDesktop::InteractiveSession> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::System::RemoteDesktop::IInteractiveSessionStatics> { define_guid(0x60884631, 0xDD3A, 0x4576, 0x9C, 0x8D, 0xE8, 0x2, 0x76, 0x18, 0xBD, 0xCE);};

// types

namespace Windows { namespace System { namespace RemoteDesktop {

// IInteractiveSessionStatics
struct IInteractiveSessionStatics : IInspectable {
	virtual STDMETHODIMP _get_IsRemote(bool *value);
};

// InteractiveSession
template<typename> struct InteractiveSession_statics {
	static struct _IsRemote : property {
		bool get() { bool value; hrcheck(get_activation_factory<InteractiveSession, IInteractiveSessionStatics>()->_get_IsRemote(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsRemote;
};
template<typename X> typename InteractiveSession_statics<X>::_IsRemote InteractiveSession_statics<X>::IsRemote;

template<typename X> struct statics<InteractiveSession, X> : X, Windows::System::RemoteDesktop::InteractiveSession_statics<void> {
	typedef typename X::root_type InteractiveSession;
};
struct InteractiveSession : generate<InteractiveSession> {};
}}}
} // namespace iso_winrt
