#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.VoiceCommands

#include "Windows.ApplicationModel.VoiceCommands.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace AppService {
struct AppServiceTriggerDetails;
}}
namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
template<typename T> struct IVector;
}}
namespace Globalization {
struct Language;
}
namespace Media { namespace SpeechRecognition {
struct SpeechRecognitionResult;
}}
namespace Storage {
struct StorageFile;
struct IStorageFile;
}}

// defs

template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandDefinitionManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandDefinition> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandDefinition> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTileType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandContentTile> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandUserMessage> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandContentTile> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandUserMessage> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletionReason> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommand> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandDisambiguationResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandConfirmationResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandServiceConnection> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommand> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommand> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandResponseStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandResponse> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandResponse> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandConfirmationResult> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandDisambiguationResult> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::IVoiceCommandServiceConnectionStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandServiceConnection> {};
template<> struct def<Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::VoiceCommands::IVoiceCommandCompletedEventArgs> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandDefinitionManagerStatics> { define_guid(0x8FE7A69E, 0x67E, 0x4F16, 0xA1, 0x8C, 0x5B, 0x17, 0xE9, 0x49, 0x99, 0x40);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandDefinition> { define_guid(0x7972AAD0, 0x974, 0x4979, 0x98, 0x4B, 0xCB, 0x89, 0x59, 0xCD, 0x61, 0xAE);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandContentTile> { define_guid(0x3EEFE9F0, 0xB8C7, 0x4C76, 0xA0, 0xDE, 0x16, 0x7, 0x89, 0x5E, 0xE3, 0x27);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandUserMessage> { define_guid(0x674EB3C0, 0x44F6, 0x4F07, 0xB9, 0x79, 0x4C, 0x72, 0x3F, 0xC0, 0x85, 0x97);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommand> { define_guid(0x936F5273, 0xEC82, 0x42A6, 0xA5, 0x5C, 0xD2, 0xD7, 0x9E, 0xC6, 0xF9, 0x20);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandCompletedEventArgs> { define_guid(0xC85E675D, 0xFE42, 0x432C, 0x99, 0x7, 0x9, 0xDF, 0x9F, 0xCF, 0x64, 0xE8);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandDisambiguationResult> { define_guid(0xECC68CFE, 0xC9AC, 0x45DF, 0xA8, 0xEA, 0xFE, 0xEA, 0x8, 0xEF, 0x9C, 0x5E);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandConfirmationResult> { define_guid(0xA022593E, 0x8221, 0x4526, 0xB0, 0x83, 0x84, 0x9, 0x72, 0x26, 0x22, 0x47);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandServiceConnection> { define_guid(0xD894BB9F, 0x21DA, 0x44A4, 0x98, 0xA2, 0xFB, 0x13, 0x19, 0x20, 0xA9, 0xCC);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandResponseStatics> { define_guid(0x2932F813, 0xD3B, 0x49F2, 0x96, 0xDD, 0x62, 0x50, 0x19, 0xBD, 0x3B, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandResponse> { define_guid(0x284B30E, 0x8A3B, 0x4CC4, 0xA6, 0xA1, 0xCA, 0xD5, 0xBE, 0x27, 0x16, 0xB5);};
template<> struct uuid<Windows::ApplicationModel::VoiceCommands::IVoiceCommandServiceConnectionStatics> { define_guid(0x370EBFFB, 0x2D34, 0x42DF, 0x87, 0x70, 0x7, 0x4D, 0xF, 0x33, 0x46, 0x97);};

// types

namespace Windows { namespace ApplicationModel { namespace VoiceCommands {

// IVoiceCommandDefinitionManagerStatics
struct IVoiceCommandDefinitionManagerStatics : IInspectable {
	virtual STDMETHODIMP _InstallCommandDefinitionsFromStorageFileAsync(Storage::StorageFile* file, Foundation::IAsyncAction* *installAction);
	virtual STDMETHODIMP _get_InstalledCommandDefinitions(Foundation::Collections::IMapView<HSTRING, VoiceCommandDefinition*>* *voiceCommandDefinitions);
};

// IVoiceCommandDefinition
struct IVoiceCommandDefinition_raw : IInspectable {
	virtual STDMETHODIMP _get_Language(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _SetPhraseListAsync(HSTRING phraseListName, Foundation::Collections::IIterable<HSTRING>* phraseList, Foundation::IAsyncAction* *updateAction);
};
template<typename X> struct IVoiceCommandDefinition_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandDefinition_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandDefinition_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	ptr<Foundation::IAsyncAction> SetPhraseListAsync(hstring_ref phraseListName, pptr<Foundation::Collections::IIterable<hstring>> phraseList) { Foundation::IAsyncAction* updateAction; hrcheck(X::get()->_SetPhraseListAsync(phraseListName, to_abi(phraseList), &updateAction)); return from_abi(updateAction); }
	IVoiceCommandDefinition_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandDefinition, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandDefinition_adaptor<X> { typedef adapt IVoiceCommandDefinition; };
struct IVoiceCommandDefinition : IVoiceCommandDefinition_raw, generate<IVoiceCommandDefinition> {};

// VoiceCommandDefinition
template<typename X> struct statics<VoiceCommandDefinition, X> : X {
	typedef typename X::root_type VoiceCommandDefinition;
};
struct VoiceCommandDefinition : generate<VoiceCommandDefinition> {};

// IVoiceCommandContentTile
struct IVoiceCommandContentTile_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_TextLine1(HSTRING *value);
	virtual STDMETHODIMP _put_TextLine1(HSTRING value);
	virtual STDMETHODIMP _get_TextLine2(HSTRING *value);
	virtual STDMETHODIMP _put_TextLine2(HSTRING value);
	virtual STDMETHODIMP _get_TextLine3(HSTRING *value);
	virtual STDMETHODIMP _put_TextLine3(HSTRING value);
	virtual STDMETHODIMP _get_Image(Storage::IStorageFile* *value);
	virtual STDMETHODIMP _put_Image(Storage::IStorageFile* value);
	virtual STDMETHODIMP _get_AppContext(IInspectable* *value);
	virtual STDMETHODIMP _put_AppContext(IInspectable* value);
	virtual STDMETHODIMP _get_AppLaunchArgument(HSTRING *value);
	virtual STDMETHODIMP _put_AppLaunchArgument(HSTRING value);
	virtual STDMETHODIMP _get_ContentTileType(VoiceCommandContentTileType *value);
	virtual STDMETHODIMP _put_ContentTileType(VoiceCommandContentTileType value);
};
template<typename X> struct IVoiceCommandContentTile_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::AppContext)->_get_AppContext(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
			void put(object_ref value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::AppContext)->_put_AppContext(value)); }
			void operator=(object_ref value) { put(move(value)); }
			void operator()(object_ref value) { put(move(value)); }
		} AppContext;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::AppLaunchArgument)->_get_AppLaunchArgument(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::AppLaunchArgument)->_put_AppLaunchArgument(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AppLaunchArgument;
		struct : property {
			VoiceCommandContentTileType get() { VoiceCommandContentTileType value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::ContentTileType)->_get_ContentTileType(&value)); return value; }
			VoiceCommandContentTileType operator()() { return get(); }
			operator VoiceCommandContentTileType () { return get(); }
			void put(VoiceCommandContentTileType value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::ContentTileType)->_put_ContentTileType(value)); }
			void operator=(VoiceCommandContentTileType value) { put(value); }
			void operator()(VoiceCommandContentTileType value) { put(value); }
		} ContentTileType;
		struct : property {
			ptr<Storage::IStorageFile> get() { Storage::IStorageFile* value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::Image)->_get_Image(&value)); return from_abi(value); }
			ptr<Storage::IStorageFile> operator()() { return get(); }
			operator ptr<Storage::IStorageFile> () { return get(); }
			ptr<Storage::IStorageFile> operator->() { return get(); }
			void put(pptr<Storage::IStorageFile> value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::Image)->_put_Image(value)); }
			void operator=(pptr<Storage::IStorageFile> value) { put(value); }
			void operator()(pptr<Storage::IStorageFile> value) { put(value); }
		} Image;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::TextLine1)->_get_TextLine1(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::TextLine1)->_put_TextLine1(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TextLine1;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::TextLine2)->_get_TextLine2(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::TextLine2)->_put_TextLine2(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TextLine2;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::TextLine3)->_get_TextLine3(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::TextLine3)->_put_TextLine3(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TextLine3;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandContentTile_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandContentTile_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	IVoiceCommandContentTile_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandContentTile, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandContentTile_adaptor<X> { typedef adapt IVoiceCommandContentTile; };
struct IVoiceCommandContentTile : IVoiceCommandContentTile_raw, generate<IVoiceCommandContentTile> {};

// IVoiceCommandUserMessage
struct IVoiceCommandUserMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayMessage(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayMessage(HSTRING value);
	virtual STDMETHODIMP _get_SpokenMessage(HSTRING *value);
	virtual STDMETHODIMP _put_SpokenMessage(HSTRING value);
};
template<typename X> struct IVoiceCommandUserMessage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandUserMessage_adaptor::DisplayMessage)->_get_DisplayMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandUserMessage_adaptor::DisplayMessage)->_put_DisplayMessage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayMessage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandUserMessage_adaptor::SpokenMessage)->_get_SpokenMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandUserMessage_adaptor::SpokenMessage)->_put_SpokenMessage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SpokenMessage;
	};
	IVoiceCommandUserMessage_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandUserMessage, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandUserMessage_adaptor<X> { typedef adapt IVoiceCommandUserMessage; };
struct IVoiceCommandUserMessage : IVoiceCommandUserMessage_raw, generate<IVoiceCommandUserMessage> {};

// VoiceCommandDefinitionManager
template<typename> struct VoiceCommandDefinitionManager_statics {
	static struct _InstalledCommandDefinitions : property {
		ptr<Foundation::Collections::IMapView<hstring, ptr<VoiceCommandDefinition>>> get() { Foundation::Collections::IMapView<HSTRING, VoiceCommandDefinition*>* voiceCommandDefinitions; hrcheck(get_activation_factory<VoiceCommandDefinitionManager, IVoiceCommandDefinitionManagerStatics>()->_get_InstalledCommandDefinitions(&voiceCommandDefinitions)); return from_abi(voiceCommandDefinitions); }
		ptr<Foundation::Collections::IMapView<hstring, ptr<VoiceCommandDefinition>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IMapView<hstring, ptr<VoiceCommandDefinition>>> () { return get(); }
		ptr<Foundation::Collections::IMapView<hstring, ptr<VoiceCommandDefinition>>> operator->() { return get(); }
	} InstalledCommandDefinitions;
	static ptr<Foundation::IAsyncAction> InstallCommandDefinitionsFromStorageFileAsync(pptr<Storage::StorageFile> file) { Foundation::IAsyncAction* installAction; hrcheck(get_activation_factory<VoiceCommandDefinitionManager, IVoiceCommandDefinitionManagerStatics>()->_InstallCommandDefinitionsFromStorageFileAsync(file, &installAction)); return from_abi(installAction); }
};
template<typename X> typename VoiceCommandDefinitionManager_statics<X>::_InstalledCommandDefinitions VoiceCommandDefinitionManager_statics<X>::InstalledCommandDefinitions;

template<typename X> struct statics<VoiceCommandDefinitionManager, X> : X, Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinitionManager_statics<void> {
	typedef typename X::root_type VoiceCommandDefinitionManager;
};
struct VoiceCommandDefinitionManager : generate<VoiceCommandDefinitionManager> {};

// VoiceCommandContentTile
template<typename X> struct statics<VoiceCommandContentTile, X> : X {
	typedef typename X::root_type VoiceCommandContentTile;
};
struct VoiceCommandContentTile : generate<VoiceCommandContentTile> {};

// VoiceCommandUserMessage
template<typename X> struct statics<VoiceCommandUserMessage, X> : X {
	typedef typename X::root_type VoiceCommandUserMessage;
};
struct VoiceCommandUserMessage : generate<VoiceCommandUserMessage> {};

// IVoiceCommand
struct IVoiceCommand_raw : IInspectable {
	virtual STDMETHODIMP _get_CommandName(HSTRING *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, Foundation::Collections::IVectorView<HSTRING>*>* *value);
	virtual STDMETHODIMP _get_SpeechRecognitionResult(Media::SpeechRecognition::SpeechRecognitionResult* *value);
};
template<typename X> struct IVoiceCommand_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommand_adaptor::CommandName)->_get_CommandName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CommandName;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, ptr<Foundation::Collections::IVectorView<hstring>>>> get() { Foundation::Collections::IMapView<HSTRING, Foundation::Collections::IVectorView<HSTRING>*>* value; hrcheck(enc(&IVoiceCommand_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<Foundation::Collections::IVectorView<hstring>>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, ptr<Foundation::Collections::IVectorView<hstring>>>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<Foundation::Collections::IVectorView<hstring>>>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<Media::SpeechRecognition::SpeechRecognitionResult> get() { Media::SpeechRecognition::SpeechRecognitionResult* value; hrcheck(enc(&IVoiceCommand_adaptor::SpeechRecognitionResult)->_get_SpeechRecognitionResult(&value)); return from_abi(value); }
			ptr<Media::SpeechRecognition::SpeechRecognitionResult> operator()() { return get(); }
			operator ptr<Media::SpeechRecognition::SpeechRecognitionResult> () { return get(); }
			ptr<Media::SpeechRecognition::SpeechRecognitionResult> operator->() { return get(); }
		} SpeechRecognitionResult;
	};
	IVoiceCommand_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommand, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommand_adaptor<X> { typedef adapt IVoiceCommand; };
struct IVoiceCommand : IVoiceCommand_raw, generate<IVoiceCommand> {};

// IVoiceCommandCompletedEventArgs
struct IVoiceCommandCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(VoiceCommandCompletionReason *value);
};
template<typename X> struct IVoiceCommandCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			VoiceCommandCompletionReason get() { VoiceCommandCompletionReason value; hrcheck(enc(&IVoiceCommandCompletedEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			VoiceCommandCompletionReason operator()() { return get(); }
			operator VoiceCommandCompletionReason () { return get(); }
		} Reason;
	};
	IVoiceCommandCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandCompletedEventArgs, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandCompletedEventArgs_adaptor<X> { typedef adapt IVoiceCommandCompletedEventArgs; };
struct IVoiceCommandCompletedEventArgs : IVoiceCommandCompletedEventArgs_raw, generate<IVoiceCommandCompletedEventArgs> {};

// IVoiceCommandDisambiguationResult
struct IVoiceCommandDisambiguationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_SelectedItem(VoiceCommandContentTile* *value);
};
template<typename X> struct IVoiceCommandDisambiguationResult_adaptor : X {
	union {
		struct : property {
			ptr<VoiceCommandContentTile> get() { VoiceCommandContentTile* value; hrcheck(enc(&IVoiceCommandDisambiguationResult_adaptor::SelectedItem)->_get_SelectedItem(&value)); return from_abi(value); }
			ptr<VoiceCommandContentTile> operator()() { return get(); }
			operator ptr<VoiceCommandContentTile> () { return get(); }
			ptr<VoiceCommandContentTile> operator->() { return get(); }
		} SelectedItem;
	};
	IVoiceCommandDisambiguationResult_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandDisambiguationResult, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandDisambiguationResult_adaptor<X> { typedef adapt IVoiceCommandDisambiguationResult; };
struct IVoiceCommandDisambiguationResult : IVoiceCommandDisambiguationResult_raw, generate<IVoiceCommandDisambiguationResult> {};

// IVoiceCommandConfirmationResult
struct IVoiceCommandConfirmationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Confirmed(bool *value);
};
template<typename X> struct IVoiceCommandConfirmationResult_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IVoiceCommandConfirmationResult_adaptor::Confirmed)->_get_Confirmed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Confirmed;
	};
	IVoiceCommandConfirmationResult_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandConfirmationResult, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandConfirmationResult_adaptor<X> { typedef adapt IVoiceCommandConfirmationResult; };
struct IVoiceCommandConfirmationResult : IVoiceCommandConfirmationResult_raw, generate<IVoiceCommandConfirmationResult> {};

// IVoiceCommandServiceConnection
struct IVoiceCommandServiceConnection_raw : IInspectable {
	virtual STDMETHODIMP _GetVoiceCommandAsync(Foundation::IAsyncOperation<VoiceCommand*>* *operation);
	virtual STDMETHODIMP _RequestConfirmationAsync(VoiceCommandResponse* response, Foundation::IAsyncOperation<VoiceCommandConfirmationResult*>* *operation);
	virtual STDMETHODIMP _RequestDisambiguationAsync(VoiceCommandResponse* response, Foundation::IAsyncOperation<VoiceCommandDisambiguationResult*>* *operation);
	virtual STDMETHODIMP _ReportProgressAsync(VoiceCommandResponse* response, Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _ReportSuccessAsync(VoiceCommandResponse* response, Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _ReportFailureAsync(VoiceCommandResponse* response, Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _RequestAppLaunchAsync(VoiceCommandResponse* response, Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _get_Language(Globalization::Language* *language);
	virtual STDMETHODIMP _add_VoiceCommandCompleted(Foundation::TypedEventHandler<VoiceCommandServiceConnection*, VoiceCommandCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VoiceCommandCompleted(Foundation::EventRegistrationToken token);
};
template<typename X> struct IVoiceCommandServiceConnection_adaptor : X {
	union {
		struct : property {
			ptr<Globalization::Language> get() { Globalization::Language* language; hrcheck(enc(&IVoiceCommandServiceConnection_adaptor::Language)->_get_Language(&language)); return from_abi(language); }
			ptr<Globalization::Language> operator()() { return get(); }
			operator ptr<Globalization::Language> () { return get(); }
			ptr<Globalization::Language> operator->() { return get(); }
		} Language;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VoiceCommandServiceConnection>, ptr<VoiceCommandCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVoiceCommandServiceConnection_adaptor::VoiceCommandCompleted)->_add_VoiceCommandCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVoiceCommandServiceConnection_adaptor::VoiceCommandCompleted)->_remove_VoiceCommandCompleted(token)); }
		} VoiceCommandCompleted;
	};
	ptr<Foundation::IAsyncOperation<ptr<VoiceCommand>>> GetVoiceCommandAsync() { Foundation::IAsyncOperation<VoiceCommand*>* operation; hrcheck(X::get()->_GetVoiceCommandAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<VoiceCommandConfirmationResult>>> RequestConfirmationAsync(pptr<VoiceCommandResponse> response) { Foundation::IAsyncOperation<VoiceCommandConfirmationResult*>* operation; hrcheck(X::get()->_RequestConfirmationAsync(response, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<VoiceCommandDisambiguationResult>>> RequestDisambiguationAsync(pptr<VoiceCommandResponse> response) { Foundation::IAsyncOperation<VoiceCommandDisambiguationResult*>* operation; hrcheck(X::get()->_RequestDisambiguationAsync(response, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ReportProgressAsync(pptr<VoiceCommandResponse> response) { Foundation::IAsyncAction* action; hrcheck(X::get()->_ReportProgressAsync(response, &action)); return from_abi(action); }
	ptr<Foundation::IAsyncAction> ReportSuccessAsync(pptr<VoiceCommandResponse> response) { Foundation::IAsyncAction* action; hrcheck(X::get()->_ReportSuccessAsync(response, &action)); return from_abi(action); }
	ptr<Foundation::IAsyncAction> ReportFailureAsync(pptr<VoiceCommandResponse> response) { Foundation::IAsyncAction* action; hrcheck(X::get()->_ReportFailureAsync(response, &action)); return from_abi(action); }
	ptr<Foundation::IAsyncAction> RequestAppLaunchAsync(pptr<VoiceCommandResponse> response) { Foundation::IAsyncAction* action; hrcheck(X::get()->_RequestAppLaunchAsync(response, &action)); return from_abi(action); }
	IVoiceCommandServiceConnection_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandServiceConnection, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandServiceConnection_adaptor<X> { typedef adapt IVoiceCommandServiceConnection; };
struct IVoiceCommandServiceConnection : IVoiceCommandServiceConnection_raw, generate<IVoiceCommandServiceConnection> {};

// VoiceCommand
template<typename X> struct statics<VoiceCommand, X> : X {
	typedef typename X::root_type VoiceCommand;
};
struct VoiceCommand : generate<VoiceCommand> {};

// IVoiceCommandResponseStatics
struct IVoiceCommandResponseStatics : IInspectable {
	virtual STDMETHODIMP _get_MaxSupportedVoiceCommandContentTiles(unsigned *value);
	virtual STDMETHODIMP _CreateResponse(VoiceCommandUserMessage* userMessage, VoiceCommandResponse* *response);
	virtual STDMETHODIMP _CreateResponseWithTiles(VoiceCommandUserMessage* message, Foundation::Collections::IIterable<VoiceCommandContentTile*>* contentTiles, VoiceCommandResponse* *response);
	virtual STDMETHODIMP _CreateResponseForPrompt(VoiceCommandUserMessage* message, VoiceCommandUserMessage* repeatMessage, VoiceCommandResponse* *response);
	virtual STDMETHODIMP _CreateResponseForPromptWithTiles(VoiceCommandUserMessage* message, VoiceCommandUserMessage* repeatMessage, Foundation::Collections::IIterable<VoiceCommandContentTile*>* contentTiles, VoiceCommandResponse* *response);
};

// IVoiceCommandResponse
struct IVoiceCommandResponse_raw : IInspectable {
	virtual STDMETHODIMP _get_Message(VoiceCommandUserMessage* *value);
	virtual STDMETHODIMP _put_Message(VoiceCommandUserMessage* value);
	virtual STDMETHODIMP _get_RepeatMessage(VoiceCommandUserMessage* *value);
	virtual STDMETHODIMP _put_RepeatMessage(VoiceCommandUserMessage* value);
	virtual STDMETHODIMP _get_AppLaunchArgument(HSTRING *value);
	virtual STDMETHODIMP _put_AppLaunchArgument(HSTRING value);
	virtual STDMETHODIMP _get_VoiceCommandContentTiles(Foundation::Collections::IVector<VoiceCommandContentTile*>* *value);
};
template<typename X> struct IVoiceCommandResponse_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoiceCommandResponse_adaptor::AppLaunchArgument)->_get_AppLaunchArgument(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoiceCommandResponse_adaptor::AppLaunchArgument)->_put_AppLaunchArgument(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AppLaunchArgument;
		struct : property {
			ptr<VoiceCommandUserMessage> get() { VoiceCommandUserMessage* value; hrcheck(enc(&IVoiceCommandResponse_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<VoiceCommandUserMessage> operator()() { return get(); }
			operator ptr<VoiceCommandUserMessage> () { return get(); }
			ptr<VoiceCommandUserMessage> operator->() { return get(); }
			void put(pptr<VoiceCommandUserMessage> value) { hrcheck(enc(&IVoiceCommandResponse_adaptor::Message)->_put_Message(value)); }
			void operator=(pptr<VoiceCommandUserMessage> value) { put(value); }
			void operator()(pptr<VoiceCommandUserMessage> value) { put(value); }
		} Message;
		struct : property {
			ptr<VoiceCommandUserMessage> get() { VoiceCommandUserMessage* value; hrcheck(enc(&IVoiceCommandResponse_adaptor::RepeatMessage)->_get_RepeatMessage(&value)); return from_abi(value); }
			ptr<VoiceCommandUserMessage> operator()() { return get(); }
			operator ptr<VoiceCommandUserMessage> () { return get(); }
			ptr<VoiceCommandUserMessage> operator->() { return get(); }
			void put(pptr<VoiceCommandUserMessage> value) { hrcheck(enc(&IVoiceCommandResponse_adaptor::RepeatMessage)->_put_RepeatMessage(value)); }
			void operator=(pptr<VoiceCommandUserMessage> value) { put(value); }
			void operator()(pptr<VoiceCommandUserMessage> value) { put(value); }
		} RepeatMessage;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<VoiceCommandContentTile>>> get() { Foundation::Collections::IVector<VoiceCommandContentTile*>* value; hrcheck(enc(&IVoiceCommandResponse_adaptor::VoiceCommandContentTiles)->_get_VoiceCommandContentTiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<VoiceCommandContentTile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<VoiceCommandContentTile>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<VoiceCommandContentTile>>> operator->() { return get(); }
		} VoiceCommandContentTiles;
	};
	IVoiceCommandResponse_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandResponse, X> : Windows::ApplicationModel::VoiceCommands::IVoiceCommandResponse_adaptor<X> { typedef adapt IVoiceCommandResponse; };
struct IVoiceCommandResponse : IVoiceCommandResponse_raw, generate<IVoiceCommandResponse> {};

// VoiceCommandResponse
template<typename> struct VoiceCommandResponse_statics {
	static struct _MaxSupportedVoiceCommandContentTiles : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<VoiceCommandResponse, IVoiceCommandResponseStatics>()->_get_MaxSupportedVoiceCommandContentTiles(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MaxSupportedVoiceCommandContentTiles;
	static ptr<VoiceCommandResponse> CreateResponse(pptr<VoiceCommandUserMessage> userMessage) { VoiceCommandResponse* response; hrcheck(get_activation_factory<VoiceCommandResponse, IVoiceCommandResponseStatics>()->_CreateResponse(userMessage, &response)); return from_abi(response); }
	static ptr<VoiceCommandResponse> CreateResponse(pptr<VoiceCommandUserMessage> message, pptr<Foundation::Collections::IIterable<ptr<VoiceCommandContentTile>>> contentTiles) { VoiceCommandResponse* response; hrcheck(get_activation_factory<VoiceCommandResponse, IVoiceCommandResponseStatics>()->_CreateResponseWithTiles(message, to_abi(contentTiles), &response)); return from_abi(response); }
	static ptr<VoiceCommandResponse> CreateResponseForPrompt(pptr<VoiceCommandUserMessage> message, pptr<VoiceCommandUserMessage> repeatMessage) { VoiceCommandResponse* response; hrcheck(get_activation_factory<VoiceCommandResponse, IVoiceCommandResponseStatics>()->_CreateResponseForPrompt(message, repeatMessage, &response)); return from_abi(response); }
	static ptr<VoiceCommandResponse> CreateResponseForPrompt(pptr<VoiceCommandUserMessage> message, pptr<VoiceCommandUserMessage> repeatMessage, pptr<Foundation::Collections::IIterable<ptr<VoiceCommandContentTile>>> contentTiles) { VoiceCommandResponse* response; hrcheck(get_activation_factory<VoiceCommandResponse, IVoiceCommandResponseStatics>()->_CreateResponseForPromptWithTiles(message, repeatMessage, to_abi(contentTiles), &response)); return from_abi(response); }
};
template<typename X> typename VoiceCommandResponse_statics<X>::_MaxSupportedVoiceCommandContentTiles VoiceCommandResponse_statics<X>::MaxSupportedVoiceCommandContentTiles;

template<typename X> struct statics<VoiceCommandResponse, X> : X, Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse_statics<void> {
	typedef typename X::root_type VoiceCommandResponse;
};
struct VoiceCommandResponse : generate<VoiceCommandResponse> {};

// VoiceCommandConfirmationResult
template<typename X> struct statics<VoiceCommandConfirmationResult, X> : X {
	typedef typename X::root_type VoiceCommandConfirmationResult;
};
struct VoiceCommandConfirmationResult : generate<VoiceCommandConfirmationResult> {};

// VoiceCommandDisambiguationResult
template<typename X> struct statics<VoiceCommandDisambiguationResult, X> : X {
	typedef typename X::root_type VoiceCommandDisambiguationResult;
};
struct VoiceCommandDisambiguationResult : generate<VoiceCommandDisambiguationResult> {};

// IVoiceCommandServiceConnectionStatics
struct IVoiceCommandServiceConnectionStatics : IInspectable {
	virtual STDMETHODIMP _FromAppServiceTriggerDetails(AppService::AppServiceTriggerDetails* triggerDetails, VoiceCommandServiceConnection* *value);
};

// VoiceCommandServiceConnection
template<typename> struct VoiceCommandServiceConnection_statics {
	static ptr<VoiceCommandServiceConnection> FromAppServiceTriggerDetails(pptr<AppService::AppServiceTriggerDetails> triggerDetails) { VoiceCommandServiceConnection* value; hrcheck(get_activation_factory<VoiceCommandServiceConnection, IVoiceCommandServiceConnectionStatics>()->_FromAppServiceTriggerDetails(triggerDetails, &value)); return from_abi(value); }
};

template<typename X> struct statics<VoiceCommandServiceConnection, X> : X, Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection_statics<void> {
	typedef typename X::root_type VoiceCommandServiceConnection;
};
struct VoiceCommandServiceConnection : generate<VoiceCommandServiceConnection> {};

// VoiceCommandCompletedEventArgs
template<typename X> struct statics<VoiceCommandCompletedEventArgs, X> : X {
	typedef typename X::root_type VoiceCommandCompletedEventArgs;
};
struct VoiceCommandCompletedEventArgs : generate<VoiceCommandCompletedEventArgs> {};
}}}
} // namespace iso_winrt
