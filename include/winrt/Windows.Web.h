#pragma once
// generated by isopod tools
// namespaces:
// Windows.Web

#include "Windows.Web.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
template<typename TResult> struct IAsyncOperation;
struct Uri;
}
namespace Storage { namespace Streams {
struct IInputStream;
}}}

// defs

template<> struct def<Windows::Web::WebErrorStatus> : enum_type<int> {};
template<> struct def<Windows::Web::IWebErrorStatics> : interface_type<> {};
template<> struct def<Windows::Web::WebError> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Web::IUriToStreamResolver> : overridable_type<> {};

// uuids

template<> struct uuid<Windows::Web::IWebErrorStatics> { define_guid(0xFE616766, 0xBF27, 0x4064, 0x87, 0xB7, 0x65, 0x63, 0xBB, 0x11, 0xCE, 0x2E);};
template<> struct uuid<Windows::Web::IUriToStreamResolver> { define_guid(0xB0ABA86A, 0x9AEB, 0x4D3A, 0x95, 0x90, 0x0, 0x3E, 0x3C, 0xA7, 0xE2, 0x90);};

// types

namespace Windows { namespace Web {

// IWebErrorStatics
struct IWebErrorStatics : IInspectable {
	virtual STDMETHODIMP _GetStatus(int hresult, WebErrorStatus *status);
};

// WebError
template<typename> struct WebError_statics {
	static WebErrorStatus GetStatus(int hresult) { WebErrorStatus status; hrcheck(get_activation_factory<WebError, IWebErrorStatics>()->_GetStatus(hresult, &status)); return status; }
};

template<typename X> struct statics<WebError, X> : X, Windows::Web::WebError_statics<void> {
	typedef typename X::root_type WebError;
};
struct WebError : generate<WebError> {};

// IUriToStreamResolver
struct IUriToStreamResolver_raw : IInspectable {
	virtual STDMETHODIMP _UriToStreamAsync(Foundation::Uri* uri, Foundation::IAsyncOperation<Storage::Streams::IInputStream*>* *operation) = 0;
};
template<typename X> struct IUriToStreamResolver_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IInputStream>>> UriToStreamAsync(pptr<Foundation::Uri> uri) { Foundation::IAsyncOperation<Storage::Streams::IInputStream*>* operation; hrcheck(X::get()->_UriToStreamAsync(uri, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IUriToStreamResolver, X> : Windows::Web::IUriToStreamResolver_adaptor<X> { typedef adapt IUriToStreamResolver; };
template<typename X> struct IUriToStreamResolver_unadaptor : X {
	STDMETHODIMP _UriToStreamAsync(Foundation::Uri* uri, Foundation::IAsyncOperation<Storage::Streams::IInputStream*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->UriToStreamAsync(uri)); }); }
};
template<typename X> struct unadapt<IUriToStreamResolver, X> : Windows::Web::IUriToStreamResolver_unadaptor<X> {};
struct IUriToStreamResolver : IUriToStreamResolver_raw, generate<IUriToStreamResolver> {};
}}
} // namespace iso_winrt
