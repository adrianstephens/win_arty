#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.ContentRestrictions

#include "Windows.Media.ContentRestrictions.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::Media::ContentRestrictions::RatedContentCategory> : enum_type<int> {};
template<> struct def<Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> : enum_type<int> {};
template<> struct def<Windows::Media::ContentRestrictions::IRatedContentDescription> : interface_type<> {};
template<> struct def<Windows::Media::ContentRestrictions::IRatedContentDescriptionFactory> : interface_type<> {};
template<> struct def<Windows::Media::ContentRestrictions::RatedContentDescription> : class_type<Platform::Object, Windows::Media::ContentRestrictions::IRatedContentDescription>, custom_activators {};
template<> struct def<Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy> : interface_type<> {};
template<> struct def<Windows::Media::ContentRestrictions::IRatedContentRestrictions> : interface_type<> {};
template<> struct def<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy> : class_type<Platform::Object, Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy> {};
template<> struct def<Windows::Media::ContentRestrictions::IRatedContentRestrictionsFactory> : interface_type<> {};
template<> struct def<Windows::Media::ContentRestrictions::RatedContentRestrictions> : class_type<Platform::Object, Windows::Media::ContentRestrictions::IRatedContentRestrictions>, custom_activators {};

// uuids

template<> struct uuid<Windows::Media::ContentRestrictions::IRatedContentDescription> { define_guid(0x694866DF, 0x66B2, 0x4DC3, 0x96, 0xB1, 0xF0, 0x90, 0xEE, 0xDE, 0xE2, 0x55);};
template<> struct uuid<Windows::Media::ContentRestrictions::IRatedContentDescriptionFactory> { define_guid(0x2E38DF62, 0x9B90, 0x4FA6, 0x89, 0xC1, 0x4B, 0x8D, 0x2F, 0xFB, 0x35, 0x73);};
template<> struct uuid<Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy> { define_guid(0x8C0133A4, 0x442E, 0x461A, 0x87, 0x57, 0xFA, 0xD2, 0xF5, 0xBD, 0x37, 0xE4);};
template<> struct uuid<Windows::Media::ContentRestrictions::IRatedContentRestrictions> { define_guid(0x3F7F23CB, 0xBA07, 0x4401, 0xA4, 0x9D, 0x8B, 0x92, 0x22, 0x20, 0x57, 0x23);};
template<> struct uuid<Windows::Media::ContentRestrictions::IRatedContentRestrictionsFactory> { define_guid(0xFB4B2996, 0xC3BD, 0x4910, 0x96, 0x19, 0x97, 0xCF, 0xD0, 0x69, 0x4D, 0x56);};

// types

namespace Windows { namespace Media { namespace ContentRestrictions {

// IRatedContentDescription
struct IRatedContentDescription_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Image(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Image(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_Category(RatedContentCategory *value);
	virtual STDMETHODIMP _put_Category(RatedContentCategory value);
	virtual STDMETHODIMP _get_Ratings(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _put_Ratings(Foundation::Collections::IVector<HSTRING>* value);
};
template<typename X> struct IRatedContentDescription_adaptor : X {
	union {
		struct : property {
			RatedContentCategory get() { RatedContentCategory value; hrcheck(enc(&IRatedContentDescription_adaptor::Category)->_get_Category(&value)); return value; }
			RatedContentCategory operator()() { return get(); }
			operator RatedContentCategory () { return get(); }
			void put(RatedContentCategory value) { hrcheck(enc(&IRatedContentDescription_adaptor::Category)->_put_Category(value)); }
			void operator=(RatedContentCategory value) { put(value); }
			void operator()(RatedContentCategory value) { put(value); }
		} Category;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRatedContentDescription_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IRatedContentDescription_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IRatedContentDescription_adaptor::Image)->_get_Image(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IRatedContentDescription_adaptor::Image)->_put_Image(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Image;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IRatedContentDescription_adaptor::Ratings)->_get_Ratings(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
			void put(pptr<Foundation::Collections::IVector<hstring>> value) { hrcheck(enc(&IRatedContentDescription_adaptor::Ratings)->_put_Ratings(to_abi(value))); }
			void operator=(pptr<Foundation::Collections::IVector<hstring>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::Collections::IVector<hstring>> value) { put(to_abi(value)); }
		} Ratings;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRatedContentDescription_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IRatedContentDescription_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	IRatedContentDescription_adaptor() {}
};
template<typename X> struct adapt<IRatedContentDescription, X> : Windows::Media::ContentRestrictions::IRatedContentDescription_adaptor<X> { typedef adapt IRatedContentDescription; };
struct IRatedContentDescription : IRatedContentDescription_raw, generate<IRatedContentDescription> {};

// IRatedContentDescriptionFactory
struct IRatedContentDescriptionFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING id, HSTRING title, RatedContentCategory category, ContentRestrictions::RatedContentDescription* *RatedContentDescription);
};

// RatedContentDescription
template<typename> struct RatedContentDescription_statics {
	static RatedContentDescription *activate(hstring_ref id, hstring_ref title, RatedContentCategory category) { RatedContentDescription *RatedContentDescription; hrcheck(get_activation_factory<RatedContentDescription, IRatedContentDescriptionFactory>()->_Create(id, title, category, &RatedContentDescription)); return RatedContentDescription; }
};

template<typename X> struct statics<RatedContentDescription, X> : X, Windows::Media::ContentRestrictions::RatedContentDescription_statics<void> {
	using Windows::Media::ContentRestrictions::RatedContentDescription_statics<void>::activate;
	typedef typename X::root_type RatedContentDescription;
};
struct RatedContentDescription : generate<RatedContentDescription> {};

// IContentRestrictionsBrowsePolicy
struct IContentRestrictionsBrowsePolicy_raw : IInspectable {
	virtual STDMETHODIMP _get_GeographicRegion(HSTRING *value);
	virtual STDMETHODIMP _get_MaxBrowsableAgeRating(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_PreferredAgeRating(Foundation::IReference<unsigned>* *value);
};
template<typename X> struct IContentRestrictionsBrowsePolicy_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContentRestrictionsBrowsePolicy_adaptor::GeographicRegion)->_get_GeographicRegion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} GeographicRegion;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IContentRestrictionsBrowsePolicy_adaptor::MaxBrowsableAgeRating)->_get_MaxBrowsableAgeRating(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} MaxBrowsableAgeRating;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IContentRestrictionsBrowsePolicy_adaptor::PreferredAgeRating)->_get_PreferredAgeRating(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} PreferredAgeRating;
	};
	IContentRestrictionsBrowsePolicy_adaptor() {}
};
template<typename X> struct adapt<IContentRestrictionsBrowsePolicy, X> : Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy_adaptor<X> { typedef adapt IContentRestrictionsBrowsePolicy; };
struct IContentRestrictionsBrowsePolicy : IContentRestrictionsBrowsePolicy_raw, generate<IContentRestrictionsBrowsePolicy> {};

// IRatedContentRestrictions
struct IRatedContentRestrictions_raw : IInspectable {
	virtual STDMETHODIMP _GetBrowsePolicyAsync(Foundation::IAsyncOperation<ContentRestrictionsBrowsePolicy*>* *operation);
	virtual STDMETHODIMP _GetRestrictionLevelAsync(ContentRestrictions::RatedContentDescription* RatedContentDescription, Foundation::IAsyncOperation<ContentAccessRestrictionLevel>* *operation);
	virtual STDMETHODIMP _RequestContentAccessAsync(ContentRestrictions::RatedContentDescription* RatedContentDescription, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _add_RestrictionsChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RestrictionsChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRatedContentRestrictions_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRatedContentRestrictions_adaptor::RestrictionsChanged)->_add_RestrictionsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRatedContentRestrictions_adaptor::RestrictionsChanged)->_remove_RestrictionsChanged(token)); }
		} RestrictionsChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<ContentRestrictionsBrowsePolicy>>> GetBrowsePolicyAsync() { Foundation::IAsyncOperation<ContentRestrictionsBrowsePolicy*>* operation; hrcheck(X::get()->_GetBrowsePolicyAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ContentAccessRestrictionLevel>> GetRestrictionLevelAsync(pptr<ContentRestrictions::RatedContentDescription> RatedContentDescription) { Foundation::IAsyncOperation<ContentAccessRestrictionLevel>* operation; hrcheck(X::get()->_GetRestrictionLevelAsync(RatedContentDescription, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestContentAccessAsync(pptr<ContentRestrictions::RatedContentDescription> RatedContentDescription) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestContentAccessAsync(RatedContentDescription, &operation)); return from_abi(operation); }
	IRatedContentRestrictions_adaptor() {}
};
template<typename X> struct adapt<IRatedContentRestrictions, X> : Windows::Media::ContentRestrictions::IRatedContentRestrictions_adaptor<X> { typedef adapt IRatedContentRestrictions; };
struct IRatedContentRestrictions : IRatedContentRestrictions_raw, generate<IRatedContentRestrictions> {};

// ContentRestrictionsBrowsePolicy
template<typename X> struct statics<ContentRestrictionsBrowsePolicy, X> : X {
	typedef typename X::root_type ContentRestrictionsBrowsePolicy;
};
struct ContentRestrictionsBrowsePolicy : generate<ContentRestrictionsBrowsePolicy> {};

// IRatedContentRestrictionsFactory
struct IRatedContentRestrictionsFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithMaxAgeRating(unsigned maxAgeRating, RatedContentRestrictions* *ratedContentRestrictions);
};

// RatedContentRestrictions
template<typename> struct RatedContentRestrictions_statics {
	static RatedContentRestrictions *activate() { RatedContentRestrictions *t; get_activation_factory<RatedContentRestrictions>()->ActivateInstance((IInspectable**)&t); return t; }
	static RatedContentRestrictions *activate(unsigned maxAgeRating) { RatedContentRestrictions *ratedContentRestrictions; hrcheck(get_activation_factory<RatedContentRestrictions, IRatedContentRestrictionsFactory>()->_CreateWithMaxAgeRating(maxAgeRating, &ratedContentRestrictions)); return ratedContentRestrictions; }
};

template<typename X> struct statics<RatedContentRestrictions, X> : X, Windows::Media::ContentRestrictions::RatedContentRestrictions_statics<void> {
	using Windows::Media::ContentRestrictions::RatedContentRestrictions_statics<void>::activate;
	typedef typename X::root_type RatedContentRestrictions;
};
struct RatedContentRestrictions : generate<RatedContentRestrictions> {};
}}}
} // namespace iso_winrt
