#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.Notification.Management

#include "Windows.Phone.Notification.Management.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Appointments {
struct Appointment;
}
namespace Email {
struct EmailMessage;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMapView;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::Phone::Notification::Management::ITextResponse> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::TextResponse> : class_type<Platform::Object, Windows::Phone::Notification::Management::ITextResponse> {};
template<> struct def<Windows::Phone::Notification::Management::AccessoryNotificationType> : enum_type<unsigned> {};
template<> struct def<Windows::Phone::Notification::Management::ReminderState> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::IAppNotificationInfo> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::AppNotificationInfo> : class_type<Platform::Object, Windows::Phone::Notification::Management::IAppNotificationInfo> {};
template<> struct def<Windows::Phone::Notification::Management::IEmailAccountInfo> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::EmailAccountInfo> : class_type<Platform::Object, Windows::Phone::Notification::Management::IEmailAccountInfo> {};
template<> struct def<Windows::Phone::Notification::Management::IEmailFolderInfo> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::EmailFolderInfo> : class_type<Platform::Object, Windows::Phone::Notification::Management::IEmailFolderInfo> {};
template<> struct def<Windows::Phone::Notification::Management::IBinaryId> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::BinaryId> : class_type<Platform::Object, Windows::Phone::Notification::Management::IBinaryId> {};
template<> struct def<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> : overridable_type<> {};
template<> struct def<Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails2> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::AlarmNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails, Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails2> {};
template<> struct def<Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails2> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::IEmailReadNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::EmailReadNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IEmailReadNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::EmailNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails, Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails2> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneNotificationType> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneCallTransport> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneMediaType> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneCallDirection> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneCallState> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneCallAudioEndpoint> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneLineRegistrationState> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::IPhoneLineDetails> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::IPhoneLineDetails2> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneLineDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IPhoneLineDetails, Windows::Phone::Notification::Management::IPhoneLineDetails2> {};
template<> struct def<Windows::Phone::Notification::Management::IPhoneCallDetails> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneCallDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IPhoneCallDetails> {};
template<> struct def<Windows::Phone::Notification::Management::IPhoneNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::PhoneNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IPhoneNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::ISpeedDialEntry> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::SpeedDialEntry> : class_type<Platform::Object, Windows::Phone::Notification::Management::ISpeedDialEntry> {};
template<> struct def<Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails2> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::ReminderNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails, Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails2> {};
template<> struct def<Windows::Phone::Notification::Management::CalendarChangedEvent> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::ICalendarChangedNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::CalendarChangedNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::ICalendarChangedNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::IToastNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::IToastNotificationTriggerDetails2> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::ToastNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IToastNotificationTriggerDetails, Windows::Phone::Notification::Management::IToastNotificationTriggerDetails2> {};
template<> struct def<Windows::Phone::Notification::Management::ICortanaTileNotificationTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::CortanaTileNotificationTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::ICortanaTileNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::PlaybackStatus> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::PlaybackCapability> : enum_type<unsigned> {};
template<> struct def<Windows::Phone::Notification::Management::PlaybackCommand> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::IMediaMetadata> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::MediaMetadata> : class_type<Platform::Object, Windows::Phone::Notification::Management::IMediaMetadata> {};
template<> struct def<Windows::Phone::Notification::Management::IMediaControlsTriggerDetails> : interface_type<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::MediaControlsTriggerDetails> : class_type<Platform::Object, Windows::Phone::Notification::Management::IMediaControlsTriggerDetails> {};
template<> struct def<Windows::Phone::Notification::Management::VibrateState> : enum_type<int> {};
template<> struct def<Windows::Phone::Notification::Management::IVolumeInfo> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::VolumeInfo> : class_type<Platform::Object, Windows::Phone::Notification::Management::IVolumeInfo> {};
template<> struct def<Windows::Phone::Notification::Management::IAccessoryManager> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::IAccessoryManager2> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::IAccessoryManager3> : interface_type<> {};
template<> struct def<Windows::Phone::Notification::Management::AccessoryManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Phone::Notification::Management::ITextResponse> { define_guid(0xE9CB74C3, 0x2457, 0x4CDB, 0x81, 0x10, 0x72, 0xF5, 0xE8, 0xE8, 0x83, 0xE8);};
template<> struct uuid<Windows::Phone::Notification::Management::IAppNotificationInfo> { define_guid(0x2157BEA5, 0xE286, 0x45D3, 0x9B, 0xEA, 0xF7, 0x90, 0xFC, 0x21, 0x6E, 0xE);};
template<> struct uuid<Windows::Phone::Notification::Management::IEmailAccountInfo> { define_guid(0xDFBC02AB, 0xBDA0, 0x4568, 0x92, 0x7E, 0xB2, 0xED, 0xE3, 0x58, 0x18, 0xA1);};
template<> struct uuid<Windows::Phone::Notification::Management::IEmailFolderInfo> { define_guid(0xC207150E, 0xE237, 0x46D6, 0x90, 0xE6, 0x4F, 0x52, 0x9E, 0xEA, 0xC1, 0xE2);};
template<> struct uuid<Windows::Phone::Notification::Management::IBinaryId> { define_guid(0x4F0DA531, 0x5595, 0x44B4, 0x91, 0x81, 0xCE, 0x4E, 0xFA, 0x3F, 0xC1, 0x68);};
template<> struct uuid<Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails> { define_guid(0x6968A7D4, 0xE3CA, 0x49CB, 0x8C, 0x87, 0x2C, 0x11, 0xCD, 0xFF, 0x96, 0x46);};
template<> struct uuid<Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails> { define_guid(0x38F5FA30, 0xC738, 0x4DA2, 0x90, 0x8C, 0x77, 0x5D, 0x83, 0xC3, 0x6A, 0xBB);};
template<> struct uuid<Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails2> { define_guid(0xCF16E06A, 0x7155, 0x40FE, 0xA9, 0xC2, 0x7B, 0xD2, 0x12, 0x7E, 0xF8, 0x53);};
template<> struct uuid<Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails> { define_guid(0xF3B82612, 0x46CF, 0x4E70, 0x8E, 0xD, 0x7B, 0x2E, 0x4, 0xAB, 0x49, 0x2B);};
template<> struct uuid<Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails2> { define_guid(0x168067E3, 0xC56F, 0x4EC7, 0xBE, 0xD1, 0xF7, 0x34, 0xE0, 0x8D, 0xE5, 0xB2);};
template<> struct uuid<Windows::Phone::Notification::Management::IEmailReadNotificationTriggerDetails> { define_guid(0xF5B7A087, 0x6F3, 0x4E3E, 0x8C, 0x42, 0x32, 0x5E, 0x67, 0x1, 0x4, 0x13);};
template<> struct uuid<Windows::Phone::Notification::Management::IPhoneLineDetails> { define_guid(0x47EB32DC, 0x33ED, 0x49B9, 0x99, 0x5C, 0xA2, 0x96, 0xBA, 0xC8, 0x2B, 0x77);};
template<> struct uuid<Windows::Phone::Notification::Management::IPhoneLineDetails2> { define_guid(0xB30CD77D, 0x147, 0x498C, 0x82, 0x41, 0xBF, 0xC, 0xAB, 0xC6, 0xA, 0x25);};
template<> struct uuid<Windows::Phone::Notification::Management::IPhoneCallDetails> { define_guid(0xC1B6F53, 0xF071, 0x483E, 0xBF, 0x33, 0xEB, 0xD4, 0x4B, 0x72, 0x44, 0x47);};
template<> struct uuid<Windows::Phone::Notification::Management::IPhoneNotificationTriggerDetails> { define_guid(0xCCC2FDF7, 0x9C3, 0x4118, 0x91, 0xBC, 0xCA, 0x63, 0x23, 0xA8, 0xD3, 0x83);};
template<> struct uuid<Windows::Phone::Notification::Management::ISpeedDialEntry> { define_guid(0x9240B6DB, 0x872C, 0x46DC, 0xB6, 0x2A, 0xBE, 0x45, 0x41, 0xB1, 0x66, 0xF8);};
template<> struct uuid<Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails> { define_guid(0x5BDDAA5D, 0x9F61, 0x4BF0, 0x9F, 0xEB, 0x10, 0x50, 0x2B, 0xC0, 0xB0, 0xC2);};
template<> struct uuid<Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails2> { define_guid(0xE715F9C0, 0x504D, 0x4C0F, 0xA6, 0xB3, 0xBC, 0xB9, 0x72, 0x2C, 0x6C, 0xDD);};
template<> struct uuid<Windows::Phone::Notification::Management::ICalendarChangedNotificationTriggerDetails> { define_guid(0x4B8A3BFC, 0x279D, 0x42AB, 0x9C, 0x68, 0x3E, 0x87, 0x97, 0x7B, 0xF2, 0x16);};
template<> struct uuid<Windows::Phone::Notification::Management::IToastNotificationTriggerDetails> { define_guid(0xC9314895, 0x4E6D, 0x4E9D, 0xAF, 0xEC, 0x9E, 0x92, 0x1B, 0x87, 0x5A, 0xE8);};
template<> struct uuid<Windows::Phone::Notification::Management::IToastNotificationTriggerDetails2> { define_guid(0x3E0479DD, 0xCAC4, 0x4F60, 0xAF, 0xA3, 0xB9, 0x25, 0xD9, 0xD8, 0x3C, 0x93);};
template<> struct uuid<Windows::Phone::Notification::Management::ICortanaTileNotificationTriggerDetails> { define_guid(0xDC0F01D5, 0x1489, 0x46BB, 0xB7, 0x3B, 0x7F, 0x90, 0x6, 0x7E, 0xCF, 0x27);};
template<> struct uuid<Windows::Phone::Notification::Management::IMediaMetadata> { define_guid(0x9B50DDF7, 0xBB6C, 0x4330, 0xB3, 0xCD, 0x7, 0x4, 0xA5, 0x4C, 0xDB, 0x80);};
template<> struct uuid<Windows::Phone::Notification::Management::IMediaControlsTriggerDetails> { define_guid(0xFAB4648B, 0xAE45, 0x4548, 0x91, 0xCA, 0x4A, 0xB0, 0x54, 0x8E, 0x33, 0xB5);};
template<> struct uuid<Windows::Phone::Notification::Management::IVolumeInfo> { define_guid(0x944DD118, 0x7704, 0x4481, 0xB9, 0x2E, 0xD3, 0xED, 0x3E, 0xCE, 0x63, 0x22);};
template<> struct uuid<Windows::Phone::Notification::Management::IAccessoryManager> { define_guid(0xD04A12C, 0x883D, 0x4AA7, 0xBC, 0xA7, 0xFA, 0x4B, 0xB8, 0xBF, 0xFE, 0xE6);};
template<> struct uuid<Windows::Phone::Notification::Management::IAccessoryManager2> { define_guid(0xBACAD44D, 0xD393, 0x46C6, 0xB8, 0xC, 0x15, 0xFD, 0xF4, 0x4D, 0x53, 0x86);};
template<> struct uuid<Windows::Phone::Notification::Management::IAccessoryManager3> { define_guid(0x81F75137, 0xEDC7, 0x47E0, 0xB2, 0xF7, 0x7E, 0x57, 0x7C, 0x83, 0x3F, 0x7D);};

// types

namespace Windows { namespace Phone { namespace Notification { namespace Management {

// ITextResponse
struct ITextResponse_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_Content(HSTRING *value);
};
template<typename X> struct ITextResponse_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITextResponse_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Content;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ITextResponse_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
	};
	ITextResponse_adaptor() {}
};
template<typename X> struct adapt<ITextResponse, X> : Windows::Phone::Notification::Management::ITextResponse_adaptor<X> { typedef adapt ITextResponse; };
struct ITextResponse : ITextResponse_raw, generate<ITextResponse> {};

// TextResponse
template<typename X> struct statics<TextResponse, X> : X {
	typedef typename X::root_type TextResponse;
};
struct TextResponse : generate<TextResponse> {};

// IAppNotificationInfo
struct IAppNotificationInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
};
template<typename X> struct IAppNotificationInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppNotificationInfo_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppNotificationInfo_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	IAppNotificationInfo_adaptor() {}
};
template<typename X> struct adapt<IAppNotificationInfo, X> : Windows::Phone::Notification::Management::IAppNotificationInfo_adaptor<X> { typedef adapt IAppNotificationInfo; };
struct IAppNotificationInfo : IAppNotificationInfo_raw, generate<IAppNotificationInfo> {};

// AppNotificationInfo
template<typename X> struct statics<AppNotificationInfo, X> : X {
	typedef typename X::root_type AppNotificationInfo;
};
struct AppNotificationInfo : generate<AppNotificationInfo> {};

// IEmailAccountInfo
struct IEmailAccountInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_IsNotificationEnabled(bool *value);
};
template<typename X> struct IEmailAccountInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailAccountInfo_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailAccountInfo_adaptor::IsNotificationEnabled)->_get_IsNotificationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsNotificationEnabled;
	};
	IEmailAccountInfo_adaptor() {}
};
template<typename X> struct adapt<IEmailAccountInfo, X> : Windows::Phone::Notification::Management::IEmailAccountInfo_adaptor<X> { typedef adapt IEmailAccountInfo; };
struct IEmailAccountInfo : IEmailAccountInfo_raw, generate<IEmailAccountInfo> {};

// EmailAccountInfo
template<typename X> struct statics<EmailAccountInfo, X> : X {
	typedef typename X::root_type EmailAccountInfo;
};
struct EmailAccountInfo : generate<EmailAccountInfo> {};

// IEmailFolderInfo
struct IEmailFolderInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_IsNotificationEnabled(bool *value);
};
template<typename X> struct IEmailFolderInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailFolderInfo_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailFolderInfo_adaptor::IsNotificationEnabled)->_get_IsNotificationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsNotificationEnabled;
	};
	IEmailFolderInfo_adaptor() {}
};
template<typename X> struct adapt<IEmailFolderInfo, X> : Windows::Phone::Notification::Management::IEmailFolderInfo_adaptor<X> { typedef adapt IEmailFolderInfo; };
struct IEmailFolderInfo : IEmailFolderInfo_raw, generate<IEmailFolderInfo> {};

// EmailFolderInfo
template<typename X> struct statics<EmailFolderInfo, X> : X {
	typedef typename X::root_type EmailFolderInfo;
};
struct EmailFolderInfo : generate<EmailFolderInfo> {};

// IBinaryId
struct IBinaryId_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned char *value);
	virtual STDMETHODIMP _get_Length(unsigned *value);
};
template<typename X> struct IBinaryId_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IBinaryId_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Id;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBinaryId_adaptor::Length)->_get_Length(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Length;
	};
	IBinaryId_adaptor() {}
};
template<typename X> struct adapt<IBinaryId, X> : Windows::Phone::Notification::Management::IBinaryId_adaptor<X> { typedef adapt IBinaryId; };
struct IBinaryId : IBinaryId_raw, generate<IBinaryId> {};

// BinaryId
template<typename X> struct statics<BinaryId, X> : X {
	typedef typename X::root_type BinaryId;
};
struct BinaryId : generate<BinaryId> {};

// IAccessoryNotificationTriggerDetails
struct IAccessoryNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_TimeCreated(Foundation::DateTime *value) = 0;
	virtual STDMETHODIMP _get_AppDisplayName(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_AppId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_AccessoryNotificationType(Management::AccessoryNotificationType *value) = 0;
	virtual STDMETHODIMP _get_StartedProcessing(bool *value) = 0;
	virtual STDMETHODIMP _put_StartedProcessing(bool value) = 0;
};
template<typename X> struct IAccessoryNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			Management::AccessoryNotificationType get() { Management::AccessoryNotificationType value; hrcheck(enc(&IAccessoryNotificationTriggerDetails_adaptor::AccessoryNotificationType)->_get_AccessoryNotificationType(&value)); return value; }
			Management::AccessoryNotificationType operator()() { return get(); }
			operator Management::AccessoryNotificationType () { return get(); }
		} AccessoryNotificationType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAccessoryNotificationTriggerDetails_adaptor::AppDisplayName)->_get_AppDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppDisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAccessoryNotificationTriggerDetails_adaptor::AppId)->_get_AppId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAccessoryNotificationTriggerDetails_adaptor::StartedProcessing)->_get_StartedProcessing(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAccessoryNotificationTriggerDetails_adaptor::StartedProcessing)->_put_StartedProcessing(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} StartedProcessing;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAccessoryNotificationTriggerDetails_adaptor::TimeCreated)->_get_TimeCreated(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} TimeCreated;
	};
	IAccessoryNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IAccessoryNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails_adaptor<X> { typedef adapt IAccessoryNotificationTriggerDetails; };
template<typename X> struct IAccessoryNotificationTriggerDetails_unadaptor : X {
	STDMETHODIMP _get_TimeCreated(Foundation::DateTime *value) { return hrtry([&, this] { get_prop(value, TimeCreated); }); }
	STDMETHODIMP _get_AppDisplayName(HSTRING *value) { return hrtry([&, this] { get_prop(value, AppDisplayName); }); }
	STDMETHODIMP _get_AppId(HSTRING *value) { return hrtry([&, this] { get_prop(value, AppId); }); }
	STDMETHODIMP _get_AccessoryNotificationType(Management::AccessoryNotificationType *value) { return hrtry([&, this] { get_prop(value, AccessoryNotificationType); }); }
	STDMETHODIMP _get_StartedProcessing(bool *value) { return hrtry([&, this] { get_prop(value, StartedProcessing); }); }
	STDMETHODIMP _put_StartedProcessing(bool value) { return hrtry([&, this] { put_prop(value, StartedProcessing); }); }
};
template<typename X> struct unadapt<IAccessoryNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IAccessoryNotificationTriggerDetails_unadaptor<X> {};
struct IAccessoryNotificationTriggerDetails : IAccessoryNotificationTriggerDetails_raw, generate<IAccessoryNotificationTriggerDetails> {};

// IAlarmNotificationTriggerDetails
struct IAlarmNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_AlarmId(Platform::Guid *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_ReminderState(Management::ReminderState *value);
};
template<typename X> struct IAlarmNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IAlarmNotificationTriggerDetails_adaptor::AlarmId)->_get_AlarmId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} AlarmId;
		struct : property {
			Management::ReminderState get() { Management::ReminderState value; hrcheck(enc(&IAlarmNotificationTriggerDetails_adaptor::ReminderState)->_get_ReminderState(&value)); return value; }
			Management::ReminderState operator()() { return get(); }
			operator Management::ReminderState () { return get(); }
		} ReminderState;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAlarmNotificationTriggerDetails_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAlarmNotificationTriggerDetails_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IAlarmNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IAlarmNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails_adaptor<X> { typedef adapt IAlarmNotificationTriggerDetails; };
struct IAlarmNotificationTriggerDetails : IAlarmNotificationTriggerDetails_raw, generate<IAlarmNotificationTriggerDetails> {};

// IAlarmNotificationTriggerDetails2
struct IAlarmNotificationTriggerDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_InstanceId(HSTRING *value);
};
template<typename X> struct IAlarmNotificationTriggerDetails2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAlarmNotificationTriggerDetails2_adaptor::InstanceId)->_get_InstanceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} InstanceId;
	};
	IAlarmNotificationTriggerDetails2_adaptor() {}
};
template<typename X> struct adapt<IAlarmNotificationTriggerDetails2, X> : Windows::Phone::Notification::Management::IAlarmNotificationTriggerDetails2_adaptor<X> { typedef adapt IAlarmNotificationTriggerDetails2; };
struct IAlarmNotificationTriggerDetails2 : IAlarmNotificationTriggerDetails2_raw, generate<IAlarmNotificationTriggerDetails2> {};

// AlarmNotificationTriggerDetails
template<typename X> struct statics<AlarmNotificationTriggerDetails, X> : X {
	typedef typename X::root_type AlarmNotificationTriggerDetails;
};
struct AlarmNotificationTriggerDetails : generate<AlarmNotificationTriggerDetails> {};

// IEmailNotificationTriggerDetails
struct IEmailNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_AccountName(HSTRING *value);
	virtual STDMETHODIMP _get_ParentFolderName(HSTRING *value);
	virtual STDMETHODIMP _get_SenderName(HSTRING *value);
	virtual STDMETHODIMP _get_SenderAddress(HSTRING *value);
	virtual STDMETHODIMP _get_EmailMessage(Windows::ApplicationModel::Email::EmailMessage* *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
};
template<typename X> struct IEmailNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailNotificationTriggerDetails_adaptor::AccountName)->_get_AccountName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccountName;
		struct : property {
			ptr<Windows::ApplicationModel::Email::EmailMessage> get() { Windows::ApplicationModel::Email::EmailMessage* value; hrcheck(enc(&IEmailNotificationTriggerDetails_adaptor::EmailMessage)->_get_EmailMessage(&value)); return from_abi(value); }
			ptr<Windows::ApplicationModel::Email::EmailMessage> operator()() { return get(); }
			operator ptr<Windows::ApplicationModel::Email::EmailMessage> () { return get(); }
			ptr<Windows::ApplicationModel::Email::EmailMessage> operator->() { return get(); }
		} EmailMessage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailNotificationTriggerDetails_adaptor::ParentFolderName)->_get_ParentFolderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ParentFolderName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailNotificationTriggerDetails_adaptor::SenderAddress)->_get_SenderAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SenderAddress;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailNotificationTriggerDetails_adaptor::SenderName)->_get_SenderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SenderName;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IEmailNotificationTriggerDetails_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IEmailNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IEmailNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails_adaptor<X> { typedef adapt IEmailNotificationTriggerDetails; };
struct IEmailNotificationTriggerDetails : IEmailNotificationTriggerDetails_raw, generate<IEmailNotificationTriggerDetails> {};

// IEmailNotificationTriggerDetails2
struct IEmailNotificationTriggerDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_MessageEntryId(BinaryId* *value);
};
template<typename X> struct IEmailNotificationTriggerDetails2_adaptor : X {
	union {
		struct : property {
			ptr<BinaryId> get() { BinaryId* value; hrcheck(enc(&IEmailNotificationTriggerDetails2_adaptor::MessageEntryId)->_get_MessageEntryId(&value)); return from_abi(value); }
			ptr<BinaryId> operator()() { return get(); }
			operator ptr<BinaryId> () { return get(); }
			ptr<BinaryId> operator->() { return get(); }
		} MessageEntryId;
	};
	IEmailNotificationTriggerDetails2_adaptor() {}
};
template<typename X> struct adapt<IEmailNotificationTriggerDetails2, X> : Windows::Phone::Notification::Management::IEmailNotificationTriggerDetails2_adaptor<X> { typedef adapt IEmailNotificationTriggerDetails2; };
struct IEmailNotificationTriggerDetails2 : IEmailNotificationTriggerDetails2_raw, generate<IEmailNotificationTriggerDetails2> {};

// IEmailReadNotificationTriggerDetails
struct IEmailReadNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_AccountName(HSTRING *value);
	virtual STDMETHODIMP _get_ParentFolderName(HSTRING *value);
	virtual STDMETHODIMP _get_MessageEntryId(BinaryId* *value);
	virtual STDMETHODIMP _get_IsRead(bool *value);
};
template<typename X> struct IEmailReadNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailReadNotificationTriggerDetails_adaptor::AccountName)->_get_AccountName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccountName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IEmailReadNotificationTriggerDetails_adaptor::IsRead)->_get_IsRead(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsRead;
		struct : property {
			ptr<BinaryId> get() { BinaryId* value; hrcheck(enc(&IEmailReadNotificationTriggerDetails_adaptor::MessageEntryId)->_get_MessageEntryId(&value)); return from_abi(value); }
			ptr<BinaryId> operator()() { return get(); }
			operator ptr<BinaryId> () { return get(); }
			ptr<BinaryId> operator->() { return get(); }
		} MessageEntryId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEmailReadNotificationTriggerDetails_adaptor::ParentFolderName)->_get_ParentFolderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ParentFolderName;
	};
	IEmailReadNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IEmailReadNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IEmailReadNotificationTriggerDetails_adaptor<X> { typedef adapt IEmailReadNotificationTriggerDetails; };
struct IEmailReadNotificationTriggerDetails : IEmailReadNotificationTriggerDetails_raw, generate<IEmailReadNotificationTriggerDetails> {};

// EmailReadNotificationTriggerDetails
template<typename X> struct statics<EmailReadNotificationTriggerDetails, X> : X {
	typedef typename X::root_type EmailReadNotificationTriggerDetails;
};
struct EmailReadNotificationTriggerDetails : generate<EmailReadNotificationTriggerDetails> {};

// EmailNotificationTriggerDetails
template<typename X> struct statics<EmailNotificationTriggerDetails, X> : X {
	typedef typename X::root_type EmailNotificationTriggerDetails;
};
struct EmailNotificationTriggerDetails : generate<EmailNotificationTriggerDetails> {};

// IPhoneLineDetails
struct IPhoneLineDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_LineId(Platform::Guid *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_LineNumber(HSTRING *value);
	virtual STDMETHODIMP _get_DefaultOutgoingLine(bool *value);
	virtual STDMETHODIMP _get_VoicemailCount(unsigned *value);
	virtual STDMETHODIMP _get_RegistrationState(PhoneLineRegistrationState *value);
};
template<typename X> struct IPhoneLineDetails_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneLineDetails_adaptor::DefaultOutgoingLine)->_get_DefaultOutgoingLine(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} DefaultOutgoingLine;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneLineDetails_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IPhoneLineDetails_adaptor::LineId)->_get_LineId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} LineId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneLineDetails_adaptor::LineNumber)->_get_LineNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LineNumber;
		struct : property {
			PhoneLineRegistrationState get() { PhoneLineRegistrationState value; hrcheck(enc(&IPhoneLineDetails_adaptor::RegistrationState)->_get_RegistrationState(&value)); return value; }
			PhoneLineRegistrationState operator()() { return get(); }
			operator PhoneLineRegistrationState () { return get(); }
		} RegistrationState;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhoneLineDetails_adaptor::VoicemailCount)->_get_VoicemailCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VoicemailCount;
	};
	IPhoneLineDetails_adaptor() {}
};
template<typename X> struct adapt<IPhoneLineDetails, X> : Windows::Phone::Notification::Management::IPhoneLineDetails_adaptor<X> { typedef adapt IPhoneLineDetails; };
struct IPhoneLineDetails : IPhoneLineDetails_raw, generate<IPhoneLineDetails> {};

// IPhoneLineDetails2
struct IPhoneLineDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_MissedCallCount(unsigned *value);
};
template<typename X> struct IPhoneLineDetails2_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhoneLineDetails2_adaptor::MissedCallCount)->_get_MissedCallCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MissedCallCount;
	};
	IPhoneLineDetails2_adaptor() {}
};
template<typename X> struct adapt<IPhoneLineDetails2, X> : Windows::Phone::Notification::Management::IPhoneLineDetails2_adaptor<X> { typedef adapt IPhoneLineDetails2; };
struct IPhoneLineDetails2 : IPhoneLineDetails2_raw, generate<IPhoneLineDetails2> {};

// PhoneLineDetails
template<typename X> struct statics<PhoneLineDetails, X> : X {
	typedef typename X::root_type PhoneLineDetails;
};
struct PhoneLineDetails : generate<PhoneLineDetails> {};

// IPhoneCallDetails
struct IPhoneCallDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_PhoneLine(Platform::Guid *value);
	virtual STDMETHODIMP _get_CallId(unsigned *value);
	virtual STDMETHODIMP _get_CallTransport(PhoneCallTransport *value);
	virtual STDMETHODIMP _get_CallMediaType(PhoneMediaType *value);
	virtual STDMETHODIMP _get_CallDirection(PhoneCallDirection *value);
	virtual STDMETHODIMP _get_State(PhoneCallState *value);
	virtual STDMETHODIMP _get_ConferenceCallId(unsigned *value);
	virtual STDMETHODIMP _get_StartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_EndTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_PhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _get_ContactName(HSTRING *value);
	virtual STDMETHODIMP _get_PresetTextResponses(Foundation::Collections::IVectorView<TextResponse*>* *value);
};
template<typename X> struct IPhoneCallDetails_adaptor : X {
	union {
		struct : property {
			PhoneCallDirection get() { PhoneCallDirection value; hrcheck(enc(&IPhoneCallDetails_adaptor::CallDirection)->_get_CallDirection(&value)); return value; }
			PhoneCallDirection operator()() { return get(); }
			operator PhoneCallDirection () { return get(); }
		} CallDirection;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhoneCallDetails_adaptor::CallId)->_get_CallId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CallId;
		struct : property {
			PhoneMediaType get() { PhoneMediaType value; hrcheck(enc(&IPhoneCallDetails_adaptor::CallMediaType)->_get_CallMediaType(&value)); return value; }
			PhoneMediaType operator()() { return get(); }
			operator PhoneMediaType () { return get(); }
		} CallMediaType;
		struct : property {
			PhoneCallTransport get() { PhoneCallTransport value; hrcheck(enc(&IPhoneCallDetails_adaptor::CallTransport)->_get_CallTransport(&value)); return value; }
			PhoneCallTransport operator()() { return get(); }
			operator PhoneCallTransport () { return get(); }
		} CallTransport;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhoneCallDetails_adaptor::ConferenceCallId)->_get_ConferenceCallId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ConferenceCallId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallDetails_adaptor::ContactName)->_get_ContactName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ContactName;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPhoneCallDetails_adaptor::EndTime)->_get_EndTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} EndTime;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IPhoneCallDetails_adaptor::PhoneLine)->_get_PhoneLine(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} PhoneLine;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallDetails_adaptor::PhoneNumber)->_get_PhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhoneNumber;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<TextResponse>>> get() { Foundation::Collections::IVectorView<TextResponse*>* value; hrcheck(enc(&IPhoneCallDetails_adaptor::PresetTextResponses)->_get_PresetTextResponses(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<TextResponse>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<TextResponse>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<TextResponse>>> operator->() { return get(); }
		} PresetTextResponses;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPhoneCallDetails_adaptor::StartTime)->_get_StartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} StartTime;
		struct : property {
			PhoneCallState get() { PhoneCallState value; hrcheck(enc(&IPhoneCallDetails_adaptor::State)->_get_State(&value)); return value; }
			PhoneCallState operator()() { return get(); }
			operator PhoneCallState () { return get(); }
		} State;
	};
	IPhoneCallDetails_adaptor() {}
};
template<typename X> struct adapt<IPhoneCallDetails, X> : Windows::Phone::Notification::Management::IPhoneCallDetails_adaptor<X> { typedef adapt IPhoneCallDetails; };
struct IPhoneCallDetails : IPhoneCallDetails_raw, generate<IPhoneCallDetails> {};

// PhoneCallDetails
template<typename X> struct statics<PhoneCallDetails, X> : X {
	typedef typename X::root_type PhoneCallDetails;
};
struct PhoneCallDetails : generate<PhoneCallDetails> {};

// IPhoneNotificationTriggerDetails
struct IPhoneNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_PhoneNotificationType(Management::PhoneNotificationType *value);
	virtual STDMETHODIMP _get_CallDetails(PhoneCallDetails* *value);
	virtual STDMETHODIMP _get_PhoneLineChangedId(Platform::Guid *value);
};
template<typename X> struct IPhoneNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<PhoneCallDetails> get() { PhoneCallDetails* value; hrcheck(enc(&IPhoneNotificationTriggerDetails_adaptor::CallDetails)->_get_CallDetails(&value)); return from_abi(value); }
			ptr<PhoneCallDetails> operator()() { return get(); }
			operator ptr<PhoneCallDetails> () { return get(); }
			ptr<PhoneCallDetails> operator->() { return get(); }
		} CallDetails;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IPhoneNotificationTriggerDetails_adaptor::PhoneLineChangedId)->_get_PhoneLineChangedId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} PhoneLineChangedId;
		struct : property {
			Management::PhoneNotificationType get() { Management::PhoneNotificationType value; hrcheck(enc(&IPhoneNotificationTriggerDetails_adaptor::PhoneNotificationType)->_get_PhoneNotificationType(&value)); return value; }
			Management::PhoneNotificationType operator()() { return get(); }
			operator Management::PhoneNotificationType () { return get(); }
		} PhoneNotificationType;
	};
	IPhoneNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IPhoneNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IPhoneNotificationTriggerDetails_adaptor<X> { typedef adapt IPhoneNotificationTriggerDetails; };
struct IPhoneNotificationTriggerDetails : IPhoneNotificationTriggerDetails_raw, generate<IPhoneNotificationTriggerDetails> {};

// PhoneNotificationTriggerDetails
template<typename X> struct statics<PhoneNotificationTriggerDetails, X> : X {
	typedef typename X::root_type PhoneNotificationTriggerDetails;
};
struct PhoneNotificationTriggerDetails : generate<PhoneNotificationTriggerDetails> {};

// ISpeedDialEntry
struct ISpeedDialEntry_raw : IInspectable {
	virtual STDMETHODIMP _get_PhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _get_NumberType(HSTRING *value);
	virtual STDMETHODIMP _get_ContactName(HSTRING *value);
};
template<typename X> struct ISpeedDialEntry_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISpeedDialEntry_adaptor::ContactName)->_get_ContactName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ContactName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISpeedDialEntry_adaptor::NumberType)->_get_NumberType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NumberType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISpeedDialEntry_adaptor::PhoneNumber)->_get_PhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhoneNumber;
	};
	ISpeedDialEntry_adaptor() {}
};
template<typename X> struct adapt<ISpeedDialEntry, X> : Windows::Phone::Notification::Management::ISpeedDialEntry_adaptor<X> { typedef adapt ISpeedDialEntry; };
struct ISpeedDialEntry : ISpeedDialEntry_raw, generate<ISpeedDialEntry> {};

// SpeedDialEntry
template<typename X> struct statics<SpeedDialEntry, X> : X {
	typedef typename X::root_type SpeedDialEntry;
};
struct SpeedDialEntry : generate<SpeedDialEntry> {};

// IReminderNotificationTriggerDetails
struct IReminderNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_ReminderId(Platform::Guid *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_Details(HSTRING *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Appointment(Windows::ApplicationModel::Appointments::Appointment* *value);
	virtual STDMETHODIMP _get_ReminderState(Management::ReminderState *value);
};
template<typename X> struct IReminderNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Windows::ApplicationModel::Appointments::Appointment> get() { Windows::ApplicationModel::Appointments::Appointment* value; hrcheck(enc(&IReminderNotificationTriggerDetails_adaptor::Appointment)->_get_Appointment(&value)); return from_abi(value); }
			ptr<Windows::ApplicationModel::Appointments::Appointment> operator()() { return get(); }
			operator ptr<Windows::ApplicationModel::Appointments::Appointment> () { return get(); }
			ptr<Windows::ApplicationModel::Appointments::Appointment> operator->() { return get(); }
		} Appointment;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IReminderNotificationTriggerDetails_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IReminderNotificationTriggerDetails_adaptor::Details)->_get_Details(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Details;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IReminderNotificationTriggerDetails_adaptor::ReminderId)->_get_ReminderId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} ReminderId;
		struct : property {
			Management::ReminderState get() { Management::ReminderState value; hrcheck(enc(&IReminderNotificationTriggerDetails_adaptor::ReminderState)->_get_ReminderState(&value)); return value; }
			Management::ReminderState operator()() { return get(); }
			operator Management::ReminderState () { return get(); }
		} ReminderState;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IReminderNotificationTriggerDetails_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IReminderNotificationTriggerDetails_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IReminderNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IReminderNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails_adaptor<X> { typedef adapt IReminderNotificationTriggerDetails; };
struct IReminderNotificationTriggerDetails : IReminderNotificationTriggerDetails_raw, generate<IReminderNotificationTriggerDetails> {};

// IReminderNotificationTriggerDetails2
struct IReminderNotificationTriggerDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_InstanceId(HSTRING *value);
};
template<typename X> struct IReminderNotificationTriggerDetails2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IReminderNotificationTriggerDetails2_adaptor::InstanceId)->_get_InstanceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} InstanceId;
	};
	IReminderNotificationTriggerDetails2_adaptor() {}
};
template<typename X> struct adapt<IReminderNotificationTriggerDetails2, X> : Windows::Phone::Notification::Management::IReminderNotificationTriggerDetails2_adaptor<X> { typedef adapt IReminderNotificationTriggerDetails2; };
struct IReminderNotificationTriggerDetails2 : IReminderNotificationTriggerDetails2_raw, generate<IReminderNotificationTriggerDetails2> {};

// ReminderNotificationTriggerDetails
template<typename X> struct statics<ReminderNotificationTriggerDetails, X> : X {
	typedef typename X::root_type ReminderNotificationTriggerDetails;
};
struct ReminderNotificationTriggerDetails : generate<ReminderNotificationTriggerDetails> {};

// ICalendarChangedNotificationTriggerDetails
struct ICalendarChangedNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_EventType(CalendarChangedEvent *value);
	virtual STDMETHODIMP _get_ItemId(HSTRING *value);
};
template<typename X> struct ICalendarChangedNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			CalendarChangedEvent get() { CalendarChangedEvent value; hrcheck(enc(&ICalendarChangedNotificationTriggerDetails_adaptor::EventType)->_get_EventType(&value)); return value; }
			CalendarChangedEvent operator()() { return get(); }
			operator CalendarChangedEvent () { return get(); }
		} EventType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICalendarChangedNotificationTriggerDetails_adaptor::ItemId)->_get_ItemId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ItemId;
	};
	ICalendarChangedNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<ICalendarChangedNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::ICalendarChangedNotificationTriggerDetails_adaptor<X> { typedef adapt ICalendarChangedNotificationTriggerDetails; };
struct ICalendarChangedNotificationTriggerDetails : ICalendarChangedNotificationTriggerDetails_raw, generate<ICalendarChangedNotificationTriggerDetails> {};

// CalendarChangedNotificationTriggerDetails
template<typename X> struct statics<CalendarChangedNotificationTriggerDetails, X> : X {
	typedef typename X::root_type CalendarChangedNotificationTriggerDetails;
};
struct CalendarChangedNotificationTriggerDetails : generate<CalendarChangedNotificationTriggerDetails> {};

// IToastNotificationTriggerDetails
struct IToastNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Text1(HSTRING *value);
	virtual STDMETHODIMP _get_Text2(HSTRING *value);
	virtual STDMETHODIMP _get_Text3(HSTRING *value);
	virtual STDMETHODIMP _get_Text4(HSTRING *value);
	virtual STDMETHODIMP _get_SuppressPopup(bool *value);
};
template<typename X> struct IToastNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IToastNotificationTriggerDetails_adaptor::SuppressPopup)->_get_SuppressPopup(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SuppressPopup;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotificationTriggerDetails_adaptor::Text1)->_get_Text1(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text1;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotificationTriggerDetails_adaptor::Text2)->_get_Text2(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text2;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotificationTriggerDetails_adaptor::Text3)->_get_Text3(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text3;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotificationTriggerDetails_adaptor::Text4)->_get_Text4(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text4;
	};
	IToastNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IToastNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::IToastNotificationTriggerDetails_adaptor<X> { typedef adapt IToastNotificationTriggerDetails; };
struct IToastNotificationTriggerDetails : IToastNotificationTriggerDetails_raw, generate<IToastNotificationTriggerDetails> {};

// IToastNotificationTriggerDetails2
struct IToastNotificationTriggerDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_InstanceId(HSTRING *value);
};
template<typename X> struct IToastNotificationTriggerDetails2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IToastNotificationTriggerDetails2_adaptor::InstanceId)->_get_InstanceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} InstanceId;
	};
	IToastNotificationTriggerDetails2_adaptor() {}
};
template<typename X> struct adapt<IToastNotificationTriggerDetails2, X> : Windows::Phone::Notification::Management::IToastNotificationTriggerDetails2_adaptor<X> { typedef adapt IToastNotificationTriggerDetails2; };
struct IToastNotificationTriggerDetails2 : IToastNotificationTriggerDetails2_raw, generate<IToastNotificationTriggerDetails2> {};

// ToastNotificationTriggerDetails
template<typename X> struct statics<ToastNotificationTriggerDetails, X> : X {
	typedef typename X::root_type ToastNotificationTriggerDetails;
};
struct ToastNotificationTriggerDetails : generate<ToastNotificationTriggerDetails> {};

// ICortanaTileNotificationTriggerDetails
struct ICortanaTileNotificationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_TileId(HSTRING *value);
	virtual STDMETHODIMP _get_Content(HSTRING *value);
	virtual STDMETHODIMP _get_LargeContent1(HSTRING *value);
	virtual STDMETHODIMP _get_LargeContent2(HSTRING *value);
	virtual STDMETHODIMP _get_EmphasizedText(HSTRING *value);
	virtual STDMETHODIMP _get_NonWrappedSmallContent1(HSTRING *value);
	virtual STDMETHODIMP _get_NonWrappedSmallContent2(HSTRING *value);
	virtual STDMETHODIMP _get_NonWrappedSmallContent3(HSTRING *value);
	virtual STDMETHODIMP _get_NonWrappedSmallContent4(HSTRING *value);
	virtual STDMETHODIMP _get_Source(HSTRING *value);
};
template<typename X> struct ICortanaTileNotificationTriggerDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Content;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::EmphasizedText)->_get_EmphasizedText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} EmphasizedText;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::LargeContent1)->_get_LargeContent1(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LargeContent1;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::LargeContent2)->_get_LargeContent2(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LargeContent2;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::NonWrappedSmallContent1)->_get_NonWrappedSmallContent1(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NonWrappedSmallContent1;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::NonWrappedSmallContent2)->_get_NonWrappedSmallContent2(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NonWrappedSmallContent2;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::NonWrappedSmallContent3)->_get_NonWrappedSmallContent3(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NonWrappedSmallContent3;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::NonWrappedSmallContent4)->_get_NonWrappedSmallContent4(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NonWrappedSmallContent4;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Source;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICortanaTileNotificationTriggerDetails_adaptor::TileId)->_get_TileId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TileId;
	};
	ICortanaTileNotificationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<ICortanaTileNotificationTriggerDetails, X> : Windows::Phone::Notification::Management::ICortanaTileNotificationTriggerDetails_adaptor<X> { typedef adapt ICortanaTileNotificationTriggerDetails; };
struct ICortanaTileNotificationTriggerDetails : ICortanaTileNotificationTriggerDetails_raw, generate<ICortanaTileNotificationTriggerDetails> {};

// CortanaTileNotificationTriggerDetails
template<typename X> struct statics<CortanaTileNotificationTriggerDetails, X> : X {
	typedef typename X::root_type CortanaTileNotificationTriggerDetails;
};
struct CortanaTileNotificationTriggerDetails : generate<CortanaTileNotificationTriggerDetails> {};

// IMediaMetadata
struct IMediaMetadata_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Subtitle(HSTRING *value);
	virtual STDMETHODIMP _get_Artist(HSTRING *value);
	virtual STDMETHODIMP _get_Album(HSTRING *value);
	virtual STDMETHODIMP _get_Track(unsigned *value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::IRandomAccessStreamReference* *value);
};
template<typename X> struct IMediaMetadata_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaMetadata_adaptor::Album)->_get_Album(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Album;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaMetadata_adaptor::Artist)->_get_Artist(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Artist;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaMetadata_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaMetadata_adaptor::Subtitle)->_get_Subtitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subtitle;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IMediaMetadata_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} Thumbnail;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaMetadata_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaMetadata_adaptor::Track)->_get_Track(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Track;
	};
	IMediaMetadata_adaptor() {}
};
template<typename X> struct adapt<IMediaMetadata, X> : Windows::Phone::Notification::Management::IMediaMetadata_adaptor<X> { typedef adapt IMediaMetadata; };
struct IMediaMetadata : IMediaMetadata_raw, generate<IMediaMetadata> {};

// MediaMetadata
template<typename X> struct statics<MediaMetadata, X> : X {
	typedef typename X::root_type MediaMetadata;
};
struct MediaMetadata : generate<MediaMetadata> {};

// IMediaControlsTriggerDetails
struct IMediaControlsTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_PlaybackStatus(Management::PlaybackStatus *value);
	virtual STDMETHODIMP _get_MediaMetadata(Management::MediaMetadata* *value);
};
template<typename X> struct IMediaControlsTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Management::MediaMetadata> get() { Management::MediaMetadata* value; hrcheck(enc(&IMediaControlsTriggerDetails_adaptor::MediaMetadata)->_get_MediaMetadata(&value)); return from_abi(value); }
			ptr<Management::MediaMetadata> operator()() { return get(); }
			operator ptr<Management::MediaMetadata> () { return get(); }
			ptr<Management::MediaMetadata> operator->() { return get(); }
		} MediaMetadata;
		struct : property {
			Management::PlaybackStatus get() { Management::PlaybackStatus value; hrcheck(enc(&IMediaControlsTriggerDetails_adaptor::PlaybackStatus)->_get_PlaybackStatus(&value)); return value; }
			Management::PlaybackStatus operator()() { return get(); }
			operator Management::PlaybackStatus () { return get(); }
		} PlaybackStatus;
	};
	IMediaControlsTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IMediaControlsTriggerDetails, X> : Windows::Phone::Notification::Management::IMediaControlsTriggerDetails_adaptor<X> { typedef adapt IMediaControlsTriggerDetails; };
struct IMediaControlsTriggerDetails : IMediaControlsTriggerDetails_raw, generate<IMediaControlsTriggerDetails> {};

// MediaControlsTriggerDetails
template<typename X> struct statics<MediaControlsTriggerDetails, X> : X {
	typedef typename X::root_type MediaControlsTriggerDetails;
};
struct MediaControlsTriggerDetails : generate<MediaControlsTriggerDetails> {};

// IVolumeInfo
struct IVolumeInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_SystemVolume(unsigned *value);
	virtual STDMETHODIMP _get_CallVolume(unsigned *value);
	virtual STDMETHODIMP _get_MediaVolume(unsigned *value);
	virtual STDMETHODIMP _get_IsMuted(bool *value);
	virtual STDMETHODIMP _get_IsVibrateEnabled(VibrateState *value);
};
template<typename X> struct IVolumeInfo_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVolumeInfo_adaptor::CallVolume)->_get_CallVolume(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CallVolume;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IVolumeInfo_adaptor::IsMuted)->_get_IsMuted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMuted;
		struct : property {
			VibrateState get() { VibrateState value; hrcheck(enc(&IVolumeInfo_adaptor::IsVibrateEnabled)->_get_IsVibrateEnabled(&value)); return value; }
			VibrateState operator()() { return get(); }
			operator VibrateState () { return get(); }
		} IsVibrateEnabled;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVolumeInfo_adaptor::MediaVolume)->_get_MediaVolume(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MediaVolume;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVolumeInfo_adaptor::SystemVolume)->_get_SystemVolume(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SystemVolume;
	};
	IVolumeInfo_adaptor() {}
};
template<typename X> struct adapt<IVolumeInfo, X> : Windows::Phone::Notification::Management::IVolumeInfo_adaptor<X> { typedef adapt IVolumeInfo; };
struct IVolumeInfo : IVolumeInfo_raw, generate<IVolumeInfo> {};

// VolumeInfo
template<typename X> struct statics<VolumeInfo, X> : X {
	typedef typename X::root_type VolumeInfo;
};
struct VolumeInfo : generate<VolumeInfo> {};

// IAccessoryManager
struct IAccessoryManager : IInspectable {
	virtual STDMETHODIMP _RegisterAccessoryApp(HSTRING *triggerId);
	virtual STDMETHODIMP _GetNextTriggerDetails(IAccessoryNotificationTriggerDetails* *pDetails);
	virtual STDMETHODIMP _ProcessTriggerDetails(IAccessoryNotificationTriggerDetails* pDetails);
	virtual STDMETHODIMP _get_PhoneLineDetails(Foundation::Collections::IVectorView<Management::PhoneLineDetails*>* *ppvalue);
	virtual STDMETHODIMP _GetPhoneLineDetails(Platform::Guid phoneLine, Management::PhoneLineDetails* *ppdetails);
	virtual STDMETHODIMP _AcceptPhoneCall(unsigned phoneCallId);
	virtual STDMETHODIMP _AcceptPhoneCallOnEndpoint(unsigned phoneCallId, Management::PhoneCallAudioEndpoint endPoint);
	virtual STDMETHODIMP _AcceptPhoneCallWithVideo(unsigned phoneCallId);
	virtual STDMETHODIMP _AcceptPhoneCallWithVideoOnAudioEndpoint(unsigned phoneCallId, Management::PhoneCallAudioEndpoint endPoint);
	virtual STDMETHODIMP _RejectPhoneCall(unsigned phoneCallId);
	virtual STDMETHODIMP _RejectPhoneCallWithText(unsigned phoneCallId, unsigned textResponseID);
	virtual STDMETHODIMP _MakePhoneCall(Platform::Guid phoneLine, HSTRING phoneNumber);
	virtual STDMETHODIMP _MakePhoneCallOnAudioEndpoint(Platform::Guid phoneLine, HSTRING phoneNumber, Management::PhoneCallAudioEndpoint endPoint);
	virtual STDMETHODIMP _MakePhoneCallWithVideo(Platform::Guid phoneLine, HSTRING phoneNumber);
	virtual STDMETHODIMP _MakePhoneCallWithVideoOnAudioEndpoint(Platform::Guid phoneLine, HSTRING phoneNumber, Management::PhoneCallAudioEndpoint endPoint);
	virtual STDMETHODIMP _SwapPhoneCalls(unsigned phoneCallIdToHold, unsigned phoneCallIdOnHold);
	virtual STDMETHODIMP _HoldPhoneCall(unsigned phoneCallId, bool holdCall);
	virtual STDMETHODIMP _EndPhoneCall(unsigned phoneCallId);
	virtual STDMETHODIMP _put_PhoneMute(bool value);
	virtual STDMETHODIMP _get_PhoneMute(bool *value);
	virtual STDMETHODIMP _put_PhoneCallAudioEndpoint(Management::PhoneCallAudioEndpoint value);
	virtual STDMETHODIMP _get_PhoneCallAudioEndpoint(Management::PhoneCallAudioEndpoint *value);
	virtual STDMETHODIMP _SnoozeAlarm(Platform::Guid alarmId);
	virtual STDMETHODIMP _SnoozeAlarmForSpecifiedTime(Platform::Guid alarmId, Foundation::TimeSpan timeSpan);
	virtual STDMETHODIMP _DismissAlarm(Platform::Guid alarmId);
	virtual STDMETHODIMP _SnoozeReminder(Platform::Guid reminderId);
	virtual STDMETHODIMP _SnoozeReminderForSpecifiedTime(Platform::Guid reminderId, Foundation::TimeSpan timeSpan);
	virtual STDMETHODIMP _DismissReminder(Platform::Guid reminderId);
	virtual STDMETHODIMP _GetMediaMetadata(MediaMetadata* *ppMetadata);
	virtual STDMETHODIMP _get_MediaPlaybackCapabilities(PlaybackCapability *value);
	virtual STDMETHODIMP _get_MediaPlaybackStatus(PlaybackStatus *value);
	virtual STDMETHODIMP _PerformMediaPlaybackCommand(PlaybackCommand command);
	virtual STDMETHODIMP _get_DoNotDisturbEnabled(bool *value);
	virtual STDMETHODIMP _get_DrivingModeEnabled(bool *value);
	virtual STDMETHODIMP _get_BatterySaverState(bool *value);
	virtual STDMETHODIMP _GetApps(Foundation::Collections::IMapView<HSTRING, AppNotificationInfo*>* *returnValue);
	virtual STDMETHODIMP _EnableNotificationsForApplication(HSTRING appId);
	virtual STDMETHODIMP _DisableNotificationsForApplication(HSTRING appId);
	virtual STDMETHODIMP _IsNotificationEnabledForApplication(HSTRING appId, bool *enabled);
	virtual STDMETHODIMP _GetEnabledAccessoryNotificationTypes(int *enabledAccessoryNotificationTypes);
	virtual STDMETHODIMP _EnableAccessoryNotificationTypes(int accessoryNotificationTypes);
	virtual STDMETHODIMP _DisableAllAccessoryNotificationTypes();
	virtual STDMETHODIMP _GetUserConsent(bool *enabled);
	virtual STDMETHODIMP _GetAppIcon(HSTRING appId, Storage::Streams::IRandomAccessStreamReference* *returnValue);
};

// IAccessoryManager2
struct IAccessoryManager2 : IInspectable {
	virtual STDMETHODIMP _RingDevice();
	virtual STDMETHODIMP _get_SpeedDialList(Foundation::Collections::IVectorView<SpeedDialEntry*>* *ppvalue);
	virtual STDMETHODIMP _ClearToast(HSTRING instanceId);
	virtual STDMETHODIMP _get_IsPhonePinLocked(bool *pinLocked);
	virtual STDMETHODIMP _IncreaseVolume(int step);
	virtual STDMETHODIMP _DecreaseVolume(int step);
	virtual STDMETHODIMP _SetMute(bool mute);
	virtual STDMETHODIMP _SetRingerVibrate(bool ringer, bool vibrate);
	virtual STDMETHODIMP _get_VolumeInfo(Management::VolumeInfo* *ppVolume);
	virtual STDMETHODIMP _GetAllEmailAccounts(Foundation::Collections::IVectorView<EmailAccountInfo*>* *emailAccounts);
	virtual STDMETHODIMP _GetFolders(HSTRING emailAccount, Foundation::Collections::IVectorView<EmailFolderInfo*>* *folders);
	virtual STDMETHODIMP _EnableEmailNotificationEmailAccount(HSTRING emailAccount);
	virtual STDMETHODIMP _DisableEmailNotificationEmailAccount(HSTRING emailAccount);
	virtual STDMETHODIMP _EnableEmailNotificationFolderFilter(HSTRING emailAccount, Foundation::Collections::IVectorView<HSTRING>* folders);
	virtual STDMETHODIMP _UpdateEmailReadStatus(BinaryId* messageEntryId, bool isRead);
};

// IAccessoryManager3
struct IAccessoryManager3 : IInspectable {
	virtual STDMETHODIMP _SnoozeAlarmByInstanceId(HSTRING instanceId);
	virtual STDMETHODIMP _DismissAlarmByInstanceId(HSTRING instanceId);
	virtual STDMETHODIMP _SnoozeReminderByInstanceId(HSTRING instanceId);
	virtual STDMETHODIMP _DismissReminderByInstanceId(HSTRING instanceId);
};

// AccessoryManager
template<typename> struct AccessoryManager_statics {
	static struct _BatterySaverState : property {
		bool get() { bool value; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_BatterySaverState(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} BatterySaverState;
	static struct _DoNotDisturbEnabled : property {
		bool get() { bool value; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_DoNotDisturbEnabled(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} DoNotDisturbEnabled;
	static struct _DrivingModeEnabled : property {
		bool get() { bool value; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_DrivingModeEnabled(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} DrivingModeEnabled;
	static struct _MediaPlaybackCapabilities : property {
		PlaybackCapability get() { PlaybackCapability value; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_MediaPlaybackCapabilities(&value)); return value; }
		PlaybackCapability operator()() { return get(); }
		operator PlaybackCapability () { return get(); }
	} MediaPlaybackCapabilities;
	static struct _MediaPlaybackStatus : property {
		PlaybackStatus get() { PlaybackStatus value; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_MediaPlaybackStatus(&value)); return value; }
		PlaybackStatus operator()() { return get(); }
		operator PlaybackStatus () { return get(); }
	} MediaPlaybackStatus;
	static struct _PhoneCallAudioEndpoint : property {
		Management::PhoneCallAudioEndpoint get() { Management::PhoneCallAudioEndpoint value; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_PhoneCallAudioEndpoint(&value)); return value; }
		Management::PhoneCallAudioEndpoint operator()() { return get(); }
		operator Management::PhoneCallAudioEndpoint () { return get(); }
		void put(Management::PhoneCallAudioEndpoint value) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_put_PhoneCallAudioEndpoint(value)); }
		void operator=(Management::PhoneCallAudioEndpoint value) { put(value); }
		void operator()(Management::PhoneCallAudioEndpoint value) { put(value); }
	} PhoneCallAudioEndpoint;
	static struct _PhoneLineDetails : property {
		ptr<Foundation::Collections::IVectorView<ptr<Management::PhoneLineDetails>>> get() { Foundation::Collections::IVectorView<Management::PhoneLineDetails*>* ppvalue; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_PhoneLineDetails(&ppvalue)); return from_abi(ppvalue); }
		ptr<Foundation::Collections::IVectorView<ptr<Management::PhoneLineDetails>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<ptr<Management::PhoneLineDetails>>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<ptr<Management::PhoneLineDetails>>> operator->() { return get(); }
	} PhoneLineDetails;
	static struct _PhoneMute : property {
		bool get() { bool value; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_get_PhoneMute(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_put_PhoneMute(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} PhoneMute;
	static struct _IsPhonePinLocked : property {
		bool get() { bool pinLocked; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_get_IsPhonePinLocked(&pinLocked)); return pinLocked; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsPhonePinLocked;
	static struct _SpeedDialList : property {
		ptr<Foundation::Collections::IVectorView<ptr<SpeedDialEntry>>> get() { Foundation::Collections::IVectorView<SpeedDialEntry*>* ppvalue; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_get_SpeedDialList(&ppvalue)); return from_abi(ppvalue); }
		ptr<Foundation::Collections::IVectorView<ptr<SpeedDialEntry>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<ptr<SpeedDialEntry>>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<ptr<SpeedDialEntry>>> operator->() { return get(); }
	} SpeedDialList;
	static struct _VolumeInfo : property {
		ptr<Management::VolumeInfo> get() { Management::VolumeInfo* ppVolume; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_get_VolumeInfo(&ppVolume)); return from_abi(ppVolume); }
		ptr<Management::VolumeInfo> operator()() { return get(); }
		operator ptr<Management::VolumeInfo> () { return get(); }
		ptr<Management::VolumeInfo> operator->() { return get(); }
	} VolumeInfo;
	static void SnoozeAlarmByInstanceId(hstring_ref instanceId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager3>()->_SnoozeAlarmByInstanceId(instanceId)); }
	static void DismissAlarmByInstanceId(hstring_ref instanceId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager3>()->_DismissAlarmByInstanceId(instanceId)); }
	static void SnoozeReminderByInstanceId(hstring_ref instanceId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager3>()->_SnoozeReminderByInstanceId(instanceId)); }
	static void DismissReminderByInstanceId(hstring_ref instanceId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager3>()->_DismissReminderByInstanceId(instanceId)); }
	static void RingDevice() { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_RingDevice()); }
	static void ClearToast(hstring_ref instanceId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_ClearToast(instanceId)); }
	static void IncreaseVolume(int step) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_IncreaseVolume(step)); }
	static void DecreaseVolume(int step) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_DecreaseVolume(step)); }
	static void SetMute(bool mute) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_SetMute(mute)); }
	static void SetRingerVibrate(bool ringer, bool vibrate) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_SetRingerVibrate(ringer, vibrate)); }
	static ptr<Foundation::Collections::IVectorView<ptr<EmailAccountInfo>>> GetAllEmailAccounts() { Foundation::Collections::IVectorView<EmailAccountInfo*>* emailAccounts; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_GetAllEmailAccounts(&emailAccounts)); return from_abi(emailAccounts); }
	static ptr<Foundation::Collections::IVectorView<ptr<EmailFolderInfo>>> GetFolders(hstring_ref emailAccount) { Foundation::Collections::IVectorView<EmailFolderInfo*>* folders; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_GetFolders(emailAccount, &folders)); return from_abi(folders); }
	static void EnableEmailNotificationEmailAccount(hstring_ref emailAccount) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_EnableEmailNotificationEmailAccount(emailAccount)); }
	static void DisableEmailNotificationEmailAccount(hstring_ref emailAccount) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_DisableEmailNotificationEmailAccount(emailAccount)); }
	static void EnableEmailNotificationFolderFilter(hstring_ref emailAccount, pptr<Foundation::Collections::IVectorView<hstring>> folders) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_EnableEmailNotificationFolderFilter(emailAccount, to_abi(folders))); }
	static void UpdateEmailReadStatus(pptr<BinaryId> messageEntryId, bool isRead) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager2>()->_UpdateEmailReadStatus(messageEntryId, isRead)); }
	static hstring RegisterAccessoryApp() { HSTRING triggerId; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_RegisterAccessoryApp(&triggerId)); return from_abi(triggerId); }
	static ptr<IAccessoryNotificationTriggerDetails> GetNextTriggerDetails() { IAccessoryNotificationTriggerDetails* pDetails; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_GetNextTriggerDetails(&pDetails)); return from_abi(pDetails); }
	static void ProcessTriggerDetails(pptr<IAccessoryNotificationTriggerDetails> pDetails) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_ProcessTriggerDetails(pDetails)); }
	static ptr<Management::PhoneLineDetails> GetPhoneLineDetails(const Platform::Guid& phoneLine) { Management::PhoneLineDetails* ppdetails; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_GetPhoneLineDetails(phoneLine, &ppdetails)); return from_abi(ppdetails); }
	static void AcceptPhoneCall(unsigned phoneCallId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_AcceptPhoneCall(phoneCallId)); }
	static void AcceptPhoneCall(unsigned phoneCallId, Management::PhoneCallAudioEndpoint endPoint) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_AcceptPhoneCallOnEndpoint(phoneCallId, endPoint)); }
	static void AcceptPhoneCallWithVideo(unsigned phoneCallId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_AcceptPhoneCallWithVideo(phoneCallId)); }
	static void AcceptPhoneCallWithVideo(unsigned phoneCallId, Management::PhoneCallAudioEndpoint endPoint) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_AcceptPhoneCallWithVideoOnAudioEndpoint(phoneCallId, endPoint)); }
	static void RejectPhoneCall(unsigned phoneCallId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_RejectPhoneCall(phoneCallId)); }
	static void RejectPhoneCall(unsigned phoneCallId, unsigned textResponseID) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_RejectPhoneCallWithText(phoneCallId, textResponseID)); }
	static void MakePhoneCall(const Platform::Guid& phoneLine, hstring_ref phoneNumber) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_MakePhoneCall(phoneLine, phoneNumber)); }
	static void MakePhoneCall(const Platform::Guid& phoneLine, hstring_ref phoneNumber, Management::PhoneCallAudioEndpoint endPoint) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_MakePhoneCallOnAudioEndpoint(phoneLine, phoneNumber, endPoint)); }
	static void MakePhoneCallWithVideo(const Platform::Guid& phoneLine, hstring_ref phoneNumber) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_MakePhoneCallWithVideo(phoneLine, phoneNumber)); }
	static void MakePhoneCallWithVideo(const Platform::Guid& phoneLine, hstring_ref phoneNumber, Management::PhoneCallAudioEndpoint endPoint) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_MakePhoneCallWithVideoOnAudioEndpoint(phoneLine, phoneNumber, endPoint)); }
	static void SwapPhoneCalls(unsigned phoneCallIdToHold, unsigned phoneCallIdOnHold) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_SwapPhoneCalls(phoneCallIdToHold, phoneCallIdOnHold)); }
	static void HoldPhoneCall(unsigned phoneCallId, bool holdCall) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_HoldPhoneCall(phoneCallId, holdCall)); }
	static void EndPhoneCall(unsigned phoneCallId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_EndPhoneCall(phoneCallId)); }
	static void SnoozeAlarm(const Platform::Guid& alarmId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_SnoozeAlarm(alarmId)); }
	static void SnoozeAlarm(const Platform::Guid& alarmId, const Foundation::TimeSpan& timeSpan) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_SnoozeAlarmForSpecifiedTime(alarmId, timeSpan)); }
	static void DismissAlarm(const Platform::Guid& alarmId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_DismissAlarm(alarmId)); }
	static void SnoozeReminder(const Platform::Guid& reminderId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_SnoozeReminder(reminderId)); }
	static void SnoozeReminder(const Platform::Guid& reminderId, const Foundation::TimeSpan& timeSpan) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_SnoozeReminderForSpecifiedTime(reminderId, timeSpan)); }
	static void DismissReminder(const Platform::Guid& reminderId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_DismissReminder(reminderId)); }
	static ptr<MediaMetadata> GetMediaMetadata() { MediaMetadata* ppMetadata; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_GetMediaMetadata(&ppMetadata)); return from_abi(ppMetadata); }
	static void PerformMediaPlaybackCommand(PlaybackCommand command) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_PerformMediaPlaybackCommand(command)); }
	static ptr<Foundation::Collections::IMapView<hstring, ptr<AppNotificationInfo>>> GetApps() { Foundation::Collections::IMapView<HSTRING, AppNotificationInfo*>* returnValue; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_GetApps(&returnValue)); return from_abi(returnValue); }
	static void EnableNotificationsForApplication(hstring_ref appId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_EnableNotificationsForApplication(appId)); }
	static void DisableNotificationsForApplication(hstring_ref appId) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_DisableNotificationsForApplication(appId)); }
	static bool IsNotificationEnabledForApplication(hstring_ref appId) { bool enabled; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_IsNotificationEnabledForApplication(appId, &enabled)); return enabled; }
	static int GetEnabledAccessoryNotificationTypes() { int enabledAccessoryNotificationTypes; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_GetEnabledAccessoryNotificationTypes(&enabledAccessoryNotificationTypes)); return enabledAccessoryNotificationTypes; }
	static void EnableAccessoryNotificationTypes(int accessoryNotificationTypes) { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_EnableAccessoryNotificationTypes(accessoryNotificationTypes)); }
	static void DisableAllAccessoryNotificationTypes() { hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_DisableAllAccessoryNotificationTypes()); }
	static bool GetUserConsent() { bool enabled; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_GetUserConsent(&enabled)); return enabled; }
	static ptr<Storage::Streams::IRandomAccessStreamReference> GetAppIcon(hstring_ref appId) { Storage::Streams::IRandomAccessStreamReference* returnValue; hrcheck(get_activation_factory<AccessoryManager, IAccessoryManager>()->_GetAppIcon(appId, &returnValue)); return from_abi(returnValue); }
};
template<typename X> typename AccessoryManager_statics<X>::_BatterySaverState AccessoryManager_statics<X>::BatterySaverState;
template<typename X> typename AccessoryManager_statics<X>::_DoNotDisturbEnabled AccessoryManager_statics<X>::DoNotDisturbEnabled;
template<typename X> typename AccessoryManager_statics<X>::_DrivingModeEnabled AccessoryManager_statics<X>::DrivingModeEnabled;
template<typename X> typename AccessoryManager_statics<X>::_MediaPlaybackCapabilities AccessoryManager_statics<X>::MediaPlaybackCapabilities;
template<typename X> typename AccessoryManager_statics<X>::_MediaPlaybackStatus AccessoryManager_statics<X>::MediaPlaybackStatus;
template<typename X> typename AccessoryManager_statics<X>::_PhoneCallAudioEndpoint AccessoryManager_statics<X>::PhoneCallAudioEndpoint;
template<typename X> typename AccessoryManager_statics<X>::_PhoneLineDetails AccessoryManager_statics<X>::PhoneLineDetails;
template<typename X> typename AccessoryManager_statics<X>::_PhoneMute AccessoryManager_statics<X>::PhoneMute;
template<typename X> typename AccessoryManager_statics<X>::_IsPhonePinLocked AccessoryManager_statics<X>::IsPhonePinLocked;
template<typename X> typename AccessoryManager_statics<X>::_SpeedDialList AccessoryManager_statics<X>::SpeedDialList;
template<typename X> typename AccessoryManager_statics<X>::_VolumeInfo AccessoryManager_statics<X>::VolumeInfo;

template<typename X> struct statics<AccessoryManager, X> : X, Windows::Phone::Notification::Management::AccessoryManager_statics<void> {
	typedef typename X::root_type AccessoryManager;
};
struct AccessoryManager : generate<AccessoryManager> {};
}}}}
} // namespace iso_winrt
