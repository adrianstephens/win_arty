#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Capture

#include "Windows.Media.Capture.0.h"
#include "Windows.Graphics.Imaging.0.h"
#include "Windows.Media.0.h"
#include "Windows.System.0.h"
#include "Windows.Media.Devices.0.h"
#include "Windows.Foundation.h"
#include "Windows.Storage.Streams.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
struct IPropertySet;
template<typename T> struct IIterable;
template<typename K, typename V> struct IMapView;
template<typename T> struct IVectorView;
}}
namespace Graphics { namespace DirectX { namespace Direct3D11 {
struct IDirect3DDevice;
}}}
namespace Media { namespace Capture { namespace Core {
struct VariablePhotoSequenceCapture;
}
namespace Frames {
struct MediaFrameSource;
struct MediaFrameReader;
struct MediaFrameSourceGroup;
struct MediaFrameSourceInfo;
struct MultiSourceMediaFrameReader;
}}
namespace Core {
struct IMediaSource;
}
namespace Effects {
struct IAudioEffectDefinition;
struct IVideoEffectDefinition;
}
namespace MediaProperties {
struct MediaEncodingProfile;
struct VideoEncodingProperties;
struct MediaPropertySet;
struct MediaRatio;
struct ImageEncodingProperties;
struct IMediaEncodingProperties;
}}
namespace Security { namespace Authentication { namespace Web {
struct WebAuthenticationResult;
}}}
namespace Storage {
struct IStorageFile;
struct StorageFile;
struct StorageFolder;
}}

// defs

template<> struct def<Windows::Media::Capture::IAppCapture> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureStatics2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCapture> : class_type<Platform::Object, Windows::Media::Capture::IAppCapture> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIPhotoFormat> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIVideoFormat> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIMaxVideoResolution> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings> : interface_type<> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings> : class_type<Platform::Object, Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings> {};
template<> struct def<Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings> : interface_type<> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings> : class_type<Platform::Object, Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings> {};
template<> struct def<Windows::Media::Capture::ICameraCaptureUI> : interface_type<> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUI> : class_type<Platform::Object, Windows::Media::Capture::ICameraCaptureUI> {};
template<> struct def<Windows::Media::Capture::MediaCategory> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::StreamingCaptureMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::VideoRotation> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::PhotoCaptureSource> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::VideoDeviceCharacteristic> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::MediaCaptureThermalStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::MediaCaptureDeviceExclusiveControlStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureFailedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureFailedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureFailedEventArgs> {};
template<> struct def<Windows::Media::Capture::MediaCaptureFailedEventHandler> : delegate_type {};
template<> struct def<Windows::Media::Capture::KnownVideoProfile> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaStreamType> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IMediaCapture6> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCapture5> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCapture4> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCapture3> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCapture2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureVideoPreview> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCapture> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCapture> : class_type<Platform::Object, Windows::Media::Capture::IMediaCapture, Windows::Media::Capture::IMediaCaptureVideoPreview, Windows::Media::Capture::IMediaCapture2, Windows::Foundation::IClosable, Windows::Media::Capture::IMediaCapture3, Windows::Media::Capture::IMediaCapture4, Windows::Media::Capture::IMediaCapture5, Windows::Media::Capture::IMediaCapture6> {};
template<> struct def<Windows::Media::Capture::RecordLimitationExceededEventHandler> : delegate_type {};
template<> struct def<Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureVideoProfile> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription, Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription2> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureVideoProfile2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureVideoProfile> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureVideoProfile, Windows::Media::Capture::IMediaCaptureVideoProfile2> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureInitializationSettings> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureInitializationSettings2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureInitializationSettings3> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureInitializationSettings4> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureMemoryPreference> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::MediaCaptureSharingMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureInitializationSettings5> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureInitializationSettings6> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureInitializationSettings> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureInitializationSettings, Windows::Media::Capture::IMediaCaptureInitializationSettings2, Windows::Media::Capture::IMediaCaptureInitializationSettings3, Windows::Media::Capture::IMediaCaptureInitializationSettings4, Windows::Media::Capture::IMediaCaptureInitializationSettings5, Windows::Media::Capture::IMediaCaptureInitializationSettings6> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureSettings3> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureSettings2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureSettings> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureSettings> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureSettings, Windows::Media::Capture::IMediaCaptureSettings2, Windows::Media::Capture::IMediaCaptureSettings3> {};
template<> struct def<Windows::Media::Capture::ILowLagMediaRecording3> : interface_type<> {};
template<> struct def<Windows::Media::Capture::ILowLagMediaRecording2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::ILowLagMediaRecording> : interface_type<> {};
template<> struct def<Windows::Media::Capture::LowLagMediaRecording> : class_type<Platform::Object, Windows::Media::Capture::ILowLagMediaRecording, Windows::Media::Capture::ILowLagMediaRecording2, Windows::Media::Capture::ILowLagMediaRecording3> {};
template<> struct def<Windows::Media::Capture::ILowLagPhotoCapture> : interface_type<> {};
template<> struct def<Windows::Media::Capture::LowLagPhotoCapture> : class_type<Platform::Object, Windows::Media::Capture::ILowLagPhotoCapture> {};
template<> struct def<Windows::Media::Capture::ILowLagPhotoSequenceCapture> : interface_type<> {};
template<> struct def<Windows::Media::Capture::LowLagPhotoSequenceCapture> : class_type<Platform::Object, Windows::Media::Capture::ILowLagPhotoSequenceCapture> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureFocusChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureFocusChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureFocusChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IPhotoConfirmationCapturedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::PhotoConfirmationCapturedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IPhotoConfirmationCapturedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAdvancedPhotoCapture> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AdvancedPhotoCapture> : class_type<Platform::Object, Windows::Media::Capture::IAdvancedPhotoCapture> {};
template<> struct def<Windows::Media::Capture::IMediaCapturePauseResult> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCapturePauseResult> : class_type<Platform::Object, Windows::Media::Capture::IMediaCapturePauseResult, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureStopResult> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureStopResult> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureStopResult, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Capture::IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::MediaCaptureDeviceExclusiveControlStatusChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::ICapturedPhoto> : interface_type<> {};
template<> struct def<Windows::Media::Capture::CapturedPhoto> : class_type<Platform::Object, Windows::Media::Capture::ICapturedPhoto> {};
template<> struct def<Windows::Media::Capture::IAdvancedCapturedPhoto2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAdvancedCapturedPhoto> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AdvancedCapturedPhoto> : class_type<Platform::Object, Windows::Media::Capture::IAdvancedCapturedPhoto, Windows::Media::Capture::IAdvancedCapturedPhoto2> {};
template<> struct def<Windows::Media::Capture::IOptionalReferencePhotoCapturedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::OptionalReferencePhotoCapturedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IOptionalReferencePhotoCapturedEventArgs> {};
template<> struct def<Windows::Media::Capture::ICapturedFrame2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::ICapturedFrameWithSoftwareBitmap> : interface_type<> {};
template<> struct def<Windows::Media::Capture::ICapturedFrame> : interface_type<Windows::Storage::Streams::IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Foundation::IClosable, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider> {};
template<> struct def<Windows::Media::Capture::CapturedFrame> : class_type<Platform::Object, Windows::Media::Capture::ICapturedFrame, Windows::Media::Capture::ICapturedFrame2, Windows::Media::Capture::ICapturedFrameWithSoftwareBitmap> {};
template<> struct def<Windows::Media::Capture::IPhotoCapturedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::PhotoCapturedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IPhotoCapturedEventArgs> {};
template<> struct def<Windows::Media::Capture::ICapturedFrameControlValues> : interface_type<> {};
template<> struct def<Windows::Media::Capture::WhiteBalanceGain> : value_type<double, double, double> {};
template<> struct def<Windows::Media::Capture::ICapturedFrameControlValues2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::CapturedFrameControlValues> : class_type<Platform::Object, Windows::Media::Capture::ICapturedFrameControlValues, Windows::Media::Capture::ICapturedFrameControlValues2> {};
template<> struct def<Windows::Media::Capture::IVideoStreamConfiguration> : interface_type<> {};
template<> struct def<Windows::Media::Capture::VideoStreamConfiguration> : class_type<Platform::Object, Windows::Media::Capture::IVideoStreamConfiguration> {};
template<> struct def<Windows::Media::Capture::PowerlineFrequency> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastContract> : value_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastCameraOverlayLocation> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastCameraOverlaySize> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastVideoEncodingBitrateMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastVideoEncodingResolutionMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastManagerStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastGlobalSettings> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastGlobalSettings> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastGlobalSettings> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastProviderSettings> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastProviderSettings> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastProviderSettings> {};
template<> struct def<Windows::Media::Capture::AppBroadcastManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPlugInState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastStreamState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastSignInState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastTerminationReason> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastSignInResult> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastBackgroundServiceSignInInfo> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo, Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo2> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastSignInStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastSignInStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastSignInStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastStreamReader> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastStreamReader> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastStreamReader> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastBackgroundServiceStreamInfo> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo, Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo2> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastStreamStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastStreamStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastStreamStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastBackgroundService> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastBackgroundService2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastBackgroundService> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastBackgroundService, Windows::Media::Capture::IAppBroadcastBackgroundService2> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastHeartbeatRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastHeartbeatRequestedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastHeartbeatRequestedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastStreamAudioFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastStreamAudioFrame> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastStreamAudioFrame> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastStreamVideoFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastStreamVideoFrame> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastStreamVideoFrame> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastStreamVideoHeader> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastStreamVideoHeader> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastStreamVideoHeader> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastStreamAudioHeader> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastStreamAudioHeader> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastStreamAudioHeader> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastTriggerDetails> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastTriggerDetails> {};
template<> struct def<Windows::Media::Capture::ForegroundActivationArgument> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastMicrophoneCaptureState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastCameraCaptureState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastExitBroadcastModeReason> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPreviewState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppBroadcastCaptureTargetType> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPlugInManagerStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPlugInManager> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPlugInManager> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPlugInManager> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPlugIn> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPlugIn> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPlugIn> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastServices> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPreview> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPreview> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPreview> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastState> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastState> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastState> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastViewerCountChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastViewerCountChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastViewerCountChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastMicrophoneCaptureStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastMicrophoneCaptureStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastMicrophoneCaptureStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastCameraCaptureStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastCameraCaptureStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastCameraCaptureStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPlugInStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPlugInStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPlugInStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPreviewStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPreviewStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPreviewStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPreviewStreamReader> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPreviewStreamReader> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPreviewStreamReader> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPreviewStreamVideoFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPreviewStreamVideoFrame> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPreviewStreamVideoFrame> {};
template<> struct def<Windows::Media::Capture::IAppBroadcastPreviewStreamVideoHeader> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppBroadcastPreviewStreamVideoHeader> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastPreviewStreamVideoHeader> {};
template<> struct def<Windows::Media::Capture::AppBroadcastServices> : class_type<Platform::Object, Windows::Media::Capture::IAppBroadcastServices> {};
template<> struct def<Windows::Media::Capture::GameBarServicesDisplayMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppCaptureContract> : value_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureVideoEncodingBitrateMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppCaptureVideoEncodingResolutionMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppCaptureVideoEncodingFrameRateMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppCaptureHistoricalBufferLengthUnit> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IAppCaptureManagerStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureSettings5> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureSettings4> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureSettings3> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureSettings2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureSettings> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureSettings> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureSettings, Windows::Media::Capture::IAppCaptureSettings2, Windows::Media::Capture::IAppCaptureSettings3, Windows::Media::Capture::IAppCaptureSettings4, Windows::Media::Capture::IAppCaptureSettings5> {};
template<> struct def<Windows::Media::Capture::IAppCaptureAlternateShortcutKeys> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureAlternateShortcutKeys2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureAlternateShortcutKeys3> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureAlternateShortcutKeys> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureAlternateShortcutKeys, Windows::Media::Capture::IAppCaptureAlternateShortcutKeys2, Windows::Media::Capture::IAppCaptureAlternateShortcutKeys3> {};
template<> struct def<Windows::Media::Capture::AppCaptureManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::Capture::AppCaptureMicrophoneCaptureState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::AppCaptureRecordingState> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IAppCaptureServices> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IAppCaptureRecordOperation> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureRecordOperation> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureRecordOperation> {};
template<> struct def<Windows::Media::Capture::IAppCaptureState> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureState> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureState> {};
template<> struct def<Windows::Media::Capture::IAppCaptureMicrophoneCaptureStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureMicrophoneCaptureStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureMicrophoneCaptureStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppCaptureRecordingStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureRecordingStateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureRecordingStateChangedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppCaptureDurationGeneratedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureDurationGeneratedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureDurationGeneratedEventArgs> {};
template<> struct def<Windows::Media::Capture::IAppCaptureFileGeneratedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureFileGeneratedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureFileGeneratedEventArgs> {};
template<> struct def<Windows::Media::Capture::AppCaptureServices> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureServices> {};
template<> struct def<Windows::Media::Capture::AppCaptureMetadataContract> : value_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureMetadataPriority> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IAppCaptureMetadataWriter> : interface_type<> {};
template<> struct def<Windows::Media::Capture::AppCaptureMetadataWriter> : class_type<Platform::Object, Windows::Media::Capture::IAppCaptureMetadataWriter, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Capture::CameraCaptureUIContract> : value_type<> {};
template<> struct def<Windows::Media::Capture::ICameraOptionsUIStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::CameraOptionsUI> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::Capture::GameBarContract> : value_type<> {};
template<> struct def<Windows::Media::Capture::GameBarCommand> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::GameBarCommandOrigin> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::GameBarTargetCapturePolicy> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::IGameBarServicesManagerStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IGameBarServicesManager> : interface_type<> {};
template<> struct def<Windows::Media::Capture::GameBarServicesManager> : class_type<Platform::Object, Windows::Media::Capture::IGameBarServicesManager> {};
template<> struct def<Windows::Media::Capture::IGameBarServicesManagerGameBarServicesCreatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::GameBarServicesManagerGameBarServicesCreatedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IGameBarServicesManagerGameBarServicesCreatedEventArgs> {};
template<> struct def<Windows::Media::Capture::IGameBarServices> : interface_type<> {};
template<> struct def<Windows::Media::Capture::GameBarServices> : class_type<Platform::Object, Windows::Media::Capture::IGameBarServices> {};
template<> struct def<Windows::Media::Capture::IGameBarServicesTargetInfo> : interface_type<> {};
template<> struct def<Windows::Media::Capture::GameBarServicesTargetInfo> : class_type<Platform::Object, Windows::Media::Capture::IGameBarServicesTargetInfo> {};
template<> struct def<Windows::Media::Capture::IGameBarServicesCommandEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::GameBarServicesCommandEventArgs> : class_type<Platform::Object, Windows::Media::Capture::IGameBarServicesCommandEventArgs> {};
template<> struct def<Windows::Media::Capture::ISourceSuspensionChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IScreenCapture> : interface_type<> {};
template<> struct def<Windows::Media::Capture::IScreenCaptureStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::ScreenCapture> : class_type<Platform::Object, Windows::Media::Capture::IScreenCapture> {};
template<> struct def<Windows::Media::Capture::SourceSuspensionChangedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::ISourceSuspensionChangedEventArgs> {};

// uuids

template<> struct uuid<Windows::Media::Capture::IAppCapture> { define_guid(0x9749D453, 0xA29A, 0x45ED, 0x8F, 0x29, 0x22, 0xD0, 0x99, 0x42, 0xCF, 0xF7);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureStatics2> { define_guid(0xB2D881D4, 0x836C, 0x4DA4, 0xAF, 0xD7, 0xFA, 0xCC, 0x4, 0x1E, 0x1C, 0xF3);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureStatics> { define_guid(0xF922DD6C, 0xA7E, 0x4E74, 0x8B, 0x20, 0x9C, 0x1F, 0x90, 0x2D, 0x8, 0xA1);};
template<> struct uuid<Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings> { define_guid(0xB9F5BE97, 0x3472, 0x46A8, 0x8A, 0x9E, 0x4, 0xCE, 0x42, 0xCC, 0xC9, 0x7D);};
template<> struct uuid<Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings> { define_guid(0x64E92D1F, 0xA28D, 0x425A, 0xB8, 0x4F, 0xE5, 0x68, 0x33, 0x5F, 0xF2, 0x4E);};
template<> struct uuid<Windows::Media::Capture::ICameraCaptureUI> { define_guid(0x48587540, 0x6F93, 0x4BB4, 0xB8, 0xF3, 0xE8, 0x9E, 0x48, 0x94, 0x8C, 0x91);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureFailedEventArgs> { define_guid(0x80FDE3F4, 0x54C4, 0x42C0, 0x8D, 0x19, 0xCE, 0xA1, 0xA8, 0x7C, 0xA1, 0x8B);};
template<> struct uuid<Windows::Media::Capture::MediaCaptureFailedEventHandler> { define_guid(0x2014EFFB, 0x5CD8, 0x4F08, 0xA3, 0x14, 0xD, 0x36, 0xD, 0xA5, 0x9F, 0x14);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureStatics> { define_guid(0xACEF81FF, 0x99ED, 0x4645, 0x96, 0x5E, 0x19, 0x25, 0xCF, 0xC6, 0x38, 0x34);};
template<> struct uuid<Windows::Media::Capture::IMediaCapture6> { define_guid(0x228948BD, 0x4B20, 0x4BB1, 0x9F, 0xD6, 0xA5, 0x83, 0x21, 0x2A, 0x10, 0x12);};
template<> struct uuid<Windows::Media::Capture::IMediaCapture5> { define_guid(0xDA787C22, 0x3A9B, 0x4720, 0xA7, 0x1E, 0x97, 0x90, 0xA, 0x31, 0x6E, 0x5A);};
template<> struct uuid<Windows::Media::Capture::IMediaCapture4> { define_guid(0xBACD6FD6, 0xFB08, 0x4947, 0xAE, 0xA2, 0xCE, 0x14, 0xEF, 0xF0, 0xCE, 0x13);};
template<> struct uuid<Windows::Media::Capture::IMediaCapture3> { define_guid(0xD4136F30, 0x1564, 0x466E, 0xBC, 0xA, 0xAF, 0x94, 0xE0, 0x2A, 0xB0, 0x16);};
template<> struct uuid<Windows::Media::Capture::IMediaCapture2> { define_guid(0x9CC68260, 0x7DA1, 0x4043, 0xB6, 0x52, 0x21, 0xB8, 0x87, 0x8D, 0xAF, 0xF9);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureVideoPreview> { define_guid(0x27727073, 0x549E, 0x447F, 0xA2, 0xA, 0x4F, 0x3, 0xC4, 0x79, 0xD8, 0xC0);};
template<> struct uuid<Windows::Media::Capture::IMediaCapture> { define_guid(0xC61AFBB4, 0xFB10, 0x4A34, 0xAC, 0x18, 0xCA, 0x80, 0xD9, 0xC8, 0xE7, 0xEE);};
template<> struct uuid<Windows::Media::Capture::RecordLimitationExceededEventHandler> { define_guid(0x3FAE8F2E, 0x4FE1, 0x4FFD, 0xAA, 0xBA, 0xE1, 0xF1, 0x33, 0x7D, 0x4E, 0x53);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription> { define_guid(0x8012AFEF, 0xB691, 0x49FF, 0x83, 0xF2, 0xC1, 0xE7, 0x6E, 0xAA, 0xEA, 0x1B);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription2> { define_guid(0xC6A6EF13, 0x322D, 0x413A, 0xB8, 0x5A, 0x68, 0xA8, 0x8E, 0x2, 0xF4, 0xE9);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureVideoProfile> { define_guid(0x21A073BF, 0xA3EE, 0x4ECF, 0x9E, 0xF6, 0x50, 0xB0, 0xBC, 0x4E, 0x13, 0x5);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureVideoProfile2> { define_guid(0x97DDC95F, 0x94CE, 0x468F, 0x93, 0x16, 0xFC, 0x5B, 0xC2, 0x63, 0x8F, 0x6B);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureInitializationSettings> { define_guid(0x9782BA70, 0xEA65, 0x4900, 0x93, 0x56, 0x8C, 0xA8, 0x87, 0x72, 0x68, 0x84);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureInitializationSettings2> { define_guid(0x404E0626, 0xC9DC, 0x43E9, 0xAE, 0xE4, 0xE6, 0xBF, 0x1B, 0x57, 0xB4, 0x4C);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureInitializationSettings3> { define_guid(0x4160519D, 0xBE48, 0x4730, 0x81, 0x4, 0xC, 0xF6, 0xE9, 0xE9, 0x79, 0x48);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureInitializationSettings4> { define_guid(0xF502A537, 0x4CB7, 0x4D28, 0x95, 0xED, 0x4F, 0x9F, 0x1, 0x2E, 0x5, 0x18);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureInitializationSettings5> { define_guid(0xD5A2E3B8, 0x2626, 0x4E94, 0xB7, 0xB3, 0x53, 0x8, 0xA0, 0xF6, 0x4B, 0x1A);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureInitializationSettings6> { define_guid(0xB2E26B47, 0x3DB1, 0x4D33, 0xAB, 0x63, 0xF, 0xFA, 0x9, 0x5, 0x65, 0x85);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureSettings3> { define_guid(0x303C67C2, 0x8058, 0x4B1B, 0xB8, 0x77, 0x8C, 0x2E, 0xF3, 0x52, 0x84, 0x40);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureSettings2> { define_guid(0x6F9E7CFB, 0xFA9F, 0x4B13, 0x9C, 0xBE, 0x5A, 0xB9, 0x4F, 0x1F, 0x34, 0x93);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureSettings> { define_guid(0x1D83AAFE, 0x6D45, 0x4477, 0x8D, 0xC4, 0xAC, 0x5B, 0xC0, 0x1C, 0x40, 0x91);};
template<> struct uuid<Windows::Media::Capture::ILowLagMediaRecording3> { define_guid(0x5C33AB12, 0x48F7, 0x47DA, 0xB4, 0x1E, 0x90, 0x88, 0xA, 0x5F, 0xE0, 0xEC);};
template<> struct uuid<Windows::Media::Capture::ILowLagMediaRecording2> { define_guid(0x6369C758, 0x5644, 0x41E2, 0x97, 0xAF, 0x8E, 0xF5, 0x6A, 0x25, 0xE2, 0x25);};
template<> struct uuid<Windows::Media::Capture::ILowLagMediaRecording> { define_guid(0x41C8BAF7, 0xFF3F, 0x49F0, 0xA4, 0x77, 0xF1, 0x95, 0xE3, 0xCE, 0x51, 0x8);};
template<> struct uuid<Windows::Media::Capture::ILowLagPhotoCapture> { define_guid(0xA37251B7, 0x6B44, 0x473D, 0x8F, 0x24, 0xF7, 0x3, 0xD6, 0xC0, 0xEC, 0x44);};
template<> struct uuid<Windows::Media::Capture::ILowLagPhotoSequenceCapture> { define_guid(0x7CC346BB, 0xB9A9, 0x4C91, 0x8F, 0xFA, 0x28, 0x7E, 0x9C, 0x66, 0x86, 0x69);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureFocusChangedEventArgs> { define_guid(0x81E1BC7F, 0x2277, 0x493E, 0xAB, 0xEE, 0xD3, 0xF4, 0x4F, 0xF9, 0x8C, 0x4);};
template<> struct uuid<Windows::Media::Capture::IPhotoConfirmationCapturedEventArgs> { define_guid(0xAB473672, 0xC28A, 0x4827, 0x8F, 0x8D, 0x36, 0x36, 0xD3, 0xBE, 0xB5, 0x1E);};
template<> struct uuid<Windows::Media::Capture::IAdvancedPhotoCapture> { define_guid(0x83FFAAFA, 0x6667, 0x44DC, 0x97, 0x3C, 0xA6, 0xBC, 0xE5, 0x96, 0xAA, 0xF);};
template<> struct uuid<Windows::Media::Capture::IMediaCapturePauseResult> { define_guid(0xAEC47CA3, 0x4477, 0x4B04, 0xA0, 0x6F, 0x2C, 0x1C, 0x51, 0x82, 0xFE, 0x9D);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureStopResult> { define_guid(0xF9DB6A2A, 0xA092, 0x4AD1, 0x97, 0xD4, 0xF2, 0x1, 0xF9, 0xD0, 0x82, 0xDB);};
template<> struct uuid<Windows::Media::Capture::IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs> { define_guid(0x9D2F920D, 0xA588, 0x43C6, 0x89, 0xD6, 0x5A, 0xD3, 0x22, 0xAF, 0x0, 0x6A);};
template<> struct uuid<Windows::Media::Capture::ICapturedPhoto> { define_guid(0xB0CE7E5A, 0xCFCC, 0x4D6C, 0x8A, 0xD1, 0x8, 0x69, 0x20, 0x8A, 0xCA, 0x16);};
template<> struct uuid<Windows::Media::Capture::IAdvancedCapturedPhoto2> { define_guid(0x18CF6CD8, 0xCFFE, 0x42D8, 0x81, 0x4, 0x1, 0x7B, 0xB3, 0x18, 0xF4, 0xA1);};
template<> struct uuid<Windows::Media::Capture::IAdvancedCapturedPhoto> { define_guid(0xF072728B, 0xB292, 0x4491, 0x9D, 0x41, 0x99, 0x80, 0x7A, 0x55, 0xB, 0xBF);};
template<> struct uuid<Windows::Media::Capture::IOptionalReferencePhotoCapturedEventArgs> { define_guid(0x470F88B3, 0x1E6D, 0x4051, 0x9C, 0x8B, 0xF1, 0xD8, 0x5A, 0xF0, 0x47, 0xB7);};
template<> struct uuid<Windows::Media::Capture::ICapturedFrame2> { define_guid(0x543FA6D1, 0xBD78, 0x4866, 0xAD, 0xDA, 0x24, 0x31, 0x4B, 0xC6, 0x5D, 0xEA);};
template<> struct uuid<Windows::Media::Capture::ICapturedFrameWithSoftwareBitmap> { define_guid(0xB58E8B6E, 0x8503, 0x49B5, 0x9E, 0x86, 0x89, 0x7D, 0x26, 0xA3, 0xFF, 0x3D);};
template<> struct uuid<Windows::Media::Capture::ICapturedFrame> { define_guid(0x1DD2DE1F, 0x571B, 0x44D8, 0x8E, 0x80, 0xA0, 0x8A, 0x15, 0x78, 0x76, 0x6E);};
template<> struct uuid<Windows::Media::Capture::IPhotoCapturedEventArgs> { define_guid(0x373BFBC1, 0x984E, 0x4FF0, 0xBF, 0x85, 0x1C, 0x0, 0xAA, 0xBC, 0x5A, 0x45);};
template<> struct uuid<Windows::Media::Capture::ICapturedFrameControlValues> { define_guid(0x90C65B7F, 0x4E0D, 0x4CA4, 0x88, 0x2D, 0x7A, 0x14, 0x4F, 0xED, 0xA, 0x90);};
template<> struct uuid<Windows::Media::Capture::ICapturedFrameControlValues2> { define_guid(0x500B2B88, 0x6D2, 0x4AA7, 0xA7, 0xDB, 0xD3, 0x7A, 0xF7, 0x33, 0x21, 0xD8);};
template<> struct uuid<Windows::Media::Capture::IVideoStreamConfiguration> { define_guid(0xD8770A6F, 0x4390, 0x4B5E, 0xAD, 0x3E, 0xF, 0x8A, 0xF0, 0x96, 0x34, 0x90);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastManagerStatics> { define_guid(0x364E018B, 0x1E4E, 0x411F, 0xAB, 0x3E, 0x92, 0x95, 0x98, 0x44, 0xC1, 0x56);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastGlobalSettings> { define_guid(0xB2CB27A5, 0x70FC, 0x4E17, 0x80, 0xBD, 0x6B, 0xA0, 0xFD, 0x3F, 0xF3, 0xA0);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastProviderSettings> { define_guid(0xC30BDF62, 0x9948, 0x458F, 0xAD, 0x50, 0xAA, 0x6, 0xEC, 0x3, 0xDA, 0x8);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo> { define_guid(0x5E735275, 0x88C8, 0x4ECA, 0x89, 0xBA, 0x48, 0x25, 0x98, 0x5D, 0xB8, 0x80);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo2> { define_guid(0x9104285C, 0x62CF, 0x4A3C, 0xA7, 0xEE, 0xAE, 0xB5, 0x7, 0x40, 0x46, 0x45);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastSignInStateChangedEventArgs> { define_guid(0x2B692A4, 0x5919, 0x4A9E, 0x8D, 0x5E, 0xC9, 0xBB, 0xD, 0xD3, 0x37, 0x7A);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo> { define_guid(0x31DC02BC, 0x990A, 0x4904, 0xAA, 0x96, 0xFE, 0x36, 0x43, 0x81, 0xF1, 0x36);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastStreamReader> { define_guid(0xB338BCF9, 0x3364, 0x4460, 0xB5, 0xF1, 0x3C, 0xC2, 0x79, 0x6A, 0x8A, 0xA2);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo2> { define_guid(0xBD1E9F6D, 0x94DC, 0x4FCE, 0x95, 0x41, 0xA9, 0xF1, 0x29, 0x59, 0x63, 0x34);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastStreamStateChangedEventArgs> { define_guid(0x5108A733, 0xD008, 0x4A89, 0x93, 0xBE, 0x58, 0xAE, 0xD9, 0x61, 0x37, 0x4E);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastBackgroundService> { define_guid(0xBAD1E72A, 0xFA94, 0x46F9, 0x95, 0xFC, 0xD7, 0x15, 0x11, 0xCD, 0xA7, 0xB);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastBackgroundService2> { define_guid(0xFC8CCBBF, 0x5549, 0x4B87, 0x95, 0x9F, 0x23, 0xCA, 0x40, 0x1F, 0xD4, 0x73);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastHeartbeatRequestedEventArgs> { define_guid(0xCEA54283, 0xEE51, 0x4DBF, 0x94, 0x72, 0x79, 0xA9, 0xED, 0x4E, 0x21, 0x65);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastStreamAudioFrame> { define_guid(0xEFAB4AC8, 0x21BA, 0x453F, 0x8B, 0xB7, 0x5E, 0x93, 0x8A, 0x2E, 0x9A, 0x74);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastStreamVideoFrame> { define_guid(0xF97CF2B, 0xC9E4, 0x4E88, 0x81, 0x94, 0xD8, 0x14, 0xCB, 0xD5, 0x85, 0xD8);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastStreamVideoHeader> { define_guid(0xB9EBECE, 0x7E32, 0x432D, 0x8C, 0xA2, 0x36, 0xBF, 0x10, 0xB9, 0xF4, 0x62);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastStreamAudioHeader> { define_guid(0xBF21A570, 0x6B78, 0x4216, 0x9F, 0x7, 0x5A, 0xFF, 0x52, 0x56, 0xF1, 0xB7);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastTriggerDetails> { define_guid(0xDEEBAB35, 0xEC5E, 0x4D8F, 0xB1, 0xC0, 0x5D, 0xA6, 0xE8, 0xC7, 0x56, 0x38);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPlugInManagerStatics> { define_guid(0xF2645C20, 0x5C76, 0x4CDC, 0x93, 0x64, 0x82, 0xFE, 0x9E, 0xB6, 0x53, 0x4D);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPlugInManager> { define_guid(0xE550D979, 0x27A1, 0x49A7, 0xBB, 0xF4, 0xD7, 0xA9, 0xE9, 0xD0, 0x76, 0x68);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPlugIn> { define_guid(0x520C1E66, 0x6513, 0x4574, 0xAC, 0x54, 0x23, 0xB7, 0x97, 0x29, 0x61, 0x5B);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastServices> { define_guid(0x8660B4D6, 0x969B, 0x4E3C, 0xAC, 0x3A, 0x8B, 0x4, 0x2E, 0xE4, 0xEE, 0x63);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPreview> { define_guid(0x14B60F5A, 0x6E4A, 0x4B80, 0xA1, 0x4F, 0x67, 0xEE, 0x77, 0xD1, 0x53, 0xE7);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastState> { define_guid(0xEE08056D, 0x8099, 0x4DDD, 0x92, 0x2E, 0xC5, 0x6D, 0xAC, 0x58, 0xAB, 0xFB);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastViewerCountChangedEventArgs> { define_guid(0xE6E11825, 0x5401, 0x4ADE, 0x8B, 0xD2, 0xC1, 0x4E, 0xCE, 0xE6, 0x80, 0x7D);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastMicrophoneCaptureStateChangedEventArgs> { define_guid(0xA86AD5E9, 0x9440, 0x4908, 0x9D, 0x9, 0x65, 0xB7, 0xE3, 0x15, 0xD7, 0x95);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastCameraCaptureStateChangedEventArgs> { define_guid(0x1E334CD0, 0xB882, 0x4B88, 0x86, 0x92, 0x5, 0x99, 0x9A, 0xCE, 0xB7, 0xF);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPlugInStateChangedEventArgs> { define_guid(0x4881D0F2, 0xABC5, 0x4FC6, 0x84, 0xB0, 0x89, 0x37, 0xB, 0xB4, 0x72, 0x12);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPreviewStateChangedEventArgs> { define_guid(0x5A57F2DE, 0x8DEA, 0x4E86, 0x90, 0xAD, 0x3, 0xFC, 0x26, 0xB9, 0x65, 0x3C);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPreviewStreamReader> { define_guid(0x92228D50, 0xDB3F, 0x40A8, 0x8C, 0xD4, 0xF4, 0xE3, 0x71, 0xDD, 0xAB, 0x37);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPreviewStreamVideoFrame> { define_guid(0x10FBEA1, 0x94FE, 0x4499, 0xB8, 0xC0, 0x8D, 0x24, 0x42, 0x79, 0xFB, 0x12);};
template<> struct uuid<Windows::Media::Capture::IAppBroadcastPreviewStreamVideoHeader> { define_guid(0x8BEF6113, 0xDA84, 0x4499, 0xA7, 0xAB, 0x87, 0x11, 0x8C, 0xB4, 0xA1, 0x57);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureManagerStatics> { define_guid(0x7D9E3EA7, 0x6282, 0x4735, 0x8D, 0x4E, 0xAA, 0x45, 0xF9, 0xF, 0x67, 0x23);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureSettings5> { define_guid(0x18894522, 0xB0E8, 0x4BA0, 0x8F, 0x13, 0x3E, 0xAA, 0x5F, 0xA4, 0x1, 0x3B);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureSettings4> { define_guid(0x7C2774C, 0x1A81, 0x482F, 0xA2, 0x44, 0x4, 0x9D, 0x95, 0xF2, 0x5B, 0xB);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureSettings3> { define_guid(0xA93502FE, 0x88C2, 0x42D6, 0xAA, 0xAA, 0x40, 0xFE, 0xFF, 0xD7, 0x5A, 0xEC);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureSettings2> { define_guid(0xFCB8CEE7, 0xE26B, 0x476F, 0x9B, 0x1A, 0xEC, 0x34, 0x2D, 0x2A, 0x8F, 0xDE);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureSettings> { define_guid(0x14683A86, 0x8807, 0x48D3, 0x88, 0x3A, 0x97, 0xE, 0xE4, 0x53, 0x2A, 0x39);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureAlternateShortcutKeys> { define_guid(0x19E8E0EF, 0x236C, 0x40F9, 0xB3, 0x8F, 0x9B, 0x7D, 0xD6, 0x5D, 0x1C, 0xCC);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureAlternateShortcutKeys2> { define_guid(0xC3669090, 0xDD17, 0x47F0, 0x95, 0xE5, 0xCE, 0x42, 0x28, 0x6C, 0xF3, 0x38);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureAlternateShortcutKeys3> { define_guid(0x7B81448C, 0x418E, 0x469C, 0xA4, 0x9A, 0x45, 0xB5, 0x97, 0xC8, 0x26, 0xB6);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureServices> { define_guid(0x44FEC0B5, 0x34F5, 0x4F18, 0xAE, 0x8C, 0xB9, 0x12, 0x3A, 0xBB, 0xFC, 0xD);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureRecordOperation> { define_guid(0xC66020A9, 0x1538, 0x495C, 0x9B, 0xBB, 0x2B, 0xA8, 0x70, 0xEC, 0x58, 0x61);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureState> { define_guid(0x73134372, 0xD4EB, 0x44CE, 0x95, 0x38, 0x46, 0x5F, 0x50, 0x6A, 0xC4, 0xEA);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureMicrophoneCaptureStateChangedEventArgs> { define_guid(0x324D249E, 0x45BC, 0x4C35, 0xBC, 0x35, 0xE4, 0x69, 0xFC, 0x7A, 0x69, 0xE0);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureRecordingStateChangedEventArgs> { define_guid(0x24FC8712, 0xE305, 0x490D, 0xB4, 0x15, 0x6B, 0x1C, 0x90, 0x49, 0x73, 0x6B);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureDurationGeneratedEventArgs> { define_guid(0xC1F5563B, 0xFFA1, 0x44C9, 0x97, 0x5F, 0x27, 0xFB, 0xEB, 0x55, 0x3B, 0x35);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureFileGeneratedEventArgs> { define_guid(0x4189FBF4, 0x465E, 0x45BF, 0x90, 0x7F, 0x16, 0x5B, 0x3F, 0xB2, 0x37, 0x58);};
template<> struct uuid<Windows::Media::Capture::IAppCaptureMetadataWriter> { define_guid(0xE0CE4877, 0x9AAF, 0x46B4, 0xAD, 0x31, 0x6A, 0x60, 0xB4, 0x41, 0xC7, 0x80);};
template<> struct uuid<Windows::Media::Capture::ICameraOptionsUIStatics> { define_guid(0x3B0D5E34, 0x3906, 0x4B7D, 0x94, 0x6C, 0x7B, 0xDE, 0x84, 0x44, 0x99, 0xAE);};
template<> struct uuid<Windows::Media::Capture::IGameBarServicesManagerStatics> { define_guid(0x34C1B616, 0xFF25, 0x4792, 0x98, 0xF2, 0xD3, 0x75, 0x3F, 0x15, 0xAC, 0x13);};
template<> struct uuid<Windows::Media::Capture::IGameBarServicesManager> { define_guid(0x3A4B9CFA, 0x7F8B, 0x4C60, 0x9D, 0xBB, 0xB, 0xCD, 0x26, 0x2D, 0xFF, 0xC6);};
template<> struct uuid<Windows::Media::Capture::IGameBarServicesManagerGameBarServicesCreatedEventArgs> { define_guid(0xEDEDBD9C, 0x143E, 0x49A3, 0xA5, 0xEA, 0xB, 0x19, 0x95, 0xC8, 0xD4, 0x6E);};
template<> struct uuid<Windows::Media::Capture::IGameBarServices> { define_guid(0x2DBEAD57, 0x50A6, 0x499E, 0x8C, 0x6C, 0xD3, 0x30, 0xA7, 0x31, 0x17, 0x96);};
template<> struct uuid<Windows::Media::Capture::IGameBarServicesTargetInfo> { define_guid(0xB4202F92, 0x1611, 0x4E05, 0xB6, 0xEF, 0xDF, 0xD7, 0x37, 0xAE, 0x33, 0xB0);};
template<> struct uuid<Windows::Media::Capture::IGameBarServicesCommandEventArgs> { define_guid(0xA74226B2, 0xF176, 0x4FCF, 0x8F, 0xBB, 0xCF, 0x69, 0x8B, 0x2E, 0xB8, 0xE0);};
template<> struct uuid<Windows::Media::Capture::ISourceSuspensionChangedEventArgs> { define_guid(0x2ECE7B5E, 0xD49B, 0x4394, 0xBC, 0x32, 0xF9, 0x7D, 0x6C, 0xED, 0xEC, 0x1C);};
template<> struct uuid<Windows::Media::Capture::IScreenCapture> { define_guid(0x89179EF7, 0xCD12, 0x4E0E, 0xA6, 0xD4, 0x5B, 0x3D, 0xE9, 0x8B, 0x2E, 0x9B);};
template<> struct uuid<Windows::Media::Capture::IScreenCaptureStatics> { define_guid(0xC898C3B0, 0xC8A5, 0x11E2, 0x8B, 0x8B, 0x8, 0x0, 0x20, 0xC, 0x9A, 0x66);};

// types

namespace Windows { namespace Media { namespace Capture {

// IAppCapture
struct IAppCapture_raw : IInspectable {
	virtual STDMETHODIMP _get_IsCapturingAudio(bool *value);
	virtual STDMETHODIMP _get_IsCapturingVideo(bool *value);
	virtual STDMETHODIMP _add_CapturingChanged(Foundation::TypedEventHandler<AppCapture*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CapturingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppCapture_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCapture_adaptor::IsCapturingAudio)->_get_IsCapturingAudio(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCapturingAudio;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCapture_adaptor::IsCapturingVideo)->_get_IsCapturingVideo(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCapturingVideo;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppCapture>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppCapture_adaptor::CapturingChanged)->_add_CapturingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppCapture_adaptor::CapturingChanged)->_remove_CapturingChanged(token)); }
		} CapturingChanged;
	};
	IAppCapture_adaptor() {}
};
template<typename X> struct adapt<IAppCapture, X> : Windows::Media::Capture::IAppCapture_adaptor<X> { typedef adapt IAppCapture; };
struct IAppCapture : IAppCapture_raw, generate<IAppCapture> {};

// IAppCaptureStatics2
struct IAppCaptureStatics2 : IInspectable {
	virtual STDMETHODIMP _SetAllowedAsync(bool allowed, Foundation::IAsyncAction* *operation);
};

// IAppCaptureStatics
struct IAppCaptureStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(AppCapture* *value);
};

// AppCapture
template<typename> struct AppCapture_statics {
	static ptr<Foundation::IAsyncAction> SetAllowedAsync(bool allowed) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<AppCapture, IAppCaptureStatics2>()->_SetAllowedAsync(allowed, &operation)); return from_abi(operation); }
	static ptr<AppCapture> GetForCurrentView() { AppCapture* value; hrcheck(get_activation_factory<AppCapture, IAppCaptureStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
};

template<typename X> struct statics<AppCapture, X> : X, Windows::Media::Capture::AppCapture_statics<void> {
	typedef typename X::root_type AppCapture;
};
struct AppCapture : generate<AppCapture> {};

// ICameraCaptureUIPhotoCaptureSettings
struct ICameraCaptureUIPhotoCaptureSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_Format(CameraCaptureUIPhotoFormat *value);
	virtual STDMETHODIMP _put_Format(CameraCaptureUIPhotoFormat value);
	virtual STDMETHODIMP _get_MaxResolution(CameraCaptureUIMaxPhotoResolution *value);
	virtual STDMETHODIMP _put_MaxResolution(CameraCaptureUIMaxPhotoResolution value);
	virtual STDMETHODIMP _get_CroppedSizeInPixels(Foundation::Size *value);
	virtual STDMETHODIMP _put_CroppedSizeInPixels(Foundation::Size value);
	virtual STDMETHODIMP _get_CroppedAspectRatio(Foundation::Size *value);
	virtual STDMETHODIMP _put_CroppedAspectRatio(Foundation::Size value);
	virtual STDMETHODIMP _get_AllowCropping(bool *value);
	virtual STDMETHODIMP _put_AllowCropping(bool value);
};
template<typename X> struct ICameraCaptureUIPhotoCaptureSettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::AllowCropping)->_get_AllowCropping(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::AllowCropping)->_put_AllowCropping(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowCropping;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::CroppedAspectRatio)->_get_CroppedAspectRatio(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
			void put(const Foundation::Size& value) { hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::CroppedAspectRatio)->_put_CroppedAspectRatio(value)); }
			void operator=(const Foundation::Size& value) { put(value); }
			void operator()(const Foundation::Size& value) { put(value); }
		} CroppedAspectRatio;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::CroppedSizeInPixels)->_get_CroppedSizeInPixels(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
			void put(const Foundation::Size& value) { hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::CroppedSizeInPixels)->_put_CroppedSizeInPixels(value)); }
			void operator=(const Foundation::Size& value) { put(value); }
			void operator()(const Foundation::Size& value) { put(value); }
		} CroppedSizeInPixels;
		struct : property {
			CameraCaptureUIPhotoFormat get() { CameraCaptureUIPhotoFormat value; hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::Format)->_get_Format(&value)); return value; }
			CameraCaptureUIPhotoFormat operator()() { return get(); }
			operator CameraCaptureUIPhotoFormat () { return get(); }
			void put(CameraCaptureUIPhotoFormat value) { hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::Format)->_put_Format(value)); }
			void operator=(CameraCaptureUIPhotoFormat value) { put(value); }
			void operator()(CameraCaptureUIPhotoFormat value) { put(value); }
		} Format;
		struct : property {
			CameraCaptureUIMaxPhotoResolution get() { CameraCaptureUIMaxPhotoResolution value; hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::MaxResolution)->_get_MaxResolution(&value)); return value; }
			CameraCaptureUIMaxPhotoResolution operator()() { return get(); }
			operator CameraCaptureUIMaxPhotoResolution () { return get(); }
			void put(CameraCaptureUIMaxPhotoResolution value) { hrcheck(enc(&ICameraCaptureUIPhotoCaptureSettings_adaptor::MaxResolution)->_put_MaxResolution(value)); }
			void operator=(CameraCaptureUIMaxPhotoResolution value) { put(value); }
			void operator()(CameraCaptureUIMaxPhotoResolution value) { put(value); }
		} MaxResolution;
	};
	ICameraCaptureUIPhotoCaptureSettings_adaptor() {}
};
template<typename X> struct adapt<ICameraCaptureUIPhotoCaptureSettings, X> : Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings_adaptor<X> { typedef adapt ICameraCaptureUIPhotoCaptureSettings; };
struct ICameraCaptureUIPhotoCaptureSettings : ICameraCaptureUIPhotoCaptureSettings_raw, generate<ICameraCaptureUIPhotoCaptureSettings> {};

// CameraCaptureUIPhotoCaptureSettings
template<typename X> struct statics<CameraCaptureUIPhotoCaptureSettings, X> : X {
	typedef typename X::root_type CameraCaptureUIPhotoCaptureSettings;
};
struct CameraCaptureUIPhotoCaptureSettings : generate<CameraCaptureUIPhotoCaptureSettings> {};

// ICameraCaptureUIVideoCaptureSettings
struct ICameraCaptureUIVideoCaptureSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_Format(CameraCaptureUIVideoFormat *value);
	virtual STDMETHODIMP _put_Format(CameraCaptureUIVideoFormat value);
	virtual STDMETHODIMP _get_MaxResolution(CameraCaptureUIMaxVideoResolution *value);
	virtual STDMETHODIMP _put_MaxResolution(CameraCaptureUIMaxVideoResolution value);
	virtual STDMETHODIMP _get_MaxDurationInSeconds(float *value);
	virtual STDMETHODIMP _put_MaxDurationInSeconds(float value);
	virtual STDMETHODIMP _get_AllowTrimming(bool *value);
	virtual STDMETHODIMP _put_AllowTrimming(bool value);
};
template<typename X> struct ICameraCaptureUIVideoCaptureSettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::AllowTrimming)->_get_AllowTrimming(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::AllowTrimming)->_put_AllowTrimming(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowTrimming;
		struct : property {
			CameraCaptureUIVideoFormat get() { CameraCaptureUIVideoFormat value; hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::Format)->_get_Format(&value)); return value; }
			CameraCaptureUIVideoFormat operator()() { return get(); }
			operator CameraCaptureUIVideoFormat () { return get(); }
			void put(CameraCaptureUIVideoFormat value) { hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::Format)->_put_Format(value)); }
			void operator=(CameraCaptureUIVideoFormat value) { put(value); }
			void operator()(CameraCaptureUIVideoFormat value) { put(value); }
		} Format;
		struct : property {
			float get() { float value; hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::MaxDurationInSeconds)->_get_MaxDurationInSeconds(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::MaxDurationInSeconds)->_put_MaxDurationInSeconds(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} MaxDurationInSeconds;
		struct : property {
			CameraCaptureUIMaxVideoResolution get() { CameraCaptureUIMaxVideoResolution value; hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::MaxResolution)->_get_MaxResolution(&value)); return value; }
			CameraCaptureUIMaxVideoResolution operator()() { return get(); }
			operator CameraCaptureUIMaxVideoResolution () { return get(); }
			void put(CameraCaptureUIMaxVideoResolution value) { hrcheck(enc(&ICameraCaptureUIVideoCaptureSettings_adaptor::MaxResolution)->_put_MaxResolution(value)); }
			void operator=(CameraCaptureUIMaxVideoResolution value) { put(value); }
			void operator()(CameraCaptureUIMaxVideoResolution value) { put(value); }
		} MaxResolution;
	};
	ICameraCaptureUIVideoCaptureSettings_adaptor() {}
};
template<typename X> struct adapt<ICameraCaptureUIVideoCaptureSettings, X> : Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings_adaptor<X> { typedef adapt ICameraCaptureUIVideoCaptureSettings; };
struct ICameraCaptureUIVideoCaptureSettings : ICameraCaptureUIVideoCaptureSettings_raw, generate<ICameraCaptureUIVideoCaptureSettings> {};

// CameraCaptureUIVideoCaptureSettings
template<typename X> struct statics<CameraCaptureUIVideoCaptureSettings, X> : X {
	typedef typename X::root_type CameraCaptureUIVideoCaptureSettings;
};
struct CameraCaptureUIVideoCaptureSettings : generate<CameraCaptureUIVideoCaptureSettings> {};

// ICameraCaptureUI
struct ICameraCaptureUI_raw : IInspectable {
	virtual STDMETHODIMP _get_PhotoSettings(CameraCaptureUIPhotoCaptureSettings* *value);
	virtual STDMETHODIMP _get_VideoSettings(CameraCaptureUIVideoCaptureSettings* *value);
	virtual STDMETHODIMP _CaptureFileAsync(CameraCaptureUIMode mode, Foundation::IAsyncOperation<Storage::StorageFile*>* *asyncInfo);
};
template<typename X> struct ICameraCaptureUI_adaptor : X {
	union {
		struct : property {
			ptr<CameraCaptureUIPhotoCaptureSettings> get() { CameraCaptureUIPhotoCaptureSettings* value; hrcheck(enc(&ICameraCaptureUI_adaptor::PhotoSettings)->_get_PhotoSettings(&value)); return from_abi(value); }
			ptr<CameraCaptureUIPhotoCaptureSettings> operator()() { return get(); }
			operator ptr<CameraCaptureUIPhotoCaptureSettings> () { return get(); }
			ptr<CameraCaptureUIPhotoCaptureSettings> operator->() { return get(); }
		} PhotoSettings;
		struct : property {
			ptr<CameraCaptureUIVideoCaptureSettings> get() { CameraCaptureUIVideoCaptureSettings* value; hrcheck(enc(&ICameraCaptureUI_adaptor::VideoSettings)->_get_VideoSettings(&value)); return from_abi(value); }
			ptr<CameraCaptureUIVideoCaptureSettings> operator()() { return get(); }
			operator ptr<CameraCaptureUIVideoCaptureSettings> () { return get(); }
			ptr<CameraCaptureUIVideoCaptureSettings> operator->() { return get(); }
		} VideoSettings;
	};
	ptr<Foundation::IAsyncOperation<ptr<Storage::StorageFile>>> CaptureFileAsync(CameraCaptureUIMode mode) { Foundation::IAsyncOperation<Storage::StorageFile*>* asyncInfo; hrcheck(X::get()->_CaptureFileAsync(mode, &asyncInfo)); return from_abi(asyncInfo); }
	ICameraCaptureUI_adaptor() {}
};
template<typename X> struct adapt<ICameraCaptureUI, X> : Windows::Media::Capture::ICameraCaptureUI_adaptor<X> { typedef adapt ICameraCaptureUI; };
struct ICameraCaptureUI : ICameraCaptureUI_raw, generate<ICameraCaptureUI> {};

// CameraCaptureUI
template<typename X> struct statics<CameraCaptureUI, X> : X {
	typedef typename X::root_type CameraCaptureUI;
};
struct CameraCaptureUI : generate<CameraCaptureUI> {};

// IMediaCaptureFailedEventArgs
struct IMediaCaptureFailedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Message(HSTRING *value);
	virtual STDMETHODIMP _get_Code(unsigned *value);
};
template<typename X> struct IMediaCaptureFailedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaCaptureFailedEventArgs_adaptor::Code)->_get_Code(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Code;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureFailedEventArgs_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Message;
	};
	IMediaCaptureFailedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureFailedEventArgs, X> : Windows::Media::Capture::IMediaCaptureFailedEventArgs_adaptor<X> { typedef adapt IMediaCaptureFailedEventArgs; };
struct IMediaCaptureFailedEventArgs : IMediaCaptureFailedEventArgs_raw, generate<IMediaCaptureFailedEventArgs> {};

// MediaCaptureFailedEventArgs
template<typename X> struct statics<MediaCaptureFailedEventArgs, X> : X {
	typedef typename X::root_type MediaCaptureFailedEventArgs;
};
struct MediaCaptureFailedEventArgs : generate<MediaCaptureFailedEventArgs> {};

// MediaCaptureFailedEventHandler
struct MediaCaptureFailedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(MediaCapture* sender, MediaCaptureFailedEventArgs* errorEventArgs) = 0;
};

// IMediaCaptureStatics
struct IMediaCaptureStatics : IInspectable {
	virtual STDMETHODIMP _IsVideoProfileSupported(HSTRING videoDeviceId, bool *value);
	virtual STDMETHODIMP _FindAllVideoProfiles(HSTRING videoDeviceId, Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* *value);
	virtual STDMETHODIMP _FindConcurrentProfiles(HSTRING videoDeviceId, Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* *value);
	virtual STDMETHODIMP _FindKnownVideoProfiles(HSTRING videoDeviceId, KnownVideoProfile name, Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* *value);
};

// IMediaCapture6
struct IMediaCapture6_raw : IInspectable {
	virtual STDMETHODIMP _add_CaptureDeviceExclusiveControlStatusChanged(Foundation::TypedEventHandler<MediaCapture*, MediaCaptureDeviceExclusiveControlStatusChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CaptureDeviceExclusiveControlStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CreateMultiSourceFrameReaderAsync(Foundation::Collections::IIterable<Frames::MediaFrameSource*>* inputSources, Foundation::IAsyncOperation<Frames::MultiSourceMediaFrameReader*>* *value);
};
template<typename X> struct IMediaCapture6_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaCapture>, ptr<MediaCaptureDeviceExclusiveControlStatusChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaCapture6_adaptor::CaptureDeviceExclusiveControlStatusChanged)->_add_CaptureDeviceExclusiveControlStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaCapture6_adaptor::CaptureDeviceExclusiveControlStatusChanged)->_remove_CaptureDeviceExclusiveControlStatusChanged(token)); }
		} CaptureDeviceExclusiveControlStatusChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<Frames::MultiSourceMediaFrameReader>>> CreateMultiSourceFrameReaderAsync(pptr<Foundation::Collections::IIterable<ptr<Frames::MediaFrameSource>>> inputSources) { Foundation::IAsyncOperation<Frames::MultiSourceMediaFrameReader*>* value; hrcheck(X::get()->_CreateMultiSourceFrameReaderAsync(to_abi(inputSources), &value)); return from_abi(value); }
	IMediaCapture6_adaptor() {}
};
template<typename X> struct adapt<IMediaCapture6, X> : Windows::Media::Capture::IMediaCapture6_adaptor<X> { typedef adapt IMediaCapture6; };
struct IMediaCapture6 : IMediaCapture6_raw, generate<IMediaCapture6> {};

// IMediaCapture5
struct IMediaCapture5_raw : IInspectable {
	virtual STDMETHODIMP _RemoveEffectAsync(IMediaExtension* effect, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _PauseRecordWithResultAsync(Devices::MediaCapturePauseBehavior behavior, Foundation::IAsyncOperation<MediaCapturePauseResult*>* *operation);
	virtual STDMETHODIMP _StopRecordWithResultAsync(Foundation::IAsyncOperation<MediaCaptureStopResult*>* *operation);
	virtual STDMETHODIMP _get_FrameSources(Foundation::Collections::IMapView<HSTRING, Frames::MediaFrameSource*>* *value);
	virtual STDMETHODIMP _CreateFrameReaderAsync(Frames::MediaFrameSource* inputSource, Foundation::IAsyncOperation<Frames::MediaFrameReader*>* *value);
	virtual STDMETHODIMP _CreateFrameReaderWithSubtypeAsync(Frames::MediaFrameSource* inputSource, HSTRING outputSubtype, Foundation::IAsyncOperation<Frames::MediaFrameReader*>* *value);
	virtual STDMETHODIMP _CreateFrameReaderWithSubtypeAndSizeAsync(Frames::MediaFrameSource* inputSource, HSTRING outputSubtype, Graphics::Imaging::BitmapSize outputSize, Foundation::IAsyncOperation<Frames::MediaFrameReader*>* *value);
};
template<typename X> struct IMediaCapture5_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, ptr<Frames::MediaFrameSource>>> get() { Foundation::Collections::IMapView<HSTRING, Frames::MediaFrameSource*>* value; hrcheck(enc(&IMediaCapture5_adaptor::FrameSources)->_get_FrameSources(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<Frames::MediaFrameSource>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, ptr<Frames::MediaFrameSource>>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<Frames::MediaFrameSource>>> operator->() { return get(); }
		} FrameSources;
	};
	ptr<Foundation::IAsyncAction> RemoveEffectAsync(pptr<IMediaExtension> effect) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_RemoveEffectAsync(effect, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MediaCapturePauseResult>>> PauseRecordWithResultAsync(Devices::MediaCapturePauseBehavior behavior) { Foundation::IAsyncOperation<MediaCapturePauseResult*>* operation; hrcheck(X::get()->_PauseRecordWithResultAsync(behavior, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<MediaCaptureStopResult>>> StopRecordWithResultAsync() { Foundation::IAsyncOperation<MediaCaptureStopResult*>* operation; hrcheck(X::get()->_StopRecordWithResultAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Frames::MediaFrameReader>>> CreateFrameReaderAsync(pptr<Frames::MediaFrameSource> inputSource) { Foundation::IAsyncOperation<Frames::MediaFrameReader*>* value; hrcheck(X::get()->_CreateFrameReaderAsync(inputSource, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Frames::MediaFrameReader>>> CreateFrameReaderAsync(pptr<Frames::MediaFrameSource> inputSource, hstring_ref outputSubtype) { Foundation::IAsyncOperation<Frames::MediaFrameReader*>* value; hrcheck(X::get()->_CreateFrameReaderWithSubtypeAsync(inputSource, outputSubtype, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Frames::MediaFrameReader>>> CreateFrameReaderAsync(pptr<Frames::MediaFrameSource> inputSource, hstring_ref outputSubtype, const Graphics::Imaging::BitmapSize& outputSize) { Foundation::IAsyncOperation<Frames::MediaFrameReader*>* value; hrcheck(X::get()->_CreateFrameReaderWithSubtypeAndSizeAsync(inputSource, outputSubtype, outputSize, &value)); return from_abi(value); }
	IMediaCapture5_adaptor() {}
};
template<typename X> struct adapt<IMediaCapture5, X> : Windows::Media::Capture::IMediaCapture5_adaptor<X> { typedef adapt IMediaCapture5; };
struct IMediaCapture5 : IMediaCapture5_raw, generate<IMediaCapture5> {};

// IMediaCapture4
struct IMediaCapture4_raw : IInspectable {
	virtual STDMETHODIMP _AddAudioEffectAsync(Effects::IAudioEffectDefinition* definition, Foundation::IAsyncOperation<IMediaExtension*>* *op);
	virtual STDMETHODIMP _AddVideoEffectAsync(Effects::IVideoEffectDefinition* definition, MediaStreamType mediaStreamType, Foundation::IAsyncOperation<IMediaExtension*>* *op);
	virtual STDMETHODIMP _PauseRecordAsync(Devices::MediaCapturePauseBehavior behavior, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _ResumeRecordAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _add_CameraStreamStateChanged(Foundation::TypedEventHandler<MediaCapture*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraStreamStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_CameraStreamState(Devices::CameraStreamState *streamState);
	virtual STDMETHODIMP _GetPreviewFrameAsync(Foundation::IAsyncOperation<VideoFrame*>* *operation);
	virtual STDMETHODIMP _GetPreviewFrameCopyAsync(VideoFrame* destination, Foundation::IAsyncOperation<VideoFrame*>* *operation);
	virtual STDMETHODIMP _add_ThermalStatusChanged(Foundation::TypedEventHandler<MediaCapture*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ThermalStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_ThermalStatus(MediaCaptureThermalStatus *value);
	virtual STDMETHODIMP _PrepareAdvancedPhotoCaptureAsync(MediaProperties::ImageEncodingProperties* encodingProperties, Foundation::IAsyncOperation<AdvancedPhotoCapture*>* *operation);
};
template<typename X> struct IMediaCapture4_adaptor : X {
	union {
		struct : property {
			Devices::CameraStreamState get() { Devices::CameraStreamState streamState; hrcheck(enc(&IMediaCapture4_adaptor::CameraStreamState)->_get_CameraStreamState(&streamState)); return streamState; }
			Devices::CameraStreamState operator()() { return get(); }
			operator Devices::CameraStreamState () { return get(); }
		} CameraStreamState;
		struct : property {
			MediaCaptureThermalStatus get() { MediaCaptureThermalStatus value; hrcheck(enc(&IMediaCapture4_adaptor::ThermalStatus)->_get_ThermalStatus(&value)); return value; }
			MediaCaptureThermalStatus operator()() { return get(); }
			operator MediaCaptureThermalStatus () { return get(); }
		} ThermalStatus;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaCapture>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaCapture4_adaptor::CameraStreamStateChanged)->_add_CameraStreamStateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaCapture4_adaptor::CameraStreamStateChanged)->_remove_CameraStreamStateChanged(token)); }
		} CameraStreamStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaCapture>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaCapture4_adaptor::ThermalStatusChanged)->_add_ThermalStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaCapture4_adaptor::ThermalStatusChanged)->_remove_ThermalStatusChanged(token)); }
		} ThermalStatusChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<IMediaExtension>>> AddAudioEffectAsync(pptr<Effects::IAudioEffectDefinition> definition) { Foundation::IAsyncOperation<IMediaExtension*>* op; hrcheck(X::get()->_AddAudioEffectAsync(definition, &op)); return from_abi(op); }
	ptr<Foundation::IAsyncOperation<ptr<IMediaExtension>>> AddVideoEffectAsync(pptr<Effects::IVideoEffectDefinition> definition, MediaStreamType mediaStreamType) { Foundation::IAsyncOperation<IMediaExtension*>* op; hrcheck(X::get()->_AddVideoEffectAsync(definition, mediaStreamType, &op)); return from_abi(op); }
	ptr<Foundation::IAsyncAction> PauseRecordAsync(Devices::MediaCapturePauseBehavior behavior) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_PauseRecordAsync(behavior, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> ResumeRecordAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_ResumeRecordAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<VideoFrame>>> GetPreviewFrameAsync() { Foundation::IAsyncOperation<VideoFrame*>* operation; hrcheck(X::get()->_GetPreviewFrameAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<VideoFrame>>> GetPreviewFrameAsync(pptr<VideoFrame> destination) { Foundation::IAsyncOperation<VideoFrame*>* operation; hrcheck(X::get()->_GetPreviewFrameCopyAsync(destination, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<AdvancedPhotoCapture>>> PrepareAdvancedPhotoCaptureAsync(pptr<MediaProperties::ImageEncodingProperties> encodingProperties) { Foundation::IAsyncOperation<AdvancedPhotoCapture*>* operation; hrcheck(X::get()->_PrepareAdvancedPhotoCaptureAsync(encodingProperties, &operation)); return from_abi(operation); }
	IMediaCapture4_adaptor() {}
};
template<typename X> struct adapt<IMediaCapture4, X> : Windows::Media::Capture::IMediaCapture4_adaptor<X> { typedef adapt IMediaCapture4; };
struct IMediaCapture4 : IMediaCapture4_raw, generate<IMediaCapture4> {};

// IMediaCapture3
struct IMediaCapture3_raw : IInspectable {
	virtual STDMETHODIMP _PrepareVariablePhotoSequenceCaptureAsync(MediaProperties::ImageEncodingProperties* type, Foundation::IAsyncOperation<Core::VariablePhotoSequenceCapture*>* *operation);
	virtual STDMETHODIMP _add_FocusChanged(Foundation::TypedEventHandler<MediaCapture*, MediaCaptureFocusChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FocusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PhotoConfirmationCaptured(Foundation::TypedEventHandler<MediaCapture*, PhotoConfirmationCapturedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PhotoConfirmationCaptured(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMediaCapture3_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaCapture>, ptr<MediaCaptureFocusChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaCapture3_adaptor::FocusChanged)->_add_FocusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaCapture3_adaptor::FocusChanged)->_remove_FocusChanged(token)); }
		} FocusChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaCapture>, ptr<PhotoConfirmationCapturedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaCapture3_adaptor::PhotoConfirmationCaptured)->_add_PhotoConfirmationCaptured(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaCapture3_adaptor::PhotoConfirmationCaptured)->_remove_PhotoConfirmationCaptured(token)); }
		} PhotoConfirmationCaptured;
	};
	ptr<Foundation::IAsyncOperation<ptr<Core::VariablePhotoSequenceCapture>>> PrepareVariablePhotoSequenceCaptureAsync(pptr<MediaProperties::ImageEncodingProperties> type) { Foundation::IAsyncOperation<Core::VariablePhotoSequenceCapture*>* operation; hrcheck(X::get()->_PrepareVariablePhotoSequenceCaptureAsync(type, &operation)); return from_abi(operation); }
	IMediaCapture3_adaptor() {}
};
template<typename X> struct adapt<IMediaCapture3, X> : Windows::Media::Capture::IMediaCapture3_adaptor<X> { typedef adapt IMediaCapture3; };
struct IMediaCapture3 : IMediaCapture3_raw, generate<IMediaCapture3> {};

// IMediaCapture2
struct IMediaCapture2_raw : IInspectable {
	virtual STDMETHODIMP _PrepareLowLagRecordToStorageFileAsync(MediaProperties::MediaEncodingProfile* encodingProfile, Storage::IStorageFile* file, Foundation::IAsyncOperation<LowLagMediaRecording*>* *operation);
	virtual STDMETHODIMP _PrepareLowLagRecordToStreamAsync(MediaProperties::MediaEncodingProfile* encodingProfile, Storage::Streams::IRandomAccessStream* stream, Foundation::IAsyncOperation<LowLagMediaRecording*>* *operation);
	virtual STDMETHODIMP _PrepareLowLagRecordToCustomSinkAsync(MediaProperties::MediaEncodingProfile* encodingProfile, IMediaExtension* customMediaSink, Foundation::IAsyncOperation<LowLagMediaRecording*>* *operation);
	virtual STDMETHODIMP _PrepareLowLagRecordToCustomSinkIdAsync(MediaProperties::MediaEncodingProfile* encodingProfile, HSTRING customSinkActivationId, Foundation::Collections::IPropertySet* customSinkSettings, Foundation::IAsyncOperation<LowLagMediaRecording*>* *operation);
	virtual STDMETHODIMP _PrepareLowLagPhotoCaptureAsync(MediaProperties::ImageEncodingProperties* type, Foundation::IAsyncOperation<LowLagPhotoCapture*>* *operation);
	virtual STDMETHODIMP _PrepareLowLagPhotoSequenceCaptureAsync(MediaProperties::ImageEncodingProperties* type, Foundation::IAsyncOperation<LowLagPhotoSequenceCapture*>* *operation);
	virtual STDMETHODIMP _SetEncodingPropertiesAsync(MediaStreamType mediaStreamType, MediaProperties::IMediaEncodingProperties* mediaEncodingProperties, MediaProperties::MediaPropertySet* encoderProperties, Foundation::IAsyncAction* *operation);
};
template<typename X> struct IMediaCapture2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<LowLagMediaRecording>>> PrepareLowLagRecordToStorageFileAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, pptr<Storage::IStorageFile> file) { Foundation::IAsyncOperation<LowLagMediaRecording*>* operation; hrcheck(X::get()->_PrepareLowLagRecordToStorageFileAsync(encodingProfile, file, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<LowLagMediaRecording>>> PrepareLowLagRecordToStreamAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, pptr<Storage::Streams::IRandomAccessStream> stream) { Foundation::IAsyncOperation<LowLagMediaRecording*>* operation; hrcheck(X::get()->_PrepareLowLagRecordToStreamAsync(encodingProfile, stream, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<LowLagMediaRecording>>> PrepareLowLagRecordToCustomSinkAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, pptr<IMediaExtension> customMediaSink) { Foundation::IAsyncOperation<LowLagMediaRecording*>* operation; hrcheck(X::get()->_PrepareLowLagRecordToCustomSinkAsync(encodingProfile, customMediaSink, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<LowLagMediaRecording>>> PrepareLowLagRecordToCustomSinkAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, hstring_ref customSinkActivationId, pptr<Foundation::Collections::IPropertySet> customSinkSettings) { Foundation::IAsyncOperation<LowLagMediaRecording*>* operation; hrcheck(X::get()->_PrepareLowLagRecordToCustomSinkIdAsync(encodingProfile, customSinkActivationId, customSinkSettings, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<LowLagPhotoCapture>>> PrepareLowLagPhotoCaptureAsync(pptr<MediaProperties::ImageEncodingProperties> type) { Foundation::IAsyncOperation<LowLagPhotoCapture*>* operation; hrcheck(X::get()->_PrepareLowLagPhotoCaptureAsync(type, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<LowLagPhotoSequenceCapture>>> PrepareLowLagPhotoSequenceCaptureAsync(pptr<MediaProperties::ImageEncodingProperties> type) { Foundation::IAsyncOperation<LowLagPhotoSequenceCapture*>* operation; hrcheck(X::get()->_PrepareLowLagPhotoSequenceCaptureAsync(type, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SetEncodingPropertiesAsync(MediaStreamType mediaStreamType, pptr<MediaProperties::IMediaEncodingProperties> mediaEncodingProperties, pptr<MediaProperties::MediaPropertySet> encoderProperties) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SetEncodingPropertiesAsync(mediaStreamType, mediaEncodingProperties, encoderProperties, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IMediaCapture2, X> : Windows::Media::Capture::IMediaCapture2_adaptor<X> { typedef adapt IMediaCapture2; };
struct IMediaCapture2 : IMediaCapture2_raw, generate<IMediaCapture2> {};

// IMediaCaptureVideoPreview
struct IMediaCaptureVideoPreview_raw : IInspectable {
	virtual STDMETHODIMP _StartPreviewAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StartPreviewToCustomSinkAsync(MediaProperties::MediaEncodingProfile* encodingProfile, IMediaExtension* customMediaSink, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StartPreviewToCustomSinkIdAsync(MediaProperties::MediaEncodingProfile* encodingProfile, HSTRING customSinkActivationId, Foundation::Collections::IPropertySet* customSinkSettings, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StopPreviewAsync(Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct IMediaCaptureVideoPreview_adaptor : X {
	ptr<Foundation::IAsyncAction> StartPreviewAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StartPreviewAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StartPreviewToCustomSinkAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, pptr<IMediaExtension> customMediaSink) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StartPreviewToCustomSinkAsync(encodingProfile, customMediaSink, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StartPreviewToCustomSinkAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, hstring_ref customSinkActivationId, pptr<Foundation::Collections::IPropertySet> customSinkSettings) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StartPreviewToCustomSinkIdAsync(encodingProfile, customSinkActivationId, customSinkSettings, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StopPreviewAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StopPreviewAsync(&asyncInfo)); return from_abi(asyncInfo); }
};
template<typename X> struct adapt<IMediaCaptureVideoPreview, X> : Windows::Media::Capture::IMediaCaptureVideoPreview_adaptor<X> { typedef adapt IMediaCaptureVideoPreview; };
struct IMediaCaptureVideoPreview : IMediaCaptureVideoPreview_raw, generate<IMediaCaptureVideoPreview> {};

// IMediaCapture
struct IMediaCapture_raw : IInspectable {
	virtual STDMETHODIMP _InitializeAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _InitializeWithSettingsAsync(MediaCaptureInitializationSettings* mediaCaptureInitializationSettings, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StartRecordToStorageFileAsync(MediaProperties::MediaEncodingProfile* encodingProfile, Storage::IStorageFile* file, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StartRecordToStreamAsync(MediaProperties::MediaEncodingProfile* encodingProfile, Storage::Streams::IRandomAccessStream* stream, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StartRecordToCustomSinkAsync(MediaProperties::MediaEncodingProfile* encodingProfile, IMediaExtension* customMediaSink, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StartRecordToCustomSinkIdAsync(MediaProperties::MediaEncodingProfile* encodingProfile, HSTRING customSinkActivationId, Foundation::Collections::IPropertySet* customSinkSettings, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StopRecordAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _CapturePhotoToStorageFileAsync(MediaProperties::ImageEncodingProperties* type, Storage::IStorageFile* file, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _CapturePhotoToStreamAsync(MediaProperties::ImageEncodingProperties* type, Storage::Streams::IRandomAccessStream* stream, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _AddEffectAsync(MediaStreamType mediaStreamType, HSTRING effectActivationID, Foundation::Collections::IPropertySet* effectSettings, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _ClearEffectsAsync(MediaStreamType mediaStreamType, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _SetEncoderProperty(MediaStreamType mediaStreamType, Platform::Guid propertyId, IInspectable* propertyValue);
	virtual STDMETHODIMP _GetEncoderProperty(MediaStreamType mediaStreamType, Platform::Guid propertyId, IInspectable* *propertyValue);
	virtual STDMETHODIMP _add_Failed(MediaCaptureFailedEventHandler* errorEventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Failed(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_RecordLimitationExceeded(RecordLimitationExceededEventHandler* recordLimitationExceededEventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_RecordLimitationExceeded(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _get_MediaCaptureSettings(Capture::MediaCaptureSettings* *value);
	virtual STDMETHODIMP _get_AudioDeviceController(Devices::AudioDeviceController* *value);
	virtual STDMETHODIMP _get_VideoDeviceController(Devices::VideoDeviceController* *value);
	virtual STDMETHODIMP _SetPreviewMirroring(bool value);
	virtual STDMETHODIMP _GetPreviewMirroring(bool *value);
	virtual STDMETHODIMP _SetPreviewRotation(VideoRotation value);
	virtual STDMETHODIMP _GetPreviewRotation(VideoRotation *value);
	virtual STDMETHODIMP _SetRecordRotation(VideoRotation value);
	virtual STDMETHODIMP _GetRecordRotation(VideoRotation *value);
};
template<typename X> struct IMediaCapture_adaptor : X {
	union {
		struct : property {
			ptr<Devices::AudioDeviceController> get() { Devices::AudioDeviceController* value; hrcheck(enc(&IMediaCapture_adaptor::AudioDeviceController)->_get_AudioDeviceController(&value)); return from_abi(value); }
			ptr<Devices::AudioDeviceController> operator()() { return get(); }
			operator ptr<Devices::AudioDeviceController> () { return get(); }
			ptr<Devices::AudioDeviceController> operator->() { return get(); }
		} AudioDeviceController;
		struct : property {
			ptr<Capture::MediaCaptureSettings> get() { Capture::MediaCaptureSettings* value; hrcheck(enc(&IMediaCapture_adaptor::MediaCaptureSettings)->_get_MediaCaptureSettings(&value)); return from_abi(value); }
			ptr<Capture::MediaCaptureSettings> operator()() { return get(); }
			operator ptr<Capture::MediaCaptureSettings> () { return get(); }
			ptr<Capture::MediaCaptureSettings> operator->() { return get(); }
		} MediaCaptureSettings;
		struct : property {
			ptr<Devices::VideoDeviceController> get() { Devices::VideoDeviceController* value; hrcheck(enc(&IMediaCapture_adaptor::VideoDeviceController)->_get_VideoDeviceController(&value)); return from_abi(value); }
			ptr<Devices::VideoDeviceController> operator()() { return get(); }
			operator ptr<Devices::VideoDeviceController> () { return get(); }
			ptr<Devices::VideoDeviceController> operator->() { return get(); }
		} VideoDeviceController;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<MediaCaptureFailedEventHandler> errorEventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IMediaCapture_adaptor::Failed)->_add_Failed(errorEventHandler, &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IMediaCapture_adaptor::Failed)->_remove_Failed(eventCookie)); }
		} Failed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<RecordLimitationExceededEventHandler> recordLimitationExceededEventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IMediaCapture_adaptor::RecordLimitationExceeded)->_add_RecordLimitationExceeded(recordLimitationExceededEventHandler, &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IMediaCapture_adaptor::RecordLimitationExceeded)->_remove_RecordLimitationExceeded(eventCookie)); }
		} RecordLimitationExceeded;
	};
	ptr<Foundation::IAsyncAction> InitializeAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_InitializeAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> InitializeAsync(pptr<MediaCaptureInitializationSettings> mediaCaptureInitializationSettings) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_InitializeWithSettingsAsync(mediaCaptureInitializationSettings, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StartRecordToStorageFileAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, pptr<Storage::IStorageFile> file) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StartRecordToStorageFileAsync(encodingProfile, file, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StartRecordToStreamAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, pptr<Storage::Streams::IRandomAccessStream> stream) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StartRecordToStreamAsync(encodingProfile, stream, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StartRecordToCustomSinkAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, pptr<IMediaExtension> customMediaSink) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StartRecordToCustomSinkAsync(encodingProfile, customMediaSink, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StartRecordToCustomSinkAsync(pptr<MediaProperties::MediaEncodingProfile> encodingProfile, hstring_ref customSinkActivationId, pptr<Foundation::Collections::IPropertySet> customSinkSettings) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StartRecordToCustomSinkIdAsync(encodingProfile, customSinkActivationId, customSinkSettings, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> StopRecordAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_StopRecordAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> CapturePhotoToStorageFileAsync(pptr<MediaProperties::ImageEncodingProperties> type, pptr<Storage::IStorageFile> file) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_CapturePhotoToStorageFileAsync(type, file, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> CapturePhotoToStreamAsync(pptr<MediaProperties::ImageEncodingProperties> type, pptr<Storage::Streams::IRandomAccessStream> stream) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_CapturePhotoToStreamAsync(type, stream, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> AddEffectAsync(MediaStreamType mediaStreamType, hstring_ref effectActivationID, pptr<Foundation::Collections::IPropertySet> effectSettings) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_AddEffectAsync(mediaStreamType, effectActivationID, effectSettings, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> ClearEffectsAsync(MediaStreamType mediaStreamType) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_ClearEffectsAsync(mediaStreamType, &asyncInfo)); return from_abi(asyncInfo); }
	void SetEncoderProperty(MediaStreamType mediaStreamType, const Platform::Guid& propertyId, object_ref propertyValue) { hrcheck(X::get()->_SetEncoderProperty(mediaStreamType, propertyId, propertyValue)); }
	object GetEncoderProperty(MediaStreamType mediaStreamType, const Platform::Guid& propertyId) { IInspectable* propertyValue; hrcheck(X::get()->_GetEncoderProperty(mediaStreamType, propertyId, &propertyValue)); return from_abi(propertyValue); }
	void SetPreviewMirroring(bool value) { hrcheck(X::get()->_SetPreviewMirroring(value)); }
	bool GetPreviewMirroring() { bool value; hrcheck(X::get()->_GetPreviewMirroring(&value)); return value; }
	void SetPreviewRotation(VideoRotation value) { hrcheck(X::get()->_SetPreviewRotation(value)); }
	VideoRotation GetPreviewRotation() { VideoRotation value; hrcheck(X::get()->_GetPreviewRotation(&value)); return value; }
	void SetRecordRotation(VideoRotation value) { hrcheck(X::get()->_SetRecordRotation(value)); }
	VideoRotation GetRecordRotation() { VideoRotation value; hrcheck(X::get()->_GetRecordRotation(&value)); return value; }
	IMediaCapture_adaptor() {}
};
template<typename X> struct adapt<IMediaCapture, X> : Windows::Media::Capture::IMediaCapture_adaptor<X> { typedef adapt IMediaCapture; };
struct IMediaCapture : IMediaCapture_raw, generate<IMediaCapture> {};

// MediaCapture
template<typename> struct MediaCapture_statics {
	static bool IsVideoProfileSupported(hstring_ref videoDeviceId) { bool value; hrcheck(get_activation_factory<MediaCapture, IMediaCaptureStatics>()->_IsVideoProfileSupported(videoDeviceId, &value)); return value; }
	static ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfile>>> FindAllVideoProfiles(hstring_ref videoDeviceId) { Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* value; hrcheck(get_activation_factory<MediaCapture, IMediaCaptureStatics>()->_FindAllVideoProfiles(videoDeviceId, &value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfile>>> FindConcurrentProfiles(hstring_ref videoDeviceId) { Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* value; hrcheck(get_activation_factory<MediaCapture, IMediaCaptureStatics>()->_FindConcurrentProfiles(videoDeviceId, &value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfile>>> FindKnownVideoProfiles(hstring_ref videoDeviceId, KnownVideoProfile name) { Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* value; hrcheck(get_activation_factory<MediaCapture, IMediaCaptureStatics>()->_FindKnownVideoProfiles(videoDeviceId, name, &value)); return from_abi(value); }
};

template<typename X> struct statics<MediaCapture, X> : X, Windows::Media::Capture::MediaCapture_statics<void> {
	typedef typename X::root_type MediaCapture;
};
struct MediaCapture : generate<MediaCapture> {
	using IMediaCapture4::GetPreviewFrameAsync;
	using IMediaCapture::InitializeAsync;
	using IMediaCapture::StartRecordToCustomSinkAsync;
	using IMediaCapture5::CreateFrameReaderAsync;
	using IMediaCapture2::PrepareLowLagRecordToCustomSinkAsync;
	using IMediaCaptureVideoPreview::StartPreviewToCustomSinkAsync;
};

// RecordLimitationExceededEventHandler
struct RecordLimitationExceededEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(MediaCapture* sender) = 0;
};

// IMediaCaptureVideoProfileMediaDescription
struct IMediaCaptureVideoProfileMediaDescription_raw : IInspectable {
	virtual STDMETHODIMP _get_Width(unsigned *value);
	virtual STDMETHODIMP _get_Height(unsigned *value);
	virtual STDMETHODIMP _get_FrameRate(double *value);
	virtual STDMETHODIMP _get_IsVariablePhotoSequenceSupported(bool *value);
	virtual STDMETHODIMP _get_IsHdrVideoSupported(bool *value);
};
template<typename X> struct IMediaCaptureVideoProfileMediaDescription_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaCaptureVideoProfileMediaDescription_adaptor::FrameRate)->_get_FrameRate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} FrameRate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaCaptureVideoProfileMediaDescription_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Height;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaCaptureVideoProfileMediaDescription_adaptor::IsHdrVideoSupported)->_get_IsHdrVideoSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHdrVideoSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaCaptureVideoProfileMediaDescription_adaptor::IsVariablePhotoSequenceSupported)->_get_IsVariablePhotoSequenceSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVariablePhotoSequenceSupported;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaCaptureVideoProfileMediaDescription_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Width;
	};
	IMediaCaptureVideoProfileMediaDescription_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureVideoProfileMediaDescription, X> : Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription_adaptor<X> { typedef adapt IMediaCaptureVideoProfileMediaDescription; };
struct IMediaCaptureVideoProfileMediaDescription : IMediaCaptureVideoProfileMediaDescription_raw, generate<IMediaCaptureVideoProfileMediaDescription> {};

// IMediaCaptureVideoProfileMediaDescription2
struct IMediaCaptureVideoProfileMediaDescription2_raw : IInspectable {
	virtual STDMETHODIMP _get_Subtype(HSTRING *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* *value);
};
template<typename X> struct IMediaCaptureVideoProfileMediaDescription2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> get() { Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* value; hrcheck(enc(&IMediaCaptureVideoProfileMediaDescription2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<Platform::Guid, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureVideoProfileMediaDescription2_adaptor::Subtype)->_get_Subtype(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subtype;
	};
	IMediaCaptureVideoProfileMediaDescription2_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureVideoProfileMediaDescription2, X> : Windows::Media::Capture::IMediaCaptureVideoProfileMediaDescription2_adaptor<X> { typedef adapt IMediaCaptureVideoProfileMediaDescription2; };
struct IMediaCaptureVideoProfileMediaDescription2 : IMediaCaptureVideoProfileMediaDescription2_raw, generate<IMediaCaptureVideoProfileMediaDescription2> {};

// IMediaCaptureVideoProfile
struct IMediaCaptureVideoProfile_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_VideoDeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_SupportedPreviewMediaDescription(Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* *value);
	virtual STDMETHODIMP _get_SupportedRecordMediaDescription(Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* *value);
	virtual STDMETHODIMP _get_SupportedPhotoMediaDescription(Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* *value);
	virtual STDMETHODIMP _GetConcurrency(Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* *value);
};
template<typename X> struct IMediaCaptureVideoProfile_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureVideoProfile_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> get() { Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* value; hrcheck(enc(&IMediaCaptureVideoProfile_adaptor::SupportedPhotoMediaDescription)->_get_SupportedPhotoMediaDescription(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator->() { return get(); }
		} SupportedPhotoMediaDescription;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> get() { Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* value; hrcheck(enc(&IMediaCaptureVideoProfile_adaptor::SupportedPreviewMediaDescription)->_get_SupportedPreviewMediaDescription(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator->() { return get(); }
		} SupportedPreviewMediaDescription;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> get() { Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* value; hrcheck(enc(&IMediaCaptureVideoProfile_adaptor::SupportedRecordMediaDescription)->_get_SupportedRecordMediaDescription(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator->() { return get(); }
		} SupportedRecordMediaDescription;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureVideoProfile_adaptor::VideoDeviceId)->_get_VideoDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} VideoDeviceId;
	};
	ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfile>>> GetConcurrency() { Foundation::Collections::IVectorView<MediaCaptureVideoProfile*>* value; hrcheck(X::get()->_GetConcurrency(&value)); return from_abi(value); }
	IMediaCaptureVideoProfile_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureVideoProfile, X> : Windows::Media::Capture::IMediaCaptureVideoProfile_adaptor<X> { typedef adapt IMediaCaptureVideoProfile; };
struct IMediaCaptureVideoProfile : IMediaCaptureVideoProfile_raw, generate<IMediaCaptureVideoProfile> {};

// MediaCaptureVideoProfileMediaDescription
template<typename X> struct statics<MediaCaptureVideoProfileMediaDescription, X> : X {
	typedef typename X::root_type MediaCaptureVideoProfileMediaDescription;
};
struct MediaCaptureVideoProfileMediaDescription : generate<MediaCaptureVideoProfileMediaDescription> {};

// IMediaCaptureVideoProfile2
struct IMediaCaptureVideoProfile2_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameSourceInfos(Foundation::Collections::IVectorView<Frames::MediaFrameSourceInfo*>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* *value);
};
template<typename X> struct IMediaCaptureVideoProfile2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Frames::MediaFrameSourceInfo>>> get() { Foundation::Collections::IVectorView<Frames::MediaFrameSourceInfo*>* value; hrcheck(enc(&IMediaCaptureVideoProfile2_adaptor::FrameSourceInfos)->_get_FrameSourceInfos(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Frames::MediaFrameSourceInfo>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Frames::MediaFrameSourceInfo>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Frames::MediaFrameSourceInfo>>> operator->() { return get(); }
		} FrameSourceInfos;
		struct : property {
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> get() { Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* value; hrcheck(enc(&IMediaCaptureVideoProfile2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<Platform::Guid, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator->() { return get(); }
		} Properties;
	};
	IMediaCaptureVideoProfile2_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureVideoProfile2, X> : Windows::Media::Capture::IMediaCaptureVideoProfile2_adaptor<X> { typedef adapt IMediaCaptureVideoProfile2; };
struct IMediaCaptureVideoProfile2 : IMediaCaptureVideoProfile2_raw, generate<IMediaCaptureVideoProfile2> {};

// MediaCaptureVideoProfile
template<typename X> struct statics<MediaCaptureVideoProfile, X> : X {
	typedef typename X::root_type MediaCaptureVideoProfile;
};
struct MediaCaptureVideoProfile : generate<MediaCaptureVideoProfile> {};

// IMediaCaptureInitializationSettings
struct IMediaCaptureInitializationSettings_raw : IInspectable {
	virtual STDMETHODIMP _put_AudioDeviceId(HSTRING value);
	virtual STDMETHODIMP _get_AudioDeviceId(HSTRING *value);
	virtual STDMETHODIMP _put_VideoDeviceId(HSTRING value);
	virtual STDMETHODIMP _get_VideoDeviceId(HSTRING *value);
	virtual STDMETHODIMP _put_StreamingCaptureMode(Capture::StreamingCaptureMode value);
	virtual STDMETHODIMP _get_StreamingCaptureMode(Capture::StreamingCaptureMode *value);
	virtual STDMETHODIMP _put_PhotoCaptureSource(Capture::PhotoCaptureSource value);
	virtual STDMETHODIMP _get_PhotoCaptureSource(Capture::PhotoCaptureSource *value);
};
template<typename X> struct IMediaCaptureInitializationSettings_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::AudioDeviceId)->_get_AudioDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::AudioDeviceId)->_put_AudioDeviceId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AudioDeviceId;
		struct : property {
			Capture::PhotoCaptureSource get() { Capture::PhotoCaptureSource value; hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::PhotoCaptureSource)->_get_PhotoCaptureSource(&value)); return value; }
			Capture::PhotoCaptureSource operator()() { return get(); }
			operator Capture::PhotoCaptureSource () { return get(); }
			void put(Capture::PhotoCaptureSource value) { hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::PhotoCaptureSource)->_put_PhotoCaptureSource(value)); }
			void operator=(Capture::PhotoCaptureSource value) { put(value); }
			void operator()(Capture::PhotoCaptureSource value) { put(value); }
		} PhotoCaptureSource;
		struct : property {
			Capture::StreamingCaptureMode get() { Capture::StreamingCaptureMode value; hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::StreamingCaptureMode)->_get_StreamingCaptureMode(&value)); return value; }
			Capture::StreamingCaptureMode operator()() { return get(); }
			operator Capture::StreamingCaptureMode () { return get(); }
			void put(Capture::StreamingCaptureMode value) { hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::StreamingCaptureMode)->_put_StreamingCaptureMode(value)); }
			void operator=(Capture::StreamingCaptureMode value) { put(value); }
			void operator()(Capture::StreamingCaptureMode value) { put(value); }
		} StreamingCaptureMode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::VideoDeviceId)->_get_VideoDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMediaCaptureInitializationSettings_adaptor::VideoDeviceId)->_put_VideoDeviceId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} VideoDeviceId;
	};
	IMediaCaptureInitializationSettings_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureInitializationSettings, X> : Windows::Media::Capture::IMediaCaptureInitializationSettings_adaptor<X> { typedef adapt IMediaCaptureInitializationSettings; };
struct IMediaCaptureInitializationSettings : IMediaCaptureInitializationSettings_raw, generate<IMediaCaptureInitializationSettings> {};

// IMediaCaptureInitializationSettings2
struct IMediaCaptureInitializationSettings2_raw : IInspectable {
	virtual STDMETHODIMP _put_MediaCategory(Capture::MediaCategory value);
	virtual STDMETHODIMP _get_MediaCategory(Capture::MediaCategory *value);
	virtual STDMETHODIMP _put_AudioProcessing(Media::AudioProcessing value);
	virtual STDMETHODIMP _get_AudioProcessing(Media::AudioProcessing *value);
};
template<typename X> struct IMediaCaptureInitializationSettings2_adaptor : X {
	union {
		struct : property {
			Media::AudioProcessing get() { Media::AudioProcessing value; hrcheck(enc(&IMediaCaptureInitializationSettings2_adaptor::AudioProcessing)->_get_AudioProcessing(&value)); return value; }
			Media::AudioProcessing operator()() { return get(); }
			operator Media::AudioProcessing () { return get(); }
			void put(Media::AudioProcessing value) { hrcheck(enc(&IMediaCaptureInitializationSettings2_adaptor::AudioProcessing)->_put_AudioProcessing(value)); }
			void operator=(Media::AudioProcessing value) { put(value); }
			void operator()(Media::AudioProcessing value) { put(value); }
		} AudioProcessing;
		struct : property {
			Capture::MediaCategory get() { Capture::MediaCategory value; hrcheck(enc(&IMediaCaptureInitializationSettings2_adaptor::MediaCategory)->_get_MediaCategory(&value)); return value; }
			Capture::MediaCategory operator()() { return get(); }
			operator Capture::MediaCategory () { return get(); }
			void put(Capture::MediaCategory value) { hrcheck(enc(&IMediaCaptureInitializationSettings2_adaptor::MediaCategory)->_put_MediaCategory(value)); }
			void operator=(Capture::MediaCategory value) { put(value); }
			void operator()(Capture::MediaCategory value) { put(value); }
		} MediaCategory;
	};
	IMediaCaptureInitializationSettings2_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureInitializationSettings2, X> : Windows::Media::Capture::IMediaCaptureInitializationSettings2_adaptor<X> { typedef adapt IMediaCaptureInitializationSettings2; };
struct IMediaCaptureInitializationSettings2 : IMediaCaptureInitializationSettings2_raw, generate<IMediaCaptureInitializationSettings2> {};

// IMediaCaptureInitializationSettings3
struct IMediaCaptureInitializationSettings3_raw : IInspectable {
	virtual STDMETHODIMP _put_AudioSource(Media::Core::IMediaSource* value);
	virtual STDMETHODIMP _get_AudioSource(Media::Core::IMediaSource* *value);
	virtual STDMETHODIMP _put_VideoSource(Media::Core::IMediaSource* value);
	virtual STDMETHODIMP _get_VideoSource(Media::Core::IMediaSource* *value);
};
template<typename X> struct IMediaCaptureInitializationSettings3_adaptor : X {
	union {
		struct : property {
			ptr<Media::Core::IMediaSource> get() { Media::Core::IMediaSource* value; hrcheck(enc(&IMediaCaptureInitializationSettings3_adaptor::AudioSource)->_get_AudioSource(&value)); return from_abi(value); }
			ptr<Media::Core::IMediaSource> operator()() { return get(); }
			operator ptr<Media::Core::IMediaSource> () { return get(); }
			ptr<Media::Core::IMediaSource> operator->() { return get(); }
			void put(pptr<Media::Core::IMediaSource> value) { hrcheck(enc(&IMediaCaptureInitializationSettings3_adaptor::AudioSource)->_put_AudioSource(value)); }
			void operator=(pptr<Media::Core::IMediaSource> value) { put(value); }
			void operator()(pptr<Media::Core::IMediaSource> value) { put(value); }
		} AudioSource;
		struct : property {
			ptr<Media::Core::IMediaSource> get() { Media::Core::IMediaSource* value; hrcheck(enc(&IMediaCaptureInitializationSettings3_adaptor::VideoSource)->_get_VideoSource(&value)); return from_abi(value); }
			ptr<Media::Core::IMediaSource> operator()() { return get(); }
			operator ptr<Media::Core::IMediaSource> () { return get(); }
			ptr<Media::Core::IMediaSource> operator->() { return get(); }
			void put(pptr<Media::Core::IMediaSource> value) { hrcheck(enc(&IMediaCaptureInitializationSettings3_adaptor::VideoSource)->_put_VideoSource(value)); }
			void operator=(pptr<Media::Core::IMediaSource> value) { put(value); }
			void operator()(pptr<Media::Core::IMediaSource> value) { put(value); }
		} VideoSource;
	};
	IMediaCaptureInitializationSettings3_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureInitializationSettings3, X> : Windows::Media::Capture::IMediaCaptureInitializationSettings3_adaptor<X> { typedef adapt IMediaCaptureInitializationSettings3; };
struct IMediaCaptureInitializationSettings3 : IMediaCaptureInitializationSettings3_raw, generate<IMediaCaptureInitializationSettings3> {};

// IMediaCaptureInitializationSettings4
struct IMediaCaptureInitializationSettings4_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoProfile(MediaCaptureVideoProfile* *value);
	virtual STDMETHODIMP _put_VideoProfile(MediaCaptureVideoProfile* value);
	virtual STDMETHODIMP _get_PreviewMediaDescription(MediaCaptureVideoProfileMediaDescription* *value);
	virtual STDMETHODIMP _put_PreviewMediaDescription(MediaCaptureVideoProfileMediaDescription* value);
	virtual STDMETHODIMP _get_RecordMediaDescription(MediaCaptureVideoProfileMediaDescription* *value);
	virtual STDMETHODIMP _put_RecordMediaDescription(MediaCaptureVideoProfileMediaDescription* value);
	virtual STDMETHODIMP _get_PhotoMediaDescription(MediaCaptureVideoProfileMediaDescription* *value);
	virtual STDMETHODIMP _put_PhotoMediaDescription(MediaCaptureVideoProfileMediaDescription* value);
};
template<typename X> struct IMediaCaptureInitializationSettings4_adaptor : X {
	union {
		struct : property {
			ptr<MediaCaptureVideoProfileMediaDescription> get() { MediaCaptureVideoProfileMediaDescription* value; hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::PhotoMediaDescription)->_get_PhotoMediaDescription(&value)); return from_abi(value); }
			ptr<MediaCaptureVideoProfileMediaDescription> operator()() { return get(); }
			operator ptr<MediaCaptureVideoProfileMediaDescription> () { return get(); }
			ptr<MediaCaptureVideoProfileMediaDescription> operator->() { return get(); }
			void put(pptr<MediaCaptureVideoProfileMediaDescription> value) { hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::PhotoMediaDescription)->_put_PhotoMediaDescription(value)); }
			void operator=(pptr<MediaCaptureVideoProfileMediaDescription> value) { put(value); }
			void operator()(pptr<MediaCaptureVideoProfileMediaDescription> value) { put(value); }
		} PhotoMediaDescription;
		struct : property {
			ptr<MediaCaptureVideoProfileMediaDescription> get() { MediaCaptureVideoProfileMediaDescription* value; hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::PreviewMediaDescription)->_get_PreviewMediaDescription(&value)); return from_abi(value); }
			ptr<MediaCaptureVideoProfileMediaDescription> operator()() { return get(); }
			operator ptr<MediaCaptureVideoProfileMediaDescription> () { return get(); }
			ptr<MediaCaptureVideoProfileMediaDescription> operator->() { return get(); }
			void put(pptr<MediaCaptureVideoProfileMediaDescription> value) { hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::PreviewMediaDescription)->_put_PreviewMediaDescription(value)); }
			void operator=(pptr<MediaCaptureVideoProfileMediaDescription> value) { put(value); }
			void operator()(pptr<MediaCaptureVideoProfileMediaDescription> value) { put(value); }
		} PreviewMediaDescription;
		struct : property {
			ptr<MediaCaptureVideoProfileMediaDescription> get() { MediaCaptureVideoProfileMediaDescription* value; hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::RecordMediaDescription)->_get_RecordMediaDescription(&value)); return from_abi(value); }
			ptr<MediaCaptureVideoProfileMediaDescription> operator()() { return get(); }
			operator ptr<MediaCaptureVideoProfileMediaDescription> () { return get(); }
			ptr<MediaCaptureVideoProfileMediaDescription> operator->() { return get(); }
			void put(pptr<MediaCaptureVideoProfileMediaDescription> value) { hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::RecordMediaDescription)->_put_RecordMediaDescription(value)); }
			void operator=(pptr<MediaCaptureVideoProfileMediaDescription> value) { put(value); }
			void operator()(pptr<MediaCaptureVideoProfileMediaDescription> value) { put(value); }
		} RecordMediaDescription;
		struct : property {
			ptr<MediaCaptureVideoProfile> get() { MediaCaptureVideoProfile* value; hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::VideoProfile)->_get_VideoProfile(&value)); return from_abi(value); }
			ptr<MediaCaptureVideoProfile> operator()() { return get(); }
			operator ptr<MediaCaptureVideoProfile> () { return get(); }
			ptr<MediaCaptureVideoProfile> operator->() { return get(); }
			void put(pptr<MediaCaptureVideoProfile> value) { hrcheck(enc(&IMediaCaptureInitializationSettings4_adaptor::VideoProfile)->_put_VideoProfile(value)); }
			void operator=(pptr<MediaCaptureVideoProfile> value) { put(value); }
			void operator()(pptr<MediaCaptureVideoProfile> value) { put(value); }
		} VideoProfile;
	};
	IMediaCaptureInitializationSettings4_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureInitializationSettings4, X> : Windows::Media::Capture::IMediaCaptureInitializationSettings4_adaptor<X> { typedef adapt IMediaCaptureInitializationSettings4; };
struct IMediaCaptureInitializationSettings4 : IMediaCaptureInitializationSettings4_raw, generate<IMediaCaptureInitializationSettings4> {};

// IMediaCaptureInitializationSettings5
struct IMediaCaptureInitializationSettings5_raw : IInspectable {
	virtual STDMETHODIMP _get_SourceGroup(Frames::MediaFrameSourceGroup* *value);
	virtual STDMETHODIMP _put_SourceGroup(Frames::MediaFrameSourceGroup* value);
	virtual STDMETHODIMP _get_SharingMode(MediaCaptureSharingMode *value);
	virtual STDMETHODIMP _put_SharingMode(MediaCaptureSharingMode value);
	virtual STDMETHODIMP _get_MemoryPreference(MediaCaptureMemoryPreference *value);
	virtual STDMETHODIMP _put_MemoryPreference(MediaCaptureMemoryPreference value);
};
template<typename X> struct IMediaCaptureInitializationSettings5_adaptor : X {
	union {
		struct : property {
			MediaCaptureMemoryPreference get() { MediaCaptureMemoryPreference value; hrcheck(enc(&IMediaCaptureInitializationSettings5_adaptor::MemoryPreference)->_get_MemoryPreference(&value)); return value; }
			MediaCaptureMemoryPreference operator()() { return get(); }
			operator MediaCaptureMemoryPreference () { return get(); }
			void put(MediaCaptureMemoryPreference value) { hrcheck(enc(&IMediaCaptureInitializationSettings5_adaptor::MemoryPreference)->_put_MemoryPreference(value)); }
			void operator=(MediaCaptureMemoryPreference value) { put(value); }
			void operator()(MediaCaptureMemoryPreference value) { put(value); }
		} MemoryPreference;
		struct : property {
			MediaCaptureSharingMode get() { MediaCaptureSharingMode value; hrcheck(enc(&IMediaCaptureInitializationSettings5_adaptor::SharingMode)->_get_SharingMode(&value)); return value; }
			MediaCaptureSharingMode operator()() { return get(); }
			operator MediaCaptureSharingMode () { return get(); }
			void put(MediaCaptureSharingMode value) { hrcheck(enc(&IMediaCaptureInitializationSettings5_adaptor::SharingMode)->_put_SharingMode(value)); }
			void operator=(MediaCaptureSharingMode value) { put(value); }
			void operator()(MediaCaptureSharingMode value) { put(value); }
		} SharingMode;
		struct : property {
			ptr<Frames::MediaFrameSourceGroup> get() { Frames::MediaFrameSourceGroup* value; hrcheck(enc(&IMediaCaptureInitializationSettings5_adaptor::SourceGroup)->_get_SourceGroup(&value)); return from_abi(value); }
			ptr<Frames::MediaFrameSourceGroup> operator()() { return get(); }
			operator ptr<Frames::MediaFrameSourceGroup> () { return get(); }
			ptr<Frames::MediaFrameSourceGroup> operator->() { return get(); }
			void put(pptr<Frames::MediaFrameSourceGroup> value) { hrcheck(enc(&IMediaCaptureInitializationSettings5_adaptor::SourceGroup)->_put_SourceGroup(value)); }
			void operator=(pptr<Frames::MediaFrameSourceGroup> value) { put(value); }
			void operator()(pptr<Frames::MediaFrameSourceGroup> value) { put(value); }
		} SourceGroup;
	};
	IMediaCaptureInitializationSettings5_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureInitializationSettings5, X> : Windows::Media::Capture::IMediaCaptureInitializationSettings5_adaptor<X> { typedef adapt IMediaCaptureInitializationSettings5; };
struct IMediaCaptureInitializationSettings5 : IMediaCaptureInitializationSettings5_raw, generate<IMediaCaptureInitializationSettings5> {};

// IMediaCaptureInitializationSettings6
struct IMediaCaptureInitializationSettings6_raw : IInspectable {
	virtual STDMETHODIMP _get_AlwaysPlaySystemShutterSound(bool *value);
	virtual STDMETHODIMP _put_AlwaysPlaySystemShutterSound(bool value);
};
template<typename X> struct IMediaCaptureInitializationSettings6_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaCaptureInitializationSettings6_adaptor::AlwaysPlaySystemShutterSound)->_get_AlwaysPlaySystemShutterSound(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaCaptureInitializationSettings6_adaptor::AlwaysPlaySystemShutterSound)->_put_AlwaysPlaySystemShutterSound(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AlwaysPlaySystemShutterSound;
	};
	IMediaCaptureInitializationSettings6_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureInitializationSettings6, X> : Windows::Media::Capture::IMediaCaptureInitializationSettings6_adaptor<X> { typedef adapt IMediaCaptureInitializationSettings6; };
struct IMediaCaptureInitializationSettings6 : IMediaCaptureInitializationSettings6_raw, generate<IMediaCaptureInitializationSettings6> {};

// MediaCaptureInitializationSettings
template<typename X> struct statics<MediaCaptureInitializationSettings, X> : X {
	typedef typename X::root_type MediaCaptureInitializationSettings;
};
struct MediaCaptureInitializationSettings : generate<MediaCaptureInitializationSettings> {};

// IMediaCaptureSettings3
struct IMediaCaptureSettings3_raw : IInspectable {
	virtual STDMETHODIMP _get_Direct3D11Device(Graphics::DirectX::Direct3D11::IDirect3DDevice* *value);
};
template<typename X> struct IMediaCaptureSettings3_adaptor : X {
	union {
		struct : property {
			ptr<Graphics::DirectX::Direct3D11::IDirect3DDevice> get() { Graphics::DirectX::Direct3D11::IDirect3DDevice* value; hrcheck(enc(&IMediaCaptureSettings3_adaptor::Direct3D11Device)->_get_Direct3D11Device(&value)); return from_abi(value); }
			ptr<Graphics::DirectX::Direct3D11::IDirect3DDevice> operator()() { return get(); }
			operator ptr<Graphics::DirectX::Direct3D11::IDirect3DDevice> () { return get(); }
			ptr<Graphics::DirectX::Direct3D11::IDirect3DDevice> operator->() { return get(); }
		} Direct3D11Device;
	};
	IMediaCaptureSettings3_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureSettings3, X> : Windows::Media::Capture::IMediaCaptureSettings3_adaptor<X> { typedef adapt IMediaCaptureSettings3; };
struct IMediaCaptureSettings3 : IMediaCaptureSettings3_raw, generate<IMediaCaptureSettings3> {};

// IMediaCaptureSettings2
struct IMediaCaptureSettings2_raw : IInspectable {
	virtual STDMETHODIMP _get_ConcurrentRecordAndPhotoSupported(bool *value);
	virtual STDMETHODIMP _get_ConcurrentRecordAndPhotoSequenceSupported(bool *value);
	virtual STDMETHODIMP _get_CameraSoundRequiredForRegion(bool *value);
	virtual STDMETHODIMP _get_Horizontal35mmEquivalentFocalLength(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_PitchOffsetDegrees(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_Vertical35mmEquivalentFocalLength(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_MediaCategory(Capture::MediaCategory *value);
	virtual STDMETHODIMP _get_AudioProcessing(Media::AudioProcessing *value);
};
template<typename X> struct IMediaCaptureSettings2_adaptor : X {
	union {
		struct : property {
			Media::AudioProcessing get() { Media::AudioProcessing value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::AudioProcessing)->_get_AudioProcessing(&value)); return value; }
			Media::AudioProcessing operator()() { return get(); }
			operator Media::AudioProcessing () { return get(); }
		} AudioProcessing;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::CameraSoundRequiredForRegion)->_get_CameraSoundRequiredForRegion(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CameraSoundRequiredForRegion;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::ConcurrentRecordAndPhotoSequenceSupported)->_get_ConcurrentRecordAndPhotoSequenceSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ConcurrentRecordAndPhotoSequenceSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::ConcurrentRecordAndPhotoSupported)->_get_ConcurrentRecordAndPhotoSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ConcurrentRecordAndPhotoSupported;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::Horizontal35mmEquivalentFocalLength)->_get_Horizontal35mmEquivalentFocalLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} Horizontal35mmEquivalentFocalLength;
		struct : property {
			Capture::MediaCategory get() { Capture::MediaCategory value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::MediaCategory)->_get_MediaCategory(&value)); return value; }
			Capture::MediaCategory operator()() { return get(); }
			operator Capture::MediaCategory () { return get(); }
		} MediaCategory;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::PitchOffsetDegrees)->_get_PitchOffsetDegrees(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} PitchOffsetDegrees;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IMediaCaptureSettings2_adaptor::Vertical35mmEquivalentFocalLength)->_get_Vertical35mmEquivalentFocalLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} Vertical35mmEquivalentFocalLength;
	};
	IMediaCaptureSettings2_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureSettings2, X> : Windows::Media::Capture::IMediaCaptureSettings2_adaptor<X> { typedef adapt IMediaCaptureSettings2; };
struct IMediaCaptureSettings2 : IMediaCaptureSettings2_raw, generate<IMediaCaptureSettings2> {};

// IMediaCaptureSettings
struct IMediaCaptureSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioDeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_VideoDeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_StreamingCaptureMode(Capture::StreamingCaptureMode *value);
	virtual STDMETHODIMP _get_PhotoCaptureSource(Capture::PhotoCaptureSource *value);
	virtual STDMETHODIMP _get_VideoDeviceCharacteristic(Capture::VideoDeviceCharacteristic *value);
};
template<typename X> struct IMediaCaptureSettings_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureSettings_adaptor::AudioDeviceId)->_get_AudioDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AudioDeviceId;
		struct : property {
			Capture::PhotoCaptureSource get() { Capture::PhotoCaptureSource value; hrcheck(enc(&IMediaCaptureSettings_adaptor::PhotoCaptureSource)->_get_PhotoCaptureSource(&value)); return value; }
			Capture::PhotoCaptureSource operator()() { return get(); }
			operator Capture::PhotoCaptureSource () { return get(); }
		} PhotoCaptureSource;
		struct : property {
			Capture::StreamingCaptureMode get() { Capture::StreamingCaptureMode value; hrcheck(enc(&IMediaCaptureSettings_adaptor::StreamingCaptureMode)->_get_StreamingCaptureMode(&value)); return value; }
			Capture::StreamingCaptureMode operator()() { return get(); }
			operator Capture::StreamingCaptureMode () { return get(); }
		} StreamingCaptureMode;
		struct : property {
			Capture::VideoDeviceCharacteristic get() { Capture::VideoDeviceCharacteristic value; hrcheck(enc(&IMediaCaptureSettings_adaptor::VideoDeviceCharacteristic)->_get_VideoDeviceCharacteristic(&value)); return value; }
			Capture::VideoDeviceCharacteristic operator()() { return get(); }
			operator Capture::VideoDeviceCharacteristic () { return get(); }
		} VideoDeviceCharacteristic;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureSettings_adaptor::VideoDeviceId)->_get_VideoDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} VideoDeviceId;
	};
	IMediaCaptureSettings_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureSettings, X> : Windows::Media::Capture::IMediaCaptureSettings_adaptor<X> { typedef adapt IMediaCaptureSettings; };
struct IMediaCaptureSettings : IMediaCaptureSettings_raw, generate<IMediaCaptureSettings> {};

// MediaCaptureSettings
template<typename X> struct statics<MediaCaptureSettings, X> : X {
	typedef typename X::root_type MediaCaptureSettings;
};
struct MediaCaptureSettings : generate<MediaCaptureSettings> {};

// ILowLagMediaRecording3
struct ILowLagMediaRecording3_raw : IInspectable {
	virtual STDMETHODIMP _PauseWithResultAsync(Devices::MediaCapturePauseBehavior behavior, Foundation::IAsyncOperation<MediaCapturePauseResult*>* *operation);
	virtual STDMETHODIMP _StopWithResultAsync(Foundation::IAsyncOperation<MediaCaptureStopResult*>* *operation);
};
template<typename X> struct ILowLagMediaRecording3_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<MediaCapturePauseResult>>> PauseWithResultAsync(Devices::MediaCapturePauseBehavior behavior) { Foundation::IAsyncOperation<MediaCapturePauseResult*>* operation; hrcheck(X::get()->_PauseWithResultAsync(behavior, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<MediaCaptureStopResult>>> StopWithResultAsync() { Foundation::IAsyncOperation<MediaCaptureStopResult*>* operation; hrcheck(X::get()->_StopWithResultAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<ILowLagMediaRecording3, X> : Windows::Media::Capture::ILowLagMediaRecording3_adaptor<X> { typedef adapt ILowLagMediaRecording3; };
struct ILowLagMediaRecording3 : ILowLagMediaRecording3_raw, generate<ILowLagMediaRecording3> {};

// ILowLagMediaRecording2
struct ILowLagMediaRecording2_raw : IInspectable {
	virtual STDMETHODIMP _PauseAsync(Devices::MediaCapturePauseBehavior behavior, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ResumeAsync(Foundation::IAsyncAction* *operation);
};
template<typename X> struct ILowLagMediaRecording2_adaptor : X {
	ptr<Foundation::IAsyncAction> PauseAsync(Devices::MediaCapturePauseBehavior behavior) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_PauseAsync(behavior, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ResumeAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ResumeAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<ILowLagMediaRecording2, X> : Windows::Media::Capture::ILowLagMediaRecording2_adaptor<X> { typedef adapt ILowLagMediaRecording2; };
struct ILowLagMediaRecording2 : ILowLagMediaRecording2_raw, generate<ILowLagMediaRecording2> {};

// ILowLagMediaRecording
struct ILowLagMediaRecording_raw : IInspectable {
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _StopAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _FinishAsync(Foundation::IAsyncAction* *operation);
};
template<typename X> struct ILowLagMediaRecording_adaptor : X {
	ptr<Foundation::IAsyncAction> StartAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_StartAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> StopAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_StopAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> FinishAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_FinishAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<ILowLagMediaRecording, X> : Windows::Media::Capture::ILowLagMediaRecording_adaptor<X> { typedef adapt ILowLagMediaRecording; };
struct ILowLagMediaRecording : ILowLagMediaRecording_raw, generate<ILowLagMediaRecording> {};

// LowLagMediaRecording
template<typename X> struct statics<LowLagMediaRecording, X> : X {
	typedef typename X::root_type LowLagMediaRecording;
};
struct LowLagMediaRecording : generate<LowLagMediaRecording> {};

// ILowLagPhotoCapture
struct ILowLagPhotoCapture_raw : IInspectable {
	virtual STDMETHODIMP _CaptureAsync(Foundation::IAsyncOperation<CapturedPhoto*>* *operation);
	virtual STDMETHODIMP _FinishAsync(Foundation::IAsyncAction* *operation);
};
template<typename X> struct ILowLagPhotoCapture_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<CapturedPhoto>>> CaptureAsync() { Foundation::IAsyncOperation<CapturedPhoto*>* operation; hrcheck(X::get()->_CaptureAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> FinishAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_FinishAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<ILowLagPhotoCapture, X> : Windows::Media::Capture::ILowLagPhotoCapture_adaptor<X> { typedef adapt ILowLagPhotoCapture; };
struct ILowLagPhotoCapture : ILowLagPhotoCapture_raw, generate<ILowLagPhotoCapture> {};

// LowLagPhotoCapture
template<typename X> struct statics<LowLagPhotoCapture, X> : X {
	typedef typename X::root_type LowLagPhotoCapture;
};
struct LowLagPhotoCapture : generate<LowLagPhotoCapture> {};

// ILowLagPhotoSequenceCapture
struct ILowLagPhotoSequenceCapture_raw : IInspectable {
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _StopAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _FinishAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _add_PhotoCaptured(Foundation::TypedEventHandler<LowLagPhotoSequenceCapture*, PhotoCapturedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PhotoCaptured(Foundation::EventRegistrationToken token);
};
template<typename X> struct ILowLagPhotoSequenceCapture_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LowLagPhotoSequenceCapture>, ptr<PhotoCapturedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILowLagPhotoSequenceCapture_adaptor::PhotoCaptured)->_add_PhotoCaptured(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILowLagPhotoSequenceCapture_adaptor::PhotoCaptured)->_remove_PhotoCaptured(token)); }
		} PhotoCaptured;
	};
	ptr<Foundation::IAsyncAction> StartAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_StartAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> StopAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_StopAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> FinishAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_FinishAsync(&operation)); return from_abi(operation); }
	ILowLagPhotoSequenceCapture_adaptor() {}
};
template<typename X> struct adapt<ILowLagPhotoSequenceCapture, X> : Windows::Media::Capture::ILowLagPhotoSequenceCapture_adaptor<X> { typedef adapt ILowLagPhotoSequenceCapture; };
struct ILowLagPhotoSequenceCapture : ILowLagPhotoSequenceCapture_raw, generate<ILowLagPhotoSequenceCapture> {};

// LowLagPhotoSequenceCapture
template<typename X> struct statics<LowLagPhotoSequenceCapture, X> : X {
	typedef typename X::root_type LowLagPhotoSequenceCapture;
};
struct LowLagPhotoSequenceCapture : generate<LowLagPhotoSequenceCapture> {};

// IMediaCaptureFocusChangedEventArgs
struct IMediaCaptureFocusChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FocusState(Devices::MediaCaptureFocusState *value);
};
template<typename X> struct IMediaCaptureFocusChangedEventArgs_adaptor : X {
	union {
		struct : property {
			Devices::MediaCaptureFocusState get() { Devices::MediaCaptureFocusState value; hrcheck(enc(&IMediaCaptureFocusChangedEventArgs_adaptor::FocusState)->_get_FocusState(&value)); return value; }
			Devices::MediaCaptureFocusState operator()() { return get(); }
			operator Devices::MediaCaptureFocusState () { return get(); }
		} FocusState;
	};
	IMediaCaptureFocusChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureFocusChangedEventArgs, X> : Windows::Media::Capture::IMediaCaptureFocusChangedEventArgs_adaptor<X> { typedef adapt IMediaCaptureFocusChangedEventArgs; };
struct IMediaCaptureFocusChangedEventArgs : IMediaCaptureFocusChangedEventArgs_raw, generate<IMediaCaptureFocusChangedEventArgs> {};

// MediaCaptureFocusChangedEventArgs
template<typename X> struct statics<MediaCaptureFocusChangedEventArgs, X> : X {
	typedef typename X::root_type MediaCaptureFocusChangedEventArgs;
};
struct MediaCaptureFocusChangedEventArgs : generate<MediaCaptureFocusChangedEventArgs> {};

// IPhotoConfirmationCapturedEventArgs
struct IPhotoConfirmationCapturedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Frame(CapturedFrame* *value);
	virtual STDMETHODIMP _get_CaptureTimeOffset(Foundation::TimeSpan *value);
};
template<typename X> struct IPhotoConfirmationCapturedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPhotoConfirmationCapturedEventArgs_adaptor::CaptureTimeOffset)->_get_CaptureTimeOffset(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} CaptureTimeOffset;
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&IPhotoConfirmationCapturedEventArgs_adaptor::Frame)->_get_Frame(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Frame;
	};
	IPhotoConfirmationCapturedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPhotoConfirmationCapturedEventArgs, X> : Windows::Media::Capture::IPhotoConfirmationCapturedEventArgs_adaptor<X> { typedef adapt IPhotoConfirmationCapturedEventArgs; };
struct IPhotoConfirmationCapturedEventArgs : IPhotoConfirmationCapturedEventArgs_raw, generate<IPhotoConfirmationCapturedEventArgs> {};

// PhotoConfirmationCapturedEventArgs
template<typename X> struct statics<PhotoConfirmationCapturedEventArgs, X> : X {
	typedef typename X::root_type PhotoConfirmationCapturedEventArgs;
};
struct PhotoConfirmationCapturedEventArgs : generate<PhotoConfirmationCapturedEventArgs> {};

// IAdvancedPhotoCapture
struct IAdvancedPhotoCapture_raw : IInspectable {
	virtual STDMETHODIMP _CaptureAsync(Foundation::IAsyncOperation<AdvancedCapturedPhoto*>* *operation);
	virtual STDMETHODIMP _CaptureWithContextAsync(IInspectable* context, Foundation::IAsyncOperation<AdvancedCapturedPhoto*>* *operation);
	virtual STDMETHODIMP _add_OptionalReferencePhotoCaptured(Foundation::TypedEventHandler<AdvancedPhotoCapture*, OptionalReferencePhotoCapturedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_OptionalReferencePhotoCaptured(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AllPhotosCaptured(Foundation::TypedEventHandler<AdvancedPhotoCapture*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AllPhotosCaptured(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _FinishAsync(Foundation::IAsyncAction* *operation);
};
template<typename X> struct IAdvancedPhotoCapture_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdvancedPhotoCapture>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdvancedPhotoCapture_adaptor::AllPhotosCaptured)->_add_AllPhotosCaptured(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdvancedPhotoCapture_adaptor::AllPhotosCaptured)->_remove_AllPhotosCaptured(token)); }
		} AllPhotosCaptured;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdvancedPhotoCapture>, ptr<OptionalReferencePhotoCapturedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdvancedPhotoCapture_adaptor::OptionalReferencePhotoCaptured)->_add_OptionalReferencePhotoCaptured(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdvancedPhotoCapture_adaptor::OptionalReferencePhotoCaptured)->_remove_OptionalReferencePhotoCaptured(token)); }
		} OptionalReferencePhotoCaptured;
	};
	ptr<Foundation::IAsyncOperation<ptr<AdvancedCapturedPhoto>>> CaptureAsync() { Foundation::IAsyncOperation<AdvancedCapturedPhoto*>* operation; hrcheck(X::get()->_CaptureAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<AdvancedCapturedPhoto>>> CaptureAsync(object_ref context) { Foundation::IAsyncOperation<AdvancedCapturedPhoto*>* operation; hrcheck(X::get()->_CaptureWithContextAsync(context, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> FinishAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_FinishAsync(&operation)); return from_abi(operation); }
	IAdvancedPhotoCapture_adaptor() {}
};
template<typename X> struct adapt<IAdvancedPhotoCapture, X> : Windows::Media::Capture::IAdvancedPhotoCapture_adaptor<X> { typedef adapt IAdvancedPhotoCapture; };
struct IAdvancedPhotoCapture : IAdvancedPhotoCapture_raw, generate<IAdvancedPhotoCapture> {};

// AdvancedPhotoCapture
template<typename X> struct statics<AdvancedPhotoCapture, X> : X {
	typedef typename X::root_type AdvancedPhotoCapture;
};
struct AdvancedPhotoCapture : generate<AdvancedPhotoCapture> {
	using IAdvancedPhotoCapture::CaptureAsync;
};

// IMediaCapturePauseResult
struct IMediaCapturePauseResult_raw : IInspectable {
	virtual STDMETHODIMP _get_LastFrame(VideoFrame* *value);
	virtual STDMETHODIMP _get_RecordDuration(Foundation::TimeSpan *value);
};
template<typename X> struct IMediaCapturePauseResult_adaptor : X {
	union {
		struct : property {
			ptr<VideoFrame> get() { VideoFrame* value; hrcheck(enc(&IMediaCapturePauseResult_adaptor::LastFrame)->_get_LastFrame(&value)); return from_abi(value); }
			ptr<VideoFrame> operator()() { return get(); }
			operator ptr<VideoFrame> () { return get(); }
			ptr<VideoFrame> operator->() { return get(); }
		} LastFrame;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaCapturePauseResult_adaptor::RecordDuration)->_get_RecordDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RecordDuration;
	};
	IMediaCapturePauseResult_adaptor() {}
};
template<typename X> struct adapt<IMediaCapturePauseResult, X> : Windows::Media::Capture::IMediaCapturePauseResult_adaptor<X> { typedef adapt IMediaCapturePauseResult; };
struct IMediaCapturePauseResult : IMediaCapturePauseResult_raw, generate<IMediaCapturePauseResult> {};

// MediaCapturePauseResult
template<typename X> struct statics<MediaCapturePauseResult, X> : X {
	typedef typename X::root_type MediaCapturePauseResult;
};
struct MediaCapturePauseResult : generate<MediaCapturePauseResult> {};

// IMediaCaptureStopResult
struct IMediaCaptureStopResult_raw : IInspectable {
	virtual STDMETHODIMP _get_LastFrame(VideoFrame* *value);
	virtual STDMETHODIMP _get_RecordDuration(Foundation::TimeSpan *value);
};
template<typename X> struct IMediaCaptureStopResult_adaptor : X {
	union {
		struct : property {
			ptr<VideoFrame> get() { VideoFrame* value; hrcheck(enc(&IMediaCaptureStopResult_adaptor::LastFrame)->_get_LastFrame(&value)); return from_abi(value); }
			ptr<VideoFrame> operator()() { return get(); }
			operator ptr<VideoFrame> () { return get(); }
			ptr<VideoFrame> operator->() { return get(); }
		} LastFrame;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaCaptureStopResult_adaptor::RecordDuration)->_get_RecordDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RecordDuration;
	};
	IMediaCaptureStopResult_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureStopResult, X> : Windows::Media::Capture::IMediaCaptureStopResult_adaptor<X> { typedef adapt IMediaCaptureStopResult; };
struct IMediaCaptureStopResult : IMediaCaptureStopResult_raw, generate<IMediaCaptureStopResult> {};

// MediaCaptureStopResult
template<typename X> struct statics<MediaCaptureStopResult, X> : X {
	typedef typename X::root_type MediaCaptureStopResult;
};
struct MediaCaptureStopResult : generate<MediaCaptureStopResult> {};

// IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs
struct IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Status(MediaCaptureDeviceExclusiveControlStatus *value);
};
template<typename X> struct IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			MediaCaptureDeviceExclusiveControlStatus get() { MediaCaptureDeviceExclusiveControlStatus value; hrcheck(enc(&IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			MediaCaptureDeviceExclusiveControlStatus operator()() { return get(); }
			operator MediaCaptureDeviceExclusiveControlStatus () { return get(); }
		} Status;
	};
	IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs, X> : Windows::Media::Capture::IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_adaptor<X> { typedef adapt IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs; };
struct IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs : IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs_raw, generate<IMediaCaptureDeviceExclusiveControlStatusChangedEventArgs> {};

// MediaCaptureDeviceExclusiveControlStatusChangedEventArgs
template<typename X> struct statics<MediaCaptureDeviceExclusiveControlStatusChangedEventArgs, X> : X {
	typedef typename X::root_type MediaCaptureDeviceExclusiveControlStatusChangedEventArgs;
};
struct MediaCaptureDeviceExclusiveControlStatusChangedEventArgs : generate<MediaCaptureDeviceExclusiveControlStatusChangedEventArgs> {};

// ICapturedPhoto
struct ICapturedPhoto_raw : IInspectable {
	virtual STDMETHODIMP _get_Frame(CapturedFrame* *value);
	virtual STDMETHODIMP _get_Thumbnail(CapturedFrame* *value);
};
template<typename X> struct ICapturedPhoto_adaptor : X {
	union {
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&ICapturedPhoto_adaptor::Frame)->_get_Frame(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Frame;
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&ICapturedPhoto_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Thumbnail;
	};
	ICapturedPhoto_adaptor() {}
};
template<typename X> struct adapt<ICapturedPhoto, X> : Windows::Media::Capture::ICapturedPhoto_adaptor<X> { typedef adapt ICapturedPhoto; };
struct ICapturedPhoto : ICapturedPhoto_raw, generate<ICapturedPhoto> {};

// CapturedPhoto
template<typename X> struct statics<CapturedPhoto, X> : X {
	typedef typename X::root_type CapturedPhoto;
};
struct CapturedPhoto : generate<CapturedPhoto> {};

// IAdvancedCapturedPhoto2
struct IAdvancedCapturedPhoto2_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameBoundsRelativeToReferencePhoto(Foundation::IReference<Foundation::Rect>* *value);
};
template<typename X> struct IAdvancedCapturedPhoto2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::Rect>> get() { Foundation::IReference<Foundation::Rect>* value; hrcheck(enc(&IAdvancedCapturedPhoto2_adaptor::FrameBoundsRelativeToReferencePhoto)->_get_FrameBoundsRelativeToReferencePhoto(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::Rect>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::Rect>> () { return get(); }
			ptr<Foundation::IReference<Foundation::Rect>> operator->() { return get(); }
		} FrameBoundsRelativeToReferencePhoto;
	};
	IAdvancedCapturedPhoto2_adaptor() {}
};
template<typename X> struct adapt<IAdvancedCapturedPhoto2, X> : Windows::Media::Capture::IAdvancedCapturedPhoto2_adaptor<X> { typedef adapt IAdvancedCapturedPhoto2; };
struct IAdvancedCapturedPhoto2 : IAdvancedCapturedPhoto2_raw, generate<IAdvancedCapturedPhoto2> {};

// IAdvancedCapturedPhoto
struct IAdvancedCapturedPhoto_raw : IInspectable {
	virtual STDMETHODIMP _get_Frame(CapturedFrame* *value);
	virtual STDMETHODIMP _get_Mode(Devices::AdvancedPhotoMode *value);
	virtual STDMETHODIMP _get_Context(IInspectable* *value);
};
template<typename X> struct IAdvancedCapturedPhoto_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IAdvancedCapturedPhoto_adaptor::Context)->_get_Context(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Context;
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&IAdvancedCapturedPhoto_adaptor::Frame)->_get_Frame(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Frame;
		struct : property {
			Devices::AdvancedPhotoMode get() { Devices::AdvancedPhotoMode value; hrcheck(enc(&IAdvancedCapturedPhoto_adaptor::Mode)->_get_Mode(&value)); return value; }
			Devices::AdvancedPhotoMode operator()() { return get(); }
			operator Devices::AdvancedPhotoMode () { return get(); }
		} Mode;
	};
	IAdvancedCapturedPhoto_adaptor() {}
};
template<typename X> struct adapt<IAdvancedCapturedPhoto, X> : Windows::Media::Capture::IAdvancedCapturedPhoto_adaptor<X> { typedef adapt IAdvancedCapturedPhoto; };
struct IAdvancedCapturedPhoto : IAdvancedCapturedPhoto_raw, generate<IAdvancedCapturedPhoto> {};

// AdvancedCapturedPhoto
template<typename X> struct statics<AdvancedCapturedPhoto, X> : X {
	typedef typename X::root_type AdvancedCapturedPhoto;
};
struct AdvancedCapturedPhoto : generate<AdvancedCapturedPhoto> {};

// IOptionalReferencePhotoCapturedEventArgs
struct IOptionalReferencePhotoCapturedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Frame(CapturedFrame* *value);
	virtual STDMETHODIMP _get_Context(IInspectable* *value);
};
template<typename X> struct IOptionalReferencePhotoCapturedEventArgs_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IOptionalReferencePhotoCapturedEventArgs_adaptor::Context)->_get_Context(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Context;
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&IOptionalReferencePhotoCapturedEventArgs_adaptor::Frame)->_get_Frame(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Frame;
	};
	IOptionalReferencePhotoCapturedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IOptionalReferencePhotoCapturedEventArgs, X> : Windows::Media::Capture::IOptionalReferencePhotoCapturedEventArgs_adaptor<X> { typedef adapt IOptionalReferencePhotoCapturedEventArgs; };
struct IOptionalReferencePhotoCapturedEventArgs : IOptionalReferencePhotoCapturedEventArgs_raw, generate<IOptionalReferencePhotoCapturedEventArgs> {};

// OptionalReferencePhotoCapturedEventArgs
template<typename X> struct statics<OptionalReferencePhotoCapturedEventArgs, X> : X {
	typedef typename X::root_type OptionalReferencePhotoCapturedEventArgs;
};
struct OptionalReferencePhotoCapturedEventArgs : generate<OptionalReferencePhotoCapturedEventArgs> {};

// ICapturedFrame2
struct ICapturedFrame2_raw : IInspectable {
	virtual STDMETHODIMP _get_ControlValues(CapturedFrameControlValues* *value);
	virtual STDMETHODIMP _get_BitmapProperties(Graphics::Imaging::BitmapPropertySet* *value);
};
template<typename X> struct ICapturedFrame2_adaptor : X {
	union {
		struct : property {
			ptr<Graphics::Imaging::BitmapPropertySet> get() { Graphics::Imaging::BitmapPropertySet* value; hrcheck(enc(&ICapturedFrame2_adaptor::BitmapProperties)->_get_BitmapProperties(&value)); return from_abi(value); }
			ptr<Graphics::Imaging::BitmapPropertySet> operator()() { return get(); }
			operator ptr<Graphics::Imaging::BitmapPropertySet> () { return get(); }
			ptr<Graphics::Imaging::BitmapPropertySet> operator->() { return get(); }
		} BitmapProperties;
		struct : property {
			ptr<CapturedFrameControlValues> get() { CapturedFrameControlValues* value; hrcheck(enc(&ICapturedFrame2_adaptor::ControlValues)->_get_ControlValues(&value)); return from_abi(value); }
			ptr<CapturedFrameControlValues> operator()() { return get(); }
			operator ptr<CapturedFrameControlValues> () { return get(); }
			ptr<CapturedFrameControlValues> operator->() { return get(); }
		} ControlValues;
	};
	ICapturedFrame2_adaptor() {}
};
template<typename X> struct adapt<ICapturedFrame2, X> : Windows::Media::Capture::ICapturedFrame2_adaptor<X> { typedef adapt ICapturedFrame2; };
struct ICapturedFrame2 : ICapturedFrame2_raw, generate<ICapturedFrame2> {};

// ICapturedFrameWithSoftwareBitmap
struct ICapturedFrameWithSoftwareBitmap_raw : IInspectable {
	virtual STDMETHODIMP _get_SoftwareBitmap(Graphics::Imaging::SoftwareBitmap* *value);
};
template<typename X> struct ICapturedFrameWithSoftwareBitmap_adaptor : X {
	union {
		struct : property {
			ptr<Graphics::Imaging::SoftwareBitmap> get() { Graphics::Imaging::SoftwareBitmap* value; hrcheck(enc(&ICapturedFrameWithSoftwareBitmap_adaptor::SoftwareBitmap)->_get_SoftwareBitmap(&value)); return from_abi(value); }
			ptr<Graphics::Imaging::SoftwareBitmap> operator()() { return get(); }
			operator ptr<Graphics::Imaging::SoftwareBitmap> () { return get(); }
			ptr<Graphics::Imaging::SoftwareBitmap> operator->() { return get(); }
		} SoftwareBitmap;
	};
	ICapturedFrameWithSoftwareBitmap_adaptor() {}
};
template<typename X> struct adapt<ICapturedFrameWithSoftwareBitmap, X> : Windows::Media::Capture::ICapturedFrameWithSoftwareBitmap_adaptor<X> { typedef adapt ICapturedFrameWithSoftwareBitmap; };
struct ICapturedFrameWithSoftwareBitmap : ICapturedFrameWithSoftwareBitmap_raw, generate<ICapturedFrameWithSoftwareBitmap> {};

// ICapturedFrame
struct ICapturedFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_Width(unsigned *value);
	virtual STDMETHODIMP _get_Height(unsigned *value);
};
template<typename X> struct ICapturedFrame_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICapturedFrame_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Height;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICapturedFrame_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Width;
	};
	ICapturedFrame_adaptor() {}
};
template<typename X> struct adapt<ICapturedFrame, X> : Windows::Media::Capture::ICapturedFrame_adaptor<X> { typedef adapt ICapturedFrame; };
struct ICapturedFrame : ICapturedFrame_raw, generate<ICapturedFrame> {};

// CapturedFrame
template<typename X> struct statics<CapturedFrame, X> : X {
	typedef typename X::root_type CapturedFrame;
};
struct CapturedFrame : generate<CapturedFrame> {};

// IPhotoCapturedEventArgs
struct IPhotoCapturedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Frame(CapturedFrame* *value);
	virtual STDMETHODIMP _get_Thumbnail(CapturedFrame* *value);
	virtual STDMETHODIMP _get_CaptureTimeOffset(Foundation::TimeSpan *value);
};
template<typename X> struct IPhotoCapturedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPhotoCapturedEventArgs_adaptor::CaptureTimeOffset)->_get_CaptureTimeOffset(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} CaptureTimeOffset;
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&IPhotoCapturedEventArgs_adaptor::Frame)->_get_Frame(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Frame;
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&IPhotoCapturedEventArgs_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Thumbnail;
	};
	IPhotoCapturedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPhotoCapturedEventArgs, X> : Windows::Media::Capture::IPhotoCapturedEventArgs_adaptor<X> { typedef adapt IPhotoCapturedEventArgs; };
struct IPhotoCapturedEventArgs : IPhotoCapturedEventArgs_raw, generate<IPhotoCapturedEventArgs> {};

// PhotoCapturedEventArgs
template<typename X> struct statics<PhotoCapturedEventArgs, X> : X {
	typedef typename X::root_type PhotoCapturedEventArgs;
};
struct PhotoCapturedEventArgs : generate<PhotoCapturedEventArgs> {};

// ICapturedFrameControlValues
struct ICapturedFrameControlValues_raw : IInspectable {
	virtual STDMETHODIMP _get_Exposure(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_ExposureCompensation(Foundation::IReference<float>* *value);
	virtual STDMETHODIMP _get_IsoSpeed(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_Focus(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_SceneMode(Foundation::IReference<Devices::CaptureSceneMode>* *value);
	virtual STDMETHODIMP _get_Flashed(Foundation::IReference<bool>* *value);
	virtual STDMETHODIMP _get_FlashPowerPercent(Foundation::IReference<float>* *value);
	virtual STDMETHODIMP _get_WhiteBalance(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_ZoomFactor(Foundation::IReference<float>* *value);
};
template<typename X> struct ICapturedFrameControlValues_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::Exposure)->_get_Exposure(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} Exposure;
		struct : property {
			ptr<Foundation::IReference<float>> get() { Foundation::IReference<float>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::ExposureCompensation)->_get_ExposureCompensation(&value)); return from_abi(value); }
			ptr<Foundation::IReference<float>> operator()() { return get(); }
			operator ptr<Foundation::IReference<float>> () { return get(); }
			ptr<Foundation::IReference<float>> operator->() { return get(); }
		} ExposureCompensation;
		struct : property {
			ptr<Foundation::IReference<float>> get() { Foundation::IReference<float>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::FlashPowerPercent)->_get_FlashPowerPercent(&value)); return from_abi(value); }
			ptr<Foundation::IReference<float>> operator()() { return get(); }
			operator ptr<Foundation::IReference<float>> () { return get(); }
			ptr<Foundation::IReference<float>> operator->() { return get(); }
		} FlashPowerPercent;
		struct : property {
			ptr<Foundation::IReference<bool>> get() { Foundation::IReference<bool>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::Flashed)->_get_Flashed(&value)); return from_abi(value); }
			ptr<Foundation::IReference<bool>> operator()() { return get(); }
			operator ptr<Foundation::IReference<bool>> () { return get(); }
			ptr<Foundation::IReference<bool>> operator->() { return get(); }
		} Flashed;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::Focus)->_get_Focus(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} Focus;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::IsoSpeed)->_get_IsoSpeed(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} IsoSpeed;
		struct : property {
			ptr<Foundation::IReference<Devices::CaptureSceneMode>> get() { Foundation::IReference<Devices::CaptureSceneMode>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::SceneMode)->_get_SceneMode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Devices::CaptureSceneMode>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Devices::CaptureSceneMode>> () { return get(); }
			ptr<Foundation::IReference<Devices::CaptureSceneMode>> operator->() { return get(); }
		} SceneMode;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::WhiteBalance)->_get_WhiteBalance(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} WhiteBalance;
		struct : property {
			ptr<Foundation::IReference<float>> get() { Foundation::IReference<float>* value; hrcheck(enc(&ICapturedFrameControlValues_adaptor::ZoomFactor)->_get_ZoomFactor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<float>> operator()() { return get(); }
			operator ptr<Foundation::IReference<float>> () { return get(); }
			ptr<Foundation::IReference<float>> operator->() { return get(); }
		} ZoomFactor;
	};
	ICapturedFrameControlValues_adaptor() {}
};
template<typename X> struct adapt<ICapturedFrameControlValues, X> : Windows::Media::Capture::ICapturedFrameControlValues_adaptor<X> { typedef adapt ICapturedFrameControlValues; };
struct ICapturedFrameControlValues : ICapturedFrameControlValues_raw, generate<ICapturedFrameControlValues> {};

// ICapturedFrameControlValues2
struct ICapturedFrameControlValues2_raw : IInspectable {
	virtual STDMETHODIMP _get_FocusState(Foundation::IReference<Devices::MediaCaptureFocusState>* *value);
	virtual STDMETHODIMP _get_IsoDigitalGain(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_IsoAnalogGain(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_SensorFrameRate(MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _get_WhiteBalanceGain(Foundation::IReference<Capture::WhiteBalanceGain>* *value);
};
template<typename X> struct ICapturedFrameControlValues2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Devices::MediaCaptureFocusState>> get() { Foundation::IReference<Devices::MediaCaptureFocusState>* value; hrcheck(enc(&ICapturedFrameControlValues2_adaptor::FocusState)->_get_FocusState(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Devices::MediaCaptureFocusState>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Devices::MediaCaptureFocusState>> () { return get(); }
			ptr<Foundation::IReference<Devices::MediaCaptureFocusState>> operator->() { return get(); }
		} FocusState;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&ICapturedFrameControlValues2_adaptor::IsoAnalogGain)->_get_IsoAnalogGain(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} IsoAnalogGain;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&ICapturedFrameControlValues2_adaptor::IsoDigitalGain)->_get_IsoDigitalGain(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} IsoDigitalGain;
		struct : property {
			ptr<MediaProperties::MediaRatio> get() { MediaProperties::MediaRatio* value; hrcheck(enc(&ICapturedFrameControlValues2_adaptor::SensorFrameRate)->_get_SensorFrameRate(&value)); return from_abi(value); }
			ptr<MediaProperties::MediaRatio> operator()() { return get(); }
			operator ptr<MediaProperties::MediaRatio> () { return get(); }
			ptr<MediaProperties::MediaRatio> operator->() { return get(); }
		} SensorFrameRate;
		struct : property {
			ptr<Foundation::IReference<Capture::WhiteBalanceGain>> get() { Foundation::IReference<Capture::WhiteBalanceGain>* value; hrcheck(enc(&ICapturedFrameControlValues2_adaptor::WhiteBalanceGain)->_get_WhiteBalanceGain(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Capture::WhiteBalanceGain>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Capture::WhiteBalanceGain>> () { return get(); }
			ptr<Foundation::IReference<Capture::WhiteBalanceGain>> operator->() { return get(); }
		} WhiteBalanceGain;
	};
	ICapturedFrameControlValues2_adaptor() {}
};
template<typename X> struct adapt<ICapturedFrameControlValues2, X> : Windows::Media::Capture::ICapturedFrameControlValues2_adaptor<X> { typedef adapt ICapturedFrameControlValues2; };
struct ICapturedFrameControlValues2 : ICapturedFrameControlValues2_raw, generate<ICapturedFrameControlValues2> {};

// CapturedFrameControlValues
template<typename X> struct statics<CapturedFrameControlValues, X> : X {
	typedef typename X::root_type CapturedFrameControlValues;
};
struct CapturedFrameControlValues : generate<CapturedFrameControlValues> {};

// IVideoStreamConfiguration
struct IVideoStreamConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_InputProperties(MediaProperties::VideoEncodingProperties* *value);
	virtual STDMETHODIMP _get_OutputProperties(MediaProperties::VideoEncodingProperties* *value);
};
template<typename X> struct IVideoStreamConfiguration_adaptor : X {
	union {
		struct : property {
			ptr<MediaProperties::VideoEncodingProperties> get() { MediaProperties::VideoEncodingProperties* value; hrcheck(enc(&IVideoStreamConfiguration_adaptor::InputProperties)->_get_InputProperties(&value)); return from_abi(value); }
			ptr<MediaProperties::VideoEncodingProperties> operator()() { return get(); }
			operator ptr<MediaProperties::VideoEncodingProperties> () { return get(); }
			ptr<MediaProperties::VideoEncodingProperties> operator->() { return get(); }
		} InputProperties;
		struct : property {
			ptr<MediaProperties::VideoEncodingProperties> get() { MediaProperties::VideoEncodingProperties* value; hrcheck(enc(&IVideoStreamConfiguration_adaptor::OutputProperties)->_get_OutputProperties(&value)); return from_abi(value); }
			ptr<MediaProperties::VideoEncodingProperties> operator()() { return get(); }
			operator ptr<MediaProperties::VideoEncodingProperties> () { return get(); }
			ptr<MediaProperties::VideoEncodingProperties> operator->() { return get(); }
		} OutputProperties;
	};
	IVideoStreamConfiguration_adaptor() {}
};
template<typename X> struct adapt<IVideoStreamConfiguration, X> : Windows::Media::Capture::IVideoStreamConfiguration_adaptor<X> { typedef adapt IVideoStreamConfiguration; };
struct IVideoStreamConfiguration : IVideoStreamConfiguration_raw, generate<IVideoStreamConfiguration> {};

// VideoStreamConfiguration
template<typename X> struct statics<VideoStreamConfiguration, X> : X {
	typedef typename X::root_type VideoStreamConfiguration;
};
struct VideoStreamConfiguration : generate<VideoStreamConfiguration> {};

// IAppBroadcastManagerStatics
struct IAppBroadcastManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetGlobalSettings(AppBroadcastGlobalSettings* *value);
	virtual STDMETHODIMP _ApplyGlobalSettings(AppBroadcastGlobalSettings* value);
	virtual STDMETHODIMP _GetProviderSettings(AppBroadcastProviderSettings* *value);
	virtual STDMETHODIMP _ApplyProviderSettings(AppBroadcastProviderSettings* value);
};

// IAppBroadcastGlobalSettings
struct IAppBroadcastGlobalSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_IsBroadcastEnabled(bool *value);
	virtual STDMETHODIMP _get_IsDisabledByPolicy(bool *value);
	virtual STDMETHODIMP _get_IsGpuConstrained(bool *value);
	virtual STDMETHODIMP _get_HasHardwareEncoder(bool *value);
	virtual STDMETHODIMP _put_IsAudioCaptureEnabled(bool value);
	virtual STDMETHODIMP _get_IsAudioCaptureEnabled(bool *value);
	virtual STDMETHODIMP _put_IsMicrophoneCaptureEnabledByDefault(bool value);
	virtual STDMETHODIMP _get_IsMicrophoneCaptureEnabledByDefault(bool *value);
	virtual STDMETHODIMP _put_IsEchoCancellationEnabled(bool value);
	virtual STDMETHODIMP _get_IsEchoCancellationEnabled(bool *value);
	virtual STDMETHODIMP _put_SystemAudioGain(double value);
	virtual STDMETHODIMP _get_SystemAudioGain(double *value);
	virtual STDMETHODIMP _put_MicrophoneGain(double value);
	virtual STDMETHODIMP _get_MicrophoneGain(double *value);
	virtual STDMETHODIMP _put_IsCameraCaptureEnabledByDefault(bool value);
	virtual STDMETHODIMP _get_IsCameraCaptureEnabledByDefault(bool *value);
	virtual STDMETHODIMP _put_SelectedCameraId(HSTRING value);
	virtual STDMETHODIMP _get_SelectedCameraId(HSTRING *value);
	virtual STDMETHODIMP _put_CameraOverlayLocation(AppBroadcastCameraOverlayLocation value);
	virtual STDMETHODIMP _get_CameraOverlayLocation(AppBroadcastCameraOverlayLocation *value);
	virtual STDMETHODIMP _put_CameraOverlaySize(AppBroadcastCameraOverlaySize value);
	virtual STDMETHODIMP _get_CameraOverlaySize(AppBroadcastCameraOverlaySize *value);
	virtual STDMETHODIMP _put_IsCursorImageCaptureEnabled(bool value);
	virtual STDMETHODIMP _get_IsCursorImageCaptureEnabled(bool *value);
};
template<typename X> struct IAppBroadcastGlobalSettings_adaptor : X {
	union {
		struct : property {
			AppBroadcastCameraOverlayLocation get() { AppBroadcastCameraOverlayLocation value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::CameraOverlayLocation)->_get_CameraOverlayLocation(&value)); return value; }
			AppBroadcastCameraOverlayLocation operator()() { return get(); }
			operator AppBroadcastCameraOverlayLocation () { return get(); }
			void put(AppBroadcastCameraOverlayLocation value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::CameraOverlayLocation)->_put_CameraOverlayLocation(value)); }
			void operator=(AppBroadcastCameraOverlayLocation value) { put(value); }
			void operator()(AppBroadcastCameraOverlayLocation value) { put(value); }
		} CameraOverlayLocation;
		struct : property {
			AppBroadcastCameraOverlaySize get() { AppBroadcastCameraOverlaySize value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::CameraOverlaySize)->_get_CameraOverlaySize(&value)); return value; }
			AppBroadcastCameraOverlaySize operator()() { return get(); }
			operator AppBroadcastCameraOverlaySize () { return get(); }
			void put(AppBroadcastCameraOverlaySize value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::CameraOverlaySize)->_put_CameraOverlaySize(value)); }
			void operator=(AppBroadcastCameraOverlaySize value) { put(value); }
			void operator()(AppBroadcastCameraOverlaySize value) { put(value); }
		} CameraOverlaySize;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::HasHardwareEncoder)->_get_HasHardwareEncoder(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasHardwareEncoder;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsAudioCaptureEnabled)->_get_IsAudioCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsAudioCaptureEnabled)->_put_IsAudioCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAudioCaptureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsBroadcastEnabled)->_get_IsBroadcastEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBroadcastEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsCameraCaptureEnabledByDefault)->_get_IsCameraCaptureEnabledByDefault(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsCameraCaptureEnabledByDefault)->_put_IsCameraCaptureEnabledByDefault(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCameraCaptureEnabledByDefault;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsCursorImageCaptureEnabled)->_get_IsCursorImageCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsCursorImageCaptureEnabled)->_put_IsCursorImageCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCursorImageCaptureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsDisabledByPolicy)->_get_IsDisabledByPolicy(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDisabledByPolicy;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsEchoCancellationEnabled)->_get_IsEchoCancellationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsEchoCancellationEnabled)->_put_IsEchoCancellationEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEchoCancellationEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsGpuConstrained)->_get_IsGpuConstrained(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsGpuConstrained;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsMicrophoneCaptureEnabledByDefault)->_get_IsMicrophoneCaptureEnabledByDefault(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::IsMicrophoneCaptureEnabledByDefault)->_put_IsMicrophoneCaptureEnabledByDefault(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMicrophoneCaptureEnabledByDefault;
		struct : property {
			double get() { double value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::MicrophoneGain)->_get_MicrophoneGain(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::MicrophoneGain)->_put_MicrophoneGain(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} MicrophoneGain;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::SelectedCameraId)->_get_SelectedCameraId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::SelectedCameraId)->_put_SelectedCameraId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SelectedCameraId;
		struct : property {
			double get() { double value; hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::SystemAudioGain)->_get_SystemAudioGain(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IAppBroadcastGlobalSettings_adaptor::SystemAudioGain)->_put_SystemAudioGain(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} SystemAudioGain;
	};
	IAppBroadcastGlobalSettings_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastGlobalSettings, X> : Windows::Media::Capture::IAppBroadcastGlobalSettings_adaptor<X> { typedef adapt IAppBroadcastGlobalSettings; };
struct IAppBroadcastGlobalSettings : IAppBroadcastGlobalSettings_raw, generate<IAppBroadcastGlobalSettings> {};

// AppBroadcastGlobalSettings
template<typename X> struct statics<AppBroadcastGlobalSettings, X> : X {
	typedef typename X::root_type AppBroadcastGlobalSettings;
};
struct AppBroadcastGlobalSettings : generate<AppBroadcastGlobalSettings> {};

// IAppBroadcastProviderSettings
struct IAppBroadcastProviderSettings_raw : IInspectable {
	virtual STDMETHODIMP _put_DefaultBroadcastTitle(HSTRING value);
	virtual STDMETHODIMP _get_DefaultBroadcastTitle(HSTRING *value);
	virtual STDMETHODIMP _put_AudioEncodingBitrate(unsigned value);
	virtual STDMETHODIMP _get_AudioEncodingBitrate(unsigned *value);
	virtual STDMETHODIMP _put_CustomVideoEncodingBitrate(unsigned value);
	virtual STDMETHODIMP _get_CustomVideoEncodingBitrate(unsigned *value);
	virtual STDMETHODIMP _put_CustomVideoEncodingHeight(unsigned value);
	virtual STDMETHODIMP _get_CustomVideoEncodingHeight(unsigned *value);
	virtual STDMETHODIMP _put_CustomVideoEncodingWidth(unsigned value);
	virtual STDMETHODIMP _get_CustomVideoEncodingWidth(unsigned *value);
	virtual STDMETHODIMP _put_VideoEncodingBitrateMode(AppBroadcastVideoEncodingBitrateMode value);
	virtual STDMETHODIMP _get_VideoEncodingBitrateMode(AppBroadcastVideoEncodingBitrateMode *value);
	virtual STDMETHODIMP _put_VideoEncodingResolutionMode(AppBroadcastVideoEncodingResolutionMode value);
	virtual STDMETHODIMP _get_VideoEncodingResolutionMode(AppBroadcastVideoEncodingResolutionMode *value);
};
template<typename X> struct IAppBroadcastProviderSettings_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::AudioEncodingBitrate)->_get_AudioEncodingBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::AudioEncodingBitrate)->_put_AudioEncodingBitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} AudioEncodingBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::CustomVideoEncodingBitrate)->_get_CustomVideoEncodingBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::CustomVideoEncodingBitrate)->_put_CustomVideoEncodingBitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CustomVideoEncodingBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::CustomVideoEncodingHeight)->_get_CustomVideoEncodingHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::CustomVideoEncodingHeight)->_put_CustomVideoEncodingHeight(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CustomVideoEncodingHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::CustomVideoEncodingWidth)->_get_CustomVideoEncodingWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::CustomVideoEncodingWidth)->_put_CustomVideoEncodingWidth(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CustomVideoEncodingWidth;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::DefaultBroadcastTitle)->_get_DefaultBroadcastTitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::DefaultBroadcastTitle)->_put_DefaultBroadcastTitle(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DefaultBroadcastTitle;
		struct : property {
			AppBroadcastVideoEncodingBitrateMode get() { AppBroadcastVideoEncodingBitrateMode value; hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::VideoEncodingBitrateMode)->_get_VideoEncodingBitrateMode(&value)); return value; }
			AppBroadcastVideoEncodingBitrateMode operator()() { return get(); }
			operator AppBroadcastVideoEncodingBitrateMode () { return get(); }
			void put(AppBroadcastVideoEncodingBitrateMode value) { hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::VideoEncodingBitrateMode)->_put_VideoEncodingBitrateMode(value)); }
			void operator=(AppBroadcastVideoEncodingBitrateMode value) { put(value); }
			void operator()(AppBroadcastVideoEncodingBitrateMode value) { put(value); }
		} VideoEncodingBitrateMode;
		struct : property {
			AppBroadcastVideoEncodingResolutionMode get() { AppBroadcastVideoEncodingResolutionMode value; hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::VideoEncodingResolutionMode)->_get_VideoEncodingResolutionMode(&value)); return value; }
			AppBroadcastVideoEncodingResolutionMode operator()() { return get(); }
			operator AppBroadcastVideoEncodingResolutionMode () { return get(); }
			void put(AppBroadcastVideoEncodingResolutionMode value) { hrcheck(enc(&IAppBroadcastProviderSettings_adaptor::VideoEncodingResolutionMode)->_put_VideoEncodingResolutionMode(value)); }
			void operator=(AppBroadcastVideoEncodingResolutionMode value) { put(value); }
			void operator()(AppBroadcastVideoEncodingResolutionMode value) { put(value); }
		} VideoEncodingResolutionMode;
	};
	IAppBroadcastProviderSettings_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastProviderSettings, X> : Windows::Media::Capture::IAppBroadcastProviderSettings_adaptor<X> { typedef adapt IAppBroadcastProviderSettings; };
struct IAppBroadcastProviderSettings : IAppBroadcastProviderSettings_raw, generate<IAppBroadcastProviderSettings> {};

// AppBroadcastProviderSettings
template<typename X> struct statics<AppBroadcastProviderSettings, X> : X {
	typedef typename X::root_type AppBroadcastProviderSettings;
};
struct AppBroadcastProviderSettings : generate<AppBroadcastProviderSettings> {};

// AppBroadcastManager
template<typename> struct AppBroadcastManager_statics {
	static ptr<AppBroadcastGlobalSettings> GetGlobalSettings() { AppBroadcastGlobalSettings* value; hrcheck(get_activation_factory<AppBroadcastManager, IAppBroadcastManagerStatics>()->_GetGlobalSettings(&value)); return from_abi(value); }
	static void ApplyGlobalSettings(pptr<AppBroadcastGlobalSettings> value) { hrcheck(get_activation_factory<AppBroadcastManager, IAppBroadcastManagerStatics>()->_ApplyGlobalSettings(value)); }
	static ptr<AppBroadcastProviderSettings> GetProviderSettings() { AppBroadcastProviderSettings* value; hrcheck(get_activation_factory<AppBroadcastManager, IAppBroadcastManagerStatics>()->_GetProviderSettings(&value)); return from_abi(value); }
	static void ApplyProviderSettings(pptr<AppBroadcastProviderSettings> value) { hrcheck(get_activation_factory<AppBroadcastManager, IAppBroadcastManagerStatics>()->_ApplyProviderSettings(value)); }
};

template<typename X> struct statics<AppBroadcastManager, X> : X, Windows::Media::Capture::AppBroadcastManager_statics<void> {
	typedef typename X::root_type AppBroadcastManager;
};
struct AppBroadcastManager : generate<AppBroadcastManager> {};

// IAppBroadcastBackgroundServiceSignInInfo
struct IAppBroadcastBackgroundServiceSignInInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_SignInState(AppBroadcastSignInState *value);
	virtual STDMETHODIMP _put_OAuthRequestUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_OAuthRequestUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_OAuthCallbackUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_OAuthCallbackUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_AuthenticationResult(Security::Authentication::Web::WebAuthenticationResult* *value);
	virtual STDMETHODIMP _put_UserName(HSTRING value);
	virtual STDMETHODIMP _get_UserName(HSTRING *value);
	virtual STDMETHODIMP _add_SignInStateChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundServiceSignInInfo*, AppBroadcastSignInStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SignInStateChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppBroadcastBackgroundServiceSignInInfo_adaptor : X {
	union {
		struct : property {
			ptr<Security::Authentication::Web::WebAuthenticationResult> get() { Security::Authentication::Web::WebAuthenticationResult* value; hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::AuthenticationResult)->_get_AuthenticationResult(&value)); return from_abi(value); }
			ptr<Security::Authentication::Web::WebAuthenticationResult> operator()() { return get(); }
			operator ptr<Security::Authentication::Web::WebAuthenticationResult> () { return get(); }
			ptr<Security::Authentication::Web::WebAuthenticationResult> operator->() { return get(); }
		} AuthenticationResult;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::OAuthCallbackUri)->_get_OAuthCallbackUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::OAuthCallbackUri)->_put_OAuthCallbackUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} OAuthCallbackUri;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::OAuthRequestUri)->_get_OAuthRequestUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::OAuthRequestUri)->_put_OAuthRequestUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} OAuthRequestUri;
		struct : property {
			AppBroadcastSignInState get() { AppBroadcastSignInState value; hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::SignInState)->_get_SignInState(&value)); return value; }
			AppBroadcastSignInState operator()() { return get(); }
			operator AppBroadcastSignInState () { return get(); }
		} SignInState;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::UserName)->_get_UserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::UserName)->_put_UserName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} UserName;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundServiceSignInInfo>, ptr<AppBroadcastSignInStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::SignInStateChanged)->_add_SignInStateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo_adaptor::SignInStateChanged)->_remove_SignInStateChanged(token)); }
		} SignInStateChanged;
	};
	IAppBroadcastBackgroundServiceSignInInfo_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastBackgroundServiceSignInInfo, X> : Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo_adaptor<X> { typedef adapt IAppBroadcastBackgroundServiceSignInInfo; };
struct IAppBroadcastBackgroundServiceSignInInfo : IAppBroadcastBackgroundServiceSignInInfo_raw, generate<IAppBroadcastBackgroundServiceSignInInfo> {};

// IAppBroadcastBackgroundServiceSignInInfo2
struct IAppBroadcastBackgroundServiceSignInInfo2_raw : IInspectable {
	virtual STDMETHODIMP _add_UserNameChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundServiceSignInInfo*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_UserNameChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppBroadcastBackgroundServiceSignInInfo2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundServiceSignInInfo>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo2_adaptor::UserNameChanged)->_add_UserNameChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundServiceSignInInfo2_adaptor::UserNameChanged)->_remove_UserNameChanged(token)); }
		} UserNameChanged;
	};
	IAppBroadcastBackgroundServiceSignInInfo2_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastBackgroundServiceSignInInfo2, X> : Windows::Media::Capture::IAppBroadcastBackgroundServiceSignInInfo2_adaptor<X> { typedef adapt IAppBroadcastBackgroundServiceSignInInfo2; };
struct IAppBroadcastBackgroundServiceSignInInfo2 : IAppBroadcastBackgroundServiceSignInInfo2_raw, generate<IAppBroadcastBackgroundServiceSignInInfo2> {};

// AppBroadcastBackgroundServiceSignInInfo
template<typename X> struct statics<AppBroadcastBackgroundServiceSignInInfo, X> : X {
	typedef typename X::root_type AppBroadcastBackgroundServiceSignInInfo;
};
struct AppBroadcastBackgroundServiceSignInInfo : generate<AppBroadcastBackgroundServiceSignInInfo> {};

// IAppBroadcastSignInStateChangedEventArgs
struct IAppBroadcastSignInStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SignInState(AppBroadcastSignInState *value);
	virtual STDMETHODIMP _get_Result(AppBroadcastSignInResult *value);
};
template<typename X> struct IAppBroadcastSignInStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			AppBroadcastSignInResult get() { AppBroadcastSignInResult value; hrcheck(enc(&IAppBroadcastSignInStateChangedEventArgs_adaptor::Result)->_get_Result(&value)); return value; }
			AppBroadcastSignInResult operator()() { return get(); }
			operator AppBroadcastSignInResult () { return get(); }
		} Result;
		struct : property {
			AppBroadcastSignInState get() { AppBroadcastSignInState value; hrcheck(enc(&IAppBroadcastSignInStateChangedEventArgs_adaptor::SignInState)->_get_SignInState(&value)); return value; }
			AppBroadcastSignInState operator()() { return get(); }
			operator AppBroadcastSignInState () { return get(); }
		} SignInState;
	};
	IAppBroadcastSignInStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastSignInStateChangedEventArgs, X> : Windows::Media::Capture::IAppBroadcastSignInStateChangedEventArgs_adaptor<X> { typedef adapt IAppBroadcastSignInStateChangedEventArgs; };
struct IAppBroadcastSignInStateChangedEventArgs : IAppBroadcastSignInStateChangedEventArgs_raw, generate<IAppBroadcastSignInStateChangedEventArgs> {};

// AppBroadcastSignInStateChangedEventArgs
template<typename X> struct statics<AppBroadcastSignInStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastSignInStateChangedEventArgs;
};
struct AppBroadcastSignInStateChangedEventArgs : generate<AppBroadcastSignInStateChangedEventArgs> {};

// IAppBroadcastBackgroundServiceStreamInfo
struct IAppBroadcastBackgroundServiceStreamInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_StreamState(AppBroadcastStreamState *value);
	virtual STDMETHODIMP _put_DesiredVideoEncodingBitrate(unsigned __int64 value);
	virtual STDMETHODIMP _get_DesiredVideoEncodingBitrate(unsigned __int64 *value);
	virtual STDMETHODIMP _put_BandwidthTestBitrate(unsigned __int64 value);
	virtual STDMETHODIMP _get_BandwidthTestBitrate(unsigned __int64 *value);
	virtual STDMETHODIMP _put_AudioCodec(HSTRING value);
	virtual STDMETHODIMP _get_AudioCodec(HSTRING *value);
	virtual STDMETHODIMP _get_BroadcastStreamReader(AppBroadcastStreamReader* *value);
	virtual STDMETHODIMP _add_StreamStateChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo*, AppBroadcastStreamStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StreamStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VideoEncodingResolutionChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoEncodingResolutionChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VideoEncodingBitrateChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundServiceStreamInfo*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoEncodingBitrateChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppBroadcastBackgroundServiceStreamInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::AudioCodec)->_get_AudioCodec(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::AudioCodec)->_put_AudioCodec(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AudioCodec;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::BandwidthTestBitrate)->_get_BandwidthTestBitrate(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
			void put(unsigned __int64 value) { hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::BandwidthTestBitrate)->_put_BandwidthTestBitrate(value)); }
			void operator=(unsigned __int64 value) { put(value); }
			void operator()(unsigned __int64 value) { put(value); }
		} BandwidthTestBitrate;
		struct : property {
			ptr<AppBroadcastStreamReader> get() { AppBroadcastStreamReader* value; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::BroadcastStreamReader)->_get_BroadcastStreamReader(&value)); return from_abi(value); }
			ptr<AppBroadcastStreamReader> operator()() { return get(); }
			operator ptr<AppBroadcastStreamReader> () { return get(); }
			ptr<AppBroadcastStreamReader> operator->() { return get(); }
		} BroadcastStreamReader;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::DesiredVideoEncodingBitrate)->_get_DesiredVideoEncodingBitrate(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
			void put(unsigned __int64 value) { hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::DesiredVideoEncodingBitrate)->_put_DesiredVideoEncodingBitrate(value)); }
			void operator=(unsigned __int64 value) { put(value); }
			void operator()(unsigned __int64 value) { put(value); }
		} DesiredVideoEncodingBitrate;
		struct : property {
			AppBroadcastStreamState get() { AppBroadcastStreamState value; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::StreamState)->_get_StreamState(&value)); return value; }
			AppBroadcastStreamState operator()() { return get(); }
			operator AppBroadcastStreamState () { return get(); }
		} StreamState;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundServiceStreamInfo>, ptr<AppBroadcastStreamStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::StreamStateChanged)->_add_StreamStateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::StreamStateChanged)->_remove_StreamStateChanged(token)); }
		} StreamStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundServiceStreamInfo>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::VideoEncodingBitrateChanged)->_add_VideoEncodingBitrateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::VideoEncodingBitrateChanged)->_remove_VideoEncodingBitrateChanged(token)); }
		} VideoEncodingBitrateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundServiceStreamInfo>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::VideoEncodingResolutionChanged)->_add_VideoEncodingResolutionChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundServiceStreamInfo_adaptor::VideoEncodingResolutionChanged)->_remove_VideoEncodingResolutionChanged(token)); }
		} VideoEncodingResolutionChanged;
	};
	IAppBroadcastBackgroundServiceStreamInfo_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastBackgroundServiceStreamInfo, X> : Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo_adaptor<X> { typedef adapt IAppBroadcastBackgroundServiceStreamInfo; };
struct IAppBroadcastBackgroundServiceStreamInfo : IAppBroadcastBackgroundServiceStreamInfo_raw, generate<IAppBroadcastBackgroundServiceStreamInfo> {};

// IAppBroadcastStreamReader
struct IAppBroadcastStreamReader_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioChannels(unsigned *value);
	virtual STDMETHODIMP _get_AudioSampleRate(unsigned *value);
	virtual STDMETHODIMP _get_AudioAacSequence(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_AudioBitrate(unsigned *value);
	virtual STDMETHODIMP _TryGetNextAudioFrame(AppBroadcastStreamAudioFrame* *frame);
	virtual STDMETHODIMP _get_VideoWidth(unsigned *value);
	virtual STDMETHODIMP _get_VideoHeight(unsigned *value);
	virtual STDMETHODIMP _get_VideoBitrate(unsigned *value);
	virtual STDMETHODIMP _TryGetNextVideoFrame(AppBroadcastStreamVideoFrame* *frame);
	virtual STDMETHODIMP _add_AudioFrameArrived(Foundation::TypedEventHandler<AppBroadcastStreamReader*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AudioFrameArrived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VideoFrameArrived(Foundation::TypedEventHandler<AppBroadcastStreamReader*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoFrameArrived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppBroadcastStreamReader_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::AudioAacSequence)->_get_AudioAacSequence(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} AudioAacSequence;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::AudioBitrate)->_get_AudioBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} AudioBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::AudioChannels)->_get_AudioChannels(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} AudioChannels;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::AudioSampleRate)->_get_AudioSampleRate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} AudioSampleRate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::VideoBitrate)->_get_VideoBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideoBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::VideoHeight)->_get_VideoHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideoHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::VideoWidth)->_get_VideoWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideoWidth;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastStreamReader>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::AudioFrameArrived)->_add_AudioFrameArrived(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastStreamReader_adaptor::AudioFrameArrived)->_remove_AudioFrameArrived(token)); }
		} AudioFrameArrived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastStreamReader>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastStreamReader_adaptor::VideoFrameArrived)->_add_VideoFrameArrived(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastStreamReader_adaptor::VideoFrameArrived)->_remove_VideoFrameArrived(token)); }
		} VideoFrameArrived;
	};
	ptr<AppBroadcastStreamAudioFrame> TryGetNextAudioFrame() { AppBroadcastStreamAudioFrame* frame; hrcheck(X::get()->_TryGetNextAudioFrame(&frame)); return from_abi(frame); }
	ptr<AppBroadcastStreamVideoFrame> TryGetNextVideoFrame() { AppBroadcastStreamVideoFrame* frame; hrcheck(X::get()->_TryGetNextVideoFrame(&frame)); return from_abi(frame); }
	IAppBroadcastStreamReader_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastStreamReader, X> : Windows::Media::Capture::IAppBroadcastStreamReader_adaptor<X> { typedef adapt IAppBroadcastStreamReader; };
struct IAppBroadcastStreamReader : IAppBroadcastStreamReader_raw, generate<IAppBroadcastStreamReader> {};

// AppBroadcastStreamReader
template<typename X> struct statics<AppBroadcastStreamReader, X> : X {
	typedef typename X::root_type AppBroadcastStreamReader;
};
struct AppBroadcastStreamReader : generate<AppBroadcastStreamReader> {};

// IAppBroadcastBackgroundServiceStreamInfo2
struct IAppBroadcastBackgroundServiceStreamInfo2_raw : IInspectable {
	virtual STDMETHODIMP _ReportProblemWithStream();
};
template<typename X> struct IAppBroadcastBackgroundServiceStreamInfo2_adaptor : X {
	void ReportProblemWithStream() { hrcheck(X::get()->_ReportProblemWithStream()); }
};
template<typename X> struct adapt<IAppBroadcastBackgroundServiceStreamInfo2, X> : Windows::Media::Capture::IAppBroadcastBackgroundServiceStreamInfo2_adaptor<X> { typedef adapt IAppBroadcastBackgroundServiceStreamInfo2; };
struct IAppBroadcastBackgroundServiceStreamInfo2 : IAppBroadcastBackgroundServiceStreamInfo2_raw, generate<IAppBroadcastBackgroundServiceStreamInfo2> {};

// AppBroadcastBackgroundServiceStreamInfo
template<typename X> struct statics<AppBroadcastBackgroundServiceStreamInfo, X> : X {
	typedef typename X::root_type AppBroadcastBackgroundServiceStreamInfo;
};
struct AppBroadcastBackgroundServiceStreamInfo : generate<AppBroadcastBackgroundServiceStreamInfo> {};

// IAppBroadcastStreamStateChangedEventArgs
struct IAppBroadcastStreamStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_StreamState(AppBroadcastStreamState *value);
};
template<typename X> struct IAppBroadcastStreamStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			AppBroadcastStreamState get() { AppBroadcastStreamState value; hrcheck(enc(&IAppBroadcastStreamStateChangedEventArgs_adaptor::StreamState)->_get_StreamState(&value)); return value; }
			AppBroadcastStreamState operator()() { return get(); }
			operator AppBroadcastStreamState () { return get(); }
		} StreamState;
	};
	IAppBroadcastStreamStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastStreamStateChangedEventArgs, X> : Windows::Media::Capture::IAppBroadcastStreamStateChangedEventArgs_adaptor<X> { typedef adapt IAppBroadcastStreamStateChangedEventArgs; };
struct IAppBroadcastStreamStateChangedEventArgs : IAppBroadcastStreamStateChangedEventArgs_raw, generate<IAppBroadcastStreamStateChangedEventArgs> {};

// AppBroadcastStreamStateChangedEventArgs
template<typename X> struct statics<AppBroadcastStreamStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastStreamStateChangedEventArgs;
};
struct AppBroadcastStreamStateChangedEventArgs : generate<AppBroadcastStreamStateChangedEventArgs> {};

// IAppBroadcastBackgroundService
struct IAppBroadcastBackgroundService_raw : IInspectable {
	virtual STDMETHODIMP _put_PlugInState(AppBroadcastPlugInState value);
	virtual STDMETHODIMP _get_PlugInState(AppBroadcastPlugInState *value);
	virtual STDMETHODIMP _put_SignInInfo(AppBroadcastBackgroundServiceSignInInfo* value);
	virtual STDMETHODIMP _get_SignInInfo(AppBroadcastBackgroundServiceSignInInfo* *value);
	virtual STDMETHODIMP _put_StreamInfo(AppBroadcastBackgroundServiceStreamInfo* value);
	virtual STDMETHODIMP _get_StreamInfo(AppBroadcastBackgroundServiceStreamInfo* *value);
	virtual STDMETHODIMP _get_AppId(HSTRING *value);
	virtual STDMETHODIMP _get_BroadcastTitle(HSTRING *value);
	virtual STDMETHODIMP _put_ViewerCount(unsigned value);
	virtual STDMETHODIMP _get_ViewerCount(unsigned *value);
	virtual STDMETHODIMP _TerminateBroadcast(AppBroadcastTerminationReason reason, unsigned providerSpecificReason);
	virtual STDMETHODIMP _add_HeartbeatRequested(Foundation::TypedEventHandler<AppBroadcastBackgroundService*, AppBroadcastHeartbeatRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HeartbeatRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_TitleId(HSTRING *value);
};
template<typename X> struct IAppBroadcastBackgroundService_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::AppId)->_get_AppId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::BroadcastTitle)->_get_BroadcastTitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} BroadcastTitle;
		struct : property {
			AppBroadcastPlugInState get() { AppBroadcastPlugInState value; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::PlugInState)->_get_PlugInState(&value)); return value; }
			AppBroadcastPlugInState operator()() { return get(); }
			operator AppBroadcastPlugInState () { return get(); }
			void put(AppBroadcastPlugInState value) { hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::PlugInState)->_put_PlugInState(value)); }
			void operator=(AppBroadcastPlugInState value) { put(value); }
			void operator()(AppBroadcastPlugInState value) { put(value); }
		} PlugInState;
		struct : property {
			ptr<AppBroadcastBackgroundServiceSignInInfo> get() { AppBroadcastBackgroundServiceSignInInfo* value; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::SignInInfo)->_get_SignInInfo(&value)); return from_abi(value); }
			ptr<AppBroadcastBackgroundServiceSignInInfo> operator()() { return get(); }
			operator ptr<AppBroadcastBackgroundServiceSignInInfo> () { return get(); }
			ptr<AppBroadcastBackgroundServiceSignInInfo> operator->() { return get(); }
			void put(pptr<AppBroadcastBackgroundServiceSignInInfo> value) { hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::SignInInfo)->_put_SignInInfo(value)); }
			void operator=(pptr<AppBroadcastBackgroundServiceSignInInfo> value) { put(value); }
			void operator()(pptr<AppBroadcastBackgroundServiceSignInInfo> value) { put(value); }
		} SignInInfo;
		struct : property {
			ptr<AppBroadcastBackgroundServiceStreamInfo> get() { AppBroadcastBackgroundServiceStreamInfo* value; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::StreamInfo)->_get_StreamInfo(&value)); return from_abi(value); }
			ptr<AppBroadcastBackgroundServiceStreamInfo> operator()() { return get(); }
			operator ptr<AppBroadcastBackgroundServiceStreamInfo> () { return get(); }
			ptr<AppBroadcastBackgroundServiceStreamInfo> operator->() { return get(); }
			void put(pptr<AppBroadcastBackgroundServiceStreamInfo> value) { hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::StreamInfo)->_put_StreamInfo(value)); }
			void operator=(pptr<AppBroadcastBackgroundServiceStreamInfo> value) { put(value); }
			void operator()(pptr<AppBroadcastBackgroundServiceStreamInfo> value) { put(value); }
		} StreamInfo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::TitleId)->_get_TitleId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TitleId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::ViewerCount)->_get_ViewerCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::ViewerCount)->_put_ViewerCount(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ViewerCount;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundService>, ptr<AppBroadcastHeartbeatRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::HeartbeatRequested)->_add_HeartbeatRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundService_adaptor::HeartbeatRequested)->_remove_HeartbeatRequested(token)); }
		} HeartbeatRequested;
	};
	void TerminateBroadcast(AppBroadcastTerminationReason reason, unsigned providerSpecificReason) { hrcheck(X::get()->_TerminateBroadcast(reason, providerSpecificReason)); }
	IAppBroadcastBackgroundService_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastBackgroundService, X> : Windows::Media::Capture::IAppBroadcastBackgroundService_adaptor<X> { typedef adapt IAppBroadcastBackgroundService; };
struct IAppBroadcastBackgroundService : IAppBroadcastBackgroundService_raw, generate<IAppBroadcastBackgroundService> {};

// IAppBroadcastBackgroundService2
struct IAppBroadcastBackgroundService2_raw : IInspectable {
	virtual STDMETHODIMP _put_BroadcastTitle(HSTRING value);
	virtual STDMETHODIMP _get_BroadcastLanguage(HSTRING *value);
	virtual STDMETHODIMP _put_BroadcastLanguage(HSTRING value);
	virtual STDMETHODIMP _get_BroadcastChannel(HSTRING *value);
	virtual STDMETHODIMP _put_BroadcastChannel(HSTRING value);
	virtual STDMETHODIMP _add_BroadcastTitleChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundService*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BroadcastTitleChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BroadcastLanguageChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundService*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BroadcastLanguageChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BroadcastChannelChanged(Foundation::TypedEventHandler<AppBroadcastBackgroundService*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BroadcastChannelChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppBroadcastBackgroundService2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastChannel)->_get_BroadcastChannel(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastChannel)->_put_BroadcastChannel(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} BroadcastChannel;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastLanguage)->_get_BroadcastLanguage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastLanguage)->_put_BroadcastLanguage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} BroadcastLanguage;
		struct : property {
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastTitle)->_put_BroadcastTitle(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} BroadcastTitle;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundService>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastChannelChanged)->_add_BroadcastChannelChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastChannelChanged)->_remove_BroadcastChannelChanged(token)); }
		} BroadcastChannelChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundService>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastLanguageChanged)->_add_BroadcastLanguageChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastLanguageChanged)->_remove_BroadcastLanguageChanged(token)); }
		} BroadcastLanguageChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastBackgroundService>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastTitleChanged)->_add_BroadcastTitleChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastBackgroundService2_adaptor::BroadcastTitleChanged)->_remove_BroadcastTitleChanged(token)); }
		} BroadcastTitleChanged;
	};
	IAppBroadcastBackgroundService2_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastBackgroundService2, X> : Windows::Media::Capture::IAppBroadcastBackgroundService2_adaptor<X> { typedef adapt IAppBroadcastBackgroundService2; };
struct IAppBroadcastBackgroundService2 : IAppBroadcastBackgroundService2_raw, generate<IAppBroadcastBackgroundService2> {};

// AppBroadcastBackgroundService
template<typename X> struct statics<AppBroadcastBackgroundService, X> : X {
	typedef typename X::root_type AppBroadcastBackgroundService;
};
struct AppBroadcastBackgroundService : generate<AppBroadcastBackgroundService> {
	using IAppBroadcastBackgroundService::BroadcastTitle;
};

// IAppBroadcastHeartbeatRequestedEventArgs
struct IAppBroadcastHeartbeatRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _get_Handled(bool *value);
};
template<typename X> struct IAppBroadcastHeartbeatRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastHeartbeatRequestedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastHeartbeatRequestedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	IAppBroadcastHeartbeatRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastHeartbeatRequestedEventArgs, X> : Windows::Media::Capture::IAppBroadcastHeartbeatRequestedEventArgs_adaptor<X> { typedef adapt IAppBroadcastHeartbeatRequestedEventArgs; };
struct IAppBroadcastHeartbeatRequestedEventArgs : IAppBroadcastHeartbeatRequestedEventArgs_raw, generate<IAppBroadcastHeartbeatRequestedEventArgs> {};

// AppBroadcastHeartbeatRequestedEventArgs
template<typename X> struct statics<AppBroadcastHeartbeatRequestedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastHeartbeatRequestedEventArgs;
};
struct AppBroadcastHeartbeatRequestedEventArgs : generate<AppBroadcastHeartbeatRequestedEventArgs> {};

// IAppBroadcastStreamAudioFrame
struct IAppBroadcastStreamAudioFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioHeader(AppBroadcastStreamAudioHeader* *value);
	virtual STDMETHODIMP _get_AudioBuffer(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IAppBroadcastStreamAudioFrame_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IAppBroadcastStreamAudioFrame_adaptor::AudioBuffer)->_get_AudioBuffer(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} AudioBuffer;
		struct : property {
			ptr<AppBroadcastStreamAudioHeader> get() { AppBroadcastStreamAudioHeader* value; hrcheck(enc(&IAppBroadcastStreamAudioFrame_adaptor::AudioHeader)->_get_AudioHeader(&value)); return from_abi(value); }
			ptr<AppBroadcastStreamAudioHeader> operator()() { return get(); }
			operator ptr<AppBroadcastStreamAudioHeader> () { return get(); }
			ptr<AppBroadcastStreamAudioHeader> operator->() { return get(); }
		} AudioHeader;
	};
	IAppBroadcastStreamAudioFrame_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastStreamAudioFrame, X> : Windows::Media::Capture::IAppBroadcastStreamAudioFrame_adaptor<X> { typedef adapt IAppBroadcastStreamAudioFrame; };
struct IAppBroadcastStreamAudioFrame : IAppBroadcastStreamAudioFrame_raw, generate<IAppBroadcastStreamAudioFrame> {};

// AppBroadcastStreamAudioFrame
template<typename X> struct statics<AppBroadcastStreamAudioFrame, X> : X {
	typedef typename X::root_type AppBroadcastStreamAudioFrame;
};
struct AppBroadcastStreamAudioFrame : generate<AppBroadcastStreamAudioFrame> {};

// IAppBroadcastStreamVideoFrame
struct IAppBroadcastStreamVideoFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoHeader(AppBroadcastStreamVideoHeader* *value);
	virtual STDMETHODIMP _get_VideoBuffer(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IAppBroadcastStreamVideoFrame_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IAppBroadcastStreamVideoFrame_adaptor::VideoBuffer)->_get_VideoBuffer(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} VideoBuffer;
		struct : property {
			ptr<AppBroadcastStreamVideoHeader> get() { AppBroadcastStreamVideoHeader* value; hrcheck(enc(&IAppBroadcastStreamVideoFrame_adaptor::VideoHeader)->_get_VideoHeader(&value)); return from_abi(value); }
			ptr<AppBroadcastStreamVideoHeader> operator()() { return get(); }
			operator ptr<AppBroadcastStreamVideoHeader> () { return get(); }
			ptr<AppBroadcastStreamVideoHeader> operator->() { return get(); }
		} VideoHeader;
	};
	IAppBroadcastStreamVideoFrame_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastStreamVideoFrame, X> : Windows::Media::Capture::IAppBroadcastStreamVideoFrame_adaptor<X> { typedef adapt IAppBroadcastStreamVideoFrame; };
struct IAppBroadcastStreamVideoFrame : IAppBroadcastStreamVideoFrame_raw, generate<IAppBroadcastStreamVideoFrame> {};

// AppBroadcastStreamVideoFrame
template<typename X> struct statics<AppBroadcastStreamVideoFrame, X> : X {
	typedef typename X::root_type AppBroadcastStreamVideoFrame;
};
struct AppBroadcastStreamVideoFrame : generate<AppBroadcastStreamVideoFrame> {};

// IAppBroadcastStreamVideoHeader
struct IAppBroadcastStreamVideoHeader_raw : IInspectable {
	virtual STDMETHODIMP _get_AbsoluteTimestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_RelativeTimestamp(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_IsKeyFrame(bool *value);
	virtual STDMETHODIMP _get_HasDiscontinuity(bool *value);
	virtual STDMETHODIMP _get_FrameId(unsigned __int64 *value);
};
template<typename X> struct IAppBroadcastStreamVideoHeader_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppBroadcastStreamVideoHeader_adaptor::AbsoluteTimestamp)->_get_AbsoluteTimestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} AbsoluteTimestamp;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppBroadcastStreamVideoHeader_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppBroadcastStreamVideoHeader_adaptor::FrameId)->_get_FrameId(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} FrameId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastStreamVideoHeader_adaptor::HasDiscontinuity)->_get_HasDiscontinuity(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasDiscontinuity;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastStreamVideoHeader_adaptor::IsKeyFrame)->_get_IsKeyFrame(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsKeyFrame;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppBroadcastStreamVideoHeader_adaptor::RelativeTimestamp)->_get_RelativeTimestamp(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RelativeTimestamp;
	};
	IAppBroadcastStreamVideoHeader_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastStreamVideoHeader, X> : Windows::Media::Capture::IAppBroadcastStreamVideoHeader_adaptor<X> { typedef adapt IAppBroadcastStreamVideoHeader; };
struct IAppBroadcastStreamVideoHeader : IAppBroadcastStreamVideoHeader_raw, generate<IAppBroadcastStreamVideoHeader> {};

// AppBroadcastStreamVideoHeader
template<typename X> struct statics<AppBroadcastStreamVideoHeader, X> : X {
	typedef typename X::root_type AppBroadcastStreamVideoHeader;
};
struct AppBroadcastStreamVideoHeader : generate<AppBroadcastStreamVideoHeader> {};

// IAppBroadcastStreamAudioHeader
struct IAppBroadcastStreamAudioHeader_raw : IInspectable {
	virtual STDMETHODIMP _get_AbsoluteTimestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_RelativeTimestamp(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_HasDiscontinuity(bool *value);
	virtual STDMETHODIMP _get_FrameId(unsigned __int64 *value);
};
template<typename X> struct IAppBroadcastStreamAudioHeader_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppBroadcastStreamAudioHeader_adaptor::AbsoluteTimestamp)->_get_AbsoluteTimestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} AbsoluteTimestamp;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppBroadcastStreamAudioHeader_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppBroadcastStreamAudioHeader_adaptor::FrameId)->_get_FrameId(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} FrameId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastStreamAudioHeader_adaptor::HasDiscontinuity)->_get_HasDiscontinuity(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasDiscontinuity;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppBroadcastStreamAudioHeader_adaptor::RelativeTimestamp)->_get_RelativeTimestamp(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RelativeTimestamp;
	};
	IAppBroadcastStreamAudioHeader_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastStreamAudioHeader, X> : Windows::Media::Capture::IAppBroadcastStreamAudioHeader_adaptor<X> { typedef adapt IAppBroadcastStreamAudioHeader; };
struct IAppBroadcastStreamAudioHeader : IAppBroadcastStreamAudioHeader_raw, generate<IAppBroadcastStreamAudioHeader> {};

// AppBroadcastStreamAudioHeader
template<typename X> struct statics<AppBroadcastStreamAudioHeader, X> : X {
	typedef typename X::root_type AppBroadcastStreamAudioHeader;
};
struct AppBroadcastStreamAudioHeader : generate<AppBroadcastStreamAudioHeader> {};

// IAppBroadcastTriggerDetails
struct IAppBroadcastTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_BackgroundService(AppBroadcastBackgroundService* *value);
};
template<typename X> struct IAppBroadcastTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<AppBroadcastBackgroundService> get() { AppBroadcastBackgroundService* value; hrcheck(enc(&IAppBroadcastTriggerDetails_adaptor::BackgroundService)->_get_BackgroundService(&value)); return from_abi(value); }
			ptr<AppBroadcastBackgroundService> operator()() { return get(); }
			operator ptr<AppBroadcastBackgroundService> () { return get(); }
			ptr<AppBroadcastBackgroundService> operator->() { return get(); }
		} BackgroundService;
	};
	IAppBroadcastTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastTriggerDetails, X> : Windows::Media::Capture::IAppBroadcastTriggerDetails_adaptor<X> { typedef adapt IAppBroadcastTriggerDetails; };
struct IAppBroadcastTriggerDetails : IAppBroadcastTriggerDetails_raw, generate<IAppBroadcastTriggerDetails> {};

// AppBroadcastTriggerDetails
template<typename X> struct statics<AppBroadcastTriggerDetails, X> : X {
	typedef typename X::root_type AppBroadcastTriggerDetails;
};
struct AppBroadcastTriggerDetails : generate<AppBroadcastTriggerDetails> {};

// IAppBroadcastPlugInManagerStatics
struct IAppBroadcastPlugInManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(AppBroadcastPlugInManager* *ppInstance);
	virtual STDMETHODIMP _GetForUser(System::User* user, AppBroadcastPlugInManager* *ppInstance);
};

// IAppBroadcastPlugInManager
struct IAppBroadcastPlugInManager_raw : IInspectable {
	virtual STDMETHODIMP _get_IsBroadcastProviderAvailable(bool *value);
	virtual STDMETHODIMP _get_PlugInList(Foundation::Collections::IVectorView<AppBroadcastPlugIn*>* *value);
	virtual STDMETHODIMP _get_DefaultPlugIn(AppBroadcastPlugIn* *value);
	virtual STDMETHODIMP _put_DefaultPlugIn(AppBroadcastPlugIn* value);
};
template<typename X> struct IAppBroadcastPlugInManager_adaptor : X {
	union {
		struct : property {
			ptr<AppBroadcastPlugIn> get() { AppBroadcastPlugIn* value; hrcheck(enc(&IAppBroadcastPlugInManager_adaptor::DefaultPlugIn)->_get_DefaultPlugIn(&value)); return from_abi(value); }
			ptr<AppBroadcastPlugIn> operator()() { return get(); }
			operator ptr<AppBroadcastPlugIn> () { return get(); }
			ptr<AppBroadcastPlugIn> operator->() { return get(); }
			void put(pptr<AppBroadcastPlugIn> value) { hrcheck(enc(&IAppBroadcastPlugInManager_adaptor::DefaultPlugIn)->_put_DefaultPlugIn(value)); }
			void operator=(pptr<AppBroadcastPlugIn> value) { put(value); }
			void operator()(pptr<AppBroadcastPlugIn> value) { put(value); }
		} DefaultPlugIn;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastPlugInManager_adaptor::IsBroadcastProviderAvailable)->_get_IsBroadcastProviderAvailable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBroadcastProviderAvailable;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<AppBroadcastPlugIn>>> get() { Foundation::Collections::IVectorView<AppBroadcastPlugIn*>* value; hrcheck(enc(&IAppBroadcastPlugInManager_adaptor::PlugInList)->_get_PlugInList(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<AppBroadcastPlugIn>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<AppBroadcastPlugIn>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<AppBroadcastPlugIn>>> operator->() { return get(); }
		} PlugInList;
	};
	IAppBroadcastPlugInManager_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPlugInManager, X> : Windows::Media::Capture::IAppBroadcastPlugInManager_adaptor<X> { typedef adapt IAppBroadcastPlugInManager; };
struct IAppBroadcastPlugInManager : IAppBroadcastPlugInManager_raw, generate<IAppBroadcastPlugInManager> {};

// AppBroadcastPlugInManager
template<typename> struct AppBroadcastPlugInManager_statics {
	static ptr<AppBroadcastPlugInManager> GetDefault() { AppBroadcastPlugInManager* ppInstance; hrcheck(get_activation_factory<AppBroadcastPlugInManager, IAppBroadcastPlugInManagerStatics>()->_GetDefault(&ppInstance)); return from_abi(ppInstance); }
	static ptr<AppBroadcastPlugInManager> GetForUser(pptr<System::User> user) { AppBroadcastPlugInManager* ppInstance; hrcheck(get_activation_factory<AppBroadcastPlugInManager, IAppBroadcastPlugInManagerStatics>()->_GetForUser(user, &ppInstance)); return from_abi(ppInstance); }
};

template<typename X> struct statics<AppBroadcastPlugInManager, X> : X, Windows::Media::Capture::AppBroadcastPlugInManager_statics<void> {
	typedef typename X::root_type AppBroadcastPlugInManager;
};
struct AppBroadcastPlugInManager : generate<AppBroadcastPlugInManager> {};

// IAppBroadcastPlugIn
struct IAppBroadcastPlugIn_raw : IInspectable {
	virtual STDMETHODIMP _get_AppId(HSTRING *value);
	virtual STDMETHODIMP _get_ProviderSettings(AppBroadcastProviderSettings* *value);
	virtual STDMETHODIMP _get_Logo(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
};
template<typename X> struct IAppBroadcastPlugIn_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastPlugIn_adaptor::AppId)->_get_AppId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastPlugIn_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IAppBroadcastPlugIn_adaptor::Logo)->_get_Logo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} Logo;
		struct : property {
			ptr<AppBroadcastProviderSettings> get() { AppBroadcastProviderSettings* value; hrcheck(enc(&IAppBroadcastPlugIn_adaptor::ProviderSettings)->_get_ProviderSettings(&value)); return from_abi(value); }
			ptr<AppBroadcastProviderSettings> operator()() { return get(); }
			operator ptr<AppBroadcastProviderSettings> () { return get(); }
			ptr<AppBroadcastProviderSettings> operator->() { return get(); }
		} ProviderSettings;
	};
	IAppBroadcastPlugIn_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPlugIn, X> : Windows::Media::Capture::IAppBroadcastPlugIn_adaptor<X> { typedef adapt IAppBroadcastPlugIn; };
struct IAppBroadcastPlugIn : IAppBroadcastPlugIn_raw, generate<IAppBroadcastPlugIn> {};

// AppBroadcastPlugIn
template<typename X> struct statics<AppBroadcastPlugIn, X> : X {
	typedef typename X::root_type AppBroadcastPlugIn;
};
struct AppBroadcastPlugIn : generate<AppBroadcastPlugIn> {};

// IAppBroadcastServices
struct IAppBroadcastServices_raw : IInspectable {
	virtual STDMETHODIMP _get_CaptureTargetType(AppBroadcastCaptureTargetType *value);
	virtual STDMETHODIMP _put_CaptureTargetType(AppBroadcastCaptureTargetType value);
	virtual STDMETHODIMP _get_BroadcastTitle(HSTRING *value);
	virtual STDMETHODIMP _put_BroadcastTitle(HSTRING value);
	virtual STDMETHODIMP _get_BroadcastLanguage(HSTRING *value);
	virtual STDMETHODIMP _put_BroadcastLanguage(HSTRING value);
	virtual STDMETHODIMP _get_UserName(HSTRING *value);
	virtual STDMETHODIMP _get_CanCapture(bool *value);
	virtual STDMETHODIMP _EnterBroadcastModeAsync(AppBroadcastPlugIn* plugIn, Foundation::IAsyncOperation<unsigned>* *operation);
	virtual STDMETHODIMP _ExitBroadcastMode(AppBroadcastExitBroadcastModeReason reason);
	virtual STDMETHODIMP _StartBroadcast();
	virtual STDMETHODIMP _PauseBroadcast();
	virtual STDMETHODIMP _ResumeBroadcast();
	virtual STDMETHODIMP _StartPreview(Foundation::Size desiredSize, AppBroadcastPreview* *preview);
	virtual STDMETHODIMP _get_State(AppBroadcastState* *value);
};
template<typename X> struct IAppBroadcastServices_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastServices_adaptor::BroadcastLanguage)->_get_BroadcastLanguage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastServices_adaptor::BroadcastLanguage)->_put_BroadcastLanguage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} BroadcastLanguage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastServices_adaptor::BroadcastTitle)->_get_BroadcastTitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastServices_adaptor::BroadcastTitle)->_put_BroadcastTitle(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} BroadcastTitle;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastServices_adaptor::CanCapture)->_get_CanCapture(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanCapture;
		struct : property {
			AppBroadcastCaptureTargetType get() { AppBroadcastCaptureTargetType value; hrcheck(enc(&IAppBroadcastServices_adaptor::CaptureTargetType)->_get_CaptureTargetType(&value)); return value; }
			AppBroadcastCaptureTargetType operator()() { return get(); }
			operator AppBroadcastCaptureTargetType () { return get(); }
			void put(AppBroadcastCaptureTargetType value) { hrcheck(enc(&IAppBroadcastServices_adaptor::CaptureTargetType)->_put_CaptureTargetType(value)); }
			void operator=(AppBroadcastCaptureTargetType value) { put(value); }
			void operator()(AppBroadcastCaptureTargetType value) { put(value); }
		} CaptureTargetType;
		struct : property {
			ptr<AppBroadcastState> get() { AppBroadcastState* value; hrcheck(enc(&IAppBroadcastServices_adaptor::State)->_get_State(&value)); return from_abi(value); }
			ptr<AppBroadcastState> operator()() { return get(); }
			operator ptr<AppBroadcastState> () { return get(); }
			ptr<AppBroadcastState> operator->() { return get(); }
		} State;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastServices_adaptor::UserName)->_get_UserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserName;
	};
	ptr<Foundation::IAsyncOperation<unsigned>> EnterBroadcastModeAsync(pptr<AppBroadcastPlugIn> plugIn) { Foundation::IAsyncOperation<unsigned>* operation; hrcheck(X::get()->_EnterBroadcastModeAsync(plugIn, &operation)); return from_abi(operation); }
	void ExitBroadcastMode(AppBroadcastExitBroadcastModeReason reason) { hrcheck(X::get()->_ExitBroadcastMode(reason)); }
	void StartBroadcast() { hrcheck(X::get()->_StartBroadcast()); }
	void PauseBroadcast() { hrcheck(X::get()->_PauseBroadcast()); }
	void ResumeBroadcast() { hrcheck(X::get()->_ResumeBroadcast()); }
	ptr<AppBroadcastPreview> StartPreview(const Foundation::Size& desiredSize) { AppBroadcastPreview* preview; hrcheck(X::get()->_StartPreview(desiredSize, &preview)); return from_abi(preview); }
	IAppBroadcastServices_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastServices, X> : Windows::Media::Capture::IAppBroadcastServices_adaptor<X> { typedef adapt IAppBroadcastServices; };
struct IAppBroadcastServices : IAppBroadcastServices_raw, generate<IAppBroadcastServices> {};

// IAppBroadcastPreview
struct IAppBroadcastPreview_raw : IInspectable {
	virtual STDMETHODIMP _StopPreview();
	virtual STDMETHODIMP _get_PreviewState(AppBroadcastPreviewState *value);
	virtual STDMETHODIMP _get_ErrorCode(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _add_PreviewStateChanged(Foundation::TypedEventHandler<AppBroadcastPreview*, AppBroadcastPreviewStateChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PreviewStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_PreviewStreamReader(AppBroadcastPreviewStreamReader* *value);
};
template<typename X> struct IAppBroadcastPreview_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IAppBroadcastPreview_adaptor::ErrorCode)->_get_ErrorCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} ErrorCode;
		struct : property {
			AppBroadcastPreviewState get() { AppBroadcastPreviewState value; hrcheck(enc(&IAppBroadcastPreview_adaptor::PreviewState)->_get_PreviewState(&value)); return value; }
			AppBroadcastPreviewState operator()() { return get(); }
			operator AppBroadcastPreviewState () { return get(); }
		} PreviewState;
		struct : property {
			ptr<AppBroadcastPreviewStreamReader> get() { AppBroadcastPreviewStreamReader* value; hrcheck(enc(&IAppBroadcastPreview_adaptor::PreviewStreamReader)->_get_PreviewStreamReader(&value)); return from_abi(value); }
			ptr<AppBroadcastPreviewStreamReader> operator()() { return get(); }
			operator ptr<AppBroadcastPreviewStreamReader> () { return get(); }
			ptr<AppBroadcastPreviewStreamReader> operator->() { return get(); }
		} PreviewStreamReader;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastPreview>, ptr<AppBroadcastPreviewStateChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastPreview_adaptor::PreviewStateChanged)->_add_PreviewStateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastPreview_adaptor::PreviewStateChanged)->_remove_PreviewStateChanged(token)); }
		} PreviewStateChanged;
	};
	void StopPreview() { hrcheck(X::get()->_StopPreview()); }
	IAppBroadcastPreview_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPreview, X> : Windows::Media::Capture::IAppBroadcastPreview_adaptor<X> { typedef adapt IAppBroadcastPreview; };
struct IAppBroadcastPreview : IAppBroadcastPreview_raw, generate<IAppBroadcastPreview> {};

// AppBroadcastPreview
template<typename X> struct statics<AppBroadcastPreview, X> : X {
	typedef typename X::root_type AppBroadcastPreview;
};
struct AppBroadcastPreview : generate<AppBroadcastPreview> {};

// IAppBroadcastState
struct IAppBroadcastState_raw : IInspectable {
	virtual STDMETHODIMP _get_IsCaptureTargetRunning(bool *value);
	virtual STDMETHODIMP _get_ViewerCount(unsigned *value);
	virtual STDMETHODIMP _get_ShouldCaptureMicrophone(bool *value);
	virtual STDMETHODIMP _put_ShouldCaptureMicrophone(bool value);
	virtual STDMETHODIMP _RestartMicrophoneCapture();
	virtual STDMETHODIMP _get_ShouldCaptureCamera(bool *value);
	virtual STDMETHODIMP _put_ShouldCaptureCamera(bool value);
	virtual STDMETHODIMP _RestartCameraCapture();
	virtual STDMETHODIMP _get_EncodedVideoSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_MicrophoneCaptureState(AppBroadcastMicrophoneCaptureState *value);
	virtual STDMETHODIMP _get_MicrophoneCaptureError(unsigned *value);
	virtual STDMETHODIMP _get_CameraCaptureState(AppBroadcastCameraCaptureState *value);
	virtual STDMETHODIMP _get_CameraCaptureError(unsigned *value);
	virtual STDMETHODIMP _get_StreamState(AppBroadcastStreamState *value);
	virtual STDMETHODIMP _get_PlugInState(AppBroadcastPlugInState *value);
	virtual STDMETHODIMP _get_OAuthRequestUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_OAuthCallbackUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_AuthenticationResult(Security::Authentication::Web::WebAuthenticationResult* *value);
	virtual STDMETHODIMP _put_AuthenticationResult(Security::Authentication::Web::WebAuthenticationResult* value);
	virtual STDMETHODIMP _put_SignInState(AppBroadcastSignInState value);
	virtual STDMETHODIMP _get_SignInState(AppBroadcastSignInState *value);
	virtual STDMETHODIMP _get_TerminationReason(AppBroadcastTerminationReason *value);
	virtual STDMETHODIMP _get_TerminationReasonPlugInSpecific(unsigned *value);
	virtual STDMETHODIMP _add_ViewerCountChanged(Foundation::TypedEventHandler<AppBroadcastState*, AppBroadcastViewerCountChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ViewerCountChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MicrophoneCaptureStateChanged(Foundation::TypedEventHandler<AppBroadcastState*, AppBroadcastMicrophoneCaptureStateChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MicrophoneCaptureStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CameraCaptureStateChanged(Foundation::TypedEventHandler<AppBroadcastState*, AppBroadcastCameraCaptureStateChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraCaptureStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PlugInStateChanged(Foundation::TypedEventHandler<AppBroadcastState*, AppBroadcastPlugInStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlugInStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_StreamStateChanged(Foundation::TypedEventHandler<AppBroadcastState*, AppBroadcastStreamStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StreamStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CaptureTargetClosed(Foundation::TypedEventHandler<AppBroadcastState*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CaptureTargetClosed(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppBroadcastState_adaptor : X {
	union {
		struct : property {
			ptr<Security::Authentication::Web::WebAuthenticationResult> get() { Security::Authentication::Web::WebAuthenticationResult* value; hrcheck(enc(&IAppBroadcastState_adaptor::AuthenticationResult)->_get_AuthenticationResult(&value)); return from_abi(value); }
			ptr<Security::Authentication::Web::WebAuthenticationResult> operator()() { return get(); }
			operator ptr<Security::Authentication::Web::WebAuthenticationResult> () { return get(); }
			ptr<Security::Authentication::Web::WebAuthenticationResult> operator->() { return get(); }
			void put(pptr<Security::Authentication::Web::WebAuthenticationResult> value) { hrcheck(enc(&IAppBroadcastState_adaptor::AuthenticationResult)->_put_AuthenticationResult(value)); }
			void operator=(pptr<Security::Authentication::Web::WebAuthenticationResult> value) { put(value); }
			void operator()(pptr<Security::Authentication::Web::WebAuthenticationResult> value) { put(value); }
		} AuthenticationResult;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastState_adaptor::CameraCaptureError)->_get_CameraCaptureError(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CameraCaptureError;
		struct : property {
			AppBroadcastCameraCaptureState get() { AppBroadcastCameraCaptureState value; hrcheck(enc(&IAppBroadcastState_adaptor::CameraCaptureState)->_get_CameraCaptureState(&value)); return value; }
			AppBroadcastCameraCaptureState operator()() { return get(); }
			operator AppBroadcastCameraCaptureState () { return get(); }
		} CameraCaptureState;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IAppBroadcastState_adaptor::EncodedVideoSize)->_get_EncodedVideoSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} EncodedVideoSize;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastState_adaptor::IsCaptureTargetRunning)->_get_IsCaptureTargetRunning(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCaptureTargetRunning;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastState_adaptor::MicrophoneCaptureError)->_get_MicrophoneCaptureError(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MicrophoneCaptureError;
		struct : property {
			AppBroadcastMicrophoneCaptureState get() { AppBroadcastMicrophoneCaptureState value; hrcheck(enc(&IAppBroadcastState_adaptor::MicrophoneCaptureState)->_get_MicrophoneCaptureState(&value)); return value; }
			AppBroadcastMicrophoneCaptureState operator()() { return get(); }
			operator AppBroadcastMicrophoneCaptureState () { return get(); }
		} MicrophoneCaptureState;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAppBroadcastState_adaptor::OAuthCallbackUri)->_get_OAuthCallbackUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} OAuthCallbackUri;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAppBroadcastState_adaptor::OAuthRequestUri)->_get_OAuthRequestUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} OAuthRequestUri;
		struct : property {
			AppBroadcastPlugInState get() { AppBroadcastPlugInState value; hrcheck(enc(&IAppBroadcastState_adaptor::PlugInState)->_get_PlugInState(&value)); return value; }
			AppBroadcastPlugInState operator()() { return get(); }
			operator AppBroadcastPlugInState () { return get(); }
		} PlugInState;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastState_adaptor::ShouldCaptureCamera)->_get_ShouldCaptureCamera(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastState_adaptor::ShouldCaptureCamera)->_put_ShouldCaptureCamera(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShouldCaptureCamera;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppBroadcastState_adaptor::ShouldCaptureMicrophone)->_get_ShouldCaptureMicrophone(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppBroadcastState_adaptor::ShouldCaptureMicrophone)->_put_ShouldCaptureMicrophone(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShouldCaptureMicrophone;
		struct : property {
			AppBroadcastSignInState get() { AppBroadcastSignInState value; hrcheck(enc(&IAppBroadcastState_adaptor::SignInState)->_get_SignInState(&value)); return value; }
			AppBroadcastSignInState operator()() { return get(); }
			operator AppBroadcastSignInState () { return get(); }
			void put(AppBroadcastSignInState value) { hrcheck(enc(&IAppBroadcastState_adaptor::SignInState)->_put_SignInState(value)); }
			void operator=(AppBroadcastSignInState value) { put(value); }
			void operator()(AppBroadcastSignInState value) { put(value); }
		} SignInState;
		struct : property {
			AppBroadcastStreamState get() { AppBroadcastStreamState value; hrcheck(enc(&IAppBroadcastState_adaptor::StreamState)->_get_StreamState(&value)); return value; }
			AppBroadcastStreamState operator()() { return get(); }
			operator AppBroadcastStreamState () { return get(); }
		} StreamState;
		struct : property {
			AppBroadcastTerminationReason get() { AppBroadcastTerminationReason value; hrcheck(enc(&IAppBroadcastState_adaptor::TerminationReason)->_get_TerminationReason(&value)); return value; }
			AppBroadcastTerminationReason operator()() { return get(); }
			operator AppBroadcastTerminationReason () { return get(); }
		} TerminationReason;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastState_adaptor::TerminationReasonPlugInSpecific)->_get_TerminationReasonPlugInSpecific(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} TerminationReasonPlugInSpecific;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastState_adaptor::ViewerCount)->_get_ViewerCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ViewerCount;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastState>, ptr<AppBroadcastCameraCaptureStateChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastState_adaptor::CameraCaptureStateChanged)->_add_CameraCaptureStateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastState_adaptor::CameraCaptureStateChanged)->_remove_CameraCaptureStateChanged(token)); }
		} CameraCaptureStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastState>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastState_adaptor::CaptureTargetClosed)->_add_CaptureTargetClosed(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastState_adaptor::CaptureTargetClosed)->_remove_CaptureTargetClosed(token)); }
		} CaptureTargetClosed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastState>, ptr<AppBroadcastMicrophoneCaptureStateChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastState_adaptor::MicrophoneCaptureStateChanged)->_add_MicrophoneCaptureStateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastState_adaptor::MicrophoneCaptureStateChanged)->_remove_MicrophoneCaptureStateChanged(token)); }
		} MicrophoneCaptureStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastState>, ptr<AppBroadcastPlugInStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastState_adaptor::PlugInStateChanged)->_add_PlugInStateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastState_adaptor::PlugInStateChanged)->_remove_PlugInStateChanged(token)); }
		} PlugInStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastState>, ptr<AppBroadcastStreamStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastState_adaptor::StreamStateChanged)->_add_StreamStateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastState_adaptor::StreamStateChanged)->_remove_StreamStateChanged(token)); }
		} StreamStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastState>, ptr<AppBroadcastViewerCountChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastState_adaptor::ViewerCountChanged)->_add_ViewerCountChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastState_adaptor::ViewerCountChanged)->_remove_ViewerCountChanged(token)); }
		} ViewerCountChanged;
	};
	void RestartMicrophoneCapture() { hrcheck(X::get()->_RestartMicrophoneCapture()); }
	void RestartCameraCapture() { hrcheck(X::get()->_RestartCameraCapture()); }
	IAppBroadcastState_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastState, X> : Windows::Media::Capture::IAppBroadcastState_adaptor<X> { typedef adapt IAppBroadcastState; };
struct IAppBroadcastState : IAppBroadcastState_raw, generate<IAppBroadcastState> {};

// AppBroadcastState
template<typename X> struct statics<AppBroadcastState, X> : X {
	typedef typename X::root_type AppBroadcastState;
};
struct AppBroadcastState : generate<AppBroadcastState> {};

// IAppBroadcastViewerCountChangedEventArgs
struct IAppBroadcastViewerCountChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ViewerCount(unsigned *value);
};
template<typename X> struct IAppBroadcastViewerCountChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastViewerCountChangedEventArgs_adaptor::ViewerCount)->_get_ViewerCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ViewerCount;
	};
	IAppBroadcastViewerCountChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastViewerCountChangedEventArgs, X> : Windows::Media::Capture::IAppBroadcastViewerCountChangedEventArgs_adaptor<X> { typedef adapt IAppBroadcastViewerCountChangedEventArgs; };
struct IAppBroadcastViewerCountChangedEventArgs : IAppBroadcastViewerCountChangedEventArgs_raw, generate<IAppBroadcastViewerCountChangedEventArgs> {};

// AppBroadcastViewerCountChangedEventArgs
template<typename X> struct statics<AppBroadcastViewerCountChangedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastViewerCountChangedEventArgs;
};
struct AppBroadcastViewerCountChangedEventArgs : generate<AppBroadcastViewerCountChangedEventArgs> {};

// IAppBroadcastMicrophoneCaptureStateChangedEventArgs
struct IAppBroadcastMicrophoneCaptureStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(AppBroadcastMicrophoneCaptureState *value);
	virtual STDMETHODIMP _get_ErrorCode(unsigned *value);
};
template<typename X> struct IAppBroadcastMicrophoneCaptureStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastMicrophoneCaptureStateChangedEventArgs_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ErrorCode;
		struct : property {
			AppBroadcastMicrophoneCaptureState get() { AppBroadcastMicrophoneCaptureState value; hrcheck(enc(&IAppBroadcastMicrophoneCaptureStateChangedEventArgs_adaptor::State)->_get_State(&value)); return value; }
			AppBroadcastMicrophoneCaptureState operator()() { return get(); }
			operator AppBroadcastMicrophoneCaptureState () { return get(); }
		} State;
	};
	IAppBroadcastMicrophoneCaptureStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastMicrophoneCaptureStateChangedEventArgs, X> : Windows::Media::Capture::IAppBroadcastMicrophoneCaptureStateChangedEventArgs_adaptor<X> { typedef adapt IAppBroadcastMicrophoneCaptureStateChangedEventArgs; };
struct IAppBroadcastMicrophoneCaptureStateChangedEventArgs : IAppBroadcastMicrophoneCaptureStateChangedEventArgs_raw, generate<IAppBroadcastMicrophoneCaptureStateChangedEventArgs> {};

// AppBroadcastMicrophoneCaptureStateChangedEventArgs
template<typename X> struct statics<AppBroadcastMicrophoneCaptureStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastMicrophoneCaptureStateChangedEventArgs;
};
struct AppBroadcastMicrophoneCaptureStateChangedEventArgs : generate<AppBroadcastMicrophoneCaptureStateChangedEventArgs> {};

// IAppBroadcastCameraCaptureStateChangedEventArgs
struct IAppBroadcastCameraCaptureStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(AppBroadcastCameraCaptureState *value);
	virtual STDMETHODIMP _get_ErrorCode(unsigned *value);
};
template<typename X> struct IAppBroadcastCameraCaptureStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastCameraCaptureStateChangedEventArgs_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ErrorCode;
		struct : property {
			AppBroadcastCameraCaptureState get() { AppBroadcastCameraCaptureState value; hrcheck(enc(&IAppBroadcastCameraCaptureStateChangedEventArgs_adaptor::State)->_get_State(&value)); return value; }
			AppBroadcastCameraCaptureState operator()() { return get(); }
			operator AppBroadcastCameraCaptureState () { return get(); }
		} State;
	};
	IAppBroadcastCameraCaptureStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastCameraCaptureStateChangedEventArgs, X> : Windows::Media::Capture::IAppBroadcastCameraCaptureStateChangedEventArgs_adaptor<X> { typedef adapt IAppBroadcastCameraCaptureStateChangedEventArgs; };
struct IAppBroadcastCameraCaptureStateChangedEventArgs : IAppBroadcastCameraCaptureStateChangedEventArgs_raw, generate<IAppBroadcastCameraCaptureStateChangedEventArgs> {};

// AppBroadcastCameraCaptureStateChangedEventArgs
template<typename X> struct statics<AppBroadcastCameraCaptureStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastCameraCaptureStateChangedEventArgs;
};
struct AppBroadcastCameraCaptureStateChangedEventArgs : generate<AppBroadcastCameraCaptureStateChangedEventArgs> {};

// IAppBroadcastPlugInStateChangedEventArgs
struct IAppBroadcastPlugInStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PlugInState(AppBroadcastPlugInState *value);
};
template<typename X> struct IAppBroadcastPlugInStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			AppBroadcastPlugInState get() { AppBroadcastPlugInState value; hrcheck(enc(&IAppBroadcastPlugInStateChangedEventArgs_adaptor::PlugInState)->_get_PlugInState(&value)); return value; }
			AppBroadcastPlugInState operator()() { return get(); }
			operator AppBroadcastPlugInState () { return get(); }
		} PlugInState;
	};
	IAppBroadcastPlugInStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPlugInStateChangedEventArgs, X> : Windows::Media::Capture::IAppBroadcastPlugInStateChangedEventArgs_adaptor<X> { typedef adapt IAppBroadcastPlugInStateChangedEventArgs; };
struct IAppBroadcastPlugInStateChangedEventArgs : IAppBroadcastPlugInStateChangedEventArgs_raw, generate<IAppBroadcastPlugInStateChangedEventArgs> {};

// AppBroadcastPlugInStateChangedEventArgs
template<typename X> struct statics<AppBroadcastPlugInStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastPlugInStateChangedEventArgs;
};
struct AppBroadcastPlugInStateChangedEventArgs : generate<AppBroadcastPlugInStateChangedEventArgs> {};

// IAppBroadcastPreviewStateChangedEventArgs
struct IAppBroadcastPreviewStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PreviewState(AppBroadcastPreviewState *value);
	virtual STDMETHODIMP _get_ErrorCode(unsigned *value);
};
template<typename X> struct IAppBroadcastPreviewStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastPreviewStateChangedEventArgs_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ErrorCode;
		struct : property {
			AppBroadcastPreviewState get() { AppBroadcastPreviewState value; hrcheck(enc(&IAppBroadcastPreviewStateChangedEventArgs_adaptor::PreviewState)->_get_PreviewState(&value)); return value; }
			AppBroadcastPreviewState operator()() { return get(); }
			operator AppBroadcastPreviewState () { return get(); }
		} PreviewState;
	};
	IAppBroadcastPreviewStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPreviewStateChangedEventArgs, X> : Windows::Media::Capture::IAppBroadcastPreviewStateChangedEventArgs_adaptor<X> { typedef adapt IAppBroadcastPreviewStateChangedEventArgs; };
struct IAppBroadcastPreviewStateChangedEventArgs : IAppBroadcastPreviewStateChangedEventArgs_raw, generate<IAppBroadcastPreviewStateChangedEventArgs> {};

// AppBroadcastPreviewStateChangedEventArgs
template<typename X> struct statics<AppBroadcastPreviewStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppBroadcastPreviewStateChangedEventArgs;
};
struct AppBroadcastPreviewStateChangedEventArgs : generate<AppBroadcastPreviewStateChangedEventArgs> {};

// IAppBroadcastPreviewStreamReader
struct IAppBroadcastPreviewStreamReader_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoWidth(unsigned *value);
	virtual STDMETHODIMP _get_VideoHeight(unsigned *value);
	virtual STDMETHODIMP _get_VideoStride(unsigned *value);
	virtual STDMETHODIMP _get_VideoBitmapPixelFormat(Graphics::Imaging::BitmapPixelFormat *value);
	virtual STDMETHODIMP _get_VideoBitmapAlphaMode(Graphics::Imaging::BitmapAlphaMode *value);
	virtual STDMETHODIMP _TryGetNextVideoFrame(AppBroadcastPreviewStreamVideoFrame* *frame);
	virtual STDMETHODIMP _add_VideoFrameArrived(Foundation::TypedEventHandler<AppBroadcastPreviewStreamReader*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoFrameArrived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppBroadcastPreviewStreamReader_adaptor : X {
	union {
		struct : property {
			Graphics::Imaging::BitmapAlphaMode get() { Graphics::Imaging::BitmapAlphaMode value; hrcheck(enc(&IAppBroadcastPreviewStreamReader_adaptor::VideoBitmapAlphaMode)->_get_VideoBitmapAlphaMode(&value)); return value; }
			Graphics::Imaging::BitmapAlphaMode operator()() { return get(); }
			operator Graphics::Imaging::BitmapAlphaMode () { return get(); }
		} VideoBitmapAlphaMode;
		struct : property {
			Graphics::Imaging::BitmapPixelFormat get() { Graphics::Imaging::BitmapPixelFormat value; hrcheck(enc(&IAppBroadcastPreviewStreamReader_adaptor::VideoBitmapPixelFormat)->_get_VideoBitmapPixelFormat(&value)); return value; }
			Graphics::Imaging::BitmapPixelFormat operator()() { return get(); }
			operator Graphics::Imaging::BitmapPixelFormat () { return get(); }
		} VideoBitmapPixelFormat;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastPreviewStreamReader_adaptor::VideoHeight)->_get_VideoHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideoHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastPreviewStreamReader_adaptor::VideoStride)->_get_VideoStride(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideoStride;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastPreviewStreamReader_adaptor::VideoWidth)->_get_VideoWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideoWidth;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppBroadcastPreviewStreamReader>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppBroadcastPreviewStreamReader_adaptor::VideoFrameArrived)->_add_VideoFrameArrived(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppBroadcastPreviewStreamReader_adaptor::VideoFrameArrived)->_remove_VideoFrameArrived(token)); }
		} VideoFrameArrived;
	};
	ptr<AppBroadcastPreviewStreamVideoFrame> TryGetNextVideoFrame() { AppBroadcastPreviewStreamVideoFrame* frame; hrcheck(X::get()->_TryGetNextVideoFrame(&frame)); return from_abi(frame); }
	IAppBroadcastPreviewStreamReader_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPreviewStreamReader, X> : Windows::Media::Capture::IAppBroadcastPreviewStreamReader_adaptor<X> { typedef adapt IAppBroadcastPreviewStreamReader; };
struct IAppBroadcastPreviewStreamReader : IAppBroadcastPreviewStreamReader_raw, generate<IAppBroadcastPreviewStreamReader> {};

// AppBroadcastPreviewStreamReader
template<typename X> struct statics<AppBroadcastPreviewStreamReader, X> : X {
	typedef typename X::root_type AppBroadcastPreviewStreamReader;
};
struct AppBroadcastPreviewStreamReader : generate<AppBroadcastPreviewStreamReader> {};

// IAppBroadcastPreviewStreamVideoFrame
struct IAppBroadcastPreviewStreamVideoFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoHeader(AppBroadcastPreviewStreamVideoHeader* *value);
	virtual STDMETHODIMP _get_VideoBuffer(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IAppBroadcastPreviewStreamVideoFrame_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IAppBroadcastPreviewStreamVideoFrame_adaptor::VideoBuffer)->_get_VideoBuffer(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} VideoBuffer;
		struct : property {
			ptr<AppBroadcastPreviewStreamVideoHeader> get() { AppBroadcastPreviewStreamVideoHeader* value; hrcheck(enc(&IAppBroadcastPreviewStreamVideoFrame_adaptor::VideoHeader)->_get_VideoHeader(&value)); return from_abi(value); }
			ptr<AppBroadcastPreviewStreamVideoHeader> operator()() { return get(); }
			operator ptr<AppBroadcastPreviewStreamVideoHeader> () { return get(); }
			ptr<AppBroadcastPreviewStreamVideoHeader> operator->() { return get(); }
		} VideoHeader;
	};
	IAppBroadcastPreviewStreamVideoFrame_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPreviewStreamVideoFrame, X> : Windows::Media::Capture::IAppBroadcastPreviewStreamVideoFrame_adaptor<X> { typedef adapt IAppBroadcastPreviewStreamVideoFrame; };
struct IAppBroadcastPreviewStreamVideoFrame : IAppBroadcastPreviewStreamVideoFrame_raw, generate<IAppBroadcastPreviewStreamVideoFrame> {};

// AppBroadcastPreviewStreamVideoFrame
template<typename X> struct statics<AppBroadcastPreviewStreamVideoFrame, X> : X {
	typedef typename X::root_type AppBroadcastPreviewStreamVideoFrame;
};
struct AppBroadcastPreviewStreamVideoFrame : generate<AppBroadcastPreviewStreamVideoFrame> {};

// IAppBroadcastPreviewStreamVideoHeader
struct IAppBroadcastPreviewStreamVideoHeader_raw : IInspectable {
	virtual STDMETHODIMP _get_AbsoluteTimestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_RelativeTimestamp(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_FrameId(unsigned __int64 *value);
};
template<typename X> struct IAppBroadcastPreviewStreamVideoHeader_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppBroadcastPreviewStreamVideoHeader_adaptor::AbsoluteTimestamp)->_get_AbsoluteTimestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} AbsoluteTimestamp;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppBroadcastPreviewStreamVideoHeader_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppBroadcastPreviewStreamVideoHeader_adaptor::FrameId)->_get_FrameId(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} FrameId;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppBroadcastPreviewStreamVideoHeader_adaptor::RelativeTimestamp)->_get_RelativeTimestamp(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RelativeTimestamp;
	};
	IAppBroadcastPreviewStreamVideoHeader_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastPreviewStreamVideoHeader, X> : Windows::Media::Capture::IAppBroadcastPreviewStreamVideoHeader_adaptor<X> { typedef adapt IAppBroadcastPreviewStreamVideoHeader; };
struct IAppBroadcastPreviewStreamVideoHeader : IAppBroadcastPreviewStreamVideoHeader_raw, generate<IAppBroadcastPreviewStreamVideoHeader> {};

// AppBroadcastPreviewStreamVideoHeader
template<typename X> struct statics<AppBroadcastPreviewStreamVideoHeader, X> : X {
	typedef typename X::root_type AppBroadcastPreviewStreamVideoHeader;
};
struct AppBroadcastPreviewStreamVideoHeader : generate<AppBroadcastPreviewStreamVideoHeader> {};

// AppBroadcastServices
template<typename X> struct statics<AppBroadcastServices, X> : X {
	typedef typename X::root_type AppBroadcastServices;
};
struct AppBroadcastServices : generate<AppBroadcastServices> {};

// IAppCaptureManagerStatics
struct IAppCaptureManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetCurrentSettings(AppCaptureSettings* *value);
	virtual STDMETHODIMP _ApplySettings(AppCaptureSettings* appCaptureSettings);
};

// IAppCaptureSettings5
struct IAppCaptureSettings5_raw : IInspectable {
	virtual STDMETHODIMP _put_IsEchoCancellationEnabled(bool value);
	virtual STDMETHODIMP _get_IsEchoCancellationEnabled(bool *value);
	virtual STDMETHODIMP _put_IsCursorImageCaptureEnabled(bool value);
	virtual STDMETHODIMP _get_IsCursorImageCaptureEnabled(bool *value);
};
template<typename X> struct IAppCaptureSettings5_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings5_adaptor::IsCursorImageCaptureEnabled)->_get_IsCursorImageCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings5_adaptor::IsCursorImageCaptureEnabled)->_put_IsCursorImageCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCursorImageCaptureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings5_adaptor::IsEchoCancellationEnabled)->_get_IsEchoCancellationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings5_adaptor::IsEchoCancellationEnabled)->_put_IsEchoCancellationEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEchoCancellationEnabled;
	};
	IAppCaptureSettings5_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureSettings5, X> : Windows::Media::Capture::IAppCaptureSettings5_adaptor<X> { typedef adapt IAppCaptureSettings5; };
struct IAppCaptureSettings5 : IAppCaptureSettings5_raw, generate<IAppCaptureSettings5> {};

// IAppCaptureSettings4
struct IAppCaptureSettings4_raw : IInspectable {
	virtual STDMETHODIMP _put_IsMicrophoneCaptureEnabledByDefault(bool value);
	virtual STDMETHODIMP _get_IsMicrophoneCaptureEnabledByDefault(bool *value);
	virtual STDMETHODIMP _put_SystemAudioGain(double value);
	virtual STDMETHODIMP _get_SystemAudioGain(double *value);
	virtual STDMETHODIMP _put_MicrophoneGain(double value);
	virtual STDMETHODIMP _get_MicrophoneGain(double *value);
	virtual STDMETHODIMP _put_VideoEncodingFrameRateMode(AppCaptureVideoEncodingFrameRateMode value);
	virtual STDMETHODIMP _get_VideoEncodingFrameRateMode(AppCaptureVideoEncodingFrameRateMode *value);
};
template<typename X> struct IAppCaptureSettings4_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings4_adaptor::IsMicrophoneCaptureEnabledByDefault)->_get_IsMicrophoneCaptureEnabledByDefault(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings4_adaptor::IsMicrophoneCaptureEnabledByDefault)->_put_IsMicrophoneCaptureEnabledByDefault(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMicrophoneCaptureEnabledByDefault;
		struct : property {
			double get() { double value; hrcheck(enc(&IAppCaptureSettings4_adaptor::MicrophoneGain)->_get_MicrophoneGain(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IAppCaptureSettings4_adaptor::MicrophoneGain)->_put_MicrophoneGain(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} MicrophoneGain;
		struct : property {
			double get() { double value; hrcheck(enc(&IAppCaptureSettings4_adaptor::SystemAudioGain)->_get_SystemAudioGain(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IAppCaptureSettings4_adaptor::SystemAudioGain)->_put_SystemAudioGain(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} SystemAudioGain;
		struct : property {
			AppCaptureVideoEncodingFrameRateMode get() { AppCaptureVideoEncodingFrameRateMode value; hrcheck(enc(&IAppCaptureSettings4_adaptor::VideoEncodingFrameRateMode)->_get_VideoEncodingFrameRateMode(&value)); return value; }
			AppCaptureVideoEncodingFrameRateMode operator()() { return get(); }
			operator AppCaptureVideoEncodingFrameRateMode () { return get(); }
			void put(AppCaptureVideoEncodingFrameRateMode value) { hrcheck(enc(&IAppCaptureSettings4_adaptor::VideoEncodingFrameRateMode)->_put_VideoEncodingFrameRateMode(value)); }
			void operator=(AppCaptureVideoEncodingFrameRateMode value) { put(value); }
			void operator()(AppCaptureVideoEncodingFrameRateMode value) { put(value); }
		} VideoEncodingFrameRateMode;
	};
	IAppCaptureSettings4_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureSettings4, X> : Windows::Media::Capture::IAppCaptureSettings4_adaptor<X> { typedef adapt IAppCaptureSettings4; };
struct IAppCaptureSettings4 : IAppCaptureSettings4_raw, generate<IAppCaptureSettings4> {};

// IAppCaptureSettings3
struct IAppCaptureSettings3_raw : IInspectable {
	virtual STDMETHODIMP _put_IsMicrophoneCaptureEnabled(bool value);
	virtual STDMETHODIMP _get_IsMicrophoneCaptureEnabled(bool *value);
};
template<typename X> struct IAppCaptureSettings3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings3_adaptor::IsMicrophoneCaptureEnabled)->_get_IsMicrophoneCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings3_adaptor::IsMicrophoneCaptureEnabled)->_put_IsMicrophoneCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMicrophoneCaptureEnabled;
	};
	IAppCaptureSettings3_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureSettings3, X> : Windows::Media::Capture::IAppCaptureSettings3_adaptor<X> { typedef adapt IAppCaptureSettings3; };
struct IAppCaptureSettings3 : IAppCaptureSettings3_raw, generate<IAppCaptureSettings3> {};

// IAppCaptureSettings2
struct IAppCaptureSettings2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsGpuConstrained(bool *value);
	virtual STDMETHODIMP _get_AlternateShortcutKeys(AppCaptureAlternateShortcutKeys* *value);
};
template<typename X> struct IAppCaptureSettings2_adaptor : X {
	union {
		struct : property {
			ptr<AppCaptureAlternateShortcutKeys> get() { AppCaptureAlternateShortcutKeys* value; hrcheck(enc(&IAppCaptureSettings2_adaptor::AlternateShortcutKeys)->_get_AlternateShortcutKeys(&value)); return from_abi(value); }
			ptr<AppCaptureAlternateShortcutKeys> operator()() { return get(); }
			operator ptr<AppCaptureAlternateShortcutKeys> () { return get(); }
			ptr<AppCaptureAlternateShortcutKeys> operator->() { return get(); }
		} AlternateShortcutKeys;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings2_adaptor::IsGpuConstrained)->_get_IsGpuConstrained(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsGpuConstrained;
	};
	IAppCaptureSettings2_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureSettings2, X> : Windows::Media::Capture::IAppCaptureSettings2_adaptor<X> { typedef adapt IAppCaptureSettings2; };
struct IAppCaptureSettings2 : IAppCaptureSettings2_raw, generate<IAppCaptureSettings2> {};

// IAppCaptureSettings
struct IAppCaptureSettings_raw : IInspectable {
	virtual STDMETHODIMP _put_AppCaptureDestinationFolder(Storage::StorageFolder* value);
	virtual STDMETHODIMP _get_AppCaptureDestinationFolder(Storage::StorageFolder* *value);
	virtual STDMETHODIMP _put_AudioEncodingBitrate(unsigned value);
	virtual STDMETHODIMP _get_AudioEncodingBitrate(unsigned *value);
	virtual STDMETHODIMP _put_IsAudioCaptureEnabled(bool value);
	virtual STDMETHODIMP _get_IsAudioCaptureEnabled(bool *value);
	virtual STDMETHODIMP _put_CustomVideoEncodingBitrate(unsigned value);
	virtual STDMETHODIMP _get_CustomVideoEncodingBitrate(unsigned *value);
	virtual STDMETHODIMP _put_CustomVideoEncodingHeight(unsigned value);
	virtual STDMETHODIMP _get_CustomVideoEncodingHeight(unsigned *value);
	virtual STDMETHODIMP _put_CustomVideoEncodingWidth(unsigned value);
	virtual STDMETHODIMP _get_CustomVideoEncodingWidth(unsigned *value);
	virtual STDMETHODIMP _put_HistoricalBufferLength(unsigned value);
	virtual STDMETHODIMP _get_HistoricalBufferLength(unsigned *value);
	virtual STDMETHODIMP _put_HistoricalBufferLengthUnit(AppCaptureHistoricalBufferLengthUnit value);
	virtual STDMETHODIMP _get_HistoricalBufferLengthUnit(AppCaptureHistoricalBufferLengthUnit *value);
	virtual STDMETHODIMP _put_IsHistoricalCaptureEnabled(bool value);
	virtual STDMETHODIMP _get_IsHistoricalCaptureEnabled(bool *value);
	virtual STDMETHODIMP _put_IsHistoricalCaptureOnBatteryAllowed(bool value);
	virtual STDMETHODIMP _get_IsHistoricalCaptureOnBatteryAllowed(bool *value);
	virtual STDMETHODIMP _put_IsHistoricalCaptureOnWirelessDisplayAllowed(bool value);
	virtual STDMETHODIMP _get_IsHistoricalCaptureOnWirelessDisplayAllowed(bool *value);
	virtual STDMETHODIMP _put_MaximumRecordLength(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_MaximumRecordLength(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_ScreenshotDestinationFolder(Storage::StorageFolder* value);
	virtual STDMETHODIMP _get_ScreenshotDestinationFolder(Storage::StorageFolder* *value);
	virtual STDMETHODIMP _put_VideoEncodingBitrateMode(AppCaptureVideoEncodingBitrateMode value);
	virtual STDMETHODIMP _get_VideoEncodingBitrateMode(AppCaptureVideoEncodingBitrateMode *value);
	virtual STDMETHODIMP _put_VideoEncodingResolutionMode(AppCaptureVideoEncodingResolutionMode value);
	virtual STDMETHODIMP _get_VideoEncodingResolutionMode(AppCaptureVideoEncodingResolutionMode *value);
	virtual STDMETHODIMP _put_IsAppCaptureEnabled(bool value);
	virtual STDMETHODIMP _get_IsAppCaptureEnabled(bool *value);
	virtual STDMETHODIMP _get_IsCpuConstrained(bool *value);
	virtual STDMETHODIMP _get_IsDisabledByPolicy(bool *value);
	virtual STDMETHODIMP _get_IsMemoryConstrained(bool *value);
	virtual STDMETHODIMP _get_HasHardwareEncoder(bool *value);
};
template<typename X> struct IAppCaptureSettings_adaptor : X {
	union {
		struct : property {
			ptr<Storage::StorageFolder> get() { Storage::StorageFolder* value; hrcheck(enc(&IAppCaptureSettings_adaptor::AppCaptureDestinationFolder)->_get_AppCaptureDestinationFolder(&value)); return from_abi(value); }
			ptr<Storage::StorageFolder> operator()() { return get(); }
			operator ptr<Storage::StorageFolder> () { return get(); }
			ptr<Storage::StorageFolder> operator->() { return get(); }
			void put(pptr<Storage::StorageFolder> value) { hrcheck(enc(&IAppCaptureSettings_adaptor::AppCaptureDestinationFolder)->_put_AppCaptureDestinationFolder(value)); }
			void operator=(pptr<Storage::StorageFolder> value) { put(value); }
			void operator()(pptr<Storage::StorageFolder> value) { put(value); }
		} AppCaptureDestinationFolder;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureSettings_adaptor::AudioEncodingBitrate)->_get_AudioEncodingBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppCaptureSettings_adaptor::AudioEncodingBitrate)->_put_AudioEncodingBitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} AudioEncodingBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureSettings_adaptor::CustomVideoEncodingBitrate)->_get_CustomVideoEncodingBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppCaptureSettings_adaptor::CustomVideoEncodingBitrate)->_put_CustomVideoEncodingBitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CustomVideoEncodingBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureSettings_adaptor::CustomVideoEncodingHeight)->_get_CustomVideoEncodingHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppCaptureSettings_adaptor::CustomVideoEncodingHeight)->_put_CustomVideoEncodingHeight(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CustomVideoEncodingHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureSettings_adaptor::CustomVideoEncodingWidth)->_get_CustomVideoEncodingWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppCaptureSettings_adaptor::CustomVideoEncodingWidth)->_put_CustomVideoEncodingWidth(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CustomVideoEncodingWidth;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::HasHardwareEncoder)->_get_HasHardwareEncoder(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasHardwareEncoder;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureSettings_adaptor::HistoricalBufferLength)->_get_HistoricalBufferLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppCaptureSettings_adaptor::HistoricalBufferLength)->_put_HistoricalBufferLength(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} HistoricalBufferLength;
		struct : property {
			AppCaptureHistoricalBufferLengthUnit get() { AppCaptureHistoricalBufferLengthUnit value; hrcheck(enc(&IAppCaptureSettings_adaptor::HistoricalBufferLengthUnit)->_get_HistoricalBufferLengthUnit(&value)); return value; }
			AppCaptureHistoricalBufferLengthUnit operator()() { return get(); }
			operator AppCaptureHistoricalBufferLengthUnit () { return get(); }
			void put(AppCaptureHistoricalBufferLengthUnit value) { hrcheck(enc(&IAppCaptureSettings_adaptor::HistoricalBufferLengthUnit)->_put_HistoricalBufferLengthUnit(value)); }
			void operator=(AppCaptureHistoricalBufferLengthUnit value) { put(value); }
			void operator()(AppCaptureHistoricalBufferLengthUnit value) { put(value); }
		} HistoricalBufferLengthUnit;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsAppCaptureEnabled)->_get_IsAppCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings_adaptor::IsAppCaptureEnabled)->_put_IsAppCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAppCaptureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsAudioCaptureEnabled)->_get_IsAudioCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings_adaptor::IsAudioCaptureEnabled)->_put_IsAudioCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAudioCaptureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsCpuConstrained)->_get_IsCpuConstrained(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCpuConstrained;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsDisabledByPolicy)->_get_IsDisabledByPolicy(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDisabledByPolicy;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsHistoricalCaptureEnabled)->_get_IsHistoricalCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings_adaptor::IsHistoricalCaptureEnabled)->_put_IsHistoricalCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsHistoricalCaptureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsHistoricalCaptureOnBatteryAllowed)->_get_IsHistoricalCaptureOnBatteryAllowed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings_adaptor::IsHistoricalCaptureOnBatteryAllowed)->_put_IsHistoricalCaptureOnBatteryAllowed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsHistoricalCaptureOnBatteryAllowed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsHistoricalCaptureOnWirelessDisplayAllowed)->_get_IsHistoricalCaptureOnWirelessDisplayAllowed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureSettings_adaptor::IsHistoricalCaptureOnWirelessDisplayAllowed)->_put_IsHistoricalCaptureOnWirelessDisplayAllowed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsHistoricalCaptureOnWirelessDisplayAllowed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureSettings_adaptor::IsMemoryConstrained)->_get_IsMemoryConstrained(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMemoryConstrained;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppCaptureSettings_adaptor::MaximumRecordLength)->_get_MaximumRecordLength(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IAppCaptureSettings_adaptor::MaximumRecordLength)->_put_MaximumRecordLength(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} MaximumRecordLength;
		struct : property {
			ptr<Storage::StorageFolder> get() { Storage::StorageFolder* value; hrcheck(enc(&IAppCaptureSettings_adaptor::ScreenshotDestinationFolder)->_get_ScreenshotDestinationFolder(&value)); return from_abi(value); }
			ptr<Storage::StorageFolder> operator()() { return get(); }
			operator ptr<Storage::StorageFolder> () { return get(); }
			ptr<Storage::StorageFolder> operator->() { return get(); }
			void put(pptr<Storage::StorageFolder> value) { hrcheck(enc(&IAppCaptureSettings_adaptor::ScreenshotDestinationFolder)->_put_ScreenshotDestinationFolder(value)); }
			void operator=(pptr<Storage::StorageFolder> value) { put(value); }
			void operator()(pptr<Storage::StorageFolder> value) { put(value); }
		} ScreenshotDestinationFolder;
		struct : property {
			AppCaptureVideoEncodingBitrateMode get() { AppCaptureVideoEncodingBitrateMode value; hrcheck(enc(&IAppCaptureSettings_adaptor::VideoEncodingBitrateMode)->_get_VideoEncodingBitrateMode(&value)); return value; }
			AppCaptureVideoEncodingBitrateMode operator()() { return get(); }
			operator AppCaptureVideoEncodingBitrateMode () { return get(); }
			void put(AppCaptureVideoEncodingBitrateMode value) { hrcheck(enc(&IAppCaptureSettings_adaptor::VideoEncodingBitrateMode)->_put_VideoEncodingBitrateMode(value)); }
			void operator=(AppCaptureVideoEncodingBitrateMode value) { put(value); }
			void operator()(AppCaptureVideoEncodingBitrateMode value) { put(value); }
		} VideoEncodingBitrateMode;
		struct : property {
			AppCaptureVideoEncodingResolutionMode get() { AppCaptureVideoEncodingResolutionMode value; hrcheck(enc(&IAppCaptureSettings_adaptor::VideoEncodingResolutionMode)->_get_VideoEncodingResolutionMode(&value)); return value; }
			AppCaptureVideoEncodingResolutionMode operator()() { return get(); }
			operator AppCaptureVideoEncodingResolutionMode () { return get(); }
			void put(AppCaptureVideoEncodingResolutionMode value) { hrcheck(enc(&IAppCaptureSettings_adaptor::VideoEncodingResolutionMode)->_put_VideoEncodingResolutionMode(value)); }
			void operator=(AppCaptureVideoEncodingResolutionMode value) { put(value); }
			void operator()(AppCaptureVideoEncodingResolutionMode value) { put(value); }
		} VideoEncodingResolutionMode;
	};
	IAppCaptureSettings_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureSettings, X> : Windows::Media::Capture::IAppCaptureSettings_adaptor<X> { typedef adapt IAppCaptureSettings; };
struct IAppCaptureSettings : IAppCaptureSettings_raw, generate<IAppCaptureSettings> {};

// AppCaptureSettings
template<typename X> struct statics<AppCaptureSettings, X> : X {
	typedef typename X::root_type AppCaptureSettings;
};
struct AppCaptureSettings : generate<AppCaptureSettings> {};

// IAppCaptureAlternateShortcutKeys
struct IAppCaptureAlternateShortcutKeys_raw : IInspectable {
	virtual STDMETHODIMP _put_ToggleGameBarKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_ToggleGameBarKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_ToggleGameBarKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_ToggleGameBarKeyModifiers(System::VirtualKeyModifiers *value);
	virtual STDMETHODIMP _put_SaveHistoricalVideoKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_SaveHistoricalVideoKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_SaveHistoricalVideoKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_SaveHistoricalVideoKeyModifiers(System::VirtualKeyModifiers *value);
	virtual STDMETHODIMP _put_ToggleRecordingKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_ToggleRecordingKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_ToggleRecordingKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_ToggleRecordingKeyModifiers(System::VirtualKeyModifiers *value);
	virtual STDMETHODIMP _put_TakeScreenshotKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_TakeScreenshotKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_TakeScreenshotKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_TakeScreenshotKeyModifiers(System::VirtualKeyModifiers *value);
	virtual STDMETHODIMP _put_ToggleRecordingIndicatorKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_ToggleRecordingIndicatorKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_ToggleRecordingIndicatorKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_ToggleRecordingIndicatorKeyModifiers(System::VirtualKeyModifiers *value);
};
template<typename X> struct IAppCaptureAlternateShortcutKeys_adaptor : X {
	union {
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::SaveHistoricalVideoKey)->_get_SaveHistoricalVideoKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::SaveHistoricalVideoKey)->_put_SaveHistoricalVideoKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} SaveHistoricalVideoKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::SaveHistoricalVideoKeyModifiers)->_get_SaveHistoricalVideoKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::SaveHistoricalVideoKeyModifiers)->_put_SaveHistoricalVideoKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} SaveHistoricalVideoKeyModifiers;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::TakeScreenshotKey)->_get_TakeScreenshotKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::TakeScreenshotKey)->_put_TakeScreenshotKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} TakeScreenshotKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::TakeScreenshotKeyModifiers)->_get_TakeScreenshotKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::TakeScreenshotKeyModifiers)->_put_TakeScreenshotKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} TakeScreenshotKeyModifiers;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleGameBarKey)->_get_ToggleGameBarKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleGameBarKey)->_put_ToggleGameBarKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} ToggleGameBarKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleGameBarKeyModifiers)->_get_ToggleGameBarKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleGameBarKeyModifiers)->_put_ToggleGameBarKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} ToggleGameBarKeyModifiers;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingIndicatorKey)->_get_ToggleRecordingIndicatorKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingIndicatorKey)->_put_ToggleRecordingIndicatorKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} ToggleRecordingIndicatorKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingIndicatorKeyModifiers)->_get_ToggleRecordingIndicatorKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingIndicatorKeyModifiers)->_put_ToggleRecordingIndicatorKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} ToggleRecordingIndicatorKeyModifiers;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingKey)->_get_ToggleRecordingKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingKey)->_put_ToggleRecordingKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} ToggleRecordingKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingKeyModifiers)->_get_ToggleRecordingKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys_adaptor::ToggleRecordingKeyModifiers)->_put_ToggleRecordingKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} ToggleRecordingKeyModifiers;
	};
	IAppCaptureAlternateShortcutKeys_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureAlternateShortcutKeys, X> : Windows::Media::Capture::IAppCaptureAlternateShortcutKeys_adaptor<X> { typedef adapt IAppCaptureAlternateShortcutKeys; };
struct IAppCaptureAlternateShortcutKeys : IAppCaptureAlternateShortcutKeys_raw, generate<IAppCaptureAlternateShortcutKeys> {};

// IAppCaptureAlternateShortcutKeys2
struct IAppCaptureAlternateShortcutKeys2_raw : IInspectable {
	virtual STDMETHODIMP _put_ToggleMicrophoneCaptureKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_ToggleMicrophoneCaptureKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_ToggleMicrophoneCaptureKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_ToggleMicrophoneCaptureKeyModifiers(System::VirtualKeyModifiers *value);
};
template<typename X> struct IAppCaptureAlternateShortcutKeys2_adaptor : X {
	union {
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys2_adaptor::ToggleMicrophoneCaptureKey)->_get_ToggleMicrophoneCaptureKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys2_adaptor::ToggleMicrophoneCaptureKey)->_put_ToggleMicrophoneCaptureKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} ToggleMicrophoneCaptureKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys2_adaptor::ToggleMicrophoneCaptureKeyModifiers)->_get_ToggleMicrophoneCaptureKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys2_adaptor::ToggleMicrophoneCaptureKeyModifiers)->_put_ToggleMicrophoneCaptureKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} ToggleMicrophoneCaptureKeyModifiers;
	};
	IAppCaptureAlternateShortcutKeys2_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureAlternateShortcutKeys2, X> : Windows::Media::Capture::IAppCaptureAlternateShortcutKeys2_adaptor<X> { typedef adapt IAppCaptureAlternateShortcutKeys2; };
struct IAppCaptureAlternateShortcutKeys2 : IAppCaptureAlternateShortcutKeys2_raw, generate<IAppCaptureAlternateShortcutKeys2> {};

// IAppCaptureAlternateShortcutKeys3
struct IAppCaptureAlternateShortcutKeys3_raw : IInspectable {
	virtual STDMETHODIMP _put_ToggleCameraCaptureKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_ToggleCameraCaptureKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_ToggleCameraCaptureKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_ToggleCameraCaptureKeyModifiers(System::VirtualKeyModifiers *value);
	virtual STDMETHODIMP _put_ToggleBroadcastKey(System::VirtualKey value);
	virtual STDMETHODIMP _get_ToggleBroadcastKey(System::VirtualKey *value);
	virtual STDMETHODIMP _put_ToggleBroadcastKeyModifiers(System::VirtualKeyModifiers value);
	virtual STDMETHODIMP _get_ToggleBroadcastKeyModifiers(System::VirtualKeyModifiers *value);
};
template<typename X> struct IAppCaptureAlternateShortcutKeys3_adaptor : X {
	union {
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleBroadcastKey)->_get_ToggleBroadcastKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleBroadcastKey)->_put_ToggleBroadcastKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} ToggleBroadcastKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleBroadcastKeyModifiers)->_get_ToggleBroadcastKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleBroadcastKeyModifiers)->_put_ToggleBroadcastKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} ToggleBroadcastKeyModifiers;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleCameraCaptureKey)->_get_ToggleCameraCaptureKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
			void put(System::VirtualKey value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleCameraCaptureKey)->_put_ToggleCameraCaptureKey(value)); }
			void operator=(System::VirtualKey value) { put(value); }
			void operator()(System::VirtualKey value) { put(value); }
		} ToggleCameraCaptureKey;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleCameraCaptureKeyModifiers)->_get_ToggleCameraCaptureKeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
			void put(System::VirtualKeyModifiers value) { hrcheck(enc(&IAppCaptureAlternateShortcutKeys3_adaptor::ToggleCameraCaptureKeyModifiers)->_put_ToggleCameraCaptureKeyModifiers(value)); }
			void operator=(System::VirtualKeyModifiers value) { put(value); }
			void operator()(System::VirtualKeyModifiers value) { put(value); }
		} ToggleCameraCaptureKeyModifiers;
	};
	IAppCaptureAlternateShortcutKeys3_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureAlternateShortcutKeys3, X> : Windows::Media::Capture::IAppCaptureAlternateShortcutKeys3_adaptor<X> { typedef adapt IAppCaptureAlternateShortcutKeys3; };
struct IAppCaptureAlternateShortcutKeys3 : IAppCaptureAlternateShortcutKeys3_raw, generate<IAppCaptureAlternateShortcutKeys3> {};

// AppCaptureAlternateShortcutKeys
template<typename X> struct statics<AppCaptureAlternateShortcutKeys, X> : X {
	typedef typename X::root_type AppCaptureAlternateShortcutKeys;
};
struct AppCaptureAlternateShortcutKeys : generate<AppCaptureAlternateShortcutKeys> {};

// AppCaptureManager
template<typename> struct AppCaptureManager_statics {
	static ptr<AppCaptureSettings> GetCurrentSettings() { AppCaptureSettings* value; hrcheck(get_activation_factory<AppCaptureManager, IAppCaptureManagerStatics>()->_GetCurrentSettings(&value)); return from_abi(value); }
	static void ApplySettings(pptr<AppCaptureSettings> appCaptureSettings) { hrcheck(get_activation_factory<AppCaptureManager, IAppCaptureManagerStatics>()->_ApplySettings(appCaptureSettings)); }
};

template<typename X> struct statics<AppCaptureManager, X> : X, Windows::Media::Capture::AppCaptureManager_statics<void> {
	typedef typename X::root_type AppCaptureManager;
};
struct AppCaptureManager : generate<AppCaptureManager> {};

// IAppCaptureServices
struct IAppCaptureServices_raw : IInspectable {
	virtual STDMETHODIMP _Record(AppCaptureRecordOperation* *operation);
	virtual STDMETHODIMP _RecordTimeSpan(Foundation::DateTime startTime, Foundation::TimeSpan duration, AppCaptureRecordOperation* *operation);
	virtual STDMETHODIMP _get_CanCapture(bool *value);
	virtual STDMETHODIMP _get_State(AppCaptureState* *value);
};
template<typename X> struct IAppCaptureServices_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureServices_adaptor::CanCapture)->_get_CanCapture(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanCapture;
		struct : property {
			ptr<AppCaptureState> get() { AppCaptureState* value; hrcheck(enc(&IAppCaptureServices_adaptor::State)->_get_State(&value)); return from_abi(value); }
			ptr<AppCaptureState> operator()() { return get(); }
			operator ptr<AppCaptureState> () { return get(); }
			ptr<AppCaptureState> operator->() { return get(); }
		} State;
	};
	ptr<AppCaptureRecordOperation> Record() { AppCaptureRecordOperation* operation; hrcheck(X::get()->_Record(&operation)); return from_abi(operation); }
	ptr<AppCaptureRecordOperation> RecordTimeSpan(const Foundation::DateTime& startTime, const Foundation::TimeSpan& duration) { AppCaptureRecordOperation* operation; hrcheck(X::get()->_RecordTimeSpan(startTime, duration, &operation)); return from_abi(operation); }
	IAppCaptureServices_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureServices, X> : Windows::Media::Capture::IAppCaptureServices_adaptor<X> { typedef adapt IAppCaptureServices; };
struct IAppCaptureServices : IAppCaptureServices_raw, generate<IAppCaptureServices> {};

// IAppCaptureRecordOperation
struct IAppCaptureRecordOperation_raw : IInspectable {
	virtual STDMETHODIMP _StopRecording();
	virtual STDMETHODIMP _get_State(AppCaptureRecordingState *value);
	virtual STDMETHODIMP _get_ErrorCode(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_Duration(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_File(Storage::StorageFile* *value);
	virtual STDMETHODIMP _get_IsFileTruncated(Foundation::IReference<bool>* *value);
	virtual STDMETHODIMP _add_StateChanged(Foundation::TypedEventHandler<AppCaptureRecordOperation*, AppCaptureRecordingStateChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DurationGenerated(Foundation::TypedEventHandler<AppCaptureRecordOperation*, AppCaptureDurationGeneratedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DurationGenerated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_FileGenerated(Foundation::TypedEventHandler<AppCaptureRecordOperation*, AppCaptureFileGeneratedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FileGenerated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppCaptureRecordOperation_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::Duration)->_get_Duration(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} Duration;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::ErrorCode)->_get_ErrorCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} ErrorCode;
		struct : property {
			ptr<Storage::StorageFile> get() { Storage::StorageFile* value; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::File)->_get_File(&value)); return from_abi(value); }
			ptr<Storage::StorageFile> operator()() { return get(); }
			operator ptr<Storage::StorageFile> () { return get(); }
			ptr<Storage::StorageFile> operator->() { return get(); }
		} File;
		struct : property {
			ptr<Foundation::IReference<bool>> get() { Foundation::IReference<bool>* value; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::IsFileTruncated)->_get_IsFileTruncated(&value)); return from_abi(value); }
			ptr<Foundation::IReference<bool>> operator()() { return get(); }
			operator ptr<Foundation::IReference<bool>> () { return get(); }
			ptr<Foundation::IReference<bool>> operator->() { return get(); }
		} IsFileTruncated;
		struct : property {
			AppCaptureRecordingState get() { AppCaptureRecordingState value; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::State)->_get_State(&value)); return value; }
			AppCaptureRecordingState operator()() { return get(); }
			operator AppCaptureRecordingState () { return get(); }
		} State;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppCaptureRecordOperation>, ptr<AppCaptureDurationGeneratedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::DurationGenerated)->_add_DurationGenerated(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppCaptureRecordOperation_adaptor::DurationGenerated)->_remove_DurationGenerated(token)); }
		} DurationGenerated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppCaptureRecordOperation>, ptr<AppCaptureFileGeneratedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::FileGenerated)->_add_FileGenerated(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppCaptureRecordOperation_adaptor::FileGenerated)->_remove_FileGenerated(token)); }
		} FileGenerated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppCaptureRecordOperation>, ptr<AppCaptureRecordingStateChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppCaptureRecordOperation_adaptor::StateChanged)->_add_StateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppCaptureRecordOperation_adaptor::StateChanged)->_remove_StateChanged(token)); }
		} StateChanged;
	};
	void StopRecording() { hrcheck(X::get()->_StopRecording()); }
	IAppCaptureRecordOperation_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureRecordOperation, X> : Windows::Media::Capture::IAppCaptureRecordOperation_adaptor<X> { typedef adapt IAppCaptureRecordOperation; };
struct IAppCaptureRecordOperation : IAppCaptureRecordOperation_raw, generate<IAppCaptureRecordOperation> {};

// AppCaptureRecordOperation
template<typename X> struct statics<AppCaptureRecordOperation, X> : X {
	typedef typename X::root_type AppCaptureRecordOperation;
};
struct AppCaptureRecordOperation : generate<AppCaptureRecordOperation> {};

// IAppCaptureState
struct IAppCaptureState_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTargetRunning(bool *value);
	virtual STDMETHODIMP _get_IsHistoricalCaptureEnabled(bool *value);
	virtual STDMETHODIMP _get_ShouldCaptureMicrophone(bool *value);
	virtual STDMETHODIMP _put_ShouldCaptureMicrophone(bool value);
	virtual STDMETHODIMP _RestartMicrophoneCapture();
	virtual STDMETHODIMP _get_MicrophoneCaptureState(AppCaptureMicrophoneCaptureState *value);
	virtual STDMETHODIMP _get_MicrophoneCaptureError(unsigned *value);
	virtual STDMETHODIMP _add_MicrophoneCaptureStateChanged(Foundation::TypedEventHandler<AppCaptureState*, AppCaptureMicrophoneCaptureStateChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MicrophoneCaptureStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CaptureTargetClosed(Foundation::TypedEventHandler<AppCaptureState*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CaptureTargetClosed(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppCaptureState_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureState_adaptor::IsHistoricalCaptureEnabled)->_get_IsHistoricalCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHistoricalCaptureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureState_adaptor::IsTargetRunning)->_get_IsTargetRunning(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTargetRunning;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureState_adaptor::MicrophoneCaptureError)->_get_MicrophoneCaptureError(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MicrophoneCaptureError;
		struct : property {
			AppCaptureMicrophoneCaptureState get() { AppCaptureMicrophoneCaptureState value; hrcheck(enc(&IAppCaptureState_adaptor::MicrophoneCaptureState)->_get_MicrophoneCaptureState(&value)); return value; }
			AppCaptureMicrophoneCaptureState operator()() { return get(); }
			operator AppCaptureMicrophoneCaptureState () { return get(); }
		} MicrophoneCaptureState;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppCaptureState_adaptor::ShouldCaptureMicrophone)->_get_ShouldCaptureMicrophone(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppCaptureState_adaptor::ShouldCaptureMicrophone)->_put_ShouldCaptureMicrophone(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShouldCaptureMicrophone;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppCaptureState>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppCaptureState_adaptor::CaptureTargetClosed)->_add_CaptureTargetClosed(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppCaptureState_adaptor::CaptureTargetClosed)->_remove_CaptureTargetClosed(token)); }
		} CaptureTargetClosed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppCaptureState>, ptr<AppCaptureMicrophoneCaptureStateChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppCaptureState_adaptor::MicrophoneCaptureStateChanged)->_add_MicrophoneCaptureStateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppCaptureState_adaptor::MicrophoneCaptureStateChanged)->_remove_MicrophoneCaptureStateChanged(token)); }
		} MicrophoneCaptureStateChanged;
	};
	void RestartMicrophoneCapture() { hrcheck(X::get()->_RestartMicrophoneCapture()); }
	IAppCaptureState_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureState, X> : Windows::Media::Capture::IAppCaptureState_adaptor<X> { typedef adapt IAppCaptureState; };
struct IAppCaptureState : IAppCaptureState_raw, generate<IAppCaptureState> {};

// AppCaptureState
template<typename X> struct statics<AppCaptureState, X> : X {
	typedef typename X::root_type AppCaptureState;
};
struct AppCaptureState : generate<AppCaptureState> {};

// IAppCaptureMicrophoneCaptureStateChangedEventArgs
struct IAppCaptureMicrophoneCaptureStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(AppCaptureMicrophoneCaptureState *value);
	virtual STDMETHODIMP _get_ErrorCode(unsigned *value);
};
template<typename X> struct IAppCaptureMicrophoneCaptureStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureMicrophoneCaptureStateChangedEventArgs_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ErrorCode;
		struct : property {
			AppCaptureMicrophoneCaptureState get() { AppCaptureMicrophoneCaptureState value; hrcheck(enc(&IAppCaptureMicrophoneCaptureStateChangedEventArgs_adaptor::State)->_get_State(&value)); return value; }
			AppCaptureMicrophoneCaptureState operator()() { return get(); }
			operator AppCaptureMicrophoneCaptureState () { return get(); }
		} State;
	};
	IAppCaptureMicrophoneCaptureStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureMicrophoneCaptureStateChangedEventArgs, X> : Windows::Media::Capture::IAppCaptureMicrophoneCaptureStateChangedEventArgs_adaptor<X> { typedef adapt IAppCaptureMicrophoneCaptureStateChangedEventArgs; };
struct IAppCaptureMicrophoneCaptureStateChangedEventArgs : IAppCaptureMicrophoneCaptureStateChangedEventArgs_raw, generate<IAppCaptureMicrophoneCaptureStateChangedEventArgs> {};

// AppCaptureMicrophoneCaptureStateChangedEventArgs
template<typename X> struct statics<AppCaptureMicrophoneCaptureStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppCaptureMicrophoneCaptureStateChangedEventArgs;
};
struct AppCaptureMicrophoneCaptureStateChangedEventArgs : generate<AppCaptureMicrophoneCaptureStateChangedEventArgs> {};

// IAppCaptureRecordingStateChangedEventArgs
struct IAppCaptureRecordingStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(AppCaptureRecordingState *value);
	virtual STDMETHODIMP _get_ErrorCode(unsigned *value);
};
template<typename X> struct IAppCaptureRecordingStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppCaptureRecordingStateChangedEventArgs_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ErrorCode;
		struct : property {
			AppCaptureRecordingState get() { AppCaptureRecordingState value; hrcheck(enc(&IAppCaptureRecordingStateChangedEventArgs_adaptor::State)->_get_State(&value)); return value; }
			AppCaptureRecordingState operator()() { return get(); }
			operator AppCaptureRecordingState () { return get(); }
		} State;
	};
	IAppCaptureRecordingStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureRecordingStateChangedEventArgs, X> : Windows::Media::Capture::IAppCaptureRecordingStateChangedEventArgs_adaptor<X> { typedef adapt IAppCaptureRecordingStateChangedEventArgs; };
struct IAppCaptureRecordingStateChangedEventArgs : IAppCaptureRecordingStateChangedEventArgs_raw, generate<IAppCaptureRecordingStateChangedEventArgs> {};

// AppCaptureRecordingStateChangedEventArgs
template<typename X> struct statics<AppCaptureRecordingStateChangedEventArgs, X> : X {
	typedef typename X::root_type AppCaptureRecordingStateChangedEventArgs;
};
struct AppCaptureRecordingStateChangedEventArgs : generate<AppCaptureRecordingStateChangedEventArgs> {};

// IAppCaptureDurationGeneratedEventArgs
struct IAppCaptureDurationGeneratedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
};
template<typename X> struct IAppCaptureDurationGeneratedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppCaptureDurationGeneratedEventArgs_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
	};
	IAppCaptureDurationGeneratedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureDurationGeneratedEventArgs, X> : Windows::Media::Capture::IAppCaptureDurationGeneratedEventArgs_adaptor<X> { typedef adapt IAppCaptureDurationGeneratedEventArgs; };
struct IAppCaptureDurationGeneratedEventArgs : IAppCaptureDurationGeneratedEventArgs_raw, generate<IAppCaptureDurationGeneratedEventArgs> {};

// AppCaptureDurationGeneratedEventArgs
template<typename X> struct statics<AppCaptureDurationGeneratedEventArgs, X> : X {
	typedef typename X::root_type AppCaptureDurationGeneratedEventArgs;
};
struct AppCaptureDurationGeneratedEventArgs : generate<AppCaptureDurationGeneratedEventArgs> {};

// IAppCaptureFileGeneratedEventArgs
struct IAppCaptureFileGeneratedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_File(Storage::StorageFile* *value);
};
template<typename X> struct IAppCaptureFileGeneratedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::StorageFile> get() { Storage::StorageFile* value; hrcheck(enc(&IAppCaptureFileGeneratedEventArgs_adaptor::File)->_get_File(&value)); return from_abi(value); }
			ptr<Storage::StorageFile> operator()() { return get(); }
			operator ptr<Storage::StorageFile> () { return get(); }
			ptr<Storage::StorageFile> operator->() { return get(); }
		} File;
	};
	IAppCaptureFileGeneratedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureFileGeneratedEventArgs, X> : Windows::Media::Capture::IAppCaptureFileGeneratedEventArgs_adaptor<X> { typedef adapt IAppCaptureFileGeneratedEventArgs; };
struct IAppCaptureFileGeneratedEventArgs : IAppCaptureFileGeneratedEventArgs_raw, generate<IAppCaptureFileGeneratedEventArgs> {};

// AppCaptureFileGeneratedEventArgs
template<typename X> struct statics<AppCaptureFileGeneratedEventArgs, X> : X {
	typedef typename X::root_type AppCaptureFileGeneratedEventArgs;
};
struct AppCaptureFileGeneratedEventArgs : generate<AppCaptureFileGeneratedEventArgs> {};

// AppCaptureServices
template<typename X> struct statics<AppCaptureServices, X> : X {
	typedef typename X::root_type AppCaptureServices;
};
struct AppCaptureServices : generate<AppCaptureServices> {};

// IAppCaptureMetadataWriter
struct IAppCaptureMetadataWriter_raw : IInspectable {
	virtual STDMETHODIMP _AddStringEvent(HSTRING name, HSTRING value, AppCaptureMetadataPriority priority);
	virtual STDMETHODIMP _AddInt32Event(HSTRING name, int value, AppCaptureMetadataPriority priority);
	virtual STDMETHODIMP _AddDoubleEvent(HSTRING name, double value, AppCaptureMetadataPriority priority);
	virtual STDMETHODIMP _StartStringState(HSTRING name, HSTRING value, AppCaptureMetadataPriority priority);
	virtual STDMETHODIMP _StartInt32State(HSTRING name, int value, AppCaptureMetadataPriority priority);
	virtual STDMETHODIMP _StartDoubleState(HSTRING name, double value, AppCaptureMetadataPriority priority);
	virtual STDMETHODIMP _StopState(HSTRING name);
	virtual STDMETHODIMP _StopAllStates();
	virtual STDMETHODIMP _get_RemainingStorageBytesAvailable(unsigned __int64 *value);
	virtual STDMETHODIMP _add_MetadataPurged(Foundation::TypedEventHandler<AppCaptureMetadataWriter*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MetadataPurged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppCaptureMetadataWriter_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppCaptureMetadataWriter_adaptor::RemainingStorageBytesAvailable)->_get_RemainingStorageBytesAvailable(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} RemainingStorageBytesAvailable;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppCaptureMetadataWriter>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppCaptureMetadataWriter_adaptor::MetadataPurged)->_add_MetadataPurged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppCaptureMetadataWriter_adaptor::MetadataPurged)->_remove_MetadataPurged(token)); }
		} MetadataPurged;
	};
	void AddStringEvent(hstring_ref name, hstring_ref value, AppCaptureMetadataPriority priority) { hrcheck(X::get()->_AddStringEvent(name, value, priority)); }
	void AddInt32Event(hstring_ref name, int value, AppCaptureMetadataPriority priority) { hrcheck(X::get()->_AddInt32Event(name, value, priority)); }
	void AddDoubleEvent(hstring_ref name, double value, AppCaptureMetadataPriority priority) { hrcheck(X::get()->_AddDoubleEvent(name, value, priority)); }
	void StartStringState(hstring_ref name, hstring_ref value, AppCaptureMetadataPriority priority) { hrcheck(X::get()->_StartStringState(name, value, priority)); }
	void StartInt32State(hstring_ref name, int value, AppCaptureMetadataPriority priority) { hrcheck(X::get()->_StartInt32State(name, value, priority)); }
	void StartDoubleState(hstring_ref name, double value, AppCaptureMetadataPriority priority) { hrcheck(X::get()->_StartDoubleState(name, value, priority)); }
	void StopState(hstring_ref name) { hrcheck(X::get()->_StopState(name)); }
	void StopAllStates() { hrcheck(X::get()->_StopAllStates()); }
	IAppCaptureMetadataWriter_adaptor() {}
};
template<typename X> struct adapt<IAppCaptureMetadataWriter, X> : Windows::Media::Capture::IAppCaptureMetadataWriter_adaptor<X> { typedef adapt IAppCaptureMetadataWriter; };
struct IAppCaptureMetadataWriter : IAppCaptureMetadataWriter_raw, generate<IAppCaptureMetadataWriter> {};

// AppCaptureMetadataWriter
template<typename X> struct statics<AppCaptureMetadataWriter, X> : X {
	typedef typename X::root_type AppCaptureMetadataWriter;
};
struct AppCaptureMetadataWriter : generate<AppCaptureMetadataWriter> {};

// ICameraOptionsUIStatics
struct ICameraOptionsUIStatics : IInspectable {
	virtual STDMETHODIMP _Show(MediaCapture* mediaCapture);
};

// CameraOptionsUI
template<typename> struct CameraOptionsUI_statics {
	static void Show(pptr<MediaCapture> mediaCapture) { hrcheck(get_activation_factory<CameraOptionsUI, ICameraOptionsUIStatics>()->_Show(mediaCapture)); }
};

template<typename X> struct statics<CameraOptionsUI, X> : X, Windows::Media::Capture::CameraOptionsUI_statics<void> {
	typedef typename X::root_type CameraOptionsUI;
};
struct CameraOptionsUI : generate<CameraOptionsUI> {};

// IGameBarServicesManagerStatics
struct IGameBarServicesManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(GameBarServicesManager* *ppInstance);
};

// IGameBarServicesManager
struct IGameBarServicesManager_raw : IInspectable {
	virtual STDMETHODIMP _add_GameBarServicesCreated(Foundation::TypedEventHandler<GameBarServicesManager*, GameBarServicesManagerGameBarServicesCreatedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_GameBarServicesCreated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IGameBarServicesManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GameBarServicesManager>, ptr<GameBarServicesManagerGameBarServicesCreatedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IGameBarServicesManager_adaptor::GameBarServicesCreated)->_add_GameBarServicesCreated(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IGameBarServicesManager_adaptor::GameBarServicesCreated)->_remove_GameBarServicesCreated(token)); }
		} GameBarServicesCreated;
	};
	IGameBarServicesManager_adaptor() {}
};
template<typename X> struct adapt<IGameBarServicesManager, X> : Windows::Media::Capture::IGameBarServicesManager_adaptor<X> { typedef adapt IGameBarServicesManager; };
struct IGameBarServicesManager : IGameBarServicesManager_raw, generate<IGameBarServicesManager> {};

// GameBarServicesManager
template<typename> struct GameBarServicesManager_statics {
	static ptr<GameBarServicesManager> GetDefault() { GameBarServicesManager* ppInstance; hrcheck(get_activation_factory<GameBarServicesManager, IGameBarServicesManagerStatics>()->_GetDefault(&ppInstance)); return from_abi(ppInstance); }
};

template<typename X> struct statics<GameBarServicesManager, X> : X, Windows::Media::Capture::GameBarServicesManager_statics<void> {
	typedef typename X::root_type GameBarServicesManager;
};
struct GameBarServicesManager : generate<GameBarServicesManager> {};

// IGameBarServicesManagerGameBarServicesCreatedEventArgs
struct IGameBarServicesManagerGameBarServicesCreatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_GameBarServices(Capture::GameBarServices* *value);
};
template<typename X> struct IGameBarServicesManagerGameBarServicesCreatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Capture::GameBarServices> get() { Capture::GameBarServices* value; hrcheck(enc(&IGameBarServicesManagerGameBarServicesCreatedEventArgs_adaptor::GameBarServices)->_get_GameBarServices(&value)); return from_abi(value); }
			ptr<Capture::GameBarServices> operator()() { return get(); }
			operator ptr<Capture::GameBarServices> () { return get(); }
			ptr<Capture::GameBarServices> operator->() { return get(); }
		} GameBarServices;
	};
	IGameBarServicesManagerGameBarServicesCreatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IGameBarServicesManagerGameBarServicesCreatedEventArgs, X> : Windows::Media::Capture::IGameBarServicesManagerGameBarServicesCreatedEventArgs_adaptor<X> { typedef adapt IGameBarServicesManagerGameBarServicesCreatedEventArgs; };
struct IGameBarServicesManagerGameBarServicesCreatedEventArgs : IGameBarServicesManagerGameBarServicesCreatedEventArgs_raw, generate<IGameBarServicesManagerGameBarServicesCreatedEventArgs> {};

// GameBarServicesManagerGameBarServicesCreatedEventArgs
template<typename X> struct statics<GameBarServicesManagerGameBarServicesCreatedEventArgs, X> : X {
	typedef typename X::root_type GameBarServicesManagerGameBarServicesCreatedEventArgs;
};
struct GameBarServicesManagerGameBarServicesCreatedEventArgs : generate<GameBarServicesManagerGameBarServicesCreatedEventArgs> {};

// IGameBarServices
struct IGameBarServices_raw : IInspectable {
	virtual STDMETHODIMP _get_TargetCapturePolicy(GameBarTargetCapturePolicy *value);
	virtual STDMETHODIMP _EnableCapture();
	virtual STDMETHODIMP _DisableCapture();
	virtual STDMETHODIMP _get_TargetInfo(GameBarServicesTargetInfo* *value);
	virtual STDMETHODIMP _get_SessionId(HSTRING *value);
	virtual STDMETHODIMP _get_AppBroadcastServices(Capture::AppBroadcastServices* *value);
	virtual STDMETHODIMP _get_AppCaptureServices(Capture::AppCaptureServices* *value);
	virtual STDMETHODIMP _add_CommandReceived(Foundation::TypedEventHandler<GameBarServices*, GameBarServicesCommandEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CommandReceived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IGameBarServices_adaptor : X {
	union {
		struct : property {
			ptr<Capture::AppBroadcastServices> get() { Capture::AppBroadcastServices* value; hrcheck(enc(&IGameBarServices_adaptor::AppBroadcastServices)->_get_AppBroadcastServices(&value)); return from_abi(value); }
			ptr<Capture::AppBroadcastServices> operator()() { return get(); }
			operator ptr<Capture::AppBroadcastServices> () { return get(); }
			ptr<Capture::AppBroadcastServices> operator->() { return get(); }
		} AppBroadcastServices;
		struct : property {
			ptr<Capture::AppCaptureServices> get() { Capture::AppCaptureServices* value; hrcheck(enc(&IGameBarServices_adaptor::AppCaptureServices)->_get_AppCaptureServices(&value)); return from_abi(value); }
			ptr<Capture::AppCaptureServices> operator()() { return get(); }
			operator ptr<Capture::AppCaptureServices> () { return get(); }
			ptr<Capture::AppCaptureServices> operator->() { return get(); }
		} AppCaptureServices;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGameBarServices_adaptor::SessionId)->_get_SessionId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SessionId;
		struct : property {
			GameBarTargetCapturePolicy get() { GameBarTargetCapturePolicy value; hrcheck(enc(&IGameBarServices_adaptor::TargetCapturePolicy)->_get_TargetCapturePolicy(&value)); return value; }
			GameBarTargetCapturePolicy operator()() { return get(); }
			operator GameBarTargetCapturePolicy () { return get(); }
		} TargetCapturePolicy;
		struct : property {
			ptr<GameBarServicesTargetInfo> get() { GameBarServicesTargetInfo* value; hrcheck(enc(&IGameBarServices_adaptor::TargetInfo)->_get_TargetInfo(&value)); return from_abi(value); }
			ptr<GameBarServicesTargetInfo> operator()() { return get(); }
			operator ptr<GameBarServicesTargetInfo> () { return get(); }
			ptr<GameBarServicesTargetInfo> operator->() { return get(); }
		} TargetInfo;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GameBarServices>, ptr<GameBarServicesCommandEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IGameBarServices_adaptor::CommandReceived)->_add_CommandReceived(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IGameBarServices_adaptor::CommandReceived)->_remove_CommandReceived(token)); }
		} CommandReceived;
	};
	void EnableCapture() { hrcheck(X::get()->_EnableCapture()); }
	void DisableCapture() { hrcheck(X::get()->_DisableCapture()); }
	IGameBarServices_adaptor() {}
};
template<typename X> struct adapt<IGameBarServices, X> : Windows::Media::Capture::IGameBarServices_adaptor<X> { typedef adapt IGameBarServices; };
struct IGameBarServices : IGameBarServices_raw, generate<IGameBarServices> {};

// GameBarServices
template<typename X> struct statics<GameBarServices, X> : X {
	typedef typename X::root_type GameBarServices;
};
struct GameBarServices : generate<GameBarServices> {};

// IGameBarServicesTargetInfo
struct IGameBarServicesTargetInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_AppId(HSTRING *value);
	virtual STDMETHODIMP _get_TitleId(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayMode(GameBarServicesDisplayMode *value);
};
template<typename X> struct IGameBarServicesTargetInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGameBarServicesTargetInfo_adaptor::AppId)->_get_AppId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppId;
		struct : property {
			GameBarServicesDisplayMode get() { GameBarServicesDisplayMode value; hrcheck(enc(&IGameBarServicesTargetInfo_adaptor::DisplayMode)->_get_DisplayMode(&value)); return value; }
			GameBarServicesDisplayMode operator()() { return get(); }
			operator GameBarServicesDisplayMode () { return get(); }
		} DisplayMode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGameBarServicesTargetInfo_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGameBarServicesTargetInfo_adaptor::TitleId)->_get_TitleId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TitleId;
	};
	IGameBarServicesTargetInfo_adaptor() {}
};
template<typename X> struct adapt<IGameBarServicesTargetInfo, X> : Windows::Media::Capture::IGameBarServicesTargetInfo_adaptor<X> { typedef adapt IGameBarServicesTargetInfo; };
struct IGameBarServicesTargetInfo : IGameBarServicesTargetInfo_raw, generate<IGameBarServicesTargetInfo> {};

// GameBarServicesTargetInfo
template<typename X> struct statics<GameBarServicesTargetInfo, X> : X {
	typedef typename X::root_type GameBarServicesTargetInfo;
};
struct GameBarServicesTargetInfo : generate<GameBarServicesTargetInfo> {};

// IGameBarServicesCommandEventArgs
struct IGameBarServicesCommandEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Command(GameBarCommand *value);
	virtual STDMETHODIMP _get_Origin(GameBarCommandOrigin *value);
};
template<typename X> struct IGameBarServicesCommandEventArgs_adaptor : X {
	union {
		struct : property {
			GameBarCommand get() { GameBarCommand value; hrcheck(enc(&IGameBarServicesCommandEventArgs_adaptor::Command)->_get_Command(&value)); return value; }
			GameBarCommand operator()() { return get(); }
			operator GameBarCommand () { return get(); }
		} Command;
		struct : property {
			GameBarCommandOrigin get() { GameBarCommandOrigin value; hrcheck(enc(&IGameBarServicesCommandEventArgs_adaptor::Origin)->_get_Origin(&value)); return value; }
			GameBarCommandOrigin operator()() { return get(); }
			operator GameBarCommandOrigin () { return get(); }
		} Origin;
	};
	IGameBarServicesCommandEventArgs_adaptor() {}
};
template<typename X> struct adapt<IGameBarServicesCommandEventArgs, X> : Windows::Media::Capture::IGameBarServicesCommandEventArgs_adaptor<X> { typedef adapt IGameBarServicesCommandEventArgs; };
struct IGameBarServicesCommandEventArgs : IGameBarServicesCommandEventArgs_raw, generate<IGameBarServicesCommandEventArgs> {};

// GameBarServicesCommandEventArgs
template<typename X> struct statics<GameBarServicesCommandEventArgs, X> : X {
	typedef typename X::root_type GameBarServicesCommandEventArgs;
};
struct GameBarServicesCommandEventArgs : generate<GameBarServicesCommandEventArgs> {};

// ISourceSuspensionChangedEventArgs
struct ISourceSuspensionChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsAudioSuspended(bool *value);
	virtual STDMETHODIMP _get_IsVideoSuspended(bool *value);
};
template<typename X> struct ISourceSuspensionChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISourceSuspensionChangedEventArgs_adaptor::IsAudioSuspended)->_get_IsAudioSuspended(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAudioSuspended;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISourceSuspensionChangedEventArgs_adaptor::IsVideoSuspended)->_get_IsVideoSuspended(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVideoSuspended;
	};
	ISourceSuspensionChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISourceSuspensionChangedEventArgs, X> : Windows::Media::Capture::ISourceSuspensionChangedEventArgs_adaptor<X> { typedef adapt ISourceSuspensionChangedEventArgs; };
struct ISourceSuspensionChangedEventArgs : ISourceSuspensionChangedEventArgs_raw, generate<ISourceSuspensionChangedEventArgs> {};

// IScreenCapture
struct IScreenCapture_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioSource(Media::Core::IMediaSource* *value);
	virtual STDMETHODIMP _get_VideoSource(Media::Core::IMediaSource* *value);
	virtual STDMETHODIMP _get_IsAudioSuspended(bool *value);
	virtual STDMETHODIMP _get_IsVideoSuspended(bool *value);
	virtual STDMETHODIMP _add_SourceSuspensionChanged(Foundation::TypedEventHandler<ScreenCapture*, SourceSuspensionChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceSuspensionChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IScreenCapture_adaptor : X {
	union {
		struct : property {
			ptr<Media::Core::IMediaSource> get() { Media::Core::IMediaSource* value; hrcheck(enc(&IScreenCapture_adaptor::AudioSource)->_get_AudioSource(&value)); return from_abi(value); }
			ptr<Media::Core::IMediaSource> operator()() { return get(); }
			operator ptr<Media::Core::IMediaSource> () { return get(); }
			ptr<Media::Core::IMediaSource> operator->() { return get(); }
		} AudioSource;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IScreenCapture_adaptor::IsAudioSuspended)->_get_IsAudioSuspended(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAudioSuspended;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IScreenCapture_adaptor::IsVideoSuspended)->_get_IsVideoSuspended(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVideoSuspended;
		struct : property {
			ptr<Media::Core::IMediaSource> get() { Media::Core::IMediaSource* value; hrcheck(enc(&IScreenCapture_adaptor::VideoSource)->_get_VideoSource(&value)); return from_abi(value); }
			ptr<Media::Core::IMediaSource> operator()() { return get(); }
			operator ptr<Media::Core::IMediaSource> () { return get(); }
			ptr<Media::Core::IMediaSource> operator->() { return get(); }
		} VideoSource;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ScreenCapture>, ptr<SourceSuspensionChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IScreenCapture_adaptor::SourceSuspensionChanged)->_add_SourceSuspensionChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IScreenCapture_adaptor::SourceSuspensionChanged)->_remove_SourceSuspensionChanged(token)); }
		} SourceSuspensionChanged;
	};
	IScreenCapture_adaptor() {}
};
template<typename X> struct adapt<IScreenCapture, X> : Windows::Media::Capture::IScreenCapture_adaptor<X> { typedef adapt IScreenCapture; };
struct IScreenCapture : IScreenCapture_raw, generate<IScreenCapture> {};

// IScreenCaptureStatics
struct IScreenCaptureStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(ScreenCapture* *value);
};

// ScreenCapture
template<typename> struct ScreenCapture_statics {
	static ptr<ScreenCapture> GetForCurrentView() { ScreenCapture* value; hrcheck(get_activation_factory<ScreenCapture, IScreenCaptureStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
};

template<typename X> struct statics<ScreenCapture, X> : X, Windows::Media::Capture::ScreenCapture_statics<void> {
	typedef typename X::root_type ScreenCapture;
};
struct ScreenCapture : generate<ScreenCapture> {};

// SourceSuspensionChangedEventArgs
template<typename X> struct statics<SourceSuspensionChangedEventArgs, X> : X {
	typedef typename X::root_type SourceSuspensionChangedEventArgs;
};
struct SourceSuspensionChangedEventArgs : generate<SourceSuspensionChangedEventArgs> {};
}}}
} // namespace iso_winrt
