#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Input.Inking

#include "Windows.UI.Input.Inking.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.Core.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}}
namespace Storage { namespace Streams {
struct IOutputStream;
struct IInputStream;
}}
namespace UI { namespace Input {
struct PointerPoint;
}}}

// defs

template<> struct def<Windows::UI::Input::Inking::InkPresenterPredefinedConfiguration> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::InkInputRightDragAction> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::InkInputProcessingMode> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::InkPresenterStencilKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::InkHighContrastAdjustment> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokesErasedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenter> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkUnprocessedInput> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkUnprocessedInput> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkUnprocessedInput> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeInput> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkStrokeInput> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkStrokeInput> {};
template<> struct def<Windows::UI::Input::Inking::IInkInputProcessingConfiguration> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkInputProcessingConfiguration> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkInputProcessingConfiguration> {};
template<> struct def<Windows::UI::Input::Inking::IInkSynchronizer> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkSynchronizer> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkSynchronizer> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenter3> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenter2> : interface_type<Windows::UI::Input::Inking::IInkPresenter> {};
template<> struct def<Windows::UI::Input::Inking::InkPresenter> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkPresenter, Windows::UI::Input::Inking::IInkPresenter2, Windows::UI::Input::Inking::IInkPresenter3> {};
template<> struct def<Windows::UI::Input::Inking::InkStrokesCollectedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs> {};
template<> struct def<Windows::UI::Input::Inking::InkStrokesErasedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkStrokesErasedEventArgs> {};
template<> struct def<Windows::UI::Input::Inking::IInkInputConfiguration> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkInputConfiguration> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkInputConfiguration> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenterStencil> : overridable_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenterRuler> : interface_type<Windows::UI::Input::Inking::IInkPresenterStencil> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenterRuler2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenterProtractor> : interface_type<Windows::UI::Input::Inking::IInkPresenterStencil> {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenterRulerFactory> : overridable_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkPresenterRuler> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkPresenterRuler, Windows::UI::Input::Inking::IInkPresenterRuler2>, custom_activators {};
template<> struct def<Windows::UI::Input::Inking::IInkPresenterProtractorFactory> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkPresenterProtractor> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkPresenterProtractor>, custom_activators {};
template<> struct def<Windows::UI::Input::Inking::InkManipulationMode> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::InkRecognitionTarget> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::PenTipShape> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::IInkPoint> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkPoint2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkPointFactory> : overridable_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkPointFactory2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkPoint> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkPoint, Windows::UI::Input::Inking::IInkPoint2>, custom_activators {};
template<> struct def<Windows::UI::Input::Inking::IInkDrawingAttributes> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkDrawingAttributes2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkDrawingAttributesKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::IInkDrawingAttributesPencilProperties> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkDrawingAttributesPencilProperties> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkDrawingAttributesPencilProperties> {};
template<> struct def<Windows::UI::Input::Inking::IInkDrawingAttributes3> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkDrawingAttributes4> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkDrawingAttributesStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkDrawingAttributes5> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkDrawingAttributes> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkDrawingAttributes, Windows::UI::Input::Inking::IInkDrawingAttributes2, Windows::UI::Input::Inking::IInkDrawingAttributes3, Windows::UI::Input::Inking::IInkDrawingAttributes4, Windows::UI::Input::Inking::IInkDrawingAttributes5> {};
template<> struct def<Windows::UI::Input::Inking::IInkModelerAttributes> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkModelerAttributes> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkModelerAttributes> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeRenderingSegment> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkStrokeRenderingSegment> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkStrokeRenderingSegment> {};
template<> struct def<Windows::UI::Input::Inking::IInkStroke> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkStroke3> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkStroke2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkStroke> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkStroke, Windows::UI::Input::Inking::IInkStroke2, Windows::UI::Input::Inking::IInkStroke3> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeBuilder> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeBuilder2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeBuilder3> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkStrokeBuilder> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkStrokeBuilder, Windows::UI::Input::Inking::IInkStrokeBuilder2, Windows::UI::Input::Inking::IInkStrokeBuilder3> {};
template<> struct def<Windows::UI::Input::Inking::IInkRecognitionResult> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkRecognitionResult> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkRecognitionResult> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeContainer> : overridable_type<> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeContainer2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkPersistenceFormat> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::IInkStrokeContainer3> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkStrokeContainer> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkStrokeContainer, Windows::UI::Input::Inking::IInkStrokeContainer2, Windows::UI::Input::Inking::IInkStrokeContainer3> {};
template<> struct def<Windows::UI::Input::Inking::IInkRecognizer> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkRecognizer> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkRecognizer> {};
template<> struct def<Windows::UI::Input::Inking::IInkRecognizerContainer> : overridable_type<> {};
template<> struct def<Windows::UI::Input::Inking::InkRecognizerContainer> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkRecognizerContainer> {};
template<> struct def<Windows::UI::Input::Inking::IInkManager> : interface_type<Windows::UI::Input::Inking::IInkStrokeContainer, Windows::UI::Input::Inking::IInkRecognizerContainer> {};
template<> struct def<Windows::UI::Input::Inking::InkManager> : class_type<Platform::Object, Windows::UI::Input::Inking::IInkManager> {};

// uuids

template<> struct uuid<Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs> { define_guid(0xC4F3F229, 0x1938, 0x495C, 0xB4, 0xD9, 0x6D, 0xE4, 0xB0, 0x8D, 0x48, 0x11);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokesErasedEventArgs> { define_guid(0xA4216A22, 0x1503, 0x4EBF, 0x8F, 0xF5, 0x2D, 0xE8, 0x45, 0x84, 0xA8, 0xAA);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenter> { define_guid(0xA69B70E2, 0x887B, 0x458F, 0xB1, 0x73, 0x4F, 0xE4, 0x43, 0x89, 0x30, 0xA3);};
template<> struct uuid<Windows::UI::Input::Inking::IInkUnprocessedInput> { define_guid(0xDB4445E0, 0x8398, 0x4921, 0xAC, 0x3B, 0xAB, 0x97, 0x8C, 0x5B, 0xA2, 0x56);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeInput> { define_guid(0xCF2FFE7B, 0x5E10, 0x43C6, 0xA0, 0x80, 0x88, 0xF2, 0x6E, 0x1D, 0xC6, 0x7D);};
template<> struct uuid<Windows::UI::Input::Inking::IInkInputProcessingConfiguration> { define_guid(0x2778D85E, 0x33CA, 0x4B06, 0xA6, 0xD3, 0xAC, 0x39, 0x45, 0x11, 0x6D, 0x37);};
template<> struct uuid<Windows::UI::Input::Inking::IInkSynchronizer> { define_guid(0x9B9EA160, 0xAE9B, 0x45F9, 0x84, 0x7, 0x4B, 0x49, 0x3B, 0x16, 0x36, 0x61);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenter3> { define_guid(0x51E1CE89, 0xD37D, 0x4A90, 0x83, 0xFC, 0x7F, 0x5E, 0x9D, 0xFB, 0xF2, 0x17);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenter2> { define_guid(0xCF53E612, 0x9A34, 0x11E6, 0x9F, 0x33, 0xA2, 0x4F, 0xC0, 0xD9, 0x64, 0x9C);};
template<> struct uuid<Windows::UI::Input::Inking::IInkInputConfiguration> { define_guid(0x93A68DC4, 0xB7B, 0x49D7, 0xB3, 0x4F, 0x99, 0x1, 0xE5, 0x24, 0xDC, 0xF2);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenterStencil> { define_guid(0x30D12D6D, 0x3E06, 0x4D02, 0xB1, 0x16, 0x27, 0x7F, 0xB5, 0xD8, 0xAD, 0xDC);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenterRuler> { define_guid(0x6CDA7D5A, 0xDEC7, 0x4DD7, 0x87, 0x7A, 0x21, 0x33, 0xF1, 0x83, 0xD4, 0x8A);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenterRuler2> { define_guid(0x45130DC1, 0xBC61, 0x44D4, 0xA4, 0x23, 0x54, 0x71, 0x2A, 0xE6, 0x71, 0xC4);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenterProtractor> { define_guid(0x7DE3F2AA, 0xEF6C, 0x4E91, 0xA7, 0x3B, 0x5B, 0x70, 0xD5, 0x6F, 0xBD, 0x17);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenterRulerFactory> { define_guid(0x34361BEB, 0x9001, 0x4A4B, 0xA6, 0x90, 0x69, 0xDB, 0xAF, 0x63, 0xE5, 0x1);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPresenterProtractorFactory> { define_guid(0x320103C9, 0x68FA, 0x47E9, 0x81, 0x27, 0x83, 0x70, 0x71, 0x1F, 0xC4, 0x6C);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPoint> { define_guid(0x9F87272B, 0x858C, 0x46A5, 0x9B, 0x41, 0xD1, 0x95, 0x97, 0x4, 0x59, 0xFD);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPoint2> { define_guid(0xFBA9C3F7, 0xAE56, 0x4D5C, 0xBD, 0x2F, 0xA, 0xC4, 0x5F, 0x5E, 0x4A, 0xF9);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPointFactory> { define_guid(0x29E5D51C, 0xC98F, 0x405D, 0x9F, 0x3B, 0xE5, 0x3E, 0x31, 0x6, 0x8D, 0x4D);};
template<> struct uuid<Windows::UI::Input::Inking::IInkPointFactory2> { define_guid(0xE0145E85, 0xDAFF, 0x45F2, 0xAD, 0x69, 0x5, 0xD, 0x82, 0x56, 0xA2, 0x9);};
template<> struct uuid<Windows::UI::Input::Inking::IInkDrawingAttributes> { define_guid(0x97A2176C, 0x6774, 0x48AD, 0x84, 0xF0, 0x48, 0xF5, 0xA9, 0xBE, 0x74, 0xF9);};
template<> struct uuid<Windows::UI::Input::Inking::IInkDrawingAttributes2> { define_guid(0x7CAB6508, 0x8EC4, 0x42FD, 0xA5, 0xA5, 0xE4, 0xB7, 0xD1, 0xD5, 0x31, 0x6D);};
template<> struct uuid<Windows::UI::Input::Inking::IInkDrawingAttributesPencilProperties> { define_guid(0x4F2534CB, 0x2D86, 0x41BB, 0xB0, 0xE8, 0xE4, 0xC2, 0xA0, 0x25, 0x3C, 0x52);};
template<> struct uuid<Windows::UI::Input::Inking::IInkDrawingAttributes3> { define_guid(0x72020002, 0x7D5B, 0x4690, 0x8A, 0xF4, 0xE6, 0x64, 0xCB, 0xE2, 0xB7, 0x4F);};
template<> struct uuid<Windows::UI::Input::Inking::IInkDrawingAttributes4> { define_guid(0xEF65DC25, 0x9F19, 0x456D, 0x91, 0xA3, 0xBC, 0x3A, 0x3D, 0x91, 0xC5, 0xFB);};
template<> struct uuid<Windows::UI::Input::Inking::IInkDrawingAttributesStatics> { define_guid(0xF731E03F, 0x1A65, 0x4862, 0x96, 0xCB, 0x6E, 0x16, 0x65, 0xE1, 0x7F, 0x6D);};
template<> struct uuid<Windows::UI::Input::Inking::IInkDrawingAttributes5> { define_guid(0xD11AA0BB, 0x775, 0x4852, 0xAE, 0x64, 0x41, 0x14, 0x3A, 0x7A, 0xE6, 0xC9);};
template<> struct uuid<Windows::UI::Input::Inking::IInkModelerAttributes> { define_guid(0xBAD31F27, 0xCD9, 0x4BFD, 0xB6, 0xF3, 0x9E, 0x3, 0xBA, 0x8D, 0x74, 0x54);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeRenderingSegment> { define_guid(0x68510F1F, 0x88E3, 0x477A, 0xA2, 0xFA, 0x56, 0x9F, 0x5F, 0x1F, 0x9B, 0xD5);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStroke> { define_guid(0x15144D60, 0xCCE3, 0x4FCF, 0x9D, 0x52, 0x11, 0x51, 0x8A, 0xB6, 0xAF, 0xD4);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStroke3> { define_guid(0x4A807374, 0x9499, 0x411D, 0xA1, 0xC4, 0x68, 0x85, 0x5D, 0x3, 0xD6, 0x5F);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStroke2> { define_guid(0x5DB9E4F4, 0xBAFA, 0x4DE1, 0x89, 0xD3, 0x20, 0x1B, 0x1E, 0xD7, 0xD8, 0x9B);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeBuilder> { define_guid(0x82BBD1DC, 0x1C63, 0x41DC, 0x9E, 0x7, 0x4B, 0x4A, 0x70, 0xCE, 0xD8, 0x1);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeBuilder2> { define_guid(0xBD82BC27, 0x731F, 0x4CBC, 0xBB, 0xBF, 0x6D, 0x46, 0x80, 0x44, 0xF1, 0xE5);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeBuilder3> { define_guid(0xB2C71FCD, 0x5472, 0x46B1, 0xA8, 0x1D, 0xC3, 0x7A, 0x3D, 0x16, 0x94, 0x41);};
template<> struct uuid<Windows::UI::Input::Inking::IInkRecognitionResult> { define_guid(0x36461A94, 0x5068, 0x40EF, 0x8A, 0x5, 0x2C, 0x2F, 0xB6, 0x9, 0x8, 0xA2);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeContainer> { define_guid(0x22ACCBC6, 0xFAA9, 0x4F14, 0xB6, 0x8C, 0xF6, 0xCE, 0xE6, 0x70, 0xAE, 0x16);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeContainer2> { define_guid(0x8901D364, 0xDA36, 0x4BCF, 0x9E, 0x5C, 0xD1, 0x95, 0x82, 0x59, 0x95, 0xB4);};
template<> struct uuid<Windows::UI::Input::Inking::IInkStrokeContainer3> { define_guid(0x3D07BEA5, 0xBAEA, 0x4C82, 0xA7, 0x19, 0x7B, 0x83, 0xDA, 0x10, 0x67, 0xD2);};
template<> struct uuid<Windows::UI::Input::Inking::IInkRecognizer> { define_guid(0x77CCEA3, 0x904D, 0x442A, 0xB1, 0x51, 0xAA, 0xCA, 0x36, 0x31, 0xC4, 0x3B);};
template<> struct uuid<Windows::UI::Input::Inking::IInkRecognizerContainer> { define_guid(0xA74D9A31, 0x8047, 0x4698, 0xA9, 0x12, 0xF8, 0x2A, 0x50, 0x85, 0x1, 0x2F);};
template<> struct uuid<Windows::UI::Input::Inking::IInkManager> { define_guid(0x4744737D, 0x671B, 0x4163, 0x9C, 0x95, 0x4E, 0x8D, 0x7A, 0x3, 0x5F, 0xE1);};

// types

namespace Windows { namespace UI { namespace Input { namespace Inking {

// IInkStrokesCollectedEventArgs
struct IInkStrokesCollectedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Strokes(Foundation::Collections::IVectorView<InkStroke*>* *value);
};
template<typename X> struct IInkStrokesCollectedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> get() { Foundation::Collections::IVectorView<InkStroke*>* value; hrcheck(enc(&IInkStrokesCollectedEventArgs_adaptor::Strokes)->_get_Strokes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> operator->() { return get(); }
		} Strokes;
	};
	IInkStrokesCollectedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IInkStrokesCollectedEventArgs, X> : Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs_adaptor<X> { typedef adapt IInkStrokesCollectedEventArgs; };
struct IInkStrokesCollectedEventArgs : IInkStrokesCollectedEventArgs_raw, generate<IInkStrokesCollectedEventArgs> {};

// IInkStrokesErasedEventArgs
struct IInkStrokesErasedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Strokes(Foundation::Collections::IVectorView<InkStroke*>* *value);
};
template<typename X> struct IInkStrokesErasedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> get() { Foundation::Collections::IVectorView<InkStroke*>* value; hrcheck(enc(&IInkStrokesErasedEventArgs_adaptor::Strokes)->_get_Strokes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> operator->() { return get(); }
		} Strokes;
	};
	IInkStrokesErasedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IInkStrokesErasedEventArgs, X> : Windows::UI::Input::Inking::IInkStrokesErasedEventArgs_adaptor<X> { typedef adapt IInkStrokesErasedEventArgs; };
struct IInkStrokesErasedEventArgs : IInkStrokesErasedEventArgs_raw, generate<IInkStrokesErasedEventArgs> {};

// IInkPresenter
struct IInkPresenter_raw : IInspectable {
	virtual STDMETHODIMP _get_IsInputEnabled(bool *value);
	virtual STDMETHODIMP _put_IsInputEnabled(bool value);
	virtual STDMETHODIMP _get_InputDeviceTypes(UI::Core::CoreInputDeviceTypes *value);
	virtual STDMETHODIMP _put_InputDeviceTypes(UI::Core::CoreInputDeviceTypes value);
	virtual STDMETHODIMP _get_UnprocessedInput(InkUnprocessedInput* *value);
	virtual STDMETHODIMP _get_StrokeInput(InkStrokeInput* *value);
	virtual STDMETHODIMP _get_InputProcessingConfiguration(InkInputProcessingConfiguration* *value);
	virtual STDMETHODIMP _get_StrokeContainer(InkStrokeContainer* *value);
	virtual STDMETHODIMP _put_StrokeContainer(InkStrokeContainer* value);
	virtual STDMETHODIMP _CopyDefaultDrawingAttributes(InkDrawingAttributes* *value);
	virtual STDMETHODIMP _UpdateDefaultDrawingAttributes(InkDrawingAttributes* value);
	virtual STDMETHODIMP _ActivateCustomDrying(InkSynchronizer* *inkSynchronizer);
	virtual STDMETHODIMP _SetPredefinedConfiguration(InkPresenterPredefinedConfiguration value);
	virtual STDMETHODIMP _add_StrokesCollected(Foundation::TypedEventHandler<InkPresenter*, InkStrokesCollectedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_StrokesCollected(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_StrokesErased(Foundation::TypedEventHandler<InkPresenter*, InkStrokesErasedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_StrokesErased(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IInkPresenter_adaptor : X {
	union {
		struct : property {
			UI::Core::CoreInputDeviceTypes get() { UI::Core::CoreInputDeviceTypes value; hrcheck(enc(&IInkPresenter_adaptor::InputDeviceTypes)->_get_InputDeviceTypes(&value)); return value; }
			UI::Core::CoreInputDeviceTypes operator()() { return get(); }
			operator UI::Core::CoreInputDeviceTypes () { return get(); }
			void put(UI::Core::CoreInputDeviceTypes value) { hrcheck(enc(&IInkPresenter_adaptor::InputDeviceTypes)->_put_InputDeviceTypes(value)); }
			void operator=(UI::Core::CoreInputDeviceTypes value) { put(value); }
			void operator()(UI::Core::CoreInputDeviceTypes value) { put(value); }
		} InputDeviceTypes;
		struct : property {
			ptr<InkInputProcessingConfiguration> get() { InkInputProcessingConfiguration* value; hrcheck(enc(&IInkPresenter_adaptor::InputProcessingConfiguration)->_get_InputProcessingConfiguration(&value)); return from_abi(value); }
			ptr<InkInputProcessingConfiguration> operator()() { return get(); }
			operator ptr<InkInputProcessingConfiguration> () { return get(); }
			ptr<InkInputProcessingConfiguration> operator->() { return get(); }
		} InputProcessingConfiguration;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenter_adaptor::IsInputEnabled)->_get_IsInputEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenter_adaptor::IsInputEnabled)->_put_IsInputEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsInputEnabled;
		struct : property {
			ptr<InkStrokeContainer> get() { InkStrokeContainer* value; hrcheck(enc(&IInkPresenter_adaptor::StrokeContainer)->_get_StrokeContainer(&value)); return from_abi(value); }
			ptr<InkStrokeContainer> operator()() { return get(); }
			operator ptr<InkStrokeContainer> () { return get(); }
			ptr<InkStrokeContainer> operator->() { return get(); }
			void put(pptr<InkStrokeContainer> value) { hrcheck(enc(&IInkPresenter_adaptor::StrokeContainer)->_put_StrokeContainer(value)); }
			void operator=(pptr<InkStrokeContainer> value) { put(value); }
			void operator()(pptr<InkStrokeContainer> value) { put(value); }
		} StrokeContainer;
		struct : property {
			ptr<InkStrokeInput> get() { InkStrokeInput* value; hrcheck(enc(&IInkPresenter_adaptor::StrokeInput)->_get_StrokeInput(&value)); return from_abi(value); }
			ptr<InkStrokeInput> operator()() { return get(); }
			operator ptr<InkStrokeInput> () { return get(); }
			ptr<InkStrokeInput> operator->() { return get(); }
		} StrokeInput;
		struct : property {
			ptr<InkUnprocessedInput> get() { InkUnprocessedInput* value; hrcheck(enc(&IInkPresenter_adaptor::UnprocessedInput)->_get_UnprocessedInput(&value)); return from_abi(value); }
			ptr<InkUnprocessedInput> operator()() { return get(); }
			operator ptr<InkUnprocessedInput> () { return get(); }
			ptr<InkUnprocessedInput> operator->() { return get(); }
		} UnprocessedInput;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkPresenter>, ptr<InkStrokesCollectedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkPresenter_adaptor::StrokesCollected)->_add_StrokesCollected(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkPresenter_adaptor::StrokesCollected)->_remove_StrokesCollected(cookie)); }
		} StrokesCollected;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkPresenter>, ptr<InkStrokesErasedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkPresenter_adaptor::StrokesErased)->_add_StrokesErased(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkPresenter_adaptor::StrokesErased)->_remove_StrokesErased(cookie)); }
		} StrokesErased;
	};
	ptr<InkDrawingAttributes> CopyDefaultDrawingAttributes() { InkDrawingAttributes* value; hrcheck(X::get()->_CopyDefaultDrawingAttributes(&value)); return from_abi(value); }
	void UpdateDefaultDrawingAttributes(pptr<InkDrawingAttributes> value) { hrcheck(X::get()->_UpdateDefaultDrawingAttributes(value)); }
	ptr<InkSynchronizer> ActivateCustomDrying() { InkSynchronizer* inkSynchronizer; hrcheck(X::get()->_ActivateCustomDrying(&inkSynchronizer)); return from_abi(inkSynchronizer); }
	void SetPredefinedConfiguration(InkPresenterPredefinedConfiguration value) { hrcheck(X::get()->_SetPredefinedConfiguration(value)); }
	IInkPresenter_adaptor() {}
};
template<typename X> struct adapt<IInkPresenter, X> : Windows::UI::Input::Inking::IInkPresenter_adaptor<X> { typedef adapt IInkPresenter; };
struct IInkPresenter : IInkPresenter_raw, generate<IInkPresenter> {};

// IInkUnprocessedInput
struct IInkUnprocessedInput_raw : IInspectable {
	virtual STDMETHODIMP _add_PointerEntered(Foundation::TypedEventHandler<InkUnprocessedInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerEntered(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerHovered(Foundation::TypedEventHandler<InkUnprocessedInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerHovered(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerExited(Foundation::TypedEventHandler<InkUnprocessedInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerExited(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerPressed(Foundation::TypedEventHandler<InkUnprocessedInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerPressed(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerMoved(Foundation::TypedEventHandler<InkUnprocessedInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerMoved(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerReleased(Foundation::TypedEventHandler<InkUnprocessedInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerReleased(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerLost(Foundation::TypedEventHandler<InkUnprocessedInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerLost(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_InkPresenter(Inking::InkPresenter* *value);
};
template<typename X> struct IInkUnprocessedInput_adaptor : X {
	union {
		struct : property {
			ptr<Inking::InkPresenter> get() { Inking::InkPresenter* value; hrcheck(enc(&IInkUnprocessedInput_adaptor::InkPresenter)->_get_InkPresenter(&value)); return from_abi(value); }
			ptr<Inking::InkPresenter> operator()() { return get(); }
			operator ptr<Inking::InkPresenter> () { return get(); }
			ptr<Inking::InkPresenter> operator->() { return get(); }
		} InkPresenter;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkUnprocessedInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerEntered)->_add_PointerEntered(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerEntered)->_remove_PointerEntered(cookie)); }
		} PointerEntered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkUnprocessedInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerExited)->_add_PointerExited(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerExited)->_remove_PointerExited(cookie)); }
		} PointerExited;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkUnprocessedInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerHovered)->_add_PointerHovered(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerHovered)->_remove_PointerHovered(cookie)); }
		} PointerHovered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkUnprocessedInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerLost)->_add_PointerLost(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerLost)->_remove_PointerLost(cookie)); }
		} PointerLost;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkUnprocessedInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerMoved)->_add_PointerMoved(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerMoved)->_remove_PointerMoved(cookie)); }
		} PointerMoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkUnprocessedInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerPressed)->_add_PointerPressed(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerPressed)->_remove_PointerPressed(cookie)); }
		} PointerPressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkUnprocessedInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerReleased)->_add_PointerReleased(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkUnprocessedInput_adaptor::PointerReleased)->_remove_PointerReleased(cookie)); }
		} PointerReleased;
	};
	IInkUnprocessedInput_adaptor() {}
};
template<typename X> struct adapt<IInkUnprocessedInput, X> : Windows::UI::Input::Inking::IInkUnprocessedInput_adaptor<X> { typedef adapt IInkUnprocessedInput; };
struct IInkUnprocessedInput : IInkUnprocessedInput_raw, generate<IInkUnprocessedInput> {};

// InkUnprocessedInput
template<typename X> struct statics<InkUnprocessedInput, X> : X {
	typedef typename X::root_type InkUnprocessedInput;
};
struct InkUnprocessedInput : generate<InkUnprocessedInput> {};

// IInkStrokeInput
struct IInkStrokeInput_raw : IInspectable {
	virtual STDMETHODIMP _add_StrokeStarted(Foundation::TypedEventHandler<InkStrokeInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_StrokeStarted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_StrokeContinued(Foundation::TypedEventHandler<InkStrokeInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_StrokeContinued(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_StrokeEnded(Foundation::TypedEventHandler<InkStrokeInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_StrokeEnded(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_StrokeCanceled(Foundation::TypedEventHandler<InkStrokeInput*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_StrokeCanceled(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_InkPresenter(Inking::InkPresenter* *value);
};
template<typename X> struct IInkStrokeInput_adaptor : X {
	union {
		struct : property {
			ptr<Inking::InkPresenter> get() { Inking::InkPresenter* value; hrcheck(enc(&IInkStrokeInput_adaptor::InkPresenter)->_get_InkPresenter(&value)); return from_abi(value); }
			ptr<Inking::InkPresenter> operator()() { return get(); }
			operator ptr<Inking::InkPresenter> () { return get(); }
			ptr<Inking::InkPresenter> operator->() { return get(); }
		} InkPresenter;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkStrokeInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkStrokeInput_adaptor::StrokeCanceled)->_add_StrokeCanceled(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkStrokeInput_adaptor::StrokeCanceled)->_remove_StrokeCanceled(cookie)); }
		} StrokeCanceled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkStrokeInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkStrokeInput_adaptor::StrokeContinued)->_add_StrokeContinued(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkStrokeInput_adaptor::StrokeContinued)->_remove_StrokeContinued(cookie)); }
		} StrokeContinued;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkStrokeInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkStrokeInput_adaptor::StrokeEnded)->_add_StrokeEnded(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkStrokeInput_adaptor::StrokeEnded)->_remove_StrokeEnded(cookie)); }
		} StrokeEnded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InkStrokeInput>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IInkStrokeInput_adaptor::StrokeStarted)->_add_StrokeStarted(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IInkStrokeInput_adaptor::StrokeStarted)->_remove_StrokeStarted(cookie)); }
		} StrokeStarted;
	};
	IInkStrokeInput_adaptor() {}
};
template<typename X> struct adapt<IInkStrokeInput, X> : Windows::UI::Input::Inking::IInkStrokeInput_adaptor<X> { typedef adapt IInkStrokeInput; };
struct IInkStrokeInput : IInkStrokeInput_raw, generate<IInkStrokeInput> {};

// InkStrokeInput
template<typename X> struct statics<InkStrokeInput, X> : X {
	typedef typename X::root_type InkStrokeInput;
};
struct InkStrokeInput : generate<InkStrokeInput> {};

// IInkInputProcessingConfiguration
struct IInkInputProcessingConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_Mode(InkInputProcessingMode *value);
	virtual STDMETHODIMP _put_Mode(InkInputProcessingMode value);
	virtual STDMETHODIMP _get_RightDragAction(InkInputRightDragAction *value);
	virtual STDMETHODIMP _put_RightDragAction(InkInputRightDragAction value);
};
template<typename X> struct IInkInputProcessingConfiguration_adaptor : X {
	union {
		struct : property {
			InkInputProcessingMode get() { InkInputProcessingMode value; hrcheck(enc(&IInkInputProcessingConfiguration_adaptor::Mode)->_get_Mode(&value)); return value; }
			InkInputProcessingMode operator()() { return get(); }
			operator InkInputProcessingMode () { return get(); }
			void put(InkInputProcessingMode value) { hrcheck(enc(&IInkInputProcessingConfiguration_adaptor::Mode)->_put_Mode(value)); }
			void operator=(InkInputProcessingMode value) { put(value); }
			void operator()(InkInputProcessingMode value) { put(value); }
		} Mode;
		struct : property {
			InkInputRightDragAction get() { InkInputRightDragAction value; hrcheck(enc(&IInkInputProcessingConfiguration_adaptor::RightDragAction)->_get_RightDragAction(&value)); return value; }
			InkInputRightDragAction operator()() { return get(); }
			operator InkInputRightDragAction () { return get(); }
			void put(InkInputRightDragAction value) { hrcheck(enc(&IInkInputProcessingConfiguration_adaptor::RightDragAction)->_put_RightDragAction(value)); }
			void operator=(InkInputRightDragAction value) { put(value); }
			void operator()(InkInputRightDragAction value) { put(value); }
		} RightDragAction;
	};
	IInkInputProcessingConfiguration_adaptor() {}
};
template<typename X> struct adapt<IInkInputProcessingConfiguration, X> : Windows::UI::Input::Inking::IInkInputProcessingConfiguration_adaptor<X> { typedef adapt IInkInputProcessingConfiguration; };
struct IInkInputProcessingConfiguration : IInkInputProcessingConfiguration_raw, generate<IInkInputProcessingConfiguration> {};

// InkInputProcessingConfiguration
template<typename X> struct statics<InkInputProcessingConfiguration, X> : X {
	typedef typename X::root_type InkInputProcessingConfiguration;
};
struct InkInputProcessingConfiguration : generate<InkInputProcessingConfiguration> {};

// IInkSynchronizer
struct IInkSynchronizer_raw : IInspectable {
	virtual STDMETHODIMP _BeginDry(Foundation::Collections::IVectorView<InkStroke*>* *inkStrokes);
	virtual STDMETHODIMP _EndDry();
};
template<typename X> struct IInkSynchronizer_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> BeginDry() { Foundation::Collections::IVectorView<InkStroke*>* inkStrokes; hrcheck(X::get()->_BeginDry(&inkStrokes)); return from_abi(inkStrokes); }
	void EndDry() { hrcheck(X::get()->_EndDry()); }
};
template<typename X> struct adapt<IInkSynchronizer, X> : Windows::UI::Input::Inking::IInkSynchronizer_adaptor<X> { typedef adapt IInkSynchronizer; };
struct IInkSynchronizer : IInkSynchronizer_raw, generate<IInkSynchronizer> {};

// InkSynchronizer
template<typename X> struct statics<InkSynchronizer, X> : X {
	typedef typename X::root_type InkSynchronizer;
};
struct InkSynchronizer : generate<InkSynchronizer> {};

// IInkPresenter3
struct IInkPresenter3_raw : IInspectable {
	virtual STDMETHODIMP _get_InputConfiguration(InkInputConfiguration* *value);
};
template<typename X> struct IInkPresenter3_adaptor : X {
	union {
		struct : property {
			ptr<InkInputConfiguration> get() { InkInputConfiguration* value; hrcheck(enc(&IInkPresenter3_adaptor::InputConfiguration)->_get_InputConfiguration(&value)); return from_abi(value); }
			ptr<InkInputConfiguration> operator()() { return get(); }
			operator ptr<InkInputConfiguration> () { return get(); }
			ptr<InkInputConfiguration> operator->() { return get(); }
		} InputConfiguration;
	};
	IInkPresenter3_adaptor() {}
};
template<typename X> struct adapt<IInkPresenter3, X> : Windows::UI::Input::Inking::IInkPresenter3_adaptor<X> { typedef adapt IInkPresenter3; };
struct IInkPresenter3 : IInkPresenter3_raw, generate<IInkPresenter3> {};

// IInkPresenter2
struct IInkPresenter2_raw : IInspectable {
	virtual STDMETHODIMP _get_HighContrastAdjustment(InkHighContrastAdjustment *value);
	virtual STDMETHODIMP _put_HighContrastAdjustment(InkHighContrastAdjustment value);
};
template<typename X> struct IInkPresenter2_adaptor : X {
	union {
		struct : property {
			InkHighContrastAdjustment get() { InkHighContrastAdjustment value; hrcheck(enc(&IInkPresenter2_adaptor::HighContrastAdjustment)->_get_HighContrastAdjustment(&value)); return value; }
			InkHighContrastAdjustment operator()() { return get(); }
			operator InkHighContrastAdjustment () { return get(); }
			void put(InkHighContrastAdjustment value) { hrcheck(enc(&IInkPresenter2_adaptor::HighContrastAdjustment)->_put_HighContrastAdjustment(value)); }
			void operator=(InkHighContrastAdjustment value) { put(value); }
			void operator()(InkHighContrastAdjustment value) { put(value); }
		} HighContrastAdjustment;
	};
	IInkPresenter2_adaptor() {}
};
template<typename X> struct adapt<IInkPresenter2, X> : Windows::UI::Input::Inking::IInkPresenter2_adaptor<X> { typedef adapt IInkPresenter2; };
struct IInkPresenter2 : IInkPresenter2_raw, generate<IInkPresenter2> {};

// InkPresenter
template<typename X> struct statics<InkPresenter, X> : X {
	typedef typename X::root_type InkPresenter;
};
struct InkPresenter : generate<InkPresenter> {};

// InkStrokesCollectedEventArgs
template<typename X> struct statics<InkStrokesCollectedEventArgs, X> : X {
	typedef typename X::root_type InkStrokesCollectedEventArgs;
};
struct InkStrokesCollectedEventArgs : generate<InkStrokesCollectedEventArgs> {};

// InkStrokesErasedEventArgs
template<typename X> struct statics<InkStrokesErasedEventArgs, X> : X {
	typedef typename X::root_type InkStrokesErasedEventArgs;
};
struct InkStrokesErasedEventArgs : generate<InkStrokesErasedEventArgs> {};

// IInkInputConfiguration
struct IInkInputConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_IsPrimaryBarrelButtonInputEnabled(bool *value);
	virtual STDMETHODIMP _put_IsPrimaryBarrelButtonInputEnabled(bool value);
	virtual STDMETHODIMP _get_IsEraserInputEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEraserInputEnabled(bool value);
};
template<typename X> struct IInkInputConfiguration_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkInputConfiguration_adaptor::IsEraserInputEnabled)->_get_IsEraserInputEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkInputConfiguration_adaptor::IsEraserInputEnabled)->_put_IsEraserInputEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEraserInputEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkInputConfiguration_adaptor::IsPrimaryBarrelButtonInputEnabled)->_get_IsPrimaryBarrelButtonInputEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkInputConfiguration_adaptor::IsPrimaryBarrelButtonInputEnabled)->_put_IsPrimaryBarrelButtonInputEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPrimaryBarrelButtonInputEnabled;
	};
	IInkInputConfiguration_adaptor() {}
};
template<typename X> struct adapt<IInkInputConfiguration, X> : Windows::UI::Input::Inking::IInkInputConfiguration_adaptor<X> { typedef adapt IInkInputConfiguration; };
struct IInkInputConfiguration : IInkInputConfiguration_raw, generate<IInkInputConfiguration> {};

// InkInputConfiguration
template<typename X> struct statics<InkInputConfiguration, X> : X {
	typedef typename X::root_type InkInputConfiguration;
};
struct InkInputConfiguration : generate<InkInputConfiguration> {};

// IInkPresenterStencil
struct IInkPresenterStencil_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(InkPresenterStencilKind *value) = 0;
	virtual STDMETHODIMP _get_IsVisible(bool *value) = 0;
	virtual STDMETHODIMP _put_IsVisible(bool value) = 0;
	virtual STDMETHODIMP _get_BackgroundColor(Color *value) = 0;
	virtual STDMETHODIMP _put_BackgroundColor(Color value) = 0;
	virtual STDMETHODIMP _get_ForegroundColor(Color *value) = 0;
	virtual STDMETHODIMP _put_ForegroundColor(Color value) = 0;
	virtual STDMETHODIMP _get_Transform(Foundation::Numerics::Matrix3x2 *value) = 0;
	virtual STDMETHODIMP _put_Transform(Foundation::Numerics::Matrix3x2 value) = 0;
};
template<typename X> struct IInkPresenterStencil_adaptor : X {
	union {
		struct : property {
			Color get() { Color value; hrcheck(enc(&IInkPresenterStencil_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IInkPresenterStencil_adaptor::BackgroundColor)->_put_BackgroundColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} BackgroundColor;
		struct : property {
			Color get() { Color value; hrcheck(enc(&IInkPresenterStencil_adaptor::ForegroundColor)->_get_ForegroundColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IInkPresenterStencil_adaptor::ForegroundColor)->_put_ForegroundColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} ForegroundColor;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterStencil_adaptor::IsVisible)->_get_IsVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterStencil_adaptor::IsVisible)->_put_IsVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsVisible;
		struct : property {
			InkPresenterStencilKind get() { InkPresenterStencilKind value; hrcheck(enc(&IInkPresenterStencil_adaptor::Kind)->_get_Kind(&value)); return value; }
			InkPresenterStencilKind operator()() { return get(); }
			operator InkPresenterStencilKind () { return get(); }
		} Kind;
		struct : property {
			Foundation::Numerics::Matrix3x2 get() { Foundation::Numerics::Matrix3x2 value; hrcheck(enc(&IInkPresenterStencil_adaptor::Transform)->_get_Transform(&value)); return value; }
			Foundation::Numerics::Matrix3x2 operator()() { return get(); }
			operator Foundation::Numerics::Matrix3x2 () { return get(); }
			void put(const Foundation::Numerics::Matrix3x2& value) { hrcheck(enc(&IInkPresenterStencil_adaptor::Transform)->_put_Transform(value)); }
			void operator=(const Foundation::Numerics::Matrix3x2& value) { put(value); }
			void operator()(const Foundation::Numerics::Matrix3x2& value) { put(value); }
		} Transform;
	};
	IInkPresenterStencil_adaptor() {}
};
template<typename X> struct adapt<IInkPresenterStencil, X> : Windows::UI::Input::Inking::IInkPresenterStencil_adaptor<X> { typedef adapt IInkPresenterStencil; };
template<typename X> struct IInkPresenterStencil_unadaptor : X {
	STDMETHODIMP _get_Kind(InkPresenterStencilKind *value) { return hrtry([&, this] { get_prop(value, Kind); }); }
	STDMETHODIMP _get_IsVisible(bool *value) { return hrtry([&, this] { get_prop(value, IsVisible); }); }
	STDMETHODIMP _put_IsVisible(bool value) { return hrtry([&, this] { put_prop(value, IsVisible); }); }
	STDMETHODIMP _get_BackgroundColor(Color *value) { return hrtry([&, this] { get_prop(value, BackgroundColor); }); }
	STDMETHODIMP _put_BackgroundColor(Color value) { return hrtry([&, this] { put_prop(value, BackgroundColor); }); }
	STDMETHODIMP _get_ForegroundColor(Color *value) { return hrtry([&, this] { get_prop(value, ForegroundColor); }); }
	STDMETHODIMP _put_ForegroundColor(Color value) { return hrtry([&, this] { put_prop(value, ForegroundColor); }); }
	STDMETHODIMP _get_Transform(Foundation::Numerics::Matrix3x2 *value) { return hrtry([&, this] { get_prop(value, Transform); }); }
	STDMETHODIMP _put_Transform(Foundation::Numerics::Matrix3x2 value) { return hrtry([&, this] { put_prop(value, Transform); }); }
};
template<typename X> struct unadapt<IInkPresenterStencil, X> : Windows::UI::Input::Inking::IInkPresenterStencil_unadaptor<X> {};
struct IInkPresenterStencil : IInkPresenterStencil_raw, generate<IInkPresenterStencil> {};

// IInkPresenterRuler
struct IInkPresenterRuler_raw : IInspectable {
	virtual STDMETHODIMP _get_Length(double *value);
	virtual STDMETHODIMP _put_Length(double value);
	virtual STDMETHODIMP _get_Width(double *value);
	virtual STDMETHODIMP _put_Width(double value);
};
template<typename X> struct IInkPresenterRuler_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IInkPresenterRuler_adaptor::Length)->_get_Length(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInkPresenterRuler_adaptor::Length)->_put_Length(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Length;
		struct : property {
			double get() { double value; hrcheck(enc(&IInkPresenterRuler_adaptor::Width)->_get_Width(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInkPresenterRuler_adaptor::Width)->_put_Width(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Width;
	};
	IInkPresenterRuler_adaptor() {}
};
template<typename X> struct adapt<IInkPresenterRuler, X> : Windows::UI::Input::Inking::IInkPresenterRuler_adaptor<X> { typedef adapt IInkPresenterRuler; };
struct IInkPresenterRuler : IInkPresenterRuler_raw, generate<IInkPresenterRuler> {};

// IInkPresenterRuler2
struct IInkPresenterRuler2_raw : IInspectable {
	virtual STDMETHODIMP _get_AreTickMarksVisible(bool *value);
	virtual STDMETHODIMP _put_AreTickMarksVisible(bool value);
	virtual STDMETHODIMP _get_IsCompassVisible(bool *value);
	virtual STDMETHODIMP _put_IsCompassVisible(bool value);
};
template<typename X> struct IInkPresenterRuler2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterRuler2_adaptor::AreTickMarksVisible)->_get_AreTickMarksVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterRuler2_adaptor::AreTickMarksVisible)->_put_AreTickMarksVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AreTickMarksVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterRuler2_adaptor::IsCompassVisible)->_get_IsCompassVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterRuler2_adaptor::IsCompassVisible)->_put_IsCompassVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCompassVisible;
	};
	IInkPresenterRuler2_adaptor() {}
};
template<typename X> struct adapt<IInkPresenterRuler2, X> : Windows::UI::Input::Inking::IInkPresenterRuler2_adaptor<X> { typedef adapt IInkPresenterRuler2; };
struct IInkPresenterRuler2 : IInkPresenterRuler2_raw, generate<IInkPresenterRuler2> {};

// IInkPresenterProtractor
struct IInkPresenterProtractor_raw : IInspectable {
	virtual STDMETHODIMP _get_AreTickMarksVisible(bool *value);
	virtual STDMETHODIMP _put_AreTickMarksVisible(bool value);
	virtual STDMETHODIMP _get_AreRaysVisible(bool *value);
	virtual STDMETHODIMP _put_AreRaysVisible(bool value);
	virtual STDMETHODIMP _get_IsCenterMarkerVisible(bool *value);
	virtual STDMETHODIMP _put_IsCenterMarkerVisible(bool value);
	virtual STDMETHODIMP _get_IsAngleReadoutVisible(bool *value);
	virtual STDMETHODIMP _put_IsAngleReadoutVisible(bool value);
	virtual STDMETHODIMP _get_IsResizable(bool *value);
	virtual STDMETHODIMP _put_IsResizable(bool value);
	virtual STDMETHODIMP _get_Radius(double *value);
	virtual STDMETHODIMP _put_Radius(double value);
	virtual STDMETHODIMP _get_AccentColor(Color *value);
	virtual STDMETHODIMP _put_AccentColor(Color value);
};
template<typename X> struct IInkPresenterProtractor_adaptor : X {
	union {
		struct : property {
			Color get() { Color value; hrcheck(enc(&IInkPresenterProtractor_adaptor::AccentColor)->_get_AccentColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IInkPresenterProtractor_adaptor::AccentColor)->_put_AccentColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} AccentColor;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterProtractor_adaptor::AreRaysVisible)->_get_AreRaysVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterProtractor_adaptor::AreRaysVisible)->_put_AreRaysVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AreRaysVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterProtractor_adaptor::AreTickMarksVisible)->_get_AreTickMarksVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterProtractor_adaptor::AreTickMarksVisible)->_put_AreTickMarksVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AreTickMarksVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterProtractor_adaptor::IsAngleReadoutVisible)->_get_IsAngleReadoutVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterProtractor_adaptor::IsAngleReadoutVisible)->_put_IsAngleReadoutVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAngleReadoutVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterProtractor_adaptor::IsCenterMarkerVisible)->_get_IsCenterMarkerVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterProtractor_adaptor::IsCenterMarkerVisible)->_put_IsCenterMarkerVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCenterMarkerVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkPresenterProtractor_adaptor::IsResizable)->_get_IsResizable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkPresenterProtractor_adaptor::IsResizable)->_put_IsResizable(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsResizable;
		struct : property {
			double get() { double value; hrcheck(enc(&IInkPresenterProtractor_adaptor::Radius)->_get_Radius(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInkPresenterProtractor_adaptor::Radius)->_put_Radius(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Radius;
	};
	IInkPresenterProtractor_adaptor() {}
};
template<typename X> struct adapt<IInkPresenterProtractor, X> : Windows::UI::Input::Inking::IInkPresenterProtractor_adaptor<X> { typedef adapt IInkPresenterProtractor; };
struct IInkPresenterProtractor : IInkPresenterProtractor_raw, generate<IInkPresenterProtractor> {};

// IInkPresenterRulerFactory
struct IInkPresenterRulerFactory_raw : IInspectable {
	virtual STDMETHODIMP _Create(InkPresenter* inkPresenter, InkPresenterRuler* *inkPresenterRuler) = 0;
};
template<typename X> struct IInkPresenterRulerFactory_adaptor : X {
	ptr<InkPresenterRuler> Create(pptr<InkPresenter> inkPresenter) { InkPresenterRuler* inkPresenterRuler; hrcheck(X::get()->_Create(inkPresenter, &inkPresenterRuler)); return from_abi(inkPresenterRuler); }
};
template<typename X> struct adapt<IInkPresenterRulerFactory, X> : Windows::UI::Input::Inking::IInkPresenterRulerFactory_adaptor<X> { typedef adapt IInkPresenterRulerFactory; };
template<typename X> struct IInkPresenterRulerFactory_unadaptor : X {
	STDMETHODIMP _Create(InkPresenter* inkPresenter, InkPresenterRuler* *inkPresenterRuler) { return hrtry([&, this] { *inkPresenterRuler = to_abi(X::get()->Create(inkPresenter)); }); }
};
template<typename X> struct unadapt<IInkPresenterRulerFactory, X> : Windows::UI::Input::Inking::IInkPresenterRulerFactory_unadaptor<X> {};
struct IInkPresenterRulerFactory : IInkPresenterRulerFactory_raw, generate<IInkPresenterRulerFactory> {};

// InkPresenterRuler
template<typename> struct InkPresenterRuler_statics {
	static InkPresenterRuler *activate(pptr<InkPresenter> inkPresenter) { InkPresenterRuler *inkPresenterRuler; hrcheck(get_activation_factory<InkPresenterRuler, IInkPresenterRulerFactory>()->_Create(inkPresenter, &inkPresenterRuler)); return inkPresenterRuler; }
};

template<typename X> struct statics<InkPresenterRuler, X> : X, Windows::UI::Input::Inking::InkPresenterRuler_statics<void> {
	using Windows::UI::Input::Inking::InkPresenterRuler_statics<void>::activate;
	typedef typename X::root_type InkPresenterRuler;
};
struct InkPresenterRuler : generate<InkPresenterRuler> {};

// IInkPresenterProtractorFactory
struct IInkPresenterProtractorFactory : IInspectable {
	virtual STDMETHODIMP _Create(InkPresenter* inkPresenter, InkPresenterProtractor* *inkPresenterProtractor);
};

// InkPresenterProtractor
template<typename> struct InkPresenterProtractor_statics {
	static InkPresenterProtractor *activate(pptr<InkPresenter> inkPresenter) { InkPresenterProtractor *inkPresenterProtractor; hrcheck(get_activation_factory<InkPresenterProtractor, IInkPresenterProtractorFactory>()->_Create(inkPresenter, &inkPresenterProtractor)); return inkPresenterProtractor; }
};

template<typename X> struct statics<InkPresenterProtractor, X> : X, Windows::UI::Input::Inking::InkPresenterProtractor_statics<void> {
	using Windows::UI::Input::Inking::InkPresenterProtractor_statics<void>::activate;
	typedef typename X::root_type InkPresenterProtractor;
};
struct InkPresenterProtractor : generate<InkPresenterProtractor> {};

// IInkPoint
struct IInkPoint_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Pressure(float *value);
};
template<typename X> struct IInkPoint_adaptor : X {
	union {
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IInkPoint_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
		struct : property {
			float get() { float value; hrcheck(enc(&IInkPoint_adaptor::Pressure)->_get_Pressure(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Pressure;
	};
	IInkPoint_adaptor() {}
};
template<typename X> struct adapt<IInkPoint, X> : Windows::UI::Input::Inking::IInkPoint_adaptor<X> { typedef adapt IInkPoint; };
struct IInkPoint : IInkPoint_raw, generate<IInkPoint> {};

// IInkPoint2
struct IInkPoint2_raw : IInspectable {
	virtual STDMETHODIMP _get_TiltX(float *value);
	virtual STDMETHODIMP _get_TiltY(float *value);
	virtual STDMETHODIMP _get_Timestamp(unsigned __int64 *value);
};
template<typename X> struct IInkPoint2_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&IInkPoint2_adaptor::TiltX)->_get_TiltX(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} TiltX;
		struct : property {
			float get() { float value; hrcheck(enc(&IInkPoint2_adaptor::TiltY)->_get_TiltY(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} TiltY;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IInkPoint2_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} Timestamp;
	};
	IInkPoint2_adaptor() {}
};
template<typename X> struct adapt<IInkPoint2, X> : Windows::UI::Input::Inking::IInkPoint2_adaptor<X> { typedef adapt IInkPoint2; };
struct IInkPoint2 : IInkPoint2_raw, generate<IInkPoint2> {};

// IInkPointFactory
struct IInkPointFactory_raw : IInspectable {
	virtual STDMETHODIMP _CreateInkPoint(Foundation::Point position, float pressure, InkPoint* *result) = 0;
};
template<typename X> struct IInkPointFactory_adaptor : X {
	ptr<InkPoint> CreateInkPoint(const Foundation::Point& position, float pressure) { InkPoint* result; hrcheck(X::get()->_CreateInkPoint(position, pressure, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IInkPointFactory, X> : Windows::UI::Input::Inking::IInkPointFactory_adaptor<X> { typedef adapt IInkPointFactory; };
template<typename X> struct IInkPointFactory_unadaptor : X {
	STDMETHODIMP _CreateInkPoint(Foundation::Point position, float pressure, InkPoint* *result) { return hrtry([&, this] { *result = to_abi(X::get()->CreateInkPoint(position, pressure)); }); }
};
template<typename X> struct unadapt<IInkPointFactory, X> : Windows::UI::Input::Inking::IInkPointFactory_unadaptor<X> {};
struct IInkPointFactory : IInkPointFactory_raw, generate<IInkPointFactory> {};

// IInkPointFactory2
struct IInkPointFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateInkPointWithTiltAndTimestamp(Foundation::Point position, float pressure, float tiltX, float tiltY, unsigned __int64 timestamp, InkPoint* *result);
};

// InkPoint
template<typename> struct InkPoint_statics {
	static InkPoint *activate(const Foundation::Point& position, float pressure, float tiltX, float tiltY, unsigned __int64 timestamp) { InkPoint *result; hrcheck(get_activation_factory<InkPoint, IInkPointFactory2>()->_CreateInkPointWithTiltAndTimestamp(position, pressure, tiltX, tiltY, timestamp, &result)); return result; }
	static InkPoint *activate(const Foundation::Point& position, float pressure) { InkPoint *result; hrcheck(get_activation_factory<InkPoint, IInkPointFactory>()->_CreateInkPoint(position, pressure, &result)); return result; }
};

template<typename X> struct statics<InkPoint, X> : X, Windows::UI::Input::Inking::InkPoint_statics<void> {
	using Windows::UI::Input::Inking::InkPoint_statics<void>::activate;
	typedef typename X::root_type InkPoint;
};
struct InkPoint : generate<InkPoint> {};

// IInkDrawingAttributes
struct IInkDrawingAttributes_raw : IInspectable {
	virtual STDMETHODIMP _get_Color(UI::Color *value);
	virtual STDMETHODIMP _put_Color(UI::Color value);
	virtual STDMETHODIMP _get_PenTip(PenTipShape *value);
	virtual STDMETHODIMP _put_PenTip(PenTipShape value);
	virtual STDMETHODIMP _get_Size(Foundation::Size *value);
	virtual STDMETHODIMP _put_Size(Foundation::Size value);
	virtual STDMETHODIMP _get_IgnorePressure(bool *value);
	virtual STDMETHODIMP _put_IgnorePressure(bool value);
	virtual STDMETHODIMP _get_FitToCurve(bool *value);
	virtual STDMETHODIMP _put_FitToCurve(bool value);
};
template<typename X> struct IInkDrawingAttributes_adaptor : X {
	union {
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IInkDrawingAttributes_adaptor::Color)->_get_Color(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IInkDrawingAttributes_adaptor::Color)->_put_Color(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} Color;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkDrawingAttributes_adaptor::FitToCurve)->_get_FitToCurve(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkDrawingAttributes_adaptor::FitToCurve)->_put_FitToCurve(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} FitToCurve;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkDrawingAttributes_adaptor::IgnorePressure)->_get_IgnorePressure(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkDrawingAttributes_adaptor::IgnorePressure)->_put_IgnorePressure(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IgnorePressure;
		struct : property {
			PenTipShape get() { PenTipShape value; hrcheck(enc(&IInkDrawingAttributes_adaptor::PenTip)->_get_PenTip(&value)); return value; }
			PenTipShape operator()() { return get(); }
			operator PenTipShape () { return get(); }
			void put(PenTipShape value) { hrcheck(enc(&IInkDrawingAttributes_adaptor::PenTip)->_put_PenTip(value)); }
			void operator=(PenTipShape value) { put(value); }
			void operator()(PenTipShape value) { put(value); }
		} PenTip;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IInkDrawingAttributes_adaptor::Size)->_get_Size(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
			void put(const Foundation::Size& value) { hrcheck(enc(&IInkDrawingAttributes_adaptor::Size)->_put_Size(value)); }
			void operator=(const Foundation::Size& value) { put(value); }
			void operator()(const Foundation::Size& value) { put(value); }
		} Size;
	};
	IInkDrawingAttributes_adaptor() {}
};
template<typename X> struct adapt<IInkDrawingAttributes, X> : Windows::UI::Input::Inking::IInkDrawingAttributes_adaptor<X> { typedef adapt IInkDrawingAttributes; };
struct IInkDrawingAttributes : IInkDrawingAttributes_raw, generate<IInkDrawingAttributes> {};

// IInkDrawingAttributes2
struct IInkDrawingAttributes2_raw : IInspectable {
	virtual STDMETHODIMP _get_PenTipTransform(Foundation::Numerics::Matrix3x2 *value);
	virtual STDMETHODIMP _put_PenTipTransform(Foundation::Numerics::Matrix3x2 value);
	virtual STDMETHODIMP _get_DrawAsHighlighter(bool *value);
	virtual STDMETHODIMP _put_DrawAsHighlighter(bool value);
};
template<typename X> struct IInkDrawingAttributes2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkDrawingAttributes2_adaptor::DrawAsHighlighter)->_get_DrawAsHighlighter(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkDrawingAttributes2_adaptor::DrawAsHighlighter)->_put_DrawAsHighlighter(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} DrawAsHighlighter;
		struct : property {
			Foundation::Numerics::Matrix3x2 get() { Foundation::Numerics::Matrix3x2 value; hrcheck(enc(&IInkDrawingAttributes2_adaptor::PenTipTransform)->_get_PenTipTransform(&value)); return value; }
			Foundation::Numerics::Matrix3x2 operator()() { return get(); }
			operator Foundation::Numerics::Matrix3x2 () { return get(); }
			void put(const Foundation::Numerics::Matrix3x2& value) { hrcheck(enc(&IInkDrawingAttributes2_adaptor::PenTipTransform)->_put_PenTipTransform(value)); }
			void operator=(const Foundation::Numerics::Matrix3x2& value) { put(value); }
			void operator()(const Foundation::Numerics::Matrix3x2& value) { put(value); }
		} PenTipTransform;
	};
	IInkDrawingAttributes2_adaptor() {}
};
template<typename X> struct adapt<IInkDrawingAttributes2, X> : Windows::UI::Input::Inking::IInkDrawingAttributes2_adaptor<X> { typedef adapt IInkDrawingAttributes2; };
struct IInkDrawingAttributes2 : IInkDrawingAttributes2_raw, generate<IInkDrawingAttributes2> {};

// IInkDrawingAttributesPencilProperties
struct IInkDrawingAttributesPencilProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Opacity(double *value);
	virtual STDMETHODIMP _put_Opacity(double value);
};
template<typename X> struct IInkDrawingAttributesPencilProperties_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IInkDrawingAttributesPencilProperties_adaptor::Opacity)->_get_Opacity(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IInkDrawingAttributesPencilProperties_adaptor::Opacity)->_put_Opacity(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Opacity;
	};
	IInkDrawingAttributesPencilProperties_adaptor() {}
};
template<typename X> struct adapt<IInkDrawingAttributesPencilProperties, X> : Windows::UI::Input::Inking::IInkDrawingAttributesPencilProperties_adaptor<X> { typedef adapt IInkDrawingAttributesPencilProperties; };
struct IInkDrawingAttributesPencilProperties : IInkDrawingAttributesPencilProperties_raw, generate<IInkDrawingAttributesPencilProperties> {};

// InkDrawingAttributesPencilProperties
template<typename X> struct statics<InkDrawingAttributesPencilProperties, X> : X {
	typedef typename X::root_type InkDrawingAttributesPencilProperties;
};
struct InkDrawingAttributesPencilProperties : generate<InkDrawingAttributesPencilProperties> {};

// IInkDrawingAttributes3
struct IInkDrawingAttributes3_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(InkDrawingAttributesKind *value);
	virtual STDMETHODIMP _get_PencilProperties(InkDrawingAttributesPencilProperties* *value);
};
template<typename X> struct IInkDrawingAttributes3_adaptor : X {
	union {
		struct : property {
			InkDrawingAttributesKind get() { InkDrawingAttributesKind value; hrcheck(enc(&IInkDrawingAttributes3_adaptor::Kind)->_get_Kind(&value)); return value; }
			InkDrawingAttributesKind operator()() { return get(); }
			operator InkDrawingAttributesKind () { return get(); }
		} Kind;
		struct : property {
			ptr<InkDrawingAttributesPencilProperties> get() { InkDrawingAttributesPencilProperties* value; hrcheck(enc(&IInkDrawingAttributes3_adaptor::PencilProperties)->_get_PencilProperties(&value)); return from_abi(value); }
			ptr<InkDrawingAttributesPencilProperties> operator()() { return get(); }
			operator ptr<InkDrawingAttributesPencilProperties> () { return get(); }
			ptr<InkDrawingAttributesPencilProperties> operator->() { return get(); }
		} PencilProperties;
	};
	IInkDrawingAttributes3_adaptor() {}
};
template<typename X> struct adapt<IInkDrawingAttributes3, X> : Windows::UI::Input::Inking::IInkDrawingAttributes3_adaptor<X> { typedef adapt IInkDrawingAttributes3; };
struct IInkDrawingAttributes3 : IInkDrawingAttributes3_raw, generate<IInkDrawingAttributes3> {};

// IInkDrawingAttributes4
struct IInkDrawingAttributes4_raw : IInspectable {
	virtual STDMETHODIMP _get_IgnoreTilt(bool *value);
	virtual STDMETHODIMP _put_IgnoreTilt(bool value);
};
template<typename X> struct IInkDrawingAttributes4_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkDrawingAttributes4_adaptor::IgnoreTilt)->_get_IgnoreTilt(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkDrawingAttributes4_adaptor::IgnoreTilt)->_put_IgnoreTilt(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IgnoreTilt;
	};
	IInkDrawingAttributes4_adaptor() {}
};
template<typename X> struct adapt<IInkDrawingAttributes4, X> : Windows::UI::Input::Inking::IInkDrawingAttributes4_adaptor<X> { typedef adapt IInkDrawingAttributes4; };
struct IInkDrawingAttributes4 : IInkDrawingAttributes4_raw, generate<IInkDrawingAttributes4> {};

// IInkDrawingAttributesStatics
struct IInkDrawingAttributesStatics : IInspectable {
	virtual STDMETHODIMP _CreateForPencil(InkDrawingAttributes* *result);
};

// IInkDrawingAttributes5
struct IInkDrawingAttributes5_raw : IInspectable {
	virtual STDMETHODIMP _get_ModelerAttributes(InkModelerAttributes* *value);
};
template<typename X> struct IInkDrawingAttributes5_adaptor : X {
	union {
		struct : property {
			ptr<InkModelerAttributes> get() { InkModelerAttributes* value; hrcheck(enc(&IInkDrawingAttributes5_adaptor::ModelerAttributes)->_get_ModelerAttributes(&value)); return from_abi(value); }
			ptr<InkModelerAttributes> operator()() { return get(); }
			operator ptr<InkModelerAttributes> () { return get(); }
			ptr<InkModelerAttributes> operator->() { return get(); }
		} ModelerAttributes;
	};
	IInkDrawingAttributes5_adaptor() {}
};
template<typename X> struct adapt<IInkDrawingAttributes5, X> : Windows::UI::Input::Inking::IInkDrawingAttributes5_adaptor<X> { typedef adapt IInkDrawingAttributes5; };
struct IInkDrawingAttributes5 : IInkDrawingAttributes5_raw, generate<IInkDrawingAttributes5> {};

// InkDrawingAttributes
template<typename> struct InkDrawingAttributes_statics {
	static ptr<InkDrawingAttributes> CreateForPencil() { InkDrawingAttributes* result; hrcheck(get_activation_factory<InkDrawingAttributes, IInkDrawingAttributesStatics>()->_CreateForPencil(&result)); return from_abi(result); }
};

template<typename X> struct statics<InkDrawingAttributes, X> : X, Windows::UI::Input::Inking::InkDrawingAttributes_statics<void> {
	typedef typename X::root_type InkDrawingAttributes;
};
struct InkDrawingAttributes : generate<InkDrawingAttributes> {};

// IInkModelerAttributes
struct IInkModelerAttributes_raw : IInspectable {
	virtual STDMETHODIMP _get_PredictionTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_PredictionTime(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_ScalingFactor(float *value);
	virtual STDMETHODIMP _put_ScalingFactor(float value);
};
template<typename X> struct IInkModelerAttributes_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IInkModelerAttributes_adaptor::PredictionTime)->_get_PredictionTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IInkModelerAttributes_adaptor::PredictionTime)->_put_PredictionTime(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} PredictionTime;
		struct : property {
			float get() { float value; hrcheck(enc(&IInkModelerAttributes_adaptor::ScalingFactor)->_get_ScalingFactor(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IInkModelerAttributes_adaptor::ScalingFactor)->_put_ScalingFactor(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} ScalingFactor;
	};
	IInkModelerAttributes_adaptor() {}
};
template<typename X> struct adapt<IInkModelerAttributes, X> : Windows::UI::Input::Inking::IInkModelerAttributes_adaptor<X> { typedef adapt IInkModelerAttributes; };
struct IInkModelerAttributes : IInkModelerAttributes_raw, generate<IInkModelerAttributes> {};

// InkModelerAttributes
template<typename X> struct statics<InkModelerAttributes, X> : X {
	typedef typename X::root_type InkModelerAttributes;
};
struct InkModelerAttributes : generate<InkModelerAttributes> {};

// IInkStrokeRenderingSegment
struct IInkStrokeRenderingSegment_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_BezierControlPoint1(Foundation::Point *value);
	virtual STDMETHODIMP _get_BezierControlPoint2(Foundation::Point *value);
	virtual STDMETHODIMP _get_Pressure(float *value);
	virtual STDMETHODIMP _get_TiltX(float *value);
	virtual STDMETHODIMP _get_TiltY(float *value);
	virtual STDMETHODIMP _get_Twist(float *value);
};
template<typename X> struct IInkStrokeRenderingSegment_adaptor : X {
	union {
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IInkStrokeRenderingSegment_adaptor::BezierControlPoint1)->_get_BezierControlPoint1(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} BezierControlPoint1;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IInkStrokeRenderingSegment_adaptor::BezierControlPoint2)->_get_BezierControlPoint2(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} BezierControlPoint2;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IInkStrokeRenderingSegment_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
		struct : property {
			float get() { float value; hrcheck(enc(&IInkStrokeRenderingSegment_adaptor::Pressure)->_get_Pressure(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Pressure;
		struct : property {
			float get() { float value; hrcheck(enc(&IInkStrokeRenderingSegment_adaptor::TiltX)->_get_TiltX(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} TiltX;
		struct : property {
			float get() { float value; hrcheck(enc(&IInkStrokeRenderingSegment_adaptor::TiltY)->_get_TiltY(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} TiltY;
		struct : property {
			float get() { float value; hrcheck(enc(&IInkStrokeRenderingSegment_adaptor::Twist)->_get_Twist(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Twist;
	};
	IInkStrokeRenderingSegment_adaptor() {}
};
template<typename X> struct adapt<IInkStrokeRenderingSegment, X> : Windows::UI::Input::Inking::IInkStrokeRenderingSegment_adaptor<X> { typedef adapt IInkStrokeRenderingSegment; };
struct IInkStrokeRenderingSegment : IInkStrokeRenderingSegment_raw, generate<IInkStrokeRenderingSegment> {};

// InkStrokeRenderingSegment
template<typename X> struct statics<InkStrokeRenderingSegment, X> : X {
	typedef typename X::root_type InkStrokeRenderingSegment;
};
struct InkStrokeRenderingSegment : generate<InkStrokeRenderingSegment> {};

// IInkStroke
struct IInkStroke_raw : IInspectable {
	virtual STDMETHODIMP _get_DrawingAttributes(InkDrawingAttributes* *value);
	virtual STDMETHODIMP _put_DrawingAttributes(InkDrawingAttributes* value);
	virtual STDMETHODIMP _get_BoundingRect(Foundation::Rect *value);
	virtual STDMETHODIMP _get_Selected(bool *value);
	virtual STDMETHODIMP _put_Selected(bool value);
	virtual STDMETHODIMP _get_Recognized(bool *value);
	virtual STDMETHODIMP _GetRenderingSegments(Foundation::Collections::IVectorView<InkStrokeRenderingSegment*>* *renderingSegments);
	virtual STDMETHODIMP _Clone(InkStroke* *clonedStroke);
};
template<typename X> struct IInkStroke_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IInkStroke_adaptor::BoundingRect)->_get_BoundingRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} BoundingRect;
		struct : property {
			ptr<InkDrawingAttributes> get() { InkDrawingAttributes* value; hrcheck(enc(&IInkStroke_adaptor::DrawingAttributes)->_get_DrawingAttributes(&value)); return from_abi(value); }
			ptr<InkDrawingAttributes> operator()() { return get(); }
			operator ptr<InkDrawingAttributes> () { return get(); }
			ptr<InkDrawingAttributes> operator->() { return get(); }
			void put(pptr<InkDrawingAttributes> value) { hrcheck(enc(&IInkStroke_adaptor::DrawingAttributes)->_put_DrawingAttributes(value)); }
			void operator=(pptr<InkDrawingAttributes> value) { put(value); }
			void operator()(pptr<InkDrawingAttributes> value) { put(value); }
		} DrawingAttributes;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkStroke_adaptor::Recognized)->_get_Recognized(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Recognized;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInkStroke_adaptor::Selected)->_get_Selected(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInkStroke_adaptor::Selected)->_put_Selected(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Selected;
	};
	ptr<Foundation::Collections::IVectorView<ptr<InkStrokeRenderingSegment>>> GetRenderingSegments() { Foundation::Collections::IVectorView<InkStrokeRenderingSegment*>* renderingSegments; hrcheck(X::get()->_GetRenderingSegments(&renderingSegments)); return from_abi(renderingSegments); }
	ptr<InkStroke> Clone() { InkStroke* clonedStroke; hrcheck(X::get()->_Clone(&clonedStroke)); return from_abi(clonedStroke); }
	IInkStroke_adaptor() {}
};
template<typename X> struct adapt<IInkStroke, X> : Windows::UI::Input::Inking::IInkStroke_adaptor<X> { typedef adapt IInkStroke; };
struct IInkStroke : IInkStroke_raw, generate<IInkStroke> {};

// IInkStroke3
struct IInkStroke3_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_StrokeStartedTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_StrokeStartedTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_StrokeDuration(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_StrokeDuration(Foundation::IReference<Foundation::TimeSpan>* value);
};
template<typename X> struct IInkStroke3_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IInkStroke3_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IInkStroke3_adaptor::StrokeDuration)->_get_StrokeDuration(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IInkStroke3_adaptor::StrokeDuration)->_put_StrokeDuration(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} StrokeDuration;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IInkStroke3_adaptor::StrokeStartedTime)->_get_StrokeStartedTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IInkStroke3_adaptor::StrokeStartedTime)->_put_StrokeStartedTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} StrokeStartedTime;
	};
	IInkStroke3_adaptor() {}
};
template<typename X> struct adapt<IInkStroke3, X> : Windows::UI::Input::Inking::IInkStroke3_adaptor<X> { typedef adapt IInkStroke3; };
struct IInkStroke3 : IInkStroke3_raw, generate<IInkStroke3> {};

// IInkStroke2
struct IInkStroke2_raw : IInspectable {
	virtual STDMETHODIMP _get_PointTransform(Foundation::Numerics::Matrix3x2 *value);
	virtual STDMETHODIMP _put_PointTransform(Foundation::Numerics::Matrix3x2 value);
	virtual STDMETHODIMP _GetInkPoints(Foundation::Collections::IVectorView<InkPoint*>* *inkPoints);
};
template<typename X> struct IInkStroke2_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Matrix3x2 get() { Foundation::Numerics::Matrix3x2 value; hrcheck(enc(&IInkStroke2_adaptor::PointTransform)->_get_PointTransform(&value)); return value; }
			Foundation::Numerics::Matrix3x2 operator()() { return get(); }
			operator Foundation::Numerics::Matrix3x2 () { return get(); }
			void put(const Foundation::Numerics::Matrix3x2& value) { hrcheck(enc(&IInkStroke2_adaptor::PointTransform)->_put_PointTransform(value)); }
			void operator=(const Foundation::Numerics::Matrix3x2& value) { put(value); }
			void operator()(const Foundation::Numerics::Matrix3x2& value) { put(value); }
		} PointTransform;
	};
	ptr<Foundation::Collections::IVectorView<ptr<InkPoint>>> GetInkPoints() { Foundation::Collections::IVectorView<InkPoint*>* inkPoints; hrcheck(X::get()->_GetInkPoints(&inkPoints)); return from_abi(inkPoints); }
	IInkStroke2_adaptor() {}
};
template<typename X> struct adapt<IInkStroke2, X> : Windows::UI::Input::Inking::IInkStroke2_adaptor<X> { typedef adapt IInkStroke2; };
struct IInkStroke2 : IInkStroke2_raw, generate<IInkStroke2> {};

// InkStroke
template<typename X> struct statics<InkStroke, X> : X {
	typedef typename X::root_type InkStroke;
};
struct InkStroke : generate<InkStroke> {};

// IInkStrokeBuilder
struct IInkStrokeBuilder_raw : IInspectable {
	virtual STDMETHODIMP _BeginStroke(PointerPoint* pointerPoint);
	virtual STDMETHODIMP _AppendToStroke(PointerPoint* pointerPoint, PointerPoint* *previousPointerPoint);
	virtual STDMETHODIMP _EndStroke(PointerPoint* pointerPoint, InkStroke* *stroke);
	virtual STDMETHODIMP _CreateStroke(Foundation::Collections::IIterable<Foundation::Point>* points, InkStroke* *stroke);
	virtual STDMETHODIMP _SetDefaultDrawingAttributes(InkDrawingAttributes* drawingAttributes);
};
template<typename X> struct IInkStrokeBuilder_adaptor : X {
	void BeginStroke(pptr<PointerPoint> pointerPoint) { hrcheck(X::get()->_BeginStroke(pointerPoint)); }
	ptr<PointerPoint> AppendToStroke(pptr<PointerPoint> pointerPoint) { PointerPoint* previousPointerPoint; hrcheck(X::get()->_AppendToStroke(pointerPoint, &previousPointerPoint)); return from_abi(previousPointerPoint); }
	ptr<InkStroke> EndStroke(pptr<PointerPoint> pointerPoint) { InkStroke* stroke; hrcheck(X::get()->_EndStroke(pointerPoint, &stroke)); return from_abi(stroke); }
	ptr<InkStroke> CreateStroke(pptr<Foundation::Collections::IIterable<Foundation::Point>> points) { InkStroke* stroke; hrcheck(X::get()->_CreateStroke(to_abi(points), &stroke)); return from_abi(stroke); }
	void SetDefaultDrawingAttributes(pptr<InkDrawingAttributes> drawingAttributes) { hrcheck(X::get()->_SetDefaultDrawingAttributes(drawingAttributes)); }
};
template<typename X> struct adapt<IInkStrokeBuilder, X> : Windows::UI::Input::Inking::IInkStrokeBuilder_adaptor<X> { typedef adapt IInkStrokeBuilder; };
struct IInkStrokeBuilder : IInkStrokeBuilder_raw, generate<IInkStrokeBuilder> {};

// IInkStrokeBuilder2
struct IInkStrokeBuilder2_raw : IInspectable {
	virtual STDMETHODIMP _CreateStrokeFromInkPoints(Foundation::Collections::IIterable<InkPoint*>* inkPoints, Foundation::Numerics::Matrix3x2 transform, InkStroke* *result);
};
template<typename X> struct IInkStrokeBuilder2_adaptor : X {
	ptr<InkStroke> CreateStrokeFromInkPoints(pptr<Foundation::Collections::IIterable<ptr<InkPoint>>> inkPoints, const Foundation::Numerics::Matrix3x2& transform) { InkStroke* result; hrcheck(X::get()->_CreateStrokeFromInkPoints(to_abi(inkPoints), transform, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IInkStrokeBuilder2, X> : Windows::UI::Input::Inking::IInkStrokeBuilder2_adaptor<X> { typedef adapt IInkStrokeBuilder2; };
struct IInkStrokeBuilder2 : IInkStrokeBuilder2_raw, generate<IInkStrokeBuilder2> {};

// IInkStrokeBuilder3
struct IInkStrokeBuilder3_raw : IInspectable {
	virtual STDMETHODIMP _CreateStrokeFromInkPoints(Foundation::Collections::IIterable<InkPoint*>* inkPoints, Foundation::Numerics::Matrix3x2 transform, Foundation::IReference<Foundation::DateTime>* strokeStartedTime, Foundation::IReference<Foundation::TimeSpan>* strokeDuration, InkStroke* *result);
};
template<typename X> struct IInkStrokeBuilder3_adaptor : X {
	ptr<InkStroke> CreateStrokeFromInkPoints(pptr<Foundation::Collections::IIterable<ptr<InkPoint>>> inkPoints, const Foundation::Numerics::Matrix3x2& transform, pptr<Foundation::IReference<Foundation::DateTime>> strokeStartedTime, pptr<Foundation::IReference<Foundation::TimeSpan>> strokeDuration) { InkStroke* result; hrcheck(X::get()->_CreateStrokeFromInkPoints(to_abi(inkPoints), transform, to_abi(strokeStartedTime), to_abi(strokeDuration), &result)); return from_abi(result); }
};
template<typename X> struct adapt<IInkStrokeBuilder3, X> : Windows::UI::Input::Inking::IInkStrokeBuilder3_adaptor<X> { typedef adapt IInkStrokeBuilder3; };
struct IInkStrokeBuilder3 : IInkStrokeBuilder3_raw, generate<IInkStrokeBuilder3> {};

// InkStrokeBuilder
template<typename X> struct statics<InkStrokeBuilder, X> : X {
	typedef typename X::root_type InkStrokeBuilder;
};
struct InkStrokeBuilder : generate<InkStrokeBuilder> {
	using IInkStrokeBuilder2::CreateStrokeFromInkPoints;
	using IInkStrokeBuilder3::CreateStrokeFromInkPoints;
};

// IInkRecognitionResult
struct IInkRecognitionResult_raw : IInspectable {
	virtual STDMETHODIMP _get_BoundingRect(Foundation::Rect *boundingRect);
	virtual STDMETHODIMP _GetTextCandidates(Foundation::Collections::IVectorView<HSTRING>* *textCandidates);
	virtual STDMETHODIMP _GetStrokes(Foundation::Collections::IVectorView<InkStroke*>* *strokes);
};
template<typename X> struct IInkRecognitionResult_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect boundingRect; hrcheck(enc(&IInkRecognitionResult_adaptor::BoundingRect)->_get_BoundingRect(&boundingRect)); return boundingRect; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} BoundingRect;
	};
	ptr<Foundation::Collections::IVectorView<hstring>> GetTextCandidates() { Foundation::Collections::IVectorView<HSTRING>* textCandidates; hrcheck(X::get()->_GetTextCandidates(&textCandidates)); return from_abi(textCandidates); }
	ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> GetStrokes() { Foundation::Collections::IVectorView<InkStroke*>* strokes; hrcheck(X::get()->_GetStrokes(&strokes)); return from_abi(strokes); }
	IInkRecognitionResult_adaptor() {}
};
template<typename X> struct adapt<IInkRecognitionResult, X> : Windows::UI::Input::Inking::IInkRecognitionResult_adaptor<X> { typedef adapt IInkRecognitionResult; };
struct IInkRecognitionResult : IInkRecognitionResult_raw, generate<IInkRecognitionResult> {};

// InkRecognitionResult
template<typename X> struct statics<InkRecognitionResult, X> : X {
	typedef typename X::root_type InkRecognitionResult;
};
struct InkRecognitionResult : generate<InkRecognitionResult> {};

// IInkStrokeContainer
struct IInkStrokeContainer_raw : IInspectable {
	virtual STDMETHODIMP _get_BoundingRect(Foundation::Rect *value) = 0;
	virtual STDMETHODIMP _AddStroke(InkStroke* stroke) = 0;
	virtual STDMETHODIMP _DeleteSelected(Foundation::Rect *invalidatedRect) = 0;
	virtual STDMETHODIMP _MoveSelected(Foundation::Point translation, Foundation::Rect *invalidatedRectangle) = 0;
	virtual STDMETHODIMP _SelectWithPolyLine(Foundation::Collections::IIterable<Foundation::Point>* polyline, Foundation::Rect *invalidatedRectangle) = 0;
	virtual STDMETHODIMP _SelectWithLine(Foundation::Point from, Foundation::Point to, Foundation::Rect *invalidatedRectangle) = 0;
	virtual STDMETHODIMP _CopySelectedToClipboard() = 0;
	virtual STDMETHODIMP _PasteFromClipboard(Foundation::Point position, Foundation::Rect *invalidatedRectangle) = 0;
	virtual STDMETHODIMP _CanPasteFromClipboard(bool *canPaste) = 0;
	virtual STDMETHODIMP _LoadAsync(Storage::Streams::IInputStream* inputStream, Foundation::IAsyncActionWithProgress<unsigned __int64>* *loadAction) = 0;
	virtual STDMETHODIMP _SaveAsync(Storage::Streams::IOutputStream* outputStream, Foundation::IAsyncOperationWithProgress<unsigned, unsigned>* *outputStreamOperation) = 0;
	virtual STDMETHODIMP _UpdateRecognitionResults(Foundation::Collections::IVectorView<InkRecognitionResult*>* recognitionResults) = 0;
	virtual STDMETHODIMP _GetStrokes(Foundation::Collections::IVectorView<InkStroke*>* *strokeView) = 0;
	virtual STDMETHODIMP _GetRecognitionResults(Foundation::Collections::IVectorView<InkRecognitionResult*>* *recognitionResults) = 0;
};
template<typename X> struct IInkStrokeContainer_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IInkStrokeContainer_adaptor::BoundingRect)->_get_BoundingRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} BoundingRect;
	};
	void AddStroke(pptr<InkStroke> stroke) { hrcheck(X::get()->_AddStroke(stroke)); }
	Foundation::Rect DeleteSelected() { Foundation::Rect invalidatedRect; hrcheck(X::get()->_DeleteSelected(&invalidatedRect)); return invalidatedRect; }
	Foundation::Rect MoveSelected(const Foundation::Point& translation) { Foundation::Rect invalidatedRectangle; hrcheck(X::get()->_MoveSelected(translation, &invalidatedRectangle)); return invalidatedRectangle; }
	Foundation::Rect SelectWithPolyLine(pptr<Foundation::Collections::IIterable<Foundation::Point>> polyline) { Foundation::Rect invalidatedRectangle; hrcheck(X::get()->_SelectWithPolyLine(to_abi(polyline), &invalidatedRectangle)); return invalidatedRectangle; }
	Foundation::Rect SelectWithLine(const Foundation::Point& from, const Foundation::Point& to) { Foundation::Rect invalidatedRectangle; hrcheck(X::get()->_SelectWithLine(from, to, &invalidatedRectangle)); return invalidatedRectangle; }
	void CopySelectedToClipboard() { hrcheck(X::get()->_CopySelectedToClipboard()); }
	Foundation::Rect PasteFromClipboard(const Foundation::Point& position) { Foundation::Rect invalidatedRectangle; hrcheck(X::get()->_PasteFromClipboard(position, &invalidatedRectangle)); return invalidatedRectangle; }
	bool CanPasteFromClipboard() { bool canPaste; hrcheck(X::get()->_CanPasteFromClipboard(&canPaste)); return canPaste; }
	ptr<Foundation::IAsyncActionWithProgress<unsigned __int64>> LoadAsync(pptr<Storage::Streams::IInputStream> inputStream) { Foundation::IAsyncActionWithProgress<unsigned __int64>* loadAction; hrcheck(X::get()->_LoadAsync(inputStream, &loadAction)); return from_abi(loadAction); }
	ptr<Foundation::IAsyncOperationWithProgress<unsigned, unsigned>> SaveAsync(pptr<Storage::Streams::IOutputStream> outputStream) { Foundation::IAsyncOperationWithProgress<unsigned, unsigned>* outputStreamOperation; hrcheck(X::get()->_SaveAsync(outputStream, &outputStreamOperation)); return from_abi(outputStreamOperation); }
	void UpdateRecognitionResults(pptr<Foundation::Collections::IVectorView<ptr<InkRecognitionResult>>> recognitionResults) { hrcheck(X::get()->_UpdateRecognitionResults(to_abi(recognitionResults))); }
	ptr<Foundation::Collections::IVectorView<ptr<InkStroke>>> GetStrokes() { Foundation::Collections::IVectorView<InkStroke*>* strokeView; hrcheck(X::get()->_GetStrokes(&strokeView)); return from_abi(strokeView); }
	ptr<Foundation::Collections::IVectorView<ptr<InkRecognitionResult>>> GetRecognitionResults() { Foundation::Collections::IVectorView<InkRecognitionResult*>* recognitionResults; hrcheck(X::get()->_GetRecognitionResults(&recognitionResults)); return from_abi(recognitionResults); }
	IInkStrokeContainer_adaptor() {}
};
template<typename X> struct adapt<IInkStrokeContainer, X> : Windows::UI::Input::Inking::IInkStrokeContainer_adaptor<X> { typedef adapt IInkStrokeContainer; };
template<typename X> struct IInkStrokeContainer_unadaptor : X {
	STDMETHODIMP _get_BoundingRect(Foundation::Rect *value) { return hrtry([&, this] { get_prop(value, BoundingRect); }); }
	STDMETHODIMP _AddStroke(InkStroke* stroke) { return hrtry([&, this] { X::get()->AddStroke(stroke); }); }
	STDMETHODIMP _DeleteSelected(Foundation::Rect *invalidatedRect) { return hrtry([&, this] { *invalidatedRect = X::get()->DeleteSelected(); }); }
	STDMETHODIMP _MoveSelected(Foundation::Point translation, Foundation::Rect *invalidatedRectangle) { return hrtry([&, this] { *invalidatedRectangle = X::get()->MoveSelected(translation); }); }
	STDMETHODIMP _SelectWithPolyLine(Foundation::Collections::IIterable<Foundation::Point>* polyline, Foundation::Rect *invalidatedRectangle) { return hrtry([&, this] { *invalidatedRectangle = X::get()->SelectWithPolyLine(polyline); }); }
	STDMETHODIMP _SelectWithLine(Foundation::Point from, Foundation::Point to, Foundation::Rect *invalidatedRectangle) { return hrtry([&, this] { *invalidatedRectangle = X::get()->SelectWithLine(from, to); }); }
	STDMETHODIMP _CopySelectedToClipboard() { return hrtry([&, this] { X::get()->CopySelectedToClipboard(); }); }
	STDMETHODIMP _PasteFromClipboard(Foundation::Point position, Foundation::Rect *invalidatedRectangle) { return hrtry([&, this] { *invalidatedRectangle = X::get()->PasteFromClipboard(position); }); }
	STDMETHODIMP _CanPasteFromClipboard(bool *canPaste) { return hrtry([&, this] { *canPaste = X::get()->CanPasteFromClipboard(); }); }
	STDMETHODIMP _LoadAsync(Storage::Streams::IInputStream* inputStream, Foundation::IAsyncActionWithProgress<unsigned __int64>* *loadAction) { return hrtry([&, this] { *loadAction = to_abi(X::get()->LoadAsync(inputStream)); }); }
	STDMETHODIMP _SaveAsync(Storage::Streams::IOutputStream* outputStream, Foundation::IAsyncOperationWithProgress<unsigned, unsigned>* *outputStreamOperation) { return hrtry([&, this] { *outputStreamOperation = to_abi(X::get()->SaveAsync(outputStream)); }); }
	STDMETHODIMP _UpdateRecognitionResults(Foundation::Collections::IVectorView<InkRecognitionResult*>* recognitionResults) { return hrtry([&, this] { X::get()->UpdateRecognitionResults(recognitionResults); }); }
	STDMETHODIMP _GetStrokes(Foundation::Collections::IVectorView<InkStroke*>* *strokeView) { return hrtry([&, this] { *strokeView = to_abi(X::get()->GetStrokes()); }); }
	STDMETHODIMP _GetRecognitionResults(Foundation::Collections::IVectorView<InkRecognitionResult*>* *recognitionResults) { return hrtry([&, this] { *recognitionResults = to_abi(X::get()->GetRecognitionResults()); }); }
};
template<typename X> struct unadapt<IInkStrokeContainer, X> : Windows::UI::Input::Inking::IInkStrokeContainer_unadaptor<X> {};
struct IInkStrokeContainer : IInkStrokeContainer_raw, generate<IInkStrokeContainer> {};

// IInkStrokeContainer2
struct IInkStrokeContainer2_raw : IInspectable {
	virtual STDMETHODIMP _AddStrokes(Foundation::Collections::IIterable<InkStroke*>* strokes);
	virtual STDMETHODIMP _Clear();
};
template<typename X> struct IInkStrokeContainer2_adaptor : X {
	void AddStrokes(pptr<Foundation::Collections::IIterable<ptr<InkStroke>>> strokes) { hrcheck(X::get()->_AddStrokes(to_abi(strokes))); }
	void Clear() { hrcheck(X::get()->_Clear()); }
};
template<typename X> struct adapt<IInkStrokeContainer2, X> : Windows::UI::Input::Inking::IInkStrokeContainer2_adaptor<X> { typedef adapt IInkStrokeContainer2; };
struct IInkStrokeContainer2 : IInkStrokeContainer2_raw, generate<IInkStrokeContainer2> {};

// IInkStrokeContainer3
struct IInkStrokeContainer3_raw : IInspectable {
	virtual STDMETHODIMP _SaveWithFormatAsync(Storage::Streams::IOutputStream* outputStream, InkPersistenceFormat inkPersistenceFormat, Foundation::IAsyncOperationWithProgress<unsigned, unsigned>* *outputStreamOperation);
	virtual STDMETHODIMP _GetStrokeById(unsigned id, InkStroke* *stroke);
};
template<typename X> struct IInkStrokeContainer3_adaptor : X {
	ptr<Foundation::IAsyncOperationWithProgress<unsigned, unsigned>> SaveAsync(pptr<Storage::Streams::IOutputStream> outputStream, InkPersistenceFormat inkPersistenceFormat) { Foundation::IAsyncOperationWithProgress<unsigned, unsigned>* outputStreamOperation; hrcheck(X::get()->_SaveWithFormatAsync(outputStream, inkPersistenceFormat, &outputStreamOperation)); return from_abi(outputStreamOperation); }
	ptr<InkStroke> GetStrokeById(unsigned id) { InkStroke* stroke; hrcheck(X::get()->_GetStrokeById(id, &stroke)); return from_abi(stroke); }
};
template<typename X> struct adapt<IInkStrokeContainer3, X> : Windows::UI::Input::Inking::IInkStrokeContainer3_adaptor<X> { typedef adapt IInkStrokeContainer3; };
struct IInkStrokeContainer3 : IInkStrokeContainer3_raw, generate<IInkStrokeContainer3> {};

// InkStrokeContainer
template<typename X> struct statics<InkStrokeContainer, X> : X {
	typedef typename X::root_type InkStrokeContainer;
};
struct InkStrokeContainer : generate<InkStrokeContainer> {
	using IInkStrokeContainer3::SaveAsync;
	using IInkStrokeContainer::SaveAsync;
};

// IInkRecognizer
struct IInkRecognizer_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
};
template<typename X> struct IInkRecognizer_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IInkRecognizer_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	IInkRecognizer_adaptor() {}
};
template<typename X> struct adapt<IInkRecognizer, X> : Windows::UI::Input::Inking::IInkRecognizer_adaptor<X> { typedef adapt IInkRecognizer; };
struct IInkRecognizer : IInkRecognizer_raw, generate<IInkRecognizer> {};

// InkRecognizer
template<typename X> struct statics<InkRecognizer, X> : X {
	typedef typename X::root_type InkRecognizer;
};
struct InkRecognizer : generate<InkRecognizer> {};

// IInkRecognizerContainer
struct IInkRecognizerContainer_raw : IInspectable {
	virtual STDMETHODIMP _SetDefaultRecognizer(InkRecognizer* recognizer) = 0;
	virtual STDMETHODIMP _RecognizeAsync(InkStrokeContainer* strokeCollection, InkRecognitionTarget recognitionTarget, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<InkRecognitionResult*>*>* *recognitionResults) = 0;
	virtual STDMETHODIMP _GetRecognizers(Foundation::Collections::IVectorView<InkRecognizer*>* *recognizerView) = 0;
};
template<typename X> struct IInkRecognizerContainer_adaptor : X {
	void SetDefaultRecognizer(pptr<InkRecognizer> recognizer) { hrcheck(X::get()->_SetDefaultRecognizer(recognizer)); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<InkRecognitionResult>>>>> RecognizeAsync(pptr<InkStrokeContainer> strokeCollection, InkRecognitionTarget recognitionTarget) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<InkRecognitionResult*>*>* recognitionResults; hrcheck(X::get()->_RecognizeAsync(strokeCollection, recognitionTarget, &recognitionResults)); return from_abi(recognitionResults); }
	ptr<Foundation::Collections::IVectorView<ptr<InkRecognizer>>> GetRecognizers() { Foundation::Collections::IVectorView<InkRecognizer*>* recognizerView; hrcheck(X::get()->_GetRecognizers(&recognizerView)); return from_abi(recognizerView); }
};
template<typename X> struct adapt<IInkRecognizerContainer, X> : Windows::UI::Input::Inking::IInkRecognizerContainer_adaptor<X> { typedef adapt IInkRecognizerContainer; };
template<typename X> struct IInkRecognizerContainer_unadaptor : X {
	STDMETHODIMP _SetDefaultRecognizer(InkRecognizer* recognizer) { return hrtry([&, this] { X::get()->SetDefaultRecognizer(recognizer); }); }
	STDMETHODIMP _RecognizeAsync(InkStrokeContainer* strokeCollection, InkRecognitionTarget recognitionTarget, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<InkRecognitionResult*>*>* *recognitionResults) { return hrtry([&, this] { *recognitionResults = to_abi(X::get()->RecognizeAsync(strokeCollection, recognitionTarget)); }); }
	STDMETHODIMP _GetRecognizers(Foundation::Collections::IVectorView<InkRecognizer*>* *recognizerView) { return hrtry([&, this] { *recognizerView = to_abi(X::get()->GetRecognizers()); }); }
};
template<typename X> struct unadapt<IInkRecognizerContainer, X> : Windows::UI::Input::Inking::IInkRecognizerContainer_unadaptor<X> {};
struct IInkRecognizerContainer : IInkRecognizerContainer_raw, generate<IInkRecognizerContainer> {};

// InkRecognizerContainer
template<typename X> struct statics<InkRecognizerContainer, X> : X {
	typedef typename X::root_type InkRecognizerContainer;
};
struct InkRecognizerContainer : generate<InkRecognizerContainer> {};

// IInkManager
struct IInkManager_raw : IInspectable {
	virtual STDMETHODIMP _get_Mode(InkManipulationMode *value);
	virtual STDMETHODIMP _put_Mode(InkManipulationMode value);
	virtual STDMETHODIMP _ProcessPointerDown(PointerPoint* pointerPoint);
	virtual STDMETHODIMP _ProcessPointerUpdate(PointerPoint* pointerPoint, IInspectable* *updateInformation);
	virtual STDMETHODIMP _ProcessPointerUp(PointerPoint* pointerPoint, Foundation::Rect *updateRectangle);
	virtual STDMETHODIMP _SetDefaultDrawingAttributes(InkDrawingAttributes* drawingAttributes);
	virtual STDMETHODIMP _RecognizeAsync2(InkRecognitionTarget recognitionTarget, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<InkRecognitionResult*>*>* *recognitionResults);
};
template<typename X> struct IInkManager_adaptor : X {
	union {
		struct : property {
			InkManipulationMode get() { InkManipulationMode value; hrcheck(enc(&IInkManager_adaptor::Mode)->_get_Mode(&value)); return value; }
			InkManipulationMode operator()() { return get(); }
			operator InkManipulationMode () { return get(); }
			void put(InkManipulationMode value) { hrcheck(enc(&IInkManager_adaptor::Mode)->_put_Mode(value)); }
			void operator=(InkManipulationMode value) { put(value); }
			void operator()(InkManipulationMode value) { put(value); }
		} Mode;
	};
	void ProcessPointerDown(pptr<PointerPoint> pointerPoint) { hrcheck(X::get()->_ProcessPointerDown(pointerPoint)); }
	object ProcessPointerUpdate(pptr<PointerPoint> pointerPoint) { IInspectable* updateInformation; hrcheck(X::get()->_ProcessPointerUpdate(pointerPoint, &updateInformation)); return from_abi(updateInformation); }
	Foundation::Rect ProcessPointerUp(pptr<PointerPoint> pointerPoint) { Foundation::Rect updateRectangle; hrcheck(X::get()->_ProcessPointerUp(pointerPoint, &updateRectangle)); return updateRectangle; }
	void SetDefaultDrawingAttributes(pptr<InkDrawingAttributes> drawingAttributes) { hrcheck(X::get()->_SetDefaultDrawingAttributes(drawingAttributes)); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<InkRecognitionResult>>>>> RecognizeAsync(InkRecognitionTarget recognitionTarget) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<InkRecognitionResult*>*>* recognitionResults; hrcheck(X::get()->_RecognizeAsync2(recognitionTarget, &recognitionResults)); return from_abi(recognitionResults); }
	IInkManager_adaptor() {}
};
template<typename X> struct adapt<IInkManager, X> : Windows::UI::Input::Inking::IInkManager_adaptor<X> { typedef adapt IInkManager; };
struct IInkManager : IInkManager_raw, generate<IInkManager> {};

// InkManager
template<typename X> struct statics<InkManager, X> : X {
	typedef typename X::root_type InkManager;
};
struct InkManager : generate<InkManager> {
	using IInkManager::RecognizeAsync;
	using IInkRecognizerContainer::RecognizeAsync;
};
}}}}
} // namespace iso_winrt
