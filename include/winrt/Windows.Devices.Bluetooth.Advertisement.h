#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Bluetooth.Advertisement

#include "Windows.Devices.Bluetooth.Advertisement.0.h"
#include "Windows.Devices.Bluetooth.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IVector;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementType> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerDataFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData>, custom_activators {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSectionFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection>, custom_activators {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePatternFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern>, custom_activators {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher>, custom_activators {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataTypesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataTypes> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher> : class_type<Platform::Object, Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher>, custom_activators {};

// uuids

template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement> { define_guid(0x66FB2B7, 0x33D1, 0x4E7D, 0x83, 0x67, 0xCF, 0x81, 0xD0, 0xF7, 0x96, 0x53);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerDataFactory> { define_guid(0xC09B39F8, 0x319A, 0x441E, 0x8D, 0xE5, 0x66, 0xA8, 0x1E, 0x87, 0x7A, 0x6C);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData> { define_guid(0x912DBA18, 0x6963, 0x4533, 0xB0, 0x61, 0x46, 0x94, 0xDA, 0xFB, 0x34, 0xE5);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSectionFactory> { define_guid(0xE7A40942, 0xA845, 0x4045, 0xBF, 0x7E, 0x3E, 0x99, 0x71, 0xDB, 0x8A, 0x6B);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection> { define_guid(0xD7213314, 0x3A43, 0x40F9, 0xB6, 0xF0, 0x92, 0xBF, 0xEF, 0xC3, 0x4A, 0xE3);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter> { define_guid(0x131EB0D3, 0xD04E, 0x47B1, 0x83, 0x7E, 0x49, 0x40, 0x5B, 0xF6, 0xF8, 0xF);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePatternFactory> { define_guid(0xC2E24D73, 0xFD5C, 0x4EC3, 0xBE, 0x2A, 0x9C, 0xA6, 0xFA, 0x11, 0xB7, 0xBD);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern> { define_guid(0xFBFAD7F2, 0xB9C5, 0x4A08, 0xBC, 0x51, 0x50, 0x2F, 0x8E, 0xF6, 0x8A, 0x79);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs> { define_guid(0xDD40F84D, 0xE7B9, 0x43E3, 0x9C, 0x4, 0x6, 0x85, 0xD0, 0x85, 0xFD, 0x8C);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherFactory> { define_guid(0x9AAF2D56, 0x39AC, 0x453E, 0xB3, 0x2A, 0x85, 0xC6, 0x57, 0xE0, 0x17, 0xF1);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher> { define_guid(0xA6AC336F, 0xF3D3, 0x4297, 0x8D, 0x6C, 0xC8, 0x1E, 0xA6, 0x62, 0x3F, 0x40);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs> { define_guid(0x27987DDF, 0xE596, 0x41BE, 0x8D, 0x43, 0x9E, 0x67, 0x31, 0xD4, 0xA9, 0x13);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataTypesStatics> { define_guid(0x3BB6472F, 0x606, 0x434B, 0xA7, 0x6E, 0x74, 0x15, 0x9F, 0x6, 0x84, 0xD3);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs> { define_guid(0x9C2BD9F, 0x2DFF, 0x4B23, 0x86, 0xEE, 0xD, 0x14, 0xFB, 0x94, 0xAE, 0xAE);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherFactory> { define_guid(0x5C5F065E, 0xB863, 0x4981, 0xA1, 0xAF, 0x1C, 0x54, 0x4D, 0x8B, 0xC, 0xD);};
template<> struct uuid<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher> { define_guid(0xCDE820F9, 0xD9FA, 0x43D6, 0xA2, 0x64, 0xDD, 0xD8, 0xB7, 0xDA, 0x8B, 0x78);};

// types

namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

// IBluetoothLEAdvertisement
struct IBluetoothLEAdvertisement_raw : IInspectable {
	virtual STDMETHODIMP _get_Flags(Foundation::IReference<BluetoothLEAdvertisementFlags>* *value);
	virtual STDMETHODIMP _put_Flags(Foundation::IReference<BluetoothLEAdvertisementFlags>* value);
	virtual STDMETHODIMP _get_LocalName(HSTRING *value);
	virtual STDMETHODIMP _put_LocalName(HSTRING value);
	virtual STDMETHODIMP _get_ServiceUuids(Foundation::Collections::IVector<Platform::Guid>* *value);
	virtual STDMETHODIMP _get_ManufacturerData(Foundation::Collections::IVector<BluetoothLEManufacturerData*>* *value);
	virtual STDMETHODIMP _get_DataSections(Foundation::Collections::IVector<BluetoothLEAdvertisementDataSection*>* *value);
	virtual STDMETHODIMP _GetManufacturerDataByCompanyId(unsigned short companyId, Foundation::Collections::IVectorView<BluetoothLEManufacturerData*>* *dataList);
	virtual STDMETHODIMP _GetSectionsByType(unsigned char type, Foundation::Collections::IVectorView<BluetoothLEAdvertisementDataSection*>* *sectionList);
};
template<typename X> struct IBluetoothLEAdvertisement_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementDataSection>>> get() { Foundation::Collections::IVector<BluetoothLEAdvertisementDataSection*>* value; hrcheck(enc(&IBluetoothLEAdvertisement_adaptor::DataSections)->_get_DataSections(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementDataSection>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementDataSection>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementDataSection>>> operator->() { return get(); }
		} DataSections;
		struct : property {
			ptr<Foundation::IReference<BluetoothLEAdvertisementFlags>> get() { Foundation::IReference<BluetoothLEAdvertisementFlags>* value; hrcheck(enc(&IBluetoothLEAdvertisement_adaptor::Flags)->_get_Flags(&value)); return from_abi(value); }
			ptr<Foundation::IReference<BluetoothLEAdvertisementFlags>> operator()() { return get(); }
			operator ptr<Foundation::IReference<BluetoothLEAdvertisementFlags>> () { return get(); }
			ptr<Foundation::IReference<BluetoothLEAdvertisementFlags>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<BluetoothLEAdvertisementFlags>> value) { hrcheck(enc(&IBluetoothLEAdvertisement_adaptor::Flags)->_put_Flags(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<BluetoothLEAdvertisementFlags>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<BluetoothLEAdvertisementFlags>> value) { put(to_abi(value)); }
		} Flags;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBluetoothLEAdvertisement_adaptor::LocalName)->_get_LocalName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IBluetoothLEAdvertisement_adaptor::LocalName)->_put_LocalName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} LocalName;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEManufacturerData>>> get() { Foundation::Collections::IVector<BluetoothLEManufacturerData*>* value; hrcheck(enc(&IBluetoothLEAdvertisement_adaptor::ManufacturerData)->_get_ManufacturerData(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEManufacturerData>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<BluetoothLEManufacturerData>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEManufacturerData>>> operator->() { return get(); }
		} ManufacturerData;
		struct : property {
			ptr<Foundation::Collections::IVector<Platform::Guid>> get() { Foundation::Collections::IVector<Platform::Guid>* value; hrcheck(enc(&IBluetoothLEAdvertisement_adaptor::ServiceUuids)->_get_ServiceUuids(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<Platform::Guid>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<Platform::Guid>> () { return get(); }
			ptr<Foundation::Collections::IVector<Platform::Guid>> operator->() { return get(); }
		} ServiceUuids;
	};
	ptr<Foundation::Collections::IVectorView<ptr<BluetoothLEManufacturerData>>> GetManufacturerDataByCompanyId(unsigned short companyId) { Foundation::Collections::IVectorView<BluetoothLEManufacturerData*>* dataList; hrcheck(X::get()->_GetManufacturerDataByCompanyId(companyId, &dataList)); return from_abi(dataList); }
	ptr<Foundation::Collections::IVectorView<ptr<BluetoothLEAdvertisementDataSection>>> GetSectionsByType(unsigned char type) { Foundation::Collections::IVectorView<BluetoothLEAdvertisementDataSection*>* sectionList; hrcheck(X::get()->_GetSectionsByType(type, &sectionList)); return from_abi(sectionList); }
	IBluetoothLEAdvertisement_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisement, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement_adaptor<X> { typedef adapt IBluetoothLEAdvertisement; };
struct IBluetoothLEAdvertisement : IBluetoothLEAdvertisement_raw, generate<IBluetoothLEAdvertisement> {};

// IBluetoothLEManufacturerDataFactory
struct IBluetoothLEManufacturerDataFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned short companyId, Storage::Streams::IBuffer* data, BluetoothLEManufacturerData* *value);
};

// IBluetoothLEManufacturerData
struct IBluetoothLEManufacturerData_raw : IInspectable {
	virtual STDMETHODIMP _get_CompanyId(unsigned short *value);
	virtual STDMETHODIMP _put_CompanyId(unsigned short value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_Data(Storage::Streams::IBuffer* value);
};
template<typename X> struct IBluetoothLEManufacturerData_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IBluetoothLEManufacturerData_adaptor::CompanyId)->_get_CompanyId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
			void put(unsigned short value) { hrcheck(enc(&IBluetoothLEManufacturerData_adaptor::CompanyId)->_put_CompanyId(value)); }
			void operator=(unsigned short value) { put(value); }
			void operator()(unsigned short value) { put(value); }
		} CompanyId;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IBluetoothLEManufacturerData_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IBluetoothLEManufacturerData_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} Data;
	};
	IBluetoothLEManufacturerData_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEManufacturerData, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData_adaptor<X> { typedef adapt IBluetoothLEManufacturerData; };
struct IBluetoothLEManufacturerData : IBluetoothLEManufacturerData_raw, generate<IBluetoothLEManufacturerData> {};

// BluetoothLEManufacturerData
template<typename> struct BluetoothLEManufacturerData_statics {
	static BluetoothLEManufacturerData *activate(unsigned short companyId, pptr<Storage::Streams::IBuffer> data) { BluetoothLEManufacturerData *value; hrcheck(get_activation_factory<BluetoothLEManufacturerData, IBluetoothLEManufacturerDataFactory>()->_Create(companyId, data, &value)); return value; }
	static BluetoothLEManufacturerData *activate() { BluetoothLEManufacturerData *t; get_activation_factory<BluetoothLEManufacturerData>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<BluetoothLEManufacturerData, X> : X, Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData_statics<void> {
	using Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData_statics<void>::activate;
	typedef typename X::root_type BluetoothLEManufacturerData;
};
struct BluetoothLEManufacturerData : generate<BluetoothLEManufacturerData> {};

// IBluetoothLEAdvertisementDataSectionFactory
struct IBluetoothLEAdvertisementDataSectionFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned char dataType, Storage::Streams::IBuffer* data, BluetoothLEAdvertisementDataSection* *value);
};

// IBluetoothLEAdvertisementDataSection
struct IBluetoothLEAdvertisementDataSection_raw : IInspectable {
	virtual STDMETHODIMP _get_DataType(unsigned char *value);
	virtual STDMETHODIMP _put_DataType(unsigned char value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_Data(Storage::Streams::IBuffer* value);
};
template<typename X> struct IBluetoothLEAdvertisementDataSection_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IBluetoothLEAdvertisementDataSection_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IBluetoothLEAdvertisementDataSection_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} Data;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IBluetoothLEAdvertisementDataSection_adaptor::DataType)->_get_DataType(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
			void put(unsigned char value) { hrcheck(enc(&IBluetoothLEAdvertisementDataSection_adaptor::DataType)->_put_DataType(value)); }
			void operator=(unsigned char value) { put(value); }
			void operator()(unsigned char value) { put(value); }
		} DataType;
	};
	IBluetoothLEAdvertisementDataSection_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementDataSection, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection_adaptor<X> { typedef adapt IBluetoothLEAdvertisementDataSection; };
struct IBluetoothLEAdvertisementDataSection : IBluetoothLEAdvertisementDataSection_raw, generate<IBluetoothLEAdvertisementDataSection> {};

// BluetoothLEAdvertisementDataSection
template<typename> struct BluetoothLEAdvertisementDataSection_statics {
	static BluetoothLEAdvertisementDataSection *activate(unsigned char dataType, pptr<Storage::Streams::IBuffer> data) { BluetoothLEAdvertisementDataSection *value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataSection, IBluetoothLEAdvertisementDataSectionFactory>()->_Create(dataType, data, &value)); return value; }
	static BluetoothLEAdvertisementDataSection *activate() { BluetoothLEAdvertisementDataSection *t; get_activation_factory<BluetoothLEAdvertisementDataSection>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<BluetoothLEAdvertisementDataSection, X> : X, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection_statics<void> {
	using Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection_statics<void>::activate;
	typedef typename X::root_type BluetoothLEAdvertisementDataSection;
};
struct BluetoothLEAdvertisementDataSection : generate<BluetoothLEAdvertisementDataSection> {};

// BluetoothLEAdvertisement
template<typename X> struct statics<BluetoothLEAdvertisement, X> : X {
	typedef typename X::root_type BluetoothLEAdvertisement;
};
struct BluetoothLEAdvertisement : generate<BluetoothLEAdvertisement> {};

// IBluetoothLEAdvertisementFilter
struct IBluetoothLEAdvertisementFilter_raw : IInspectable {
	virtual STDMETHODIMP _get_Advertisement(BluetoothLEAdvertisement* *value);
	virtual STDMETHODIMP _put_Advertisement(BluetoothLEAdvertisement* value);
	virtual STDMETHODIMP _get_BytePatterns(Foundation::Collections::IVector<BluetoothLEAdvertisementBytePattern*>* *value);
};
template<typename X> struct IBluetoothLEAdvertisementFilter_adaptor : X {
	union {
		struct : property {
			ptr<BluetoothLEAdvertisement> get() { BluetoothLEAdvertisement* value; hrcheck(enc(&IBluetoothLEAdvertisementFilter_adaptor::Advertisement)->_get_Advertisement(&value)); return from_abi(value); }
			ptr<BluetoothLEAdvertisement> operator()() { return get(); }
			operator ptr<BluetoothLEAdvertisement> () { return get(); }
			ptr<BluetoothLEAdvertisement> operator->() { return get(); }
			void put(pptr<BluetoothLEAdvertisement> value) { hrcheck(enc(&IBluetoothLEAdvertisementFilter_adaptor::Advertisement)->_put_Advertisement(value)); }
			void operator=(pptr<BluetoothLEAdvertisement> value) { put(value); }
			void operator()(pptr<BluetoothLEAdvertisement> value) { put(value); }
		} Advertisement;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementBytePattern>>> get() { Foundation::Collections::IVector<BluetoothLEAdvertisementBytePattern*>* value; hrcheck(enc(&IBluetoothLEAdvertisementFilter_adaptor::BytePatterns)->_get_BytePatterns(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementBytePattern>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementBytePattern>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<BluetoothLEAdvertisementBytePattern>>> operator->() { return get(); }
		} BytePatterns;
	};
	IBluetoothLEAdvertisementFilter_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementFilter, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter_adaptor<X> { typedef adapt IBluetoothLEAdvertisementFilter; };
struct IBluetoothLEAdvertisementFilter : IBluetoothLEAdvertisementFilter_raw, generate<IBluetoothLEAdvertisementFilter> {};

// IBluetoothLEAdvertisementBytePatternFactory
struct IBluetoothLEAdvertisementBytePatternFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned char dataType, short offset, Storage::Streams::IBuffer* data, BluetoothLEAdvertisementBytePattern* *value);
};

// IBluetoothLEAdvertisementBytePattern
struct IBluetoothLEAdvertisementBytePattern_raw : IInspectable {
	virtual STDMETHODIMP _get_DataType(unsigned char *value);
	virtual STDMETHODIMP _put_DataType(unsigned char value);
	virtual STDMETHODIMP _get_Offset(short *value);
	virtual STDMETHODIMP _put_Offset(short value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_Data(Storage::Streams::IBuffer* value);
};
template<typename X> struct IBluetoothLEAdvertisementBytePattern_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IBluetoothLEAdvertisementBytePattern_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IBluetoothLEAdvertisementBytePattern_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} Data;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IBluetoothLEAdvertisementBytePattern_adaptor::DataType)->_get_DataType(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
			void put(unsigned char value) { hrcheck(enc(&IBluetoothLEAdvertisementBytePattern_adaptor::DataType)->_put_DataType(value)); }
			void operator=(unsigned char value) { put(value); }
			void operator()(unsigned char value) { put(value); }
		} DataType;
		struct : property {
			short get() { short value; hrcheck(enc(&IBluetoothLEAdvertisementBytePattern_adaptor::Offset)->_get_Offset(&value)); return value; }
			short operator()() { return get(); }
			operator short () { return get(); }
			void put(short value) { hrcheck(enc(&IBluetoothLEAdvertisementBytePattern_adaptor::Offset)->_put_Offset(value)); }
			void operator=(short value) { put(value); }
			void operator()(short value) { put(value); }
		} Offset;
	};
	IBluetoothLEAdvertisementBytePattern_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementBytePattern, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern_adaptor<X> { typedef adapt IBluetoothLEAdvertisementBytePattern; };
struct IBluetoothLEAdvertisementBytePattern : IBluetoothLEAdvertisementBytePattern_raw, generate<IBluetoothLEAdvertisementBytePattern> {};

// BluetoothLEAdvertisementBytePattern
template<typename> struct BluetoothLEAdvertisementBytePattern_statics {
	static BluetoothLEAdvertisementBytePattern *activate(unsigned char dataType, short offset, pptr<Storage::Streams::IBuffer> data) { BluetoothLEAdvertisementBytePattern *value; hrcheck(get_activation_factory<BluetoothLEAdvertisementBytePattern, IBluetoothLEAdvertisementBytePatternFactory>()->_Create(dataType, offset, data, &value)); return value; }
	static BluetoothLEAdvertisementBytePattern *activate() { BluetoothLEAdvertisementBytePattern *t; get_activation_factory<BluetoothLEAdvertisementBytePattern>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<BluetoothLEAdvertisementBytePattern, X> : X, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern_statics<void> {
	using Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern_statics<void>::activate;
	typedef typename X::root_type BluetoothLEAdvertisementBytePattern;
};
struct BluetoothLEAdvertisementBytePattern : generate<BluetoothLEAdvertisementBytePattern> {};

// BluetoothLEAdvertisementFilter
template<typename X> struct statics<BluetoothLEAdvertisementFilter, X> : X {
	typedef typename X::root_type BluetoothLEAdvertisementFilter;
};
struct BluetoothLEAdvertisementFilter : generate<BluetoothLEAdvertisementFilter> {};

// IBluetoothLEAdvertisementWatcherStoppedEventArgs
struct IBluetoothLEAdvertisementWatcherStoppedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Error(BluetoothError *value);
};
template<typename X> struct IBluetoothLEAdvertisementWatcherStoppedEventArgs_adaptor : X {
	union {
		struct : property {
			BluetoothError get() { BluetoothError value; hrcheck(enc(&IBluetoothLEAdvertisementWatcherStoppedEventArgs_adaptor::Error)->_get_Error(&value)); return value; }
			BluetoothError operator()() { return get(); }
			operator BluetoothError () { return get(); }
		} Error;
	};
	IBluetoothLEAdvertisementWatcherStoppedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementWatcherStoppedEventArgs, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs_adaptor<X> { typedef adapt IBluetoothLEAdvertisementWatcherStoppedEventArgs; };
struct IBluetoothLEAdvertisementWatcherStoppedEventArgs : IBluetoothLEAdvertisementWatcherStoppedEventArgs_raw, generate<IBluetoothLEAdvertisementWatcherStoppedEventArgs> {};

// BluetoothLEAdvertisementWatcherStoppedEventArgs
template<typename X> struct statics<BluetoothLEAdvertisementWatcherStoppedEventArgs, X> : X {
	typedef typename X::root_type BluetoothLEAdvertisementWatcherStoppedEventArgs;
};
struct BluetoothLEAdvertisementWatcherStoppedEventArgs : generate<BluetoothLEAdvertisementWatcherStoppedEventArgs> {};

// IBluetoothLEAdvertisementWatcherFactory
struct IBluetoothLEAdvertisementWatcherFactory : IInspectable {
	virtual STDMETHODIMP _Create(BluetoothLEAdvertisementFilter* advertisementFilter, BluetoothLEAdvertisementWatcher* *value);
};

// IBluetoothLEAdvertisementWatcher
struct IBluetoothLEAdvertisementWatcher_raw : IInspectable {
	virtual STDMETHODIMP _get_MinSamplingInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MaxSamplingInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MinOutOfRangeTimeout(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MaxOutOfRangeTimeout(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Status(BluetoothLEAdvertisementWatcherStatus *value);
	virtual STDMETHODIMP _get_ScanningMode(BluetoothLEScanningMode *value);
	virtual STDMETHODIMP _put_ScanningMode(BluetoothLEScanningMode value);
	virtual STDMETHODIMP _get_SignalStrengthFilter(BluetoothSignalStrengthFilter* *value);
	virtual STDMETHODIMP _put_SignalStrengthFilter(BluetoothSignalStrengthFilter* value);
	virtual STDMETHODIMP _get_AdvertisementFilter(BluetoothLEAdvertisementFilter* *value);
	virtual STDMETHODIMP _put_AdvertisementFilter(BluetoothLEAdvertisementFilter* value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _add_Received(Foundation::TypedEventHandler<BluetoothLEAdvertisementWatcher*, BluetoothLEAdvertisementReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Received(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<BluetoothLEAdvertisementWatcher*, BluetoothLEAdvertisementWatcherStoppedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBluetoothLEAdvertisementWatcher_adaptor : X {
	union {
		struct : property {
			ptr<BluetoothLEAdvertisementFilter> get() { BluetoothLEAdvertisementFilter* value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::AdvertisementFilter)->_get_AdvertisementFilter(&value)); return from_abi(value); }
			ptr<BluetoothLEAdvertisementFilter> operator()() { return get(); }
			operator ptr<BluetoothLEAdvertisementFilter> () { return get(); }
			ptr<BluetoothLEAdvertisementFilter> operator->() { return get(); }
			void put(pptr<BluetoothLEAdvertisementFilter> value) { hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::AdvertisementFilter)->_put_AdvertisementFilter(value)); }
			void operator=(pptr<BluetoothLEAdvertisementFilter> value) { put(value); }
			void operator()(pptr<BluetoothLEAdvertisementFilter> value) { put(value); }
		} AdvertisementFilter;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::MaxOutOfRangeTimeout)->_get_MaxOutOfRangeTimeout(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MaxOutOfRangeTimeout;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::MaxSamplingInterval)->_get_MaxSamplingInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MaxSamplingInterval;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::MinOutOfRangeTimeout)->_get_MinOutOfRangeTimeout(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MinOutOfRangeTimeout;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::MinSamplingInterval)->_get_MinSamplingInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MinSamplingInterval;
		struct : property {
			BluetoothLEScanningMode get() { BluetoothLEScanningMode value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::ScanningMode)->_get_ScanningMode(&value)); return value; }
			BluetoothLEScanningMode operator()() { return get(); }
			operator BluetoothLEScanningMode () { return get(); }
			void put(BluetoothLEScanningMode value) { hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::ScanningMode)->_put_ScanningMode(value)); }
			void operator=(BluetoothLEScanningMode value) { put(value); }
			void operator()(BluetoothLEScanningMode value) { put(value); }
		} ScanningMode;
		struct : property {
			ptr<BluetoothSignalStrengthFilter> get() { BluetoothSignalStrengthFilter* value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::SignalStrengthFilter)->_get_SignalStrengthFilter(&value)); return from_abi(value); }
			ptr<BluetoothSignalStrengthFilter> operator()() { return get(); }
			operator ptr<BluetoothSignalStrengthFilter> () { return get(); }
			ptr<BluetoothSignalStrengthFilter> operator->() { return get(); }
			void put(pptr<BluetoothSignalStrengthFilter> value) { hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::SignalStrengthFilter)->_put_SignalStrengthFilter(value)); }
			void operator=(pptr<BluetoothSignalStrengthFilter> value) { put(value); }
			void operator()(pptr<BluetoothSignalStrengthFilter> value) { put(value); }
		} SignalStrengthFilter;
		struct : property {
			BluetoothLEAdvertisementWatcherStatus get() { BluetoothLEAdvertisementWatcherStatus value; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::Status)->_get_Status(&value)); return value; }
			BluetoothLEAdvertisementWatcherStatus operator()() { return get(); }
			operator BluetoothLEAdvertisementWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothLEAdvertisementWatcher>, ptr<BluetoothLEAdvertisementReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::Received)->_add_Received(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::Received)->_remove_Received(token)); }
		} Received;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothLEAdvertisementWatcher>, ptr<BluetoothLEAdvertisementWatcherStoppedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothLEAdvertisementWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IBluetoothLEAdvertisementWatcher_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementWatcher, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher_adaptor<X> { typedef adapt IBluetoothLEAdvertisementWatcher; };
struct IBluetoothLEAdvertisementWatcher : IBluetoothLEAdvertisementWatcher_raw, generate<IBluetoothLEAdvertisementWatcher> {};

// BluetoothLEAdvertisementWatcher
template<typename> struct BluetoothLEAdvertisementWatcher_statics {
	static BluetoothLEAdvertisementWatcher *activate() { BluetoothLEAdvertisementWatcher *t; get_activation_factory<BluetoothLEAdvertisementWatcher>()->ActivateInstance((IInspectable**)&t); return t; }
	static BluetoothLEAdvertisementWatcher *activate(pptr<BluetoothLEAdvertisementFilter> advertisementFilter) { BluetoothLEAdvertisementWatcher *value; hrcheck(get_activation_factory<BluetoothLEAdvertisementWatcher, IBluetoothLEAdvertisementWatcherFactory>()->_Create(advertisementFilter, &value)); return value; }
};

template<typename X> struct statics<BluetoothLEAdvertisementWatcher, X> : X, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher_statics<void> {
	using Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher_statics<void>::activate;
	typedef typename X::root_type BluetoothLEAdvertisementWatcher;
};
struct BluetoothLEAdvertisementWatcher : generate<BluetoothLEAdvertisementWatcher> {};

// IBluetoothLEAdvertisementReceivedEventArgs
struct IBluetoothLEAdvertisementReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RawSignalStrengthInDBm(short *value);
	virtual STDMETHODIMP _get_BluetoothAddress(unsigned __int64 *value);
	virtual STDMETHODIMP _get_AdvertisementType(BluetoothLEAdvertisementType *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Advertisement(BluetoothLEAdvertisement* *value);
};
template<typename X> struct IBluetoothLEAdvertisementReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<BluetoothLEAdvertisement> get() { BluetoothLEAdvertisement* value; hrcheck(enc(&IBluetoothLEAdvertisementReceivedEventArgs_adaptor::Advertisement)->_get_Advertisement(&value)); return from_abi(value); }
			ptr<BluetoothLEAdvertisement> operator()() { return get(); }
			operator ptr<BluetoothLEAdvertisement> () { return get(); }
			ptr<BluetoothLEAdvertisement> operator->() { return get(); }
		} Advertisement;
		struct : property {
			BluetoothLEAdvertisementType get() { BluetoothLEAdvertisementType value; hrcheck(enc(&IBluetoothLEAdvertisementReceivedEventArgs_adaptor::AdvertisementType)->_get_AdvertisementType(&value)); return value; }
			BluetoothLEAdvertisementType operator()() { return get(); }
			operator BluetoothLEAdvertisementType () { return get(); }
		} AdvertisementType;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IBluetoothLEAdvertisementReceivedEventArgs_adaptor::BluetoothAddress)->_get_BluetoothAddress(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BluetoothAddress;
		struct : property {
			short get() { short value; hrcheck(enc(&IBluetoothLEAdvertisementReceivedEventArgs_adaptor::RawSignalStrengthInDBm)->_get_RawSignalStrengthInDBm(&value)); return value; }
			short operator()() { return get(); }
			operator short () { return get(); }
		} RawSignalStrengthInDBm;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IBluetoothLEAdvertisementReceivedEventArgs_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IBluetoothLEAdvertisementReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementReceivedEventArgs, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs_adaptor<X> { typedef adapt IBluetoothLEAdvertisementReceivedEventArgs; };
struct IBluetoothLEAdvertisementReceivedEventArgs : IBluetoothLEAdvertisementReceivedEventArgs_raw, generate<IBluetoothLEAdvertisementReceivedEventArgs> {};

// BluetoothLEAdvertisementReceivedEventArgs
template<typename X> struct statics<BluetoothLEAdvertisementReceivedEventArgs, X> : X {
	typedef typename X::root_type BluetoothLEAdvertisementReceivedEventArgs;
};
struct BluetoothLEAdvertisementReceivedEventArgs : generate<BluetoothLEAdvertisementReceivedEventArgs> {};

// IBluetoothLEAdvertisementDataTypesStatics
struct IBluetoothLEAdvertisementDataTypesStatics : IInspectable {
	virtual STDMETHODIMP _get_Flags(unsigned char *value);
	virtual STDMETHODIMP _get_IncompleteService16BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_CompleteService16BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_IncompleteService32BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_CompleteService32BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_IncompleteService128BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_CompleteService128BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_ShortenedLocalName(unsigned char *value);
	virtual STDMETHODIMP _get_CompleteLocalName(unsigned char *value);
	virtual STDMETHODIMP _get_TxPowerLevel(unsigned char *value);
	virtual STDMETHODIMP _get_SlaveConnectionIntervalRange(unsigned char *value);
	virtual STDMETHODIMP _get_ServiceSolicitation16BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_ServiceSolicitation32BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_ServiceSolicitation128BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_ServiceData16BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_ServiceData32BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_ServiceData128BitUuids(unsigned char *value);
	virtual STDMETHODIMP _get_PublicTargetAddress(unsigned char *value);
	virtual STDMETHODIMP _get_RandomTargetAddress(unsigned char *value);
	virtual STDMETHODIMP _get_Appearance(unsigned char *value);
	virtual STDMETHODIMP _get_AdvertisingInterval(unsigned char *value);
	virtual STDMETHODIMP _get_ManufacturerSpecificData(unsigned char *value);
};

// BluetoothLEAdvertisementDataTypes
template<typename> struct BluetoothLEAdvertisementDataTypes_statics {
	static struct _AdvertisingInterval : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_AdvertisingInterval(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} AdvertisingInterval;
	static struct _Appearance : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_Appearance(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} Appearance;
	static struct _CompleteLocalName : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_CompleteLocalName(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} CompleteLocalName;
	static struct _CompleteService128BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_CompleteService128BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} CompleteService128BitUuids;
	static struct _CompleteService16BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_CompleteService16BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} CompleteService16BitUuids;
	static struct _CompleteService32BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_CompleteService32BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} CompleteService32BitUuids;
	static struct _Flags : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_Flags(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} Flags;
	static struct _IncompleteService128BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_IncompleteService128BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} IncompleteService128BitUuids;
	static struct _IncompleteService16BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_IncompleteService16BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} IncompleteService16BitUuids;
	static struct _IncompleteService32BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_IncompleteService32BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} IncompleteService32BitUuids;
	static struct _ManufacturerSpecificData : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ManufacturerSpecificData(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ManufacturerSpecificData;
	static struct _PublicTargetAddress : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_PublicTargetAddress(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} PublicTargetAddress;
	static struct _RandomTargetAddress : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_RandomTargetAddress(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} RandomTargetAddress;
	static struct _ServiceData128BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ServiceData128BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ServiceData128BitUuids;
	static struct _ServiceData16BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ServiceData16BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ServiceData16BitUuids;
	static struct _ServiceData32BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ServiceData32BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ServiceData32BitUuids;
	static struct _ServiceSolicitation128BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ServiceSolicitation128BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ServiceSolicitation128BitUuids;
	static struct _ServiceSolicitation16BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ServiceSolicitation16BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ServiceSolicitation16BitUuids;
	static struct _ServiceSolicitation32BitUuids : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ServiceSolicitation32BitUuids(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ServiceSolicitation32BitUuids;
	static struct _ShortenedLocalName : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_ShortenedLocalName(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} ShortenedLocalName;
	static struct _SlaveConnectionIntervalRange : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_SlaveConnectionIntervalRange(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} SlaveConnectionIntervalRange;
	static struct _TxPowerLevel : property {
		unsigned char get() { unsigned char value; hrcheck(get_activation_factory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>()->_get_TxPowerLevel(&value)); return value; }
		unsigned char operator()() { return get(); }
		operator unsigned char () { return get(); }
	} TxPowerLevel;
};
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_AdvertisingInterval BluetoothLEAdvertisementDataTypes_statics<X>::AdvertisingInterval;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_Appearance BluetoothLEAdvertisementDataTypes_statics<X>::Appearance;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_CompleteLocalName BluetoothLEAdvertisementDataTypes_statics<X>::CompleteLocalName;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_CompleteService128BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::CompleteService128BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_CompleteService16BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::CompleteService16BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_CompleteService32BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::CompleteService32BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_Flags BluetoothLEAdvertisementDataTypes_statics<X>::Flags;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_IncompleteService128BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::IncompleteService128BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_IncompleteService16BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::IncompleteService16BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_IncompleteService32BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::IncompleteService32BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ManufacturerSpecificData BluetoothLEAdvertisementDataTypes_statics<X>::ManufacturerSpecificData;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_PublicTargetAddress BluetoothLEAdvertisementDataTypes_statics<X>::PublicTargetAddress;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_RandomTargetAddress BluetoothLEAdvertisementDataTypes_statics<X>::RandomTargetAddress;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ServiceData128BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::ServiceData128BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ServiceData16BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::ServiceData16BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ServiceData32BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::ServiceData32BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ServiceSolicitation128BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::ServiceSolicitation128BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ServiceSolicitation16BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::ServiceSolicitation16BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ServiceSolicitation32BitUuids BluetoothLEAdvertisementDataTypes_statics<X>::ServiceSolicitation32BitUuids;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_ShortenedLocalName BluetoothLEAdvertisementDataTypes_statics<X>::ShortenedLocalName;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_SlaveConnectionIntervalRange BluetoothLEAdvertisementDataTypes_statics<X>::SlaveConnectionIntervalRange;
template<typename X> typename BluetoothLEAdvertisementDataTypes_statics<X>::_TxPowerLevel BluetoothLEAdvertisementDataTypes_statics<X>::TxPowerLevel;

template<typename X> struct statics<BluetoothLEAdvertisementDataTypes, X> : X, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataTypes_statics<void> {
	typedef typename X::root_type BluetoothLEAdvertisementDataTypes;
};
struct BluetoothLEAdvertisementDataTypes : generate<BluetoothLEAdvertisementDataTypes> {};

// IBluetoothLEAdvertisementPublisherStatusChangedEventArgs
struct IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(BluetoothLEAdvertisementPublisherStatus *value);
	virtual STDMETHODIMP _get_Error(BluetoothError *value);
};
template<typename X> struct IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_adaptor : X {
	union {
		struct : property {
			BluetoothError get() { BluetoothError value; hrcheck(enc(&IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_adaptor::Error)->_get_Error(&value)); return value; }
			BluetoothError operator()() { return get(); }
			operator BluetoothError () { return get(); }
		} Error;
		struct : property {
			BluetoothLEAdvertisementPublisherStatus get() { BluetoothLEAdvertisementPublisherStatus value; hrcheck(enc(&IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			BluetoothLEAdvertisementPublisherStatus operator()() { return get(); }
			operator BluetoothLEAdvertisementPublisherStatus () { return get(); }
		} Status;
	};
	IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementPublisherStatusChangedEventArgs, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_adaptor<X> { typedef adapt IBluetoothLEAdvertisementPublisherStatusChangedEventArgs; };
struct IBluetoothLEAdvertisementPublisherStatusChangedEventArgs : IBluetoothLEAdvertisementPublisherStatusChangedEventArgs_raw, generate<IBluetoothLEAdvertisementPublisherStatusChangedEventArgs> {};

// BluetoothLEAdvertisementPublisherStatusChangedEventArgs
template<typename X> struct statics<BluetoothLEAdvertisementPublisherStatusChangedEventArgs, X> : X {
	typedef typename X::root_type BluetoothLEAdvertisementPublisherStatusChangedEventArgs;
};
struct BluetoothLEAdvertisementPublisherStatusChangedEventArgs : generate<BluetoothLEAdvertisementPublisherStatusChangedEventArgs> {};

// IBluetoothLEAdvertisementPublisherFactory
struct IBluetoothLEAdvertisementPublisherFactory : IInspectable {
	virtual STDMETHODIMP _Create(BluetoothLEAdvertisement* advertisement, BluetoothLEAdvertisementPublisher* *value);
};

// IBluetoothLEAdvertisementPublisher
struct IBluetoothLEAdvertisementPublisher_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(BluetoothLEAdvertisementPublisherStatus *value);
	virtual STDMETHODIMP _get_Advertisement(BluetoothLEAdvertisement* *value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _add_StatusChanged(Foundation::TypedEventHandler<BluetoothLEAdvertisementPublisher*, BluetoothLEAdvertisementPublisherStatusChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBluetoothLEAdvertisementPublisher_adaptor : X {
	union {
		struct : property {
			ptr<BluetoothLEAdvertisement> get() { BluetoothLEAdvertisement* value; hrcheck(enc(&IBluetoothLEAdvertisementPublisher_adaptor::Advertisement)->_get_Advertisement(&value)); return from_abi(value); }
			ptr<BluetoothLEAdvertisement> operator()() { return get(); }
			operator ptr<BluetoothLEAdvertisement> () { return get(); }
			ptr<BluetoothLEAdvertisement> operator->() { return get(); }
		} Advertisement;
		struct : property {
			BluetoothLEAdvertisementPublisherStatus get() { BluetoothLEAdvertisementPublisherStatus value; hrcheck(enc(&IBluetoothLEAdvertisementPublisher_adaptor::Status)->_get_Status(&value)); return value; }
			BluetoothLEAdvertisementPublisherStatus operator()() { return get(); }
			operator BluetoothLEAdvertisementPublisherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothLEAdvertisementPublisher>, ptr<BluetoothLEAdvertisementPublisherStatusChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothLEAdvertisementPublisher_adaptor::StatusChanged)->_add_StatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothLEAdvertisementPublisher_adaptor::StatusChanged)->_remove_StatusChanged(token)); }
		} StatusChanged;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IBluetoothLEAdvertisementPublisher_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementPublisher, X> : Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher_adaptor<X> { typedef adapt IBluetoothLEAdvertisementPublisher; };
struct IBluetoothLEAdvertisementPublisher : IBluetoothLEAdvertisementPublisher_raw, generate<IBluetoothLEAdvertisementPublisher> {};

// BluetoothLEAdvertisementPublisher
template<typename> struct BluetoothLEAdvertisementPublisher_statics {
	static BluetoothLEAdvertisementPublisher *activate() { BluetoothLEAdvertisementPublisher *t; get_activation_factory<BluetoothLEAdvertisementPublisher>()->ActivateInstance((IInspectable**)&t); return t; }
	static BluetoothLEAdvertisementPublisher *activate(pptr<BluetoothLEAdvertisement> advertisement) { BluetoothLEAdvertisementPublisher *value; hrcheck(get_activation_factory<BluetoothLEAdvertisementPublisher, IBluetoothLEAdvertisementPublisherFactory>()->_Create(advertisement, &value)); return value; }
};

template<typename X> struct statics<BluetoothLEAdvertisementPublisher, X> : X, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher_statics<void> {
	using Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher_statics<void>::activate;
	typedef typename X::root_type BluetoothLEAdvertisementPublisher;
};
struct BluetoothLEAdvertisementPublisher : generate<BluetoothLEAdvertisementPublisher> {};
}}}}
} // namespace iso_winrt
