#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Preview.Notes

#include "Windows.ApplicationModel.Preview.Notes.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Graphics { namespace Imaging {
struct SoftwareBitmap;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Preview::Notes::PreviewNotesContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::INotePlacementChangedPreviewEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::NotePlacementChangedPreviewEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Preview::Notes::INotePlacementChangedPreviewEventArgs> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::INoteVisibilityChangedPreviewEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::NoteVisibilityChangedPreviewEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Preview::Notes::INoteVisibilityChangedPreviewEventArgs> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreviewShowNoteOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::NotesWindowManagerPreviewShowNoteOptions> : class_type<Platform::Object, Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreviewShowNoteOptions> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreviewStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::Notes::NotesWindowManagerPreview> : class_type<Platform::Object, Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview, Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview2> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Preview::Notes::INotePlacementChangedPreviewEventArgs> { define_guid(0x491D57B7, 0xF780, 0x4E7F, 0xA9, 0x39, 0x9A, 0x4C, 0xAF, 0x96, 0x52, 0x14);};
template<> struct uuid<Windows::ApplicationModel::Preview::Notes::INoteVisibilityChangedPreviewEventArgs> { define_guid(0xE34649E, 0x3815, 0x4FF6, 0x83, 0xB3, 0xA1, 0x4D, 0x17, 0x12, 0xE, 0x24);};
template<> struct uuid<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreviewShowNoteOptions> { define_guid(0x886B09D6, 0xA6AE, 0x4007, 0xA5, 0x6D, 0x1C, 0xA7, 0xC, 0x84, 0xC0, 0xD2);};
template<> struct uuid<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview> { define_guid(0xDC2AC23E, 0x4850, 0x4F13, 0x9C, 0xC7, 0xFF, 0x48, 0x7E, 0xFD, 0xFC, 0xDE);};
template<> struct uuid<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreviewStatics> { define_guid(0x6668CC88, 0xA8E, 0x4127, 0xA3, 0x8E, 0x99, 0x54, 0x45, 0x86, 0x8A, 0x78);};
template<> struct uuid<Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview2> { define_guid(0xEDFE864A, 0x1F54, 0x4B09, 0x98, 0x23, 0xFF, 0x47, 0x7F, 0x6F, 0xA3, 0xBC);};

// types

namespace Windows { namespace ApplicationModel { namespace Preview { namespace Notes {

// INotePlacementChangedPreviewEventArgs
struct INotePlacementChangedPreviewEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ViewId(int *value);
};
template<typename X> struct INotePlacementChangedPreviewEventArgs_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&INotePlacementChangedPreviewEventArgs_adaptor::ViewId)->_get_ViewId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ViewId;
	};
	INotePlacementChangedPreviewEventArgs_adaptor() {}
};
template<typename X> struct adapt<INotePlacementChangedPreviewEventArgs, X> : Windows::ApplicationModel::Preview::Notes::INotePlacementChangedPreviewEventArgs_adaptor<X> { typedef adapt INotePlacementChangedPreviewEventArgs; };
struct INotePlacementChangedPreviewEventArgs : INotePlacementChangedPreviewEventArgs_raw, generate<INotePlacementChangedPreviewEventArgs> {};

// NotePlacementChangedPreviewEventArgs
template<typename X> struct statics<NotePlacementChangedPreviewEventArgs, X> : X {
	typedef typename X::root_type NotePlacementChangedPreviewEventArgs;
};
struct NotePlacementChangedPreviewEventArgs : generate<NotePlacementChangedPreviewEventArgs> {};

// INoteVisibilityChangedPreviewEventArgs
struct INoteVisibilityChangedPreviewEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ViewId(int *value);
	virtual STDMETHODIMP _get_IsVisible(bool *value);
};
template<typename X> struct INoteVisibilityChangedPreviewEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&INoteVisibilityChangedPreviewEventArgs_adaptor::IsVisible)->_get_IsVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVisible;
		struct : property {
			int get() { int value; hrcheck(enc(&INoteVisibilityChangedPreviewEventArgs_adaptor::ViewId)->_get_ViewId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ViewId;
	};
	INoteVisibilityChangedPreviewEventArgs_adaptor() {}
};
template<typename X> struct adapt<INoteVisibilityChangedPreviewEventArgs, X> : Windows::ApplicationModel::Preview::Notes::INoteVisibilityChangedPreviewEventArgs_adaptor<X> { typedef adapt INoteVisibilityChangedPreviewEventArgs; };
struct INoteVisibilityChangedPreviewEventArgs : INoteVisibilityChangedPreviewEventArgs_raw, generate<INoteVisibilityChangedPreviewEventArgs> {};

// NoteVisibilityChangedPreviewEventArgs
template<typename X> struct statics<NoteVisibilityChangedPreviewEventArgs, X> : X {
	typedef typename X::root_type NoteVisibilityChangedPreviewEventArgs;
};
struct NoteVisibilityChangedPreviewEventArgs : generate<NoteVisibilityChangedPreviewEventArgs> {};

// INotesWindowManagerPreviewShowNoteOptions
struct INotesWindowManagerPreviewShowNoteOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_ShowWithFocus(bool *value);
	virtual STDMETHODIMP _put_ShowWithFocus(bool value);
};
template<typename X> struct INotesWindowManagerPreviewShowNoteOptions_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&INotesWindowManagerPreviewShowNoteOptions_adaptor::ShowWithFocus)->_get_ShowWithFocus(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&INotesWindowManagerPreviewShowNoteOptions_adaptor::ShowWithFocus)->_put_ShowWithFocus(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShowWithFocus;
	};
	INotesWindowManagerPreviewShowNoteOptions_adaptor() {}
};
template<typename X> struct adapt<INotesWindowManagerPreviewShowNoteOptions, X> : Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreviewShowNoteOptions_adaptor<X> { typedef adapt INotesWindowManagerPreviewShowNoteOptions; };
struct INotesWindowManagerPreviewShowNoteOptions : INotesWindowManagerPreviewShowNoteOptions_raw, generate<INotesWindowManagerPreviewShowNoteOptions> {};

// NotesWindowManagerPreviewShowNoteOptions
template<typename X> struct statics<NotesWindowManagerPreviewShowNoteOptions, X> : X {
	typedef typename X::root_type NotesWindowManagerPreviewShowNoteOptions;
};
struct NotesWindowManagerPreviewShowNoteOptions : generate<NotesWindowManagerPreviewShowNoteOptions> {};

// INotesWindowManagerPreview
struct INotesWindowManagerPreview_raw : IInspectable {
	virtual STDMETHODIMP _get_IsScreenLocked(bool *value);
	virtual STDMETHODIMP _ShowNote(int noteViewId);
	virtual STDMETHODIMP _ShowNoteRelativeTo(int noteViewId, int anchorNoteViewId);
	virtual STDMETHODIMP _ShowNoteWithPlacement(int noteViewId, Storage::Streams::IBuffer* data);
	virtual STDMETHODIMP _HideNote(int noteViewId);
	virtual STDMETHODIMP _GetNotePlacement(int noteViewId, Storage::Streams::IBuffer* *data);
	virtual STDMETHODIMP _TrySetNoteSize(int noteViewId, Foundation::Size size, bool *succeeded);
	virtual STDMETHODIMP _SetFocusToNextView();
	virtual STDMETHODIMP _SetNotesThumbnailAsync(Storage::Streams::IBuffer* thumbnail, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _add_SystemLockStateChanged(Foundation::TypedEventHandler<NotesWindowManagerPreview*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SystemLockStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NotePlacementChanged(Foundation::TypedEventHandler<NotesWindowManagerPreview*, NotePlacementChangedPreviewEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NotePlacementChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NoteVisibilityChanged(Foundation::TypedEventHandler<NotesWindowManagerPreview*, NoteVisibilityChangedPreviewEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NoteVisibilityChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct INotesWindowManagerPreview_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&INotesWindowManagerPreview_adaptor::IsScreenLocked)->_get_IsScreenLocked(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsScreenLocked;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<NotesWindowManagerPreview>, ptr<NotePlacementChangedPreviewEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&INotesWindowManagerPreview_adaptor::NotePlacementChanged)->_add_NotePlacementChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&INotesWindowManagerPreview_adaptor::NotePlacementChanged)->_remove_NotePlacementChanged(token)); }
		} NotePlacementChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<NotesWindowManagerPreview>, ptr<NoteVisibilityChangedPreviewEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&INotesWindowManagerPreview_adaptor::NoteVisibilityChanged)->_add_NoteVisibilityChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&INotesWindowManagerPreview_adaptor::NoteVisibilityChanged)->_remove_NoteVisibilityChanged(token)); }
		} NoteVisibilityChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<NotesWindowManagerPreview>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&INotesWindowManagerPreview_adaptor::SystemLockStateChanged)->_add_SystemLockStateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&INotesWindowManagerPreview_adaptor::SystemLockStateChanged)->_remove_SystemLockStateChanged(token)); }
		} SystemLockStateChanged;
	};
	void ShowNote(int noteViewId) { hrcheck(X::get()->_ShowNote(noteViewId)); }
	void ShowNoteRelativeTo(int noteViewId, int anchorNoteViewId) { hrcheck(X::get()->_ShowNoteRelativeTo(noteViewId, anchorNoteViewId)); }
	void ShowNoteWithPlacement(int noteViewId, pptr<Storage::Streams::IBuffer> data) { hrcheck(X::get()->_ShowNoteWithPlacement(noteViewId, data)); }
	void HideNote(int noteViewId) { hrcheck(X::get()->_HideNote(noteViewId)); }
	ptr<Storage::Streams::IBuffer> GetNotePlacement(int noteViewId) { Storage::Streams::IBuffer* data; hrcheck(X::get()->_GetNotePlacement(noteViewId, &data)); return from_abi(data); }
	bool TrySetNoteSize(int noteViewId, const Foundation::Size& size) { bool succeeded; hrcheck(X::get()->_TrySetNoteSize(noteViewId, size, &succeeded)); return succeeded; }
	void SetFocusToNextView() { hrcheck(X::get()->_SetFocusToNextView()); }
	ptr<Foundation::IAsyncAction> SetNotesThumbnailAsync(pptr<Storage::Streams::IBuffer> thumbnail) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SetNotesThumbnailAsync(thumbnail, &operation)); return from_abi(operation); }
	INotesWindowManagerPreview_adaptor() {}
};
template<typename X> struct adapt<INotesWindowManagerPreview, X> : Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview_adaptor<X> { typedef adapt INotesWindowManagerPreview; };
struct INotesWindowManagerPreview : INotesWindowManagerPreview_raw, generate<INotesWindowManagerPreview> {};

// INotesWindowManagerPreviewStatics
struct INotesWindowManagerPreviewStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentApp(NotesWindowManagerPreview* *current);
};

// INotesWindowManagerPreview2
struct INotesWindowManagerPreview2_raw : IInspectable {
	virtual STDMETHODIMP _ShowNoteRelativeToWithOptions(int noteViewId, int anchorNoteViewId, NotesWindowManagerPreviewShowNoteOptions* options);
	virtual STDMETHODIMP _ShowNoteWithPlacementWithOptions(int noteViewId, Storage::Streams::IBuffer* data, NotesWindowManagerPreviewShowNoteOptions* options);
	virtual STDMETHODIMP _SetFocusToPreviousView();
	virtual STDMETHODIMP _SetThumbnailImageForTaskSwitcherAsync(Graphics::Imaging::SoftwareBitmap* bitmap, Foundation::IAsyncAction* *action);
};
template<typename X> struct INotesWindowManagerPreview2_adaptor : X {
	void ShowNoteRelativeTo(int noteViewId, int anchorNoteViewId, pptr<NotesWindowManagerPreviewShowNoteOptions> options) { hrcheck(X::get()->_ShowNoteRelativeToWithOptions(noteViewId, anchorNoteViewId, options)); }
	void ShowNoteWithPlacement(int noteViewId, pptr<Storage::Streams::IBuffer> data, pptr<NotesWindowManagerPreviewShowNoteOptions> options) { hrcheck(X::get()->_ShowNoteWithPlacementWithOptions(noteViewId, data, options)); }
	void SetFocusToPreviousView() { hrcheck(X::get()->_SetFocusToPreviousView()); }
	ptr<Foundation::IAsyncAction> SetThumbnailImageForTaskSwitcherAsync(pptr<Graphics::Imaging::SoftwareBitmap> bitmap) { Foundation::IAsyncAction* action; hrcheck(X::get()->_SetThumbnailImageForTaskSwitcherAsync(bitmap, &action)); return from_abi(action); }
};
template<typename X> struct adapt<INotesWindowManagerPreview2, X> : Windows::ApplicationModel::Preview::Notes::INotesWindowManagerPreview2_adaptor<X> { typedef adapt INotesWindowManagerPreview2; };
struct INotesWindowManagerPreview2 : INotesWindowManagerPreview2_raw, generate<INotesWindowManagerPreview2> {};

// NotesWindowManagerPreview
template<typename> struct NotesWindowManagerPreview_statics {
	static ptr<NotesWindowManagerPreview> GetForCurrentApp() { NotesWindowManagerPreview* current; hrcheck(get_activation_factory<NotesWindowManagerPreview, INotesWindowManagerPreviewStatics>()->_GetForCurrentApp(&current)); return from_abi(current); }
};

template<typename X> struct statics<NotesWindowManagerPreview, X> : X, Windows::ApplicationModel::Preview::Notes::NotesWindowManagerPreview_statics<void> {
	typedef typename X::root_type NotesWindowManagerPreview;
};
struct NotesWindowManagerPreview : generate<NotesWindowManagerPreview> {
	using INotesWindowManagerPreview2::ShowNoteRelativeTo;
	using INotesWindowManagerPreview::ShowNoteRelativeTo;
	using INotesWindowManagerPreview2::ShowNoteWithPlacement;
	using INotesWindowManagerPreview::ShowNoteWithPlacement;
};
}}}}
} // namespace iso_winrt
