#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Gpio.Provider

#include "Windows.Devices.Gpio.Provider.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::Devices::Gpio::Provider::ProviderGpioSharingMode> : enum_type<int> {};
template<> struct def<Windows::Devices::Gpio::Provider::ProviderGpioPinDriveMode> : enum_type<int> {};
template<> struct def<Windows::Devices::Gpio::Provider::ProviderGpioPinValue> : enum_type<int> {};
template<> struct def<Windows::Devices::Gpio::Provider::ProviderGpioPinEdge> : enum_type<int> {};
template<> struct def<Windows::Devices::Gpio::Provider::IGpioPinProviderValueChangedEventArgsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Gpio::Provider::IGpioPinProviderValueChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Gpio::Provider::GpioPinProviderValueChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Gpio::Provider::IGpioPinProviderValueChangedEventArgs>, custom_activators {};
template<> struct def<Windows::Devices::Gpio::Provider::IGpioPinProvider> : overridable_type<> {};
template<> struct def<Windows::Devices::Gpio::Provider::IGpioControllerProvider> : overridable_type<> {};
template<> struct def<Windows::Devices::Gpio::Provider::IGpioProvider> : overridable_type<> {};

// uuids

template<> struct uuid<Windows::Devices::Gpio::Provider::IGpioPinProviderValueChangedEventArgsFactory> { define_guid(0x3ECB0B59, 0x568C, 0x4392, 0xB2, 0x4A, 0x8A, 0x59, 0xA9, 0x2, 0xB1, 0xF1);};
template<> struct uuid<Windows::Devices::Gpio::Provider::IGpioPinProviderValueChangedEventArgs> { define_guid(0x32A6D6F2, 0x3D5B, 0x44CD, 0x8F, 0xBE, 0x13, 0xA6, 0x9F, 0x2E, 0xDB, 0x24);};
template<> struct uuid<Windows::Devices::Gpio::Provider::IGpioPinProvider> { define_guid(0x42344CB7, 0x6ABC, 0x40FF, 0x9C, 0xE7, 0x73, 0xB8, 0x53, 0x1, 0xB9, 0x0);};
template<> struct uuid<Windows::Devices::Gpio::Provider::IGpioControllerProvider> { define_guid(0xAD11CEC7, 0x19EA, 0x4B21, 0x87, 0x4F, 0xB9, 0x1A, 0xED, 0x4A, 0x25, 0xDB);};
template<> struct uuid<Windows::Devices::Gpio::Provider::IGpioProvider> { define_guid(0x44E82707, 0x8CA, 0x434A, 0xAF, 0xE0, 0xD6, 0x15, 0x80, 0x44, 0x6F, 0x7E);};

// types

namespace Windows { namespace Devices { namespace Gpio { namespace Provider {

// IGpioPinProviderValueChangedEventArgsFactory
struct IGpioPinProviderValueChangedEventArgsFactory : IInspectable {
	virtual STDMETHODIMP _Create(ProviderGpioPinEdge edge, GpioPinProviderValueChangedEventArgs* *value);
};

// IGpioPinProviderValueChangedEventArgs
struct IGpioPinProviderValueChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Edge(ProviderGpioPinEdge *value);
};
template<typename X> struct IGpioPinProviderValueChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ProviderGpioPinEdge get() { ProviderGpioPinEdge value; hrcheck(enc(&IGpioPinProviderValueChangedEventArgs_adaptor::Edge)->_get_Edge(&value)); return value; }
			ProviderGpioPinEdge operator()() { return get(); }
			operator ProviderGpioPinEdge () { return get(); }
		} Edge;
	};
	IGpioPinProviderValueChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IGpioPinProviderValueChangedEventArgs, X> : Windows::Devices::Gpio::Provider::IGpioPinProviderValueChangedEventArgs_adaptor<X> { typedef adapt IGpioPinProviderValueChangedEventArgs; };
struct IGpioPinProviderValueChangedEventArgs : IGpioPinProviderValueChangedEventArgs_raw, generate<IGpioPinProviderValueChangedEventArgs> {};

// GpioPinProviderValueChangedEventArgs
template<typename> struct GpioPinProviderValueChangedEventArgs_statics {
	static GpioPinProviderValueChangedEventArgs *activate(ProviderGpioPinEdge edge) { GpioPinProviderValueChangedEventArgs *value; hrcheck(get_activation_factory<GpioPinProviderValueChangedEventArgs, IGpioPinProviderValueChangedEventArgsFactory>()->_Create(edge, &value)); return value; }
};

template<typename X> struct statics<GpioPinProviderValueChangedEventArgs, X> : X, Windows::Devices::Gpio::Provider::GpioPinProviderValueChangedEventArgs_statics<void> {
	using Windows::Devices::Gpio::Provider::GpioPinProviderValueChangedEventArgs_statics<void>::activate;
	typedef typename X::root_type GpioPinProviderValueChangedEventArgs;
};
struct GpioPinProviderValueChangedEventArgs : generate<GpioPinProviderValueChangedEventArgs> {};

// IGpioPinProvider
struct IGpioPinProvider_raw : IInspectable {
	virtual STDMETHODIMP _add_ValueChanged(Foundation::TypedEventHandler<IGpioPinProvider*, GpioPinProviderValueChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_ValueChanged(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _get_DebounceTimeout(Foundation::TimeSpan *value) = 0;
	virtual STDMETHODIMP _put_DebounceTimeout(Foundation::TimeSpan value) = 0;
	virtual STDMETHODIMP _get_PinNumber(int *value) = 0;
	virtual STDMETHODIMP _get_SharingMode(ProviderGpioSharingMode *value) = 0;
	virtual STDMETHODIMP _IsDriveModeSupported(ProviderGpioPinDriveMode driveMode, bool *supported) = 0;
	virtual STDMETHODIMP _GetDriveMode(ProviderGpioPinDriveMode *value) = 0;
	virtual STDMETHODIMP _SetDriveMode(ProviderGpioPinDriveMode value) = 0;
	virtual STDMETHODIMP _Write(ProviderGpioPinValue value) = 0;
	virtual STDMETHODIMP _Read(ProviderGpioPinValue *value) = 0;
};
template<typename X> struct IGpioPinProvider_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IGpioPinProvider_adaptor::DebounceTimeout)->_get_DebounceTimeout(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IGpioPinProvider_adaptor::DebounceTimeout)->_put_DebounceTimeout(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} DebounceTimeout;
		struct : property {
			int get() { int value; hrcheck(enc(&IGpioPinProvider_adaptor::PinNumber)->_get_PinNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} PinNumber;
		struct : property {
			ProviderGpioSharingMode get() { ProviderGpioSharingMode value; hrcheck(enc(&IGpioPinProvider_adaptor::SharingMode)->_get_SharingMode(&value)); return value; }
			ProviderGpioSharingMode operator()() { return get(); }
			operator ProviderGpioSharingMode () { return get(); }
		} SharingMode;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IGpioPinProvider>, ptr<GpioPinProviderValueChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IGpioPinProvider_adaptor::ValueChanged)->_add_ValueChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IGpioPinProvider_adaptor::ValueChanged)->_remove_ValueChanged(token)); }
		} ValueChanged;
	};
	bool IsDriveModeSupported(ProviderGpioPinDriveMode driveMode) { bool supported; hrcheck(X::get()->_IsDriveModeSupported(driveMode, &supported)); return supported; }
	ProviderGpioPinDriveMode GetDriveMode() { ProviderGpioPinDriveMode value; hrcheck(X::get()->_GetDriveMode(&value)); return value; }
	void SetDriveMode(ProviderGpioPinDriveMode value) { hrcheck(X::get()->_SetDriveMode(value)); }
	void Write(ProviderGpioPinValue value) { hrcheck(X::get()->_Write(value)); }
	ProviderGpioPinValue Read() { ProviderGpioPinValue value; hrcheck(X::get()->_Read(&value)); return value; }
	IGpioPinProvider_adaptor() {}
};
template<typename X> struct adapt<IGpioPinProvider, X> : Windows::Devices::Gpio::Provider::IGpioPinProvider_adaptor<X> { typedef adapt IGpioPinProvider; };
template<typename X> struct IGpioPinProvider_unadaptor : X {
	STDMETHODIMP _add_ValueChanged(Foundation::TypedEventHandler<IGpioPinProvider*, GpioPinProviderValueChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->ValueChanged+=handler; }); }
	STDMETHODIMP _remove_ValueChanged(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->ValueChanged-=token; }); }
	STDMETHODIMP _get_DebounceTimeout(Foundation::TimeSpan *value) { return hrtry([&, this] { get_prop(value, DebounceTimeout); }); }
	STDMETHODIMP _put_DebounceTimeout(Foundation::TimeSpan value) { return hrtry([&, this] { put_prop(value, DebounceTimeout); }); }
	STDMETHODIMP _get_PinNumber(int *value) { return hrtry([&, this] { get_prop(value, PinNumber); }); }
	STDMETHODIMP _get_SharingMode(ProviderGpioSharingMode *value) { return hrtry([&, this] { get_prop(value, SharingMode); }); }
	STDMETHODIMP _IsDriveModeSupported(ProviderGpioPinDriveMode driveMode, bool *supported) { return hrtry([&, this] { *supported = X::get()->IsDriveModeSupported(driveMode); }); }
	STDMETHODIMP _GetDriveMode(ProviderGpioPinDriveMode *value) { return hrtry([&, this] { *value = X::get()->GetDriveMode(); }); }
	STDMETHODIMP _SetDriveMode(ProviderGpioPinDriveMode value) { return hrtry([&, this] { X::get()->SetDriveMode(value); }); }
	STDMETHODIMP _Write(ProviderGpioPinValue value) { return hrtry([&, this] { X::get()->Write(value); }); }
	STDMETHODIMP _Read(ProviderGpioPinValue *value) { return hrtry([&, this] { *value = X::get()->Read(); }); }
};
template<typename X> struct unadapt<IGpioPinProvider, X> : Windows::Devices::Gpio::Provider::IGpioPinProvider_unadaptor<X> {};
struct IGpioPinProvider : IGpioPinProvider_raw, generate<IGpioPinProvider> {};

// IGpioControllerProvider
struct IGpioControllerProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_PinCount(int *value) = 0;
	virtual STDMETHODIMP _OpenPinProvider(int pin, ProviderGpioSharingMode sharingMode, IGpioPinProvider* *gpioPinProvider) = 0;
};
template<typename X> struct IGpioControllerProvider_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IGpioControllerProvider_adaptor::PinCount)->_get_PinCount(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} PinCount;
	};
	ptr<IGpioPinProvider> OpenPinProvider(int pin, ProviderGpioSharingMode sharingMode) { IGpioPinProvider* gpioPinProvider; hrcheck(X::get()->_OpenPinProvider(pin, sharingMode, &gpioPinProvider)); return from_abi(gpioPinProvider); }
	IGpioControllerProvider_adaptor() {}
};
template<typename X> struct adapt<IGpioControllerProvider, X> : Windows::Devices::Gpio::Provider::IGpioControllerProvider_adaptor<X> { typedef adapt IGpioControllerProvider; };
template<typename X> struct IGpioControllerProvider_unadaptor : X {
	STDMETHODIMP _get_PinCount(int *value) { return hrtry([&, this] { get_prop(value, PinCount); }); }
	STDMETHODIMP _OpenPinProvider(int pin, ProviderGpioSharingMode sharingMode, IGpioPinProvider* *gpioPinProvider) { return hrtry([&, this] { *gpioPinProvider = to_abi(X::get()->OpenPinProvider(pin, sharingMode)); }); }
};
template<typename X> struct unadapt<IGpioControllerProvider, X> : Windows::Devices::Gpio::Provider::IGpioControllerProvider_unadaptor<X> {};
struct IGpioControllerProvider : IGpioControllerProvider_raw, generate<IGpioControllerProvider> {};

// IGpioProvider
struct IGpioProvider_raw : IInspectable {
	virtual STDMETHODIMP _GetControllers(Foundation::Collections::IVectorView<IGpioControllerProvider*>* *result) = 0;
};
template<typename X> struct IGpioProvider_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<IGpioControllerProvider>>> GetControllers() { Foundation::Collections::IVectorView<IGpioControllerProvider*>* result; hrcheck(X::get()->_GetControllers(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IGpioProvider, X> : Windows::Devices::Gpio::Provider::IGpioProvider_adaptor<X> { typedef adapt IGpioProvider; };
template<typename X> struct IGpioProvider_unadaptor : X {
	STDMETHODIMP _GetControllers(Foundation::Collections::IVectorView<IGpioControllerProvider*>* *result) { return hrtry([&, this] { *result = to_abi(X::get()->GetControllers()); }); }
};
template<typename X> struct unadapt<IGpioProvider, X> : Windows::Devices::Gpio::Provider::IGpioProvider_unadaptor<X> {};
struct IGpioProvider : IGpioProvider_raw, generate<IGpioProvider> {};
}}}}
} // namespace iso_winrt
