#pragma once
// generated by isopod tools
// namespaces:
// Windows.Foundation

#include "Windows.Foundation.0.h"
#include "Windows.Foundation.Collections.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Foundation::IClosable> : overridable_type<> {};
template<> struct def<Windows::Foundation::PropertyType> : enum_type<int> {};
template<> struct def<Windows::Foundation::Point> : value_type<float, float> {};
template<> struct def<Windows::Foundation::Size> : value_type<float, float> {};
template<> struct def<Windows::Foundation::Rect> : value_type<float, float, float, float> {};
template<> struct def<Windows::Foundation::DateTime> : value_type<__int64> {};
template<> struct def<Windows::Foundation::TimeSpan> : value_type<__int64> {};
template<> struct def<Windows::Foundation::IPropertyValue> : overridable_type<> {};
template<> struct def<Windows::Foundation::IPropertyValueStatics> : interface_type<> {};
template<> struct def<Windows::Foundation::PropertyValue> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Foundation::IStringable> : overridable_type<> {};
template<> struct def<Windows::Foundation::AsyncStatus> : enum_type<int> {};
template<> struct def<Windows::Foundation::AsyncActionCompletedHandler> : delegate_type {};
template<> struct def<Windows::Foundation::IDeferral> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Foundation::DeferralCompletedHandler> : delegate_type {};
template<> struct def<Windows::Foundation::IDeferralFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::Deferral> : class_type<Platform::Object, Windows::Foundation::IDeferral>, custom_activators {};
template<> struct def<Windows::Foundation::EventRegistrationToken> : value_type<__int64> {};
template<> struct def<Windows::Foundation::HResult> : value_type<int> {};
template<> struct def<Windows::Foundation::IAsyncInfo> : overridable_type<> {};
template<> struct def<Windows::Foundation::IAsyncAction> : overridable_type<Windows::Foundation::IAsyncInfo> {};
template<typename TResult, typename TProgress> struct def<Windows::Foundation::AsyncOperationWithProgressCompletedHandler<TResult, TProgress> > : delegate_type {};
template<typename TResult, typename TProgress> struct def<Windows::Foundation::IAsyncOperationWithProgress<TResult, TProgress> > : overridable_type<Windows::Foundation::IAsyncInfo> {};
template<typename TResult> struct def<Windows::Foundation::AsyncOperationCompletedHandler<TResult> > : delegate_type {};
template<typename TResult> struct def<Windows::Foundation::IAsyncOperation<TResult> > : overridable_type<Windows::Foundation::IAsyncInfo> {};
template<typename TProgress> struct def<Windows::Foundation::AsyncActionWithProgressCompletedHandler<TProgress> > : delegate_type {};
template<typename TProgress> struct def<Windows::Foundation::IAsyncActionWithProgress<TProgress> > : overridable_type<Windows::Foundation::IAsyncInfo> {};
template<typename TResult, typename TProgress> struct def<Windows::Foundation::AsyncOperationProgressHandler<TResult, TProgress> > : delegate_type {};
template<typename TProgress> struct def<Windows::Foundation::AsyncActionProgressHandler<TProgress> > : delegate_type {};
template<typename T> struct def<Windows::Foundation::IReference<T> > : overridable_type<Windows::Foundation::IPropertyValue> {};
template<typename T> struct def<Windows::Foundation::IReferenceArray<T> > : overridable_type<Windows::Foundation::IPropertyValue> {};
template<typename TSender, typename TResult> struct def<Windows::Foundation::TypedEventHandler<TSender, TResult> > : delegate_type {};
template<typename T> struct def<Windows::Foundation::EventHandler<T> > : delegate_type {};
template<> struct def<Windows::Foundation::FoundationContract> : value_type<> {};
template<> struct def<Windows::Foundation::IMemoryBufferReference> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Foundation::IMemoryBuffer> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Foundation::IMemoryBufferFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::MemoryBuffer> : class_type<Platform::Object, Windows::Foundation::IMemoryBuffer>, custom_activators {};
template<> struct def<Windows::Foundation::UniversalApiContract> : value_type<> {};
template<> struct def<Windows::Foundation::IUriRuntimeClass> : interface_type<> {};
template<> struct def<Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::IWwwFormUrlDecoderEntry> : overridable_type<> {};
template<> struct def<Windows::Foundation::IWwwFormUrlDecoderRuntimeClass> : interface_type<Windows::Foundation::Collections::IIterable<ptr<Windows::Foundation::IWwwFormUrlDecoderEntry>>, Windows::Foundation::Collections::IVectorView<ptr<Windows::Foundation::IWwwFormUrlDecoderEntry>>> {};
template<> struct def<Windows::Foundation::WwwFormUrlDecoder> : class_type<Platform::Object, Windows::Foundation::IWwwFormUrlDecoderRuntimeClass>, custom_activators {};
template<> struct def<Windows::Foundation::IUriEscapeStatics> : interface_type<> {};
template<> struct def<Windows::Foundation::IUriRuntimeClassFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri> : interface_type<> {};
template<> struct def<Windows::Foundation::Uri> : class_type<Platform::Object, Windows::Foundation::IUriRuntimeClass, Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri, Windows::Foundation::IStringable>, custom_activators {};
template<> struct def<Windows::Foundation::WwwFormUrlDecoderEntry> : class_type<Platform::Object, Windows::Foundation::IWwwFormUrlDecoderEntry> {};
template<> struct def<Windows::Foundation::IGetActivationFactory> : overridable_type<> {};

// uuids

template<> struct uuid<Windows::Foundation::IClosable> { define_guid(0x30D5A829, 0x7FA4, 0x4026, 0x83, 0xBB, 0xD7, 0x5B, 0xAE, 0x4E, 0xA9, 0x9E);};
template<> struct uuid<Windows::Foundation::IPropertyValue> { define_guid(0x4BD682DD, 0x7554, 0x40E9, 0x9A, 0x9B, 0x82, 0x65, 0x4E, 0xDE, 0x7E, 0x62);};
template<> struct uuid<Windows::Foundation::IPropertyValueStatics> { define_guid(0x629BDBC8, 0xD932, 0x4FF4, 0x96, 0xB9, 0x8D, 0x96, 0xC5, 0xC1, 0xE8, 0x58);};
template<> struct uuid<Windows::Foundation::IStringable> { define_guid(0x96369F54, 0x8EB6, 0x48F0, 0xAB, 0xCE, 0xC1, 0xB2, 0x11, 0xE6, 0x27, 0xC3);};
template<> struct uuid<Windows::Foundation::AsyncActionCompletedHandler> { define_guid(0xA4ED5C81, 0x76C9, 0x40BD, 0x8B, 0xE6, 0xB1, 0xD9, 0xF, 0xB2, 0xA, 0xE7);};
template<> struct uuid<Windows::Foundation::IDeferral> { define_guid(0xD6269732, 0x3B7F, 0x46A7, 0xB4, 0xB, 0x4F, 0xDC, 0xA2, 0xA2, 0xC6, 0x93);};
template<> struct uuid<Windows::Foundation::DeferralCompletedHandler> { define_guid(0xED32A372, 0xF3C8, 0x4FAA, 0x9C, 0xFB, 0x47, 0x1, 0x48, 0xDA, 0x38, 0x88);};
template<> struct uuid<Windows::Foundation::IDeferralFactory> { define_guid(0x65A1ECC5, 0x3FB5, 0x4832, 0x8C, 0xA9, 0xF0, 0x61, 0xB2, 0x81, 0xD1, 0x3A);};
template<> struct uuid<Windows::Foundation::IAsyncInfo> { define_guid(0x36, 0x0, 0x0, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46);};
template<> struct uuid<Windows::Foundation::IAsyncAction> { define_guid(0x5A648006, 0x843A, 0x4DA9, 0x86, 0x5B, 0x9D, 0x26, 0xE5, 0xDF, 0xAD, 0x7B);};
template<typename TResult, typename TProgress> struct uuid_gen<Windows::Foundation::AsyncOperationWithProgressCompletedHandler<TResult, TProgress> > { define_guid(0xE85DF41D, 0x6AA7, 0x46E3, 0xA8, 0xE2, 0xF0, 0x9, 0xD8, 0x40, 0xC6, 0x27);};
template<typename TResult, typename TProgress> struct uuid_gen<Windows::Foundation::IAsyncOperationWithProgress<TResult, TProgress> > { define_guid(0xB5D036D7, 0xE297, 0x498F, 0xBA, 0x60, 0x2, 0x89, 0xE7, 0x6E, 0x23, 0xDD);};
template<typename TResult> struct uuid_gen<Windows::Foundation::AsyncOperationCompletedHandler<TResult> > { define_guid(0xFCDCF02C, 0xE5D8, 0x4478, 0x91, 0x5A, 0x4D, 0x90, 0xB7, 0x4B, 0x83, 0xA5);};
template<typename TResult> struct uuid_gen<Windows::Foundation::IAsyncOperation<TResult> > { define_guid(0x9FC2B0BB, 0xE446, 0x44E2, 0xAA, 0x61, 0x9C, 0xAB, 0x8F, 0x63, 0x6A, 0xF2);};
template<typename TProgress> struct uuid_gen<Windows::Foundation::AsyncActionWithProgressCompletedHandler<TProgress> > { define_guid(0x9C029F91, 0xCC84, 0x44FD, 0xAC, 0x26, 0xA, 0x6C, 0x4E, 0x55, 0x52, 0x81);};
template<typename TProgress> struct uuid_gen<Windows::Foundation::IAsyncActionWithProgress<TProgress> > { define_guid(0x1F6DB258, 0xE803, 0x48A1, 0x95, 0x46, 0xEB, 0x73, 0x53, 0x39, 0x88, 0x84);};
template<typename TResult, typename TProgress> struct uuid_gen<Windows::Foundation::AsyncOperationProgressHandler<TResult, TProgress> > { define_guid(0x55690902, 0xAAB, 0x421A, 0x87, 0x78, 0xF8, 0xCE, 0x50, 0x26, 0xD7, 0x58);};
template<typename TProgress> struct uuid_gen<Windows::Foundation::AsyncActionProgressHandler<TProgress> > { define_guid(0x6D844858, 0xCFF, 0x4590, 0xAE, 0x89, 0x95, 0xA5, 0xA5, 0xC8, 0xB4, 0xB8);};
template<typename T> struct uuid_gen<Windows::Foundation::IReference<T> > { define_guid(0x61C17706, 0x2D65, 0x11E0, 0x9A, 0xE8, 0xD4, 0x85, 0x64, 0x1, 0x54, 0x72);};
template<typename T> struct uuid_gen<Windows::Foundation::IReferenceArray<T> > { define_guid(0x61C17707, 0x2D65, 0x11E0, 0x9A, 0xE8, 0xD4, 0x85, 0x64, 0x1, 0x54, 0x72);};
template<typename TSender, typename TResult> struct uuid_gen<Windows::Foundation::TypedEventHandler<TSender, TResult> > { define_guid(0x9DE1C534, 0x6AE1, 0x11E0, 0x84, 0xE1, 0x18, 0xA9, 0x5, 0xBC, 0xC5, 0x3F);};
template<typename T> struct uuid_gen<Windows::Foundation::EventHandler<T> > { define_guid(0x9DE1C535, 0x6AE1, 0x11E0, 0x84, 0xE1, 0x18, 0xA9, 0x5, 0xBC, 0xC5, 0x3F);};
template<> struct uuid<Windows::Foundation::IMemoryBufferReference> { define_guid(0xFBC4DD29, 0x245B, 0x11E4, 0xAF, 0x98, 0x68, 0x94, 0x23, 0x26, 0xC, 0xF8);};
template<> struct uuid<Windows::Foundation::IMemoryBuffer> { define_guid(0xFBC4DD2A, 0x245B, 0x11E4, 0xAF, 0x98, 0x68, 0x94, 0x23, 0x26, 0xC, 0xF8);};
template<> struct uuid<Windows::Foundation::IMemoryBufferFactory> { define_guid(0xFBC4DD2B, 0x245B, 0x11E4, 0xAF, 0x98, 0x68, 0x94, 0x23, 0x26, 0xC, 0xF8);};
template<> struct uuid<Windows::Foundation::IUriRuntimeClass> { define_guid(0x9E365E57, 0x48B2, 0x4160, 0x95, 0x6F, 0xC7, 0x38, 0x51, 0x20, 0xBB, 0xFC);};
template<> struct uuid<Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory> { define_guid(0x5B8C6B3D, 0x24AE, 0x41B5, 0xA1, 0xBF, 0xF0, 0xC3, 0xD5, 0x44, 0x84, 0x5B);};
template<> struct uuid<Windows::Foundation::IWwwFormUrlDecoderEntry> { define_guid(0x125E7431, 0xF678, 0x4E8E, 0xB6, 0x70, 0x20, 0xA9, 0xB0, 0x6C, 0x51, 0x2D);};
template<> struct uuid<Windows::Foundation::IWwwFormUrlDecoderRuntimeClass> { define_guid(0xD45A0451, 0xF225, 0x4542, 0x92, 0x96, 0xE, 0x1D, 0xF5, 0xD2, 0x54, 0xDF);};
template<> struct uuid<Windows::Foundation::IUriEscapeStatics> { define_guid(0xC1D432BA, 0xC824, 0x4452, 0xA7, 0xFD, 0x51, 0x2B, 0xC3, 0xBB, 0xE9, 0xA1);};
template<> struct uuid<Windows::Foundation::IUriRuntimeClassFactory> { define_guid(0x44A9796F, 0x723E, 0x4FDF, 0xA2, 0x18, 0x3, 0x3E, 0x75, 0xB0, 0xC0, 0x84);};
template<> struct uuid<Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri> { define_guid(0x758D9661, 0x221C, 0x480F, 0xA3, 0x39, 0x50, 0x65, 0x66, 0x73, 0xF4, 0x6F);};
template<> struct uuid<Windows::Foundation::IGetActivationFactory> { define_guid(0x4EDB8EE2, 0x96DD, 0x49A7, 0x94, 0xF7, 0x46, 0x7, 0xDD, 0xAB, 0x8E, 0x3C);};

// types

namespace Windows { namespace Foundation {

// IClosable
struct IClosable_raw : IInspectable {
	virtual STDMETHODIMP _Close() = 0;
};
template<typename X> struct IClosable_adaptor : X {
	void Close() { hrcheck(X::get()->_Close()); }
};
template<typename X> struct adapt<IClosable, X> : Windows::Foundation::IClosable_adaptor<X> { typedef adapt IClosable; };
template<typename X> struct IClosable_unadaptor : X {
	STDMETHODIMP _Close() { return hrtry([&, this] { X::get()->Close(); }); }
};
template<typename X> struct unadapt<IClosable, X> : Windows::Foundation::IClosable_unadaptor<X> {};
struct IClosable : IClosable_raw, generate<IClosable> {};

// IPropertyValue
struct IPropertyValue_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(PropertyType *value) = 0;
	virtual STDMETHODIMP _get_IsNumericScalar(bool *value) = 0;
	virtual STDMETHODIMP _GetUInt8(unsigned char *value) = 0;
	virtual STDMETHODIMP _GetInt16(short *value) = 0;
	virtual STDMETHODIMP _GetUInt16(unsigned short *value) = 0;
	virtual STDMETHODIMP _GetInt32(int *value) = 0;
	virtual STDMETHODIMP _GetUInt32(unsigned *value) = 0;
	virtual STDMETHODIMP _GetInt64(__int64 *value) = 0;
	virtual STDMETHODIMP _GetUInt64(unsigned __int64 *value) = 0;
	virtual STDMETHODIMP _GetSingle(float *value) = 0;
	virtual STDMETHODIMP _GetDouble(double *value) = 0;
	virtual STDMETHODIMP _GetChar16(char *value) = 0;
	virtual STDMETHODIMP _GetBoolean(bool *value) = 0;
	virtual STDMETHODIMP _GetString(HSTRING *value) = 0;
	virtual STDMETHODIMP _GetGuid(Platform::Guid *value) = 0;
	virtual STDMETHODIMP _GetDateTime(DateTime *value) = 0;
	virtual STDMETHODIMP _GetTimeSpan(TimeSpan *value) = 0;
	virtual STDMETHODIMP _GetPoint(Point *value) = 0;
	virtual STDMETHODIMP _GetSize(Size *value) = 0;
	virtual STDMETHODIMP _GetRect(Rect *value) = 0;
	virtual STDMETHODIMP _GetUInt8Array(unsigned *valueSize, unsigned char **value) = 0;
	virtual STDMETHODIMP _GetInt16Array(unsigned *valueSize, short **value) = 0;
	virtual STDMETHODIMP _GetUInt16Array(unsigned *valueSize, unsigned short **value) = 0;
	virtual STDMETHODIMP _GetInt32Array(unsigned *valueSize, int **value) = 0;
	virtual STDMETHODIMP _GetUInt32Array(unsigned *valueSize, unsigned **value) = 0;
	virtual STDMETHODIMP _GetInt64Array(unsigned *valueSize, __int64 **value) = 0;
	virtual STDMETHODIMP _GetUInt64Array(unsigned *valueSize, unsigned __int64 **value) = 0;
	virtual STDMETHODIMP _GetSingleArray(unsigned *valueSize, float **value) = 0;
	virtual STDMETHODIMP _GetDoubleArray(unsigned *valueSize, double **value) = 0;
	virtual STDMETHODIMP _GetChar16Array(unsigned *valueSize, char **value) = 0;
	virtual STDMETHODIMP _GetBooleanArray(unsigned *valueSize, bool **value) = 0;
	virtual STDMETHODIMP _GetStringArray(unsigned *valueSize, HSTRING **value) = 0;
	virtual STDMETHODIMP _GetInspectableArray(unsigned *valueSize, IInspectable* **value) = 0;
	virtual STDMETHODIMP _GetGuidArray(unsigned *valueSize, Platform::Guid **value) = 0;
	virtual STDMETHODIMP _GetDateTimeArray(unsigned *valueSize, DateTime **value) = 0;
	virtual STDMETHODIMP _GetTimeSpanArray(unsigned *valueSize, TimeSpan **value) = 0;
	virtual STDMETHODIMP _GetPointArray(unsigned *valueSize, Point **value) = 0;
	virtual STDMETHODIMP _GetSizeArray(unsigned *valueSize, Size **value) = 0;
	virtual STDMETHODIMP _GetRectArray(unsigned *valueSize, Rect **value) = 0;
};
template<typename X> struct IPropertyValue_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPropertyValue_adaptor::IsNumericScalar)->_get_IsNumericScalar(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsNumericScalar;
		struct : property {
			PropertyType get() { PropertyType value; hrcheck(enc(&IPropertyValue_adaptor::Type)->_get_Type(&value)); return value; }
			PropertyType operator()() { return get(); }
			operator PropertyType () { return get(); }
		} Type;
	};
	unsigned char GetUInt8() { unsigned char value; hrcheck(X::get()->_GetUInt8(&value)); return value; }
	short GetInt16() { short value; hrcheck(X::get()->_GetInt16(&value)); return value; }
	unsigned short GetUInt16() { unsigned short value; hrcheck(X::get()->_GetUInt16(&value)); return value; }
	int GetInt32() { int value; hrcheck(X::get()->_GetInt32(&value)); return value; }
	unsigned GetUInt32() { unsigned value; hrcheck(X::get()->_GetUInt32(&value)); return value; }
	__int64 GetInt64() { __int64 value; hrcheck(X::get()->_GetInt64(&value)); return value; }
	unsigned __int64 GetUInt64() { unsigned __int64 value; hrcheck(X::get()->_GetUInt64(&value)); return value; }
	float GetSingle() { float value; hrcheck(X::get()->_GetSingle(&value)); return value; }
	double GetDouble() { double value; hrcheck(X::get()->_GetDouble(&value)); return value; }
	char GetChar16() { char value; hrcheck(X::get()->_GetChar16(&value)); return value; }
	bool GetBoolean() { bool value; hrcheck(X::get()->_GetBoolean(&value)); return value; }
	hstring GetString() { HSTRING value; hrcheck(X::get()->_GetString(&value)); return from_abi(value); }
	Platform::Guid GetGuid() { Platform::Guid value; hrcheck(X::get()->_GetGuid(&value)); return value; }
	DateTime GetDateTime() { DateTime value; hrcheck(X::get()->_GetDateTime(&value)); return value; }
	TimeSpan GetTimeSpan() { TimeSpan value; hrcheck(X::get()->_GetTimeSpan(&value)); return value; }
	Point GetPoint() { Point value; hrcheck(X::get()->_GetPoint(&value)); return value; }
	Size GetSize() { Size value; hrcheck(X::get()->_GetSize(&value)); return value; }
	Rect GetRect() { Rect value; hrcheck(X::get()->_GetRect(&value)); return value; }
	szarray<unsigned char> GetUInt8Array() { szarray<unsigned char> value; hrcheck(X::get()->_GetUInt8Array(&value.size, &value.p)); return value; }
	szarray<short> GetInt16Array() { szarray<short> value; hrcheck(X::get()->_GetInt16Array(&value.size, &value.p)); return value; }
	szarray<unsigned short> GetUInt16Array() { szarray<unsigned short> value; hrcheck(X::get()->_GetUInt16Array(&value.size, &value.p)); return value; }
	szarray<int> GetInt32Array() { szarray<int> value; hrcheck(X::get()->_GetInt32Array(&value.size, &value.p)); return value; }
	szarray<unsigned> GetUInt32Array() { szarray<unsigned> value; hrcheck(X::get()->_GetUInt32Array(&value.size, &value.p)); return value; }
	szarray<__int64> GetInt64Array() { szarray<__int64> value; hrcheck(X::get()->_GetInt64Array(&value.size, &value.p)); return value; }
	szarray<unsigned __int64> GetUInt64Array() { szarray<unsigned __int64> value; hrcheck(X::get()->_GetUInt64Array(&value.size, &value.p)); return value; }
	szarray<float> GetSingleArray() { szarray<float> value; hrcheck(X::get()->_GetSingleArray(&value.size, &value.p)); return value; }
	szarray<double> GetDoubleArray() { szarray<double> value; hrcheck(X::get()->_GetDoubleArray(&value.size, &value.p)); return value; }
	szarray<char> GetChar16Array() { szarray<char> value; hrcheck(X::get()->_GetChar16Array(&value.size, &value.p)); return value; }
	szarray<bool> GetBooleanArray() { szarray<bool> value; hrcheck(X::get()->_GetBooleanArray(&value.size, &value.p)); return value; }
	szarray<hstring> GetStringArray() { szarray<HSTRING> value; hrcheck(X::get()->_GetStringArray(&value.size, &value.p)); return from_abi(value); }
	szarray<object> GetInspectableArray() { szarray<IInspectable*> value; hrcheck(X::get()->_GetInspectableArray(&value.size, &value.p)); return from_abi(value); }
	szarray<Platform::Guid> GetGuidArray() { szarray<Platform::Guid> value; hrcheck(X::get()->_GetGuidArray(&value.size, &value.p)); return value; }
	szarray<DateTime> GetDateTimeArray() { szarray<DateTime> value; hrcheck(X::get()->_GetDateTimeArray(&value.size, &value.p)); return value; }
	szarray<TimeSpan> GetTimeSpanArray() { szarray<TimeSpan> value; hrcheck(X::get()->_GetTimeSpanArray(&value.size, &value.p)); return value; }
	szarray<Point> GetPointArray() { szarray<Point> value; hrcheck(X::get()->_GetPointArray(&value.size, &value.p)); return value; }
	szarray<Size> GetSizeArray() { szarray<Size> value; hrcheck(X::get()->_GetSizeArray(&value.size, &value.p)); return value; }
	szarray<Rect> GetRectArray() { szarray<Rect> value; hrcheck(X::get()->_GetRectArray(&value.size, &value.p)); return value; }
	IPropertyValue_adaptor() {}
};
template<typename X> struct adapt<IPropertyValue, X> : Windows::Foundation::IPropertyValue_adaptor<X> { typedef adapt IPropertyValue; };
template<typename X> struct IPropertyValue_unadaptor : X {
	STDMETHODIMP _get_Type(PropertyType *value) { return hrtry([&, this] { get_prop(value, Type); }); }
	STDMETHODIMP _get_IsNumericScalar(bool *value) { return hrtry([&, this] { get_prop(value, IsNumericScalar); }); }
	STDMETHODIMP _GetUInt8(unsigned char *value) { return hrtry([&, this] { *value = X::get()->GetUInt8(); }); }
	STDMETHODIMP _GetInt16(short *value) { return hrtry([&, this] { *value = X::get()->GetInt16(); }); }
	STDMETHODIMP _GetUInt16(unsigned short *value) { return hrtry([&, this] { *value = X::get()->GetUInt16(); }); }
	STDMETHODIMP _GetInt32(int *value) { return hrtry([&, this] { *value = X::get()->GetInt32(); }); }
	STDMETHODIMP _GetUInt32(unsigned *value) { return hrtry([&, this] { *value = X::get()->GetUInt32(); }); }
	STDMETHODIMP _GetInt64(__int64 *value) { return hrtry([&, this] { *value = X::get()->GetInt64(); }); }
	STDMETHODIMP _GetUInt64(unsigned __int64 *value) { return hrtry([&, this] { *value = X::get()->GetUInt64(); }); }
	STDMETHODIMP _GetSingle(float *value) { return hrtry([&, this] { *value = X::get()->GetSingle(); }); }
	STDMETHODIMP _GetDouble(double *value) { return hrtry([&, this] { *value = X::get()->GetDouble(); }); }
	STDMETHODIMP _GetChar16(char *value) { return hrtry([&, this] { *value = X::get()->GetChar16(); }); }
	STDMETHODIMP _GetBoolean(bool *value) { return hrtry([&, this] { *value = X::get()->GetBoolean(); }); }
	STDMETHODIMP _GetString(HSTRING *value) { return hrtry([&, this] { *value = to_abi(X::get()->GetString()); }); }
	STDMETHODIMP _GetGuid(Platform::Guid *value) { return hrtry([&, this] { *value = X::get()->GetGuid(); }); }
	STDMETHODIMP _GetDateTime(DateTime *value) { return hrtry([&, this] { *value = X::get()->GetDateTime(); }); }
	STDMETHODIMP _GetTimeSpan(TimeSpan *value) { return hrtry([&, this] { *value = X::get()->GetTimeSpan(); }); }
	STDMETHODIMP _GetPoint(Point *value) { return hrtry([&, this] { *value = X::get()->GetPoint(); }); }
	STDMETHODIMP _GetSize(Size *value) { return hrtry([&, this] { *value = X::get()->GetSize(); }); }
	STDMETHODIMP _GetRect(Rect *value) { return hrtry([&, this] { *value = X::get()->GetRect(); }); }
	STDMETHODIMP _GetUInt8Array(unsigned *valueSize, unsigned char **value) { return hrtry([&, this] { *value = X::get()->GetUInt8Array().detach(valueSize); }); }
	STDMETHODIMP _GetInt16Array(unsigned *valueSize, short **value) { return hrtry([&, this] { *value = X::get()->GetInt16Array().detach(valueSize); }); }
	STDMETHODIMP _GetUInt16Array(unsigned *valueSize, unsigned short **value) { return hrtry([&, this] { *value = X::get()->GetUInt16Array().detach(valueSize); }); }
	STDMETHODIMP _GetInt32Array(unsigned *valueSize, int **value) { return hrtry([&, this] { *value = X::get()->GetInt32Array().detach(valueSize); }); }
	STDMETHODIMP _GetUInt32Array(unsigned *valueSize, unsigned **value) { return hrtry([&, this] { *value = X::get()->GetUInt32Array().detach(valueSize); }); }
	STDMETHODIMP _GetInt64Array(unsigned *valueSize, __int64 **value) { return hrtry([&, this] { *value = X::get()->GetInt64Array().detach(valueSize); }); }
	STDMETHODIMP _GetUInt64Array(unsigned *valueSize, unsigned __int64 **value) { return hrtry([&, this] { *value = X::get()->GetUInt64Array().detach(valueSize); }); }
	STDMETHODIMP _GetSingleArray(unsigned *valueSize, float **value) { return hrtry([&, this] { *value = X::get()->GetSingleArray().detach(valueSize); }); }
	STDMETHODIMP _GetDoubleArray(unsigned *valueSize, double **value) { return hrtry([&, this] { *value = X::get()->GetDoubleArray().detach(valueSize); }); }
	STDMETHODIMP _GetChar16Array(unsigned *valueSize, char **value) { return hrtry([&, this] { *value = X::get()->GetChar16Array().detach(valueSize); }); }
	STDMETHODIMP _GetBooleanArray(unsigned *valueSize, bool **value) { return hrtry([&, this] { *value = X::get()->GetBooleanArray().detach(valueSize); }); }
	STDMETHODIMP _GetStringArray(unsigned *valueSize, HSTRING **value) { return hrtry([&, this] { *value = to_abi(X::get()->GetStringArray().detach(valueSize)); }); }
	STDMETHODIMP _GetInspectableArray(unsigned *valueSize, IInspectable* **value) { return hrtry([&, this] { *value = to_abi(X::get()->GetInspectableArray().detach(valueSize)); }); }
	STDMETHODIMP _GetGuidArray(unsigned *valueSize, Platform::Guid **value) { return hrtry([&, this] { *value = X::get()->GetGuidArray().detach(valueSize); }); }
	STDMETHODIMP _GetDateTimeArray(unsigned *valueSize, DateTime **value) { return hrtry([&, this] { *value = X::get()->GetDateTimeArray().detach(valueSize); }); }
	STDMETHODIMP _GetTimeSpanArray(unsigned *valueSize, TimeSpan **value) { return hrtry([&, this] { *value = X::get()->GetTimeSpanArray().detach(valueSize); }); }
	STDMETHODIMP _GetPointArray(unsigned *valueSize, Point **value) { return hrtry([&, this] { *value = X::get()->GetPointArray().detach(valueSize); }); }
	STDMETHODIMP _GetSizeArray(unsigned *valueSize, Size **value) { return hrtry([&, this] { *value = X::get()->GetSizeArray().detach(valueSize); }); }
	STDMETHODIMP _GetRectArray(unsigned *valueSize, Rect **value) { return hrtry([&, this] { *value = X::get()->GetRectArray().detach(valueSize); }); }
};
template<typename X> struct unadapt<IPropertyValue, X> : Windows::Foundation::IPropertyValue_unadaptor<X> {};
struct IPropertyValue : IPropertyValue_raw, generate<IPropertyValue> {};

// IPropertyValueStatics
struct IPropertyValueStatics : IInspectable {
	virtual STDMETHODIMP _CreateEmpty(IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt8(unsigned char value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInt16(short value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt16(unsigned short value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInt32(int value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt32(unsigned value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInt64(__int64 value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt64(unsigned __int64 value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateSingle(float value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateDouble(double value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateChar16(char value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateBoolean(bool value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateString(HSTRING value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInspectable(IInspectable* value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateGuid(Platform::Guid value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateDateTime(DateTime value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateTimeSpan(TimeSpan value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreatePoint(Point value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateSize(Size value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateRect(Rect value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt8Array(unsigned valueSize, unsigned char *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInt16Array(unsigned valueSize, short *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt16Array(unsigned valueSize, unsigned short *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInt32Array(unsigned valueSize, int *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt32Array(unsigned valueSize, unsigned *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInt64Array(unsigned valueSize, __int64 *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateUInt64Array(unsigned valueSize, unsigned __int64 *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateSingleArray(unsigned valueSize, float *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateDoubleArray(unsigned valueSize, double *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateChar16Array(unsigned valueSize, char *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateBooleanArray(unsigned valueSize, bool *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateStringArray(unsigned valueSize, HSTRING *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateInspectableArray(unsigned valueSize, IInspectable* *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateGuidArray(unsigned valueSize, Platform::Guid *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateDateTimeArray(unsigned valueSize, DateTime *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateTimeSpanArray(unsigned valueSize, TimeSpan *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreatePointArray(unsigned valueSize, Point *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateSizeArray(unsigned valueSize, Size *value, IInspectable* *propertyValue);
	virtual STDMETHODIMP _CreateRectArray(unsigned valueSize, Rect *value, IInspectable* *propertyValue);
};

// PropertyValue
template<typename> struct PropertyValue_statics {
	static object CreateEmpty() { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateEmpty(&propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt8(unsigned char value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt8(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateInt16(short value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInt16(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt16(unsigned short value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt16(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateInt32(int value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInt32(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt32(unsigned value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt32(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateInt64(__int64 value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInt64(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt64(unsigned __int64 value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt64(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateSingle(float value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateSingle(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateDouble(double value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateDouble(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateChar16(char value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateChar16(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateBoolean(bool value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateBoolean(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateString(hstring_ref value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateString(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateInspectable(object_ref value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInspectable(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateGuid(const Platform::Guid& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateGuid(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateDateTime(const DateTime& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateDateTime(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateTimeSpan(const TimeSpan& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateTimeSpan(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreatePoint(const Point& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreatePoint(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateSize(const Size& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateSize(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateRect(const Rect& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateRect(value, &propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt8Array(const szarray<unsigned char>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt8Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateInt16Array(const szarray<short>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInt16Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt16Array(const szarray<unsigned short>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt16Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateInt32Array(const szarray<int>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInt32Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt32Array(const szarray<unsigned>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt32Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateInt64Array(const szarray<__int64>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInt64Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateUInt64Array(const szarray<unsigned __int64>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateUInt64Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateSingleArray(const szarray<float>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateSingleArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateDoubleArray(const szarray<double>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateDoubleArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateChar16Array(const szarray<char>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateChar16Array(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateBooleanArray(const szarray<bool>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateBooleanArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateStringArray(const szarray<hstring>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateStringArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateInspectableArray(const szarray<object>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateInspectableArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateGuidArray(const szarray<Platform::Guid>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateGuidArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateDateTimeArray(const szarray<DateTime>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateDateTimeArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateTimeSpanArray(const szarray<TimeSpan>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateTimeSpanArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreatePointArray(const szarray<Point>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreatePointArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateSizeArray(const szarray<Size>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateSizeArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
	static object CreateRectArray(const szarray<Rect>& value) { IInspectable* propertyValue; hrcheck(get_activation_factory<PropertyValue, IPropertyValueStatics>()->_CreateRectArray(value.size, to_abi(value.p), &propertyValue)); return from_abi(propertyValue); }
};

template<typename X> struct statics<PropertyValue, X> : X, Windows::Foundation::PropertyValue_statics<void> {
	typedef typename X::root_type PropertyValue;
};
struct PropertyValue : generate<PropertyValue> {};

// IStringable
struct IStringable_raw : IInspectable {
	virtual STDMETHODIMP _ToString(HSTRING *value) = 0;
};
template<typename X> struct IStringable_adaptor : X {
	hstring ToString() { HSTRING value; hrcheck(X::get()->_ToString(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IStringable, X> : Windows::Foundation::IStringable_adaptor<X> { typedef adapt IStringable; };
template<typename X> struct IStringable_unadaptor : X {
	STDMETHODIMP _ToString(HSTRING *value) { return hrtry([&, this] { *value = to_abi(X::get()->ToString()); }); }
};
template<typename X> struct unadapt<IStringable, X> : Windows::Foundation::IStringable_unadaptor<X> {};
struct IStringable : IStringable_raw, generate<IStringable> {};

// AsyncActionCompletedHandler
struct AsyncActionCompletedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IAsyncAction* asyncInfo, AsyncStatus asyncStatus) = 0;
};

// IDeferral
struct IDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IDeferral, X> : Windows::Foundation::IDeferral_adaptor<X> { typedef adapt IDeferral; };
struct IDeferral : IDeferral_raw, generate<IDeferral> {};

// DeferralCompletedHandler
struct DeferralCompletedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke() = 0;
};

// IDeferralFactory
struct IDeferralFactory : IInspectable {
	virtual STDMETHODIMP _Create(DeferralCompletedHandler* handler, Deferral* *result);
};

// Deferral
template<typename> struct Deferral_statics {
	static Deferral *activate(handler_ref<DeferralCompletedHandler> handler) { Deferral *result; hrcheck(get_activation_factory<Deferral, IDeferralFactory>()->_Create(handler, &result)); return result; }
};

template<typename X> struct statics<Deferral, X> : X, Windows::Foundation::Deferral_statics<void> {
	using Windows::Foundation::Deferral_statics<void>::activate;
	typedef typename X::root_type Deferral;
};
struct Deferral : generate<Deferral> {};

// IAsyncInfo
struct IAsyncInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *ret) = 0;
	virtual STDMETHODIMP _get_Status(AsyncStatus *ret) = 0;
	virtual STDMETHODIMP _get_ErrorCode(HResult *ret) = 0;
	virtual STDMETHODIMP _Cancel() = 0;
	virtual STDMETHODIMP _Close() = 0;
};
template<typename X> struct IAsyncInfo_adaptor : X {
	union {
		struct : property {
			HResult get() { HResult ret; hrcheck(enc(&IAsyncInfo_adaptor::ErrorCode)->_get_ErrorCode(&ret)); return ret; }
			HResult operator()() { return get(); }
			operator HResult () { return get(); }
		} ErrorCode;
		struct : property {
			unsigned get() { unsigned ret; hrcheck(enc(&IAsyncInfo_adaptor::Id)->_get_Id(&ret)); return ret; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			AsyncStatus get() { AsyncStatus ret; hrcheck(enc(&IAsyncInfo_adaptor::Status)->_get_Status(&ret)); return ret; }
			AsyncStatus operator()() { return get(); }
			operator AsyncStatus () { return get(); }
		} Status;
	};
	void Cancel() { hrcheck(X::get()->_Cancel()); }
	void Close() { hrcheck(X::get()->_Close()); }
	IAsyncInfo_adaptor() {}
};
template<typename X> struct adapt<IAsyncInfo, X> : Windows::Foundation::IAsyncInfo_adaptor<X> { typedef adapt IAsyncInfo; };
template<typename X> struct IAsyncInfo_unadaptor : X {
	STDMETHODIMP _get_Id(unsigned *ret) { return hrtry([&, this] { get_prop(ret, Id); }); }
	STDMETHODIMP _get_Status(AsyncStatus *ret) { return hrtry([&, this] { get_prop(ret, Status); }); }
	STDMETHODIMP _get_ErrorCode(HResult *ret) { return hrtry([&, this] { get_prop(ret, ErrorCode); }); }
	STDMETHODIMP _Cancel() { return hrtry([&, this] { X::get()->Cancel(); }); }
	STDMETHODIMP _Close() { return hrtry([&, this] { X::get()->Close(); }); }
};
template<typename X> struct unadapt<IAsyncInfo, X> : Windows::Foundation::IAsyncInfo_unadaptor<X> {};
struct IAsyncInfo : IAsyncInfo_raw, generate<IAsyncInfo> {};

// IAsyncAction
struct IAsyncAction_raw : IInspectable {
	virtual STDMETHODIMP _put_Completed(AsyncActionCompletedHandler* handler) = 0;
	virtual STDMETHODIMP _get_Completed(AsyncActionCompletedHandler* *handler) = 0;
	virtual STDMETHODIMP _GetResults() = 0;
};
template<typename X> struct IAsyncAction_adaptor : X {
	union {
		struct : property {
			ptr<AsyncActionCompletedHandler> get() { AsyncActionCompletedHandler* handler; hrcheck(enc(&IAsyncAction_adaptor::Completed)->_get_Completed(&handler)); return handler; }
			ptr<AsyncActionCompletedHandler> operator()() { return get(); }
			operator ptr<AsyncActionCompletedHandler> () { return get(); }
			void put(handler_ref<AsyncActionCompletedHandler> handler) { hrcheck(enc(&IAsyncAction_adaptor::Completed)->_put_Completed(handler)); }
			void operator=(handler_ref<AsyncActionCompletedHandler> handler) { put(move(handler)); }
			void operator()(handler_ref<AsyncActionCompletedHandler> handler) { put(move(handler)); }
		} Completed;
	};
	void GetResults() { hrcheck(X::get()->_GetResults()); }
	IAsyncAction_adaptor() {}
};
template<typename X> struct adapt<IAsyncAction, X> : Windows::Foundation::IAsyncAction_adaptor<X> { typedef adapt IAsyncAction; };
template<typename X> struct IAsyncAction_unadaptor : X {
	STDMETHODIMP _put_Completed(AsyncActionCompletedHandler* handler) { return hrtry([&, this] { put_prop(handler, Completed); }); }
	STDMETHODIMP _get_Completed(AsyncActionCompletedHandler* *handler) { return hrtry([&, this] { get_prop(handler, Completed); }); }
	STDMETHODIMP _GetResults() { return hrtry([&, this] { X::get()->GetResults(); }); }
};
template<typename X> struct unadapt<IAsyncAction, X> : Windows::Foundation::IAsyncAction_unadaptor<X> {};
struct IAsyncAction : IAsyncAction_raw, generate<IAsyncAction> {};

// AsyncOperationWithProgressCompletedHandler
template<typename TResult, typename TProgress> struct AsyncOperationWithProgressCompletedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IAsyncOperationWithProgress<TResult, TProgress>* asyncInfo, AsyncStatus asyncStatus) = 0;
};

// IAsyncOperationWithProgress
template<typename TResult, typename TProgress> struct IAsyncOperationWithProgress_raw : IInspectable {
	virtual STDMETHODIMP _put_Progress(AsyncOperationProgressHandler<TResult, TProgress>* handler) = 0;
	virtual STDMETHODIMP _get_Progress(AsyncOperationProgressHandler<TResult, TProgress>* *ret) = 0;
	virtual STDMETHODIMP _put_Completed(AsyncOperationWithProgressCompletedHandler<TResult, TProgress>* handler) = 0;
	virtual STDMETHODIMP _get_Completed(AsyncOperationWithProgressCompletedHandler<TResult, TProgress>* *ret) = 0;
	virtual STDMETHODIMP _GetResults(TResult *ret) = 0;
};
template<typename X, typename TResult, typename TProgress> struct IAsyncOperationWithProgress_adaptor : X {
	typedef to_abi_t<TResult> TResultR;
	typedef to_abi_t<TProgress> TProgressR;
	union {
		struct : property {
			ptr<AsyncOperationProgressHandler<TResult, TProgress>> get() { AsyncOperationProgressHandler<TResultR, TProgressR>* ret; hrcheck(enc(&IAsyncOperationWithProgress_adaptor::Progress)->_get_Progress(&ret)); return ret; }
			ptr<AsyncOperationProgressHandler<TResult, TProgress>> operator()() { return get(); }
			operator ptr<AsyncOperationProgressHandler<TResult, TProgress>> () { return get(); }
			void put(handler_ref<AsyncOperationProgressHandler<TResult, TProgress>> handler) { hrcheck(enc(&IAsyncOperationWithProgress_adaptor::Progress)->_put_Progress(to_abi(handler))); }
			void operator=(handler_ref<AsyncOperationProgressHandler<TResult, TProgress>> handler) { put(move(handler)); }
			void operator()(handler_ref<AsyncOperationProgressHandler<TResult, TProgress>> handler) { put(move(handler)); }
		} Progress;
		struct : property {
			ptr<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>> get() { AsyncOperationWithProgressCompletedHandler<TResultR, TProgressR>* ret; hrcheck(enc(&IAsyncOperationWithProgress_adaptor::Completed)->_get_Completed(&ret)); return ret; }
			ptr<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>> operator()() { return get(); }
			operator ptr<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>> () { return get(); }
			void put(handler_ref<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>> handler) { hrcheck(enc(&IAsyncOperationWithProgress_adaptor::Completed)->_put_Completed(to_abi(handler))); }
			void operator=(handler_ref<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>> handler) { put(move(handler)); }
			void operator()(handler_ref<AsyncOperationWithProgressCompletedHandler<TResult, TProgress>> handler) { put(move(handler)); }
		} Completed;
	};
	TResult GetResults() { TResultR ret; hrcheck(X::get()->_GetResults(&ret)); return ret; }
	IAsyncOperationWithProgress_adaptor() {}
};
template<typename X, typename TResult, typename TProgress> struct adapt<IAsyncOperationWithProgress<TResult, TProgress> , X> : Windows::Foundation::IAsyncOperationWithProgress_adaptor<X, TResult, TProgress> { typedef adapt IAsyncOperationWithProgress; };
template<typename X, typename TResult, typename TProgress> struct IAsyncOperationWithProgress_unadaptor : X {
	typedef to_abi_t<TResult> TResultR;
	typedef to_abi_t<TProgress> TProgressR;
	STDMETHODIMP _put_Progress(AsyncOperationProgressHandler<TResultR, TProgressR>* handler) { return hrtry([&, this] { put_prop(handler, Progress); }); }
	STDMETHODIMP _get_Progress(AsyncOperationProgressHandler<TResultR, TProgressR>* *ret) { return hrtry([&, this] { get_prop(ret, Progress); }); }
	STDMETHODIMP _put_Completed(AsyncOperationWithProgressCompletedHandler<TResultR, TProgressR>* handler) { return hrtry([&, this] { put_prop(handler, Completed); }); }
	STDMETHODIMP _get_Completed(AsyncOperationWithProgressCompletedHandler<TResultR, TProgressR>* *ret) { return hrtry([&, this] { get_prop(ret, Completed); }); }
	STDMETHODIMP _GetResults(TResultR *ret) { return hrtry([&, this] { *ret = X::get()->GetResults(); }); }
};
template<typename X, typename TResult, typename TProgress> struct unadapt<IAsyncOperationWithProgress<TResult, TProgress> , X> : Windows::Foundation::IAsyncOperationWithProgress_unadaptor<X, TResult, TProgress> {};
template<typename TResult, typename TProgress> struct IAsyncOperationWithProgress : IAsyncOperationWithProgress_raw<to_abi_t<TResult>, to_abi_t<TProgress>> , generate<IAsyncOperationWithProgress<TResult, TProgress> > {};

// AsyncOperationCompletedHandler
template<typename TResult> struct AsyncOperationCompletedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IAsyncOperation<TResult>* asyncInfo, AsyncStatus asyncStatus) = 0;
};

// IAsyncOperation
template<typename TResult> struct IAsyncOperation_raw : IInspectable {
	virtual STDMETHODIMP _put_Completed(AsyncOperationCompletedHandler<TResult>* handler) = 0;
	virtual STDMETHODIMP _get_Completed(AsyncOperationCompletedHandler<TResult>* *ret) = 0;
	virtual STDMETHODIMP _GetResults(TResult *ret) = 0;
};
template<typename X, typename TResult> struct IAsyncOperation_adaptor : X {
	typedef to_abi_t<TResult> TResultR;
	union {
		struct : property {
			ptr<AsyncOperationCompletedHandler<TResult>> get() { AsyncOperationCompletedHandler<TResultR>* ret; hrcheck(enc(&IAsyncOperation_adaptor::Completed)->_get_Completed(&ret)); return ret; }
			ptr<AsyncOperationCompletedHandler<TResult>> operator()() { return get(); }
			operator ptr<AsyncOperationCompletedHandler<TResult>> () { return get(); }
			void put(handler_ref<AsyncOperationCompletedHandler<TResult>> handler) { hrcheck(enc(&IAsyncOperation_adaptor::Completed)->_put_Completed(to_abi(handler))); }
			void operator=(handler_ref<AsyncOperationCompletedHandler<TResult>> handler) { put(move(handler)); }
			void operator()(handler_ref<AsyncOperationCompletedHandler<TResult>> handler) { put(move(handler)); }
		} Completed;
	};
	TResult GetResults() { TResultR ret; hrcheck(X::get()->_GetResults(&ret)); return ret; }
	IAsyncOperation_adaptor() {}
};
template<typename X, typename TResult> struct adapt<IAsyncOperation<TResult> , X> : Windows::Foundation::IAsyncOperation_adaptor<X, TResult> { typedef adapt IAsyncOperation; };
template<typename X, typename TResult> struct IAsyncOperation_unadaptor : X {
	typedef to_abi_t<TResult> TResultR;
	STDMETHODIMP _put_Completed(AsyncOperationCompletedHandler<TResultR>* handler) { return hrtry([&, this] { put_prop(handler, Completed); }); }
	STDMETHODIMP _get_Completed(AsyncOperationCompletedHandler<TResultR>* *ret) { return hrtry([&, this] { get_prop(ret, Completed); }); }
	STDMETHODIMP _GetResults(TResultR *ret) { return hrtry([&, this] { *ret = X::get()->GetResults(); }); }
};
template<typename X, typename TResult> struct unadapt<IAsyncOperation<TResult> , X> : Windows::Foundation::IAsyncOperation_unadaptor<X, TResult> {};
template<typename TResult> struct IAsyncOperation : IAsyncOperation_raw<to_abi_t<TResult>> , generate<IAsyncOperation<TResult> > {};

// AsyncActionWithProgressCompletedHandler
template<typename TProgress> struct AsyncActionWithProgressCompletedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IAsyncActionWithProgress<TProgress>* asyncInfo, AsyncStatus asyncStatus) = 0;
};

// IAsyncActionWithProgress
template<typename TProgress> struct IAsyncActionWithProgress_raw : IInspectable {
	virtual STDMETHODIMP _put_Progress(AsyncActionProgressHandler<TProgress>* handler) = 0;
	virtual STDMETHODIMP _get_Progress(AsyncActionProgressHandler<TProgress>* *ret) = 0;
	virtual STDMETHODIMP _put_Completed(AsyncActionWithProgressCompletedHandler<TProgress>* handler) = 0;
	virtual STDMETHODIMP _get_Completed(AsyncActionWithProgressCompletedHandler<TProgress>* *ret) = 0;
	virtual STDMETHODIMP _GetResults() = 0;
};
template<typename X, typename TProgress> struct IAsyncActionWithProgress_adaptor : X {
	typedef to_abi_t<TProgress> TProgressR;
	union {
		struct : property {
			ptr<AsyncActionProgressHandler<TProgress>> get() { AsyncActionProgressHandler<TProgressR>* ret; hrcheck(enc(&IAsyncActionWithProgress_adaptor::Progress)->_get_Progress(&ret)); return ret; }
			ptr<AsyncActionProgressHandler<TProgress>> operator()() { return get(); }
			operator ptr<AsyncActionProgressHandler<TProgress>> () { return get(); }
			void put(handler_ref<AsyncActionProgressHandler<TProgress>> handler) { hrcheck(enc(&IAsyncActionWithProgress_adaptor::Progress)->_put_Progress(to_abi(handler))); }
			void operator=(handler_ref<AsyncActionProgressHandler<TProgress>> handler) { put(move(handler)); }
			void operator()(handler_ref<AsyncActionProgressHandler<TProgress>> handler) { put(move(handler)); }
		} Progress;
		struct : property {
			ptr<AsyncActionWithProgressCompletedHandler<TProgress>> get() { AsyncActionWithProgressCompletedHandler<TProgressR>* ret; hrcheck(enc(&IAsyncActionWithProgress_adaptor::Completed)->_get_Completed(&ret)); return ret; }
			ptr<AsyncActionWithProgressCompletedHandler<TProgress>> operator()() { return get(); }
			operator ptr<AsyncActionWithProgressCompletedHandler<TProgress>> () { return get(); }
			void put(handler_ref<AsyncActionWithProgressCompletedHandler<TProgress>> handler) { hrcheck(enc(&IAsyncActionWithProgress_adaptor::Completed)->_put_Completed(to_abi(handler))); }
			void operator=(handler_ref<AsyncActionWithProgressCompletedHandler<TProgress>> handler) { put(move(handler)); }
			void operator()(handler_ref<AsyncActionWithProgressCompletedHandler<TProgress>> handler) { put(move(handler)); }
		} Completed;
	};
	void GetResults() { hrcheck(X::get()->_GetResults()); }
	IAsyncActionWithProgress_adaptor() {}
};
template<typename X, typename TProgress> struct adapt<IAsyncActionWithProgress<TProgress> , X> : Windows::Foundation::IAsyncActionWithProgress_adaptor<X, TProgress> { typedef adapt IAsyncActionWithProgress; };
template<typename X, typename TProgress> struct IAsyncActionWithProgress_unadaptor : X {
	typedef to_abi_t<TProgress> TProgressR;
	STDMETHODIMP _put_Progress(AsyncActionProgressHandler<TProgressR>* handler) { return hrtry([&, this] { put_prop(handler, Progress); }); }
	STDMETHODIMP _get_Progress(AsyncActionProgressHandler<TProgressR>* *ret) { return hrtry([&, this] { get_prop(ret, Progress); }); }
	STDMETHODIMP _put_Completed(AsyncActionWithProgressCompletedHandler<TProgressR>* handler) { return hrtry([&, this] { put_prop(handler, Completed); }); }
	STDMETHODIMP _get_Completed(AsyncActionWithProgressCompletedHandler<TProgressR>* *ret) { return hrtry([&, this] { get_prop(ret, Completed); }); }
	STDMETHODIMP _GetResults() { return hrtry([&, this] { X::get()->GetResults(); }); }
};
template<typename X, typename TProgress> struct unadapt<IAsyncActionWithProgress<TProgress> , X> : Windows::Foundation::IAsyncActionWithProgress_unadaptor<X, TProgress> {};
template<typename TProgress> struct IAsyncActionWithProgress : IAsyncActionWithProgress_raw<to_abi_t<TProgress>> , generate<IAsyncActionWithProgress<TProgress> > {};

// AsyncOperationProgressHandler
template<typename TResult, typename TProgress> struct AsyncOperationProgressHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IAsyncOperationWithProgress<TResult, TProgress>* asyncInfo, TProgress progressInfo) = 0;
};

// AsyncActionProgressHandler
template<typename TProgress> struct AsyncActionProgressHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IAsyncActionWithProgress<TProgress>* asyncInfo, TProgress progressInfo) = 0;
};

// IReference
template<typename T> struct IReference_raw : IInspectable {
	virtual STDMETHODIMP _get_Value(T *ret) = 0;
};
template<typename X, typename T> struct IReference_adaptor : X {
	typedef to_abi_t<T> TR;
	union {
		struct : property {
			T get() { TR ret; hrcheck(enc(&IReference_adaptor::Value)->_get_Value(&ret)); return ret; }
			T operator()() { return get(); }
			operator T () { return get(); }
		} Value;
	};
	IReference_adaptor() {}
};
template<typename X, typename T> struct adapt<IReference<T> , X> : Windows::Foundation::IReference_adaptor<X, T> { typedef adapt IReference; };
template<typename X, typename T> struct IReference_unadaptor : X {
	typedef to_abi_t<T> TR;
	STDMETHODIMP _get_Value(TR *ret) { return hrtry([&, this] { get_prop(ret, Value); }); }
};
template<typename X, typename T> struct unadapt<IReference<T> , X> : Windows::Foundation::IReference_unadaptor<X, T> {};
template<typename T> struct IReference : IReference_raw<to_abi_t<T>> , generate<IReference<T> > {};

// IReferenceArray
template<typename T> struct IReferenceArray_raw : IInspectable {
	virtual STDMETHODIMP _get_Value(unsigned *retSize, T **ret) = 0;
};
template<typename X, typename T> struct IReferenceArray_adaptor : X {
	typedef to_abi_t<T> TR;
	union {
		struct : property {
			szarray<T> get() { szarray<TR> ret; hrcheck(enc(&IReferenceArray_adaptor::Value)->_get_Value(&ret.size, &ret.p)); return ret; }
			szarray<T> operator()() { return get(); }
			operator szarray<T> () { return get(); }
		} Value;
	};
	IReferenceArray_adaptor() {}
};
template<typename X, typename T> struct adapt<IReferenceArray<T> , X> : Windows::Foundation::IReferenceArray_adaptor<X, T> { typedef adapt IReferenceArray; };
template<typename X, typename T> struct IReferenceArray_unadaptor : X {
	typedef to_abi_t<T> TR;
	STDMETHODIMP _get_Value(unsigned *retSize, TR **ret) { return hrtry([&, this] { get_prop(ret, Value); }); }
};
template<typename X, typename T> struct unadapt<IReferenceArray<T> , X> : Windows::Foundation::IReferenceArray_unadaptor<X, T> {};
template<typename T> struct IReferenceArray : IReferenceArray_raw<to_abi_t<T>> , generate<IReferenceArray<T> > {};

// TypedEventHandler
template<typename TSender, typename TResult> struct TypedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(TSender sender, TResult args) = 0;
};

// EventHandler
template<typename T> struct EventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IInspectable* sender, T args) = 0;
};

// IMemoryBufferReference
struct IMemoryBufferReference_raw : IInspectable {
	virtual STDMETHODIMP _get_Capacity(unsigned *value) = 0;
	virtual STDMETHODIMP _add_Closed(TypedEventHandler<IMemoryBufferReference*, IInspectable*>* handler, EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_Closed(EventRegistrationToken cookie) = 0;
};
template<typename X> struct IMemoryBufferReference_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMemoryBufferReference_adaptor::Capacity)->_get_Capacity(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Capacity;
		struct : property {
			EventRegistrationToken operator+=(handler_ref<TypedEventHandler<ptr<IMemoryBufferReference>, object>> handler) { EventRegistrationToken cookie; hrcheck(enc(&IMemoryBufferReference_adaptor::Closed)->_add_Closed(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const EventRegistrationToken& cookie) { hrcheck(enc(&IMemoryBufferReference_adaptor::Closed)->_remove_Closed(cookie)); }
		} Closed;
	};
	IMemoryBufferReference_adaptor() {}
};
template<typename X> struct adapt<IMemoryBufferReference, X> : Windows::Foundation::IMemoryBufferReference_adaptor<X> { typedef adapt IMemoryBufferReference; };
template<typename X> struct IMemoryBufferReference_unadaptor : X {
	STDMETHODIMP _get_Capacity(unsigned *value) { return hrtry([&, this] { get_prop(value, Capacity); }); }
	STDMETHODIMP _add_Closed(TypedEventHandler<IMemoryBufferReference*, IInspectable*>* handler, EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->Closed+=handler; }); }
	STDMETHODIMP _remove_Closed(EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->Closed-=cookie; }); }
};
template<typename X> struct unadapt<IMemoryBufferReference, X> : Windows::Foundation::IMemoryBufferReference_unadaptor<X> {};
struct IMemoryBufferReference : IMemoryBufferReference_raw, generate<IMemoryBufferReference> {};

// IMemoryBuffer
struct IMemoryBuffer_raw : IInspectable {
	virtual STDMETHODIMP _CreateReference(IMemoryBufferReference* *reference) = 0;
};
template<typename X> struct IMemoryBuffer_adaptor : X {
	ptr<IMemoryBufferReference> CreateReference() { IMemoryBufferReference* reference; hrcheck(X::get()->_CreateReference(&reference)); return from_abi(reference); }
};
template<typename X> struct adapt<IMemoryBuffer, X> : Windows::Foundation::IMemoryBuffer_adaptor<X> { typedef adapt IMemoryBuffer; };
template<typename X> struct IMemoryBuffer_unadaptor : X {
	STDMETHODIMP _CreateReference(IMemoryBufferReference* *reference) { return hrtry([&, this] { *reference = to_abi(X::get()->CreateReference()); }); }
};
template<typename X> struct unadapt<IMemoryBuffer, X> : Windows::Foundation::IMemoryBuffer_unadaptor<X> {};
struct IMemoryBuffer : IMemoryBuffer_raw, generate<IMemoryBuffer> {};

// IMemoryBufferFactory
struct IMemoryBufferFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned capacity, MemoryBuffer* *value);
};

// MemoryBuffer
template<typename> struct MemoryBuffer_statics {
	static MemoryBuffer *activate(unsigned capacity) { MemoryBuffer *value; hrcheck(get_activation_factory<MemoryBuffer, IMemoryBufferFactory>()->_Create(capacity, &value)); return value; }
};

template<typename X> struct statics<MemoryBuffer, X> : X, Windows::Foundation::MemoryBuffer_statics<void> {
	using Windows::Foundation::MemoryBuffer_statics<void>::activate;
	typedef typename X::root_type MemoryBuffer;
};
struct MemoryBuffer : generate<MemoryBuffer> {};

// IUriRuntimeClass
struct IUriRuntimeClass_raw : IInspectable {
	virtual STDMETHODIMP _get_AbsoluteUri(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayUri(HSTRING *value);
	virtual STDMETHODIMP _get_Domain(HSTRING *value);
	virtual STDMETHODIMP _get_Extension(HSTRING *value);
	virtual STDMETHODIMP _get_Fragment(HSTRING *value);
	virtual STDMETHODIMP _get_Host(HSTRING *value);
	virtual STDMETHODIMP _get_Password(HSTRING *value);
	virtual STDMETHODIMP _get_Path(HSTRING *value);
	virtual STDMETHODIMP _get_Query(HSTRING *value);
	virtual STDMETHODIMP _get_QueryParsed(WwwFormUrlDecoder* *ppWwwFormUrlDecoder);
	virtual STDMETHODIMP _get_RawUri(HSTRING *value);
	virtual STDMETHODIMP _get_SchemeName(HSTRING *value);
	virtual STDMETHODIMP _get_UserName(HSTRING *value);
	virtual STDMETHODIMP _get_Port(int *value);
	virtual STDMETHODIMP _get_Suspicious(bool *value);
	virtual STDMETHODIMP _Equals(Uri* pUri, bool *value);
	virtual STDMETHODIMP _CombineUri(HSTRING relativeUri, Uri* *instance);
};
template<typename X> struct IUriRuntimeClass_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::AbsoluteUri)->_get_AbsoluteUri(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AbsoluteUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::DisplayUri)->_get_DisplayUri(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::Domain)->_get_Domain(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Domain;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::Extension)->_get_Extension(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Extension;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::Fragment)->_get_Fragment(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Fragment;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::Host)->_get_Host(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Host;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::Password)->_get_Password(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Password;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::Path)->_get_Path(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Path;
		struct : property {
			int get() { int value; hrcheck(enc(&IUriRuntimeClass_adaptor::Port)->_get_Port(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Port;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::Query)->_get_Query(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Query;
		struct : property {
			ptr<WwwFormUrlDecoder> get() { WwwFormUrlDecoder* ppWwwFormUrlDecoder; hrcheck(enc(&IUriRuntimeClass_adaptor::QueryParsed)->_get_QueryParsed(&ppWwwFormUrlDecoder)); return from_abi(ppWwwFormUrlDecoder); }
			ptr<WwwFormUrlDecoder> operator()() { return get(); }
			operator ptr<WwwFormUrlDecoder> () { return get(); }
			ptr<WwwFormUrlDecoder> operator->() { return get(); }
		} QueryParsed;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::RawUri)->_get_RawUri(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RawUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::SchemeName)->_get_SchemeName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SchemeName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IUriRuntimeClass_adaptor::Suspicious)->_get_Suspicious(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Suspicious;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClass_adaptor::UserName)->_get_UserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserName;
	};
	bool Equals(pptr<Uri> pUri) { bool value; hrcheck(X::get()->_Equals(pUri, &value)); return value; }
	ptr<Uri> CombineUri(hstring_ref relativeUri) { Uri* instance; hrcheck(X::get()->_CombineUri(relativeUri, &instance)); return from_abi(instance); }
	IUriRuntimeClass_adaptor() {}
};
template<typename X> struct adapt<IUriRuntimeClass, X> : Windows::Foundation::IUriRuntimeClass_adaptor<X> { typedef adapt IUriRuntimeClass; };
struct IUriRuntimeClass : IUriRuntimeClass_raw, generate<IUriRuntimeClass> {};

// IWwwFormUrlDecoderRuntimeClassFactory
struct IWwwFormUrlDecoderRuntimeClassFactory : IInspectable {
	virtual STDMETHODIMP _CreateWwwFormUrlDecoder(HSTRING query, WwwFormUrlDecoder* *instance);
};

// IWwwFormUrlDecoderEntry
struct IWwwFormUrlDecoderEntry_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Value(HSTRING *value) = 0;
};
template<typename X> struct IWwwFormUrlDecoderEntry_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWwwFormUrlDecoderEntry_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWwwFormUrlDecoderEntry_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Value;
	};
	IWwwFormUrlDecoderEntry_adaptor() {}
};
template<typename X> struct adapt<IWwwFormUrlDecoderEntry, X> : Windows::Foundation::IWwwFormUrlDecoderEntry_adaptor<X> { typedef adapt IWwwFormUrlDecoderEntry; };
template<typename X> struct IWwwFormUrlDecoderEntry_unadaptor : X {
	STDMETHODIMP _get_Name(HSTRING *value) { return hrtry([&, this] { get_prop(value, Name); }); }
	STDMETHODIMP _get_Value(HSTRING *value) { return hrtry([&, this] { get_prop(value, Value); }); }
};
template<typename X> struct unadapt<IWwwFormUrlDecoderEntry, X> : Windows::Foundation::IWwwFormUrlDecoderEntry_unadaptor<X> {};
struct IWwwFormUrlDecoderEntry : IWwwFormUrlDecoderEntry_raw, generate<IWwwFormUrlDecoderEntry> {};

// IWwwFormUrlDecoderRuntimeClass
struct IWwwFormUrlDecoderRuntimeClass_raw : IInspectable {
	virtual STDMETHODIMP _GetFirstValueByName(HSTRING name, HSTRING *phstrValue);
};
template<typename X> struct IWwwFormUrlDecoderRuntimeClass_adaptor : X {
	hstring GetFirstValueByName(hstring_ref name) { HSTRING phstrValue; hrcheck(X::get()->_GetFirstValueByName(name, &phstrValue)); return from_abi(phstrValue); }
};
template<typename X> struct adapt<IWwwFormUrlDecoderRuntimeClass, X> : Windows::Foundation::IWwwFormUrlDecoderRuntimeClass_adaptor<X> { typedef adapt IWwwFormUrlDecoderRuntimeClass; };
struct IWwwFormUrlDecoderRuntimeClass : IWwwFormUrlDecoderRuntimeClass_raw, generate<IWwwFormUrlDecoderRuntimeClass> {};

// WwwFormUrlDecoder
template<typename> struct WwwFormUrlDecoder_statics {
	static WwwFormUrlDecoder *activate(hstring_ref query) { WwwFormUrlDecoder *instance; hrcheck(get_activation_factory<WwwFormUrlDecoder, IWwwFormUrlDecoderRuntimeClassFactory>()->_CreateWwwFormUrlDecoder(query, &instance)); return instance; }
};

template<typename X> struct statics<WwwFormUrlDecoder, X> : X, Windows::Foundation::WwwFormUrlDecoder_statics<void> {
	using Windows::Foundation::WwwFormUrlDecoder_statics<void>::activate;
	typedef typename X::root_type WwwFormUrlDecoder;
};
struct WwwFormUrlDecoder : generate<WwwFormUrlDecoder> {};

// IUriEscapeStatics
struct IUriEscapeStatics : IInspectable {
	virtual STDMETHODIMP _UnescapeComponent(HSTRING toUnescape, HSTRING *value);
	virtual STDMETHODIMP _EscapeComponent(HSTRING toEscape, HSTRING *value);
};

// IUriRuntimeClassFactory
struct IUriRuntimeClassFactory : IInspectable {
	virtual STDMETHODIMP _CreateUri(HSTRING uri, Uri* *instance);
	virtual STDMETHODIMP _CreateWithRelativeUri(HSTRING baseUri, HSTRING relativeUri, Uri* *instance);
};

// IUriRuntimeClassWithAbsoluteCanonicalUri
struct IUriRuntimeClassWithAbsoluteCanonicalUri_raw : IInspectable {
	virtual STDMETHODIMP _get_AbsoluteCanonicalUri(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayIri(HSTRING *value);
};
template<typename X> struct IUriRuntimeClassWithAbsoluteCanonicalUri_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClassWithAbsoluteCanonicalUri_adaptor::AbsoluteCanonicalUri)->_get_AbsoluteCanonicalUri(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AbsoluteCanonicalUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUriRuntimeClassWithAbsoluteCanonicalUri_adaptor::DisplayIri)->_get_DisplayIri(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayIri;
	};
	IUriRuntimeClassWithAbsoluteCanonicalUri_adaptor() {}
};
template<typename X> struct adapt<IUriRuntimeClassWithAbsoluteCanonicalUri, X> : Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri_adaptor<X> { typedef adapt IUriRuntimeClassWithAbsoluteCanonicalUri; };
struct IUriRuntimeClassWithAbsoluteCanonicalUri : IUriRuntimeClassWithAbsoluteCanonicalUri_raw, generate<IUriRuntimeClassWithAbsoluteCanonicalUri> {};

// Uri
template<typename> struct Uri_statics {
	static hstring UnescapeComponent(hstring_ref toUnescape) { HSTRING value; hrcheck(get_activation_factory<Uri, IUriEscapeStatics>()->_UnescapeComponent(toUnescape, &value)); return from_abi(value); }
	static hstring EscapeComponent(hstring_ref toEscape) { HSTRING value; hrcheck(get_activation_factory<Uri, IUriEscapeStatics>()->_EscapeComponent(toEscape, &value)); return from_abi(value); }
	static Uri *activate(hstring_ref uri) { Uri *instance; hrcheck(get_activation_factory<Uri, IUriRuntimeClassFactory>()->_CreateUri(uri, &instance)); return instance; }
	static Uri *activate(hstring_ref baseUri, hstring_ref relativeUri) { Uri *instance; hrcheck(get_activation_factory<Uri, IUriRuntimeClassFactory>()->_CreateWithRelativeUri(baseUri, relativeUri, &instance)); return instance; }
};

template<typename X> struct statics<Uri, X> : X, Windows::Foundation::Uri_statics<void> {
	using Windows::Foundation::Uri_statics<void>::activate;
	typedef typename X::root_type Uri;
};
struct Uri : generate<Uri> {};

// WwwFormUrlDecoderEntry
template<typename X> struct statics<WwwFormUrlDecoderEntry, X> : X {
	typedef typename X::root_type WwwFormUrlDecoderEntry;
};
struct WwwFormUrlDecoderEntry : generate<WwwFormUrlDecoderEntry> {};

// IGetActivationFactory
struct IGetActivationFactory_raw : IInspectable {
	virtual STDMETHODIMP _GetActivationFactory(HSTRING activatableClassId, IInspectable* *factory) = 0;
};
template<typename X> struct IGetActivationFactory_adaptor : X {
	object GetActivationFactory(hstring_ref activatableClassId) { IInspectable* factory; hrcheck(X::get()->_GetActivationFactory(activatableClassId, &factory)); return from_abi(factory); }
};
template<typename X> struct adapt<IGetActivationFactory, X> : Windows::Foundation::IGetActivationFactory_adaptor<X> { typedef adapt IGetActivationFactory; };
template<typename X> struct IGetActivationFactory_unadaptor : X {
	STDMETHODIMP _GetActivationFactory(HSTRING activatableClassId, IInspectable* *factory) { return hrtry([&, this] { *factory = to_abi(X::get()->GetActivationFactory(activatableClassId)); }); }
};
template<typename X> struct unadapt<IGetActivationFactory, X> : Windows::Foundation::IGetActivationFactory_unadaptor<X> {};
struct IGetActivationFactory : IGetActivationFactory_raw, generate<IGetActivationFactory> {};
}}
} // namespace iso_winrt
