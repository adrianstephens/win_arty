#pragma once
// generated by isopod tools
// namespaces:
// Windows.Embedded.DeviceLockdown

#include "Windows.Embedded.DeviceLockdown.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}
struct IAsyncAction;
}}

// defs

template<> struct def<Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation> : interface_type<> {};
template<> struct def<Windows::Embedded::DeviceLockdown::DeviceLockdownProfileInformation> : class_type<Platform::Object, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation> {};
template<> struct def<Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics> : interface_type<> {};
template<> struct def<Windows::Embedded::DeviceLockdown::DeviceLockdownProfile> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Embedded::DeviceLockdown::DeviceLockdownContract> : value_type<> {};

// uuids

template<> struct uuid<Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation> { define_guid(0x7980E14E, 0x45B1, 0x4A96, 0x92, 0xFC, 0x62, 0x75, 0x6B, 0x73, 0x96, 0x78);};
template<> struct uuid<Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics> { define_guid(0x622F6965, 0xF9A8, 0x41A1, 0xA6, 0x91, 0x88, 0xCD, 0x80, 0xC7, 0xA0, 0x69);};

// types

namespace Windows { namespace Embedded { namespace DeviceLockdown {

// IDeviceLockdownProfileInformation
struct IDeviceLockdownProfileInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *phProfileName);
};
template<typename X> struct IDeviceLockdownProfileInformation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING phProfileName; hrcheck(enc(&IDeviceLockdownProfileInformation_adaptor::Name)->_get_Name(&phProfileName)); return from_abi(phProfileName); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	IDeviceLockdownProfileInformation_adaptor() {}
};
template<typename X> struct adapt<IDeviceLockdownProfileInformation, X> : Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation_adaptor<X> { typedef adapt IDeviceLockdownProfileInformation; };
struct IDeviceLockdownProfileInformation : IDeviceLockdownProfileInformation_raw, generate<IDeviceLockdownProfileInformation> {};

// DeviceLockdownProfileInformation
template<typename X> struct statics<DeviceLockdownProfileInformation, X> : X {
	typedef typename X::root_type DeviceLockdownProfileInformation;
};
struct DeviceLockdownProfileInformation : generate<DeviceLockdownProfileInformation> {};

// IDeviceLockdownProfileStatics
struct IDeviceLockdownProfileStatics : IInspectable {
	virtual STDMETHODIMP _GetSupportedLockdownProfiles(Foundation::Collections::IVectorView<Platform::Guid>* *ppProfileIDs);
	virtual STDMETHODIMP _GetCurrentLockdownProfile(Platform::Guid *pProfileID);
	virtual STDMETHODIMP _ApplyLockdownProfileAsync(Platform::Guid profileID, Foundation::IAsyncAction* *ppWaitableOperation);
	virtual STDMETHODIMP _GetLockdownProfileInformation(Platform::Guid profileID, DeviceLockdownProfileInformation* *ppInformation);
};

// DeviceLockdownProfile
template<typename> struct DeviceLockdownProfile_statics {
	static ptr<Foundation::Collections::IVectorView<Platform::Guid>> GetSupportedLockdownProfiles() { Foundation::Collections::IVectorView<Platform::Guid>* ppProfileIDs; hrcheck(get_activation_factory<DeviceLockdownProfile, IDeviceLockdownProfileStatics>()->_GetSupportedLockdownProfiles(&ppProfileIDs)); return from_abi(ppProfileIDs); }
	static Platform::Guid GetCurrentLockdownProfile() { Platform::Guid pProfileID; hrcheck(get_activation_factory<DeviceLockdownProfile, IDeviceLockdownProfileStatics>()->_GetCurrentLockdownProfile(&pProfileID)); return pProfileID; }
	static ptr<Foundation::IAsyncAction> ApplyLockdownProfileAsync(const Platform::Guid& profileID) { Foundation::IAsyncAction* ppWaitableOperation; hrcheck(get_activation_factory<DeviceLockdownProfile, IDeviceLockdownProfileStatics>()->_ApplyLockdownProfileAsync(profileID, &ppWaitableOperation)); return from_abi(ppWaitableOperation); }
	static ptr<DeviceLockdownProfileInformation> GetLockdownProfileInformation(const Platform::Guid& profileID) { DeviceLockdownProfileInformation* ppInformation; hrcheck(get_activation_factory<DeviceLockdownProfile, IDeviceLockdownProfileStatics>()->_GetLockdownProfileInformation(profileID, &ppInformation)); return from_abi(ppInformation); }
};

template<typename X> struct statics<DeviceLockdownProfile, X> : X, Windows::Embedded::DeviceLockdown::DeviceLockdownProfile_statics<void> {
	typedef typename X::root_type DeviceLockdownProfile;
};
struct DeviceLockdownProfile : generate<DeviceLockdownProfile> {};
}}}
} // namespace iso_winrt
