#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.ViewManagement.Core

#include "Windows.UI.ViewManagement.Core.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::UI::ViewManagement::Core::CoreInputViewOcclusionKind> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::Core::CoreInputViewXYFocusTransferDirection> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::Core::ICoreInputView> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::Core::ICoreInputViewStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::Core::ICoreInputView2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::Core::CoreInputView> : class_type<Platform::Object, Windows::UI::ViewManagement::Core::ICoreInputView, Windows::UI::ViewManagement::Core::ICoreInputView2> {};
template<> struct def<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusionsChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::Core::CoreInputViewOcclusionsChangedEventArgs> : class_type<Platform::Object, Windows::UI::ViewManagement::Core::ICoreInputViewOcclusionsChangedEventArgs> {};
template<> struct def<Windows::UI::ViewManagement::Core::CoreInputViewOcclusion> : class_type<Platform::Object, Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion> {};
template<> struct def<Windows::UI::ViewManagement::Core::ICoreInputViewTransferringXYFocusEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::Core::CoreInputViewTransferringXYFocusEventArgs> : class_type<Platform::Object, Windows::UI::ViewManagement::Core::ICoreInputViewTransferringXYFocusEventArgs> {};

// uuids

template<> struct uuid<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion> { define_guid(0xCC36CE06, 0x3865, 0x4177, 0xB5, 0xF5, 0x8B, 0x65, 0xE0, 0xB9, 0xCE, 0x84);};
template<> struct uuid<Windows::UI::ViewManagement::Core::ICoreInputView> { define_guid(0xC770CD7A, 0x7001, 0x4C32, 0xBF, 0x94, 0x25, 0xC1, 0xF5, 0x54, 0xCB, 0xF1);};
template<> struct uuid<Windows::UI::ViewManagement::Core::ICoreInputViewStatics> { define_guid(0x7D9B97CD, 0xEDBE, 0x49CF, 0xA5, 0x4F, 0x33, 0x7D, 0xE0, 0x52, 0x90, 0x7F);};
template<> struct uuid<Windows::UI::ViewManagement::Core::ICoreInputView2> { define_guid(0xED726C1, 0xE09A, 0x4AE8, 0xAE, 0xDF, 0xDF, 0xA4, 0x85, 0x7D, 0x1A, 0x1);};
template<> struct uuid<Windows::UI::ViewManagement::Core::ICoreInputViewOcclusionsChangedEventArgs> { define_guid(0xBE1027E8, 0xB3EE, 0x4DF7, 0x95, 0x54, 0x89, 0xCD, 0xC6, 0x60, 0x82, 0xC2);};
template<> struct uuid<Windows::UI::ViewManagement::Core::ICoreInputViewTransferringXYFocusEventArgs> { define_guid(0x4DE169F, 0xBA02, 0x4850, 0x8B, 0x55, 0xD8, 0x2D, 0x3, 0xBA, 0x6D, 0x7F);};

// types

namespace Windows { namespace UI { namespace ViewManagement { namespace Core {

// ICoreInputViewOcclusion
struct ICoreInputViewOcclusion_raw : IInspectable {
	virtual STDMETHODIMP _get_OccludingRect(Foundation::Rect *value);
	virtual STDMETHODIMP _get_OcclusionKind(CoreInputViewOcclusionKind *value);
};
template<typename X> struct ICoreInputViewOcclusion_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ICoreInputViewOcclusion_adaptor::OccludingRect)->_get_OccludingRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} OccludingRect;
		struct : property {
			CoreInputViewOcclusionKind get() { CoreInputViewOcclusionKind value; hrcheck(enc(&ICoreInputViewOcclusion_adaptor::OcclusionKind)->_get_OcclusionKind(&value)); return value; }
			CoreInputViewOcclusionKind operator()() { return get(); }
			operator CoreInputViewOcclusionKind () { return get(); }
		} OcclusionKind;
	};
	ICoreInputViewOcclusion_adaptor() {}
};
template<typename X> struct adapt<ICoreInputViewOcclusion, X> : Windows::UI::ViewManagement::Core::ICoreInputViewOcclusion_adaptor<X> { typedef adapt ICoreInputViewOcclusion; };
struct ICoreInputViewOcclusion : ICoreInputViewOcclusion_raw, generate<ICoreInputViewOcclusion> {};

// ICoreInputView
struct ICoreInputView_raw : IInspectable {
	virtual STDMETHODIMP _add_OcclusionsChanged(Foundation::TypedEventHandler<CoreInputView*, CoreInputViewOcclusionsChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_OcclusionsChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetCoreInputViewOcclusions(Foundation::Collections::IVectorView<CoreInputViewOcclusion*>* *result);
	virtual STDMETHODIMP _TryShowPrimaryView(bool *result);
	virtual STDMETHODIMP _TryHidePrimaryView(bool *result);
};
template<typename X> struct ICoreInputView_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInputView>, ptr<CoreInputViewOcclusionsChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreInputView_adaptor::OcclusionsChanged)->_add_OcclusionsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreInputView_adaptor::OcclusionsChanged)->_remove_OcclusionsChanged(token)); }
		} OcclusionsChanged;
	};
	ptr<Foundation::Collections::IVectorView<ptr<CoreInputViewOcclusion>>> GetCoreInputViewOcclusions() { Foundation::Collections::IVectorView<CoreInputViewOcclusion*>* result; hrcheck(X::get()->_GetCoreInputViewOcclusions(&result)); return from_abi(result); }
	bool TryShowPrimaryView() { bool result; hrcheck(X::get()->_TryShowPrimaryView(&result)); return result; }
	bool TryHidePrimaryView() { bool result; hrcheck(X::get()->_TryHidePrimaryView(&result)); return result; }
	ICoreInputView_adaptor() {}
};
template<typename X> struct adapt<ICoreInputView, X> : Windows::UI::ViewManagement::Core::ICoreInputView_adaptor<X> { typedef adapt ICoreInputView; };
struct ICoreInputView : ICoreInputView_raw, generate<ICoreInputView> {};

// ICoreInputViewStatics
struct ICoreInputViewStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(CoreInputView* *result);
};

// ICoreInputView2
struct ICoreInputView2_raw : IInspectable {
	virtual STDMETHODIMP _add_XYFocusTransferringFromPrimaryView(Foundation::TypedEventHandler<CoreInputView*, CoreInputViewTransferringXYFocusEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_XYFocusTransferringFromPrimaryView(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_XYFocusTransferredToPrimaryView(Foundation::TypedEventHandler<CoreInputView*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_XYFocusTransferredToPrimaryView(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _TryTransferXYFocusToPrimaryView(Foundation::Rect origin, CoreInputViewXYFocusTransferDirection direction, bool *result);
};
template<typename X> struct ICoreInputView2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInputView>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreInputView2_adaptor::XYFocusTransferredToPrimaryView)->_add_XYFocusTransferredToPrimaryView(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreInputView2_adaptor::XYFocusTransferredToPrimaryView)->_remove_XYFocusTransferredToPrimaryView(token)); }
		} XYFocusTransferredToPrimaryView;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInputView>, ptr<CoreInputViewTransferringXYFocusEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreInputView2_adaptor::XYFocusTransferringFromPrimaryView)->_add_XYFocusTransferringFromPrimaryView(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreInputView2_adaptor::XYFocusTransferringFromPrimaryView)->_remove_XYFocusTransferringFromPrimaryView(token)); }
		} XYFocusTransferringFromPrimaryView;
	};
	bool TryTransferXYFocusToPrimaryView(const Foundation::Rect& origin, CoreInputViewXYFocusTransferDirection direction) { bool result; hrcheck(X::get()->_TryTransferXYFocusToPrimaryView(origin, direction, &result)); return result; }
	ICoreInputView2_adaptor() {}
};
template<typename X> struct adapt<ICoreInputView2, X> : Windows::UI::ViewManagement::Core::ICoreInputView2_adaptor<X> { typedef adapt ICoreInputView2; };
struct ICoreInputView2 : ICoreInputView2_raw, generate<ICoreInputView2> {};

// CoreInputView
template<typename> struct CoreInputView_statics {
	static ptr<CoreInputView> GetForCurrentView() { CoreInputView* result; hrcheck(get_activation_factory<CoreInputView, ICoreInputViewStatics>()->_GetForCurrentView(&result)); return from_abi(result); }
};

template<typename X> struct statics<CoreInputView, X> : X, Windows::UI::ViewManagement::Core::CoreInputView_statics<void> {
	typedef typename X::root_type CoreInputView;
};
struct CoreInputView : generate<CoreInputView> {};

// ICoreInputViewOcclusionsChangedEventArgs
struct ICoreInputViewOcclusionsChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Occlusions(Foundation::Collections::IVectorView<CoreInputViewOcclusion*>* *value);
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct ICoreInputViewOcclusionsChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreInputViewOcclusionsChangedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreInputViewOcclusionsChangedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<CoreInputViewOcclusion>>> get() { Foundation::Collections::IVectorView<CoreInputViewOcclusion*>* value; hrcheck(enc(&ICoreInputViewOcclusionsChangedEventArgs_adaptor::Occlusions)->_get_Occlusions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<CoreInputViewOcclusion>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<CoreInputViewOcclusion>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<CoreInputViewOcclusion>>> operator->() { return get(); }
		} Occlusions;
	};
	ICoreInputViewOcclusionsChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreInputViewOcclusionsChangedEventArgs, X> : Windows::UI::ViewManagement::Core::ICoreInputViewOcclusionsChangedEventArgs_adaptor<X> { typedef adapt ICoreInputViewOcclusionsChangedEventArgs; };
struct ICoreInputViewOcclusionsChangedEventArgs : ICoreInputViewOcclusionsChangedEventArgs_raw, generate<ICoreInputViewOcclusionsChangedEventArgs> {};

// CoreInputViewOcclusionsChangedEventArgs
template<typename X> struct statics<CoreInputViewOcclusionsChangedEventArgs, X> : X {
	typedef typename X::root_type CoreInputViewOcclusionsChangedEventArgs;
};
struct CoreInputViewOcclusionsChangedEventArgs : generate<CoreInputViewOcclusionsChangedEventArgs> {};

// CoreInputViewOcclusion
template<typename X> struct statics<CoreInputViewOcclusion, X> : X {
	typedef typename X::root_type CoreInputViewOcclusion;
};
struct CoreInputViewOcclusion : generate<CoreInputViewOcclusion> {};

// ICoreInputViewTransferringXYFocusEventArgs
struct ICoreInputViewTransferringXYFocusEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Origin(Foundation::Rect *value);
	virtual STDMETHODIMP _get_Direction(CoreInputViewXYFocusTransferDirection *value);
	virtual STDMETHODIMP _put_TransferHandled(bool value);
	virtual STDMETHODIMP _get_TransferHandled(bool *value);
	virtual STDMETHODIMP _put_KeepPrimaryViewVisible(bool value);
	virtual STDMETHODIMP _get_KeepPrimaryViewVisible(bool *value);
};
template<typename X> struct ICoreInputViewTransferringXYFocusEventArgs_adaptor : X {
	union {
		struct : property {
			CoreInputViewXYFocusTransferDirection get() { CoreInputViewXYFocusTransferDirection value; hrcheck(enc(&ICoreInputViewTransferringXYFocusEventArgs_adaptor::Direction)->_get_Direction(&value)); return value; }
			CoreInputViewXYFocusTransferDirection operator()() { return get(); }
			operator CoreInputViewXYFocusTransferDirection () { return get(); }
		} Direction;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreInputViewTransferringXYFocusEventArgs_adaptor::KeepPrimaryViewVisible)->_get_KeepPrimaryViewVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreInputViewTransferringXYFocusEventArgs_adaptor::KeepPrimaryViewVisible)->_put_KeepPrimaryViewVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} KeepPrimaryViewVisible;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ICoreInputViewTransferringXYFocusEventArgs_adaptor::Origin)->_get_Origin(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} Origin;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreInputViewTransferringXYFocusEventArgs_adaptor::TransferHandled)->_get_TransferHandled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreInputViewTransferringXYFocusEventArgs_adaptor::TransferHandled)->_put_TransferHandled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} TransferHandled;
	};
	ICoreInputViewTransferringXYFocusEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreInputViewTransferringXYFocusEventArgs, X> : Windows::UI::ViewManagement::Core::ICoreInputViewTransferringXYFocusEventArgs_adaptor<X> { typedef adapt ICoreInputViewTransferringXYFocusEventArgs; };
struct ICoreInputViewTransferringXYFocusEventArgs : ICoreInputViewTransferringXYFocusEventArgs_raw, generate<ICoreInputViewTransferringXYFocusEventArgs> {};

// CoreInputViewTransferringXYFocusEventArgs
template<typename X> struct statics<CoreInputViewTransferringXYFocusEventArgs, X> : X {
	typedef typename X::root_type CoreInputViewTransferringXYFocusEventArgs;
};
struct CoreInputViewTransferringXYFocusEventArgs : generate<CoreInputViewTransferringXYFocusEventArgs> {};
}}}}
} // namespace iso_winrt
