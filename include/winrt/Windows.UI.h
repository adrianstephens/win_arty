#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI

#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::UI::IColorHelper> : interface_type<> {};
template<> struct def<Windows::UI::Color> : value_type<unsigned char, unsigned char, unsigned char, unsigned char> {};
template<> struct def<Windows::UI::IColorHelperStatics> : interface_type<> {};
template<> struct def<Windows::UI::IColorHelperStatics2> : interface_type<> {};
template<> struct def<Windows::UI::ColorHelper> : class_type<Platform::Object, Windows::UI::IColorHelper> {};
template<> struct def<Windows::UI::IColors> : interface_type<> {};
template<> struct def<Windows::UI::IColorsStatics> : interface_type<> {};
template<> struct def<Windows::UI::Colors> : class_type<Platform::Object, Windows::UI::IColors> {};

// uuids

template<> struct uuid<Windows::UI::IColorHelper> { define_guid(0x193CFBE7, 0x65C7, 0x4540, 0xAD, 0x8, 0x62, 0x83, 0xBA, 0x76, 0x87, 0x9A);};
template<> struct uuid<Windows::UI::IColorHelperStatics> { define_guid(0x8504DBEA, 0xFB6A, 0x4144, 0xA6, 0xC2, 0x33, 0x49, 0x9C, 0x92, 0x84, 0xF5);};
template<> struct uuid<Windows::UI::IColorHelperStatics2> { define_guid(0x24D9AF02, 0x6EB0, 0x4B94, 0x85, 0x5C, 0xFC, 0xF0, 0x81, 0x8D, 0x9A, 0x16);};
template<> struct uuid<Windows::UI::IColors> { define_guid(0x9B8C9326, 0x4CA6, 0x4CE5, 0x89, 0x94, 0x9E, 0xFF, 0x65, 0xCA, 0xBD, 0xCC);};
template<> struct uuid<Windows::UI::IColorsStatics> { define_guid(0xCFF52E04, 0xCCA6, 0x4614, 0xA1, 0x7E, 0x75, 0x49, 0x10, 0xC8, 0x4A, 0x99);};

// types

namespace Windows { namespace UI {

// IColorHelper
struct IColorHelper : IInspectable, generate<IColorHelper> {};

// IColorHelperStatics
struct IColorHelperStatics : IInspectable {
	virtual STDMETHODIMP _FromArgb(unsigned char a, unsigned char r, unsigned char g, unsigned char b, Color *returnValue);
};

// IColorHelperStatics2
struct IColorHelperStatics2 : IInspectable {
	virtual STDMETHODIMP _ToDisplayName(Color color, HSTRING *returnValue);
};

// ColorHelper
template<typename> struct ColorHelper_statics {
	static hstring ToDisplayName(const Color& color) { HSTRING returnValue; hrcheck(get_activation_factory<ColorHelper, IColorHelperStatics2>()->_ToDisplayName(color, &returnValue)); return from_abi(returnValue); }
	static Color FromArgb(unsigned char a, unsigned char r, unsigned char g, unsigned char b) { Color returnValue; hrcheck(get_activation_factory<ColorHelper, IColorHelperStatics>()->_FromArgb(a, r, g, b, &returnValue)); return returnValue; }
};

template<typename X> struct statics<ColorHelper, X> : X, Windows::UI::ColorHelper_statics<void> {
	typedef typename X::root_type ColorHelper;
};
struct ColorHelper : generate<ColorHelper> {};

// IColors
struct IColors : IInspectable, generate<IColors> {};

// IColorsStatics
struct IColorsStatics : IInspectable {
	virtual STDMETHODIMP _get_AliceBlue(Color *value);
	virtual STDMETHODIMP _get_AntiqueWhite(Color *value);
	virtual STDMETHODIMP _get_Aqua(Color *value);
	virtual STDMETHODIMP _get_Aquamarine(Color *value);
	virtual STDMETHODIMP _get_Azure(Color *value);
	virtual STDMETHODIMP _get_Beige(Color *value);
	virtual STDMETHODIMP _get_Bisque(Color *value);
	virtual STDMETHODIMP _get_Black(Color *value);
	virtual STDMETHODIMP _get_BlanchedAlmond(Color *value);
	virtual STDMETHODIMP _get_Blue(Color *value);
	virtual STDMETHODIMP _get_BlueViolet(Color *value);
	virtual STDMETHODIMP _get_Brown(Color *value);
	virtual STDMETHODIMP _get_BurlyWood(Color *value);
	virtual STDMETHODIMP _get_CadetBlue(Color *value);
	virtual STDMETHODIMP _get_Chartreuse(Color *value);
	virtual STDMETHODIMP _get_Chocolate(Color *value);
	virtual STDMETHODIMP _get_Coral(Color *value);
	virtual STDMETHODIMP _get_CornflowerBlue(Color *value);
	virtual STDMETHODIMP _get_Cornsilk(Color *value);
	virtual STDMETHODIMP _get_Crimson(Color *value);
	virtual STDMETHODIMP _get_Cyan(Color *value);
	virtual STDMETHODIMP _get_DarkBlue(Color *value);
	virtual STDMETHODIMP _get_DarkCyan(Color *value);
	virtual STDMETHODIMP _get_DarkGoldenrod(Color *value);
	virtual STDMETHODIMP _get_DarkGray(Color *value);
	virtual STDMETHODIMP _get_DarkGreen(Color *value);
	virtual STDMETHODIMP _get_DarkKhaki(Color *value);
	virtual STDMETHODIMP _get_DarkMagenta(Color *value);
	virtual STDMETHODIMP _get_DarkOliveGreen(Color *value);
	virtual STDMETHODIMP _get_DarkOrange(Color *value);
	virtual STDMETHODIMP _get_DarkOrchid(Color *value);
	virtual STDMETHODIMP _get_DarkRed(Color *value);
	virtual STDMETHODIMP _get_DarkSalmon(Color *value);
	virtual STDMETHODIMP _get_DarkSeaGreen(Color *value);
	virtual STDMETHODIMP _get_DarkSlateBlue(Color *value);
	virtual STDMETHODIMP _get_DarkSlateGray(Color *value);
	virtual STDMETHODIMP _get_DarkTurquoise(Color *value);
	virtual STDMETHODIMP _get_DarkViolet(Color *value);
	virtual STDMETHODIMP _get_DeepPink(Color *value);
	virtual STDMETHODIMP _get_DeepSkyBlue(Color *value);
	virtual STDMETHODIMP _get_DimGray(Color *value);
	virtual STDMETHODIMP _get_DodgerBlue(Color *value);
	virtual STDMETHODIMP _get_Firebrick(Color *value);
	virtual STDMETHODIMP _get_FloralWhite(Color *value);
	virtual STDMETHODIMP _get_ForestGreen(Color *value);
	virtual STDMETHODIMP _get_Fuchsia(Color *value);
	virtual STDMETHODIMP _get_Gainsboro(Color *value);
	virtual STDMETHODIMP _get_GhostWhite(Color *value);
	virtual STDMETHODIMP _get_Gold(Color *value);
	virtual STDMETHODIMP _get_Goldenrod(Color *value);
	virtual STDMETHODIMP _get_Gray(Color *value);
	virtual STDMETHODIMP _get_Green(Color *value);
	virtual STDMETHODIMP _get_GreenYellow(Color *value);
	virtual STDMETHODIMP _get_Honeydew(Color *value);
	virtual STDMETHODIMP _get_HotPink(Color *value);
	virtual STDMETHODIMP _get_IndianRed(Color *value);
	virtual STDMETHODIMP _get_Indigo(Color *value);
	virtual STDMETHODIMP _get_Ivory(Color *value);
	virtual STDMETHODIMP _get_Khaki(Color *value);
	virtual STDMETHODIMP _get_Lavender(Color *value);
	virtual STDMETHODIMP _get_LavenderBlush(Color *value);
	virtual STDMETHODIMP _get_LawnGreen(Color *value);
	virtual STDMETHODIMP _get_LemonChiffon(Color *value);
	virtual STDMETHODIMP _get_LightBlue(Color *value);
	virtual STDMETHODIMP _get_LightCoral(Color *value);
	virtual STDMETHODIMP _get_LightCyan(Color *value);
	virtual STDMETHODIMP _get_LightGoldenrodYellow(Color *value);
	virtual STDMETHODIMP _get_LightGreen(Color *value);
	virtual STDMETHODIMP _get_LightGray(Color *value);
	virtual STDMETHODIMP _get_LightPink(Color *value);
	virtual STDMETHODIMP _get_LightSalmon(Color *value);
	virtual STDMETHODIMP _get_LightSeaGreen(Color *value);
	virtual STDMETHODIMP _get_LightSkyBlue(Color *value);
	virtual STDMETHODIMP _get_LightSlateGray(Color *value);
	virtual STDMETHODIMP _get_LightSteelBlue(Color *value);
	virtual STDMETHODIMP _get_LightYellow(Color *value);
	virtual STDMETHODIMP _get_Lime(Color *value);
	virtual STDMETHODIMP _get_LimeGreen(Color *value);
	virtual STDMETHODIMP _get_Linen(Color *value);
	virtual STDMETHODIMP _get_Magenta(Color *value);
	virtual STDMETHODIMP _get_Maroon(Color *value);
	virtual STDMETHODIMP _get_MediumAquamarine(Color *value);
	virtual STDMETHODIMP _get_MediumBlue(Color *value);
	virtual STDMETHODIMP _get_MediumOrchid(Color *value);
	virtual STDMETHODIMP _get_MediumPurple(Color *value);
	virtual STDMETHODIMP _get_MediumSeaGreen(Color *value);
	virtual STDMETHODIMP _get_MediumSlateBlue(Color *value);
	virtual STDMETHODIMP _get_MediumSpringGreen(Color *value);
	virtual STDMETHODIMP _get_MediumTurquoise(Color *value);
	virtual STDMETHODIMP _get_MediumVioletRed(Color *value);
	virtual STDMETHODIMP _get_MidnightBlue(Color *value);
	virtual STDMETHODIMP _get_MintCream(Color *value);
	virtual STDMETHODIMP _get_MistyRose(Color *value);
	virtual STDMETHODIMP _get_Moccasin(Color *value);
	virtual STDMETHODIMP _get_NavajoWhite(Color *value);
	virtual STDMETHODIMP _get_Navy(Color *value);
	virtual STDMETHODIMP _get_OldLace(Color *value);
	virtual STDMETHODIMP _get_Olive(Color *value);
	virtual STDMETHODIMP _get_OliveDrab(Color *value);
	virtual STDMETHODIMP _get_Orange(Color *value);
	virtual STDMETHODIMP _get_OrangeRed(Color *value);
	virtual STDMETHODIMP _get_Orchid(Color *value);
	virtual STDMETHODIMP _get_PaleGoldenrod(Color *value);
	virtual STDMETHODIMP _get_PaleGreen(Color *value);
	virtual STDMETHODIMP _get_PaleTurquoise(Color *value);
	virtual STDMETHODIMP _get_PaleVioletRed(Color *value);
	virtual STDMETHODIMP _get_PapayaWhip(Color *value);
	virtual STDMETHODIMP _get_PeachPuff(Color *value);
	virtual STDMETHODIMP _get_Peru(Color *value);
	virtual STDMETHODIMP _get_Pink(Color *value);
	virtual STDMETHODIMP _get_Plum(Color *value);
	virtual STDMETHODIMP _get_PowderBlue(Color *value);
	virtual STDMETHODIMP _get_Purple(Color *value);
	virtual STDMETHODIMP _get_Red(Color *value);
	virtual STDMETHODIMP _get_RosyBrown(Color *value);
	virtual STDMETHODIMP _get_RoyalBlue(Color *value);
	virtual STDMETHODIMP _get_SaddleBrown(Color *value);
	virtual STDMETHODIMP _get_Salmon(Color *value);
	virtual STDMETHODIMP _get_SandyBrown(Color *value);
	virtual STDMETHODIMP _get_SeaGreen(Color *value);
	virtual STDMETHODIMP _get_SeaShell(Color *value);
	virtual STDMETHODIMP _get_Sienna(Color *value);
	virtual STDMETHODIMP _get_Silver(Color *value);
	virtual STDMETHODIMP _get_SkyBlue(Color *value);
	virtual STDMETHODIMP _get_SlateBlue(Color *value);
	virtual STDMETHODIMP _get_SlateGray(Color *value);
	virtual STDMETHODIMP _get_Snow(Color *value);
	virtual STDMETHODIMP _get_SpringGreen(Color *value);
	virtual STDMETHODIMP _get_SteelBlue(Color *value);
	virtual STDMETHODIMP _get_Tan(Color *value);
	virtual STDMETHODIMP _get_Teal(Color *value);
	virtual STDMETHODIMP _get_Thistle(Color *value);
	virtual STDMETHODIMP _get_Tomato(Color *value);
	virtual STDMETHODIMP _get_Transparent(Color *value);
	virtual STDMETHODIMP _get_Turquoise(Color *value);
	virtual STDMETHODIMP _get_Violet(Color *value);
	virtual STDMETHODIMP _get_Wheat(Color *value);
	virtual STDMETHODIMP _get_White(Color *value);
	virtual STDMETHODIMP _get_WhiteSmoke(Color *value);
	virtual STDMETHODIMP _get_Yellow(Color *value);
	virtual STDMETHODIMP _get_YellowGreen(Color *value);
};

// Colors
template<typename> struct Colors_statics {
	static struct _AliceBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_AliceBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} AliceBlue;
	static struct _AntiqueWhite : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_AntiqueWhite(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} AntiqueWhite;
	static struct _Aqua : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Aqua(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Aqua;
	static struct _Aquamarine : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Aquamarine(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Aquamarine;
	static struct _Azure : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Azure(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Azure;
	static struct _Beige : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Beige(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Beige;
	static struct _Bisque : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Bisque(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Bisque;
	static struct _Black : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Black(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Black;
	static struct _BlanchedAlmond : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_BlanchedAlmond(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} BlanchedAlmond;
	static struct _Blue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Blue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Blue;
	static struct _BlueViolet : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_BlueViolet(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} BlueViolet;
	static struct _Brown : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Brown(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Brown;
	static struct _BurlyWood : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_BurlyWood(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} BurlyWood;
	static struct _CadetBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_CadetBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} CadetBlue;
	static struct _Chartreuse : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Chartreuse(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Chartreuse;
	static struct _Chocolate : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Chocolate(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Chocolate;
	static struct _Coral : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Coral(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Coral;
	static struct _CornflowerBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_CornflowerBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} CornflowerBlue;
	static struct _Cornsilk : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Cornsilk(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Cornsilk;
	static struct _Crimson : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Crimson(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Crimson;
	static struct _Cyan : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Cyan(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Cyan;
	static struct _DarkBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkBlue;
	static struct _DarkCyan : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkCyan(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkCyan;
	static struct _DarkGoldenrod : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkGoldenrod(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkGoldenrod;
	static struct _DarkGray : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkGray(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkGray;
	static struct _DarkGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkGreen;
	static struct _DarkKhaki : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkKhaki(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkKhaki;
	static struct _DarkMagenta : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkMagenta(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkMagenta;
	static struct _DarkOliveGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkOliveGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkOliveGreen;
	static struct _DarkOrange : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkOrange(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkOrange;
	static struct _DarkOrchid : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkOrchid(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkOrchid;
	static struct _DarkRed : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkRed(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkRed;
	static struct _DarkSalmon : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkSalmon(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkSalmon;
	static struct _DarkSeaGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkSeaGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkSeaGreen;
	static struct _DarkSlateBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkSlateBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkSlateBlue;
	static struct _DarkSlateGray : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkSlateGray(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkSlateGray;
	static struct _DarkTurquoise : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkTurquoise(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkTurquoise;
	static struct _DarkViolet : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DarkViolet(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DarkViolet;
	static struct _DeepPink : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DeepPink(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DeepPink;
	static struct _DeepSkyBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DeepSkyBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DeepSkyBlue;
	static struct _DimGray : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DimGray(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DimGray;
	static struct _DodgerBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_DodgerBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} DodgerBlue;
	static struct _Firebrick : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Firebrick(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Firebrick;
	static struct _FloralWhite : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_FloralWhite(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} FloralWhite;
	static struct _ForestGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_ForestGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} ForestGreen;
	static struct _Fuchsia : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Fuchsia(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Fuchsia;
	static struct _Gainsboro : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Gainsboro(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Gainsboro;
	static struct _GhostWhite : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_GhostWhite(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} GhostWhite;
	static struct _Gold : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Gold(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Gold;
	static struct _Goldenrod : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Goldenrod(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Goldenrod;
	static struct _Gray : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Gray(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Gray;
	static struct _Green : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Green(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Green;
	static struct _GreenYellow : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_GreenYellow(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} GreenYellow;
	static struct _Honeydew : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Honeydew(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Honeydew;
	static struct _HotPink : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_HotPink(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} HotPink;
	static struct _IndianRed : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_IndianRed(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} IndianRed;
	static struct _Indigo : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Indigo(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Indigo;
	static struct _Ivory : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Ivory(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Ivory;
	static struct _Khaki : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Khaki(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Khaki;
	static struct _Lavender : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Lavender(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Lavender;
	static struct _LavenderBlush : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LavenderBlush(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LavenderBlush;
	static struct _LawnGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LawnGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LawnGreen;
	static struct _LemonChiffon : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LemonChiffon(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LemonChiffon;
	static struct _LightBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightBlue;
	static struct _LightCoral : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightCoral(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightCoral;
	static struct _LightCyan : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightCyan(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightCyan;
	static struct _LightGoldenrodYellow : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightGoldenrodYellow(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightGoldenrodYellow;
	static struct _LightGray : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightGray(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightGray;
	static struct _LightGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightGreen;
	static struct _LightPink : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightPink(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightPink;
	static struct _LightSalmon : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightSalmon(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightSalmon;
	static struct _LightSeaGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightSeaGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightSeaGreen;
	static struct _LightSkyBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightSkyBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightSkyBlue;
	static struct _LightSlateGray : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightSlateGray(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightSlateGray;
	static struct _LightSteelBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightSteelBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightSteelBlue;
	static struct _LightYellow : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LightYellow(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LightYellow;
	static struct _Lime : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Lime(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Lime;
	static struct _LimeGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_LimeGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} LimeGreen;
	static struct _Linen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Linen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Linen;
	static struct _Magenta : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Magenta(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Magenta;
	static struct _Maroon : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Maroon(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Maroon;
	static struct _MediumAquamarine : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumAquamarine(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumAquamarine;
	static struct _MediumBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumBlue;
	static struct _MediumOrchid : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumOrchid(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumOrchid;
	static struct _MediumPurple : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumPurple(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumPurple;
	static struct _MediumSeaGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumSeaGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumSeaGreen;
	static struct _MediumSlateBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumSlateBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumSlateBlue;
	static struct _MediumSpringGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumSpringGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumSpringGreen;
	static struct _MediumTurquoise : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumTurquoise(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumTurquoise;
	static struct _MediumVioletRed : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MediumVioletRed(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MediumVioletRed;
	static struct _MidnightBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MidnightBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MidnightBlue;
	static struct _MintCream : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MintCream(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MintCream;
	static struct _MistyRose : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_MistyRose(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} MistyRose;
	static struct _Moccasin : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Moccasin(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Moccasin;
	static struct _NavajoWhite : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_NavajoWhite(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} NavajoWhite;
	static struct _Navy : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Navy(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Navy;
	static struct _OldLace : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_OldLace(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} OldLace;
	static struct _Olive : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Olive(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Olive;
	static struct _OliveDrab : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_OliveDrab(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} OliveDrab;
	static struct _Orange : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Orange(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Orange;
	static struct _OrangeRed : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_OrangeRed(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} OrangeRed;
	static struct _Orchid : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Orchid(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Orchid;
	static struct _PaleGoldenrod : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_PaleGoldenrod(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} PaleGoldenrod;
	static struct _PaleGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_PaleGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} PaleGreen;
	static struct _PaleTurquoise : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_PaleTurquoise(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} PaleTurquoise;
	static struct _PaleVioletRed : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_PaleVioletRed(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} PaleVioletRed;
	static struct _PapayaWhip : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_PapayaWhip(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} PapayaWhip;
	static struct _PeachPuff : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_PeachPuff(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} PeachPuff;
	static struct _Peru : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Peru(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Peru;
	static struct _Pink : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Pink(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Pink;
	static struct _Plum : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Plum(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Plum;
	static struct _PowderBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_PowderBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} PowderBlue;
	static struct _Purple : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Purple(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Purple;
	static struct _Red : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Red(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Red;
	static struct _RosyBrown : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_RosyBrown(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} RosyBrown;
	static struct _RoyalBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_RoyalBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} RoyalBlue;
	static struct _SaddleBrown : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SaddleBrown(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SaddleBrown;
	static struct _Salmon : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Salmon(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Salmon;
	static struct _SandyBrown : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SandyBrown(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SandyBrown;
	static struct _SeaGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SeaGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SeaGreen;
	static struct _SeaShell : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SeaShell(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SeaShell;
	static struct _Sienna : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Sienna(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Sienna;
	static struct _Silver : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Silver(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Silver;
	static struct _SkyBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SkyBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SkyBlue;
	static struct _SlateBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SlateBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SlateBlue;
	static struct _SlateGray : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SlateGray(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SlateGray;
	static struct _Snow : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Snow(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Snow;
	static struct _SpringGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SpringGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SpringGreen;
	static struct _SteelBlue : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_SteelBlue(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} SteelBlue;
	static struct _Tan : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Tan(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Tan;
	static struct _Teal : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Teal(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Teal;
	static struct _Thistle : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Thistle(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Thistle;
	static struct _Tomato : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Tomato(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Tomato;
	static struct _Transparent : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Transparent(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Transparent;
	static struct _Turquoise : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Turquoise(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Turquoise;
	static struct _Violet : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Violet(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Violet;
	static struct _Wheat : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Wheat(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Wheat;
	static struct _White : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_White(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} White;
	static struct _WhiteSmoke : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_WhiteSmoke(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} WhiteSmoke;
	static struct _Yellow : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_Yellow(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} Yellow;
	static struct _YellowGreen : property {
		Color get() { Color value; hrcheck(get_activation_factory<Colors, IColorsStatics>()->_get_YellowGreen(&value)); return value; }
		Color operator()() { return get(); }
		operator Color () { return get(); }
	} YellowGreen;
};
template<typename X> typename Colors_statics<X>::_AliceBlue Colors_statics<X>::AliceBlue;
template<typename X> typename Colors_statics<X>::_AntiqueWhite Colors_statics<X>::AntiqueWhite;
template<typename X> typename Colors_statics<X>::_Aqua Colors_statics<X>::Aqua;
template<typename X> typename Colors_statics<X>::_Aquamarine Colors_statics<X>::Aquamarine;
template<typename X> typename Colors_statics<X>::_Azure Colors_statics<X>::Azure;
template<typename X> typename Colors_statics<X>::_Beige Colors_statics<X>::Beige;
template<typename X> typename Colors_statics<X>::_Bisque Colors_statics<X>::Bisque;
template<typename X> typename Colors_statics<X>::_Black Colors_statics<X>::Black;
template<typename X> typename Colors_statics<X>::_BlanchedAlmond Colors_statics<X>::BlanchedAlmond;
template<typename X> typename Colors_statics<X>::_Blue Colors_statics<X>::Blue;
template<typename X> typename Colors_statics<X>::_BlueViolet Colors_statics<X>::BlueViolet;
template<typename X> typename Colors_statics<X>::_Brown Colors_statics<X>::Brown;
template<typename X> typename Colors_statics<X>::_BurlyWood Colors_statics<X>::BurlyWood;
template<typename X> typename Colors_statics<X>::_CadetBlue Colors_statics<X>::CadetBlue;
template<typename X> typename Colors_statics<X>::_Chartreuse Colors_statics<X>::Chartreuse;
template<typename X> typename Colors_statics<X>::_Chocolate Colors_statics<X>::Chocolate;
template<typename X> typename Colors_statics<X>::_Coral Colors_statics<X>::Coral;
template<typename X> typename Colors_statics<X>::_CornflowerBlue Colors_statics<X>::CornflowerBlue;
template<typename X> typename Colors_statics<X>::_Cornsilk Colors_statics<X>::Cornsilk;
template<typename X> typename Colors_statics<X>::_Crimson Colors_statics<X>::Crimson;
template<typename X> typename Colors_statics<X>::_Cyan Colors_statics<X>::Cyan;
template<typename X> typename Colors_statics<X>::_DarkBlue Colors_statics<X>::DarkBlue;
template<typename X> typename Colors_statics<X>::_DarkCyan Colors_statics<X>::DarkCyan;
template<typename X> typename Colors_statics<X>::_DarkGoldenrod Colors_statics<X>::DarkGoldenrod;
template<typename X> typename Colors_statics<X>::_DarkGray Colors_statics<X>::DarkGray;
template<typename X> typename Colors_statics<X>::_DarkGreen Colors_statics<X>::DarkGreen;
template<typename X> typename Colors_statics<X>::_DarkKhaki Colors_statics<X>::DarkKhaki;
template<typename X> typename Colors_statics<X>::_DarkMagenta Colors_statics<X>::DarkMagenta;
template<typename X> typename Colors_statics<X>::_DarkOliveGreen Colors_statics<X>::DarkOliveGreen;
template<typename X> typename Colors_statics<X>::_DarkOrange Colors_statics<X>::DarkOrange;
template<typename X> typename Colors_statics<X>::_DarkOrchid Colors_statics<X>::DarkOrchid;
template<typename X> typename Colors_statics<X>::_DarkRed Colors_statics<X>::DarkRed;
template<typename X> typename Colors_statics<X>::_DarkSalmon Colors_statics<X>::DarkSalmon;
template<typename X> typename Colors_statics<X>::_DarkSeaGreen Colors_statics<X>::DarkSeaGreen;
template<typename X> typename Colors_statics<X>::_DarkSlateBlue Colors_statics<X>::DarkSlateBlue;
template<typename X> typename Colors_statics<X>::_DarkSlateGray Colors_statics<X>::DarkSlateGray;
template<typename X> typename Colors_statics<X>::_DarkTurquoise Colors_statics<X>::DarkTurquoise;
template<typename X> typename Colors_statics<X>::_DarkViolet Colors_statics<X>::DarkViolet;
template<typename X> typename Colors_statics<X>::_DeepPink Colors_statics<X>::DeepPink;
template<typename X> typename Colors_statics<X>::_DeepSkyBlue Colors_statics<X>::DeepSkyBlue;
template<typename X> typename Colors_statics<X>::_DimGray Colors_statics<X>::DimGray;
template<typename X> typename Colors_statics<X>::_DodgerBlue Colors_statics<X>::DodgerBlue;
template<typename X> typename Colors_statics<X>::_Firebrick Colors_statics<X>::Firebrick;
template<typename X> typename Colors_statics<X>::_FloralWhite Colors_statics<X>::FloralWhite;
template<typename X> typename Colors_statics<X>::_ForestGreen Colors_statics<X>::ForestGreen;
template<typename X> typename Colors_statics<X>::_Fuchsia Colors_statics<X>::Fuchsia;
template<typename X> typename Colors_statics<X>::_Gainsboro Colors_statics<X>::Gainsboro;
template<typename X> typename Colors_statics<X>::_GhostWhite Colors_statics<X>::GhostWhite;
template<typename X> typename Colors_statics<X>::_Gold Colors_statics<X>::Gold;
template<typename X> typename Colors_statics<X>::_Goldenrod Colors_statics<X>::Goldenrod;
template<typename X> typename Colors_statics<X>::_Gray Colors_statics<X>::Gray;
template<typename X> typename Colors_statics<X>::_Green Colors_statics<X>::Green;
template<typename X> typename Colors_statics<X>::_GreenYellow Colors_statics<X>::GreenYellow;
template<typename X> typename Colors_statics<X>::_Honeydew Colors_statics<X>::Honeydew;
template<typename X> typename Colors_statics<X>::_HotPink Colors_statics<X>::HotPink;
template<typename X> typename Colors_statics<X>::_IndianRed Colors_statics<X>::IndianRed;
template<typename X> typename Colors_statics<X>::_Indigo Colors_statics<X>::Indigo;
template<typename X> typename Colors_statics<X>::_Ivory Colors_statics<X>::Ivory;
template<typename X> typename Colors_statics<X>::_Khaki Colors_statics<X>::Khaki;
template<typename X> typename Colors_statics<X>::_Lavender Colors_statics<X>::Lavender;
template<typename X> typename Colors_statics<X>::_LavenderBlush Colors_statics<X>::LavenderBlush;
template<typename X> typename Colors_statics<X>::_LawnGreen Colors_statics<X>::LawnGreen;
template<typename X> typename Colors_statics<X>::_LemonChiffon Colors_statics<X>::LemonChiffon;
template<typename X> typename Colors_statics<X>::_LightBlue Colors_statics<X>::LightBlue;
template<typename X> typename Colors_statics<X>::_LightCoral Colors_statics<X>::LightCoral;
template<typename X> typename Colors_statics<X>::_LightCyan Colors_statics<X>::LightCyan;
template<typename X> typename Colors_statics<X>::_LightGoldenrodYellow Colors_statics<X>::LightGoldenrodYellow;
template<typename X> typename Colors_statics<X>::_LightGray Colors_statics<X>::LightGray;
template<typename X> typename Colors_statics<X>::_LightGreen Colors_statics<X>::LightGreen;
template<typename X> typename Colors_statics<X>::_LightPink Colors_statics<X>::LightPink;
template<typename X> typename Colors_statics<X>::_LightSalmon Colors_statics<X>::LightSalmon;
template<typename X> typename Colors_statics<X>::_LightSeaGreen Colors_statics<X>::LightSeaGreen;
template<typename X> typename Colors_statics<X>::_LightSkyBlue Colors_statics<X>::LightSkyBlue;
template<typename X> typename Colors_statics<X>::_LightSlateGray Colors_statics<X>::LightSlateGray;
template<typename X> typename Colors_statics<X>::_LightSteelBlue Colors_statics<X>::LightSteelBlue;
template<typename X> typename Colors_statics<X>::_LightYellow Colors_statics<X>::LightYellow;
template<typename X> typename Colors_statics<X>::_Lime Colors_statics<X>::Lime;
template<typename X> typename Colors_statics<X>::_LimeGreen Colors_statics<X>::LimeGreen;
template<typename X> typename Colors_statics<X>::_Linen Colors_statics<X>::Linen;
template<typename X> typename Colors_statics<X>::_Magenta Colors_statics<X>::Magenta;
template<typename X> typename Colors_statics<X>::_Maroon Colors_statics<X>::Maroon;
template<typename X> typename Colors_statics<X>::_MediumAquamarine Colors_statics<X>::MediumAquamarine;
template<typename X> typename Colors_statics<X>::_MediumBlue Colors_statics<X>::MediumBlue;
template<typename X> typename Colors_statics<X>::_MediumOrchid Colors_statics<X>::MediumOrchid;
template<typename X> typename Colors_statics<X>::_MediumPurple Colors_statics<X>::MediumPurple;
template<typename X> typename Colors_statics<X>::_MediumSeaGreen Colors_statics<X>::MediumSeaGreen;
template<typename X> typename Colors_statics<X>::_MediumSlateBlue Colors_statics<X>::MediumSlateBlue;
template<typename X> typename Colors_statics<X>::_MediumSpringGreen Colors_statics<X>::MediumSpringGreen;
template<typename X> typename Colors_statics<X>::_MediumTurquoise Colors_statics<X>::MediumTurquoise;
template<typename X> typename Colors_statics<X>::_MediumVioletRed Colors_statics<X>::MediumVioletRed;
template<typename X> typename Colors_statics<X>::_MidnightBlue Colors_statics<X>::MidnightBlue;
template<typename X> typename Colors_statics<X>::_MintCream Colors_statics<X>::MintCream;
template<typename X> typename Colors_statics<X>::_MistyRose Colors_statics<X>::MistyRose;
template<typename X> typename Colors_statics<X>::_Moccasin Colors_statics<X>::Moccasin;
template<typename X> typename Colors_statics<X>::_NavajoWhite Colors_statics<X>::NavajoWhite;
template<typename X> typename Colors_statics<X>::_Navy Colors_statics<X>::Navy;
template<typename X> typename Colors_statics<X>::_OldLace Colors_statics<X>::OldLace;
template<typename X> typename Colors_statics<X>::_Olive Colors_statics<X>::Olive;
template<typename X> typename Colors_statics<X>::_OliveDrab Colors_statics<X>::OliveDrab;
template<typename X> typename Colors_statics<X>::_Orange Colors_statics<X>::Orange;
template<typename X> typename Colors_statics<X>::_OrangeRed Colors_statics<X>::OrangeRed;
template<typename X> typename Colors_statics<X>::_Orchid Colors_statics<X>::Orchid;
template<typename X> typename Colors_statics<X>::_PaleGoldenrod Colors_statics<X>::PaleGoldenrod;
template<typename X> typename Colors_statics<X>::_PaleGreen Colors_statics<X>::PaleGreen;
template<typename X> typename Colors_statics<X>::_PaleTurquoise Colors_statics<X>::PaleTurquoise;
template<typename X> typename Colors_statics<X>::_PaleVioletRed Colors_statics<X>::PaleVioletRed;
template<typename X> typename Colors_statics<X>::_PapayaWhip Colors_statics<X>::PapayaWhip;
template<typename X> typename Colors_statics<X>::_PeachPuff Colors_statics<X>::PeachPuff;
template<typename X> typename Colors_statics<X>::_Peru Colors_statics<X>::Peru;
template<typename X> typename Colors_statics<X>::_Pink Colors_statics<X>::Pink;
template<typename X> typename Colors_statics<X>::_Plum Colors_statics<X>::Plum;
template<typename X> typename Colors_statics<X>::_PowderBlue Colors_statics<X>::PowderBlue;
template<typename X> typename Colors_statics<X>::_Purple Colors_statics<X>::Purple;
template<typename X> typename Colors_statics<X>::_Red Colors_statics<X>::Red;
template<typename X> typename Colors_statics<X>::_RosyBrown Colors_statics<X>::RosyBrown;
template<typename X> typename Colors_statics<X>::_RoyalBlue Colors_statics<X>::RoyalBlue;
template<typename X> typename Colors_statics<X>::_SaddleBrown Colors_statics<X>::SaddleBrown;
template<typename X> typename Colors_statics<X>::_Salmon Colors_statics<X>::Salmon;
template<typename X> typename Colors_statics<X>::_SandyBrown Colors_statics<X>::SandyBrown;
template<typename X> typename Colors_statics<X>::_SeaGreen Colors_statics<X>::SeaGreen;
template<typename X> typename Colors_statics<X>::_SeaShell Colors_statics<X>::SeaShell;
template<typename X> typename Colors_statics<X>::_Sienna Colors_statics<X>::Sienna;
template<typename X> typename Colors_statics<X>::_Silver Colors_statics<X>::Silver;
template<typename X> typename Colors_statics<X>::_SkyBlue Colors_statics<X>::SkyBlue;
template<typename X> typename Colors_statics<X>::_SlateBlue Colors_statics<X>::SlateBlue;
template<typename X> typename Colors_statics<X>::_SlateGray Colors_statics<X>::SlateGray;
template<typename X> typename Colors_statics<X>::_Snow Colors_statics<X>::Snow;
template<typename X> typename Colors_statics<X>::_SpringGreen Colors_statics<X>::SpringGreen;
template<typename X> typename Colors_statics<X>::_SteelBlue Colors_statics<X>::SteelBlue;
template<typename X> typename Colors_statics<X>::_Tan Colors_statics<X>::Tan;
template<typename X> typename Colors_statics<X>::_Teal Colors_statics<X>::Teal;
template<typename X> typename Colors_statics<X>::_Thistle Colors_statics<X>::Thistle;
template<typename X> typename Colors_statics<X>::_Tomato Colors_statics<X>::Tomato;
template<typename X> typename Colors_statics<X>::_Transparent Colors_statics<X>::Transparent;
template<typename X> typename Colors_statics<X>::_Turquoise Colors_statics<X>::Turquoise;
template<typename X> typename Colors_statics<X>::_Violet Colors_statics<X>::Violet;
template<typename X> typename Colors_statics<X>::_Wheat Colors_statics<X>::Wheat;
template<typename X> typename Colors_statics<X>::_White Colors_statics<X>::White;
template<typename X> typename Colors_statics<X>::_WhiteSmoke Colors_statics<X>::WhiteSmoke;
template<typename X> typename Colors_statics<X>::_Yellow Colors_statics<X>::Yellow;
template<typename X> typename Colors_statics<X>::_YellowGreen Colors_statics<X>::YellowGreen;

template<typename X> struct statics<Colors, X> : X, Windows::UI::Colors_statics<void> {
	typedef typename X::root_type Colors;
};
struct Colors : generate<Colors> {};
}}
} // namespace iso_winrt
