#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Core

#include "Windows.UI.Core.0.h"
#include "Windows.System.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
struct IPropertySet;
}}
namespace UI { namespace Input {
struct PointerPoint;
}
namespace Popups {
struct IUICommand;
struct UICommandInvokedHandler;
}}}

// defs

template<> struct def<Windows::UI::Core::ISystemNavigationManager> : interface_type<> {};
template<> struct def<Windows::UI::Core::IBackRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Core::BackRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Core::IBackRequestedEventArgs> {};
template<> struct def<Windows::UI::Core::AppViewBackButtonVisibility> : enum_type<int> {};
template<> struct def<Windows::UI::Core::ISystemNavigationManager2> : interface_type<> {};
template<> struct def<Windows::UI::Core::ISystemNavigationManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Core::SystemNavigationManager> : class_type<Platform::Object, Windows::UI::Core::ISystemNavigationManager, Windows::UI::Core::ISystemNavigationManager2> {};
template<> struct def<Windows::UI::Core::CoreWindowActivationState> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreWindowActivationMode> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreCursorType> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreDispatcherPriority> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreProcessEventsOption> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreWindowFlowDirection> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreVirtualKeyStates> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Core::CoreAcceleratorKeyEventType> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreProximityEvaluationScore> : enum_type<int> {};
template<> struct def<Windows::UI::Core::CoreInputDeviceTypes> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Core::CorePhysicalKeyStatus> : value_type<unsigned, unsigned, bool, bool, bool, bool> {};
template<> struct def<Windows::UI::Core::CoreProximityEvaluation> : value_type<int, Windows::Foundation::Point> {};
template<> struct def<Windows::UI::Core::ICoreWindowEventArgs> : overridable_type<> {};
template<> struct def<Windows::UI::Core::IAutomationProviderRequestedEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::ICharacterReceivedEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IInputEnabledEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IKeyEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IKeyEventArgs2> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IPointerEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::ITouchHitTestingEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IClosestInteractiveBoundsRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Core::IWindowActivatedEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IWindowSizeChangedEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IVisibilityChangedEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::ICoreWindow> : overridable_type<> {};
template<> struct def<Windows::UI::Core::ICoreDispatcher2> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreDispatcherWithTaskPriority> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreAcceleratorKeys> : overridable_type<> {};
template<> struct def<Windows::UI::Core::ICoreDispatcher> : interface_type<Windows::UI::Core::ICoreAcceleratorKeys> {};
template<> struct def<Windows::UI::Core::CoreDispatcher> : class_type<Platform::Object, Windows::UI::Core::ICoreDispatcher, Windows::UI::Core::ICoreDispatcher2, Windows::UI::Core::ICoreDispatcherWithTaskPriority> {};
template<> struct def<Windows::UI::Core::ICoreCursorFactory> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreCursor> : interface_type<> {};
template<> struct def<Windows::UI::Core::CoreCursor> : class_type<Platform::Object, Windows::UI::Core::ICoreCursor>, custom_activators {};
template<> struct def<Windows::UI::Core::ICoreWindowStatic> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindow5> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindow4> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindow3> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICorePointerRedirector> : overridable_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindow2> : interface_type<> {};
template<> struct def<Windows::UI::Core::CoreWindow> : class_type<Platform::Object, Windows::UI::Core::ICoreWindow, Windows::UI::Core::ICoreWindow2, Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::ICoreWindow3, Windows::UI::Core::ICoreWindow4, Windows::UI::Core::ICoreWindow5> {};
template<> struct def<Windows::UI::Core::WindowActivatedEventArgs> : class_type<Platform::Object, Windows::UI::Core::IWindowActivatedEventArgs> {};
template<> struct def<Windows::UI::Core::AutomationProviderRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Core::IAutomationProviderRequestedEventArgs> {};
template<> struct def<Windows::UI::Core::CharacterReceivedEventArgs> : class_type<Platform::Object, Windows::UI::Core::ICharacterReceivedEventArgs> {};
template<> struct def<Windows::UI::Core::CoreWindowEventArgs> : class_type<Platform::Object, Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::InputEnabledEventArgs> : class_type<Platform::Object, Windows::UI::Core::IInputEnabledEventArgs> {};
template<> struct def<Windows::UI::Core::KeyEventArgs> : class_type<Platform::Object, Windows::UI::Core::IKeyEventArgs, Windows::UI::Core::IKeyEventArgs2> {};
template<> struct def<Windows::UI::Core::PointerEventArgs> : class_type<Platform::Object, Windows::UI::Core::IPointerEventArgs> {};
template<> struct def<Windows::UI::Core::TouchHitTestingEventArgs> : class_type<Platform::Object, Windows::UI::Core::ITouchHitTestingEventArgs> {};
template<> struct def<Windows::UI::Core::WindowSizeChangedEventArgs> : class_type<Platform::Object, Windows::UI::Core::IWindowSizeChangedEventArgs> {};
template<> struct def<Windows::UI::Core::VisibilityChangedEventArgs> : class_type<Platform::Object, Windows::UI::Core::IVisibilityChangedEventArgs> {};
template<> struct def<Windows::UI::Core::ClosestInteractiveBoundsRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Core::IClosestInteractiveBoundsRequestedEventArgs> {};
template<> struct def<Windows::UI::Core::DispatchedHandler> : delegate_type {};
template<> struct def<Windows::UI::Core::IdleDispatchedHandler> : delegate_type {};
template<> struct def<Windows::UI::Core::IIdleDispatchedHandlerArgs> : interface_type<> {};
template<> struct def<Windows::UI::Core::IdleDispatchedHandlerArgs> : class_type<Platform::Object, Windows::UI::Core::IIdleDispatchedHandlerArgs> {};
template<> struct def<Windows::UI::Core::IAcceleratorKeyEventArgs> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::IAcceleratorKeyEventArgs2> : interface_type<Windows::UI::Core::ICoreWindowEventArgs> {};
template<> struct def<Windows::UI::Core::AcceleratorKeyEventArgs> : class_type<Platform::Object, Windows::UI::Core::IAcceleratorKeyEventArgs, Windows::UI::Core::IAcceleratorKeyEventArgs2> {};
template<> struct def<Windows::UI::Core::CoreAcceleratorKeys> : class_type<Platform::Object, Windows::UI::Core::ICoreAcceleratorKeys> {};
template<> struct def<Windows::UI::Core::IInitializeWithCoreWindow> : overridable_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindowResizeManager> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindowResizeManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Core::CoreWindowResizeManager> : class_type<Platform::Object, Windows::UI::Core::ICoreWindowResizeManager, Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability> {};
template<> struct def<Windows::UI::Core::ICoreInputSourceBase> : overridable_type<> {};
template<> struct def<Windows::UI::Core::ICorePointerInputSource> : overridable_type<> {};
template<> struct def<Windows::UI::Core::ICorePointerInputSource2> : overridable_type<Windows::UI::Core::ICorePointerInputSource> {};
template<> struct def<Windows::UI::Core::ICoreKeyboardInputSource> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreKeyboardInputSource2> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreComponentFocusable> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreTouchHitTesting> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreClosestInteractiveBoundsRequested> : interface_type<> {};
template<> struct def<Windows::UI::Core::CoreComponentInputSource> : class_type<Platform::Object, Windows::UI::Core::ICoreInputSourceBase, Windows::UI::Core::ICorePointerInputSource2, Windows::UI::Core::ICoreKeyboardInputSource, Windows::UI::Core::ICoreComponentFocusable, Windows::UI::Core::ICoreTouchHitTesting, Windows::UI::Core::ICoreClosestInteractiveBoundsRequested, Windows::UI::Core::ICoreKeyboardInputSource2> {};
template<> struct def<Windows::UI::Core::CoreIndependentInputSource> : class_type<Platform::Object, Windows::UI::Core::ICoreInputSourceBase, Windows::UI::Core::ICorePointerInputSource2> {};
template<> struct def<Windows::UI::Core::CoreWindowDialogsContract> : value_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindowPopupShowingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Core::CoreWindowPopupShowingEventArgs> : class_type<Platform::Object, Windows::UI::Core::ICoreWindowPopupShowingEventArgs> {};
template<> struct def<Windows::UI::Core::ICoreWindowDialog> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindowDialogFactory> : interface_type<> {};
template<> struct def<Windows::UI::Core::CoreWindowDialog> : class_type<Platform::Object, Windows::UI::Core::ICoreWindowDialog>, custom_activators {};
template<> struct def<Windows::UI::Core::ICoreWindowFlyout> : interface_type<> {};
template<> struct def<Windows::UI::Core::ICoreWindowFlyoutFactory> : interface_type<> {};
template<> struct def<Windows::UI::Core::CoreWindowFlyout> : class_type<Platform::Object, Windows::UI::Core::ICoreWindowFlyout>, custom_activators {};

// uuids

template<> struct uuid<Windows::UI::Core::ISystemNavigationManager> { define_guid(0x93023118, 0xCF50, 0x42A6, 0x97, 0x6, 0x69, 0x10, 0x7F, 0xA1, 0x22, 0xE1);};
template<> struct uuid<Windows::UI::Core::IBackRequestedEventArgs> { define_guid(0xD603D28A, 0xE411, 0x4A4E, 0xBA, 0x41, 0x6A, 0x32, 0x7A, 0x86, 0x75, 0xBC);};
template<> struct uuid<Windows::UI::Core::ISystemNavigationManager2> { define_guid(0x8C510401, 0x67BE, 0x49AE, 0x95, 0x9, 0x67, 0x1C, 0x1E, 0x54, 0xA3, 0x89);};
template<> struct uuid<Windows::UI::Core::ISystemNavigationManagerStatics> { define_guid(0xDC52B5CE, 0xBEE0, 0x4305, 0x8C, 0x54, 0x68, 0x22, 0x8E, 0xD6, 0x83, 0xB5);};
template<> struct uuid<Windows::UI::Core::ICoreWindowEventArgs> { define_guid(0x272B1EF3, 0xC633, 0x4DA5, 0xA2, 0x6C, 0xC6, 0xD0, 0xF5, 0x6B, 0x29, 0xDA);};
template<> struct uuid<Windows::UI::Core::IAutomationProviderRequestedEventArgs> { define_guid(0x961FF258, 0x21BF, 0x4B42, 0xA2, 0x98, 0xFA, 0x47, 0x9D, 0x4C, 0x52, 0xE2);};
template<> struct uuid<Windows::UI::Core::ICharacterReceivedEventArgs> { define_guid(0xC584659F, 0x99B2, 0x4BCC, 0xBD, 0x33, 0x4, 0xE6, 0x3F, 0x42, 0x90, 0x2E);};
template<> struct uuid<Windows::UI::Core::IInputEnabledEventArgs> { define_guid(0x80371D4F, 0x2FD8, 0x4C24, 0xAA, 0x86, 0x31, 0x63, 0xA8, 0x7B, 0x4E, 0x5A);};
template<> struct uuid<Windows::UI::Core::IKeyEventArgs> { define_guid(0x5FF5E930, 0x2544, 0x4A17, 0xBD, 0x78, 0x1F, 0x2F, 0xDE, 0xBB, 0x10, 0x6B);};
template<> struct uuid<Windows::UI::Core::IKeyEventArgs2> { define_guid(0x583ADD98, 0x790, 0x4571, 0x9B, 0x12, 0x64, 0x5E, 0xF9, 0xD7, 0x9E, 0x42);};
template<> struct uuid<Windows::UI::Core::IPointerEventArgs> { define_guid(0x920D9CB1, 0xA5FC, 0x4A21, 0x8C, 0x9, 0x49, 0xDF, 0xE6, 0xFF, 0xE2, 0x5F);};
template<> struct uuid<Windows::UI::Core::ITouchHitTestingEventArgs> { define_guid(0x22F3B823, 0xB7C, 0x424E, 0x9D, 0xF7, 0x33, 0xD4, 0xF9, 0x62, 0x93, 0x1B);};
template<> struct uuid<Windows::UI::Core::IClosestInteractiveBoundsRequestedEventArgs> { define_guid(0x347C11D7, 0xF6F8, 0x40E3, 0xB2, 0x9F, 0xAE, 0x50, 0xD3, 0xE8, 0x64, 0x86);};
template<> struct uuid<Windows::UI::Core::IWindowActivatedEventArgs> { define_guid(0x179D65E7, 0x4658, 0x4CB6, 0xAA, 0x13, 0x41, 0xD0, 0x94, 0xEA, 0x25, 0x5E);};
template<> struct uuid<Windows::UI::Core::IWindowSizeChangedEventArgs> { define_guid(0x5A200EC7, 0x426, 0x47DC, 0xB8, 0x6C, 0x6F, 0x47, 0x59, 0x15, 0xE4, 0x51);};
template<> struct uuid<Windows::UI::Core::IVisibilityChangedEventArgs> { define_guid(0xBF9918EA, 0xD801, 0x4564, 0xA4, 0x95, 0xB1, 0xE8, 0x4F, 0x8A, 0xD0, 0x85);};
template<> struct uuid<Windows::UI::Core::ICoreWindow> { define_guid(0x79B9D5F2, 0x879E, 0x4B89, 0xB7, 0x98, 0x79, 0xE4, 0x75, 0x98, 0x3, 0xC);};
template<> struct uuid<Windows::UI::Core::ICoreDispatcher2> { define_guid(0x6F5E63C7, 0xE3AA, 0x4EAE, 0xB0, 0xE0, 0xDC, 0xF3, 0x21, 0xCA, 0x4B, 0x2F);};
template<> struct uuid<Windows::UI::Core::ICoreDispatcherWithTaskPriority> { define_guid(0xBAFAECAD, 0x484D, 0x41BE, 0xBA, 0x80, 0x1D, 0x58, 0xC6, 0x52, 0x63, 0xEA);};
template<> struct uuid<Windows::UI::Core::ICoreAcceleratorKeys> { define_guid(0x9FFDF7F5, 0xB8C9, 0x4EF0, 0xB7, 0xD2, 0x1D, 0xE6, 0x26, 0x56, 0x1F, 0xC8);};
template<> struct uuid<Windows::UI::Core::ICoreDispatcher> { define_guid(0x60DB2FA8, 0xB705, 0x4FDE, 0xA7, 0xD6, 0xEB, 0xBB, 0x18, 0x91, 0xD3, 0x9E);};
template<> struct uuid<Windows::UI::Core::ICoreCursorFactory> { define_guid(0xF6359621, 0xA79D, 0x4ED3, 0x8C, 0x32, 0xA9, 0xEF, 0x9D, 0x6B, 0x76, 0xA4);};
template<> struct uuid<Windows::UI::Core::ICoreCursor> { define_guid(0x96893ACF, 0x111D, 0x442C, 0x8A, 0x77, 0xB8, 0x79, 0x92, 0xF8, 0xE2, 0xD6);};
template<> struct uuid<Windows::UI::Core::ICoreWindowStatic> { define_guid(0x4D239005, 0x3C2A, 0x41B1, 0x90, 0x22, 0x53, 0x6B, 0xB9, 0xCF, 0x93, 0xB1);};
template<> struct uuid<Windows::UI::Core::ICoreWindow5> { define_guid(0x4B4AE1E1, 0x2E6D, 0x4EAA, 0xBD, 0xA1, 0x1C, 0x5C, 0xC1, 0xBE, 0xE1, 0x41);};
template<> struct uuid<Windows::UI::Core::ICoreWindow4> { define_guid(0x35CAF0D0, 0x47F0, 0x436C, 0xAF, 0x97, 0xD, 0xD8, 0x8F, 0x6F, 0x5F, 0x2);};
template<> struct uuid<Windows::UI::Core::ICoreWindow3> { define_guid(0x32C20DD8, 0xFAEF, 0x4375, 0xA2, 0xAB, 0x32, 0x64, 0xE, 0x48, 0x15, 0xC7);};
template<> struct uuid<Windows::UI::Core::ICorePointerRedirector> { define_guid(0x8F9D0C94, 0x5688, 0x4B0C, 0xA9, 0xF1, 0xF9, 0x31, 0xF7, 0xFA, 0x3D, 0xC3);};
template<> struct uuid<Windows::UI::Core::ICoreWindow2> { define_guid(0x7C2B1B85, 0x6917, 0x4361, 0x9C, 0x2, 0xD, 0x9E, 0x3A, 0x42, 0xB, 0x95);};
template<> struct uuid<Windows::UI::Core::DispatchedHandler> { define_guid(0xD1F276C4, 0x98D8, 0x4636, 0xBF, 0x49, 0xEB, 0x79, 0x50, 0x75, 0x48, 0xE9);};
template<> struct uuid<Windows::UI::Core::IdleDispatchedHandler> { define_guid(0xA42B0C24, 0x7F21, 0x4ABC, 0x99, 0xC1, 0x8F, 0x1, 0x0, 0x7F, 0x8, 0x80);};
template<> struct uuid<Windows::UI::Core::IIdleDispatchedHandlerArgs> { define_guid(0x98BB6A24, 0xDC1C, 0x43CB, 0xB4, 0xED, 0xD1, 0xC0, 0xEB, 0x23, 0x91, 0xF3);};
template<> struct uuid<Windows::UI::Core::IAcceleratorKeyEventArgs> { define_guid(0xFF1C4C4A, 0x9287, 0x470B, 0x83, 0x6E, 0x90, 0x86, 0xE3, 0x12, 0x6A, 0xDE);};
template<> struct uuid<Windows::UI::Core::IAcceleratorKeyEventArgs2> { define_guid(0xD300A9F6, 0x2F7E, 0x4873, 0xA5, 0x55, 0x16, 0x6E, 0x59, 0x6E, 0xE1, 0xC5);};
template<> struct uuid<Windows::UI::Core::IInitializeWithCoreWindow> { define_guid(0x188F20D6, 0x9873, 0x464A, 0xAC, 0xE5, 0x57, 0xE0, 0x10, 0xF4, 0x65, 0xE6);};
template<> struct uuid<Windows::UI::Core::ICoreWindowResizeManager> { define_guid(0xB8F0B925, 0xB350, 0x48B3, 0xA1, 0x98, 0x5C, 0x1A, 0x84, 0x70, 0x2, 0x43);};
template<> struct uuid<Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability> { define_guid(0xBB74F27B, 0xA544, 0x4301, 0x80, 0xE6, 0xA, 0xE0, 0x33, 0xEF, 0x45, 0x36);};
template<> struct uuid<Windows::UI::Core::ICoreWindowResizeManagerStatics> { define_guid(0xAE4A9045, 0x6D70, 0x49DB, 0x8E, 0x68, 0x46, 0xFF, 0xBD, 0x17, 0xD3, 0x8D);};
template<> struct uuid<Windows::UI::Core::ICoreInputSourceBase> { define_guid(0x9F488807, 0x4580, 0x4BE8, 0xBE, 0x68, 0x92, 0xA9, 0x31, 0x17, 0x13, 0xBB);};
template<> struct uuid<Windows::UI::Core::ICorePointerInputSource> { define_guid(0xBBF1BB18, 0xE47A, 0x48EB, 0x88, 0x7, 0xF8, 0xF8, 0xD3, 0xEA, 0x45, 0x51);};
template<> struct uuid<Windows::UI::Core::ICorePointerInputSource2> { define_guid(0xD703708A, 0x4516, 0x4786, 0xB1, 0xE5, 0x27, 0x51, 0xD5, 0x63, 0xF9, 0x97);};
template<> struct uuid<Windows::UI::Core::ICoreKeyboardInputSource> { define_guid(0x231C9088, 0xE469, 0x4DF1, 0xB2, 0x8, 0x6E, 0x49, 0xD, 0x71, 0xCB, 0x90);};
template<> struct uuid<Windows::UI::Core::ICoreKeyboardInputSource2> { define_guid(0xFA24CB94, 0xF963, 0x47A5, 0x87, 0x78, 0x20, 0x7C, 0x48, 0x2B, 0xA, 0xFD);};
template<> struct uuid<Windows::UI::Core::ICoreComponentFocusable> { define_guid(0x52F96FA3, 0x8742, 0x4411, 0xAE, 0x69, 0x79, 0xA8, 0x5F, 0x29, 0xAC, 0x8B);};
template<> struct uuid<Windows::UI::Core::ICoreTouchHitTesting> { define_guid(0xB1D8A289, 0x3ACF, 0x4124, 0x9F, 0xA3, 0xEA, 0x8A, 0xBA, 0x35, 0x3C, 0x21);};
template<> struct uuid<Windows::UI::Core::ICoreClosestInteractiveBoundsRequested> { define_guid(0xF303043A, 0xE8BF, 0x4E8E, 0xAE, 0x69, 0xC9, 0xDA, 0xDD, 0x57, 0xA1, 0x14);};
template<> struct uuid<Windows::UI::Core::ICoreWindowPopupShowingEventArgs> { define_guid(0x26155FA2, 0x5BA5, 0x4EA4, 0xA3, 0xB4, 0x2D, 0xC7, 0xD6, 0x3C, 0x8E, 0x26);};
template<> struct uuid<Windows::UI::Core::ICoreWindowDialog> { define_guid(0xE7392CE0, 0xC78D, 0x427E, 0x8B, 0x2C, 0x1, 0xFF, 0x42, 0xC, 0x69, 0xD5);};
template<> struct uuid<Windows::UI::Core::ICoreWindowDialogFactory> { define_guid(0xCFB2A855, 0x1C59, 0x4B13, 0xB1, 0xE5, 0x16, 0xE2, 0x98, 0x5, 0xF7, 0xC4);};
template<> struct uuid<Windows::UI::Core::ICoreWindowFlyout> { define_guid(0xE89D854D, 0x2050, 0x40BB, 0xB3, 0x44, 0xF6, 0xF3, 0x55, 0xEE, 0xB3, 0x14);};
template<> struct uuid<Windows::UI::Core::ICoreWindowFlyoutFactory> { define_guid(0xDEC4C6C4, 0x93E8, 0x4F7C, 0xBE, 0x27, 0xCE, 0xFA, 0xA1, 0xAF, 0x68, 0xA7);};

// types

namespace Windows { namespace UI { namespace Core {

// ISystemNavigationManager
struct ISystemNavigationManager_raw : IInspectable {
	virtual STDMETHODIMP _add_BackRequested(Foundation::EventHandler<BackRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BackRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct ISystemNavigationManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<BackRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISystemNavigationManager_adaptor::BackRequested)->_add_BackRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISystemNavigationManager_adaptor::BackRequested)->_remove_BackRequested(token)); }
		} BackRequested;
	};
	ISystemNavigationManager_adaptor() {}
};
template<typename X> struct adapt<ISystemNavigationManager, X> : Windows::UI::Core::ISystemNavigationManager_adaptor<X> { typedef adapt ISystemNavigationManager; };
struct ISystemNavigationManager : ISystemNavigationManager_raw, generate<ISystemNavigationManager> {};

// IBackRequestedEventArgs
struct IBackRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct IBackRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBackRequestedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IBackRequestedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	IBackRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBackRequestedEventArgs, X> : Windows::UI::Core::IBackRequestedEventArgs_adaptor<X> { typedef adapt IBackRequestedEventArgs; };
struct IBackRequestedEventArgs : IBackRequestedEventArgs_raw, generate<IBackRequestedEventArgs> {};

// BackRequestedEventArgs
template<typename X> struct statics<BackRequestedEventArgs, X> : X {
	typedef typename X::root_type BackRequestedEventArgs;
};
struct BackRequestedEventArgs : generate<BackRequestedEventArgs> {};

// ISystemNavigationManager2
struct ISystemNavigationManager2_raw : IInspectable {
	virtual STDMETHODIMP _get_AppViewBackButtonVisibility(Core::AppViewBackButtonVisibility *value);
	virtual STDMETHODIMP _put_AppViewBackButtonVisibility(Core::AppViewBackButtonVisibility value);
};
template<typename X> struct ISystemNavigationManager2_adaptor : X {
	union {
		struct : property {
			Core::AppViewBackButtonVisibility get() { Core::AppViewBackButtonVisibility value; hrcheck(enc(&ISystemNavigationManager2_adaptor::AppViewBackButtonVisibility)->_get_AppViewBackButtonVisibility(&value)); return value; }
			Core::AppViewBackButtonVisibility operator()() { return get(); }
			operator Core::AppViewBackButtonVisibility () { return get(); }
			void put(Core::AppViewBackButtonVisibility value) { hrcheck(enc(&ISystemNavigationManager2_adaptor::AppViewBackButtonVisibility)->_put_AppViewBackButtonVisibility(value)); }
			void operator=(Core::AppViewBackButtonVisibility value) { put(value); }
			void operator()(Core::AppViewBackButtonVisibility value) { put(value); }
		} AppViewBackButtonVisibility;
	};
	ISystemNavigationManager2_adaptor() {}
};
template<typename X> struct adapt<ISystemNavigationManager2, X> : Windows::UI::Core::ISystemNavigationManager2_adaptor<X> { typedef adapt ISystemNavigationManager2; };
struct ISystemNavigationManager2 : ISystemNavigationManager2_raw, generate<ISystemNavigationManager2> {};

// ISystemNavigationManagerStatics
struct ISystemNavigationManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(SystemNavigationManager* *loader);
};

// SystemNavigationManager
template<typename> struct SystemNavigationManager_statics {
	static ptr<SystemNavigationManager> GetForCurrentView() { SystemNavigationManager* loader; hrcheck(get_activation_factory<SystemNavigationManager, ISystemNavigationManagerStatics>()->_GetForCurrentView(&loader)); return from_abi(loader); }
};

template<typename X> struct statics<SystemNavigationManager, X> : X, Windows::UI::Core::SystemNavigationManager_statics<void> {
	typedef typename X::root_type SystemNavigationManager;
};
struct SystemNavigationManager : generate<SystemNavigationManager> {};

// ICoreWindowEventArgs
struct ICoreWindowEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value) = 0;
	virtual STDMETHODIMP _put_Handled(bool value) = 0;
};
template<typename X> struct ICoreWindowEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreWindowEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreWindowEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ICoreWindowEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreWindowEventArgs, X> : Windows::UI::Core::ICoreWindowEventArgs_adaptor<X> { typedef adapt ICoreWindowEventArgs; };
template<typename X> struct ICoreWindowEventArgs_unadaptor : X {
	STDMETHODIMP _get_Handled(bool *value) { return hrtry([&, this] { get_prop(value, Handled); }); }
	STDMETHODIMP _put_Handled(bool value) { return hrtry([&, this] { put_prop(value, Handled); }); }
};
template<typename X> struct unadapt<ICoreWindowEventArgs, X> : Windows::UI::Core::ICoreWindowEventArgs_unadaptor<X> {};
struct ICoreWindowEventArgs : ICoreWindowEventArgs_raw, generate<ICoreWindowEventArgs> {};

// IAutomationProviderRequestedEventArgs
struct IAutomationProviderRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AutomationProvider(IInspectable* *value);
	virtual STDMETHODIMP _put_AutomationProvider(IInspectable* value);
};
template<typename X> struct IAutomationProviderRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IAutomationProviderRequestedEventArgs_adaptor::AutomationProvider)->_get_AutomationProvider(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
			void put(object_ref value) { hrcheck(enc(&IAutomationProviderRequestedEventArgs_adaptor::AutomationProvider)->_put_AutomationProvider(value)); }
			void operator=(object_ref value) { put(move(value)); }
			void operator()(object_ref value) { put(move(value)); }
		} AutomationProvider;
	};
	IAutomationProviderRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAutomationProviderRequestedEventArgs, X> : Windows::UI::Core::IAutomationProviderRequestedEventArgs_adaptor<X> { typedef adapt IAutomationProviderRequestedEventArgs; };
struct IAutomationProviderRequestedEventArgs : IAutomationProviderRequestedEventArgs_raw, generate<IAutomationProviderRequestedEventArgs> {};

// ICharacterReceivedEventArgs
struct ICharacterReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_KeyCode(unsigned *value);
	virtual STDMETHODIMP _get_KeyStatus(CorePhysicalKeyStatus *value);
};
template<typename X> struct ICharacterReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICharacterReceivedEventArgs_adaptor::KeyCode)->_get_KeyCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} KeyCode;
		struct : property {
			CorePhysicalKeyStatus get() { CorePhysicalKeyStatus value; hrcheck(enc(&ICharacterReceivedEventArgs_adaptor::KeyStatus)->_get_KeyStatus(&value)); return value; }
			CorePhysicalKeyStatus operator()() { return get(); }
			operator CorePhysicalKeyStatus () { return get(); }
		} KeyStatus;
	};
	ICharacterReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICharacterReceivedEventArgs, X> : Windows::UI::Core::ICharacterReceivedEventArgs_adaptor<X> { typedef adapt ICharacterReceivedEventArgs; };
struct ICharacterReceivedEventArgs : ICharacterReceivedEventArgs_raw, generate<ICharacterReceivedEventArgs> {};

// IInputEnabledEventArgs
struct IInputEnabledEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InputEnabled(bool *value);
};
template<typename X> struct IInputEnabledEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInputEnabledEventArgs_adaptor::InputEnabled)->_get_InputEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} InputEnabled;
	};
	IInputEnabledEventArgs_adaptor() {}
};
template<typename X> struct adapt<IInputEnabledEventArgs, X> : Windows::UI::Core::IInputEnabledEventArgs_adaptor<X> { typedef adapt IInputEnabledEventArgs; };
struct IInputEnabledEventArgs : IInputEnabledEventArgs_raw, generate<IInputEnabledEventArgs> {};

// IKeyEventArgs
struct IKeyEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_VirtualKey(System::VirtualKey *value);
	virtual STDMETHODIMP _get_KeyStatus(CorePhysicalKeyStatus *value);
};
template<typename X> struct IKeyEventArgs_adaptor : X {
	union {
		struct : property {
			CorePhysicalKeyStatus get() { CorePhysicalKeyStatus value; hrcheck(enc(&IKeyEventArgs_adaptor::KeyStatus)->_get_KeyStatus(&value)); return value; }
			CorePhysicalKeyStatus operator()() { return get(); }
			operator CorePhysicalKeyStatus () { return get(); }
		} KeyStatus;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IKeyEventArgs_adaptor::VirtualKey)->_get_VirtualKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
		} VirtualKey;
	};
	IKeyEventArgs_adaptor() {}
};
template<typename X> struct adapt<IKeyEventArgs, X> : Windows::UI::Core::IKeyEventArgs_adaptor<X> { typedef adapt IKeyEventArgs; };
struct IKeyEventArgs : IKeyEventArgs_raw, generate<IKeyEventArgs> {};

// IKeyEventArgs2
struct IKeyEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IKeyEventArgs2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IKeyEventArgs2_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IKeyEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IKeyEventArgs2, X> : Windows::UI::Core::IKeyEventArgs2_adaptor<X> { typedef adapt IKeyEventArgs2; };
struct IKeyEventArgs2 : IKeyEventArgs2_raw, generate<IKeyEventArgs2> {};

// IPointerEventArgs
struct IPointerEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentPoint(Input::PointerPoint* *value);
	virtual STDMETHODIMP _get_KeyModifiers(System::VirtualKeyModifiers *value);
	virtual STDMETHODIMP _GetIntermediatePoints(Foundation::Collections::IVector<Input::PointerPoint*>* *value);
};
template<typename X> struct IPointerEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Input::PointerPoint> get() { Input::PointerPoint* value; hrcheck(enc(&IPointerEventArgs_adaptor::CurrentPoint)->_get_CurrentPoint(&value)); return from_abi(value); }
			ptr<Input::PointerPoint> operator()() { return get(); }
			operator ptr<Input::PointerPoint> () { return get(); }
			ptr<Input::PointerPoint> operator->() { return get(); }
		} CurrentPoint;
		struct : property {
			System::VirtualKeyModifiers get() { System::VirtualKeyModifiers value; hrcheck(enc(&IPointerEventArgs_adaptor::KeyModifiers)->_get_KeyModifiers(&value)); return value; }
			System::VirtualKeyModifiers operator()() { return get(); }
			operator System::VirtualKeyModifiers () { return get(); }
		} KeyModifiers;
	};
	ptr<Foundation::Collections::IVector<ptr<Input::PointerPoint>>> GetIntermediatePoints() { Foundation::Collections::IVector<Input::PointerPoint*>* value; hrcheck(X::get()->_GetIntermediatePoints(&value)); return from_abi(value); }
	IPointerEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPointerEventArgs, X> : Windows::UI::Core::IPointerEventArgs_adaptor<X> { typedef adapt IPointerEventArgs; };
struct IPointerEventArgs : IPointerEventArgs_raw, generate<IPointerEventArgs> {};

// ITouchHitTestingEventArgs
struct ITouchHitTestingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ProximityEvaluation(CoreProximityEvaluation *value);
	virtual STDMETHODIMP _put_ProximityEvaluation(CoreProximityEvaluation value);
	virtual STDMETHODIMP _get_Point(Foundation::Point *value);
	virtual STDMETHODIMP _get_BoundingBox(Foundation::Rect *value);
	virtual STDMETHODIMP _EvaluateProximityToRect(Foundation::Rect controlBoundingBox, CoreProximityEvaluation *proximityEvaluation);
	virtual STDMETHODIMP _EvaluateProximityToPolygon(unsigned controlVerticesSize, Foundation::Point *controlVertices, CoreProximityEvaluation *proximityEvaluation);
};
template<typename X> struct ITouchHitTestingEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ITouchHitTestingEventArgs_adaptor::BoundingBox)->_get_BoundingBox(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} BoundingBox;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&ITouchHitTestingEventArgs_adaptor::Point)->_get_Point(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Point;
		struct : property {
			CoreProximityEvaluation get() { CoreProximityEvaluation value; hrcheck(enc(&ITouchHitTestingEventArgs_adaptor::ProximityEvaluation)->_get_ProximityEvaluation(&value)); return value; }
			CoreProximityEvaluation operator()() { return get(); }
			operator CoreProximityEvaluation () { return get(); }
			void put(const CoreProximityEvaluation& value) { hrcheck(enc(&ITouchHitTestingEventArgs_adaptor::ProximityEvaluation)->_put_ProximityEvaluation(value)); }
			void operator=(const CoreProximityEvaluation& value) { put(value); }
			void operator()(const CoreProximityEvaluation& value) { put(value); }
		} ProximityEvaluation;
	};
	CoreProximityEvaluation EvaluateProximity(const Foundation::Rect& controlBoundingBox) { CoreProximityEvaluation proximityEvaluation; hrcheck(X::get()->_EvaluateProximityToRect(controlBoundingBox, &proximityEvaluation)); return proximityEvaluation; }
	CoreProximityEvaluation EvaluateProximity(const szarray<Foundation::Point>& controlVertices) { CoreProximityEvaluation proximityEvaluation; hrcheck(X::get()->_EvaluateProximityToPolygon(controlVertices.size, to_abi(controlVertices.p), &proximityEvaluation)); return proximityEvaluation; }
	ITouchHitTestingEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITouchHitTestingEventArgs, X> : Windows::UI::Core::ITouchHitTestingEventArgs_adaptor<X> { typedef adapt ITouchHitTestingEventArgs; };
struct ITouchHitTestingEventArgs : ITouchHitTestingEventArgs_raw, generate<ITouchHitTestingEventArgs> {};

// IClosestInteractiveBoundsRequestedEventArgs
struct IClosestInteractiveBoundsRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerPosition(Foundation::Point *value);
	virtual STDMETHODIMP _get_SearchBounds(Foundation::Rect *value);
	virtual STDMETHODIMP _get_ClosestInteractiveBounds(Foundation::Rect *value);
	virtual STDMETHODIMP _put_ClosestInteractiveBounds(Foundation::Rect value);
};
template<typename X> struct IClosestInteractiveBoundsRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IClosestInteractiveBoundsRequestedEventArgs_adaptor::ClosestInteractiveBounds)->_get_ClosestInteractiveBounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
			void put(const Foundation::Rect& value) { hrcheck(enc(&IClosestInteractiveBoundsRequestedEventArgs_adaptor::ClosestInteractiveBounds)->_put_ClosestInteractiveBounds(value)); }
			void operator=(const Foundation::Rect& value) { put(value); }
			void operator()(const Foundation::Rect& value) { put(value); }
		} ClosestInteractiveBounds;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IClosestInteractiveBoundsRequestedEventArgs_adaptor::PointerPosition)->_get_PointerPosition(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} PointerPosition;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IClosestInteractiveBoundsRequestedEventArgs_adaptor::SearchBounds)->_get_SearchBounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} SearchBounds;
	};
	IClosestInteractiveBoundsRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IClosestInteractiveBoundsRequestedEventArgs, X> : Windows::UI::Core::IClosestInteractiveBoundsRequestedEventArgs_adaptor<X> { typedef adapt IClosestInteractiveBoundsRequestedEventArgs; };
struct IClosestInteractiveBoundsRequestedEventArgs : IClosestInteractiveBoundsRequestedEventArgs_raw, generate<IClosestInteractiveBoundsRequestedEventArgs> {};

// IWindowActivatedEventArgs
struct IWindowActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_WindowActivationState(CoreWindowActivationState *value);
};
template<typename X> struct IWindowActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			CoreWindowActivationState get() { CoreWindowActivationState value; hrcheck(enc(&IWindowActivatedEventArgs_adaptor::WindowActivationState)->_get_WindowActivationState(&value)); return value; }
			CoreWindowActivationState operator()() { return get(); }
			operator CoreWindowActivationState () { return get(); }
		} WindowActivationState;
	};
	IWindowActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWindowActivatedEventArgs, X> : Windows::UI::Core::IWindowActivatedEventArgs_adaptor<X> { typedef adapt IWindowActivatedEventArgs; };
struct IWindowActivatedEventArgs : IWindowActivatedEventArgs_raw, generate<IWindowActivatedEventArgs> {};

// IWindowSizeChangedEventArgs
struct IWindowSizeChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Size(Foundation::Size *value);
};
template<typename X> struct IWindowSizeChangedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IWindowSizeChangedEventArgs_adaptor::Size)->_get_Size(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} Size;
	};
	IWindowSizeChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWindowSizeChangedEventArgs, X> : Windows::UI::Core::IWindowSizeChangedEventArgs_adaptor<X> { typedef adapt IWindowSizeChangedEventArgs; };
struct IWindowSizeChangedEventArgs : IWindowSizeChangedEventArgs_raw, generate<IWindowSizeChangedEventArgs> {};

// IVisibilityChangedEventArgs
struct IVisibilityChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Visible(bool *value);
};
template<typename X> struct IVisibilityChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IVisibilityChangedEventArgs_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Visible;
	};
	IVisibilityChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IVisibilityChangedEventArgs, X> : Windows::UI::Core::IVisibilityChangedEventArgs_adaptor<X> { typedef adapt IVisibilityChangedEventArgs; };
struct IVisibilityChangedEventArgs : IVisibilityChangedEventArgs_raw, generate<IVisibilityChangedEventArgs> {};

// ICoreWindow
struct ICoreWindow_raw : IInspectable {
	virtual STDMETHODIMP _get_AutomationHostProvider(IInspectable* *value) = 0;
	virtual STDMETHODIMP _get_Bounds(Foundation::Rect *value) = 0;
	virtual STDMETHODIMP _get_CustomProperties(Foundation::Collections::IPropertySet* *value) = 0;
	virtual STDMETHODIMP _get_Dispatcher(CoreDispatcher* *value) = 0;
	virtual STDMETHODIMP _get_FlowDirection(CoreWindowFlowDirection *value) = 0;
	virtual STDMETHODIMP _put_FlowDirection(CoreWindowFlowDirection value) = 0;
	virtual STDMETHODIMP _get_IsInputEnabled(bool *value) = 0;
	virtual STDMETHODIMP _put_IsInputEnabled(bool value) = 0;
	virtual STDMETHODIMP _get_PointerCursor(CoreCursor* *value) = 0;
	virtual STDMETHODIMP _put_PointerCursor(CoreCursor* value) = 0;
	virtual STDMETHODIMP _get_PointerPosition(Foundation::Point *value) = 0;
	virtual STDMETHODIMP _get_Visible(bool *value) = 0;
	virtual STDMETHODIMP _Activate() = 0;
	virtual STDMETHODIMP _Close() = 0;
	virtual STDMETHODIMP _GetAsyncKeyState(System::VirtualKey virtualKey, CoreVirtualKeyStates *KeyState) = 0;
	virtual STDMETHODIMP _GetKeyState(System::VirtualKey virtualKey, CoreVirtualKeyStates *KeyState) = 0;
	virtual STDMETHODIMP _ReleasePointerCapture() = 0;
	virtual STDMETHODIMP _SetPointerCapture() = 0;
	virtual STDMETHODIMP _add_Activated(Foundation::TypedEventHandler<CoreWindow*, WindowActivatedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_Activated(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_AutomationProviderRequested(Foundation::TypedEventHandler<CoreWindow*, AutomationProviderRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_AutomationProviderRequested(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_CharacterReceived(Foundation::TypedEventHandler<CoreWindow*, CharacterReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_CharacterReceived(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_Closed(Foundation::TypedEventHandler<CoreWindow*, CoreWindowEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_Closed(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_InputEnabled(Foundation::TypedEventHandler<CoreWindow*, InputEnabledEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_InputEnabled(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_KeyDown(Foundation::TypedEventHandler<CoreWindow*, KeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_KeyDown(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_KeyUp(Foundation::TypedEventHandler<CoreWindow*, KeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_KeyUp(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerCaptureLost(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerCaptureLost(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerEntered(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerEntered(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerExited(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerExited(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerMoved(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerMoved(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerPressed(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerPressed(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerReleased(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerReleased(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_TouchHitTesting(Foundation::TypedEventHandler<CoreWindow*, TouchHitTestingEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_TouchHitTesting(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerWheelChanged(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerWheelChanged(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_SizeChanged(Foundation::TypedEventHandler<CoreWindow*, WindowSizeChangedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_SizeChanged(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_VisibilityChanged(Foundation::TypedEventHandler<CoreWindow*, VisibilityChangedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_VisibilityChanged(Foundation::EventRegistrationToken cookie) = 0;
};
template<typename X> struct ICoreWindow_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&ICoreWindow_adaptor::AutomationHostProvider)->_get_AutomationHostProvider(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} AutomationHostProvider;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ICoreWindow_adaptor::Bounds)->_get_Bounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} Bounds;
		struct : property {
			ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(enc(&ICoreWindow_adaptor::CustomProperties)->_get_CustomProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
			operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
			ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
		} CustomProperties;
		struct : property {
			ptr<CoreDispatcher> get() { CoreDispatcher* value; hrcheck(enc(&ICoreWindow_adaptor::Dispatcher)->_get_Dispatcher(&value)); return from_abi(value); }
			ptr<CoreDispatcher> operator()() { return get(); }
			operator ptr<CoreDispatcher> () { return get(); }
			ptr<CoreDispatcher> operator->() { return get(); }
		} Dispatcher;
		struct : property {
			CoreWindowFlowDirection get() { CoreWindowFlowDirection value; hrcheck(enc(&ICoreWindow_adaptor::FlowDirection)->_get_FlowDirection(&value)); return value; }
			CoreWindowFlowDirection operator()() { return get(); }
			operator CoreWindowFlowDirection () { return get(); }
			void put(CoreWindowFlowDirection value) { hrcheck(enc(&ICoreWindow_adaptor::FlowDirection)->_put_FlowDirection(value)); }
			void operator=(CoreWindowFlowDirection value) { put(value); }
			void operator()(CoreWindowFlowDirection value) { put(value); }
		} FlowDirection;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreWindow_adaptor::IsInputEnabled)->_get_IsInputEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreWindow_adaptor::IsInputEnabled)->_put_IsInputEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsInputEnabled;
		struct : property {
			ptr<CoreCursor> get() { CoreCursor* value; hrcheck(enc(&ICoreWindow_adaptor::PointerCursor)->_get_PointerCursor(&value)); return from_abi(value); }
			ptr<CoreCursor> operator()() { return get(); }
			operator ptr<CoreCursor> () { return get(); }
			ptr<CoreCursor> operator->() { return get(); }
			void put(pptr<CoreCursor> value) { hrcheck(enc(&ICoreWindow_adaptor::PointerCursor)->_put_PointerCursor(value)); }
			void operator=(pptr<CoreCursor> value) { put(value); }
			void operator()(pptr<CoreCursor> value) { put(value); }
		} PointerCursor;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&ICoreWindow_adaptor::PointerPosition)->_get_PointerPosition(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} PointerPosition;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreWindow_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Visible;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<WindowActivatedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::Activated)->_add_Activated(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::Activated)->_remove_Activated(cookie)); }
		} Activated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<AutomationProviderRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::AutomationProviderRequested)->_add_AutomationProviderRequested(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::AutomationProviderRequested)->_remove_AutomationProviderRequested(cookie)); }
		} AutomationProviderRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<CharacterReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::CharacterReceived)->_add_CharacterReceived(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::CharacterReceived)->_remove_CharacterReceived(cookie)); }
		} CharacterReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<CoreWindowEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::Closed)->_add_Closed(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::Closed)->_remove_Closed(cookie)); }
		} Closed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<InputEnabledEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::InputEnabled)->_add_InputEnabled(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::InputEnabled)->_remove_InputEnabled(cookie)); }
		} InputEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<KeyEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::KeyDown)->_add_KeyDown(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::KeyDown)->_remove_KeyDown(cookie)); }
		} KeyDown;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<KeyEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::KeyUp)->_add_KeyUp(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::KeyUp)->_remove_KeyUp(cookie)); }
		} KeyUp;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::PointerCaptureLost)->_add_PointerCaptureLost(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::PointerCaptureLost)->_remove_PointerCaptureLost(cookie)); }
		} PointerCaptureLost;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::PointerEntered)->_add_PointerEntered(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::PointerEntered)->_remove_PointerEntered(cookie)); }
		} PointerEntered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::PointerExited)->_add_PointerExited(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::PointerExited)->_remove_PointerExited(cookie)); }
		} PointerExited;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::PointerMoved)->_add_PointerMoved(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::PointerMoved)->_remove_PointerMoved(cookie)); }
		} PointerMoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::PointerPressed)->_add_PointerPressed(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::PointerPressed)->_remove_PointerPressed(cookie)); }
		} PointerPressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::PointerReleased)->_add_PointerReleased(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::PointerReleased)->_remove_PointerReleased(cookie)); }
		} PointerReleased;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindow_adaptor::PointerWheelChanged)->_add_PointerWheelChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::PointerWheelChanged)->_remove_PointerWheelChanged(cookie)); }
		} PointerWheelChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<WindowSizeChangedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::SizeChanged)->_add_SizeChanged(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::SizeChanged)->_remove_SizeChanged(cookie)); }
		} SizeChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<TouchHitTestingEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::TouchHitTesting)->_add_TouchHitTesting(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::TouchHitTesting)->_remove_TouchHitTesting(cookie)); }
		} TouchHitTesting;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<VisibilityChangedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow_adaptor::VisibilityChanged)->_add_VisibilityChanged(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow_adaptor::VisibilityChanged)->_remove_VisibilityChanged(cookie)); }
		} VisibilityChanged;
	};
	void Activate() { hrcheck(X::get()->_Activate()); }
	void Close() { hrcheck(X::get()->_Close()); }
	CoreVirtualKeyStates GetAsyncKeyState(System::VirtualKey virtualKey) { CoreVirtualKeyStates KeyState; hrcheck(X::get()->_GetAsyncKeyState(virtualKey, &KeyState)); return KeyState; }
	CoreVirtualKeyStates GetKeyState(System::VirtualKey virtualKey) { CoreVirtualKeyStates KeyState; hrcheck(X::get()->_GetKeyState(virtualKey, &KeyState)); return KeyState; }
	void ReleasePointerCapture() { hrcheck(X::get()->_ReleasePointerCapture()); }
	void SetPointerCapture() { hrcheck(X::get()->_SetPointerCapture()); }
	ICoreWindow_adaptor() {}
};
template<typename X> struct adapt<ICoreWindow, X> : Windows::UI::Core::ICoreWindow_adaptor<X> { typedef adapt ICoreWindow; };
template<typename X> struct ICoreWindow_unadaptor : X {
	STDMETHODIMP _get_AutomationHostProvider(IInspectable* *value) { return hrtry([&, this] { get_prop(value, AutomationHostProvider); }); }
	STDMETHODIMP _get_Bounds(Foundation::Rect *value) { return hrtry([&, this] { get_prop(value, Bounds); }); }
	STDMETHODIMP _get_CustomProperties(Foundation::Collections::IPropertySet* *value) { return hrtry([&, this] { get_prop(value, CustomProperties); }); }
	STDMETHODIMP _get_Dispatcher(CoreDispatcher* *value) { return hrtry([&, this] { get_prop(value, Dispatcher); }); }
	STDMETHODIMP _get_FlowDirection(CoreWindowFlowDirection *value) { return hrtry([&, this] { get_prop(value, FlowDirection); }); }
	STDMETHODIMP _put_FlowDirection(CoreWindowFlowDirection value) { return hrtry([&, this] { put_prop(value, FlowDirection); }); }
	STDMETHODIMP _get_IsInputEnabled(bool *value) { return hrtry([&, this] { get_prop(value, IsInputEnabled); }); }
	STDMETHODIMP _put_IsInputEnabled(bool value) { return hrtry([&, this] { put_prop(value, IsInputEnabled); }); }
	STDMETHODIMP _get_PointerCursor(CoreCursor* *value) { return hrtry([&, this] { get_prop(value, PointerCursor); }); }
	STDMETHODIMP _put_PointerCursor(CoreCursor* value) { return hrtry([&, this] { put_prop(value, PointerCursor); }); }
	STDMETHODIMP _get_PointerPosition(Foundation::Point *value) { return hrtry([&, this] { get_prop(value, PointerPosition); }); }
	STDMETHODIMP _get_Visible(bool *value) { return hrtry([&, this] { get_prop(value, Visible); }); }
	STDMETHODIMP _Activate() { return hrtry([&, this] { X::get()->Activate(); }); }
	STDMETHODIMP _Close() { return hrtry([&, this] { X::get()->Close(); }); }
	STDMETHODIMP _GetAsyncKeyState(System::VirtualKey virtualKey, CoreVirtualKeyStates *KeyState) { return hrtry([&, this] { *KeyState = X::get()->GetAsyncKeyState(virtualKey); }); }
	STDMETHODIMP _GetKeyState(System::VirtualKey virtualKey, CoreVirtualKeyStates *KeyState) { return hrtry([&, this] { *KeyState = X::get()->GetKeyState(virtualKey); }); }
	STDMETHODIMP _ReleasePointerCapture() { return hrtry([&, this] { X::get()->ReleasePointerCapture(); }); }
	STDMETHODIMP _SetPointerCapture() { return hrtry([&, this] { X::get()->SetPointerCapture(); }); }
	STDMETHODIMP _add_Activated(Foundation::TypedEventHandler<CoreWindow*, WindowActivatedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->Activated+=handler; }); }
	STDMETHODIMP _remove_Activated(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->Activated-=cookie; }); }
	STDMETHODIMP _add_AutomationProviderRequested(Foundation::TypedEventHandler<CoreWindow*, AutomationProviderRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->AutomationProviderRequested+=handler; }); }
	STDMETHODIMP _remove_AutomationProviderRequested(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->AutomationProviderRequested-=cookie; }); }
	STDMETHODIMP _add_CharacterReceived(Foundation::TypedEventHandler<CoreWindow*, CharacterReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->CharacterReceived+=handler; }); }
	STDMETHODIMP _remove_CharacterReceived(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->CharacterReceived-=cookie; }); }
	STDMETHODIMP _add_Closed(Foundation::TypedEventHandler<CoreWindow*, CoreWindowEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->Closed+=handler; }); }
	STDMETHODIMP _remove_Closed(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->Closed-=cookie; }); }
	STDMETHODIMP _add_InputEnabled(Foundation::TypedEventHandler<CoreWindow*, InputEnabledEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->InputEnabled+=handler; }); }
	STDMETHODIMP _remove_InputEnabled(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->InputEnabled-=cookie; }); }
	STDMETHODIMP _add_KeyDown(Foundation::TypedEventHandler<CoreWindow*, KeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->KeyDown+=handler; }); }
	STDMETHODIMP _remove_KeyDown(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->KeyDown-=cookie; }); }
	STDMETHODIMP _add_KeyUp(Foundation::TypedEventHandler<CoreWindow*, KeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->KeyUp+=handler; }); }
	STDMETHODIMP _remove_KeyUp(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->KeyUp-=cookie; }); }
	STDMETHODIMP _add_PointerCaptureLost(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerCaptureLost+=handler; }); }
	STDMETHODIMP _remove_PointerCaptureLost(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerCaptureLost-=cookie; }); }
	STDMETHODIMP _add_PointerEntered(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerEntered+=handler; }); }
	STDMETHODIMP _remove_PointerEntered(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerEntered-=cookie; }); }
	STDMETHODIMP _add_PointerExited(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerExited+=handler; }); }
	STDMETHODIMP _remove_PointerExited(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerExited-=cookie; }); }
	STDMETHODIMP _add_PointerMoved(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerMoved+=handler; }); }
	STDMETHODIMP _remove_PointerMoved(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerMoved-=cookie; }); }
	STDMETHODIMP _add_PointerPressed(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerPressed+=handler; }); }
	STDMETHODIMP _remove_PointerPressed(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerPressed-=cookie; }); }
	STDMETHODIMP _add_PointerReleased(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerReleased+=handler; }); }
	STDMETHODIMP _remove_PointerReleased(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerReleased-=cookie; }); }
	STDMETHODIMP _add_TouchHitTesting(Foundation::TypedEventHandler<CoreWindow*, TouchHitTestingEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->TouchHitTesting+=handler; }); }
	STDMETHODIMP _remove_TouchHitTesting(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->TouchHitTesting-=cookie; }); }
	STDMETHODIMP _add_PointerWheelChanged(Foundation::TypedEventHandler<CoreWindow*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerWheelChanged+=handler; }); }
	STDMETHODIMP _remove_PointerWheelChanged(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerWheelChanged-=cookie; }); }
	STDMETHODIMP _add_SizeChanged(Foundation::TypedEventHandler<CoreWindow*, WindowSizeChangedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->SizeChanged+=handler; }); }
	STDMETHODIMP _remove_SizeChanged(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->SizeChanged-=cookie; }); }
	STDMETHODIMP _add_VisibilityChanged(Foundation::TypedEventHandler<CoreWindow*, VisibilityChangedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->VisibilityChanged+=handler; }); }
	STDMETHODIMP _remove_VisibilityChanged(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->VisibilityChanged-=cookie; }); }
};
template<typename X> struct unadapt<ICoreWindow, X> : Windows::UI::Core::ICoreWindow_unadaptor<X> {};
struct ICoreWindow : ICoreWindow_raw, generate<ICoreWindow> {};

// ICoreDispatcher2
struct ICoreDispatcher2_raw : IInspectable {
	virtual STDMETHODIMP _TryRunAsync(CoreDispatcherPriority priority, DispatchedHandler* agileCallback, Foundation::IAsyncOperation<bool>* *asyncOperation);
	virtual STDMETHODIMP _TryRunIdleAsync(IdleDispatchedHandler* agileCallback, Foundation::IAsyncOperation<bool>* *asyncOperation);
};
template<typename X> struct ICoreDispatcher2_adaptor : X {
	ptr<Foundation::IAsyncOperation<bool>> TryRunAsync(CoreDispatcherPriority priority, handler_ref<DispatchedHandler> agileCallback) { Foundation::IAsyncOperation<bool>* asyncOperation; hrcheck(X::get()->_TryRunAsync(priority, agileCallback, &asyncOperation)); return from_abi(asyncOperation); }
	ptr<Foundation::IAsyncOperation<bool>> TryRunIdleAsync(handler_ref<IdleDispatchedHandler> agileCallback) { Foundation::IAsyncOperation<bool>* asyncOperation; hrcheck(X::get()->_TryRunIdleAsync(agileCallback, &asyncOperation)); return from_abi(asyncOperation); }
};
template<typename X> struct adapt<ICoreDispatcher2, X> : Windows::UI::Core::ICoreDispatcher2_adaptor<X> { typedef adapt ICoreDispatcher2; };
struct ICoreDispatcher2 : ICoreDispatcher2_raw, generate<ICoreDispatcher2> {};

// ICoreDispatcherWithTaskPriority
struct ICoreDispatcherWithTaskPriority_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentPriority(CoreDispatcherPriority *value);
	virtual STDMETHODIMP _put_CurrentPriority(CoreDispatcherPriority value);
	virtual STDMETHODIMP _ShouldYield(bool *value);
	virtual STDMETHODIMP _ShouldYieldToPriority(CoreDispatcherPriority priority, bool *value);
	virtual STDMETHODIMP _StopProcessEvents();
};
template<typename X> struct ICoreDispatcherWithTaskPriority_adaptor : X {
	union {
		struct : property {
			CoreDispatcherPriority get() { CoreDispatcherPriority value; hrcheck(enc(&ICoreDispatcherWithTaskPriority_adaptor::CurrentPriority)->_get_CurrentPriority(&value)); return value; }
			CoreDispatcherPriority operator()() { return get(); }
			operator CoreDispatcherPriority () { return get(); }
			void put(CoreDispatcherPriority value) { hrcheck(enc(&ICoreDispatcherWithTaskPriority_adaptor::CurrentPriority)->_put_CurrentPriority(value)); }
			void operator=(CoreDispatcherPriority value) { put(value); }
			void operator()(CoreDispatcherPriority value) { put(value); }
		} CurrentPriority;
	};
	bool ShouldYield() { bool value; hrcheck(X::get()->_ShouldYield(&value)); return value; }
	bool ShouldYield(CoreDispatcherPriority priority) { bool value; hrcheck(X::get()->_ShouldYieldToPriority(priority, &value)); return value; }
	void StopProcessEvents() { hrcheck(X::get()->_StopProcessEvents()); }
	ICoreDispatcherWithTaskPriority_adaptor() {}
};
template<typename X> struct adapt<ICoreDispatcherWithTaskPriority, X> : Windows::UI::Core::ICoreDispatcherWithTaskPriority_adaptor<X> { typedef adapt ICoreDispatcherWithTaskPriority; };
struct ICoreDispatcherWithTaskPriority : ICoreDispatcherWithTaskPriority_raw, generate<ICoreDispatcherWithTaskPriority> {};

// ICoreAcceleratorKeys
struct ICoreAcceleratorKeys_raw : IInspectable {
	virtual STDMETHODIMP _add_AcceleratorKeyActivated(Foundation::TypedEventHandler<CoreDispatcher*, AcceleratorKeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_AcceleratorKeyActivated(Foundation::EventRegistrationToken cookie) = 0;
};
template<typename X> struct ICoreAcceleratorKeys_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreDispatcher>, ptr<AcceleratorKeyEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreAcceleratorKeys_adaptor::AcceleratorKeyActivated)->_add_AcceleratorKeyActivated(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreAcceleratorKeys_adaptor::AcceleratorKeyActivated)->_remove_AcceleratorKeyActivated(cookie)); }
		} AcceleratorKeyActivated;
	};
	ICoreAcceleratorKeys_adaptor() {}
};
template<typename X> struct adapt<ICoreAcceleratorKeys, X> : Windows::UI::Core::ICoreAcceleratorKeys_adaptor<X> { typedef adapt ICoreAcceleratorKeys; };
template<typename X> struct ICoreAcceleratorKeys_unadaptor : X {
	STDMETHODIMP _add_AcceleratorKeyActivated(Foundation::TypedEventHandler<CoreDispatcher*, AcceleratorKeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->AcceleratorKeyActivated+=handler; }); }
	STDMETHODIMP _remove_AcceleratorKeyActivated(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->AcceleratorKeyActivated-=cookie; }); }
};
template<typename X> struct unadapt<ICoreAcceleratorKeys, X> : Windows::UI::Core::ICoreAcceleratorKeys_unadaptor<X> {};
struct ICoreAcceleratorKeys : ICoreAcceleratorKeys_raw, generate<ICoreAcceleratorKeys> {};

// ICoreDispatcher
struct ICoreDispatcher_raw : IInspectable {
	virtual STDMETHODIMP _get_HasThreadAccess(bool *value);
	virtual STDMETHODIMP _ProcessEvents(CoreProcessEventsOption options);
	virtual STDMETHODIMP _RunAsync(CoreDispatcherPriority priority, DispatchedHandler* agileCallback, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _RunIdleAsync(IdleDispatchedHandler* agileCallback, Foundation::IAsyncAction* *asyncAction);
};
template<typename X> struct ICoreDispatcher_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreDispatcher_adaptor::HasThreadAccess)->_get_HasThreadAccess(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasThreadAccess;
	};
	void ProcessEvents(CoreProcessEventsOption options) { hrcheck(X::get()->_ProcessEvents(options)); }
	ptr<Foundation::IAsyncAction> RunAsync(CoreDispatcherPriority priority, handler_ref<DispatchedHandler> agileCallback) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_RunAsync(priority, agileCallback, &asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncAction> RunIdleAsync(handler_ref<IdleDispatchedHandler> agileCallback) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_RunIdleAsync(agileCallback, &asyncAction)); return from_abi(asyncAction); }
	ICoreDispatcher_adaptor() {}
};
template<typename X> struct adapt<ICoreDispatcher, X> : Windows::UI::Core::ICoreDispatcher_adaptor<X> { typedef adapt ICoreDispatcher; };
struct ICoreDispatcher : ICoreDispatcher_raw, generate<ICoreDispatcher> {};

// CoreDispatcher
template<typename X> struct statics<CoreDispatcher, X> : X {
	typedef typename X::root_type CoreDispatcher;
};
struct CoreDispatcher : generate<CoreDispatcher> {
	using ICoreDispatcherWithTaskPriority::ShouldYield;
};

// ICoreCursorFactory
struct ICoreCursorFactory : IInspectable {
	virtual STDMETHODIMP _CreateCursor(CoreCursorType type, unsigned id, CoreCursor* *cursor);
};

// ICoreCursor
struct ICoreCursor_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_Type(CoreCursorType *value);
};
template<typename X> struct ICoreCursor_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICoreCursor_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			CoreCursorType get() { CoreCursorType value; hrcheck(enc(&ICoreCursor_adaptor::Type)->_get_Type(&value)); return value; }
			CoreCursorType operator()() { return get(); }
			operator CoreCursorType () { return get(); }
		} Type;
	};
	ICoreCursor_adaptor() {}
};
template<typename X> struct adapt<ICoreCursor, X> : Windows::UI::Core::ICoreCursor_adaptor<X> { typedef adapt ICoreCursor; };
struct ICoreCursor : ICoreCursor_raw, generate<ICoreCursor> {};

// CoreCursor
template<typename> struct CoreCursor_statics {
	static CoreCursor *activate(CoreCursorType type, unsigned id) { CoreCursor *cursor; hrcheck(get_activation_factory<CoreCursor, ICoreCursorFactory>()->_CreateCursor(type, id, &cursor)); return cursor; }
};

template<typename X> struct statics<CoreCursor, X> : X, Windows::UI::Core::CoreCursor_statics<void> {
	using Windows::UI::Core::CoreCursor_statics<void>::activate;
	typedef typename X::root_type CoreCursor;
};
struct CoreCursor : generate<CoreCursor> {};

// ICoreWindowStatic
struct ICoreWindowStatic : IInspectable {
	virtual STDMETHODIMP _GetForCurrentThread(CoreWindow* *ppWindow);
};

// ICoreWindow5
struct ICoreWindow5_raw : IInspectable {
	virtual STDMETHODIMP _get_DispatcherQueue(System::DispatcherQueue* *value);
	virtual STDMETHODIMP _get_ActivationMode(CoreWindowActivationMode *value);
};
template<typename X> struct ICoreWindow5_adaptor : X {
	union {
		struct : property {
			CoreWindowActivationMode get() { CoreWindowActivationMode value; hrcheck(enc(&ICoreWindow5_adaptor::ActivationMode)->_get_ActivationMode(&value)); return value; }
			CoreWindowActivationMode operator()() { return get(); }
			operator CoreWindowActivationMode () { return get(); }
		} ActivationMode;
		struct : property {
			ptr<System::DispatcherQueue> get() { System::DispatcherQueue* value; hrcheck(enc(&ICoreWindow5_adaptor::DispatcherQueue)->_get_DispatcherQueue(&value)); return from_abi(value); }
			ptr<System::DispatcherQueue> operator()() { return get(); }
			operator ptr<System::DispatcherQueue> () { return get(); }
			ptr<System::DispatcherQueue> operator->() { return get(); }
		} DispatcherQueue;
	};
	ICoreWindow5_adaptor() {}
};
template<typename X> struct adapt<ICoreWindow5, X> : Windows::UI::Core::ICoreWindow5_adaptor<X> { typedef adapt ICoreWindow5; };
struct ICoreWindow5 : ICoreWindow5_raw, generate<ICoreWindow5> {};

// ICoreWindow4
struct ICoreWindow4_raw : IInspectable {
	virtual STDMETHODIMP _add_ResizeStarted(Foundation::TypedEventHandler<CoreWindow*, IInspectable*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ResizeStarted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ResizeCompleted(Foundation::TypedEventHandler<CoreWindow*, IInspectable*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ResizeCompleted(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ICoreWindow4_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, object>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow4_adaptor::ResizeCompleted)->_add_ResizeCompleted(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow4_adaptor::ResizeCompleted)->_remove_ResizeCompleted(cookie)); }
		} ResizeCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, object>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow4_adaptor::ResizeStarted)->_add_ResizeStarted(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow4_adaptor::ResizeStarted)->_remove_ResizeStarted(cookie)); }
		} ResizeStarted;
	};
	ICoreWindow4_adaptor() {}
};
template<typename X> struct adapt<ICoreWindow4, X> : Windows::UI::Core::ICoreWindow4_adaptor<X> { typedef adapt ICoreWindow4; };
struct ICoreWindow4 : ICoreWindow4_raw, generate<ICoreWindow4> {};

// ICoreWindow3
struct ICoreWindow3_raw : IInspectable {
	virtual STDMETHODIMP _add_ClosestInteractiveBoundsRequested(Foundation::TypedEventHandler<CoreWindow*, ClosestInteractiveBoundsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ClosestInteractiveBoundsRequested(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _GetCurrentKeyEventDeviceId(HSTRING *value);
};
template<typename X> struct ICoreWindow3_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<ClosestInteractiveBoundsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreWindow3_adaptor::ClosestInteractiveBoundsRequested)->_add_ClosestInteractiveBoundsRequested(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindow3_adaptor::ClosestInteractiveBoundsRequested)->_remove_ClosestInteractiveBoundsRequested(cookie)); }
		} ClosestInteractiveBoundsRequested;
	};
	hstring GetCurrentKeyEventDeviceId() { HSTRING value; hrcheck(X::get()->_GetCurrentKeyEventDeviceId(&value)); return from_abi(value); }
	ICoreWindow3_adaptor() {}
};
template<typename X> struct adapt<ICoreWindow3, X> : Windows::UI::Core::ICoreWindow3_adaptor<X> { typedef adapt ICoreWindow3; };
struct ICoreWindow3 : ICoreWindow3_raw, generate<ICoreWindow3> {};

// ICorePointerRedirector
struct ICorePointerRedirector_raw : IInspectable {
	virtual STDMETHODIMP _add_PointerRoutedAway(Foundation::TypedEventHandler<ICorePointerRedirector*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerRoutedAway(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerRoutedTo(Foundation::TypedEventHandler<ICorePointerRedirector*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerRoutedTo(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerRoutedReleased(Foundation::TypedEventHandler<ICorePointerRedirector*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerRoutedReleased(Foundation::EventRegistrationToken cookie) = 0;
};
template<typename X> struct ICorePointerRedirector_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ICorePointerRedirector>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerRedirector_adaptor::PointerRoutedAway)->_add_PointerRoutedAway(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerRedirector_adaptor::PointerRoutedAway)->_remove_PointerRoutedAway(cookie)); }
		} PointerRoutedAway;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ICorePointerRedirector>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerRedirector_adaptor::PointerRoutedReleased)->_add_PointerRoutedReleased(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerRedirector_adaptor::PointerRoutedReleased)->_remove_PointerRoutedReleased(cookie)); }
		} PointerRoutedReleased;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ICorePointerRedirector>, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerRedirector_adaptor::PointerRoutedTo)->_add_PointerRoutedTo(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerRedirector_adaptor::PointerRoutedTo)->_remove_PointerRoutedTo(cookie)); }
		} PointerRoutedTo;
	};
	ICorePointerRedirector_adaptor() {}
};
template<typename X> struct adapt<ICorePointerRedirector, X> : Windows::UI::Core::ICorePointerRedirector_adaptor<X> { typedef adapt ICorePointerRedirector; };
template<typename X> struct ICorePointerRedirector_unadaptor : X {
	STDMETHODIMP _add_PointerRoutedAway(Foundation::TypedEventHandler<ICorePointerRedirector*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerRoutedAway+=handler; }); }
	STDMETHODIMP _remove_PointerRoutedAway(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerRoutedAway-=cookie; }); }
	STDMETHODIMP _add_PointerRoutedTo(Foundation::TypedEventHandler<ICorePointerRedirector*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerRoutedTo+=handler; }); }
	STDMETHODIMP _remove_PointerRoutedTo(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerRoutedTo-=cookie; }); }
	STDMETHODIMP _add_PointerRoutedReleased(Foundation::TypedEventHandler<ICorePointerRedirector*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerRoutedReleased+=handler; }); }
	STDMETHODIMP _remove_PointerRoutedReleased(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerRoutedReleased-=cookie; }); }
};
template<typename X> struct unadapt<ICorePointerRedirector, X> : Windows::UI::Core::ICorePointerRedirector_unadaptor<X> {};
struct ICorePointerRedirector : ICorePointerRedirector_raw, generate<ICorePointerRedirector> {};

// ICoreWindow2
struct ICoreWindow2_raw : IInspectable {
	virtual STDMETHODIMP _put_PointerPosition(Foundation::Point value);
};
template<typename X> struct ICoreWindow2_adaptor : X {
	union {
		struct : property {
			void put(const Foundation::Point& value) { hrcheck(enc(&ICoreWindow2_adaptor::PointerPosition)->_put_PointerPosition(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} PointerPosition;
	};
	ICoreWindow2_adaptor() {}
};
template<typename X> struct adapt<ICoreWindow2, X> : Windows::UI::Core::ICoreWindow2_adaptor<X> { typedef adapt ICoreWindow2; };
struct ICoreWindow2 : ICoreWindow2_raw, generate<ICoreWindow2> {};

// CoreWindow
template<typename> struct CoreWindow_statics {
	static ptr<CoreWindow> GetForCurrentThread() { CoreWindow* ppWindow; hrcheck(get_activation_factory<CoreWindow, ICoreWindowStatic>()->_GetForCurrentThread(&ppWindow)); return from_abi(ppWindow); }
};

template<typename X> struct statics<CoreWindow, X> : X, Windows::UI::Core::CoreWindow_statics<void> {
	typedef typename X::root_type CoreWindow;
};
struct CoreWindow : generate<CoreWindow> {
	using ICoreWindow2::PointerPosition;
};

// WindowActivatedEventArgs
template<typename X> struct statics<WindowActivatedEventArgs, X> : X {
	typedef typename X::root_type WindowActivatedEventArgs;
};
struct WindowActivatedEventArgs : generate<WindowActivatedEventArgs> {};

// AutomationProviderRequestedEventArgs
template<typename X> struct statics<AutomationProviderRequestedEventArgs, X> : X {
	typedef typename X::root_type AutomationProviderRequestedEventArgs;
};
struct AutomationProviderRequestedEventArgs : generate<AutomationProviderRequestedEventArgs> {};

// CharacterReceivedEventArgs
template<typename X> struct statics<CharacterReceivedEventArgs, X> : X {
	typedef typename X::root_type CharacterReceivedEventArgs;
};
struct CharacterReceivedEventArgs : generate<CharacterReceivedEventArgs> {};

// CoreWindowEventArgs
template<typename X> struct statics<CoreWindowEventArgs, X> : X {
	typedef typename X::root_type CoreWindowEventArgs;
};
struct CoreWindowEventArgs : generate<CoreWindowEventArgs> {};

// InputEnabledEventArgs
template<typename X> struct statics<InputEnabledEventArgs, X> : X {
	typedef typename X::root_type InputEnabledEventArgs;
};
struct InputEnabledEventArgs : generate<InputEnabledEventArgs> {};

// KeyEventArgs
template<typename X> struct statics<KeyEventArgs, X> : X {
	typedef typename X::root_type KeyEventArgs;
};
struct KeyEventArgs : generate<KeyEventArgs> {};

// PointerEventArgs
template<typename X> struct statics<PointerEventArgs, X> : X {
	typedef typename X::root_type PointerEventArgs;
};
struct PointerEventArgs : generate<PointerEventArgs> {};

// TouchHitTestingEventArgs
template<typename X> struct statics<TouchHitTestingEventArgs, X> : X {
	typedef typename X::root_type TouchHitTestingEventArgs;
};
struct TouchHitTestingEventArgs : generate<TouchHitTestingEventArgs> {
	using ITouchHitTestingEventArgs::EvaluateProximity;
};

// WindowSizeChangedEventArgs
template<typename X> struct statics<WindowSizeChangedEventArgs, X> : X {
	typedef typename X::root_type WindowSizeChangedEventArgs;
};
struct WindowSizeChangedEventArgs : generate<WindowSizeChangedEventArgs> {};

// VisibilityChangedEventArgs
template<typename X> struct statics<VisibilityChangedEventArgs, X> : X {
	typedef typename X::root_type VisibilityChangedEventArgs;
};
struct VisibilityChangedEventArgs : generate<VisibilityChangedEventArgs> {};

// ClosestInteractiveBoundsRequestedEventArgs
template<typename X> struct statics<ClosestInteractiveBoundsRequestedEventArgs, X> : X {
	typedef typename X::root_type ClosestInteractiveBoundsRequestedEventArgs;
};
struct ClosestInteractiveBoundsRequestedEventArgs : generate<ClosestInteractiveBoundsRequestedEventArgs> {};

// DispatchedHandler
struct DispatchedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke() = 0;
};

// IdleDispatchedHandler
struct IdleDispatchedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IdleDispatchedHandlerArgs* e) = 0;
};

// IIdleDispatchedHandlerArgs
struct IIdleDispatchedHandlerArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsDispatcherIdle(bool *value);
};
template<typename X> struct IIdleDispatchedHandlerArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IIdleDispatchedHandlerArgs_adaptor::IsDispatcherIdle)->_get_IsDispatcherIdle(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDispatcherIdle;
	};
	IIdleDispatchedHandlerArgs_adaptor() {}
};
template<typename X> struct adapt<IIdleDispatchedHandlerArgs, X> : Windows::UI::Core::IIdleDispatchedHandlerArgs_adaptor<X> { typedef adapt IIdleDispatchedHandlerArgs; };
struct IIdleDispatchedHandlerArgs : IIdleDispatchedHandlerArgs_raw, generate<IIdleDispatchedHandlerArgs> {};

// IdleDispatchedHandlerArgs
template<typename X> struct statics<IdleDispatchedHandlerArgs, X> : X {
	typedef typename X::root_type IdleDispatchedHandlerArgs;
};
struct IdleDispatchedHandlerArgs : generate<IdleDispatchedHandlerArgs> {};

// IAcceleratorKeyEventArgs
struct IAcceleratorKeyEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_EventType(CoreAcceleratorKeyEventType *value);
	virtual STDMETHODIMP _get_VirtualKey(System::VirtualKey *value);
	virtual STDMETHODIMP _get_KeyStatus(CorePhysicalKeyStatus *value);
};
template<typename X> struct IAcceleratorKeyEventArgs_adaptor : X {
	union {
		struct : property {
			CoreAcceleratorKeyEventType get() { CoreAcceleratorKeyEventType value; hrcheck(enc(&IAcceleratorKeyEventArgs_adaptor::EventType)->_get_EventType(&value)); return value; }
			CoreAcceleratorKeyEventType operator()() { return get(); }
			operator CoreAcceleratorKeyEventType () { return get(); }
		} EventType;
		struct : property {
			CorePhysicalKeyStatus get() { CorePhysicalKeyStatus value; hrcheck(enc(&IAcceleratorKeyEventArgs_adaptor::KeyStatus)->_get_KeyStatus(&value)); return value; }
			CorePhysicalKeyStatus operator()() { return get(); }
			operator CorePhysicalKeyStatus () { return get(); }
		} KeyStatus;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IAcceleratorKeyEventArgs_adaptor::VirtualKey)->_get_VirtualKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
		} VirtualKey;
	};
	IAcceleratorKeyEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAcceleratorKeyEventArgs, X> : Windows::UI::Core::IAcceleratorKeyEventArgs_adaptor<X> { typedef adapt IAcceleratorKeyEventArgs; };
struct IAcceleratorKeyEventArgs : IAcceleratorKeyEventArgs_raw, generate<IAcceleratorKeyEventArgs> {};

// IAcceleratorKeyEventArgs2
struct IAcceleratorKeyEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IAcceleratorKeyEventArgs2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAcceleratorKeyEventArgs2_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IAcceleratorKeyEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IAcceleratorKeyEventArgs2, X> : Windows::UI::Core::IAcceleratorKeyEventArgs2_adaptor<X> { typedef adapt IAcceleratorKeyEventArgs2; };
struct IAcceleratorKeyEventArgs2 : IAcceleratorKeyEventArgs2_raw, generate<IAcceleratorKeyEventArgs2> {};

// AcceleratorKeyEventArgs
template<typename X> struct statics<AcceleratorKeyEventArgs, X> : X {
	typedef typename X::root_type AcceleratorKeyEventArgs;
};
struct AcceleratorKeyEventArgs : generate<AcceleratorKeyEventArgs> {};

// CoreAcceleratorKeys
template<typename X> struct statics<CoreAcceleratorKeys, X> : X {
	typedef typename X::root_type CoreAcceleratorKeys;
};
struct CoreAcceleratorKeys : generate<CoreAcceleratorKeys> {};

// IInitializeWithCoreWindow
struct IInitializeWithCoreWindow_raw : IInspectable {
	virtual STDMETHODIMP _Initialize(CoreWindow* window) = 0;
};
template<typename X> struct IInitializeWithCoreWindow_adaptor : X {
	void Initialize(pptr<CoreWindow> window) { hrcheck(X::get()->_Initialize(window)); }
};
template<typename X> struct adapt<IInitializeWithCoreWindow, X> : Windows::UI::Core::IInitializeWithCoreWindow_adaptor<X> { typedef adapt IInitializeWithCoreWindow; };
template<typename X> struct IInitializeWithCoreWindow_unadaptor : X {
	STDMETHODIMP _Initialize(CoreWindow* window) { return hrtry([&, this] { X::get()->Initialize(window); }); }
};
template<typename X> struct unadapt<IInitializeWithCoreWindow, X> : Windows::UI::Core::IInitializeWithCoreWindow_unadaptor<X> {};
struct IInitializeWithCoreWindow : IInitializeWithCoreWindow_raw, generate<IInitializeWithCoreWindow> {};

// ICoreWindowResizeManager
struct ICoreWindowResizeManager_raw : IInspectable {
	virtual STDMETHODIMP _NotifyLayoutCompleted();
};
template<typename X> struct ICoreWindowResizeManager_adaptor : X {
	void NotifyLayoutCompleted() { hrcheck(X::get()->_NotifyLayoutCompleted()); }
};
template<typename X> struct adapt<ICoreWindowResizeManager, X> : Windows::UI::Core::ICoreWindowResizeManager_adaptor<X> { typedef adapt ICoreWindowResizeManager; };
struct ICoreWindowResizeManager : ICoreWindowResizeManager_raw, generate<ICoreWindowResizeManager> {};

// ICoreWindowResizeManagerLayoutCapability
struct ICoreWindowResizeManagerLayoutCapability_raw : IInspectable {
	virtual STDMETHODIMP _put_ShouldWaitForLayoutCompletion(bool value);
	virtual STDMETHODIMP _get_ShouldWaitForLayoutCompletion(bool *value);
};
template<typename X> struct ICoreWindowResizeManagerLayoutCapability_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreWindowResizeManagerLayoutCapability_adaptor::ShouldWaitForLayoutCompletion)->_get_ShouldWaitForLayoutCompletion(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreWindowResizeManagerLayoutCapability_adaptor::ShouldWaitForLayoutCompletion)->_put_ShouldWaitForLayoutCompletion(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShouldWaitForLayoutCompletion;
	};
	ICoreWindowResizeManagerLayoutCapability_adaptor() {}
};
template<typename X> struct adapt<ICoreWindowResizeManagerLayoutCapability, X> : Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability_adaptor<X> { typedef adapt ICoreWindowResizeManagerLayoutCapability; };
struct ICoreWindowResizeManagerLayoutCapability : ICoreWindowResizeManagerLayoutCapability_raw, generate<ICoreWindowResizeManagerLayoutCapability> {};

// ICoreWindowResizeManagerStatics
struct ICoreWindowResizeManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(Core::CoreWindowResizeManager* *CoreWindowResizeManager);
};

// CoreWindowResizeManager
template<typename> struct CoreWindowResizeManager_statics {
	static ptr<Core::CoreWindowResizeManager> GetForCurrentView() { Core::CoreWindowResizeManager* CoreWindowResizeManager; hrcheck(get_activation_factory<Core::CoreWindowResizeManager, ICoreWindowResizeManagerStatics>()->_GetForCurrentView(&CoreWindowResizeManager)); return from_abi(CoreWindowResizeManager); }
};

template<typename X> struct statics<CoreWindowResizeManager, X> : X, Windows::UI::Core::CoreWindowResizeManager_statics<void> {
	typedef typename X::root_type CoreWindowResizeManager;
};
struct CoreWindowResizeManager : generate<CoreWindowResizeManager> {};

// ICoreInputSourceBase
struct ICoreInputSourceBase_raw : IInspectable {
	virtual STDMETHODIMP _get_Dispatcher(CoreDispatcher* *value) = 0;
	virtual STDMETHODIMP _get_IsInputEnabled(bool *value) = 0;
	virtual STDMETHODIMP _put_IsInputEnabled(bool value) = 0;
	virtual STDMETHODIMP _add_InputEnabled(Foundation::TypedEventHandler<IInspectable*, InputEnabledEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) = 0;
	virtual STDMETHODIMP _remove_InputEnabled(Foundation::EventRegistrationToken cookie) = 0;
};
template<typename X> struct ICoreInputSourceBase_adaptor : X {
	union {
		struct : property {
			ptr<CoreDispatcher> get() { CoreDispatcher* value; hrcheck(enc(&ICoreInputSourceBase_adaptor::Dispatcher)->_get_Dispatcher(&value)); return from_abi(value); }
			ptr<CoreDispatcher> operator()() { return get(); }
			operator ptr<CoreDispatcher> () { return get(); }
			ptr<CoreDispatcher> operator->() { return get(); }
		} Dispatcher;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreInputSourceBase_adaptor::IsInputEnabled)->_get_IsInputEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreInputSourceBase_adaptor::IsInputEnabled)->_put_IsInputEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsInputEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<InputEnabledEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreInputSourceBase_adaptor::InputEnabled)->_add_InputEnabled(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInputSourceBase_adaptor::InputEnabled)->_remove_InputEnabled(cookie)); }
		} InputEnabled;
	};
	ICoreInputSourceBase_adaptor() {}
};
template<typename X> struct adapt<ICoreInputSourceBase, X> : Windows::UI::Core::ICoreInputSourceBase_adaptor<X> { typedef adapt ICoreInputSourceBase; };
template<typename X> struct ICoreInputSourceBase_unadaptor : X {
	STDMETHODIMP _get_Dispatcher(CoreDispatcher* *value) { return hrtry([&, this] { get_prop(value, Dispatcher); }); }
	STDMETHODIMP _get_IsInputEnabled(bool *value) { return hrtry([&, this] { get_prop(value, IsInputEnabled); }); }
	STDMETHODIMP _put_IsInputEnabled(bool value) { return hrtry([&, this] { put_prop(value, IsInputEnabled); }); }
	STDMETHODIMP _add_InputEnabled(Foundation::TypedEventHandler<IInspectable*, InputEnabledEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie) { return hrtry([&, this] { *pCookie = X::get()->InputEnabled+=handler; }); }
	STDMETHODIMP _remove_InputEnabled(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->InputEnabled-=cookie; }); }
};
template<typename X> struct unadapt<ICoreInputSourceBase, X> : Windows::UI::Core::ICoreInputSourceBase_unadaptor<X> {};
struct ICoreInputSourceBase : ICoreInputSourceBase_raw, generate<ICoreInputSourceBase> {};

// ICorePointerInputSource
struct ICorePointerInputSource_raw : IInspectable {
	virtual STDMETHODIMP _ReleasePointerCapture() = 0;
	virtual STDMETHODIMP _SetPointerCapture() = 0;
	virtual STDMETHODIMP _get_HasCapture(bool *value) = 0;
	virtual STDMETHODIMP _get_PointerPosition(Foundation::Point *value) = 0;
	virtual STDMETHODIMP _get_PointerCursor(CoreCursor* *value) = 0;
	virtual STDMETHODIMP _put_PointerCursor(CoreCursor* value) = 0;
	virtual STDMETHODIMP _add_PointerCaptureLost(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerCaptureLost(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerEntered(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerEntered(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerExited(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerExited(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerMoved(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerMoved(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerPressed(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerPressed(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerReleased(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerReleased(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_PointerWheelChanged(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_PointerWheelChanged(Foundation::EventRegistrationToken cookie) = 0;
};
template<typename X> struct ICorePointerInputSource_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICorePointerInputSource_adaptor::HasCapture)->_get_HasCapture(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasCapture;
		struct : property {
			ptr<CoreCursor> get() { CoreCursor* value; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerCursor)->_get_PointerCursor(&value)); return from_abi(value); }
			ptr<CoreCursor> operator()() { return get(); }
			operator ptr<CoreCursor> () { return get(); }
			ptr<CoreCursor> operator->() { return get(); }
			void put(pptr<CoreCursor> value) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerCursor)->_put_PointerCursor(value)); }
			void operator=(pptr<CoreCursor> value) { put(value); }
			void operator()(pptr<CoreCursor> value) { put(value); }
		} PointerCursor;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerPosition)->_get_PointerPosition(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} PointerPosition;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerCaptureLost)->_add_PointerCaptureLost(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerCaptureLost)->_remove_PointerCaptureLost(cookie)); }
		} PointerCaptureLost;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerEntered)->_add_PointerEntered(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerEntered)->_remove_PointerEntered(cookie)); }
		} PointerEntered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerExited)->_add_PointerExited(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerExited)->_remove_PointerExited(cookie)); }
		} PointerExited;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerMoved)->_add_PointerMoved(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerMoved)->_remove_PointerMoved(cookie)); }
		} PointerMoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerPressed)->_add_PointerPressed(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerPressed)->_remove_PointerPressed(cookie)); }
		} PointerPressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerReleased)->_add_PointerReleased(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerReleased)->_remove_PointerReleased(cookie)); }
		} PointerReleased;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICorePointerInputSource_adaptor::PointerWheelChanged)->_add_PointerWheelChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICorePointerInputSource_adaptor::PointerWheelChanged)->_remove_PointerWheelChanged(cookie)); }
		} PointerWheelChanged;
	};
	void ReleasePointerCapture() { hrcheck(X::get()->_ReleasePointerCapture()); }
	void SetPointerCapture() { hrcheck(X::get()->_SetPointerCapture()); }
	ICorePointerInputSource_adaptor() {}
};
template<typename X> struct adapt<ICorePointerInputSource, X> : Windows::UI::Core::ICorePointerInputSource_adaptor<X> { typedef adapt ICorePointerInputSource; };
template<typename X> struct ICorePointerInputSource_unadaptor : X {
	STDMETHODIMP _ReleasePointerCapture() { return hrtry([&, this] { X::get()->ReleasePointerCapture(); }); }
	STDMETHODIMP _SetPointerCapture() { return hrtry([&, this] { X::get()->SetPointerCapture(); }); }
	STDMETHODIMP _get_HasCapture(bool *value) { return hrtry([&, this] { get_prop(value, HasCapture); }); }
	STDMETHODIMP _get_PointerPosition(Foundation::Point *value) { return hrtry([&, this] { get_prop(value, PointerPosition); }); }
	STDMETHODIMP _get_PointerCursor(CoreCursor* *value) { return hrtry([&, this] { get_prop(value, PointerCursor); }); }
	STDMETHODIMP _put_PointerCursor(CoreCursor* value) { return hrtry([&, this] { put_prop(value, PointerCursor); }); }
	STDMETHODIMP _add_PointerCaptureLost(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerCaptureLost+=handler; }); }
	STDMETHODIMP _remove_PointerCaptureLost(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerCaptureLost-=cookie; }); }
	STDMETHODIMP _add_PointerEntered(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerEntered+=handler; }); }
	STDMETHODIMP _remove_PointerEntered(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerEntered-=cookie; }); }
	STDMETHODIMP _add_PointerExited(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerExited+=handler; }); }
	STDMETHODIMP _remove_PointerExited(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerExited-=cookie; }); }
	STDMETHODIMP _add_PointerMoved(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerMoved+=handler; }); }
	STDMETHODIMP _remove_PointerMoved(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerMoved-=cookie; }); }
	STDMETHODIMP _add_PointerPressed(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerPressed+=handler; }); }
	STDMETHODIMP _remove_PointerPressed(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerPressed-=cookie; }); }
	STDMETHODIMP _add_PointerReleased(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerReleased+=handler; }); }
	STDMETHODIMP _remove_PointerReleased(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerReleased-=cookie; }); }
	STDMETHODIMP _add_PointerWheelChanged(Foundation::TypedEventHandler<IInspectable*, PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->PointerWheelChanged+=handler; }); }
	STDMETHODIMP _remove_PointerWheelChanged(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->PointerWheelChanged-=cookie; }); }
};
template<typename X> struct unadapt<ICorePointerInputSource, X> : Windows::UI::Core::ICorePointerInputSource_unadaptor<X> {};
struct ICorePointerInputSource : ICorePointerInputSource_raw, generate<ICorePointerInputSource> {};

// ICorePointerInputSource2
struct ICorePointerInputSource2_raw : IInspectable {
	virtual STDMETHODIMP _get_DispatcherQueue(System::DispatcherQueue* *value) = 0;
};
template<typename X> struct ICorePointerInputSource2_adaptor : X {
	union {
		struct : property {
			ptr<System::DispatcherQueue> get() { System::DispatcherQueue* value; hrcheck(enc(&ICorePointerInputSource2_adaptor::DispatcherQueue)->_get_DispatcherQueue(&value)); return from_abi(value); }
			ptr<System::DispatcherQueue> operator()() { return get(); }
			operator ptr<System::DispatcherQueue> () { return get(); }
			ptr<System::DispatcherQueue> operator->() { return get(); }
		} DispatcherQueue;
	};
	ICorePointerInputSource2_adaptor() {}
};
template<typename X> struct adapt<ICorePointerInputSource2, X> : Windows::UI::Core::ICorePointerInputSource2_adaptor<X> { typedef adapt ICorePointerInputSource2; };
template<typename X> struct ICorePointerInputSource2_unadaptor : X {
	STDMETHODIMP _get_DispatcherQueue(System::DispatcherQueue* *value) { return hrtry([&, this] { get_prop(value, DispatcherQueue); }); }
};
template<typename X> struct unadapt<ICorePointerInputSource2, X> : Windows::UI::Core::ICorePointerInputSource2_unadaptor<X> {};
struct ICorePointerInputSource2 : ICorePointerInputSource2_raw, generate<ICorePointerInputSource2> {};

// ICoreKeyboardInputSource
struct ICoreKeyboardInputSource_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentKeyState(System::VirtualKey virtualKey, CoreVirtualKeyStates *KeyState);
	virtual STDMETHODIMP _add_CharacterReceived(Foundation::TypedEventHandler<IInspectable*, CharacterReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_CharacterReceived(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_KeyDown(Foundation::TypedEventHandler<IInspectable*, KeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_KeyDown(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_KeyUp(Foundation::TypedEventHandler<IInspectable*, KeyEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_KeyUp(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ICoreKeyboardInputSource_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<CharacterReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreKeyboardInputSource_adaptor::CharacterReceived)->_add_CharacterReceived(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreKeyboardInputSource_adaptor::CharacterReceived)->_remove_CharacterReceived(cookie)); }
		} CharacterReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<KeyEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreKeyboardInputSource_adaptor::KeyDown)->_add_KeyDown(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreKeyboardInputSource_adaptor::KeyDown)->_remove_KeyDown(cookie)); }
		} KeyDown;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<KeyEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreKeyboardInputSource_adaptor::KeyUp)->_add_KeyUp(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreKeyboardInputSource_adaptor::KeyUp)->_remove_KeyUp(cookie)); }
		} KeyUp;
	};
	CoreVirtualKeyStates GetCurrentKeyState(System::VirtualKey virtualKey) { CoreVirtualKeyStates KeyState; hrcheck(X::get()->_GetCurrentKeyState(virtualKey, &KeyState)); return KeyState; }
	ICoreKeyboardInputSource_adaptor() {}
};
template<typename X> struct adapt<ICoreKeyboardInputSource, X> : Windows::UI::Core::ICoreKeyboardInputSource_adaptor<X> { typedef adapt ICoreKeyboardInputSource; };
struct ICoreKeyboardInputSource : ICoreKeyboardInputSource_raw, generate<ICoreKeyboardInputSource> {};

// ICoreKeyboardInputSource2
struct ICoreKeyboardInputSource2_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentKeyEventDeviceId(HSTRING *value);
};
template<typename X> struct ICoreKeyboardInputSource2_adaptor : X {
	hstring GetCurrentKeyEventDeviceId() { HSTRING value; hrcheck(X::get()->_GetCurrentKeyEventDeviceId(&value)); return from_abi(value); }
};
template<typename X> struct adapt<ICoreKeyboardInputSource2, X> : Windows::UI::Core::ICoreKeyboardInputSource2_adaptor<X> { typedef adapt ICoreKeyboardInputSource2; };
struct ICoreKeyboardInputSource2 : ICoreKeyboardInputSource2_raw, generate<ICoreKeyboardInputSource2> {};

// ICoreComponentFocusable
struct ICoreComponentFocusable_raw : IInspectable {
	virtual STDMETHODIMP _get_HasFocus(bool *value);
	virtual STDMETHODIMP _add_GotFocus(Foundation::TypedEventHandler<IInspectable*, CoreWindowEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_GotFocus(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_LostFocus(Foundation::TypedEventHandler<IInspectable*, CoreWindowEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_LostFocus(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ICoreComponentFocusable_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreComponentFocusable_adaptor::HasFocus)->_get_HasFocus(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasFocus;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<CoreWindowEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreComponentFocusable_adaptor::GotFocus)->_add_GotFocus(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreComponentFocusable_adaptor::GotFocus)->_remove_GotFocus(cookie)); }
		} GotFocus;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<CoreWindowEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreComponentFocusable_adaptor::LostFocus)->_add_LostFocus(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreComponentFocusable_adaptor::LostFocus)->_remove_LostFocus(cookie)); }
		} LostFocus;
	};
	ICoreComponentFocusable_adaptor() {}
};
template<typename X> struct adapt<ICoreComponentFocusable, X> : Windows::UI::Core::ICoreComponentFocusable_adaptor<X> { typedef adapt ICoreComponentFocusable; };
struct ICoreComponentFocusable : ICoreComponentFocusable_raw, generate<ICoreComponentFocusable> {};

// ICoreTouchHitTesting
struct ICoreTouchHitTesting_raw : IInspectable {
	virtual STDMETHODIMP _add_TouchHitTesting(Foundation::TypedEventHandler<IInspectable*, TouchHitTestingEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_TouchHitTesting(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ICoreTouchHitTesting_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<TouchHitTestingEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreTouchHitTesting_adaptor::TouchHitTesting)->_add_TouchHitTesting(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreTouchHitTesting_adaptor::TouchHitTesting)->_remove_TouchHitTesting(cookie)); }
		} TouchHitTesting;
	};
	ICoreTouchHitTesting_adaptor() {}
};
template<typename X> struct adapt<ICoreTouchHitTesting, X> : Windows::UI::Core::ICoreTouchHitTesting_adaptor<X> { typedef adapt ICoreTouchHitTesting; };
struct ICoreTouchHitTesting : ICoreTouchHitTesting_raw, generate<ICoreTouchHitTesting> {};

// ICoreClosestInteractiveBoundsRequested
struct ICoreClosestInteractiveBoundsRequested_raw : IInspectable {
	virtual STDMETHODIMP _add_ClosestInteractiveBoundsRequested(Foundation::TypedEventHandler<CoreComponentInputSource*, ClosestInteractiveBoundsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ClosestInteractiveBoundsRequested(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ICoreClosestInteractiveBoundsRequested_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreComponentInputSource>, ptr<ClosestInteractiveBoundsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&ICoreClosestInteractiveBoundsRequested_adaptor::ClosestInteractiveBoundsRequested)->_add_ClosestInteractiveBoundsRequested(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreClosestInteractiveBoundsRequested_adaptor::ClosestInteractiveBoundsRequested)->_remove_ClosestInteractiveBoundsRequested(cookie)); }
		} ClosestInteractiveBoundsRequested;
	};
	ICoreClosestInteractiveBoundsRequested_adaptor() {}
};
template<typename X> struct adapt<ICoreClosestInteractiveBoundsRequested, X> : Windows::UI::Core::ICoreClosestInteractiveBoundsRequested_adaptor<X> { typedef adapt ICoreClosestInteractiveBoundsRequested; };
struct ICoreClosestInteractiveBoundsRequested : ICoreClosestInteractiveBoundsRequested_raw, generate<ICoreClosestInteractiveBoundsRequested> {};

// CoreComponentInputSource
template<typename X> struct statics<CoreComponentInputSource, X> : X {
	typedef typename X::root_type CoreComponentInputSource;
};
struct CoreComponentInputSource : generate<CoreComponentInputSource> {};

// CoreIndependentInputSource
template<typename X> struct statics<CoreIndependentInputSource, X> : X {
	typedef typename X::root_type CoreIndependentInputSource;
};
struct CoreIndependentInputSource : generate<CoreIndependentInputSource> {};

// ICoreWindowPopupShowingEventArgs
struct ICoreWindowPopupShowingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _SetDesiredSize(Foundation::Size value);
};
template<typename X> struct ICoreWindowPopupShowingEventArgs_adaptor : X {
	void SetDesiredSize(const Foundation::Size& value) { hrcheck(X::get()->_SetDesiredSize(value)); }
};
template<typename X> struct adapt<ICoreWindowPopupShowingEventArgs, X> : Windows::UI::Core::ICoreWindowPopupShowingEventArgs_adaptor<X> { typedef adapt ICoreWindowPopupShowingEventArgs; };
struct ICoreWindowPopupShowingEventArgs : ICoreWindowPopupShowingEventArgs_raw, generate<ICoreWindowPopupShowingEventArgs> {};

// CoreWindowPopupShowingEventArgs
template<typename X> struct statics<CoreWindowPopupShowingEventArgs, X> : X {
	typedef typename X::root_type CoreWindowPopupShowingEventArgs;
};
struct CoreWindowPopupShowingEventArgs : generate<CoreWindowPopupShowingEventArgs> {};

// ICoreWindowDialog
struct ICoreWindowDialog_raw : IInspectable {
	virtual STDMETHODIMP _add_Showing(Foundation::TypedEventHandler<CoreWindow*, CoreWindowPopupShowingEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_Showing(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_MaxSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_MinSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_IsInteractionDelayed(int *value);
	virtual STDMETHODIMP _put_IsInteractionDelayed(int value);
	virtual STDMETHODIMP _get_Commands(Foundation::Collections::IVector<Popups::IUICommand*>* *value);
	virtual STDMETHODIMP _get_DefaultCommandIndex(unsigned *value);
	virtual STDMETHODIMP _put_DefaultCommandIndex(unsigned value);
	virtual STDMETHODIMP _get_CancelCommandIndex(unsigned *value);
	virtual STDMETHODIMP _put_CancelCommandIndex(unsigned value);
	virtual STDMETHODIMP _get_BackButtonCommand(Popups::UICommandInvokedHandler* *value);
	virtual STDMETHODIMP _put_BackButtonCommand(Popups::UICommandInvokedHandler* value);
	virtual STDMETHODIMP _ShowAsync(Foundation::IAsyncOperation<Popups::IUICommand*>* *asyncInfo);
};
template<typename X> struct ICoreWindowDialog_adaptor : X {
	union {
		struct : property {
			ptr<Popups::UICommandInvokedHandler> get() { Popups::UICommandInvokedHandler* value; hrcheck(enc(&ICoreWindowDialog_adaptor::BackButtonCommand)->_get_BackButtonCommand(&value)); return value; }
			ptr<Popups::UICommandInvokedHandler> operator()() { return get(); }
			operator ptr<Popups::UICommandInvokedHandler> () { return get(); }
			void put(handler_ref<Popups::UICommandInvokedHandler> value) { hrcheck(enc(&ICoreWindowDialog_adaptor::BackButtonCommand)->_put_BackButtonCommand(value)); }
			void operator=(handler_ref<Popups::UICommandInvokedHandler> value) { put(move(value)); }
			void operator()(handler_ref<Popups::UICommandInvokedHandler> value) { put(move(value)); }
		} BackButtonCommand;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICoreWindowDialog_adaptor::CancelCommandIndex)->_get_CancelCommandIndex(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICoreWindowDialog_adaptor::CancelCommandIndex)->_put_CancelCommandIndex(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CancelCommandIndex;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> get() { Foundation::Collections::IVector<Popups::IUICommand*>* value; hrcheck(enc(&ICoreWindowDialog_adaptor::Commands)->_get_Commands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> operator->() { return get(); }
		} Commands;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICoreWindowDialog_adaptor::DefaultCommandIndex)->_get_DefaultCommandIndex(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICoreWindowDialog_adaptor::DefaultCommandIndex)->_put_DefaultCommandIndex(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DefaultCommandIndex;
		struct : property {
			int get() { int value; hrcheck(enc(&ICoreWindowDialog_adaptor::IsInteractionDelayed)->_get_IsInteractionDelayed(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICoreWindowDialog_adaptor::IsInteractionDelayed)->_put_IsInteractionDelayed(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} IsInteractionDelayed;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ICoreWindowDialog_adaptor::MaxSize)->_get_MaxSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} MaxSize;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ICoreWindowDialog_adaptor::MinSize)->_get_MinSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} MinSize;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICoreWindowDialog_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICoreWindowDialog_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<CoreWindowPopupShowingEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindowDialog_adaptor::Showing)->_add_Showing(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindowDialog_adaptor::Showing)->_remove_Showing(cookie)); }
		} Showing;
	};
	ptr<Foundation::IAsyncOperation<ptr<Popups::IUICommand>>> ShowAsync() { Foundation::IAsyncOperation<Popups::IUICommand*>* asyncInfo; hrcheck(X::get()->_ShowAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ICoreWindowDialog_adaptor() {}
};
template<typename X> struct adapt<ICoreWindowDialog, X> : Windows::UI::Core::ICoreWindowDialog_adaptor<X> { typedef adapt ICoreWindowDialog; };
struct ICoreWindowDialog : ICoreWindowDialog_raw, generate<ICoreWindowDialog> {};

// ICoreWindowDialogFactory
struct ICoreWindowDialogFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithTitle(HSTRING title, CoreWindowDialog* *coreWindowDialog);
};

// CoreWindowDialog
template<typename> struct CoreWindowDialog_statics {
	static CoreWindowDialog *activate(hstring_ref title) { CoreWindowDialog *coreWindowDialog; hrcheck(get_activation_factory<CoreWindowDialog, ICoreWindowDialogFactory>()->_CreateWithTitle(title, &coreWindowDialog)); return coreWindowDialog; }
};

template<typename X> struct statics<CoreWindowDialog, X> : X, Windows::UI::Core::CoreWindowDialog_statics<void> {
	using Windows::UI::Core::CoreWindowDialog_statics<void>::activate;
	typedef typename X::root_type CoreWindowDialog;
};
struct CoreWindowDialog : generate<CoreWindowDialog> {};

// ICoreWindowFlyout
struct ICoreWindowFlyout_raw : IInspectable {
	virtual STDMETHODIMP _add_Showing(Foundation::TypedEventHandler<CoreWindow*, CoreWindowPopupShowingEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_Showing(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_MaxSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_MinSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_IsInteractionDelayed(int *value);
	virtual STDMETHODIMP _put_IsInteractionDelayed(int value);
	virtual STDMETHODIMP _get_Commands(Foundation::Collections::IVector<Popups::IUICommand*>* *value);
	virtual STDMETHODIMP _get_DefaultCommandIndex(unsigned *value);
	virtual STDMETHODIMP _put_DefaultCommandIndex(unsigned value);
	virtual STDMETHODIMP _get_BackButtonCommand(Popups::UICommandInvokedHandler* *value);
	virtual STDMETHODIMP _put_BackButtonCommand(Popups::UICommandInvokedHandler* value);
	virtual STDMETHODIMP _ShowAsync(Foundation::IAsyncOperation<Popups::IUICommand*>* *asyncInfo);
};
template<typename X> struct ICoreWindowFlyout_adaptor : X {
	union {
		struct : property {
			ptr<Popups::UICommandInvokedHandler> get() { Popups::UICommandInvokedHandler* value; hrcheck(enc(&ICoreWindowFlyout_adaptor::BackButtonCommand)->_get_BackButtonCommand(&value)); return value; }
			ptr<Popups::UICommandInvokedHandler> operator()() { return get(); }
			operator ptr<Popups::UICommandInvokedHandler> () { return get(); }
			void put(handler_ref<Popups::UICommandInvokedHandler> value) { hrcheck(enc(&ICoreWindowFlyout_adaptor::BackButtonCommand)->_put_BackButtonCommand(value)); }
			void operator=(handler_ref<Popups::UICommandInvokedHandler> value) { put(move(value)); }
			void operator()(handler_ref<Popups::UICommandInvokedHandler> value) { put(move(value)); }
		} BackButtonCommand;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> get() { Foundation::Collections::IVector<Popups::IUICommand*>* value; hrcheck(enc(&ICoreWindowFlyout_adaptor::Commands)->_get_Commands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Popups::IUICommand>>> operator->() { return get(); }
		} Commands;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICoreWindowFlyout_adaptor::DefaultCommandIndex)->_get_DefaultCommandIndex(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICoreWindowFlyout_adaptor::DefaultCommandIndex)->_put_DefaultCommandIndex(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DefaultCommandIndex;
		struct : property {
			int get() { int value; hrcheck(enc(&ICoreWindowFlyout_adaptor::IsInteractionDelayed)->_get_IsInteractionDelayed(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICoreWindowFlyout_adaptor::IsInteractionDelayed)->_put_IsInteractionDelayed(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} IsInteractionDelayed;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ICoreWindowFlyout_adaptor::MaxSize)->_get_MaxSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} MaxSize;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ICoreWindowFlyout_adaptor::MinSize)->_get_MinSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} MinSize;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICoreWindowFlyout_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICoreWindowFlyout_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWindow>, ptr<CoreWindowPopupShowingEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWindowFlyout_adaptor::Showing)->_add_Showing(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWindowFlyout_adaptor::Showing)->_remove_Showing(cookie)); }
		} Showing;
	};
	ptr<Foundation::IAsyncOperation<ptr<Popups::IUICommand>>> ShowAsync() { Foundation::IAsyncOperation<Popups::IUICommand*>* asyncInfo; hrcheck(X::get()->_ShowAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ICoreWindowFlyout_adaptor() {}
};
template<typename X> struct adapt<ICoreWindowFlyout, X> : Windows::UI::Core::ICoreWindowFlyout_adaptor<X> { typedef adapt ICoreWindowFlyout; };
struct ICoreWindowFlyout : ICoreWindowFlyout_raw, generate<ICoreWindowFlyout> {};

// ICoreWindowFlyoutFactory
struct ICoreWindowFlyoutFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Point position, CoreWindowFlyout* *coreWindowFlyout);
	virtual STDMETHODIMP _CreateWithTitle(Foundation::Point position, HSTRING title, CoreWindowFlyout* *coreWindowFlyout);
};

// CoreWindowFlyout
template<typename> struct CoreWindowFlyout_statics {
	static CoreWindowFlyout *activate(const Foundation::Point& position) { CoreWindowFlyout *coreWindowFlyout; hrcheck(get_activation_factory<CoreWindowFlyout, ICoreWindowFlyoutFactory>()->_Create(position, &coreWindowFlyout)); return coreWindowFlyout; }
	static CoreWindowFlyout *activate(const Foundation::Point& position, hstring_ref title) { CoreWindowFlyout *coreWindowFlyout; hrcheck(get_activation_factory<CoreWindowFlyout, ICoreWindowFlyoutFactory>()->_CreateWithTitle(position, title, &coreWindowFlyout)); return coreWindowFlyout; }
};

template<typename X> struct statics<CoreWindowFlyout, X> : X, Windows::UI::Core::CoreWindowFlyout_statics<void> {
	using Windows::UI::Core::CoreWindowFlyout_statics<void>::activate;
	typedef typename X::root_type CoreWindowFlyout;
};
struct CoreWindowFlyout : generate<CoreWindowFlyout> {};
}}}
} // namespace iso_winrt
