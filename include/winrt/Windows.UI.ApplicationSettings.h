#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.ApplicationSettings

#include "Windows.UI.ApplicationSettings.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.Popups.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
}}
namespace Security { namespace Credentials {
struct PasswordCredential;
struct WebAccount;
struct WebAccountProvider;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::UI::ApplicationSettings::ISettingsCommandFactory> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::ISettingsCommandStatics> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::SettingsCommand> : class_type<Platform::Object, Windows::UI::Popups::IUICommand>, custom_activators {};
template<> struct def<Windows::UI::ApplicationSettings::WebAccountProviderCommandInvokedHandler> : delegate_type {};
template<> struct def<Windows::UI::ApplicationSettings::IWebAccountProviderCommandFactory> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::IWebAccountProviderCommand> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::WebAccountProviderCommand> : class_type<Platform::Object, Windows::UI::ApplicationSettings::IWebAccountProviderCommand>, custom_activators {};
template<> struct def<Windows::UI::ApplicationSettings::WebAccountCommandInvokedHandler> : delegate_type {};
template<> struct def<Windows::UI::ApplicationSettings::SupportedWebAccountActions> : enum_type<unsigned> {};
template<> struct def<Windows::UI::ApplicationSettings::IWebAccountCommandFactory> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::IWebAccountCommand> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::WebAccountCommand> : class_type<Platform::Object, Windows::UI::ApplicationSettings::IWebAccountCommand>, custom_activators {};
template<> struct def<Windows::UI::ApplicationSettings::WebAccountAction> : enum_type<int> {};
template<> struct def<Windows::UI::ApplicationSettings::IWebAccountInvokedArgs> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::WebAccountInvokedArgs> : class_type<Platform::Object, Windows::UI::ApplicationSettings::IWebAccountInvokedArgs> {};
template<> struct def<Windows::UI::ApplicationSettings::CredentialCommandCredentialDeletedHandler> : delegate_type {};
template<> struct def<Windows::UI::ApplicationSettings::ICredentialCommandFactory> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::ICredentialCommand> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::CredentialCommand> : class_type<Platform::Object, Windows::UI::ApplicationSettings::ICredentialCommand>, custom_activators {};
template<> struct def<Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral> : class_type<Platform::Object, Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral> {};
template<> struct def<Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs> : class_type<Platform::Object, Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs, Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs2> {};
template<> struct def<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics3> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics2> : interface_type<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics> {};
template<> struct def<Windows::UI::ApplicationSettings::IAccountsSettingsPane> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::AccountsSettingsPane> : class_type<Platform::Object, Windows::UI::ApplicationSettings::IAccountsSettingsPane> {};
template<> struct def<Windows::UI::ApplicationSettings::ApplicationsSettingsContract> : value_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest> : class_type<Platform::Object, Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest> {};
template<> struct def<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs> : class_type<Platform::Object, Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs> {};
template<> struct def<Windows::UI::ApplicationSettings::SettingsEdgeLocation> : enum_type<int> {};
template<> struct def<Windows::UI::ApplicationSettings::ISettingsPaneStatics> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::ISettingsPane> : interface_type<> {};
template<> struct def<Windows::UI::ApplicationSettings::SettingsPane> : class_type<Platform::Object, Windows::UI::ApplicationSettings::ISettingsPane> {};

// uuids

template<> struct uuid<Windows::UI::ApplicationSettings::ISettingsCommandFactory> { define_guid(0x68E15B33, 0x1C83, 0x433A, 0xAA, 0x5A, 0xCE, 0xEE, 0xA5, 0xBD, 0x47, 0x64);};
template<> struct uuid<Windows::UI::ApplicationSettings::ISettingsCommandStatics> { define_guid(0x749AE954, 0x2F69, 0x4B17, 0x8A, 0xBA, 0xD0, 0x5C, 0xE5, 0x77, 0x8E, 0x46);};
template<> struct uuid<Windows::UI::ApplicationSettings::WebAccountProviderCommandInvokedHandler> { define_guid(0xB7DE5527, 0x4C8F, 0x42DD, 0x84, 0xDA, 0x5E, 0xC4, 0x93, 0xAB, 0xDB, 0x9A);};
template<> struct uuid<Windows::UI::ApplicationSettings::IWebAccountProviderCommandFactory> { define_guid(0xD5658A1B, 0xB176, 0x4776, 0x84, 0x69, 0xA9, 0xD3, 0xFF, 0xB, 0x3F, 0x59);};
template<> struct uuid<Windows::UI::ApplicationSettings::IWebAccountProviderCommand> { define_guid(0xD69BDD9A, 0xA0A6, 0x4E9B, 0x88, 0xDC, 0xC7, 0x1E, 0x75, 0x7A, 0x35, 0x1);};
template<> struct uuid<Windows::UI::ApplicationSettings::WebAccountCommandInvokedHandler> { define_guid(0x1EE6E459, 0x1705, 0x4A9A, 0xB5, 0x99, 0xA0, 0xC3, 0xD6, 0x92, 0x19, 0x73);};
template<> struct uuid<Windows::UI::ApplicationSettings::IWebAccountCommandFactory> { define_guid(0xBFA6CDFF, 0x2F2D, 0x42F5, 0x81, 0xDE, 0x1D, 0x56, 0xBA, 0xFC, 0x49, 0x6D);};
template<> struct uuid<Windows::UI::ApplicationSettings::IWebAccountCommand> { define_guid(0xCAA39398, 0x9CFA, 0x4246, 0xB0, 0xC4, 0xA9, 0x13, 0xA3, 0x89, 0x65, 0x41);};
template<> struct uuid<Windows::UI::ApplicationSettings::IWebAccountInvokedArgs> { define_guid(0xE7ABCC40, 0xA1D8, 0x4C5D, 0x9A, 0x7F, 0x1D, 0x34, 0xB2, 0xF9, 0xA, 0xD2);};
template<> struct uuid<Windows::UI::ApplicationSettings::CredentialCommandCredentialDeletedHandler> { define_guid(0x61C0E185, 0x977, 0x4678, 0xB4, 0xE2, 0x98, 0x72, 0x7A, 0xFB, 0xEE, 0xD9);};
template<> struct uuid<Windows::UI::ApplicationSettings::ICredentialCommandFactory> { define_guid(0x27E88C17, 0xBC3E, 0x4B80, 0x94, 0x95, 0x4E, 0xD7, 0x20, 0xE4, 0x8A, 0x91);};
template<> struct uuid<Windows::UI::ApplicationSettings::ICredentialCommand> { define_guid(0xA5F665E6, 0x6143, 0x4A7A, 0xA9, 0x71, 0xB0, 0x17, 0xBA, 0x97, 0x8C, 0xE2);};
template<> struct uuid<Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral> { define_guid(0xCBF25D3F, 0xE5BA, 0x40EF, 0x93, 0xDA, 0x65, 0xE0, 0x96, 0xE5, 0xFB, 0x4);};
template<> struct uuid<Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs> { define_guid(0x3B68C099, 0xDB19, 0x45D0, 0x9A, 0xBF, 0x95, 0xD3, 0x77, 0x3C, 0x93, 0x30);};
template<> struct uuid<Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs2> { define_guid(0x362F7BAD, 0x4E37, 0x4967, 0x8C, 0x40, 0xE7, 0x8E, 0xE7, 0xA1, 0xE5, 0xBB);};
template<> struct uuid<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics> { define_guid(0x561F8B60, 0xB0EC, 0x4150, 0xA8, 0xDC, 0x20, 0x8E, 0xE4, 0x4B, 0x6, 0x8A);};
template<> struct uuid<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics3> { define_guid(0x8410458, 0xA2BA, 0x4C6F, 0xB4, 0xAC, 0x48, 0xF5, 0x14, 0x33, 0x12, 0x16);};
template<> struct uuid<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics2> { define_guid(0xD21DF7C2, 0xCE0D, 0x484F, 0xB8, 0xE8, 0xE8, 0x23, 0xC2, 0x15, 0x76, 0x5E);};
template<> struct uuid<Windows::UI::ApplicationSettings::IAccountsSettingsPane> { define_guid(0x81EA942C, 0x4F09, 0x4406, 0xA5, 0x38, 0x83, 0x8D, 0x9B, 0x14, 0xB7, 0xE6);};
template<> struct uuid<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest> { define_guid(0x44DF23AE, 0x5D6E, 0x4068, 0xA1, 0x68, 0xF4, 0x76, 0x43, 0x18, 0x21, 0x14);};
template<> struct uuid<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs> { define_guid(0x205F5D24, 0x1B48, 0x4629, 0xA6, 0xCA, 0x2F, 0xDF, 0xED, 0xAF, 0xB7, 0x5D);};
template<> struct uuid<Windows::UI::ApplicationSettings::ISettingsPaneStatics> { define_guid(0x1C6A52C5, 0xFF19, 0x471B, 0xBA, 0x6B, 0xF8, 0xF3, 0x56, 0x94, 0xAD, 0x9A);};
template<> struct uuid<Windows::UI::ApplicationSettings::ISettingsPane> { define_guid(0xB1CD0932, 0x4570, 0x4C69, 0x8D, 0x38, 0x89, 0x44, 0x65, 0x61, 0xAC, 0xE0);};

// types

namespace Windows { namespace UI { namespace ApplicationSettings {

// ISettingsCommandFactory
struct ISettingsCommandFactory : IInspectable {
	virtual STDMETHODIMP _CreateSettingsCommand(IInspectable* settingsCommandId, HSTRING label, Popups::UICommandInvokedHandler* handler, SettingsCommand* *instance);
};

// ISettingsCommandStatics
struct ISettingsCommandStatics : IInspectable {
	virtual STDMETHODIMP _get_AccountsCommand(SettingsCommand* *value);
};

// SettingsCommand
template<typename> struct SettingsCommand_statics {
	static struct _AccountsCommand : property {
		ptr<SettingsCommand> get() { SettingsCommand* value; hrcheck(get_activation_factory<SettingsCommand, ISettingsCommandStatics>()->_get_AccountsCommand(&value)); return from_abi(value); }
		ptr<SettingsCommand> operator()() { return get(); }
		operator ptr<SettingsCommand> () { return get(); }
		ptr<SettingsCommand> operator->() { return get(); }
	} AccountsCommand;
	static SettingsCommand *activate(object_ref settingsCommandId, hstring_ref label, handler_ref<Popups::UICommandInvokedHandler> handler) { SettingsCommand *instance; hrcheck(get_activation_factory<SettingsCommand, ISettingsCommandFactory>()->_CreateSettingsCommand(settingsCommandId, label, handler, &instance)); return instance; }
};
template<typename X> typename SettingsCommand_statics<X>::_AccountsCommand SettingsCommand_statics<X>::AccountsCommand;

template<typename X> struct statics<SettingsCommand, X> : X, Windows::UI::ApplicationSettings::SettingsCommand_statics<void> {
	using Windows::UI::ApplicationSettings::SettingsCommand_statics<void>::activate;
	typedef typename X::root_type SettingsCommand;
};
struct SettingsCommand : generate<SettingsCommand> {};

// WebAccountProviderCommandInvokedHandler
struct WebAccountProviderCommandInvokedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(WebAccountProviderCommand* command) = 0;
};

// IWebAccountProviderCommandFactory
struct IWebAccountProviderCommandFactory : IInspectable {
	virtual STDMETHODIMP _CreateWebAccountProviderCommand(Security::Credentials::WebAccountProvider* webAccountProvider, WebAccountProviderCommandInvokedHandler* invoked, WebAccountProviderCommand* *instance);
};

// IWebAccountProviderCommand
struct IWebAccountProviderCommand_raw : IInspectable {
	virtual STDMETHODIMP _get_WebAccountProvider(Security::Credentials::WebAccountProvider* *value);
	virtual STDMETHODIMP _get_Invoked(WebAccountProviderCommandInvokedHandler* *value);
};
template<typename X> struct IWebAccountProviderCommand_adaptor : X {
	union {
		struct : property {
			ptr<WebAccountProviderCommandInvokedHandler> get() { WebAccountProviderCommandInvokedHandler* value; hrcheck(enc(&IWebAccountProviderCommand_adaptor::Invoked)->_get_Invoked(&value)); return value; }
			ptr<WebAccountProviderCommandInvokedHandler> operator()() { return get(); }
			operator ptr<WebAccountProviderCommandInvokedHandler> () { return get(); }
		} Invoked;
		struct : property {
			ptr<Security::Credentials::WebAccountProvider> get() { Security::Credentials::WebAccountProvider* value; hrcheck(enc(&IWebAccountProviderCommand_adaptor::WebAccountProvider)->_get_WebAccountProvider(&value)); return from_abi(value); }
			ptr<Security::Credentials::WebAccountProvider> operator()() { return get(); }
			operator ptr<Security::Credentials::WebAccountProvider> () { return get(); }
			ptr<Security::Credentials::WebAccountProvider> operator->() { return get(); }
		} WebAccountProvider;
	};
	IWebAccountProviderCommand_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderCommand, X> : Windows::UI::ApplicationSettings::IWebAccountProviderCommand_adaptor<X> { typedef adapt IWebAccountProviderCommand; };
struct IWebAccountProviderCommand : IWebAccountProviderCommand_raw, generate<IWebAccountProviderCommand> {};

// WebAccountProviderCommand
template<typename> struct WebAccountProviderCommand_statics {
	static WebAccountProviderCommand *activate(pptr<Security::Credentials::WebAccountProvider> webAccountProvider, handler_ref<WebAccountProviderCommandInvokedHandler> invoked) { WebAccountProviderCommand *instance; hrcheck(get_activation_factory<WebAccountProviderCommand, IWebAccountProviderCommandFactory>()->_CreateWebAccountProviderCommand(webAccountProvider, invoked, &instance)); return instance; }
};

template<typename X> struct statics<WebAccountProviderCommand, X> : X, Windows::UI::ApplicationSettings::WebAccountProviderCommand_statics<void> {
	using Windows::UI::ApplicationSettings::WebAccountProviderCommand_statics<void>::activate;
	typedef typename X::root_type WebAccountProviderCommand;
};
struct WebAccountProviderCommand : generate<WebAccountProviderCommand> {};

// WebAccountCommandInvokedHandler
struct WebAccountCommandInvokedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(WebAccountCommand* command, WebAccountInvokedArgs* args) = 0;
};

// IWebAccountCommandFactory
struct IWebAccountCommandFactory : IInspectable {
	virtual STDMETHODIMP _CreateWebAccountCommand(Security::Credentials::WebAccount* webAccount, WebAccountCommandInvokedHandler* invoked, SupportedWebAccountActions actions, WebAccountCommand* *instance);
};

// IWebAccountCommand
struct IWebAccountCommand_raw : IInspectable {
	virtual STDMETHODIMP _get_WebAccount(Security::Credentials::WebAccount* *value);
	virtual STDMETHODIMP _get_Invoked(WebAccountCommandInvokedHandler* *value);
	virtual STDMETHODIMP _get_Actions(SupportedWebAccountActions *value);
};
template<typename X> struct IWebAccountCommand_adaptor : X {
	union {
		struct : property {
			SupportedWebAccountActions get() { SupportedWebAccountActions value; hrcheck(enc(&IWebAccountCommand_adaptor::Actions)->_get_Actions(&value)); return value; }
			SupportedWebAccountActions operator()() { return get(); }
			operator SupportedWebAccountActions () { return get(); }
		} Actions;
		struct : property {
			ptr<WebAccountCommandInvokedHandler> get() { WebAccountCommandInvokedHandler* value; hrcheck(enc(&IWebAccountCommand_adaptor::Invoked)->_get_Invoked(&value)); return value; }
			ptr<WebAccountCommandInvokedHandler> operator()() { return get(); }
			operator ptr<WebAccountCommandInvokedHandler> () { return get(); }
		} Invoked;
		struct : property {
			ptr<Security::Credentials::WebAccount> get() { Security::Credentials::WebAccount* value; hrcheck(enc(&IWebAccountCommand_adaptor::WebAccount)->_get_WebAccount(&value)); return from_abi(value); }
			ptr<Security::Credentials::WebAccount> operator()() { return get(); }
			operator ptr<Security::Credentials::WebAccount> () { return get(); }
			ptr<Security::Credentials::WebAccount> operator->() { return get(); }
		} WebAccount;
	};
	IWebAccountCommand_adaptor() {}
};
template<typename X> struct adapt<IWebAccountCommand, X> : Windows::UI::ApplicationSettings::IWebAccountCommand_adaptor<X> { typedef adapt IWebAccountCommand; };
struct IWebAccountCommand : IWebAccountCommand_raw, generate<IWebAccountCommand> {};

// WebAccountCommand
template<typename> struct WebAccountCommand_statics {
	static WebAccountCommand *activate(pptr<Security::Credentials::WebAccount> webAccount, handler_ref<WebAccountCommandInvokedHandler> invoked, SupportedWebAccountActions actions) { WebAccountCommand *instance; hrcheck(get_activation_factory<WebAccountCommand, IWebAccountCommandFactory>()->_CreateWebAccountCommand(webAccount, invoked, actions, &instance)); return instance; }
};

template<typename X> struct statics<WebAccountCommand, X> : X, Windows::UI::ApplicationSettings::WebAccountCommand_statics<void> {
	using Windows::UI::ApplicationSettings::WebAccountCommand_statics<void>::activate;
	typedef typename X::root_type WebAccountCommand;
};
struct WebAccountCommand : generate<WebAccountCommand> {};

// IWebAccountInvokedArgs
struct IWebAccountInvokedArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Action(WebAccountAction *action);
};
template<typename X> struct IWebAccountInvokedArgs_adaptor : X {
	union {
		struct : property {
			WebAccountAction get() { WebAccountAction action; hrcheck(enc(&IWebAccountInvokedArgs_adaptor::Action)->_get_Action(&action)); return action; }
			WebAccountAction operator()() { return get(); }
			operator WebAccountAction () { return get(); }
		} Action;
	};
	IWebAccountInvokedArgs_adaptor() {}
};
template<typename X> struct adapt<IWebAccountInvokedArgs, X> : Windows::UI::ApplicationSettings::IWebAccountInvokedArgs_adaptor<X> { typedef adapt IWebAccountInvokedArgs; };
struct IWebAccountInvokedArgs : IWebAccountInvokedArgs_raw, generate<IWebAccountInvokedArgs> {};

// WebAccountInvokedArgs
template<typename X> struct statics<WebAccountInvokedArgs, X> : X {
	typedef typename X::root_type WebAccountInvokedArgs;
};
struct WebAccountInvokedArgs : generate<WebAccountInvokedArgs> {};

// CredentialCommandCredentialDeletedHandler
struct CredentialCommandCredentialDeletedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(CredentialCommand* command) = 0;
};

// ICredentialCommandFactory
struct ICredentialCommandFactory : IInspectable {
	virtual STDMETHODIMP _CreateCredentialCommand(Security::Credentials::PasswordCredential* passwordCredential, CredentialCommand* *instance);
	virtual STDMETHODIMP _CreateCredentialCommandWithHandler(Security::Credentials::PasswordCredential* passwordCredential, CredentialCommandCredentialDeletedHandler* deleted, CredentialCommand* *instance);
};

// ICredentialCommand
struct ICredentialCommand_raw : IInspectable {
	virtual STDMETHODIMP _get_PasswordCredential(Security::Credentials::PasswordCredential* *value);
	virtual STDMETHODIMP _get_CredentialDeleted(CredentialCommandCredentialDeletedHandler* *value);
};
template<typename X> struct ICredentialCommand_adaptor : X {
	union {
		struct : property {
			ptr<CredentialCommandCredentialDeletedHandler> get() { CredentialCommandCredentialDeletedHandler* value; hrcheck(enc(&ICredentialCommand_adaptor::CredentialDeleted)->_get_CredentialDeleted(&value)); return value; }
			ptr<CredentialCommandCredentialDeletedHandler> operator()() { return get(); }
			operator ptr<CredentialCommandCredentialDeletedHandler> () { return get(); }
		} CredentialDeleted;
		struct : property {
			ptr<Security::Credentials::PasswordCredential> get() { Security::Credentials::PasswordCredential* value; hrcheck(enc(&ICredentialCommand_adaptor::PasswordCredential)->_get_PasswordCredential(&value)); return from_abi(value); }
			ptr<Security::Credentials::PasswordCredential> operator()() { return get(); }
			operator ptr<Security::Credentials::PasswordCredential> () { return get(); }
			ptr<Security::Credentials::PasswordCredential> operator->() { return get(); }
		} PasswordCredential;
	};
	ICredentialCommand_adaptor() {}
};
template<typename X> struct adapt<ICredentialCommand, X> : Windows::UI::ApplicationSettings::ICredentialCommand_adaptor<X> { typedef adapt ICredentialCommand; };
struct ICredentialCommand : ICredentialCommand_raw, generate<ICredentialCommand> {};

// CredentialCommand
template<typename> struct CredentialCommand_statics {
	static CredentialCommand *activate(pptr<Security::Credentials::PasswordCredential> passwordCredential) { CredentialCommand *instance; hrcheck(get_activation_factory<CredentialCommand, ICredentialCommandFactory>()->_CreateCredentialCommand(passwordCredential, &instance)); return instance; }
	static CredentialCommand *activate(pptr<Security::Credentials::PasswordCredential> passwordCredential, handler_ref<CredentialCommandCredentialDeletedHandler> deleted) { CredentialCommand *instance; hrcheck(get_activation_factory<CredentialCommand, ICredentialCommandFactory>()->_CreateCredentialCommandWithHandler(passwordCredential, deleted, &instance)); return instance; }
};

template<typename X> struct statics<CredentialCommand, X> : X, Windows::UI::ApplicationSettings::CredentialCommand_statics<void> {
	using Windows::UI::ApplicationSettings::CredentialCommand_statics<void>::activate;
	typedef typename X::root_type CredentialCommand;
};
struct CredentialCommand : generate<CredentialCommand> {};

// IAccountsSettingsPaneEventDeferral
struct IAccountsSettingsPaneEventDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IAccountsSettingsPaneEventDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IAccountsSettingsPaneEventDeferral, X> : Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral_adaptor<X> { typedef adapt IAccountsSettingsPaneEventDeferral; };
struct IAccountsSettingsPaneEventDeferral : IAccountsSettingsPaneEventDeferral_raw, generate<IAccountsSettingsPaneEventDeferral> {};

// AccountsSettingsPaneEventDeferral
template<typename X> struct statics<AccountsSettingsPaneEventDeferral, X> : X {
	typedef typename X::root_type AccountsSettingsPaneEventDeferral;
};
struct AccountsSettingsPaneEventDeferral : generate<AccountsSettingsPaneEventDeferral> {};

// IAccountsSettingsPaneCommandsRequestedEventArgs
struct IAccountsSettingsPaneCommandsRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_WebAccountProviderCommands(Foundation::Collections::IVector<WebAccountProviderCommand*>* *value);
	virtual STDMETHODIMP _get_WebAccountCommands(Foundation::Collections::IVector<WebAccountCommand*>* *value);
	virtual STDMETHODIMP _get_CredentialCommands(Foundation::Collections::IVector<CredentialCommand*>* *value);
	virtual STDMETHODIMP _get_Commands(Foundation::Collections::IVector<SettingsCommand*>* *value);
	virtual STDMETHODIMP _get_HeaderText(HSTRING *value);
	virtual STDMETHODIMP _put_HeaderText(HSTRING value);
	virtual STDMETHODIMP _GetDeferral(AccountsSettingsPaneEventDeferral* *deferral);
};
template<typename X> struct IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> get() { Foundation::Collections::IVector<SettingsCommand*>* value; hrcheck(enc(&IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor::Commands)->_get_Commands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> operator->() { return get(); }
		} Commands;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<CredentialCommand>>> get() { Foundation::Collections::IVector<CredentialCommand*>* value; hrcheck(enc(&IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor::CredentialCommands)->_get_CredentialCommands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<CredentialCommand>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<CredentialCommand>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<CredentialCommand>>> operator->() { return get(); }
		} CredentialCommands;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor::HeaderText)->_get_HeaderText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor::HeaderText)->_put_HeaderText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} HeaderText;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<WebAccountCommand>>> get() { Foundation::Collections::IVector<WebAccountCommand*>* value; hrcheck(enc(&IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor::WebAccountCommands)->_get_WebAccountCommands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<WebAccountCommand>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<WebAccountCommand>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<WebAccountCommand>>> operator->() { return get(); }
		} WebAccountCommands;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<WebAccountProviderCommand>>> get() { Foundation::Collections::IVector<WebAccountProviderCommand*>* value; hrcheck(enc(&IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor::WebAccountProviderCommands)->_get_WebAccountProviderCommands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<WebAccountProviderCommand>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<WebAccountProviderCommand>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<WebAccountProviderCommand>>> operator->() { return get(); }
		} WebAccountProviderCommands;
	};
	ptr<AccountsSettingsPaneEventDeferral> GetDeferral() { AccountsSettingsPaneEventDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAccountsSettingsPaneCommandsRequestedEventArgs, X> : Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs_adaptor<X> { typedef adapt IAccountsSettingsPaneCommandsRequestedEventArgs; };
struct IAccountsSettingsPaneCommandsRequestedEventArgs : IAccountsSettingsPaneCommandsRequestedEventArgs_raw, generate<IAccountsSettingsPaneCommandsRequestedEventArgs> {};

// IAccountsSettingsPaneCommandsRequestedEventArgs2
struct IAccountsSettingsPaneCommandsRequestedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IAccountsSettingsPaneCommandsRequestedEventArgs2_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IAccountsSettingsPaneCommandsRequestedEventArgs2_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	IAccountsSettingsPaneCommandsRequestedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IAccountsSettingsPaneCommandsRequestedEventArgs2, X> : Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs2_adaptor<X> { typedef adapt IAccountsSettingsPaneCommandsRequestedEventArgs2; };
struct IAccountsSettingsPaneCommandsRequestedEventArgs2 : IAccountsSettingsPaneCommandsRequestedEventArgs2_raw, generate<IAccountsSettingsPaneCommandsRequestedEventArgs2> {};

// AccountsSettingsPaneCommandsRequestedEventArgs
template<typename X> struct statics<AccountsSettingsPaneCommandsRequestedEventArgs, X> : X {
	typedef typename X::root_type AccountsSettingsPaneCommandsRequestedEventArgs;
};
struct AccountsSettingsPaneCommandsRequestedEventArgs : generate<AccountsSettingsPaneCommandsRequestedEventArgs> {};

// IAccountsSettingsPaneStatics
struct IAccountsSettingsPaneStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(AccountsSettingsPane* *current);
	virtual STDMETHODIMP _Show();
};

// IAccountsSettingsPaneStatics3
struct IAccountsSettingsPaneStatics3 : IInspectable {
	virtual STDMETHODIMP _ShowManageAccountsForUserAsync(System::User* user, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ShowAddAccountForUserAsync(System::User* user, Foundation::IAsyncAction* *operation);
};

// IAccountsSettingsPaneStatics2
struct IAccountsSettingsPaneStatics2 : IInspectable {
	virtual STDMETHODIMP _ShowManageAccountsAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _ShowAddAccountAsync(Foundation::IAsyncAction* *asyncInfo);
};

// IAccountsSettingsPane
struct IAccountsSettingsPane_raw : IInspectable {
	virtual STDMETHODIMP _add_AccountCommandsRequested(Foundation::TypedEventHandler<AccountsSettingsPane*, AccountsSettingsPaneCommandsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_AccountCommandsRequested(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IAccountsSettingsPane_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AccountsSettingsPane>, ptr<AccountsSettingsPaneCommandsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IAccountsSettingsPane_adaptor::AccountCommandsRequested)->_add_AccountCommandsRequested(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IAccountsSettingsPane_adaptor::AccountCommandsRequested)->_remove_AccountCommandsRequested(cookie)); }
		} AccountCommandsRequested;
	};
	IAccountsSettingsPane_adaptor() {}
};
template<typename X> struct adapt<IAccountsSettingsPane, X> : Windows::UI::ApplicationSettings::IAccountsSettingsPane_adaptor<X> { typedef adapt IAccountsSettingsPane; };
struct IAccountsSettingsPane : IAccountsSettingsPane_raw, generate<IAccountsSettingsPane> {};

// AccountsSettingsPane
template<typename> struct AccountsSettingsPane_statics {
	static ptr<Foundation::IAsyncAction> ShowManageAccountsForUserAsync(pptr<System::User> user) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<AccountsSettingsPane, IAccountsSettingsPaneStatics3>()->_ShowManageAccountsForUserAsync(user, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> ShowAddAccountForUserAsync(pptr<System::User> user) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<AccountsSettingsPane, IAccountsSettingsPaneStatics3>()->_ShowAddAccountForUserAsync(user, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> ShowManageAccountsAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<AccountsSettingsPane, IAccountsSettingsPaneStatics2>()->_ShowManageAccountsAsync(&asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> ShowAddAccountAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<AccountsSettingsPane, IAccountsSettingsPaneStatics2>()->_ShowAddAccountAsync(&asyncInfo)); return from_abi(asyncInfo); }
	static ptr<AccountsSettingsPane> GetForCurrentView() { AccountsSettingsPane* current; hrcheck(get_activation_factory<AccountsSettingsPane, IAccountsSettingsPaneStatics>()->_GetForCurrentView(&current)); return from_abi(current); }
	static void Show() { hrcheck(get_activation_factory<AccountsSettingsPane, IAccountsSettingsPaneStatics>()->_Show()); }
};

template<typename X> struct statics<AccountsSettingsPane, X> : X, Windows::UI::ApplicationSettings::AccountsSettingsPane_statics<void> {
	typedef typename X::root_type AccountsSettingsPane;
};
struct AccountsSettingsPane : generate<AccountsSettingsPane> {};

// ISettingsPaneCommandsRequest
struct ISettingsPaneCommandsRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_ApplicationCommands(Foundation::Collections::IVector<SettingsCommand*>* *value);
};
template<typename X> struct ISettingsPaneCommandsRequest_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> get() { Foundation::Collections::IVector<SettingsCommand*>* value; hrcheck(enc(&ISettingsPaneCommandsRequest_adaptor::ApplicationCommands)->_get_ApplicationCommands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SettingsCommand>>> operator->() { return get(); }
		} ApplicationCommands;
	};
	ISettingsPaneCommandsRequest_adaptor() {}
};
template<typename X> struct adapt<ISettingsPaneCommandsRequest, X> : Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest_adaptor<X> { typedef adapt ISettingsPaneCommandsRequest; };
struct ISettingsPaneCommandsRequest : ISettingsPaneCommandsRequest_raw, generate<ISettingsPaneCommandsRequest> {};

// SettingsPaneCommandsRequest
template<typename X> struct statics<SettingsPaneCommandsRequest, X> : X {
	typedef typename X::root_type SettingsPaneCommandsRequest;
};
struct SettingsPaneCommandsRequest : generate<SettingsPaneCommandsRequest> {};

// ISettingsPaneCommandsRequestedEventArgs
struct ISettingsPaneCommandsRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(SettingsPaneCommandsRequest* *request);
};
template<typename X> struct ISettingsPaneCommandsRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SettingsPaneCommandsRequest> get() { SettingsPaneCommandsRequest* request; hrcheck(enc(&ISettingsPaneCommandsRequestedEventArgs_adaptor::Request)->_get_Request(&request)); return from_abi(request); }
			ptr<SettingsPaneCommandsRequest> operator()() { return get(); }
			operator ptr<SettingsPaneCommandsRequest> () { return get(); }
			ptr<SettingsPaneCommandsRequest> operator->() { return get(); }
		} Request;
	};
	ISettingsPaneCommandsRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISettingsPaneCommandsRequestedEventArgs, X> : Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs_adaptor<X> { typedef adapt ISettingsPaneCommandsRequestedEventArgs; };
struct ISettingsPaneCommandsRequestedEventArgs : ISettingsPaneCommandsRequestedEventArgs_raw, generate<ISettingsPaneCommandsRequestedEventArgs> {};

// SettingsPaneCommandsRequestedEventArgs
template<typename X> struct statics<SettingsPaneCommandsRequestedEventArgs, X> : X {
	typedef typename X::root_type SettingsPaneCommandsRequestedEventArgs;
};
struct SettingsPaneCommandsRequestedEventArgs : generate<SettingsPaneCommandsRequestedEventArgs> {};

// ISettingsPaneStatics
struct ISettingsPaneStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(SettingsPane* *current);
	virtual STDMETHODIMP _Show();
	virtual STDMETHODIMP _get_Edge(SettingsEdgeLocation *value);
};

// ISettingsPane
struct ISettingsPane_raw : IInspectable {
	virtual STDMETHODIMP _add_CommandsRequested(Foundation::TypedEventHandler<SettingsPane*, SettingsPaneCommandsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_CommandsRequested(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ISettingsPane_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SettingsPane>, ptr<SettingsPaneCommandsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ISettingsPane_adaptor::CommandsRequested)->_add_CommandsRequested(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ISettingsPane_adaptor::CommandsRequested)->_remove_CommandsRequested(cookie)); }
		} CommandsRequested;
	};
	ISettingsPane_adaptor() {}
};
template<typename X> struct adapt<ISettingsPane, X> : Windows::UI::ApplicationSettings::ISettingsPane_adaptor<X> { typedef adapt ISettingsPane; };
struct ISettingsPane : ISettingsPane_raw, generate<ISettingsPane> {};

// SettingsPane
template<typename> struct SettingsPane_statics {
	static struct _Edge : property {
		SettingsEdgeLocation get() { SettingsEdgeLocation value; hrcheck(get_activation_factory<SettingsPane, ISettingsPaneStatics>()->_get_Edge(&value)); return value; }
		SettingsEdgeLocation operator()() { return get(); }
		operator SettingsEdgeLocation () { return get(); }
	} Edge;
	static ptr<SettingsPane> GetForCurrentView() { SettingsPane* current; hrcheck(get_activation_factory<SettingsPane, ISettingsPaneStatics>()->_GetForCurrentView(&current)); return from_abi(current); }
	static void Show() { hrcheck(get_activation_factory<SettingsPane, ISettingsPaneStatics>()->_Show()); }
};
template<typename X> typename SettingsPane_statics<X>::_Edge SettingsPane_statics<X>::Edge;

template<typename X> struct statics<SettingsPane, X> : X, Windows::UI::ApplicationSettings::SettingsPane_statics<void> {
	typedef typename X::root_type SettingsPane;
};
struct SettingsPane : generate<SettingsPane> {};
}}}
} // namespace iso_winrt
