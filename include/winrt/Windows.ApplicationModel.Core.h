#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Core

#include "Windows.ApplicationModel.Core.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Activation {
struct BackgroundActivatedEventArgs;
struct IActivatedEventArgs;
}
struct EnteredBackgroundEventArgs;
struct SuspendingEventArgs;
struct LeavingBackgroundEventArgs;
struct AppDisplayInfo;
}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
struct IPropertySet;
}}
namespace System {
struct User;
struct DispatcherQueue;
}
namespace UI { namespace Core {
struct CoreDispatcher;
struct CoreWindow;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Core::IAppListEntry> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::IAppListEntry2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::IAppListEntry3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::AppListEntry> : class_type<Platform::Object, Windows::ApplicationModel::Core::IAppListEntry, Windows::ApplicationModel::Core::IAppListEntry2, Windows::ApplicationModel::Core::IAppListEntry3> {};
template<> struct def<Windows::ApplicationModel::Core::AppRestartFailureReason> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreImmersiveApplication3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreImmersiveApplication2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreImmersiveApplication> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplication3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplication2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationExit> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationUseCount> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplication> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::CoreApplication> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationView6> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationView5> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationView3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationView2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationView> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::CoreApplicationView> : class_type<Platform::Object, Windows::ApplicationModel::Core::ICoreApplicationView, Windows::ApplicationModel::Core::ICoreApplicationView2, Windows::ApplicationModel::Core::ICoreApplicationView3, Windows::ApplicationModel::Core::ICoreApplicationView5, Windows::ApplicationModel::Core::ICoreApplicationView6> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar> : class_type<Platform::Object, Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar> {};
template<> struct def<Windows::ApplicationModel::Core::IFrameworkView> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Core::IFrameworkViewSource> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Core::ICoreApplicationUnhandledError> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Core::IHostedViewClosingEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::HostedViewClosingEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Core::IHostedViewClosingEventArgs> {};
template<> struct def<Windows::ApplicationModel::Core::IUnhandledError> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Core::UnhandledError> : class_type<Platform::Object, Windows::ApplicationModel::Core::IUnhandledError> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Core::IAppListEntry> { define_guid(0xEF00F07F, 0x2108, 0x490A, 0x87, 0x7A, 0x8A, 0x9F, 0x17, 0xC2, 0x5F, 0xAD);};
template<> struct uuid<Windows::ApplicationModel::Core::IAppListEntry2> { define_guid(0xD0A618AD, 0xBF35, 0x42AC, 0xAC, 0x6, 0x86, 0xEE, 0xEB, 0x41, 0xD0, 0x4B);};
template<> struct uuid<Windows::ApplicationModel::Core::IAppListEntry3> { define_guid(0x6099F28D, 0xFC32, 0x470A, 0xBC, 0x69, 0x4B, 0x6, 0x1A, 0x76, 0xEF, 0x2E);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreImmersiveApplication3> { define_guid(0x34A05B2F, 0xEE0D, 0x41E5, 0x83, 0x14, 0xCF, 0x10, 0xC9, 0x1B, 0xF0, 0xAF);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreImmersiveApplication2> { define_guid(0x828E1E36, 0xE9E3, 0x4CFC, 0x9B, 0x66, 0x48, 0xB7, 0x8E, 0xA9, 0xBB, 0x2C);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreImmersiveApplication> { define_guid(0x1ADA0E3E, 0xE4A2, 0x4123, 0xB4, 0x51, 0xDC, 0x96, 0xBF, 0x80, 0x4, 0x19);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplication3> { define_guid(0xFEEC0D39, 0x598B, 0x4507, 0x8A, 0x67, 0x77, 0x26, 0x32, 0x58, 0xA, 0x57);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplication2> { define_guid(0x998681FB, 0x1AB6, 0x4B7F, 0xBE, 0x4A, 0x9A, 0x6, 0x45, 0x22, 0x4C, 0x4);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationExit> { define_guid(0xCF86461D, 0x261E, 0x4B72, 0x9A, 0xCD, 0x44, 0xED, 0x2A, 0xCE, 0x6A, 0x29);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationUseCount> { define_guid(0x518DC408, 0xC077, 0x475B, 0x80, 0x9E, 0xB, 0xC0, 0xC5, 0x7E, 0x4B, 0x74);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplication> { define_guid(0xAACF7A4, 0x5E1D, 0x49DF, 0x80, 0x34, 0xFB, 0x6A, 0x68, 0xBC, 0x5E, 0xD1);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationView6> { define_guid(0xC119D49A, 0x679, 0x49BA, 0x80, 0x3F, 0xB7, 0x9C, 0x5C, 0xF3, 0x4C, 0xCA);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationView5> { define_guid(0x2BC095A8, 0x8EF0, 0x446D, 0x9E, 0x60, 0x3A, 0x3E, 0x4, 0x28, 0xC6, 0x71);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationView3> { define_guid(0x7EBE1B3, 0xA4CF, 0x4550, 0xAB, 0x70, 0xB0, 0x7E, 0x85, 0x33, 0xB, 0xC8);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationView2> { define_guid(0x68EB7ADF, 0x917F, 0x48EB, 0x9A, 0xEB, 0x7D, 0xE5, 0x3E, 0x8, 0x6A, 0xB1);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationView> { define_guid(0x638BB2DB, 0x451D, 0x4661, 0xB0, 0x99, 0x41, 0x4F, 0x34, 0xFF, 0xB9, 0xF1);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar> { define_guid(0x6D35E3, 0xE1F1, 0x431B, 0x95, 0x8, 0x29, 0xB9, 0x69, 0x26, 0xAC, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Core::IFrameworkView> { define_guid(0xFAAB5CD0, 0x8924, 0x45AC, 0xAD, 0xF, 0xA0, 0x8F, 0xAE, 0x5D, 0x3, 0x24);};
template<> struct uuid<Windows::ApplicationModel::Core::IFrameworkViewSource> { define_guid(0xCD770614, 0x65C4, 0x426C, 0x94, 0x94, 0x34, 0xFC, 0x43, 0x55, 0x48, 0x62);};
template<> struct uuid<Windows::ApplicationModel::Core::ICoreApplicationUnhandledError> { define_guid(0xF0E24AB0, 0xDD09, 0x42E1, 0xB0, 0xBC, 0xE0, 0xE1, 0x31, 0xF7, 0x8D, 0x7E);};
template<> struct uuid<Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs> { define_guid(0x679AB78B, 0xB336, 0x4822, 0xAC, 0x40, 0xD, 0x75, 0xF, 0xB, 0x7A, 0x2B);};
template<> struct uuid<Windows::ApplicationModel::Core::IHostedViewClosingEventArgs> { define_guid(0xD238943C, 0xB24E, 0x4790, 0xAC, 0xB5, 0x3E, 0x42, 0x43, 0xC4, 0xFF, 0x87);};
template<> struct uuid<Windows::ApplicationModel::Core::IUnhandledError> { define_guid(0x9459B726, 0x53B5, 0x4686, 0x9E, 0xAF, 0xFA, 0x81, 0x62, 0xDC, 0x39, 0x80);};

// types

namespace Windows { namespace ApplicationModel { namespace Core {

// IAppListEntry
struct IAppListEntry_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayInfo(AppDisplayInfo* *value);
	virtual STDMETHODIMP _LaunchAsync(Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IAppListEntry_adaptor : X {
	union {
		struct : property {
			ptr<AppDisplayInfo> get() { AppDisplayInfo* value; hrcheck(enc(&IAppListEntry_adaptor::DisplayInfo)->_get_DisplayInfo(&value)); return from_abi(value); }
			ptr<AppDisplayInfo> operator()() { return get(); }
			operator ptr<AppDisplayInfo> () { return get(); }
			ptr<AppDisplayInfo> operator->() { return get(); }
		} DisplayInfo;
	};
	ptr<Foundation::IAsyncOperation<bool>> LaunchAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_LaunchAsync(&operation)); return from_abi(operation); }
	IAppListEntry_adaptor() {}
};
template<typename X> struct adapt<IAppListEntry, X> : Windows::ApplicationModel::Core::IAppListEntry_adaptor<X> { typedef adapt IAppListEntry; };
struct IAppListEntry : IAppListEntry_raw, generate<IAppListEntry> {};

// IAppListEntry2
struct IAppListEntry2_raw : IInspectable {
	virtual STDMETHODIMP _get_AppUserModelId(HSTRING *value);
};
template<typename X> struct IAppListEntry2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppListEntry2_adaptor::AppUserModelId)->_get_AppUserModelId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppUserModelId;
	};
	IAppListEntry2_adaptor() {}
};
template<typename X> struct adapt<IAppListEntry2, X> : Windows::ApplicationModel::Core::IAppListEntry2_adaptor<X> { typedef adapt IAppListEntry2; };
struct IAppListEntry2 : IAppListEntry2_raw, generate<IAppListEntry2> {};

// IAppListEntry3
struct IAppListEntry3_raw : IInspectable {
	virtual STDMETHODIMP _LaunchForUserAsync(System::User* user, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IAppListEntry3_adaptor : X {
	ptr<Foundation::IAsyncOperation<bool>> LaunchForUserAsync(pptr<System::User> user) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_LaunchForUserAsync(user, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IAppListEntry3, X> : Windows::ApplicationModel::Core::IAppListEntry3_adaptor<X> { typedef adapt IAppListEntry3; };
struct IAppListEntry3 : IAppListEntry3_raw, generate<IAppListEntry3> {};

// AppListEntry
template<typename X> struct statics<AppListEntry, X> : X {
	typedef typename X::root_type AppListEntry;
};
struct AppListEntry : generate<AppListEntry> {};

// ICoreImmersiveApplication3
struct ICoreImmersiveApplication3 : IInspectable {
	virtual STDMETHODIMP _CreateNewViewWithViewSource(IFrameworkViewSource* viewSource, CoreApplicationView* *view);
};

// ICoreImmersiveApplication2
struct ICoreImmersiveApplication2 : IInspectable {
	virtual STDMETHODIMP _CreateNewViewFromMainView(CoreApplicationView* *view);
};

// ICoreImmersiveApplication
struct ICoreImmersiveApplication : IInspectable {
	virtual STDMETHODIMP _get_Views(Foundation::Collections::IVectorView<CoreApplicationView*>* *value);
	virtual STDMETHODIMP _CreateNewView(HSTRING runtimeType, HSTRING entryPoint, CoreApplicationView* *view);
	virtual STDMETHODIMP _get_MainView(CoreApplicationView* *value);
};

// ICoreApplication3
struct ICoreApplication3 : IInspectable {
	virtual STDMETHODIMP _RequestRestartAsync(HSTRING launchArguments, Foundation::IAsyncOperation<AppRestartFailureReason>* *operation);
	virtual STDMETHODIMP _RequestRestartForUserAsync(System::User* user, HSTRING launchArguments, Foundation::IAsyncOperation<AppRestartFailureReason>* *operation);
};

// ICoreApplication2
struct ICoreApplication2 : IInspectable {
	virtual STDMETHODIMP _add_BackgroundActivated(Foundation::EventHandler<Activation::BackgroundActivatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BackgroundActivated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_LeavingBackground(Foundation::EventHandler<LeavingBackgroundEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LeavingBackground(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnteredBackground(Foundation::EventHandler<EnteredBackgroundEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnteredBackground(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _EnablePrelaunch(bool value);
};

// ICoreApplicationExit
struct ICoreApplicationExit : IInspectable {
	virtual STDMETHODIMP _Exit();
	virtual STDMETHODIMP _add_Exiting(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Exiting(Foundation::EventRegistrationToken token);
};

// ICoreApplicationUseCount
struct ICoreApplicationUseCount : IInspectable {
	virtual STDMETHODIMP _IncrementApplicationUseCount();
	virtual STDMETHODIMP _DecrementApplicationUseCount();
};

// ICoreApplication
struct ICoreApplication : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _add_Suspending(Foundation::EventHandler<SuspendingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Suspending(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Resuming(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Resuming(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IPropertySet* *value);
	virtual STDMETHODIMP _GetCurrentView(CoreApplicationView* *value);
	virtual STDMETHODIMP _Run(IFrameworkViewSource* viewSource);
	virtual STDMETHODIMP _RunWithActivationFactories(Foundation::IGetActivationFactory* activationFactoryCallback);
};

// CoreApplication
template<typename> struct CoreApplication_statics {
	static struct _Id : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_get_Id(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Id;
	static struct _Properties : property {
		ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_get_Properties(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
		operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
		ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
	} Properties;
	static struct _Resuming : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_add_Resuming(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_remove_Resuming(token)); }
	} Resuming;
	static struct _Suspending : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<SuspendingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_add_Suspending(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_remove_Suspending(token)); }
	} Suspending;
	static struct _Exiting : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<CoreApplication, ICoreApplicationExit>()->_add_Exiting(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<CoreApplication, ICoreApplicationExit>()->_remove_Exiting(token)); }
	} Exiting;
	static struct _BackgroundActivated : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<Activation::BackgroundActivatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<CoreApplication, ICoreApplication2>()->_add_BackgroundActivated(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication2>()->_remove_BackgroundActivated(token)); }
	} BackgroundActivated;
	static struct _EnteredBackground : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<EnteredBackgroundEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<CoreApplication, ICoreApplication2>()->_add_EnteredBackground(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication2>()->_remove_EnteredBackground(token)); }
	} EnteredBackground;
	static struct _LeavingBackground : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<LeavingBackgroundEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<CoreApplication, ICoreApplication2>()->_add_LeavingBackground(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication2>()->_remove_LeavingBackground(token)); }
	} LeavingBackground;
	static struct _MainView : property {
		ptr<CoreApplicationView> get() { CoreApplicationView* value; hrcheck(get_activation_factory<CoreApplication, ICoreImmersiveApplication>()->_get_MainView(&value)); return from_abi(value); }
		ptr<CoreApplicationView> operator()() { return get(); }
		operator ptr<CoreApplicationView> () { return get(); }
		ptr<CoreApplicationView> operator->() { return get(); }
	} MainView;
	static struct _Views : property {
		ptr<Foundation::Collections::IVectorView<ptr<CoreApplicationView>>> get() { Foundation::Collections::IVectorView<CoreApplicationView*>* value; hrcheck(get_activation_factory<CoreApplication, ICoreImmersiveApplication>()->_get_Views(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<ptr<CoreApplicationView>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<ptr<CoreApplicationView>>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<ptr<CoreApplicationView>>> operator->() { return get(); }
	} Views;
	static ptr<CoreApplicationView> CreateNewView(pptr<IFrameworkViewSource> viewSource) { CoreApplicationView* view; hrcheck(get_activation_factory<CoreApplication, ICoreImmersiveApplication3>()->_CreateNewViewWithViewSource(viewSource, &view)); return from_abi(view); }
	static ptr<CoreApplicationView> CreateNewView() { CoreApplicationView* view; hrcheck(get_activation_factory<CoreApplication, ICoreImmersiveApplication2>()->_CreateNewViewFromMainView(&view)); return from_abi(view); }
	static Foundation::EventRegistrationToken UnhandledErrorDetected(handler_ref<Foundation::EventHandler<ptr<UnhandledErrorDetectedEventArgs>>> handler);
	static void UnhandledErrorDetected(const Foundation::EventRegistrationToken& token);
	static void IncrementApplicationUseCount() { hrcheck(get_activation_factory<CoreApplication, ICoreApplicationUseCount>()->_IncrementApplicationUseCount()); }
	static void DecrementApplicationUseCount() { hrcheck(get_activation_factory<CoreApplication, ICoreApplicationUseCount>()->_DecrementApplicationUseCount()); }
	static ptr<CoreApplicationView> CreateNewView(hstring_ref runtimeType, hstring_ref entryPoint) { CoreApplicationView* view; hrcheck(get_activation_factory<CoreApplication, ICoreImmersiveApplication>()->_CreateNewView(runtimeType, entryPoint, &view)); return from_abi(view); }
	static void Exit() { hrcheck(get_activation_factory<CoreApplication, ICoreApplicationExit>()->_Exit()); }
	static ptr<Foundation::IAsyncOperation<AppRestartFailureReason>> RequestRestartAsync(hstring_ref launchArguments) { Foundation::IAsyncOperation<AppRestartFailureReason>* operation; hrcheck(get_activation_factory<CoreApplication, ICoreApplication3>()->_RequestRestartAsync(launchArguments, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<AppRestartFailureReason>> RequestRestartForUserAsync(pptr<System::User> user, hstring_ref launchArguments) { Foundation::IAsyncOperation<AppRestartFailureReason>* operation; hrcheck(get_activation_factory<CoreApplication, ICoreApplication3>()->_RequestRestartForUserAsync(user, launchArguments, &operation)); return from_abi(operation); }
	static void EnablePrelaunch(bool value) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication2>()->_EnablePrelaunch(value)); }
	static ptr<CoreApplicationView> GetCurrentView() { CoreApplicationView* value; hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_GetCurrentView(&value)); return from_abi(value); }
	static void Run(pptr<IFrameworkViewSource> viewSource) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_Run(viewSource)); }
	static void RunWithActivationFactories(pptr<Foundation::IGetActivationFactory> activationFactoryCallback) { hrcheck(get_activation_factory<CoreApplication, ICoreApplication>()->_RunWithActivationFactories(activationFactoryCallback)); }
};
template<typename X> typename CoreApplication_statics<X>::_Id CoreApplication_statics<X>::Id;
template<typename X> typename CoreApplication_statics<X>::_Properties CoreApplication_statics<X>::Properties;
template<typename X> typename CoreApplication_statics<X>::_Resuming CoreApplication_statics<X>::Resuming;
template<typename X> typename CoreApplication_statics<X>::_Suspending CoreApplication_statics<X>::Suspending;
template<typename X> typename CoreApplication_statics<X>::_Exiting CoreApplication_statics<X>::Exiting;
template<typename X> typename CoreApplication_statics<X>::_BackgroundActivated CoreApplication_statics<X>::BackgroundActivated;
template<typename X> typename CoreApplication_statics<X>::_EnteredBackground CoreApplication_statics<X>::EnteredBackground;
template<typename X> typename CoreApplication_statics<X>::_LeavingBackground CoreApplication_statics<X>::LeavingBackground;
template<typename X> typename CoreApplication_statics<X>::_MainView CoreApplication_statics<X>::MainView;
template<typename X> typename CoreApplication_statics<X>::_Views CoreApplication_statics<X>::Views;

template<typename X> struct statics<CoreApplication, X> : X, Windows::ApplicationModel::Core::CoreApplication_statics<void> {
	typedef typename X::root_type CoreApplication;
};
struct CoreApplication : generate<CoreApplication> {};

// ICoreApplicationView6
struct ICoreApplicationView6_raw : IInspectable {
	virtual STDMETHODIMP _get_DispatcherQueue(System::DispatcherQueue* *value);
};
template<typename X> struct ICoreApplicationView6_adaptor : X {
	union {
		struct : property {
			ptr<System::DispatcherQueue> get() { System::DispatcherQueue* value; hrcheck(enc(&ICoreApplicationView6_adaptor::DispatcherQueue)->_get_DispatcherQueue(&value)); return from_abi(value); }
			ptr<System::DispatcherQueue> operator()() { return get(); }
			operator ptr<System::DispatcherQueue> () { return get(); }
			ptr<System::DispatcherQueue> operator->() { return get(); }
		} DispatcherQueue;
	};
	ICoreApplicationView6_adaptor() {}
};
template<typename X> struct adapt<ICoreApplicationView6, X> : Windows::ApplicationModel::Core::ICoreApplicationView6_adaptor<X> { typedef adapt ICoreApplicationView6; };
struct ICoreApplicationView6 : ICoreApplicationView6_raw, generate<ICoreApplicationView6> {};

// ICoreApplicationView5
struct ICoreApplicationView5_raw : IInspectable {
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IPropertySet* *value);
};
template<typename X> struct ICoreApplicationView5_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(enc(&ICoreApplicationView5_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
			operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
			ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
		} Properties;
	};
	ICoreApplicationView5_adaptor() {}
};
template<typename X> struct adapt<ICoreApplicationView5, X> : Windows::ApplicationModel::Core::ICoreApplicationView5_adaptor<X> { typedef adapt ICoreApplicationView5; };
struct ICoreApplicationView5 : ICoreApplicationView5_raw, generate<ICoreApplicationView5> {};

// ICoreApplicationView3
struct ICoreApplicationView3_raw : IInspectable {
	virtual STDMETHODIMP _get_IsComponent(bool *value);
	virtual STDMETHODIMP _get_TitleBar(CoreApplicationViewTitleBar* *value);
	virtual STDMETHODIMP _add_HostedViewClosing(Foundation::TypedEventHandler<CoreApplicationView*, HostedViewClosingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HostedViewClosing(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICoreApplicationView3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreApplicationView3_adaptor::IsComponent)->_get_IsComponent(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsComponent;
		struct : property {
			ptr<CoreApplicationViewTitleBar> get() { CoreApplicationViewTitleBar* value; hrcheck(enc(&ICoreApplicationView3_adaptor::TitleBar)->_get_TitleBar(&value)); return from_abi(value); }
			ptr<CoreApplicationViewTitleBar> operator()() { return get(); }
			operator ptr<CoreApplicationViewTitleBar> () { return get(); }
			ptr<CoreApplicationViewTitleBar> operator->() { return get(); }
		} TitleBar;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreApplicationView>, ptr<HostedViewClosingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreApplicationView3_adaptor::HostedViewClosing)->_add_HostedViewClosing(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreApplicationView3_adaptor::HostedViewClosing)->_remove_HostedViewClosing(token)); }
		} HostedViewClosing;
	};
	ICoreApplicationView3_adaptor() {}
};
template<typename X> struct adapt<ICoreApplicationView3, X> : Windows::ApplicationModel::Core::ICoreApplicationView3_adaptor<X> { typedef adapt ICoreApplicationView3; };
struct ICoreApplicationView3 : ICoreApplicationView3_raw, generate<ICoreApplicationView3> {};

// ICoreApplicationView2
struct ICoreApplicationView2_raw : IInspectable {
	virtual STDMETHODIMP _get_Dispatcher(UI::Core::CoreDispatcher* *value);
};
template<typename X> struct ICoreApplicationView2_adaptor : X {
	union {
		struct : property {
			ptr<UI::Core::CoreDispatcher> get() { UI::Core::CoreDispatcher* value; hrcheck(enc(&ICoreApplicationView2_adaptor::Dispatcher)->_get_Dispatcher(&value)); return from_abi(value); }
			ptr<UI::Core::CoreDispatcher> operator()() { return get(); }
			operator ptr<UI::Core::CoreDispatcher> () { return get(); }
			ptr<UI::Core::CoreDispatcher> operator->() { return get(); }
		} Dispatcher;
	};
	ICoreApplicationView2_adaptor() {}
};
template<typename X> struct adapt<ICoreApplicationView2, X> : Windows::ApplicationModel::Core::ICoreApplicationView2_adaptor<X> { typedef adapt ICoreApplicationView2; };
struct ICoreApplicationView2 : ICoreApplicationView2_raw, generate<ICoreApplicationView2> {};

// ICoreApplicationView
struct ICoreApplicationView_raw : IInspectable {
	virtual STDMETHODIMP _get_CoreWindow(UI::Core::CoreWindow* *value);
	virtual STDMETHODIMP _add_Activated(Foundation::TypedEventHandler<CoreApplicationView*, Activation::IActivatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Activated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_IsMain(bool *value);
	virtual STDMETHODIMP _get_IsHosted(bool *value);
};
template<typename X> struct ICoreApplicationView_adaptor : X {
	union {
		struct : property {
			ptr<UI::Core::CoreWindow> get() { UI::Core::CoreWindow* value; hrcheck(enc(&ICoreApplicationView_adaptor::CoreWindow)->_get_CoreWindow(&value)); return from_abi(value); }
			ptr<UI::Core::CoreWindow> operator()() { return get(); }
			operator ptr<UI::Core::CoreWindow> () { return get(); }
			ptr<UI::Core::CoreWindow> operator->() { return get(); }
		} CoreWindow;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreApplicationView_adaptor::IsHosted)->_get_IsHosted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHosted;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreApplicationView_adaptor::IsMain)->_get_IsMain(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMain;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreApplicationView>, ptr<Activation::IActivatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreApplicationView_adaptor::Activated)->_add_Activated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreApplicationView_adaptor::Activated)->_remove_Activated(token)); }
		} Activated;
	};
	ICoreApplicationView_adaptor() {}
};
template<typename X> struct adapt<ICoreApplicationView, X> : Windows::ApplicationModel::Core::ICoreApplicationView_adaptor<X> { typedef adapt ICoreApplicationView; };
struct ICoreApplicationView : ICoreApplicationView_raw, generate<ICoreApplicationView> {};

// CoreApplicationView
template<typename X> struct statics<CoreApplicationView, X> : X {
	typedef typename X::root_type CoreApplicationView;
};
struct CoreApplicationView : generate<CoreApplicationView> {};

// ICoreApplicationViewTitleBar
struct ICoreApplicationViewTitleBar_raw : IInspectable {
	virtual STDMETHODIMP _put_ExtendViewIntoTitleBar(bool value);
	virtual STDMETHODIMP _get_ExtendViewIntoTitleBar(bool *value);
	virtual STDMETHODIMP _get_SystemOverlayLeftInset(double *value);
	virtual STDMETHODIMP _get_SystemOverlayRightInset(double *value);
	virtual STDMETHODIMP _get_Height(double *value);
	virtual STDMETHODIMP _add_LayoutMetricsChanged(Foundation::TypedEventHandler<CoreApplicationViewTitleBar*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LayoutMetricsChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_IsVisible(bool *value);
	virtual STDMETHODIMP _add_IsVisibleChanged(Foundation::TypedEventHandler<CoreApplicationViewTitleBar*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsVisibleChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICoreApplicationViewTitleBar_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::ExtendViewIntoTitleBar)->_get_ExtendViewIntoTitleBar(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::ExtendViewIntoTitleBar)->_put_ExtendViewIntoTitleBar(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ExtendViewIntoTitleBar;
		struct : property {
			double get() { double value; hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::Height)->_get_Height(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Height;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::IsVisible)->_get_IsVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVisible;
		struct : property {
			double get() { double value; hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::SystemOverlayLeftInset)->_get_SystemOverlayLeftInset(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} SystemOverlayLeftInset;
		struct : property {
			double get() { double value; hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::SystemOverlayRightInset)->_get_SystemOverlayRightInset(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} SystemOverlayRightInset;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreApplicationViewTitleBar>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::IsVisibleChanged)->_add_IsVisibleChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::IsVisibleChanged)->_remove_IsVisibleChanged(token)); }
		} IsVisibleChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreApplicationViewTitleBar>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::LayoutMetricsChanged)->_add_LayoutMetricsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreApplicationViewTitleBar_adaptor::LayoutMetricsChanged)->_remove_LayoutMetricsChanged(token)); }
		} LayoutMetricsChanged;
	};
	ICoreApplicationViewTitleBar_adaptor() {}
};
template<typename X> struct adapt<ICoreApplicationViewTitleBar, X> : Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar_adaptor<X> { typedef adapt ICoreApplicationViewTitleBar; };
struct ICoreApplicationViewTitleBar : ICoreApplicationViewTitleBar_raw, generate<ICoreApplicationViewTitleBar> {};

// CoreApplicationViewTitleBar
template<typename X> struct statics<CoreApplicationViewTitleBar, X> : X {
	typedef typename X::root_type CoreApplicationViewTitleBar;
};
struct CoreApplicationViewTitleBar : generate<CoreApplicationViewTitleBar> {};

// IFrameworkView
struct IFrameworkView_raw : IInspectable {
	virtual STDMETHODIMP _Initialize(CoreApplicationView* applicationView) = 0;
	virtual STDMETHODIMP _SetWindow(UI::Core::CoreWindow* window) = 0;
	virtual STDMETHODIMP _Load(HSTRING entryPoint) = 0;
	virtual STDMETHODIMP _Run() = 0;
	virtual STDMETHODIMP _Uninitialize() = 0;
};
template<typename X> struct IFrameworkView_adaptor : X {
	void Initialize(pptr<CoreApplicationView> applicationView) { hrcheck(X::get()->_Initialize(applicationView)); }
	void SetWindow(pptr<UI::Core::CoreWindow> window) { hrcheck(X::get()->_SetWindow(window)); }
	void Load(hstring_ref entryPoint) { hrcheck(X::get()->_Load(entryPoint)); }
	void Run() { hrcheck(X::get()->_Run()); }
	void Uninitialize() { hrcheck(X::get()->_Uninitialize()); }
};
template<typename X> struct adapt<IFrameworkView, X> : Windows::ApplicationModel::Core::IFrameworkView_adaptor<X> { typedef adapt IFrameworkView; };
template<typename X> struct IFrameworkView_unadaptor : X {
	STDMETHODIMP _Initialize(CoreApplicationView* applicationView) { return hrtry([&, this] { X::get()->Initialize(applicationView); }); }
	STDMETHODIMP _SetWindow(UI::Core::CoreWindow* window) { return hrtry([&, this] { X::get()->SetWindow(window); }); }
	STDMETHODIMP _Load(HSTRING entryPoint) { return hrtry([&, this] { X::get()->Load(entryPoint); }); }
	STDMETHODIMP _Run() { return hrtry([&, this] { X::get()->Run(); }); }
	STDMETHODIMP _Uninitialize() { return hrtry([&, this] { X::get()->Uninitialize(); }); }
};
template<typename X> struct unadapt<IFrameworkView, X> : Windows::ApplicationModel::Core::IFrameworkView_unadaptor<X> {};
struct IFrameworkView : IFrameworkView_raw, generate<IFrameworkView> {};

// IFrameworkViewSource
struct IFrameworkViewSource_raw : IInspectable {
	virtual STDMETHODIMP _CreateView(IFrameworkView* *viewProvider) = 0;
};
template<typename X> struct IFrameworkViewSource_adaptor : X {
	ptr<IFrameworkView> CreateView() { IFrameworkView* viewProvider; hrcheck(X::get()->_CreateView(&viewProvider)); return from_abi(viewProvider); }
};
template<typename X> struct adapt<IFrameworkViewSource, X> : Windows::ApplicationModel::Core::IFrameworkViewSource_adaptor<X> { typedef adapt IFrameworkViewSource; };
template<typename X> struct IFrameworkViewSource_unadaptor : X {
	STDMETHODIMP _CreateView(IFrameworkView* *viewProvider) { return hrtry([&, this] { *viewProvider = to_abi(X::get()->CreateView()); }); }
};
template<typename X> struct unadapt<IFrameworkViewSource, X> : Windows::ApplicationModel::Core::IFrameworkViewSource_unadaptor<X> {};
struct IFrameworkViewSource : IFrameworkViewSource_raw, generate<IFrameworkViewSource> {};

// ICoreApplicationUnhandledError
struct ICoreApplicationUnhandledError_raw : IInspectable {
	virtual STDMETHODIMP _add_UnhandledErrorDetected(Foundation::EventHandler<UnhandledErrorDetectedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_UnhandledErrorDetected(Foundation::EventRegistrationToken token) = 0;
};
template<typename X> struct ICoreApplicationUnhandledError_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<UnhandledErrorDetectedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICoreApplicationUnhandledError_adaptor::UnhandledErrorDetected)->_add_UnhandledErrorDetected(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICoreApplicationUnhandledError_adaptor::UnhandledErrorDetected)->_remove_UnhandledErrorDetected(token)); }
		} UnhandledErrorDetected;
	};
	ICoreApplicationUnhandledError_adaptor() {}
};
template<typename X> struct adapt<ICoreApplicationUnhandledError, X> : Windows::ApplicationModel::Core::ICoreApplicationUnhandledError_adaptor<X> { typedef adapt ICoreApplicationUnhandledError; };
template<typename X> struct ICoreApplicationUnhandledError_unadaptor : X {
	STDMETHODIMP _add_UnhandledErrorDetected(Foundation::EventHandler<UnhandledErrorDetectedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->UnhandledErrorDetected+=handler; }); }
	STDMETHODIMP _remove_UnhandledErrorDetected(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->UnhandledErrorDetected-=token; }); }
};
template<typename X> struct unadapt<ICoreApplicationUnhandledError, X> : Windows::ApplicationModel::Core::ICoreApplicationUnhandledError_unadaptor<X> {};
struct ICoreApplicationUnhandledError : ICoreApplicationUnhandledError_raw, generate<ICoreApplicationUnhandledError> {};

// IUnhandledErrorDetectedEventArgs
struct IUnhandledErrorDetectedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_UnhandledError(Core::UnhandledError* *value);
};
template<typename X> struct IUnhandledErrorDetectedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Core::UnhandledError> get() { Core::UnhandledError* value; hrcheck(enc(&IUnhandledErrorDetectedEventArgs_adaptor::UnhandledError)->_get_UnhandledError(&value)); return from_abi(value); }
			ptr<Core::UnhandledError> operator()() { return get(); }
			operator ptr<Core::UnhandledError> () { return get(); }
			ptr<Core::UnhandledError> operator->() { return get(); }
		} UnhandledError;
	};
	IUnhandledErrorDetectedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUnhandledErrorDetectedEventArgs, X> : Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs_adaptor<X> { typedef adapt IUnhandledErrorDetectedEventArgs; };
struct IUnhandledErrorDetectedEventArgs : IUnhandledErrorDetectedEventArgs_raw, generate<IUnhandledErrorDetectedEventArgs> {};

// UnhandledErrorDetectedEventArgs
template<typename X> struct statics<UnhandledErrorDetectedEventArgs, X> : X {
	typedef typename X::root_type UnhandledErrorDetectedEventArgs;
};
struct UnhandledErrorDetectedEventArgs : generate<UnhandledErrorDetectedEventArgs> {};

// IHostedViewClosingEventArgs
struct IHostedViewClosingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *result);
};
template<typename X> struct IHostedViewClosingEventArgs_adaptor : X {
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IHostedViewClosingEventArgs, X> : Windows::ApplicationModel::Core::IHostedViewClosingEventArgs_adaptor<X> { typedef adapt IHostedViewClosingEventArgs; };
struct IHostedViewClosingEventArgs : IHostedViewClosingEventArgs_raw, generate<IHostedViewClosingEventArgs> {};

// HostedViewClosingEventArgs
template<typename X> struct statics<HostedViewClosingEventArgs, X> : X {
	typedef typename X::root_type HostedViewClosingEventArgs;
};
struct HostedViewClosingEventArgs : generate<HostedViewClosingEventArgs> {};

// IUnhandledError
struct IUnhandledError_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _Propagate();
};
template<typename X> struct IUnhandledError_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IUnhandledError_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Handled;
	};
	void Propagate() { hrcheck(X::get()->_Propagate()); }
	IUnhandledError_adaptor() {}
};
template<typename X> struct adapt<IUnhandledError, X> : Windows::ApplicationModel::Core::IUnhandledError_adaptor<X> { typedef adapt IUnhandledError; };
struct IUnhandledError : IUnhandledError_raw, generate<IUnhandledError> {};

// UnhandledError
template<typename X> struct statics<UnhandledError, X> : X {
	typedef typename X::root_type UnhandledError;
};
struct UnhandledError : generate<UnhandledError> {};
}}}
} // namespace iso_winrt
