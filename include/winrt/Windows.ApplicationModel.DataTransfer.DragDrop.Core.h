#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.DataTransfer.DragDrop.Core

#include "Windows.ApplicationModel.DataTransfer.DragDrop.Core.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.ApplicationModel.DataTransfer.0.h"
#include "Windows.ApplicationModel.DataTransfer.DragDrop.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Graphics { namespace Imaging {
struct SoftwareBitmap;
}}}

// defs

template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIContentMode> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo2> : interface_type<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragUIOverride> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo, Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo2> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragUIOverride> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation2> : interface_type<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragDropManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragDropManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragDropManager> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTargetRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTargetRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragOperation> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation, Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation2> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo> { define_guid(0x48353A8B, 0xCB50, 0x464E, 0x95, 0x75, 0xCD, 0x4E, 0x3A, 0x7A, 0xB0, 0x28);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo2> { define_guid(0xC54691E5, 0xE6FB, 0x4D74, 0xB4, 0xB1, 0x8A, 0x3C, 0x17, 0xF2, 0x5E, 0x9E);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragUIOverride> { define_guid(0x89A85064, 0x3389, 0x4F4F, 0x88, 0x97, 0x7E, 0x8A, 0x3F, 0xFB, 0x3C, 0x93);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget> { define_guid(0xD9126196, 0x4C5B, 0x417D, 0xBB, 0x37, 0x76, 0x38, 0x1D, 0xEF, 0x8D, 0xB4);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation> { define_guid(0xCC06DE4F, 0x6DB0, 0x4E62, 0xAB, 0x1B, 0xA7, 0x4A, 0x2, 0xDC, 0x6D, 0x85);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation2> { define_guid(0x824B1E2C, 0xD99A, 0x4FC3, 0x85, 0x7, 0x6C, 0x18, 0x2F, 0x33, 0xB4, 0x6A);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragDropManagerStatics> { define_guid(0x9542FDCA, 0xDA12, 0x4C1C, 0x8D, 0x6, 0x4, 0x1D, 0xB2, 0x97, 0x33, 0xC3);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragDropManager> { define_guid(0x7D56D344, 0x8464, 0x4FAF, 0xAA, 0x49, 0x37, 0xEA, 0x6E, 0x2D, 0x7B, 0xD1);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTargetRequestedEventArgs> { define_guid(0x2ACA929A, 0x5E28, 0x4EA6, 0x82, 0x9E, 0x29, 0x13, 0x4E, 0x66, 0x5D, 0x6D);};

// types

namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace DragDrop { namespace Core {

// ICoreDragInfo
struct ICoreDragInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(DataPackageView* *value);
	virtual STDMETHODIMP _get_Modifiers(DragDropModifiers *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
};
template<typename X> struct ICoreDragInfo_adaptor : X {
	union {
		struct : property {
			ptr<DataPackageView> get() { DataPackageView* value; hrcheck(enc(&ICoreDragInfo_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<DataPackageView> operator()() { return get(); }
			operator ptr<DataPackageView> () { return get(); }
			ptr<DataPackageView> operator->() { return get(); }
		} Data;
		struct : property {
			DragDropModifiers get() { DragDropModifiers value; hrcheck(enc(&ICoreDragInfo_adaptor::Modifiers)->_get_Modifiers(&value)); return value; }
			DragDropModifiers operator()() { return get(); }
			operator DragDropModifiers () { return get(); }
		} Modifiers;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&ICoreDragInfo_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	ICoreDragInfo_adaptor() {}
};
template<typename X> struct adapt<ICoreDragInfo, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo_adaptor<X> { typedef adapt ICoreDragInfo; };
struct ICoreDragInfo : ICoreDragInfo_raw, generate<ICoreDragInfo> {};

// ICoreDragInfo2
struct ICoreDragInfo2_raw : IInspectable {
	virtual STDMETHODIMP _get_AllowedOperations(DataPackageOperation *value);
};
template<typename X> struct ICoreDragInfo2_adaptor : X {
	union {
		struct : property {
			DataPackageOperation get() { DataPackageOperation value; hrcheck(enc(&ICoreDragInfo2_adaptor::AllowedOperations)->_get_AllowedOperations(&value)); return value; }
			DataPackageOperation operator()() { return get(); }
			operator DataPackageOperation () { return get(); }
		} AllowedOperations;
	};
	ICoreDragInfo2_adaptor() {}
};
template<typename X> struct adapt<ICoreDragInfo2, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragInfo2_adaptor<X> { typedef adapt ICoreDragInfo2; };
struct ICoreDragInfo2 : ICoreDragInfo2_raw, generate<ICoreDragInfo2> {};

// ICoreDragUIOverride
struct ICoreDragUIOverride_raw : IInspectable {
	virtual STDMETHODIMP _SetContentFromSoftwareBitmap(Graphics::Imaging::SoftwareBitmap* softwareBitmap);
	virtual STDMETHODIMP _SetContentFromSoftwareBitmapWithAnchorPoint(Graphics::Imaging::SoftwareBitmap* softwareBitmap, Foundation::Point anchorPoint);
	virtual STDMETHODIMP _get_IsContentVisible(bool *value);
	virtual STDMETHODIMP _put_IsContentVisible(bool value);
	virtual STDMETHODIMP _get_Caption(HSTRING *value);
	virtual STDMETHODIMP _put_Caption(HSTRING value);
	virtual STDMETHODIMP _get_IsCaptionVisible(bool *value);
	virtual STDMETHODIMP _put_IsCaptionVisible(bool value);
	virtual STDMETHODIMP _get_IsGlyphVisible(bool *value);
	virtual STDMETHODIMP _put_IsGlyphVisible(bool value);
	virtual STDMETHODIMP _Clear();
};
template<typename X> struct ICoreDragUIOverride_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICoreDragUIOverride_adaptor::Caption)->_get_Caption(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICoreDragUIOverride_adaptor::Caption)->_put_Caption(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Caption;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreDragUIOverride_adaptor::IsCaptionVisible)->_get_IsCaptionVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreDragUIOverride_adaptor::IsCaptionVisible)->_put_IsCaptionVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCaptionVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreDragUIOverride_adaptor::IsContentVisible)->_get_IsContentVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreDragUIOverride_adaptor::IsContentVisible)->_put_IsContentVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsContentVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreDragUIOverride_adaptor::IsGlyphVisible)->_get_IsGlyphVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreDragUIOverride_adaptor::IsGlyphVisible)->_put_IsGlyphVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsGlyphVisible;
	};
	void SetContentFromSoftwareBitmap(pptr<Graphics::Imaging::SoftwareBitmap> softwareBitmap) { hrcheck(X::get()->_SetContentFromSoftwareBitmap(softwareBitmap)); }
	void SetContentFromSoftwareBitmap(pptr<Graphics::Imaging::SoftwareBitmap> softwareBitmap, const Foundation::Point& anchorPoint) { hrcheck(X::get()->_SetContentFromSoftwareBitmapWithAnchorPoint(softwareBitmap, anchorPoint)); }
	void Clear() { hrcheck(X::get()->_Clear()); }
	ICoreDragUIOverride_adaptor() {}
};
template<typename X> struct adapt<ICoreDragUIOverride, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragUIOverride_adaptor<X> { typedef adapt ICoreDragUIOverride; };
struct ICoreDragUIOverride : ICoreDragUIOverride_raw, generate<ICoreDragUIOverride> {};

// ICoreDropOperationTarget
struct ICoreDropOperationTarget_raw : IInspectable {
	virtual STDMETHODIMP _EnterAsync(CoreDragInfo* dragInfo, CoreDragUIOverride* dragUIOverride, Foundation::IAsyncOperation<DataPackageOperation>* *returnValue) = 0;
	virtual STDMETHODIMP _OverAsync(CoreDragInfo* dragInfo, CoreDragUIOverride* dragUIOverride, Foundation::IAsyncOperation<DataPackageOperation>* *returnValue) = 0;
	virtual STDMETHODIMP _LeaveAsync(CoreDragInfo* dragInfo, Foundation::IAsyncAction* *returnValue) = 0;
	virtual STDMETHODIMP _DropAsync(CoreDragInfo* dragInfo, Foundation::IAsyncOperation<DataPackageOperation>* *returnValue) = 0;
};
template<typename X> struct ICoreDropOperationTarget_adaptor : X {
	ptr<Foundation::IAsyncOperation<DataPackageOperation>> EnterAsync(pptr<CoreDragInfo> dragInfo, pptr<CoreDragUIOverride> dragUIOverride) { Foundation::IAsyncOperation<DataPackageOperation>* returnValue; hrcheck(X::get()->_EnterAsync(dragInfo, dragUIOverride, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<DataPackageOperation>> OverAsync(pptr<CoreDragInfo> dragInfo, pptr<CoreDragUIOverride> dragUIOverride) { Foundation::IAsyncOperation<DataPackageOperation>* returnValue; hrcheck(X::get()->_OverAsync(dragInfo, dragUIOverride, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncAction> LeaveAsync(pptr<CoreDragInfo> dragInfo) { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_LeaveAsync(dragInfo, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<DataPackageOperation>> DropAsync(pptr<CoreDragInfo> dragInfo) { Foundation::IAsyncOperation<DataPackageOperation>* returnValue; hrcheck(X::get()->_DropAsync(dragInfo, &returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<ICoreDropOperationTarget, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget_adaptor<X> { typedef adapt ICoreDropOperationTarget; };
template<typename X> struct ICoreDropOperationTarget_unadaptor : X {
	STDMETHODIMP _EnterAsync(CoreDragInfo* dragInfo, CoreDragUIOverride* dragUIOverride, Foundation::IAsyncOperation<DataPackageOperation>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->EnterAsync(dragInfo, dragUIOverride)); }); }
	STDMETHODIMP _OverAsync(CoreDragInfo* dragInfo, CoreDragUIOverride* dragUIOverride, Foundation::IAsyncOperation<DataPackageOperation>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->OverAsync(dragInfo, dragUIOverride)); }); }
	STDMETHODIMP _LeaveAsync(CoreDragInfo* dragInfo, Foundation::IAsyncAction* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->LeaveAsync(dragInfo)); }); }
	STDMETHODIMP _DropAsync(CoreDragInfo* dragInfo, Foundation::IAsyncOperation<DataPackageOperation>* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->DropAsync(dragInfo)); }); }
};
template<typename X> struct unadapt<ICoreDropOperationTarget, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget_unadaptor<X> {};
struct ICoreDropOperationTarget : ICoreDropOperationTarget_raw, generate<ICoreDropOperationTarget> {};

// CoreDragInfo
template<typename X> struct statics<CoreDragInfo, X> : X {
	typedef typename X::root_type CoreDragInfo;
};
struct CoreDragInfo : generate<CoreDragInfo> {};

// CoreDragUIOverride
template<typename X> struct statics<CoreDragUIOverride, X> : X {
	typedef typename X::root_type CoreDragUIOverride;
};
struct CoreDragUIOverride : generate<CoreDragUIOverride> {
	using ICoreDragUIOverride::SetContentFromSoftwareBitmap;
};

// ICoreDragOperation
struct ICoreDragOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(DataPackage* *value);
	virtual STDMETHODIMP _SetPointerId(unsigned pointerId);
	virtual STDMETHODIMP _SetDragUIContentFromSoftwareBitmap(Graphics::Imaging::SoftwareBitmap* softwareBitmap);
	virtual STDMETHODIMP _SetDragUIContentFromSoftwareBitmapWithAnchorPoint(Graphics::Imaging::SoftwareBitmap* softwareBitmap, Foundation::Point anchorPoint);
	virtual STDMETHODIMP _get_DragUIContentMode(CoreDragUIContentMode *value);
	virtual STDMETHODIMP _put_DragUIContentMode(CoreDragUIContentMode value);
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncOperation<DataPackageOperation>* *value);
};
template<typename X> struct ICoreDragOperation_adaptor : X {
	union {
		struct : property {
			ptr<DataPackage> get() { DataPackage* value; hrcheck(enc(&ICoreDragOperation_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<DataPackage> operator()() { return get(); }
			operator ptr<DataPackage> () { return get(); }
			ptr<DataPackage> operator->() { return get(); }
		} Data;
		struct : property {
			CoreDragUIContentMode get() { CoreDragUIContentMode value; hrcheck(enc(&ICoreDragOperation_adaptor::DragUIContentMode)->_get_DragUIContentMode(&value)); return value; }
			CoreDragUIContentMode operator()() { return get(); }
			operator CoreDragUIContentMode () { return get(); }
			void put(CoreDragUIContentMode value) { hrcheck(enc(&ICoreDragOperation_adaptor::DragUIContentMode)->_put_DragUIContentMode(value)); }
			void operator=(CoreDragUIContentMode value) { put(value); }
			void operator()(CoreDragUIContentMode value) { put(value); }
		} DragUIContentMode;
	};
	void SetPointerId(unsigned pointerId) { hrcheck(X::get()->_SetPointerId(pointerId)); }
	void SetDragUIContentFromSoftwareBitmap(pptr<Graphics::Imaging::SoftwareBitmap> softwareBitmap) { hrcheck(X::get()->_SetDragUIContentFromSoftwareBitmap(softwareBitmap)); }
	void SetDragUIContentFromSoftwareBitmap(pptr<Graphics::Imaging::SoftwareBitmap> softwareBitmap, const Foundation::Point& anchorPoint) { hrcheck(X::get()->_SetDragUIContentFromSoftwareBitmapWithAnchorPoint(softwareBitmap, anchorPoint)); }
	ptr<Foundation::IAsyncOperation<DataPackageOperation>> StartAsync() { Foundation::IAsyncOperation<DataPackageOperation>* value; hrcheck(X::get()->_StartAsync(&value)); return from_abi(value); }
	ICoreDragOperation_adaptor() {}
};
template<typename X> struct adapt<ICoreDragOperation, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation_adaptor<X> { typedef adapt ICoreDragOperation; };
struct ICoreDragOperation : ICoreDragOperation_raw, generate<ICoreDragOperation> {};

// ICoreDragOperation2
struct ICoreDragOperation2_raw : IInspectable {
	virtual STDMETHODIMP _get_AllowedOperations(DataPackageOperation *value);
	virtual STDMETHODIMP _put_AllowedOperations(DataPackageOperation value);
};
template<typename X> struct ICoreDragOperation2_adaptor : X {
	union {
		struct : property {
			DataPackageOperation get() { DataPackageOperation value; hrcheck(enc(&ICoreDragOperation2_adaptor::AllowedOperations)->_get_AllowedOperations(&value)); return value; }
			DataPackageOperation operator()() { return get(); }
			operator DataPackageOperation () { return get(); }
			void put(DataPackageOperation value) { hrcheck(enc(&ICoreDragOperation2_adaptor::AllowedOperations)->_put_AllowedOperations(value)); }
			void operator=(DataPackageOperation value) { put(value); }
			void operator()(DataPackageOperation value) { put(value); }
		} AllowedOperations;
	};
	ICoreDragOperation2_adaptor() {}
};
template<typename X> struct adapt<ICoreDragOperation2, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragOperation2_adaptor<X> { typedef adapt ICoreDragOperation2; };
struct ICoreDragOperation2 : ICoreDragOperation2_raw, generate<ICoreDragOperation2> {};

// ICoreDragDropManagerStatics
struct ICoreDragDropManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(CoreDragDropManager* *value);
};

// ICoreDragDropManager
struct ICoreDragDropManager_raw : IInspectable {
	virtual STDMETHODIMP _add_TargetRequested(Foundation::TypedEventHandler<CoreDragDropManager*, CoreDropOperationTargetRequestedEventArgs*>* value, Foundation::EventRegistrationToken *returnValue);
	virtual STDMETHODIMP _remove_TargetRequested(Foundation::EventRegistrationToken value);
	virtual STDMETHODIMP _get_AreConcurrentOperationsEnabled(bool *value);
	virtual STDMETHODIMP _put_AreConcurrentOperationsEnabled(bool value);
};
template<typename X> struct ICoreDragDropManager_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICoreDragDropManager_adaptor::AreConcurrentOperationsEnabled)->_get_AreConcurrentOperationsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICoreDragDropManager_adaptor::AreConcurrentOperationsEnabled)->_put_AreConcurrentOperationsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AreConcurrentOperationsEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreDragDropManager>, ptr<CoreDropOperationTargetRequestedEventArgs>>> value) { Foundation::EventRegistrationToken returnValue; hrcheck(enc(&ICoreDragDropManager_adaptor::TargetRequested)->_add_TargetRequested(to_abi(value), &returnValue)); return returnValue; }
			void operator-=(const Foundation::EventRegistrationToken& value) { hrcheck(enc(&ICoreDragDropManager_adaptor::TargetRequested)->_remove_TargetRequested(value)); }
		} TargetRequested;
	};
	ICoreDragDropManager_adaptor() {}
};
template<typename X> struct adapt<ICoreDragDropManager, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDragDropManager_adaptor<X> { typedef adapt ICoreDragDropManager; };
struct ICoreDragDropManager : ICoreDragDropManager_raw, generate<ICoreDragDropManager> {};

// CoreDragDropManager
template<typename> struct CoreDragDropManager_statics {
	static ptr<CoreDragDropManager> GetForCurrentView() { CoreDragDropManager* value; hrcheck(get_activation_factory<CoreDragDropManager, ICoreDragDropManagerStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
};

template<typename X> struct statics<CoreDragDropManager, X> : X, Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager_statics<void> {
	typedef typename X::root_type CoreDragDropManager;
};
struct CoreDragDropManager : generate<CoreDragDropManager> {};

// ICoreDropOperationTargetRequestedEventArgs
struct ICoreDropOperationTargetRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _SetTarget(ICoreDropOperationTarget* target);
};
template<typename X> struct ICoreDropOperationTargetRequestedEventArgs_adaptor : X {
	void SetTarget(pptr<ICoreDropOperationTarget> target) { hrcheck(X::get()->_SetTarget(target)); }
};
template<typename X> struct adapt<ICoreDropOperationTargetRequestedEventArgs, X> : Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTargetRequestedEventArgs_adaptor<X> { typedef adapt ICoreDropOperationTargetRequestedEventArgs; };
struct ICoreDropOperationTargetRequestedEventArgs : ICoreDropOperationTargetRequestedEventArgs_raw, generate<ICoreDropOperationTargetRequestedEventArgs> {};

// CoreDropOperationTargetRequestedEventArgs
template<typename X> struct statics<CoreDropOperationTargetRequestedEventArgs, X> : X {
	typedef typename X::root_type CoreDropOperationTargetRequestedEventArgs;
};
struct CoreDropOperationTargetRequestedEventArgs : generate<CoreDropOperationTargetRequestedEventArgs> {};

// CoreDragOperation
template<typename X> struct statics<CoreDragOperation, X> : X {
	typedef typename X::root_type CoreDragOperation;
};
struct CoreDragOperation : generate<CoreDragOperation> {
	using ICoreDragOperation::SetDragUIContentFromSoftwareBitmap;
};
}}}}}
} // namespace iso_winrt
