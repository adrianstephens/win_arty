#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.DataTransfer.ShareTarget

#include "Windows.ApplicationModel.DataTransfer.ShareTarget.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Contacts {
struct Contact;
}
namespace DataTransfer {
struct DataPackageView;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct RandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation, Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2, Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation3> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink> { define_guid(0x603E4308, 0xF0BE, 0x4ADC, 0xAC, 0xC9, 0x8B, 0x27, 0xAB, 0x9C, 0xF5, 0x56);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation> { define_guid(0x2246BAB8, 0xD0F8, 0x41C1, 0xA8, 0x2A, 0x41, 0x37, 0xDB, 0x65, 0x4, 0xFB);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2> { define_guid(0xFFB97C1, 0x9778, 0x4A09, 0x8E, 0x5B, 0xCB, 0x5E, 0x48, 0x2D, 0x5, 0x55);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation3> { define_guid(0x5EF6B382, 0xB7A7, 0x4571, 0xA2, 0xA6, 0x99, 0x4A, 0x3, 0x49, 0x88, 0xB2);};

// types

namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

// IQuickLink
struct IQuickLink_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::RandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Thumbnail(Storage::Streams::RandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_SupportedDataFormats(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_SupportedFileTypes(Foundation::Collections::IVector<HSTRING>* *value);
};
template<typename X> struct IQuickLink_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IQuickLink_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IQuickLink_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IQuickLink_adaptor::SupportedDataFormats)->_get_SupportedDataFormats(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} SupportedDataFormats;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IQuickLink_adaptor::SupportedFileTypes)->_get_SupportedFileTypes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} SupportedFileTypes;
		struct : property {
			ptr<Storage::Streams::RandomAccessStreamReference> get() { Storage::Streams::RandomAccessStreamReference* value; hrcheck(enc(&IQuickLink_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::RandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::RandomAccessStreamReference> value) { hrcheck(enc(&IQuickLink_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<Storage::Streams::RandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::RandomAccessStreamReference> value) { put(value); }
		} Thumbnail;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IQuickLink_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IQuickLink_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	IQuickLink_adaptor() {}
};
template<typename X> struct adapt<IQuickLink, X> : Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink_adaptor<X> { typedef adapt IQuickLink; };
struct IQuickLink : IQuickLink_raw, generate<IQuickLink> {};

// QuickLink
template<typename X> struct statics<QuickLink, X> : X {
	typedef typename X::root_type QuickLink;
};
struct QuickLink : generate<QuickLink> {};

// IShareOperation
struct IShareOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(DataPackageView* *value);
	virtual STDMETHODIMP _get_QuickLinkId(HSTRING *value);
	virtual STDMETHODIMP _RemoveThisQuickLink();
	virtual STDMETHODIMP _ReportStarted();
	virtual STDMETHODIMP _ReportDataRetrieved();
	virtual STDMETHODIMP _ReportSubmittedBackgroundTask();
	virtual STDMETHODIMP _ReportCompletedWithQuickLink(QuickLink* quicklink);
	virtual STDMETHODIMP _ReportCompleted();
	virtual STDMETHODIMP _ReportError(HSTRING value);
};
template<typename X> struct IShareOperation_adaptor : X {
	union {
		struct : property {
			ptr<DataPackageView> get() { DataPackageView* value; hrcheck(enc(&IShareOperation_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<DataPackageView> operator()() { return get(); }
			operator ptr<DataPackageView> () { return get(); }
			ptr<DataPackageView> operator->() { return get(); }
		} Data;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IShareOperation_adaptor::QuickLinkId)->_get_QuickLinkId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QuickLinkId;
	};
	void RemoveThisQuickLink() { hrcheck(X::get()->_RemoveThisQuickLink()); }
	void ReportStarted() { hrcheck(X::get()->_ReportStarted()); }
	void ReportDataRetrieved() { hrcheck(X::get()->_ReportDataRetrieved()); }
	void ReportSubmittedBackgroundTask() { hrcheck(X::get()->_ReportSubmittedBackgroundTask()); }
	void ReportCompleted(pptr<QuickLink> quicklink) { hrcheck(X::get()->_ReportCompletedWithQuickLink(quicklink)); }
	void ReportCompleted() { hrcheck(X::get()->_ReportCompleted()); }
	void ReportError(hstring_ref value) { hrcheck(X::get()->_ReportError(value)); }
	IShareOperation_adaptor() {}
};
template<typename X> struct adapt<IShareOperation, X> : Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation_adaptor<X> { typedef adapt IShareOperation; };
struct IShareOperation : IShareOperation_raw, generate<IShareOperation> {};

// IShareOperation2
struct IShareOperation2_raw : IInspectable {
	virtual STDMETHODIMP _DismissUI();
};
template<typename X> struct IShareOperation2_adaptor : X {
	void DismissUI() { hrcheck(X::get()->_DismissUI()); }
};
template<typename X> struct adapt<IShareOperation2, X> : Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2_adaptor<X> { typedef adapt IShareOperation2; };
struct IShareOperation2 : IShareOperation2_raw, generate<IShareOperation2> {};

// IShareOperation3
struct IShareOperation3_raw : IInspectable {
	virtual STDMETHODIMP _get_Contacts(Foundation::Collections::IVectorView<Contacts::Contact*>* *value);
};
template<typename X> struct IShareOperation3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Contacts::Contact>>> get() { Foundation::Collections::IVectorView<Contacts::Contact*>* value; hrcheck(enc(&IShareOperation3_adaptor::Contacts)->_get_Contacts(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Contacts::Contact>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Contacts::Contact>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Contacts::Contact>>> operator->() { return get(); }
		} Contacts;
	};
	IShareOperation3_adaptor() {}
};
template<typename X> struct adapt<IShareOperation3, X> : Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation3_adaptor<X> { typedef adapt IShareOperation3; };
struct IShareOperation3 : IShareOperation3_raw, generate<IShareOperation3> {};

// ShareOperation
template<typename X> struct statics<ShareOperation, X> : X {
	typedef typename X::root_type ShareOperation;
};
struct ShareOperation : generate<ShareOperation> {
	using IShareOperation::ReportCompleted;
};
}}}}
} // namespace iso_winrt
