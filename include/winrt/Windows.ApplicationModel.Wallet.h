#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Wallet

#include "Windows.ApplicationModel.Wallet.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"
#include "Windows.Devices.Geolocation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMap;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Wallet::WalletContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletActionKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletBarcodeSymbology> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletBarcode> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletDetailViewPosition> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletSummaryViewPosition> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletItemCustomProperty> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletVerb> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletItemKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletItem> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletBarcodeFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletBarcode> : class_type<Platform::Object, Windows::ApplicationModel::Wallet::IWalletBarcode>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletTransaction> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletTransaction> : class_type<Platform::Object, Windows::ApplicationModel::Wallet::IWalletTransaction> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletRelevantLocation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletRelevantLocation> : class_type<Platform::Object, Windows::ApplicationModel::Wallet::IWalletRelevantLocation> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletItemCustomPropertyFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletItemCustomProperty> : class_type<Platform::Object, Windows::ApplicationModel::Wallet::IWalletItemCustomProperty>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletVerbFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletVerb> : class_type<Platform::Object, Windows::ApplicationModel::Wallet::IWalletVerb>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletItemStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletItemFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletItem> : class_type<Platform::Object, Windows::ApplicationModel::Wallet::IWalletItem>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletItemStore2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletItemStore> : class_type<Platform::Object, Windows::ApplicationModel::Wallet::IWalletItemStore> {};
template<> struct def<Windows::ApplicationModel::Wallet::IWalletManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Wallet::WalletManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletBarcode> { define_guid(0x4F857B29, 0xDE80, 0x4EA4, 0xA1, 0xCD, 0x81, 0xCD, 0x8, 0x4D, 0xAC, 0x27);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletItemCustomProperty> { define_guid(0xB94B40F3, 0xFA00, 0x40FD, 0x98, 0xDC, 0x9D, 0xE4, 0x66, 0x97, 0xF1, 0xE7);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletVerb> { define_guid(0x17B826D6, 0xE3C1, 0x4C74, 0x8A, 0x94, 0x21, 0x7A, 0xAD, 0xBC, 0x48, 0x84);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletItem> { define_guid(0x20B54BE8, 0x118D, 0x4EC4, 0x99, 0x6C, 0xB9, 0x63, 0xE7, 0xBD, 0x3E, 0x74);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletBarcodeFactory> { define_guid(0x30117161, 0xED9C, 0x469E, 0xBB, 0xFD, 0x30, 0x6C, 0x95, 0xEA, 0x71, 0x8);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletTransaction> { define_guid(0x40E1E940, 0x2606, 0x4519, 0x81, 0xCB, 0xBF, 0xF1, 0xC6, 0xD, 0x1F, 0x79);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletRelevantLocation> { define_guid(0x9FD8782A, 0xE3F9, 0x4DE1, 0xBA, 0xB3, 0xBB, 0x19, 0x2E, 0x46, 0xB3, 0xF3);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletItemCustomPropertyFactory> { define_guid(0xD0046A44, 0x61A1, 0x41AA, 0xB2, 0x59, 0xA5, 0x61, 0xA, 0xB5, 0xD5, 0x75);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletVerbFactory> { define_guid(0x76012771, 0xBE58, 0x4D5E, 0x83, 0xED, 0x58, 0xB1, 0x66, 0x9C, 0x7A, 0xD9);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletItemStore> { define_guid(0x7160484B, 0x6D49, 0x48F8, 0x91, 0xA9, 0x40, 0xA1, 0xD0, 0xF1, 0x3E, 0xF4);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletItemFactory> { define_guid(0x53E27470, 0x4F0B, 0x4A3E, 0x99, 0xE5, 0xB, 0xBB, 0x1E, 0xAB, 0x38, 0xD4);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletItemStore2> { define_guid(0x65E682F0, 0x7009, 0x4A15, 0xBD, 0x54, 0x4F, 0xFF, 0x37, 0x9B, 0xFF, 0xE2);};
template<> struct uuid<Windows::ApplicationModel::Wallet::IWalletManagerStatics> { define_guid(0x5111D6B8, 0xC9A4, 0x4C64, 0xB4, 0xDD, 0xE1, 0xE5, 0x48, 0x0, 0x1C, 0xD);};

// types

namespace Windows { namespace ApplicationModel { namespace Wallet {

// IWalletBarcode
struct IWalletBarcode_raw : IInspectable {
	virtual STDMETHODIMP _get_Symbology(WalletBarcodeSymbology *value);
	virtual STDMETHODIMP _get_Value(HSTRING *value);
	virtual STDMETHODIMP _GetImageAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamReference*>* *operation);
};
template<typename X> struct IWalletBarcode_adaptor : X {
	union {
		struct : property {
			WalletBarcodeSymbology get() { WalletBarcodeSymbology value; hrcheck(enc(&IWalletBarcode_adaptor::Symbology)->_get_Symbology(&value)); return value; }
			WalletBarcodeSymbology operator()() { return get(); }
			operator WalletBarcodeSymbology () { return get(); }
		} Symbology;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletBarcode_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Value;
	};
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStreamReference>>> GetImageAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamReference*>* operation; hrcheck(X::get()->_GetImageAsync(&operation)); return from_abi(operation); }
	IWalletBarcode_adaptor() {}
};
template<typename X> struct adapt<IWalletBarcode, X> : Windows::ApplicationModel::Wallet::IWalletBarcode_adaptor<X> { typedef adapt IWalletBarcode; };
struct IWalletBarcode : IWalletBarcode_raw, generate<IWalletBarcode> {};

// IWalletItemCustomProperty
struct IWalletItemCustomProperty_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Value(HSTRING *value);
	virtual STDMETHODIMP _put_Value(HSTRING value);
	virtual STDMETHODIMP _get_AutoDetectLinks(bool *value);
	virtual STDMETHODIMP _put_AutoDetectLinks(bool value);
	virtual STDMETHODIMP _get_DetailViewPosition(WalletDetailViewPosition *value);
	virtual STDMETHODIMP _put_DetailViewPosition(WalletDetailViewPosition value);
	virtual STDMETHODIMP _get_SummaryViewPosition(WalletSummaryViewPosition *value);
	virtual STDMETHODIMP _put_SummaryViewPosition(WalletSummaryViewPosition value);
};
template<typename X> struct IWalletItemCustomProperty_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWalletItemCustomProperty_adaptor::AutoDetectLinks)->_get_AutoDetectLinks(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWalletItemCustomProperty_adaptor::AutoDetectLinks)->_put_AutoDetectLinks(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoDetectLinks;
		struct : property {
			WalletDetailViewPosition get() { WalletDetailViewPosition value; hrcheck(enc(&IWalletItemCustomProperty_adaptor::DetailViewPosition)->_get_DetailViewPosition(&value)); return value; }
			WalletDetailViewPosition operator()() { return get(); }
			operator WalletDetailViewPosition () { return get(); }
			void put(WalletDetailViewPosition value) { hrcheck(enc(&IWalletItemCustomProperty_adaptor::DetailViewPosition)->_put_DetailViewPosition(value)); }
			void operator=(WalletDetailViewPosition value) { put(value); }
			void operator()(WalletDetailViewPosition value) { put(value); }
		} DetailViewPosition;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItemCustomProperty_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletItemCustomProperty_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			WalletSummaryViewPosition get() { WalletSummaryViewPosition value; hrcheck(enc(&IWalletItemCustomProperty_adaptor::SummaryViewPosition)->_get_SummaryViewPosition(&value)); return value; }
			WalletSummaryViewPosition operator()() { return get(); }
			operator WalletSummaryViewPosition () { return get(); }
			void put(WalletSummaryViewPosition value) { hrcheck(enc(&IWalletItemCustomProperty_adaptor::SummaryViewPosition)->_put_SummaryViewPosition(value)); }
			void operator=(WalletSummaryViewPosition value) { put(value); }
			void operator()(WalletSummaryViewPosition value) { put(value); }
		} SummaryViewPosition;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItemCustomProperty_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletItemCustomProperty_adaptor::Value)->_put_Value(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Value;
	};
	IWalletItemCustomProperty_adaptor() {}
};
template<typename X> struct adapt<IWalletItemCustomProperty, X> : Windows::ApplicationModel::Wallet::IWalletItemCustomProperty_adaptor<X> { typedef adapt IWalletItemCustomProperty; };
struct IWalletItemCustomProperty : IWalletItemCustomProperty_raw, generate<IWalletItemCustomProperty> {};

// IWalletVerb
struct IWalletVerb_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
};
template<typename X> struct IWalletVerb_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletVerb_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletVerb_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
	};
	IWalletVerb_adaptor() {}
};
template<typename X> struct adapt<IWalletVerb, X> : Windows::ApplicationModel::Wallet::IWalletVerb_adaptor<X> { typedef adapt IWalletVerb; };
struct IWalletVerb : IWalletVerb_raw, generate<IWalletVerb> {};

// IWalletItem
struct IWalletItem_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_IsAcknowledged(bool *value);
	virtual STDMETHODIMP _put_IsAcknowledged(bool value);
	virtual STDMETHODIMP _get_IssuerDisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_IssuerDisplayName(HSTRING value);
	virtual STDMETHODIMP _get_LastUpdated(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_LastUpdated(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Kind(WalletItemKind *value);
	virtual STDMETHODIMP _get_Barcode(WalletBarcode* *value);
	virtual STDMETHODIMP _put_Barcode(WalletBarcode* value);
	virtual STDMETHODIMP _get_ExpirationDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_ExpirationDate(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Logo159x159(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Logo159x159(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_Logo336x336(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Logo336x336(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_Logo99x99(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Logo99x99(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_DisplayMessage(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayMessage(HSTRING value);
	virtual STDMETHODIMP _get_IsDisplayMessageLaunchable(bool *value);
	virtual STDMETHODIMP _put_IsDisplayMessageLaunchable(bool value);
	virtual STDMETHODIMP _get_LogoText(HSTRING *value);
	virtual STDMETHODIMP _put_LogoText(HSTRING value);
	virtual STDMETHODIMP _get_HeaderColor(UI::Color *value);
	virtual STDMETHODIMP _put_HeaderColor(UI::Color value);
	virtual STDMETHODIMP _get_BodyColor(UI::Color *value);
	virtual STDMETHODIMP _put_BodyColor(UI::Color value);
	virtual STDMETHODIMP _get_HeaderFontColor(UI::Color *value);
	virtual STDMETHODIMP _put_HeaderFontColor(UI::Color value);
	virtual STDMETHODIMP _get_BodyFontColor(UI::Color *value);
	virtual STDMETHODIMP _put_BodyFontColor(UI::Color value);
	virtual STDMETHODIMP _get_HeaderBackgroundImage(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_HeaderBackgroundImage(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_BodyBackgroundImage(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_BodyBackgroundImage(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_LogoImage(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_LogoImage(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_PromotionalImage(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_PromotionalImage(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_RelevantDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_RelevantDate(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_RelevantDateDisplayMessage(HSTRING *value);
	virtual STDMETHODIMP _put_RelevantDateDisplayMessage(HSTRING value);
	virtual STDMETHODIMP _get_TransactionHistory(Foundation::Collections::IMap<HSTRING, WalletTransaction*>* *value);
	virtual STDMETHODIMP _get_RelevantLocations(Foundation::Collections::IMap<HSTRING, WalletRelevantLocation*>* *value);
	virtual STDMETHODIMP _get_IsMoreTransactionHistoryLaunchable(bool *value);
	virtual STDMETHODIMP _put_IsMoreTransactionHistoryLaunchable(bool value);
	virtual STDMETHODIMP _get_DisplayProperties(Foundation::Collections::IMap<HSTRING, WalletItemCustomProperty*>* *value);
	virtual STDMETHODIMP _get_Verbs(Foundation::Collections::IMap<HSTRING, WalletVerb*>* *value);
};
template<typename X> struct IWalletItem_adaptor : X {
	union {
		struct : property {
			ptr<WalletBarcode> get() { WalletBarcode* value; hrcheck(enc(&IWalletItem_adaptor::Barcode)->_get_Barcode(&value)); return from_abi(value); }
			ptr<WalletBarcode> operator()() { return get(); }
			operator ptr<WalletBarcode> () { return get(); }
			ptr<WalletBarcode> operator->() { return get(); }
			void put(pptr<WalletBarcode> value) { hrcheck(enc(&IWalletItem_adaptor::Barcode)->_put_Barcode(value)); }
			void operator=(pptr<WalletBarcode> value) { put(value); }
			void operator()(pptr<WalletBarcode> value) { put(value); }
		} Barcode;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IWalletItem_adaptor::BodyBackgroundImage)->_get_BodyBackgroundImage(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IWalletItem_adaptor::BodyBackgroundImage)->_put_BodyBackgroundImage(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} BodyBackgroundImage;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IWalletItem_adaptor::BodyColor)->_get_BodyColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IWalletItem_adaptor::BodyColor)->_put_BodyColor(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} BodyColor;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IWalletItem_adaptor::BodyFontColor)->_get_BodyFontColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IWalletItem_adaptor::BodyFontColor)->_put_BodyFontColor(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} BodyFontColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItem_adaptor::DisplayMessage)->_get_DisplayMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletItem_adaptor::DisplayMessage)->_put_DisplayMessage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayMessage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItem_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletItem_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletItemCustomProperty>>> get() { Foundation::Collections::IMap<HSTRING, WalletItemCustomProperty*>* value; hrcheck(enc(&IWalletItem_adaptor::DisplayProperties)->_get_DisplayProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletItemCustomProperty>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, ptr<WalletItemCustomProperty>>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletItemCustomProperty>>> operator->() { return get(); }
		} DisplayProperties;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IWalletItem_adaptor::ExpirationDate)->_get_ExpirationDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IWalletItem_adaptor::ExpirationDate)->_put_ExpirationDate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ExpirationDate;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IWalletItem_adaptor::HeaderBackgroundImage)->_get_HeaderBackgroundImage(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IWalletItem_adaptor::HeaderBackgroundImage)->_put_HeaderBackgroundImage(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} HeaderBackgroundImage;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IWalletItem_adaptor::HeaderColor)->_get_HeaderColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IWalletItem_adaptor::HeaderColor)->_put_HeaderColor(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} HeaderColor;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IWalletItem_adaptor::HeaderFontColor)->_get_HeaderFontColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IWalletItem_adaptor::HeaderFontColor)->_put_HeaderFontColor(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} HeaderFontColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItem_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWalletItem_adaptor::IsAcknowledged)->_get_IsAcknowledged(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWalletItem_adaptor::IsAcknowledged)->_put_IsAcknowledged(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAcknowledged;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWalletItem_adaptor::IsDisplayMessageLaunchable)->_get_IsDisplayMessageLaunchable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWalletItem_adaptor::IsDisplayMessageLaunchable)->_put_IsDisplayMessageLaunchable(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDisplayMessageLaunchable;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWalletItem_adaptor::IsMoreTransactionHistoryLaunchable)->_get_IsMoreTransactionHistoryLaunchable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWalletItem_adaptor::IsMoreTransactionHistoryLaunchable)->_put_IsMoreTransactionHistoryLaunchable(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMoreTransactionHistoryLaunchable;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItem_adaptor::IssuerDisplayName)->_get_IssuerDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletItem_adaptor::IssuerDisplayName)->_put_IssuerDisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} IssuerDisplayName;
		struct : property {
			WalletItemKind get() { WalletItemKind value; hrcheck(enc(&IWalletItem_adaptor::Kind)->_get_Kind(&value)); return value; }
			WalletItemKind operator()() { return get(); }
			operator WalletItemKind () { return get(); }
		} Kind;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IWalletItem_adaptor::LastUpdated)->_get_LastUpdated(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IWalletItem_adaptor::LastUpdated)->_put_LastUpdated(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} LastUpdated;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IWalletItem_adaptor::Logo159x159)->_get_Logo159x159(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IWalletItem_adaptor::Logo159x159)->_put_Logo159x159(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Logo159x159;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IWalletItem_adaptor::Logo336x336)->_get_Logo336x336(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IWalletItem_adaptor::Logo336x336)->_put_Logo336x336(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Logo336x336;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IWalletItem_adaptor::Logo99x99)->_get_Logo99x99(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IWalletItem_adaptor::Logo99x99)->_put_Logo99x99(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Logo99x99;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IWalletItem_adaptor::LogoImage)->_get_LogoImage(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IWalletItem_adaptor::LogoImage)->_put_LogoImage(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} LogoImage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItem_adaptor::LogoText)->_get_LogoText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletItem_adaptor::LogoText)->_put_LogoText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} LogoText;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IWalletItem_adaptor::PromotionalImage)->_get_PromotionalImage(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IWalletItem_adaptor::PromotionalImage)->_put_PromotionalImage(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} PromotionalImage;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IWalletItem_adaptor::RelevantDate)->_get_RelevantDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IWalletItem_adaptor::RelevantDate)->_put_RelevantDate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} RelevantDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletItem_adaptor::RelevantDateDisplayMessage)->_get_RelevantDateDisplayMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletItem_adaptor::RelevantDateDisplayMessage)->_put_RelevantDateDisplayMessage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RelevantDateDisplayMessage;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletRelevantLocation>>> get() { Foundation::Collections::IMap<HSTRING, WalletRelevantLocation*>* value; hrcheck(enc(&IWalletItem_adaptor::RelevantLocations)->_get_RelevantLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletRelevantLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, ptr<WalletRelevantLocation>>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletRelevantLocation>>> operator->() { return get(); }
		} RelevantLocations;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletTransaction>>> get() { Foundation::Collections::IMap<HSTRING, WalletTransaction*>* value; hrcheck(enc(&IWalletItem_adaptor::TransactionHistory)->_get_TransactionHistory(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletTransaction>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, ptr<WalletTransaction>>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletTransaction>>> operator->() { return get(); }
		} TransactionHistory;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletVerb>>> get() { Foundation::Collections::IMap<HSTRING, WalletVerb*>* value; hrcheck(enc(&IWalletItem_adaptor::Verbs)->_get_Verbs(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletVerb>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, ptr<WalletVerb>>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, ptr<WalletVerb>>> operator->() { return get(); }
		} Verbs;
	};
	IWalletItem_adaptor() {}
};
template<typename X> struct adapt<IWalletItem, X> : Windows::ApplicationModel::Wallet::IWalletItem_adaptor<X> { typedef adapt IWalletItem; };
struct IWalletItem : IWalletItem_raw, generate<IWalletItem> {};

// IWalletBarcodeFactory
struct IWalletBarcodeFactory : IInspectable {
	virtual STDMETHODIMP _CreateWalletBarcode(WalletBarcodeSymbology symbology, HSTRING value, WalletBarcode* *barcode);
	virtual STDMETHODIMP _CreateCustomWalletBarcode(Storage::Streams::IRandomAccessStreamReference* streamToBarcodeImage, WalletBarcode* *barcode);
};

// WalletBarcode
template<typename> struct WalletBarcode_statics {
	static WalletBarcode *activate(WalletBarcodeSymbology symbology, hstring_ref value) { WalletBarcode *barcode; hrcheck(get_activation_factory<WalletBarcode, IWalletBarcodeFactory>()->_CreateWalletBarcode(symbology, value, &barcode)); return barcode; }
	static WalletBarcode *activate(pptr<Storage::Streams::IRandomAccessStreamReference> streamToBarcodeImage) { WalletBarcode *barcode; hrcheck(get_activation_factory<WalletBarcode, IWalletBarcodeFactory>()->_CreateCustomWalletBarcode(streamToBarcodeImage, &barcode)); return barcode; }
};

template<typename X> struct statics<WalletBarcode, X> : X, Windows::ApplicationModel::Wallet::WalletBarcode_statics<void> {
	using Windows::ApplicationModel::Wallet::WalletBarcode_statics<void>::activate;
	typedef typename X::root_type WalletBarcode;
};
struct WalletBarcode : generate<WalletBarcode> {};

// IWalletTransaction
struct IWalletTransaction_raw : IInspectable {
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
	virtual STDMETHODIMP _get_DisplayAmount(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayAmount(HSTRING value);
	virtual STDMETHODIMP _get_IgnoreTimeOfDay(bool *value);
	virtual STDMETHODIMP _put_IgnoreTimeOfDay(bool value);
	virtual STDMETHODIMP _get_DisplayLocation(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayLocation(HSTRING value);
	virtual STDMETHODIMP _get_TransactionDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_TransactionDate(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_IsLaunchable(bool *value);
	virtual STDMETHODIMP _put_IsLaunchable(bool value);
};
template<typename X> struct IWalletTransaction_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletTransaction_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletTransaction_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletTransaction_adaptor::DisplayAmount)->_get_DisplayAmount(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletTransaction_adaptor::DisplayAmount)->_put_DisplayAmount(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayAmount;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletTransaction_adaptor::DisplayLocation)->_get_DisplayLocation(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletTransaction_adaptor::DisplayLocation)->_put_DisplayLocation(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayLocation;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWalletTransaction_adaptor::IgnoreTimeOfDay)->_get_IgnoreTimeOfDay(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWalletTransaction_adaptor::IgnoreTimeOfDay)->_put_IgnoreTimeOfDay(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IgnoreTimeOfDay;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWalletTransaction_adaptor::IsLaunchable)->_get_IsLaunchable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWalletTransaction_adaptor::IsLaunchable)->_put_IsLaunchable(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsLaunchable;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IWalletTransaction_adaptor::TransactionDate)->_get_TransactionDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IWalletTransaction_adaptor::TransactionDate)->_put_TransactionDate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} TransactionDate;
	};
	IWalletTransaction_adaptor() {}
};
template<typename X> struct adapt<IWalletTransaction, X> : Windows::ApplicationModel::Wallet::IWalletTransaction_adaptor<X> { typedef adapt IWalletTransaction; };
struct IWalletTransaction : IWalletTransaction_raw, generate<IWalletTransaction> {};

// WalletTransaction
template<typename X> struct statics<WalletTransaction, X> : X {
	typedef typename X::root_type WalletTransaction;
};
struct WalletTransaction : generate<WalletTransaction> {};

// IWalletRelevantLocation
struct IWalletRelevantLocation_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Devices::Geolocation::BasicGeoposition *value);
	virtual STDMETHODIMP _put_Position(Devices::Geolocation::BasicGeoposition value);
	virtual STDMETHODIMP _get_DisplayMessage(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayMessage(HSTRING value);
};
template<typename X> struct IWalletRelevantLocation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletRelevantLocation_adaptor::DisplayMessage)->_get_DisplayMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWalletRelevantLocation_adaptor::DisplayMessage)->_put_DisplayMessage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayMessage;
		struct : property {
			Devices::Geolocation::BasicGeoposition get() { Devices::Geolocation::BasicGeoposition value; hrcheck(enc(&IWalletRelevantLocation_adaptor::Position)->_get_Position(&value)); return value; }
			Devices::Geolocation::BasicGeoposition operator()() { return get(); }
			operator Devices::Geolocation::BasicGeoposition () { return get(); }
			void put(const Devices::Geolocation::BasicGeoposition& value) { hrcheck(enc(&IWalletRelevantLocation_adaptor::Position)->_put_Position(value)); }
			void operator=(const Devices::Geolocation::BasicGeoposition& value) { put(value); }
			void operator()(const Devices::Geolocation::BasicGeoposition& value) { put(value); }
		} Position;
	};
	IWalletRelevantLocation_adaptor() {}
};
template<typename X> struct adapt<IWalletRelevantLocation, X> : Windows::ApplicationModel::Wallet::IWalletRelevantLocation_adaptor<X> { typedef adapt IWalletRelevantLocation; };
struct IWalletRelevantLocation : IWalletRelevantLocation_raw, generate<IWalletRelevantLocation> {};

// WalletRelevantLocation
template<typename X> struct statics<WalletRelevantLocation, X> : X {
	typedef typename X::root_type WalletRelevantLocation;
};
struct WalletRelevantLocation : generate<WalletRelevantLocation> {};

// IWalletItemCustomPropertyFactory
struct IWalletItemCustomPropertyFactory : IInspectable {
	virtual STDMETHODIMP _CreateWalletItemCustomProperty(HSTRING name, HSTRING value, WalletItemCustomProperty* *walletItemCustomProperty);
};

// WalletItemCustomProperty
template<typename> struct WalletItemCustomProperty_statics {
	static WalletItemCustomProperty *activate(hstring_ref name, hstring_ref value) { WalletItemCustomProperty *walletItemCustomProperty; hrcheck(get_activation_factory<WalletItemCustomProperty, IWalletItemCustomPropertyFactory>()->_CreateWalletItemCustomProperty(name, value, &walletItemCustomProperty)); return walletItemCustomProperty; }
};

template<typename X> struct statics<WalletItemCustomProperty, X> : X, Windows::ApplicationModel::Wallet::WalletItemCustomProperty_statics<void> {
	using Windows::ApplicationModel::Wallet::WalletItemCustomProperty_statics<void>::activate;
	typedef typename X::root_type WalletItemCustomProperty;
};
struct WalletItemCustomProperty : generate<WalletItemCustomProperty> {};

// IWalletVerbFactory
struct IWalletVerbFactory : IInspectable {
	virtual STDMETHODIMP _CreateWalletVerb(HSTRING name, Wallet::WalletVerb* *WalletVerb);
};

// WalletVerb
template<typename> struct WalletVerb_statics {
	static WalletVerb *activate(hstring_ref name) { WalletVerb *WalletVerb; hrcheck(get_activation_factory<WalletVerb, IWalletVerbFactory>()->_CreateWalletVerb(name, &WalletVerb)); return WalletVerb; }
};

template<typename X> struct statics<WalletVerb, X> : X, Windows::ApplicationModel::Wallet::WalletVerb_statics<void> {
	using Windows::ApplicationModel::Wallet::WalletVerb_statics<void>::activate;
	typedef typename X::root_type WalletVerb;
};
struct WalletVerb : generate<WalletVerb> {};

// IWalletItemStore
struct IWalletItemStore_raw : IInspectable {
	virtual STDMETHODIMP _AddAsync(HSTRING id, WalletItem* item, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ClearAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _GetWalletItemAsync(HSTRING id, Foundation::IAsyncOperation<WalletItem*>* *operation);
	virtual STDMETHODIMP _GetItemsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WalletItem*>*>* *operation);
	virtual STDMETHODIMP _GetItemsWithKindAsync(WalletItemKind kind, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WalletItem*>*>* *operation);
	virtual STDMETHODIMP _ImportItemAsync(Storage::Streams::IRandomAccessStreamReference* stream, Foundation::IAsyncOperation<WalletItem*>* *operation);
	virtual STDMETHODIMP _DeleteAsync(HSTRING id, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ShowAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ShowItemAsync(HSTRING id, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _UpdateAsync(WalletItem* item, Foundation::IAsyncAction* *operation);
};
template<typename X> struct IWalletItemStore_adaptor : X {
	ptr<Foundation::IAsyncAction> AddAsync(hstring_ref id, pptr<WalletItem> item) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_AddAsync(id, item, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ClearAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ClearAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<WalletItem>>> GetWalletItemAsync(hstring_ref id) { Foundation::IAsyncOperation<WalletItem*>* operation; hrcheck(X::get()->_GetWalletItemAsync(id, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<WalletItem>>>>> GetItemsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WalletItem*>*>* operation; hrcheck(X::get()->_GetItemsAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<WalletItem>>>>> GetItemsAsync(WalletItemKind kind) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WalletItem*>*>* operation; hrcheck(X::get()->_GetItemsWithKindAsync(kind, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<WalletItem>>> ImportItemAsync(pptr<Storage::Streams::IRandomAccessStreamReference> stream) { Foundation::IAsyncOperation<WalletItem*>* operation; hrcheck(X::get()->_ImportItemAsync(stream, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> DeleteAsync(hstring_ref id) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_DeleteAsync(id, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ShowAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ShowAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ShowAsync(hstring_ref id) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ShowItemAsync(id, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> UpdateAsync(pptr<WalletItem> item) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_UpdateAsync(item, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IWalletItemStore, X> : Windows::ApplicationModel::Wallet::IWalletItemStore_adaptor<X> { typedef adapt IWalletItemStore; };
struct IWalletItemStore : IWalletItemStore_raw, generate<IWalletItemStore> {};

// IWalletItemFactory
struct IWalletItemFactory : IInspectable {
	virtual STDMETHODIMP _CreateWalletItem(WalletItemKind kind, HSTRING displayName, WalletItem* *walletItem);
};

// WalletItem
template<typename> struct WalletItem_statics {
	static WalletItem *activate(WalletItemKind kind, hstring_ref displayName) { WalletItem *walletItem; hrcheck(get_activation_factory<WalletItem, IWalletItemFactory>()->_CreateWalletItem(kind, displayName, &walletItem)); return walletItem; }
};

template<typename X> struct statics<WalletItem, X> : X, Windows::ApplicationModel::Wallet::WalletItem_statics<void> {
	using Windows::ApplicationModel::Wallet::WalletItem_statics<void>::activate;
	typedef typename X::root_type WalletItem;
};
struct WalletItem : generate<WalletItem> {};

// IWalletItemStore2
struct IWalletItemStore2 : IInspectable {
	virtual STDMETHODIMP _add_ItemsChanged(Foundation::TypedEventHandler<WalletItemStore*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ItemsChanged(Foundation::EventRegistrationToken cookie);
};

// WalletItemStore
template<typename X> struct statics<WalletItemStore, X> : X {
	typedef typename X::root_type WalletItemStore;
};
struct WalletItemStore : generate<WalletItemStore> {
	using IWalletItemStore::ShowAsync;
	using IWalletItemStore::GetItemsAsync;
};

// IWalletManagerStatics
struct IWalletManagerStatics : IInspectable {
	virtual STDMETHODIMP _RequestStoreAsync(Foundation::IAsyncOperation<WalletItemStore*>* *operation);
};

// WalletManager
template<typename> struct WalletManager_statics {
	static ptr<Foundation::IAsyncOperation<ptr<WalletItemStore>>> RequestStoreAsync() { Foundation::IAsyncOperation<WalletItemStore*>* operation; hrcheck(get_activation_factory<WalletManager, IWalletManagerStatics>()->_RequestStoreAsync(&operation)); return from_abi(operation); }
};

template<typename X> struct statics<WalletManager, X> : X, Windows::ApplicationModel::Wallet::WalletManager_statics<void> {
	typedef typename X::root_type WalletManager;
};
struct WalletManager : generate<WalletManager> {};
}}}
} // namespace iso_winrt
