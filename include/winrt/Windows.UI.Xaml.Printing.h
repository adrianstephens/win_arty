#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Printing

#include "Windows.UI.Xaml.Printing.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.Xaml.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Graphics { namespace Printing {
struct PrintTaskOptions;
struct IPrintDocumentSource;
}}}

// defs

template<> struct def<Windows::UI::Xaml::Printing::PreviewPageCountType> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Printing::AddPagesEventHandler> : delegate_type {};
template<> struct def<Windows::UI::Xaml::Printing::IAddPagesEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Printing::AddPagesEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Printing::IAddPagesEventArgs> {};
template<> struct def<Windows::UI::Xaml::Printing::GetPreviewPageEventHandler> : delegate_type {};
template<> struct def<Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Printing::GetPreviewPageEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs> {};
template<> struct def<Windows::UI::Xaml::Printing::PaginateEventHandler> : delegate_type {};
template<> struct def<Windows::UI::Xaml::Printing::IPaginateEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Printing::PaginateEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Printing::IPaginateEventArgs> {};
template<> struct def<Windows::UI::Xaml::Printing::IPrintDocument> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Printing::IPrintDocumentStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Printing::IPrintDocumentFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Printing::PrintDocument> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Printing::IPrintDocument>, composer_type<Windows::UI::Xaml::Printing::IPrintDocumentFactory> {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Printing::AddPagesEventHandler> { define_guid(0xD4B57970, 0x57A0, 0x4209, 0x84, 0x7C, 0xC0, 0x93, 0xB5, 0x4B, 0xC7, 0x29);};
template<> struct uuid<Windows::UI::Xaml::Printing::IAddPagesEventArgs> { define_guid(0xE2E52BE5, 0x56C, 0x4420, 0x97, 0x95, 0xCB, 0x35, 0x26, 0xCE, 0xC, 0x20);};
template<> struct uuid<Windows::UI::Xaml::Printing::GetPreviewPageEventHandler> { define_guid(0xCCB3E9ED, 0x9C11, 0x4E50, 0xAB, 0x49, 0xE9, 0x80, 0x86, 0xBB, 0xFD, 0xEF);};
template<> struct uuid<Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs> { define_guid(0xA43D703D, 0xDEA9, 0x4DF6, 0xA7, 0xED, 0x35, 0x4, 0x9C, 0xD4, 0x85, 0xC7);};
template<> struct uuid<Windows::UI::Xaml::Printing::PaginateEventHandler> { define_guid(0xCC05B61, 0x811B, 0x4A32, 0x99, 0x65, 0x13, 0xEB, 0x78, 0xDB, 0xB0, 0x1B);};
template<> struct uuid<Windows::UI::Xaml::Printing::IPaginateEventArgs> { define_guid(0xED945FD6, 0x79AB, 0x42B7, 0x93, 0xA, 0x3D, 0x6E, 0x9, 0x1, 0x1D, 0x21);};
template<> struct uuid<Windows::UI::Xaml::Printing::IPrintDocument> { define_guid(0xE44327C3, 0xA999, 0x485B, 0xB1, 0xD8, 0x72, 0xDC, 0x51, 0x78, 0x21, 0xE6);};
template<> struct uuid<Windows::UI::Xaml::Printing::IPrintDocumentStatics> { define_guid(0xFD970A3C, 0xB152, 0x49E0, 0xA6, 0xBD, 0x6A, 0xA6, 0x47, 0x7E, 0x43, 0xC7);};
template<> struct uuid<Windows::UI::Xaml::Printing::IPrintDocumentFactory> { define_guid(0xFB87B18F, 0x2606, 0x4A2F, 0x99, 0xD4, 0xA7, 0xCD, 0xBC, 0x35, 0xD7, 0xC7);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Printing {

// AddPagesEventHandler
struct AddPagesEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IInspectable* sender, AddPagesEventArgs* e) = 0;
};

// IAddPagesEventArgs
struct IAddPagesEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PrintTaskOptions(Graphics::Printing::PrintTaskOptions* *value);
};
template<typename X> struct IAddPagesEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Graphics::Printing::PrintTaskOptions> get() { Graphics::Printing::PrintTaskOptions* value; hrcheck(enc(&IAddPagesEventArgs_adaptor::PrintTaskOptions)->_get_PrintTaskOptions(&value)); return from_abi(value); }
			ptr<Graphics::Printing::PrintTaskOptions> operator()() { return get(); }
			operator ptr<Graphics::Printing::PrintTaskOptions> () { return get(); }
			ptr<Graphics::Printing::PrintTaskOptions> operator->() { return get(); }
		} PrintTaskOptions;
	};
	IAddPagesEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAddPagesEventArgs, X> : Windows::UI::Xaml::Printing::IAddPagesEventArgs_adaptor<X> { typedef adapt IAddPagesEventArgs; };
struct IAddPagesEventArgs : IAddPagesEventArgs_raw, generate<IAddPagesEventArgs> {};

// AddPagesEventArgs
template<typename X> struct statics<AddPagesEventArgs, X> : X {
	typedef typename X::root_type AddPagesEventArgs;
};
struct AddPagesEventArgs : generate<AddPagesEventArgs> {};

// GetPreviewPageEventHandler
struct GetPreviewPageEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IInspectable* sender, GetPreviewPageEventArgs* e) = 0;
};

// IGetPreviewPageEventArgs
struct IGetPreviewPageEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PageNumber(int *value);
};
template<typename X> struct IGetPreviewPageEventArgs_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IGetPreviewPageEventArgs_adaptor::PageNumber)->_get_PageNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} PageNumber;
	};
	IGetPreviewPageEventArgs_adaptor() {}
};
template<typename X> struct adapt<IGetPreviewPageEventArgs, X> : Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs_adaptor<X> { typedef adapt IGetPreviewPageEventArgs; };
struct IGetPreviewPageEventArgs : IGetPreviewPageEventArgs_raw, generate<IGetPreviewPageEventArgs> {};

// GetPreviewPageEventArgs
template<typename X> struct statics<GetPreviewPageEventArgs, X> : X {
	typedef typename X::root_type GetPreviewPageEventArgs;
};
struct GetPreviewPageEventArgs : generate<GetPreviewPageEventArgs> {};

// PaginateEventHandler
struct PaginateEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IInspectable* sender, PaginateEventArgs* e) = 0;
};

// IPaginateEventArgs
struct IPaginateEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PrintTaskOptions(Graphics::Printing::PrintTaskOptions* *value);
	virtual STDMETHODIMP _get_CurrentPreviewPageNumber(int *value);
};
template<typename X> struct IPaginateEventArgs_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IPaginateEventArgs_adaptor::CurrentPreviewPageNumber)->_get_CurrentPreviewPageNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} CurrentPreviewPageNumber;
		struct : property {
			ptr<Graphics::Printing::PrintTaskOptions> get() { Graphics::Printing::PrintTaskOptions* value; hrcheck(enc(&IPaginateEventArgs_adaptor::PrintTaskOptions)->_get_PrintTaskOptions(&value)); return from_abi(value); }
			ptr<Graphics::Printing::PrintTaskOptions> operator()() { return get(); }
			operator ptr<Graphics::Printing::PrintTaskOptions> () { return get(); }
			ptr<Graphics::Printing::PrintTaskOptions> operator->() { return get(); }
		} PrintTaskOptions;
	};
	IPaginateEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPaginateEventArgs, X> : Windows::UI::Xaml::Printing::IPaginateEventArgs_adaptor<X> { typedef adapt IPaginateEventArgs; };
struct IPaginateEventArgs : IPaginateEventArgs_raw, generate<IPaginateEventArgs> {};

// PaginateEventArgs
template<typename X> struct statics<PaginateEventArgs, X> : X {
	typedef typename X::root_type PaginateEventArgs;
};
struct PaginateEventArgs : generate<PaginateEventArgs> {};

// IPrintDocument
struct IPrintDocument_raw : IInspectable {
	virtual STDMETHODIMP _get_DocumentSource(Graphics::Printing::IPrintDocumentSource* *value);
	virtual STDMETHODIMP _add_Paginate(PaginateEventHandler* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Paginate(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_GetPreviewPage(GetPreviewPageEventHandler* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_GetPreviewPage(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AddPages(AddPagesEventHandler* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AddPages(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _AddPage(UIElement* pageVisual);
	virtual STDMETHODIMP _AddPagesComplete();
	virtual STDMETHODIMP _SetPreviewPageCount(int count, PreviewPageCountType type);
	virtual STDMETHODIMP _SetPreviewPage(int pageNumber, UIElement* pageVisual);
	virtual STDMETHODIMP _InvalidatePreview();
};
template<typename X> struct IPrintDocument_adaptor : X {
	union {
		struct : property {
			ptr<Graphics::Printing::IPrintDocumentSource> get() { Graphics::Printing::IPrintDocumentSource* value; hrcheck(enc(&IPrintDocument_adaptor::DocumentSource)->_get_DocumentSource(&value)); return from_abi(value); }
			ptr<Graphics::Printing::IPrintDocumentSource> operator()() { return get(); }
			operator ptr<Graphics::Printing::IPrintDocumentSource> () { return get(); }
			ptr<Graphics::Printing::IPrintDocumentSource> operator->() { return get(); }
		} DocumentSource;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<AddPagesEventHandler> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPrintDocument_adaptor::AddPages)->_add_AddPages(value, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPrintDocument_adaptor::AddPages)->_remove_AddPages(token)); }
		} AddPages;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<GetPreviewPageEventHandler> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPrintDocument_adaptor::GetPreviewPage)->_add_GetPreviewPage(value, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPrintDocument_adaptor::GetPreviewPage)->_remove_GetPreviewPage(token)); }
		} GetPreviewPage;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<PaginateEventHandler> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPrintDocument_adaptor::Paginate)->_add_Paginate(value, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPrintDocument_adaptor::Paginate)->_remove_Paginate(token)); }
		} Paginate;
	};
	void AddPage(pptr<UIElement> pageVisual) { hrcheck(X::get()->_AddPage(pageVisual)); }
	void AddPagesComplete() { hrcheck(X::get()->_AddPagesComplete()); }
	void SetPreviewPageCount(int count, PreviewPageCountType type) { hrcheck(X::get()->_SetPreviewPageCount(count, type)); }
	void SetPreviewPage(int pageNumber, pptr<UIElement> pageVisual) { hrcheck(X::get()->_SetPreviewPage(pageNumber, pageVisual)); }
	void InvalidatePreview() { hrcheck(X::get()->_InvalidatePreview()); }
	IPrintDocument_adaptor() {}
};
template<typename X> struct adapt<IPrintDocument, X> : Windows::UI::Xaml::Printing::IPrintDocument_adaptor<X> { typedef adapt IPrintDocument; };
struct IPrintDocument : IPrintDocument_raw, generate<IPrintDocument> {};

// IPrintDocumentStatics
struct IPrintDocumentStatics : IInspectable {
	virtual STDMETHODIMP _get_DocumentSourceProperty(DependencyProperty* *value);
};

// IPrintDocumentFactory
struct IPrintDocumentFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, PrintDocument* *instance);
};

// PrintDocument
template<typename> struct PrintDocument_statics {
	static struct _DocumentSourceProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<PrintDocument, IPrintDocumentStatics>()->_get_DocumentSourceProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} DocumentSourceProperty;
	static PrintDocument *activate(object_ref outer, IInspectable* *inner) { PrintDocument *instance; hrcheck(get_activation_factory<PrintDocument, IPrintDocumentFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};
template<typename X> typename PrintDocument_statics<X>::_DocumentSourceProperty PrintDocument_statics<X>::DocumentSourceProperty;

template<typename X> struct statics<PrintDocument, X> : X, Windows::UI::Xaml::Printing::PrintDocument_statics<void> {
	using Windows::UI::Xaml::Printing::PrintDocument_statics<void>::activate;
	typedef typename X::root_type PrintDocument;
};
struct PrintDocument : generate<PrintDocument> {};
}}}}
} // namespace iso_winrt
