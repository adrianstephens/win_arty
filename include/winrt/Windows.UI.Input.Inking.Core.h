#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Input.Inking.Core

#include "Windows.UI.Input.Inking.Core.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IIterable;
}}
namespace UI { namespace Composition {
struct ContainerVisual;
}
namespace Core {
struct PointerEventArgs;
}
namespace Input { namespace Inking {
struct InkPoint;
struct InkPresenter;
struct InkDrawingAttributes;
struct InkStroke;
}}}}

// defs

template<> struct def<Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSourceStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource> : class_type<Platform::Object, Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource> {};
template<> struct def<Windows::UI::Input::Inking::Core::CoreWetStrokeDisposition> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateEventArgs> : class_type<Platform::Object, Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateEventArgs> {};
template<> struct def<Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateSource> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateSourceStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource> : class_type<Platform::Object, Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateSource> {};
template<> struct def<Windows::UI::Input::Inking::Core::ICoreInkPresenterHost> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::CoreInkPresenterHost> : class_type<Platform::Object, Windows::UI::Input::Inking::Core::ICoreInkPresenterHost> {};
template<> struct def<Windows::UI::Input::Inking::Core::ICoreIncrementalInkStroke> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::ICoreIncrementalInkStrokeFactory> : interface_type<> {};
template<> struct def<Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke> : class_type<Platform::Object, Windows::UI::Input::Inking::Core::ICoreIncrementalInkStroke>, custom_activators {};

// uuids

template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource> { define_guid(0x39B38DA9, 0x7639, 0x4499, 0xA5, 0xB5, 0x19, 0x1D, 0x0, 0xE3, 0x5B, 0x16);};
template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSourceStatics> { define_guid(0x73E6011B, 0x80C0, 0x4DFB, 0x9B, 0x66, 0x10, 0xBA, 0x7F, 0x3F, 0x9C, 0x84);};
template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateEventArgs> { define_guid(0xFB07D14C, 0x3380, 0x457A, 0xA9, 0x87, 0x99, 0x13, 0x57, 0x89, 0x6C, 0x1B);};
template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateSource> { define_guid(0x1F718E22, 0xEE52, 0x4E00, 0x82, 0x9, 0x4C, 0x3E, 0x5B, 0x21, 0xA3, 0xCC);};
template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateSourceStatics> { define_guid(0x3DAD9CBA, 0x1D3D, 0x46AE, 0xAB, 0x9D, 0x86, 0x47, 0x48, 0x6C, 0x6F, 0x90);};
template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreInkPresenterHost> { define_guid(0x396E89E6, 0x7D55, 0x4617, 0x9E, 0x58, 0x68, 0xC7, 0xC, 0x91, 0x69, 0xB9);};
template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreIncrementalInkStroke> { define_guid(0xFDA015D3, 0x9D66, 0x4F7D, 0xA5, 0x7F, 0xCC, 0x70, 0xB9, 0xCF, 0xAA, 0x76);};
template<> struct uuid<Windows::UI::Input::Inking::Core::ICoreIncrementalInkStrokeFactory> { define_guid(0xD7C59F46, 0x8DA8, 0x4F70, 0x97, 0x51, 0xE5, 0x3B, 0xB6, 0xDF, 0x45, 0x96);};

// types

namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

// ICoreInkIndependentInputSource
struct ICoreInkIndependentInputSource_raw : IInspectable {
	virtual STDMETHODIMP _add_PointerEntering(Foundation::TypedEventHandler<CoreInkIndependentInputSource*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerEntering(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerHovering(Foundation::TypedEventHandler<CoreInkIndependentInputSource*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerHovering(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerExiting(Foundation::TypedEventHandler<CoreInkIndependentInputSource*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerExiting(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerPressing(Foundation::TypedEventHandler<CoreInkIndependentInputSource*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerPressing(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerMoving(Foundation::TypedEventHandler<CoreInkIndependentInputSource*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerMoving(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerReleasing(Foundation::TypedEventHandler<CoreInkIndependentInputSource*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerReleasing(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_PointerLost(Foundation::TypedEventHandler<CoreInkIndependentInputSource*, UI::Core::PointerEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_PointerLost(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_InkPresenter(Inking::InkPresenter* *value);
};
template<typename X> struct ICoreInkIndependentInputSource_adaptor : X {
	union {
		struct : property {
			ptr<Inking::InkPresenter> get() { Inking::InkPresenter* value; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::InkPresenter)->_get_InkPresenter(&value)); return from_abi(value); }
			ptr<Inking::InkPresenter> operator()() { return get(); }
			operator ptr<Inking::InkPresenter> () { return get(); }
			ptr<Inking::InkPresenter> operator->() { return get(); }
		} InkPresenter;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInkIndependentInputSource>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerEntering)->_add_PointerEntering(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerEntering)->_remove_PointerEntering(cookie)); }
		} PointerEntering;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInkIndependentInputSource>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerExiting)->_add_PointerExiting(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerExiting)->_remove_PointerExiting(cookie)); }
		} PointerExiting;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInkIndependentInputSource>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerHovering)->_add_PointerHovering(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerHovering)->_remove_PointerHovering(cookie)); }
		} PointerHovering;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInkIndependentInputSource>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerLost)->_add_PointerLost(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerLost)->_remove_PointerLost(cookie)); }
		} PointerLost;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInkIndependentInputSource>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerMoving)->_add_PointerMoving(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerMoving)->_remove_PointerMoving(cookie)); }
		} PointerMoving;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInkIndependentInputSource>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerPressing)->_add_PointerPressing(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerPressing)->_remove_PointerPressing(cookie)); }
		} PointerPressing;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreInkIndependentInputSource>, ptr<UI::Core::PointerEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerReleasing)->_add_PointerReleasing(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreInkIndependentInputSource_adaptor::PointerReleasing)->_remove_PointerReleasing(cookie)); }
		} PointerReleasing;
	};
	ICoreInkIndependentInputSource_adaptor() {}
};
template<typename X> struct adapt<ICoreInkIndependentInputSource, X> : Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource_adaptor<X> { typedef adapt ICoreInkIndependentInputSource; };
struct ICoreInkIndependentInputSource : ICoreInkIndependentInputSource_raw, generate<ICoreInkIndependentInputSource> {};

// ICoreInkIndependentInputSourceStatics
struct ICoreInkIndependentInputSourceStatics : IInspectable {
	virtual STDMETHODIMP _Create(InkPresenter* inkPresenter, CoreInkIndependentInputSource* *inkIndependentInputSource);
};

// CoreInkIndependentInputSource
template<typename> struct CoreInkIndependentInputSource_statics {
	static ptr<CoreInkIndependentInputSource> Create(pptr<Inking::InkPresenter> inkPresenter) { CoreInkIndependentInputSource* inkIndependentInputSource; hrcheck(get_activation_factory<CoreInkIndependentInputSource, ICoreInkIndependentInputSourceStatics>()->_Create(inkPresenter, &inkIndependentInputSource)); return from_abi(inkIndependentInputSource); }
};

template<typename X> struct statics<CoreInkIndependentInputSource, X> : X, Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource_statics<void> {
	typedef typename X::root_type CoreInkIndependentInputSource;
};
struct CoreInkIndependentInputSource : generate<CoreInkIndependentInputSource> {};

// ICoreWetStrokeUpdateEventArgs
struct ICoreWetStrokeUpdateEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_NewInkPoints(Foundation::Collections::IVector<InkPoint*>* *value);
	virtual STDMETHODIMP _get_PointerId(unsigned *value);
	virtual STDMETHODIMP _get_Disposition(CoreWetStrokeDisposition *value);
	virtual STDMETHODIMP _put_Disposition(CoreWetStrokeDisposition value);
};
template<typename X> struct ICoreWetStrokeUpdateEventArgs_adaptor : X {
	union {
		struct : property {
			CoreWetStrokeDisposition get() { CoreWetStrokeDisposition value; hrcheck(enc(&ICoreWetStrokeUpdateEventArgs_adaptor::Disposition)->_get_Disposition(&value)); return value; }
			CoreWetStrokeDisposition operator()() { return get(); }
			operator CoreWetStrokeDisposition () { return get(); }
			void put(CoreWetStrokeDisposition value) { hrcheck(enc(&ICoreWetStrokeUpdateEventArgs_adaptor::Disposition)->_put_Disposition(value)); }
			void operator=(CoreWetStrokeDisposition value) { put(value); }
			void operator()(CoreWetStrokeDisposition value) { put(value); }
		} Disposition;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<InkPoint>>> get() { Foundation::Collections::IVector<InkPoint*>* value; hrcheck(enc(&ICoreWetStrokeUpdateEventArgs_adaptor::NewInkPoints)->_get_NewInkPoints(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<InkPoint>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<InkPoint>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<InkPoint>>> operator->() { return get(); }
		} NewInkPoints;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICoreWetStrokeUpdateEventArgs_adaptor::PointerId)->_get_PointerId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PointerId;
	};
	ICoreWetStrokeUpdateEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICoreWetStrokeUpdateEventArgs, X> : Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateEventArgs_adaptor<X> { typedef adapt ICoreWetStrokeUpdateEventArgs; };
struct ICoreWetStrokeUpdateEventArgs : ICoreWetStrokeUpdateEventArgs_raw, generate<ICoreWetStrokeUpdateEventArgs> {};

// CoreWetStrokeUpdateEventArgs
template<typename X> struct statics<CoreWetStrokeUpdateEventArgs, X> : X {
	typedef typename X::root_type CoreWetStrokeUpdateEventArgs;
};
struct CoreWetStrokeUpdateEventArgs : generate<CoreWetStrokeUpdateEventArgs> {};

// ICoreWetStrokeUpdateSource
struct ICoreWetStrokeUpdateSource_raw : IInspectable {
	virtual STDMETHODIMP _add_WetStrokeStarting(Foundation::TypedEventHandler<CoreWetStrokeUpdateSource*, CoreWetStrokeUpdateEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_WetStrokeStarting(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_WetStrokeContinuing(Foundation::TypedEventHandler<CoreWetStrokeUpdateSource*, CoreWetStrokeUpdateEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_WetStrokeContinuing(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_WetStrokeStopping(Foundation::TypedEventHandler<CoreWetStrokeUpdateSource*, CoreWetStrokeUpdateEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_WetStrokeStopping(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_WetStrokeCompleted(Foundation::TypedEventHandler<CoreWetStrokeUpdateSource*, CoreWetStrokeUpdateEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_WetStrokeCompleted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_WetStrokeCanceled(Foundation::TypedEventHandler<CoreWetStrokeUpdateSource*, CoreWetStrokeUpdateEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_WetStrokeCanceled(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_InkPresenter(Inking::InkPresenter* *value);
};
template<typename X> struct ICoreWetStrokeUpdateSource_adaptor : X {
	union {
		struct : property {
			ptr<Inking::InkPresenter> get() { Inking::InkPresenter* value; hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::InkPresenter)->_get_InkPresenter(&value)); return from_abi(value); }
			ptr<Inking::InkPresenter> operator()() { return get(); }
			operator ptr<Inking::InkPresenter> () { return get(); }
			ptr<Inking::InkPresenter> operator->() { return get(); }
		} InkPresenter;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWetStrokeUpdateSource>, ptr<CoreWetStrokeUpdateEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeCanceled)->_add_WetStrokeCanceled(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeCanceled)->_remove_WetStrokeCanceled(cookie)); }
		} WetStrokeCanceled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWetStrokeUpdateSource>, ptr<CoreWetStrokeUpdateEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeCompleted)->_add_WetStrokeCompleted(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeCompleted)->_remove_WetStrokeCompleted(cookie)); }
		} WetStrokeCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWetStrokeUpdateSource>, ptr<CoreWetStrokeUpdateEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeContinuing)->_add_WetStrokeContinuing(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeContinuing)->_remove_WetStrokeContinuing(cookie)); }
		} WetStrokeContinuing;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWetStrokeUpdateSource>, ptr<CoreWetStrokeUpdateEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeStarting)->_add_WetStrokeStarting(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeStarting)->_remove_WetStrokeStarting(cookie)); }
		} WetStrokeStarting;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CoreWetStrokeUpdateSource>, ptr<CoreWetStrokeUpdateEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeStopping)->_add_WetStrokeStopping(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ICoreWetStrokeUpdateSource_adaptor::WetStrokeStopping)->_remove_WetStrokeStopping(cookie)); }
		} WetStrokeStopping;
	};
	ICoreWetStrokeUpdateSource_adaptor() {}
};
template<typename X> struct adapt<ICoreWetStrokeUpdateSource, X> : Windows::UI::Input::Inking::Core::ICoreWetStrokeUpdateSource_adaptor<X> { typedef adapt ICoreWetStrokeUpdateSource; };
struct ICoreWetStrokeUpdateSource : ICoreWetStrokeUpdateSource_raw, generate<ICoreWetStrokeUpdateSource> {};

// ICoreWetStrokeUpdateSourceStatics
struct ICoreWetStrokeUpdateSourceStatics : IInspectable {
	virtual STDMETHODIMP _Create(InkPresenter* inkPresenter, CoreWetStrokeUpdateSource* *WetStrokeUpdateSource);
};

// CoreWetStrokeUpdateSource
template<typename> struct CoreWetStrokeUpdateSource_statics {
	static ptr<CoreWetStrokeUpdateSource> Create(pptr<Inking::InkPresenter> inkPresenter) { CoreWetStrokeUpdateSource* WetStrokeUpdateSource; hrcheck(get_activation_factory<CoreWetStrokeUpdateSource, ICoreWetStrokeUpdateSourceStatics>()->_Create(inkPresenter, &WetStrokeUpdateSource)); return from_abi(WetStrokeUpdateSource); }
};

template<typename X> struct statics<CoreWetStrokeUpdateSource, X> : X, Windows::UI::Input::Inking::Core::CoreWetStrokeUpdateSource_statics<void> {
	typedef typename X::root_type CoreWetStrokeUpdateSource;
};
struct CoreWetStrokeUpdateSource : generate<CoreWetStrokeUpdateSource> {};

// ICoreInkPresenterHost
struct ICoreInkPresenterHost_raw : IInspectable {
	virtual STDMETHODIMP _get_InkPresenter(Inking::InkPresenter* *value);
	virtual STDMETHODIMP _get_RootVisual(Composition::ContainerVisual* *value);
	virtual STDMETHODIMP _put_RootVisual(Composition::ContainerVisual* value);
};
template<typename X> struct ICoreInkPresenterHost_adaptor : X {
	union {
		struct : property {
			ptr<Inking::InkPresenter> get() { Inking::InkPresenter* value; hrcheck(enc(&ICoreInkPresenterHost_adaptor::InkPresenter)->_get_InkPresenter(&value)); return from_abi(value); }
			ptr<Inking::InkPresenter> operator()() { return get(); }
			operator ptr<Inking::InkPresenter> () { return get(); }
			ptr<Inking::InkPresenter> operator->() { return get(); }
		} InkPresenter;
		struct : property {
			ptr<Composition::ContainerVisual> get() { Composition::ContainerVisual* value; hrcheck(enc(&ICoreInkPresenterHost_adaptor::RootVisual)->_get_RootVisual(&value)); return from_abi(value); }
			ptr<Composition::ContainerVisual> operator()() { return get(); }
			operator ptr<Composition::ContainerVisual> () { return get(); }
			ptr<Composition::ContainerVisual> operator->() { return get(); }
			void put(pptr<Composition::ContainerVisual> value) { hrcheck(enc(&ICoreInkPresenterHost_adaptor::RootVisual)->_put_RootVisual(value)); }
			void operator=(pptr<Composition::ContainerVisual> value) { put(value); }
			void operator()(pptr<Composition::ContainerVisual> value) { put(value); }
		} RootVisual;
	};
	ICoreInkPresenterHost_adaptor() {}
};
template<typename X> struct adapt<ICoreInkPresenterHost, X> : Windows::UI::Input::Inking::Core::ICoreInkPresenterHost_adaptor<X> { typedef adapt ICoreInkPresenterHost; };
struct ICoreInkPresenterHost : ICoreInkPresenterHost_raw, generate<ICoreInkPresenterHost> {};

// CoreInkPresenterHost
template<typename X> struct statics<CoreInkPresenterHost, X> : X {
	typedef typename X::root_type CoreInkPresenterHost;
};
struct CoreInkPresenterHost : generate<CoreInkPresenterHost> {};

// ICoreIncrementalInkStroke
struct ICoreIncrementalInkStroke_raw : IInspectable {
	virtual STDMETHODIMP _AppendInkPoints(Foundation::Collections::IIterable<InkPoint*>* inkPoints, Foundation::Rect *result);
	virtual STDMETHODIMP _CreateInkStroke(InkStroke* *result);
	virtual STDMETHODIMP _get_DrawingAttributes(InkDrawingAttributes* *value);
	virtual STDMETHODIMP _get_PointTransform(Foundation::Numerics::Matrix3x2 *value);
	virtual STDMETHODIMP _get_BoundingRect(Foundation::Rect *value);
};
template<typename X> struct ICoreIncrementalInkStroke_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ICoreIncrementalInkStroke_adaptor::BoundingRect)->_get_BoundingRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} BoundingRect;
		struct : property {
			ptr<InkDrawingAttributes> get() { InkDrawingAttributes* value; hrcheck(enc(&ICoreIncrementalInkStroke_adaptor::DrawingAttributes)->_get_DrawingAttributes(&value)); return from_abi(value); }
			ptr<InkDrawingAttributes> operator()() { return get(); }
			operator ptr<InkDrawingAttributes> () { return get(); }
			ptr<InkDrawingAttributes> operator->() { return get(); }
		} DrawingAttributes;
		struct : property {
			Foundation::Numerics::Matrix3x2 get() { Foundation::Numerics::Matrix3x2 value; hrcheck(enc(&ICoreIncrementalInkStroke_adaptor::PointTransform)->_get_PointTransform(&value)); return value; }
			Foundation::Numerics::Matrix3x2 operator()() { return get(); }
			operator Foundation::Numerics::Matrix3x2 () { return get(); }
		} PointTransform;
	};
	Foundation::Rect AppendInkPoints(pptr<Foundation::Collections::IIterable<ptr<InkPoint>>> inkPoints) { Foundation::Rect result; hrcheck(X::get()->_AppendInkPoints(to_abi(inkPoints), &result)); return result; }
	ptr<InkStroke> CreateInkStroke() { InkStroke* result; hrcheck(X::get()->_CreateInkStroke(&result)); return from_abi(result); }
	ICoreIncrementalInkStroke_adaptor() {}
};
template<typename X> struct adapt<ICoreIncrementalInkStroke, X> : Windows::UI::Input::Inking::Core::ICoreIncrementalInkStroke_adaptor<X> { typedef adapt ICoreIncrementalInkStroke; };
struct ICoreIncrementalInkStroke : ICoreIncrementalInkStroke_raw, generate<ICoreIncrementalInkStroke> {};

// ICoreIncrementalInkStrokeFactory
struct ICoreIncrementalInkStrokeFactory : IInspectable {
	virtual STDMETHODIMP _Create(InkDrawingAttributes* drawingAttributes, Foundation::Numerics::Matrix3x2 pointTransform, CoreIncrementalInkStroke* *result);
};

// CoreIncrementalInkStroke
template<typename> struct CoreIncrementalInkStroke_statics {
	static CoreIncrementalInkStroke *activate(pptr<InkDrawingAttributes> drawingAttributes, const Foundation::Numerics::Matrix3x2& pointTransform) { CoreIncrementalInkStroke *result; hrcheck(get_activation_factory<CoreIncrementalInkStroke, ICoreIncrementalInkStrokeFactory>()->_Create(drawingAttributes, pointTransform, &result)); return result; }
};

template<typename X> struct statics<CoreIncrementalInkStroke, X> : X, Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke_statics<void> {
	using Windows::UI::Input::Inking::Core::CoreIncrementalInkStroke_statics<void>::activate;
	typedef typename X::root_type CoreIncrementalInkStroke;
};
struct CoreIncrementalInkStroke : generate<CoreIncrementalInkStroke> {};
}}}}}
} // namespace iso_winrt
