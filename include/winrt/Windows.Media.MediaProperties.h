#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.MediaProperties

#include "Windows.Media.MediaProperties.0.h"
#include "Windows.Foundation.Collections.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
template<typename TResult> struct IAsyncOperation;
}
namespace Media { namespace Core {
struct AudioStreamDescriptor;
struct TimedMetadataStreamDescriptor;
struct VideoStreamDescriptor;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStream;
}
struct IStorageFile;
}}

// defs

template<> struct def<Windows::Media::MediaProperties::StereoscopicVideoPackingMode> : enum_type<int> {};
template<> struct def<Windows::Media::MediaProperties::SphericalVideoFrameFormat> : enum_type<int> {};
template<> struct def<Windows::Media::MediaProperties::IMediaRatio> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::MediaRatio> : class_type<Platform::Object, Windows::Media::MediaProperties::IMediaRatio> {};
template<> struct def<Windows::Media::MediaProperties::MediaPropertySet> : class_type<Platform::Object, Windows::Foundation::Collections::IMap<Platform::Guid, object>, Windows::Foundation::Collections::IIterable<ptr<Windows::Foundation::Collections::IKeyValuePair<Platform::Guid, object>>>> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingProperties> : overridable_type<> {};
template<> struct def<Windows::Media::MediaProperties::IAudioEncodingProperties> : interface_type<Windows::Media::MediaProperties::IMediaEncodingProperties> {};
template<> struct def<Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IAudioEncodingProperties2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IAudioEncodingProperties3> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::AudioEncodingProperties> : class_type<Platform::Object, Windows::Media::MediaProperties::IAudioEncodingProperties, Windows::Media::MediaProperties::IAudioEncodingProperties3, Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData, Windows::Media::MediaProperties::IAudioEncodingProperties2> {};
template<> struct def<Windows::Media::MediaProperties::IVideoEncodingProperties> : interface_type<Windows::Media::MediaProperties::IMediaEncodingProperties> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics3> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics4> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::MediaEncodingSubtypes> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::MediaProperties::IH264ProfileIdsStatics> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::H264ProfileIds> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::MediaProperties::IMpeg2ProfileIdsStatics> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::Mpeg2ProfileIds> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::MediaProperties::IVideoEncodingProperties2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IVideoEncodingProperties3> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IVideoEncodingProperties4> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IVideoEncodingProperties5> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::VideoEncodingProperties> : class_type<Platform::Object, Windows::Media::MediaProperties::IVideoEncodingProperties, Windows::Media::MediaProperties::IVideoEncodingProperties5, Windows::Media::MediaProperties::IVideoEncodingProperties2, Windows::Media::MediaProperties::IVideoEncodingProperties3, Windows::Media::MediaProperties::IVideoEncodingProperties4> {};
template<> struct def<Windows::Media::MediaProperties::ITimedMetadataEncodingProperties> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::TimedMetadataEncodingProperties> : class_type<Platform::Object, Windows::Media::MediaProperties::IMediaEncodingProperties, Windows::Media::MediaProperties::ITimedMetadataEncodingProperties> {};
template<> struct def<Windows::Media::MediaProperties::IImageEncodingProperties> : interface_type<Windows::Media::MediaProperties::IMediaEncodingProperties> {};
template<> struct def<Windows::Media::MediaProperties::IImageEncodingProperties2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::MediaPixelFormat> : enum_type<int> {};
template<> struct def<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::ImageEncodingProperties> : class_type<Platform::Object, Windows::Media::MediaProperties::IImageEncodingProperties, Windows::Media::MediaProperties::IImageEncodingProperties2> {};
template<> struct def<Windows::Media::MediaProperties::MediaThumbnailFormat> : enum_type<int> {};
template<> struct def<Windows::Media::MediaProperties::IContainerEncodingProperties> : interface_type<Windows::Media::MediaProperties::IMediaEncodingProperties> {};
template<> struct def<Windows::Media::MediaProperties::IContainerEncodingProperties2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::ContainerEncodingProperties> : class_type<Platform::Object, Windows::Media::MediaProperties::IContainerEncodingProperties, Windows::Media::MediaProperties::IContainerEncodingProperties2> {};
template<> struct def<Windows::Media::MediaProperties::AudioEncodingQuality> : enum_type<int> {};
template<> struct def<Windows::Media::MediaProperties::VideoEncodingQuality> : enum_type<int> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingProfileStatics> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingProfileStatics3> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingProfileStatics2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingProfile3> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingProfile2> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::IMediaEncodingProfile> : interface_type<> {};
template<> struct def<Windows::Media::MediaProperties::MediaEncodingProfile> : class_type<Platform::Object, Windows::Media::MediaProperties::IMediaEncodingProfile, Windows::Media::MediaProperties::IMediaEncodingProfile2, Windows::Media::MediaProperties::IMediaEncodingProfile3> {};
template<> struct def<Windows::Media::MediaProperties::MediaRotation> : enum_type<int> {};
template<> struct def<Windows::Media::MediaProperties::MediaMirroringOptions> : enum_type<unsigned> {};

// uuids

template<> struct uuid<Windows::Media::MediaProperties::IMediaRatio> { define_guid(0xD2D0FEE5, 0x8929, 0x401D, 0xAC, 0x78, 0x7D, 0x35, 0x7E, 0x37, 0x81, 0x63);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingProperties> { define_guid(0xB4002AF6, 0xACD4, 0x4E5A, 0xA2, 0x4B, 0x5D, 0x74, 0x98, 0xA8, 0xB8, 0xC4);};
template<> struct uuid<Windows::Media::MediaProperties::IAudioEncodingProperties> { define_guid(0x62BC7A16, 0x5C, 0x4B3B, 0x8A, 0xB, 0xA, 0x9, 0xE, 0x96, 0x87, 0xF3);};
template<> struct uuid<Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData> { define_guid(0x98F10D79, 0x13EA, 0x49FF, 0xBE, 0x70, 0x26, 0x73, 0xDB, 0x69, 0x70, 0x2C);};
template<> struct uuid<Windows::Media::MediaProperties::IAudioEncodingProperties2> { define_guid(0xC45D54DA, 0x80BD, 0x4C23, 0x80, 0xD5, 0x72, 0xD4, 0xA1, 0x81, 0xE8, 0x94);};
template<> struct uuid<Windows::Media::MediaProperties::IAudioEncodingProperties3> { define_guid(0x87600341, 0x748C, 0x4F8D, 0xB0, 0xFD, 0x10, 0xCA, 0xF0, 0x8F, 0xF0, 0x87);};
template<> struct uuid<Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics2> { define_guid(0x7489316F, 0x77A0, 0x433D, 0x8E, 0xD5, 0x40, 0x40, 0x28, 0xE, 0x86, 0x65);};
template<> struct uuid<Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics> { define_guid(0xCAD332C, 0xEBE9, 0x4527, 0xB3, 0x6D, 0xE4, 0x2A, 0x13, 0xCF, 0x38, 0xDB);};
template<> struct uuid<Windows::Media::MediaProperties::IVideoEncodingProperties> { define_guid(0x76EE6C9A, 0x37C2, 0x4F2A, 0x88, 0xA, 0x12, 0x82, 0xBB, 0xB4, 0x37, 0x3D);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics> { define_guid(0x37B6580E, 0xA171, 0x4464, 0xBA, 0x5A, 0x53, 0x18, 0x9E, 0x48, 0xC1, 0xC8);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics2> { define_guid(0x4B7CD23D, 0x42FF, 0x4D33, 0x85, 0x31, 0x6, 0x26, 0xBE, 0xE4, 0xB5, 0x2D);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics3> { define_guid(0xBA2414E4, 0x883D, 0x464E, 0xA4, 0x4F, 0x9, 0x7D, 0xA0, 0x8E, 0xF7, 0xFF);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics4> { define_guid(0xDDECE58A, 0x3949, 0x4644, 0x8A, 0x2C, 0x59, 0xEF, 0x2, 0xC6, 0x42, 0xFA);};
template<> struct uuid<Windows::Media::MediaProperties::IH264ProfileIdsStatics> { define_guid(0x38654CA7, 0x846A, 0x4F97, 0xA2, 0xE5, 0xC3, 0xA1, 0x5B, 0xBF, 0x70, 0xFD);};
template<> struct uuid<Windows::Media::MediaProperties::IMpeg2ProfileIdsStatics> { define_guid(0xA461FF85, 0xE57A, 0x4128, 0x9B, 0x21, 0xD5, 0x33, 0x1B, 0x4, 0x23, 0x5C);};
template<> struct uuid<Windows::Media::MediaProperties::IVideoEncodingProperties2> { define_guid(0xF743A1EF, 0xD465, 0x4290, 0xA9, 0x4B, 0xEF, 0xF, 0x15, 0x28, 0xF8, 0xE3);};
template<> struct uuid<Windows::Media::MediaProperties::IVideoEncodingProperties3> { define_guid(0x386BCDC4, 0x873A, 0x479F, 0xB3, 0xEB, 0x56, 0xC1, 0xFC, 0xBE, 0xC6, 0xD7);};
template<> struct uuid<Windows::Media::MediaProperties::IVideoEncodingProperties4> { define_guid(0x724EF014, 0xC10C, 0x40F2, 0x9D, 0x72, 0x3E, 0xE1, 0x3B, 0x45, 0xFA, 0x8E);};
template<> struct uuid<Windows::Media::MediaProperties::IVideoEncodingProperties5> { define_guid(0x4959080F, 0x272F, 0x4ECE, 0xA4, 0xDF, 0xC0, 0xCC, 0xDB, 0x33, 0xD8, 0x40);};
template<> struct uuid<Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics2> { define_guid(0xCF1EBD5D, 0x49FE, 0x4D00, 0xB5, 0x9A, 0xCF, 0xA4, 0xDF, 0xC5, 0x19, 0x44);};
template<> struct uuid<Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics> { define_guid(0x3CE14D44, 0x1DC5, 0x43DB, 0x9F, 0x38, 0xEB, 0xEB, 0xF9, 0x1, 0x52, 0xCB);};
template<> struct uuid<Windows::Media::MediaProperties::ITimedMetadataEncodingProperties> { define_guid(0x51CD30D3, 0xD690, 0x4CFA, 0x97, 0xF4, 0x4A, 0x39, 0x8E, 0x9D, 0xB4, 0x20);};
template<> struct uuid<Windows::Media::MediaProperties::IImageEncodingProperties> { define_guid(0x78625635, 0xF331, 0x4189, 0xB1, 0xC3, 0xB4, 0x8D, 0x5A, 0xE0, 0x34, 0xF1);};
template<> struct uuid<Windows::Media::MediaProperties::IImageEncodingProperties2> { define_guid(0xC854A2DF, 0xC923, 0x469B, 0xAC, 0x8E, 0x6A, 0x9F, 0x3C, 0x1C, 0xD9, 0xE3);};
template<> struct uuid<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics2> { define_guid(0xF6C25B29, 0x3824, 0x46B0, 0x95, 0x6E, 0x50, 0x13, 0x29, 0xE1, 0xBE, 0x3C);};
template<> struct uuid<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics> { define_guid(0x257C68DC, 0x8B99, 0x439E, 0xAA, 0x59, 0x91, 0x3A, 0x36, 0x16, 0x12, 0x97);};
template<> struct uuid<Windows::Media::MediaProperties::IContainerEncodingProperties> { define_guid(0x59AC2A57, 0xB32A, 0x479E, 0x8A, 0x61, 0x4B, 0x7F, 0x2E, 0x9E, 0x7E, 0xA0);};
template<> struct uuid<Windows::Media::MediaProperties::IContainerEncodingProperties2> { define_guid(0xB272C029, 0xAE26, 0x4819, 0xBA, 0xAD, 0xAD, 0x7A, 0x49, 0xB0, 0xA8, 0x76);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingProfileStatics> { define_guid(0x197F352C, 0x2EDE, 0x4A45, 0xA8, 0x96, 0x81, 0x7A, 0x48, 0x54, 0xF8, 0xFE);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingProfileStatics3> { define_guid(0x90DAC5AA, 0xCF76, 0x4294, 0xA9, 0xED, 0x1A, 0x14, 0x20, 0xF5, 0x1F, 0x6B);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingProfileStatics2> { define_guid(0xCE8DE74F, 0x6AF4, 0x4288, 0x8F, 0xE2, 0x79, 0xAD, 0xF1, 0xF7, 0x9A, 0x43);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingProfile3> { define_guid(0xBA6EBE88, 0x7570, 0x4E69, 0xAC, 0xCF, 0x56, 0x11, 0xAD, 0x1, 0x5F, 0x88);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingProfile2> { define_guid(0x349B3E0A, 0x4035, 0x488E, 0x98, 0x77, 0x85, 0x63, 0x28, 0x65, 0xED, 0x10);};
template<> struct uuid<Windows::Media::MediaProperties::IMediaEncodingProfile> { define_guid(0xE7DBF5A8, 0x1DB9, 0x4783, 0x87, 0x6B, 0x3D, 0xFE, 0x12, 0xAC, 0xFD, 0xB3);};

// types

namespace Windows { namespace Media { namespace MediaProperties {

// IMediaRatio
struct IMediaRatio_raw : IInspectable {
	virtual STDMETHODIMP _put_Numerator(unsigned value);
	virtual STDMETHODIMP _get_Numerator(unsigned *value);
	virtual STDMETHODIMP _put_Denominator(unsigned value);
	virtual STDMETHODIMP _get_Denominator(unsigned *value);
};
template<typename X> struct IMediaRatio_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaRatio_adaptor::Denominator)->_get_Denominator(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IMediaRatio_adaptor::Denominator)->_put_Denominator(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Denominator;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaRatio_adaptor::Numerator)->_get_Numerator(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IMediaRatio_adaptor::Numerator)->_put_Numerator(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Numerator;
	};
	IMediaRatio_adaptor() {}
};
template<typename X> struct adapt<IMediaRatio, X> : Windows::Media::MediaProperties::IMediaRatio_adaptor<X> { typedef adapt IMediaRatio; };
struct IMediaRatio : IMediaRatio_raw, generate<IMediaRatio> {};

// MediaRatio
template<typename X> struct statics<MediaRatio, X> : X {
	typedef typename X::root_type MediaRatio;
};
struct MediaRatio : generate<MediaRatio> {};

// MediaPropertySet
template<typename X> struct statics<MediaPropertySet, X> : X {
	typedef typename X::root_type MediaPropertySet;
};
struct MediaPropertySet : generate<MediaPropertySet> {};

// IMediaEncodingProperties
struct IMediaEncodingProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Properties(MediaPropertySet* *value) = 0;
	virtual STDMETHODIMP _get_Type(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_Subtype(HSTRING value) = 0;
	virtual STDMETHODIMP _get_Subtype(HSTRING *value) = 0;
};
template<typename X> struct IMediaEncodingProperties_adaptor : X {
	union {
		struct : property {
			ptr<MediaPropertySet> get() { MediaPropertySet* value; hrcheck(enc(&IMediaEncodingProperties_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<MediaPropertySet> operator()() { return get(); }
			operator ptr<MediaPropertySet> () { return get(); }
			ptr<MediaPropertySet> operator->() { return get(); }
		} Properties;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaEncodingProperties_adaptor::Subtype)->_get_Subtype(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMediaEncodingProperties_adaptor::Subtype)->_put_Subtype(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subtype;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaEncodingProperties_adaptor::Type)->_get_Type(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Type;
	};
	IMediaEncodingProperties_adaptor() {}
};
template<typename X> struct adapt<IMediaEncodingProperties, X> : Windows::Media::MediaProperties::IMediaEncodingProperties_adaptor<X> { typedef adapt IMediaEncodingProperties; };
template<typename X> struct IMediaEncodingProperties_unadaptor : X {
	STDMETHODIMP _get_Properties(MediaPropertySet* *value) { return hrtry([&, this] { get_prop(value, Properties); }); }
	STDMETHODIMP _get_Type(HSTRING *value) { return hrtry([&, this] { get_prop(value, Type); }); }
	STDMETHODIMP _put_Subtype(HSTRING value) { return hrtry([&, this] { put_prop(value, Subtype); }); }
	STDMETHODIMP _get_Subtype(HSTRING *value) { return hrtry([&, this] { get_prop(value, Subtype); }); }
};
template<typename X> struct unadapt<IMediaEncodingProperties, X> : Windows::Media::MediaProperties::IMediaEncodingProperties_unadaptor<X> {};
struct IMediaEncodingProperties : IMediaEncodingProperties_raw, generate<IMediaEncodingProperties> {};

// IAudioEncodingProperties
struct IAudioEncodingProperties_raw : IInspectable {
	virtual STDMETHODIMP _put_Bitrate(unsigned value);
	virtual STDMETHODIMP _get_Bitrate(unsigned *value);
	virtual STDMETHODIMP _put_ChannelCount(unsigned value);
	virtual STDMETHODIMP _get_ChannelCount(unsigned *value);
	virtual STDMETHODIMP _put_SampleRate(unsigned value);
	virtual STDMETHODIMP _get_SampleRate(unsigned *value);
	virtual STDMETHODIMP _put_BitsPerSample(unsigned value);
	virtual STDMETHODIMP _get_BitsPerSample(unsigned *value);
};
template<typename X> struct IAudioEncodingProperties_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAudioEncodingProperties_adaptor::Bitrate)->_get_Bitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAudioEncodingProperties_adaptor::Bitrate)->_put_Bitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Bitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAudioEncodingProperties_adaptor::BitsPerSample)->_get_BitsPerSample(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAudioEncodingProperties_adaptor::BitsPerSample)->_put_BitsPerSample(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} BitsPerSample;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAudioEncodingProperties_adaptor::ChannelCount)->_get_ChannelCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAudioEncodingProperties_adaptor::ChannelCount)->_put_ChannelCount(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ChannelCount;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAudioEncodingProperties_adaptor::SampleRate)->_get_SampleRate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAudioEncodingProperties_adaptor::SampleRate)->_put_SampleRate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} SampleRate;
	};
	IAudioEncodingProperties_adaptor() {}
};
template<typename X> struct adapt<IAudioEncodingProperties, X> : Windows::Media::MediaProperties::IAudioEncodingProperties_adaptor<X> { typedef adapt IAudioEncodingProperties; };
struct IAudioEncodingProperties : IAudioEncodingProperties_raw, generate<IAudioEncodingProperties> {};

// IAudioEncodingPropertiesWithFormatUserData
struct IAudioEncodingPropertiesWithFormatUserData_raw : IInspectable {
	virtual STDMETHODIMP _SetFormatUserData(unsigned valueSize, unsigned char *value);
	virtual STDMETHODIMP _GetFormatUserData(unsigned *valueSize, unsigned char **value);
};
template<typename X> struct IAudioEncodingPropertiesWithFormatUserData_adaptor : X {
	void SetFormatUserData(const szarray<unsigned char>& value) { hrcheck(X::get()->_SetFormatUserData(value.size, to_abi(value.p))); }
	szarray<unsigned char> GetFormatUserData() { szarray<unsigned char> value; hrcheck(X::get()->_GetFormatUserData(&value.size, &value.p)); return value; }
};
template<typename X> struct adapt<IAudioEncodingPropertiesWithFormatUserData, X> : Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData_adaptor<X> { typedef adapt IAudioEncodingPropertiesWithFormatUserData; };
struct IAudioEncodingPropertiesWithFormatUserData : IAudioEncodingPropertiesWithFormatUserData_raw, generate<IAudioEncodingPropertiesWithFormatUserData> {};

// IAudioEncodingProperties2
struct IAudioEncodingProperties2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSpatial(bool *value);
};
template<typename X> struct IAudioEncodingProperties2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAudioEncodingProperties2_adaptor::IsSpatial)->_get_IsSpatial(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSpatial;
	};
	IAudioEncodingProperties2_adaptor() {}
};
template<typename X> struct adapt<IAudioEncodingProperties2, X> : Windows::Media::MediaProperties::IAudioEncodingProperties2_adaptor<X> { typedef adapt IAudioEncodingProperties2; };
struct IAudioEncodingProperties2 : IAudioEncodingProperties2_raw, generate<IAudioEncodingProperties2> {};

// IAudioEncodingProperties3
struct IAudioEncodingProperties3_raw : IInspectable {
	virtual STDMETHODIMP _Copy(AudioEncodingProperties* *result);
};
template<typename X> struct IAudioEncodingProperties3_adaptor : X {
	ptr<AudioEncodingProperties> Copy() { AudioEncodingProperties* result; hrcheck(X::get()->_Copy(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IAudioEncodingProperties3, X> : Windows::Media::MediaProperties::IAudioEncodingProperties3_adaptor<X> { typedef adapt IAudioEncodingProperties3; };
struct IAudioEncodingProperties3 : IAudioEncodingProperties3_raw, generate<IAudioEncodingProperties3> {};

// IAudioEncodingPropertiesStatics2
struct IAudioEncodingPropertiesStatics2 : IInspectable {
	virtual STDMETHODIMP _CreateAlac(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample, AudioEncodingProperties* *value);
	virtual STDMETHODIMP _CreateFlac(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample, AudioEncodingProperties* *value);
};

// IAudioEncodingPropertiesStatics
struct IAudioEncodingPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _CreateAac(unsigned sampleRate, unsigned channelCount, unsigned bitrate, AudioEncodingProperties* *value);
	virtual STDMETHODIMP _CreateAacAdts(unsigned sampleRate, unsigned channelCount, unsigned bitrate, AudioEncodingProperties* *value);
	virtual STDMETHODIMP _CreateMp3(unsigned sampleRate, unsigned channelCount, unsigned bitrate, AudioEncodingProperties* *value);
	virtual STDMETHODIMP _CreatePcm(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample, AudioEncodingProperties* *value);
	virtual STDMETHODIMP _CreateWma(unsigned sampleRate, unsigned channelCount, unsigned bitrate, AudioEncodingProperties* *value);
};

// AudioEncodingProperties
template<typename> struct AudioEncodingProperties_statics {
	static ptr<AudioEncodingProperties> CreateAlac(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample) { AudioEncodingProperties* value; hrcheck(get_activation_factory<AudioEncodingProperties, IAudioEncodingPropertiesStatics2>()->_CreateAlac(sampleRate, channelCount, bitsPerSample, &value)); return from_abi(value); }
	static ptr<AudioEncodingProperties> CreateFlac(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample) { AudioEncodingProperties* value; hrcheck(get_activation_factory<AudioEncodingProperties, IAudioEncodingPropertiesStatics2>()->_CreateFlac(sampleRate, channelCount, bitsPerSample, &value)); return from_abi(value); }
	static ptr<AudioEncodingProperties> CreateAac(unsigned sampleRate, unsigned channelCount, unsigned bitrate) { AudioEncodingProperties* value; hrcheck(get_activation_factory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>()->_CreateAac(sampleRate, channelCount, bitrate, &value)); return from_abi(value); }
	static ptr<AudioEncodingProperties> CreateAacAdts(unsigned sampleRate, unsigned channelCount, unsigned bitrate) { AudioEncodingProperties* value; hrcheck(get_activation_factory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>()->_CreateAacAdts(sampleRate, channelCount, bitrate, &value)); return from_abi(value); }
	static ptr<AudioEncodingProperties> CreateMp3(unsigned sampleRate, unsigned channelCount, unsigned bitrate) { AudioEncodingProperties* value; hrcheck(get_activation_factory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>()->_CreateMp3(sampleRate, channelCount, bitrate, &value)); return from_abi(value); }
	static ptr<AudioEncodingProperties> CreatePcm(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample) { AudioEncodingProperties* value; hrcheck(get_activation_factory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>()->_CreatePcm(sampleRate, channelCount, bitsPerSample, &value)); return from_abi(value); }
	static ptr<AudioEncodingProperties> CreateWma(unsigned sampleRate, unsigned channelCount, unsigned bitrate) { AudioEncodingProperties* value; hrcheck(get_activation_factory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>()->_CreateWma(sampleRate, channelCount, bitrate, &value)); return from_abi(value); }
};

template<typename X> struct statics<AudioEncodingProperties, X> : X, Windows::Media::MediaProperties::AudioEncodingProperties_statics<void> {
	typedef typename X::root_type AudioEncodingProperties;
};
struct AudioEncodingProperties : generate<AudioEncodingProperties> {};

// IVideoEncodingProperties
struct IVideoEncodingProperties_raw : IInspectable {
	virtual STDMETHODIMP _put_Bitrate(unsigned value);
	virtual STDMETHODIMP _get_Bitrate(unsigned *value);
	virtual STDMETHODIMP _put_Width(unsigned value);
	virtual STDMETHODIMP _get_Width(unsigned *value);
	virtual STDMETHODIMP _put_Height(unsigned value);
	virtual STDMETHODIMP _get_Height(unsigned *value);
	virtual STDMETHODIMP _get_FrameRate(MediaRatio* *value);
	virtual STDMETHODIMP _get_PixelAspectRatio(MediaRatio* *value);
};
template<typename X> struct IVideoEncodingProperties_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoEncodingProperties_adaptor::Bitrate)->_get_Bitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IVideoEncodingProperties_adaptor::Bitrate)->_put_Bitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Bitrate;
		struct : property {
			ptr<MediaRatio> get() { MediaRatio* value; hrcheck(enc(&IVideoEncodingProperties_adaptor::FrameRate)->_get_FrameRate(&value)); return from_abi(value); }
			ptr<MediaRatio> operator()() { return get(); }
			operator ptr<MediaRatio> () { return get(); }
			ptr<MediaRatio> operator->() { return get(); }
		} FrameRate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoEncodingProperties_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IVideoEncodingProperties_adaptor::Height)->_put_Height(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Height;
		struct : property {
			ptr<MediaRatio> get() { MediaRatio* value; hrcheck(enc(&IVideoEncodingProperties_adaptor::PixelAspectRatio)->_get_PixelAspectRatio(&value)); return from_abi(value); }
			ptr<MediaRatio> operator()() { return get(); }
			operator ptr<MediaRatio> () { return get(); }
			ptr<MediaRatio> operator->() { return get(); }
		} PixelAspectRatio;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoEncodingProperties_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IVideoEncodingProperties_adaptor::Width)->_put_Width(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Width;
	};
	IVideoEncodingProperties_adaptor() {}
};
template<typename X> struct adapt<IVideoEncodingProperties, X> : Windows::Media::MediaProperties::IVideoEncodingProperties_adaptor<X> { typedef adapt IVideoEncodingProperties; };
struct IVideoEncodingProperties : IVideoEncodingProperties_raw, generate<IVideoEncodingProperties> {};

// IMediaEncodingSubtypesStatics
struct IMediaEncodingSubtypesStatics : IInspectable {
	virtual STDMETHODIMP _get_Aac(HSTRING *value);
	virtual STDMETHODIMP _get_AacAdts(HSTRING *value);
	virtual STDMETHODIMP _get_Ac3(HSTRING *value);
	virtual STDMETHODIMP _get_AmrNb(HSTRING *value);
	virtual STDMETHODIMP _get_AmrWb(HSTRING *value);
	virtual STDMETHODIMP _get_Argb32(HSTRING *value);
	virtual STDMETHODIMP _get_Asf(HSTRING *value);
	virtual STDMETHODIMP _get_Avi(HSTRING *value);
	virtual STDMETHODIMP _get_Bgra8(HSTRING *value);
	virtual STDMETHODIMP _get_Bmp(HSTRING *value);
	virtual STDMETHODIMP _get_Eac3(HSTRING *value);
	virtual STDMETHODIMP _get_Float(HSTRING *value);
	virtual STDMETHODIMP _get_Gif(HSTRING *value);
	virtual STDMETHODIMP _get_H263(HSTRING *value);
	virtual STDMETHODIMP _get_H264(HSTRING *value);
	virtual STDMETHODIMP _get_H264Es(HSTRING *value);
	virtual STDMETHODIMP _get_Hevc(HSTRING *value);
	virtual STDMETHODIMP _get_HevcEs(HSTRING *value);
	virtual STDMETHODIMP _get_Iyuv(HSTRING *value);
	virtual STDMETHODIMP _get_Jpeg(HSTRING *value);
	virtual STDMETHODIMP _get_JpegXr(HSTRING *value);
	virtual STDMETHODIMP _get_Mjpg(HSTRING *value);
	virtual STDMETHODIMP _get_Mpeg(HSTRING *value);
	virtual STDMETHODIMP _get_Mpeg1(HSTRING *value);
	virtual STDMETHODIMP _get_Mpeg2(HSTRING *value);
	virtual STDMETHODIMP _get_Mp3(HSTRING *value);
	virtual STDMETHODIMP _get_Mpeg4(HSTRING *value);
	virtual STDMETHODIMP _get_Nv12(HSTRING *value);
	virtual STDMETHODIMP _get_Pcm(HSTRING *value);
	virtual STDMETHODIMP _get_Png(HSTRING *value);
	virtual STDMETHODIMP _get_Rgb24(HSTRING *value);
	virtual STDMETHODIMP _get_Rgb32(HSTRING *value);
	virtual STDMETHODIMP _get_Tiff(HSTRING *value);
	virtual STDMETHODIMP _get_Wave(HSTRING *value);
	virtual STDMETHODIMP _get_Wma8(HSTRING *value);
	virtual STDMETHODIMP _get_Wma9(HSTRING *value);
	virtual STDMETHODIMP _get_Wmv3(HSTRING *value);
	virtual STDMETHODIMP _get_Wvc1(HSTRING *value);
	virtual STDMETHODIMP _get_Yuy2(HSTRING *value);
	virtual STDMETHODIMP _get_Yv12(HSTRING *value);
};

// IMediaEncodingSubtypesStatics2
struct IMediaEncodingSubtypesStatics2 : IInspectable {
	virtual STDMETHODIMP _get_Vp9(HSTRING *value);
	virtual STDMETHODIMP _get_L8(HSTRING *value);
	virtual STDMETHODIMP _get_L16(HSTRING *value);
	virtual STDMETHODIMP _get_D16(HSTRING *value);
};

// IMediaEncodingSubtypesStatics3
struct IMediaEncodingSubtypesStatics3 : IInspectable {
	virtual STDMETHODIMP _get_Alac(HSTRING *value);
	virtual STDMETHODIMP _get_Flac(HSTRING *value);
};

// IMediaEncodingSubtypesStatics4
struct IMediaEncodingSubtypesStatics4 : IInspectable {
	virtual STDMETHODIMP _get_P010(HSTRING *value);
};

// MediaEncodingSubtypes
template<typename> struct MediaEncodingSubtypes_statics {
	static struct _Aac : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Aac(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Aac;
	static struct _AacAdts : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_AacAdts(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AacAdts;
	static struct _Ac3 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Ac3(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Ac3;
	static struct _AmrNb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_AmrNb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AmrNb;
	static struct _AmrWb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_AmrWb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AmrWb;
	static struct _Argb32 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Argb32(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Argb32;
	static struct _Asf : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Asf(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Asf;
	static struct _Avi : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Avi(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Avi;
	static struct _Bgra8 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Bgra8(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Bgra8;
	static struct _Bmp : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Bmp(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Bmp;
	static struct _Eac3 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Eac3(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Eac3;
	static struct _Float : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Float(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Float;
	static struct _Gif : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Gif(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Gif;
	static struct _H263 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_H263(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} H263;
	static struct _H264 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_H264(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} H264;
	static struct _H264Es : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_H264Es(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} H264Es;
	static struct _Hevc : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Hevc(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Hevc;
	static struct _HevcEs : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_HevcEs(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HevcEs;
	static struct _Iyuv : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Iyuv(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Iyuv;
	static struct _Jpeg : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Jpeg(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Jpeg;
	static struct _JpegXr : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_JpegXr(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} JpegXr;
	static struct _Mjpg : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Mjpg(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mjpg;
	static struct _Mp3 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Mp3(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mp3;
	static struct _Mpeg : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Mpeg(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mpeg;
	static struct _Mpeg1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Mpeg1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mpeg1;
	static struct _Mpeg2 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Mpeg2(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mpeg2;
	static struct _Mpeg4 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Mpeg4(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mpeg4;
	static struct _Nv12 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Nv12(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Nv12;
	static struct _Pcm : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Pcm(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Pcm;
	static struct _Png : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Png(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Png;
	static struct _Rgb24 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Rgb24(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rgb24;
	static struct _Rgb32 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Rgb32(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rgb32;
	static struct _Tiff : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Tiff(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Tiff;
	static struct _Wave : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Wave(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wave;
	static struct _Wma8 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Wma8(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wma8;
	static struct _Wma9 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Wma9(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wma9;
	static struct _Wmv3 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Wmv3(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wmv3;
	static struct _Wvc1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Wvc1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wvc1;
	static struct _Yuy2 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Yuy2(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Yuy2;
	static struct _Yv12 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>()->_get_Yv12(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Yv12;
	static struct _D16 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics2>()->_get_D16(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} D16;
	static struct _L16 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics2>()->_get_L16(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} L16;
	static struct _L8 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics2>()->_get_L8(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} L8;
	static struct _Vp9 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics2>()->_get_Vp9(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Vp9;
	static struct _Alac : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics3>()->_get_Alac(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Alac;
	static struct _Flac : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics3>()->_get_Flac(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Flac;
	static struct _P010 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics4>()->_get_P010(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} P010;
};
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Aac MediaEncodingSubtypes_statics<X>::Aac;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_AacAdts MediaEncodingSubtypes_statics<X>::AacAdts;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Ac3 MediaEncodingSubtypes_statics<X>::Ac3;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_AmrNb MediaEncodingSubtypes_statics<X>::AmrNb;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_AmrWb MediaEncodingSubtypes_statics<X>::AmrWb;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Argb32 MediaEncodingSubtypes_statics<X>::Argb32;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Asf MediaEncodingSubtypes_statics<X>::Asf;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Avi MediaEncodingSubtypes_statics<X>::Avi;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Bgra8 MediaEncodingSubtypes_statics<X>::Bgra8;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Bmp MediaEncodingSubtypes_statics<X>::Bmp;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Eac3 MediaEncodingSubtypes_statics<X>::Eac3;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Float MediaEncodingSubtypes_statics<X>::Float;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Gif MediaEncodingSubtypes_statics<X>::Gif;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_H263 MediaEncodingSubtypes_statics<X>::H263;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_H264 MediaEncodingSubtypes_statics<X>::H264;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_H264Es MediaEncodingSubtypes_statics<X>::H264Es;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Hevc MediaEncodingSubtypes_statics<X>::Hevc;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_HevcEs MediaEncodingSubtypes_statics<X>::HevcEs;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Iyuv MediaEncodingSubtypes_statics<X>::Iyuv;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Jpeg MediaEncodingSubtypes_statics<X>::Jpeg;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_JpegXr MediaEncodingSubtypes_statics<X>::JpegXr;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Mjpg MediaEncodingSubtypes_statics<X>::Mjpg;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Mp3 MediaEncodingSubtypes_statics<X>::Mp3;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Mpeg MediaEncodingSubtypes_statics<X>::Mpeg;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Mpeg1 MediaEncodingSubtypes_statics<X>::Mpeg1;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Mpeg2 MediaEncodingSubtypes_statics<X>::Mpeg2;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Mpeg4 MediaEncodingSubtypes_statics<X>::Mpeg4;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Nv12 MediaEncodingSubtypes_statics<X>::Nv12;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Pcm MediaEncodingSubtypes_statics<X>::Pcm;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Png MediaEncodingSubtypes_statics<X>::Png;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Rgb24 MediaEncodingSubtypes_statics<X>::Rgb24;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Rgb32 MediaEncodingSubtypes_statics<X>::Rgb32;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Tiff MediaEncodingSubtypes_statics<X>::Tiff;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Wave MediaEncodingSubtypes_statics<X>::Wave;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Wma8 MediaEncodingSubtypes_statics<X>::Wma8;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Wma9 MediaEncodingSubtypes_statics<X>::Wma9;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Wmv3 MediaEncodingSubtypes_statics<X>::Wmv3;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Wvc1 MediaEncodingSubtypes_statics<X>::Wvc1;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Yuy2 MediaEncodingSubtypes_statics<X>::Yuy2;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Yv12 MediaEncodingSubtypes_statics<X>::Yv12;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_D16 MediaEncodingSubtypes_statics<X>::D16;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_L16 MediaEncodingSubtypes_statics<X>::L16;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_L8 MediaEncodingSubtypes_statics<X>::L8;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Vp9 MediaEncodingSubtypes_statics<X>::Vp9;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Alac MediaEncodingSubtypes_statics<X>::Alac;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_Flac MediaEncodingSubtypes_statics<X>::Flac;
template<typename X> typename MediaEncodingSubtypes_statics<X>::_P010 MediaEncodingSubtypes_statics<X>::P010;

template<typename X> struct statics<MediaEncodingSubtypes, X> : X, Windows::Media::MediaProperties::MediaEncodingSubtypes_statics<void> {
	typedef typename X::root_type MediaEncodingSubtypes;
};
struct MediaEncodingSubtypes : generate<MediaEncodingSubtypes> {};

// IH264ProfileIdsStatics
struct IH264ProfileIdsStatics : IInspectable {
	virtual STDMETHODIMP _get_ConstrainedBaseline(int *value);
	virtual STDMETHODIMP _get_Baseline(int *value);
	virtual STDMETHODIMP _get_Extended(int *value);
	virtual STDMETHODIMP _get_Main(int *value);
	virtual STDMETHODIMP _get_High(int *value);
	virtual STDMETHODIMP _get_High10(int *value);
	virtual STDMETHODIMP _get_High422(int *value);
	virtual STDMETHODIMP _get_High444(int *value);
	virtual STDMETHODIMP _get_StereoHigh(int *value);
	virtual STDMETHODIMP _get_MultiviewHigh(int *value);
};

// H264ProfileIds
template<typename> struct H264ProfileIds_statics {
	static struct _Baseline : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_Baseline(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} Baseline;
	static struct _ConstrainedBaseline : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_ConstrainedBaseline(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} ConstrainedBaseline;
	static struct _Extended : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_Extended(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} Extended;
	static struct _High : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_High(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} High;
	static struct _High10 : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_High10(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} High10;
	static struct _High422 : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_High422(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} High422;
	static struct _High444 : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_High444(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} High444;
	static struct _Main : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_Main(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} Main;
	static struct _MultiviewHigh : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_MultiviewHigh(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} MultiviewHigh;
	static struct _StereoHigh : property {
		int get() { int value; hrcheck(get_activation_factory<H264ProfileIds, IH264ProfileIdsStatics>()->_get_StereoHigh(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} StereoHigh;
};
template<typename X> typename H264ProfileIds_statics<X>::_Baseline H264ProfileIds_statics<X>::Baseline;
template<typename X> typename H264ProfileIds_statics<X>::_ConstrainedBaseline H264ProfileIds_statics<X>::ConstrainedBaseline;
template<typename X> typename H264ProfileIds_statics<X>::_Extended H264ProfileIds_statics<X>::Extended;
template<typename X> typename H264ProfileIds_statics<X>::_High H264ProfileIds_statics<X>::High;
template<typename X> typename H264ProfileIds_statics<X>::_High10 H264ProfileIds_statics<X>::High10;
template<typename X> typename H264ProfileIds_statics<X>::_High422 H264ProfileIds_statics<X>::High422;
template<typename X> typename H264ProfileIds_statics<X>::_High444 H264ProfileIds_statics<X>::High444;
template<typename X> typename H264ProfileIds_statics<X>::_Main H264ProfileIds_statics<X>::Main;
template<typename X> typename H264ProfileIds_statics<X>::_MultiviewHigh H264ProfileIds_statics<X>::MultiviewHigh;
template<typename X> typename H264ProfileIds_statics<X>::_StereoHigh H264ProfileIds_statics<X>::StereoHigh;

template<typename X> struct statics<H264ProfileIds, X> : X, Windows::Media::MediaProperties::H264ProfileIds_statics<void> {
	typedef typename X::root_type H264ProfileIds;
};
struct H264ProfileIds : generate<H264ProfileIds> {};

// IMpeg2ProfileIdsStatics
struct IMpeg2ProfileIdsStatics : IInspectable {
	virtual STDMETHODIMP _get_Simple(int *value);
	virtual STDMETHODIMP _get_Main(int *value);
	virtual STDMETHODIMP _get_SignalNoiseRatioScalable(int *value);
	virtual STDMETHODIMP _get_SpatiallyScalable(int *value);
	virtual STDMETHODIMP _get_High(int *value);
};

// Mpeg2ProfileIds
template<typename> struct Mpeg2ProfileIds_statics {
	static struct _High : property {
		int get() { int value; hrcheck(get_activation_factory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>()->_get_High(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} High;
	static struct _Main : property {
		int get() { int value; hrcheck(get_activation_factory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>()->_get_Main(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} Main;
	static struct _SignalNoiseRatioScalable : property {
		int get() { int value; hrcheck(get_activation_factory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>()->_get_SignalNoiseRatioScalable(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} SignalNoiseRatioScalable;
	static struct _Simple : property {
		int get() { int value; hrcheck(get_activation_factory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>()->_get_Simple(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} Simple;
	static struct _SpatiallyScalable : property {
		int get() { int value; hrcheck(get_activation_factory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>()->_get_SpatiallyScalable(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} SpatiallyScalable;
};
template<typename X> typename Mpeg2ProfileIds_statics<X>::_High Mpeg2ProfileIds_statics<X>::High;
template<typename X> typename Mpeg2ProfileIds_statics<X>::_Main Mpeg2ProfileIds_statics<X>::Main;
template<typename X> typename Mpeg2ProfileIds_statics<X>::_SignalNoiseRatioScalable Mpeg2ProfileIds_statics<X>::SignalNoiseRatioScalable;
template<typename X> typename Mpeg2ProfileIds_statics<X>::_Simple Mpeg2ProfileIds_statics<X>::Simple;
template<typename X> typename Mpeg2ProfileIds_statics<X>::_SpatiallyScalable Mpeg2ProfileIds_statics<X>::SpatiallyScalable;

template<typename X> struct statics<Mpeg2ProfileIds, X> : X, Windows::Media::MediaProperties::Mpeg2ProfileIds_statics<void> {
	typedef typename X::root_type Mpeg2ProfileIds;
};
struct Mpeg2ProfileIds : generate<Mpeg2ProfileIds> {};

// IVideoEncodingProperties2
struct IVideoEncodingProperties2_raw : IInspectable {
	virtual STDMETHODIMP _SetFormatUserData(unsigned valueSize, unsigned char *value);
	virtual STDMETHODIMP _GetFormatUserData(unsigned *valueSize, unsigned char **value);
	virtual STDMETHODIMP _put_ProfileId(int value);
	virtual STDMETHODIMP _get_ProfileId(int *value);
};
template<typename X> struct IVideoEncodingProperties2_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IVideoEncodingProperties2_adaptor::ProfileId)->_get_ProfileId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IVideoEncodingProperties2_adaptor::ProfileId)->_put_ProfileId(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ProfileId;
	};
	void SetFormatUserData(const szarray<unsigned char>& value) { hrcheck(X::get()->_SetFormatUserData(value.size, to_abi(value.p))); }
	szarray<unsigned char> GetFormatUserData() { szarray<unsigned char> value; hrcheck(X::get()->_GetFormatUserData(&value.size, &value.p)); return value; }
	IVideoEncodingProperties2_adaptor() {}
};
template<typename X> struct adapt<IVideoEncodingProperties2, X> : Windows::Media::MediaProperties::IVideoEncodingProperties2_adaptor<X> { typedef adapt IVideoEncodingProperties2; };
struct IVideoEncodingProperties2 : IVideoEncodingProperties2_raw, generate<IVideoEncodingProperties2> {};

// IVideoEncodingProperties3
struct IVideoEncodingProperties3_raw : IInspectable {
	virtual STDMETHODIMP _get_StereoscopicVideoPackingMode(MediaProperties::StereoscopicVideoPackingMode *value);
};
template<typename X> struct IVideoEncodingProperties3_adaptor : X {
	union {
		struct : property {
			MediaProperties::StereoscopicVideoPackingMode get() { MediaProperties::StereoscopicVideoPackingMode value; hrcheck(enc(&IVideoEncodingProperties3_adaptor::StereoscopicVideoPackingMode)->_get_StereoscopicVideoPackingMode(&value)); return value; }
			MediaProperties::StereoscopicVideoPackingMode operator()() { return get(); }
			operator MediaProperties::StereoscopicVideoPackingMode () { return get(); }
		} StereoscopicVideoPackingMode;
	};
	IVideoEncodingProperties3_adaptor() {}
};
template<typename X> struct adapt<IVideoEncodingProperties3, X> : Windows::Media::MediaProperties::IVideoEncodingProperties3_adaptor<X> { typedef adapt IVideoEncodingProperties3; };
struct IVideoEncodingProperties3 : IVideoEncodingProperties3_raw, generate<IVideoEncodingProperties3> {};

// IVideoEncodingProperties4
struct IVideoEncodingProperties4_raw : IInspectable {
	virtual STDMETHODIMP _get_SphericalVideoFrameFormat(MediaProperties::SphericalVideoFrameFormat *value);
};
template<typename X> struct IVideoEncodingProperties4_adaptor : X {
	union {
		struct : property {
			MediaProperties::SphericalVideoFrameFormat get() { MediaProperties::SphericalVideoFrameFormat value; hrcheck(enc(&IVideoEncodingProperties4_adaptor::SphericalVideoFrameFormat)->_get_SphericalVideoFrameFormat(&value)); return value; }
			MediaProperties::SphericalVideoFrameFormat operator()() { return get(); }
			operator MediaProperties::SphericalVideoFrameFormat () { return get(); }
		} SphericalVideoFrameFormat;
	};
	IVideoEncodingProperties4_adaptor() {}
};
template<typename X> struct adapt<IVideoEncodingProperties4, X> : Windows::Media::MediaProperties::IVideoEncodingProperties4_adaptor<X> { typedef adapt IVideoEncodingProperties4; };
struct IVideoEncodingProperties4 : IVideoEncodingProperties4_raw, generate<IVideoEncodingProperties4> {};

// IVideoEncodingProperties5
struct IVideoEncodingProperties5_raw : IInspectable {
	virtual STDMETHODIMP _Copy(VideoEncodingProperties* *result);
};
template<typename X> struct IVideoEncodingProperties5_adaptor : X {
	ptr<VideoEncodingProperties> Copy() { VideoEncodingProperties* result; hrcheck(X::get()->_Copy(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IVideoEncodingProperties5, X> : Windows::Media::MediaProperties::IVideoEncodingProperties5_adaptor<X> { typedef adapt IVideoEncodingProperties5; };
struct IVideoEncodingProperties5 : IVideoEncodingProperties5_raw, generate<IVideoEncodingProperties5> {};

// IVideoEncodingPropertiesStatics2
struct IVideoEncodingPropertiesStatics2 : IInspectable {
	virtual STDMETHODIMP _CreateHevc(VideoEncodingProperties* *value);
};

// IVideoEncodingPropertiesStatics
struct IVideoEncodingPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _CreateH264(VideoEncodingProperties* *value);
	virtual STDMETHODIMP _CreateMpeg2(VideoEncodingProperties* *value);
	virtual STDMETHODIMP _CreateUncompressed(HSTRING subtype, unsigned width, unsigned height, VideoEncodingProperties* *value);
};

// VideoEncodingProperties
template<typename> struct VideoEncodingProperties_statics {
	static ptr<VideoEncodingProperties> CreateHevc() { VideoEncodingProperties* value; hrcheck(get_activation_factory<VideoEncodingProperties, IVideoEncodingPropertiesStatics2>()->_CreateHevc(&value)); return from_abi(value); }
	static ptr<VideoEncodingProperties> CreateH264() { VideoEncodingProperties* value; hrcheck(get_activation_factory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>()->_CreateH264(&value)); return from_abi(value); }
	static ptr<VideoEncodingProperties> CreateMpeg2() { VideoEncodingProperties* value; hrcheck(get_activation_factory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>()->_CreateMpeg2(&value)); return from_abi(value); }
	static ptr<VideoEncodingProperties> CreateUncompressed(hstring_ref subtype, unsigned width, unsigned height) { VideoEncodingProperties* value; hrcheck(get_activation_factory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>()->_CreateUncompressed(subtype, width, height, &value)); return from_abi(value); }
};

template<typename X> struct statics<VideoEncodingProperties, X> : X, Windows::Media::MediaProperties::VideoEncodingProperties_statics<void> {
	typedef typename X::root_type VideoEncodingProperties;
};
struct VideoEncodingProperties : generate<VideoEncodingProperties> {};

// ITimedMetadataEncodingProperties
struct ITimedMetadataEncodingProperties_raw : IInspectable {
	virtual STDMETHODIMP _SetFormatUserData(unsigned valueSize, unsigned char *value);
	virtual STDMETHODIMP _GetFormatUserData(unsigned *valueSize, unsigned char **value);
	virtual STDMETHODIMP _Copy(TimedMetadataEncodingProperties* *result);
};
template<typename X> struct ITimedMetadataEncodingProperties_adaptor : X {
	void SetFormatUserData(const szarray<unsigned char>& value) { hrcheck(X::get()->_SetFormatUserData(value.size, to_abi(value.p))); }
	szarray<unsigned char> GetFormatUserData() { szarray<unsigned char> value; hrcheck(X::get()->_GetFormatUserData(&value.size, &value.p)); return value; }
	ptr<TimedMetadataEncodingProperties> Copy() { TimedMetadataEncodingProperties* result; hrcheck(X::get()->_Copy(&result)); return from_abi(result); }
};
template<typename X> struct adapt<ITimedMetadataEncodingProperties, X> : Windows::Media::MediaProperties::ITimedMetadataEncodingProperties_adaptor<X> { typedef adapt ITimedMetadataEncodingProperties; };
struct ITimedMetadataEncodingProperties : ITimedMetadataEncodingProperties_raw, generate<ITimedMetadataEncodingProperties> {};

// TimedMetadataEncodingProperties
template<typename X> struct statics<TimedMetadataEncodingProperties, X> : X {
	typedef typename X::root_type TimedMetadataEncodingProperties;
};
struct TimedMetadataEncodingProperties : generate<TimedMetadataEncodingProperties> {};

// IImageEncodingProperties
struct IImageEncodingProperties_raw : IInspectable {
	virtual STDMETHODIMP _put_Width(unsigned value);
	virtual STDMETHODIMP _get_Width(unsigned *value);
	virtual STDMETHODIMP _put_Height(unsigned value);
	virtual STDMETHODIMP _get_Height(unsigned *value);
};
template<typename X> struct IImageEncodingProperties_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IImageEncodingProperties_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IImageEncodingProperties_adaptor::Height)->_put_Height(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Height;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IImageEncodingProperties_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IImageEncodingProperties_adaptor::Width)->_put_Width(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Width;
	};
	IImageEncodingProperties_adaptor() {}
};
template<typename X> struct adapt<IImageEncodingProperties, X> : Windows::Media::MediaProperties::IImageEncodingProperties_adaptor<X> { typedef adapt IImageEncodingProperties; };
struct IImageEncodingProperties : IImageEncodingProperties_raw, generate<IImageEncodingProperties> {};

// IImageEncodingProperties2
struct IImageEncodingProperties2_raw : IInspectable {
	virtual STDMETHODIMP _Copy(ImageEncodingProperties* *result);
};
template<typename X> struct IImageEncodingProperties2_adaptor : X {
	ptr<ImageEncodingProperties> Copy() { ImageEncodingProperties* result; hrcheck(X::get()->_Copy(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IImageEncodingProperties2, X> : Windows::Media::MediaProperties::IImageEncodingProperties2_adaptor<X> { typedef adapt IImageEncodingProperties2; };
struct IImageEncodingProperties2 : IImageEncodingProperties2_raw, generate<IImageEncodingProperties2> {};

// IImageEncodingPropertiesStatics2
struct IImageEncodingPropertiesStatics2 : IInspectable {
	virtual STDMETHODIMP _CreateUncompressed(MediaPixelFormat format, ImageEncodingProperties* *value);
	virtual STDMETHODIMP _CreateBmp(ImageEncodingProperties* *value);
};

// IImageEncodingPropertiesStatics
struct IImageEncodingPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _CreateJpeg(ImageEncodingProperties* *value);
	virtual STDMETHODIMP _CreatePng(ImageEncodingProperties* *value);
	virtual STDMETHODIMP _CreateJpegXR(ImageEncodingProperties* *value);
};

// ImageEncodingProperties
template<typename> struct ImageEncodingProperties_statics {
	static ptr<ImageEncodingProperties> CreateUncompressed(MediaPixelFormat format) { ImageEncodingProperties* value; hrcheck(get_activation_factory<ImageEncodingProperties, IImageEncodingPropertiesStatics2>()->_CreateUncompressed(format, &value)); return from_abi(value); }
	static ptr<ImageEncodingProperties> CreateBmp() { ImageEncodingProperties* value; hrcheck(get_activation_factory<ImageEncodingProperties, IImageEncodingPropertiesStatics2>()->_CreateBmp(&value)); return from_abi(value); }
	static ptr<ImageEncodingProperties> CreateJpeg() { ImageEncodingProperties* value; hrcheck(get_activation_factory<ImageEncodingProperties, IImageEncodingPropertiesStatics>()->_CreateJpeg(&value)); return from_abi(value); }
	static ptr<ImageEncodingProperties> CreatePng() { ImageEncodingProperties* value; hrcheck(get_activation_factory<ImageEncodingProperties, IImageEncodingPropertiesStatics>()->_CreatePng(&value)); return from_abi(value); }
	static ptr<ImageEncodingProperties> CreateJpegXR() { ImageEncodingProperties* value; hrcheck(get_activation_factory<ImageEncodingProperties, IImageEncodingPropertiesStatics>()->_CreateJpegXR(&value)); return from_abi(value); }
};

template<typename X> struct statics<ImageEncodingProperties, X> : X, Windows::Media::MediaProperties::ImageEncodingProperties_statics<void> {
	typedef typename X::root_type ImageEncodingProperties;
};
struct ImageEncodingProperties : generate<ImageEncodingProperties> {};

// IContainerEncodingProperties
struct IContainerEncodingProperties : IInspectable, generate<IContainerEncodingProperties> {};

// IContainerEncodingProperties2
struct IContainerEncodingProperties2_raw : IInspectable {
	virtual STDMETHODIMP _Copy(ContainerEncodingProperties* *result);
};
template<typename X> struct IContainerEncodingProperties2_adaptor : X {
	ptr<ContainerEncodingProperties> Copy() { ContainerEncodingProperties* result; hrcheck(X::get()->_Copy(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IContainerEncodingProperties2, X> : Windows::Media::MediaProperties::IContainerEncodingProperties2_adaptor<X> { typedef adapt IContainerEncodingProperties2; };
struct IContainerEncodingProperties2 : IContainerEncodingProperties2_raw, generate<IContainerEncodingProperties2> {};

// ContainerEncodingProperties
template<typename X> struct statics<ContainerEncodingProperties, X> : X {
	typedef typename X::root_type ContainerEncodingProperties;
};
struct ContainerEncodingProperties : generate<ContainerEncodingProperties> {};

// IMediaEncodingProfileStatics
struct IMediaEncodingProfileStatics : IInspectable {
	virtual STDMETHODIMP _CreateM4a(AudioEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateMp3(AudioEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateWma(AudioEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateMp4(VideoEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateWmv(VideoEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateFromFileAsync(Storage::IStorageFile* file, Foundation::IAsyncOperation<MediaEncodingProfile*>* *operation);
	virtual STDMETHODIMP _CreateFromStreamAsync(Storage::Streams::IRandomAccessStream* stream, Foundation::IAsyncOperation<MediaEncodingProfile*>* *operation);
};

// IMediaEncodingProfileStatics3
struct IMediaEncodingProfileStatics3 : IInspectable {
	virtual STDMETHODIMP _CreateAlac(AudioEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateFlac(AudioEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateHevc(VideoEncodingQuality quality, MediaEncodingProfile* *value);
};

// IMediaEncodingProfileStatics2
struct IMediaEncodingProfileStatics2 : IInspectable {
	virtual STDMETHODIMP _CreateWav(AudioEncodingQuality quality, MediaEncodingProfile* *value);
	virtual STDMETHODIMP _CreateAvi(VideoEncodingQuality quality, MediaEncodingProfile* *value);
};

// IMediaEncodingProfile3
struct IMediaEncodingProfile3_raw : IInspectable {
	virtual STDMETHODIMP _SetTimedMetadataTracks(Foundation::Collections::IIterable<Core::TimedMetadataStreamDescriptor*>* value);
	virtual STDMETHODIMP _GetTimedMetadataTracks(Foundation::Collections::IVector<Core::TimedMetadataStreamDescriptor*>* *result);
};
template<typename X> struct IMediaEncodingProfile3_adaptor : X {
	void SetTimedMetadataTracks(pptr<Foundation::Collections::IIterable<ptr<Core::TimedMetadataStreamDescriptor>>> value) { hrcheck(X::get()->_SetTimedMetadataTracks(to_abi(value))); }
	ptr<Foundation::Collections::IVector<ptr<Core::TimedMetadataStreamDescriptor>>> GetTimedMetadataTracks() { Foundation::Collections::IVector<Core::TimedMetadataStreamDescriptor*>* result; hrcheck(X::get()->_GetTimedMetadataTracks(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IMediaEncodingProfile3, X> : Windows::Media::MediaProperties::IMediaEncodingProfile3_adaptor<X> { typedef adapt IMediaEncodingProfile3; };
struct IMediaEncodingProfile3 : IMediaEncodingProfile3_raw, generate<IMediaEncodingProfile3> {};

// IMediaEncodingProfile2
struct IMediaEncodingProfile2_raw : IInspectable {
	virtual STDMETHODIMP _SetAudioTracks(Foundation::Collections::IIterable<Core::AudioStreamDescriptor*>* value);
	virtual STDMETHODIMP _GetAudioTracks(Foundation::Collections::IVector<Core::AudioStreamDescriptor*>* *value);
	virtual STDMETHODIMP _SetVideoTracks(Foundation::Collections::IIterable<Core::VideoStreamDescriptor*>* value);
	virtual STDMETHODIMP _GetVideoTracks(Foundation::Collections::IVector<Core::VideoStreamDescriptor*>* *value);
};
template<typename X> struct IMediaEncodingProfile2_adaptor : X {
	void SetAudioTracks(pptr<Foundation::Collections::IIterable<ptr<Core::AudioStreamDescriptor>>> value) { hrcheck(X::get()->_SetAudioTracks(to_abi(value))); }
	ptr<Foundation::Collections::IVector<ptr<Core::AudioStreamDescriptor>>> GetAudioTracks() { Foundation::Collections::IVector<Core::AudioStreamDescriptor*>* value; hrcheck(X::get()->_GetAudioTracks(&value)); return from_abi(value); }
	void SetVideoTracks(pptr<Foundation::Collections::IIterable<ptr<Core::VideoStreamDescriptor>>> value) { hrcheck(X::get()->_SetVideoTracks(to_abi(value))); }
	ptr<Foundation::Collections::IVector<ptr<Core::VideoStreamDescriptor>>> GetVideoTracks() { Foundation::Collections::IVector<Core::VideoStreamDescriptor*>* value; hrcheck(X::get()->_GetVideoTracks(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IMediaEncodingProfile2, X> : Windows::Media::MediaProperties::IMediaEncodingProfile2_adaptor<X> { typedef adapt IMediaEncodingProfile2; };
struct IMediaEncodingProfile2 : IMediaEncodingProfile2_raw, generate<IMediaEncodingProfile2> {};

// IMediaEncodingProfile
struct IMediaEncodingProfile_raw : IInspectable {
	virtual STDMETHODIMP _put_Audio(AudioEncodingProperties* value);
	virtual STDMETHODIMP _get_Audio(AudioEncodingProperties* *value);
	virtual STDMETHODIMP _put_Video(VideoEncodingProperties* value);
	virtual STDMETHODIMP _get_Video(VideoEncodingProperties* *value);
	virtual STDMETHODIMP _put_Container(ContainerEncodingProperties* value);
	virtual STDMETHODIMP _get_Container(ContainerEncodingProperties* *value);
};
template<typename X> struct IMediaEncodingProfile_adaptor : X {
	union {
		struct : property {
			ptr<AudioEncodingProperties> get() { AudioEncodingProperties* value; hrcheck(enc(&IMediaEncodingProfile_adaptor::Audio)->_get_Audio(&value)); return from_abi(value); }
			ptr<AudioEncodingProperties> operator()() { return get(); }
			operator ptr<AudioEncodingProperties> () { return get(); }
			ptr<AudioEncodingProperties> operator->() { return get(); }
			void put(pptr<AudioEncodingProperties> value) { hrcheck(enc(&IMediaEncodingProfile_adaptor::Audio)->_put_Audio(value)); }
			void operator=(pptr<AudioEncodingProperties> value) { put(value); }
			void operator()(pptr<AudioEncodingProperties> value) { put(value); }
		} Audio;
		struct : property {
			ptr<ContainerEncodingProperties> get() { ContainerEncodingProperties* value; hrcheck(enc(&IMediaEncodingProfile_adaptor::Container)->_get_Container(&value)); return from_abi(value); }
			ptr<ContainerEncodingProperties> operator()() { return get(); }
			operator ptr<ContainerEncodingProperties> () { return get(); }
			ptr<ContainerEncodingProperties> operator->() { return get(); }
			void put(pptr<ContainerEncodingProperties> value) { hrcheck(enc(&IMediaEncodingProfile_adaptor::Container)->_put_Container(value)); }
			void operator=(pptr<ContainerEncodingProperties> value) { put(value); }
			void operator()(pptr<ContainerEncodingProperties> value) { put(value); }
		} Container;
		struct : property {
			ptr<VideoEncodingProperties> get() { VideoEncodingProperties* value; hrcheck(enc(&IMediaEncodingProfile_adaptor::Video)->_get_Video(&value)); return from_abi(value); }
			ptr<VideoEncodingProperties> operator()() { return get(); }
			operator ptr<VideoEncodingProperties> () { return get(); }
			ptr<VideoEncodingProperties> operator->() { return get(); }
			void put(pptr<VideoEncodingProperties> value) { hrcheck(enc(&IMediaEncodingProfile_adaptor::Video)->_put_Video(value)); }
			void operator=(pptr<VideoEncodingProperties> value) { put(value); }
			void operator()(pptr<VideoEncodingProperties> value) { put(value); }
		} Video;
	};
	IMediaEncodingProfile_adaptor() {}
};
template<typename X> struct adapt<IMediaEncodingProfile, X> : Windows::Media::MediaProperties::IMediaEncodingProfile_adaptor<X> { typedef adapt IMediaEncodingProfile; };
struct IMediaEncodingProfile : IMediaEncodingProfile_raw, generate<IMediaEncodingProfile> {};

// MediaEncodingProfile
template<typename> struct MediaEncodingProfile_statics {
	static ptr<MediaEncodingProfile> CreateAlac(AudioEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics3>()->_CreateAlac(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateFlac(AudioEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics3>()->_CreateFlac(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateHevc(VideoEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics3>()->_CreateHevc(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateWav(AudioEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics2>()->_CreateWav(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateAvi(VideoEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics2>()->_CreateAvi(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateM4a(AudioEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics>()->_CreateM4a(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateMp3(AudioEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics>()->_CreateMp3(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateWma(AudioEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics>()->_CreateWma(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateMp4(VideoEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics>()->_CreateMp4(quality, &value)); return from_abi(value); }
	static ptr<MediaEncodingProfile> CreateWmv(VideoEncodingQuality quality) { MediaEncodingProfile* value; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics>()->_CreateWmv(quality, &value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<MediaEncodingProfile>>> CreateFromFileAsync(pptr<Storage::IStorageFile> file) { Foundation::IAsyncOperation<MediaEncodingProfile*>* operation; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics>()->_CreateFromFileAsync(file, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<MediaEncodingProfile>>> CreateFromStreamAsync(pptr<Storage::Streams::IRandomAccessStream> stream) { Foundation::IAsyncOperation<MediaEncodingProfile*>* operation; hrcheck(get_activation_factory<MediaEncodingProfile, IMediaEncodingProfileStatics>()->_CreateFromStreamAsync(stream, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<MediaEncodingProfile, X> : X, Windows::Media::MediaProperties::MediaEncodingProfile_statics<void> {
	typedef typename X::root_type MediaEncodingProfile;
};
struct MediaEncodingProfile : generate<MediaEncodingProfile> {};
}}}
} // namespace iso_winrt
