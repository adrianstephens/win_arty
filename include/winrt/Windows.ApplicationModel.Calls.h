#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Calls

#include "Windows.ApplicationModel.Calls.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Contacts {
struct ContactPhone;
struct Contact;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename K, typename V> struct IMapView;
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::ApplicationModel::Calls::CallsPhoneContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneNetworkState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneVoicemailType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallMedia> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLineTransport> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneSimState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLineWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLineNetworkOperatorDisplayTextLocation> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::CellularDtmfMode> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneVoicemail> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneDialOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneLineCellularDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneLine> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneLineStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLine> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneLine> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneVoicemail> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneVoicemail> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLineCellularDetails> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneLineCellularDetails> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneLineConfiguration> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLineConfiguration> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneLineConfiguration> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneDialOptions> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneDialOptions> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneLineWatcher> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLineWatcher> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneLineWatcher> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallManagerStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallStore> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallStore> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilitiesManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallBlockingStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilitiesManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallBlocking> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Calls::CallsVoipContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::VoipPhoneCallMedia> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Calls::VoipPhoneCallRejectReason> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::VoipPhoneCallState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::VoipPhoneCallResourceReservationStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::ICallStateChangeEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::CallStateChangeEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Calls::ICallStateChangeEventArgs> {};
template<> struct def<Windows::ApplicationModel::Calls::ICallAnswerEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::CallAnswerEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Calls::ICallAnswerEventArgs> {};
template<> struct def<Windows::ApplicationModel::Calls::ICallRejectEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::CallRejectEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Calls::ICallRejectEventArgs> {};
template<> struct def<Windows::ApplicationModel::Calls::IVoipPhoneCall> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IVoipPhoneCall2> : interface_type<Windows::ApplicationModel::Calls::IVoipPhoneCall> {};
template<> struct def<Windows::ApplicationModel::Calls::IVoipPhoneCall3> : interface_type<Windows::ApplicationModel::Calls::IVoipPhoneCall2> {};
template<> struct def<Windows::ApplicationModel::Calls::VoipPhoneCall> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IVoipPhoneCall, Windows::ApplicationModel::Calls::IVoipPhoneCall3> {};
template<> struct def<Windows::ApplicationModel::Calls::IMuteChangeEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::MuteChangeEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IMuteChangeEventArgs> {};
template<> struct def<Windows::ApplicationModel::Calls::IVoipCallCoordinator> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IVoipCallCoordinatorStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IVoipCallCoordinator3> : interface_type<Windows::ApplicationModel::Calls::IVoipCallCoordinator> {};
template<> struct def<Windows::ApplicationModel::Calls::IVoipCallCoordinator2> : interface_type<Windows::ApplicationModel::Calls::IVoipCallCoordinator> {};
template<> struct def<Windows::ApplicationModel::Calls::VoipCallCoordinator> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IVoipCallCoordinator, Windows::ApplicationModel::Calls::IVoipCallCoordinator2, Windows::ApplicationModel::Calls::IVoipCallCoordinator3> {};
template<> struct def<Windows::ApplicationModel::Calls::LockScreenCallContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral> {};
template<> struct def<Windows::ApplicationModel::Calls::ILockScreenCallUI> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::LockScreenCallUI> : class_type<Platform::Object, Windows::ApplicationModel::Calls::ILockScreenCallUI> {};
template<> struct def<Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryStoreAccessType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddressFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryOptions> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallHistoryStore> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerForUser> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryManagerForUser> : class_type<Platform::Object, Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerForUser> {};
template<> struct def<Windows::ApplicationModel::Calls::PhoneCallHistoryManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneVoicemail> { define_guid(0xC9CE77F6, 0x6E9F, 0x3A8B, 0xB7, 0x27, 0x6E, 0xC, 0xF6, 0x99, 0x82, 0x24);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneDialOptions> { define_guid(0xB639C4B8, 0xF06F, 0x36CB, 0xA8, 0x63, 0x82, 0x37, 0x42, 0xB5, 0xF2, 0xD4);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneLineCellularDetails> { define_guid(0x192601D5, 0x147C, 0x4769, 0xB6, 0x73, 0x98, 0xA5, 0xEC, 0x84, 0x26, 0xCB);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneLine> { define_guid(0x27C66F30, 0x6A69, 0x34CA, 0xA2, 0xBA, 0x65, 0x30, 0x25, 0x30, 0xC3, 0x11);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneLineStatics> { define_guid(0xF38B5F23, 0xCEB0, 0x404F, 0xBC, 0xF2, 0xBA, 0x9F, 0x69, 0x7D, 0x8A, 0xDF);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities> { define_guid(0x2382786, 0xB16A, 0x4FDB, 0xBE, 0x3B, 0xC4, 0x24, 0xE, 0x13, 0xAD, 0xD);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneLineConfiguration> { define_guid(0xFE265862, 0xF64F, 0x4312, 0xB2, 0xA8, 0x4E, 0x25, 0x77, 0x21, 0xAA, 0x95);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallStore> { define_guid(0x5F610748, 0x18A6, 0x4173, 0x86, 0xD1, 0x28, 0xBE, 0x9D, 0xC6, 0x2D, 0xBA);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneLineWatcher> { define_guid(0x8A45CD0A, 0x6323, 0x44E0, 0xA6, 0xF6, 0x9F, 0x21, 0xF6, 0x4D, 0xC9, 0xA);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs> { define_guid(0xD07C753E, 0x9E12, 0x4A37, 0x82, 0xB7, 0xAD, 0x53, 0x5D, 0xAD, 0x6A, 0x67);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallManagerStatics> { define_guid(0x60EDAC78, 0x78A6, 0x4872, 0xA3, 0xEF, 0x98, 0x32, 0x5E, 0xC8, 0xB8, 0x43);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallManagerStatics2> { define_guid(0xC7E3C8BC, 0x2370, 0x431C, 0x98, 0xFD, 0x43, 0xBE, 0x5F, 0x3, 0x8, 0x6D);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilitiesManagerStatics> { define_guid(0xF3C64B56, 0xF00B, 0x4A1C, 0xA0, 0xC6, 0xEE, 0x19, 0x10, 0x74, 0x9C, 0xE7);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallBlockingStatics> { define_guid(0x19646F84, 0x2B79, 0x26F1, 0xA4, 0x6F, 0x69, 0x4B, 0xE0, 0x43, 0xF3, 0x13);};
template<> struct uuid<Windows::ApplicationModel::Calls::ICallStateChangeEventArgs> { define_guid(0xEAB2349E, 0x66F5, 0x47F9, 0x9F, 0xB5, 0x45, 0x9C, 0x51, 0x98, 0xC7, 0x20);};
template<> struct uuid<Windows::ApplicationModel::Calls::ICallAnswerEventArgs> { define_guid(0xFD789617, 0x2DD7, 0x4C8C, 0xB2, 0xBD, 0x95, 0xD1, 0x7A, 0x5B, 0xB7, 0x33);};
template<> struct uuid<Windows::ApplicationModel::Calls::ICallRejectEventArgs> { define_guid(0xDA47FAD7, 0x13D4, 0x4D92, 0xA1, 0xC2, 0xB7, 0x78, 0x11, 0xEE, 0x37, 0xEC);};
template<> struct uuid<Windows::ApplicationModel::Calls::IVoipPhoneCall> { define_guid(0x6CF1F19A, 0x7794, 0x4A5A, 0x8C, 0x68, 0xAE, 0x87, 0x94, 0x7A, 0x69, 0x90);};
template<> struct uuid<Windows::ApplicationModel::Calls::IVoipPhoneCall2> { define_guid(0x741B46E1, 0x245F, 0x41F3, 0x93, 0x99, 0x31, 0x41, 0xD2, 0x5B, 0x52, 0xE3);};
template<> struct uuid<Windows::ApplicationModel::Calls::IVoipPhoneCall3> { define_guid(0xD891522, 0xE258, 0x4AA9, 0x90, 0x7A, 0x1A, 0xA4, 0x13, 0xC2, 0x55, 0x23);};
template<> struct uuid<Windows::ApplicationModel::Calls::IMuteChangeEventArgs> { define_guid(0x8585E159, 0xC41, 0x432C, 0x81, 0x4D, 0xC5, 0xF1, 0xFD, 0xF5, 0x30, 0xBE);};
template<> struct uuid<Windows::ApplicationModel::Calls::IVoipCallCoordinator> { define_guid(0x4F118BCF, 0xE8EF, 0x4434, 0x9C, 0x5F, 0xA8, 0xD8, 0x93, 0xFA, 0xFE, 0x79);};
template<> struct uuid<Windows::ApplicationModel::Calls::IVoipCallCoordinatorStatics> { define_guid(0x7F5D1F2B, 0xE04A, 0x4D10, 0xB3, 0x1A, 0xA5, 0x5C, 0x92, 0x2C, 0xC2, 0xFB);};
template<> struct uuid<Windows::ApplicationModel::Calls::IVoipCallCoordinator3> { define_guid(0x338D0CBF, 0x9B55, 0x4021, 0x87, 0xCA, 0xE6, 0x4B, 0x9B, 0xD6, 0x66, 0xC7);};
template<> struct uuid<Windows::ApplicationModel::Calls::IVoipCallCoordinator2> { define_guid(0xBEB4A9F3, 0xC704, 0x4234, 0x89, 0xCE, 0xE8, 0x8C, 0xC0, 0xD2, 0x8F, 0xBE);};
template<> struct uuid<Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral> { define_guid(0x2DD7ED0D, 0x98ED, 0x4041, 0x96, 0x32, 0x50, 0xFF, 0x81, 0x2B, 0x77, 0x3F);};
template<> struct uuid<Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs> { define_guid(0x8190A363, 0x6F27, 0x46E9, 0xAE, 0xB6, 0xC0, 0xAE, 0x83, 0xE4, 0x7D, 0xC7);};
template<> struct uuid<Windows::ApplicationModel::Calls::ILockScreenCallUI> { define_guid(0xC596FD8D, 0x73C9, 0x4A14, 0xB0, 0x21, 0xEC, 0x1C, 0x50, 0xA3, 0xB7, 0x27);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry> { define_guid(0xFAB0E129, 0x32A4, 0x4B85, 0x83, 0xD1, 0xF9, 0xD, 0x8C, 0x23, 0xA8, 0x57);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddressFactory> { define_guid(0xFB0FADBA, 0xC7F0, 0x4BB6, 0x9F, 0x6B, 0xBA, 0x5D, 0x73, 0x20, 0x9A, 0xCA);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress> { define_guid(0x30F159DA, 0x3955, 0x4042, 0x84, 0xE6, 0x66, 0xEE, 0xBF, 0x82, 0xE6, 0x7F);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions> { define_guid(0x9C5FE15C, 0x8BED, 0x40CA, 0xB0, 0x6E, 0xC4, 0xCA, 0x8E, 0xAE, 0x5C, 0x87);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader> { define_guid(0x61ECE4BE, 0x8D86, 0x479F, 0x84, 0x4, 0xA9, 0x84, 0x69, 0x20, 0xFE, 0xE6);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryStore> { define_guid(0x2F907DB8, 0xB40E, 0x422B, 0x85, 0x45, 0xCB, 0x19, 0x10, 0xA6, 0x1C, 0x52);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerStatics> { define_guid(0xF5A6DA39, 0xB31F, 0x4F45, 0xAC, 0x8E, 0x1B, 0x8, 0x89, 0x3C, 0x1B, 0x50);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerStatics2> { define_guid(0xEFD474F0, 0xA2DB, 0x4188, 0x9E, 0x92, 0xBC, 0x3C, 0xFA, 0x68, 0x13, 0xCF);};
template<> struct uuid<Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerForUser> { define_guid(0xD925C523, 0xF55F, 0x4353, 0x9D, 0xB4, 0x2, 0x5, 0xA5, 0x26, 0x5A, 0x55);};

// types

namespace Windows { namespace ApplicationModel { namespace Calls {

// IPhoneVoicemail
struct IPhoneVoicemail_raw : IInspectable {
	virtual STDMETHODIMP _get_Number(HSTRING *value);
	virtual STDMETHODIMP _get_MessageCount(int *value);
	virtual STDMETHODIMP _get_Type(PhoneVoicemailType *value);
	virtual STDMETHODIMP _DialVoicemailAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IPhoneVoicemail_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IPhoneVoicemail_adaptor::MessageCount)->_get_MessageCount(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MessageCount;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneVoicemail_adaptor::Number)->_get_Number(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Number;
		struct : property {
			PhoneVoicemailType get() { PhoneVoicemailType value; hrcheck(enc(&IPhoneVoicemail_adaptor::Type)->_get_Type(&value)); return value; }
			PhoneVoicemailType operator()() { return get(); }
			operator PhoneVoicemailType () { return get(); }
		} Type;
	};
	ptr<Foundation::IAsyncAction> DialVoicemailAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_DialVoicemailAsync(&result)); return from_abi(result); }
	IPhoneVoicemail_adaptor() {}
};
template<typename X> struct adapt<IPhoneVoicemail, X> : Windows::ApplicationModel::Calls::IPhoneVoicemail_adaptor<X> { typedef adapt IPhoneVoicemail; };
struct IPhoneVoicemail : IPhoneVoicemail_raw, generate<IPhoneVoicemail> {};

// IPhoneDialOptions
struct IPhoneDialOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_Number(HSTRING *value);
	virtual STDMETHODIMP _put_Number(HSTRING value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value);
	virtual STDMETHODIMP _put_Contact(Contacts::Contact* value);
	virtual STDMETHODIMP _get_ContactPhone(Contacts::ContactPhone* *value);
	virtual STDMETHODIMP _put_ContactPhone(Contacts::ContactPhone* value);
	virtual STDMETHODIMP _get_Media(PhoneCallMedia *value);
	virtual STDMETHODIMP _put_Media(PhoneCallMedia value);
	virtual STDMETHODIMP _get_AudioEndpoint(PhoneAudioRoutingEndpoint *value);
	virtual STDMETHODIMP _put_AudioEndpoint(PhoneAudioRoutingEndpoint value);
};
template<typename X> struct IPhoneDialOptions_adaptor : X {
	union {
		struct : property {
			PhoneAudioRoutingEndpoint get() { PhoneAudioRoutingEndpoint value; hrcheck(enc(&IPhoneDialOptions_adaptor::AudioEndpoint)->_get_AudioEndpoint(&value)); return value; }
			PhoneAudioRoutingEndpoint operator()() { return get(); }
			operator PhoneAudioRoutingEndpoint () { return get(); }
			void put(PhoneAudioRoutingEndpoint value) { hrcheck(enc(&IPhoneDialOptions_adaptor::AudioEndpoint)->_put_AudioEndpoint(value)); }
			void operator=(PhoneAudioRoutingEndpoint value) { put(value); }
			void operator()(PhoneAudioRoutingEndpoint value) { put(value); }
		} AudioEndpoint;
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IPhoneDialOptions_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
			void put(pptr<Contacts::Contact> value) { hrcheck(enc(&IPhoneDialOptions_adaptor::Contact)->_put_Contact(value)); }
			void operator=(pptr<Contacts::Contact> value) { put(value); }
			void operator()(pptr<Contacts::Contact> value) { put(value); }
		} Contact;
		struct : property {
			ptr<Contacts::ContactPhone> get() { Contacts::ContactPhone* value; hrcheck(enc(&IPhoneDialOptions_adaptor::ContactPhone)->_get_ContactPhone(&value)); return from_abi(value); }
			ptr<Contacts::ContactPhone> operator()() { return get(); }
			operator ptr<Contacts::ContactPhone> () { return get(); }
			ptr<Contacts::ContactPhone> operator->() { return get(); }
			void put(pptr<Contacts::ContactPhone> value) { hrcheck(enc(&IPhoneDialOptions_adaptor::ContactPhone)->_put_ContactPhone(value)); }
			void operator=(pptr<Contacts::ContactPhone> value) { put(value); }
			void operator()(pptr<Contacts::ContactPhone> value) { put(value); }
		} ContactPhone;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneDialOptions_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhoneDialOptions_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			PhoneCallMedia get() { PhoneCallMedia value; hrcheck(enc(&IPhoneDialOptions_adaptor::Media)->_get_Media(&value)); return value; }
			PhoneCallMedia operator()() { return get(); }
			operator PhoneCallMedia () { return get(); }
			void put(PhoneCallMedia value) { hrcheck(enc(&IPhoneDialOptions_adaptor::Media)->_put_Media(value)); }
			void operator=(PhoneCallMedia value) { put(value); }
			void operator()(PhoneCallMedia value) { put(value); }
		} Media;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneDialOptions_adaptor::Number)->_get_Number(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhoneDialOptions_adaptor::Number)->_put_Number(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Number;
	};
	IPhoneDialOptions_adaptor() {}
};
template<typename X> struct adapt<IPhoneDialOptions, X> : Windows::ApplicationModel::Calls::IPhoneDialOptions_adaptor<X> { typedef adapt IPhoneDialOptions; };
struct IPhoneDialOptions : IPhoneDialOptions_raw, generate<IPhoneDialOptions> {};

// IPhoneLineCellularDetails
struct IPhoneLineCellularDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_SimState(PhoneSimState *value);
	virtual STDMETHODIMP _get_SimSlotIndex(int *value);
	virtual STDMETHODIMP _get_IsModemOn(bool *value);
	virtual STDMETHODIMP _get_RegistrationRejectCode(int *value);
	virtual STDMETHODIMP _GetNetworkOperatorDisplayText(PhoneLineNetworkOperatorDisplayTextLocation location, HSTRING *value);
};
template<typename X> struct IPhoneLineCellularDetails_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneLineCellularDetails_adaptor::IsModemOn)->_get_IsModemOn(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsModemOn;
		struct : property {
			int get() { int value; hrcheck(enc(&IPhoneLineCellularDetails_adaptor::RegistrationRejectCode)->_get_RegistrationRejectCode(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RegistrationRejectCode;
		struct : property {
			int get() { int value; hrcheck(enc(&IPhoneLineCellularDetails_adaptor::SimSlotIndex)->_get_SimSlotIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} SimSlotIndex;
		struct : property {
			PhoneSimState get() { PhoneSimState value; hrcheck(enc(&IPhoneLineCellularDetails_adaptor::SimState)->_get_SimState(&value)); return value; }
			PhoneSimState operator()() { return get(); }
			operator PhoneSimState () { return get(); }
		} SimState;
	};
	hstring GetNetworkOperatorDisplayText(PhoneLineNetworkOperatorDisplayTextLocation location) { HSTRING value; hrcheck(X::get()->_GetNetworkOperatorDisplayText(location, &value)); return from_abi(value); }
	IPhoneLineCellularDetails_adaptor() {}
};
template<typename X> struct adapt<IPhoneLineCellularDetails, X> : Windows::ApplicationModel::Calls::IPhoneLineCellularDetails_adaptor<X> { typedef adapt IPhoneLineCellularDetails; };
struct IPhoneLineCellularDetails : IPhoneLineCellularDetails_raw, generate<IPhoneLineCellularDetails> {};

// IPhoneLine
struct IPhoneLine_raw : IInspectable {
	virtual STDMETHODIMP _add_LineChanged(Foundation::TypedEventHandler<PhoneLine*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LineChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Id(Platform::Guid *value);
	virtual STDMETHODIMP _get_DisplayColor(UI::Color *value);
	virtual STDMETHODIMP _get_NetworkState(PhoneNetworkState *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Voicemail(PhoneVoicemail* *value);
	virtual STDMETHODIMP _get_NetworkName(HSTRING *value);
	virtual STDMETHODIMP _get_CellularDetails(PhoneLineCellularDetails* *value);
	virtual STDMETHODIMP _get_Transport(PhoneLineTransport *value);
	virtual STDMETHODIMP _get_CanDial(bool *value);
	virtual STDMETHODIMP _get_SupportsTile(bool *value);
	virtual STDMETHODIMP _get_VideoCallingCapabilities(PhoneCallVideoCapabilities* *value);
	virtual STDMETHODIMP _get_LineConfiguration(PhoneLineConfiguration* *value);
	virtual STDMETHODIMP _IsImmediateDialNumberAsync(HSTRING number, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _Dial(HSTRING number, HSTRING displayName);
	virtual STDMETHODIMP _DialWithOptions(PhoneDialOptions* options);
};
template<typename X> struct IPhoneLine_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneLine_adaptor::CanDial)->_get_CanDial(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanDial;
		struct : property {
			ptr<PhoneLineCellularDetails> get() { PhoneLineCellularDetails* value; hrcheck(enc(&IPhoneLine_adaptor::CellularDetails)->_get_CellularDetails(&value)); return from_abi(value); }
			ptr<PhoneLineCellularDetails> operator()() { return get(); }
			operator ptr<PhoneLineCellularDetails> () { return get(); }
			ptr<PhoneLineCellularDetails> operator->() { return get(); }
		} CellularDetails;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IPhoneLine_adaptor::DisplayColor)->_get_DisplayColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
		} DisplayColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneLine_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IPhoneLine_adaptor::Id)->_get_Id(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} Id;
		struct : property {
			ptr<PhoneLineConfiguration> get() { PhoneLineConfiguration* value; hrcheck(enc(&IPhoneLine_adaptor::LineConfiguration)->_get_LineConfiguration(&value)); return from_abi(value); }
			ptr<PhoneLineConfiguration> operator()() { return get(); }
			operator ptr<PhoneLineConfiguration> () { return get(); }
			ptr<PhoneLineConfiguration> operator->() { return get(); }
		} LineConfiguration;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneLine_adaptor::NetworkName)->_get_NetworkName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkName;
		struct : property {
			PhoneNetworkState get() { PhoneNetworkState value; hrcheck(enc(&IPhoneLine_adaptor::NetworkState)->_get_NetworkState(&value)); return value; }
			PhoneNetworkState operator()() { return get(); }
			operator PhoneNetworkState () { return get(); }
		} NetworkState;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneLine_adaptor::SupportsTile)->_get_SupportsTile(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SupportsTile;
		struct : property {
			PhoneLineTransport get() { PhoneLineTransport value; hrcheck(enc(&IPhoneLine_adaptor::Transport)->_get_Transport(&value)); return value; }
			PhoneLineTransport operator()() { return get(); }
			operator PhoneLineTransport () { return get(); }
		} Transport;
		struct : property {
			ptr<PhoneCallVideoCapabilities> get() { PhoneCallVideoCapabilities* value; hrcheck(enc(&IPhoneLine_adaptor::VideoCallingCapabilities)->_get_VideoCallingCapabilities(&value)); return from_abi(value); }
			ptr<PhoneCallVideoCapabilities> operator()() { return get(); }
			operator ptr<PhoneCallVideoCapabilities> () { return get(); }
			ptr<PhoneCallVideoCapabilities> operator->() { return get(); }
		} VideoCallingCapabilities;
		struct : property {
			ptr<PhoneVoicemail> get() { PhoneVoicemail* value; hrcheck(enc(&IPhoneLine_adaptor::Voicemail)->_get_Voicemail(&value)); return from_abi(value); }
			ptr<PhoneVoicemail> operator()() { return get(); }
			operator ptr<PhoneVoicemail> () { return get(); }
			ptr<PhoneVoicemail> operator->() { return get(); }
		} Voicemail;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhoneLine>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhoneLine_adaptor::LineChanged)->_add_LineChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhoneLine_adaptor::LineChanged)->_remove_LineChanged(token)); }
		} LineChanged;
	};
	ptr<Foundation::IAsyncOperation<bool>> IsImmediateDialNumberAsync(hstring_ref number) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_IsImmediateDialNumberAsync(number, &result)); return from_abi(result); }
	void Dial(hstring_ref number, hstring_ref displayName) { hrcheck(X::get()->_Dial(number, displayName)); }
	void DialWithOptions(pptr<PhoneDialOptions> options) { hrcheck(X::get()->_DialWithOptions(options)); }
	IPhoneLine_adaptor() {}
};
template<typename X> struct adapt<IPhoneLine, X> : Windows::ApplicationModel::Calls::IPhoneLine_adaptor<X> { typedef adapt IPhoneLine; };
struct IPhoneLine : IPhoneLine_raw, generate<IPhoneLine> {};

// IPhoneLineStatics
struct IPhoneLineStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(Platform::Guid lineId, Foundation::IAsyncOperation<PhoneLine*>* *result);
};

// PhoneLine
template<typename> struct PhoneLine_statics {
	static ptr<Foundation::IAsyncOperation<ptr<PhoneLine>>> FromIdAsync(const Platform::Guid& lineId) { Foundation::IAsyncOperation<PhoneLine*>* result; hrcheck(get_activation_factory<PhoneLine, IPhoneLineStatics>()->_FromIdAsync(lineId, &result)); return from_abi(result); }
};

template<typename X> struct statics<PhoneLine, X> : X, Windows::ApplicationModel::Calls::PhoneLine_statics<void> {
	typedef typename X::root_type PhoneLine;
};
struct PhoneLine : generate<PhoneLine> {};

// PhoneVoicemail
template<typename X> struct statics<PhoneVoicemail, X> : X {
	typedef typename X::root_type PhoneVoicemail;
};
struct PhoneVoicemail : generate<PhoneVoicemail> {};

// PhoneLineCellularDetails
template<typename X> struct statics<PhoneLineCellularDetails, X> : X {
	typedef typename X::root_type PhoneLineCellularDetails;
};
struct PhoneLineCellularDetails : generate<PhoneLineCellularDetails> {};

// IPhoneCallVideoCapabilities
struct IPhoneCallVideoCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_IsVideoCallingCapable(bool *pValue);
};
template<typename X> struct IPhoneCallVideoCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool pValue; hrcheck(enc(&IPhoneCallVideoCapabilities_adaptor::IsVideoCallingCapable)->_get_IsVideoCallingCapable(&pValue)); return pValue; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVideoCallingCapable;
	};
	IPhoneCallVideoCapabilities_adaptor() {}
};
template<typename X> struct adapt<IPhoneCallVideoCapabilities, X> : Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities_adaptor<X> { typedef adapt IPhoneCallVideoCapabilities; };
struct IPhoneCallVideoCapabilities : IPhoneCallVideoCapabilities_raw, generate<IPhoneCallVideoCapabilities> {};

// PhoneCallVideoCapabilities
template<typename X> struct statics<PhoneCallVideoCapabilities, X> : X {
	typedef typename X::root_type PhoneCallVideoCapabilities;
};
struct PhoneCallVideoCapabilities : generate<PhoneCallVideoCapabilities> {};

// IPhoneLineConfiguration
struct IPhoneLineConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_IsVideoCallingEnabled(bool *value);
	virtual STDMETHODIMP _get_ExtendedProperties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IPhoneLineConfiguration_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IPhoneLineConfiguration_adaptor::ExtendedProperties)->_get_ExtendedProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} ExtendedProperties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneLineConfiguration_adaptor::IsVideoCallingEnabled)->_get_IsVideoCallingEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVideoCallingEnabled;
	};
	IPhoneLineConfiguration_adaptor() {}
};
template<typename X> struct adapt<IPhoneLineConfiguration, X> : Windows::ApplicationModel::Calls::IPhoneLineConfiguration_adaptor<X> { typedef adapt IPhoneLineConfiguration; };
struct IPhoneLineConfiguration : IPhoneLineConfiguration_raw, generate<IPhoneLineConfiguration> {};

// PhoneLineConfiguration
template<typename X> struct statics<PhoneLineConfiguration, X> : X {
	typedef typename X::root_type PhoneLineConfiguration;
};
struct PhoneLineConfiguration : generate<PhoneLineConfiguration> {};

// PhoneDialOptions
template<typename X> struct statics<PhoneDialOptions, X> : X {
	typedef typename X::root_type PhoneDialOptions;
};
struct PhoneDialOptions : generate<PhoneDialOptions> {};

// IPhoneCallStore
struct IPhoneCallStore_raw : IInspectable {
	virtual STDMETHODIMP _IsEmergencyPhoneNumberAsync(HSTRING number, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _GetDefaultLineAsync(Foundation::IAsyncOperation<Platform::Guid>* *result);
	virtual STDMETHODIMP _RequestLineWatcher(PhoneLineWatcher* *result);
};
template<typename X> struct IPhoneCallStore_adaptor : X {
	ptr<Foundation::IAsyncOperation<bool>> IsEmergencyPhoneNumberAsync(hstring_ref number) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_IsEmergencyPhoneNumberAsync(number, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<Platform::Guid>> GetDefaultLineAsync() { Foundation::IAsyncOperation<Platform::Guid>* result; hrcheck(X::get()->_GetDefaultLineAsync(&result)); return from_abi(result); }
	ptr<PhoneLineWatcher> RequestLineWatcher() { PhoneLineWatcher* result; hrcheck(X::get()->_RequestLineWatcher(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IPhoneCallStore, X> : Windows::ApplicationModel::Calls::IPhoneCallStore_adaptor<X> { typedef adapt IPhoneCallStore; };
struct IPhoneCallStore : IPhoneCallStore_raw, generate<IPhoneCallStore> {};

// IPhoneLineWatcher
struct IPhoneLineWatcher_raw : IInspectable {
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _add_LineAdded(Foundation::TypedEventHandler<PhoneLineWatcher*, PhoneLineWatcherEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LineAdded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_LineRemoved(Foundation::TypedEventHandler<PhoneLineWatcher*, PhoneLineWatcherEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LineRemoved(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_LineUpdated(Foundation::TypedEventHandler<PhoneLineWatcher*, PhoneLineWatcherEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LineUpdated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<PhoneLineWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<PhoneLineWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Status(PhoneLineWatcherStatus *status);
};
template<typename X> struct IPhoneLineWatcher_adaptor : X {
	union {
		struct : property {
			PhoneLineWatcherStatus get() { PhoneLineWatcherStatus status; hrcheck(enc(&IPhoneLineWatcher_adaptor::Status)->_get_Status(&status)); return status; }
			PhoneLineWatcherStatus operator()() { return get(); }
			operator PhoneLineWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhoneLineWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhoneLineWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhoneLineWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhoneLineWatcher>, ptr<PhoneLineWatcherEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhoneLineWatcher_adaptor::LineAdded)->_add_LineAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhoneLineWatcher_adaptor::LineAdded)->_remove_LineAdded(token)); }
		} LineAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhoneLineWatcher>, ptr<PhoneLineWatcherEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhoneLineWatcher_adaptor::LineRemoved)->_add_LineRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhoneLineWatcher_adaptor::LineRemoved)->_remove_LineRemoved(token)); }
		} LineRemoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhoneLineWatcher>, ptr<PhoneLineWatcherEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhoneLineWatcher_adaptor::LineUpdated)->_add_LineUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhoneLineWatcher_adaptor::LineUpdated)->_remove_LineUpdated(token)); }
		} LineUpdated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhoneLineWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhoneLineWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhoneLineWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IPhoneLineWatcher_adaptor() {}
};
template<typename X> struct adapt<IPhoneLineWatcher, X> : Windows::ApplicationModel::Calls::IPhoneLineWatcher_adaptor<X> { typedef adapt IPhoneLineWatcher; };
struct IPhoneLineWatcher : IPhoneLineWatcher_raw, generate<IPhoneLineWatcher> {};

// PhoneLineWatcher
template<typename X> struct statics<PhoneLineWatcher, X> : X {
	typedef typename X::root_type PhoneLineWatcher;
};
struct PhoneLineWatcher : generate<PhoneLineWatcher> {};

// IPhoneLineWatcherEventArgs
struct IPhoneLineWatcherEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_LineId(Platform::Guid *value);
};
template<typename X> struct IPhoneLineWatcherEventArgs_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IPhoneLineWatcherEventArgs_adaptor::LineId)->_get_LineId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} LineId;
	};
	IPhoneLineWatcherEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPhoneLineWatcherEventArgs, X> : Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs_adaptor<X> { typedef adapt IPhoneLineWatcherEventArgs; };
struct IPhoneLineWatcherEventArgs : IPhoneLineWatcherEventArgs_raw, generate<IPhoneLineWatcherEventArgs> {};

// PhoneLineWatcherEventArgs
template<typename X> struct statics<PhoneLineWatcherEventArgs, X> : X {
	typedef typename X::root_type PhoneLineWatcherEventArgs;
};
struct PhoneLineWatcherEventArgs : generate<PhoneLineWatcherEventArgs> {};

// IPhoneCallManagerStatics
struct IPhoneCallManagerStatics : IInspectable {
	virtual STDMETHODIMP _ShowPhoneCallUI(HSTRING phoneNumber, HSTRING displayName);
};

// IPhoneCallManagerStatics2
struct IPhoneCallManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _add_CallStateChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CallStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_IsCallActive(bool *value);
	virtual STDMETHODIMP _get_IsCallIncoming(bool *value);
	virtual STDMETHODIMP _ShowPhoneCallSettingsUI();
	virtual STDMETHODIMP _RequestStoreAsync(Foundation::IAsyncOperation<PhoneCallStore*>* *result);
};

// PhoneCallStore
template<typename X> struct statics<PhoneCallStore, X> : X {
	typedef typename X::root_type PhoneCallStore;
};
struct PhoneCallStore : generate<PhoneCallStore> {};

// IPhoneCallVideoCapabilitiesManagerStatics
struct IPhoneCallVideoCapabilitiesManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetCapabilitiesAsync(HSTRING phoneNumber, Foundation::IAsyncOperation<PhoneCallVideoCapabilities*>* *result);
};

// IPhoneCallBlockingStatics
struct IPhoneCallBlockingStatics : IInspectable {
	virtual STDMETHODIMP _get_BlockUnknownNumbers(bool *value);
	virtual STDMETHODIMP _put_BlockUnknownNumbers(bool value);
	virtual STDMETHODIMP _get_BlockPrivateNumbers(bool *value);
	virtual STDMETHODIMP _put_BlockPrivateNumbers(bool value);
	virtual STDMETHODIMP _SetCallBlockingListAsync(Foundation::Collections::IIterable<HSTRING>* phoneNumberList, Foundation::IAsyncOperation<bool>* *result);
};

// PhoneCallManager
template<typename> struct PhoneCallManager_statics {
	static struct _IsCallActive : property {
		bool get() { bool value; hrcheck(get_activation_factory<PhoneCallManager, IPhoneCallManagerStatics2>()->_get_IsCallActive(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsCallActive;
	static struct _IsCallIncoming : property {
		bool get() { bool value; hrcheck(get_activation_factory<PhoneCallManager, IPhoneCallManagerStatics2>()->_get_IsCallIncoming(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsCallIncoming;
	static struct _CallStateChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PhoneCallManager, IPhoneCallManagerStatics2>()->_add_CallStateChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PhoneCallManager, IPhoneCallManagerStatics2>()->_remove_CallStateChanged(token)); }
	} CallStateChanged;
	static void ShowPhoneCallSettingsUI() { hrcheck(get_activation_factory<PhoneCallManager, IPhoneCallManagerStatics2>()->_ShowPhoneCallSettingsUI()); }
	static ptr<Foundation::IAsyncOperation<ptr<PhoneCallStore>>> RequestStoreAsync() { Foundation::IAsyncOperation<PhoneCallStore*>* result; hrcheck(get_activation_factory<PhoneCallManager, IPhoneCallManagerStatics2>()->_RequestStoreAsync(&result)); return from_abi(result); }
	static void ShowPhoneCallUI(hstring_ref phoneNumber, hstring_ref displayName) { hrcheck(get_activation_factory<PhoneCallManager, IPhoneCallManagerStatics>()->_ShowPhoneCallUI(phoneNumber, displayName)); }
};
template<typename X> typename PhoneCallManager_statics<X>::_IsCallActive PhoneCallManager_statics<X>::IsCallActive;
template<typename X> typename PhoneCallManager_statics<X>::_IsCallIncoming PhoneCallManager_statics<X>::IsCallIncoming;
template<typename X> typename PhoneCallManager_statics<X>::_CallStateChanged PhoneCallManager_statics<X>::CallStateChanged;

template<typename X> struct statics<PhoneCallManager, X> : X, Windows::ApplicationModel::Calls::PhoneCallManager_statics<void> {
	typedef typename X::root_type PhoneCallManager;
};
struct PhoneCallManager : generate<PhoneCallManager> {};

// PhoneCallVideoCapabilitiesManager
template<typename> struct PhoneCallVideoCapabilitiesManager_statics {
	static ptr<Foundation::IAsyncOperation<ptr<PhoneCallVideoCapabilities>>> GetCapabilitiesAsync(hstring_ref phoneNumber) { Foundation::IAsyncOperation<PhoneCallVideoCapabilities*>* result; hrcheck(get_activation_factory<PhoneCallVideoCapabilitiesManager, IPhoneCallVideoCapabilitiesManagerStatics>()->_GetCapabilitiesAsync(phoneNumber, &result)); return from_abi(result); }
};

template<typename X> struct statics<PhoneCallVideoCapabilitiesManager, X> : X, Windows::ApplicationModel::Calls::PhoneCallVideoCapabilitiesManager_statics<void> {
	typedef typename X::root_type PhoneCallVideoCapabilitiesManager;
};
struct PhoneCallVideoCapabilitiesManager : generate<PhoneCallVideoCapabilitiesManager> {};

// PhoneCallBlocking
template<typename> struct PhoneCallBlocking_statics {
	static struct _BlockPrivateNumbers : property {
		bool get() { bool value; hrcheck(get_activation_factory<PhoneCallBlocking, IPhoneCallBlockingStatics>()->_get_BlockPrivateNumbers(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<PhoneCallBlocking, IPhoneCallBlockingStatics>()->_put_BlockPrivateNumbers(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} BlockPrivateNumbers;
	static struct _BlockUnknownNumbers : property {
		bool get() { bool value; hrcheck(get_activation_factory<PhoneCallBlocking, IPhoneCallBlockingStatics>()->_get_BlockUnknownNumbers(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<PhoneCallBlocking, IPhoneCallBlockingStatics>()->_put_BlockUnknownNumbers(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} BlockUnknownNumbers;
	static ptr<Foundation::IAsyncOperation<bool>> SetCallBlockingListAsync(pptr<Foundation::Collections::IIterable<hstring>> phoneNumberList) { Foundation::IAsyncOperation<bool>* result; hrcheck(get_activation_factory<PhoneCallBlocking, IPhoneCallBlockingStatics>()->_SetCallBlockingListAsync(to_abi(phoneNumberList), &result)); return from_abi(result); }
};
template<typename X> typename PhoneCallBlocking_statics<X>::_BlockPrivateNumbers PhoneCallBlocking_statics<X>::BlockPrivateNumbers;
template<typename X> typename PhoneCallBlocking_statics<X>::_BlockUnknownNumbers PhoneCallBlocking_statics<X>::BlockUnknownNumbers;

template<typename X> struct statics<PhoneCallBlocking, X> : X, Windows::ApplicationModel::Calls::PhoneCallBlocking_statics<void> {
	typedef typename X::root_type PhoneCallBlocking;
};
struct PhoneCallBlocking : generate<PhoneCallBlocking> {};

// ICallStateChangeEventArgs
struct ICallStateChangeEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(VoipPhoneCallState *value);
};
template<typename X> struct ICallStateChangeEventArgs_adaptor : X {
	union {
		struct : property {
			VoipPhoneCallState get() { VoipPhoneCallState value; hrcheck(enc(&ICallStateChangeEventArgs_adaptor::State)->_get_State(&value)); return value; }
			VoipPhoneCallState operator()() { return get(); }
			operator VoipPhoneCallState () { return get(); }
		} State;
	};
	ICallStateChangeEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICallStateChangeEventArgs, X> : Windows::ApplicationModel::Calls::ICallStateChangeEventArgs_adaptor<X> { typedef adapt ICallStateChangeEventArgs; };
struct ICallStateChangeEventArgs : ICallStateChangeEventArgs_raw, generate<ICallStateChangeEventArgs> {};

// CallStateChangeEventArgs
template<typename X> struct statics<CallStateChangeEventArgs, X> : X {
	typedef typename X::root_type CallStateChangeEventArgs;
};
struct CallStateChangeEventArgs : generate<CallStateChangeEventArgs> {};

// ICallAnswerEventArgs
struct ICallAnswerEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AcceptedMedia(VoipPhoneCallMedia *value);
};
template<typename X> struct ICallAnswerEventArgs_adaptor : X {
	union {
		struct : property {
			VoipPhoneCallMedia get() { VoipPhoneCallMedia value; hrcheck(enc(&ICallAnswerEventArgs_adaptor::AcceptedMedia)->_get_AcceptedMedia(&value)); return value; }
			VoipPhoneCallMedia operator()() { return get(); }
			operator VoipPhoneCallMedia () { return get(); }
		} AcceptedMedia;
	};
	ICallAnswerEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICallAnswerEventArgs, X> : Windows::ApplicationModel::Calls::ICallAnswerEventArgs_adaptor<X> { typedef adapt ICallAnswerEventArgs; };
struct ICallAnswerEventArgs : ICallAnswerEventArgs_raw, generate<ICallAnswerEventArgs> {};

// CallAnswerEventArgs
template<typename X> struct statics<CallAnswerEventArgs, X> : X {
	typedef typename X::root_type CallAnswerEventArgs;
};
struct CallAnswerEventArgs : generate<CallAnswerEventArgs> {};

// ICallRejectEventArgs
struct ICallRejectEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RejectReason(VoipPhoneCallRejectReason *value);
};
template<typename X> struct ICallRejectEventArgs_adaptor : X {
	union {
		struct : property {
			VoipPhoneCallRejectReason get() { VoipPhoneCallRejectReason value; hrcheck(enc(&ICallRejectEventArgs_adaptor::RejectReason)->_get_RejectReason(&value)); return value; }
			VoipPhoneCallRejectReason operator()() { return get(); }
			operator VoipPhoneCallRejectReason () { return get(); }
		} RejectReason;
	};
	ICallRejectEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICallRejectEventArgs, X> : Windows::ApplicationModel::Calls::ICallRejectEventArgs_adaptor<X> { typedef adapt ICallRejectEventArgs; };
struct ICallRejectEventArgs : ICallRejectEventArgs_raw, generate<ICallRejectEventArgs> {};

// CallRejectEventArgs
template<typename X> struct statics<CallRejectEventArgs, X> : X {
	typedef typename X::root_type CallRejectEventArgs;
};
struct CallRejectEventArgs : generate<CallRejectEventArgs> {};

// IVoipPhoneCall
struct IVoipPhoneCall_raw : IInspectable {
	virtual STDMETHODIMP _add_EndRequested(Foundation::TypedEventHandler<VoipPhoneCall*, CallStateChangeEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EndRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_HoldRequested(Foundation::TypedEventHandler<VoipPhoneCall*, CallStateChangeEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HoldRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ResumeRequested(Foundation::TypedEventHandler<VoipPhoneCall*, CallStateChangeEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ResumeRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AnswerRequested(Foundation::TypedEventHandler<VoipPhoneCall*, CallAnswerEventArgs*>* acceptHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AnswerRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RejectRequested(Foundation::TypedEventHandler<VoipPhoneCall*, CallRejectEventArgs*>* rejectHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RejectRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _NotifyCallHeld();
	virtual STDMETHODIMP _NotifyCallActive();
	virtual STDMETHODIMP _NotifyCallEnded();
	virtual STDMETHODIMP _get_ContactName(HSTRING *value);
	virtual STDMETHODIMP _put_ContactName(HSTRING value);
	virtual STDMETHODIMP _get_StartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_StartTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_CallMedia(VoipPhoneCallMedia *value);
	virtual STDMETHODIMP _put_CallMedia(VoipPhoneCallMedia value);
	virtual STDMETHODIMP _NotifyCallReady();
};
template<typename X> struct IVoipPhoneCall_adaptor : X {
	union {
		struct : property {
			VoipPhoneCallMedia get() { VoipPhoneCallMedia value; hrcheck(enc(&IVoipPhoneCall_adaptor::CallMedia)->_get_CallMedia(&value)); return value; }
			VoipPhoneCallMedia operator()() { return get(); }
			operator VoipPhoneCallMedia () { return get(); }
			void put(VoipPhoneCallMedia value) { hrcheck(enc(&IVoipPhoneCall_adaptor::CallMedia)->_put_CallMedia(value)); }
			void operator=(VoipPhoneCallMedia value) { put(value); }
			void operator()(VoipPhoneCallMedia value) { put(value); }
		} CallMedia;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IVoipPhoneCall_adaptor::ContactName)->_get_ContactName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IVoipPhoneCall_adaptor::ContactName)->_put_ContactName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContactName;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IVoipPhoneCall_adaptor::StartTime)->_get_StartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IVoipPhoneCall_adaptor::StartTime)->_put_StartTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} StartTime;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VoipPhoneCall>, ptr<CallAnswerEventArgs>>> acceptHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVoipPhoneCall_adaptor::AnswerRequested)->_add_AnswerRequested(to_abi(acceptHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVoipPhoneCall_adaptor::AnswerRequested)->_remove_AnswerRequested(token)); }
		} AnswerRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VoipPhoneCall>, ptr<CallStateChangeEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVoipPhoneCall_adaptor::EndRequested)->_add_EndRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVoipPhoneCall_adaptor::EndRequested)->_remove_EndRequested(token)); }
		} EndRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VoipPhoneCall>, ptr<CallStateChangeEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVoipPhoneCall_adaptor::HoldRequested)->_add_HoldRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVoipPhoneCall_adaptor::HoldRequested)->_remove_HoldRequested(token)); }
		} HoldRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VoipPhoneCall>, ptr<CallRejectEventArgs>>> rejectHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVoipPhoneCall_adaptor::RejectRequested)->_add_RejectRequested(to_abi(rejectHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVoipPhoneCall_adaptor::RejectRequested)->_remove_RejectRequested(token)); }
		} RejectRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VoipPhoneCall>, ptr<CallStateChangeEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVoipPhoneCall_adaptor::ResumeRequested)->_add_ResumeRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVoipPhoneCall_adaptor::ResumeRequested)->_remove_ResumeRequested(token)); }
		} ResumeRequested;
	};
	void NotifyCallHeld() { hrcheck(X::get()->_NotifyCallHeld()); }
	void NotifyCallActive() { hrcheck(X::get()->_NotifyCallActive()); }
	void NotifyCallEnded() { hrcheck(X::get()->_NotifyCallEnded()); }
	void NotifyCallReady() { hrcheck(X::get()->_NotifyCallReady()); }
	IVoipPhoneCall_adaptor() {}
};
template<typename X> struct adapt<IVoipPhoneCall, X> : Windows::ApplicationModel::Calls::IVoipPhoneCall_adaptor<X> { typedef adapt IVoipPhoneCall; };
struct IVoipPhoneCall : IVoipPhoneCall_raw, generate<IVoipPhoneCall> {};

// IVoipPhoneCall2
struct IVoipPhoneCall2_raw : IInspectable {
	virtual STDMETHODIMP _TryShowAppUI();
};
template<typename X> struct IVoipPhoneCall2_adaptor : X {
	void TryShowAppUI() { hrcheck(X::get()->_TryShowAppUI()); }
};
template<typename X> struct adapt<IVoipPhoneCall2, X> : Windows::ApplicationModel::Calls::IVoipPhoneCall2_adaptor<X> { typedef adapt IVoipPhoneCall2; };
struct IVoipPhoneCall2 : IVoipPhoneCall2_raw, generate<IVoipPhoneCall2> {};

// IVoipPhoneCall3
struct IVoipPhoneCall3_raw : IInspectable {
	virtual STDMETHODIMP _NotifyCallAccepted(VoipPhoneCallMedia media);
};
template<typename X> struct IVoipPhoneCall3_adaptor : X {
	void NotifyCallAccepted(VoipPhoneCallMedia media) { hrcheck(X::get()->_NotifyCallAccepted(media)); }
};
template<typename X> struct adapt<IVoipPhoneCall3, X> : Windows::ApplicationModel::Calls::IVoipPhoneCall3_adaptor<X> { typedef adapt IVoipPhoneCall3; };
struct IVoipPhoneCall3 : IVoipPhoneCall3_raw, generate<IVoipPhoneCall3> {};

// VoipPhoneCall
template<typename X> struct statics<VoipPhoneCall, X> : X {
	typedef typename X::root_type VoipPhoneCall;
};
struct VoipPhoneCall : generate<VoipPhoneCall> {};

// IMuteChangeEventArgs
struct IMuteChangeEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Muted(bool *value);
};
template<typename X> struct IMuteChangeEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMuteChangeEventArgs_adaptor::Muted)->_get_Muted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Muted;
	};
	IMuteChangeEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMuteChangeEventArgs, X> : Windows::ApplicationModel::Calls::IMuteChangeEventArgs_adaptor<X> { typedef adapt IMuteChangeEventArgs; };
struct IMuteChangeEventArgs : IMuteChangeEventArgs_raw, generate<IMuteChangeEventArgs> {};

// MuteChangeEventArgs
template<typename X> struct statics<MuteChangeEventArgs, X> : X {
	typedef typename X::root_type MuteChangeEventArgs;
};
struct MuteChangeEventArgs : generate<MuteChangeEventArgs> {};

// IVoipCallCoordinator
struct IVoipCallCoordinator_raw : IInspectable {
	virtual STDMETHODIMP _ReserveCallResourcesAsync(HSTRING taskEntryPoint, Foundation::IAsyncOperation<VoipPhoneCallResourceReservationStatus>* *operation);
	virtual STDMETHODIMP _add_MuteStateChanged(Foundation::TypedEventHandler<VoipCallCoordinator*, MuteChangeEventArgs*>* muteChangeHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MuteStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _RequestNewIncomingCall(HSTRING context, HSTRING contactName, HSTRING contactNumber, Foundation::Uri* contactImage, HSTRING serviceName, Foundation::Uri* brandingImage, HSTRING callDetails, Foundation::Uri* ringtone, VoipPhoneCallMedia media, Foundation::TimeSpan ringTimeout, VoipPhoneCall* *call);
	virtual STDMETHODIMP _RequestNewOutgoingCall(HSTRING context, HSTRING contactName, HSTRING serviceName, VoipPhoneCallMedia media, VoipPhoneCall* *call);
	virtual STDMETHODIMP _NotifyMuted();
	virtual STDMETHODIMP _NotifyUnmuted();
	virtual STDMETHODIMP _RequestOutgoingUpgradeToVideoCall(Platform::Guid callUpgradeGuid, HSTRING context, HSTRING contactName, HSTRING serviceName, VoipPhoneCall* *call);
	virtual STDMETHODIMP _RequestIncomingUpgradeToVideoCall(HSTRING context, HSTRING contactName, HSTRING contactNumber, Foundation::Uri* contactImage, HSTRING serviceName, Foundation::Uri* brandingImage, HSTRING callDetails, Foundation::Uri* ringtone, Foundation::TimeSpan ringTimeout, VoipPhoneCall* *call);
	virtual STDMETHODIMP _TerminateCellularCall(Platform::Guid callUpgradeGuid);
	virtual STDMETHODIMP _CancelUpgrade(Platform::Guid callUpgradeGuid);
};
template<typename X> struct IVoipCallCoordinator_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VoipCallCoordinator>, ptr<MuteChangeEventArgs>>> muteChangeHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVoipCallCoordinator_adaptor::MuteStateChanged)->_add_MuteStateChanged(to_abi(muteChangeHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVoipCallCoordinator_adaptor::MuteStateChanged)->_remove_MuteStateChanged(token)); }
		} MuteStateChanged;
	};
	ptr<Foundation::IAsyncOperation<VoipPhoneCallResourceReservationStatus>> ReserveCallResourcesAsync(hstring_ref taskEntryPoint) { Foundation::IAsyncOperation<VoipPhoneCallResourceReservationStatus>* operation; hrcheck(X::get()->_ReserveCallResourcesAsync(taskEntryPoint, &operation)); return from_abi(operation); }
	ptr<VoipPhoneCall> RequestNewIncomingCall(hstring_ref context, hstring_ref contactName, hstring_ref contactNumber, pptr<Foundation::Uri> contactImage, hstring_ref serviceName, pptr<Foundation::Uri> brandingImage, hstring_ref callDetails, pptr<Foundation::Uri> ringtone, VoipPhoneCallMedia media, const Foundation::TimeSpan& ringTimeout) { VoipPhoneCall* call; hrcheck(X::get()->_RequestNewIncomingCall(context, contactName, contactNumber, contactImage, serviceName, brandingImage, callDetails, ringtone, media, ringTimeout, &call)); return from_abi(call); }
	ptr<VoipPhoneCall> RequestNewOutgoingCall(hstring_ref context, hstring_ref contactName, hstring_ref serviceName, VoipPhoneCallMedia media) { VoipPhoneCall* call; hrcheck(X::get()->_RequestNewOutgoingCall(context, contactName, serviceName, media, &call)); return from_abi(call); }
	void NotifyMuted() { hrcheck(X::get()->_NotifyMuted()); }
	void NotifyUnmuted() { hrcheck(X::get()->_NotifyUnmuted()); }
	ptr<VoipPhoneCall> RequestOutgoingUpgradeToVideoCall(const Platform::Guid& callUpgradeGuid, hstring_ref context, hstring_ref contactName, hstring_ref serviceName) { VoipPhoneCall* call; hrcheck(X::get()->_RequestOutgoingUpgradeToVideoCall(callUpgradeGuid, context, contactName, serviceName, &call)); return from_abi(call); }
	ptr<VoipPhoneCall> RequestIncomingUpgradeToVideoCall(hstring_ref context, hstring_ref contactName, hstring_ref contactNumber, pptr<Foundation::Uri> contactImage, hstring_ref serviceName, pptr<Foundation::Uri> brandingImage, hstring_ref callDetails, pptr<Foundation::Uri> ringtone, const Foundation::TimeSpan& ringTimeout) { VoipPhoneCall* call; hrcheck(X::get()->_RequestIncomingUpgradeToVideoCall(context, contactName, contactNumber, contactImage, serviceName, brandingImage, callDetails, ringtone, ringTimeout, &call)); return from_abi(call); }
	void TerminateCellularCall(const Platform::Guid& callUpgradeGuid) { hrcheck(X::get()->_TerminateCellularCall(callUpgradeGuid)); }
	void CancelUpgrade(const Platform::Guid& callUpgradeGuid) { hrcheck(X::get()->_CancelUpgrade(callUpgradeGuid)); }
	IVoipCallCoordinator_adaptor() {}
};
template<typename X> struct adapt<IVoipCallCoordinator, X> : Windows::ApplicationModel::Calls::IVoipCallCoordinator_adaptor<X> { typedef adapt IVoipCallCoordinator; };
struct IVoipCallCoordinator : IVoipCallCoordinator_raw, generate<IVoipCallCoordinator> {};

// IVoipCallCoordinatorStatics
struct IVoipCallCoordinatorStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(VoipCallCoordinator* *coordinator);
};

// IVoipCallCoordinator3
struct IVoipCallCoordinator3_raw : IInspectable {
	virtual STDMETHODIMP _RequestNewAppInitiatedCall(HSTRING context, HSTRING contactName, HSTRING contactNumber, HSTRING serviceName, VoipPhoneCallMedia media, VoipPhoneCall* *call);
	virtual STDMETHODIMP _RequestNewIncomingCallWithContactRemoteId(HSTRING context, HSTRING contactName, HSTRING contactNumber, Foundation::Uri* contactImage, HSTRING serviceName, Foundation::Uri* brandingImage, HSTRING callDetails, Foundation::Uri* ringtone, VoipPhoneCallMedia media, Foundation::TimeSpan ringTimeout, HSTRING contactRemoteId, VoipPhoneCall* *call);
};
template<typename X> struct IVoipCallCoordinator3_adaptor : X {
	ptr<VoipPhoneCall> RequestNewAppInitiatedCall(hstring_ref context, hstring_ref contactName, hstring_ref contactNumber, hstring_ref serviceName, VoipPhoneCallMedia media) { VoipPhoneCall* call; hrcheck(X::get()->_RequestNewAppInitiatedCall(context, contactName, contactNumber, serviceName, media, &call)); return from_abi(call); }
	ptr<VoipPhoneCall> RequestNewIncomingCall(hstring_ref context, hstring_ref contactName, hstring_ref contactNumber, pptr<Foundation::Uri> contactImage, hstring_ref serviceName, pptr<Foundation::Uri> brandingImage, hstring_ref callDetails, pptr<Foundation::Uri> ringtone, VoipPhoneCallMedia media, const Foundation::TimeSpan& ringTimeout, hstring_ref contactRemoteId) { VoipPhoneCall* call; hrcheck(X::get()->_RequestNewIncomingCallWithContactRemoteId(context, contactName, contactNumber, contactImage, serviceName, brandingImage, callDetails, ringtone, media, ringTimeout, contactRemoteId, &call)); return from_abi(call); }
};
template<typename X> struct adapt<IVoipCallCoordinator3, X> : Windows::ApplicationModel::Calls::IVoipCallCoordinator3_adaptor<X> { typedef adapt IVoipCallCoordinator3; };
struct IVoipCallCoordinator3 : IVoipCallCoordinator3_raw, generate<IVoipCallCoordinator3> {};

// IVoipCallCoordinator2
struct IVoipCallCoordinator2_raw : IInspectable {
	virtual STDMETHODIMP _SetupNewAcceptedCall(HSTRING context, HSTRING contactName, HSTRING contactNumber, HSTRING serviceName, VoipPhoneCallMedia media, VoipPhoneCall* *call);
};
template<typename X> struct IVoipCallCoordinator2_adaptor : X {
	ptr<VoipPhoneCall> SetupNewAcceptedCall(hstring_ref context, hstring_ref contactName, hstring_ref contactNumber, hstring_ref serviceName, VoipPhoneCallMedia media) { VoipPhoneCall* call; hrcheck(X::get()->_SetupNewAcceptedCall(context, contactName, contactNumber, serviceName, media, &call)); return from_abi(call); }
};
template<typename X> struct adapt<IVoipCallCoordinator2, X> : Windows::ApplicationModel::Calls::IVoipCallCoordinator2_adaptor<X> { typedef adapt IVoipCallCoordinator2; };
struct IVoipCallCoordinator2 : IVoipCallCoordinator2_raw, generate<IVoipCallCoordinator2> {};

// VoipCallCoordinator
template<typename> struct VoipCallCoordinator_statics {
	static ptr<VoipCallCoordinator> GetDefault() { VoipCallCoordinator* coordinator; hrcheck(get_activation_factory<VoipCallCoordinator, IVoipCallCoordinatorStatics>()->_GetDefault(&coordinator)); return from_abi(coordinator); }
};

template<typename X> struct statics<VoipCallCoordinator, X> : X, Windows::ApplicationModel::Calls::VoipCallCoordinator_statics<void> {
	typedef typename X::root_type VoipCallCoordinator;
};
struct VoipCallCoordinator : generate<VoipCallCoordinator> {
	using IVoipCallCoordinator3::RequestNewIncomingCall;
	using IVoipCallCoordinator::RequestNewIncomingCall;
};

// ILockScreenCallEndCallDeferral
struct ILockScreenCallEndCallDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct ILockScreenCallEndCallDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<ILockScreenCallEndCallDeferral, X> : Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral_adaptor<X> { typedef adapt ILockScreenCallEndCallDeferral; };
struct ILockScreenCallEndCallDeferral : ILockScreenCallEndCallDeferral_raw, generate<ILockScreenCallEndCallDeferral> {};

// ILockScreenCallEndRequestedEventArgs
struct ILockScreenCallEndRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(LockScreenCallEndCallDeferral* *value);
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
};
template<typename X> struct ILockScreenCallEndRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ILockScreenCallEndRequestedEventArgs_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	ptr<LockScreenCallEndCallDeferral> GetDeferral() { LockScreenCallEndCallDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ILockScreenCallEndRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILockScreenCallEndRequestedEventArgs, X> : Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs_adaptor<X> { typedef adapt ILockScreenCallEndRequestedEventArgs; };
struct ILockScreenCallEndRequestedEventArgs : ILockScreenCallEndRequestedEventArgs_raw, generate<ILockScreenCallEndRequestedEventArgs> {};

// LockScreenCallEndCallDeferral
template<typename X> struct statics<LockScreenCallEndCallDeferral, X> : X {
	typedef typename X::root_type LockScreenCallEndCallDeferral;
};
struct LockScreenCallEndCallDeferral : generate<LockScreenCallEndCallDeferral> {};

// ILockScreenCallUI
struct ILockScreenCallUI_raw : IInspectable {
	virtual STDMETHODIMP _Dismiss();
	virtual STDMETHODIMP _add_EndRequested(Foundation::TypedEventHandler<LockScreenCallUI*, LockScreenCallEndRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EndRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Closed(Foundation::TypedEventHandler<LockScreenCallUI*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Closed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_CallTitle(HSTRING *value);
	virtual STDMETHODIMP _put_CallTitle(HSTRING value);
};
template<typename X> struct ILockScreenCallUI_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILockScreenCallUI_adaptor::CallTitle)->_get_CallTitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ILockScreenCallUI_adaptor::CallTitle)->_put_CallTitle(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CallTitle;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LockScreenCallUI>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILockScreenCallUI_adaptor::Closed)->_add_Closed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILockScreenCallUI_adaptor::Closed)->_remove_Closed(token)); }
		} Closed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LockScreenCallUI>, ptr<LockScreenCallEndRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILockScreenCallUI_adaptor::EndRequested)->_add_EndRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILockScreenCallUI_adaptor::EndRequested)->_remove_EndRequested(token)); }
		} EndRequested;
	};
	void Dismiss() { hrcheck(X::get()->_Dismiss()); }
	ILockScreenCallUI_adaptor() {}
};
template<typename X> struct adapt<ILockScreenCallUI, X> : Windows::ApplicationModel::Calls::ILockScreenCallUI_adaptor<X> { typedef adapt ILockScreenCallUI; };
struct ILockScreenCallUI : ILockScreenCallUI_raw, generate<ILockScreenCallUI> {};

// LockScreenCallUI
template<typename X> struct statics<LockScreenCallUI, X> : X {
	typedef typename X::root_type LockScreenCallUI;
};
struct LockScreenCallUI : generate<LockScreenCallUI> {};

// LockScreenCallEndRequestedEventArgs
template<typename X> struct statics<LockScreenCallEndRequestedEventArgs, X> : X {
	typedef typename X::root_type LockScreenCallEndRequestedEventArgs;
};
struct LockScreenCallEndRequestedEventArgs : generate<LockScreenCallEndRequestedEventArgs> {};

// IPhoneCallHistoryEntry
struct IPhoneCallHistoryEntry_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_Address(PhoneCallHistoryEntryAddress* *value);
	virtual STDMETHODIMP _put_Address(PhoneCallHistoryEntryAddress* value);
	virtual STDMETHODIMP _get_Duration(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_Duration(Foundation::IReference<Foundation::TimeSpan>* value);
	virtual STDMETHODIMP _get_IsCallerIdBlocked(bool *value);
	virtual STDMETHODIMP _put_IsCallerIdBlocked(bool value);
	virtual STDMETHODIMP _get_IsEmergency(bool *value);
	virtual STDMETHODIMP _put_IsEmergency(bool value);
	virtual STDMETHODIMP _get_IsIncoming(bool *value);
	virtual STDMETHODIMP _put_IsIncoming(bool value);
	virtual STDMETHODIMP _get_IsMissed(bool *value);
	virtual STDMETHODIMP _put_IsMissed(bool value);
	virtual STDMETHODIMP _get_IsRinging(bool *value);
	virtual STDMETHODIMP _put_IsRinging(bool value);
	virtual STDMETHODIMP _get_IsSeen(bool *value);
	virtual STDMETHODIMP _put_IsSeen(bool value);
	virtual STDMETHODIMP _get_IsSuppressed(bool *value);
	virtual STDMETHODIMP _put_IsSuppressed(bool value);
	virtual STDMETHODIMP _get_IsVoicemail(bool *value);
	virtual STDMETHODIMP _put_IsVoicemail(bool value);
	virtual STDMETHODIMP _get_Media(PhoneCallHistoryEntryMedia *value);
	virtual STDMETHODIMP _put_Media(PhoneCallHistoryEntryMedia value);
	virtual STDMETHODIMP _get_OtherAppReadAccess(PhoneCallHistoryEntryOtherAppReadAccess *value);
	virtual STDMETHODIMP _put_OtherAppReadAccess(PhoneCallHistoryEntryOtherAppReadAccess value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_SourceDisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_SourceId(HSTRING *value);
	virtual STDMETHODIMP _put_SourceId(HSTRING value);
	virtual STDMETHODIMP _get_SourceIdKind(PhoneCallHistorySourceIdKind *value);
	virtual STDMETHODIMP _put_SourceIdKind(PhoneCallHistorySourceIdKind value);
	virtual STDMETHODIMP _get_StartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_StartTime(Foundation::DateTime value);
};
template<typename X> struct IPhoneCallHistoryEntry_adaptor : X {
	union {
		struct : property {
			ptr<PhoneCallHistoryEntryAddress> get() { PhoneCallHistoryEntryAddress* value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::Address)->_get_Address(&value)); return from_abi(value); }
			ptr<PhoneCallHistoryEntryAddress> operator()() { return get(); }
			operator ptr<PhoneCallHistoryEntryAddress> () { return get(); }
			ptr<PhoneCallHistoryEntryAddress> operator->() { return get(); }
			void put(pptr<PhoneCallHistoryEntryAddress> value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::Address)->_put_Address(value)); }
			void operator=(pptr<PhoneCallHistoryEntryAddress> value) { put(value); }
			void operator()(pptr<PhoneCallHistoryEntryAddress> value) { put(value); }
		} Address;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::Duration)->_get_Duration(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::Duration)->_put_Duration(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} Duration;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsCallerIdBlocked)->_get_IsCallerIdBlocked(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsCallerIdBlocked)->_put_IsCallerIdBlocked(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCallerIdBlocked;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsEmergency)->_get_IsEmergency(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsEmergency)->_put_IsEmergency(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEmergency;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsIncoming)->_get_IsIncoming(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsIncoming)->_put_IsIncoming(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsIncoming;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsMissed)->_get_IsMissed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsMissed)->_put_IsMissed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMissed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsRinging)->_get_IsRinging(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsRinging)->_put_IsRinging(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsRinging;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsSeen)->_get_IsSeen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsSeen)->_put_IsSeen(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSeen;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsSuppressed)->_get_IsSuppressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsSuppressed)->_put_IsSuppressed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSuppressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsVoicemail)->_get_IsVoicemail(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::IsVoicemail)->_put_IsVoicemail(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsVoicemail;
		struct : property {
			PhoneCallHistoryEntryMedia get() { PhoneCallHistoryEntryMedia value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::Media)->_get_Media(&value)); return value; }
			PhoneCallHistoryEntryMedia operator()() { return get(); }
			operator PhoneCallHistoryEntryMedia () { return get(); }
			void put(PhoneCallHistoryEntryMedia value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::Media)->_put_Media(value)); }
			void operator=(PhoneCallHistoryEntryMedia value) { put(value); }
			void operator()(PhoneCallHistoryEntryMedia value) { put(value); }
		} Media;
		struct : property {
			PhoneCallHistoryEntryOtherAppReadAccess get() { PhoneCallHistoryEntryOtherAppReadAccess value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::OtherAppReadAccess)->_get_OtherAppReadAccess(&value)); return value; }
			PhoneCallHistoryEntryOtherAppReadAccess operator()() { return get(); }
			operator PhoneCallHistoryEntryOtherAppReadAccess () { return get(); }
			void put(PhoneCallHistoryEntryOtherAppReadAccess value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::OtherAppReadAccess)->_put_OtherAppReadAccess(value)); }
			void operator=(PhoneCallHistoryEntryOtherAppReadAccess value) { put(value); }
			void operator()(PhoneCallHistoryEntryOtherAppReadAccess value) { put(value); }
		} OtherAppReadAccess;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::SourceDisplayName)->_get_SourceDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourceDisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::SourceId)->_get_SourceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::SourceId)->_put_SourceId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SourceId;
		struct : property {
			PhoneCallHistorySourceIdKind get() { PhoneCallHistorySourceIdKind value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::SourceIdKind)->_get_SourceIdKind(&value)); return value; }
			PhoneCallHistorySourceIdKind operator()() { return get(); }
			operator PhoneCallHistorySourceIdKind () { return get(); }
			void put(PhoneCallHistorySourceIdKind value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::SourceIdKind)->_put_SourceIdKind(value)); }
			void operator=(PhoneCallHistorySourceIdKind value) { put(value); }
			void operator()(PhoneCallHistorySourceIdKind value) { put(value); }
		} SourceIdKind;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::StartTime)->_get_StartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IPhoneCallHistoryEntry_adaptor::StartTime)->_put_StartTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} StartTime;
	};
	IPhoneCallHistoryEntry_adaptor() {}
};
template<typename X> struct adapt<IPhoneCallHistoryEntry, X> : Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry_adaptor<X> { typedef adapt IPhoneCallHistoryEntry; };
struct IPhoneCallHistoryEntry : IPhoneCallHistoryEntry_raw, generate<IPhoneCallHistoryEntry> {};

// IPhoneCallHistoryEntryAddressFactory
struct IPhoneCallHistoryEntryAddressFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING rawAddress, PhoneCallHistoryEntryRawAddressKind rawAddressKind, PhoneCallHistoryEntryAddress* *result);
};

// IPhoneCallHistoryEntryAddress
struct IPhoneCallHistoryEntryAddress_raw : IInspectable {
	virtual STDMETHODIMP _get_ContactId(HSTRING *value);
	virtual STDMETHODIMP _put_ContactId(HSTRING value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_RawAddress(HSTRING *value);
	virtual STDMETHODIMP _put_RawAddress(HSTRING value);
	virtual STDMETHODIMP _get_RawAddressKind(PhoneCallHistoryEntryRawAddressKind *value);
	virtual STDMETHODIMP _put_RawAddressKind(PhoneCallHistoryEntryRawAddressKind value);
};
template<typename X> struct IPhoneCallHistoryEntryAddress_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::ContactId)->_get_ContactId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::ContactId)->_put_ContactId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContactId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::RawAddress)->_get_RawAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::RawAddress)->_put_RawAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RawAddress;
		struct : property {
			PhoneCallHistoryEntryRawAddressKind get() { PhoneCallHistoryEntryRawAddressKind value; hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::RawAddressKind)->_get_RawAddressKind(&value)); return value; }
			PhoneCallHistoryEntryRawAddressKind operator()() { return get(); }
			operator PhoneCallHistoryEntryRawAddressKind () { return get(); }
			void put(PhoneCallHistoryEntryRawAddressKind value) { hrcheck(enc(&IPhoneCallHistoryEntryAddress_adaptor::RawAddressKind)->_put_RawAddressKind(value)); }
			void operator=(PhoneCallHistoryEntryRawAddressKind value) { put(value); }
			void operator()(PhoneCallHistoryEntryRawAddressKind value) { put(value); }
		} RawAddressKind;
	};
	IPhoneCallHistoryEntryAddress_adaptor() {}
};
template<typename X> struct adapt<IPhoneCallHistoryEntryAddress, X> : Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress_adaptor<X> { typedef adapt IPhoneCallHistoryEntryAddress; };
struct IPhoneCallHistoryEntryAddress : IPhoneCallHistoryEntryAddress_raw, generate<IPhoneCallHistoryEntryAddress> {};

// PhoneCallHistoryEntryAddress
template<typename> struct PhoneCallHistoryEntryAddress_statics {
	static PhoneCallHistoryEntryAddress *activate(hstring_ref rawAddress, PhoneCallHistoryEntryRawAddressKind rawAddressKind) { PhoneCallHistoryEntryAddress *result; hrcheck(get_activation_factory<PhoneCallHistoryEntryAddress, IPhoneCallHistoryEntryAddressFactory>()->_Create(rawAddress, rawAddressKind, &result)); return result; }
	static PhoneCallHistoryEntryAddress *activate() { PhoneCallHistoryEntryAddress *t; get_activation_factory<PhoneCallHistoryEntryAddress>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<PhoneCallHistoryEntryAddress, X> : X, Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress_statics<void> {
	using Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress_statics<void>::activate;
	typedef typename X::root_type PhoneCallHistoryEntryAddress;
};
struct PhoneCallHistoryEntryAddress : generate<PhoneCallHistoryEntryAddress> {};

// IPhoneCallHistoryEntryQueryOptions
struct IPhoneCallHistoryEntryQueryOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_DesiredMedia(PhoneCallHistoryEntryQueryDesiredMedia *value);
	virtual STDMETHODIMP _put_DesiredMedia(PhoneCallHistoryEntryQueryDesiredMedia value);
	virtual STDMETHODIMP _get_SourceIds(Foundation::Collections::IVector<HSTRING>* *value);
};
template<typename X> struct IPhoneCallHistoryEntryQueryOptions_adaptor : X {
	union {
		struct : property {
			PhoneCallHistoryEntryQueryDesiredMedia get() { PhoneCallHistoryEntryQueryDesiredMedia value; hrcheck(enc(&IPhoneCallHistoryEntryQueryOptions_adaptor::DesiredMedia)->_get_DesiredMedia(&value)); return value; }
			PhoneCallHistoryEntryQueryDesiredMedia operator()() { return get(); }
			operator PhoneCallHistoryEntryQueryDesiredMedia () { return get(); }
			void put(PhoneCallHistoryEntryQueryDesiredMedia value) { hrcheck(enc(&IPhoneCallHistoryEntryQueryOptions_adaptor::DesiredMedia)->_put_DesiredMedia(value)); }
			void operator=(PhoneCallHistoryEntryQueryDesiredMedia value) { put(value); }
			void operator()(PhoneCallHistoryEntryQueryDesiredMedia value) { put(value); }
		} DesiredMedia;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IPhoneCallHistoryEntryQueryOptions_adaptor::SourceIds)->_get_SourceIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} SourceIds;
	};
	IPhoneCallHistoryEntryQueryOptions_adaptor() {}
};
template<typename X> struct adapt<IPhoneCallHistoryEntryQueryOptions, X> : Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions_adaptor<X> { typedef adapt IPhoneCallHistoryEntryQueryOptions; };
struct IPhoneCallHistoryEntryQueryOptions : IPhoneCallHistoryEntryQueryOptions_raw, generate<IPhoneCallHistoryEntryQueryOptions> {};

// IPhoneCallHistoryEntryReader
struct IPhoneCallHistoryEntryReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PhoneCallHistoryEntry*>*>* *result);
};
template<typename X> struct IPhoneCallHistoryEntryReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PhoneCallHistoryEntry>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PhoneCallHistoryEntry*>*>* result; hrcheck(X::get()->_ReadBatchAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IPhoneCallHistoryEntryReader, X> : Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader_adaptor<X> { typedef adapt IPhoneCallHistoryEntryReader; };
struct IPhoneCallHistoryEntryReader : IPhoneCallHistoryEntryReader_raw, generate<IPhoneCallHistoryEntryReader> {};

// PhoneCallHistoryEntry
template<typename X> struct statics<PhoneCallHistoryEntry, X> : X {
	typedef typename X::root_type PhoneCallHistoryEntry;
};
struct PhoneCallHistoryEntry : generate<PhoneCallHistoryEntry> {};

// IPhoneCallHistoryStore
struct IPhoneCallHistoryStore_raw : IInspectable {
	virtual STDMETHODIMP _GetEntryAsync(HSTRING callHistoryEntryId, Foundation::IAsyncOperation<PhoneCallHistoryEntry*>* *result);
	virtual STDMETHODIMP _GetEntryReader(PhoneCallHistoryEntryReader* *result);
	virtual STDMETHODIMP _GetEntryReaderWithOptions(PhoneCallHistoryEntryQueryOptions* queryOptions, PhoneCallHistoryEntryReader* *result);
	virtual STDMETHODIMP _SaveEntryAsync(PhoneCallHistoryEntry* callHistoryEntry, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _DeleteEntryAsync(PhoneCallHistoryEntry* callHistoryEntry, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _DeleteEntriesAsync(Foundation::Collections::IIterable<PhoneCallHistoryEntry*>* callHistoryEntries, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkEntryAsSeenAsync(PhoneCallHistoryEntry* callHistoryEntry, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MarkEntriesAsSeenAsync(Foundation::Collections::IIterable<PhoneCallHistoryEntry*>* callHistoryEntries, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _GetUnseenCountAsync(Foundation::IAsyncOperation<unsigned>* *result);
	virtual STDMETHODIMP _MarkAllAsSeenAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _GetSourcesUnseenCountAsync(Foundation::Collections::IIterable<HSTRING>* sourceIds, Foundation::IAsyncOperation<unsigned>* *result);
	virtual STDMETHODIMP _MarkSourcesAsSeenAsync(Foundation::Collections::IIterable<HSTRING>* sourceIds, Foundation::IAsyncAction* *result);
};
template<typename X> struct IPhoneCallHistoryStore_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<PhoneCallHistoryEntry>>> GetEntryAsync(hstring_ref callHistoryEntryId) { Foundation::IAsyncOperation<PhoneCallHistoryEntry*>* result; hrcheck(X::get()->_GetEntryAsync(callHistoryEntryId, &result)); return from_abi(result); }
	ptr<PhoneCallHistoryEntryReader> GetEntryReader() { PhoneCallHistoryEntryReader* result; hrcheck(X::get()->_GetEntryReader(&result)); return from_abi(result); }
	ptr<PhoneCallHistoryEntryReader> GetEntryReader(pptr<PhoneCallHistoryEntryQueryOptions> queryOptions) { PhoneCallHistoryEntryReader* result; hrcheck(X::get()->_GetEntryReaderWithOptions(queryOptions, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SaveEntryAsync(pptr<PhoneCallHistoryEntry> callHistoryEntry) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveEntryAsync(callHistoryEntry, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeleteEntryAsync(pptr<PhoneCallHistoryEntry> callHistoryEntry) { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteEntryAsync(callHistoryEntry, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeleteEntriesAsync(pptr<Foundation::Collections::IIterable<ptr<PhoneCallHistoryEntry>>> callHistoryEntries) { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteEntriesAsync(to_abi(callHistoryEntries), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkEntryAsSeenAsync(pptr<PhoneCallHistoryEntry> callHistoryEntry) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkEntryAsSeenAsync(callHistoryEntry, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkEntriesAsSeenAsync(pptr<Foundation::Collections::IIterable<ptr<PhoneCallHistoryEntry>>> callHistoryEntries) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkEntriesAsSeenAsync(to_abi(callHistoryEntries), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<unsigned>> GetUnseenCountAsync() { Foundation::IAsyncOperation<unsigned>* result; hrcheck(X::get()->_GetUnseenCountAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkAllAsSeenAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkAllAsSeenAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<unsigned>> GetSourcesUnseenCountAsync(pptr<Foundation::Collections::IIterable<hstring>> sourceIds) { Foundation::IAsyncOperation<unsigned>* result; hrcheck(X::get()->_GetSourcesUnseenCountAsync(to_abi(sourceIds), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MarkSourcesAsSeenAsync(pptr<Foundation::Collections::IIterable<hstring>> sourceIds) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MarkSourcesAsSeenAsync(to_abi(sourceIds), &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPhoneCallHistoryStore, X> : Windows::ApplicationModel::Calls::IPhoneCallHistoryStore_adaptor<X> { typedef adapt IPhoneCallHistoryStore; };
struct IPhoneCallHistoryStore : IPhoneCallHistoryStore_raw, generate<IPhoneCallHistoryStore> {};

// PhoneCallHistoryEntryReader
template<typename X> struct statics<PhoneCallHistoryEntryReader, X> : X {
	typedef typename X::root_type PhoneCallHistoryEntryReader;
};
struct PhoneCallHistoryEntryReader : generate<PhoneCallHistoryEntryReader> {};

// PhoneCallHistoryEntryQueryOptions
template<typename X> struct statics<PhoneCallHistoryEntryQueryOptions, X> : X {
	typedef typename X::root_type PhoneCallHistoryEntryQueryOptions;
};
struct PhoneCallHistoryEntryQueryOptions : generate<PhoneCallHistoryEntryQueryOptions> {};

// IPhoneCallHistoryManagerStatics
struct IPhoneCallHistoryManagerStatics : IInspectable {
	virtual STDMETHODIMP _RequestStoreAsync(PhoneCallHistoryStoreAccessType accessType, Foundation::IAsyncOperation<PhoneCallHistoryStore*>* *result);
};

// PhoneCallHistoryStore
template<typename X> struct statics<PhoneCallHistoryStore, X> : X {
	typedef typename X::root_type PhoneCallHistoryStore;
};
struct PhoneCallHistoryStore : generate<PhoneCallHistoryStore> {
	using IPhoneCallHistoryStore::GetEntryReader;
};

// IPhoneCallHistoryManagerStatics2
struct IPhoneCallHistoryManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, PhoneCallHistoryManagerForUser* *result);
};

// IPhoneCallHistoryManagerForUser
struct IPhoneCallHistoryManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _RequestStoreAsync(PhoneCallHistoryStoreAccessType accessType, Foundation::IAsyncOperation<PhoneCallHistoryStore*>* *result);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IPhoneCallHistoryManagerForUser_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IPhoneCallHistoryManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<Foundation::IAsyncOperation<ptr<PhoneCallHistoryStore>>> RequestStoreAsync(PhoneCallHistoryStoreAccessType accessType) { Foundation::IAsyncOperation<PhoneCallHistoryStore*>* result; hrcheck(X::get()->_RequestStoreAsync(accessType, &result)); return from_abi(result); }
	IPhoneCallHistoryManagerForUser_adaptor() {}
};
template<typename X> struct adapt<IPhoneCallHistoryManagerForUser, X> : Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerForUser_adaptor<X> { typedef adapt IPhoneCallHistoryManagerForUser; };
struct IPhoneCallHistoryManagerForUser : IPhoneCallHistoryManagerForUser_raw, generate<IPhoneCallHistoryManagerForUser> {};

// PhoneCallHistoryManagerForUser
template<typename X> struct statics<PhoneCallHistoryManagerForUser, X> : X {
	typedef typename X::root_type PhoneCallHistoryManagerForUser;
};
struct PhoneCallHistoryManagerForUser : generate<PhoneCallHistoryManagerForUser> {};

// PhoneCallHistoryManager
template<typename> struct PhoneCallHistoryManager_statics {
	static ptr<PhoneCallHistoryManagerForUser> GetForUser(pptr<System::User> user) { PhoneCallHistoryManagerForUser* result; hrcheck(get_activation_factory<PhoneCallHistoryManager, IPhoneCallHistoryManagerStatics2>()->_GetForUser(user, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<PhoneCallHistoryStore>>> RequestStoreAsync(PhoneCallHistoryStoreAccessType accessType) { Foundation::IAsyncOperation<PhoneCallHistoryStore*>* result; hrcheck(get_activation_factory<PhoneCallHistoryManager, IPhoneCallHistoryManagerStatics>()->_RequestStoreAsync(accessType, &result)); return from_abi(result); }
};

template<typename X> struct statics<PhoneCallHistoryManager, X> : X, Windows::ApplicationModel::Calls::PhoneCallHistoryManager_statics<void> {
	typedef typename X::root_type PhoneCallHistoryManager;
};
struct PhoneCallHistoryManager : generate<PhoneCallHistoryManager> {};
}}}
} // namespace iso_winrt
