#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Bluetooth.Rfcomm

#include "Windows.Devices.Bluetooth.Rfcomm.0.h"
#include "Windows.Devices.Enumeration.0.h"
#include "Windows.Devices.Bluetooth.0.h"
#include "Windows.Networking.Sockets.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMap;
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMapView;
}}
namespace Networking {
struct HostName;
}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServiceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServiceStatics2> : interface_type<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServiceStatics> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService2> : interface_type<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService3> : interface_type<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService2> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> : class_type<Platform::Object, Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService, Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService3, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServicesResult> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceServicesResult> : class_type<Platform::Object, Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServicesResult> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceIdStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId> : class_type<Platform::Object, Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProviderStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider2> : interface_type<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider> {};
template<> struct def<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> : class_type<Platform::Object, Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider, Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider2> {};

// uuids

template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServiceStatics> { define_guid(0xA4A149EF, 0x626D, 0x41AC, 0xB2, 0x53, 0x87, 0xAC, 0x5C, 0x27, 0xE2, 0x8A);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServiceStatics2> { define_guid(0xAA8CB1C9, 0xE78D, 0x4BE4, 0x80, 0x76, 0xA, 0x3D, 0x87, 0xA0, 0xA0, 0x5F);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService> { define_guid(0xAE81FF1F, 0xC5A1, 0x4C40, 0x8C, 0x28, 0xF3, 0xEF, 0xD6, 0x90, 0x62, 0xF3);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService2> { define_guid(0x536CED14, 0xEBCD, 0x49FE, 0xBF, 0x9F, 0x40, 0xEF, 0xC6, 0x89, 0xB2, 0xD);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService3> { define_guid(0x1C22ACE6, 0xDD44, 0x4D23, 0x86, 0x6D, 0x8F, 0x34, 0x86, 0xEE, 0x64, 0x90);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServicesResult> { define_guid(0x3B48388C, 0x7CCF, 0x488E, 0x96, 0x25, 0xD2, 0x59, 0xA5, 0x73, 0x2D, 0x55);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceIdStatics> { define_guid(0x2A179EBA, 0xA975, 0x46E3, 0xB5, 0x6B, 0x8, 0xFF, 0xD7, 0x83, 0xA5, 0xFE);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId> { define_guid(0x22629204, 0x7E02, 0x4017, 0x81, 0x36, 0xDA, 0x1B, 0x6A, 0x1B, 0x9B, 0xBF);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProviderStatics> { define_guid(0x98888303, 0x69CA, 0x413A, 0x84, 0xF7, 0x43, 0x44, 0xC7, 0x29, 0x29, 0x97);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider> { define_guid(0xEADBFDC4, 0xB1F6, 0x44FF, 0x9F, 0x7C, 0xE7, 0xA8, 0x2A, 0xB8, 0x68, 0x21);};
template<> struct uuid<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider2> { define_guid(0x736BDFC6, 0x3C81, 0x4D1E, 0xBA, 0xF2, 0xDD, 0xBB, 0x81, 0x28, 0x45, 0x12);};

// types

namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

// IRfcommDeviceServiceStatics
struct IRfcommDeviceServiceStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<RfcommDeviceService*>* *asyncOp);
	virtual STDMETHODIMP _GetDeviceSelector(RfcommServiceId* serviceId, HSTRING *selector);
};

// IRfcommDeviceServiceStatics2
struct IRfcommDeviceServiceStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelectorForBluetoothDevice(BluetoothDevice* bluetoothDevice, HSTRING *selector);
	virtual STDMETHODIMP _GetDeviceSelectorForBluetoothDeviceWithCacheMode(BluetoothDevice* bluetoothDevice, BluetoothCacheMode cacheMode, HSTRING *selector);
	virtual STDMETHODIMP _GetDeviceSelectorForBluetoothDeviceAndServiceId(BluetoothDevice* bluetoothDevice, RfcommServiceId* serviceId, HSTRING *selector);
	virtual STDMETHODIMP _GetDeviceSelectorForBluetoothDeviceAndServiceIdWithCacheMode(BluetoothDevice* bluetoothDevice, RfcommServiceId* serviceId, BluetoothCacheMode cacheMode, HSTRING *selector);
};

// IRfcommDeviceService
struct IRfcommDeviceService_raw : IInspectable {
	virtual STDMETHODIMP _get_ConnectionHostName(Networking::HostName* *value);
	virtual STDMETHODIMP _get_ConnectionServiceName(HSTRING *value);
	virtual STDMETHODIMP _get_ServiceId(RfcommServiceId* *value);
	virtual STDMETHODIMP _get_ProtectionLevel(Networking::Sockets::SocketProtectionLevel *value);
	virtual STDMETHODIMP _get_MaxProtectionLevel(Networking::Sockets::SocketProtectionLevel *value);
	virtual STDMETHODIMP _GetSdpRawAttributesAsync(Foundation::IAsyncOperation<Foundation::Collections::IMapView<unsigned, Storage::Streams::IBuffer*>*>* *asyncOp);
	virtual STDMETHODIMP _GetSdpRawAttributesWithCacheModeAsync(BluetoothCacheMode cacheMode, Foundation::IAsyncOperation<Foundation::Collections::IMapView<unsigned, Storage::Streams::IBuffer*>*>* *asyncOp);
};
template<typename X> struct IRfcommDeviceService_adaptor : X {
	union {
		struct : property {
			ptr<Networking::HostName> get() { Networking::HostName* value; hrcheck(enc(&IRfcommDeviceService_adaptor::ConnectionHostName)->_get_ConnectionHostName(&value)); return from_abi(value); }
			ptr<Networking::HostName> operator()() { return get(); }
			operator ptr<Networking::HostName> () { return get(); }
			ptr<Networking::HostName> operator->() { return get(); }
		} ConnectionHostName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRfcommDeviceService_adaptor::ConnectionServiceName)->_get_ConnectionServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ConnectionServiceName;
		struct : property {
			Networking::Sockets::SocketProtectionLevel get() { Networking::Sockets::SocketProtectionLevel value; hrcheck(enc(&IRfcommDeviceService_adaptor::MaxProtectionLevel)->_get_MaxProtectionLevel(&value)); return value; }
			Networking::Sockets::SocketProtectionLevel operator()() { return get(); }
			operator Networking::Sockets::SocketProtectionLevel () { return get(); }
		} MaxProtectionLevel;
		struct : property {
			Networking::Sockets::SocketProtectionLevel get() { Networking::Sockets::SocketProtectionLevel value; hrcheck(enc(&IRfcommDeviceService_adaptor::ProtectionLevel)->_get_ProtectionLevel(&value)); return value; }
			Networking::Sockets::SocketProtectionLevel operator()() { return get(); }
			operator Networking::Sockets::SocketProtectionLevel () { return get(); }
		} ProtectionLevel;
		struct : property {
			ptr<RfcommServiceId> get() { RfcommServiceId* value; hrcheck(enc(&IRfcommDeviceService_adaptor::ServiceId)->_get_ServiceId(&value)); return from_abi(value); }
			ptr<RfcommServiceId> operator()() { return get(); }
			operator ptr<RfcommServiceId> () { return get(); }
			ptr<RfcommServiceId> operator->() { return get(); }
		} ServiceId;
	};
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMapView<unsigned, ptr<Storage::Streams::IBuffer>>>>> GetSdpRawAttributesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IMapView<unsigned, Storage::Streams::IBuffer*>*>* asyncOp; hrcheck(X::get()->_GetSdpRawAttributesAsync(&asyncOp)); return from_abi(asyncOp); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMapView<unsigned, ptr<Storage::Streams::IBuffer>>>>> GetSdpRawAttributesAsync(BluetoothCacheMode cacheMode) { Foundation::IAsyncOperation<Foundation::Collections::IMapView<unsigned, Storage::Streams::IBuffer*>*>* asyncOp; hrcheck(X::get()->_GetSdpRawAttributesWithCacheModeAsync(cacheMode, &asyncOp)); return from_abi(asyncOp); }
	IRfcommDeviceService_adaptor() {}
};
template<typename X> struct adapt<IRfcommDeviceService, X> : Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService_adaptor<X> { typedef adapt IRfcommDeviceService; };
struct IRfcommDeviceService : IRfcommDeviceService_raw, generate<IRfcommDeviceService> {};

// IRfcommDeviceService2
struct IRfcommDeviceService2_raw : IInspectable {
	virtual STDMETHODIMP _get_Device(BluetoothDevice* *value);
};
template<typename X> struct IRfcommDeviceService2_adaptor : X {
	union {
		struct : property {
			ptr<BluetoothDevice> get() { BluetoothDevice* value; hrcheck(enc(&IRfcommDeviceService2_adaptor::Device)->_get_Device(&value)); return from_abi(value); }
			ptr<BluetoothDevice> operator()() { return get(); }
			operator ptr<BluetoothDevice> () { return get(); }
			ptr<BluetoothDevice> operator->() { return get(); }
		} Device;
	};
	IRfcommDeviceService2_adaptor() {}
};
template<typename X> struct adapt<IRfcommDeviceService2, X> : Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService2_adaptor<X> { typedef adapt IRfcommDeviceService2; };
struct IRfcommDeviceService2 : IRfcommDeviceService2_raw, generate<IRfcommDeviceService2> {};

// IRfcommDeviceService3
struct IRfcommDeviceService3_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceAccessInformation(Enumeration::DeviceAccessInformation* *value);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>* *value);
};
template<typename X> struct IRfcommDeviceService3_adaptor : X {
	union {
		struct : property {
			ptr<Enumeration::DeviceAccessInformation> get() { Enumeration::DeviceAccessInformation* value; hrcheck(enc(&IRfcommDeviceService3_adaptor::DeviceAccessInformation)->_get_DeviceAccessInformation(&value)); return from_abi(value); }
			ptr<Enumeration::DeviceAccessInformation> operator()() { return get(); }
			operator ptr<Enumeration::DeviceAccessInformation> () { return get(); }
			ptr<Enumeration::DeviceAccessInformation> operator->() { return get(); }
		} DeviceAccessInformation;
	};
	ptr<Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>* value; hrcheck(X::get()->_RequestAccessAsync(&value)); return from_abi(value); }
	IRfcommDeviceService3_adaptor() {}
};
template<typename X> struct adapt<IRfcommDeviceService3, X> : Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService3_adaptor<X> { typedef adapt IRfcommDeviceService3; };
struct IRfcommDeviceService3 : IRfcommDeviceService3_raw, generate<IRfcommDeviceService3> {};

// RfcommDeviceService
template<typename> struct RfcommDeviceService_statics {
	static hstring GetDeviceSelectorForBluetoothDevice(pptr<BluetoothDevice> bluetoothDevice) { HSTRING selector; hrcheck(get_activation_factory<RfcommDeviceService, IRfcommDeviceServiceStatics2>()->_GetDeviceSelectorForBluetoothDevice(bluetoothDevice, &selector)); return from_abi(selector); }
	static hstring GetDeviceSelectorForBluetoothDevice(pptr<BluetoothDevice> bluetoothDevice, BluetoothCacheMode cacheMode) { HSTRING selector; hrcheck(get_activation_factory<RfcommDeviceService, IRfcommDeviceServiceStatics2>()->_GetDeviceSelectorForBluetoothDeviceWithCacheMode(bluetoothDevice, cacheMode, &selector)); return from_abi(selector); }
	static hstring GetDeviceSelectorForBluetoothDeviceAndServiceId(pptr<BluetoothDevice> bluetoothDevice, pptr<RfcommServiceId> serviceId) { HSTRING selector; hrcheck(get_activation_factory<RfcommDeviceService, IRfcommDeviceServiceStatics2>()->_GetDeviceSelectorForBluetoothDeviceAndServiceId(bluetoothDevice, serviceId, &selector)); return from_abi(selector); }
	static hstring GetDeviceSelectorForBluetoothDeviceAndServiceId(pptr<BluetoothDevice> bluetoothDevice, pptr<RfcommServiceId> serviceId, BluetoothCacheMode cacheMode) { HSTRING selector; hrcheck(get_activation_factory<RfcommDeviceService, IRfcommDeviceServiceStatics2>()->_GetDeviceSelectorForBluetoothDeviceAndServiceIdWithCacheMode(bluetoothDevice, serviceId, cacheMode, &selector)); return from_abi(selector); }
	static ptr<Foundation::IAsyncOperation<ptr<RfcommDeviceService>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<RfcommDeviceService*>* asyncOp; hrcheck(get_activation_factory<RfcommDeviceService, IRfcommDeviceServiceStatics>()->_FromIdAsync(deviceId, &asyncOp)); return from_abi(asyncOp); }
	static hstring GetDeviceSelector(pptr<RfcommServiceId> serviceId) { HSTRING selector; hrcheck(get_activation_factory<RfcommDeviceService, IRfcommDeviceServiceStatics>()->_GetDeviceSelector(serviceId, &selector)); return from_abi(selector); }
};

template<typename X> struct statics<RfcommDeviceService, X> : X, Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService_statics<void> {
	typedef typename X::root_type RfcommDeviceService;
};
struct RfcommDeviceService : generate<RfcommDeviceService> {
	using IRfcommDeviceService::GetSdpRawAttributesAsync;
};

// IRfcommDeviceServicesResult
struct IRfcommDeviceServicesResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Error(BluetoothError *value);
	virtual STDMETHODIMP _get_Services(Foundation::Collections::IVectorView<RfcommDeviceService*>* *services);
};
template<typename X> struct IRfcommDeviceServicesResult_adaptor : X {
	union {
		struct : property {
			BluetoothError get() { BluetoothError value; hrcheck(enc(&IRfcommDeviceServicesResult_adaptor::Error)->_get_Error(&value)); return value; }
			BluetoothError operator()() { return get(); }
			operator BluetoothError () { return get(); }
		} Error;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<RfcommDeviceService>>> get() { Foundation::Collections::IVectorView<RfcommDeviceService*>* services; hrcheck(enc(&IRfcommDeviceServicesResult_adaptor::Services)->_get_Services(&services)); return from_abi(services); }
			ptr<Foundation::Collections::IVectorView<ptr<RfcommDeviceService>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<RfcommDeviceService>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<RfcommDeviceService>>> operator->() { return get(); }
		} Services;
	};
	IRfcommDeviceServicesResult_adaptor() {}
};
template<typename X> struct adapt<IRfcommDeviceServicesResult, X> : Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServicesResult_adaptor<X> { typedef adapt IRfcommDeviceServicesResult; };
struct IRfcommDeviceServicesResult : IRfcommDeviceServicesResult_raw, generate<IRfcommDeviceServicesResult> {};

// RfcommDeviceServicesResult
template<typename X> struct statics<RfcommDeviceServicesResult, X> : X {
	typedef typename X::root_type RfcommDeviceServicesResult;
};
struct RfcommDeviceServicesResult : generate<RfcommDeviceServicesResult> {};

// IRfcommServiceIdStatics
struct IRfcommServiceIdStatics : IInspectable {
	virtual STDMETHODIMP _FromUuid(Platform::Guid uuid, RfcommServiceId* *serviceId);
	virtual STDMETHODIMP _FromShortId(unsigned shortId, RfcommServiceId* *serviceId);
	virtual STDMETHODIMP _get_SerialPort(RfcommServiceId* *serviceId);
	virtual STDMETHODIMP _get_ObexObjectPush(RfcommServiceId* *serviceId);
	virtual STDMETHODIMP _get_ObexFileTransfer(RfcommServiceId* *serviceId);
	virtual STDMETHODIMP _get_PhoneBookAccessPce(RfcommServiceId* *serviceId);
	virtual STDMETHODIMP _get_PhoneBookAccessPse(RfcommServiceId* *serviceId);
	virtual STDMETHODIMP _get_GenericFileTransfer(RfcommServiceId* *serviceId);
};

// IRfcommServiceId
struct IRfcommServiceId_raw : IInspectable {
	virtual STDMETHODIMP _get_Uuid(Platform::Guid *value);
	virtual STDMETHODIMP _AsShortId(unsigned *shortId);
	virtual STDMETHODIMP _AsString(HSTRING *id);
};
template<typename X> struct IRfcommServiceId_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IRfcommServiceId_adaptor::Uuid)->_get_Uuid(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} Uuid;
	};
	unsigned AsShortId() { unsigned shortId; hrcheck(X::get()->_AsShortId(&shortId)); return shortId; }
	hstring AsString() { HSTRING id; hrcheck(X::get()->_AsString(&id)); return from_abi(id); }
	IRfcommServiceId_adaptor() {}
};
template<typename X> struct adapt<IRfcommServiceId, X> : Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId_adaptor<X> { typedef adapt IRfcommServiceId; };
struct IRfcommServiceId : IRfcommServiceId_raw, generate<IRfcommServiceId> {};

// RfcommServiceId
template<typename> struct RfcommServiceId_statics {
	static struct _GenericFileTransfer : property {
		ptr<RfcommServiceId> get() { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_get_GenericFileTransfer(&serviceId)); return from_abi(serviceId); }
		ptr<RfcommServiceId> operator()() { return get(); }
		operator ptr<RfcommServiceId> () { return get(); }
		ptr<RfcommServiceId> operator->() { return get(); }
	} GenericFileTransfer;
	static struct _ObexFileTransfer : property {
		ptr<RfcommServiceId> get() { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_get_ObexFileTransfer(&serviceId)); return from_abi(serviceId); }
		ptr<RfcommServiceId> operator()() { return get(); }
		operator ptr<RfcommServiceId> () { return get(); }
		ptr<RfcommServiceId> operator->() { return get(); }
	} ObexFileTransfer;
	static struct _ObexObjectPush : property {
		ptr<RfcommServiceId> get() { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_get_ObexObjectPush(&serviceId)); return from_abi(serviceId); }
		ptr<RfcommServiceId> operator()() { return get(); }
		operator ptr<RfcommServiceId> () { return get(); }
		ptr<RfcommServiceId> operator->() { return get(); }
	} ObexObjectPush;
	static struct _PhoneBookAccessPce : property {
		ptr<RfcommServiceId> get() { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_get_PhoneBookAccessPce(&serviceId)); return from_abi(serviceId); }
		ptr<RfcommServiceId> operator()() { return get(); }
		operator ptr<RfcommServiceId> () { return get(); }
		ptr<RfcommServiceId> operator->() { return get(); }
	} PhoneBookAccessPce;
	static struct _PhoneBookAccessPse : property {
		ptr<RfcommServiceId> get() { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_get_PhoneBookAccessPse(&serviceId)); return from_abi(serviceId); }
		ptr<RfcommServiceId> operator()() { return get(); }
		operator ptr<RfcommServiceId> () { return get(); }
		ptr<RfcommServiceId> operator->() { return get(); }
	} PhoneBookAccessPse;
	static struct _SerialPort : property {
		ptr<RfcommServiceId> get() { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_get_SerialPort(&serviceId)); return from_abi(serviceId); }
		ptr<RfcommServiceId> operator()() { return get(); }
		operator ptr<RfcommServiceId> () { return get(); }
		ptr<RfcommServiceId> operator->() { return get(); }
	} SerialPort;
	static ptr<RfcommServiceId> FromUuid(const Platform::Guid& uuid) { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_FromUuid(uuid, &serviceId)); return from_abi(serviceId); }
	static ptr<RfcommServiceId> FromShortId(unsigned shortId) { RfcommServiceId* serviceId; hrcheck(get_activation_factory<RfcommServiceId, IRfcommServiceIdStatics>()->_FromShortId(shortId, &serviceId)); return from_abi(serviceId); }
};
template<typename X> typename RfcommServiceId_statics<X>::_GenericFileTransfer RfcommServiceId_statics<X>::GenericFileTransfer;
template<typename X> typename RfcommServiceId_statics<X>::_ObexFileTransfer RfcommServiceId_statics<X>::ObexFileTransfer;
template<typename X> typename RfcommServiceId_statics<X>::_ObexObjectPush RfcommServiceId_statics<X>::ObexObjectPush;
template<typename X> typename RfcommServiceId_statics<X>::_PhoneBookAccessPce RfcommServiceId_statics<X>::PhoneBookAccessPce;
template<typename X> typename RfcommServiceId_statics<X>::_PhoneBookAccessPse RfcommServiceId_statics<X>::PhoneBookAccessPse;
template<typename X> typename RfcommServiceId_statics<X>::_SerialPort RfcommServiceId_statics<X>::SerialPort;

template<typename X> struct statics<RfcommServiceId, X> : X, Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId_statics<void> {
	typedef typename X::root_type RfcommServiceId;
};
struct RfcommServiceId : generate<RfcommServiceId> {};

// IRfcommServiceProviderStatics
struct IRfcommServiceProviderStatics : IInspectable {
	virtual STDMETHODIMP _CreateAsync(RfcommServiceId* serviceId, Foundation::IAsyncOperation<RfcommServiceProvider*>* *asyncOp);
};

// IRfcommServiceProvider
struct IRfcommServiceProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceId(RfcommServiceId* *value);
	virtual STDMETHODIMP _get_SdpRawAttributes(Foundation::Collections::IMap<unsigned, Storage::Streams::IBuffer*>* *value);
	virtual STDMETHODIMP _StartAdvertising(Networking::Sockets::StreamSocketListener* listener);
	virtual STDMETHODIMP _StopAdvertising();
};
template<typename X> struct IRfcommServiceProvider_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMap<unsigned, ptr<Storage::Streams::IBuffer>>> get() { Foundation::Collections::IMap<unsigned, Storage::Streams::IBuffer*>* value; hrcheck(enc(&IRfcommServiceProvider_adaptor::SdpRawAttributes)->_get_SdpRawAttributes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<unsigned, ptr<Storage::Streams::IBuffer>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<unsigned, ptr<Storage::Streams::IBuffer>>> () { return get(); }
			ptr<Foundation::Collections::IMap<unsigned, ptr<Storage::Streams::IBuffer>>> operator->() { return get(); }
		} SdpRawAttributes;
		struct : property {
			ptr<RfcommServiceId> get() { RfcommServiceId* value; hrcheck(enc(&IRfcommServiceProvider_adaptor::ServiceId)->_get_ServiceId(&value)); return from_abi(value); }
			ptr<RfcommServiceId> operator()() { return get(); }
			operator ptr<RfcommServiceId> () { return get(); }
			ptr<RfcommServiceId> operator->() { return get(); }
		} ServiceId;
	};
	void StartAdvertising(pptr<Networking::Sockets::StreamSocketListener> listener) { hrcheck(X::get()->_StartAdvertising(listener)); }
	void StopAdvertising() { hrcheck(X::get()->_StopAdvertising()); }
	IRfcommServiceProvider_adaptor() {}
};
template<typename X> struct adapt<IRfcommServiceProvider, X> : Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider_adaptor<X> { typedef adapt IRfcommServiceProvider; };
struct IRfcommServiceProvider : IRfcommServiceProvider_raw, generate<IRfcommServiceProvider> {};

// IRfcommServiceProvider2
struct IRfcommServiceProvider2_raw : IInspectable {
	virtual STDMETHODIMP _StartAdvertisingWithRadioDiscoverability(Networking::Sockets::StreamSocketListener* listener, bool radioDiscoverable);
};
template<typename X> struct IRfcommServiceProvider2_adaptor : X {
	void StartAdvertising(pptr<Networking::Sockets::StreamSocketListener> listener, bool radioDiscoverable) { hrcheck(X::get()->_StartAdvertisingWithRadioDiscoverability(listener, radioDiscoverable)); }
};
template<typename X> struct adapt<IRfcommServiceProvider2, X> : Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider2_adaptor<X> { typedef adapt IRfcommServiceProvider2; };
struct IRfcommServiceProvider2 : IRfcommServiceProvider2_raw, generate<IRfcommServiceProvider2> {};

// RfcommServiceProvider
template<typename> struct RfcommServiceProvider_statics {
	static ptr<Foundation::IAsyncOperation<ptr<RfcommServiceProvider>>> CreateAsync(pptr<RfcommServiceId> serviceId) { Foundation::IAsyncOperation<RfcommServiceProvider*>* asyncOp; hrcheck(get_activation_factory<RfcommServiceProvider, IRfcommServiceProviderStatics>()->_CreateAsync(serviceId, &asyncOp)); return from_abi(asyncOp); }
};

template<typename X> struct statics<RfcommServiceProvider, X> : X, Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider_statics<void> {
	typedef typename X::root_type RfcommServiceProvider;
};
struct RfcommServiceProvider : generate<RfcommServiceProvider> {
	using IRfcommServiceProvider::StartAdvertising;
	using IRfcommServiceProvider2::StartAdvertising;
};
}}}}
} // namespace iso_winrt
