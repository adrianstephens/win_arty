#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.LockScreen

#include "Windows.ApplicationModel.LockScreen.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStream;
}}}

// defs

template<> struct def<Windows::ApplicationModel::LockScreen::ILockScreenBadge> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::LockScreen::ILockScreenInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::LockScreen::LockScreenInfo> : class_type<Platform::Object, Windows::ApplicationModel::LockScreen::ILockScreenInfo> {};
template<> struct def<Windows::ApplicationModel::LockScreen::LockScreenBadge> : class_type<Platform::Object, Windows::ApplicationModel::LockScreen::ILockScreenBadge> {};
template<> struct def<Windows::ApplicationModel::LockScreen::ILockScreenUnlockingDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::LockScreen::ILockScreenUnlockingEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral> : class_type<Platform::Object, Windows::ApplicationModel::LockScreen::ILockScreenUnlockingDeferral> {};
template<> struct def<Windows::ApplicationModel::LockScreen::ILockApplicationHost> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::LockScreen::ILockApplicationHostStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::LockScreen::LockApplicationHost> : class_type<Platform::Object, Windows::ApplicationModel::LockScreen::ILockApplicationHost> {};
template<> struct def<Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::LockScreen::ILockScreenUnlockingEventArgs> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::LockScreen::ILockScreenBadge> { define_guid(0xE95105D9, 0x2BFF, 0x4DB0, 0x9B, 0x4F, 0x38, 0x24, 0x77, 0x8B, 0x9C, 0x9A);};
template<> struct uuid<Windows::ApplicationModel::LockScreen::ILockScreenInfo> { define_guid(0xF59AA65C, 0x9711, 0x4DC9, 0xA6, 0x30, 0x95, 0xB6, 0xCB, 0x8C, 0xDA, 0xD0);};
template<> struct uuid<Windows::ApplicationModel::LockScreen::ILockScreenUnlockingDeferral> { define_guid(0x7E7D1AD6, 0x5203, 0x43E7, 0x9B, 0xD6, 0x7C, 0x39, 0x47, 0xD1, 0xE3, 0xFE);};
template<> struct uuid<Windows::ApplicationModel::LockScreen::ILockScreenUnlockingEventArgs> { define_guid(0x44E6C007, 0x75FB, 0x4ABB, 0x9F, 0x8B, 0x82, 0x47, 0x48, 0x90, 0xC, 0x71);};
template<> struct uuid<Windows::ApplicationModel::LockScreen::ILockApplicationHost> { define_guid(0x38EE31AD, 0xD94F, 0x4E7C, 0x81, 0xFA, 0x4F, 0x44, 0x36, 0x50, 0x62, 0x81);};
template<> struct uuid<Windows::ApplicationModel::LockScreen::ILockApplicationHostStatics> { define_guid(0xF48FAB8E, 0x23D7, 0x4E63, 0x96, 0xA1, 0x66, 0x6F, 0xF5, 0x2D, 0x3B, 0x2C);};

// types

namespace Windows { namespace ApplicationModel { namespace LockScreen {

// ILockScreenBadge
struct ILockScreenBadge_raw : IInspectable {
	virtual STDMETHODIMP _get_Logo(Storage::Streams::IRandomAccessStream* *value);
	virtual STDMETHODIMP _get_Glyph(Storage::Streams::IRandomAccessStream* *value);
	virtual STDMETHODIMP _get_Number(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_AutomationName(HSTRING *value);
	virtual STDMETHODIMP _LaunchApp();
};
template<typename X> struct ILockScreenBadge_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILockScreenBadge_adaptor::AutomationName)->_get_AutomationName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AutomationName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStream> get() { Storage::Streams::IRandomAccessStream* value; hrcheck(enc(&ILockScreenBadge_adaptor::Glyph)->_get_Glyph(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStream> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStream> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStream> operator->() { return get(); }
		} Glyph;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStream> get() { Storage::Streams::IRandomAccessStream* value; hrcheck(enc(&ILockScreenBadge_adaptor::Logo)->_get_Logo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStream> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStream> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStream> operator->() { return get(); }
		} Logo;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&ILockScreenBadge_adaptor::Number)->_get_Number(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} Number;
	};
	void LaunchApp() { hrcheck(X::get()->_LaunchApp()); }
	ILockScreenBadge_adaptor() {}
};
template<typename X> struct adapt<ILockScreenBadge, X> : Windows::ApplicationModel::LockScreen::ILockScreenBadge_adaptor<X> { typedef adapt ILockScreenBadge; };
struct ILockScreenBadge : ILockScreenBadge_raw, generate<ILockScreenBadge> {};

// ILockScreenInfo
struct ILockScreenInfo_raw : IInspectable {
	virtual STDMETHODIMP _add_LockScreenImageChanged(Foundation::TypedEventHandler<LockScreenInfo*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LockScreenImageChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_LockScreenImage(Storage::Streams::IRandomAccessStream* *value);
	virtual STDMETHODIMP _add_BadgesChanged(Foundation::TypedEventHandler<LockScreenInfo*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BadgesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Badges(Foundation::Collections::IVectorView<LockScreenBadge*>* *value);
	virtual STDMETHODIMP _add_DetailTextChanged(Foundation::TypedEventHandler<LockScreenInfo*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DetailTextChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_DetailText(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _add_AlarmIconChanged(Foundation::TypedEventHandler<LockScreenInfo*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AlarmIconChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_AlarmIcon(Storage::Streams::IRandomAccessStream* *value);
};
template<typename X> struct ILockScreenInfo_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStream> get() { Storage::Streams::IRandomAccessStream* value; hrcheck(enc(&ILockScreenInfo_adaptor::AlarmIcon)->_get_AlarmIcon(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStream> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStream> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStream> operator->() { return get(); }
		} AlarmIcon;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<LockScreenBadge>>> get() { Foundation::Collections::IVectorView<LockScreenBadge*>* value; hrcheck(enc(&ILockScreenInfo_adaptor::Badges)->_get_Badges(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<LockScreenBadge>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<LockScreenBadge>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<LockScreenBadge>>> operator->() { return get(); }
		} Badges;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&ILockScreenInfo_adaptor::DetailText)->_get_DetailText(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} DetailText;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStream> get() { Storage::Streams::IRandomAccessStream* value; hrcheck(enc(&ILockScreenInfo_adaptor::LockScreenImage)->_get_LockScreenImage(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStream> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStream> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStream> operator->() { return get(); }
		} LockScreenImage;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LockScreenInfo>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILockScreenInfo_adaptor::AlarmIconChanged)->_add_AlarmIconChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILockScreenInfo_adaptor::AlarmIconChanged)->_remove_AlarmIconChanged(token)); }
		} AlarmIconChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LockScreenInfo>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILockScreenInfo_adaptor::BadgesChanged)->_add_BadgesChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILockScreenInfo_adaptor::BadgesChanged)->_remove_BadgesChanged(token)); }
		} BadgesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LockScreenInfo>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILockScreenInfo_adaptor::DetailTextChanged)->_add_DetailTextChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILockScreenInfo_adaptor::DetailTextChanged)->_remove_DetailTextChanged(token)); }
		} DetailTextChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LockScreenInfo>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILockScreenInfo_adaptor::LockScreenImageChanged)->_add_LockScreenImageChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILockScreenInfo_adaptor::LockScreenImageChanged)->_remove_LockScreenImageChanged(token)); }
		} LockScreenImageChanged;
	};
	ILockScreenInfo_adaptor() {}
};
template<typename X> struct adapt<ILockScreenInfo, X> : Windows::ApplicationModel::LockScreen::ILockScreenInfo_adaptor<X> { typedef adapt ILockScreenInfo; };
struct ILockScreenInfo : ILockScreenInfo_raw, generate<ILockScreenInfo> {};

// LockScreenInfo
template<typename X> struct statics<LockScreenInfo, X> : X {
	typedef typename X::root_type LockScreenInfo;
};
struct LockScreenInfo : generate<LockScreenInfo> {};

// LockScreenBadge
template<typename X> struct statics<LockScreenBadge, X> : X {
	typedef typename X::root_type LockScreenBadge;
};
struct LockScreenBadge : generate<LockScreenBadge> {};

// ILockScreenUnlockingDeferral
struct ILockScreenUnlockingDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct ILockScreenUnlockingDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<ILockScreenUnlockingDeferral, X> : Windows::ApplicationModel::LockScreen::ILockScreenUnlockingDeferral_adaptor<X> { typedef adapt ILockScreenUnlockingDeferral; };
struct ILockScreenUnlockingDeferral : ILockScreenUnlockingDeferral_raw, generate<ILockScreenUnlockingDeferral> {};

// ILockScreenUnlockingEventArgs
struct ILockScreenUnlockingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(LockScreenUnlockingDeferral* *deferral);
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
};
template<typename X> struct ILockScreenUnlockingEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ILockScreenUnlockingEventArgs_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	ptr<LockScreenUnlockingDeferral> GetDeferral() { LockScreenUnlockingDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	ILockScreenUnlockingEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILockScreenUnlockingEventArgs, X> : Windows::ApplicationModel::LockScreen::ILockScreenUnlockingEventArgs_adaptor<X> { typedef adapt ILockScreenUnlockingEventArgs; };
struct ILockScreenUnlockingEventArgs : ILockScreenUnlockingEventArgs_raw, generate<ILockScreenUnlockingEventArgs> {};

// LockScreenUnlockingDeferral
template<typename X> struct statics<LockScreenUnlockingDeferral, X> : X {
	typedef typename X::root_type LockScreenUnlockingDeferral;
};
struct LockScreenUnlockingDeferral : generate<LockScreenUnlockingDeferral> {};

// ILockApplicationHost
struct ILockApplicationHost_raw : IInspectable {
	virtual STDMETHODIMP _RequestUnlock();
	virtual STDMETHODIMP _add_Unlocking(Foundation::TypedEventHandler<LockApplicationHost*, LockScreenUnlockingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Unlocking(Foundation::EventRegistrationToken token);
};
template<typename X> struct ILockApplicationHost_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LockApplicationHost>, ptr<LockScreenUnlockingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILockApplicationHost_adaptor::Unlocking)->_add_Unlocking(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILockApplicationHost_adaptor::Unlocking)->_remove_Unlocking(token)); }
		} Unlocking;
	};
	void RequestUnlock() { hrcheck(X::get()->_RequestUnlock()); }
	ILockApplicationHost_adaptor() {}
};
template<typename X> struct adapt<ILockApplicationHost, X> : Windows::ApplicationModel::LockScreen::ILockApplicationHost_adaptor<X> { typedef adapt ILockApplicationHost; };
struct ILockApplicationHost : ILockApplicationHost_raw, generate<ILockApplicationHost> {};

// ILockApplicationHostStatics
struct ILockApplicationHostStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(LockApplicationHost* *result);
};

// LockApplicationHost
template<typename> struct LockApplicationHost_statics {
	static ptr<LockApplicationHost> GetForCurrentView() { LockApplicationHost* result; hrcheck(get_activation_factory<LockApplicationHost, ILockApplicationHostStatics>()->_GetForCurrentView(&result)); return from_abi(result); }
};

template<typename X> struct statics<LockApplicationHost, X> : X, Windows::ApplicationModel::LockScreen::LockApplicationHost_statics<void> {
	typedef typename X::root_type LockApplicationHost;
};
struct LockApplicationHost : generate<LockApplicationHost> {};

// LockScreenUnlockingEventArgs
template<typename X> struct statics<LockScreenUnlockingEventArgs, X> : X {
	typedef typename X::root_type LockScreenUnlockingEventArgs;
};
struct LockScreenUnlockingEventArgs : generate<LockScreenUnlockingEventArgs> {};
}}}
} // namespace iso_winrt
