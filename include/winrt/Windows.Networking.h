#pragma once
// generated by isopod tools
// namespaces:
// Windows.Networking

#include "Windows.Networking.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Networking { namespace Connectivity {
struct IPInformation;
}}}

// defs

template<> struct def<Windows::Networking::HostNameSortOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Networking::HostNameType> : enum_type<int> {};
template<> struct def<Windows::Networking::DomainNameType> : enum_type<int> {};
template<> struct def<Windows::Networking::IHostNameStatics> : interface_type<> {};
template<> struct def<Windows::Networking::IHostName> : interface_type<> {};
template<> struct def<Windows::Networking::IHostNameFactory> : interface_type<> {};
template<> struct def<Windows::Networking::HostName> : class_type<Platform::Object, Windows::Networking::IHostName, Windows::Foundation::IStringable>, custom_activators {};
template<> struct def<Windows::Networking::IEndpointPair> : interface_type<> {};
template<> struct def<Windows::Networking::IEndpointPairFactory> : interface_type<> {};
template<> struct def<Windows::Networking::EndpointPair> : class_type<Platform::Object, Windows::Networking::IEndpointPair>, custom_activators {};

// uuids

template<> struct uuid<Windows::Networking::IHostNameStatics> { define_guid(0xF68CD4BF, 0xA388, 0x4E8B, 0x91, 0xEA, 0x54, 0xDD, 0x6D, 0xD9, 0x1, 0xC0);};
template<> struct uuid<Windows::Networking::IHostName> { define_guid(0xBF8ECAAD, 0xED96, 0x49A7, 0x90, 0x84, 0xD4, 0x16, 0xCA, 0xE8, 0x8D, 0xCB);};
template<> struct uuid<Windows::Networking::IHostNameFactory> { define_guid(0x458C23ED, 0x712F, 0x4576, 0xAD, 0xF1, 0xC2, 0xB, 0x2C, 0x64, 0x35, 0x58);};
template<> struct uuid<Windows::Networking::IEndpointPair> { define_guid(0x33A0AA36, 0xF8FA, 0x4B30, 0xB8, 0x56, 0x76, 0x51, 0x7C, 0x3B, 0xD0, 0x6D);};
template<> struct uuid<Windows::Networking::IEndpointPairFactory> { define_guid(0xB609D971, 0x64E0, 0x442B, 0xAA, 0x6F, 0xCC, 0x8C, 0x8F, 0x18, 0x1F, 0x78);};

// types

namespace Windows { namespace Networking {

// IHostNameStatics
struct IHostNameStatics : IInspectable {
	virtual STDMETHODIMP _Compare(HSTRING value1, HSTRING value2, int *result);
};

// IHostName
struct IHostName_raw : IInspectable {
	virtual STDMETHODIMP _get_IPInformation(Connectivity::IPInformation* *value);
	virtual STDMETHODIMP _get_RawName(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_CanonicalName(HSTRING *value);
	virtual STDMETHODIMP _get_Type(HostNameType *value);
	virtual STDMETHODIMP _IsEqual(HostName* hostName, bool *isEqual);
};
template<typename X> struct IHostName_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IHostName_adaptor::CanonicalName)->_get_CanonicalName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CanonicalName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IHostName_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			ptr<Connectivity::IPInformation> get() { Connectivity::IPInformation* value; hrcheck(enc(&IHostName_adaptor::IPInformation)->_get_IPInformation(&value)); return from_abi(value); }
			ptr<Connectivity::IPInformation> operator()() { return get(); }
			operator ptr<Connectivity::IPInformation> () { return get(); }
			ptr<Connectivity::IPInformation> operator->() { return get(); }
		} IPInformation;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IHostName_adaptor::RawName)->_get_RawName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RawName;
		struct : property {
			HostNameType get() { HostNameType value; hrcheck(enc(&IHostName_adaptor::Type)->_get_Type(&value)); return value; }
			HostNameType operator()() { return get(); }
			operator HostNameType () { return get(); }
		} Type;
	};
	bool IsEqual(pptr<HostName> hostName) { bool isEqual; hrcheck(X::get()->_IsEqual(hostName, &isEqual)); return isEqual; }
	IHostName_adaptor() {}
};
template<typename X> struct adapt<IHostName, X> : Windows::Networking::IHostName_adaptor<X> { typedef adapt IHostName; };
struct IHostName : IHostName_raw, generate<IHostName> {};

// IHostNameFactory
struct IHostNameFactory : IInspectable {
	virtual STDMETHODIMP _CreateHostName(HSTRING hostName, HostName* *value);
};

// HostName
template<typename> struct HostName_statics {
	static int Compare(hstring_ref value1, hstring_ref value2) { int result; hrcheck(get_activation_factory<HostName, IHostNameStatics>()->_Compare(value1, value2, &result)); return result; }
	static HostName *activate(hstring_ref hostName) { HostName *value; hrcheck(get_activation_factory<HostName, IHostNameFactory>()->_CreateHostName(hostName, &value)); return value; }
};

template<typename X> struct statics<HostName, X> : X, Windows::Networking::HostName_statics<void> {
	using Windows::Networking::HostName_statics<void>::activate;
	typedef typename X::root_type HostName;
};
struct HostName : generate<HostName> {};

// IEndpointPair
struct IEndpointPair_raw : IInspectable {
	virtual STDMETHODIMP _get_LocalHostName(HostName* *value);
	virtual STDMETHODIMP _put_LocalHostName(HostName* value);
	virtual STDMETHODIMP _get_LocalServiceName(HSTRING *value);
	virtual STDMETHODIMP _put_LocalServiceName(HSTRING value);
	virtual STDMETHODIMP _get_RemoteHostName(HostName* *value);
	virtual STDMETHODIMP _put_RemoteHostName(HostName* value);
	virtual STDMETHODIMP _get_RemoteServiceName(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteServiceName(HSTRING value);
};
template<typename X> struct IEndpointPair_adaptor : X {
	union {
		struct : property {
			ptr<HostName> get() { HostName* value; hrcheck(enc(&IEndpointPair_adaptor::LocalHostName)->_get_LocalHostName(&value)); return from_abi(value); }
			ptr<HostName> operator()() { return get(); }
			operator ptr<HostName> () { return get(); }
			ptr<HostName> operator->() { return get(); }
			void put(pptr<HostName> value) { hrcheck(enc(&IEndpointPair_adaptor::LocalHostName)->_put_LocalHostName(value)); }
			void operator=(pptr<HostName> value) { put(value); }
			void operator()(pptr<HostName> value) { put(value); }
		} LocalHostName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEndpointPair_adaptor::LocalServiceName)->_get_LocalServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEndpointPair_adaptor::LocalServiceName)->_put_LocalServiceName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} LocalServiceName;
		struct : property {
			ptr<HostName> get() { HostName* value; hrcheck(enc(&IEndpointPair_adaptor::RemoteHostName)->_get_RemoteHostName(&value)); return from_abi(value); }
			ptr<HostName> operator()() { return get(); }
			operator ptr<HostName> () { return get(); }
			ptr<HostName> operator->() { return get(); }
			void put(pptr<HostName> value) { hrcheck(enc(&IEndpointPair_adaptor::RemoteHostName)->_put_RemoteHostName(value)); }
			void operator=(pptr<HostName> value) { put(value); }
			void operator()(pptr<HostName> value) { put(value); }
		} RemoteHostName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEndpointPair_adaptor::RemoteServiceName)->_get_RemoteServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IEndpointPair_adaptor::RemoteServiceName)->_put_RemoteServiceName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteServiceName;
	};
	IEndpointPair_adaptor() {}
};
template<typename X> struct adapt<IEndpointPair, X> : Windows::Networking::IEndpointPair_adaptor<X> { typedef adapt IEndpointPair; };
struct IEndpointPair : IEndpointPair_raw, generate<IEndpointPair> {};

// IEndpointPairFactory
struct IEndpointPairFactory : IInspectable {
	virtual STDMETHODIMP _CreateEndpointPair(HostName* localHostName, HSTRING localServiceName, HostName* remoteHostName, HSTRING remoteServiceName, EndpointPair* *value);
};

// EndpointPair
template<typename> struct EndpointPair_statics {
	static EndpointPair *activate(pptr<HostName> localHostName, hstring_ref localServiceName, pptr<HostName> remoteHostName, hstring_ref remoteServiceName) { EndpointPair *value; hrcheck(get_activation_factory<EndpointPair, IEndpointPairFactory>()->_CreateEndpointPair(localHostName, localServiceName, remoteHostName, remoteServiceName, &value)); return value; }
};

template<typename X> struct statics<EndpointPair, X> : X, Windows::Networking::EndpointPair_statics<void> {
	using Windows::Networking::EndpointPair_statics<void>::activate;
	typedef typename X::root_type EndpointPair;
};
struct EndpointPair : generate<EndpointPair> {};
}}
} // namespace iso_winrt
