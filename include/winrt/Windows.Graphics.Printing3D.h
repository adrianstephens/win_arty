#pragma once
// generated by isopod tools
// namespaces:
// Windows.Graphics.Printing3D

#include "Windows.Graphics.Printing3D.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
struct IPropertySet;
template<typename T> struct IVector;
template<typename K, typename V> struct IMap;
}}
namespace Storage { namespace Streams {
struct IBuffer;
struct IRandomAccessStream;
struct IRandomAccessStreamWithContentType;
}}}

// defs

template<> struct def<Windows::Graphics::Printing3D::Print3DTaskDetail> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTaskCompletion> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DTaskCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrint3DTaskCompletedEventArgs> {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DTaskSourceChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrint3DTaskSourceChangedEventArgs> {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DTask> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTask> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrint3DTask> {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DTaskSourceRequestedArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrint3DTaskSourceRequestedArgs> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTaskSourceRequestedHandler> : delegate_type {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DTaskRequest> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTaskRequest> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrint3DTaskRequest> {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DTaskRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrint3DTaskRequestedEventArgs> {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DManagerStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrint3DManager> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Print3DManager> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrint3DManager> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DContract> : value_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DBufferFormat> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DBufferDescription> : value_type<Windows::Graphics::Printing3D::Printing3DBufferFormat, unsigned> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DMeshVerificationMode> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DModelUnit> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DObjectType> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DPackageCompression> : enum_type<int> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DMesh> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DMeshVerificationResult> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DMeshVerificationResult> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DMeshVerificationResult> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DModelTexture> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DTextureResource> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DTextureResource> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DTextureResource> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DComponentWithMatrix> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DComponent> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DComponent> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DComponent> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DMesh> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DMesh> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DComponentWithMatrix> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DComponentWithMatrix> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DBaseMaterialStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DBaseMaterial> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DColorMaterial2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DColorMaterial> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DColorMaterial> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DColorMaterial, Windows::Graphics::Printing3D::IPrinting3DColorMaterial2> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterial> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DModelTexture> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DModelTexture> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterial> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterial> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DBaseMaterialGroupFactory> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DBaseMaterialGroup> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DBaseMaterialGroup>, custom_activators {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DBaseMaterial> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DBaseMaterial> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DColorMaterialGroupFactory> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DColorMaterialGroup> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DColorMaterialGroup> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DColorMaterialGroup>, custom_activators {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroupFactory> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup, Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup2>, custom_activators {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterial> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroupFactory> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup, Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup2>, custom_activators {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DCompositeMaterial> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DCompositeMaterial> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterialGroupFactory> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterialGroup> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterialGroup>, custom_activators {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterial> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DMaterial> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DModel> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DMaterial> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DMaterial> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DModel2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DModel> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DModel, Windows::Graphics::Printing3D::IPrinting3DModel2> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3DFaceReductionOptions> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3DFaceReductionOptions> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3DFaceReductionOptions> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3D3MFPackageStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3D3MFPackage2> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::IPrinting3D3MFPackage> : interface_type<> {};
template<> struct def<Windows::Graphics::Printing3D::Printing3D3MFPackage> : class_type<Platform::Object, Windows::Graphics::Printing3D::IPrinting3D3MFPackage, Windows::Graphics::Printing3D::IPrinting3D3MFPackage2> {};

// uuids

template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DTaskCompletedEventArgs> { define_guid(0xCC1914AF, 0x2614, 0x4F1D, 0xAC, 0xCC, 0xD6, 0xFC, 0x4F, 0xDA, 0x54, 0x55);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DTaskSourceChangedEventArgs> { define_guid(0x5BCD34AF, 0x24E9, 0x4C10, 0x8D, 0x7, 0x14, 0xC3, 0x46, 0xBA, 0x3F, 0xCF);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DTask> { define_guid(0x8CE3D080, 0x2118, 0x4C28, 0x80, 0xDE, 0xF4, 0x26, 0xD7, 0x1, 0x91, 0xAE);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DTaskSourceRequestedArgs> { define_guid(0xC77C9ABA, 0x24AF, 0x424D, 0xA3, 0xBF, 0x92, 0x25, 0xC, 0x35, 0x56, 0x2);};
template<> struct uuid<Windows::Graphics::Printing3D::Print3DTaskSourceRequestedHandler> { define_guid(0xE9175E70, 0xC917, 0x46DE, 0xBB, 0x51, 0xD9, 0xA9, 0x4D, 0xB3, 0x71, 0x1F);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DTaskRequest> { define_guid(0x2595C46F, 0x2245, 0x4C5A, 0x87, 0x31, 0xD, 0x60, 0x4D, 0xC6, 0xBC, 0x3C);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DTaskRequestedEventArgs> { define_guid(0x150CB77F, 0x18C5, 0x40D7, 0x9F, 0x40, 0xFA, 0xB3, 0x9, 0x6E, 0x5, 0xA9);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DManagerStatics> { define_guid(0xEF1CAFE, 0xA9AD, 0x4C08, 0xA9, 0x17, 0x1D, 0x1F, 0x86, 0x3E, 0xAB, 0xCB);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrint3DManager> { define_guid(0x4D2FCB0A, 0x7366, 0x4971, 0x8B, 0xD5, 0x17, 0xC4, 0xE3, 0xE8, 0xC6, 0xC0);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DMesh> { define_guid(0x192E90DC, 0x228, 0x2E01, 0xBC, 0x20, 0xC5, 0x29, 0xC, 0xBF, 0x32, 0xC4);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DMeshVerificationResult> { define_guid(0x195671BA, 0xE93A, 0x4E8A, 0xA4, 0x6F, 0xDE, 0xA8, 0xE8, 0x52, 0x19, 0x7E);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DModelTexture> { define_guid(0x5DAFCF01, 0xB59D, 0x483C, 0x97, 0xBB, 0xA4, 0xD5, 0x46, 0xD1, 0xC7, 0x5C);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DTextureResource> { define_guid(0xA70DF32D, 0x6AB1, 0x44AE, 0xBC, 0x45, 0xA2, 0x73, 0x82, 0xC0, 0xD3, 0x8C);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DComponentWithMatrix> { define_guid(0x3279F335, 0xEF0, 0x456B, 0x9A, 0x21, 0x49, 0xBE, 0xBE, 0x8B, 0x51, 0xC2);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DComponent> { define_guid(0x7E287845, 0xBF7F, 0x4CDB, 0xA2, 0x7F, 0x30, 0xA0, 0x14, 0x37, 0xFE, 0xDE);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DBaseMaterialStatics> { define_guid(0x815A47BC, 0x374A, 0x476D, 0xBE, 0x92, 0x3E, 0xCF, 0xD1, 0xCB, 0x97, 0x76);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DBaseMaterial> { define_guid(0xD0F0E743, 0xC50C, 0x4BCB, 0x9D, 0x4, 0xFC, 0x16, 0xAD, 0xCE, 0xA2, 0xC9);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DColorMaterial2> { define_guid(0xFAB0E852, 0xAEF, 0x44E9, 0x9D, 0xDD, 0x36, 0xEE, 0xEA, 0x5A, 0xCD, 0x44);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DColorMaterial> { define_guid(0xE1899928, 0x7CE7, 0x4285, 0xA3, 0x5D, 0xF1, 0x45, 0xC9, 0x51, 0xC, 0x7B);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterial> { define_guid(0x8D844BFB, 0x7E9, 0x4986, 0x98, 0x33, 0x8D, 0xD3, 0xD4, 0x8C, 0x68, 0x59);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterial> { define_guid(0x462238DD, 0x562E, 0x4F6C, 0x88, 0x2D, 0xF4, 0xD8, 0x41, 0xFD, 0x63, 0xC7);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterial> { define_guid(0x25A6254B, 0xC6E9, 0x484D, 0xA2, 0x14, 0xA2, 0x5E, 0x57, 0x76, 0xBA, 0x62);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DBaseMaterialGroupFactory> { define_guid(0x5C1546DC, 0x8697, 0x4193, 0x97, 0x6B, 0x84, 0xBB, 0x41, 0x16, 0xE5, 0xBF);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DBaseMaterialGroup> { define_guid(0x94F070B8, 0x2515, 0x4A8D, 0xA1, 0xF0, 0xD0, 0xFC, 0x13, 0xD0, 0x60, 0x21);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DColorMaterialGroupFactory> { define_guid(0x71D38D6D, 0xB1EA, 0x4A5B, 0xBC, 0x54, 0x19, 0xC6, 0x5F, 0x3D, 0xF0, 0x44);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DColorMaterialGroup> { define_guid(0x1A6BD0, 0xAADF, 0x4226, 0xAF, 0xE9, 0xF3, 0x69, 0xA0, 0xB4, 0x50, 0x4);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroupFactory> { define_guid(0xCBB049B0, 0x468A, 0x4C6F, 0xB2, 0xA2, 0x8E, 0xB8, 0xBA, 0x8D, 0xEA, 0x48);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup2> { define_guid(0x69FBDBBA, 0xB12E, 0x429B, 0x83, 0x86, 0xDF, 0x52, 0x84, 0xF6, 0xE8, 0xF);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup> { define_guid(0x627D7CA7, 0x6D90, 0x4FB9, 0x9F, 0xC4, 0x9F, 0xEF, 0xF3, 0xDF, 0xA8, 0x92);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroupFactory> { define_guid(0xD08ECD13, 0x92FF, 0x43AA, 0xA6, 0x27, 0x8D, 0x43, 0xC2, 0x2C, 0x81, 0x7E);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup2> { define_guid(0x6E86D62, 0x7D3B, 0x41E1, 0x94, 0x4C, 0xBA, 0xFD, 0xE4, 0x55, 0x54, 0x83);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup> { define_guid(0x8D946A5B, 0x40F1, 0x496D, 0xA5, 0xFB, 0x34, 0xA, 0x5A, 0x67, 0x8E, 0x30);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterialGroupFactory> { define_guid(0x323E196E, 0xD4C6, 0x451E, 0xA8, 0x14, 0x4D, 0x78, 0xA2, 0x10, 0xFE, 0x53);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterialGroup> { define_guid(0xF0950519, 0xAEB9, 0x4515, 0xA3, 0x9B, 0xA0, 0x88, 0xFB, 0xBB, 0x27, 0x7C);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DMaterial> { define_guid(0x378DB256, 0xED62, 0x4952, 0xB8, 0x5B, 0x3, 0x56, 0x7D, 0x7C, 0x46, 0x5E);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DModel> { define_guid(0x2D012EF0, 0x52FB, 0x919A, 0x77, 0xB0, 0x4B, 0x1A, 0x3B, 0x80, 0x32, 0x4F);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DModel2> { define_guid(0xC92069C7, 0xC841, 0x47F3, 0xA8, 0x4E, 0xA1, 0x49, 0xFD, 0x8, 0xB6, 0x57);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3DFaceReductionOptions> { define_guid(0xBBFED397, 0x2D74, 0x46F7, 0xBE, 0x85, 0x99, 0xA6, 0x7B, 0xBB, 0x66, 0x29);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3D3MFPackageStatics> { define_guid(0x7058D9AF, 0x7A9A, 0x4787, 0xB8, 0x17, 0xF6, 0xF4, 0x59, 0x21, 0x48, 0x23);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3D3MFPackage2> { define_guid(0x965C7AC4, 0x93CB, 0x4430, 0x92, 0xB8, 0x78, 0x9C, 0xD4, 0x54, 0xF8, 0x83);};
template<> struct uuid<Windows::Graphics::Printing3D::IPrinting3D3MFPackage> { define_guid(0xF64DD5C8, 0x2AB7, 0x45A9, 0xA1, 0xB7, 0x26, 0x7E, 0x94, 0x8D, 0x5B, 0x18);};

// types

namespace Windows { namespace Graphics { namespace Printing3D {

// IPrint3DTaskCompletedEventArgs
struct IPrint3DTaskCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Completion(Print3DTaskCompletion *value);
	virtual STDMETHODIMP _get_ExtendedStatus(Print3DTaskDetail *value);
};
template<typename X> struct IPrint3DTaskCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			Print3DTaskCompletion get() { Print3DTaskCompletion value; hrcheck(enc(&IPrint3DTaskCompletedEventArgs_adaptor::Completion)->_get_Completion(&value)); return value; }
			Print3DTaskCompletion operator()() { return get(); }
			operator Print3DTaskCompletion () { return get(); }
		} Completion;
		struct : property {
			Print3DTaskDetail get() { Print3DTaskDetail value; hrcheck(enc(&IPrint3DTaskCompletedEventArgs_adaptor::ExtendedStatus)->_get_ExtendedStatus(&value)); return value; }
			Print3DTaskDetail operator()() { return get(); }
			operator Print3DTaskDetail () { return get(); }
		} ExtendedStatus;
	};
	IPrint3DTaskCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrint3DTaskCompletedEventArgs, X> : Windows::Graphics::Printing3D::IPrint3DTaskCompletedEventArgs_adaptor<X> { typedef adapt IPrint3DTaskCompletedEventArgs; };
struct IPrint3DTaskCompletedEventArgs : IPrint3DTaskCompletedEventArgs_raw, generate<IPrint3DTaskCompletedEventArgs> {};

// Print3DTaskCompletedEventArgs
template<typename X> struct statics<Print3DTaskCompletedEventArgs, X> : X {
	typedef typename X::root_type Print3DTaskCompletedEventArgs;
};
struct Print3DTaskCompletedEventArgs : generate<Print3DTaskCompletedEventArgs> {};

// IPrint3DTaskSourceChangedEventArgs
struct IPrint3DTaskSourceChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Source(Printing3D3MFPackage* *value);
};
template<typename X> struct IPrint3DTaskSourceChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Printing3D3MFPackage> get() { Printing3D3MFPackage* value; hrcheck(enc(&IPrint3DTaskSourceChangedEventArgs_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<Printing3D3MFPackage> operator()() { return get(); }
			operator ptr<Printing3D3MFPackage> () { return get(); }
			ptr<Printing3D3MFPackage> operator->() { return get(); }
		} Source;
	};
	IPrint3DTaskSourceChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrint3DTaskSourceChangedEventArgs, X> : Windows::Graphics::Printing3D::IPrint3DTaskSourceChangedEventArgs_adaptor<X> { typedef adapt IPrint3DTaskSourceChangedEventArgs; };
struct IPrint3DTaskSourceChangedEventArgs : IPrint3DTaskSourceChangedEventArgs_raw, generate<IPrint3DTaskSourceChangedEventArgs> {};

// Print3DTaskSourceChangedEventArgs
template<typename X> struct statics<Print3DTaskSourceChangedEventArgs, X> : X {
	typedef typename X::root_type Print3DTaskSourceChangedEventArgs;
};
struct Print3DTaskSourceChangedEventArgs : generate<Print3DTaskSourceChangedEventArgs> {};

// IPrint3DTask
struct IPrint3DTask_raw : IInspectable {
	virtual STDMETHODIMP _get_Source(Printing3D3MFPackage* *value);
	virtual STDMETHODIMP _add_Submitting(Foundation::TypedEventHandler<Print3DTask*, IInspectable*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Submitting(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_Completed(Foundation::TypedEventHandler<Print3DTask*, Print3DTaskCompletedEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Completed(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_SourceChanged(Foundation::TypedEventHandler<Print3DTask*, Print3DTaskSourceChangedEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_SourceChanged(Foundation::EventRegistrationToken eventCookie);
};
template<typename X> struct IPrint3DTask_adaptor : X {
	union {
		struct : property {
			ptr<Printing3D3MFPackage> get() { Printing3D3MFPackage* value; hrcheck(enc(&IPrint3DTask_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<Printing3D3MFPackage> operator()() { return get(); }
			operator ptr<Printing3D3MFPackage> () { return get(); }
			ptr<Printing3D3MFPackage> operator->() { return get(); }
		} Source;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Print3DTask>, ptr<Print3DTaskCompletedEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrint3DTask_adaptor::Completed)->_add_Completed(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrint3DTask_adaptor::Completed)->_remove_Completed(eventCookie)); }
		} Completed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Print3DTask>, ptr<Print3DTaskSourceChangedEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrint3DTask_adaptor::SourceChanged)->_add_SourceChanged(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrint3DTask_adaptor::SourceChanged)->_remove_SourceChanged(eventCookie)); }
		} SourceChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Print3DTask>, object>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IPrint3DTask_adaptor::Submitting)->_add_Submitting(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IPrint3DTask_adaptor::Submitting)->_remove_Submitting(eventCookie)); }
		} Submitting;
	};
	IPrint3DTask_adaptor() {}
};
template<typename X> struct adapt<IPrint3DTask, X> : Windows::Graphics::Printing3D::IPrint3DTask_adaptor<X> { typedef adapt IPrint3DTask; };
struct IPrint3DTask : IPrint3DTask_raw, generate<IPrint3DTask> {};

// Print3DTask
template<typename X> struct statics<Print3DTask, X> : X {
	typedef typename X::root_type Print3DTask;
};
struct Print3DTask : generate<Print3DTask> {};

// IPrint3DTaskSourceRequestedArgs
struct IPrint3DTaskSourceRequestedArgs_raw : IInspectable {
	virtual STDMETHODIMP _SetSource(Printing3D3MFPackage* source);
};
template<typename X> struct IPrint3DTaskSourceRequestedArgs_adaptor : X {
	void SetSource(pptr<Printing3D3MFPackage> source) { hrcheck(X::get()->_SetSource(source)); }
};
template<typename X> struct adapt<IPrint3DTaskSourceRequestedArgs, X> : Windows::Graphics::Printing3D::IPrint3DTaskSourceRequestedArgs_adaptor<X> { typedef adapt IPrint3DTaskSourceRequestedArgs; };
struct IPrint3DTaskSourceRequestedArgs : IPrint3DTaskSourceRequestedArgs_raw, generate<IPrint3DTaskSourceRequestedArgs> {};

// Print3DTaskSourceRequestedArgs
template<typename X> struct statics<Print3DTaskSourceRequestedArgs, X> : X {
	typedef typename X::root_type Print3DTaskSourceRequestedArgs;
};
struct Print3DTaskSourceRequestedArgs : generate<Print3DTaskSourceRequestedArgs> {};

// Print3DTaskSourceRequestedHandler
struct Print3DTaskSourceRequestedHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(Print3DTaskSourceRequestedArgs* args) = 0;
};

// IPrint3DTaskRequest
struct IPrint3DTaskRequest_raw : IInspectable {
	virtual STDMETHODIMP _CreateTask(HSTRING title, HSTRING printerId, Print3DTaskSourceRequestedHandler* handler, Print3DTask* *result);
};
template<typename X> struct IPrint3DTaskRequest_adaptor : X {
	ptr<Print3DTask> CreateTask(hstring_ref title, hstring_ref printerId, handler_ref<Print3DTaskSourceRequestedHandler> handler) { Print3DTask* result; hrcheck(X::get()->_CreateTask(title, printerId, handler, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPrint3DTaskRequest, X> : Windows::Graphics::Printing3D::IPrint3DTaskRequest_adaptor<X> { typedef adapt IPrint3DTaskRequest; };
struct IPrint3DTaskRequest : IPrint3DTaskRequest_raw, generate<IPrint3DTaskRequest> {};

// Print3DTaskRequest
template<typename X> struct statics<Print3DTaskRequest, X> : X {
	typedef typename X::root_type Print3DTaskRequest;
};
struct Print3DTaskRequest : generate<Print3DTaskRequest> {};

// IPrint3DTaskRequestedEventArgs
struct IPrint3DTaskRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(Print3DTaskRequest* *value);
};
template<typename X> struct IPrint3DTaskRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Print3DTaskRequest> get() { Print3DTaskRequest* value; hrcheck(enc(&IPrint3DTaskRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<Print3DTaskRequest> operator()() { return get(); }
			operator ptr<Print3DTaskRequest> () { return get(); }
			ptr<Print3DTaskRequest> operator->() { return get(); }
		} Request;
	};
	IPrint3DTaskRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrint3DTaskRequestedEventArgs, X> : Windows::Graphics::Printing3D::IPrint3DTaskRequestedEventArgs_adaptor<X> { typedef adapt IPrint3DTaskRequestedEventArgs; };
struct IPrint3DTaskRequestedEventArgs : IPrint3DTaskRequestedEventArgs_raw, generate<IPrint3DTaskRequestedEventArgs> {};

// Print3DTaskRequestedEventArgs
template<typename X> struct statics<Print3DTaskRequestedEventArgs, X> : X {
	typedef typename X::root_type Print3DTaskRequestedEventArgs;
};
struct Print3DTaskRequestedEventArgs : generate<Print3DTaskRequestedEventArgs> {};

// IPrint3DManagerStatics
struct IPrint3DManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(Print3DManager* *result);
	virtual STDMETHODIMP _ShowPrintUIAsync(Foundation::IAsyncOperation<bool>* *result);
};

// IPrint3DManager
struct IPrint3DManager_raw : IInspectable {
	virtual STDMETHODIMP _add_TaskRequested(Foundation::TypedEventHandler<Print3DManager*, Print3DTaskRequestedEventArgs*>* eventHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TaskRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IPrint3DManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Print3DManager>, ptr<Print3DTaskRequestedEventArgs>>> eventHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPrint3DManager_adaptor::TaskRequested)->_add_TaskRequested(to_abi(eventHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPrint3DManager_adaptor::TaskRequested)->_remove_TaskRequested(token)); }
		} TaskRequested;
	};
	IPrint3DManager_adaptor() {}
};
template<typename X> struct adapt<IPrint3DManager, X> : Windows::Graphics::Printing3D::IPrint3DManager_adaptor<X> { typedef adapt IPrint3DManager; };
struct IPrint3DManager : IPrint3DManager_raw, generate<IPrint3DManager> {};

// Print3DManager
template<typename> struct Print3DManager_statics {
	static ptr<Print3DManager> GetForCurrentView() { Print3DManager* result; hrcheck(get_activation_factory<Print3DManager, IPrint3DManagerStatics>()->_GetForCurrentView(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<bool>> ShowPrintUIAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(get_activation_factory<Print3DManager, IPrint3DManagerStatics>()->_ShowPrintUIAsync(&result)); return from_abi(result); }
};

template<typename X> struct statics<Print3DManager, X> : X, Windows::Graphics::Printing3D::Print3DManager_statics<void> {
	typedef typename X::root_type Print3DManager;
};
struct Print3DManager : generate<Print3DManager> {};

// IPrinting3DMesh
struct IPrinting3DMesh_raw : IInspectable {
	virtual STDMETHODIMP _get_VertexCount(unsigned *value);
	virtual STDMETHODIMP _put_VertexCount(unsigned value);
	virtual STDMETHODIMP _get_IndexCount(unsigned *value);
	virtual STDMETHODIMP _put_IndexCount(unsigned value);
	virtual STDMETHODIMP _get_VertexPositionsDescription(Printing3DBufferDescription *value);
	virtual STDMETHODIMP _put_VertexPositionsDescription(Printing3DBufferDescription value);
	virtual STDMETHODIMP _get_VertexNormalsDescription(Printing3DBufferDescription *value);
	virtual STDMETHODIMP _put_VertexNormalsDescription(Printing3DBufferDescription value);
	virtual STDMETHODIMP _get_TriangleIndicesDescription(Printing3DBufferDescription *value);
	virtual STDMETHODIMP _put_TriangleIndicesDescription(Printing3DBufferDescription value);
	virtual STDMETHODIMP _get_TriangleMaterialIndicesDescription(Printing3DBufferDescription *value);
	virtual STDMETHODIMP _put_TriangleMaterialIndicesDescription(Printing3DBufferDescription value);
	virtual STDMETHODIMP _GetVertexPositions(Storage::Streams::IBuffer* *buffer);
	virtual STDMETHODIMP _CreateVertexPositions(unsigned value);
	virtual STDMETHODIMP _GetVertexNormals(Storage::Streams::IBuffer* *buffer);
	virtual STDMETHODIMP _CreateVertexNormals(unsigned value);
	virtual STDMETHODIMP _GetTriangleIndices(Storage::Streams::IBuffer* *buffer);
	virtual STDMETHODIMP _CreateTriangleIndices(unsigned value);
	virtual STDMETHODIMP _GetTriangleMaterialIndices(Storage::Streams::IBuffer* *buffer);
	virtual STDMETHODIMP _CreateTriangleMaterialIndices(unsigned value);
	virtual STDMETHODIMP _get_BufferDescriptionSet(Foundation::Collections::IPropertySet* *value);
	virtual STDMETHODIMP _get_BufferSet(Foundation::Collections::IPropertySet* *value);
	virtual STDMETHODIMP _VerifyAsync(Printing3DMeshVerificationMode value, Foundation::IAsyncOperation<Printing3DMeshVerificationResult*>* *operation);
};
template<typename X> struct IPrinting3DMesh_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(enc(&IPrinting3DMesh_adaptor::BufferDescriptionSet)->_get_BufferDescriptionSet(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
			operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
			ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
		} BufferDescriptionSet;
		struct : property {
			ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(enc(&IPrinting3DMesh_adaptor::BufferSet)->_get_BufferSet(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
			operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
			ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
		} BufferSet;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DMesh_adaptor::IndexCount)->_get_IndexCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPrinting3DMesh_adaptor::IndexCount)->_put_IndexCount(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} IndexCount;
		struct : property {
			Printing3DBufferDescription get() { Printing3DBufferDescription value; hrcheck(enc(&IPrinting3DMesh_adaptor::TriangleIndicesDescription)->_get_TriangleIndicesDescription(&value)); return value; }
			Printing3DBufferDescription operator()() { return get(); }
			operator Printing3DBufferDescription () { return get(); }
			void put(const Printing3DBufferDescription& value) { hrcheck(enc(&IPrinting3DMesh_adaptor::TriangleIndicesDescription)->_put_TriangleIndicesDescription(value)); }
			void operator=(const Printing3DBufferDescription& value) { put(value); }
			void operator()(const Printing3DBufferDescription& value) { put(value); }
		} TriangleIndicesDescription;
		struct : property {
			Printing3DBufferDescription get() { Printing3DBufferDescription value; hrcheck(enc(&IPrinting3DMesh_adaptor::TriangleMaterialIndicesDescription)->_get_TriangleMaterialIndicesDescription(&value)); return value; }
			Printing3DBufferDescription operator()() { return get(); }
			operator Printing3DBufferDescription () { return get(); }
			void put(const Printing3DBufferDescription& value) { hrcheck(enc(&IPrinting3DMesh_adaptor::TriangleMaterialIndicesDescription)->_put_TriangleMaterialIndicesDescription(value)); }
			void operator=(const Printing3DBufferDescription& value) { put(value); }
			void operator()(const Printing3DBufferDescription& value) { put(value); }
		} TriangleMaterialIndicesDescription;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DMesh_adaptor::VertexCount)->_get_VertexCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPrinting3DMesh_adaptor::VertexCount)->_put_VertexCount(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} VertexCount;
		struct : property {
			Printing3DBufferDescription get() { Printing3DBufferDescription value; hrcheck(enc(&IPrinting3DMesh_adaptor::VertexNormalsDescription)->_get_VertexNormalsDescription(&value)); return value; }
			Printing3DBufferDescription operator()() { return get(); }
			operator Printing3DBufferDescription () { return get(); }
			void put(const Printing3DBufferDescription& value) { hrcheck(enc(&IPrinting3DMesh_adaptor::VertexNormalsDescription)->_put_VertexNormalsDescription(value)); }
			void operator=(const Printing3DBufferDescription& value) { put(value); }
			void operator()(const Printing3DBufferDescription& value) { put(value); }
		} VertexNormalsDescription;
		struct : property {
			Printing3DBufferDescription get() { Printing3DBufferDescription value; hrcheck(enc(&IPrinting3DMesh_adaptor::VertexPositionsDescription)->_get_VertexPositionsDescription(&value)); return value; }
			Printing3DBufferDescription operator()() { return get(); }
			operator Printing3DBufferDescription () { return get(); }
			void put(const Printing3DBufferDescription& value) { hrcheck(enc(&IPrinting3DMesh_adaptor::VertexPositionsDescription)->_put_VertexPositionsDescription(value)); }
			void operator=(const Printing3DBufferDescription& value) { put(value); }
			void operator()(const Printing3DBufferDescription& value) { put(value); }
		} VertexPositionsDescription;
	};
	ptr<Storage::Streams::IBuffer> GetVertexPositions() { Storage::Streams::IBuffer* buffer; hrcheck(X::get()->_GetVertexPositions(&buffer)); return from_abi(buffer); }
	void CreateVertexPositions(unsigned value) { hrcheck(X::get()->_CreateVertexPositions(value)); }
	ptr<Storage::Streams::IBuffer> GetVertexNormals() { Storage::Streams::IBuffer* buffer; hrcheck(X::get()->_GetVertexNormals(&buffer)); return from_abi(buffer); }
	void CreateVertexNormals(unsigned value) { hrcheck(X::get()->_CreateVertexNormals(value)); }
	ptr<Storage::Streams::IBuffer> GetTriangleIndices() { Storage::Streams::IBuffer* buffer; hrcheck(X::get()->_GetTriangleIndices(&buffer)); return from_abi(buffer); }
	void CreateTriangleIndices(unsigned value) { hrcheck(X::get()->_CreateTriangleIndices(value)); }
	ptr<Storage::Streams::IBuffer> GetTriangleMaterialIndices() { Storage::Streams::IBuffer* buffer; hrcheck(X::get()->_GetTriangleMaterialIndices(&buffer)); return from_abi(buffer); }
	void CreateTriangleMaterialIndices(unsigned value) { hrcheck(X::get()->_CreateTriangleMaterialIndices(value)); }
	ptr<Foundation::IAsyncOperation<ptr<Printing3DMeshVerificationResult>>> VerifyAsync(Printing3DMeshVerificationMode value) { Foundation::IAsyncOperation<Printing3DMeshVerificationResult*>* operation; hrcheck(X::get()->_VerifyAsync(value, &operation)); return from_abi(operation); }
	IPrinting3DMesh_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DMesh, X> : Windows::Graphics::Printing3D::IPrinting3DMesh_adaptor<X> { typedef adapt IPrinting3DMesh; };
struct IPrinting3DMesh : IPrinting3DMesh_raw, generate<IPrinting3DMesh> {};

// IPrinting3DMeshVerificationResult
struct IPrinting3DMeshVerificationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_IsValid(bool *value);
	virtual STDMETHODIMP _get_NonmanifoldTriangles(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_ReversedNormalTriangles(Foundation::Collections::IVectorView<unsigned>* *value);
};
template<typename X> struct IPrinting3DMeshVerificationResult_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrinting3DMeshVerificationResult_adaptor::IsValid)->_get_IsValid(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsValid;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(enc(&IPrinting3DMeshVerificationResult_adaptor::NonmanifoldTriangles)->_get_NonmanifoldTriangles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
		} NonmanifoldTriangles;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(enc(&IPrinting3DMeshVerificationResult_adaptor::ReversedNormalTriangles)->_get_ReversedNormalTriangles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
		} ReversedNormalTriangles;
	};
	IPrinting3DMeshVerificationResult_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DMeshVerificationResult, X> : Windows::Graphics::Printing3D::IPrinting3DMeshVerificationResult_adaptor<X> { typedef adapt IPrinting3DMeshVerificationResult; };
struct IPrinting3DMeshVerificationResult : IPrinting3DMeshVerificationResult_raw, generate<IPrinting3DMeshVerificationResult> {};

// Printing3DMeshVerificationResult
template<typename X> struct statics<Printing3DMeshVerificationResult, X> : X {
	typedef typename X::root_type Printing3DMeshVerificationResult;
};
struct Printing3DMeshVerificationResult : generate<Printing3DMeshVerificationResult> {};

// IPrinting3DModelTexture
struct IPrinting3DModelTexture_raw : IInspectable {
	virtual STDMETHODIMP _get_TextureResource(Printing3DTextureResource* *value);
	virtual STDMETHODIMP _put_TextureResource(Printing3DTextureResource* value);
	virtual STDMETHODIMP _get_TileStyleU(Printing3DTextureEdgeBehavior *value);
	virtual STDMETHODIMP _put_TileStyleU(Printing3DTextureEdgeBehavior value);
	virtual STDMETHODIMP _get_TileStyleV(Printing3DTextureEdgeBehavior *value);
	virtual STDMETHODIMP _put_TileStyleV(Printing3DTextureEdgeBehavior value);
};
template<typename X> struct IPrinting3DModelTexture_adaptor : X {
	union {
		struct : property {
			ptr<Printing3DTextureResource> get() { Printing3DTextureResource* value; hrcheck(enc(&IPrinting3DModelTexture_adaptor::TextureResource)->_get_TextureResource(&value)); return from_abi(value); }
			ptr<Printing3DTextureResource> operator()() { return get(); }
			operator ptr<Printing3DTextureResource> () { return get(); }
			ptr<Printing3DTextureResource> operator->() { return get(); }
			void put(pptr<Printing3DTextureResource> value) { hrcheck(enc(&IPrinting3DModelTexture_adaptor::TextureResource)->_put_TextureResource(value)); }
			void operator=(pptr<Printing3DTextureResource> value) { put(value); }
			void operator()(pptr<Printing3DTextureResource> value) { put(value); }
		} TextureResource;
		struct : property {
			Printing3DTextureEdgeBehavior get() { Printing3DTextureEdgeBehavior value; hrcheck(enc(&IPrinting3DModelTexture_adaptor::TileStyleU)->_get_TileStyleU(&value)); return value; }
			Printing3DTextureEdgeBehavior operator()() { return get(); }
			operator Printing3DTextureEdgeBehavior () { return get(); }
			void put(Printing3DTextureEdgeBehavior value) { hrcheck(enc(&IPrinting3DModelTexture_adaptor::TileStyleU)->_put_TileStyleU(value)); }
			void operator=(Printing3DTextureEdgeBehavior value) { put(value); }
			void operator()(Printing3DTextureEdgeBehavior value) { put(value); }
		} TileStyleU;
		struct : property {
			Printing3DTextureEdgeBehavior get() { Printing3DTextureEdgeBehavior value; hrcheck(enc(&IPrinting3DModelTexture_adaptor::TileStyleV)->_get_TileStyleV(&value)); return value; }
			Printing3DTextureEdgeBehavior operator()() { return get(); }
			operator Printing3DTextureEdgeBehavior () { return get(); }
			void put(Printing3DTextureEdgeBehavior value) { hrcheck(enc(&IPrinting3DModelTexture_adaptor::TileStyleV)->_put_TileStyleV(value)); }
			void operator=(Printing3DTextureEdgeBehavior value) { put(value); }
			void operator()(Printing3DTextureEdgeBehavior value) { put(value); }
		} TileStyleV;
	};
	IPrinting3DModelTexture_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DModelTexture, X> : Windows::Graphics::Printing3D::IPrinting3DModelTexture_adaptor<X> { typedef adapt IPrinting3DModelTexture; };
struct IPrinting3DModelTexture : IPrinting3DModelTexture_raw, generate<IPrinting3DModelTexture> {};

// IPrinting3DTextureResource
struct IPrinting3DTextureResource_raw : IInspectable {
	virtual STDMETHODIMP _get_TextureData(Storage::Streams::IRandomAccessStreamWithContentType* *value);
	virtual STDMETHODIMP _put_TextureData(Storage::Streams::IRandomAccessStreamWithContentType* value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
};
template<typename X> struct IPrinting3DTextureResource_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrinting3DTextureResource_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPrinting3DTextureResource_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> get() { Storage::Streams::IRandomAccessStreamWithContentType* value; hrcheck(enc(&IPrinting3DTextureResource_adaptor::TextureData)->_get_TextureData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamWithContentType> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamWithContentType> value) { hrcheck(enc(&IPrinting3DTextureResource_adaptor::TextureData)->_put_TextureData(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamWithContentType> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamWithContentType> value) { put(value); }
		} TextureData;
	};
	IPrinting3DTextureResource_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DTextureResource, X> : Windows::Graphics::Printing3D::IPrinting3DTextureResource_adaptor<X> { typedef adapt IPrinting3DTextureResource; };
struct IPrinting3DTextureResource : IPrinting3DTextureResource_raw, generate<IPrinting3DTextureResource> {};

// Printing3DTextureResource
template<typename X> struct statics<Printing3DTextureResource, X> : X {
	typedef typename X::root_type Printing3DTextureResource;
};
struct Printing3DTextureResource : generate<Printing3DTextureResource> {};

// IPrinting3DComponentWithMatrix
struct IPrinting3DComponentWithMatrix_raw : IInspectable {
	virtual STDMETHODIMP _get_Component(Printing3DComponent* *value);
	virtual STDMETHODIMP _put_Component(Printing3DComponent* value);
	virtual STDMETHODIMP _get_Matrix(Foundation::Numerics::Matrix4x4 *value);
	virtual STDMETHODIMP _put_Matrix(Foundation::Numerics::Matrix4x4 value);
};
template<typename X> struct IPrinting3DComponentWithMatrix_adaptor : X {
	union {
		struct : property {
			ptr<Printing3DComponent> get() { Printing3DComponent* value; hrcheck(enc(&IPrinting3DComponentWithMatrix_adaptor::Component)->_get_Component(&value)); return from_abi(value); }
			ptr<Printing3DComponent> operator()() { return get(); }
			operator ptr<Printing3DComponent> () { return get(); }
			ptr<Printing3DComponent> operator->() { return get(); }
			void put(pptr<Printing3DComponent> value) { hrcheck(enc(&IPrinting3DComponentWithMatrix_adaptor::Component)->_put_Component(value)); }
			void operator=(pptr<Printing3DComponent> value) { put(value); }
			void operator()(pptr<Printing3DComponent> value) { put(value); }
		} Component;
		struct : property {
			Foundation::Numerics::Matrix4x4 get() { Foundation::Numerics::Matrix4x4 value; hrcheck(enc(&IPrinting3DComponentWithMatrix_adaptor::Matrix)->_get_Matrix(&value)); return value; }
			Foundation::Numerics::Matrix4x4 operator()() { return get(); }
			operator Foundation::Numerics::Matrix4x4 () { return get(); }
			void put(const Foundation::Numerics::Matrix4x4& value) { hrcheck(enc(&IPrinting3DComponentWithMatrix_adaptor::Matrix)->_put_Matrix(value)); }
			void operator=(const Foundation::Numerics::Matrix4x4& value) { put(value); }
			void operator()(const Foundation::Numerics::Matrix4x4& value) { put(value); }
		} Matrix;
	};
	IPrinting3DComponentWithMatrix_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DComponentWithMatrix, X> : Windows::Graphics::Printing3D::IPrinting3DComponentWithMatrix_adaptor<X> { typedef adapt IPrinting3DComponentWithMatrix; };
struct IPrinting3DComponentWithMatrix : IPrinting3DComponentWithMatrix_raw, generate<IPrinting3DComponentWithMatrix> {};

// IPrinting3DComponent
struct IPrinting3DComponent_raw : IInspectable {
	virtual STDMETHODIMP _get_Mesh(Printing3DMesh* *value);
	virtual STDMETHODIMP _put_Mesh(Printing3DMesh* value);
	virtual STDMETHODIMP _get_Components(Foundation::Collections::IVector<Printing3DComponentWithMatrix*>* *value);
	virtual STDMETHODIMP _get_Thumbnail(Printing3DTextureResource* *value);
	virtual STDMETHODIMP _put_Thumbnail(Printing3DTextureResource* value);
	virtual STDMETHODIMP _get_Type(Printing3DObjectType *value);
	virtual STDMETHODIMP _put_Type(Printing3DObjectType value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_PartNumber(HSTRING *value);
	virtual STDMETHODIMP _put_PartNumber(HSTRING value);
};
template<typename X> struct IPrinting3DComponent_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DComponentWithMatrix>>> get() { Foundation::Collections::IVector<Printing3DComponentWithMatrix*>* value; hrcheck(enc(&IPrinting3DComponent_adaptor::Components)->_get_Components(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DComponentWithMatrix>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DComponentWithMatrix>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DComponentWithMatrix>>> operator->() { return get(); }
		} Components;
		struct : property {
			ptr<Printing3DMesh> get() { Printing3DMesh* value; hrcheck(enc(&IPrinting3DComponent_adaptor::Mesh)->_get_Mesh(&value)); return from_abi(value); }
			ptr<Printing3DMesh> operator()() { return get(); }
			operator ptr<Printing3DMesh> () { return get(); }
			ptr<Printing3DMesh> operator->() { return get(); }
			void put(pptr<Printing3DMesh> value) { hrcheck(enc(&IPrinting3DComponent_adaptor::Mesh)->_put_Mesh(value)); }
			void operator=(pptr<Printing3DMesh> value) { put(value); }
			void operator()(pptr<Printing3DMesh> value) { put(value); }
		} Mesh;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrinting3DComponent_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPrinting3DComponent_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrinting3DComponent_adaptor::PartNumber)->_get_PartNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPrinting3DComponent_adaptor::PartNumber)->_put_PartNumber(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PartNumber;
		struct : property {
			ptr<Printing3DTextureResource> get() { Printing3DTextureResource* value; hrcheck(enc(&IPrinting3DComponent_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Printing3DTextureResource> operator()() { return get(); }
			operator ptr<Printing3DTextureResource> () { return get(); }
			ptr<Printing3DTextureResource> operator->() { return get(); }
			void put(pptr<Printing3DTextureResource> value) { hrcheck(enc(&IPrinting3DComponent_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<Printing3DTextureResource> value) { put(value); }
			void operator()(pptr<Printing3DTextureResource> value) { put(value); }
		} Thumbnail;
		struct : property {
			Printing3DObjectType get() { Printing3DObjectType value; hrcheck(enc(&IPrinting3DComponent_adaptor::Type)->_get_Type(&value)); return value; }
			Printing3DObjectType operator()() { return get(); }
			operator Printing3DObjectType () { return get(); }
			void put(Printing3DObjectType value) { hrcheck(enc(&IPrinting3DComponent_adaptor::Type)->_put_Type(value)); }
			void operator=(Printing3DObjectType value) { put(value); }
			void operator()(Printing3DObjectType value) { put(value); }
		} Type;
	};
	IPrinting3DComponent_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DComponent, X> : Windows::Graphics::Printing3D::IPrinting3DComponent_adaptor<X> { typedef adapt IPrinting3DComponent; };
struct IPrinting3DComponent : IPrinting3DComponent_raw, generate<IPrinting3DComponent> {};

// Printing3DComponent
template<typename X> struct statics<Printing3DComponent, X> : X {
	typedef typename X::root_type Printing3DComponent;
};
struct Printing3DComponent : generate<Printing3DComponent> {};

// Printing3DMesh
template<typename X> struct statics<Printing3DMesh, X> : X {
	typedef typename X::root_type Printing3DMesh;
};
struct Printing3DMesh : generate<Printing3DMesh> {};

// Printing3DComponentWithMatrix
template<typename X> struct statics<Printing3DComponentWithMatrix, X> : X {
	typedef typename X::root_type Printing3DComponentWithMatrix;
};
struct Printing3DComponentWithMatrix : generate<Printing3DComponentWithMatrix> {};

// IPrinting3DBaseMaterialStatics
struct IPrinting3DBaseMaterialStatics : IInspectable {
	virtual STDMETHODIMP _get_Abs(HSTRING *value);
	virtual STDMETHODIMP _get_Pla(HSTRING *value);
};

// IPrinting3DBaseMaterial
struct IPrinting3DBaseMaterial_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Color(Printing3DColorMaterial* *value);
	virtual STDMETHODIMP _put_Color(Printing3DColorMaterial* value);
};
template<typename X> struct IPrinting3DBaseMaterial_adaptor : X {
	union {
		struct : property {
			ptr<Printing3DColorMaterial> get() { Printing3DColorMaterial* value; hrcheck(enc(&IPrinting3DBaseMaterial_adaptor::Color)->_get_Color(&value)); return from_abi(value); }
			ptr<Printing3DColorMaterial> operator()() { return get(); }
			operator ptr<Printing3DColorMaterial> () { return get(); }
			ptr<Printing3DColorMaterial> operator->() { return get(); }
			void put(pptr<Printing3DColorMaterial> value) { hrcheck(enc(&IPrinting3DBaseMaterial_adaptor::Color)->_put_Color(value)); }
			void operator=(pptr<Printing3DColorMaterial> value) { put(value); }
			void operator()(pptr<Printing3DColorMaterial> value) { put(value); }
		} Color;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrinting3DBaseMaterial_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPrinting3DBaseMaterial_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
	};
	IPrinting3DBaseMaterial_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DBaseMaterial, X> : Windows::Graphics::Printing3D::IPrinting3DBaseMaterial_adaptor<X> { typedef adapt IPrinting3DBaseMaterial; };
struct IPrinting3DBaseMaterial : IPrinting3DBaseMaterial_raw, generate<IPrinting3DBaseMaterial> {};

// IPrinting3DColorMaterial2
struct IPrinting3DColorMaterial2_raw : IInspectable {
	virtual STDMETHODIMP _get_Color(UI::Color *value);
	virtual STDMETHODIMP _put_Color(UI::Color value);
};
template<typename X> struct IPrinting3DColorMaterial2_adaptor : X {
	union {
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IPrinting3DColorMaterial2_adaptor::Color)->_get_Color(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IPrinting3DColorMaterial2_adaptor::Color)->_put_Color(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} Color;
	};
	IPrinting3DColorMaterial2_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DColorMaterial2, X> : Windows::Graphics::Printing3D::IPrinting3DColorMaterial2_adaptor<X> { typedef adapt IPrinting3DColorMaterial2; };
struct IPrinting3DColorMaterial2 : IPrinting3DColorMaterial2_raw, generate<IPrinting3DColorMaterial2> {};

// IPrinting3DColorMaterial
struct IPrinting3DColorMaterial_raw : IInspectable {
	virtual STDMETHODIMP _get_Value(unsigned *value);
	virtual STDMETHODIMP _put_Value(unsigned value);
};
template<typename X> struct IPrinting3DColorMaterial_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DColorMaterial_adaptor::Value)->_get_Value(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPrinting3DColorMaterial_adaptor::Value)->_put_Value(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Value;
	};
	IPrinting3DColorMaterial_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DColorMaterial, X> : Windows::Graphics::Printing3D::IPrinting3DColorMaterial_adaptor<X> { typedef adapt IPrinting3DColorMaterial; };
struct IPrinting3DColorMaterial : IPrinting3DColorMaterial_raw, generate<IPrinting3DColorMaterial> {};

// Printing3DColorMaterial
template<typename X> struct statics<Printing3DColorMaterial, X> : X {
	typedef typename X::root_type Printing3DColorMaterial;
};
struct Printing3DColorMaterial : generate<Printing3DColorMaterial> {};

// IPrinting3DTexture2CoordMaterial
struct IPrinting3DTexture2CoordMaterial_raw : IInspectable {
	virtual STDMETHODIMP _get_Texture(Printing3DModelTexture* *value);
	virtual STDMETHODIMP _put_Texture(Printing3DModelTexture* value);
	virtual STDMETHODIMP _get_U(double *value);
	virtual STDMETHODIMP _put_U(double value);
	virtual STDMETHODIMP _get_V(double *value);
	virtual STDMETHODIMP _put_V(double value);
};
template<typename X> struct IPrinting3DTexture2CoordMaterial_adaptor : X {
	union {
		struct : property {
			ptr<Printing3DModelTexture> get() { Printing3DModelTexture* value; hrcheck(enc(&IPrinting3DTexture2CoordMaterial_adaptor::Texture)->_get_Texture(&value)); return from_abi(value); }
			ptr<Printing3DModelTexture> operator()() { return get(); }
			operator ptr<Printing3DModelTexture> () { return get(); }
			ptr<Printing3DModelTexture> operator->() { return get(); }
			void put(pptr<Printing3DModelTexture> value) { hrcheck(enc(&IPrinting3DTexture2CoordMaterial_adaptor::Texture)->_put_Texture(value)); }
			void operator=(pptr<Printing3DModelTexture> value) { put(value); }
			void operator()(pptr<Printing3DModelTexture> value) { put(value); }
		} Texture;
		struct : property {
			double get() { double value; hrcheck(enc(&IPrinting3DTexture2CoordMaterial_adaptor::U)->_get_U(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IPrinting3DTexture2CoordMaterial_adaptor::U)->_put_U(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} U;
		struct : property {
			double get() { double value; hrcheck(enc(&IPrinting3DTexture2CoordMaterial_adaptor::V)->_get_V(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IPrinting3DTexture2CoordMaterial_adaptor::V)->_put_V(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} V;
	};
	IPrinting3DTexture2CoordMaterial_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DTexture2CoordMaterial, X> : Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterial_adaptor<X> { typedef adapt IPrinting3DTexture2CoordMaterial; };
struct IPrinting3DTexture2CoordMaterial : IPrinting3DTexture2CoordMaterial_raw, generate<IPrinting3DTexture2CoordMaterial> {};

// Printing3DModelTexture
template<typename X> struct statics<Printing3DModelTexture, X> : X {
	typedef typename X::root_type Printing3DModelTexture;
};
struct Printing3DModelTexture : generate<Printing3DModelTexture> {};

// IPrinting3DCompositeMaterial
struct IPrinting3DCompositeMaterial_raw : IInspectable {
	virtual STDMETHODIMP _get_Values(Foundation::Collections::IVector<double>* *value);
};
template<typename X> struct IPrinting3DCompositeMaterial_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<double>> get() { Foundation::Collections::IVector<double>* value; hrcheck(enc(&IPrinting3DCompositeMaterial_adaptor::Values)->_get_Values(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<double>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<double>> () { return get(); }
			ptr<Foundation::Collections::IVector<double>> operator->() { return get(); }
		} Values;
	};
	IPrinting3DCompositeMaterial_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DCompositeMaterial, X> : Windows::Graphics::Printing3D::IPrinting3DCompositeMaterial_adaptor<X> { typedef adapt IPrinting3DCompositeMaterial; };
struct IPrinting3DCompositeMaterial : IPrinting3DCompositeMaterial_raw, generate<IPrinting3DCompositeMaterial> {};

// IPrinting3DMultiplePropertyMaterial
struct IPrinting3DMultiplePropertyMaterial_raw : IInspectable {
	virtual STDMETHODIMP _get_MaterialIndices(Foundation::Collections::IVector<unsigned>* *value);
};
template<typename X> struct IPrinting3DMultiplePropertyMaterial_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<unsigned>> get() { Foundation::Collections::IVector<unsigned>* value; hrcheck(enc(&IPrinting3DMultiplePropertyMaterial_adaptor::MaterialIndices)->_get_MaterialIndices(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVector<unsigned>> operator->() { return get(); }
		} MaterialIndices;
	};
	IPrinting3DMultiplePropertyMaterial_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DMultiplePropertyMaterial, X> : Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterial_adaptor<X> { typedef adapt IPrinting3DMultiplePropertyMaterial; };
struct IPrinting3DMultiplePropertyMaterial : IPrinting3DMultiplePropertyMaterial_raw, generate<IPrinting3DMultiplePropertyMaterial> {};

// IPrinting3DBaseMaterialGroupFactory
struct IPrinting3DBaseMaterialGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned MaterialGroupId, Printing3DBaseMaterialGroup* *result);
};

// IPrinting3DBaseMaterialGroup
struct IPrinting3DBaseMaterialGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_Bases(Foundation::Collections::IVector<Printing3DBaseMaterial*>* *value);
	virtual STDMETHODIMP _get_MaterialGroupId(unsigned *value);
};
template<typename X> struct IPrinting3DBaseMaterialGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterial>>> get() { Foundation::Collections::IVector<Printing3DBaseMaterial*>* value; hrcheck(enc(&IPrinting3DBaseMaterialGroup_adaptor::Bases)->_get_Bases(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterial>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterial>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterial>>> operator->() { return get(); }
		} Bases;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DBaseMaterialGroup_adaptor::MaterialGroupId)->_get_MaterialGroupId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaterialGroupId;
	};
	IPrinting3DBaseMaterialGroup_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DBaseMaterialGroup, X> : Windows::Graphics::Printing3D::IPrinting3DBaseMaterialGroup_adaptor<X> { typedef adapt IPrinting3DBaseMaterialGroup; };
struct IPrinting3DBaseMaterialGroup : IPrinting3DBaseMaterialGroup_raw, generate<IPrinting3DBaseMaterialGroup> {};

// Printing3DBaseMaterialGroup
template<typename> struct Printing3DBaseMaterialGroup_statics {
	static Printing3DBaseMaterialGroup *activate(unsigned MaterialGroupId) { Printing3DBaseMaterialGroup *result; hrcheck(get_activation_factory<Printing3DBaseMaterialGroup, IPrinting3DBaseMaterialGroupFactory>()->_Create(MaterialGroupId, &result)); return result; }
};

template<typename X> struct statics<Printing3DBaseMaterialGroup, X> : X, Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup_statics<void> {
	using Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup_statics<void>::activate;
	typedef typename X::root_type Printing3DBaseMaterialGroup;
};
struct Printing3DBaseMaterialGroup : generate<Printing3DBaseMaterialGroup> {};

// Printing3DBaseMaterial
template<typename> struct Printing3DBaseMaterial_statics {
	static struct _Abs : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<Printing3DBaseMaterial, IPrinting3DBaseMaterialStatics>()->_get_Abs(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Abs;
	static struct _Pla : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<Printing3DBaseMaterial, IPrinting3DBaseMaterialStatics>()->_get_Pla(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Pla;
};
template<typename X> typename Printing3DBaseMaterial_statics<X>::_Abs Printing3DBaseMaterial_statics<X>::Abs;
template<typename X> typename Printing3DBaseMaterial_statics<X>::_Pla Printing3DBaseMaterial_statics<X>::Pla;

template<typename X> struct statics<Printing3DBaseMaterial, X> : X, Windows::Graphics::Printing3D::Printing3DBaseMaterial_statics<void> {
	typedef typename X::root_type Printing3DBaseMaterial;
};
struct Printing3DBaseMaterial : generate<Printing3DBaseMaterial> {};

// IPrinting3DColorMaterialGroupFactory
struct IPrinting3DColorMaterialGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned MaterialGroupId, Printing3DColorMaterialGroup* *result);
};

// IPrinting3DColorMaterialGroup
struct IPrinting3DColorMaterialGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_Colors(Foundation::Collections::IVector<Printing3DColorMaterial*>* *value);
	virtual STDMETHODIMP _get_MaterialGroupId(unsigned *value);
};
template<typename X> struct IPrinting3DColorMaterialGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterial>>> get() { Foundation::Collections::IVector<Printing3DColorMaterial*>* value; hrcheck(enc(&IPrinting3DColorMaterialGroup_adaptor::Colors)->_get_Colors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterial>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterial>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterial>>> operator->() { return get(); }
		} Colors;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DColorMaterialGroup_adaptor::MaterialGroupId)->_get_MaterialGroupId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaterialGroupId;
	};
	IPrinting3DColorMaterialGroup_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DColorMaterialGroup, X> : Windows::Graphics::Printing3D::IPrinting3DColorMaterialGroup_adaptor<X> { typedef adapt IPrinting3DColorMaterialGroup; };
struct IPrinting3DColorMaterialGroup : IPrinting3DColorMaterialGroup_raw, generate<IPrinting3DColorMaterialGroup> {};

// Printing3DColorMaterialGroup
template<typename> struct Printing3DColorMaterialGroup_statics {
	static Printing3DColorMaterialGroup *activate(unsigned MaterialGroupId) { Printing3DColorMaterialGroup *result; hrcheck(get_activation_factory<Printing3DColorMaterialGroup, IPrinting3DColorMaterialGroupFactory>()->_Create(MaterialGroupId, &result)); return result; }
};

template<typename X> struct statics<Printing3DColorMaterialGroup, X> : X, Windows::Graphics::Printing3D::Printing3DColorMaterialGroup_statics<void> {
	using Windows::Graphics::Printing3D::Printing3DColorMaterialGroup_statics<void>::activate;
	typedef typename X::root_type Printing3DColorMaterialGroup;
};
struct Printing3DColorMaterialGroup : generate<Printing3DColorMaterialGroup> {};

// IPrinting3DTexture2CoordMaterialGroupFactory
struct IPrinting3DTexture2CoordMaterialGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned MaterialGroupId, Printing3DTexture2CoordMaterialGroup* *result);
};

// IPrinting3DTexture2CoordMaterialGroup2
struct IPrinting3DTexture2CoordMaterialGroup2_raw : IInspectable {
	virtual STDMETHODIMP _get_Texture(Printing3DModelTexture* *value);
	virtual STDMETHODIMP _put_Texture(Printing3DModelTexture* value);
};
template<typename X> struct IPrinting3DTexture2CoordMaterialGroup2_adaptor : X {
	union {
		struct : property {
			ptr<Printing3DModelTexture> get() { Printing3DModelTexture* value; hrcheck(enc(&IPrinting3DTexture2CoordMaterialGroup2_adaptor::Texture)->_get_Texture(&value)); return from_abi(value); }
			ptr<Printing3DModelTexture> operator()() { return get(); }
			operator ptr<Printing3DModelTexture> () { return get(); }
			ptr<Printing3DModelTexture> operator->() { return get(); }
			void put(pptr<Printing3DModelTexture> value) { hrcheck(enc(&IPrinting3DTexture2CoordMaterialGroup2_adaptor::Texture)->_put_Texture(value)); }
			void operator=(pptr<Printing3DModelTexture> value) { put(value); }
			void operator()(pptr<Printing3DModelTexture> value) { put(value); }
		} Texture;
	};
	IPrinting3DTexture2CoordMaterialGroup2_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DTexture2CoordMaterialGroup2, X> : Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup2_adaptor<X> { typedef adapt IPrinting3DTexture2CoordMaterialGroup2; };
struct IPrinting3DTexture2CoordMaterialGroup2 : IPrinting3DTexture2CoordMaterialGroup2_raw, generate<IPrinting3DTexture2CoordMaterialGroup2> {};

// IPrinting3DTexture2CoordMaterialGroup
struct IPrinting3DTexture2CoordMaterialGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_Texture2Coords(Foundation::Collections::IVector<Printing3DTexture2CoordMaterial*>* *value);
	virtual STDMETHODIMP _get_MaterialGroupId(unsigned *value);
};
template<typename X> struct IPrinting3DTexture2CoordMaterialGroup_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DTexture2CoordMaterialGroup_adaptor::MaterialGroupId)->_get_MaterialGroupId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaterialGroupId;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterial>>> get() { Foundation::Collections::IVector<Printing3DTexture2CoordMaterial*>* value; hrcheck(enc(&IPrinting3DTexture2CoordMaterialGroup_adaptor::Texture2Coords)->_get_Texture2Coords(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterial>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterial>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterial>>> operator->() { return get(); }
		} Texture2Coords;
	};
	IPrinting3DTexture2CoordMaterialGroup_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DTexture2CoordMaterialGroup, X> : Windows::Graphics::Printing3D::IPrinting3DTexture2CoordMaterialGroup_adaptor<X> { typedef adapt IPrinting3DTexture2CoordMaterialGroup; };
struct IPrinting3DTexture2CoordMaterialGroup : IPrinting3DTexture2CoordMaterialGroup_raw, generate<IPrinting3DTexture2CoordMaterialGroup> {};

// Printing3DTexture2CoordMaterialGroup
template<typename> struct Printing3DTexture2CoordMaterialGroup_statics {
	static Printing3DTexture2CoordMaterialGroup *activate(unsigned MaterialGroupId) { Printing3DTexture2CoordMaterialGroup *result; hrcheck(get_activation_factory<Printing3DTexture2CoordMaterialGroup, IPrinting3DTexture2CoordMaterialGroupFactory>()->_Create(MaterialGroupId, &result)); return result; }
};

template<typename X> struct statics<Printing3DTexture2CoordMaterialGroup, X> : X, Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup_statics<void> {
	using Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup_statics<void>::activate;
	typedef typename X::root_type Printing3DTexture2CoordMaterialGroup;
};
struct Printing3DTexture2CoordMaterialGroup : generate<Printing3DTexture2CoordMaterialGroup> {};

// Printing3DTexture2CoordMaterial
template<typename X> struct statics<Printing3DTexture2CoordMaterial, X> : X {
	typedef typename X::root_type Printing3DTexture2CoordMaterial;
};
struct Printing3DTexture2CoordMaterial : generate<Printing3DTexture2CoordMaterial> {};

// IPrinting3DCompositeMaterialGroupFactory
struct IPrinting3DCompositeMaterialGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned MaterialGroupId, Printing3DCompositeMaterialGroup* *result);
};

// IPrinting3DCompositeMaterialGroup2
struct IPrinting3DCompositeMaterialGroup2_raw : IInspectable {
	virtual STDMETHODIMP _get_BaseMaterialGroup(Printing3DBaseMaterialGroup* *value);
	virtual STDMETHODIMP _put_BaseMaterialGroup(Printing3DBaseMaterialGroup* value);
};
template<typename X> struct IPrinting3DCompositeMaterialGroup2_adaptor : X {
	union {
		struct : property {
			ptr<Printing3DBaseMaterialGroup> get() { Printing3DBaseMaterialGroup* value; hrcheck(enc(&IPrinting3DCompositeMaterialGroup2_adaptor::BaseMaterialGroup)->_get_BaseMaterialGroup(&value)); return from_abi(value); }
			ptr<Printing3DBaseMaterialGroup> operator()() { return get(); }
			operator ptr<Printing3DBaseMaterialGroup> () { return get(); }
			ptr<Printing3DBaseMaterialGroup> operator->() { return get(); }
			void put(pptr<Printing3DBaseMaterialGroup> value) { hrcheck(enc(&IPrinting3DCompositeMaterialGroup2_adaptor::BaseMaterialGroup)->_put_BaseMaterialGroup(value)); }
			void operator=(pptr<Printing3DBaseMaterialGroup> value) { put(value); }
			void operator()(pptr<Printing3DBaseMaterialGroup> value) { put(value); }
		} BaseMaterialGroup;
	};
	IPrinting3DCompositeMaterialGroup2_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DCompositeMaterialGroup2, X> : Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup2_adaptor<X> { typedef adapt IPrinting3DCompositeMaterialGroup2; };
struct IPrinting3DCompositeMaterialGroup2 : IPrinting3DCompositeMaterialGroup2_raw, generate<IPrinting3DCompositeMaterialGroup2> {};

// IPrinting3DCompositeMaterialGroup
struct IPrinting3DCompositeMaterialGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_Composites(Foundation::Collections::IVector<Printing3DCompositeMaterial*>* *value);
	virtual STDMETHODIMP _get_MaterialGroupId(unsigned *value);
	virtual STDMETHODIMP _get_MaterialIndices(Foundation::Collections::IVector<unsigned>* *value);
};
template<typename X> struct IPrinting3DCompositeMaterialGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterial>>> get() { Foundation::Collections::IVector<Printing3DCompositeMaterial*>* value; hrcheck(enc(&IPrinting3DCompositeMaterialGroup_adaptor::Composites)->_get_Composites(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterial>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterial>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterial>>> operator->() { return get(); }
		} Composites;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DCompositeMaterialGroup_adaptor::MaterialGroupId)->_get_MaterialGroupId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaterialGroupId;
		struct : property {
			ptr<Foundation::Collections::IVector<unsigned>> get() { Foundation::Collections::IVector<unsigned>* value; hrcheck(enc(&IPrinting3DCompositeMaterialGroup_adaptor::MaterialIndices)->_get_MaterialIndices(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVector<unsigned>> operator->() { return get(); }
		} MaterialIndices;
	};
	IPrinting3DCompositeMaterialGroup_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DCompositeMaterialGroup, X> : Windows::Graphics::Printing3D::IPrinting3DCompositeMaterialGroup_adaptor<X> { typedef adapt IPrinting3DCompositeMaterialGroup; };
struct IPrinting3DCompositeMaterialGroup : IPrinting3DCompositeMaterialGroup_raw, generate<IPrinting3DCompositeMaterialGroup> {};

// Printing3DCompositeMaterialGroup
template<typename> struct Printing3DCompositeMaterialGroup_statics {
	static Printing3DCompositeMaterialGroup *activate(unsigned MaterialGroupId) { Printing3DCompositeMaterialGroup *result; hrcheck(get_activation_factory<Printing3DCompositeMaterialGroup, IPrinting3DCompositeMaterialGroupFactory>()->_Create(MaterialGroupId, &result)); return result; }
};

template<typename X> struct statics<Printing3DCompositeMaterialGroup, X> : X, Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup_statics<void> {
	using Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup_statics<void>::activate;
	typedef typename X::root_type Printing3DCompositeMaterialGroup;
};
struct Printing3DCompositeMaterialGroup : generate<Printing3DCompositeMaterialGroup> {};

// Printing3DCompositeMaterial
template<typename X> struct statics<Printing3DCompositeMaterial, X> : X {
	typedef typename X::root_type Printing3DCompositeMaterial;
};
struct Printing3DCompositeMaterial : generate<Printing3DCompositeMaterial> {};

// IPrinting3DMultiplePropertyMaterialGroupFactory
struct IPrinting3DMultiplePropertyMaterialGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned MaterialGroupId, Printing3DMultiplePropertyMaterialGroup* *result);
};

// IPrinting3DMultiplePropertyMaterialGroup
struct IPrinting3DMultiplePropertyMaterialGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_MultipleProperties(Foundation::Collections::IVector<Printing3DMultiplePropertyMaterial*>* *value);
	virtual STDMETHODIMP _get_MaterialGroupIndices(Foundation::Collections::IVector<unsigned>* *value);
	virtual STDMETHODIMP _get_MaterialGroupId(unsigned *value);
};
template<typename X> struct IPrinting3DMultiplePropertyMaterialGroup_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DMultiplePropertyMaterialGroup_adaptor::MaterialGroupId)->_get_MaterialGroupId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaterialGroupId;
		struct : property {
			ptr<Foundation::Collections::IVector<unsigned>> get() { Foundation::Collections::IVector<unsigned>* value; hrcheck(enc(&IPrinting3DMultiplePropertyMaterialGroup_adaptor::MaterialGroupIndices)->_get_MaterialGroupIndices(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVector<unsigned>> operator->() { return get(); }
		} MaterialGroupIndices;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterial>>> get() { Foundation::Collections::IVector<Printing3DMultiplePropertyMaterial*>* value; hrcheck(enc(&IPrinting3DMultiplePropertyMaterialGroup_adaptor::MultipleProperties)->_get_MultipleProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterial>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterial>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterial>>> operator->() { return get(); }
		} MultipleProperties;
	};
	IPrinting3DMultiplePropertyMaterialGroup_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DMultiplePropertyMaterialGroup, X> : Windows::Graphics::Printing3D::IPrinting3DMultiplePropertyMaterialGroup_adaptor<X> { typedef adapt IPrinting3DMultiplePropertyMaterialGroup; };
struct IPrinting3DMultiplePropertyMaterialGroup : IPrinting3DMultiplePropertyMaterialGroup_raw, generate<IPrinting3DMultiplePropertyMaterialGroup> {};

// Printing3DMultiplePropertyMaterialGroup
template<typename> struct Printing3DMultiplePropertyMaterialGroup_statics {
	static Printing3DMultiplePropertyMaterialGroup *activate(unsigned MaterialGroupId) { Printing3DMultiplePropertyMaterialGroup *result; hrcheck(get_activation_factory<Printing3DMultiplePropertyMaterialGroup, IPrinting3DMultiplePropertyMaterialGroupFactory>()->_Create(MaterialGroupId, &result)); return result; }
};

template<typename X> struct statics<Printing3DMultiplePropertyMaterialGroup, X> : X, Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup_statics<void> {
	using Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup_statics<void>::activate;
	typedef typename X::root_type Printing3DMultiplePropertyMaterialGroup;
};
struct Printing3DMultiplePropertyMaterialGroup : generate<Printing3DMultiplePropertyMaterialGroup> {};

// Printing3DMultiplePropertyMaterial
template<typename X> struct statics<Printing3DMultiplePropertyMaterial, X> : X {
	typedef typename X::root_type Printing3DMultiplePropertyMaterial;
};
struct Printing3DMultiplePropertyMaterial : generate<Printing3DMultiplePropertyMaterial> {};

// IPrinting3DMaterial
struct IPrinting3DMaterial_raw : IInspectable {
	virtual STDMETHODIMP _get_BaseGroups(Foundation::Collections::IVector<Printing3DBaseMaterialGroup*>* *value);
	virtual STDMETHODIMP _get_ColorGroups(Foundation::Collections::IVector<Printing3DColorMaterialGroup*>* *value);
	virtual STDMETHODIMP _get_Texture2CoordGroups(Foundation::Collections::IVector<Printing3DTexture2CoordMaterialGroup*>* *value);
	virtual STDMETHODIMP _get_CompositeGroups(Foundation::Collections::IVector<Printing3DCompositeMaterialGroup*>* *value);
	virtual STDMETHODIMP _get_MultiplePropertyGroups(Foundation::Collections::IVector<Printing3DMultiplePropertyMaterialGroup*>* *value);
};
template<typename X> struct IPrinting3DMaterial_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterialGroup>>> get() { Foundation::Collections::IVector<Printing3DBaseMaterialGroup*>* value; hrcheck(enc(&IPrinting3DMaterial_adaptor::BaseGroups)->_get_BaseGroups(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterialGroup>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterialGroup>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DBaseMaterialGroup>>> operator->() { return get(); }
		} BaseGroups;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterialGroup>>> get() { Foundation::Collections::IVector<Printing3DColorMaterialGroup*>* value; hrcheck(enc(&IPrinting3DMaterial_adaptor::ColorGroups)->_get_ColorGroups(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterialGroup>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterialGroup>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DColorMaterialGroup>>> operator->() { return get(); }
		} ColorGroups;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterialGroup>>> get() { Foundation::Collections::IVector<Printing3DCompositeMaterialGroup*>* value; hrcheck(enc(&IPrinting3DMaterial_adaptor::CompositeGroups)->_get_CompositeGroups(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterialGroup>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterialGroup>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DCompositeMaterialGroup>>> operator->() { return get(); }
		} CompositeGroups;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterialGroup>>> get() { Foundation::Collections::IVector<Printing3DMultiplePropertyMaterialGroup*>* value; hrcheck(enc(&IPrinting3DMaterial_adaptor::MultiplePropertyGroups)->_get_MultiplePropertyGroups(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterialGroup>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterialGroup>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DMultiplePropertyMaterialGroup>>> operator->() { return get(); }
		} MultiplePropertyGroups;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterialGroup>>> get() { Foundation::Collections::IVector<Printing3DTexture2CoordMaterialGroup*>* value; hrcheck(enc(&IPrinting3DMaterial_adaptor::Texture2CoordGroups)->_get_Texture2CoordGroups(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterialGroup>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterialGroup>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DTexture2CoordMaterialGroup>>> operator->() { return get(); }
		} Texture2CoordGroups;
	};
	IPrinting3DMaterial_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DMaterial, X> : Windows::Graphics::Printing3D::IPrinting3DMaterial_adaptor<X> { typedef adapt IPrinting3DMaterial; };
struct IPrinting3DMaterial : IPrinting3DMaterial_raw, generate<IPrinting3DMaterial> {};

// IPrinting3DModel
struct IPrinting3DModel_raw : IInspectable {
	virtual STDMETHODIMP _get_Unit(Printing3DModelUnit *value);
	virtual STDMETHODIMP _put_Unit(Printing3DModelUnit value);
	virtual STDMETHODIMP _get_Textures(Foundation::Collections::IVector<Printing3DModelTexture*>* *value);
	virtual STDMETHODIMP _get_Meshes(Foundation::Collections::IVector<Printing3DMesh*>* *value);
	virtual STDMETHODIMP _get_Components(Foundation::Collections::IVector<Printing3DComponent*>* *value);
	virtual STDMETHODIMP _get_Material(Printing3DMaterial* *value);
	virtual STDMETHODIMP _put_Material(Printing3DMaterial* value);
	virtual STDMETHODIMP _get_Build(Printing3DComponent* *value);
	virtual STDMETHODIMP _put_Build(Printing3DComponent* value);
	virtual STDMETHODIMP _get_Version(HSTRING *value);
	virtual STDMETHODIMP _put_Version(HSTRING value);
	virtual STDMETHODIMP _get_RequiredExtensions(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_Metadata(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _RepairAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _Clone(Printing3DModel* *value);
};
template<typename X> struct IPrinting3DModel_adaptor : X {
	union {
		struct : property {
			ptr<Printing3DComponent> get() { Printing3DComponent* value; hrcheck(enc(&IPrinting3DModel_adaptor::Build)->_get_Build(&value)); return from_abi(value); }
			ptr<Printing3DComponent> operator()() { return get(); }
			operator ptr<Printing3DComponent> () { return get(); }
			ptr<Printing3DComponent> operator->() { return get(); }
			void put(pptr<Printing3DComponent> value) { hrcheck(enc(&IPrinting3DModel_adaptor::Build)->_put_Build(value)); }
			void operator=(pptr<Printing3DComponent> value) { put(value); }
			void operator()(pptr<Printing3DComponent> value) { put(value); }
		} Build;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DComponent>>> get() { Foundation::Collections::IVector<Printing3DComponent*>* value; hrcheck(enc(&IPrinting3DModel_adaptor::Components)->_get_Components(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DComponent>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DComponent>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DComponent>>> operator->() { return get(); }
		} Components;
		struct : property {
			ptr<Printing3DMaterial> get() { Printing3DMaterial* value; hrcheck(enc(&IPrinting3DModel_adaptor::Material)->_get_Material(&value)); return from_abi(value); }
			ptr<Printing3DMaterial> operator()() { return get(); }
			operator ptr<Printing3DMaterial> () { return get(); }
			ptr<Printing3DMaterial> operator->() { return get(); }
			void put(pptr<Printing3DMaterial> value) { hrcheck(enc(&IPrinting3DModel_adaptor::Material)->_put_Material(value)); }
			void operator=(pptr<Printing3DMaterial> value) { put(value); }
			void operator()(pptr<Printing3DMaterial> value) { put(value); }
		} Material;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DMesh>>> get() { Foundation::Collections::IVector<Printing3DMesh*>* value; hrcheck(enc(&IPrinting3DModel_adaptor::Meshes)->_get_Meshes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DMesh>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DMesh>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DMesh>>> operator->() { return get(); }
		} Meshes;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&IPrinting3DModel_adaptor::Metadata)->_get_Metadata(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} Metadata;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IPrinting3DModel_adaptor::RequiredExtensions)->_get_RequiredExtensions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} RequiredExtensions;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DModelTexture>>> get() { Foundation::Collections::IVector<Printing3DModelTexture*>* value; hrcheck(enc(&IPrinting3DModel_adaptor::Textures)->_get_Textures(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DModelTexture>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DModelTexture>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DModelTexture>>> operator->() { return get(); }
		} Textures;
		struct : property {
			Printing3DModelUnit get() { Printing3DModelUnit value; hrcheck(enc(&IPrinting3DModel_adaptor::Unit)->_get_Unit(&value)); return value; }
			Printing3DModelUnit operator()() { return get(); }
			operator Printing3DModelUnit () { return get(); }
			void put(Printing3DModelUnit value) { hrcheck(enc(&IPrinting3DModel_adaptor::Unit)->_put_Unit(value)); }
			void operator=(Printing3DModelUnit value) { put(value); }
			void operator()(Printing3DModelUnit value) { put(value); }
		} Unit;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPrinting3DModel_adaptor::Version)->_get_Version(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPrinting3DModel_adaptor::Version)->_put_Version(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Version;
	};
	ptr<Foundation::IAsyncAction> RepairAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_RepairAsync(&operation)); return from_abi(operation); }
	ptr<Printing3DModel> Clone() { Printing3DModel* value; hrcheck(X::get()->_Clone(&value)); return from_abi(value); }
	IPrinting3DModel_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DModel, X> : Windows::Graphics::Printing3D::IPrinting3DModel_adaptor<X> { typedef adapt IPrinting3DModel; };
struct IPrinting3DModel : IPrinting3DModel_raw, generate<IPrinting3DModel> {};

// Printing3DMaterial
template<typename X> struct statics<Printing3DMaterial, X> : X {
	typedef typename X::root_type Printing3DMaterial;
};
struct Printing3DMaterial : generate<Printing3DMaterial> {};

// IPrinting3DModel2
struct IPrinting3DModel2_raw : IInspectable {
	virtual STDMETHODIMP _TryPartialRepairAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryPartialRepairWithTimeAsync(Foundation::TimeSpan maxWaitTime, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryReduceFacesAsync(Foundation::IAsyncOperationWithProgress<bool, double>* *operation);
	virtual STDMETHODIMP _TryReduceFacesWithOptionsAsync(Printing3DFaceReductionOptions* printing3DFaceReductionOptions, Foundation::IAsyncOperationWithProgress<bool, double>* *operation);
	virtual STDMETHODIMP _TryReduceFacesWithOptionsAndTimeAsync(Printing3DFaceReductionOptions* printing3DFaceReductionOptions, Foundation::TimeSpan maxWait, Foundation::IAsyncOperationWithProgress<bool, double>* *operation);
	virtual STDMETHODIMP _RepairWithProgressAsync(Foundation::IAsyncOperationWithProgress<bool, double>* *operation);
};
template<typename X> struct IPrinting3DModel2_adaptor : X {
	ptr<Foundation::IAsyncOperation<bool>> TryPartialRepairAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryPartialRepairAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryPartialRepairAsync(const Foundation::TimeSpan& maxWaitTime) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryPartialRepairWithTimeAsync(maxWaitTime, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperationWithProgress<bool, double>> TryReduceFacesAsync() { Foundation::IAsyncOperationWithProgress<bool, double>* operation; hrcheck(X::get()->_TryReduceFacesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperationWithProgress<bool, double>> TryReduceFacesAsync(pptr<Printing3DFaceReductionOptions> printing3DFaceReductionOptions) { Foundation::IAsyncOperationWithProgress<bool, double>* operation; hrcheck(X::get()->_TryReduceFacesWithOptionsAsync(printing3DFaceReductionOptions, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperationWithProgress<bool, double>> TryReduceFacesAsync(pptr<Printing3DFaceReductionOptions> printing3DFaceReductionOptions, const Foundation::TimeSpan& maxWait) { Foundation::IAsyncOperationWithProgress<bool, double>* operation; hrcheck(X::get()->_TryReduceFacesWithOptionsAndTimeAsync(printing3DFaceReductionOptions, maxWait, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperationWithProgress<bool, double>> RepairWithProgressAsync() { Foundation::IAsyncOperationWithProgress<bool, double>* operation; hrcheck(X::get()->_RepairWithProgressAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IPrinting3DModel2, X> : Windows::Graphics::Printing3D::IPrinting3DModel2_adaptor<X> { typedef adapt IPrinting3DModel2; };
struct IPrinting3DModel2 : IPrinting3DModel2_raw, generate<IPrinting3DModel2> {};

// Printing3DModel
template<typename X> struct statics<Printing3DModel, X> : X {
	typedef typename X::root_type Printing3DModel;
};
struct Printing3DModel : generate<Printing3DModel> {
	using IPrinting3DModel2::TryReduceFacesAsync;
	using IPrinting3DModel2::TryPartialRepairAsync;
};

// IPrinting3DFaceReductionOptions
struct IPrinting3DFaceReductionOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxReductionArea(double *value);
	virtual STDMETHODIMP _put_MaxReductionArea(double value);
	virtual STDMETHODIMP _get_TargetTriangleCount(unsigned *value);
	virtual STDMETHODIMP _put_TargetTriangleCount(unsigned value);
	virtual STDMETHODIMP _get_MaxEdgeLength(double *value);
	virtual STDMETHODIMP _put_MaxEdgeLength(double value);
};
template<typename X> struct IPrinting3DFaceReductionOptions_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IPrinting3DFaceReductionOptions_adaptor::MaxEdgeLength)->_get_MaxEdgeLength(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IPrinting3DFaceReductionOptions_adaptor::MaxEdgeLength)->_put_MaxEdgeLength(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} MaxEdgeLength;
		struct : property {
			double get() { double value; hrcheck(enc(&IPrinting3DFaceReductionOptions_adaptor::MaxReductionArea)->_get_MaxReductionArea(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IPrinting3DFaceReductionOptions_adaptor::MaxReductionArea)->_put_MaxReductionArea(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} MaxReductionArea;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPrinting3DFaceReductionOptions_adaptor::TargetTriangleCount)->_get_TargetTriangleCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPrinting3DFaceReductionOptions_adaptor::TargetTriangleCount)->_put_TargetTriangleCount(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} TargetTriangleCount;
	};
	IPrinting3DFaceReductionOptions_adaptor() {}
};
template<typename X> struct adapt<IPrinting3DFaceReductionOptions, X> : Windows::Graphics::Printing3D::IPrinting3DFaceReductionOptions_adaptor<X> { typedef adapt IPrinting3DFaceReductionOptions; };
struct IPrinting3DFaceReductionOptions : IPrinting3DFaceReductionOptions_raw, generate<IPrinting3DFaceReductionOptions> {};

// Printing3DFaceReductionOptions
template<typename X> struct statics<Printing3DFaceReductionOptions, X> : X {
	typedef typename X::root_type Printing3DFaceReductionOptions;
};
struct Printing3DFaceReductionOptions : generate<Printing3DFaceReductionOptions> {};

// IPrinting3D3MFPackageStatics
struct IPrinting3D3MFPackageStatics : IInspectable {
	virtual STDMETHODIMP _LoadAsync(Storage::Streams::IRandomAccessStream* value, Foundation::IAsyncOperation<Printing3D3MFPackage*>* *operation);
};

// IPrinting3D3MFPackage2
struct IPrinting3D3MFPackage2_raw : IInspectable {
	virtual STDMETHODIMP _get_Compression(Printing3DPackageCompression *value);
	virtual STDMETHODIMP _put_Compression(Printing3DPackageCompression value);
};
template<typename X> struct IPrinting3D3MFPackage2_adaptor : X {
	union {
		struct : property {
			Printing3DPackageCompression get() { Printing3DPackageCompression value; hrcheck(enc(&IPrinting3D3MFPackage2_adaptor::Compression)->_get_Compression(&value)); return value; }
			Printing3DPackageCompression operator()() { return get(); }
			operator Printing3DPackageCompression () { return get(); }
			void put(Printing3DPackageCompression value) { hrcheck(enc(&IPrinting3D3MFPackage2_adaptor::Compression)->_put_Compression(value)); }
			void operator=(Printing3DPackageCompression value) { put(value); }
			void operator()(Printing3DPackageCompression value) { put(value); }
		} Compression;
	};
	IPrinting3D3MFPackage2_adaptor() {}
};
template<typename X> struct adapt<IPrinting3D3MFPackage2, X> : Windows::Graphics::Printing3D::IPrinting3D3MFPackage2_adaptor<X> { typedef adapt IPrinting3D3MFPackage2; };
struct IPrinting3D3MFPackage2 : IPrinting3D3MFPackage2_raw, generate<IPrinting3D3MFPackage2> {};

// IPrinting3D3MFPackage
struct IPrinting3D3MFPackage_raw : IInspectable {
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *operation);
	virtual STDMETHODIMP _get_PrintTicket(Storage::Streams::IRandomAccessStream* *value);
	virtual STDMETHODIMP _put_PrintTicket(Storage::Streams::IRandomAccessStream* value);
	virtual STDMETHODIMP _get_ModelPart(Storage::Streams::IRandomAccessStream* *value);
	virtual STDMETHODIMP _put_ModelPart(Storage::Streams::IRandomAccessStream* value);
	virtual STDMETHODIMP _get_Thumbnail(Printing3DTextureResource* *value);
	virtual STDMETHODIMP _put_Thumbnail(Printing3DTextureResource* value);
	virtual STDMETHODIMP _get_Textures(Foundation::Collections::IVector<Printing3DTextureResource*>* *value);
	virtual STDMETHODIMP _LoadModelFromPackageAsync(Storage::Streams::IRandomAccessStream* value, Foundation::IAsyncOperation<Printing3DModel*>* *operation);
	virtual STDMETHODIMP _SaveModelToPackageAsync(Printing3DModel* value, Foundation::IAsyncAction* *operation);
};
template<typename X> struct IPrinting3D3MFPackage_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStream> get() { Storage::Streams::IRandomAccessStream* value; hrcheck(enc(&IPrinting3D3MFPackage_adaptor::ModelPart)->_get_ModelPart(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStream> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStream> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStream> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStream> value) { hrcheck(enc(&IPrinting3D3MFPackage_adaptor::ModelPart)->_put_ModelPart(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStream> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStream> value) { put(value); }
		} ModelPart;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStream> get() { Storage::Streams::IRandomAccessStream* value; hrcheck(enc(&IPrinting3D3MFPackage_adaptor::PrintTicket)->_get_PrintTicket(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStream> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStream> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStream> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStream> value) { hrcheck(enc(&IPrinting3D3MFPackage_adaptor::PrintTicket)->_put_PrintTicket(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStream> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStream> value) { put(value); }
		} PrintTicket;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Printing3DTextureResource>>> get() { Foundation::Collections::IVector<Printing3DTextureResource*>* value; hrcheck(enc(&IPrinting3D3MFPackage_adaptor::Textures)->_get_Textures(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DTextureResource>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Printing3DTextureResource>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Printing3DTextureResource>>> operator->() { return get(); }
		} Textures;
		struct : property {
			ptr<Printing3DTextureResource> get() { Printing3DTextureResource* value; hrcheck(enc(&IPrinting3D3MFPackage_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Printing3DTextureResource> operator()() { return get(); }
			operator ptr<Printing3DTextureResource> () { return get(); }
			ptr<Printing3DTextureResource> operator->() { return get(); }
			void put(pptr<Printing3DTextureResource> value) { hrcheck(enc(&IPrinting3D3MFPackage_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<Printing3DTextureResource> value) { put(value); }
			void operator()(pptr<Printing3DTextureResource> value) { put(value); }
		} Thumbnail;
	};
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStream>>> SaveAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* operation; hrcheck(X::get()->_SaveAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Printing3DModel>>> LoadModelFromPackageAsync(pptr<Storage::Streams::IRandomAccessStream> value) { Foundation::IAsyncOperation<Printing3DModel*>* operation; hrcheck(X::get()->_LoadModelFromPackageAsync(value, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SaveModelToPackageAsync(pptr<Printing3DModel> value) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SaveModelToPackageAsync(value, &operation)); return from_abi(operation); }
	IPrinting3D3MFPackage_adaptor() {}
};
template<typename X> struct adapt<IPrinting3D3MFPackage, X> : Windows::Graphics::Printing3D::IPrinting3D3MFPackage_adaptor<X> { typedef adapt IPrinting3D3MFPackage; };
struct IPrinting3D3MFPackage : IPrinting3D3MFPackage_raw, generate<IPrinting3D3MFPackage> {};

// Printing3D3MFPackage
template<typename> struct Printing3D3MFPackage_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Printing3D3MFPackage>>> LoadAsync(pptr<Storage::Streams::IRandomAccessStream> value) { Foundation::IAsyncOperation<Printing3D3MFPackage*>* operation; hrcheck(get_activation_factory<Printing3D3MFPackage, IPrinting3D3MFPackageStatics>()->_LoadAsync(value, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<Printing3D3MFPackage, X> : X, Windows::Graphics::Printing3D::Printing3D3MFPackage_statics<void> {
	typedef typename X::root_type Printing3D3MFPackage;
};
struct Printing3D3MFPackage : generate<Printing3D3MFPackage> {};
}}}
} // namespace iso_winrt
