#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Store

#include "Windows.ApplicationModel.Store.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMapView;
}}
namespace Storage {
struct StorageFile;
}}

// defs

template<> struct def<Windows::ApplicationModel::Store::ProductPurchaseStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Store::ProductType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Store::FulfillmentResult> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Store::LicenseChangedEventHandler> : delegate_type {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentApp> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ILicenseInformation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::LicenseInformation> : class_type<Platform::Object, Windows::ApplicationModel::Store::ILicenseInformation> {};
template<> struct def<Windows::ApplicationModel::Store::IListingInformation2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IListingInformation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ListingInformation> : class_type<Platform::Object, Windows::ApplicationModel::Store::IListingInformation, Windows::ApplicationModel::Store::IListingInformation2> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentAppWithConsumables> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IPurchaseResults> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::PurchaseResults> : class_type<Platform::Object, Windows::ApplicationModel::Store::IPurchaseResults> {};
template<> struct def<Windows::ApplicationModel::Store::IProductPurchaseDisplayPropertiesFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties> : class_type<Platform::Object, Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Store::IUnfulfilledConsumable> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::UnfulfilledConsumable> : class_type<Platform::Object, Windows::ApplicationModel::Store::IUnfulfilledConsumable> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentAppWithCampaignId> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentApp2Statics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentAppSimulator> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentAppSimulatorWithCampaignId> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentAppSimulatorWithConsumables> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IProductLicense> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IProductLicenseWithFulfillment> : interface_type<Windows::ApplicationModel::Store::IProductLicense> {};
template<> struct def<Windows::ApplicationModel::Store::ProductLicense> : class_type<Platform::Object, Windows::ApplicationModel::Store::IProductLicense, Windows::ApplicationModel::Store::IProductLicenseWithFulfillment> {};
template<> struct def<Windows::ApplicationModel::Store::IProductListingWithConsumables> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IProductListing2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IProductListing> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::IProductListingWithMetadata> : interface_type<Windows::ApplicationModel::Store::IProductListing> {};
template<> struct def<Windows::ApplicationModel::Store::ProductListing> : class_type<Platform::Object, Windows::ApplicationModel::Store::IProductListing, Windows::ApplicationModel::Store::IProductListingWithMetadata, Windows::ApplicationModel::Store::IProductListing2> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentAppStaticsWithFiltering> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::ICurrentAppSimulatorStaticsWithFiltering> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::CurrentApp> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Store::CurrentAppSimulator> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Store::LicenseChangedEventHandler> { define_guid(0xD4A50255, 0x1369, 0x4C36, 0x83, 0x2F, 0x6F, 0x2D, 0x88, 0xE3, 0x65, 0x9B);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentApp> { define_guid(0xD52DC065, 0xDA3F, 0x4685, 0x99, 0x5E, 0x9B, 0x48, 0x2E, 0xB5, 0xE6, 0x3);};
template<> struct uuid<Windows::ApplicationModel::Store::ILicenseInformation> { define_guid(0x8EB7DC30, 0xF170, 0x4ED5, 0x8E, 0x21, 0x15, 0x16, 0xDA, 0x3F, 0xD3, 0x67);};
template<> struct uuid<Windows::ApplicationModel::Store::IListingInformation2> { define_guid(0xC0FD2C1D, 0xB30E, 0x4384, 0x84, 0xEA, 0x72, 0xFE, 0xFA, 0x82, 0x22, 0x3E);};
template<> struct uuid<Windows::ApplicationModel::Store::IListingInformation> { define_guid(0x588B4ABF, 0xBC74, 0x4383, 0xB7, 0x8C, 0x99, 0x60, 0x63, 0x23, 0xDE, 0xCE);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentAppWithConsumables> { define_guid(0x844E0071, 0x9E4F, 0x4F79, 0x99, 0x5A, 0x5F, 0x91, 0x17, 0x2E, 0x6C, 0xEF);};
template<> struct uuid<Windows::ApplicationModel::Store::IPurchaseResults> { define_guid(0xED50B37E, 0x8656, 0x4F65, 0xB8, 0xC8, 0xAC, 0x7E, 0xC, 0xB1, 0xA1, 0xC2);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductPurchaseDisplayPropertiesFactory> { define_guid(0x6F491DF4, 0x32D6, 0x4B40, 0xB4, 0x74, 0xB8, 0x30, 0x38, 0xA4, 0xD9, 0xCF);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties> { define_guid(0xD70B7420, 0xBC92, 0x401B, 0xA8, 0x9, 0xC9, 0xB2, 0xE5, 0xDB, 0xBD, 0xAF);};
template<> struct uuid<Windows::ApplicationModel::Store::IUnfulfilledConsumable> { define_guid(0x2DF7FBBB, 0x1CDD, 0x4CB8, 0xA0, 0x14, 0x7B, 0x9C, 0xF8, 0x98, 0x69, 0x27);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentAppWithCampaignId> { define_guid(0x312F4CD0, 0x36C1, 0x44A6, 0xB3, 0x2B, 0x43, 0x2D, 0x60, 0x8E, 0x4D, 0xD6);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentApp2Statics> { define_guid(0xDF4E6E2D, 0x3171, 0x4AD3, 0x86, 0x14, 0x2C, 0x61, 0x24, 0x43, 0x73, 0xCB);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentAppSimulator> { define_guid(0xF17F9DB1, 0x74CD, 0x4787, 0x97, 0x87, 0x19, 0x86, 0x6E, 0x9A, 0x55, 0x59);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentAppSimulatorWithCampaignId> { define_guid(0x84678A43, 0xDF00, 0x4672, 0xA4, 0x3F, 0xB2, 0x5B, 0x14, 0x41, 0xCF, 0xCF);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentAppSimulatorWithConsumables> { define_guid(0x4E51F0AB, 0x20E7, 0x4412, 0x9B, 0x85, 0x59, 0xBB, 0x78, 0x38, 0x86, 0x67);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductLicense> { define_guid(0x363308C7, 0x2BCF, 0x4C0E, 0x8F, 0x2F, 0xE8, 0x8, 0xAA, 0xA8, 0xF9, 0x9D);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductLicenseWithFulfillment> { define_guid(0xFC535C8A, 0xF667, 0x40F3, 0xBA, 0x3C, 0x4, 0x5A, 0x63, 0xAB, 0xB3, 0xAC);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductListingWithConsumables> { define_guid(0xEB9E9790, 0x8F6B, 0x481F, 0x93, 0xA7, 0x5C, 0x3A, 0x63, 0x6, 0x81, 0x49);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductListing2> { define_guid(0xF89E290F, 0x73FE, 0x494D, 0xA9, 0x39, 0x8, 0xA9, 0xB2, 0x49, 0x5A, 0xBE);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductListing> { define_guid(0x45A7D6AD, 0xC750, 0x4D9C, 0x94, 0x7C, 0xB0, 0xD, 0xCB, 0xF9, 0xE9, 0xC2);};
template<> struct uuid<Windows::ApplicationModel::Store::IProductListingWithMetadata> { define_guid(0x124DA567, 0x23F8, 0x423E, 0x95, 0x32, 0x18, 0x99, 0x43, 0xC4, 0xA, 0xCE);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentAppStaticsWithFiltering> { define_guid(0xD36D6542, 0x9085, 0x438E, 0x97, 0xBA, 0xA2, 0x5C, 0x97, 0x6B, 0xE2, 0xFD);};
template<> struct uuid<Windows::ApplicationModel::Store::ICurrentAppSimulatorStaticsWithFiltering> { define_guid(0x617E70E2, 0xF86F, 0x4B54, 0x96, 0x66, 0xDD, 0xE2, 0x85, 0x9, 0x2C, 0x68);};

// types

namespace Windows { namespace ApplicationModel { namespace Store {

// LicenseChangedEventHandler
struct LicenseChangedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke() = 0;
};

// ICurrentApp
struct ICurrentApp : IInspectable {
	virtual STDMETHODIMP _get_LicenseInformation(Store::LicenseInformation* *value);
	virtual STDMETHODIMP _get_LinkUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_AppId(Platform::Guid *value);
	virtual STDMETHODIMP _RequestAppPurchaseAsync(bool includeReceipt, Foundation::IAsyncOperation<HSTRING>* *requestAppPurchaseOperation);
	virtual STDMETHODIMP _RequestProductPurchaseAsync(HSTRING productId, bool includeReceipt, Foundation::IAsyncOperation<HSTRING>* *requestProductPurchaseOperation);
	virtual STDMETHODIMP _LoadListingInformationAsync(Foundation::IAsyncOperation<ListingInformation*>* *loadListingOperation);
	virtual STDMETHODIMP _GetAppReceiptAsync(Foundation::IAsyncOperation<HSTRING>* *appReceiptOperation);
	virtual STDMETHODIMP _GetProductReceiptAsync(HSTRING productId, Foundation::IAsyncOperation<HSTRING>* *getProductReceiptOperation);
};

// ILicenseInformation
struct ILicenseInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_ProductLicenses(Foundation::Collections::IMapView<HSTRING, ProductLicense*>* *value);
	virtual STDMETHODIMP _get_IsActive(bool *value);
	virtual STDMETHODIMP _get_IsTrial(bool *value);
	virtual STDMETHODIMP _get_ExpirationDate(Foundation::DateTime *value);
	virtual STDMETHODIMP _add_LicenseChanged(LicenseChangedEventHandler* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_LicenseChanged(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ILicenseInformation_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ILicenseInformation_adaptor::ExpirationDate)->_get_ExpirationDate(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} ExpirationDate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILicenseInformation_adaptor::IsActive)->_get_IsActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsActive;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILicenseInformation_adaptor::IsTrial)->_get_IsTrial(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTrial;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, ptr<ProductLicense>>> get() { Foundation::Collections::IMapView<HSTRING, ProductLicense*>* value; hrcheck(enc(&ILicenseInformation_adaptor::ProductLicenses)->_get_ProductLicenses(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<ProductLicense>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, ptr<ProductLicense>>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<ProductLicense>>> operator->() { return get(); }
		} ProductLicenses;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<LicenseChangedEventHandler> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ILicenseInformation_adaptor::LicenseChanged)->_add_LicenseChanged(handler, &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ILicenseInformation_adaptor::LicenseChanged)->_remove_LicenseChanged(cookie)); }
		} LicenseChanged;
	};
	ILicenseInformation_adaptor() {}
};
template<typename X> struct adapt<ILicenseInformation, X> : Windows::ApplicationModel::Store::ILicenseInformation_adaptor<X> { typedef adapt ILicenseInformation; };
struct ILicenseInformation : ILicenseInformation_raw, generate<ILicenseInformation> {};

// LicenseInformation
template<typename X> struct statics<LicenseInformation, X> : X {
	typedef typename X::root_type LicenseInformation;
};
struct LicenseInformation : generate<LicenseInformation> {};

// IListingInformation2
struct IListingInformation2_raw : IInspectable {
	virtual STDMETHODIMP _get_FormattedBasePrice(HSTRING *value);
	virtual STDMETHODIMP _get_SaleEndDate(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_IsOnSale(bool *value);
	virtual STDMETHODIMP _get_CurrencyCode(HSTRING *value);
};
template<typename X> struct IListingInformation2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IListingInformation2_adaptor::CurrencyCode)->_get_CurrencyCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CurrencyCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IListingInformation2_adaptor::FormattedBasePrice)->_get_FormattedBasePrice(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FormattedBasePrice;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IListingInformation2_adaptor::IsOnSale)->_get_IsOnSale(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOnSale;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IListingInformation2_adaptor::SaleEndDate)->_get_SaleEndDate(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} SaleEndDate;
	};
	IListingInformation2_adaptor() {}
};
template<typename X> struct adapt<IListingInformation2, X> : Windows::ApplicationModel::Store::IListingInformation2_adaptor<X> { typedef adapt IListingInformation2; };
struct IListingInformation2 : IListingInformation2_raw, generate<IListingInformation2> {};

// IListingInformation
struct IListingInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentMarket(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_ProductListings(Foundation::Collections::IMapView<HSTRING, ProductListing*>* *value);
	virtual STDMETHODIMP _get_FormattedPrice(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_AgeRating(unsigned *value);
};
template<typename X> struct IListingInformation_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IListingInformation_adaptor::AgeRating)->_get_AgeRating(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} AgeRating;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IListingInformation_adaptor::CurrentMarket)->_get_CurrentMarket(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CurrentMarket;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IListingInformation_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IListingInformation_adaptor::FormattedPrice)->_get_FormattedPrice(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FormattedPrice;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IListingInformation_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, ptr<ProductListing>>> get() { Foundation::Collections::IMapView<HSTRING, ProductListing*>* value; hrcheck(enc(&IListingInformation_adaptor::ProductListings)->_get_ProductListings(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<ProductListing>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, ptr<ProductListing>>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<ProductListing>>> operator->() { return get(); }
		} ProductListings;
	};
	IListingInformation_adaptor() {}
};
template<typename X> struct adapt<IListingInformation, X> : Windows::ApplicationModel::Store::IListingInformation_adaptor<X> { typedef adapt IListingInformation; };
struct IListingInformation : IListingInformation_raw, generate<IListingInformation> {};

// ListingInformation
template<typename X> struct statics<ListingInformation, X> : X {
	typedef typename X::root_type ListingInformation;
};
struct ListingInformation : generate<ListingInformation> {};

// ICurrentAppWithConsumables
struct ICurrentAppWithConsumables : IInspectable {
	virtual STDMETHODIMP _ReportConsumableFulfillmentAsync(HSTRING productId, Platform::Guid transactionId, Foundation::IAsyncOperation<FulfillmentResult>* *reportConsumableFulfillmentOperation);
	virtual STDMETHODIMP _RequestProductPurchaseWithResultsAsync(HSTRING productId, Foundation::IAsyncOperation<PurchaseResults*>* *requestProductPurchaseWithResultsOperation);
	virtual STDMETHODIMP _RequestProductPurchaseWithDisplayPropertiesAsync(HSTRING productId, HSTRING offerId, ProductPurchaseDisplayProperties* displayProperties, Foundation::IAsyncOperation<PurchaseResults*>* *requestProductPurchaseWithDisplayPropertiesOperation);
	virtual STDMETHODIMP _GetUnfulfilledConsumablesAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<UnfulfilledConsumable*>*>* *getUnfulfilledConsumablesOperation);
};

// IPurchaseResults
struct IPurchaseResults_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(ProductPurchaseStatus *value);
	virtual STDMETHODIMP _get_TransactionId(Platform::Guid *value);
	virtual STDMETHODIMP _get_ReceiptXml(HSTRING *value);
	virtual STDMETHODIMP _get_OfferId(HSTRING *value);
};
template<typename X> struct IPurchaseResults_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPurchaseResults_adaptor::OfferId)->_get_OfferId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} OfferId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPurchaseResults_adaptor::ReceiptXml)->_get_ReceiptXml(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ReceiptXml;
		struct : property {
			ProductPurchaseStatus get() { ProductPurchaseStatus value; hrcheck(enc(&IPurchaseResults_adaptor::Status)->_get_Status(&value)); return value; }
			ProductPurchaseStatus operator()() { return get(); }
			operator ProductPurchaseStatus () { return get(); }
		} Status;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IPurchaseResults_adaptor::TransactionId)->_get_TransactionId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} TransactionId;
	};
	IPurchaseResults_adaptor() {}
};
template<typename X> struct adapt<IPurchaseResults, X> : Windows::ApplicationModel::Store::IPurchaseResults_adaptor<X> { typedef adapt IPurchaseResults; };
struct IPurchaseResults : IPurchaseResults_raw, generate<IPurchaseResults> {};

// PurchaseResults
template<typename X> struct statics<PurchaseResults, X> : X {
	typedef typename X::root_type PurchaseResults;
};
struct PurchaseResults : generate<PurchaseResults> {};

// IProductPurchaseDisplayPropertiesFactory
struct IProductPurchaseDisplayPropertiesFactory : IInspectable {
	virtual STDMETHODIMP _CreateProductPurchaseDisplayProperties(HSTRING name, ProductPurchaseDisplayProperties* *displayProperties);
};

// IProductPurchaseDisplayProperties
struct IProductPurchaseDisplayProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
	virtual STDMETHODIMP _get_Image(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Image(Foundation::Uri* value);
};
template<typename X> struct IProductPurchaseDisplayProperties_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductPurchaseDisplayProperties_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IProductPurchaseDisplayProperties_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IProductPurchaseDisplayProperties_adaptor::Image)->_get_Image(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IProductPurchaseDisplayProperties_adaptor::Image)->_put_Image(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Image;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductPurchaseDisplayProperties_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IProductPurchaseDisplayProperties_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
	};
	IProductPurchaseDisplayProperties_adaptor() {}
};
template<typename X> struct adapt<IProductPurchaseDisplayProperties, X> : Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties_adaptor<X> { typedef adapt IProductPurchaseDisplayProperties; };
struct IProductPurchaseDisplayProperties : IProductPurchaseDisplayProperties_raw, generate<IProductPurchaseDisplayProperties> {};

// ProductPurchaseDisplayProperties
template<typename> struct ProductPurchaseDisplayProperties_statics {
	static ProductPurchaseDisplayProperties *activate() { ProductPurchaseDisplayProperties *t; get_activation_factory<ProductPurchaseDisplayProperties>()->ActivateInstance((IInspectable**)&t); return t; }
	static ProductPurchaseDisplayProperties *activate(hstring_ref name) { ProductPurchaseDisplayProperties *displayProperties; hrcheck(get_activation_factory<ProductPurchaseDisplayProperties, IProductPurchaseDisplayPropertiesFactory>()->_CreateProductPurchaseDisplayProperties(name, &displayProperties)); return displayProperties; }
};

template<typename X> struct statics<ProductPurchaseDisplayProperties, X> : X, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties_statics<void> {
	using Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties_statics<void>::activate;
	typedef typename X::root_type ProductPurchaseDisplayProperties;
};
struct ProductPurchaseDisplayProperties : generate<ProductPurchaseDisplayProperties> {};

// IUnfulfilledConsumable
struct IUnfulfilledConsumable_raw : IInspectable {
	virtual STDMETHODIMP _get_ProductId(HSTRING *value);
	virtual STDMETHODIMP _get_TransactionId(Platform::Guid *value);
	virtual STDMETHODIMP _get_OfferId(HSTRING *value);
};
template<typename X> struct IUnfulfilledConsumable_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUnfulfilledConsumable_adaptor::OfferId)->_get_OfferId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} OfferId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUnfulfilledConsumable_adaptor::ProductId)->_get_ProductId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProductId;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IUnfulfilledConsumable_adaptor::TransactionId)->_get_TransactionId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} TransactionId;
	};
	IUnfulfilledConsumable_adaptor() {}
};
template<typename X> struct adapt<IUnfulfilledConsumable, X> : Windows::ApplicationModel::Store::IUnfulfilledConsumable_adaptor<X> { typedef adapt IUnfulfilledConsumable; };
struct IUnfulfilledConsumable : IUnfulfilledConsumable_raw, generate<IUnfulfilledConsumable> {};

// UnfulfilledConsumable
template<typename X> struct statics<UnfulfilledConsumable, X> : X {
	typedef typename X::root_type UnfulfilledConsumable;
};
struct UnfulfilledConsumable : generate<UnfulfilledConsumable> {};

// ICurrentAppWithCampaignId
struct ICurrentAppWithCampaignId : IInspectable {
	virtual STDMETHODIMP _GetAppPurchaseCampaignIdAsync(Foundation::IAsyncOperation<HSTRING>* *operation);
};

// ICurrentApp2Statics
struct ICurrentApp2Statics : IInspectable {
	virtual STDMETHODIMP _GetCustomerPurchaseIdAsync(HSTRING serviceTicket, HSTRING publisherUserId, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetCustomerCollectionsIdAsync(HSTRING serviceTicket, HSTRING publisherUserId, Foundation::IAsyncOperation<HSTRING>* *operation);
};

// ICurrentAppSimulator
struct ICurrentAppSimulator : IInspectable {
	virtual STDMETHODIMP _get_LicenseInformation(Store::LicenseInformation* *value);
	virtual STDMETHODIMP _get_LinkUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_AppId(Platform::Guid *value);
	virtual STDMETHODIMP _RequestAppPurchaseAsync(bool includeReceipt, Foundation::IAsyncOperation<HSTRING>* *requestAppPurchaseOperation);
	virtual STDMETHODIMP _RequestProductPurchaseAsync(HSTRING productId, bool includeReceipt, Foundation::IAsyncOperation<HSTRING>* *requestProductPurchaseOperation);
	virtual STDMETHODIMP _LoadListingInformationAsync(Foundation::IAsyncOperation<ListingInformation*>* *loadListingOperation);
	virtual STDMETHODIMP _GetAppReceiptAsync(Foundation::IAsyncOperation<HSTRING>* *appReceiptOperation);
	virtual STDMETHODIMP _GetProductReceiptAsync(HSTRING productId, Foundation::IAsyncOperation<HSTRING>* *getProductReceiptOperation);
	virtual STDMETHODIMP _ReloadSimulatorAsync(Storage::StorageFile* simulatorSettingsFile, Foundation::IAsyncAction* *reloadSimulatorOperation);
};

// ICurrentAppSimulatorWithCampaignId
struct ICurrentAppSimulatorWithCampaignId : IInspectable {
	virtual STDMETHODIMP _GetAppPurchaseCampaignIdAsync(Foundation::IAsyncOperation<HSTRING>* *operation);
};

// ICurrentAppSimulatorWithConsumables
struct ICurrentAppSimulatorWithConsumables : IInspectable {
	virtual STDMETHODIMP _ReportConsumableFulfillmentAsync(HSTRING productId, Platform::Guid transactionId, Foundation::IAsyncOperation<FulfillmentResult>* *reportConsumableFulfillmentOperation);
	virtual STDMETHODIMP _RequestProductPurchaseWithResultsAsync(HSTRING productId, Foundation::IAsyncOperation<PurchaseResults*>* *requestProductPurchaseWithResultsOperation);
	virtual STDMETHODIMP _RequestProductPurchaseWithDisplayPropertiesAsync(HSTRING productId, HSTRING offerId, ProductPurchaseDisplayProperties* displayProperties, Foundation::IAsyncOperation<PurchaseResults*>* *requestProductPurchaseWithDisplayPropertiesOperation);
	virtual STDMETHODIMP _GetUnfulfilledConsumablesAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<UnfulfilledConsumable*>*>* *getUnfulfilledConsumablesOperation);
};

// IProductLicense
struct IProductLicense_raw : IInspectable {
	virtual STDMETHODIMP _get_ProductId(HSTRING *value);
	virtual STDMETHODIMP _get_IsActive(bool *value);
	virtual STDMETHODIMP _get_ExpirationDate(Foundation::DateTime *value);
};
template<typename X> struct IProductLicense_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IProductLicense_adaptor::ExpirationDate)->_get_ExpirationDate(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} ExpirationDate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IProductLicense_adaptor::IsActive)->_get_IsActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsActive;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductLicense_adaptor::ProductId)->_get_ProductId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProductId;
	};
	IProductLicense_adaptor() {}
};
template<typename X> struct adapt<IProductLicense, X> : Windows::ApplicationModel::Store::IProductLicense_adaptor<X> { typedef adapt IProductLicense; };
struct IProductLicense : IProductLicense_raw, generate<IProductLicense> {};

// IProductLicenseWithFulfillment
struct IProductLicenseWithFulfillment_raw : IInspectable {
	virtual STDMETHODIMP _get_IsConsumable(bool *value);
};
template<typename X> struct IProductLicenseWithFulfillment_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IProductLicenseWithFulfillment_adaptor::IsConsumable)->_get_IsConsumable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsConsumable;
	};
	IProductLicenseWithFulfillment_adaptor() {}
};
template<typename X> struct adapt<IProductLicenseWithFulfillment, X> : Windows::ApplicationModel::Store::IProductLicenseWithFulfillment_adaptor<X> { typedef adapt IProductLicenseWithFulfillment; };
struct IProductLicenseWithFulfillment : IProductLicenseWithFulfillment_raw, generate<IProductLicenseWithFulfillment> {};

// ProductLicense
template<typename X> struct statics<ProductLicense, X> : X {
	typedef typename X::root_type ProductLicense;
};
struct ProductLicense : generate<ProductLicense> {};

// IProductListingWithConsumables
struct IProductListingWithConsumables : IInspectable {
	virtual STDMETHODIMP _get_ProductType(Store::ProductType *value);
};

// IProductListing2
struct IProductListing2_raw : IInspectable {
	virtual STDMETHODIMP _get_FormattedBasePrice(HSTRING *value);
	virtual STDMETHODIMP _get_SaleEndDate(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_IsOnSale(bool *value);
	virtual STDMETHODIMP _get_CurrencyCode(HSTRING *value);
};
template<typename X> struct IProductListing2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductListing2_adaptor::CurrencyCode)->_get_CurrencyCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CurrencyCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductListing2_adaptor::FormattedBasePrice)->_get_FormattedBasePrice(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FormattedBasePrice;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IProductListing2_adaptor::IsOnSale)->_get_IsOnSale(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOnSale;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IProductListing2_adaptor::SaleEndDate)->_get_SaleEndDate(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} SaleEndDate;
	};
	IProductListing2_adaptor() {}
};
template<typename X> struct adapt<IProductListing2, X> : Windows::ApplicationModel::Store::IProductListing2_adaptor<X> { typedef adapt IProductListing2; };
struct IProductListing2 : IProductListing2_raw, generate<IProductListing2> {};

// IProductListing
struct IProductListing_raw : IInspectable {
	virtual STDMETHODIMP _get_ProductId(HSTRING *value);
	virtual STDMETHODIMP _get_FormattedPrice(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
};
template<typename X> struct IProductListing_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductListing_adaptor::FormattedPrice)->_get_FormattedPrice(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FormattedPrice;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductListing_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductListing_adaptor::ProductId)->_get_ProductId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProductId;
	};
	IProductListing_adaptor() {}
};
template<typename X> struct adapt<IProductListing, X> : Windows::ApplicationModel::Store::IProductListing_adaptor<X> { typedef adapt IProductListing; };
struct IProductListing : IProductListing_raw, generate<IProductListing> {};

// IProductListingWithMetadata
struct IProductListingWithMetadata_raw : IInspectable {
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_Keywords(Foundation::Collections::IIterable<HSTRING>* *value);
	virtual STDMETHODIMP _get_ProductType(Store::ProductType *value);
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
	virtual STDMETHODIMP _get_ImageUri(Foundation::Uri* *value);
};
template<typename X> struct IProductListingWithMetadata_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductListingWithMetadata_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IProductListingWithMetadata_adaptor::ImageUri)->_get_ImageUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ImageUri;
		struct : property {
			ptr<Foundation::Collections::IIterable<hstring>> get() { Foundation::Collections::IIterable<HSTRING>* value; hrcheck(enc(&IProductListingWithMetadata_adaptor::Keywords)->_get_Keywords(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IIterable<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IIterable<hstring>> () { return get(); }
			ptr<Foundation::Collections::IIterable<hstring>> operator->() { return get(); }
		} Keywords;
		struct : property {
			Store::ProductType get() { Store::ProductType value; hrcheck(enc(&IProductListingWithMetadata_adaptor::ProductType)->_get_ProductType(&value)); return value; }
			Store::ProductType operator()() { return get(); }
			operator Store::ProductType () { return get(); }
		} ProductType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProductListingWithMetadata_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Tag;
	};
	IProductListingWithMetadata_adaptor() {}
};
template<typename X> struct adapt<IProductListingWithMetadata, X> : Windows::ApplicationModel::Store::IProductListingWithMetadata_adaptor<X> { typedef adapt IProductListingWithMetadata; };
struct IProductListingWithMetadata : IProductListingWithMetadata_raw, generate<IProductListingWithMetadata> {};

// ProductListing
template<typename X> struct statics<ProductListing, X> : X {
	typedef typename X::root_type ProductListing;
};
struct ProductListing : generate<ProductListing> {};

// ICurrentAppStaticsWithFiltering
struct ICurrentAppStaticsWithFiltering : IInspectable {
	virtual STDMETHODIMP _LoadListingInformationByProductIdsAsync(Foundation::Collections::IIterable<HSTRING>* productIds, Foundation::IAsyncOperation<ListingInformation*>* *loadListingOperation);
	virtual STDMETHODIMP _LoadListingInformationByKeywordsAsync(Foundation::Collections::IIterable<HSTRING>* keywords, Foundation::IAsyncOperation<ListingInformation*>* *loadListingOperation);
	virtual STDMETHODIMP _ReportProductFulfillment(HSTRING productId);
};

// ICurrentAppSimulatorStaticsWithFiltering
struct ICurrentAppSimulatorStaticsWithFiltering : IInspectable {
	virtual STDMETHODIMP _LoadListingInformationByProductIdsAsync(Foundation::Collections::IIterable<HSTRING>* productIds, Foundation::IAsyncOperation<ListingInformation*>* *loadListingOperation);
	virtual STDMETHODIMP _LoadListingInformationByKeywordsAsync(Foundation::Collections::IIterable<HSTRING>* keywords, Foundation::IAsyncOperation<ListingInformation*>* *loadListingOperation);
};

// CurrentApp
template<typename> struct CurrentApp_statics {
	static struct _AppId : property {
		Platform::Guid get() { Platform::Guid value; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_get_AppId(&value)); return value; }
		Platform::Guid operator()() { return get(); }
		operator Platform::Guid () { return get(); }
	} AppId;
	static struct _LicenseInformation : property {
		ptr<Store::LicenseInformation> get() { Store::LicenseInformation* value; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_get_LicenseInformation(&value)); return from_abi(value); }
		ptr<Store::LicenseInformation> operator()() { return get(); }
		operator ptr<Store::LicenseInformation> () { return get(); }
		ptr<Store::LicenseInformation> operator->() { return get(); }
	} LicenseInformation;
	static struct _LinkUri : property {
		ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_get_LinkUri(&value)); return from_abi(value); }
		ptr<Foundation::Uri> operator()() { return get(); }
		operator ptr<Foundation::Uri> () { return get(); }
		ptr<Foundation::Uri> operator->() { return get(); }
	} LinkUri;
	static ptr<Foundation::IAsyncOperation<hstring>> GetCustomerPurchaseIdAsync(hstring_ref serviceTicket, hstring_ref publisherUserId) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<CurrentApp, ICurrentApp2Statics>()->_GetCustomerPurchaseIdAsync(serviceTicket, publisherUserId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetCustomerCollectionsIdAsync(hstring_ref serviceTicket, hstring_ref publisherUserId) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<CurrentApp, ICurrentApp2Statics>()->_GetCustomerCollectionsIdAsync(serviceTicket, publisherUserId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetAppPurchaseCampaignIdAsync() { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<CurrentApp, ICurrentAppWithCampaignId>()->_GetAppPurchaseCampaignIdAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<ListingInformation>>> LoadListingInformationByProductIdsAsync(pptr<Foundation::Collections::IIterable<hstring>> productIds) { Foundation::IAsyncOperation<ListingInformation*>* loadListingOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentAppStaticsWithFiltering>()->_LoadListingInformationByProductIdsAsync(to_abi(productIds), &loadListingOperation)); return from_abi(loadListingOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<ListingInformation>>> LoadListingInformationByKeywordsAsync(pptr<Foundation::Collections::IIterable<hstring>> keywords) { Foundation::IAsyncOperation<ListingInformation*>* loadListingOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentAppStaticsWithFiltering>()->_LoadListingInformationByKeywordsAsync(to_abi(keywords), &loadListingOperation)); return from_abi(loadListingOperation); }
	static void ReportProductFulfillment(hstring_ref productId) { hrcheck(get_activation_factory<CurrentApp, ICurrentAppStaticsWithFiltering>()->_ReportProductFulfillment(productId)); }
	static ptr<Foundation::IAsyncOperation<FulfillmentResult>> ReportConsumableFulfillmentAsync(hstring_ref productId, const Platform::Guid& transactionId) { Foundation::IAsyncOperation<FulfillmentResult>* reportConsumableFulfillmentOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentAppWithConsumables>()->_ReportConsumableFulfillmentAsync(productId, transactionId, &reportConsumableFulfillmentOperation)); return from_abi(reportConsumableFulfillmentOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<PurchaseResults>>> RequestProductPurchaseAsync(hstring_ref productId) { Foundation::IAsyncOperation<PurchaseResults*>* requestProductPurchaseWithResultsOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentAppWithConsumables>()->_RequestProductPurchaseWithResultsAsync(productId, &requestProductPurchaseWithResultsOperation)); return from_abi(requestProductPurchaseWithResultsOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<PurchaseResults>>> RequestProductPurchaseAsync(hstring_ref productId, hstring_ref offerId, pptr<ProductPurchaseDisplayProperties> displayProperties) { Foundation::IAsyncOperation<PurchaseResults*>* requestProductPurchaseWithDisplayPropertiesOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentAppWithConsumables>()->_RequestProductPurchaseWithDisplayPropertiesAsync(productId, offerId, displayProperties, &requestProductPurchaseWithDisplayPropertiesOperation)); return from_abi(requestProductPurchaseWithDisplayPropertiesOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<UnfulfilledConsumable>>>>> GetUnfulfilledConsumablesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<UnfulfilledConsumable*>*>* getUnfulfilledConsumablesOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentAppWithConsumables>()->_GetUnfulfilledConsumablesAsync(&getUnfulfilledConsumablesOperation)); return from_abi(getUnfulfilledConsumablesOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> RequestAppPurchaseAsync(bool includeReceipt) { Foundation::IAsyncOperation<HSTRING>* requestAppPurchaseOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_RequestAppPurchaseAsync(includeReceipt, &requestAppPurchaseOperation)); return from_abi(requestAppPurchaseOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> RequestProductPurchaseAsync(hstring_ref productId, bool includeReceipt) { Foundation::IAsyncOperation<HSTRING>* requestProductPurchaseOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_RequestProductPurchaseAsync(productId, includeReceipt, &requestProductPurchaseOperation)); return from_abi(requestProductPurchaseOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<ListingInformation>>> LoadListingInformationAsync() { Foundation::IAsyncOperation<ListingInformation*>* loadListingOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_LoadListingInformationAsync(&loadListingOperation)); return from_abi(loadListingOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetAppReceiptAsync() { Foundation::IAsyncOperation<HSTRING>* appReceiptOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_GetAppReceiptAsync(&appReceiptOperation)); return from_abi(appReceiptOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetProductReceiptAsync(hstring_ref productId) { Foundation::IAsyncOperation<HSTRING>* getProductReceiptOperation; hrcheck(get_activation_factory<CurrentApp, ICurrentApp>()->_GetProductReceiptAsync(productId, &getProductReceiptOperation)); return from_abi(getProductReceiptOperation); }
};
template<typename X> typename CurrentApp_statics<X>::_AppId CurrentApp_statics<X>::AppId;
template<typename X> typename CurrentApp_statics<X>::_LicenseInformation CurrentApp_statics<X>::LicenseInformation;
template<typename X> typename CurrentApp_statics<X>::_LinkUri CurrentApp_statics<X>::LinkUri;

template<typename X> struct statics<CurrentApp, X> : X, Windows::ApplicationModel::Store::CurrentApp_statics<void> {
	typedef typename X::root_type CurrentApp;
};
struct CurrentApp : generate<CurrentApp> {};

// CurrentAppSimulator
template<typename> struct CurrentAppSimulator_statics {
	static struct _AppId : property {
		Platform::Guid get() { Platform::Guid value; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_get_AppId(&value)); return value; }
		Platform::Guid operator()() { return get(); }
		operator Platform::Guid () { return get(); }
	} AppId;
	static struct _LicenseInformation : property {
		ptr<Store::LicenseInformation> get() { Store::LicenseInformation* value; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_get_LicenseInformation(&value)); return from_abi(value); }
		ptr<Store::LicenseInformation> operator()() { return get(); }
		operator ptr<Store::LicenseInformation> () { return get(); }
		ptr<Store::LicenseInformation> operator->() { return get(); }
	} LicenseInformation;
	static struct _LinkUri : property {
		ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_get_LinkUri(&value)); return from_abi(value); }
		ptr<Foundation::Uri> operator()() { return get(); }
		operator ptr<Foundation::Uri> () { return get(); }
		ptr<Foundation::Uri> operator->() { return get(); }
	} LinkUri;
	static ptr<Foundation::IAsyncOperation<hstring>> GetAppPurchaseCampaignIdAsync() { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulatorWithCampaignId>()->_GetAppPurchaseCampaignIdAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<ListingInformation>>> LoadListingInformationByProductIdsAsync(pptr<Foundation::Collections::IIterable<hstring>> productIds) { Foundation::IAsyncOperation<ListingInformation*>* loadListingOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulatorStaticsWithFiltering>()->_LoadListingInformationByProductIdsAsync(to_abi(productIds), &loadListingOperation)); return from_abi(loadListingOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<ListingInformation>>> LoadListingInformationByKeywordsAsync(pptr<Foundation::Collections::IIterable<hstring>> keywords) { Foundation::IAsyncOperation<ListingInformation*>* loadListingOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulatorStaticsWithFiltering>()->_LoadListingInformationByKeywordsAsync(to_abi(keywords), &loadListingOperation)); return from_abi(loadListingOperation); }
	static ptr<Foundation::IAsyncOperation<FulfillmentResult>> ReportConsumableFulfillmentAsync(hstring_ref productId, const Platform::Guid& transactionId) { Foundation::IAsyncOperation<FulfillmentResult>* reportConsumableFulfillmentOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>()->_ReportConsumableFulfillmentAsync(productId, transactionId, &reportConsumableFulfillmentOperation)); return from_abi(reportConsumableFulfillmentOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<PurchaseResults>>> RequestProductPurchaseAsync(hstring_ref productId) { Foundation::IAsyncOperation<PurchaseResults*>* requestProductPurchaseWithResultsOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>()->_RequestProductPurchaseWithResultsAsync(productId, &requestProductPurchaseWithResultsOperation)); return from_abi(requestProductPurchaseWithResultsOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<PurchaseResults>>> RequestProductPurchaseAsync(hstring_ref productId, hstring_ref offerId, pptr<ProductPurchaseDisplayProperties> displayProperties) { Foundation::IAsyncOperation<PurchaseResults*>* requestProductPurchaseWithDisplayPropertiesOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>()->_RequestProductPurchaseWithDisplayPropertiesAsync(productId, offerId, displayProperties, &requestProductPurchaseWithDisplayPropertiesOperation)); return from_abi(requestProductPurchaseWithDisplayPropertiesOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<UnfulfilledConsumable>>>>> GetUnfulfilledConsumablesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<UnfulfilledConsumable*>*>* getUnfulfilledConsumablesOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>()->_GetUnfulfilledConsumablesAsync(&getUnfulfilledConsumablesOperation)); return from_abi(getUnfulfilledConsumablesOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> RequestAppPurchaseAsync(bool includeReceipt) { Foundation::IAsyncOperation<HSTRING>* requestAppPurchaseOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_RequestAppPurchaseAsync(includeReceipt, &requestAppPurchaseOperation)); return from_abi(requestAppPurchaseOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> RequestProductPurchaseAsync(hstring_ref productId, bool includeReceipt) { Foundation::IAsyncOperation<HSTRING>* requestProductPurchaseOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_RequestProductPurchaseAsync(productId, includeReceipt, &requestProductPurchaseOperation)); return from_abi(requestProductPurchaseOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<ListingInformation>>> LoadListingInformationAsync() { Foundation::IAsyncOperation<ListingInformation*>* loadListingOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_LoadListingInformationAsync(&loadListingOperation)); return from_abi(loadListingOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetAppReceiptAsync() { Foundation::IAsyncOperation<HSTRING>* appReceiptOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_GetAppReceiptAsync(&appReceiptOperation)); return from_abi(appReceiptOperation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetProductReceiptAsync(hstring_ref productId) { Foundation::IAsyncOperation<HSTRING>* getProductReceiptOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_GetProductReceiptAsync(productId, &getProductReceiptOperation)); return from_abi(getProductReceiptOperation); }
	static ptr<Foundation::IAsyncAction> ReloadSimulatorAsync(pptr<Storage::StorageFile> simulatorSettingsFile) { Foundation::IAsyncAction* reloadSimulatorOperation; hrcheck(get_activation_factory<CurrentAppSimulator, ICurrentAppSimulator>()->_ReloadSimulatorAsync(simulatorSettingsFile, &reloadSimulatorOperation)); return from_abi(reloadSimulatorOperation); }
};
template<typename X> typename CurrentAppSimulator_statics<X>::_AppId CurrentAppSimulator_statics<X>::AppId;
template<typename X> typename CurrentAppSimulator_statics<X>::_LicenseInformation CurrentAppSimulator_statics<X>::LicenseInformation;
template<typename X> typename CurrentAppSimulator_statics<X>::_LinkUri CurrentAppSimulator_statics<X>::LinkUri;

template<typename X> struct statics<CurrentAppSimulator, X> : X, Windows::ApplicationModel::Store::CurrentAppSimulator_statics<void> {
	typedef typename X::root_type CurrentAppSimulator;
};
struct CurrentAppSimulator : generate<CurrentAppSimulator> {};
}}}
} // namespace iso_winrt
