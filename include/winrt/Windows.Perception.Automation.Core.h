#pragma once
// generated by isopod tools
// namespaces:
// Windows.Perception.Automation.Core

#include "Windows.Perception.Automation.Core.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
struct IGetActivationFactory;
}}

// defs

template<> struct def<Windows::Perception::Automation::Core::ICorePerceptionAutomationStatics> : interface_type<> {};
template<> struct def<Windows::Perception::Automation::Core::CorePerceptionAutomation> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Perception::Automation::Core::PerceptionAutomationCoreContract> : value_type<> {};

// uuids

template<> struct uuid<Windows::Perception::Automation::Core::ICorePerceptionAutomationStatics> { define_guid(0xBB04541, 0x4CE2, 0x4923, 0x9A, 0x76, 0x81, 0x87, 0xEC, 0xC5, 0x91, 0x12);};

// types

namespace Windows { namespace Perception { namespace Automation { namespace Core {

// ICorePerceptionAutomationStatics
struct ICorePerceptionAutomationStatics : IInspectable {
	virtual STDMETHODIMP _SetActivationFactoryProvider(Foundation::IGetActivationFactory* provider);
};

// CorePerceptionAutomation
template<typename> struct CorePerceptionAutomation_statics {
	static void SetActivationFactoryProvider(pptr<Foundation::IGetActivationFactory> provider) { hrcheck(get_activation_factory<CorePerceptionAutomation, ICorePerceptionAutomationStatics>()->_SetActivationFactoryProvider(provider)); }
};

template<typename X> struct statics<CorePerceptionAutomation, X> : X, Windows::Perception::Automation::Core::CorePerceptionAutomation_statics<void> {
	typedef typename X::root_type CorePerceptionAutomation;
};
struct CorePerceptionAutomation : generate<CorePerceptionAutomation> {};
}}}}
} // namespace iso_winrt
