#pragma once
// generated by isopod tools
// namespaces:
// Windows.Networking.PushNotifications

#include "Windows.Networking.PushNotifications.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}
namespace System {
struct User;
}
namespace UI { namespace Notifications {
struct TileNotification;
struct BadgeNotification;
struct ToastNotification;
}}}

// defs

template<> struct def<Windows::Networking::PushNotifications::PushNotificationType> : enum_type<int> {};
template<> struct def<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::IPushNotificationChannel> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::PushNotificationChannel> : class_type<Platform::Object, Windows::Networking::PushNotifications::IPushNotificationChannel> {};
template<> struct def<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics2> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser2> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::PushNotificationChannelManagerForUser> : class_type<Platform::Object, Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser, Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser2> {};
template<> struct def<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics3> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs> : class_type<Platform::Object, Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs> {};
template<> struct def<Windows::Networking::PushNotifications::IRawNotification2> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::IRawNotification> : interface_type<> {};
template<> struct def<Windows::Networking::PushNotifications::RawNotification> : class_type<Platform::Object, Windows::Networking::PushNotifications::IRawNotification, Windows::Networking::PushNotifications::IRawNotification2> {};
template<> struct def<Windows::Networking::PushNotifications::PushNotificationChannelManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics> { define_guid(0x8BAF9B65, 0x77A1, 0x4588, 0xBD, 0x19, 0x86, 0x15, 0x29, 0xA9, 0xDC, 0xF0);};
template<> struct uuid<Windows::Networking::PushNotifications::IPushNotificationChannel> { define_guid(0x2B28102E, 0xEF0B, 0x4F39, 0x9B, 0x8A, 0xA3, 0xC1, 0x94, 0xDE, 0x70, 0x81);};
template<> struct uuid<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics2> { define_guid(0xB444A65D, 0xA7E9, 0x4B28, 0x95, 0xE, 0xF3, 0x75, 0xA9, 0x7, 0xF9, 0xDF);};
template<> struct uuid<Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser2> { define_guid(0xC38B066A, 0x7CC1, 0x4DAC, 0x87, 0xFD, 0xBE, 0x6E, 0x92, 0x4, 0x14, 0xA4);};
template<> struct uuid<Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser> { define_guid(0xA4C45704, 0x1182, 0x42C7, 0x88, 0x90, 0xF5, 0x63, 0xC4, 0x89, 0xD, 0xC4);};
template<> struct uuid<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics3> { define_guid(0x4701FEFE, 0xEDE, 0x4A3F, 0xAE, 0x78, 0xBF, 0xA4, 0x71, 0x49, 0x69, 0x25);};
template<> struct uuid<Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs> { define_guid(0xD1065E0C, 0x36CD, 0x484C, 0xB9, 0x35, 0xA, 0x99, 0xB7, 0x53, 0xCF, 0x0);};
template<> struct uuid<Windows::Networking::PushNotifications::IRawNotification2> { define_guid(0xE6D0CF19, 0xC6F, 0x4CDD, 0x94, 0x24, 0xEE, 0xC5, 0xBE, 0x1, 0x4D, 0x26);};
template<> struct uuid<Windows::Networking::PushNotifications::IRawNotification> { define_guid(0x1A227281, 0x3B79, 0x42AC, 0x99, 0x63, 0x22, 0xAB, 0x0, 0xD4, 0xF0, 0xB7);};

// types

namespace Windows { namespace Networking { namespace PushNotifications {

// IPushNotificationChannelManagerStatics
struct IPushNotificationChannelManagerStatics : IInspectable {
	virtual STDMETHODIMP _CreatePushNotificationChannelForApplicationAsync(Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
	virtual STDMETHODIMP _CreatePushNotificationChannelForApplicationAsyncWithId(HSTRING applicationId, Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
	virtual STDMETHODIMP _CreatePushNotificationChannelForSecondaryTileAsync(HSTRING tileId, Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
};

// IPushNotificationChannel
struct IPushNotificationChannel_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(HSTRING *value);
	virtual STDMETHODIMP _get_ExpirationTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _Close();
	virtual STDMETHODIMP _add_PushNotificationReceived(Foundation::TypedEventHandler<PushNotificationChannel*, PushNotificationReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PushNotificationReceived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IPushNotificationChannel_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPushNotificationChannel_adaptor::ExpirationTime)->_get_ExpirationTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} ExpirationTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPushNotificationChannel_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Uri;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PushNotificationChannel>, ptr<PushNotificationReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPushNotificationChannel_adaptor::PushNotificationReceived)->_add_PushNotificationReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPushNotificationChannel_adaptor::PushNotificationReceived)->_remove_PushNotificationReceived(token)); }
		} PushNotificationReceived;
	};
	void Close() { hrcheck(X::get()->_Close()); }
	IPushNotificationChannel_adaptor() {}
};
template<typename X> struct adapt<IPushNotificationChannel, X> : Windows::Networking::PushNotifications::IPushNotificationChannel_adaptor<X> { typedef adapt IPushNotificationChannel; };
struct IPushNotificationChannel : IPushNotificationChannel_raw, generate<IPushNotificationChannel> {};

// PushNotificationChannel
template<typename X> struct statics<PushNotificationChannel, X> : X {
	typedef typename X::root_type PushNotificationChannel;
};
struct PushNotificationChannel : generate<PushNotificationChannel> {};

// IPushNotificationChannelManagerStatics2
struct IPushNotificationChannelManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, PushNotificationChannelManagerForUser* *result);
};

// IPushNotificationChannelManagerForUser2
struct IPushNotificationChannelManagerForUser2_raw : IInspectable {
	virtual STDMETHODIMP _CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(Storage::Streams::IBuffer* appServerKey, HSTRING channelId, Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
	virtual STDMETHODIMP _CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(Storage::Streams::IBuffer* appServerKey, HSTRING channelId, HSTRING appId, Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
};
template<typename X> struct IPushNotificationChannelManagerForUser2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(pptr<Storage::Streams::IBuffer> appServerKey, hstring_ref channelId) { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(X::get()->_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey, channelId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(pptr<Storage::Streams::IBuffer> appServerKey, hstring_ref channelId, hstring_ref appId) { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(X::get()->_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(appServerKey, channelId, appId, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IPushNotificationChannelManagerForUser2, X> : Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser2_adaptor<X> { typedef adapt IPushNotificationChannelManagerForUser2; };
struct IPushNotificationChannelManagerForUser2 : IPushNotificationChannelManagerForUser2_raw, generate<IPushNotificationChannelManagerForUser2> {};

// IPushNotificationChannelManagerForUser
struct IPushNotificationChannelManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _CreatePushNotificationChannelForApplicationAsync(Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
	virtual STDMETHODIMP _CreatePushNotificationChannelForApplicationAsyncWithId(HSTRING applicationId, Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
	virtual STDMETHODIMP _CreatePushNotificationChannelForSecondaryTileAsync(HSTRING tileId, Foundation::IAsyncOperation<PushNotificationChannel*>* *operation);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IPushNotificationChannelManagerForUser_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IPushNotificationChannelManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreatePushNotificationChannelForApplicationAsync() { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(X::get()->_CreatePushNotificationChannelForApplicationAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreatePushNotificationChannelForApplicationAsync(hstring_ref applicationId) { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(X::get()->_CreatePushNotificationChannelForApplicationAsyncWithId(applicationId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreatePushNotificationChannelForSecondaryTileAsync(hstring_ref tileId) { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(X::get()->_CreatePushNotificationChannelForSecondaryTileAsync(tileId, &operation)); return from_abi(operation); }
	IPushNotificationChannelManagerForUser_adaptor() {}
};
template<typename X> struct adapt<IPushNotificationChannelManagerForUser, X> : Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser_adaptor<X> { typedef adapt IPushNotificationChannelManagerForUser; };
struct IPushNotificationChannelManagerForUser : IPushNotificationChannelManagerForUser_raw, generate<IPushNotificationChannelManagerForUser> {};

// PushNotificationChannelManagerForUser
template<typename X> struct statics<PushNotificationChannelManagerForUser, X> : X {
	typedef typename X::root_type PushNotificationChannelManagerForUser;
};
struct PushNotificationChannelManagerForUser : generate<PushNotificationChannelManagerForUser> {
	using IPushNotificationChannelManagerForUser::CreatePushNotificationChannelForApplicationAsync;
	using IPushNotificationChannelManagerForUser2::CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync;
};

// IPushNotificationChannelManagerStatics3
struct IPushNotificationChannelManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _GetDefault(PushNotificationChannelManagerForUser* *value);
};

// IPushNotificationReceivedEventArgs
struct IPushNotificationReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _put_Cancel(bool value);
	virtual STDMETHODIMP _get_Cancel(bool *value);
	virtual STDMETHODIMP _get_NotificationType(PushNotificationType *value);
	virtual STDMETHODIMP _get_ToastNotification(UI::Notifications::ToastNotification* *value);
	virtual STDMETHODIMP _get_TileNotification(UI::Notifications::TileNotification* *value);
	virtual STDMETHODIMP _get_BadgeNotification(UI::Notifications::BadgeNotification* *value);
	virtual STDMETHODIMP _get_RawNotification(PushNotifications::RawNotification* *value);
};
template<typename X> struct IPushNotificationReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UI::Notifications::BadgeNotification> get() { UI::Notifications::BadgeNotification* value; hrcheck(enc(&IPushNotificationReceivedEventArgs_adaptor::BadgeNotification)->_get_BadgeNotification(&value)); return from_abi(value); }
			ptr<UI::Notifications::BadgeNotification> operator()() { return get(); }
			operator ptr<UI::Notifications::BadgeNotification> () { return get(); }
			ptr<UI::Notifications::BadgeNotification> operator->() { return get(); }
		} BadgeNotification;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPushNotificationReceivedEventArgs_adaptor::Cancel)->_get_Cancel(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPushNotificationReceivedEventArgs_adaptor::Cancel)->_put_Cancel(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Cancel;
		struct : property {
			PushNotificationType get() { PushNotificationType value; hrcheck(enc(&IPushNotificationReceivedEventArgs_adaptor::NotificationType)->_get_NotificationType(&value)); return value; }
			PushNotificationType operator()() { return get(); }
			operator PushNotificationType () { return get(); }
		} NotificationType;
		struct : property {
			ptr<PushNotifications::RawNotification> get() { PushNotifications::RawNotification* value; hrcheck(enc(&IPushNotificationReceivedEventArgs_adaptor::RawNotification)->_get_RawNotification(&value)); return from_abi(value); }
			ptr<PushNotifications::RawNotification> operator()() { return get(); }
			operator ptr<PushNotifications::RawNotification> () { return get(); }
			ptr<PushNotifications::RawNotification> operator->() { return get(); }
		} RawNotification;
		struct : property {
			ptr<UI::Notifications::TileNotification> get() { UI::Notifications::TileNotification* value; hrcheck(enc(&IPushNotificationReceivedEventArgs_adaptor::TileNotification)->_get_TileNotification(&value)); return from_abi(value); }
			ptr<UI::Notifications::TileNotification> operator()() { return get(); }
			operator ptr<UI::Notifications::TileNotification> () { return get(); }
			ptr<UI::Notifications::TileNotification> operator->() { return get(); }
		} TileNotification;
		struct : property {
			ptr<UI::Notifications::ToastNotification> get() { UI::Notifications::ToastNotification* value; hrcheck(enc(&IPushNotificationReceivedEventArgs_adaptor::ToastNotification)->_get_ToastNotification(&value)); return from_abi(value); }
			ptr<UI::Notifications::ToastNotification> operator()() { return get(); }
			operator ptr<UI::Notifications::ToastNotification> () { return get(); }
			ptr<UI::Notifications::ToastNotification> operator->() { return get(); }
		} ToastNotification;
	};
	IPushNotificationReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPushNotificationReceivedEventArgs, X> : Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs_adaptor<X> { typedef adapt IPushNotificationReceivedEventArgs; };
struct IPushNotificationReceivedEventArgs : IPushNotificationReceivedEventArgs_raw, generate<IPushNotificationReceivedEventArgs> {};

// PushNotificationReceivedEventArgs
template<typename X> struct statics<PushNotificationReceivedEventArgs, X> : X {
	typedef typename X::root_type PushNotificationReceivedEventArgs;
};
struct PushNotificationReceivedEventArgs : generate<PushNotificationReceivedEventArgs> {};

// IRawNotification2
struct IRawNotification2_raw : IInspectable {
	virtual STDMETHODIMP _get_Headers(Foundation::Collections::IMapView<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_ChannelId(HSTRING *value);
};
template<typename X> struct IRawNotification2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRawNotification2_adaptor::ChannelId)->_get_ChannelId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ChannelId;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, hstring>> get() { Foundation::Collections::IMapView<HSTRING, HSTRING>* value; hrcheck(enc(&IRawNotification2_adaptor::Headers)->_get_Headers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, hstring>> operator->() { return get(); }
		} Headers;
	};
	IRawNotification2_adaptor() {}
};
template<typename X> struct adapt<IRawNotification2, X> : Windows::Networking::PushNotifications::IRawNotification2_adaptor<X> { typedef adapt IRawNotification2; };
struct IRawNotification2 : IRawNotification2_raw, generate<IRawNotification2> {};

// IRawNotification
struct IRawNotification_raw : IInspectable {
	virtual STDMETHODIMP _get_Content(HSTRING *value);
};
template<typename X> struct IRawNotification_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRawNotification_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Content;
	};
	IRawNotification_adaptor() {}
};
template<typename X> struct adapt<IRawNotification, X> : Windows::Networking::PushNotifications::IRawNotification_adaptor<X> { typedef adapt IRawNotification; };
struct IRawNotification : IRawNotification_raw, generate<IRawNotification> {};

// RawNotification
template<typename X> struct statics<RawNotification, X> : X {
	typedef typename X::root_type RawNotification;
};
struct RawNotification : generate<RawNotification> {};

// PushNotificationChannelManager
template<typename> struct PushNotificationChannelManager_statics {
	static ptr<PushNotificationChannelManagerForUser> GetDefault() { PushNotificationChannelManagerForUser* value; hrcheck(get_activation_factory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics3>()->_GetDefault(&value)); return from_abi(value); }
	static ptr<PushNotificationChannelManagerForUser> GetForUser(pptr<System::User> user) { PushNotificationChannelManagerForUser* result; hrcheck(get_activation_factory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics2>()->_GetForUser(user, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreatePushNotificationChannelForApplicationAsync() { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(get_activation_factory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>()->_CreatePushNotificationChannelForApplicationAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreatePushNotificationChannelForApplicationAsync(hstring_ref applicationId) { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(get_activation_factory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>()->_CreatePushNotificationChannelForApplicationAsyncWithId(applicationId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<PushNotificationChannel>>> CreatePushNotificationChannelForSecondaryTileAsync(hstring_ref tileId) { Foundation::IAsyncOperation<PushNotificationChannel*>* operation; hrcheck(get_activation_factory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>()->_CreatePushNotificationChannelForSecondaryTileAsync(tileId, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<PushNotificationChannelManager, X> : X, Windows::Networking::PushNotifications::PushNotificationChannelManager_statics<void> {
	typedef typename X::root_type PushNotificationChannelManager;
};
struct PushNotificationChannelManager : generate<PushNotificationChannelManager> {};
}}}
} // namespace iso_winrt
