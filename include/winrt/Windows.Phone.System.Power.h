#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.System.Power

#include "Windows.Phone.System.Power.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Phone::System::Power::PowerSavingMode> : enum_type<int> {};
template<> struct def<Windows::Phone::System::Power::IPowerManagerStatics> : interface_type<> {};
template<> struct def<Windows::Phone::System::Power::IPowerManagerStatics2> : interface_type<> {};
template<> struct def<Windows::Phone::System::Power::PowerManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Phone::System::Power::IPowerManagerStatics> { define_guid(0x25DE8FD0, 0x1C5B, 0x11E1, 0xBD, 0xDB, 0x8, 0x0, 0x20, 0xC, 0x9A, 0x66);};
template<> struct uuid<Windows::Phone::System::Power::IPowerManagerStatics2> { define_guid(0x596236CF, 0x1918, 0x4551, 0xA4, 0x66, 0xC5, 0x1A, 0xAE, 0x37, 0x3B, 0xF8);};

// types

namespace Windows { namespace Phone { namespace System { namespace Power {

// IPowerManagerStatics
struct IPowerManagerStatics : IInspectable {
	virtual STDMETHODIMP _get_PowerSavingMode(Power::PowerSavingMode *value);
	virtual STDMETHODIMP _add_PowerSavingModeChanged(Foundation::EventHandler<IInspectable*>* changeHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PowerSavingModeChanged(Foundation::EventRegistrationToken token);
};

// IPowerManagerStatics2
struct IPowerManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _get_PowerSavingModeEnabled(bool *value);
};

// PowerManager
template<typename> struct PowerManager_statics {
	static struct _PowerSavingMode : property {
		Power::PowerSavingMode get() { Power::PowerSavingMode value; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_get_PowerSavingMode(&value)); return value; }
		Power::PowerSavingMode operator()() { return get(); }
		operator Power::PowerSavingMode () { return get(); }
	} PowerSavingMode;
	static struct _PowerSavingModeChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> changeHandler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_add_PowerSavingModeChanged(to_abi(changeHandler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_remove_PowerSavingModeChanged(token)); }
	} PowerSavingModeChanged;
	static struct _PowerSavingModeEnabled : property {
		bool get() { bool value; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics2>()->_get_PowerSavingModeEnabled(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} PowerSavingModeEnabled;
};
template<typename X> typename PowerManager_statics<X>::_PowerSavingMode PowerManager_statics<X>::PowerSavingMode;
template<typename X> typename PowerManager_statics<X>::_PowerSavingModeChanged PowerManager_statics<X>::PowerSavingModeChanged;
template<typename X> typename PowerManager_statics<X>::_PowerSavingModeEnabled PowerManager_statics<X>::PowerSavingModeEnabled;

template<typename X> struct statics<PowerManager, X> : X, Windows::Phone::System::Power::PowerManager_statics<void> {
	typedef typename X::root_type PowerManager;
};
struct PowerManager : generate<PowerManager> {};
}}}}
} // namespace iso_winrt
