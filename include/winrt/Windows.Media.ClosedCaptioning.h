#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.ClosedCaptioning

#include "Windows.Media.ClosedCaptioning.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Media::ClosedCaptioning::ClosedCaptionEdgeEffect> : enum_type<int> {};
template<> struct def<Windows::Media::ClosedCaptioning::ClosedCaptionOpacity> : enum_type<int> {};
template<> struct def<Windows::Media::ClosedCaptioning::ClosedCaptionColor> : enum_type<int> {};
template<> struct def<Windows::Media::ClosedCaptioning::ClosedCaptionSize> : enum_type<int> {};
template<> struct def<Windows::Media::ClosedCaptioning::ClosedCaptionStyle> : enum_type<int> {};
template<> struct def<Windows::Media::ClosedCaptioning::IClosedCaptionPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Media::ClosedCaptioning::ClosedCaptionProperties> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Media::ClosedCaptioning::IClosedCaptionPropertiesStatics> { define_guid(0x10AA1F84, 0xCC30, 0x4141, 0xB5, 0x3, 0x52, 0x72, 0x28, 0x9E, 0xC, 0x20);};

// types

namespace Windows { namespace Media { namespace ClosedCaptioning {

// IClosedCaptionPropertiesStatics
struct IClosedCaptionPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_FontColor(ClosedCaptionColor *value);
	virtual STDMETHODIMP _get_ComputedFontColor(UI::Color *value);
	virtual STDMETHODIMP _get_FontOpacity(ClosedCaptionOpacity *value);
	virtual STDMETHODIMP _get_FontSize(ClosedCaptionSize *value);
	virtual STDMETHODIMP _get_FontStyle(ClosedCaptionStyle *value);
	virtual STDMETHODIMP _get_FontEffect(ClosedCaptionEdgeEffect *value);
	virtual STDMETHODIMP _get_BackgroundColor(ClosedCaptionColor *value);
	virtual STDMETHODIMP _get_ComputedBackgroundColor(UI::Color *value);
	virtual STDMETHODIMP _get_BackgroundOpacity(ClosedCaptionOpacity *value);
	virtual STDMETHODIMP _get_RegionColor(ClosedCaptionColor *value);
	virtual STDMETHODIMP _get_ComputedRegionColor(UI::Color *value);
	virtual STDMETHODIMP _get_RegionOpacity(ClosedCaptionOpacity *value);
};

// ClosedCaptionProperties
template<typename> struct ClosedCaptionProperties_statics {
	static struct _BackgroundColor : property {
		ClosedCaptionColor get() { ClosedCaptionColor value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_BackgroundColor(&value)); return value; }
		ClosedCaptionColor operator()() { return get(); }
		operator ClosedCaptionColor () { return get(); }
	} BackgroundColor;
	static struct _BackgroundOpacity : property {
		ClosedCaptionOpacity get() { ClosedCaptionOpacity value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_BackgroundOpacity(&value)); return value; }
		ClosedCaptionOpacity operator()() { return get(); }
		operator ClosedCaptionOpacity () { return get(); }
	} BackgroundOpacity;
	static struct _ComputedBackgroundColor : property {
		UI::Color get() { UI::Color value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_ComputedBackgroundColor(&value)); return value; }
		UI::Color operator()() { return get(); }
		operator UI::Color () { return get(); }
	} ComputedBackgroundColor;
	static struct _ComputedFontColor : property {
		UI::Color get() { UI::Color value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_ComputedFontColor(&value)); return value; }
		UI::Color operator()() { return get(); }
		operator UI::Color () { return get(); }
	} ComputedFontColor;
	static struct _ComputedRegionColor : property {
		UI::Color get() { UI::Color value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_ComputedRegionColor(&value)); return value; }
		UI::Color operator()() { return get(); }
		operator UI::Color () { return get(); }
	} ComputedRegionColor;
	static struct _FontColor : property {
		ClosedCaptionColor get() { ClosedCaptionColor value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_FontColor(&value)); return value; }
		ClosedCaptionColor operator()() { return get(); }
		operator ClosedCaptionColor () { return get(); }
	} FontColor;
	static struct _FontEffect : property {
		ClosedCaptionEdgeEffect get() { ClosedCaptionEdgeEffect value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_FontEffect(&value)); return value; }
		ClosedCaptionEdgeEffect operator()() { return get(); }
		operator ClosedCaptionEdgeEffect () { return get(); }
	} FontEffect;
	static struct _FontOpacity : property {
		ClosedCaptionOpacity get() { ClosedCaptionOpacity value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_FontOpacity(&value)); return value; }
		ClosedCaptionOpacity operator()() { return get(); }
		operator ClosedCaptionOpacity () { return get(); }
	} FontOpacity;
	static struct _FontSize : property {
		ClosedCaptionSize get() { ClosedCaptionSize value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_FontSize(&value)); return value; }
		ClosedCaptionSize operator()() { return get(); }
		operator ClosedCaptionSize () { return get(); }
	} FontSize;
	static struct _FontStyle : property {
		ClosedCaptionStyle get() { ClosedCaptionStyle value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_FontStyle(&value)); return value; }
		ClosedCaptionStyle operator()() { return get(); }
		operator ClosedCaptionStyle () { return get(); }
	} FontStyle;
	static struct _RegionColor : property {
		ClosedCaptionColor get() { ClosedCaptionColor value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_RegionColor(&value)); return value; }
		ClosedCaptionColor operator()() { return get(); }
		operator ClosedCaptionColor () { return get(); }
	} RegionColor;
	static struct _RegionOpacity : property {
		ClosedCaptionOpacity get() { ClosedCaptionOpacity value; hrcheck(get_activation_factory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>()->_get_RegionOpacity(&value)); return value; }
		ClosedCaptionOpacity operator()() { return get(); }
		operator ClosedCaptionOpacity () { return get(); }
	} RegionOpacity;
};
template<typename X> typename ClosedCaptionProperties_statics<X>::_BackgroundColor ClosedCaptionProperties_statics<X>::BackgroundColor;
template<typename X> typename ClosedCaptionProperties_statics<X>::_BackgroundOpacity ClosedCaptionProperties_statics<X>::BackgroundOpacity;
template<typename X> typename ClosedCaptionProperties_statics<X>::_ComputedBackgroundColor ClosedCaptionProperties_statics<X>::ComputedBackgroundColor;
template<typename X> typename ClosedCaptionProperties_statics<X>::_ComputedFontColor ClosedCaptionProperties_statics<X>::ComputedFontColor;
template<typename X> typename ClosedCaptionProperties_statics<X>::_ComputedRegionColor ClosedCaptionProperties_statics<X>::ComputedRegionColor;
template<typename X> typename ClosedCaptionProperties_statics<X>::_FontColor ClosedCaptionProperties_statics<X>::FontColor;
template<typename X> typename ClosedCaptionProperties_statics<X>::_FontEffect ClosedCaptionProperties_statics<X>::FontEffect;
template<typename X> typename ClosedCaptionProperties_statics<X>::_FontOpacity ClosedCaptionProperties_statics<X>::FontOpacity;
template<typename X> typename ClosedCaptionProperties_statics<X>::_FontSize ClosedCaptionProperties_statics<X>::FontSize;
template<typename X> typename ClosedCaptionProperties_statics<X>::_FontStyle ClosedCaptionProperties_statics<X>::FontStyle;
template<typename X> typename ClosedCaptionProperties_statics<X>::_RegionColor ClosedCaptionProperties_statics<X>::RegionColor;
template<typename X> typename ClosedCaptionProperties_statics<X>::_RegionOpacity ClosedCaptionProperties_statics<X>::RegionOpacity;

template<typename X> struct statics<ClosedCaptionProperties, X> : X, Windows::Media::ClosedCaptioning::ClosedCaptionProperties_statics<void> {
	typedef typename X::root_type ClosedCaptionProperties;
};
struct ClosedCaptionProperties : generate<ClosedCaptionProperties> {};
}}}
} // namespace iso_winrt
