#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.Diagnostics

#include "Windows.System.Diagnostics.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Data { namespace Json {
struct JsonObject;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
struct ValueSet;
}}
namespace System {
struct AppDiagnosticInfo;
struct User;
}}

// defs

template<> struct def<Windows::System::Diagnostics::IProcessDiagnosticInfo> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::IProcessDiagnosticInfoStatics2> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::IProcessDiagnosticInfoStatics> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::IProcessDiagnosticInfo2> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ProcessDiagnosticInfo> : class_type<Platform::Object, Windows::System::Diagnostics::IProcessDiagnosticInfo, Windows::System::Diagnostics::IProcessDiagnosticInfo2> {};
template<> struct def<Windows::System::Diagnostics::IProcessDiskUsage> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ProcessDiskUsage> : class_type<Platform::Object, Windows::System::Diagnostics::IProcessDiskUsage> {};
template<> struct def<Windows::System::Diagnostics::IProcessMemoryUsage> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ProcessMemoryUsage> : class_type<Platform::Object, Windows::System::Diagnostics::IProcessMemoryUsage> {};
template<> struct def<Windows::System::Diagnostics::IProcessCpuUsage> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ProcessCpuUsage> : class_type<Platform::Object, Windows::System::Diagnostics::IProcessCpuUsage> {};
template<> struct def<Windows::System::Diagnostics::IProcessMemoryUsageReport> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ProcessMemoryUsageReport> : class_type<Platform::Object, Windows::System::Diagnostics::IProcessMemoryUsageReport> {};
template<> struct def<Windows::System::Diagnostics::IProcessDiskUsageReport> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ProcessDiskUsageReport> : class_type<Platform::Object, Windows::System::Diagnostics::IProcessDiskUsageReport> {};
template<> struct def<Windows::System::Diagnostics::IProcessCpuUsageReport> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ProcessCpuUsageReport> : class_type<Platform::Object, Windows::System::Diagnostics::IProcessCpuUsageReport> {};
template<> struct def<Windows::System::Diagnostics::ISystemDiagnosticInfo> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::ISystemMemoryUsage> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::SystemMemoryUsage> : class_type<Platform::Object, Windows::System::Diagnostics::ISystemMemoryUsage> {};
template<> struct def<Windows::System::Diagnostics::ISystemCpuUsage> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::SystemCpuUsage> : class_type<Platform::Object, Windows::System::Diagnostics::ISystemCpuUsage> {};
template<> struct def<Windows::System::Diagnostics::ISystemDiagnosticInfoStatics> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::SystemDiagnosticInfo> : class_type<Platform::Object, Windows::System::Diagnostics::ISystemDiagnosticInfo> {};
template<> struct def<Windows::System::Diagnostics::ISystemMemoryUsageReport> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::SystemMemoryUsageReport> : class_type<Platform::Object, Windows::System::Diagnostics::ISystemMemoryUsageReport> {};
template<> struct def<Windows::System::Diagnostics::ISystemCpuUsageReport> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::SystemCpuUsageReport> : class_type<Platform::Object, Windows::System::Diagnostics::ISystemCpuUsageReport> {};
template<> struct def<Windows::System::Diagnostics::DiagnosticActionState> : enum_type<int> {};
template<> struct def<Windows::System::Diagnostics::IDiagnosticActionResult> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::IDiagnosticInvokerStatics> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::IDiagnosticInvoker2> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::IDiagnosticInvoker> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::DiagnosticInvoker> : class_type<Platform::Object, Windows::System::Diagnostics::IDiagnosticInvoker, Windows::System::Diagnostics::IDiagnosticInvoker2> {};
template<> struct def<Windows::System::Diagnostics::DiagnosticActionResult> : class_type<Platform::Object, Windows::System::Diagnostics::IDiagnosticActionResult> {};

// uuids

template<> struct uuid<Windows::System::Diagnostics::IProcessDiagnosticInfo> { define_guid(0xE830B04B, 0x300E, 0x4EE6, 0xA0, 0xAB, 0x5B, 0x5F, 0x52, 0x31, 0xB4, 0x34);};
template<> struct uuid<Windows::System::Diagnostics::IProcessDiagnosticInfoStatics2> { define_guid(0x4A869897, 0x9899, 0x4A44, 0xA2, 0x9B, 0x9, 0x16, 0x63, 0xBE, 0x9, 0xB6);};
template<> struct uuid<Windows::System::Diagnostics::IProcessDiagnosticInfoStatics> { define_guid(0x2F41B260, 0xB49F, 0x428C, 0xAA, 0xE, 0x84, 0x74, 0x4F, 0x49, 0xCA, 0x95);};
template<> struct uuid<Windows::System::Diagnostics::IProcessDiagnosticInfo2> { define_guid(0x9558CB1A, 0x3D0B, 0x49EC, 0xAB, 0x70, 0x4F, 0x7A, 0x11, 0x28, 0x5, 0xDE);};
template<> struct uuid<Windows::System::Diagnostics::IProcessDiskUsage> { define_guid(0x5AD78BFD, 0x7E51, 0x4E53, 0xBF, 0xAA, 0x5A, 0x6E, 0xE1, 0xAA, 0xBB, 0xF8);};
template<> struct uuid<Windows::System::Diagnostics::IProcessMemoryUsage> { define_guid(0xF50B229B, 0x827C, 0x42B7, 0xB0, 0x7C, 0xE, 0x32, 0x62, 0x7E, 0x6B, 0x3E);};
template<> struct uuid<Windows::System::Diagnostics::IProcessCpuUsage> { define_guid(0xBBB2472, 0xC8BF, 0x423A, 0xA8, 0x10, 0xB5, 0x59, 0xAE, 0x43, 0x54, 0xE2);};
template<> struct uuid<Windows::System::Diagnostics::IProcessMemoryUsageReport> { define_guid(0xC2C77CBA, 0x1951, 0x4685, 0x85, 0x32, 0x7E, 0x74, 0x9E, 0xCF, 0x8E, 0xEB);};
template<> struct uuid<Windows::System::Diagnostics::IProcessDiskUsageReport> { define_guid(0x401627FD, 0x535D, 0x4C1F, 0x81, 0xB8, 0xDA, 0x54, 0xE1, 0xBE, 0x63, 0x5E);};
template<> struct uuid<Windows::System::Diagnostics::IProcessCpuUsageReport> { define_guid(0x8A6D9CAC, 0x3987, 0x4E2F, 0xA1, 0x19, 0x6B, 0x5F, 0xA2, 0x14, 0xF1, 0xB4);};
template<> struct uuid<Windows::System::Diagnostics::ISystemDiagnosticInfo> { define_guid(0xA290FE05, 0xDFF3, 0x407F, 0x9A, 0x1B, 0xB, 0x2B, 0x31, 0x7C, 0xA8, 0x0);};
template<> struct uuid<Windows::System::Diagnostics::ISystemMemoryUsage> { define_guid(0x17FFC595, 0x1702, 0x49CF, 0xAA, 0x27, 0x2F, 0xA, 0x32, 0x59, 0x14, 0x4);};
template<> struct uuid<Windows::System::Diagnostics::ISystemCpuUsage> { define_guid(0x6037B3AC, 0x2D6, 0x4234, 0x83, 0x62, 0x7F, 0xE3, 0xAD, 0xC8, 0x1F, 0x5F);};
template<> struct uuid<Windows::System::Diagnostics::ISystemDiagnosticInfoStatics> { define_guid(0xD404AC21, 0xFC7D, 0x45F0, 0x9A, 0x3F, 0x39, 0x20, 0x3A, 0xED, 0x9F, 0x7E);};
template<> struct uuid<Windows::System::Diagnostics::ISystemMemoryUsageReport> { define_guid(0x38663C87, 0x2A9F, 0x403A, 0xBD, 0x19, 0x2C, 0xF3, 0xE8, 0x16, 0x95, 0x0);};
template<> struct uuid<Windows::System::Diagnostics::ISystemCpuUsageReport> { define_guid(0x2C26D0B2, 0x9483, 0x4F62, 0xAB, 0x57, 0x82, 0xB2, 0x9D, 0x97, 0x19, 0xB8);};
template<> struct uuid<Windows::System::Diagnostics::IDiagnosticActionResult> { define_guid(0xC265A296, 0xE73B, 0x4097, 0xB2, 0x8F, 0x34, 0x42, 0xF0, 0x3D, 0xD8, 0x31);};
template<> struct uuid<Windows::System::Diagnostics::IDiagnosticInvokerStatics> { define_guid(0x5CFAD8DE, 0xF15C, 0x4554, 0xA8, 0x13, 0xC1, 0x13, 0xC3, 0x88, 0x1B, 0x9);};
template<> struct uuid<Windows::System::Diagnostics::IDiagnosticInvoker2> { define_guid(0xE3BF945C, 0x155A, 0x4B52, 0xA8, 0xEC, 0x7, 0xC, 0x44, 0xF9, 0x50, 0x0);};
template<> struct uuid<Windows::System::Diagnostics::IDiagnosticInvoker> { define_guid(0x187B270A, 0x2E3, 0x4F86, 0x84, 0xFC, 0xFD, 0xD8, 0x92, 0xB5, 0x94, 0xF);};

// types

namespace Windows { namespace System { namespace Diagnostics {

// IProcessDiagnosticInfo
struct IProcessDiagnosticInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_ProcessId(unsigned *value);
	virtual STDMETHODIMP _get_ExecutableFileName(HSTRING *value);
	virtual STDMETHODIMP _get_Parent(ProcessDiagnosticInfo* *value);
	virtual STDMETHODIMP _get_ProcessStartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_DiskUsage(ProcessDiskUsage* *value);
	virtual STDMETHODIMP _get_MemoryUsage(ProcessMemoryUsage* *value);
	virtual STDMETHODIMP _get_CpuUsage(ProcessCpuUsage* *value);
};
template<typename X> struct IProcessDiagnosticInfo_adaptor : X {
	union {
		struct : property {
			ptr<ProcessCpuUsage> get() { ProcessCpuUsage* value; hrcheck(enc(&IProcessDiagnosticInfo_adaptor::CpuUsage)->_get_CpuUsage(&value)); return from_abi(value); }
			ptr<ProcessCpuUsage> operator()() { return get(); }
			operator ptr<ProcessCpuUsage> () { return get(); }
			ptr<ProcessCpuUsage> operator->() { return get(); }
		} CpuUsage;
		struct : property {
			ptr<ProcessDiskUsage> get() { ProcessDiskUsage* value; hrcheck(enc(&IProcessDiagnosticInfo_adaptor::DiskUsage)->_get_DiskUsage(&value)); return from_abi(value); }
			ptr<ProcessDiskUsage> operator()() { return get(); }
			operator ptr<ProcessDiskUsage> () { return get(); }
			ptr<ProcessDiskUsage> operator->() { return get(); }
		} DiskUsage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProcessDiagnosticInfo_adaptor::ExecutableFileName)->_get_ExecutableFileName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ExecutableFileName;
		struct : property {
			ptr<ProcessMemoryUsage> get() { ProcessMemoryUsage* value; hrcheck(enc(&IProcessDiagnosticInfo_adaptor::MemoryUsage)->_get_MemoryUsage(&value)); return from_abi(value); }
			ptr<ProcessMemoryUsage> operator()() { return get(); }
			operator ptr<ProcessMemoryUsage> () { return get(); }
			ptr<ProcessMemoryUsage> operator->() { return get(); }
		} MemoryUsage;
		struct : property {
			ptr<ProcessDiagnosticInfo> get() { ProcessDiagnosticInfo* value; hrcheck(enc(&IProcessDiagnosticInfo_adaptor::Parent)->_get_Parent(&value)); return from_abi(value); }
			ptr<ProcessDiagnosticInfo> operator()() { return get(); }
			operator ptr<ProcessDiagnosticInfo> () { return get(); }
			ptr<ProcessDiagnosticInfo> operator->() { return get(); }
		} Parent;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IProcessDiagnosticInfo_adaptor::ProcessId)->_get_ProcessId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ProcessId;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IProcessDiagnosticInfo_adaptor::ProcessStartTime)->_get_ProcessStartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} ProcessStartTime;
	};
	IProcessDiagnosticInfo_adaptor() {}
};
template<typename X> struct adapt<IProcessDiagnosticInfo, X> : Windows::System::Diagnostics::IProcessDiagnosticInfo_adaptor<X> { typedef adapt IProcessDiagnosticInfo; };
struct IProcessDiagnosticInfo : IProcessDiagnosticInfo_raw, generate<IProcessDiagnosticInfo> {};

// IProcessDiagnosticInfoStatics2
struct IProcessDiagnosticInfoStatics2 : IInspectable {
	virtual STDMETHODIMP _TryGetForProcessId(unsigned processId, ProcessDiagnosticInfo* *result);
};

// IProcessDiagnosticInfoStatics
struct IProcessDiagnosticInfoStatics : IInspectable {
	virtual STDMETHODIMP _GetForProcesses(Foundation::Collections::IVectorView<ProcessDiagnosticInfo*>* *processes);
	virtual STDMETHODIMP _GetForCurrentProcess(ProcessDiagnosticInfo* *processes);
};

// IProcessDiagnosticInfo2
struct IProcessDiagnosticInfo2_raw : IInspectable {
	virtual STDMETHODIMP _GetAppDiagnosticInfos(Foundation::Collections::IVector<AppDiagnosticInfo*>* *result);
	virtual STDMETHODIMP _get_IsPackaged(bool *value);
};
template<typename X> struct IProcessDiagnosticInfo2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IProcessDiagnosticInfo2_adaptor::IsPackaged)->_get_IsPackaged(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPackaged;
	};
	ptr<Foundation::Collections::IVector<ptr<AppDiagnosticInfo>>> GetAppDiagnosticInfos() { Foundation::Collections::IVector<AppDiagnosticInfo*>* result; hrcheck(X::get()->_GetAppDiagnosticInfos(&result)); return from_abi(result); }
	IProcessDiagnosticInfo2_adaptor() {}
};
template<typename X> struct adapt<IProcessDiagnosticInfo2, X> : Windows::System::Diagnostics::IProcessDiagnosticInfo2_adaptor<X> { typedef adapt IProcessDiagnosticInfo2; };
struct IProcessDiagnosticInfo2 : IProcessDiagnosticInfo2_raw, generate<IProcessDiagnosticInfo2> {};

// ProcessDiagnosticInfo
template<typename> struct ProcessDiagnosticInfo_statics {
	static ptr<ProcessDiagnosticInfo> TryGetForProcessId(unsigned processId) { ProcessDiagnosticInfo* result; hrcheck(get_activation_factory<ProcessDiagnosticInfo, IProcessDiagnosticInfoStatics2>()->_TryGetForProcessId(processId, &result)); return from_abi(result); }
	static ptr<Foundation::Collections::IVectorView<ptr<ProcessDiagnosticInfo>>> GetForProcesses() { Foundation::Collections::IVectorView<ProcessDiagnosticInfo*>* processes; hrcheck(get_activation_factory<ProcessDiagnosticInfo, IProcessDiagnosticInfoStatics>()->_GetForProcesses(&processes)); return from_abi(processes); }
	static ptr<ProcessDiagnosticInfo> GetForCurrentProcess() { ProcessDiagnosticInfo* processes; hrcheck(get_activation_factory<ProcessDiagnosticInfo, IProcessDiagnosticInfoStatics>()->_GetForCurrentProcess(&processes)); return from_abi(processes); }
};

template<typename X> struct statics<ProcessDiagnosticInfo, X> : X, Windows::System::Diagnostics::ProcessDiagnosticInfo_statics<void> {
	typedef typename X::root_type ProcessDiagnosticInfo;
};
struct ProcessDiagnosticInfo : generate<ProcessDiagnosticInfo> {};

// IProcessDiskUsage
struct IProcessDiskUsage_raw : IInspectable {
	virtual STDMETHODIMP _GetReport(ProcessDiskUsageReport* *value);
};
template<typename X> struct IProcessDiskUsage_adaptor : X {
	ptr<ProcessDiskUsageReport> GetReport() { ProcessDiskUsageReport* value; hrcheck(X::get()->_GetReport(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IProcessDiskUsage, X> : Windows::System::Diagnostics::IProcessDiskUsage_adaptor<X> { typedef adapt IProcessDiskUsage; };
struct IProcessDiskUsage : IProcessDiskUsage_raw, generate<IProcessDiskUsage> {};

// ProcessDiskUsage
template<typename X> struct statics<ProcessDiskUsage, X> : X {
	typedef typename X::root_type ProcessDiskUsage;
};
struct ProcessDiskUsage : generate<ProcessDiskUsage> {};

// IProcessMemoryUsage
struct IProcessMemoryUsage_raw : IInspectable {
	virtual STDMETHODIMP _GetReport(ProcessMemoryUsageReport* *value);
};
template<typename X> struct IProcessMemoryUsage_adaptor : X {
	ptr<ProcessMemoryUsageReport> GetReport() { ProcessMemoryUsageReport* value; hrcheck(X::get()->_GetReport(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IProcessMemoryUsage, X> : Windows::System::Diagnostics::IProcessMemoryUsage_adaptor<X> { typedef adapt IProcessMemoryUsage; };
struct IProcessMemoryUsage : IProcessMemoryUsage_raw, generate<IProcessMemoryUsage> {};

// ProcessMemoryUsage
template<typename X> struct statics<ProcessMemoryUsage, X> : X {
	typedef typename X::root_type ProcessMemoryUsage;
};
struct ProcessMemoryUsage : generate<ProcessMemoryUsage> {};

// IProcessCpuUsage
struct IProcessCpuUsage_raw : IInspectable {
	virtual STDMETHODIMP _GetReport(ProcessCpuUsageReport* *value);
};
template<typename X> struct IProcessCpuUsage_adaptor : X {
	ptr<ProcessCpuUsageReport> GetReport() { ProcessCpuUsageReport* value; hrcheck(X::get()->_GetReport(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IProcessCpuUsage, X> : Windows::System::Diagnostics::IProcessCpuUsage_adaptor<X> { typedef adapt IProcessCpuUsage; };
struct IProcessCpuUsage : IProcessCpuUsage_raw, generate<IProcessCpuUsage> {};

// ProcessCpuUsage
template<typename X> struct statics<ProcessCpuUsage, X> : X {
	typedef typename X::root_type ProcessCpuUsage;
};
struct ProcessCpuUsage : generate<ProcessCpuUsage> {};

// IProcessMemoryUsageReport
struct IProcessMemoryUsageReport_raw : IInspectable {
	virtual STDMETHODIMP _get_NonPagedPoolSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PageFaultCount(unsigned *value);
	virtual STDMETHODIMP _get_PageFileSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PagedPoolSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PeakNonPagedPoolSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PeakPageFileSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PeakPagedPoolSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PeakVirtualMemorySizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PeakWorkingSetSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_PrivatePageCount(unsigned __int64 *value);
	virtual STDMETHODIMP _get_VirtualMemorySizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_WorkingSetSizeInBytes(unsigned __int64 *value);
};
template<typename X> struct IProcessMemoryUsageReport_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::NonPagedPoolSizeInBytes)->_get_NonPagedPoolSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} NonPagedPoolSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PageFaultCount)->_get_PageFaultCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PageFaultCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PageFileSizeInBytes)->_get_PageFileSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PageFileSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PagedPoolSizeInBytes)->_get_PagedPoolSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PagedPoolSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PeakNonPagedPoolSizeInBytes)->_get_PeakNonPagedPoolSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PeakNonPagedPoolSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PeakPageFileSizeInBytes)->_get_PeakPageFileSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PeakPageFileSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PeakPagedPoolSizeInBytes)->_get_PeakPagedPoolSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PeakPagedPoolSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PeakVirtualMemorySizeInBytes)->_get_PeakVirtualMemorySizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PeakVirtualMemorySizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PeakWorkingSetSizeInBytes)->_get_PeakWorkingSetSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PeakWorkingSetSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::PrivatePageCount)->_get_PrivatePageCount(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PrivatePageCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::VirtualMemorySizeInBytes)->_get_VirtualMemorySizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} VirtualMemorySizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IProcessMemoryUsageReport_adaptor::WorkingSetSizeInBytes)->_get_WorkingSetSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} WorkingSetSizeInBytes;
	};
	IProcessMemoryUsageReport_adaptor() {}
};
template<typename X> struct adapt<IProcessMemoryUsageReport, X> : Windows::System::Diagnostics::IProcessMemoryUsageReport_adaptor<X> { typedef adapt IProcessMemoryUsageReport; };
struct IProcessMemoryUsageReport : IProcessMemoryUsageReport_raw, generate<IProcessMemoryUsageReport> {};

// ProcessMemoryUsageReport
template<typename X> struct statics<ProcessMemoryUsageReport, X> : X {
	typedef typename X::root_type ProcessMemoryUsageReport;
};
struct ProcessMemoryUsageReport : generate<ProcessMemoryUsageReport> {};

// IProcessDiskUsageReport
struct IProcessDiskUsageReport_raw : IInspectable {
	virtual STDMETHODIMP _get_ReadOperationCount(__int64 *value);
	virtual STDMETHODIMP _get_WriteOperationCount(__int64 *value);
	virtual STDMETHODIMP _get_OtherOperationCount(__int64 *value);
	virtual STDMETHODIMP _get_BytesReadCount(__int64 *value);
	virtual STDMETHODIMP _get_BytesWrittenCount(__int64 *value);
	virtual STDMETHODIMP _get_OtherBytesCount(__int64 *value);
};
template<typename X> struct IProcessDiskUsageReport_adaptor : X {
	union {
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IProcessDiskUsageReport_adaptor::BytesReadCount)->_get_BytesReadCount(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
		} BytesReadCount;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IProcessDiskUsageReport_adaptor::BytesWrittenCount)->_get_BytesWrittenCount(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
		} BytesWrittenCount;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IProcessDiskUsageReport_adaptor::OtherBytesCount)->_get_OtherBytesCount(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
		} OtherBytesCount;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IProcessDiskUsageReport_adaptor::OtherOperationCount)->_get_OtherOperationCount(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
		} OtherOperationCount;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IProcessDiskUsageReport_adaptor::ReadOperationCount)->_get_ReadOperationCount(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
		} ReadOperationCount;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IProcessDiskUsageReport_adaptor::WriteOperationCount)->_get_WriteOperationCount(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
		} WriteOperationCount;
	};
	IProcessDiskUsageReport_adaptor() {}
};
template<typename X> struct adapt<IProcessDiskUsageReport, X> : Windows::System::Diagnostics::IProcessDiskUsageReport_adaptor<X> { typedef adapt IProcessDiskUsageReport; };
struct IProcessDiskUsageReport : IProcessDiskUsageReport_raw, generate<IProcessDiskUsageReport> {};

// ProcessDiskUsageReport
template<typename X> struct statics<ProcessDiskUsageReport, X> : X {
	typedef typename X::root_type ProcessDiskUsageReport;
};
struct ProcessDiskUsageReport : generate<ProcessDiskUsageReport> {};

// IProcessCpuUsageReport
struct IProcessCpuUsageReport_raw : IInspectable {
	virtual STDMETHODIMP _get_KernelTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_UserTime(Foundation::TimeSpan *value);
};
template<typename X> struct IProcessCpuUsageReport_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IProcessCpuUsageReport_adaptor::KernelTime)->_get_KernelTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} KernelTime;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IProcessCpuUsageReport_adaptor::UserTime)->_get_UserTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} UserTime;
	};
	IProcessCpuUsageReport_adaptor() {}
};
template<typename X> struct adapt<IProcessCpuUsageReport, X> : Windows::System::Diagnostics::IProcessCpuUsageReport_adaptor<X> { typedef adapt IProcessCpuUsageReport; };
struct IProcessCpuUsageReport : IProcessCpuUsageReport_raw, generate<IProcessCpuUsageReport> {};

// ProcessCpuUsageReport
template<typename X> struct statics<ProcessCpuUsageReport, X> : X {
	typedef typename X::root_type ProcessCpuUsageReport;
};
struct ProcessCpuUsageReport : generate<ProcessCpuUsageReport> {};

// ISystemDiagnosticInfo
struct ISystemDiagnosticInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_MemoryUsage(SystemMemoryUsage* *value);
	virtual STDMETHODIMP _get_CpuUsage(SystemCpuUsage* *value);
};
template<typename X> struct ISystemDiagnosticInfo_adaptor : X {
	union {
		struct : property {
			ptr<SystemCpuUsage> get() { SystemCpuUsage* value; hrcheck(enc(&ISystemDiagnosticInfo_adaptor::CpuUsage)->_get_CpuUsage(&value)); return from_abi(value); }
			ptr<SystemCpuUsage> operator()() { return get(); }
			operator ptr<SystemCpuUsage> () { return get(); }
			ptr<SystemCpuUsage> operator->() { return get(); }
		} CpuUsage;
		struct : property {
			ptr<SystemMemoryUsage> get() { SystemMemoryUsage* value; hrcheck(enc(&ISystemDiagnosticInfo_adaptor::MemoryUsage)->_get_MemoryUsage(&value)); return from_abi(value); }
			ptr<SystemMemoryUsage> operator()() { return get(); }
			operator ptr<SystemMemoryUsage> () { return get(); }
			ptr<SystemMemoryUsage> operator->() { return get(); }
		} MemoryUsage;
	};
	ISystemDiagnosticInfo_adaptor() {}
};
template<typename X> struct adapt<ISystemDiagnosticInfo, X> : Windows::System::Diagnostics::ISystemDiagnosticInfo_adaptor<X> { typedef adapt ISystemDiagnosticInfo; };
struct ISystemDiagnosticInfo : ISystemDiagnosticInfo_raw, generate<ISystemDiagnosticInfo> {};

// ISystemMemoryUsage
struct ISystemMemoryUsage_raw : IInspectable {
	virtual STDMETHODIMP _GetReport(SystemMemoryUsageReport* *value);
};
template<typename X> struct ISystemMemoryUsage_adaptor : X {
	ptr<SystemMemoryUsageReport> GetReport() { SystemMemoryUsageReport* value; hrcheck(X::get()->_GetReport(&value)); return from_abi(value); }
};
template<typename X> struct adapt<ISystemMemoryUsage, X> : Windows::System::Diagnostics::ISystemMemoryUsage_adaptor<X> { typedef adapt ISystemMemoryUsage; };
struct ISystemMemoryUsage : ISystemMemoryUsage_raw, generate<ISystemMemoryUsage> {};

// SystemMemoryUsage
template<typename X> struct statics<SystemMemoryUsage, X> : X {
	typedef typename X::root_type SystemMemoryUsage;
};
struct SystemMemoryUsage : generate<SystemMemoryUsage> {};

// ISystemCpuUsage
struct ISystemCpuUsage_raw : IInspectable {
	virtual STDMETHODIMP _GetReport(SystemCpuUsageReport* *value);
};
template<typename X> struct ISystemCpuUsage_adaptor : X {
	ptr<SystemCpuUsageReport> GetReport() { SystemCpuUsageReport* value; hrcheck(X::get()->_GetReport(&value)); return from_abi(value); }
};
template<typename X> struct adapt<ISystemCpuUsage, X> : Windows::System::Diagnostics::ISystemCpuUsage_adaptor<X> { typedef adapt ISystemCpuUsage; };
struct ISystemCpuUsage : ISystemCpuUsage_raw, generate<ISystemCpuUsage> {};

// SystemCpuUsage
template<typename X> struct statics<SystemCpuUsage, X> : X {
	typedef typename X::root_type SystemCpuUsage;
};
struct SystemCpuUsage : generate<SystemCpuUsage> {};

// ISystemDiagnosticInfoStatics
struct ISystemDiagnosticInfoStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentSystem(SystemDiagnosticInfo* *value);
};

// SystemDiagnosticInfo
template<typename> struct SystemDiagnosticInfo_statics {
	static ptr<SystemDiagnosticInfo> GetForCurrentSystem() { SystemDiagnosticInfo* value; hrcheck(get_activation_factory<SystemDiagnosticInfo, ISystemDiagnosticInfoStatics>()->_GetForCurrentSystem(&value)); return from_abi(value); }
};

template<typename X> struct statics<SystemDiagnosticInfo, X> : X, Windows::System::Diagnostics::SystemDiagnosticInfo_statics<void> {
	typedef typename X::root_type SystemDiagnosticInfo;
};
struct SystemDiagnosticInfo : generate<SystemDiagnosticInfo> {};

// ISystemMemoryUsageReport
struct ISystemMemoryUsageReport_raw : IInspectable {
	virtual STDMETHODIMP _get_TotalPhysicalSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_AvailableSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_CommittedSizeInBytes(unsigned __int64 *value);
};
template<typename X> struct ISystemMemoryUsageReport_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&ISystemMemoryUsageReport_adaptor::AvailableSizeInBytes)->_get_AvailableSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} AvailableSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&ISystemMemoryUsageReport_adaptor::CommittedSizeInBytes)->_get_CommittedSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} CommittedSizeInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&ISystemMemoryUsageReport_adaptor::TotalPhysicalSizeInBytes)->_get_TotalPhysicalSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} TotalPhysicalSizeInBytes;
	};
	ISystemMemoryUsageReport_adaptor() {}
};
template<typename X> struct adapt<ISystemMemoryUsageReport, X> : Windows::System::Diagnostics::ISystemMemoryUsageReport_adaptor<X> { typedef adapt ISystemMemoryUsageReport; };
struct ISystemMemoryUsageReport : ISystemMemoryUsageReport_raw, generate<ISystemMemoryUsageReport> {};

// SystemMemoryUsageReport
template<typename X> struct statics<SystemMemoryUsageReport, X> : X {
	typedef typename X::root_type SystemMemoryUsageReport;
};
struct SystemMemoryUsageReport : generate<SystemMemoryUsageReport> {};

// ISystemCpuUsageReport
struct ISystemCpuUsageReport_raw : IInspectable {
	virtual STDMETHODIMP _get_KernelTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_UserTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_IdleTime(Foundation::TimeSpan *value);
};
template<typename X> struct ISystemCpuUsageReport_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ISystemCpuUsageReport_adaptor::IdleTime)->_get_IdleTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} IdleTime;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ISystemCpuUsageReport_adaptor::KernelTime)->_get_KernelTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} KernelTime;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ISystemCpuUsageReport_adaptor::UserTime)->_get_UserTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} UserTime;
	};
	ISystemCpuUsageReport_adaptor() {}
};
template<typename X> struct adapt<ISystemCpuUsageReport, X> : Windows::System::Diagnostics::ISystemCpuUsageReport_adaptor<X> { typedef adapt ISystemCpuUsageReport; };
struct ISystemCpuUsageReport : ISystemCpuUsageReport_raw, generate<ISystemCpuUsageReport> {};

// SystemCpuUsageReport
template<typename X> struct statics<SystemCpuUsageReport, X> : X {
	typedef typename X::root_type SystemCpuUsageReport;
};
struct SystemCpuUsageReport : generate<SystemCpuUsageReport> {};

// IDiagnosticActionResult
struct IDiagnosticActionResult_raw : IInspectable {
	virtual STDMETHODIMP _get_ExtendedError(Foundation::HResult *value);
	virtual STDMETHODIMP _get_Results(Foundation::Collections::ValueSet* *value);
};
template<typename X> struct IDiagnosticActionResult_adaptor : X {
	union {
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IDiagnosticActionResult_adaptor::ExtendedError)->_get_ExtendedError(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ExtendedError;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IDiagnosticActionResult_adaptor::Results)->_get_Results(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Results;
	};
	IDiagnosticActionResult_adaptor() {}
};
template<typename X> struct adapt<IDiagnosticActionResult, X> : Windows::System::Diagnostics::IDiagnosticActionResult_adaptor<X> { typedef adapt IDiagnosticActionResult; };
struct IDiagnosticActionResult : IDiagnosticActionResult_raw, generate<IDiagnosticActionResult> {};

// IDiagnosticInvokerStatics
struct IDiagnosticInvokerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(DiagnosticInvoker* *result);
	virtual STDMETHODIMP _GetForUser(User* user, DiagnosticInvoker* *result);
	virtual STDMETHODIMP _get_IsSupported(bool *value);
};

// IDiagnosticInvoker2
struct IDiagnosticInvoker2_raw : IInspectable {
	virtual STDMETHODIMP _RunDiagnosticActionFromStringAsync(HSTRING context, Foundation::IAsyncOperationWithProgress<DiagnosticActionResult*, DiagnosticActionState>* *operation);
};
template<typename X> struct IDiagnosticInvoker2_adaptor : X {
	ptr<Foundation::IAsyncOperationWithProgress<ptr<DiagnosticActionResult>, DiagnosticActionState>> RunDiagnosticActionFromStringAsync(hstring_ref context) { Foundation::IAsyncOperationWithProgress<DiagnosticActionResult*, DiagnosticActionState>* operation; hrcheck(X::get()->_RunDiagnosticActionFromStringAsync(context, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IDiagnosticInvoker2, X> : Windows::System::Diagnostics::IDiagnosticInvoker2_adaptor<X> { typedef adapt IDiagnosticInvoker2; };
struct IDiagnosticInvoker2 : IDiagnosticInvoker2_raw, generate<IDiagnosticInvoker2> {};

// IDiagnosticInvoker
struct IDiagnosticInvoker_raw : IInspectable {
	virtual STDMETHODIMP _RunDiagnosticActionAsync(Data::Json::JsonObject* context, Foundation::IAsyncOperationWithProgress<DiagnosticActionResult*, DiagnosticActionState>* *operation);
};
template<typename X> struct IDiagnosticInvoker_adaptor : X {
	ptr<Foundation::IAsyncOperationWithProgress<ptr<DiagnosticActionResult>, DiagnosticActionState>> RunDiagnosticActionAsync(pptr<Data::Json::JsonObject> context) { Foundation::IAsyncOperationWithProgress<DiagnosticActionResult*, DiagnosticActionState>* operation; hrcheck(X::get()->_RunDiagnosticActionAsync(context, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IDiagnosticInvoker, X> : Windows::System::Diagnostics::IDiagnosticInvoker_adaptor<X> { typedef adapt IDiagnosticInvoker; };
struct IDiagnosticInvoker : IDiagnosticInvoker_raw, generate<IDiagnosticInvoker> {};

// DiagnosticInvoker
template<typename> struct DiagnosticInvoker_statics {
	static struct _IsSupported : property {
		bool get() { bool value; hrcheck(get_activation_factory<DiagnosticInvoker, IDiagnosticInvokerStatics>()->_get_IsSupported(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsSupported;
	static ptr<DiagnosticInvoker> GetDefault() { DiagnosticInvoker* result; hrcheck(get_activation_factory<DiagnosticInvoker, IDiagnosticInvokerStatics>()->_GetDefault(&result)); return from_abi(result); }
	static ptr<DiagnosticInvoker> GetForUser(pptr<User> user) { DiagnosticInvoker* result; hrcheck(get_activation_factory<DiagnosticInvoker, IDiagnosticInvokerStatics>()->_GetForUser(user, &result)); return from_abi(result); }
};
template<typename X> typename DiagnosticInvoker_statics<X>::_IsSupported DiagnosticInvoker_statics<X>::IsSupported;

template<typename X> struct statics<DiagnosticInvoker, X> : X, Windows::System::Diagnostics::DiagnosticInvoker_statics<void> {
	typedef typename X::root_type DiagnosticInvoker;
};
struct DiagnosticInvoker : generate<DiagnosticInvoker> {};

// DiagnosticActionResult
template<typename X> struct statics<DiagnosticActionResult, X> : X {
	typedef typename X::root_type DiagnosticActionResult;
};
struct DiagnosticActionResult : generate<DiagnosticActionResult> {};
}}}
} // namespace iso_winrt
