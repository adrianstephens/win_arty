#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.PersonalInformation

#include "Windows.Phone.PersonalInformation.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMapView;
template<typename K, typename V> struct IMap;
}}
namespace Storage { namespace Streams {
struct IInputStream;
struct IRandomAccessStreamReference;
struct IRandomAccessStream;
}}}

// defs

template<> struct def<Windows::Phone::PersonalInformation::ContactStoreSystemAccessMode> : enum_type<int> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactStoreApplicationAccessMode> : enum_type<int> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactChangeType> : enum_type<int> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactQueryResultOrdering> : enum_type<int> {};
template<> struct def<Windows::Phone::PersonalInformation::VCardFormat> : enum_type<int> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactAddress> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactAddress> : class_type<Platform::Object, Windows::Phone::PersonalInformation::IContactAddress> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactInformation> : overridable_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactInformation2> : overridable_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactInformationStatics> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactInformation> : class_type<Platform::Object, Windows::Phone::PersonalInformation::IContactInformation> {};
template<> struct def<Windows::Phone::PersonalInformation::IStoredContact> : interface_type<Windows::Phone::PersonalInformation::IContactInformation> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactStoreStatics> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactStore2> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactStore> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactStore> : class_type<Platform::Object, Windows::Phone::PersonalInformation::IContactStore, Windows::Phone::PersonalInformation::IContactStore2> {};
template<> struct def<Windows::Phone::PersonalInformation::IStoredContactFactory> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::StoredContact> : class_type<Platform::Object, Windows::Phone::PersonalInformation::IStoredContact, Windows::Phone::PersonalInformation::IContactInformation2>, custom_activators {};
template<> struct def<Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::KnownContactProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactQueryResult> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactQueryOptions> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactQueryOptions> : class_type<Platform::Object, Windows::Phone::PersonalInformation::IContactQueryOptions> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactQueryResult> : class_type<Platform::Object, Windows::Phone::PersonalInformation::IContactQueryResult> {};
template<> struct def<Windows::Phone::PersonalInformation::IContactChangeRecord> : interface_type<> {};
template<> struct def<Windows::Phone::PersonalInformation::ContactChangeRecord> : class_type<Platform::Object, Windows::Phone::PersonalInformation::IContactChangeRecord> {};

// uuids

template<> struct uuid<Windows::Phone::PersonalInformation::IContactAddress> { define_guid(0x5F24F927, 0x94A9, 0x44A2, 0xA1, 0x55, 0x2D, 0xB, 0x37, 0xD1, 0xDC, 0xCD);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactInformation> { define_guid(0xE2B51FFC, 0xE792, 0x4AB7, 0xB1, 0x5B, 0xF2, 0xE0, 0x78, 0x66, 0x4D, 0xEA);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactInformation2> { define_guid(0x3198B20C, 0x621E, 0x4668, 0xAC, 0x38, 0xD6, 0x67, 0xB8, 0x7D, 0x6, 0xD5);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactInformationStatics> { define_guid(0xF67BB29, 0x3D0, 0x4BE6, 0xB2, 0xA5, 0xFB, 0x13, 0x85, 0x9F, 0x12, 0x2);};
template<> struct uuid<Windows::Phone::PersonalInformation::IStoredContact> { define_guid(0xB070B7B1, 0x263D, 0x4E71, 0xAB, 0xE7, 0x59, 0x1D, 0x24, 0x66, 0x57, 0xE);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactStoreStatics> { define_guid(0xA804FE22, 0x4BEB, 0x44CC, 0xA5, 0x72, 0x67, 0xA5, 0xB9, 0x2E, 0x85, 0x67);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactStore2> { define_guid(0x65F1B64F, 0xD653, 0x43A7, 0xB2, 0x36, 0xB3, 0xC, 0xF, 0x4D, 0x72, 0x69);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactStore> { define_guid(0xB2CD6FEF, 0x2BFD, 0x4FAD, 0x85, 0x52, 0x4E, 0x69, 0x80, 0x97, 0xE8, 0xEB);};
template<> struct uuid<Windows::Phone::PersonalInformation::IStoredContactFactory> { define_guid(0x49EDE921, 0xC225, 0x4FD9, 0x89, 0xC5, 0xCE, 0xCC, 0x2C, 0x8A, 0x4B, 0x79);};
template<> struct uuid<Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics> { define_guid(0xD5812B01, 0x2CED, 0x4EE6, 0xB1, 0xD6, 0x9, 0x4B, 0xF8, 0x8E, 0xF0, 0xB6);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactQueryResult> { define_guid(0xC03DB722, 0xECDB, 0x4700, 0x85, 0x7E, 0x3E, 0x78, 0x64, 0x26, 0xB0, 0x4B);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactQueryOptions> { define_guid(0x580CAB76, 0x3F31, 0x46C1, 0x9A, 0x50, 0x42, 0x4A, 0x53, 0xDA, 0xCA, 0xE3);};
template<> struct uuid<Windows::Phone::PersonalInformation::IContactChangeRecord> { define_guid(0xB9D3F78F, 0x513B, 0x4742, 0xBE, 0x0, 0xCC, 0x5C, 0x5C, 0x23, 0x6B, 0x4);};

// types

namespace Windows { namespace Phone { namespace PersonalInformation {

// IContactAddress
struct IContactAddress_raw : IInspectable {
	virtual STDMETHODIMP _get_Country(HSTRING *value);
	virtual STDMETHODIMP _put_Country(HSTRING value);
	virtual STDMETHODIMP _get_Locality(HSTRING *value);
	virtual STDMETHODIMP _put_Locality(HSTRING value);
	virtual STDMETHODIMP _get_Region(HSTRING *value);
	virtual STDMETHODIMP _put_Region(HSTRING value);
	virtual STDMETHODIMP _get_PostalCode(HSTRING *value);
	virtual STDMETHODIMP _put_PostalCode(HSTRING value);
	virtual STDMETHODIMP _get_StreetAddress(HSTRING *value);
	virtual STDMETHODIMP _put_StreetAddress(HSTRING value);
};
template<typename X> struct IContactAddress_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::Country)->_get_Country(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::Country)->_put_Country(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Country;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::Locality)->_get_Locality(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::Locality)->_put_Locality(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Locality;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::PostalCode)->_get_PostalCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::PostalCode)->_put_PostalCode(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PostalCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::Region)->_get_Region(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::Region)->_put_Region(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Region;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactAddress_adaptor::StreetAddress)->_get_StreetAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactAddress_adaptor::StreetAddress)->_put_StreetAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} StreetAddress;
	};
	IContactAddress_adaptor() {}
};
template<typename X> struct adapt<IContactAddress, X> : Windows::Phone::PersonalInformation::IContactAddress_adaptor<X> { typedef adapt IContactAddress; };
struct IContactAddress : IContactAddress_raw, generate<IContactAddress> {};

// ContactAddress
template<typename X> struct statics<ContactAddress, X> : X {
	typedef typename X::root_type ContactAddress;
};
struct ContactAddress : generate<ContactAddress> {};

// IContactInformation
struct IContactInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_DisplayName(HSTRING value) = 0;
	virtual STDMETHODIMP _get_FamilyName(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_FamilyName(HSTRING value) = 0;
	virtual STDMETHODIMP _get_GivenName(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_GivenName(HSTRING value) = 0;
	virtual STDMETHODIMP _get_HonorificPrefix(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_HonorificPrefix(HSTRING value) = 0;
	virtual STDMETHODIMP _get_HonorificSuffix(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_HonorificSuffix(HSTRING value) = 0;
	virtual STDMETHODIMP _GetDisplayPictureAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *operation) = 0;
	virtual STDMETHODIMP _SetDisplayPictureAsync(Storage::Streams::IInputStream* stream, Foundation::IAsyncAction* *action) = 0;
	virtual STDMETHODIMP _get_DisplayPicture(Storage::Streams::IRandomAccessStreamReference* *value) = 0;
	virtual STDMETHODIMP _GetPropertiesAsync(Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* *operation) = 0;
	virtual STDMETHODIMP _ToVcardAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *operation) = 0;
	virtual STDMETHODIMP _ToVcardWithOptionsAsync(VCardFormat format, Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *operation) = 0;
};
template<typename X> struct IContactInformation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInformation_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactInformation_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IContactInformation_adaptor::DisplayPicture)->_get_DisplayPicture(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} DisplayPicture;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInformation_adaptor::FamilyName)->_get_FamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactInformation_adaptor::FamilyName)->_put_FamilyName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} FamilyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInformation_adaptor::GivenName)->_get_GivenName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactInformation_adaptor::GivenName)->_put_GivenName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} GivenName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInformation_adaptor::HonorificPrefix)->_get_HonorificPrefix(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactInformation_adaptor::HonorificPrefix)->_put_HonorificPrefix(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} HonorificPrefix;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactInformation_adaptor::HonorificSuffix)->_get_HonorificSuffix(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IContactInformation_adaptor::HonorificSuffix)->_put_HonorificSuffix(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} HonorificSuffix;
	};
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStream>>> GetDisplayPictureAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* operation; hrcheck(X::get()->_GetDisplayPictureAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SetDisplayPictureAsync(pptr<Storage::Streams::IInputStream> stream) { Foundation::IAsyncAction* action; hrcheck(X::get()->_SetDisplayPictureAsync(stream, &action)); return from_abi(action); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMap<hstring, object>>>> GetPropertiesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* operation; hrcheck(X::get()->_GetPropertiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStream>>> ToVcardAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* operation; hrcheck(X::get()->_ToVcardAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStream>>> ToVcardAsync(VCardFormat format) { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* operation; hrcheck(X::get()->_ToVcardWithOptionsAsync(format, &operation)); return from_abi(operation); }
	IContactInformation_adaptor() {}
};
template<typename X> struct adapt<IContactInformation, X> : Windows::Phone::PersonalInformation::IContactInformation_adaptor<X> { typedef adapt IContactInformation; };
template<typename X> struct IContactInformation_unadaptor : X {
	STDMETHODIMP _get_DisplayName(HSTRING *value) { return hrtry([&, this] { get_prop(value, DisplayName); }); }
	STDMETHODIMP _put_DisplayName(HSTRING value) { return hrtry([&, this] { put_prop(value, DisplayName); }); }
	STDMETHODIMP _get_FamilyName(HSTRING *value) { return hrtry([&, this] { get_prop(value, FamilyName); }); }
	STDMETHODIMP _put_FamilyName(HSTRING value) { return hrtry([&, this] { put_prop(value, FamilyName); }); }
	STDMETHODIMP _get_GivenName(HSTRING *value) { return hrtry([&, this] { get_prop(value, GivenName); }); }
	STDMETHODIMP _put_GivenName(HSTRING value) { return hrtry([&, this] { put_prop(value, GivenName); }); }
	STDMETHODIMP _get_HonorificPrefix(HSTRING *value) { return hrtry([&, this] { get_prop(value, HonorificPrefix); }); }
	STDMETHODIMP _put_HonorificPrefix(HSTRING value) { return hrtry([&, this] { put_prop(value, HonorificPrefix); }); }
	STDMETHODIMP _get_HonorificSuffix(HSTRING *value) { return hrtry([&, this] { get_prop(value, HonorificSuffix); }); }
	STDMETHODIMP _put_HonorificSuffix(HSTRING value) { return hrtry([&, this] { put_prop(value, HonorificSuffix); }); }
	STDMETHODIMP _GetDisplayPictureAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->GetDisplayPictureAsync()); }); }
	STDMETHODIMP _SetDisplayPictureAsync(Storage::Streams::IInputStream* stream, Foundation::IAsyncAction* *action) { return hrtry([&, this] { *action = to_abi(X::get()->SetDisplayPictureAsync(stream)); }); }
	STDMETHODIMP _get_DisplayPicture(Storage::Streams::IRandomAccessStreamReference* *value) { return hrtry([&, this] { get_prop(value, DisplayPicture); }); }
	STDMETHODIMP _GetPropertiesAsync(Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->GetPropertiesAsync()); }); }
	STDMETHODIMP _ToVcardAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->ToVcardAsync()); }); }
	STDMETHODIMP _ToVcardWithOptionsAsync(VCardFormat format, Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->ToVcardAsync(format)); }); }
};
template<typename X> struct unadapt<IContactInformation, X> : Windows::Phone::PersonalInformation::IContactInformation_unadaptor<X> {};
struct IContactInformation : IContactInformation_raw, generate<IContactInformation> {};

// IContactInformation2
struct IContactInformation2_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayPictureDate(Foundation::DateTime *returnValue) = 0;
	virtual STDMETHODIMP _put_DisplayPictureDate(Foundation::DateTime returnValue) = 0;
};
template<typename X> struct IContactInformation2_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime returnValue; hrcheck(enc(&IContactInformation2_adaptor::DisplayPictureDate)->_get_DisplayPictureDate(&returnValue)); return returnValue; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& returnValue) { hrcheck(enc(&IContactInformation2_adaptor::DisplayPictureDate)->_put_DisplayPictureDate(returnValue)); }
			void operator=(const Foundation::DateTime& returnValue) { put(returnValue); }
			void operator()(const Foundation::DateTime& returnValue) { put(returnValue); }
		} DisplayPictureDate;
	};
	IContactInformation2_adaptor() {}
};
template<typename X> struct adapt<IContactInformation2, X> : Windows::Phone::PersonalInformation::IContactInformation2_adaptor<X> { typedef adapt IContactInformation2; };
template<typename X> struct IContactInformation2_unadaptor : X {
	STDMETHODIMP _get_DisplayPictureDate(Foundation::DateTime *returnValue) { return hrtry([&, this] { get_prop(returnValue, DisplayPictureDate); }); }
	STDMETHODIMP _put_DisplayPictureDate(Foundation::DateTime returnValue) { return hrtry([&, this] { put_prop(returnValue, DisplayPictureDate); }); }
};
template<typename X> struct unadapt<IContactInformation2, X> : Windows::Phone::PersonalInformation::IContactInformation2_unadaptor<X> {};
struct IContactInformation2 : IContactInformation2_raw, generate<IContactInformation2> {};

// IContactInformationStatics
struct IContactInformationStatics : IInspectable {
	virtual STDMETHODIMP _ParseVcardAsync(Storage::Streams::IInputStream* vcard, Foundation::IAsyncOperation<ContactInformation*>* *operation);
};

// ContactInformation
template<typename> struct ContactInformation_statics {
	static ptr<Foundation::IAsyncOperation<ptr<ContactInformation>>> ParseVcardAsync(pptr<Storage::Streams::IInputStream> vcard) { Foundation::IAsyncOperation<ContactInformation*>* operation; hrcheck(get_activation_factory<ContactInformation, IContactInformationStatics>()->_ParseVcardAsync(vcard, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<ContactInformation, X> : X, Windows::Phone::PersonalInformation::ContactInformation_statics<void> {
	typedef typename X::root_type ContactInformation;
};
struct ContactInformation : generate<ContactInformation> {
	using IContactInformation::ToVcardAsync;
};

// IStoredContact
struct IStoredContact_raw : IInspectable {
	virtual STDMETHODIMP _get_Store(ContactStore* *value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _GetExtendedPropertiesAsync(Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* *operation);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReplaceExistingContactAsync(HSTRING id, Foundation::IAsyncAction* *result);
};
template<typename X> struct IStoredContact_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStoredContact_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStoredContact_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStoredContact_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			ptr<ContactStore> get() { ContactStore* value; hrcheck(enc(&IStoredContact_adaptor::Store)->_get_Store(&value)); return from_abi(value); }
			ptr<ContactStore> operator()() { return get(); }
			operator ptr<ContactStore> () { return get(); }
			ptr<ContactStore> operator->() { return get(); }
		} Store;
	};
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMap<hstring, object>>>> GetExtendedPropertiesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* operation; hrcheck(X::get()->_GetExtendedPropertiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReplaceExistingContactAsync(hstring_ref id) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReplaceExistingContactAsync(id, &result)); return from_abi(result); }
	IStoredContact_adaptor() {}
};
template<typename X> struct adapt<IStoredContact, X> : Windows::Phone::PersonalInformation::IStoredContact_adaptor<X> { typedef adapt IStoredContact; };
struct IStoredContact : IStoredContact_raw, generate<IStoredContact> {};

// IContactStoreStatics
struct IContactStoreStatics : IInspectable {
	virtual STDMETHODIMP _CreateOrOpenAsync(Foundation::IAsyncOperation<ContactStore*>* *operation);
	virtual STDMETHODIMP _CreateOrOpenWithOptionsAsync(ContactStoreSystemAccessMode access, ContactStoreApplicationAccessMode sharing, Foundation::IAsyncOperation<ContactStore*>* *operation);
};

// IContactStore2
struct IContactStore2_raw : IInspectable {
	virtual STDMETHODIMP _CreateMeContactAsync(HSTRING id, Foundation::IAsyncOperation<StoredContact*>* *operation);
};
template<typename X> struct IContactStore2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<StoredContact>>> CreateMeContactAsync(hstring_ref id) { Foundation::IAsyncOperation<StoredContact*>* operation; hrcheck(X::get()->_CreateMeContactAsync(id, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IContactStore2, X> : Windows::Phone::PersonalInformation::IContactStore2_adaptor<X> { typedef adapt IContactStore2; };
struct IContactStore2 : IContactStore2_raw, generate<IContactStore2> {};

// IContactStore
struct IContactStore_raw : IInspectable {
	virtual STDMETHODIMP _FindContactByRemoteIdAsync(HSTRING id, Foundation::IAsyncOperation<StoredContact*>* *operation);
	virtual STDMETHODIMP _FindContactByIdAsync(HSTRING id, Foundation::IAsyncOperation<StoredContact*>* *operation);
	virtual STDMETHODIMP _DeleteContactAsync(HSTRING id, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _CreateContactQueryDefault(ContactQueryResult* *result);
	virtual STDMETHODIMP _CreateContactQueryWithOptions(ContactQueryOptions* options, ContactQueryResult* *result);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _get_RevisionNumber(unsigned __int64 *value);
	virtual STDMETHODIMP _GetChangesAsync(unsigned __int64 baseRevisionNumber, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactChangeRecord*>*>* *operation);
	virtual STDMETHODIMP _LoadExtendedPropertiesAsync(Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* *operation);
	virtual STDMETHODIMP _SaveExtendedPropertiesAsync(Foundation::Collections::IMapView<HSTRING, IInspectable*>* data, Foundation::IAsyncAction* *result);
};
template<typename X> struct IContactStore_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IContactStore_adaptor::RevisionNumber)->_get_RevisionNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} RevisionNumber;
	};
	ptr<Foundation::IAsyncOperation<ptr<StoredContact>>> FindContactByRemoteIdAsync(hstring_ref id) { Foundation::IAsyncOperation<StoredContact*>* operation; hrcheck(X::get()->_FindContactByRemoteIdAsync(id, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<StoredContact>>> FindContactByIdAsync(hstring_ref id) { Foundation::IAsyncOperation<StoredContact*>* operation; hrcheck(X::get()->_FindContactByIdAsync(id, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> DeleteContactAsync(hstring_ref id) { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteContactAsync(id, &result)); return from_abi(result); }
	ptr<ContactQueryResult> CreateContactQuery() { ContactQueryResult* result; hrcheck(X::get()->_CreateContactQueryDefault(&result)); return from_abi(result); }
	ptr<ContactQueryResult> CreateContactQuery(pptr<ContactQueryOptions> options) { ContactQueryResult* result; hrcheck(X::get()->_CreateContactQueryWithOptions(options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeleteAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ContactChangeRecord>>>>> GetChangesAsync(unsigned __int64 baseRevisionNumber) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ContactChangeRecord*>*>* operation; hrcheck(X::get()->_GetChangesAsync(baseRevisionNumber, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMap<hstring, object>>>> LoadExtendedPropertiesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IMap<HSTRING, IInspectable*>*>* operation; hrcheck(X::get()->_LoadExtendedPropertiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SaveExtendedPropertiesAsync(pptr<Foundation::Collections::IMapView<hstring, object>> data) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SaveExtendedPropertiesAsync(to_abi(data), &result)); return from_abi(result); }
	IContactStore_adaptor() {}
};
template<typename X> struct adapt<IContactStore, X> : Windows::Phone::PersonalInformation::IContactStore_adaptor<X> { typedef adapt IContactStore; };
struct IContactStore : IContactStore_raw, generate<IContactStore> {};

// ContactStore
template<typename> struct ContactStore_statics {
	static ptr<Foundation::IAsyncOperation<ptr<ContactStore>>> CreateOrOpenAsync() { Foundation::IAsyncOperation<ContactStore*>* operation; hrcheck(get_activation_factory<ContactStore, IContactStoreStatics>()->_CreateOrOpenAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<ContactStore>>> CreateOrOpenAsync(ContactStoreSystemAccessMode access, ContactStoreApplicationAccessMode sharing) { Foundation::IAsyncOperation<ContactStore*>* operation; hrcheck(get_activation_factory<ContactStore, IContactStoreStatics>()->_CreateOrOpenWithOptionsAsync(access, sharing, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<ContactStore, X> : X, Windows::Phone::PersonalInformation::ContactStore_statics<void> {
	typedef typename X::root_type ContactStore;
};
struct ContactStore : generate<ContactStore> {
	using IContactStore::CreateContactQuery;
};

// IStoredContactFactory
struct IStoredContactFactory : IInspectable {
	virtual STDMETHODIMP _CreateStoredContact(ContactStore* store, StoredContact* *result);
	virtual STDMETHODIMP _CreateStoredContactFromInformation(ContactStore* store, ContactInformation* contact, StoredContact* *result);
};

// StoredContact
template<typename> struct StoredContact_statics {
	static StoredContact *activate(pptr<ContactStore> store) { StoredContact *result; hrcheck(get_activation_factory<StoredContact, IStoredContactFactory>()->_CreateStoredContact(store, &result)); return result; }
	static StoredContact *activate(pptr<ContactStore> store, pptr<ContactInformation> contact) { StoredContact *result; hrcheck(get_activation_factory<StoredContact, IStoredContactFactory>()->_CreateStoredContactFromInformation(store, contact, &result)); return result; }
};

template<typename X> struct statics<StoredContact, X> : X, Windows::Phone::PersonalInformation::StoredContact_statics<void> {
	using Windows::Phone::PersonalInformation::StoredContact_statics<void>::activate;
	typedef typename X::root_type StoredContact;
};
struct StoredContact : generate<StoredContact> {
	using IContactInformation::ToVcardAsync;
};

// IKnownContactPropertiesStatics
struct IKnownContactPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_FamilyName(HSTRING *value);
	virtual STDMETHODIMP _get_GivenName(HSTRING *value);
	virtual STDMETHODIMP _get_HonorificPrefix(HSTRING *value);
	virtual STDMETHODIMP _get_HonorificSuffix(HSTRING *value);
	virtual STDMETHODIMP _get_AdditionalName(HSTRING *value);
	virtual STDMETHODIMP _get_Address(HSTRING *value);
	virtual STDMETHODIMP _get_OtherAddress(HSTRING *value);
	virtual STDMETHODIMP _get_Email(HSTRING *value);
	virtual STDMETHODIMP _get_WorkAddress(HSTRING *value);
	virtual STDMETHODIMP _get_WorkTelephone(HSTRING *value);
	virtual STDMETHODIMP _get_JobTitle(HSTRING *value);
	virtual STDMETHODIMP _get_Birthdate(HSTRING *value);
	virtual STDMETHODIMP _get_Anniversary(HSTRING *value);
	virtual STDMETHODIMP _get_Telephone(HSTRING *value);
	virtual STDMETHODIMP _get_MobileTelephone(HSTRING *value);
	virtual STDMETHODIMP _get_Url(HSTRING *value);
	virtual STDMETHODIMP _get_Notes(HSTRING *value);
	virtual STDMETHODIMP _get_WorkFax(HSTRING *value);
	virtual STDMETHODIMP _get_Children(HSTRING *value);
	virtual STDMETHODIMP _get_SignificantOther(HSTRING *value);
	virtual STDMETHODIMP _get_CompanyName(HSTRING *value);
	virtual STDMETHODIMP _get_CompanyTelephone(HSTRING *value);
	virtual STDMETHODIMP _get_HomeFax(HSTRING *value);
	virtual STDMETHODIMP _get_AlternateTelephone(HSTRING *value);
	virtual STDMETHODIMP _get_Manager(HSTRING *value);
	virtual STDMETHODIMP _get_Nickname(HSTRING *value);
	virtual STDMETHODIMP _get_OfficeLocation(HSTRING *value);
	virtual STDMETHODIMP _get_WorkEmail(HSTRING *value);
	virtual STDMETHODIMP _get_YomiGivenName(HSTRING *value);
	virtual STDMETHODIMP _get_YomiFamilyName(HSTRING *value);
	virtual STDMETHODIMP _get_YomiCompanyName(HSTRING *value);
	virtual STDMETHODIMP _get_OtherEmail(HSTRING *value);
	virtual STDMETHODIMP _get_AlternateMobileTelephone(HSTRING *value);
	virtual STDMETHODIMP _get_AlternateWorkTelephone(HSTRING *value);
};

// KnownContactProperties
template<typename> struct KnownContactProperties_statics {
	static struct _AdditionalName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_AdditionalName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AdditionalName;
	static struct _Address : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Address(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Address;
	static struct _AlternateMobileTelephone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_AlternateMobileTelephone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AlternateMobileTelephone;
	static struct _AlternateTelephone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_AlternateTelephone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AlternateTelephone;
	static struct _AlternateWorkTelephone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_AlternateWorkTelephone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AlternateWorkTelephone;
	static struct _Anniversary : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Anniversary(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Anniversary;
	static struct _Birthdate : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Birthdate(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Birthdate;
	static struct _Children : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Children(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Children;
	static struct _CompanyName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_CompanyName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CompanyName;
	static struct _CompanyTelephone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_CompanyTelephone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CompanyTelephone;
	static struct _DisplayName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_DisplayName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DisplayName;
	static struct _Email : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Email(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Email;
	static struct _FamilyName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_FamilyName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FamilyName;
	static struct _GivenName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_GivenName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GivenName;
	static struct _HomeFax : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_HomeFax(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HomeFax;
	static struct _HonorificPrefix : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_HonorificPrefix(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HonorificPrefix;
	static struct _HonorificSuffix : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_HonorificSuffix(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HonorificSuffix;
	static struct _JobTitle : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_JobTitle(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} JobTitle;
	static struct _Manager : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Manager(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Manager;
	static struct _MobileTelephone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_MobileTelephone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MobileTelephone;
	static struct _Nickname : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Nickname(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Nickname;
	static struct _Notes : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Notes(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Notes;
	static struct _OfficeLocation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_OfficeLocation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} OfficeLocation;
	static struct _OtherAddress : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_OtherAddress(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} OtherAddress;
	static struct _OtherEmail : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_OtherEmail(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} OtherEmail;
	static struct _SignificantOther : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_SignificantOther(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SignificantOther;
	static struct _Telephone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Telephone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Telephone;
	static struct _Url : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_Url(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Url;
	static struct _WorkAddress : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_WorkAddress(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WorkAddress;
	static struct _WorkEmail : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_WorkEmail(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WorkEmail;
	static struct _WorkFax : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_WorkFax(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WorkFax;
	static struct _WorkTelephone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_WorkTelephone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WorkTelephone;
	static struct _YomiCompanyName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_YomiCompanyName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} YomiCompanyName;
	static struct _YomiFamilyName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_YomiFamilyName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} YomiFamilyName;
	static struct _YomiGivenName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownContactProperties, IKnownContactPropertiesStatics>()->_get_YomiGivenName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} YomiGivenName;
};
template<typename X> typename KnownContactProperties_statics<X>::_AdditionalName KnownContactProperties_statics<X>::AdditionalName;
template<typename X> typename KnownContactProperties_statics<X>::_Address KnownContactProperties_statics<X>::Address;
template<typename X> typename KnownContactProperties_statics<X>::_AlternateMobileTelephone KnownContactProperties_statics<X>::AlternateMobileTelephone;
template<typename X> typename KnownContactProperties_statics<X>::_AlternateTelephone KnownContactProperties_statics<X>::AlternateTelephone;
template<typename X> typename KnownContactProperties_statics<X>::_AlternateWorkTelephone KnownContactProperties_statics<X>::AlternateWorkTelephone;
template<typename X> typename KnownContactProperties_statics<X>::_Anniversary KnownContactProperties_statics<X>::Anniversary;
template<typename X> typename KnownContactProperties_statics<X>::_Birthdate KnownContactProperties_statics<X>::Birthdate;
template<typename X> typename KnownContactProperties_statics<X>::_Children KnownContactProperties_statics<X>::Children;
template<typename X> typename KnownContactProperties_statics<X>::_CompanyName KnownContactProperties_statics<X>::CompanyName;
template<typename X> typename KnownContactProperties_statics<X>::_CompanyTelephone KnownContactProperties_statics<X>::CompanyTelephone;
template<typename X> typename KnownContactProperties_statics<X>::_DisplayName KnownContactProperties_statics<X>::DisplayName;
template<typename X> typename KnownContactProperties_statics<X>::_Email KnownContactProperties_statics<X>::Email;
template<typename X> typename KnownContactProperties_statics<X>::_FamilyName KnownContactProperties_statics<X>::FamilyName;
template<typename X> typename KnownContactProperties_statics<X>::_GivenName KnownContactProperties_statics<X>::GivenName;
template<typename X> typename KnownContactProperties_statics<X>::_HomeFax KnownContactProperties_statics<X>::HomeFax;
template<typename X> typename KnownContactProperties_statics<X>::_HonorificPrefix KnownContactProperties_statics<X>::HonorificPrefix;
template<typename X> typename KnownContactProperties_statics<X>::_HonorificSuffix KnownContactProperties_statics<X>::HonorificSuffix;
template<typename X> typename KnownContactProperties_statics<X>::_JobTitle KnownContactProperties_statics<X>::JobTitle;
template<typename X> typename KnownContactProperties_statics<X>::_Manager KnownContactProperties_statics<X>::Manager;
template<typename X> typename KnownContactProperties_statics<X>::_MobileTelephone KnownContactProperties_statics<X>::MobileTelephone;
template<typename X> typename KnownContactProperties_statics<X>::_Nickname KnownContactProperties_statics<X>::Nickname;
template<typename X> typename KnownContactProperties_statics<X>::_Notes KnownContactProperties_statics<X>::Notes;
template<typename X> typename KnownContactProperties_statics<X>::_OfficeLocation KnownContactProperties_statics<X>::OfficeLocation;
template<typename X> typename KnownContactProperties_statics<X>::_OtherAddress KnownContactProperties_statics<X>::OtherAddress;
template<typename X> typename KnownContactProperties_statics<X>::_OtherEmail KnownContactProperties_statics<X>::OtherEmail;
template<typename X> typename KnownContactProperties_statics<X>::_SignificantOther KnownContactProperties_statics<X>::SignificantOther;
template<typename X> typename KnownContactProperties_statics<X>::_Telephone KnownContactProperties_statics<X>::Telephone;
template<typename X> typename KnownContactProperties_statics<X>::_Url KnownContactProperties_statics<X>::Url;
template<typename X> typename KnownContactProperties_statics<X>::_WorkAddress KnownContactProperties_statics<X>::WorkAddress;
template<typename X> typename KnownContactProperties_statics<X>::_WorkEmail KnownContactProperties_statics<X>::WorkEmail;
template<typename X> typename KnownContactProperties_statics<X>::_WorkFax KnownContactProperties_statics<X>::WorkFax;
template<typename X> typename KnownContactProperties_statics<X>::_WorkTelephone KnownContactProperties_statics<X>::WorkTelephone;
template<typename X> typename KnownContactProperties_statics<X>::_YomiCompanyName KnownContactProperties_statics<X>::YomiCompanyName;
template<typename X> typename KnownContactProperties_statics<X>::_YomiFamilyName KnownContactProperties_statics<X>::YomiFamilyName;
template<typename X> typename KnownContactProperties_statics<X>::_YomiGivenName KnownContactProperties_statics<X>::YomiGivenName;

template<typename X> struct statics<KnownContactProperties, X> : X, Windows::Phone::PersonalInformation::KnownContactProperties_statics<void> {
	typedef typename X::root_type KnownContactProperties;
};
struct KnownContactProperties : generate<KnownContactProperties> {};

// IContactQueryResult
struct IContactQueryResult_raw : IInspectable {
	virtual STDMETHODIMP _GetContactCountAsync(Foundation::IAsyncOperation<unsigned>* *operation);
	virtual STDMETHODIMP _GetContactsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StoredContact*>*>* *operation);
	virtual STDMETHODIMP _GetContactsAsyncInRange(unsigned startIndex, unsigned maxNumberOfItems, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StoredContact*>*>* *operation);
	virtual STDMETHODIMP _GetCurrentQueryOptions(ContactQueryOptions* *value);
};
template<typename X> struct IContactQueryResult_adaptor : X {
	ptr<Foundation::IAsyncOperation<unsigned>> GetContactCountAsync() { Foundation::IAsyncOperation<unsigned>* operation; hrcheck(X::get()->_GetContactCountAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<StoredContact>>>>> GetContactsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StoredContact*>*>* operation; hrcheck(X::get()->_GetContactsAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<StoredContact>>>>> GetContactsAsync(unsigned startIndex, unsigned maxNumberOfItems) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StoredContact*>*>* operation; hrcheck(X::get()->_GetContactsAsyncInRange(startIndex, maxNumberOfItems, &operation)); return from_abi(operation); }
	ptr<ContactQueryOptions> GetCurrentQueryOptions() { ContactQueryOptions* value; hrcheck(X::get()->_GetCurrentQueryOptions(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IContactQueryResult, X> : Windows::Phone::PersonalInformation::IContactQueryResult_adaptor<X> { typedef adapt IContactQueryResult; };
struct IContactQueryResult : IContactQueryResult_raw, generate<IContactQueryResult> {};

// IContactQueryOptions
struct IContactQueryOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_DesiredFields(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_OrderBy(ContactQueryResultOrdering *value);
	virtual STDMETHODIMP _put_OrderBy(ContactQueryResultOrdering value);
};
template<typename X> struct IContactQueryOptions_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IContactQueryOptions_adaptor::DesiredFields)->_get_DesiredFields(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} DesiredFields;
		struct : property {
			ContactQueryResultOrdering get() { ContactQueryResultOrdering value; hrcheck(enc(&IContactQueryOptions_adaptor::OrderBy)->_get_OrderBy(&value)); return value; }
			ContactQueryResultOrdering operator()() { return get(); }
			operator ContactQueryResultOrdering () { return get(); }
			void put(ContactQueryResultOrdering value) { hrcheck(enc(&IContactQueryOptions_adaptor::OrderBy)->_put_OrderBy(value)); }
			void operator=(ContactQueryResultOrdering value) { put(value); }
			void operator()(ContactQueryResultOrdering value) { put(value); }
		} OrderBy;
	};
	IContactQueryOptions_adaptor() {}
};
template<typename X> struct adapt<IContactQueryOptions, X> : Windows::Phone::PersonalInformation::IContactQueryOptions_adaptor<X> { typedef adapt IContactQueryOptions; };
struct IContactQueryOptions : IContactQueryOptions_raw, generate<IContactQueryOptions> {};

// ContactQueryOptions
template<typename X> struct statics<ContactQueryOptions, X> : X {
	typedef typename X::root_type ContactQueryOptions;
};
struct ContactQueryOptions : generate<ContactQueryOptions> {};

// ContactQueryResult
template<typename X> struct statics<ContactQueryResult, X> : X {
	typedef typename X::root_type ContactQueryResult;
};
struct ContactQueryResult : generate<ContactQueryResult> {
	using IContactQueryResult::GetContactsAsync;
};

// IContactChangeRecord
struct IContactChangeRecord_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeType(ContactChangeType *value);
	virtual STDMETHODIMP _get_RevisionNumber(unsigned __int64 *value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
};
template<typename X> struct IContactChangeRecord_adaptor : X {
	union {
		struct : property {
			ContactChangeType get() { ContactChangeType value; hrcheck(enc(&IContactChangeRecord_adaptor::ChangeType)->_get_ChangeType(&value)); return value; }
			ContactChangeType operator()() { return get(); }
			operator ContactChangeType () { return get(); }
		} ChangeType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactChangeRecord_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactChangeRecord_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RemoteId;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IContactChangeRecord_adaptor::RevisionNumber)->_get_RevisionNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} RevisionNumber;
	};
	IContactChangeRecord_adaptor() {}
};
template<typename X> struct adapt<IContactChangeRecord, X> : Windows::Phone::PersonalInformation::IContactChangeRecord_adaptor<X> { typedef adapt IContactChangeRecord; };
struct IContactChangeRecord : IContactChangeRecord_raw, generate<IContactChangeRecord> {};

// ContactChangeRecord
template<typename X> struct statics<ContactChangeRecord, X> : X {
	typedef typename X::root_type ContactChangeRecord;
};
struct ContactChangeRecord : generate<ContactChangeRecord> {};
}}}
} // namespace iso_winrt
