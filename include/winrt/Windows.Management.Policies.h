#pragma once
// generated by isopod tools
// namespaces:
// Windows.Management.Policies

#include "Windows.Management.Policies.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Storage { namespace Streams {
struct IBuffer;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::Management::Policies::NamedPolicyKind> : enum_type<int> {};
template<> struct def<Windows::Management::Policies::INamedPolicyData> : interface_type<> {};
template<> struct def<Windows::Management::Policies::NamedPolicyData> : class_type<Platform::Object, Windows::Management::Policies::INamedPolicyData> {};
template<> struct def<Windows::Management::Policies::INamedPolicyStatics> : interface_type<> {};
template<> struct def<Windows::Management::Policies::NamedPolicy> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Management::Policies::INamedPolicyData> { define_guid(0x38DCB198, 0x95AC, 0x4077, 0xA6, 0x43, 0x80, 0x78, 0xCA, 0xE2, 0x64, 0x0);};
template<> struct uuid<Windows::Management::Policies::INamedPolicyStatics> { define_guid(0x7F793BE7, 0x76C4, 0x4058, 0x8C, 0xAD, 0x67, 0x66, 0x2C, 0xD0, 0x5F, 0xD);};

// types

namespace Windows { namespace Management { namespace Policies {

// INamedPolicyData
struct INamedPolicyData_raw : IInspectable {
	virtual STDMETHODIMP _get_Area(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_Kind(NamedPolicyKind *value);
	virtual STDMETHODIMP _get_IsManaged(bool *value);
	virtual STDMETHODIMP _get_IsUserPolicy(bool *value);
	virtual STDMETHODIMP _get_User(System::User* *value);
	virtual STDMETHODIMP _GetBoolean(bool *result);
	virtual STDMETHODIMP _GetBinary(Storage::Streams::IBuffer* *result);
	virtual STDMETHODIMP _GetInt32(int *result);
	virtual STDMETHODIMP _GetInt64(__int64 *result);
	virtual STDMETHODIMP _GetString(HSTRING *result);
	virtual STDMETHODIMP _add_Changed(Foundation::TypedEventHandler<NamedPolicyData*, IInspectable*>* changedHandler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_Changed(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct INamedPolicyData_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INamedPolicyData_adaptor::Area)->_get_Area(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Area;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INamedPolicyData_adaptor::IsManaged)->_get_IsManaged(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsManaged;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INamedPolicyData_adaptor::IsUserPolicy)->_get_IsUserPolicy(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsUserPolicy;
		struct : property {
			NamedPolicyKind get() { NamedPolicyKind value; hrcheck(enc(&INamedPolicyData_adaptor::Kind)->_get_Kind(&value)); return value; }
			NamedPolicyKind operator()() { return get(); }
			operator NamedPolicyKind () { return get(); }
		} Kind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INamedPolicyData_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&INamedPolicyData_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<NamedPolicyData>, object>> changedHandler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&INamedPolicyData_adaptor::Changed)->_add_Changed(to_abi(changedHandler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&INamedPolicyData_adaptor::Changed)->_remove_Changed(cookie)); }
		} Changed;
	};
	bool GetBoolean() { bool result; hrcheck(X::get()->_GetBoolean(&result)); return result; }
	ptr<Storage::Streams::IBuffer> GetBinary() { Storage::Streams::IBuffer* result; hrcheck(X::get()->_GetBinary(&result)); return from_abi(result); }
	int GetInt32() { int result; hrcheck(X::get()->_GetInt32(&result)); return result; }
	__int64 GetInt64() { __int64 result; hrcheck(X::get()->_GetInt64(&result)); return result; }
	hstring GetString() { HSTRING result; hrcheck(X::get()->_GetString(&result)); return from_abi(result); }
	INamedPolicyData_adaptor() {}
};
template<typename X> struct adapt<INamedPolicyData, X> : Windows::Management::Policies::INamedPolicyData_adaptor<X> { typedef adapt INamedPolicyData; };
struct INamedPolicyData : INamedPolicyData_raw, generate<INamedPolicyData> {};

// NamedPolicyData
template<typename X> struct statics<NamedPolicyData, X> : X {
	typedef typename X::root_type NamedPolicyData;
};
struct NamedPolicyData : generate<NamedPolicyData> {};

// INamedPolicyStatics
struct INamedPolicyStatics : IInspectable {
	virtual STDMETHODIMP _GetPolicyFromPath(HSTRING area, HSTRING name, NamedPolicyData* *result);
	virtual STDMETHODIMP _GetPolicyFromPathForUser(System::User* user, HSTRING area, HSTRING name, NamedPolicyData* *result);
};

// NamedPolicy
template<typename> struct NamedPolicy_statics {
	static ptr<NamedPolicyData> GetPolicyFromPath(hstring_ref area, hstring_ref name) { NamedPolicyData* result; hrcheck(get_activation_factory<NamedPolicy, INamedPolicyStatics>()->_GetPolicyFromPath(area, name, &result)); return from_abi(result); }
	static ptr<NamedPolicyData> GetPolicyFromPathForUser(pptr<System::User> user, hstring_ref area, hstring_ref name) { NamedPolicyData* result; hrcheck(get_activation_factory<NamedPolicy, INamedPolicyStatics>()->_GetPolicyFromPathForUser(user, area, name, &result)); return from_abi(result); }
};

template<typename X> struct statics<NamedPolicy, X> : X, Windows::Management::Policies::NamedPolicy_statics<void> {
	typedef typename X::root_type NamedPolicy;
};
struct NamedPolicy : generate<NamedPolicy> {};
}}}
} // namespace iso_winrt
