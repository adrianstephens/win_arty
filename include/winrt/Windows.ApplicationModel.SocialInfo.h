#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.SocialInfo

#include "Windows.ApplicationModel.SocialInfo.0.h"
#include "Windows.Graphics.Imaging.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
}}
namespace Storage { namespace Streams {
struct IInputStream;
}}}

// defs

template<> struct def<Windows::ApplicationModel::SocialInfo::SocialInfoContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialItemBadgeStyle> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialFeedKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialFeedItemStyle> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialFeedUpdateMode> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::ISocialItemThumbnail> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::ISocialFeedContent> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::ISocialUserInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::ISocialFeedItem> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialUserInfo> : class_type<Platform::Object, Windows::ApplicationModel::SocialInfo::ISocialUserInfo> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialFeedContent> : class_type<Platform::Object, Windows::ApplicationModel::SocialInfo::ISocialFeedContent> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialItemThumbnail> : class_type<Platform::Object, Windows::ApplicationModel::SocialInfo::ISocialItemThumbnail> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::ISocialFeedSharedItem> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialFeedSharedItem> : class_type<Platform::Object, Windows::ApplicationModel::SocialInfo::ISocialFeedSharedItem> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::ISocialFeedChildItem> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialFeedChildItem> : class_type<Platform::Object, Windows::ApplicationModel::SocialInfo::ISocialFeedChildItem> {};
template<> struct def<Windows::ApplicationModel::SocialInfo::SocialFeedItem> : class_type<Platform::Object, Windows::ApplicationModel::SocialInfo::ISocialFeedItem> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::SocialInfo::ISocialItemThumbnail> { define_guid(0x5CBF831A, 0x3F08, 0x497F, 0x91, 0x7F, 0x57, 0xE0, 0x9D, 0x84, 0xB1, 0x41);};
template<> struct uuid<Windows::ApplicationModel::SocialInfo::ISocialFeedContent> { define_guid(0xA234E429, 0x3E39, 0x494D, 0xA3, 0x7C, 0xF4, 0x62, 0xA2, 0x49, 0x45, 0x14);};
template<> struct uuid<Windows::ApplicationModel::SocialInfo::ISocialUserInfo> { define_guid(0x9E5E1BD1, 0x90D0, 0x4E1D, 0x95, 0x54, 0x84, 0x4D, 0x46, 0x60, 0x7F, 0x61);};
template<> struct uuid<Windows::ApplicationModel::SocialInfo::ISocialFeedItem> { define_guid(0x4F1392AB, 0x1F72, 0x4D33, 0xB6, 0x95, 0xDE, 0x3E, 0x1D, 0xB6, 0x3, 0x17);};
template<> struct uuid<Windows::ApplicationModel::SocialInfo::ISocialFeedSharedItem> { define_guid(0x7BFB9E40, 0xA6AA, 0x45A7, 0x9F, 0xF6, 0x54, 0xC4, 0x21, 0x5, 0xDD, 0x1F);};
template<> struct uuid<Windows::ApplicationModel::SocialInfo::ISocialFeedChildItem> { define_guid(0xB6A985A, 0xD59D, 0x40BE, 0x98, 0xC, 0x48, 0x8A, 0x2A, 0xB3, 0xA, 0x83);};

// types

namespace Windows { namespace ApplicationModel { namespace SocialInfo {

// ISocialItemThumbnail
struct ISocialItemThumbnail_raw : IInspectable {
	virtual STDMETHODIMP _get_TargetUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_TargetUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_ImageUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ImageUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_BitmapSize(Graphics::Imaging::BitmapSize *value);
	virtual STDMETHODIMP _put_BitmapSize(Graphics::Imaging::BitmapSize value);
	virtual STDMETHODIMP _SetImageAsync(Storage::Streams::IInputStream* image, Foundation::IAsyncAction* *operation);
};
template<typename X> struct ISocialItemThumbnail_adaptor : X {
	union {
		struct : property {
			Graphics::Imaging::BitmapSize get() { Graphics::Imaging::BitmapSize value; hrcheck(enc(&ISocialItemThumbnail_adaptor::BitmapSize)->_get_BitmapSize(&value)); return value; }
			Graphics::Imaging::BitmapSize operator()() { return get(); }
			operator Graphics::Imaging::BitmapSize () { return get(); }
			void put(const Graphics::Imaging::BitmapSize& value) { hrcheck(enc(&ISocialItemThumbnail_adaptor::BitmapSize)->_put_BitmapSize(value)); }
			void operator=(const Graphics::Imaging::BitmapSize& value) { put(value); }
			void operator()(const Graphics::Imaging::BitmapSize& value) { put(value); }
		} BitmapSize;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialItemThumbnail_adaptor::ImageUri)->_get_ImageUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialItemThumbnail_adaptor::ImageUri)->_put_ImageUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ImageUri;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialItemThumbnail_adaptor::TargetUri)->_get_TargetUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialItemThumbnail_adaptor::TargetUri)->_put_TargetUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} TargetUri;
	};
	ptr<Foundation::IAsyncAction> SetImageAsync(pptr<Storage::Streams::IInputStream> image) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SetImageAsync(image, &operation)); return from_abi(operation); }
	ISocialItemThumbnail_adaptor() {}
};
template<typename X> struct adapt<ISocialItemThumbnail, X> : Windows::ApplicationModel::SocialInfo::ISocialItemThumbnail_adaptor<X> { typedef adapt ISocialItemThumbnail; };
struct ISocialItemThumbnail : ISocialItemThumbnail_raw, generate<ISocialItemThumbnail> {};

// ISocialFeedContent
struct ISocialFeedContent_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Message(HSTRING *value);
	virtual STDMETHODIMP _put_Message(HSTRING value);
	virtual STDMETHODIMP _get_TargetUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_TargetUri(Foundation::Uri* value);
};
template<typename X> struct ISocialFeedContent_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISocialFeedContent_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISocialFeedContent_adaptor::Message)->_put_Message(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Message;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialFeedContent_adaptor::TargetUri)->_get_TargetUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialFeedContent_adaptor::TargetUri)->_put_TargetUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} TargetUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISocialFeedContent_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISocialFeedContent_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	ISocialFeedContent_adaptor() {}
};
template<typename X> struct adapt<ISocialFeedContent, X> : Windows::ApplicationModel::SocialInfo::ISocialFeedContent_adaptor<X> { typedef adapt ISocialFeedContent; };
struct ISocialFeedContent : ISocialFeedContent_raw, generate<ISocialFeedContent> {};

// ISocialUserInfo
struct ISocialUserInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_UserName(HSTRING *value);
	virtual STDMETHODIMP _put_UserName(HSTRING value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_TargetUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_TargetUri(Foundation::Uri* value);
};
template<typename X> struct ISocialUserInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISocialUserInfo_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISocialUserInfo_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISocialUserInfo_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISocialUserInfo_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialUserInfo_adaptor::TargetUri)->_get_TargetUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialUserInfo_adaptor::TargetUri)->_put_TargetUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} TargetUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISocialUserInfo_adaptor::UserName)->_get_UserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISocialUserInfo_adaptor::UserName)->_put_UserName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} UserName;
	};
	ISocialUserInfo_adaptor() {}
};
template<typename X> struct adapt<ISocialUserInfo, X> : Windows::ApplicationModel::SocialInfo::ISocialUserInfo_adaptor<X> { typedef adapt ISocialUserInfo; };
struct ISocialUserInfo : ISocialUserInfo_raw, generate<ISocialUserInfo> {};

// ISocialFeedItem
struct ISocialFeedItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Author(SocialUserInfo* *value);
	virtual STDMETHODIMP _get_PrimaryContent(SocialFeedContent* *value);
	virtual STDMETHODIMP _get_SecondaryContent(SocialFeedContent* *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_Timestamp(Foundation::DateTime value);
	virtual STDMETHODIMP _get_TargetUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_TargetUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Thumbnails(Foundation::Collections::IVector<SocialItemThumbnail*>* *value);
	virtual STDMETHODIMP _get_SharedItem(SocialFeedSharedItem* *value);
	virtual STDMETHODIMP _put_SharedItem(SocialFeedSharedItem* value);
	virtual STDMETHODIMP _get_BadgeStyle(SocialItemBadgeStyle *value);
	virtual STDMETHODIMP _put_BadgeStyle(SocialItemBadgeStyle value);
	virtual STDMETHODIMP _get_BadgeCountValue(int *value);
	virtual STDMETHODIMP _put_BadgeCountValue(int value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_ChildItem(SocialFeedChildItem* *value);
	virtual STDMETHODIMP _put_ChildItem(SocialFeedChildItem* value);
	virtual STDMETHODIMP _get_Style(SocialFeedItemStyle *value);
	virtual STDMETHODIMP _put_Style(SocialFeedItemStyle value);
};
template<typename X> struct ISocialFeedItem_adaptor : X {
	union {
		struct : property {
			ptr<SocialUserInfo> get() { SocialUserInfo* value; hrcheck(enc(&ISocialFeedItem_adaptor::Author)->_get_Author(&value)); return from_abi(value); }
			ptr<SocialUserInfo> operator()() { return get(); }
			operator ptr<SocialUserInfo> () { return get(); }
			ptr<SocialUserInfo> operator->() { return get(); }
		} Author;
		struct : property {
			int get() { int value; hrcheck(enc(&ISocialFeedItem_adaptor::BadgeCountValue)->_get_BadgeCountValue(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISocialFeedItem_adaptor::BadgeCountValue)->_put_BadgeCountValue(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} BadgeCountValue;
		struct : property {
			SocialItemBadgeStyle get() { SocialItemBadgeStyle value; hrcheck(enc(&ISocialFeedItem_adaptor::BadgeStyle)->_get_BadgeStyle(&value)); return value; }
			SocialItemBadgeStyle operator()() { return get(); }
			operator SocialItemBadgeStyle () { return get(); }
			void put(SocialItemBadgeStyle value) { hrcheck(enc(&ISocialFeedItem_adaptor::BadgeStyle)->_put_BadgeStyle(value)); }
			void operator=(SocialItemBadgeStyle value) { put(value); }
			void operator()(SocialItemBadgeStyle value) { put(value); }
		} BadgeStyle;
		struct : property {
			ptr<SocialFeedChildItem> get() { SocialFeedChildItem* value; hrcheck(enc(&ISocialFeedItem_adaptor::ChildItem)->_get_ChildItem(&value)); return from_abi(value); }
			ptr<SocialFeedChildItem> operator()() { return get(); }
			operator ptr<SocialFeedChildItem> () { return get(); }
			ptr<SocialFeedChildItem> operator->() { return get(); }
			void put(pptr<SocialFeedChildItem> value) { hrcheck(enc(&ISocialFeedItem_adaptor::ChildItem)->_put_ChildItem(value)); }
			void operator=(pptr<SocialFeedChildItem> value) { put(value); }
			void operator()(pptr<SocialFeedChildItem> value) { put(value); }
		} ChildItem;
		struct : property {
			ptr<SocialFeedContent> get() { SocialFeedContent* value; hrcheck(enc(&ISocialFeedItem_adaptor::PrimaryContent)->_get_PrimaryContent(&value)); return from_abi(value); }
			ptr<SocialFeedContent> operator()() { return get(); }
			operator ptr<SocialFeedContent> () { return get(); }
			ptr<SocialFeedContent> operator->() { return get(); }
		} PrimaryContent;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISocialFeedItem_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISocialFeedItem_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			ptr<SocialFeedContent> get() { SocialFeedContent* value; hrcheck(enc(&ISocialFeedItem_adaptor::SecondaryContent)->_get_SecondaryContent(&value)); return from_abi(value); }
			ptr<SocialFeedContent> operator()() { return get(); }
			operator ptr<SocialFeedContent> () { return get(); }
			ptr<SocialFeedContent> operator->() { return get(); }
		} SecondaryContent;
		struct : property {
			ptr<SocialFeedSharedItem> get() { SocialFeedSharedItem* value; hrcheck(enc(&ISocialFeedItem_adaptor::SharedItem)->_get_SharedItem(&value)); return from_abi(value); }
			ptr<SocialFeedSharedItem> operator()() { return get(); }
			operator ptr<SocialFeedSharedItem> () { return get(); }
			ptr<SocialFeedSharedItem> operator->() { return get(); }
			void put(pptr<SocialFeedSharedItem> value) { hrcheck(enc(&ISocialFeedItem_adaptor::SharedItem)->_put_SharedItem(value)); }
			void operator=(pptr<SocialFeedSharedItem> value) { put(value); }
			void operator()(pptr<SocialFeedSharedItem> value) { put(value); }
		} SharedItem;
		struct : property {
			SocialFeedItemStyle get() { SocialFeedItemStyle value; hrcheck(enc(&ISocialFeedItem_adaptor::Style)->_get_Style(&value)); return value; }
			SocialFeedItemStyle operator()() { return get(); }
			operator SocialFeedItemStyle () { return get(); }
			void put(SocialFeedItemStyle value) { hrcheck(enc(&ISocialFeedItem_adaptor::Style)->_put_Style(value)); }
			void operator=(SocialFeedItemStyle value) { put(value); }
			void operator()(SocialFeedItemStyle value) { put(value); }
		} Style;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialFeedItem_adaptor::TargetUri)->_get_TargetUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialFeedItem_adaptor::TargetUri)->_put_TargetUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} TargetUri;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> get() { Foundation::Collections::IVector<SocialItemThumbnail*>* value; hrcheck(enc(&ISocialFeedItem_adaptor::Thumbnails)->_get_Thumbnails(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> operator->() { return get(); }
		} Thumbnails;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISocialFeedItem_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&ISocialFeedItem_adaptor::Timestamp)->_put_Timestamp(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} Timestamp;
	};
	ISocialFeedItem_adaptor() {}
};
template<typename X> struct adapt<ISocialFeedItem, X> : Windows::ApplicationModel::SocialInfo::ISocialFeedItem_adaptor<X> { typedef adapt ISocialFeedItem; };
struct ISocialFeedItem : ISocialFeedItem_raw, generate<ISocialFeedItem> {};

// SocialUserInfo
template<typename X> struct statics<SocialUserInfo, X> : X {
	typedef typename X::root_type SocialUserInfo;
};
struct SocialUserInfo : generate<SocialUserInfo> {};

// SocialFeedContent
template<typename X> struct statics<SocialFeedContent, X> : X {
	typedef typename X::root_type SocialFeedContent;
};
struct SocialFeedContent : generate<SocialFeedContent> {};

// SocialItemThumbnail
template<typename X> struct statics<SocialItemThumbnail, X> : X {
	typedef typename X::root_type SocialItemThumbnail;
};
struct SocialItemThumbnail : generate<SocialItemThumbnail> {};

// ISocialFeedSharedItem
struct ISocialFeedSharedItem_raw : IInspectable {
	virtual STDMETHODIMP _get_OriginalSource(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_OriginalSource(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Content(SocialFeedContent* *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_Timestamp(Foundation::DateTime value);
	virtual STDMETHODIMP _get_TargetUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_TargetUri(Foundation::Uri* value);
	virtual STDMETHODIMP _put_Thumbnail(SocialItemThumbnail* value);
	virtual STDMETHODIMP _get_Thumbnail(SocialItemThumbnail* *value);
};
template<typename X> struct ISocialFeedSharedItem_adaptor : X {
	union {
		struct : property {
			ptr<SocialFeedContent> get() { SocialFeedContent* value; hrcheck(enc(&ISocialFeedSharedItem_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<SocialFeedContent> operator()() { return get(); }
			operator ptr<SocialFeedContent> () { return get(); }
			ptr<SocialFeedContent> operator->() { return get(); }
		} Content;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialFeedSharedItem_adaptor::OriginalSource)->_get_OriginalSource(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialFeedSharedItem_adaptor::OriginalSource)->_put_OriginalSource(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} OriginalSource;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialFeedSharedItem_adaptor::TargetUri)->_get_TargetUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialFeedSharedItem_adaptor::TargetUri)->_put_TargetUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} TargetUri;
		struct : property {
			ptr<SocialItemThumbnail> get() { SocialItemThumbnail* value; hrcheck(enc(&ISocialFeedSharedItem_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<SocialItemThumbnail> operator()() { return get(); }
			operator ptr<SocialItemThumbnail> () { return get(); }
			ptr<SocialItemThumbnail> operator->() { return get(); }
			void put(pptr<SocialItemThumbnail> value) { hrcheck(enc(&ISocialFeedSharedItem_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<SocialItemThumbnail> value) { put(value); }
			void operator()(pptr<SocialItemThumbnail> value) { put(value); }
		} Thumbnail;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISocialFeedSharedItem_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&ISocialFeedSharedItem_adaptor::Timestamp)->_put_Timestamp(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} Timestamp;
	};
	ISocialFeedSharedItem_adaptor() {}
};
template<typename X> struct adapt<ISocialFeedSharedItem, X> : Windows::ApplicationModel::SocialInfo::ISocialFeedSharedItem_adaptor<X> { typedef adapt ISocialFeedSharedItem; };
struct ISocialFeedSharedItem : ISocialFeedSharedItem_raw, generate<ISocialFeedSharedItem> {};

// SocialFeedSharedItem
template<typename X> struct statics<SocialFeedSharedItem, X> : X {
	typedef typename X::root_type SocialFeedSharedItem;
};
struct SocialFeedSharedItem : generate<SocialFeedSharedItem> {};

// ISocialFeedChildItem
struct ISocialFeedChildItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Author(SocialUserInfo* *value);
	virtual STDMETHODIMP _get_PrimaryContent(SocialFeedContent* *value);
	virtual STDMETHODIMP _get_SecondaryContent(SocialFeedContent* *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_Timestamp(Foundation::DateTime value);
	virtual STDMETHODIMP _get_TargetUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_TargetUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Thumbnails(Foundation::Collections::IVector<SocialItemThumbnail*>* *value);
	virtual STDMETHODIMP _get_SharedItem(SocialFeedSharedItem* *value);
	virtual STDMETHODIMP _put_SharedItem(SocialFeedSharedItem* value);
};
template<typename X> struct ISocialFeedChildItem_adaptor : X {
	union {
		struct : property {
			ptr<SocialUserInfo> get() { SocialUserInfo* value; hrcheck(enc(&ISocialFeedChildItem_adaptor::Author)->_get_Author(&value)); return from_abi(value); }
			ptr<SocialUserInfo> operator()() { return get(); }
			operator ptr<SocialUserInfo> () { return get(); }
			ptr<SocialUserInfo> operator->() { return get(); }
		} Author;
		struct : property {
			ptr<SocialFeedContent> get() { SocialFeedContent* value; hrcheck(enc(&ISocialFeedChildItem_adaptor::PrimaryContent)->_get_PrimaryContent(&value)); return from_abi(value); }
			ptr<SocialFeedContent> operator()() { return get(); }
			operator ptr<SocialFeedContent> () { return get(); }
			ptr<SocialFeedContent> operator->() { return get(); }
		} PrimaryContent;
		struct : property {
			ptr<SocialFeedContent> get() { SocialFeedContent* value; hrcheck(enc(&ISocialFeedChildItem_adaptor::SecondaryContent)->_get_SecondaryContent(&value)); return from_abi(value); }
			ptr<SocialFeedContent> operator()() { return get(); }
			operator ptr<SocialFeedContent> () { return get(); }
			ptr<SocialFeedContent> operator->() { return get(); }
		} SecondaryContent;
		struct : property {
			ptr<SocialFeedSharedItem> get() { SocialFeedSharedItem* value; hrcheck(enc(&ISocialFeedChildItem_adaptor::SharedItem)->_get_SharedItem(&value)); return from_abi(value); }
			ptr<SocialFeedSharedItem> operator()() { return get(); }
			operator ptr<SocialFeedSharedItem> () { return get(); }
			ptr<SocialFeedSharedItem> operator->() { return get(); }
			void put(pptr<SocialFeedSharedItem> value) { hrcheck(enc(&ISocialFeedChildItem_adaptor::SharedItem)->_put_SharedItem(value)); }
			void operator=(pptr<SocialFeedSharedItem> value) { put(value); }
			void operator()(pptr<SocialFeedSharedItem> value) { put(value); }
		} SharedItem;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISocialFeedChildItem_adaptor::TargetUri)->_get_TargetUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISocialFeedChildItem_adaptor::TargetUri)->_put_TargetUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} TargetUri;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> get() { Foundation::Collections::IVector<SocialItemThumbnail*>* value; hrcheck(enc(&ISocialFeedChildItem_adaptor::Thumbnails)->_get_Thumbnails(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SocialItemThumbnail>>> operator->() { return get(); }
		} Thumbnails;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISocialFeedChildItem_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&ISocialFeedChildItem_adaptor::Timestamp)->_put_Timestamp(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} Timestamp;
	};
	ISocialFeedChildItem_adaptor() {}
};
template<typename X> struct adapt<ISocialFeedChildItem, X> : Windows::ApplicationModel::SocialInfo::ISocialFeedChildItem_adaptor<X> { typedef adapt ISocialFeedChildItem; };
struct ISocialFeedChildItem : ISocialFeedChildItem_raw, generate<ISocialFeedChildItem> {};

// SocialFeedChildItem
template<typename X> struct statics<SocialFeedChildItem, X> : X {
	typedef typename X::root_type SocialFeedChildItem;
};
struct SocialFeedChildItem : generate<SocialFeedChildItem> {};

// SocialFeedItem
template<typename X> struct statics<SocialFeedItem, X> : X {
	typedef typename X::root_type SocialFeedItem;
};
struct SocialFeedItem : generate<SocialFeedItem> {};
}}}
} // namespace iso_winrt
