#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Input

#include "Windows.UI.Input.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.Devices.Input.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Haptics {
struct SimpleHapticsController;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVector;
}}
namespace Storage { namespace Streams {
struct RandomAccessStreamReference;
}}
namespace UI { namespace Core {
struct KeyEventArgs;
}}}

// defs

template<> struct def<Windows::UI::Input::EdgeGestureKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::IEdgeGestureEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::EdgeGestureEventArgs> : class_type<Platform::Object, Windows::UI::Input::IEdgeGestureEventArgs> {};
template<> struct def<Windows::UI::Input::IEdgeGestureStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::IEdgeGesture> : interface_type<> {};
template<> struct def<Windows::UI::Input::EdgeGesture> : class_type<Platform::Object, Windows::UI::Input::IEdgeGesture> {};
template<> struct def<Windows::UI::Input::IKeyboardDeliveryInterceptor> : interface_type<> {};
template<> struct def<Windows::UI::Input::IKeyboardDeliveryInterceptorStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::KeyboardDeliveryInterceptor> : class_type<Platform::Object, Windows::UI::Input::IKeyboardDeliveryInterceptor> {};
template<> struct def<Windows::UI::Input::HoldingState> : enum_type<int> {};
template<> struct def<Windows::UI::Input::DraggingState> : enum_type<int> {};
template<> struct def<Windows::UI::Input::CrossSlidingState> : enum_type<int> {};
template<> struct def<Windows::UI::Input::GestureSettings> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::ManipulationDelta> : value_type<Windows::Foundation::Point, float, float, float> {};
template<> struct def<Windows::UI::Input::ManipulationVelocities> : value_type<Windows::Foundation::Point, float, float> {};
template<> struct def<Windows::UI::Input::CrossSlideThresholds> : value_type<float, float, float, float> {};
template<> struct def<Windows::UI::Input::ITappedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRightTappedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IHoldingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IDraggingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IManipulationStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IManipulationUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IManipulationInertiaStartingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IManipulationCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::ICrossSlidingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IMouseWheelParameters> : interface_type<> {};
template<> struct def<Windows::UI::Input::IGestureRecognizer> : interface_type<> {};
template<> struct def<Windows::UI::Input::MouseWheelParameters> : class_type<Platform::Object, Windows::UI::Input::IMouseWheelParameters> {};
template<> struct def<Windows::UI::Input::GestureRecognizer> : class_type<Platform::Object, Windows::UI::Input::IGestureRecognizer> {};
template<> struct def<Windows::UI::Input::TappedEventArgs> : class_type<Platform::Object, Windows::UI::Input::ITappedEventArgs> {};
template<> struct def<Windows::UI::Input::RightTappedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRightTappedEventArgs> {};
template<> struct def<Windows::UI::Input::HoldingEventArgs> : class_type<Platform::Object, Windows::UI::Input::IHoldingEventArgs> {};
template<> struct def<Windows::UI::Input::DraggingEventArgs> : class_type<Platform::Object, Windows::UI::Input::IDraggingEventArgs> {};
template<> struct def<Windows::UI::Input::ManipulationStartedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IManipulationStartedEventArgs> {};
template<> struct def<Windows::UI::Input::ManipulationUpdatedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IManipulationUpdatedEventArgs> {};
template<> struct def<Windows::UI::Input::ManipulationInertiaStartingEventArgs> : class_type<Platform::Object, Windows::UI::Input::IManipulationInertiaStartingEventArgs> {};
template<> struct def<Windows::UI::Input::ManipulationCompletedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IManipulationCompletedEventArgs> {};
template<> struct def<Windows::UI::Input::CrossSlidingEventArgs> : class_type<Platform::Object, Windows::UI::Input::ICrossSlidingEventArgs> {};
template<> struct def<Windows::UI::Input::IPointerPointStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::IPointerPoint> : interface_type<> {};
template<> struct def<Windows::UI::Input::PointerPoint> : class_type<Platform::Object, Windows::UI::Input::IPointerPoint> {};
template<> struct def<Windows::UI::Input::IPointerPointTransform> : overridable_type<> {};
template<> struct def<Windows::UI::Input::PointerUpdateKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::IPointerPointProperties2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IPointerPointProperties> : interface_type<> {};
template<> struct def<Windows::UI::Input::PointerPointProperties> : class_type<Platform::Object, Windows::UI::Input::IPointerPointProperties, Windows::UI::Input::IPointerPointProperties2> {};
template<> struct def<Windows::UI::Input::IPointerVisualizationSettings> : interface_type<> {};
template<> struct def<Windows::UI::Input::IPointerVisualizationSettingsStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::PointerVisualizationSettings> : class_type<Platform::Object, Windows::UI::Input::IPointerVisualizationSettings> {};
template<> struct def<Windows::UI::Input::RadialControllerSystemMenuItemKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::RadialControllerMenuKnownIcon> : enum_type<int> {};
template<> struct def<Windows::UI::Input::IRadialControllerScreenContact> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerRotationChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::RadialControllerScreenContact> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerScreenContact> {};
template<> struct def<Windows::UI::Input::IRadialControllerRotationChangedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerButtonPressedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerButtonHoldingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerButtonReleasedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerScreenContactEndedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerButtonClickedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerButtonClickedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerControlAcquiredEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerControlAcquiredEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialController> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerMenu> : interface_type<> {};
template<> struct def<Windows::UI::Input::RadialControllerMenu> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerMenu> {};
template<> struct def<Windows::UI::Input::IRadialControllerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialController2> : interface_type<> {};
template<> struct def<Windows::UI::Input::RadialController> : class_type<Platform::Object, Windows::UI::Input::IRadialController, Windows::UI::Input::IRadialController2> {};
template<> struct def<Windows::UI::Input::RadialControllerScreenContactStartedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs, Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs2> {};
template<> struct def<Windows::UI::Input::RadialControllerScreenContactContinuedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs, Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs2> {};
template<> struct def<Windows::UI::Input::RadialControllerRotationChangedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerRotationChangedEventArgs, Windows::UI::Input::IRadialControllerRotationChangedEventArgs2> {};
template<> struct def<Windows::UI::Input::RadialControllerButtonClickedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerButtonClickedEventArgs, Windows::UI::Input::IRadialControllerButtonClickedEventArgs2> {};
template<> struct def<Windows::UI::Input::RadialControllerControlAcquiredEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerControlAcquiredEventArgs, Windows::UI::Input::IRadialControllerControlAcquiredEventArgs2> {};
template<> struct def<Windows::UI::Input::RadialControllerButtonPressedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerButtonPressedEventArgs> {};
template<> struct def<Windows::UI::Input::RadialControllerButtonHoldingEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerButtonHoldingEventArgs> {};
template<> struct def<Windows::UI::Input::RadialControllerButtonReleasedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerButtonReleasedEventArgs> {};
template<> struct def<Windows::UI::Input::IRadialControllerMenuItemStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerMenuItemStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerMenuItem> : interface_type<> {};
template<> struct def<Windows::UI::Input::RadialControllerMenuItem> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerMenuItem> {};
template<> struct def<Windows::UI::Input::IRadialControllerConfiguration> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerConfigurationStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerConfigurationStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Input::IRadialControllerConfiguration2> : interface_type<> {};
template<> struct def<Windows::UI::Input::RadialControllerConfiguration> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerConfiguration, Windows::UI::Input::IRadialControllerConfiguration2> {};
template<> struct def<Windows::UI::Input::RadialControllerScreenContactEndedEventArgs> : class_type<Platform::Object, Windows::UI::Input::IRadialControllerScreenContactEndedEventArgs> {};

// uuids

template<> struct uuid<Windows::UI::Input::IEdgeGestureEventArgs> { define_guid(0x44FA4A24, 0x2D09, 0x42E1, 0x8B, 0x5E, 0x36, 0x82, 0x8, 0x79, 0x6A, 0x4C);};
template<> struct uuid<Windows::UI::Input::IEdgeGestureStatics> { define_guid(0xBC6A8519, 0x18EE, 0x4043, 0x98, 0x39, 0x4F, 0xC5, 0x84, 0xD6, 0xA, 0x14);};
template<> struct uuid<Windows::UI::Input::IEdgeGesture> { define_guid(0x580D5292, 0x2AB1, 0x49AA, 0xA7, 0xF0, 0x33, 0xBD, 0x3F, 0x8D, 0xF9, 0xF1);};
template<> struct uuid<Windows::UI::Input::IKeyboardDeliveryInterceptor> { define_guid(0xB4BAF068, 0x8F49, 0x446C, 0x8D, 0xB5, 0x8C, 0xF, 0xFE, 0x85, 0xCC, 0x9E);};
template<> struct uuid<Windows::UI::Input::IKeyboardDeliveryInterceptorStatics> { define_guid(0xF9F63BA2, 0xCEBA, 0x4755, 0x8A, 0x7E, 0x14, 0xC0, 0xFF, 0xEC, 0xD2, 0x39);};
template<> struct uuid<Windows::UI::Input::ITappedEventArgs> { define_guid(0xCFA126E4, 0x253A, 0x4C3C, 0x95, 0x3B, 0x39, 0x5C, 0x37, 0xAE, 0xD3, 0x9);};
template<> struct uuid<Windows::UI::Input::IRightTappedEventArgs> { define_guid(0x4CBF40BD, 0xAF7A, 0x4A36, 0x94, 0x76, 0xB1, 0xDC, 0xE1, 0x41, 0x70, 0x9A);};
template<> struct uuid<Windows::UI::Input::IHoldingEventArgs> { define_guid(0x2BF755C5, 0xE799, 0x41B4, 0xBB, 0x40, 0x24, 0x2F, 0x40, 0x95, 0x9B, 0x71);};
template<> struct uuid<Windows::UI::Input::IDraggingEventArgs> { define_guid(0x1C905384, 0x83C, 0x4BD3, 0xB5, 0x59, 0x17, 0x9C, 0xDD, 0xEB, 0x33, 0xEC);};
template<> struct uuid<Windows::UI::Input::IManipulationStartedEventArgs> { define_guid(0xDDEC873E, 0xCFCE, 0x4932, 0x8C, 0x1D, 0x3C, 0x3D, 0x1, 0x1A, 0x34, 0xC0);};
template<> struct uuid<Windows::UI::Input::IManipulationUpdatedEventArgs> { define_guid(0xCB354CE5, 0xABB8, 0x4F9F, 0xB3, 0xCE, 0x81, 0x81, 0xAA, 0x61, 0xAD, 0x82);};
template<> struct uuid<Windows::UI::Input::IManipulationInertiaStartingEventArgs> { define_guid(0xDD37A898, 0x26BF, 0x467A, 0x9C, 0xE5, 0xCC, 0xF3, 0xFB, 0x11, 0x37, 0x1E);};
template<> struct uuid<Windows::UI::Input::IManipulationCompletedEventArgs> { define_guid(0xB34AB22B, 0xD19B, 0x46FF, 0x9F, 0x38, 0xDE, 0xC7, 0x75, 0x4B, 0xB9, 0xE7);};
template<> struct uuid<Windows::UI::Input::ICrossSlidingEventArgs> { define_guid(0xE9374738, 0x6F88, 0x41D9, 0x87, 0x20, 0x78, 0xE0, 0x8E, 0x39, 0x83, 0x49);};
template<> struct uuid<Windows::UI::Input::IMouseWheelParameters> { define_guid(0xEAD0CA44, 0x9DED, 0x4037, 0x81, 0x49, 0x5E, 0x4C, 0xC2, 0x56, 0x44, 0x68);};
template<> struct uuid<Windows::UI::Input::IGestureRecognizer> { define_guid(0xB47A37BF, 0x3D6B, 0x4F88, 0x83, 0xE8, 0x6D, 0xCB, 0x40, 0x12, 0xFF, 0xB0);};
template<> struct uuid<Windows::UI::Input::IPointerPointStatics> { define_guid(0xA506638D, 0x2A1A, 0x413E, 0xBC, 0x75, 0x9F, 0x38, 0x38, 0x1C, 0xC0, 0x69);};
template<> struct uuid<Windows::UI::Input::IPointerPoint> { define_guid(0xE995317D, 0x7296, 0x42D9, 0x82, 0x33, 0xC5, 0xBE, 0x73, 0xB7, 0x4A, 0x4A);};
template<> struct uuid<Windows::UI::Input::IPointerPointTransform> { define_guid(0x4D5FE14F, 0xB87C, 0x4028, 0xBC, 0x9C, 0x59, 0xE9, 0x94, 0x7F, 0xB0, 0x56);};
template<> struct uuid<Windows::UI::Input::IPointerPointProperties2> { define_guid(0x22C3433A, 0xC83B, 0x41C0, 0xA2, 0x96, 0x5E, 0x23, 0x2D, 0x64, 0xD6, 0xAF);};
template<> struct uuid<Windows::UI::Input::IPointerPointProperties> { define_guid(0xC79D8A4B, 0xC163, 0x4EE7, 0x80, 0x3F, 0x67, 0xCE, 0x79, 0xF9, 0x97, 0x2D);};
template<> struct uuid<Windows::UI::Input::IPointerVisualizationSettings> { define_guid(0x4D1E6461, 0x84F7, 0x499D, 0xBD, 0x91, 0x2A, 0x36, 0xE2, 0xB7, 0xAA, 0xA2);};
template<> struct uuid<Windows::UI::Input::IPointerVisualizationSettingsStatics> { define_guid(0x68870EDB, 0x165B, 0x4214, 0xB4, 0xF3, 0x58, 0x4E, 0xCA, 0x8C, 0x8A, 0x69);};
template<> struct uuid<Windows::UI::Input::IRadialControllerScreenContact> { define_guid(0x206AA434, 0xE651, 0x11E5, 0xBF, 0x62, 0x2C, 0x27, 0xD7, 0x40, 0x4E, 0x85);};
template<> struct uuid<Windows::UI::Input::IRadialControllerRotationChangedEventArgs> { define_guid(0x206AA435, 0xE651, 0x11E5, 0xBF, 0x62, 0x2C, 0x27, 0xD7, 0x40, 0x4E, 0x85);};
template<> struct uuid<Windows::UI::Input::IRadialControllerRotationChangedEventArgs2> { define_guid(0x3D577EEC, 0x4CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerButtonPressedEventArgs> { define_guid(0x3D577EED, 0x4CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerButtonHoldingEventArgs> { define_guid(0x3D577EEE, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerButtonReleasedEventArgs> { define_guid(0x3D577EEF, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs> { define_guid(0x206AA436, 0xE651, 0x11E5, 0xBF, 0x62, 0x2C, 0x27, 0xD7, 0x40, 0x4E, 0x85);};
template<> struct uuid<Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs2> { define_guid(0x3D577EF0, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs> { define_guid(0x206AA437, 0xE651, 0x11E5, 0xBF, 0x62, 0x2C, 0x27, 0xD7, 0x40, 0x4E, 0x85);};
template<> struct uuid<Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs2> { define_guid(0x3D577EF1, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerScreenContactEndedEventArgs> { define_guid(0x3D577EF2, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerButtonClickedEventArgs> { define_guid(0x206AA438, 0xE651, 0x11E5, 0xBF, 0x62, 0x2C, 0x27, 0xD7, 0x40, 0x4E, 0x85);};
template<> struct uuid<Windows::UI::Input::IRadialControllerButtonClickedEventArgs2> { define_guid(0x3D577EF3, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerControlAcquiredEventArgs> { define_guid(0x206AA439, 0xE651, 0x11E5, 0xBF, 0x62, 0x2C, 0x27, 0xD7, 0x40, 0x4E, 0x85);};
template<> struct uuid<Windows::UI::Input::IRadialControllerControlAcquiredEventArgs2> { define_guid(0x3D577EF4, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialController> { define_guid(0x3055D1C8, 0xDF51, 0x43D4, 0xB2, 0x3B, 0xE, 0x10, 0x37, 0x46, 0x7A, 0x9);};
template<> struct uuid<Windows::UI::Input::IRadialControllerMenu> { define_guid(0x8506B35D, 0xF640, 0x4412, 0xAB, 0xA0, 0xBA, 0xD0, 0x77, 0xE5, 0xEA, 0x8A);};
template<> struct uuid<Windows::UI::Input::IRadialControllerStatics> { define_guid(0xFADED0B7, 0xB84C, 0x4894, 0x87, 0xAA, 0x8F, 0x25, 0xAA, 0x5F, 0x28, 0x8B);};
template<> struct uuid<Windows::UI::Input::IRadialController2> { define_guid(0x3D577EFF, 0x4CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};
template<> struct uuid<Windows::UI::Input::IRadialControllerMenuItemStatics2> { define_guid(0xCBB70BE, 0x7E3E, 0x48BD, 0xBE, 0x4, 0x2C, 0x7F, 0xCA, 0xA9, 0xC1, 0xFF);};
template<> struct uuid<Windows::UI::Input::IRadialControllerMenuItemStatics> { define_guid(0x249E0887, 0xD842, 0x4524, 0x9D, 0xF8, 0xE0, 0xD6, 0x47, 0xED, 0xC8, 0x87);};
template<> struct uuid<Windows::UI::Input::IRadialControllerMenuItem> { define_guid(0xC80FC98D, 0xAD0B, 0x4C9C, 0x8F, 0x2F, 0x13, 0x6A, 0x23, 0x73, 0xA6, 0xBA);};
template<> struct uuid<Windows::UI::Input::IRadialControllerConfiguration> { define_guid(0xA6B79ECB, 0x6A52, 0x4430, 0x91, 0xC, 0x56, 0x37, 0xA, 0x9D, 0x6B, 0x42);};
template<> struct uuid<Windows::UI::Input::IRadialControllerConfigurationStatics> { define_guid(0x79B6B0E5, 0x69A, 0x4486, 0xA9, 0x9D, 0x8D, 0xB7, 0x72, 0xB9, 0x64, 0x2F);};
template<> struct uuid<Windows::UI::Input::IRadialControllerConfigurationStatics2> { define_guid(0x53E08B17, 0xE205, 0x48D3, 0x9C, 0xAF, 0x80, 0xFF, 0x47, 0xC4, 0xD7, 0xC7);};
template<> struct uuid<Windows::UI::Input::IRadialControllerConfiguration2> { define_guid(0x3D577EF7, 0x3CEE, 0x11E6, 0xB5, 0x35, 0x0, 0x1B, 0xDC, 0x6, 0xAB, 0x3B);};

// types

namespace Windows { namespace UI { namespace Input {

// IEdgeGestureEventArgs
struct IEdgeGestureEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(EdgeGestureKind *value);
};
template<typename X> struct IEdgeGestureEventArgs_adaptor : X {
	union {
		struct : property {
			EdgeGestureKind get() { EdgeGestureKind value; hrcheck(enc(&IEdgeGestureEventArgs_adaptor::Kind)->_get_Kind(&value)); return value; }
			EdgeGestureKind operator()() { return get(); }
			operator EdgeGestureKind () { return get(); }
		} Kind;
	};
	IEdgeGestureEventArgs_adaptor() {}
};
template<typename X> struct adapt<IEdgeGestureEventArgs, X> : Windows::UI::Input::IEdgeGestureEventArgs_adaptor<X> { typedef adapt IEdgeGestureEventArgs; };
struct IEdgeGestureEventArgs : IEdgeGestureEventArgs_raw, generate<IEdgeGestureEventArgs> {};

// EdgeGestureEventArgs
template<typename X> struct statics<EdgeGestureEventArgs, X> : X {
	typedef typename X::root_type EdgeGestureEventArgs;
};
struct EdgeGestureEventArgs : generate<EdgeGestureEventArgs> {};

// IEdgeGestureStatics
struct IEdgeGestureStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(EdgeGesture* *current);
};

// IEdgeGesture
struct IEdgeGesture_raw : IInspectable {
	virtual STDMETHODIMP _add_Starting(Foundation::TypedEventHandler<EdgeGesture*, EdgeGestureEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Starting(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Completed(Foundation::TypedEventHandler<EdgeGesture*, EdgeGestureEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Completed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Canceled(Foundation::TypedEventHandler<EdgeGesture*, EdgeGestureEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Canceled(Foundation::EventRegistrationToken token);
};
template<typename X> struct IEdgeGesture_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<EdgeGesture>, ptr<EdgeGestureEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IEdgeGesture_adaptor::Canceled)->_add_Canceled(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IEdgeGesture_adaptor::Canceled)->_remove_Canceled(token)); }
		} Canceled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<EdgeGesture>, ptr<EdgeGestureEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IEdgeGesture_adaptor::Completed)->_add_Completed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IEdgeGesture_adaptor::Completed)->_remove_Completed(token)); }
		} Completed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<EdgeGesture>, ptr<EdgeGestureEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IEdgeGesture_adaptor::Starting)->_add_Starting(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IEdgeGesture_adaptor::Starting)->_remove_Starting(token)); }
		} Starting;
	};
	IEdgeGesture_adaptor() {}
};
template<typename X> struct adapt<IEdgeGesture, X> : Windows::UI::Input::IEdgeGesture_adaptor<X> { typedef adapt IEdgeGesture; };
struct IEdgeGesture : IEdgeGesture_raw, generate<IEdgeGesture> {};

// EdgeGesture
template<typename> struct EdgeGesture_statics {
	static ptr<EdgeGesture> GetForCurrentView() { EdgeGesture* current; hrcheck(get_activation_factory<EdgeGesture, IEdgeGestureStatics>()->_GetForCurrentView(&current)); return from_abi(current); }
};

template<typename X> struct statics<EdgeGesture, X> : X, Windows::UI::Input::EdgeGesture_statics<void> {
	typedef typename X::root_type EdgeGesture;
};
struct EdgeGesture : generate<EdgeGesture> {};

// IKeyboardDeliveryInterceptor
struct IKeyboardDeliveryInterceptor_raw : IInspectable {
	virtual STDMETHODIMP _get_IsInterceptionEnabledWhenInForeground(bool *value);
	virtual STDMETHODIMP _put_IsInterceptionEnabledWhenInForeground(bool value);
	virtual STDMETHODIMP _add_KeyDown(Foundation::TypedEventHandler<KeyboardDeliveryInterceptor*, UI::Core::KeyEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_KeyDown(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_KeyUp(Foundation::TypedEventHandler<KeyboardDeliveryInterceptor*, UI::Core::KeyEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_KeyUp(Foundation::EventRegistrationToken token);
};
template<typename X> struct IKeyboardDeliveryInterceptor_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IKeyboardDeliveryInterceptor_adaptor::IsInterceptionEnabledWhenInForeground)->_get_IsInterceptionEnabledWhenInForeground(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IKeyboardDeliveryInterceptor_adaptor::IsInterceptionEnabledWhenInForeground)->_put_IsInterceptionEnabledWhenInForeground(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsInterceptionEnabledWhenInForeground;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<KeyboardDeliveryInterceptor>, ptr<UI::Core::KeyEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IKeyboardDeliveryInterceptor_adaptor::KeyDown)->_add_KeyDown(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IKeyboardDeliveryInterceptor_adaptor::KeyDown)->_remove_KeyDown(token)); }
		} KeyDown;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<KeyboardDeliveryInterceptor>, ptr<UI::Core::KeyEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IKeyboardDeliveryInterceptor_adaptor::KeyUp)->_add_KeyUp(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IKeyboardDeliveryInterceptor_adaptor::KeyUp)->_remove_KeyUp(token)); }
		} KeyUp;
	};
	IKeyboardDeliveryInterceptor_adaptor() {}
};
template<typename X> struct adapt<IKeyboardDeliveryInterceptor, X> : Windows::UI::Input::IKeyboardDeliveryInterceptor_adaptor<X> { typedef adapt IKeyboardDeliveryInterceptor; };
struct IKeyboardDeliveryInterceptor : IKeyboardDeliveryInterceptor_raw, generate<IKeyboardDeliveryInterceptor> {};

// IKeyboardDeliveryInterceptorStatics
struct IKeyboardDeliveryInterceptorStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(KeyboardDeliveryInterceptor* *keyboardDeliverySettings);
};

// KeyboardDeliveryInterceptor
template<typename> struct KeyboardDeliveryInterceptor_statics {
	static ptr<KeyboardDeliveryInterceptor> GetForCurrentView() { KeyboardDeliveryInterceptor* keyboardDeliverySettings; hrcheck(get_activation_factory<KeyboardDeliveryInterceptor, IKeyboardDeliveryInterceptorStatics>()->_GetForCurrentView(&keyboardDeliverySettings)); return from_abi(keyboardDeliverySettings); }
};

template<typename X> struct statics<KeyboardDeliveryInterceptor, X> : X, Windows::UI::Input::KeyboardDeliveryInterceptor_statics<void> {
	typedef typename X::root_type KeyboardDeliveryInterceptor;
};
struct KeyboardDeliveryInterceptor : generate<KeyboardDeliveryInterceptor> {};

// ITappedEventArgs
struct ITappedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_TapCount(unsigned *value);
};
template<typename X> struct ITappedEventArgs_adaptor : X {
	union {
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&ITappedEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&ITappedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ITappedEventArgs_adaptor::TapCount)->_get_TapCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} TapCount;
	};
	ITappedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITappedEventArgs, X> : Windows::UI::Input::ITappedEventArgs_adaptor<X> { typedef adapt ITappedEventArgs; };
struct ITappedEventArgs : ITappedEventArgs_raw, generate<ITappedEventArgs> {};

// IRightTappedEventArgs
struct IRightTappedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
};
template<typename X> struct IRightTappedEventArgs_adaptor : X {
	union {
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&IRightTappedEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IRightTappedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IRightTappedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRightTappedEventArgs, X> : Windows::UI::Input::IRightTappedEventArgs_adaptor<X> { typedef adapt IRightTappedEventArgs; };
struct IRightTappedEventArgs : IRightTappedEventArgs_raw, generate<IRightTappedEventArgs> {};

// IHoldingEventArgs
struct IHoldingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_HoldingState(Input::HoldingState *value);
};
template<typename X> struct IHoldingEventArgs_adaptor : X {
	union {
		struct : property {
			Input::HoldingState get() { Input::HoldingState value; hrcheck(enc(&IHoldingEventArgs_adaptor::HoldingState)->_get_HoldingState(&value)); return value; }
			Input::HoldingState operator()() { return get(); }
			operator Input::HoldingState () { return get(); }
		} HoldingState;
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&IHoldingEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IHoldingEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IHoldingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IHoldingEventArgs, X> : Windows::UI::Input::IHoldingEventArgs_adaptor<X> { typedef adapt IHoldingEventArgs; };
struct IHoldingEventArgs : IHoldingEventArgs_raw, generate<IHoldingEventArgs> {};

// IDraggingEventArgs
struct IDraggingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_DraggingState(Input::DraggingState *value);
};
template<typename X> struct IDraggingEventArgs_adaptor : X {
	union {
		struct : property {
			Input::DraggingState get() { Input::DraggingState value; hrcheck(enc(&IDraggingEventArgs_adaptor::DraggingState)->_get_DraggingState(&value)); return value; }
			Input::DraggingState operator()() { return get(); }
			operator Input::DraggingState () { return get(); }
		} DraggingState;
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&IDraggingEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IDraggingEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IDraggingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDraggingEventArgs, X> : Windows::UI::Input::IDraggingEventArgs_adaptor<X> { typedef adapt IDraggingEventArgs; };
struct IDraggingEventArgs : IDraggingEventArgs_raw, generate<IDraggingEventArgs> {};

// IManipulationStartedEventArgs
struct IManipulationStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Cumulative(ManipulationDelta *value);
};
template<typename X> struct IManipulationStartedEventArgs_adaptor : X {
	union {
		struct : property {
			ManipulationDelta get() { ManipulationDelta value; hrcheck(enc(&IManipulationStartedEventArgs_adaptor::Cumulative)->_get_Cumulative(&value)); return value; }
			ManipulationDelta operator()() { return get(); }
			operator ManipulationDelta () { return get(); }
		} Cumulative;
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&IManipulationStartedEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IManipulationStartedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IManipulationStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IManipulationStartedEventArgs, X> : Windows::UI::Input::IManipulationStartedEventArgs_adaptor<X> { typedef adapt IManipulationStartedEventArgs; };
struct IManipulationStartedEventArgs : IManipulationStartedEventArgs_raw, generate<IManipulationStartedEventArgs> {};

// IManipulationUpdatedEventArgs
struct IManipulationUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Delta(ManipulationDelta *value);
	virtual STDMETHODIMP _get_Cumulative(ManipulationDelta *value);
	virtual STDMETHODIMP _get_Velocities(ManipulationVelocities *value);
};
template<typename X> struct IManipulationUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			ManipulationDelta get() { ManipulationDelta value; hrcheck(enc(&IManipulationUpdatedEventArgs_adaptor::Cumulative)->_get_Cumulative(&value)); return value; }
			ManipulationDelta operator()() { return get(); }
			operator ManipulationDelta () { return get(); }
		} Cumulative;
		struct : property {
			ManipulationDelta get() { ManipulationDelta value; hrcheck(enc(&IManipulationUpdatedEventArgs_adaptor::Delta)->_get_Delta(&value)); return value; }
			ManipulationDelta operator()() { return get(); }
			operator ManipulationDelta () { return get(); }
		} Delta;
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&IManipulationUpdatedEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IManipulationUpdatedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
		struct : property {
			ManipulationVelocities get() { ManipulationVelocities value; hrcheck(enc(&IManipulationUpdatedEventArgs_adaptor::Velocities)->_get_Velocities(&value)); return value; }
			ManipulationVelocities operator()() { return get(); }
			operator ManipulationVelocities () { return get(); }
		} Velocities;
	};
	IManipulationUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IManipulationUpdatedEventArgs, X> : Windows::UI::Input::IManipulationUpdatedEventArgs_adaptor<X> { typedef adapt IManipulationUpdatedEventArgs; };
struct IManipulationUpdatedEventArgs : IManipulationUpdatedEventArgs_raw, generate<IManipulationUpdatedEventArgs> {};

// IManipulationInertiaStartingEventArgs
struct IManipulationInertiaStartingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Delta(ManipulationDelta *value);
	virtual STDMETHODIMP _get_Cumulative(ManipulationDelta *value);
	virtual STDMETHODIMP _get_Velocities(ManipulationVelocities *value);
};
template<typename X> struct IManipulationInertiaStartingEventArgs_adaptor : X {
	union {
		struct : property {
			ManipulationDelta get() { ManipulationDelta value; hrcheck(enc(&IManipulationInertiaStartingEventArgs_adaptor::Cumulative)->_get_Cumulative(&value)); return value; }
			ManipulationDelta operator()() { return get(); }
			operator ManipulationDelta () { return get(); }
		} Cumulative;
		struct : property {
			ManipulationDelta get() { ManipulationDelta value; hrcheck(enc(&IManipulationInertiaStartingEventArgs_adaptor::Delta)->_get_Delta(&value)); return value; }
			ManipulationDelta operator()() { return get(); }
			operator ManipulationDelta () { return get(); }
		} Delta;
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&IManipulationInertiaStartingEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IManipulationInertiaStartingEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
		struct : property {
			ManipulationVelocities get() { ManipulationVelocities value; hrcheck(enc(&IManipulationInertiaStartingEventArgs_adaptor::Velocities)->_get_Velocities(&value)); return value; }
			ManipulationVelocities operator()() { return get(); }
			operator ManipulationVelocities () { return get(); }
		} Velocities;
	};
	IManipulationInertiaStartingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IManipulationInertiaStartingEventArgs, X> : Windows::UI::Input::IManipulationInertiaStartingEventArgs_adaptor<X> { typedef adapt IManipulationInertiaStartingEventArgs; };
struct IManipulationInertiaStartingEventArgs : IManipulationInertiaStartingEventArgs_raw, generate<IManipulationInertiaStartingEventArgs> {};

// IManipulationCompletedEventArgs
struct IManipulationCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Cumulative(ManipulationDelta *value);
	virtual STDMETHODIMP _get_Velocities(ManipulationVelocities *value);
};
template<typename X> struct IManipulationCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			ManipulationDelta get() { ManipulationDelta value; hrcheck(enc(&IManipulationCompletedEventArgs_adaptor::Cumulative)->_get_Cumulative(&value)); return value; }
			ManipulationDelta operator()() { return get(); }
			operator ManipulationDelta () { return get(); }
		} Cumulative;
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&IManipulationCompletedEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IManipulationCompletedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
		struct : property {
			ManipulationVelocities get() { ManipulationVelocities value; hrcheck(enc(&IManipulationCompletedEventArgs_adaptor::Velocities)->_get_Velocities(&value)); return value; }
			ManipulationVelocities operator()() { return get(); }
			operator ManipulationVelocities () { return get(); }
		} Velocities;
	};
	IManipulationCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IManipulationCompletedEventArgs, X> : Windows::UI::Input::IManipulationCompletedEventArgs_adaptor<X> { typedef adapt IManipulationCompletedEventArgs; };
struct IManipulationCompletedEventArgs : IManipulationCompletedEventArgs_raw, generate<IManipulationCompletedEventArgs> {};

// ICrossSlidingEventArgs
struct ICrossSlidingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDeviceType(Devices::Input::PointerDeviceType *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_CrossSlidingState(Input::CrossSlidingState *value);
};
template<typename X> struct ICrossSlidingEventArgs_adaptor : X {
	union {
		struct : property {
			Input::CrossSlidingState get() { Input::CrossSlidingState value; hrcheck(enc(&ICrossSlidingEventArgs_adaptor::CrossSlidingState)->_get_CrossSlidingState(&value)); return value; }
			Input::CrossSlidingState operator()() { return get(); }
			operator Input::CrossSlidingState () { return get(); }
		} CrossSlidingState;
		struct : property {
			Devices::Input::PointerDeviceType get() { Devices::Input::PointerDeviceType value; hrcheck(enc(&ICrossSlidingEventArgs_adaptor::PointerDeviceType)->_get_PointerDeviceType(&value)); return value; }
			Devices::Input::PointerDeviceType operator()() { return get(); }
			operator Devices::Input::PointerDeviceType () { return get(); }
		} PointerDeviceType;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&ICrossSlidingEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	ICrossSlidingEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICrossSlidingEventArgs, X> : Windows::UI::Input::ICrossSlidingEventArgs_adaptor<X> { typedef adapt ICrossSlidingEventArgs; };
struct ICrossSlidingEventArgs : ICrossSlidingEventArgs_raw, generate<ICrossSlidingEventArgs> {};

// IMouseWheelParameters
struct IMouseWheelParameters_raw : IInspectable {
	virtual STDMETHODIMP _get_CharTranslation(Foundation::Point *value);
	virtual STDMETHODIMP _put_CharTranslation(Foundation::Point value);
	virtual STDMETHODIMP _get_DeltaScale(float *value);
	virtual STDMETHODIMP _put_DeltaScale(float value);
	virtual STDMETHODIMP _get_DeltaRotationAngle(float *value);
	virtual STDMETHODIMP _put_DeltaRotationAngle(float value);
	virtual STDMETHODIMP _get_PageTranslation(Foundation::Point *value);
	virtual STDMETHODIMP _put_PageTranslation(Foundation::Point value);
};
template<typename X> struct IMouseWheelParameters_adaptor : X {
	union {
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMouseWheelParameters_adaptor::CharTranslation)->_get_CharTranslation(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
			void put(const Foundation::Point& value) { hrcheck(enc(&IMouseWheelParameters_adaptor::CharTranslation)->_put_CharTranslation(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} CharTranslation;
		struct : property {
			float get() { float value; hrcheck(enc(&IMouseWheelParameters_adaptor::DeltaRotationAngle)->_get_DeltaRotationAngle(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IMouseWheelParameters_adaptor::DeltaRotationAngle)->_put_DeltaRotationAngle(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} DeltaRotationAngle;
		struct : property {
			float get() { float value; hrcheck(enc(&IMouseWheelParameters_adaptor::DeltaScale)->_get_DeltaScale(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IMouseWheelParameters_adaptor::DeltaScale)->_put_DeltaScale(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} DeltaScale;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMouseWheelParameters_adaptor::PageTranslation)->_get_PageTranslation(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
			void put(const Foundation::Point& value) { hrcheck(enc(&IMouseWheelParameters_adaptor::PageTranslation)->_put_PageTranslation(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} PageTranslation;
	};
	IMouseWheelParameters_adaptor() {}
};
template<typename X> struct adapt<IMouseWheelParameters, X> : Windows::UI::Input::IMouseWheelParameters_adaptor<X> { typedef adapt IMouseWheelParameters; };
struct IMouseWheelParameters : IMouseWheelParameters_raw, generate<IMouseWheelParameters> {};

// IGestureRecognizer
struct IGestureRecognizer_raw : IInspectable {
	virtual STDMETHODIMP _get_GestureSettings(Input::GestureSettings *value);
	virtual STDMETHODIMP _put_GestureSettings(Input::GestureSettings value);
	virtual STDMETHODIMP _get_IsInertial(bool *value);
	virtual STDMETHODIMP _get_IsActive(bool *value);
	virtual STDMETHODIMP _get_ShowGestureFeedback(bool *value);
	virtual STDMETHODIMP _put_ShowGestureFeedback(bool value);
	virtual STDMETHODIMP _get_PivotCenter(Foundation::Point *value);
	virtual STDMETHODIMP _put_PivotCenter(Foundation::Point value);
	virtual STDMETHODIMP _get_PivotRadius(float *value);
	virtual STDMETHODIMP _put_PivotRadius(float value);
	virtual STDMETHODIMP _get_InertiaTranslationDeceleration(float *value);
	virtual STDMETHODIMP _put_InertiaTranslationDeceleration(float value);
	virtual STDMETHODIMP _get_InertiaRotationDeceleration(float *value);
	virtual STDMETHODIMP _put_InertiaRotationDeceleration(float value);
	virtual STDMETHODIMP _get_InertiaExpansionDeceleration(float *value);
	virtual STDMETHODIMP _put_InertiaExpansionDeceleration(float value);
	virtual STDMETHODIMP _get_InertiaTranslationDisplacement(float *value);
	virtual STDMETHODIMP _put_InertiaTranslationDisplacement(float value);
	virtual STDMETHODIMP _get_InertiaRotationAngle(float *value);
	virtual STDMETHODIMP _put_InertiaRotationAngle(float value);
	virtual STDMETHODIMP _get_InertiaExpansion(float *value);
	virtual STDMETHODIMP _put_InertiaExpansion(float value);
	virtual STDMETHODIMP _get_ManipulationExact(bool *value);
	virtual STDMETHODIMP _put_ManipulationExact(bool value);
	virtual STDMETHODIMP _get_CrossSlideThresholds(Input::CrossSlideThresholds *value);
	virtual STDMETHODIMP _put_CrossSlideThresholds(Input::CrossSlideThresholds value);
	virtual STDMETHODIMP _get_CrossSlideHorizontally(bool *value);
	virtual STDMETHODIMP _put_CrossSlideHorizontally(bool value);
	virtual STDMETHODIMP _get_CrossSlideExact(bool *value);
	virtual STDMETHODIMP _put_CrossSlideExact(bool value);
	virtual STDMETHODIMP _get_AutoProcessInertia(bool *value);
	virtual STDMETHODIMP _put_AutoProcessInertia(bool value);
	virtual STDMETHODIMP _get_MouseWheelParameters(Input::MouseWheelParameters* *value);
	virtual STDMETHODIMP _CanBeDoubleTap(PointerPoint* value, bool *canBeDoubleTap);
	virtual STDMETHODIMP _ProcessDownEvent(PointerPoint* value);
	virtual STDMETHODIMP _ProcessMoveEvents(Foundation::Collections::IVector<PointerPoint*>* value);
	virtual STDMETHODIMP _ProcessUpEvent(PointerPoint* value);
	virtual STDMETHODIMP _ProcessMouseWheelEvent(PointerPoint* value, bool isShiftKeyDown, bool isControlKeyDown);
	virtual STDMETHODIMP _ProcessInertia();
	virtual STDMETHODIMP _CompleteGesture();
	virtual STDMETHODIMP _add_Tapped(Foundation::TypedEventHandler<GestureRecognizer*, TappedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_Tapped(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_RightTapped(Foundation::TypedEventHandler<GestureRecognizer*, RightTappedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_RightTapped(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_Holding(Foundation::TypedEventHandler<GestureRecognizer*, HoldingEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_Holding(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_Dragging(Foundation::TypedEventHandler<GestureRecognizer*, DraggingEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_Dragging(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ManipulationStarted(Foundation::TypedEventHandler<GestureRecognizer*, ManipulationStartedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ManipulationStarted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ManipulationUpdated(Foundation::TypedEventHandler<GestureRecognizer*, ManipulationUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ManipulationUpdated(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ManipulationInertiaStarting(Foundation::TypedEventHandler<GestureRecognizer*, ManipulationInertiaStartingEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ManipulationInertiaStarting(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ManipulationCompleted(Foundation::TypedEventHandler<GestureRecognizer*, ManipulationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_ManipulationCompleted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_CrossSliding(Foundation::TypedEventHandler<GestureRecognizer*, CrossSlidingEventArgs*>* handler, Foundation::EventRegistrationToken *pCookie);
	virtual STDMETHODIMP _remove_CrossSliding(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IGestureRecognizer_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGestureRecognizer_adaptor::AutoProcessInertia)->_get_AutoProcessInertia(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IGestureRecognizer_adaptor::AutoProcessInertia)->_put_AutoProcessInertia(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoProcessInertia;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGestureRecognizer_adaptor::CrossSlideExact)->_get_CrossSlideExact(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IGestureRecognizer_adaptor::CrossSlideExact)->_put_CrossSlideExact(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CrossSlideExact;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGestureRecognizer_adaptor::CrossSlideHorizontally)->_get_CrossSlideHorizontally(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IGestureRecognizer_adaptor::CrossSlideHorizontally)->_put_CrossSlideHorizontally(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CrossSlideHorizontally;
		struct : property {
			Input::CrossSlideThresholds get() { Input::CrossSlideThresholds value; hrcheck(enc(&IGestureRecognizer_adaptor::CrossSlideThresholds)->_get_CrossSlideThresholds(&value)); return value; }
			Input::CrossSlideThresholds operator()() { return get(); }
			operator Input::CrossSlideThresholds () { return get(); }
			void put(const Input::CrossSlideThresholds& value) { hrcheck(enc(&IGestureRecognizer_adaptor::CrossSlideThresholds)->_put_CrossSlideThresholds(value)); }
			void operator=(const Input::CrossSlideThresholds& value) { put(value); }
			void operator()(const Input::CrossSlideThresholds& value) { put(value); }
		} CrossSlideThresholds;
		struct : property {
			Input::GestureSettings get() { Input::GestureSettings value; hrcheck(enc(&IGestureRecognizer_adaptor::GestureSettings)->_get_GestureSettings(&value)); return value; }
			Input::GestureSettings operator()() { return get(); }
			operator Input::GestureSettings () { return get(); }
			void put(Input::GestureSettings value) { hrcheck(enc(&IGestureRecognizer_adaptor::GestureSettings)->_put_GestureSettings(value)); }
			void operator=(Input::GestureSettings value) { put(value); }
			void operator()(Input::GestureSettings value) { put(value); }
		} GestureSettings;
		struct : property {
			float get() { float value; hrcheck(enc(&IGestureRecognizer_adaptor::InertiaExpansion)->_get_InertiaExpansion(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IGestureRecognizer_adaptor::InertiaExpansion)->_put_InertiaExpansion(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} InertiaExpansion;
		struct : property {
			float get() { float value; hrcheck(enc(&IGestureRecognizer_adaptor::InertiaExpansionDeceleration)->_get_InertiaExpansionDeceleration(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IGestureRecognizer_adaptor::InertiaExpansionDeceleration)->_put_InertiaExpansionDeceleration(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} InertiaExpansionDeceleration;
		struct : property {
			float get() { float value; hrcheck(enc(&IGestureRecognizer_adaptor::InertiaRotationAngle)->_get_InertiaRotationAngle(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IGestureRecognizer_adaptor::InertiaRotationAngle)->_put_InertiaRotationAngle(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} InertiaRotationAngle;
		struct : property {
			float get() { float value; hrcheck(enc(&IGestureRecognizer_adaptor::InertiaRotationDeceleration)->_get_InertiaRotationDeceleration(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IGestureRecognizer_adaptor::InertiaRotationDeceleration)->_put_InertiaRotationDeceleration(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} InertiaRotationDeceleration;
		struct : property {
			float get() { float value; hrcheck(enc(&IGestureRecognizer_adaptor::InertiaTranslationDeceleration)->_get_InertiaTranslationDeceleration(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IGestureRecognizer_adaptor::InertiaTranslationDeceleration)->_put_InertiaTranslationDeceleration(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} InertiaTranslationDeceleration;
		struct : property {
			float get() { float value; hrcheck(enc(&IGestureRecognizer_adaptor::InertiaTranslationDisplacement)->_get_InertiaTranslationDisplacement(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IGestureRecognizer_adaptor::InertiaTranslationDisplacement)->_put_InertiaTranslationDisplacement(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} InertiaTranslationDisplacement;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGestureRecognizer_adaptor::IsActive)->_get_IsActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsActive;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGestureRecognizer_adaptor::IsInertial)->_get_IsInertial(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsInertial;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationExact)->_get_ManipulationExact(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationExact)->_put_ManipulationExact(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ManipulationExact;
		struct : property {
			ptr<Input::MouseWheelParameters> get() { Input::MouseWheelParameters* value; hrcheck(enc(&IGestureRecognizer_adaptor::MouseWheelParameters)->_get_MouseWheelParameters(&value)); return from_abi(value); }
			ptr<Input::MouseWheelParameters> operator()() { return get(); }
			operator ptr<Input::MouseWheelParameters> () { return get(); }
			ptr<Input::MouseWheelParameters> operator->() { return get(); }
		} MouseWheelParameters;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IGestureRecognizer_adaptor::PivotCenter)->_get_PivotCenter(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
			void put(const Foundation::Point& value) { hrcheck(enc(&IGestureRecognizer_adaptor::PivotCenter)->_put_PivotCenter(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} PivotCenter;
		struct : property {
			float get() { float value; hrcheck(enc(&IGestureRecognizer_adaptor::PivotRadius)->_get_PivotRadius(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IGestureRecognizer_adaptor::PivotRadius)->_put_PivotRadius(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} PivotRadius;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGestureRecognizer_adaptor::ShowGestureFeedback)->_get_ShowGestureFeedback(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IGestureRecognizer_adaptor::ShowGestureFeedback)->_put_ShowGestureFeedback(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShowGestureFeedback;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<CrossSlidingEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::CrossSliding)->_add_CrossSliding(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::CrossSliding)->_remove_CrossSliding(cookie)); }
		} CrossSliding;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<DraggingEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::Dragging)->_add_Dragging(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::Dragging)->_remove_Dragging(cookie)); }
		} Dragging;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<HoldingEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::Holding)->_add_Holding(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::Holding)->_remove_Holding(cookie)); }
		} Holding;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<ManipulationCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationCompleted)->_add_ManipulationCompleted(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationCompleted)->_remove_ManipulationCompleted(cookie)); }
		} ManipulationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<ManipulationInertiaStartingEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationInertiaStarting)->_add_ManipulationInertiaStarting(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationInertiaStarting)->_remove_ManipulationInertiaStarting(cookie)); }
		} ManipulationInertiaStarting;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<ManipulationStartedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationStarted)->_add_ManipulationStarted(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationStarted)->_remove_ManipulationStarted(cookie)); }
		} ManipulationStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<ManipulationUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationUpdated)->_add_ManipulationUpdated(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::ManipulationUpdated)->_remove_ManipulationUpdated(cookie)); }
		} ManipulationUpdated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<RightTappedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::RightTapped)->_add_RightTapped(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::RightTapped)->_remove_RightTapped(cookie)); }
		} RightTapped;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<GestureRecognizer>, ptr<TappedEventArgs>>> handler) { Foundation::EventRegistrationToken pCookie; hrcheck(enc(&IGestureRecognizer_adaptor::Tapped)->_add_Tapped(to_abi(handler), &pCookie)); return pCookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IGestureRecognizer_adaptor::Tapped)->_remove_Tapped(cookie)); }
		} Tapped;
	};
	bool CanBeDoubleTap(pptr<PointerPoint> value) { bool canBeDoubleTap; hrcheck(X::get()->_CanBeDoubleTap(value, &canBeDoubleTap)); return canBeDoubleTap; }
	void ProcessDownEvent(pptr<PointerPoint> value) { hrcheck(X::get()->_ProcessDownEvent(value)); }
	void ProcessMoveEvents(pptr<Foundation::Collections::IVector<ptr<PointerPoint>>> value) { hrcheck(X::get()->_ProcessMoveEvents(to_abi(value))); }
	void ProcessUpEvent(pptr<PointerPoint> value) { hrcheck(X::get()->_ProcessUpEvent(value)); }
	void ProcessMouseWheelEvent(pptr<PointerPoint> value, bool isShiftKeyDown, bool isControlKeyDown) { hrcheck(X::get()->_ProcessMouseWheelEvent(value, isShiftKeyDown, isControlKeyDown)); }
	void ProcessInertia() { hrcheck(X::get()->_ProcessInertia()); }
	void CompleteGesture() { hrcheck(X::get()->_CompleteGesture()); }
	IGestureRecognizer_adaptor() {}
};
template<typename X> struct adapt<IGestureRecognizer, X> : Windows::UI::Input::IGestureRecognizer_adaptor<X> { typedef adapt IGestureRecognizer; };
struct IGestureRecognizer : IGestureRecognizer_raw, generate<IGestureRecognizer> {};

// MouseWheelParameters
template<typename X> struct statics<MouseWheelParameters, X> : X {
	typedef typename X::root_type MouseWheelParameters;
};
struct MouseWheelParameters : generate<MouseWheelParameters> {};

// GestureRecognizer
template<typename X> struct statics<GestureRecognizer, X> : X {
	typedef typename X::root_type GestureRecognizer;
};
struct GestureRecognizer : generate<GestureRecognizer> {};

// TappedEventArgs
template<typename X> struct statics<TappedEventArgs, X> : X {
	typedef typename X::root_type TappedEventArgs;
};
struct TappedEventArgs : generate<TappedEventArgs> {};

// RightTappedEventArgs
template<typename X> struct statics<RightTappedEventArgs, X> : X {
	typedef typename X::root_type RightTappedEventArgs;
};
struct RightTappedEventArgs : generate<RightTappedEventArgs> {};

// HoldingEventArgs
template<typename X> struct statics<HoldingEventArgs, X> : X {
	typedef typename X::root_type HoldingEventArgs;
};
struct HoldingEventArgs : generate<HoldingEventArgs> {};

// DraggingEventArgs
template<typename X> struct statics<DraggingEventArgs, X> : X {
	typedef typename X::root_type DraggingEventArgs;
};
struct DraggingEventArgs : generate<DraggingEventArgs> {};

// ManipulationStartedEventArgs
template<typename X> struct statics<ManipulationStartedEventArgs, X> : X {
	typedef typename X::root_type ManipulationStartedEventArgs;
};
struct ManipulationStartedEventArgs : generate<ManipulationStartedEventArgs> {};

// ManipulationUpdatedEventArgs
template<typename X> struct statics<ManipulationUpdatedEventArgs, X> : X {
	typedef typename X::root_type ManipulationUpdatedEventArgs;
};
struct ManipulationUpdatedEventArgs : generate<ManipulationUpdatedEventArgs> {};

// ManipulationInertiaStartingEventArgs
template<typename X> struct statics<ManipulationInertiaStartingEventArgs, X> : X {
	typedef typename X::root_type ManipulationInertiaStartingEventArgs;
};
struct ManipulationInertiaStartingEventArgs : generate<ManipulationInertiaStartingEventArgs> {};

// ManipulationCompletedEventArgs
template<typename X> struct statics<ManipulationCompletedEventArgs, X> : X {
	typedef typename X::root_type ManipulationCompletedEventArgs;
};
struct ManipulationCompletedEventArgs : generate<ManipulationCompletedEventArgs> {};

// CrossSlidingEventArgs
template<typename X> struct statics<CrossSlidingEventArgs, X> : X {
	typedef typename X::root_type CrossSlidingEventArgs;
};
struct CrossSlidingEventArgs : generate<CrossSlidingEventArgs> {};

// IPointerPointStatics
struct IPointerPointStatics : IInspectable {
	virtual STDMETHODIMP _GetCurrentPoint(unsigned pointerId, PointerPoint* *pointerPoint);
	virtual STDMETHODIMP _GetIntermediatePoints(unsigned pointerId, Foundation::Collections::IVector<PointerPoint*>* *pointerPoints);
	virtual STDMETHODIMP _GetCurrentPointTransformed(unsigned pointerId, IPointerPointTransform* transform, PointerPoint* *pointerPoint);
	virtual STDMETHODIMP _GetIntermediatePointsTransformed(unsigned pointerId, IPointerPointTransform* transform, Foundation::Collections::IVector<PointerPoint*>* *pointerPoints);
};

// IPointerPoint
struct IPointerPoint_raw : IInspectable {
	virtual STDMETHODIMP _get_PointerDevice(Devices::Input::PointerDevice* *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_RawPosition(Foundation::Point *value);
	virtual STDMETHODIMP _get_PointerId(unsigned *value);
	virtual STDMETHODIMP _get_FrameId(unsigned *value);
	virtual STDMETHODIMP _get_Timestamp(unsigned __int64 *value);
	virtual STDMETHODIMP _get_IsInContact(bool *value);
	virtual STDMETHODIMP _get_Properties(PointerPointProperties* *value);
};
template<typename X> struct IPointerPoint_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPointerPoint_adaptor::FrameId)->_get_FrameId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} FrameId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPoint_adaptor::IsInContact)->_get_IsInContact(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsInContact;
		struct : property {
			ptr<Devices::Input::PointerDevice> get() { Devices::Input::PointerDevice* value; hrcheck(enc(&IPointerPoint_adaptor::PointerDevice)->_get_PointerDevice(&value)); return from_abi(value); }
			ptr<Devices::Input::PointerDevice> operator()() { return get(); }
			operator ptr<Devices::Input::PointerDevice> () { return get(); }
			ptr<Devices::Input::PointerDevice> operator->() { return get(); }
		} PointerDevice;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPointerPoint_adaptor::PointerId)->_get_PointerId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PointerId;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IPointerPoint_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
		struct : property {
			ptr<PointerPointProperties> get() { PointerPointProperties* value; hrcheck(enc(&IPointerPoint_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<PointerPointProperties> operator()() { return get(); }
			operator ptr<PointerPointProperties> () { return get(); }
			ptr<PointerPointProperties> operator->() { return get(); }
		} Properties;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IPointerPoint_adaptor::RawPosition)->_get_RawPosition(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} RawPosition;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPointerPoint_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} Timestamp;
	};
	IPointerPoint_adaptor() {}
};
template<typename X> struct adapt<IPointerPoint, X> : Windows::UI::Input::IPointerPoint_adaptor<X> { typedef adapt IPointerPoint; };
struct IPointerPoint : IPointerPoint_raw, generate<IPointerPoint> {};

// PointerPoint
template<typename> struct PointerPoint_statics {
	static ptr<PointerPoint> GetCurrentPoint(unsigned pointerId) { PointerPoint* pointerPoint; hrcheck(get_activation_factory<PointerPoint, IPointerPointStatics>()->_GetCurrentPoint(pointerId, &pointerPoint)); return from_abi(pointerPoint); }
	static ptr<Foundation::Collections::IVector<ptr<PointerPoint>>> GetIntermediatePoints(unsigned pointerId) { Foundation::Collections::IVector<PointerPoint*>* pointerPoints; hrcheck(get_activation_factory<PointerPoint, IPointerPointStatics>()->_GetIntermediatePoints(pointerId, &pointerPoints)); return from_abi(pointerPoints); }
	static ptr<PointerPoint> GetCurrentPoint(unsigned pointerId, pptr<IPointerPointTransform> transform) { PointerPoint* pointerPoint; hrcheck(get_activation_factory<PointerPoint, IPointerPointStatics>()->_GetCurrentPointTransformed(pointerId, transform, &pointerPoint)); return from_abi(pointerPoint); }
	static ptr<Foundation::Collections::IVector<ptr<PointerPoint>>> GetIntermediatePoints(unsigned pointerId, pptr<IPointerPointTransform> transform) { Foundation::Collections::IVector<PointerPoint*>* pointerPoints; hrcheck(get_activation_factory<PointerPoint, IPointerPointStatics>()->_GetIntermediatePointsTransformed(pointerId, transform, &pointerPoints)); return from_abi(pointerPoints); }
};

template<typename X> struct statics<PointerPoint, X> : X, Windows::UI::Input::PointerPoint_statics<void> {
	typedef typename X::root_type PointerPoint;
};
struct PointerPoint : generate<PointerPoint> {};

// IPointerPointTransform
struct IPointerPointTransform_raw : IInspectable {
	virtual STDMETHODIMP _get_Inverse(IPointerPointTransform* *value) = 0;
	virtual STDMETHODIMP _TryTransform(Foundation::Point inPoint, Foundation::Point *outPoint, bool *returnValue) = 0;
	virtual STDMETHODIMP _TransformBounds(Foundation::Rect rect, Foundation::Rect *returnValue) = 0;
};
template<typename X> struct IPointerPointTransform_adaptor : X {
	union {
		struct : property {
			ptr<IPointerPointTransform> get() { IPointerPointTransform* value; hrcheck(enc(&IPointerPointTransform_adaptor::Inverse)->_get_Inverse(&value)); return from_abi(value); }
			ptr<IPointerPointTransform> operator()() { return get(); }
			operator ptr<IPointerPointTransform> () { return get(); }
			ptr<IPointerPointTransform> operator->() { return get(); }
		} Inverse;
	};
	bool TryTransform(const Foundation::Point& inPoint, Foundation::Point *outPoint) { bool returnValue; hrcheck(X::get()->_TryTransform(inPoint, outPoint, &returnValue)); return returnValue; }
	Foundation::Rect TransformBounds(const Foundation::Rect& rect) { Foundation::Rect returnValue; hrcheck(X::get()->_TransformBounds(rect, &returnValue)); return returnValue; }
	IPointerPointTransform_adaptor() {}
};
template<typename X> struct adapt<IPointerPointTransform, X> : Windows::UI::Input::IPointerPointTransform_adaptor<X> { typedef adapt IPointerPointTransform; };
template<typename X> struct IPointerPointTransform_unadaptor : X {
	STDMETHODIMP _get_Inverse(IPointerPointTransform* *value) { return hrtry([&, this] { get_prop(value, Inverse); }); }
	STDMETHODIMP _TryTransform(Foundation::Point inPoint, Foundation::Point *outPoint, bool *returnValue) { return hrtry([&, this] { *returnValue = X::get()->TryTransform(inPoint, outPoint); }); }
	STDMETHODIMP _TransformBounds(Foundation::Rect rect, Foundation::Rect *returnValue) { return hrtry([&, this] { *returnValue = X::get()->TransformBounds(rect); }); }
};
template<typename X> struct unadapt<IPointerPointTransform, X> : Windows::UI::Input::IPointerPointTransform_unadaptor<X> {};
struct IPointerPointTransform : IPointerPointTransform_raw, generate<IPointerPointTransform> {};

// IPointerPointProperties2
struct IPointerPointProperties2_raw : IInspectable {
	virtual STDMETHODIMP _get_ZDistance(Foundation::IReference<float>* *value);
};
template<typename X> struct IPointerPointProperties2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<float>> get() { Foundation::IReference<float>* value; hrcheck(enc(&IPointerPointProperties2_adaptor::ZDistance)->_get_ZDistance(&value)); return from_abi(value); }
			ptr<Foundation::IReference<float>> operator()() { return get(); }
			operator ptr<Foundation::IReference<float>> () { return get(); }
			ptr<Foundation::IReference<float>> operator->() { return get(); }
		} ZDistance;
	};
	IPointerPointProperties2_adaptor() {}
};
template<typename X> struct adapt<IPointerPointProperties2, X> : Windows::UI::Input::IPointerPointProperties2_adaptor<X> { typedef adapt IPointerPointProperties2; };
struct IPointerPointProperties2 : IPointerPointProperties2_raw, generate<IPointerPointProperties2> {};

// IPointerPointProperties
struct IPointerPointProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Pressure(float *value);
	virtual STDMETHODIMP _get_IsInverted(bool *value);
	virtual STDMETHODIMP _get_IsEraser(bool *value);
	virtual STDMETHODIMP _get_Orientation(float *value);
	virtual STDMETHODIMP _get_XTilt(float *value);
	virtual STDMETHODIMP _get_YTilt(float *value);
	virtual STDMETHODIMP _get_Twist(float *value);
	virtual STDMETHODIMP _get_ContactRect(Foundation::Rect *value);
	virtual STDMETHODIMP _get_ContactRectRaw(Foundation::Rect *value);
	virtual STDMETHODIMP _get_TouchConfidence(bool *value);
	virtual STDMETHODIMP _get_IsLeftButtonPressed(bool *value);
	virtual STDMETHODIMP _get_IsRightButtonPressed(bool *value);
	virtual STDMETHODIMP _get_IsMiddleButtonPressed(bool *value);
	virtual STDMETHODIMP _get_MouseWheelDelta(int *value);
	virtual STDMETHODIMP _get_IsHorizontalMouseWheel(bool *value);
	virtual STDMETHODIMP _get_IsPrimary(bool *value);
	virtual STDMETHODIMP _get_IsInRange(bool *value);
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _get_IsBarrelButtonPressed(bool *value);
	virtual STDMETHODIMP _get_IsXButton1Pressed(bool *value);
	virtual STDMETHODIMP _get_IsXButton2Pressed(bool *value);
	virtual STDMETHODIMP _get_PointerUpdateKind(Input::PointerUpdateKind *value);
	virtual STDMETHODIMP _HasUsage(unsigned usagePage, unsigned usageId, bool *value);
	virtual STDMETHODIMP _GetUsageValue(unsigned usagePage, unsigned usageId, int *value);
};
template<typename X> struct IPointerPointProperties_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IPointerPointProperties_adaptor::ContactRect)->_get_ContactRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} ContactRect;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IPointerPointProperties_adaptor::ContactRectRaw)->_get_ContactRectRaw(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} ContactRectRaw;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsBarrelButtonPressed)->_get_IsBarrelButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBarrelButtonPressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsEraser)->_get_IsEraser(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsEraser;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsHorizontalMouseWheel)->_get_IsHorizontalMouseWheel(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHorizontalMouseWheel;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsInRange)->_get_IsInRange(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsInRange;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsInverted)->_get_IsInverted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsInverted;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsLeftButtonPressed)->_get_IsLeftButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsLeftButtonPressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsMiddleButtonPressed)->_get_IsMiddleButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMiddleButtonPressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsPrimary)->_get_IsPrimary(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPrimary;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsRightButtonPressed)->_get_IsRightButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsRightButtonPressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsXButton1Pressed)->_get_IsXButton1Pressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsXButton1Pressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::IsXButton2Pressed)->_get_IsXButton2Pressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsXButton2Pressed;
		struct : property {
			int get() { int value; hrcheck(enc(&IPointerPointProperties_adaptor::MouseWheelDelta)->_get_MouseWheelDelta(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MouseWheelDelta;
		struct : property {
			float get() { float value; hrcheck(enc(&IPointerPointProperties_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Orientation;
		struct : property {
			Input::PointerUpdateKind get() { Input::PointerUpdateKind value; hrcheck(enc(&IPointerPointProperties_adaptor::PointerUpdateKind)->_get_PointerUpdateKind(&value)); return value; }
			Input::PointerUpdateKind operator()() { return get(); }
			operator Input::PointerUpdateKind () { return get(); }
		} PointerUpdateKind;
		struct : property {
			float get() { float value; hrcheck(enc(&IPointerPointProperties_adaptor::Pressure)->_get_Pressure(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Pressure;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerPointProperties_adaptor::TouchConfidence)->_get_TouchConfidence(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} TouchConfidence;
		struct : property {
			float get() { float value; hrcheck(enc(&IPointerPointProperties_adaptor::Twist)->_get_Twist(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Twist;
		struct : property {
			float get() { float value; hrcheck(enc(&IPointerPointProperties_adaptor::XTilt)->_get_XTilt(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} XTilt;
		struct : property {
			float get() { float value; hrcheck(enc(&IPointerPointProperties_adaptor::YTilt)->_get_YTilt(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} YTilt;
	};
	bool HasUsage(unsigned usagePage, unsigned usageId) { bool value; hrcheck(X::get()->_HasUsage(usagePage, usageId, &value)); return value; }
	int GetUsageValue(unsigned usagePage, unsigned usageId) { int value; hrcheck(X::get()->_GetUsageValue(usagePage, usageId, &value)); return value; }
	IPointerPointProperties_adaptor() {}
};
template<typename X> struct adapt<IPointerPointProperties, X> : Windows::UI::Input::IPointerPointProperties_adaptor<X> { typedef adapt IPointerPointProperties; };
struct IPointerPointProperties : IPointerPointProperties_raw, generate<IPointerPointProperties> {};

// PointerPointProperties
template<typename X> struct statics<PointerPointProperties, X> : X {
	typedef typename X::root_type PointerPointProperties;
};
struct PointerPointProperties : generate<PointerPointProperties> {};

// IPointerVisualizationSettings
struct IPointerVisualizationSettings_raw : IInspectable {
	virtual STDMETHODIMP _put_IsContactFeedbackEnabled(bool value);
	virtual STDMETHODIMP _get_IsContactFeedbackEnabled(bool *value);
	virtual STDMETHODIMP _put_IsBarrelButtonFeedbackEnabled(bool value);
	virtual STDMETHODIMP _get_IsBarrelButtonFeedbackEnabled(bool *value);
};
template<typename X> struct IPointerVisualizationSettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerVisualizationSettings_adaptor::IsBarrelButtonFeedbackEnabled)->_get_IsBarrelButtonFeedbackEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPointerVisualizationSettings_adaptor::IsBarrelButtonFeedbackEnabled)->_put_IsBarrelButtonFeedbackEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsBarrelButtonFeedbackEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPointerVisualizationSettings_adaptor::IsContactFeedbackEnabled)->_get_IsContactFeedbackEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPointerVisualizationSettings_adaptor::IsContactFeedbackEnabled)->_put_IsContactFeedbackEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsContactFeedbackEnabled;
	};
	IPointerVisualizationSettings_adaptor() {}
};
template<typename X> struct adapt<IPointerVisualizationSettings, X> : Windows::UI::Input::IPointerVisualizationSettings_adaptor<X> { typedef adapt IPointerVisualizationSettings; };
struct IPointerVisualizationSettings : IPointerVisualizationSettings_raw, generate<IPointerVisualizationSettings> {};

// IPointerVisualizationSettingsStatics
struct IPointerVisualizationSettingsStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(PointerVisualizationSettings* *visualizationSettings);
};

// PointerVisualizationSettings
template<typename> struct PointerVisualizationSettings_statics {
	static ptr<PointerVisualizationSettings> GetForCurrentView() { PointerVisualizationSettings* visualizationSettings; hrcheck(get_activation_factory<PointerVisualizationSettings, IPointerVisualizationSettingsStatics>()->_GetForCurrentView(&visualizationSettings)); return from_abi(visualizationSettings); }
};

template<typename X> struct statics<PointerVisualizationSettings, X> : X, Windows::UI::Input::PointerVisualizationSettings_statics<void> {
	typedef typename X::root_type PointerVisualizationSettings;
};
struct PointerVisualizationSettings : generate<PointerVisualizationSettings> {};

// IRadialControllerScreenContact
struct IRadialControllerScreenContact_raw : IInspectable {
	virtual STDMETHODIMP _get_Bounds(Foundation::Rect *value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
};
template<typename X> struct IRadialControllerScreenContact_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IRadialControllerScreenContact_adaptor::Bounds)->_get_Bounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} Bounds;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IRadialControllerScreenContact_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IRadialControllerScreenContact_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerScreenContact, X> : Windows::UI::Input::IRadialControllerScreenContact_adaptor<X> { typedef adapt IRadialControllerScreenContact; };
struct IRadialControllerScreenContact : IRadialControllerScreenContact_raw, generate<IRadialControllerScreenContact> {};

// IRadialControllerRotationChangedEventArgs
struct IRadialControllerRotationChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RotationDeltaInDegrees(double *value);
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
};
template<typename X> struct IRadialControllerRotationChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerRotationChangedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
		struct : property {
			double get() { double value; hrcheck(enc(&IRadialControllerRotationChangedEventArgs_adaptor::RotationDeltaInDegrees)->_get_RotationDeltaInDegrees(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} RotationDeltaInDegrees;
	};
	IRadialControllerRotationChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerRotationChangedEventArgs, X> : Windows::UI::Input::IRadialControllerRotationChangedEventArgs_adaptor<X> { typedef adapt IRadialControllerRotationChangedEventArgs; };
struct IRadialControllerRotationChangedEventArgs : IRadialControllerRotationChangedEventArgs_raw, generate<IRadialControllerRotationChangedEventArgs> {};

// RadialControllerScreenContact
template<typename X> struct statics<RadialControllerScreenContact, X> : X {
	typedef typename X::root_type RadialControllerScreenContact;
};
struct RadialControllerScreenContact : generate<RadialControllerScreenContact> {};

// IRadialControllerRotationChangedEventArgs2
struct IRadialControllerRotationChangedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsButtonPressed(bool *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerRotationChangedEventArgs2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialControllerRotationChangedEventArgs2_adaptor::IsButtonPressed)->_get_IsButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsButtonPressed;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerRotationChangedEventArgs2_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerRotationChangedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerRotationChangedEventArgs2, X> : Windows::UI::Input::IRadialControllerRotationChangedEventArgs2_adaptor<X> { typedef adapt IRadialControllerRotationChangedEventArgs2; };
struct IRadialControllerRotationChangedEventArgs2 : IRadialControllerRotationChangedEventArgs2_raw, generate<IRadialControllerRotationChangedEventArgs2> {};

// IRadialControllerButtonPressedEventArgs
struct IRadialControllerButtonPressedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerButtonPressedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerButtonPressedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerButtonPressedEventArgs_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerButtonPressedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerButtonPressedEventArgs, X> : Windows::UI::Input::IRadialControllerButtonPressedEventArgs_adaptor<X> { typedef adapt IRadialControllerButtonPressedEventArgs; };
struct IRadialControllerButtonPressedEventArgs : IRadialControllerButtonPressedEventArgs_raw, generate<IRadialControllerButtonPressedEventArgs> {};

// IRadialControllerButtonHoldingEventArgs
struct IRadialControllerButtonHoldingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerButtonHoldingEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerButtonHoldingEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerButtonHoldingEventArgs_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerButtonHoldingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerButtonHoldingEventArgs, X> : Windows::UI::Input::IRadialControllerButtonHoldingEventArgs_adaptor<X> { typedef adapt IRadialControllerButtonHoldingEventArgs; };
struct IRadialControllerButtonHoldingEventArgs : IRadialControllerButtonHoldingEventArgs_raw, generate<IRadialControllerButtonHoldingEventArgs> {};

// IRadialControllerButtonReleasedEventArgs
struct IRadialControllerButtonReleasedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerButtonReleasedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerButtonReleasedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerButtonReleasedEventArgs_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerButtonReleasedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerButtonReleasedEventArgs, X> : Windows::UI::Input::IRadialControllerButtonReleasedEventArgs_adaptor<X> { typedef adapt IRadialControllerButtonReleasedEventArgs; };
struct IRadialControllerButtonReleasedEventArgs : IRadialControllerButtonReleasedEventArgs_raw, generate<IRadialControllerButtonReleasedEventArgs> {};

// IRadialControllerScreenContactStartedEventArgs
struct IRadialControllerScreenContactStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
};
template<typename X> struct IRadialControllerScreenContactStartedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerScreenContactStartedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
	};
	IRadialControllerScreenContactStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerScreenContactStartedEventArgs, X> : Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs_adaptor<X> { typedef adapt IRadialControllerScreenContactStartedEventArgs; };
struct IRadialControllerScreenContactStartedEventArgs : IRadialControllerScreenContactStartedEventArgs_raw, generate<IRadialControllerScreenContactStartedEventArgs> {};

// IRadialControllerScreenContactStartedEventArgs2
struct IRadialControllerScreenContactStartedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsButtonPressed(bool *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerScreenContactStartedEventArgs2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialControllerScreenContactStartedEventArgs2_adaptor::IsButtonPressed)->_get_IsButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsButtonPressed;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerScreenContactStartedEventArgs2_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerScreenContactStartedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerScreenContactStartedEventArgs2, X> : Windows::UI::Input::IRadialControllerScreenContactStartedEventArgs2_adaptor<X> { typedef adapt IRadialControllerScreenContactStartedEventArgs2; };
struct IRadialControllerScreenContactStartedEventArgs2 : IRadialControllerScreenContactStartedEventArgs2_raw, generate<IRadialControllerScreenContactStartedEventArgs2> {};

// IRadialControllerScreenContactContinuedEventArgs
struct IRadialControllerScreenContactContinuedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
};
template<typename X> struct IRadialControllerScreenContactContinuedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerScreenContactContinuedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
	};
	IRadialControllerScreenContactContinuedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerScreenContactContinuedEventArgs, X> : Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs_adaptor<X> { typedef adapt IRadialControllerScreenContactContinuedEventArgs; };
struct IRadialControllerScreenContactContinuedEventArgs : IRadialControllerScreenContactContinuedEventArgs_raw, generate<IRadialControllerScreenContactContinuedEventArgs> {};

// IRadialControllerScreenContactContinuedEventArgs2
struct IRadialControllerScreenContactContinuedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsButtonPressed(bool *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerScreenContactContinuedEventArgs2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialControllerScreenContactContinuedEventArgs2_adaptor::IsButtonPressed)->_get_IsButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsButtonPressed;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerScreenContactContinuedEventArgs2_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerScreenContactContinuedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerScreenContactContinuedEventArgs2, X> : Windows::UI::Input::IRadialControllerScreenContactContinuedEventArgs2_adaptor<X> { typedef adapt IRadialControllerScreenContactContinuedEventArgs2; };
struct IRadialControllerScreenContactContinuedEventArgs2 : IRadialControllerScreenContactContinuedEventArgs2_raw, generate<IRadialControllerScreenContactContinuedEventArgs2> {};

// IRadialControllerScreenContactEndedEventArgs
struct IRadialControllerScreenContactEndedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsButtonPressed(bool *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerScreenContactEndedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialControllerScreenContactEndedEventArgs_adaptor::IsButtonPressed)->_get_IsButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsButtonPressed;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerScreenContactEndedEventArgs_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerScreenContactEndedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerScreenContactEndedEventArgs, X> : Windows::UI::Input::IRadialControllerScreenContactEndedEventArgs_adaptor<X> { typedef adapt IRadialControllerScreenContactEndedEventArgs; };
struct IRadialControllerScreenContactEndedEventArgs : IRadialControllerScreenContactEndedEventArgs_raw, generate<IRadialControllerScreenContactEndedEventArgs> {};

// IRadialControllerButtonClickedEventArgs
struct IRadialControllerButtonClickedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
};
template<typename X> struct IRadialControllerButtonClickedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerButtonClickedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
	};
	IRadialControllerButtonClickedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerButtonClickedEventArgs, X> : Windows::UI::Input::IRadialControllerButtonClickedEventArgs_adaptor<X> { typedef adapt IRadialControllerButtonClickedEventArgs; };
struct IRadialControllerButtonClickedEventArgs : IRadialControllerButtonClickedEventArgs_raw, generate<IRadialControllerButtonClickedEventArgs> {};

// IRadialControllerButtonClickedEventArgs2
struct IRadialControllerButtonClickedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerButtonClickedEventArgs2_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerButtonClickedEventArgs2_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerButtonClickedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerButtonClickedEventArgs2, X> : Windows::UI::Input::IRadialControllerButtonClickedEventArgs2_adaptor<X> { typedef adapt IRadialControllerButtonClickedEventArgs2; };
struct IRadialControllerButtonClickedEventArgs2 : IRadialControllerButtonClickedEventArgs2_raw, generate<IRadialControllerButtonClickedEventArgs2> {};

// IRadialControllerControlAcquiredEventArgs
struct IRadialControllerControlAcquiredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Contact(RadialControllerScreenContact* *value);
};
template<typename X> struct IRadialControllerControlAcquiredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerScreenContact> get() { RadialControllerScreenContact* value; hrcheck(enc(&IRadialControllerControlAcquiredEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<RadialControllerScreenContact> operator()() { return get(); }
			operator ptr<RadialControllerScreenContact> () { return get(); }
			ptr<RadialControllerScreenContact> operator->() { return get(); }
		} Contact;
	};
	IRadialControllerControlAcquiredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerControlAcquiredEventArgs, X> : Windows::UI::Input::IRadialControllerControlAcquiredEventArgs_adaptor<X> { typedef adapt IRadialControllerControlAcquiredEventArgs; };
struct IRadialControllerControlAcquiredEventArgs : IRadialControllerControlAcquiredEventArgs_raw, generate<IRadialControllerControlAcquiredEventArgs> {};

// IRadialControllerControlAcquiredEventArgs2
struct IRadialControllerControlAcquiredEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsButtonPressed(bool *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
};
template<typename X> struct IRadialControllerControlAcquiredEventArgs2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialControllerControlAcquiredEventArgs2_adaptor::IsButtonPressed)->_get_IsButtonPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsButtonPressed;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&IRadialControllerControlAcquiredEventArgs2_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
	};
	IRadialControllerControlAcquiredEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerControlAcquiredEventArgs2, X> : Windows::UI::Input::IRadialControllerControlAcquiredEventArgs2_adaptor<X> { typedef adapt IRadialControllerControlAcquiredEventArgs2; };
struct IRadialControllerControlAcquiredEventArgs2 : IRadialControllerControlAcquiredEventArgs2_raw, generate<IRadialControllerControlAcquiredEventArgs2> {};

// IRadialController
struct IRadialController_raw : IInspectable {
	virtual STDMETHODIMP _get_Menu(RadialControllerMenu* *value);
	virtual STDMETHODIMP _get_RotationResolutionInDegrees(double *value);
	virtual STDMETHODIMP _put_RotationResolutionInDegrees(double value);
	virtual STDMETHODIMP _get_UseAutomaticHapticFeedback(bool *value);
	virtual STDMETHODIMP _put_UseAutomaticHapticFeedback(bool value);
	virtual STDMETHODIMP _add_ScreenContactStarted(Foundation::TypedEventHandler<RadialController*, RadialControllerScreenContactStartedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ScreenContactStarted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ScreenContactEnded(Foundation::TypedEventHandler<RadialController*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ScreenContactEnded(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ScreenContactContinued(Foundation::TypedEventHandler<RadialController*, RadialControllerScreenContactContinuedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ScreenContactContinued(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_ControlLost(Foundation::TypedEventHandler<RadialController*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ControlLost(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_RotationChanged(Foundation::TypedEventHandler<RadialController*, RadialControllerRotationChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RotationChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ButtonClicked(Foundation::TypedEventHandler<RadialController*, RadialControllerButtonClickedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ButtonClicked(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ControlAcquired(Foundation::TypedEventHandler<RadialController*, RadialControllerControlAcquiredEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ControlAcquired(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IRadialController_adaptor : X {
	union {
		struct : property {
			ptr<RadialControllerMenu> get() { RadialControllerMenu* value; hrcheck(enc(&IRadialController_adaptor::Menu)->_get_Menu(&value)); return from_abi(value); }
			ptr<RadialControllerMenu> operator()() { return get(); }
			operator ptr<RadialControllerMenu> () { return get(); }
			ptr<RadialControllerMenu> operator->() { return get(); }
		} Menu;
		struct : property {
			double get() { double value; hrcheck(enc(&IRadialController_adaptor::RotationResolutionInDegrees)->_get_RotationResolutionInDegrees(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IRadialController_adaptor::RotationResolutionInDegrees)->_put_RotationResolutionInDegrees(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} RotationResolutionInDegrees;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialController_adaptor::UseAutomaticHapticFeedback)->_get_UseAutomaticHapticFeedback(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRadialController_adaptor::UseAutomaticHapticFeedback)->_put_UseAutomaticHapticFeedback(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} UseAutomaticHapticFeedback;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerButtonClickedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRadialController_adaptor::ButtonClicked)->_add_ButtonClicked(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRadialController_adaptor::ButtonClicked)->_remove_ButtonClicked(token)); }
		} ButtonClicked;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerControlAcquiredEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IRadialController_adaptor::ControlAcquired)->_add_ControlAcquired(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IRadialController_adaptor::ControlAcquired)->_remove_ControlAcquired(cookie)); }
		} ControlAcquired;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IRadialController_adaptor::ControlLost)->_add_ControlLost(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IRadialController_adaptor::ControlLost)->_remove_ControlLost(cookie)); }
		} ControlLost;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerRotationChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRadialController_adaptor::RotationChanged)->_add_RotationChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRadialController_adaptor::RotationChanged)->_remove_RotationChanged(token)); }
		} RotationChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerScreenContactContinuedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IRadialController_adaptor::ScreenContactContinued)->_add_ScreenContactContinued(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IRadialController_adaptor::ScreenContactContinued)->_remove_ScreenContactContinued(cookie)); }
		} ScreenContactContinued;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IRadialController_adaptor::ScreenContactEnded)->_add_ScreenContactEnded(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IRadialController_adaptor::ScreenContactEnded)->_remove_ScreenContactEnded(cookie)); }
		} ScreenContactEnded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerScreenContactStartedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IRadialController_adaptor::ScreenContactStarted)->_add_ScreenContactStarted(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IRadialController_adaptor::ScreenContactStarted)->_remove_ScreenContactStarted(cookie)); }
		} ScreenContactStarted;
	};
	IRadialController_adaptor() {}
};
template<typename X> struct adapt<IRadialController, X> : Windows::UI::Input::IRadialController_adaptor<X> { typedef adapt IRadialController; };
struct IRadialController : IRadialController_raw, generate<IRadialController> {};

// IRadialControllerMenu
struct IRadialControllerMenu_raw : IInspectable {
	virtual STDMETHODIMP _get_Items(Foundation::Collections::IVector<RadialControllerMenuItem*>* *value);
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEnabled(bool value);
	virtual STDMETHODIMP _GetSelectedMenuItem(RadialControllerMenuItem* *result);
	virtual STDMETHODIMP _SelectMenuItem(RadialControllerMenuItem* menuItem);
	virtual STDMETHODIMP _TrySelectPreviouslySelectedMenuItem(bool *result);
};
template<typename X> struct IRadialControllerMenu_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialControllerMenu_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRadialControllerMenu_adaptor::IsEnabled)->_put_IsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEnabled;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<RadialControllerMenuItem>>> get() { Foundation::Collections::IVector<RadialControllerMenuItem*>* value; hrcheck(enc(&IRadialControllerMenu_adaptor::Items)->_get_Items(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<RadialControllerMenuItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<RadialControllerMenuItem>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<RadialControllerMenuItem>>> operator->() { return get(); }
		} Items;
	};
	ptr<RadialControllerMenuItem> GetSelectedMenuItem() { RadialControllerMenuItem* result; hrcheck(X::get()->_GetSelectedMenuItem(&result)); return from_abi(result); }
	void SelectMenuItem(pptr<RadialControllerMenuItem> menuItem) { hrcheck(X::get()->_SelectMenuItem(menuItem)); }
	bool TrySelectPreviouslySelectedMenuItem() { bool result; hrcheck(X::get()->_TrySelectPreviouslySelectedMenuItem(&result)); return result; }
	IRadialControllerMenu_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerMenu, X> : Windows::UI::Input::IRadialControllerMenu_adaptor<X> { typedef adapt IRadialControllerMenu; };
struct IRadialControllerMenu : IRadialControllerMenu_raw, generate<IRadialControllerMenu> {};

// RadialControllerMenu
template<typename X> struct statics<RadialControllerMenu, X> : X {
	typedef typename X::root_type RadialControllerMenu;
};
struct RadialControllerMenu : generate<RadialControllerMenu> {};

// IRadialControllerStatics
struct IRadialControllerStatics : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *result);
	virtual STDMETHODIMP _CreateForCurrentView(RadialController* *result);
};

// IRadialController2
struct IRadialController2_raw : IInspectable {
	virtual STDMETHODIMP _add_ButtonPressed(Foundation::TypedEventHandler<RadialController*, RadialControllerButtonPressedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ButtonPressed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ButtonHolding(Foundation::TypedEventHandler<RadialController*, RadialControllerButtonHoldingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ButtonHolding(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ButtonReleased(Foundation::TypedEventHandler<RadialController*, RadialControllerButtonReleasedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ButtonReleased(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRadialController2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerButtonHoldingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRadialController2_adaptor::ButtonHolding)->_add_ButtonHolding(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRadialController2_adaptor::ButtonHolding)->_remove_ButtonHolding(token)); }
		} ButtonHolding;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerButtonPressedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRadialController2_adaptor::ButtonPressed)->_add_ButtonPressed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRadialController2_adaptor::ButtonPressed)->_remove_ButtonPressed(token)); }
		} ButtonPressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialController>, ptr<RadialControllerButtonReleasedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRadialController2_adaptor::ButtonReleased)->_add_ButtonReleased(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRadialController2_adaptor::ButtonReleased)->_remove_ButtonReleased(token)); }
		} ButtonReleased;
	};
	IRadialController2_adaptor() {}
};
template<typename X> struct adapt<IRadialController2, X> : Windows::UI::Input::IRadialController2_adaptor<X> { typedef adapt IRadialController2; };
struct IRadialController2 : IRadialController2_raw, generate<IRadialController2> {};

// RadialController
template<typename> struct RadialController_statics {
	static bool IsSupported() { bool result; hrcheck(get_activation_factory<RadialController, IRadialControllerStatics>()->_IsSupported(&result)); return result; }
	static ptr<RadialController> CreateForCurrentView() { RadialController* result; hrcheck(get_activation_factory<RadialController, IRadialControllerStatics>()->_CreateForCurrentView(&result)); return from_abi(result); }
};

template<typename X> struct statics<RadialController, X> : X, Windows::UI::Input::RadialController_statics<void> {
	typedef typename X::root_type RadialController;
};
struct RadialController : generate<RadialController> {};

// RadialControllerScreenContactStartedEventArgs
template<typename X> struct statics<RadialControllerScreenContactStartedEventArgs, X> : X {
	typedef typename X::root_type RadialControllerScreenContactStartedEventArgs;
};
struct RadialControllerScreenContactStartedEventArgs : generate<RadialControllerScreenContactStartedEventArgs> {};

// RadialControllerScreenContactContinuedEventArgs
template<typename X> struct statics<RadialControllerScreenContactContinuedEventArgs, X> : X {
	typedef typename X::root_type RadialControllerScreenContactContinuedEventArgs;
};
struct RadialControllerScreenContactContinuedEventArgs : generate<RadialControllerScreenContactContinuedEventArgs> {};

// RadialControllerRotationChangedEventArgs
template<typename X> struct statics<RadialControllerRotationChangedEventArgs, X> : X {
	typedef typename X::root_type RadialControllerRotationChangedEventArgs;
};
struct RadialControllerRotationChangedEventArgs : generate<RadialControllerRotationChangedEventArgs> {};

// RadialControllerButtonClickedEventArgs
template<typename X> struct statics<RadialControllerButtonClickedEventArgs, X> : X {
	typedef typename X::root_type RadialControllerButtonClickedEventArgs;
};
struct RadialControllerButtonClickedEventArgs : generate<RadialControllerButtonClickedEventArgs> {};

// RadialControllerControlAcquiredEventArgs
template<typename X> struct statics<RadialControllerControlAcquiredEventArgs, X> : X {
	typedef typename X::root_type RadialControllerControlAcquiredEventArgs;
};
struct RadialControllerControlAcquiredEventArgs : generate<RadialControllerControlAcquiredEventArgs> {};

// RadialControllerButtonPressedEventArgs
template<typename X> struct statics<RadialControllerButtonPressedEventArgs, X> : X {
	typedef typename X::root_type RadialControllerButtonPressedEventArgs;
};
struct RadialControllerButtonPressedEventArgs : generate<RadialControllerButtonPressedEventArgs> {};

// RadialControllerButtonHoldingEventArgs
template<typename X> struct statics<RadialControllerButtonHoldingEventArgs, X> : X {
	typedef typename X::root_type RadialControllerButtonHoldingEventArgs;
};
struct RadialControllerButtonHoldingEventArgs : generate<RadialControllerButtonHoldingEventArgs> {};

// RadialControllerButtonReleasedEventArgs
template<typename X> struct statics<RadialControllerButtonReleasedEventArgs, X> : X {
	typedef typename X::root_type RadialControllerButtonReleasedEventArgs;
};
struct RadialControllerButtonReleasedEventArgs : generate<RadialControllerButtonReleasedEventArgs> {};

// IRadialControllerMenuItemStatics2
struct IRadialControllerMenuItemStatics2 : IInspectable {
	virtual STDMETHODIMP _CreateFromFontGlyph(HSTRING displayText, HSTRING glyph, HSTRING fontFamily, RadialControllerMenuItem* *result);
	virtual STDMETHODIMP _CreateFromFontGlyphWithUri(HSTRING displayText, HSTRING glyph, HSTRING fontFamily, Foundation::Uri* fontUri, RadialControllerMenuItem* *result);
};

// IRadialControllerMenuItemStatics
struct IRadialControllerMenuItemStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromIcon(HSTRING displayText, Storage::Streams::RandomAccessStreamReference* icon, RadialControllerMenuItem* *result);
	virtual STDMETHODIMP _CreateFromKnownIcon(HSTRING displayText, RadialControllerMenuKnownIcon value, RadialControllerMenuItem* *result);
};

// IRadialControllerMenuItem
struct IRadialControllerMenuItem_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayText(HSTRING *value);
	virtual STDMETHODIMP _get_Tag(IInspectable* *value);
	virtual STDMETHODIMP _put_Tag(IInspectable* value);
	virtual STDMETHODIMP _add_Invoked(Foundation::TypedEventHandler<RadialControllerMenuItem*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Invoked(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRadialControllerMenuItem_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRadialControllerMenuItem_adaptor::DisplayText)->_get_DisplayText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayText;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IRadialControllerMenuItem_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
			void put(object_ref value) { hrcheck(enc(&IRadialControllerMenuItem_adaptor::Tag)->_put_Tag(value)); }
			void operator=(object_ref value) { put(move(value)); }
			void operator()(object_ref value) { put(move(value)); }
		} Tag;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RadialControllerMenuItem>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRadialControllerMenuItem_adaptor::Invoked)->_add_Invoked(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRadialControllerMenuItem_adaptor::Invoked)->_remove_Invoked(token)); }
		} Invoked;
	};
	IRadialControllerMenuItem_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerMenuItem, X> : Windows::UI::Input::IRadialControllerMenuItem_adaptor<X> { typedef adapt IRadialControllerMenuItem; };
struct IRadialControllerMenuItem : IRadialControllerMenuItem_raw, generate<IRadialControllerMenuItem> {};

// RadialControllerMenuItem
template<typename> struct RadialControllerMenuItem_statics {
	static ptr<RadialControllerMenuItem> CreateFromFontGlyph(hstring_ref displayText, hstring_ref glyph, hstring_ref fontFamily) { RadialControllerMenuItem* result; hrcheck(get_activation_factory<RadialControllerMenuItem, IRadialControllerMenuItemStatics2>()->_CreateFromFontGlyph(displayText, glyph, fontFamily, &result)); return from_abi(result); }
	static ptr<RadialControllerMenuItem> CreateFromFontGlyph(hstring_ref displayText, hstring_ref glyph, hstring_ref fontFamily, pptr<Foundation::Uri> fontUri) { RadialControllerMenuItem* result; hrcheck(get_activation_factory<RadialControllerMenuItem, IRadialControllerMenuItemStatics2>()->_CreateFromFontGlyphWithUri(displayText, glyph, fontFamily, fontUri, &result)); return from_abi(result); }
	static ptr<RadialControllerMenuItem> CreateFromIcon(hstring_ref displayText, pptr<Storage::Streams::RandomAccessStreamReference> icon) { RadialControllerMenuItem* result; hrcheck(get_activation_factory<RadialControllerMenuItem, IRadialControllerMenuItemStatics>()->_CreateFromIcon(displayText, icon, &result)); return from_abi(result); }
	static ptr<RadialControllerMenuItem> CreateFromKnownIcon(hstring_ref displayText, RadialControllerMenuKnownIcon value) { RadialControllerMenuItem* result; hrcheck(get_activation_factory<RadialControllerMenuItem, IRadialControllerMenuItemStatics>()->_CreateFromKnownIcon(displayText, value, &result)); return from_abi(result); }
};

template<typename X> struct statics<RadialControllerMenuItem, X> : X, Windows::UI::Input::RadialControllerMenuItem_statics<void> {
	typedef typename X::root_type RadialControllerMenuItem;
};
struct RadialControllerMenuItem : generate<RadialControllerMenuItem> {};

// IRadialControllerConfiguration
struct IRadialControllerConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _SetDefaultMenuItems(Foundation::Collections::IIterable<RadialControllerSystemMenuItemKind>* buttons);
	virtual STDMETHODIMP _ResetToDefaultMenuItems();
	virtual STDMETHODIMP _TrySelectDefaultMenuItem(RadialControllerSystemMenuItemKind type, bool *result);
};
template<typename X> struct IRadialControllerConfiguration_adaptor : X {
	void SetDefaultMenuItems(pptr<Foundation::Collections::IIterable<RadialControllerSystemMenuItemKind>> buttons) { hrcheck(X::get()->_SetDefaultMenuItems(to_abi(buttons))); }
	void ResetToDefaultMenuItems() { hrcheck(X::get()->_ResetToDefaultMenuItems()); }
	bool TrySelectDefaultMenuItem(RadialControllerSystemMenuItemKind type) { bool result; hrcheck(X::get()->_TrySelectDefaultMenuItem(type, &result)); return result; }
};
template<typename X> struct adapt<IRadialControllerConfiguration, X> : Windows::UI::Input::IRadialControllerConfiguration_adaptor<X> { typedef adapt IRadialControllerConfiguration; };
struct IRadialControllerConfiguration : IRadialControllerConfiguration_raw, generate<IRadialControllerConfiguration> {};

// IRadialControllerConfigurationStatics
struct IRadialControllerConfigurationStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(RadialControllerConfiguration* *configuration);
};

// IRadialControllerConfigurationStatics2
struct IRadialControllerConfigurationStatics2 : IInspectable {
	virtual STDMETHODIMP _put_AppController(RadialController* value);
	virtual STDMETHODIMP _get_AppController(RadialController* *value);
	virtual STDMETHODIMP _put_IsAppControllerEnabled(bool value);
	virtual STDMETHODIMP _get_IsAppControllerEnabled(bool *value);
};

// IRadialControllerConfiguration2
struct IRadialControllerConfiguration2_raw : IInspectable {
	virtual STDMETHODIMP _put_ActiveControllerWhenMenuIsSuppressed(RadialController* value);
	virtual STDMETHODIMP _get_ActiveControllerWhenMenuIsSuppressed(RadialController* *value);
	virtual STDMETHODIMP _put_IsMenuSuppressed(bool value);
	virtual STDMETHODIMP _get_IsMenuSuppressed(bool *value);
};
template<typename X> struct IRadialControllerConfiguration2_adaptor : X {
	union {
		struct : property {
			ptr<RadialController> get() { RadialController* value; hrcheck(enc(&IRadialControllerConfiguration2_adaptor::ActiveControllerWhenMenuIsSuppressed)->_get_ActiveControllerWhenMenuIsSuppressed(&value)); return from_abi(value); }
			ptr<RadialController> operator()() { return get(); }
			operator ptr<RadialController> () { return get(); }
			ptr<RadialController> operator->() { return get(); }
			void put(pptr<RadialController> value) { hrcheck(enc(&IRadialControllerConfiguration2_adaptor::ActiveControllerWhenMenuIsSuppressed)->_put_ActiveControllerWhenMenuIsSuppressed(value)); }
			void operator=(pptr<RadialController> value) { put(value); }
			void operator()(pptr<RadialController> value) { put(value); }
		} ActiveControllerWhenMenuIsSuppressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRadialControllerConfiguration2_adaptor::IsMenuSuppressed)->_get_IsMenuSuppressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRadialControllerConfiguration2_adaptor::IsMenuSuppressed)->_put_IsMenuSuppressed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMenuSuppressed;
	};
	IRadialControllerConfiguration2_adaptor() {}
};
template<typename X> struct adapt<IRadialControllerConfiguration2, X> : Windows::UI::Input::IRadialControllerConfiguration2_adaptor<X> { typedef adapt IRadialControllerConfiguration2; };
struct IRadialControllerConfiguration2 : IRadialControllerConfiguration2_raw, generate<IRadialControllerConfiguration2> {};

// RadialControllerConfiguration
template<typename> struct RadialControllerConfiguration_statics {
	static struct _AppController : property {
		ptr<RadialController> get() { RadialController* value; hrcheck(get_activation_factory<RadialControllerConfiguration, IRadialControllerConfigurationStatics2>()->_get_AppController(&value)); return from_abi(value); }
		ptr<RadialController> operator()() { return get(); }
		operator ptr<RadialController> () { return get(); }
		ptr<RadialController> operator->() { return get(); }
		void put(pptr<RadialController> value) { hrcheck(get_activation_factory<RadialControllerConfiguration, IRadialControllerConfigurationStatics2>()->_put_AppController(value)); }
		void operator=(pptr<RadialController> value) { put(value); }
		void operator()(pptr<RadialController> value) { put(value); }
	} AppController;
	static struct _IsAppControllerEnabled : property {
		bool get() { bool value; hrcheck(get_activation_factory<RadialControllerConfiguration, IRadialControllerConfigurationStatics2>()->_get_IsAppControllerEnabled(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<RadialControllerConfiguration, IRadialControllerConfigurationStatics2>()->_put_IsAppControllerEnabled(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} IsAppControllerEnabled;
	static ptr<RadialControllerConfiguration> GetForCurrentView() { RadialControllerConfiguration* configuration; hrcheck(get_activation_factory<RadialControllerConfiguration, IRadialControllerConfigurationStatics>()->_GetForCurrentView(&configuration)); return from_abi(configuration); }
};
template<typename X> typename RadialControllerConfiguration_statics<X>::_AppController RadialControllerConfiguration_statics<X>::AppController;
template<typename X> typename RadialControllerConfiguration_statics<X>::_IsAppControllerEnabled RadialControllerConfiguration_statics<X>::IsAppControllerEnabled;

template<typename X> struct statics<RadialControllerConfiguration, X> : X, Windows::UI::Input::RadialControllerConfiguration_statics<void> {
	typedef typename X::root_type RadialControllerConfiguration;
};
struct RadialControllerConfiguration : generate<RadialControllerConfiguration> {};

// RadialControllerScreenContactEndedEventArgs
template<typename X> struct statics<RadialControllerScreenContactEndedEventArgs, X> : X {
	typedef typename X::root_type RadialControllerScreenContactEndedEventArgs;
};
struct RadialControllerScreenContactEndedEventArgs : generate<RadialControllerScreenContactEndedEventArgs> {};
}}}
} // namespace iso_winrt
