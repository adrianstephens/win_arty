#pragma once
// generated by isopod tools
// namespaces:
// Windows.Gaming.Input.Preview

#include "Windows.Gaming.Input.Preview.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Gaming { namespace Input { namespace Custom {
struct IGameControllerProvider;
}}}}

// defs

template<> struct def<Windows::Gaming::Input::Preview::IGameControllerProviderInfoStatics> : interface_type<> {};
template<> struct def<Windows::Gaming::Input::Preview::GameControllerProviderInfo> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Gaming::Input::Preview::IGameControllerProviderInfoStatics> { define_guid(0xBE1E6C5, 0xD9BD, 0x44EE, 0x83, 0x62, 0x48, 0x8B, 0x2E, 0x46, 0x4B, 0xFB);};

// types

namespace Windows { namespace Gaming { namespace Input { namespace Preview {

// IGameControllerProviderInfoStatics
struct IGameControllerProviderInfoStatics : IInspectable {
	virtual STDMETHODIMP _GetParentProviderId(Custom::IGameControllerProvider* provider, HSTRING *value);
	virtual STDMETHODIMP _GetProviderId(Custom::IGameControllerProvider* provider, HSTRING *value);
};

// GameControllerProviderInfo
template<typename> struct GameControllerProviderInfo_statics {
	static hstring GetParentProviderId(pptr<Custom::IGameControllerProvider> provider) { HSTRING value; hrcheck(get_activation_factory<GameControllerProviderInfo, IGameControllerProviderInfoStatics>()->_GetParentProviderId(provider, &value)); return from_abi(value); }
	static hstring GetProviderId(pptr<Custom::IGameControllerProvider> provider) { HSTRING value; hrcheck(get_activation_factory<GameControllerProviderInfo, IGameControllerProviderInfoStatics>()->_GetProviderId(provider, &value)); return from_abi(value); }
};

template<typename X> struct statics<GameControllerProviderInfo, X> : X, Windows::Gaming::Input::Preview::GameControllerProviderInfo_statics<void> {
	typedef typename X::root_type GameControllerProviderInfo;
};
struct GameControllerProviderInfo : generate<GameControllerProviderInfo> {};
}}}}
} // namespace iso_winrt
