#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Playback

#include "Windows.Media.Playback.0.h"
#include "Windows.Media.MediaProperties.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Media.0.h"
#include "Windows.Media.Core.h"
#include "Windows.Foundation.Collections.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Enumeration {
struct DeviceInformation;
}}
namespace Graphics { namespace DirectX { namespace Direct3D11 {
struct IDirect3DSurface;
}}}
namespace Media { namespace Audio {
struct AudioStateMonitor;
}
namespace Casting {
struct CastingSource;
}
namespace Protection {
struct MediaProtectionManager;
}}
namespace Storage { namespace Streams {
struct RandomAccessStreamReference;
struct IRandomAccessStream;
}
struct IStorageFile;
}
namespace UI { namespace Composition {
struct ICompositionSurface;
struct Compositor;
}}}

// defs

template<> struct def<Windows::Media::Playback::MediaPlayerState> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackState> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaPlayerError> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaPlayerAudioCategory> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaPlayerAudioDeviceType> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::StereoscopicVideoRenderMode> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaCommandEnablingRule> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackSessionVideoConstrictionReason> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::IPlaybackMediaMarker> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IPlaybackMediaMarkerFactory> : interface_type<> {};
template<> struct def<Windows::Media::Playback::PlaybackMediaMarker> : class_type<Platform::Object, Windows::Media::Playback::IPlaybackMediaMarker>, custom_activators {};
template<> struct def<Windows::Media::Playback::IPlaybackMediaMarkerSequence> : interface_type<Windows::Foundation::Collections::IIterable<ptr<Windows::Media::Playback::PlaybackMediaMarker>>> {};
template<> struct def<Windows::Media::Playback::PlaybackMediaMarkerSequence> : class_type<Platform::Object, Windows::Media::Playback::IPlaybackMediaMarkerSequence> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerFailedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlayerFailedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlayerFailedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerRateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlayerRateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlayerRateChangedEventArgs> {};
template<> struct def<Windows::Media::Playback::IPlaybackMediaMarkerReachedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::PlaybackMediaMarkerReachedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IPlaybackMediaMarkerReachedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerDataReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlayerDataReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlayer> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayer7> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayer6> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayer5> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerEffects2> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayer4> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayer3> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerEffects> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayer2> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerSource2> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerSource> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlayer> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlayer, Windows::Media::Playback::IMediaPlayerSource, Windows::Media::Playback::IMediaPlayerSource2, Windows::Media::Playback::IMediaPlayer2, Windows::Media::Playback::IMediaPlayerEffects, Windows::Foundation::IClosable, Windows::Media::Playback::IMediaPlayer3, Windows::Media::Playback::IMediaPlayer4, Windows::Media::Playback::IMediaPlayerEffects2, Windows::Media::Playback::IMediaPlayer5, Windows::Media::Playback::IMediaPlayer6, Windows::Media::Playback::IMediaPlayer7> {};
template<> struct def<Windows::Media::Playback::IMediaBreakManager> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaBreakManager> : class_type<Platform::Object, Windows::Media::Playback::IMediaBreakManager> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManager> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManager> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManager> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackSession3> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackSession2> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackSession> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackSession> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackSession, Windows::Media::Playback::IMediaPlaybackSession2, Windows::Media::Playback::IMediaPlaybackSession3> {};
template<> struct def<Windows::Media::Playback::IMediaPlayerSurface> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlayerSurface> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlayerSurface, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Playback::SphericalVideoProjectionMode> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackSphericalVideoProjection> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackSphericalVideoProjection> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackSphericalVideoProjection> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackSessionOutputDegradationPolicyState> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackSessionOutputDegradationPolicyState> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackSessionOutputDegradationPolicyState> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackSessionBufferingStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackSessionBufferingStartedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackSessionBufferingStartedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaBreakStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaBreakEndedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaBreakSkippedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaBreakSeekedOverEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaBreakSeekedOverEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaBreakSeekedOverEventArgs> {};
template<> struct def<Windows::Media::Playback::MediaBreakStartedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaBreakStartedEventArgs> {};
template<> struct def<Windows::Media::Playback::MediaBreakEndedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaBreakEndedEventArgs> {};
template<> struct def<Windows::Media::Playback::MediaBreakSkippedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaBreakSkippedEventArgs> {};
template<> struct def<Windows::Media::Playback::IBackgroundMediaPlayerStatics> : interface_type<> {};
template<> struct def<Windows::Media::Playback::BackgroundMediaPlayer> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerPlayReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerPlayReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerPlayReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerPauseReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerPauseReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerPauseReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerNextReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerNextReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerNextReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerPreviousReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerPreviousReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerPreviousReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerFastForwardReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerFastForwardReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerFastForwardReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerRewindReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerRewindReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerRewindReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerShuffleReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerShuffleReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerShuffleReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerPositionReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerPositionReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerPositionReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerRateReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerRateReceivedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerRateReceivedEventArgs> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackCommandManagerCommandBehavior> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackCommandManagerCommandBehavior> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackCommandManagerCommandBehavior> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItemStatics> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItemFactory> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItemFactory2> : interface_type<Windows::Media::Playback::IMediaPlaybackItemFactory> {};
template<> struct def<Windows::Media::Playback::AutoLoadedDisplayPropertyKind> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackSource> : overridable_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItem> : interface_type<Windows::Media::Playback::IMediaPlaybackSource> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItem2> : interface_type<Windows::Media::Playback::IMediaPlaybackItem> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItem3> : interface_type<Windows::Media::Playback::IMediaPlaybackItem2> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackItem> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackItem, Windows::Media::Playback::IMediaPlaybackItem3>, custom_activators {};
template<> struct def<Windows::Media::Playback::MediaPlaybackItemErrorCode> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::FailedMediaStreamKind> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::TimedMetadataTrackPresentationMode> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaBreakInsertionMethod> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackItemChangedReason> : enum_type<int> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackAudioTrackList> : class_type<Platform::Object, Windows::Foundation::Collections::IVectorView<ptr<Windows::Media::Core::AudioTrack>>, Windows::Foundation::Collections::IIterable<ptr<Windows::Media::Core::AudioTrack>>, Windows::Media::Core::ISingleSelectMediaTrackList> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackVideoTrackList> : class_type<Platform::Object, Windows::Foundation::Collections::IVectorView<ptr<Windows::Media::Core::VideoTrack>>, Windows::Foundation::Collections::IIterable<ptr<Windows::Media::Core::VideoTrack>>, Windows::Media::Core::ISingleSelectMediaTrackList> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackTimedMetadataTrackList> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackTimedMetadataTrackList> : class_type<Platform::Object, Windows::Foundation::Collections::IVectorView<ptr<Windows::Media::Core::TimedMetadataTrack>>, Windows::Foundation::Collections::IIterable<ptr<Windows::Media::Core::TimedMetadataTrack>>, Windows::Media::Playback::IMediaPlaybackTimedMetadataTrackList> {};
template<> struct def<Windows::Media::Playback::IMediaItemDisplayProperties> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaBreakSchedule> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaBreakSchedule> : class_type<Platform::Object, Windows::Media::Playback::IMediaBreakSchedule> {};
template<> struct def<Windows::Media::Playback::MediaItemDisplayProperties> : class_type<Platform::Object, Windows::Media::Playback::IMediaItemDisplayProperties> {};
template<> struct def<Windows::Media::Playback::IMediaBreakFactory> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaBreak> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaBreak> : class_type<Platform::Object, Windows::Media::Playback::IMediaBreak>, custom_activators {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackList> : interface_type<Windows::Media::Playback::IMediaPlaybackSource> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackList2> : interface_type<Windows::Media::Playback::IMediaPlaybackList> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackList3> : interface_type<Windows::Media::Playback::IMediaPlaybackList2> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackList> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackList, Windows::Media::Playback::IMediaPlaybackList3> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItemError> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaEnginePlaybackSource> : overridable_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItemOpenedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::IMediaPlaybackItemFailedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackItemError> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackItemError> {};
template<> struct def<Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs2> : interface_type<Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackItemFailedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackItemFailedEventArgs> {};
template<> struct def<Windows::Media::Playback::CurrentMediaPlaybackItemChangedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs, Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs2> {};
template<> struct def<Windows::Media::Playback::MediaPlaybackItemOpenedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::IMediaPlaybackItemOpenedEventArgs> {};
template<> struct def<Windows::Media::Playback::ITimedMetadataPresentationModeChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Playback::TimedMetadataPresentationModeChangedEventArgs> : class_type<Platform::Object, Windows::Media::Playback::ITimedMetadataPresentationModeChangedEventArgs> {};

// uuids

template<> struct uuid<Windows::Media::Playback::IPlaybackMediaMarker> { define_guid(0xC4D22F5C, 0x3C1C, 0x4444, 0xB6, 0xB9, 0x77, 0x8B, 0x4, 0x22, 0xD4, 0x1A);};
template<> struct uuid<Windows::Media::Playback::IPlaybackMediaMarkerFactory> { define_guid(0x8C530A78, 0xE0AE, 0x4E1A, 0xA8, 0xC8, 0xE2, 0x3F, 0x98, 0x2A, 0x93, 0x7B);};
template<> struct uuid<Windows::Media::Playback::IPlaybackMediaMarkerSequence> { define_guid(0xF2810CEE, 0x638B, 0x46CF, 0x88, 0x17, 0x1D, 0x11, 0x1F, 0xE9, 0xD8, 0xC4);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerFailedEventArgs> { define_guid(0x2744E9B9, 0xA7E3, 0x4F16, 0xBA, 0xC4, 0x79, 0x14, 0xEB, 0xC0, 0x83, 0x1);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerRateChangedEventArgs> { define_guid(0x40600D58, 0x3B61, 0x4BB2, 0x98, 0x9F, 0xFC, 0x65, 0x60, 0x8B, 0x6C, 0xAB);};
template<> struct uuid<Windows::Media::Playback::IPlaybackMediaMarkerReachedEventArgs> { define_guid(0x578CD1B9, 0x90E2, 0x4E60, 0xAB, 0xC4, 0x87, 0x40, 0xB0, 0x1F, 0x61, 0x96);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerDataReceivedEventArgs> { define_guid(0xC75A9405, 0xC801, 0x412A, 0x83, 0x5B, 0x83, 0xFC, 0xE, 0x62, 0x2A, 0x8E);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayer> { define_guid(0x381A83CB, 0x6FFF, 0x499B, 0x8D, 0x64, 0x28, 0x85, 0xDF, 0xC1, 0x24, 0x9E);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayer7> { define_guid(0x5D1DC478, 0x4500, 0x4531, 0xB3, 0xF4, 0x77, 0x7A, 0x71, 0x49, 0x1F, 0x7F);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayer6> { define_guid(0xE0CAA086, 0xAE65, 0x414C, 0xB0, 0x10, 0x8B, 0xC5, 0x5F, 0x0, 0xE6, 0x92);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayer5> { define_guid(0xCFE537FD, 0xF86A, 0x4446, 0xBF, 0x4D, 0xC8, 0xE7, 0x92, 0xB7, 0xB4, 0xB3);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerEffects2> { define_guid(0xFA419A79, 0x1BBE, 0x46C5, 0xAE, 0x1F, 0x8E, 0xE6, 0x9F, 0xB3, 0xC2, 0xC7);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayer4> { define_guid(0x80035DB0, 0x7448, 0x4770, 0xAF, 0xCF, 0x2A, 0x57, 0x45, 0x9, 0x14, 0xC5);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayer3> { define_guid(0xEE0660DA, 0x31B, 0x4FEB, 0xBD, 0x9B, 0x92, 0xE0, 0xA0, 0xA8, 0xD2, 0x99);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerEffects> { define_guid(0x85A1DEDA, 0xCAB6, 0x4CC0, 0x8B, 0xE3, 0x60, 0x35, 0xF4, 0xDE, 0x25, 0x91);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayer2> { define_guid(0x3C841218, 0x2123, 0x4FC5, 0x90, 0x82, 0x2F, 0x88, 0x3F, 0x77, 0xBD, 0xF5);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerSource2> { define_guid(0x82449B9F, 0x7322, 0x4C0B, 0xB0, 0x3B, 0x3E, 0x69, 0xA4, 0x82, 0x60, 0xC5);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerSource> { define_guid(0xBD4F8897, 0x1423, 0x4C3E, 0x82, 0xC5, 0xF, 0xB1, 0xAF, 0x94, 0xF7, 0x15);};
template<> struct uuid<Windows::Media::Playback::IMediaBreakManager> { define_guid(0xA854DDB1, 0xFEB4, 0x4D9B, 0x9D, 0x97, 0xF, 0xDB, 0xE5, 0x8E, 0x5E, 0x39);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManager> { define_guid(0x5ACEE5A6, 0x5CB6, 0x4A5A, 0x85, 0x21, 0xCC, 0x86, 0xB1, 0xC1, 0xED, 0x37);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackSession3> { define_guid(0x7BA2B41A, 0xA3E2, 0x405F, 0xB7, 0x7B, 0xA4, 0x81, 0x2C, 0x23, 0x8B, 0x66);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackSession2> { define_guid(0xF8BA7C79, 0x1FC8, 0x4097, 0xAD, 0x70, 0xC0, 0xFA, 0x18, 0xCC, 0x0, 0x50);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackSession> { define_guid(0xC32B683D, 0x407, 0x41BA, 0x89, 0x46, 0x8B, 0x34, 0x5A, 0x5A, 0x54, 0x35);};
template<> struct uuid<Windows::Media::Playback::IMediaPlayerSurface> { define_guid(0xED653BC, 0xB736, 0x49C3, 0x83, 0xB, 0x76, 0x4A, 0x38, 0x45, 0x31, 0x3A);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackSphericalVideoProjection> { define_guid(0xD405B37C, 0x6F0E, 0x4661, 0xB8, 0xEE, 0xD4, 0x87, 0xBA, 0x97, 0x52, 0xD5);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackSessionOutputDegradationPolicyState> { define_guid(0x558E727D, 0xF633, 0x49F9, 0x96, 0x5A, 0xAB, 0xAA, 0x1D, 0xB7, 0x9, 0xBE);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackSessionBufferingStartedEventArgs> { define_guid(0xCD6AAFED, 0x74E2, 0x43B5, 0xB1, 0x15, 0x76, 0x23, 0x6C, 0x33, 0x79, 0x1A);};
template<> struct uuid<Windows::Media::Playback::IMediaBreakStartedEventArgs> { define_guid(0xA87EFE71, 0xDFD4, 0x454A, 0x95, 0x6E, 0xA, 0x4A, 0x64, 0x83, 0x95, 0xF8);};
template<> struct uuid<Windows::Media::Playback::IMediaBreakEndedEventArgs> { define_guid(0x32B93276, 0x1C5D, 0x4FEE, 0x87, 0x32, 0x23, 0x6D, 0xC3, 0xA8, 0x85, 0x80);};
template<> struct uuid<Windows::Media::Playback::IMediaBreakSkippedEventArgs> { define_guid(0x6EE94C05, 0x2F54, 0x4A3E, 0xA3, 0xAB, 0x24, 0xC3, 0xB2, 0x70, 0xB4, 0xA3);};
template<> struct uuid<Windows::Media::Playback::IMediaBreakSeekedOverEventArgs> { define_guid(0xE5AA6746, 0x606, 0x4492, 0xB9, 0xD3, 0xC3, 0xC8, 0xFD, 0xE0, 0xA4, 0xEA);};
template<> struct uuid<Windows::Media::Playback::IBackgroundMediaPlayerStatics> { define_guid(0x856DDBC1, 0x55F7, 0x471F, 0xA0, 0xF2, 0x68, 0xAC, 0x4C, 0x90, 0x45, 0x92);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerPlayReceivedEventArgs> { define_guid(0x9AF0004E, 0x578B, 0x4C56, 0xA0, 0x6, 0x16, 0x15, 0x9D, 0x88, 0x8A, 0x48);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerPauseReceivedEventArgs> { define_guid(0x5CECCD1C, 0xC25C, 0x4221, 0xB1, 0x6C, 0xC3, 0xC9, 0x8C, 0xE0, 0x12, 0xD6);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerNextReceivedEventArgs> { define_guid(0xE1504433, 0xA2B0, 0x45D4, 0xB9, 0xDE, 0x5F, 0x42, 0xAC, 0x14, 0xA8, 0x39);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerPreviousReceivedEventArgs> { define_guid(0x525E3081, 0x4632, 0x4F76, 0x99, 0xB1, 0xD7, 0x71, 0x62, 0x3F, 0x62, 0x87);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerFastForwardReceivedEventArgs> { define_guid(0x30F064D9, 0xB491, 0x4D0A, 0xBC, 0x21, 0x30, 0x98, 0xBD, 0x13, 0x32, 0xE9);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerRewindReceivedEventArgs> { define_guid(0x9F085947, 0xA3C0, 0x425D, 0xAA, 0xEF, 0x97, 0xBA, 0x78, 0x98, 0xB1, 0x41);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerShuffleReceivedEventArgs> { define_guid(0x50A05CEF, 0x63EE, 0x4A96, 0xB7, 0xB5, 0xFE, 0xE0, 0x8B, 0x9F, 0xF9, 0xC);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs> { define_guid(0x3D6F4F23, 0x5230, 0x4411, 0xA0, 0xE9, 0xBA, 0xD9, 0x4C, 0x2A, 0x4, 0x5C);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerPositionReceivedEventArgs> { define_guid(0x5591A754, 0xD627, 0x4BDD, 0xA9, 0xD, 0x86, 0xA0, 0x15, 0xB2, 0x49, 0x2);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerRateReceivedEventArgs> { define_guid(0x18EA3939, 0x4A16, 0x4169, 0x8B, 0x5, 0x3E, 0xB9, 0xF5, 0xFF, 0x78, 0xEB);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackCommandManagerCommandBehavior> { define_guid(0x786C1E78, 0xCE78, 0x4A10, 0xAF, 0xD6, 0x84, 0x3F, 0xCB, 0xB9, 0xC, 0x2E);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItemStatics> { define_guid(0x4B1BE7F4, 0x4345, 0x403C, 0x8A, 0x67, 0xF5, 0xDE, 0x91, 0xDF, 0x4C, 0x86);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItemFactory> { define_guid(0x7133FCE1, 0x1769, 0x4FF9, 0xA7, 0xC1, 0x38, 0xD2, 0xC4, 0xD4, 0x23, 0x60);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItemFactory2> { define_guid(0xD77CDF3A, 0xB947, 0x4972, 0xB3, 0x5D, 0xAD, 0xFB, 0x93, 0x1A, 0x71, 0xE6);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackSource> { define_guid(0xEF9DC2BC, 0x9317, 0x4696, 0xB0, 0x51, 0x2B, 0xAD, 0x64, 0x31, 0x77, 0xB5);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItem> { define_guid(0x47097D2, 0xE4AF, 0x48AB, 0xB2, 0x83, 0x69, 0x29, 0xE6, 0x74, 0xEC, 0xE2);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItem2> { define_guid(0xD859D171, 0xD7EF, 0x4B81, 0xAC, 0x1F, 0xF4, 0x4, 0x93, 0xCB, 0xB0, 0x91);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItem3> { define_guid(0xD328220, 0xB80A, 0x4D09, 0x9F, 0xF8, 0xF8, 0x70, 0x94, 0xA1, 0xC8, 0x31);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackTimedMetadataTrackList> { define_guid(0x72B41319, 0xBBFB, 0x46A3, 0x93, 0x72, 0x9C, 0x9C, 0x74, 0x4B, 0x94, 0x38);};
template<> struct uuid<Windows::Media::Playback::IMediaItemDisplayProperties> { define_guid(0x1E3C1B48, 0x7097, 0x4384, 0xA2, 0x17, 0xC1, 0x29, 0x1D, 0xFA, 0x8C, 0x16);};
template<> struct uuid<Windows::Media::Playback::IMediaBreakSchedule> { define_guid(0xA19A5813, 0x98B6, 0x41D8, 0x83, 0xDA, 0xF9, 0x71, 0xD2, 0x2B, 0x7B, 0xBA);};
template<> struct uuid<Windows::Media::Playback::IMediaBreakFactory> { define_guid(0x4516E002, 0x18E0, 0x4079, 0x8B, 0x5F, 0xD3, 0x34, 0x95, 0xC1, 0x5D, 0x2E);};
template<> struct uuid<Windows::Media::Playback::IMediaBreak> { define_guid(0x714BE270, 0xDEF, 0x4EBC, 0xA4, 0x89, 0x6B, 0x34, 0x93, 0xE, 0x15, 0x58);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackList> { define_guid(0x7F77EE9C, 0xDC42, 0x4E26, 0xA9, 0x8D, 0x78, 0x50, 0xDF, 0x8E, 0xC9, 0x25);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackList2> { define_guid(0xE09B478, 0x600A, 0x4274, 0xA1, 0x4B, 0xB, 0x67, 0x23, 0xD0, 0xF4, 0x8B);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackList3> { define_guid(0xDD24BBA9, 0xBC47, 0x4463, 0xAA, 0x90, 0xC1, 0x8B, 0x7E, 0x5F, 0xFD, 0xE1);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItemError> { define_guid(0x69FBEF2B, 0xDCD6, 0x4DF9, 0xA4, 0x50, 0xDB, 0xF4, 0xC6, 0xF1, 0xC2, 0xC2);};
template<> struct uuid<Windows::Media::Playback::IMediaEnginePlaybackSource> { define_guid(0x5C1D0BA7, 0x3856, 0x48B9, 0x8D, 0xC6, 0x24, 0x4B, 0xF1, 0x7, 0xBF, 0x8C);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItemOpenedEventArgs> { define_guid(0xCBD9BD82, 0x3037, 0x4FBE, 0xAE, 0x8F, 0x39, 0xFC, 0x39, 0xED, 0xF4, 0xEF);};
template<> struct uuid<Windows::Media::Playback::IMediaPlaybackItemFailedEventArgs> { define_guid(0x7703134A, 0xE9A7, 0x47C3, 0x86, 0x2C, 0xC6, 0x56, 0xD3, 0x6, 0x83, 0xD4);};
template<> struct uuid<Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs> { define_guid(0x1743A892, 0x5C43, 0x4A15, 0x96, 0x7A, 0x57, 0x2D, 0x2D, 0xF, 0x26, 0xC6);};
template<> struct uuid<Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs2> { define_guid(0x1D80A51E, 0x996E, 0x40A9, 0xBE, 0x48, 0xE6, 0x6E, 0xC9, 0xB, 0x2B, 0x7D);};
template<> struct uuid<Windows::Media::Playback::ITimedMetadataPresentationModeChangedEventArgs> { define_guid(0xD1636099, 0x65DF, 0x45AE, 0x8C, 0xEF, 0xDC, 0xB, 0x53, 0xFD, 0xC2, 0xBB);};

// types

namespace Windows { namespace Media { namespace Playback {

// IPlaybackMediaMarker
struct IPlaybackMediaMarker_raw : IInspectable {
	virtual STDMETHODIMP _get_Time(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MediaMarkerType(HSTRING *value);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
};
template<typename X> struct IPlaybackMediaMarker_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPlaybackMediaMarker_adaptor::MediaMarkerType)->_get_MediaMarkerType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MediaMarkerType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPlaybackMediaMarker_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Text;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPlaybackMediaMarker_adaptor::Time)->_get_Time(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Time;
	};
	IPlaybackMediaMarker_adaptor() {}
};
template<typename X> struct adapt<IPlaybackMediaMarker, X> : Windows::Media::Playback::IPlaybackMediaMarker_adaptor<X> { typedef adapt IPlaybackMediaMarker; };
struct IPlaybackMediaMarker : IPlaybackMediaMarker_raw, generate<IPlaybackMediaMarker> {};

// IPlaybackMediaMarkerFactory
struct IPlaybackMediaMarkerFactory : IInspectable {
	virtual STDMETHODIMP _CreateFromTime(Foundation::TimeSpan value, PlaybackMediaMarker* *marker);
	virtual STDMETHODIMP _Create(Foundation::TimeSpan value, HSTRING mediaMarketType, HSTRING text, PlaybackMediaMarker* *marker);
};

// PlaybackMediaMarker
template<typename> struct PlaybackMediaMarker_statics {
	static PlaybackMediaMarker *activate(const Foundation::TimeSpan& value) { PlaybackMediaMarker *marker; hrcheck(get_activation_factory<PlaybackMediaMarker, IPlaybackMediaMarkerFactory>()->_CreateFromTime(value, &marker)); return marker; }
	static PlaybackMediaMarker *activate(const Foundation::TimeSpan& value, hstring_ref mediaMarketType, hstring_ref text) { PlaybackMediaMarker *marker; hrcheck(get_activation_factory<PlaybackMediaMarker, IPlaybackMediaMarkerFactory>()->_Create(value, mediaMarketType, text, &marker)); return marker; }
};

template<typename X> struct statics<PlaybackMediaMarker, X> : X, Windows::Media::Playback::PlaybackMediaMarker_statics<void> {
	using Windows::Media::Playback::PlaybackMediaMarker_statics<void>::activate;
	typedef typename X::root_type PlaybackMediaMarker;
};
struct PlaybackMediaMarker : generate<PlaybackMediaMarker> {};

// IPlaybackMediaMarkerSequence
struct IPlaybackMediaMarkerSequence_raw : IInspectable {
	virtual STDMETHODIMP _get_Size(unsigned *value);
	virtual STDMETHODIMP _Insert(PlaybackMediaMarker* value);
	virtual STDMETHODIMP _Clear();
};
template<typename X> struct IPlaybackMediaMarkerSequence_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPlaybackMediaMarkerSequence_adaptor::Size)->_get_Size(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Size;
	};
	void Insert(pptr<PlaybackMediaMarker> value) { hrcheck(X::get()->_Insert(value)); }
	void Clear() { hrcheck(X::get()->_Clear()); }
	IPlaybackMediaMarkerSequence_adaptor() {}
};
template<typename X> struct adapt<IPlaybackMediaMarkerSequence, X> : Windows::Media::Playback::IPlaybackMediaMarkerSequence_adaptor<X> { typedef adapt IPlaybackMediaMarkerSequence; };
struct IPlaybackMediaMarkerSequence : IPlaybackMediaMarkerSequence_raw, generate<IPlaybackMediaMarkerSequence> {};

// PlaybackMediaMarkerSequence
template<typename X> struct statics<PlaybackMediaMarkerSequence, X> : X {
	typedef typename X::root_type PlaybackMediaMarkerSequence;
};
struct PlaybackMediaMarkerSequence : generate<PlaybackMediaMarkerSequence> {};

// IMediaPlayerFailedEventArgs
struct IMediaPlayerFailedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Error(MediaPlayerError *value);
	virtual STDMETHODIMP _get_ExtendedErrorCode(Foundation::HResult *value);
	virtual STDMETHODIMP _get_ErrorMessage(HSTRING *value);
};
template<typename X> struct IMediaPlayerFailedEventArgs_adaptor : X {
	union {
		struct : property {
			MediaPlayerError get() { MediaPlayerError value; hrcheck(enc(&IMediaPlayerFailedEventArgs_adaptor::Error)->_get_Error(&value)); return value; }
			MediaPlayerError operator()() { return get(); }
			operator MediaPlayerError () { return get(); }
		} Error;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaPlayerFailedEventArgs_adaptor::ErrorMessage)->_get_ErrorMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ErrorMessage;
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IMediaPlayerFailedEventArgs_adaptor::ExtendedErrorCode)->_get_ExtendedErrorCode(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ExtendedErrorCode;
	};
	IMediaPlayerFailedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayerFailedEventArgs, X> : Windows::Media::Playback::IMediaPlayerFailedEventArgs_adaptor<X> { typedef adapt IMediaPlayerFailedEventArgs; };
struct IMediaPlayerFailedEventArgs : IMediaPlayerFailedEventArgs_raw, generate<IMediaPlayerFailedEventArgs> {};

// MediaPlayerFailedEventArgs
template<typename X> struct statics<MediaPlayerFailedEventArgs, X> : X {
	typedef typename X::root_type MediaPlayerFailedEventArgs;
};
struct MediaPlayerFailedEventArgs : generate<MediaPlayerFailedEventArgs> {};

// IMediaPlayerRateChangedEventArgs
struct IMediaPlayerRateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_NewRate(double *value);
};
template<typename X> struct IMediaPlayerRateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlayerRateChangedEventArgs_adaptor::NewRate)->_get_NewRate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} NewRate;
	};
	IMediaPlayerRateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayerRateChangedEventArgs, X> : Windows::Media::Playback::IMediaPlayerRateChangedEventArgs_adaptor<X> { typedef adapt IMediaPlayerRateChangedEventArgs; };
struct IMediaPlayerRateChangedEventArgs : IMediaPlayerRateChangedEventArgs_raw, generate<IMediaPlayerRateChangedEventArgs> {};

// MediaPlayerRateChangedEventArgs
template<typename X> struct statics<MediaPlayerRateChangedEventArgs, X> : X {
	typedef typename X::root_type MediaPlayerRateChangedEventArgs;
};
struct MediaPlayerRateChangedEventArgs : generate<MediaPlayerRateChangedEventArgs> {};

// IPlaybackMediaMarkerReachedEventArgs
struct IPlaybackMediaMarkerReachedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PlaybackMediaMarker(Playback::PlaybackMediaMarker* *value);
};
template<typename X> struct IPlaybackMediaMarkerReachedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Playback::PlaybackMediaMarker> get() { Playback::PlaybackMediaMarker* value; hrcheck(enc(&IPlaybackMediaMarkerReachedEventArgs_adaptor::PlaybackMediaMarker)->_get_PlaybackMediaMarker(&value)); return from_abi(value); }
			ptr<Playback::PlaybackMediaMarker> operator()() { return get(); }
			operator ptr<Playback::PlaybackMediaMarker> () { return get(); }
			ptr<Playback::PlaybackMediaMarker> operator->() { return get(); }
		} PlaybackMediaMarker;
	};
	IPlaybackMediaMarkerReachedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPlaybackMediaMarkerReachedEventArgs, X> : Windows::Media::Playback::IPlaybackMediaMarkerReachedEventArgs_adaptor<X> { typedef adapt IPlaybackMediaMarkerReachedEventArgs; };
struct IPlaybackMediaMarkerReachedEventArgs : IPlaybackMediaMarkerReachedEventArgs_raw, generate<IPlaybackMediaMarkerReachedEventArgs> {};

// PlaybackMediaMarkerReachedEventArgs
template<typename X> struct statics<PlaybackMediaMarkerReachedEventArgs, X> : X {
	typedef typename X::root_type PlaybackMediaMarkerReachedEventArgs;
};
struct PlaybackMediaMarkerReachedEventArgs : generate<PlaybackMediaMarkerReachedEventArgs> {};

// IMediaPlayerDataReceivedEventArgs
struct IMediaPlayerDataReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(Foundation::Collections::ValueSet* *value);
};
template<typename X> struct IMediaPlayerDataReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IMediaPlayerDataReceivedEventArgs_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Data;
	};
	IMediaPlayerDataReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayerDataReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlayerDataReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlayerDataReceivedEventArgs; };
struct IMediaPlayerDataReceivedEventArgs : IMediaPlayerDataReceivedEventArgs_raw, generate<IMediaPlayerDataReceivedEventArgs> {};

// MediaPlayerDataReceivedEventArgs
template<typename X> struct statics<MediaPlayerDataReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlayerDataReceivedEventArgs;
};
struct MediaPlayerDataReceivedEventArgs : generate<MediaPlayerDataReceivedEventArgs> {};

// IMediaPlayer
struct IMediaPlayer_raw : IInspectable {
	virtual STDMETHODIMP _get_AutoPlay(bool *value);
	virtual STDMETHODIMP _put_AutoPlay(bool value);
	virtual STDMETHODIMP _get_NaturalDuration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Position(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_Position(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_BufferingProgress(double *value);
	virtual STDMETHODIMP _get_CurrentState(MediaPlayerState *value);
	virtual STDMETHODIMP _get_CanSeek(bool *value);
	virtual STDMETHODIMP _get_CanPause(bool *value);
	virtual STDMETHODIMP _get_IsLoopingEnabled(bool *value);
	virtual STDMETHODIMP _put_IsLoopingEnabled(bool value);
	virtual STDMETHODIMP _get_IsProtected(bool *value);
	virtual STDMETHODIMP _get_IsMuted(bool *value);
	virtual STDMETHODIMP _put_IsMuted(bool value);
	virtual STDMETHODIMP _get_PlaybackRate(double *value);
	virtual STDMETHODIMP _put_PlaybackRate(double value);
	virtual STDMETHODIMP _get_Volume(double *value);
	virtual STDMETHODIMP _put_Volume(double value);
	virtual STDMETHODIMP _get_PlaybackMediaMarkers(PlaybackMediaMarkerSequence* *value);
	virtual STDMETHODIMP _add_MediaOpened(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MediaOpened(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MediaEnded(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MediaEnded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MediaFailed(Foundation::TypedEventHandler<MediaPlayer*, MediaPlayerFailedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MediaFailed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CurrentStateChanged(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CurrentStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PlaybackMediaMarkerReached(Foundation::TypedEventHandler<MediaPlayer*, PlaybackMediaMarkerReachedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlaybackMediaMarkerReached(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MediaPlayerRateChanged(Foundation::TypedEventHandler<MediaPlayer*, MediaPlayerRateChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MediaPlayerRateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VolumeChanged(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VolumeChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SeekCompleted(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SeekCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BufferingStarted(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BufferingStarted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BufferingEnded(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BufferingEnded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _Play();
	virtual STDMETHODIMP _Pause();
	virtual STDMETHODIMP _SetUriSource(Foundation::Uri* value);
};
template<typename X> struct IMediaPlayer_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer_adaptor::AutoPlay)->_get_AutoPlay(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlayer_adaptor::AutoPlay)->_put_AutoPlay(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoPlay;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlayer_adaptor::BufferingProgress)->_get_BufferingProgress(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} BufferingProgress;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer_adaptor::CanPause)->_get_CanPause(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanPause;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer_adaptor::CanSeek)->_get_CanSeek(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanSeek;
		struct : property {
			MediaPlayerState get() { MediaPlayerState value; hrcheck(enc(&IMediaPlayer_adaptor::CurrentState)->_get_CurrentState(&value)); return value; }
			MediaPlayerState operator()() { return get(); }
			operator MediaPlayerState () { return get(); }
		} CurrentState;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer_adaptor::IsLoopingEnabled)->_get_IsLoopingEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlayer_adaptor::IsLoopingEnabled)->_put_IsLoopingEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsLoopingEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer_adaptor::IsMuted)->_get_IsMuted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlayer_adaptor::IsMuted)->_put_IsMuted(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMuted;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer_adaptor::IsProtected)->_get_IsProtected(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsProtected;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaPlayer_adaptor::NaturalDuration)->_get_NaturalDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} NaturalDuration;
		struct : property {
			ptr<PlaybackMediaMarkerSequence> get() { PlaybackMediaMarkerSequence* value; hrcheck(enc(&IMediaPlayer_adaptor::PlaybackMediaMarkers)->_get_PlaybackMediaMarkers(&value)); return from_abi(value); }
			ptr<PlaybackMediaMarkerSequence> operator()() { return get(); }
			operator ptr<PlaybackMediaMarkerSequence> () { return get(); }
			ptr<PlaybackMediaMarkerSequence> operator->() { return get(); }
		} PlaybackMediaMarkers;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlayer_adaptor::PlaybackRate)->_get_PlaybackRate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMediaPlayer_adaptor::PlaybackRate)->_put_PlaybackRate(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} PlaybackRate;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaPlayer_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IMediaPlayer_adaptor::Position)->_put_Position(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} Position;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlayer_adaptor::Volume)->_get_Volume(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMediaPlayer_adaptor::Volume)->_put_Volume(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Volume;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::BufferingEnded)->_add_BufferingEnded(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::BufferingEnded)->_remove_BufferingEnded(token)); }
		} BufferingEnded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::BufferingStarted)->_add_BufferingStarted(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::BufferingStarted)->_remove_BufferingStarted(token)); }
		} BufferingStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::CurrentStateChanged)->_add_CurrentStateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::CurrentStateChanged)->_remove_CurrentStateChanged(token)); }
		} CurrentStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::MediaEnded)->_add_MediaEnded(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::MediaEnded)->_remove_MediaEnded(token)); }
		} MediaEnded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, ptr<MediaPlayerFailedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::MediaFailed)->_add_MediaFailed(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::MediaFailed)->_remove_MediaFailed(token)); }
		} MediaFailed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::MediaOpened)->_add_MediaOpened(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::MediaOpened)->_remove_MediaOpened(token)); }
		} MediaOpened;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, ptr<MediaPlayerRateChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::MediaPlayerRateChanged)->_add_MediaPlayerRateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::MediaPlayerRateChanged)->_remove_MediaPlayerRateChanged(token)); }
		} MediaPlayerRateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, ptr<PlaybackMediaMarkerReachedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::PlaybackMediaMarkerReached)->_add_PlaybackMediaMarkerReached(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::PlaybackMediaMarkerReached)->_remove_PlaybackMediaMarkerReached(token)); }
		} PlaybackMediaMarkerReached;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::SeekCompleted)->_add_SeekCompleted(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::SeekCompleted)->_remove_SeekCompleted(token)); }
		} SeekCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer_adaptor::VolumeChanged)->_add_VolumeChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer_adaptor::VolumeChanged)->_remove_VolumeChanged(token)); }
		} VolumeChanged;
	};
	void Play() { hrcheck(X::get()->_Play()); }
	void Pause() { hrcheck(X::get()->_Pause()); }
	void SetUriSource(pptr<Foundation::Uri> value) { hrcheck(X::get()->_SetUriSource(value)); }
	IMediaPlayer_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayer, X> : Windows::Media::Playback::IMediaPlayer_adaptor<X> { typedef adapt IMediaPlayer; };
struct IMediaPlayer : IMediaPlayer_raw, generate<IMediaPlayer> {};

// IMediaPlayer7
struct IMediaPlayer7_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioStateMonitor(Audio::AudioStateMonitor* *value);
};
template<typename X> struct IMediaPlayer7_adaptor : X {
	union {
		struct : property {
			ptr<Audio::AudioStateMonitor> get() { Audio::AudioStateMonitor* value; hrcheck(enc(&IMediaPlayer7_adaptor::AudioStateMonitor)->_get_AudioStateMonitor(&value)); return from_abi(value); }
			ptr<Audio::AudioStateMonitor> operator()() { return get(); }
			operator ptr<Audio::AudioStateMonitor> () { return get(); }
			ptr<Audio::AudioStateMonitor> operator->() { return get(); }
		} AudioStateMonitor;
	};
	IMediaPlayer7_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayer7, X> : Windows::Media::Playback::IMediaPlayer7_adaptor<X> { typedef adapt IMediaPlayer7; };
struct IMediaPlayer7 : IMediaPlayer7_raw, generate<IMediaPlayer7> {};

// IMediaPlayer6
struct IMediaPlayer6_raw : IInspectable {
	virtual STDMETHODIMP _add_SubtitleFrameChanged(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SubtitleFrameChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _RenderSubtitlesToSurface(Graphics::DirectX::Direct3D11::IDirect3DSurface* destination, bool *result);
	virtual STDMETHODIMP _RenderSubtitlesToSurfaceWithTargetRectangle(Graphics::DirectX::Direct3D11::IDirect3DSurface* destination, Foundation::Rect targetRectangle, bool *result);
};
template<typename X> struct IMediaPlayer6_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer6_adaptor::SubtitleFrameChanged)->_add_SubtitleFrameChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer6_adaptor::SubtitleFrameChanged)->_remove_SubtitleFrameChanged(token)); }
		} SubtitleFrameChanged;
	};
	bool RenderSubtitlesToSurface(pptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> destination) { bool result; hrcheck(X::get()->_RenderSubtitlesToSurface(destination, &result)); return result; }
	bool RenderSubtitlesToSurface(pptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> destination, const Foundation::Rect& targetRectangle) { bool result; hrcheck(X::get()->_RenderSubtitlesToSurfaceWithTargetRectangle(destination, targetRectangle, &result)); return result; }
	IMediaPlayer6_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayer6, X> : Windows::Media::Playback::IMediaPlayer6_adaptor<X> { typedef adapt IMediaPlayer6; };
struct IMediaPlayer6 : IMediaPlayer6_raw, generate<IMediaPlayer6> {};

// IMediaPlayer5
struct IMediaPlayer5_raw : IInspectable {
	virtual STDMETHODIMP _add_VideoFrameAvailable(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoFrameAvailable(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_IsVideoFrameServerEnabled(bool *value);
	virtual STDMETHODIMP _put_IsVideoFrameServerEnabled(bool value);
	virtual STDMETHODIMP _CopyFrameToVideoSurface(Graphics::DirectX::Direct3D11::IDirect3DSurface* destination);
	virtual STDMETHODIMP _CopyFrameToVideoSurfaceWithTargetRectangle(Graphics::DirectX::Direct3D11::IDirect3DSurface* destination, Foundation::Rect targetRectangle);
	virtual STDMETHODIMP _CopyFrameToStereoscopicVideoSurfaces(Graphics::DirectX::Direct3D11::IDirect3DSurface* destinationLeftEye, Graphics::DirectX::Direct3D11::IDirect3DSurface* destinationRightEye);
};
template<typename X> struct IMediaPlayer5_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer5_adaptor::IsVideoFrameServerEnabled)->_get_IsVideoFrameServerEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlayer5_adaptor::IsVideoFrameServerEnabled)->_put_IsVideoFrameServerEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsVideoFrameServerEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer5_adaptor::VideoFrameAvailable)->_add_VideoFrameAvailable(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer5_adaptor::VideoFrameAvailable)->_remove_VideoFrameAvailable(token)); }
		} VideoFrameAvailable;
	};
	void CopyFrameToVideoSurface(pptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> destination) { hrcheck(X::get()->_CopyFrameToVideoSurface(destination)); }
	void CopyFrameToVideoSurface(pptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> destination, const Foundation::Rect& targetRectangle) { hrcheck(X::get()->_CopyFrameToVideoSurfaceWithTargetRectangle(destination, targetRectangle)); }
	void CopyFrameToStereoscopicVideoSurfaces(pptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> destinationLeftEye, pptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> destinationRightEye) { hrcheck(X::get()->_CopyFrameToStereoscopicVideoSurfaces(destinationLeftEye, destinationRightEye)); }
	IMediaPlayer5_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayer5, X> : Windows::Media::Playback::IMediaPlayer5_adaptor<X> { typedef adapt IMediaPlayer5; };
struct IMediaPlayer5 : IMediaPlayer5_raw, generate<IMediaPlayer5> {};

// IMediaPlayerEffects2
struct IMediaPlayerEffects2_raw : IInspectable {
	virtual STDMETHODIMP _AddVideoEffect(HSTRING activatableClassId, bool effectOptional, Foundation::Collections::IPropertySet* effectConfiguration);
};
template<typename X> struct IMediaPlayerEffects2_adaptor : X {
	void AddVideoEffect(hstring_ref activatableClassId, bool effectOptional, pptr<Foundation::Collections::IPropertySet> effectConfiguration) { hrcheck(X::get()->_AddVideoEffect(activatableClassId, effectOptional, effectConfiguration)); }
};
template<typename X> struct adapt<IMediaPlayerEffects2, X> : Windows::Media::Playback::IMediaPlayerEffects2_adaptor<X> { typedef adapt IMediaPlayerEffects2; };
struct IMediaPlayerEffects2 : IMediaPlayerEffects2_raw, generate<IMediaPlayerEffects2> {};

// IMediaPlayer4
struct IMediaPlayer4_raw : IInspectable {
	virtual STDMETHODIMP _SetSurfaceSize(Foundation::Size size);
	virtual STDMETHODIMP _GetSurface(UI::Composition::Compositor* compositor, MediaPlayerSurface* *result);
};
template<typename X> struct IMediaPlayer4_adaptor : X {
	void SetSurfaceSize(const Foundation::Size& size) { hrcheck(X::get()->_SetSurfaceSize(size)); }
	ptr<MediaPlayerSurface> GetSurface(pptr<UI::Composition::Compositor> compositor) { MediaPlayerSurface* result; hrcheck(X::get()->_GetSurface(compositor, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IMediaPlayer4, X> : Windows::Media::Playback::IMediaPlayer4_adaptor<X> { typedef adapt IMediaPlayer4; };
struct IMediaPlayer4 : IMediaPlayer4_raw, generate<IMediaPlayer4> {};

// IMediaPlayer3
struct IMediaPlayer3_raw : IInspectable {
	virtual STDMETHODIMP _add_IsMutedChanged(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsMutedChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceChanged(Foundation::TypedEventHandler<MediaPlayer*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_AudioBalance(double *value);
	virtual STDMETHODIMP _put_AudioBalance(double value);
	virtual STDMETHODIMP _get_RealTimePlayback(bool *value);
	virtual STDMETHODIMP _put_RealTimePlayback(bool value);
	virtual STDMETHODIMP _get_StereoscopicVideoRenderMode(Playback::StereoscopicVideoRenderMode *value);
	virtual STDMETHODIMP _put_StereoscopicVideoRenderMode(Playback::StereoscopicVideoRenderMode value);
	virtual STDMETHODIMP _get_BreakManager(MediaBreakManager* *value);
	virtual STDMETHODIMP _get_CommandManager(MediaPlaybackCommandManager* *value);
	virtual STDMETHODIMP _get_AudioDevice(Windows::Devices::Enumeration::DeviceInformation* *value);
	virtual STDMETHODIMP _put_AudioDevice(Windows::Devices::Enumeration::DeviceInformation* value);
	virtual STDMETHODIMP _get_TimelineController(MediaTimelineController* *value);
	virtual STDMETHODIMP _put_TimelineController(MediaTimelineController* value);
	virtual STDMETHODIMP _get_TimelineControllerPositionOffset(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_TimelineControllerPositionOffset(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_PlaybackSession(MediaPlaybackSession* *value);
	virtual STDMETHODIMP _StepForwardOneFrame();
	virtual STDMETHODIMP _StepBackwardOneFrame();
	virtual STDMETHODIMP _GetAsCastingSource(Casting::CastingSource* *returnValue);
};
template<typename X> struct IMediaPlayer3_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlayer3_adaptor::AudioBalance)->_get_AudioBalance(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMediaPlayer3_adaptor::AudioBalance)->_put_AudioBalance(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} AudioBalance;
		struct : property {
			ptr<Windows::Devices::Enumeration::DeviceInformation> get() { Windows::Devices::Enumeration::DeviceInformation* value; hrcheck(enc(&IMediaPlayer3_adaptor::AudioDevice)->_get_AudioDevice(&value)); return from_abi(value); }
			ptr<Windows::Devices::Enumeration::DeviceInformation> operator()() { return get(); }
			operator ptr<Windows::Devices::Enumeration::DeviceInformation> () { return get(); }
			ptr<Windows::Devices::Enumeration::DeviceInformation> operator->() { return get(); }
			void put(pptr<Windows::Devices::Enumeration::DeviceInformation> value) { hrcheck(enc(&IMediaPlayer3_adaptor::AudioDevice)->_put_AudioDevice(value)); }
			void operator=(pptr<Windows::Devices::Enumeration::DeviceInformation> value) { put(value); }
			void operator()(pptr<Windows::Devices::Enumeration::DeviceInformation> value) { put(value); }
		} AudioDevice;
		struct : property {
			ptr<MediaBreakManager> get() { MediaBreakManager* value; hrcheck(enc(&IMediaPlayer3_adaptor::BreakManager)->_get_BreakManager(&value)); return from_abi(value); }
			ptr<MediaBreakManager> operator()() { return get(); }
			operator ptr<MediaBreakManager> () { return get(); }
			ptr<MediaBreakManager> operator->() { return get(); }
		} BreakManager;
		struct : property {
			ptr<MediaPlaybackCommandManager> get() { MediaPlaybackCommandManager* value; hrcheck(enc(&IMediaPlayer3_adaptor::CommandManager)->_get_CommandManager(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManager> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManager> () { return get(); }
			ptr<MediaPlaybackCommandManager> operator->() { return get(); }
		} CommandManager;
		struct : property {
			ptr<MediaPlaybackSession> get() { MediaPlaybackSession* value; hrcheck(enc(&IMediaPlayer3_adaptor::PlaybackSession)->_get_PlaybackSession(&value)); return from_abi(value); }
			ptr<MediaPlaybackSession> operator()() { return get(); }
			operator ptr<MediaPlaybackSession> () { return get(); }
			ptr<MediaPlaybackSession> operator->() { return get(); }
		} PlaybackSession;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlayer3_adaptor::RealTimePlayback)->_get_RealTimePlayback(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlayer3_adaptor::RealTimePlayback)->_put_RealTimePlayback(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} RealTimePlayback;
		struct : property {
			Playback::StereoscopicVideoRenderMode get() { Playback::StereoscopicVideoRenderMode value; hrcheck(enc(&IMediaPlayer3_adaptor::StereoscopicVideoRenderMode)->_get_StereoscopicVideoRenderMode(&value)); return value; }
			Playback::StereoscopicVideoRenderMode operator()() { return get(); }
			operator Playback::StereoscopicVideoRenderMode () { return get(); }
			void put(Playback::StereoscopicVideoRenderMode value) { hrcheck(enc(&IMediaPlayer3_adaptor::StereoscopicVideoRenderMode)->_put_StereoscopicVideoRenderMode(value)); }
			void operator=(Playback::StereoscopicVideoRenderMode value) { put(value); }
			void operator()(Playback::StereoscopicVideoRenderMode value) { put(value); }
		} StereoscopicVideoRenderMode;
		struct : property {
			ptr<MediaTimelineController> get() { MediaTimelineController* value; hrcheck(enc(&IMediaPlayer3_adaptor::TimelineController)->_get_TimelineController(&value)); return from_abi(value); }
			ptr<MediaTimelineController> operator()() { return get(); }
			operator ptr<MediaTimelineController> () { return get(); }
			ptr<MediaTimelineController> operator->() { return get(); }
			void put(pptr<MediaTimelineController> value) { hrcheck(enc(&IMediaPlayer3_adaptor::TimelineController)->_put_TimelineController(value)); }
			void operator=(pptr<MediaTimelineController> value) { put(value); }
			void operator()(pptr<MediaTimelineController> value) { put(value); }
		} TimelineController;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaPlayer3_adaptor::TimelineControllerPositionOffset)->_get_TimelineControllerPositionOffset(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IMediaPlayer3_adaptor::TimelineControllerPositionOffset)->_put_TimelineControllerPositionOffset(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} TimelineControllerPositionOffset;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer3_adaptor::IsMutedChanged)->_add_IsMutedChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer3_adaptor::IsMutedChanged)->_remove_IsMutedChanged(token)); }
		} IsMutedChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlayer>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlayer3_adaptor::SourceChanged)->_add_SourceChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlayer3_adaptor::SourceChanged)->_remove_SourceChanged(token)); }
		} SourceChanged;
	};
	void StepForwardOneFrame() { hrcheck(X::get()->_StepForwardOneFrame()); }
	void StepBackwardOneFrame() { hrcheck(X::get()->_StepBackwardOneFrame()); }
	ptr<Casting::CastingSource> GetAsCastingSource() { Casting::CastingSource* returnValue; hrcheck(X::get()->_GetAsCastingSource(&returnValue)); return from_abi(returnValue); }
	IMediaPlayer3_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayer3, X> : Windows::Media::Playback::IMediaPlayer3_adaptor<X> { typedef adapt IMediaPlayer3; };
struct IMediaPlayer3 : IMediaPlayer3_raw, generate<IMediaPlayer3> {};

// IMediaPlayerEffects
struct IMediaPlayerEffects_raw : IInspectable {
	virtual STDMETHODIMP _AddAudioEffect(HSTRING activatableClassId, bool effectOptional, Foundation::Collections::IPropertySet* configuration);
	virtual STDMETHODIMP _RemoveAllEffects();
};
template<typename X> struct IMediaPlayerEffects_adaptor : X {
	void AddAudioEffect(hstring_ref activatableClassId, bool effectOptional, pptr<Foundation::Collections::IPropertySet> configuration) { hrcheck(X::get()->_AddAudioEffect(activatableClassId, effectOptional, configuration)); }
	void RemoveAllEffects() { hrcheck(X::get()->_RemoveAllEffects()); }
};
template<typename X> struct adapt<IMediaPlayerEffects, X> : Windows::Media::Playback::IMediaPlayerEffects_adaptor<X> { typedef adapt IMediaPlayerEffects; };
struct IMediaPlayerEffects : IMediaPlayerEffects_raw, generate<IMediaPlayerEffects> {};

// IMediaPlayer2
struct IMediaPlayer2_raw : IInspectable {
	virtual STDMETHODIMP _get_SystemMediaTransportControls(Media::SystemMediaTransportControls* *value);
	virtual STDMETHODIMP _get_AudioCategory(MediaPlayerAudioCategory *value);
	virtual STDMETHODIMP _put_AudioCategory(MediaPlayerAudioCategory value);
	virtual STDMETHODIMP _get_AudioDeviceType(MediaPlayerAudioDeviceType *value);
	virtual STDMETHODIMP _put_AudioDeviceType(MediaPlayerAudioDeviceType value);
};
template<typename X> struct IMediaPlayer2_adaptor : X {
	union {
		struct : property {
			MediaPlayerAudioCategory get() { MediaPlayerAudioCategory value; hrcheck(enc(&IMediaPlayer2_adaptor::AudioCategory)->_get_AudioCategory(&value)); return value; }
			MediaPlayerAudioCategory operator()() { return get(); }
			operator MediaPlayerAudioCategory () { return get(); }
			void put(MediaPlayerAudioCategory value) { hrcheck(enc(&IMediaPlayer2_adaptor::AudioCategory)->_put_AudioCategory(value)); }
			void operator=(MediaPlayerAudioCategory value) { put(value); }
			void operator()(MediaPlayerAudioCategory value) { put(value); }
		} AudioCategory;
		struct : property {
			MediaPlayerAudioDeviceType get() { MediaPlayerAudioDeviceType value; hrcheck(enc(&IMediaPlayer2_adaptor::AudioDeviceType)->_get_AudioDeviceType(&value)); return value; }
			MediaPlayerAudioDeviceType operator()() { return get(); }
			operator MediaPlayerAudioDeviceType () { return get(); }
			void put(MediaPlayerAudioDeviceType value) { hrcheck(enc(&IMediaPlayer2_adaptor::AudioDeviceType)->_put_AudioDeviceType(value)); }
			void operator=(MediaPlayerAudioDeviceType value) { put(value); }
			void operator()(MediaPlayerAudioDeviceType value) { put(value); }
		} AudioDeviceType;
		struct : property {
			ptr<Media::SystemMediaTransportControls> get() { Media::SystemMediaTransportControls* value; hrcheck(enc(&IMediaPlayer2_adaptor::SystemMediaTransportControls)->_get_SystemMediaTransportControls(&value)); return from_abi(value); }
			ptr<Media::SystemMediaTransportControls> operator()() { return get(); }
			operator ptr<Media::SystemMediaTransportControls> () { return get(); }
			ptr<Media::SystemMediaTransportControls> operator->() { return get(); }
		} SystemMediaTransportControls;
	};
	IMediaPlayer2_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayer2, X> : Windows::Media::Playback::IMediaPlayer2_adaptor<X> { typedef adapt IMediaPlayer2; };
struct IMediaPlayer2 : IMediaPlayer2_raw, generate<IMediaPlayer2> {};

// IMediaPlayerSource2
struct IMediaPlayerSource2_raw : IInspectable {
	virtual STDMETHODIMP _get_Source(IMediaPlaybackSource* *value);
	virtual STDMETHODIMP _put_Source(IMediaPlaybackSource* value);
};
template<typename X> struct IMediaPlayerSource2_adaptor : X {
	union {
		struct : property {
			ptr<IMediaPlaybackSource> get() { IMediaPlaybackSource* value; hrcheck(enc(&IMediaPlayerSource2_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<IMediaPlaybackSource> operator()() { return get(); }
			operator ptr<IMediaPlaybackSource> () { return get(); }
			ptr<IMediaPlaybackSource> operator->() { return get(); }
			void put(pptr<IMediaPlaybackSource> value) { hrcheck(enc(&IMediaPlayerSource2_adaptor::Source)->_put_Source(value)); }
			void operator=(pptr<IMediaPlaybackSource> value) { put(value); }
			void operator()(pptr<IMediaPlaybackSource> value) { put(value); }
		} Source;
	};
	IMediaPlayerSource2_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayerSource2, X> : Windows::Media::Playback::IMediaPlayerSource2_adaptor<X> { typedef adapt IMediaPlayerSource2; };
struct IMediaPlayerSource2 : IMediaPlayerSource2_raw, generate<IMediaPlayerSource2> {};

// IMediaPlayerSource
struct IMediaPlayerSource_raw : IInspectable {
	virtual STDMETHODIMP _get_ProtectionManager(Protection::MediaProtectionManager* *value);
	virtual STDMETHODIMP _put_ProtectionManager(Protection::MediaProtectionManager* value);
	virtual STDMETHODIMP _SetFileSource(Storage::IStorageFile* file);
	virtual STDMETHODIMP _SetStreamSource(Storage::Streams::IRandomAccessStream* stream);
	virtual STDMETHODIMP _SetMediaSource(Core::IMediaSource* source);
};
template<typename X> struct IMediaPlayerSource_adaptor : X {
	union {
		struct : property {
			ptr<Protection::MediaProtectionManager> get() { Protection::MediaProtectionManager* value; hrcheck(enc(&IMediaPlayerSource_adaptor::ProtectionManager)->_get_ProtectionManager(&value)); return from_abi(value); }
			ptr<Protection::MediaProtectionManager> operator()() { return get(); }
			operator ptr<Protection::MediaProtectionManager> () { return get(); }
			ptr<Protection::MediaProtectionManager> operator->() { return get(); }
			void put(pptr<Protection::MediaProtectionManager> value) { hrcheck(enc(&IMediaPlayerSource_adaptor::ProtectionManager)->_put_ProtectionManager(value)); }
			void operator=(pptr<Protection::MediaProtectionManager> value) { put(value); }
			void operator()(pptr<Protection::MediaProtectionManager> value) { put(value); }
		} ProtectionManager;
	};
	void SetFileSource(pptr<Storage::IStorageFile> file) { hrcheck(X::get()->_SetFileSource(file)); }
	void SetStreamSource(pptr<Storage::Streams::IRandomAccessStream> stream) { hrcheck(X::get()->_SetStreamSource(stream)); }
	void SetMediaSource(pptr<Core::IMediaSource> source) { hrcheck(X::get()->_SetMediaSource(source)); }
	IMediaPlayerSource_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayerSource, X> : Windows::Media::Playback::IMediaPlayerSource_adaptor<X> { typedef adapt IMediaPlayerSource; };
struct IMediaPlayerSource : IMediaPlayerSource_raw, generate<IMediaPlayerSource> {};

// MediaPlayer
template<typename X> struct statics<MediaPlayer, X> : X {
	typedef typename X::root_type MediaPlayer;
};
struct MediaPlayer : generate<MediaPlayer> {
	using IMediaPlayer6::RenderSubtitlesToSurface;
	using IMediaPlayer5::CopyFrameToVideoSurface;
};

// IMediaBreakManager
struct IMediaBreakManager_raw : IInspectable {
	virtual STDMETHODIMP _add_BreaksSeekedOver(Foundation::TypedEventHandler<MediaBreakManager*, MediaBreakSeekedOverEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BreaksSeekedOver(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BreakStarted(Foundation::TypedEventHandler<MediaBreakManager*, MediaBreakStartedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BreakStarted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BreakEnded(Foundation::TypedEventHandler<MediaBreakManager*, MediaBreakEndedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BreakEnded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BreakSkipped(Foundation::TypedEventHandler<MediaBreakManager*, MediaBreakSkippedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BreakSkipped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_CurrentBreak(MediaBreak* *value);
	virtual STDMETHODIMP _get_PlaybackSession(MediaPlaybackSession* *value);
	virtual STDMETHODIMP _PlayBreak(MediaBreak* value);
	virtual STDMETHODIMP _SkipCurrentBreak();
};
template<typename X> struct IMediaBreakManager_adaptor : X {
	union {
		struct : property {
			ptr<MediaBreak> get() { MediaBreak* value; hrcheck(enc(&IMediaBreakManager_adaptor::CurrentBreak)->_get_CurrentBreak(&value)); return from_abi(value); }
			ptr<MediaBreak> operator()() { return get(); }
			operator ptr<MediaBreak> () { return get(); }
			ptr<MediaBreak> operator->() { return get(); }
		} CurrentBreak;
		struct : property {
			ptr<MediaPlaybackSession> get() { MediaPlaybackSession* value; hrcheck(enc(&IMediaBreakManager_adaptor::PlaybackSession)->_get_PlaybackSession(&value)); return from_abi(value); }
			ptr<MediaPlaybackSession> operator()() { return get(); }
			operator ptr<MediaPlaybackSession> () { return get(); }
			ptr<MediaPlaybackSession> operator->() { return get(); }
		} PlaybackSession;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaBreakManager>, ptr<MediaBreakEndedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaBreakManager_adaptor::BreakEnded)->_add_BreakEnded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaBreakManager_adaptor::BreakEnded)->_remove_BreakEnded(token)); }
		} BreakEnded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaBreakManager>, ptr<MediaBreakSkippedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaBreakManager_adaptor::BreakSkipped)->_add_BreakSkipped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaBreakManager_adaptor::BreakSkipped)->_remove_BreakSkipped(token)); }
		} BreakSkipped;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaBreakManager>, ptr<MediaBreakStartedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaBreakManager_adaptor::BreakStarted)->_add_BreakStarted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaBreakManager_adaptor::BreakStarted)->_remove_BreakStarted(token)); }
		} BreakStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaBreakManager>, ptr<MediaBreakSeekedOverEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaBreakManager_adaptor::BreaksSeekedOver)->_add_BreaksSeekedOver(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaBreakManager_adaptor::BreaksSeekedOver)->_remove_BreaksSeekedOver(token)); }
		} BreaksSeekedOver;
	};
	void PlayBreak(pptr<MediaBreak> value) { hrcheck(X::get()->_PlayBreak(value)); }
	void SkipCurrentBreak() { hrcheck(X::get()->_SkipCurrentBreak()); }
	IMediaBreakManager_adaptor() {}
};
template<typename X> struct adapt<IMediaBreakManager, X> : Windows::Media::Playback::IMediaBreakManager_adaptor<X> { typedef adapt IMediaBreakManager; };
struct IMediaBreakManager : IMediaBreakManager_raw, generate<IMediaBreakManager> {};

// MediaBreakManager
template<typename X> struct statics<MediaBreakManager, X> : X {
	typedef typename X::root_type MediaBreakManager;
};
struct MediaBreakManager : generate<MediaBreakManager> {};

// IMediaPlaybackCommandManager
struct IMediaPlaybackCommandManager_raw : IInspectable {
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEnabled(bool value);
	virtual STDMETHODIMP _get_MediaPlayer(Playback::MediaPlayer* *value);
	virtual STDMETHODIMP _get_PlayBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_PauseBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_NextBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_PreviousBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_FastForwardBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_RewindBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_ShuffleBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_AutoRepeatModeBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_PositionBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _get_RateBehavior(MediaPlaybackCommandManagerCommandBehavior* *value);
	virtual STDMETHODIMP _add_PlayReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerPlayReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlayReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PauseReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerPauseReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PauseReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NextReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerNextReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NextReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PreviousReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerPreviousReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PreviousReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_FastForwardReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerFastForwardReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FastForwardReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RewindReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerRewindReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RewindReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ShuffleReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerShuffleReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ShuffleReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AutoRepeatModeReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AutoRepeatModeReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PositionReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerPositionReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PositionReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RateReceived(Foundation::TypedEventHandler<MediaPlaybackCommandManager*, MediaPlaybackCommandManagerRateReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RateReceived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMediaPlaybackCommandManager_adaptor : X {
	union {
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::AutoRepeatModeBehavior)->_get_AutoRepeatModeBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} AutoRepeatModeBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::FastForwardBehavior)->_get_FastForwardBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} FastForwardBehavior;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::IsEnabled)->_put_IsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEnabled;
		struct : property {
			ptr<Playback::MediaPlayer> get() { Playback::MediaPlayer* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::MediaPlayer)->_get_MediaPlayer(&value)); return from_abi(value); }
			ptr<Playback::MediaPlayer> operator()() { return get(); }
			operator ptr<Playback::MediaPlayer> () { return get(); }
			ptr<Playback::MediaPlayer> operator->() { return get(); }
		} MediaPlayer;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::NextBehavior)->_get_NextBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} NextBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PauseBehavior)->_get_PauseBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} PauseBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PlayBehavior)->_get_PlayBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} PlayBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PositionBehavior)->_get_PositionBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} PositionBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PreviousBehavior)->_get_PreviousBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} PreviousBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::RateBehavior)->_get_RateBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} RateBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::RewindBehavior)->_get_RewindBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} RewindBehavior;
		struct : property {
			ptr<MediaPlaybackCommandManagerCommandBehavior> get() { MediaPlaybackCommandManagerCommandBehavior* value; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::ShuffleBehavior)->_get_ShuffleBehavior(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManagerCommandBehavior> () { return get(); }
			ptr<MediaPlaybackCommandManagerCommandBehavior> operator->() { return get(); }
		} ShuffleBehavior;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::AutoRepeatModeReceived)->_add_AutoRepeatModeReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::AutoRepeatModeReceived)->_remove_AutoRepeatModeReceived(token)); }
		} AutoRepeatModeReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerFastForwardReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::FastForwardReceived)->_add_FastForwardReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::FastForwardReceived)->_remove_FastForwardReceived(token)); }
		} FastForwardReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerNextReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::NextReceived)->_add_NextReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::NextReceived)->_remove_NextReceived(token)); }
		} NextReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerPauseReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PauseReceived)->_add_PauseReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PauseReceived)->_remove_PauseReceived(token)); }
		} PauseReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerPlayReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PlayReceived)->_add_PlayReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PlayReceived)->_remove_PlayReceived(token)); }
		} PlayReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerPositionReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PositionReceived)->_add_PositionReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PositionReceived)->_remove_PositionReceived(token)); }
		} PositionReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerPreviousReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PreviousReceived)->_add_PreviousReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::PreviousReceived)->_remove_PreviousReceived(token)); }
		} PreviousReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerRateReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::RateReceived)->_add_RateReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::RateReceived)->_remove_RateReceived(token)); }
		} RateReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerRewindReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::RewindReceived)->_add_RewindReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::RewindReceived)->_remove_RewindReceived(token)); }
		} RewindReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManager>, ptr<MediaPlaybackCommandManagerShuffleReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::ShuffleReceived)->_add_ShuffleReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManager_adaptor::ShuffleReceived)->_remove_ShuffleReceived(token)); }
		} ShuffleReceived;
	};
	IMediaPlaybackCommandManager_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManager, X> : Windows::Media::Playback::IMediaPlaybackCommandManager_adaptor<X> { typedef adapt IMediaPlaybackCommandManager; };
struct IMediaPlaybackCommandManager : IMediaPlaybackCommandManager_raw, generate<IMediaPlaybackCommandManager> {};

// MediaPlaybackCommandManager
template<typename X> struct statics<MediaPlaybackCommandManager, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManager;
};
struct MediaPlaybackCommandManager : generate<MediaPlaybackCommandManager> {};

// IMediaPlaybackSession3
struct IMediaPlaybackSession3_raw : IInspectable {
	virtual STDMETHODIMP _get_PlaybackRotation(MediaProperties::MediaRotation *value);
	virtual STDMETHODIMP _put_PlaybackRotation(MediaProperties::MediaRotation value);
	virtual STDMETHODIMP _GetOutputDegradationPolicyState(MediaPlaybackSessionOutputDegradationPolicyState* *value);
};
template<typename X> struct IMediaPlaybackSession3_adaptor : X {
	union {
		struct : property {
			MediaProperties::MediaRotation get() { MediaProperties::MediaRotation value; hrcheck(enc(&IMediaPlaybackSession3_adaptor::PlaybackRotation)->_get_PlaybackRotation(&value)); return value; }
			MediaProperties::MediaRotation operator()() { return get(); }
			operator MediaProperties::MediaRotation () { return get(); }
			void put(MediaProperties::MediaRotation value) { hrcheck(enc(&IMediaPlaybackSession3_adaptor::PlaybackRotation)->_put_PlaybackRotation(value)); }
			void operator=(MediaProperties::MediaRotation value) { put(value); }
			void operator()(MediaProperties::MediaRotation value) { put(value); }
		} PlaybackRotation;
	};
	ptr<MediaPlaybackSessionOutputDegradationPolicyState> GetOutputDegradationPolicyState() { MediaPlaybackSessionOutputDegradationPolicyState* value; hrcheck(X::get()->_GetOutputDegradationPolicyState(&value)); return from_abi(value); }
	IMediaPlaybackSession3_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackSession3, X> : Windows::Media::Playback::IMediaPlaybackSession3_adaptor<X> { typedef adapt IMediaPlaybackSession3; };
struct IMediaPlaybackSession3 : IMediaPlaybackSession3_raw, generate<IMediaPlaybackSession3> {};

// IMediaPlaybackSession2
struct IMediaPlaybackSession2_raw : IInspectable {
	virtual STDMETHODIMP _add_BufferedRangesChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BufferedRangesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PlayedRangesChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlayedRangesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SeekableRangesChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SeekableRangesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SupportedPlaybackRatesChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SupportedPlaybackRatesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_SphericalVideoProjection(MediaPlaybackSphericalVideoProjection* *value);
	virtual STDMETHODIMP _get_IsMirroring(bool *value);
	virtual STDMETHODIMP _put_IsMirroring(bool value);
	virtual STDMETHODIMP _GetBufferedRanges(Foundation::Collections::IVectorView<MediaTimeRange>* *value);
	virtual STDMETHODIMP _GetPlayedRanges(Foundation::Collections::IVectorView<MediaTimeRange>* *value);
	virtual STDMETHODIMP _GetSeekableRanges(Foundation::Collections::IVectorView<MediaTimeRange>* *value);
	virtual STDMETHODIMP _IsSupportedPlaybackRateRange(double rate1, double rate2, bool *value);
};
template<typename X> struct IMediaPlaybackSession2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackSession2_adaptor::IsMirroring)->_get_IsMirroring(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackSession2_adaptor::IsMirroring)->_put_IsMirroring(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsMirroring;
		struct : property {
			ptr<MediaPlaybackSphericalVideoProjection> get() { MediaPlaybackSphericalVideoProjection* value; hrcheck(enc(&IMediaPlaybackSession2_adaptor::SphericalVideoProjection)->_get_SphericalVideoProjection(&value)); return from_abi(value); }
			ptr<MediaPlaybackSphericalVideoProjection> operator()() { return get(); }
			operator ptr<MediaPlaybackSphericalVideoProjection> () { return get(); }
			ptr<MediaPlaybackSphericalVideoProjection> operator->() { return get(); }
		} SphericalVideoProjection;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession2_adaptor::BufferedRangesChanged)->_add_BufferedRangesChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession2_adaptor::BufferedRangesChanged)->_remove_BufferedRangesChanged(token)); }
		} BufferedRangesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession2_adaptor::PlayedRangesChanged)->_add_PlayedRangesChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession2_adaptor::PlayedRangesChanged)->_remove_PlayedRangesChanged(token)); }
		} PlayedRangesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession2_adaptor::SeekableRangesChanged)->_add_SeekableRangesChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession2_adaptor::SeekableRangesChanged)->_remove_SeekableRangesChanged(token)); }
		} SeekableRangesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession2_adaptor::SupportedPlaybackRatesChanged)->_add_SupportedPlaybackRatesChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession2_adaptor::SupportedPlaybackRatesChanged)->_remove_SupportedPlaybackRatesChanged(token)); }
		} SupportedPlaybackRatesChanged;
	};
	ptr<Foundation::Collections::IVectorView<MediaTimeRange>> GetBufferedRanges() { Foundation::Collections::IVectorView<MediaTimeRange>* value; hrcheck(X::get()->_GetBufferedRanges(&value)); return from_abi(value); }
	ptr<Foundation::Collections::IVectorView<MediaTimeRange>> GetPlayedRanges() { Foundation::Collections::IVectorView<MediaTimeRange>* value; hrcheck(X::get()->_GetPlayedRanges(&value)); return from_abi(value); }
	ptr<Foundation::Collections::IVectorView<MediaTimeRange>> GetSeekableRanges() { Foundation::Collections::IVectorView<MediaTimeRange>* value; hrcheck(X::get()->_GetSeekableRanges(&value)); return from_abi(value); }
	bool IsSupportedPlaybackRateRange(double rate1, double rate2) { bool value; hrcheck(X::get()->_IsSupportedPlaybackRateRange(rate1, rate2, &value)); return value; }
	IMediaPlaybackSession2_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackSession2, X> : Windows::Media::Playback::IMediaPlaybackSession2_adaptor<X> { typedef adapt IMediaPlaybackSession2; };
struct IMediaPlaybackSession2 : IMediaPlaybackSession2_raw, generate<IMediaPlaybackSession2> {};

// IMediaPlaybackSession
struct IMediaPlaybackSession_raw : IInspectable {
	virtual STDMETHODIMP _add_PlaybackStateChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlaybackStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PlaybackRateChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlaybackRateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SeekCompleted(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SeekCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BufferingStarted(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BufferingStarted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BufferingEnded(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BufferingEnded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BufferingProgressChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BufferingProgressChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DownloadProgressChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DownloadProgressChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NaturalDurationChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NaturalDurationChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PositionChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PositionChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NaturalVideoSizeChanged(Foundation::TypedEventHandler<MediaPlaybackSession*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NaturalVideoSizeChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_MediaPlayer(Playback::MediaPlayer* *value);
	virtual STDMETHODIMP _get_NaturalDuration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Position(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_Position(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_PlaybackState(MediaPlaybackState *value);
	virtual STDMETHODIMP _get_CanSeek(bool *value);
	virtual STDMETHODIMP _get_CanPause(bool *value);
	virtual STDMETHODIMP _get_IsProtected(bool *value);
	virtual STDMETHODIMP _get_PlaybackRate(double *value);
	virtual STDMETHODIMP _put_PlaybackRate(double value);
	virtual STDMETHODIMP _get_BufferingProgress(double *value);
	virtual STDMETHODIMP _get_DownloadProgress(double *value);
	virtual STDMETHODIMP _get_NaturalVideoHeight(unsigned *value);
	virtual STDMETHODIMP _get_NaturalVideoWidth(unsigned *value);
	virtual STDMETHODIMP _get_NormalizedSourceRect(Foundation::Rect *value);
	virtual STDMETHODIMP _put_NormalizedSourceRect(Foundation::Rect value);
	virtual STDMETHODIMP _get_StereoscopicVideoPackingMode(MediaProperties::StereoscopicVideoPackingMode *value);
	virtual STDMETHODIMP _put_StereoscopicVideoPackingMode(MediaProperties::StereoscopicVideoPackingMode value);
};
template<typename X> struct IMediaPlaybackSession_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlaybackSession_adaptor::BufferingProgress)->_get_BufferingProgress(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} BufferingProgress;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackSession_adaptor::CanPause)->_get_CanPause(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanPause;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackSession_adaptor::CanSeek)->_get_CanSeek(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanSeek;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlaybackSession_adaptor::DownloadProgress)->_get_DownloadProgress(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} DownloadProgress;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackSession_adaptor::IsProtected)->_get_IsProtected(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsProtected;
		struct : property {
			ptr<Playback::MediaPlayer> get() { Playback::MediaPlayer* value; hrcheck(enc(&IMediaPlaybackSession_adaptor::MediaPlayer)->_get_MediaPlayer(&value)); return from_abi(value); }
			ptr<Playback::MediaPlayer> operator()() { return get(); }
			operator ptr<Playback::MediaPlayer> () { return get(); }
			ptr<Playback::MediaPlayer> operator->() { return get(); }
		} MediaPlayer;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaPlaybackSession_adaptor::NaturalDuration)->_get_NaturalDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} NaturalDuration;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaPlaybackSession_adaptor::NaturalVideoHeight)->_get_NaturalVideoHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} NaturalVideoHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaPlaybackSession_adaptor::NaturalVideoWidth)->_get_NaturalVideoWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} NaturalVideoWidth;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IMediaPlaybackSession_adaptor::NormalizedSourceRect)->_get_NormalizedSourceRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
			void put(const Foundation::Rect& value) { hrcheck(enc(&IMediaPlaybackSession_adaptor::NormalizedSourceRect)->_put_NormalizedSourceRect(value)); }
			void operator=(const Foundation::Rect& value) { put(value); }
			void operator()(const Foundation::Rect& value) { put(value); }
		} NormalizedSourceRect;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlaybackSession_adaptor::PlaybackRate)->_get_PlaybackRate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMediaPlaybackSession_adaptor::PlaybackRate)->_put_PlaybackRate(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} PlaybackRate;
		struct : property {
			MediaPlaybackState get() { MediaPlaybackState value; hrcheck(enc(&IMediaPlaybackSession_adaptor::PlaybackState)->_get_PlaybackState(&value)); return value; }
			MediaPlaybackState operator()() { return get(); }
			operator MediaPlaybackState () { return get(); }
		} PlaybackState;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaPlaybackSession_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IMediaPlaybackSession_adaptor::Position)->_put_Position(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} Position;
		struct : property {
			MediaProperties::StereoscopicVideoPackingMode get() { MediaProperties::StereoscopicVideoPackingMode value; hrcheck(enc(&IMediaPlaybackSession_adaptor::StereoscopicVideoPackingMode)->_get_StereoscopicVideoPackingMode(&value)); return value; }
			MediaProperties::StereoscopicVideoPackingMode operator()() { return get(); }
			operator MediaProperties::StereoscopicVideoPackingMode () { return get(); }
			void put(MediaProperties::StereoscopicVideoPackingMode value) { hrcheck(enc(&IMediaPlaybackSession_adaptor::StereoscopicVideoPackingMode)->_put_StereoscopicVideoPackingMode(value)); }
			void operator=(MediaProperties::StereoscopicVideoPackingMode value) { put(value); }
			void operator()(MediaProperties::StereoscopicVideoPackingMode value) { put(value); }
		} StereoscopicVideoPackingMode;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::BufferingEnded)->_add_BufferingEnded(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::BufferingEnded)->_remove_BufferingEnded(token)); }
		} BufferingEnded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::BufferingProgressChanged)->_add_BufferingProgressChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::BufferingProgressChanged)->_remove_BufferingProgressChanged(token)); }
		} BufferingProgressChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::BufferingStarted)->_add_BufferingStarted(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::BufferingStarted)->_remove_BufferingStarted(token)); }
		} BufferingStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::DownloadProgressChanged)->_add_DownloadProgressChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::DownloadProgressChanged)->_remove_DownloadProgressChanged(token)); }
		} DownloadProgressChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::NaturalDurationChanged)->_add_NaturalDurationChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::NaturalDurationChanged)->_remove_NaturalDurationChanged(token)); }
		} NaturalDurationChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::NaturalVideoSizeChanged)->_add_NaturalVideoSizeChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::NaturalVideoSizeChanged)->_remove_NaturalVideoSizeChanged(token)); }
		} NaturalVideoSizeChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::PlaybackRateChanged)->_add_PlaybackRateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::PlaybackRateChanged)->_remove_PlaybackRateChanged(token)); }
		} PlaybackRateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::PlaybackStateChanged)->_add_PlaybackStateChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::PlaybackStateChanged)->_remove_PlaybackStateChanged(token)); }
		} PlaybackStateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::PositionChanged)->_add_PositionChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::PositionChanged)->_remove_PositionChanged(token)); }
		} PositionChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackSession>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackSession_adaptor::SeekCompleted)->_add_SeekCompleted(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackSession_adaptor::SeekCompleted)->_remove_SeekCompleted(token)); }
		} SeekCompleted;
	};
	IMediaPlaybackSession_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackSession, X> : Windows::Media::Playback::IMediaPlaybackSession_adaptor<X> { typedef adapt IMediaPlaybackSession; };
struct IMediaPlaybackSession : IMediaPlaybackSession_raw, generate<IMediaPlaybackSession> {};

// MediaPlaybackSession
template<typename X> struct statics<MediaPlaybackSession, X> : X {
	typedef typename X::root_type MediaPlaybackSession;
};
struct MediaPlaybackSession : generate<MediaPlaybackSession> {};

// IMediaPlayerSurface
struct IMediaPlayerSurface_raw : IInspectable {
	virtual STDMETHODIMP _get_CompositionSurface(UI::Composition::ICompositionSurface* *value);
	virtual STDMETHODIMP _get_Compositor(UI::Composition::Compositor* *value);
	virtual STDMETHODIMP _get_MediaPlayer(Playback::MediaPlayer* *value);
};
template<typename X> struct IMediaPlayerSurface_adaptor : X {
	union {
		struct : property {
			ptr<UI::Composition::ICompositionSurface> get() { UI::Composition::ICompositionSurface* value; hrcheck(enc(&IMediaPlayerSurface_adaptor::CompositionSurface)->_get_CompositionSurface(&value)); return from_abi(value); }
			ptr<UI::Composition::ICompositionSurface> operator()() { return get(); }
			operator ptr<UI::Composition::ICompositionSurface> () { return get(); }
			ptr<UI::Composition::ICompositionSurface> operator->() { return get(); }
		} CompositionSurface;
		struct : property {
			ptr<UI::Composition::Compositor> get() { UI::Composition::Compositor* value; hrcheck(enc(&IMediaPlayerSurface_adaptor::Compositor)->_get_Compositor(&value)); return from_abi(value); }
			ptr<UI::Composition::Compositor> operator()() { return get(); }
			operator ptr<UI::Composition::Compositor> () { return get(); }
			ptr<UI::Composition::Compositor> operator->() { return get(); }
		} Compositor;
		struct : property {
			ptr<Playback::MediaPlayer> get() { Playback::MediaPlayer* value; hrcheck(enc(&IMediaPlayerSurface_adaptor::MediaPlayer)->_get_MediaPlayer(&value)); return from_abi(value); }
			ptr<Playback::MediaPlayer> operator()() { return get(); }
			operator ptr<Playback::MediaPlayer> () { return get(); }
			ptr<Playback::MediaPlayer> operator->() { return get(); }
		} MediaPlayer;
	};
	IMediaPlayerSurface_adaptor() {}
};
template<typename X> struct adapt<IMediaPlayerSurface, X> : Windows::Media::Playback::IMediaPlayerSurface_adaptor<X> { typedef adapt IMediaPlayerSurface; };
struct IMediaPlayerSurface : IMediaPlayerSurface_raw, generate<IMediaPlayerSurface> {};

// MediaPlayerSurface
template<typename X> struct statics<MediaPlayerSurface, X> : X {
	typedef typename X::root_type MediaPlayerSurface;
};
struct MediaPlayerSurface : generate<MediaPlayerSurface> {};

// IMediaPlaybackSphericalVideoProjection
struct IMediaPlaybackSphericalVideoProjection_raw : IInspectable {
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEnabled(bool value);
	virtual STDMETHODIMP _get_FrameFormat(MediaProperties::SphericalVideoFrameFormat *value);
	virtual STDMETHODIMP _put_FrameFormat(MediaProperties::SphericalVideoFrameFormat value);
	virtual STDMETHODIMP _get_HorizontalFieldOfViewInDegrees(double *value);
	virtual STDMETHODIMP _put_HorizontalFieldOfViewInDegrees(double value);
	virtual STDMETHODIMP _get_ViewOrientation(Foundation::Numerics::Quaternion *value);
	virtual STDMETHODIMP _put_ViewOrientation(Foundation::Numerics::Quaternion value);
	virtual STDMETHODIMP _get_ProjectionMode(SphericalVideoProjectionMode *value);
	virtual STDMETHODIMP _put_ProjectionMode(SphericalVideoProjectionMode value);
};
template<typename X> struct IMediaPlaybackSphericalVideoProjection_adaptor : X {
	union {
		struct : property {
			MediaProperties::SphericalVideoFrameFormat get() { MediaProperties::SphericalVideoFrameFormat value; hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::FrameFormat)->_get_FrameFormat(&value)); return value; }
			MediaProperties::SphericalVideoFrameFormat operator()() { return get(); }
			operator MediaProperties::SphericalVideoFrameFormat () { return get(); }
			void put(MediaProperties::SphericalVideoFrameFormat value) { hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::FrameFormat)->_put_FrameFormat(value)); }
			void operator=(MediaProperties::SphericalVideoFrameFormat value) { put(value); }
			void operator()(MediaProperties::SphericalVideoFrameFormat value) { put(value); }
		} FrameFormat;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::HorizontalFieldOfViewInDegrees)->_get_HorizontalFieldOfViewInDegrees(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::HorizontalFieldOfViewInDegrees)->_put_HorizontalFieldOfViewInDegrees(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} HorizontalFieldOfViewInDegrees;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::IsEnabled)->_put_IsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEnabled;
		struct : property {
			SphericalVideoProjectionMode get() { SphericalVideoProjectionMode value; hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::ProjectionMode)->_get_ProjectionMode(&value)); return value; }
			SphericalVideoProjectionMode operator()() { return get(); }
			operator SphericalVideoProjectionMode () { return get(); }
			void put(SphericalVideoProjectionMode value) { hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::ProjectionMode)->_put_ProjectionMode(value)); }
			void operator=(SphericalVideoProjectionMode value) { put(value); }
			void operator()(SphericalVideoProjectionMode value) { put(value); }
		} ProjectionMode;
		struct : property {
			Foundation::Numerics::Quaternion get() { Foundation::Numerics::Quaternion value; hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::ViewOrientation)->_get_ViewOrientation(&value)); return value; }
			Foundation::Numerics::Quaternion operator()() { return get(); }
			operator Foundation::Numerics::Quaternion () { return get(); }
			void put(const Foundation::Numerics::Quaternion& value) { hrcheck(enc(&IMediaPlaybackSphericalVideoProjection_adaptor::ViewOrientation)->_put_ViewOrientation(value)); }
			void operator=(const Foundation::Numerics::Quaternion& value) { put(value); }
			void operator()(const Foundation::Numerics::Quaternion& value) { put(value); }
		} ViewOrientation;
	};
	IMediaPlaybackSphericalVideoProjection_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackSphericalVideoProjection, X> : Windows::Media::Playback::IMediaPlaybackSphericalVideoProjection_adaptor<X> { typedef adapt IMediaPlaybackSphericalVideoProjection; };
struct IMediaPlaybackSphericalVideoProjection : IMediaPlaybackSphericalVideoProjection_raw, generate<IMediaPlaybackSphericalVideoProjection> {};

// MediaPlaybackSphericalVideoProjection
template<typename X> struct statics<MediaPlaybackSphericalVideoProjection, X> : X {
	typedef typename X::root_type MediaPlaybackSphericalVideoProjection;
};
struct MediaPlaybackSphericalVideoProjection : generate<MediaPlaybackSphericalVideoProjection> {};

// IMediaPlaybackSessionOutputDegradationPolicyState
struct IMediaPlaybackSessionOutputDegradationPolicyState_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoConstrictionReason(MediaPlaybackSessionVideoConstrictionReason *value);
};
template<typename X> struct IMediaPlaybackSessionOutputDegradationPolicyState_adaptor : X {
	union {
		struct : property {
			MediaPlaybackSessionVideoConstrictionReason get() { MediaPlaybackSessionVideoConstrictionReason value; hrcheck(enc(&IMediaPlaybackSessionOutputDegradationPolicyState_adaptor::VideoConstrictionReason)->_get_VideoConstrictionReason(&value)); return value; }
			MediaPlaybackSessionVideoConstrictionReason operator()() { return get(); }
			operator MediaPlaybackSessionVideoConstrictionReason () { return get(); }
		} VideoConstrictionReason;
	};
	IMediaPlaybackSessionOutputDegradationPolicyState_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackSessionOutputDegradationPolicyState, X> : Windows::Media::Playback::IMediaPlaybackSessionOutputDegradationPolicyState_adaptor<X> { typedef adapt IMediaPlaybackSessionOutputDegradationPolicyState; };
struct IMediaPlaybackSessionOutputDegradationPolicyState : IMediaPlaybackSessionOutputDegradationPolicyState_raw, generate<IMediaPlaybackSessionOutputDegradationPolicyState> {};

// MediaPlaybackSessionOutputDegradationPolicyState
template<typename X> struct statics<MediaPlaybackSessionOutputDegradationPolicyState, X> : X {
	typedef typename X::root_type MediaPlaybackSessionOutputDegradationPolicyState;
};
struct MediaPlaybackSessionOutputDegradationPolicyState : generate<MediaPlaybackSessionOutputDegradationPolicyState> {};

// IMediaPlaybackSessionBufferingStartedEventArgs
struct IMediaPlaybackSessionBufferingStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsPlaybackInterruption(bool *value);
};
template<typename X> struct IMediaPlaybackSessionBufferingStartedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackSessionBufferingStartedEventArgs_adaptor::IsPlaybackInterruption)->_get_IsPlaybackInterruption(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPlaybackInterruption;
	};
	IMediaPlaybackSessionBufferingStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackSessionBufferingStartedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackSessionBufferingStartedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackSessionBufferingStartedEventArgs; };
struct IMediaPlaybackSessionBufferingStartedEventArgs : IMediaPlaybackSessionBufferingStartedEventArgs_raw, generate<IMediaPlaybackSessionBufferingStartedEventArgs> {};

// MediaPlaybackSessionBufferingStartedEventArgs
template<typename X> struct statics<MediaPlaybackSessionBufferingStartedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackSessionBufferingStartedEventArgs;
};
struct MediaPlaybackSessionBufferingStartedEventArgs : generate<MediaPlaybackSessionBufferingStartedEventArgs> {};

// IMediaBreakStartedEventArgs
struct IMediaBreakStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_MediaBreak(Playback::MediaBreak* *value);
};
template<typename X> struct IMediaBreakStartedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Playback::MediaBreak> get() { Playback::MediaBreak* value; hrcheck(enc(&IMediaBreakStartedEventArgs_adaptor::MediaBreak)->_get_MediaBreak(&value)); return from_abi(value); }
			ptr<Playback::MediaBreak> operator()() { return get(); }
			operator ptr<Playback::MediaBreak> () { return get(); }
			ptr<Playback::MediaBreak> operator->() { return get(); }
		} MediaBreak;
	};
	IMediaBreakStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaBreakStartedEventArgs, X> : Windows::Media::Playback::IMediaBreakStartedEventArgs_adaptor<X> { typedef adapt IMediaBreakStartedEventArgs; };
struct IMediaBreakStartedEventArgs : IMediaBreakStartedEventArgs_raw, generate<IMediaBreakStartedEventArgs> {};

// IMediaBreakEndedEventArgs
struct IMediaBreakEndedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_MediaBreak(Playback::MediaBreak* *value);
};
template<typename X> struct IMediaBreakEndedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Playback::MediaBreak> get() { Playback::MediaBreak* value; hrcheck(enc(&IMediaBreakEndedEventArgs_adaptor::MediaBreak)->_get_MediaBreak(&value)); return from_abi(value); }
			ptr<Playback::MediaBreak> operator()() { return get(); }
			operator ptr<Playback::MediaBreak> () { return get(); }
			ptr<Playback::MediaBreak> operator->() { return get(); }
		} MediaBreak;
	};
	IMediaBreakEndedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaBreakEndedEventArgs, X> : Windows::Media::Playback::IMediaBreakEndedEventArgs_adaptor<X> { typedef adapt IMediaBreakEndedEventArgs; };
struct IMediaBreakEndedEventArgs : IMediaBreakEndedEventArgs_raw, generate<IMediaBreakEndedEventArgs> {};

// IMediaBreakSkippedEventArgs
struct IMediaBreakSkippedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_MediaBreak(Playback::MediaBreak* *value);
};
template<typename X> struct IMediaBreakSkippedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Playback::MediaBreak> get() { Playback::MediaBreak* value; hrcheck(enc(&IMediaBreakSkippedEventArgs_adaptor::MediaBreak)->_get_MediaBreak(&value)); return from_abi(value); }
			ptr<Playback::MediaBreak> operator()() { return get(); }
			operator ptr<Playback::MediaBreak> () { return get(); }
			ptr<Playback::MediaBreak> operator->() { return get(); }
		} MediaBreak;
	};
	IMediaBreakSkippedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaBreakSkippedEventArgs, X> : Windows::Media::Playback::IMediaBreakSkippedEventArgs_adaptor<X> { typedef adapt IMediaBreakSkippedEventArgs; };
struct IMediaBreakSkippedEventArgs : IMediaBreakSkippedEventArgs_raw, generate<IMediaBreakSkippedEventArgs> {};

// IMediaBreakSeekedOverEventArgs
struct IMediaBreakSeekedOverEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SeekedOverBreaks(Foundation::Collections::IVectorView<MediaBreak*>* *value);
	virtual STDMETHODIMP _get_OldPosition(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_NewPosition(Foundation::TimeSpan *value);
};
template<typename X> struct IMediaBreakSeekedOverEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaBreakSeekedOverEventArgs_adaptor::NewPosition)->_get_NewPosition(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} NewPosition;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaBreakSeekedOverEventArgs_adaptor::OldPosition)->_get_OldPosition(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} OldPosition;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> get() { Foundation::Collections::IVectorView<MediaBreak*>* value; hrcheck(enc(&IMediaBreakSeekedOverEventArgs_adaptor::SeekedOverBreaks)->_get_SeekedOverBreaks(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> operator->() { return get(); }
		} SeekedOverBreaks;
	};
	IMediaBreakSeekedOverEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaBreakSeekedOverEventArgs, X> : Windows::Media::Playback::IMediaBreakSeekedOverEventArgs_adaptor<X> { typedef adapt IMediaBreakSeekedOverEventArgs; };
struct IMediaBreakSeekedOverEventArgs : IMediaBreakSeekedOverEventArgs_raw, generate<IMediaBreakSeekedOverEventArgs> {};

// MediaBreakSeekedOverEventArgs
template<typename X> struct statics<MediaBreakSeekedOverEventArgs, X> : X {
	typedef typename X::root_type MediaBreakSeekedOverEventArgs;
};
struct MediaBreakSeekedOverEventArgs : generate<MediaBreakSeekedOverEventArgs> {};

// MediaBreakStartedEventArgs
template<typename X> struct statics<MediaBreakStartedEventArgs, X> : X {
	typedef typename X::root_type MediaBreakStartedEventArgs;
};
struct MediaBreakStartedEventArgs : generate<MediaBreakStartedEventArgs> {};

// MediaBreakEndedEventArgs
template<typename X> struct statics<MediaBreakEndedEventArgs, X> : X {
	typedef typename X::root_type MediaBreakEndedEventArgs;
};
struct MediaBreakEndedEventArgs : generate<MediaBreakEndedEventArgs> {};

// MediaBreakSkippedEventArgs
template<typename X> struct statics<MediaBreakSkippedEventArgs, X> : X {
	typedef typename X::root_type MediaBreakSkippedEventArgs;
};
struct MediaBreakSkippedEventArgs : generate<MediaBreakSkippedEventArgs> {};

// IBackgroundMediaPlayerStatics
struct IBackgroundMediaPlayerStatics : IInspectable {
	virtual STDMETHODIMP _get_Current(MediaPlayer* *player);
	virtual STDMETHODIMP _add_MessageReceivedFromBackground(Foundation::EventHandler<MediaPlayerDataReceivedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MessageReceivedFromBackground(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MessageReceivedFromForeground(Foundation::EventHandler<MediaPlayerDataReceivedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MessageReceivedFromForeground(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _SendMessageToBackground(Foundation::Collections::ValueSet* value);
	virtual STDMETHODIMP _SendMessageToForeground(Foundation::Collections::ValueSet* value);
	virtual STDMETHODIMP _IsMediaPlaying(bool *isMediaPlaying);
	virtual STDMETHODIMP _Shutdown();
};

// BackgroundMediaPlayer
template<typename> struct BackgroundMediaPlayer_statics {
	static struct _Current : property {
		ptr<MediaPlayer> get() { MediaPlayer* player; hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_get_Current(&player)); return from_abi(player); }
		ptr<MediaPlayer> operator()() { return get(); }
		operator ptr<MediaPlayer> () { return get(); }
		ptr<MediaPlayer> operator->() { return get(); }
	} Current;
	static struct _MessageReceivedFromBackground : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<MediaPlayerDataReceivedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_add_MessageReceivedFromBackground(to_abi(value), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_remove_MessageReceivedFromBackground(token)); }
	} MessageReceivedFromBackground;
	static struct _MessageReceivedFromForeground : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<MediaPlayerDataReceivedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_add_MessageReceivedFromForeground(to_abi(value), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_remove_MessageReceivedFromForeground(token)); }
	} MessageReceivedFromForeground;
	static void SendMessageToBackground(pptr<Foundation::Collections::ValueSet> value) { hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_SendMessageToBackground(value)); }
	static void SendMessageToForeground(pptr<Foundation::Collections::ValueSet> value) { hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_SendMessageToForeground(value)); }
	static bool IsMediaPlaying() { bool isMediaPlaying; hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_IsMediaPlaying(&isMediaPlaying)); return isMediaPlaying; }
	static void Shutdown() { hrcheck(get_activation_factory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>()->_Shutdown()); }
};
template<typename X> typename BackgroundMediaPlayer_statics<X>::_Current BackgroundMediaPlayer_statics<X>::Current;
template<typename X> typename BackgroundMediaPlayer_statics<X>::_MessageReceivedFromBackground BackgroundMediaPlayer_statics<X>::MessageReceivedFromBackground;
template<typename X> typename BackgroundMediaPlayer_statics<X>::_MessageReceivedFromForeground BackgroundMediaPlayer_statics<X>::MessageReceivedFromForeground;

template<typename X> struct statics<BackgroundMediaPlayer, X> : X, Windows::Media::Playback::BackgroundMediaPlayer_statics<void> {
	typedef typename X::root_type BackgroundMediaPlayer;
};
struct BackgroundMediaPlayer : generate<BackgroundMediaPlayer> {};

// IMediaPlaybackCommandManagerPlayReceivedEventArgs
struct IMediaPlaybackCommandManagerPlayReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerPlayReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerPlayReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerPlayReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerPlayReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerPlayReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerPlayReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerPlayReceivedEventArgs; };
struct IMediaPlaybackCommandManagerPlayReceivedEventArgs : IMediaPlaybackCommandManagerPlayReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerPlayReceivedEventArgs> {};

// MediaPlaybackCommandManagerPlayReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerPlayReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerPlayReceivedEventArgs;
};
struct MediaPlaybackCommandManagerPlayReceivedEventArgs : generate<MediaPlaybackCommandManagerPlayReceivedEventArgs> {};

// IMediaPlaybackCommandManagerPauseReceivedEventArgs
struct IMediaPlaybackCommandManagerPauseReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerPauseReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerPauseReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerPauseReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerPauseReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerPauseReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerPauseReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerPauseReceivedEventArgs; };
struct IMediaPlaybackCommandManagerPauseReceivedEventArgs : IMediaPlaybackCommandManagerPauseReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerPauseReceivedEventArgs> {};

// MediaPlaybackCommandManagerPauseReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerPauseReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerPauseReceivedEventArgs;
};
struct MediaPlaybackCommandManagerPauseReceivedEventArgs : generate<MediaPlaybackCommandManagerPauseReceivedEventArgs> {};

// IMediaPlaybackCommandManagerNextReceivedEventArgs
struct IMediaPlaybackCommandManagerNextReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerNextReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerNextReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerNextReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerNextReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerNextReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerNextReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerNextReceivedEventArgs; };
struct IMediaPlaybackCommandManagerNextReceivedEventArgs : IMediaPlaybackCommandManagerNextReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerNextReceivedEventArgs> {};

// MediaPlaybackCommandManagerNextReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerNextReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerNextReceivedEventArgs;
};
struct MediaPlaybackCommandManagerNextReceivedEventArgs : generate<MediaPlaybackCommandManagerNextReceivedEventArgs> {};

// IMediaPlaybackCommandManagerPreviousReceivedEventArgs
struct IMediaPlaybackCommandManagerPreviousReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerPreviousReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerPreviousReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerPreviousReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerPreviousReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerPreviousReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerPreviousReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerPreviousReceivedEventArgs; };
struct IMediaPlaybackCommandManagerPreviousReceivedEventArgs : IMediaPlaybackCommandManagerPreviousReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerPreviousReceivedEventArgs> {};

// MediaPlaybackCommandManagerPreviousReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerPreviousReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerPreviousReceivedEventArgs;
};
struct MediaPlaybackCommandManagerPreviousReceivedEventArgs : generate<MediaPlaybackCommandManagerPreviousReceivedEventArgs> {};

// IMediaPlaybackCommandManagerFastForwardReceivedEventArgs
struct IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerFastForwardReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerFastForwardReceivedEventArgs; };
struct IMediaPlaybackCommandManagerFastForwardReceivedEventArgs : IMediaPlaybackCommandManagerFastForwardReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerFastForwardReceivedEventArgs> {};

// MediaPlaybackCommandManagerFastForwardReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerFastForwardReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerFastForwardReceivedEventArgs;
};
struct MediaPlaybackCommandManagerFastForwardReceivedEventArgs : generate<MediaPlaybackCommandManagerFastForwardReceivedEventArgs> {};

// IMediaPlaybackCommandManagerRewindReceivedEventArgs
struct IMediaPlaybackCommandManagerRewindReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerRewindReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerRewindReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerRewindReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerRewindReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerRewindReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerRewindReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerRewindReceivedEventArgs; };
struct IMediaPlaybackCommandManagerRewindReceivedEventArgs : IMediaPlaybackCommandManagerRewindReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerRewindReceivedEventArgs> {};

// MediaPlaybackCommandManagerRewindReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerRewindReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerRewindReceivedEventArgs;
};
struct MediaPlaybackCommandManagerRewindReceivedEventArgs : generate<MediaPlaybackCommandManagerRewindReceivedEventArgs> {};

// IMediaPlaybackCommandManagerShuffleReceivedEventArgs
struct IMediaPlaybackCommandManagerShuffleReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _get_IsShuffleRequested(bool *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerShuffleReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerShuffleReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerShuffleReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerShuffleReceivedEventArgs_adaptor::IsShuffleRequested)->_get_IsShuffleRequested(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsShuffleRequested;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerShuffleReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerShuffleReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerShuffleReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerShuffleReceivedEventArgs; };
struct IMediaPlaybackCommandManagerShuffleReceivedEventArgs : IMediaPlaybackCommandManagerShuffleReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerShuffleReceivedEventArgs> {};

// MediaPlaybackCommandManagerShuffleReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerShuffleReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerShuffleReceivedEventArgs;
};
struct MediaPlaybackCommandManagerShuffleReceivedEventArgs : generate<MediaPlaybackCommandManagerShuffleReceivedEventArgs> {};

// IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs
struct IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _get_AutoRepeatMode(MediaPlaybackAutoRepeatMode *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			MediaPlaybackAutoRepeatMode get() { MediaPlaybackAutoRepeatMode value; hrcheck(enc(&IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_adaptor::AutoRepeatMode)->_get_AutoRepeatMode(&value)); return value; }
			MediaPlaybackAutoRepeatMode operator()() { return get(); }
			operator MediaPlaybackAutoRepeatMode () { return get(); }
		} AutoRepeatMode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs; };
struct IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs : IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs> {};

// MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs;
};
struct MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs : generate<MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs> {};

// IMediaPlaybackCommandManagerPositionReceivedEventArgs
struct IMediaPlaybackCommandManagerPositionReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _get_Position(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerPositionReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerPositionReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerPositionReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaPlaybackCommandManagerPositionReceivedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Position;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerPositionReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerPositionReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerPositionReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerPositionReceivedEventArgs; };
struct IMediaPlaybackCommandManagerPositionReceivedEventArgs : IMediaPlaybackCommandManagerPositionReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerPositionReceivedEventArgs> {};

// MediaPlaybackCommandManagerPositionReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerPositionReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerPositionReceivedEventArgs;
};
struct MediaPlaybackCommandManagerPositionReceivedEventArgs : generate<MediaPlaybackCommandManagerPositionReceivedEventArgs> {};

// IMediaPlaybackCommandManagerRateReceivedEventArgs
struct IMediaPlaybackCommandManagerRateReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _get_PlaybackRate(double *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IMediaPlaybackCommandManagerRateReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerRateReceivedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackCommandManagerRateReceivedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlaybackCommandManagerRateReceivedEventArgs_adaptor::PlaybackRate)->_get_PlaybackRate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} PlaybackRate;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IMediaPlaybackCommandManagerRateReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerRateReceivedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerRateReceivedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerRateReceivedEventArgs; };
struct IMediaPlaybackCommandManagerRateReceivedEventArgs : IMediaPlaybackCommandManagerRateReceivedEventArgs_raw, generate<IMediaPlaybackCommandManagerRateReceivedEventArgs> {};

// MediaPlaybackCommandManagerRateReceivedEventArgs
template<typename X> struct statics<MediaPlaybackCommandManagerRateReceivedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerRateReceivedEventArgs;
};
struct MediaPlaybackCommandManagerRateReceivedEventArgs : generate<MediaPlaybackCommandManagerRateReceivedEventArgs> {};

// IMediaPlaybackCommandManagerCommandBehavior
struct IMediaPlaybackCommandManagerCommandBehavior_raw : IInspectable {
	virtual STDMETHODIMP _get_CommandManager(MediaPlaybackCommandManager* *value);
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _get_EnablingRule(MediaCommandEnablingRule *value);
	virtual STDMETHODIMP _put_EnablingRule(MediaCommandEnablingRule value);
	virtual STDMETHODIMP _add_IsEnabledChanged(Foundation::TypedEventHandler<MediaPlaybackCommandManagerCommandBehavior*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsEnabledChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMediaPlaybackCommandManagerCommandBehavior_adaptor : X {
	union {
		struct : property {
			ptr<MediaPlaybackCommandManager> get() { MediaPlaybackCommandManager* value; hrcheck(enc(&IMediaPlaybackCommandManagerCommandBehavior_adaptor::CommandManager)->_get_CommandManager(&value)); return from_abi(value); }
			ptr<MediaPlaybackCommandManager> operator()() { return get(); }
			operator ptr<MediaPlaybackCommandManager> () { return get(); }
			ptr<MediaPlaybackCommandManager> operator->() { return get(); }
		} CommandManager;
		struct : property {
			MediaCommandEnablingRule get() { MediaCommandEnablingRule value; hrcheck(enc(&IMediaPlaybackCommandManagerCommandBehavior_adaptor::EnablingRule)->_get_EnablingRule(&value)); return value; }
			MediaCommandEnablingRule operator()() { return get(); }
			operator MediaCommandEnablingRule () { return get(); }
			void put(MediaCommandEnablingRule value) { hrcheck(enc(&IMediaPlaybackCommandManagerCommandBehavior_adaptor::EnablingRule)->_put_EnablingRule(value)); }
			void operator=(MediaCommandEnablingRule value) { put(value); }
			void operator()(MediaCommandEnablingRule value) { put(value); }
		} EnablingRule;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackCommandManagerCommandBehavior_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackCommandManagerCommandBehavior>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackCommandManagerCommandBehavior_adaptor::IsEnabledChanged)->_add_IsEnabledChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackCommandManagerCommandBehavior_adaptor::IsEnabledChanged)->_remove_IsEnabledChanged(token)); }
		} IsEnabledChanged;
	};
	IMediaPlaybackCommandManagerCommandBehavior_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackCommandManagerCommandBehavior, X> : Windows::Media::Playback::IMediaPlaybackCommandManagerCommandBehavior_adaptor<X> { typedef adapt IMediaPlaybackCommandManagerCommandBehavior; };
struct IMediaPlaybackCommandManagerCommandBehavior : IMediaPlaybackCommandManagerCommandBehavior_raw, generate<IMediaPlaybackCommandManagerCommandBehavior> {};

// MediaPlaybackCommandManagerCommandBehavior
template<typename X> struct statics<MediaPlaybackCommandManagerCommandBehavior, X> : X {
	typedef typename X::root_type MediaPlaybackCommandManagerCommandBehavior;
};
struct MediaPlaybackCommandManagerCommandBehavior : generate<MediaPlaybackCommandManagerCommandBehavior> {};

// IMediaPlaybackItemStatics
struct IMediaPlaybackItemStatics : IInspectable {
	virtual STDMETHODIMP _FindFromMediaSource(Core::MediaSource* source, MediaPlaybackItem* *value);
};

// IMediaPlaybackItemFactory
struct IMediaPlaybackItemFactory : IInspectable {
	virtual STDMETHODIMP _Create(Core::MediaSource* source, MediaPlaybackItem* *value);
};

// IMediaPlaybackItemFactory2
struct IMediaPlaybackItemFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateWithStartTime(Core::MediaSource* source, Foundation::TimeSpan startTime, MediaPlaybackItem* *result);
	virtual STDMETHODIMP _CreateWithStartTimeAndDurationLimit(Core::MediaSource* source, Foundation::TimeSpan startTime, Foundation::TimeSpan durationLimit, MediaPlaybackItem* *result);
};

// IMediaPlaybackSource
struct IMediaPlaybackSource : IInspectable, generate<IMediaPlaybackSource> {};

// IMediaPlaybackItem
struct IMediaPlaybackItem_raw : IInspectable {
	virtual STDMETHODIMP _add_AudioTracksChanged(Foundation::TypedEventHandler<MediaPlaybackItem*, Foundation::Collections::IVectorChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AudioTracksChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VideoTracksChanged(Foundation::TypedEventHandler<MediaPlaybackItem*, Foundation::Collections::IVectorChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoTracksChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TimedMetadataTracksChanged(Foundation::TypedEventHandler<MediaPlaybackItem*, Foundation::Collections::IVectorChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TimedMetadataTracksChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Source(Core::MediaSource* *value);
	virtual STDMETHODIMP _get_AudioTracks(MediaPlaybackAudioTrackList* *value);
	virtual STDMETHODIMP _get_VideoTracks(MediaPlaybackVideoTrackList* *value);
	virtual STDMETHODIMP _get_TimedMetadataTracks(MediaPlaybackTimedMetadataTrackList* *value);
};
template<typename X> struct IMediaPlaybackItem_adaptor : X {
	union {
		struct : property {
			ptr<MediaPlaybackAudioTrackList> get() { MediaPlaybackAudioTrackList* value; hrcheck(enc(&IMediaPlaybackItem_adaptor::AudioTracks)->_get_AudioTracks(&value)); return from_abi(value); }
			ptr<MediaPlaybackAudioTrackList> operator()() { return get(); }
			operator ptr<MediaPlaybackAudioTrackList> () { return get(); }
			ptr<MediaPlaybackAudioTrackList> operator->() { return get(); }
		} AudioTracks;
		struct : property {
			ptr<Core::MediaSource> get() { Core::MediaSource* value; hrcheck(enc(&IMediaPlaybackItem_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<Core::MediaSource> operator()() { return get(); }
			operator ptr<Core::MediaSource> () { return get(); }
			ptr<Core::MediaSource> operator->() { return get(); }
		} Source;
		struct : property {
			ptr<MediaPlaybackTimedMetadataTrackList> get() { MediaPlaybackTimedMetadataTrackList* value; hrcheck(enc(&IMediaPlaybackItem_adaptor::TimedMetadataTracks)->_get_TimedMetadataTracks(&value)); return from_abi(value); }
			ptr<MediaPlaybackTimedMetadataTrackList> operator()() { return get(); }
			operator ptr<MediaPlaybackTimedMetadataTrackList> () { return get(); }
			ptr<MediaPlaybackTimedMetadataTrackList> operator->() { return get(); }
		} TimedMetadataTracks;
		struct : property {
			ptr<MediaPlaybackVideoTrackList> get() { MediaPlaybackVideoTrackList* value; hrcheck(enc(&IMediaPlaybackItem_adaptor::VideoTracks)->_get_VideoTracks(&value)); return from_abi(value); }
			ptr<MediaPlaybackVideoTrackList> operator()() { return get(); }
			operator ptr<MediaPlaybackVideoTrackList> () { return get(); }
			ptr<MediaPlaybackVideoTrackList> operator->() { return get(); }
		} VideoTracks;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackItem>, ptr<Foundation::Collections::IVectorChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackItem_adaptor::AudioTracksChanged)->_add_AudioTracksChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackItem_adaptor::AudioTracksChanged)->_remove_AudioTracksChanged(token)); }
		} AudioTracksChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackItem>, ptr<Foundation::Collections::IVectorChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackItem_adaptor::TimedMetadataTracksChanged)->_add_TimedMetadataTracksChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackItem_adaptor::TimedMetadataTracksChanged)->_remove_TimedMetadataTracksChanged(token)); }
		} TimedMetadataTracksChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackItem>, ptr<Foundation::Collections::IVectorChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackItem_adaptor::VideoTracksChanged)->_add_VideoTracksChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackItem_adaptor::VideoTracksChanged)->_remove_VideoTracksChanged(token)); }
		} VideoTracksChanged;
	};
	IMediaPlaybackItem_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackItem, X> : Windows::Media::Playback::IMediaPlaybackItem_adaptor<X> { typedef adapt IMediaPlaybackItem; };
struct IMediaPlaybackItem : IMediaPlaybackItem_raw, generate<IMediaPlaybackItem> {};

// IMediaPlaybackItem2
struct IMediaPlaybackItem2_raw : IInspectable {
	virtual STDMETHODIMP _get_BreakSchedule(MediaBreakSchedule* *value);
	virtual STDMETHODIMP _get_StartTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_DurationLimit(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_CanSkip(bool *value);
	virtual STDMETHODIMP _put_CanSkip(bool value);
	virtual STDMETHODIMP _GetDisplayProperties(MediaItemDisplayProperties* *value);
	virtual STDMETHODIMP _ApplyDisplayProperties(MediaItemDisplayProperties* value);
};
template<typename X> struct IMediaPlaybackItem2_adaptor : X {
	union {
		struct : property {
			ptr<MediaBreakSchedule> get() { MediaBreakSchedule* value; hrcheck(enc(&IMediaPlaybackItem2_adaptor::BreakSchedule)->_get_BreakSchedule(&value)); return from_abi(value); }
			ptr<MediaBreakSchedule> operator()() { return get(); }
			operator ptr<MediaBreakSchedule> () { return get(); }
			ptr<MediaBreakSchedule> operator->() { return get(); }
		} BreakSchedule;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackItem2_adaptor::CanSkip)->_get_CanSkip(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackItem2_adaptor::CanSkip)->_put_CanSkip(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanSkip;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IMediaPlaybackItem2_adaptor::DurationLimit)->_get_DurationLimit(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} DurationLimit;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaPlaybackItem2_adaptor::StartTime)->_get_StartTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} StartTime;
	};
	ptr<MediaItemDisplayProperties> GetDisplayProperties() { MediaItemDisplayProperties* value; hrcheck(X::get()->_GetDisplayProperties(&value)); return from_abi(value); }
	void ApplyDisplayProperties(pptr<MediaItemDisplayProperties> value) { hrcheck(X::get()->_ApplyDisplayProperties(value)); }
	IMediaPlaybackItem2_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackItem2, X> : Windows::Media::Playback::IMediaPlaybackItem2_adaptor<X> { typedef adapt IMediaPlaybackItem2; };
struct IMediaPlaybackItem2 : IMediaPlaybackItem2_raw, generate<IMediaPlaybackItem2> {};

// IMediaPlaybackItem3
struct IMediaPlaybackItem3_raw : IInspectable {
	virtual STDMETHODIMP _get_IsDisabledInPlaybackList(bool *value);
	virtual STDMETHODIMP _put_IsDisabledInPlaybackList(bool value);
	virtual STDMETHODIMP _get_TotalDownloadProgress(double *value);
	virtual STDMETHODIMP _get_AutoLoadedDisplayProperties(AutoLoadedDisplayPropertyKind *value);
	virtual STDMETHODIMP _put_AutoLoadedDisplayProperties(AutoLoadedDisplayPropertyKind value);
};
template<typename X> struct IMediaPlaybackItem3_adaptor : X {
	union {
		struct : property {
			AutoLoadedDisplayPropertyKind get() { AutoLoadedDisplayPropertyKind value; hrcheck(enc(&IMediaPlaybackItem3_adaptor::AutoLoadedDisplayProperties)->_get_AutoLoadedDisplayProperties(&value)); return value; }
			AutoLoadedDisplayPropertyKind operator()() { return get(); }
			operator AutoLoadedDisplayPropertyKind () { return get(); }
			void put(AutoLoadedDisplayPropertyKind value) { hrcheck(enc(&IMediaPlaybackItem3_adaptor::AutoLoadedDisplayProperties)->_put_AutoLoadedDisplayProperties(value)); }
			void operator=(AutoLoadedDisplayPropertyKind value) { put(value); }
			void operator()(AutoLoadedDisplayPropertyKind value) { put(value); }
		} AutoLoadedDisplayProperties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackItem3_adaptor::IsDisabledInPlaybackList)->_get_IsDisabledInPlaybackList(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackItem3_adaptor::IsDisabledInPlaybackList)->_put_IsDisabledInPlaybackList(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDisabledInPlaybackList;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaPlaybackItem3_adaptor::TotalDownloadProgress)->_get_TotalDownloadProgress(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} TotalDownloadProgress;
	};
	IMediaPlaybackItem3_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackItem3, X> : Windows::Media::Playback::IMediaPlaybackItem3_adaptor<X> { typedef adapt IMediaPlaybackItem3; };
struct IMediaPlaybackItem3 : IMediaPlaybackItem3_raw, generate<IMediaPlaybackItem3> {};

// MediaPlaybackItem
template<typename> struct MediaPlaybackItem_statics {
	static ptr<MediaPlaybackItem> FindFromMediaSource(pptr<Core::MediaSource> source) { MediaPlaybackItem* value; hrcheck(get_activation_factory<MediaPlaybackItem, IMediaPlaybackItemStatics>()->_FindFromMediaSource(source, &value)); return from_abi(value); }
	static MediaPlaybackItem *activate(pptr<Core::MediaSource> source) { MediaPlaybackItem *value; hrcheck(get_activation_factory<MediaPlaybackItem, IMediaPlaybackItemFactory>()->_Create(source, &value)); return value; }
	static MediaPlaybackItem *activate(pptr<Core::MediaSource> source, const Foundation::TimeSpan& startTime) { MediaPlaybackItem *result; hrcheck(get_activation_factory<MediaPlaybackItem, IMediaPlaybackItemFactory2>()->_CreateWithStartTime(source, startTime, &result)); return result; }
	static MediaPlaybackItem *activate(pptr<Core::MediaSource> source, const Foundation::TimeSpan& startTime, const Foundation::TimeSpan& durationLimit) { MediaPlaybackItem *result; hrcheck(get_activation_factory<MediaPlaybackItem, IMediaPlaybackItemFactory2>()->_CreateWithStartTimeAndDurationLimit(source, startTime, durationLimit, &result)); return result; }
};

template<typename X> struct statics<MediaPlaybackItem, X> : X, Windows::Media::Playback::MediaPlaybackItem_statics<void> {
	using Windows::Media::Playback::MediaPlaybackItem_statics<void>::activate;
	typedef typename X::root_type MediaPlaybackItem;
};
struct MediaPlaybackItem : generate<MediaPlaybackItem> {};

// MediaPlaybackAudioTrackList
template<typename X> struct statics<MediaPlaybackAudioTrackList, X> : X {
	typedef typename X::root_type MediaPlaybackAudioTrackList;
};
struct MediaPlaybackAudioTrackList : generate<MediaPlaybackAudioTrackList> {};

// MediaPlaybackVideoTrackList
template<typename X> struct statics<MediaPlaybackVideoTrackList, X> : X {
	typedef typename X::root_type MediaPlaybackVideoTrackList;
};
struct MediaPlaybackVideoTrackList : generate<MediaPlaybackVideoTrackList> {};

// IMediaPlaybackTimedMetadataTrackList
struct IMediaPlaybackTimedMetadataTrackList_raw : IInspectable {
	virtual STDMETHODIMP _add_PresentationModeChanged(Foundation::TypedEventHandler<MediaPlaybackTimedMetadataTrackList*, TimedMetadataPresentationModeChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PresentationModeChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetPresentationMode(unsigned index, TimedMetadataTrackPresentationMode *value);
	virtual STDMETHODIMP _SetPresentationMode(unsigned index, TimedMetadataTrackPresentationMode value);
};
template<typename X> struct IMediaPlaybackTimedMetadataTrackList_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackTimedMetadataTrackList>, ptr<TimedMetadataPresentationModeChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackTimedMetadataTrackList_adaptor::PresentationModeChanged)->_add_PresentationModeChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackTimedMetadataTrackList_adaptor::PresentationModeChanged)->_remove_PresentationModeChanged(token)); }
		} PresentationModeChanged;
	};
	TimedMetadataTrackPresentationMode GetPresentationMode(unsigned index) { TimedMetadataTrackPresentationMode value; hrcheck(X::get()->_GetPresentationMode(index, &value)); return value; }
	void SetPresentationMode(unsigned index, TimedMetadataTrackPresentationMode value) { hrcheck(X::get()->_SetPresentationMode(index, value)); }
	IMediaPlaybackTimedMetadataTrackList_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackTimedMetadataTrackList, X> : Windows::Media::Playback::IMediaPlaybackTimedMetadataTrackList_adaptor<X> { typedef adapt IMediaPlaybackTimedMetadataTrackList; };
struct IMediaPlaybackTimedMetadataTrackList : IMediaPlaybackTimedMetadataTrackList_raw, generate<IMediaPlaybackTimedMetadataTrackList> {};

// MediaPlaybackTimedMetadataTrackList
template<typename X> struct statics<MediaPlaybackTimedMetadataTrackList, X> : X {
	typedef typename X::root_type MediaPlaybackTimedMetadataTrackList;
};
struct MediaPlaybackTimedMetadataTrackList : generate<MediaPlaybackTimedMetadataTrackList> {};

// IMediaItemDisplayProperties
struct IMediaItemDisplayProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(MediaPlaybackType *value);
	virtual STDMETHODIMP _put_Type(MediaPlaybackType value);
	virtual STDMETHODIMP _get_MusicProperties(MusicDisplayProperties* *value);
	virtual STDMETHODIMP _get_VideoProperties(VideoDisplayProperties* *value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::RandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Thumbnail(Storage::Streams::RandomAccessStreamReference* value);
	virtual STDMETHODIMP _ClearAll();
};
template<typename X> struct IMediaItemDisplayProperties_adaptor : X {
	union {
		struct : property {
			ptr<MusicDisplayProperties> get() { MusicDisplayProperties* value; hrcheck(enc(&IMediaItemDisplayProperties_adaptor::MusicProperties)->_get_MusicProperties(&value)); return from_abi(value); }
			ptr<MusicDisplayProperties> operator()() { return get(); }
			operator ptr<MusicDisplayProperties> () { return get(); }
			ptr<MusicDisplayProperties> operator->() { return get(); }
		} MusicProperties;
		struct : property {
			ptr<Storage::Streams::RandomAccessStreamReference> get() { Storage::Streams::RandomAccessStreamReference* value; hrcheck(enc(&IMediaItemDisplayProperties_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::RandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::RandomAccessStreamReference> value) { hrcheck(enc(&IMediaItemDisplayProperties_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<Storage::Streams::RandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::RandomAccessStreamReference> value) { put(value); }
		} Thumbnail;
		struct : property {
			MediaPlaybackType get() { MediaPlaybackType value; hrcheck(enc(&IMediaItemDisplayProperties_adaptor::Type)->_get_Type(&value)); return value; }
			MediaPlaybackType operator()() { return get(); }
			operator MediaPlaybackType () { return get(); }
			void put(MediaPlaybackType value) { hrcheck(enc(&IMediaItemDisplayProperties_adaptor::Type)->_put_Type(value)); }
			void operator=(MediaPlaybackType value) { put(value); }
			void operator()(MediaPlaybackType value) { put(value); }
		} Type;
		struct : property {
			ptr<VideoDisplayProperties> get() { VideoDisplayProperties* value; hrcheck(enc(&IMediaItemDisplayProperties_adaptor::VideoProperties)->_get_VideoProperties(&value)); return from_abi(value); }
			ptr<VideoDisplayProperties> operator()() { return get(); }
			operator ptr<VideoDisplayProperties> () { return get(); }
			ptr<VideoDisplayProperties> operator->() { return get(); }
		} VideoProperties;
	};
	void ClearAll() { hrcheck(X::get()->_ClearAll()); }
	IMediaItemDisplayProperties_adaptor() {}
};
template<typename X> struct adapt<IMediaItemDisplayProperties, X> : Windows::Media::Playback::IMediaItemDisplayProperties_adaptor<X> { typedef adapt IMediaItemDisplayProperties; };
struct IMediaItemDisplayProperties : IMediaItemDisplayProperties_raw, generate<IMediaItemDisplayProperties> {};

// IMediaBreakSchedule
struct IMediaBreakSchedule_raw : IInspectable {
	virtual STDMETHODIMP _add_ScheduleChanged(Foundation::TypedEventHandler<MediaBreakSchedule*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ScheduleChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _InsertMidrollBreak(MediaBreak* mediaBreak);
	virtual STDMETHODIMP _RemoveMidrollBreak(MediaBreak* mediaBreak);
	virtual STDMETHODIMP _get_MidrollBreaks(Foundation::Collections::IVectorView<MediaBreak*>* *value);
	virtual STDMETHODIMP _put_PrerollBreak(MediaBreak* value);
	virtual STDMETHODIMP _get_PrerollBreak(MediaBreak* *value);
	virtual STDMETHODIMP _put_PostrollBreak(MediaBreak* value);
	virtual STDMETHODIMP _get_PostrollBreak(MediaBreak* *value);
	virtual STDMETHODIMP _get_PlaybackItem(MediaPlaybackItem* *value);
};
template<typename X> struct IMediaBreakSchedule_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> get() { Foundation::Collections::IVectorView<MediaBreak*>* value; hrcheck(enc(&IMediaBreakSchedule_adaptor::MidrollBreaks)->_get_MidrollBreaks(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaBreak>>> operator->() { return get(); }
		} MidrollBreaks;
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&IMediaBreakSchedule_adaptor::PlaybackItem)->_get_PlaybackItem(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
		} PlaybackItem;
		struct : property {
			ptr<MediaBreak> get() { MediaBreak* value; hrcheck(enc(&IMediaBreakSchedule_adaptor::PostrollBreak)->_get_PostrollBreak(&value)); return from_abi(value); }
			ptr<MediaBreak> operator()() { return get(); }
			operator ptr<MediaBreak> () { return get(); }
			ptr<MediaBreak> operator->() { return get(); }
			void put(pptr<MediaBreak> value) { hrcheck(enc(&IMediaBreakSchedule_adaptor::PostrollBreak)->_put_PostrollBreak(value)); }
			void operator=(pptr<MediaBreak> value) { put(value); }
			void operator()(pptr<MediaBreak> value) { put(value); }
		} PostrollBreak;
		struct : property {
			ptr<MediaBreak> get() { MediaBreak* value; hrcheck(enc(&IMediaBreakSchedule_adaptor::PrerollBreak)->_get_PrerollBreak(&value)); return from_abi(value); }
			ptr<MediaBreak> operator()() { return get(); }
			operator ptr<MediaBreak> () { return get(); }
			ptr<MediaBreak> operator->() { return get(); }
			void put(pptr<MediaBreak> value) { hrcheck(enc(&IMediaBreakSchedule_adaptor::PrerollBreak)->_put_PrerollBreak(value)); }
			void operator=(pptr<MediaBreak> value) { put(value); }
			void operator()(pptr<MediaBreak> value) { put(value); }
		} PrerollBreak;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaBreakSchedule>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaBreakSchedule_adaptor::ScheduleChanged)->_add_ScheduleChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaBreakSchedule_adaptor::ScheduleChanged)->_remove_ScheduleChanged(token)); }
		} ScheduleChanged;
	};
	void InsertMidrollBreak(pptr<MediaBreak> mediaBreak) { hrcheck(X::get()->_InsertMidrollBreak(mediaBreak)); }
	void RemoveMidrollBreak(pptr<MediaBreak> mediaBreak) { hrcheck(X::get()->_RemoveMidrollBreak(mediaBreak)); }
	IMediaBreakSchedule_adaptor() {}
};
template<typename X> struct adapt<IMediaBreakSchedule, X> : Windows::Media::Playback::IMediaBreakSchedule_adaptor<X> { typedef adapt IMediaBreakSchedule; };
struct IMediaBreakSchedule : IMediaBreakSchedule_raw, generate<IMediaBreakSchedule> {};

// MediaBreakSchedule
template<typename X> struct statics<MediaBreakSchedule, X> : X {
	typedef typename X::root_type MediaBreakSchedule;
};
struct MediaBreakSchedule : generate<MediaBreakSchedule> {};

// MediaItemDisplayProperties
template<typename X> struct statics<MediaItemDisplayProperties, X> : X {
	typedef typename X::root_type MediaItemDisplayProperties;
};
struct MediaItemDisplayProperties : generate<MediaItemDisplayProperties> {};

// IMediaBreakFactory
struct IMediaBreakFactory : IInspectable {
	virtual STDMETHODIMP _Create(MediaBreakInsertionMethod insertionMethod, MediaBreak* *result);
	virtual STDMETHODIMP _CreateWithPresentationPosition(MediaBreakInsertionMethod insertionMethod, Foundation::TimeSpan presentationPosition, MediaBreak* *result);
};

// IMediaBreak
struct IMediaBreak_raw : IInspectable {
	virtual STDMETHODIMP _get_PlaybackList(MediaPlaybackList* *value);
	virtual STDMETHODIMP _get_PresentationPosition(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_InsertionMethod(MediaBreakInsertionMethod *value);
	virtual STDMETHODIMP _get_CustomProperties(Foundation::Collections::ValueSet* *value);
	virtual STDMETHODIMP _get_CanStart(bool *value);
	virtual STDMETHODIMP _put_CanStart(bool value);
};
template<typename X> struct IMediaBreak_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaBreak_adaptor::CanStart)->_get_CanStart(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaBreak_adaptor::CanStart)->_put_CanStart(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanStart;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IMediaBreak_adaptor::CustomProperties)->_get_CustomProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} CustomProperties;
		struct : property {
			MediaBreakInsertionMethod get() { MediaBreakInsertionMethod value; hrcheck(enc(&IMediaBreak_adaptor::InsertionMethod)->_get_InsertionMethod(&value)); return value; }
			MediaBreakInsertionMethod operator()() { return get(); }
			operator MediaBreakInsertionMethod () { return get(); }
		} InsertionMethod;
		struct : property {
			ptr<MediaPlaybackList> get() { MediaPlaybackList* value; hrcheck(enc(&IMediaBreak_adaptor::PlaybackList)->_get_PlaybackList(&value)); return from_abi(value); }
			ptr<MediaPlaybackList> operator()() { return get(); }
			operator ptr<MediaPlaybackList> () { return get(); }
			ptr<MediaPlaybackList> operator->() { return get(); }
		} PlaybackList;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IMediaBreak_adaptor::PresentationPosition)->_get_PresentationPosition(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PresentationPosition;
	};
	IMediaBreak_adaptor() {}
};
template<typename X> struct adapt<IMediaBreak, X> : Windows::Media::Playback::IMediaBreak_adaptor<X> { typedef adapt IMediaBreak; };
struct IMediaBreak : IMediaBreak_raw, generate<IMediaBreak> {};

// MediaBreak
template<typename> struct MediaBreak_statics {
	static MediaBreak *activate(MediaBreakInsertionMethod insertionMethod) { MediaBreak *result; hrcheck(get_activation_factory<MediaBreak, IMediaBreakFactory>()->_Create(insertionMethod, &result)); return result; }
	static MediaBreak *activate(MediaBreakInsertionMethod insertionMethod, const Foundation::TimeSpan& presentationPosition) { MediaBreak *result; hrcheck(get_activation_factory<MediaBreak, IMediaBreakFactory>()->_CreateWithPresentationPosition(insertionMethod, presentationPosition, &result)); return result; }
};

template<typename X> struct statics<MediaBreak, X> : X, Windows::Media::Playback::MediaBreak_statics<void> {
	using Windows::Media::Playback::MediaBreak_statics<void>::activate;
	typedef typename X::root_type MediaBreak;
};
struct MediaBreak : generate<MediaBreak> {};

// IMediaPlaybackList
struct IMediaPlaybackList_raw : IInspectable {
	virtual STDMETHODIMP _add_ItemFailed(Foundation::TypedEventHandler<MediaPlaybackList*, MediaPlaybackItemFailedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ItemFailed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CurrentItemChanged(Foundation::TypedEventHandler<MediaPlaybackList*, CurrentMediaPlaybackItemChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CurrentItemChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ItemOpened(Foundation::TypedEventHandler<MediaPlaybackList*, MediaPlaybackItemOpenedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ItemOpened(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Items(Foundation::Collections::IObservableVector<MediaPlaybackItem*>* *value);
	virtual STDMETHODIMP _get_AutoRepeatEnabled(bool *value);
	virtual STDMETHODIMP _put_AutoRepeatEnabled(bool value);
	virtual STDMETHODIMP _get_ShuffleEnabled(bool *value);
	virtual STDMETHODIMP _put_ShuffleEnabled(bool value);
	virtual STDMETHODIMP _get_CurrentItem(MediaPlaybackItem* *value);
	virtual STDMETHODIMP _get_CurrentItemIndex(unsigned *value);
	virtual STDMETHODIMP _MoveNext(MediaPlaybackItem* *item);
	virtual STDMETHODIMP _MovePrevious(MediaPlaybackItem* *item);
	virtual STDMETHODIMP _MoveTo(unsigned itemIndex, MediaPlaybackItem* *item);
};
template<typename X> struct IMediaPlaybackList_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackList_adaptor::AutoRepeatEnabled)->_get_AutoRepeatEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackList_adaptor::AutoRepeatEnabled)->_put_AutoRepeatEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoRepeatEnabled;
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&IMediaPlaybackList_adaptor::CurrentItem)->_get_CurrentItem(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
		} CurrentItem;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMediaPlaybackList_adaptor::CurrentItemIndex)->_get_CurrentItemIndex(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CurrentItemIndex;
		struct : property {
			ptr<Foundation::Collections::IObservableVector<ptr<MediaPlaybackItem>>> get() { Foundation::Collections::IObservableVector<MediaPlaybackItem*>* value; hrcheck(enc(&IMediaPlaybackList_adaptor::Items)->_get_Items(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IObservableVector<ptr<MediaPlaybackItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IObservableVector<ptr<MediaPlaybackItem>>> () { return get(); }
			ptr<Foundation::Collections::IObservableVector<ptr<MediaPlaybackItem>>> operator->() { return get(); }
		} Items;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaPlaybackList_adaptor::ShuffleEnabled)->_get_ShuffleEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMediaPlaybackList_adaptor::ShuffleEnabled)->_put_ShuffleEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShuffleEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackList>, ptr<CurrentMediaPlaybackItemChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackList_adaptor::CurrentItemChanged)->_add_CurrentItemChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackList_adaptor::CurrentItemChanged)->_remove_CurrentItemChanged(token)); }
		} CurrentItemChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackList>, ptr<MediaPlaybackItemFailedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackList_adaptor::ItemFailed)->_add_ItemFailed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackList_adaptor::ItemFailed)->_remove_ItemFailed(token)); }
		} ItemFailed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaPlaybackList>, ptr<MediaPlaybackItemOpenedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaPlaybackList_adaptor::ItemOpened)->_add_ItemOpened(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaPlaybackList_adaptor::ItemOpened)->_remove_ItemOpened(token)); }
		} ItemOpened;
	};
	ptr<MediaPlaybackItem> MoveNext() { MediaPlaybackItem* item; hrcheck(X::get()->_MoveNext(&item)); return from_abi(item); }
	ptr<MediaPlaybackItem> MovePrevious() { MediaPlaybackItem* item; hrcheck(X::get()->_MovePrevious(&item)); return from_abi(item); }
	ptr<MediaPlaybackItem> MoveTo(unsigned itemIndex) { MediaPlaybackItem* item; hrcheck(X::get()->_MoveTo(itemIndex, &item)); return from_abi(item); }
	IMediaPlaybackList_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackList, X> : Windows::Media::Playback::IMediaPlaybackList_adaptor<X> { typedef adapt IMediaPlaybackList; };
struct IMediaPlaybackList : IMediaPlaybackList_raw, generate<IMediaPlaybackList> {};

// IMediaPlaybackList2
struct IMediaPlaybackList2_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxPrefetchTime(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_MaxPrefetchTime(Foundation::IReference<Foundation::TimeSpan>* value);
	virtual STDMETHODIMP _get_StartingItem(MediaPlaybackItem* *value);
	virtual STDMETHODIMP _put_StartingItem(MediaPlaybackItem* value);
	virtual STDMETHODIMP _get_ShuffledItems(Foundation::Collections::IVectorView<MediaPlaybackItem*>* *value);
	virtual STDMETHODIMP _SetShuffledItems(Foundation::Collections::IIterable<MediaPlaybackItem*>* value);
};
template<typename X> struct IMediaPlaybackList2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IMediaPlaybackList2_adaptor::MaxPrefetchTime)->_get_MaxPrefetchTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IMediaPlaybackList2_adaptor::MaxPrefetchTime)->_put_MaxPrefetchTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} MaxPrefetchTime;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaPlaybackItem>>> get() { Foundation::Collections::IVectorView<MediaPlaybackItem*>* value; hrcheck(enc(&IMediaPlaybackList2_adaptor::ShuffledItems)->_get_ShuffledItems(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaPlaybackItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaPlaybackItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaPlaybackItem>>> operator->() { return get(); }
		} ShuffledItems;
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&IMediaPlaybackList2_adaptor::StartingItem)->_get_StartingItem(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
			void put(pptr<MediaPlaybackItem> value) { hrcheck(enc(&IMediaPlaybackList2_adaptor::StartingItem)->_put_StartingItem(value)); }
			void operator=(pptr<MediaPlaybackItem> value) { put(value); }
			void operator()(pptr<MediaPlaybackItem> value) { put(value); }
		} StartingItem;
	};
	void SetShuffledItems(pptr<Foundation::Collections::IIterable<ptr<MediaPlaybackItem>>> value) { hrcheck(X::get()->_SetShuffledItems(to_abi(value))); }
	IMediaPlaybackList2_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackList2, X> : Windows::Media::Playback::IMediaPlaybackList2_adaptor<X> { typedef adapt IMediaPlaybackList2; };
struct IMediaPlaybackList2 : IMediaPlaybackList2_raw, generate<IMediaPlaybackList2> {};

// IMediaPlaybackList3
struct IMediaPlaybackList3_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxPlayedItemsToKeepOpen(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_MaxPlayedItemsToKeepOpen(Foundation::IReference<unsigned>* value);
};
template<typename X> struct IMediaPlaybackList3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IMediaPlaybackList3_adaptor::MaxPlayedItemsToKeepOpen)->_get_MaxPlayedItemsToKeepOpen(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IMediaPlaybackList3_adaptor::MaxPlayedItemsToKeepOpen)->_put_MaxPlayedItemsToKeepOpen(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} MaxPlayedItemsToKeepOpen;
	};
	IMediaPlaybackList3_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackList3, X> : Windows::Media::Playback::IMediaPlaybackList3_adaptor<X> { typedef adapt IMediaPlaybackList3; };
struct IMediaPlaybackList3 : IMediaPlaybackList3_raw, generate<IMediaPlaybackList3> {};

// MediaPlaybackList
template<typename X> struct statics<MediaPlaybackList, X> : X {
	typedef typename X::root_type MediaPlaybackList;
};
struct MediaPlaybackList : generate<MediaPlaybackList> {};

// IMediaPlaybackItemError
struct IMediaPlaybackItemError_raw : IInspectable {
	virtual STDMETHODIMP _get_ErrorCode(MediaPlaybackItemErrorCode *value);
	virtual STDMETHODIMP _get_ExtendedError(Foundation::HResult *value);
};
template<typename X> struct IMediaPlaybackItemError_adaptor : X {
	union {
		struct : property {
			MediaPlaybackItemErrorCode get() { MediaPlaybackItemErrorCode value; hrcheck(enc(&IMediaPlaybackItemError_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			MediaPlaybackItemErrorCode operator()() { return get(); }
			operator MediaPlaybackItemErrorCode () { return get(); }
		} ErrorCode;
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IMediaPlaybackItemError_adaptor::ExtendedError)->_get_ExtendedError(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ExtendedError;
	};
	IMediaPlaybackItemError_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackItemError, X> : Windows::Media::Playback::IMediaPlaybackItemError_adaptor<X> { typedef adapt IMediaPlaybackItemError; };
struct IMediaPlaybackItemError : IMediaPlaybackItemError_raw, generate<IMediaPlaybackItemError> {};

// IMediaEnginePlaybackSource
struct IMediaEnginePlaybackSource_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentItem(MediaPlaybackItem* *value) = 0;
	virtual STDMETHODIMP _SetPlaybackSource(IMediaPlaybackSource* source) = 0;
};
template<typename X> struct IMediaEnginePlaybackSource_adaptor : X {
	union {
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&IMediaEnginePlaybackSource_adaptor::CurrentItem)->_get_CurrentItem(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
		} CurrentItem;
	};
	void SetPlaybackSource(pptr<IMediaPlaybackSource> source) { hrcheck(X::get()->_SetPlaybackSource(source)); }
	IMediaEnginePlaybackSource_adaptor() {}
};
template<typename X> struct adapt<IMediaEnginePlaybackSource, X> : Windows::Media::Playback::IMediaEnginePlaybackSource_adaptor<X> { typedef adapt IMediaEnginePlaybackSource; };
template<typename X> struct IMediaEnginePlaybackSource_unadaptor : X {
	STDMETHODIMP _get_CurrentItem(MediaPlaybackItem* *value) { return hrtry([&, this] { get_prop(value, CurrentItem); }); }
	STDMETHODIMP _SetPlaybackSource(IMediaPlaybackSource* source) { return hrtry([&, this] { X::get()->SetPlaybackSource(source); }); }
};
template<typename X> struct unadapt<IMediaEnginePlaybackSource, X> : Windows::Media::Playback::IMediaEnginePlaybackSource_unadaptor<X> {};
struct IMediaEnginePlaybackSource : IMediaEnginePlaybackSource_raw, generate<IMediaEnginePlaybackSource> {};

// IMediaPlaybackItemOpenedEventArgs
struct IMediaPlaybackItemOpenedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Item(MediaPlaybackItem* *value);
};
template<typename X> struct IMediaPlaybackItemOpenedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&IMediaPlaybackItemOpenedEventArgs_adaptor::Item)->_get_Item(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
		} Item;
	};
	IMediaPlaybackItemOpenedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackItemOpenedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackItemOpenedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackItemOpenedEventArgs; };
struct IMediaPlaybackItemOpenedEventArgs : IMediaPlaybackItemOpenedEventArgs_raw, generate<IMediaPlaybackItemOpenedEventArgs> {};

// IMediaPlaybackItemFailedEventArgs
struct IMediaPlaybackItemFailedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Item(MediaPlaybackItem* *value);
	virtual STDMETHODIMP _get_Error(MediaPlaybackItemError* *value);
};
template<typename X> struct IMediaPlaybackItemFailedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MediaPlaybackItemError> get() { MediaPlaybackItemError* value; hrcheck(enc(&IMediaPlaybackItemFailedEventArgs_adaptor::Error)->_get_Error(&value)); return from_abi(value); }
			ptr<MediaPlaybackItemError> operator()() { return get(); }
			operator ptr<MediaPlaybackItemError> () { return get(); }
			ptr<MediaPlaybackItemError> operator->() { return get(); }
		} Error;
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&IMediaPlaybackItemFailedEventArgs_adaptor::Item)->_get_Item(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
		} Item;
	};
	IMediaPlaybackItemFailedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMediaPlaybackItemFailedEventArgs, X> : Windows::Media::Playback::IMediaPlaybackItemFailedEventArgs_adaptor<X> { typedef adapt IMediaPlaybackItemFailedEventArgs; };
struct IMediaPlaybackItemFailedEventArgs : IMediaPlaybackItemFailedEventArgs_raw, generate<IMediaPlaybackItemFailedEventArgs> {};

// MediaPlaybackItemError
template<typename X> struct statics<MediaPlaybackItemError, X> : X {
	typedef typename X::root_type MediaPlaybackItemError;
};
struct MediaPlaybackItemError : generate<MediaPlaybackItemError> {};

// ICurrentMediaPlaybackItemChangedEventArgs
struct ICurrentMediaPlaybackItemChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_NewItem(MediaPlaybackItem* *value);
	virtual STDMETHODIMP _get_OldItem(MediaPlaybackItem* *value);
};
template<typename X> struct ICurrentMediaPlaybackItemChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&ICurrentMediaPlaybackItemChangedEventArgs_adaptor::NewItem)->_get_NewItem(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
		} NewItem;
		struct : property {
			ptr<MediaPlaybackItem> get() { MediaPlaybackItem* value; hrcheck(enc(&ICurrentMediaPlaybackItemChangedEventArgs_adaptor::OldItem)->_get_OldItem(&value)); return from_abi(value); }
			ptr<MediaPlaybackItem> operator()() { return get(); }
			operator ptr<MediaPlaybackItem> () { return get(); }
			ptr<MediaPlaybackItem> operator->() { return get(); }
		} OldItem;
	};
	ICurrentMediaPlaybackItemChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICurrentMediaPlaybackItemChangedEventArgs, X> : Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs_adaptor<X> { typedef adapt ICurrentMediaPlaybackItemChangedEventArgs; };
struct ICurrentMediaPlaybackItemChangedEventArgs : ICurrentMediaPlaybackItemChangedEventArgs_raw, generate<ICurrentMediaPlaybackItemChangedEventArgs> {};

// ICurrentMediaPlaybackItemChangedEventArgs2
struct ICurrentMediaPlaybackItemChangedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(MediaPlaybackItemChangedReason *value);
};
template<typename X> struct ICurrentMediaPlaybackItemChangedEventArgs2_adaptor : X {
	union {
		struct : property {
			MediaPlaybackItemChangedReason get() { MediaPlaybackItemChangedReason value; hrcheck(enc(&ICurrentMediaPlaybackItemChangedEventArgs2_adaptor::Reason)->_get_Reason(&value)); return value; }
			MediaPlaybackItemChangedReason operator()() { return get(); }
			operator MediaPlaybackItemChangedReason () { return get(); }
		} Reason;
	};
	ICurrentMediaPlaybackItemChangedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<ICurrentMediaPlaybackItemChangedEventArgs2, X> : Windows::Media::Playback::ICurrentMediaPlaybackItemChangedEventArgs2_adaptor<X> { typedef adapt ICurrentMediaPlaybackItemChangedEventArgs2; };
struct ICurrentMediaPlaybackItemChangedEventArgs2 : ICurrentMediaPlaybackItemChangedEventArgs2_raw, generate<ICurrentMediaPlaybackItemChangedEventArgs2> {};

// MediaPlaybackItemFailedEventArgs
template<typename X> struct statics<MediaPlaybackItemFailedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackItemFailedEventArgs;
};
struct MediaPlaybackItemFailedEventArgs : generate<MediaPlaybackItemFailedEventArgs> {};

// CurrentMediaPlaybackItemChangedEventArgs
template<typename X> struct statics<CurrentMediaPlaybackItemChangedEventArgs, X> : X {
	typedef typename X::root_type CurrentMediaPlaybackItemChangedEventArgs;
};
struct CurrentMediaPlaybackItemChangedEventArgs : generate<CurrentMediaPlaybackItemChangedEventArgs> {};

// MediaPlaybackItemOpenedEventArgs
template<typename X> struct statics<MediaPlaybackItemOpenedEventArgs, X> : X {
	typedef typename X::root_type MediaPlaybackItemOpenedEventArgs;
};
struct MediaPlaybackItemOpenedEventArgs : generate<MediaPlaybackItemOpenedEventArgs> {};

// ITimedMetadataPresentationModeChangedEventArgs
struct ITimedMetadataPresentationModeChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Track(Core::TimedMetadataTrack* *value);
	virtual STDMETHODIMP _get_OldPresentationMode(TimedMetadataTrackPresentationMode *value);
	virtual STDMETHODIMP _get_NewPresentationMode(TimedMetadataTrackPresentationMode *value);
};
template<typename X> struct ITimedMetadataPresentationModeChangedEventArgs_adaptor : X {
	union {
		struct : property {
			TimedMetadataTrackPresentationMode get() { TimedMetadataTrackPresentationMode value; hrcheck(enc(&ITimedMetadataPresentationModeChangedEventArgs_adaptor::NewPresentationMode)->_get_NewPresentationMode(&value)); return value; }
			TimedMetadataTrackPresentationMode operator()() { return get(); }
			operator TimedMetadataTrackPresentationMode () { return get(); }
		} NewPresentationMode;
		struct : property {
			TimedMetadataTrackPresentationMode get() { TimedMetadataTrackPresentationMode value; hrcheck(enc(&ITimedMetadataPresentationModeChangedEventArgs_adaptor::OldPresentationMode)->_get_OldPresentationMode(&value)); return value; }
			TimedMetadataTrackPresentationMode operator()() { return get(); }
			operator TimedMetadataTrackPresentationMode () { return get(); }
		} OldPresentationMode;
		struct : property {
			ptr<Core::TimedMetadataTrack> get() { Core::TimedMetadataTrack* value; hrcheck(enc(&ITimedMetadataPresentationModeChangedEventArgs_adaptor::Track)->_get_Track(&value)); return from_abi(value); }
			ptr<Core::TimedMetadataTrack> operator()() { return get(); }
			operator ptr<Core::TimedMetadataTrack> () { return get(); }
			ptr<Core::TimedMetadataTrack> operator->() { return get(); }
		} Track;
	};
	ITimedMetadataPresentationModeChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITimedMetadataPresentationModeChangedEventArgs, X> : Windows::Media::Playback::ITimedMetadataPresentationModeChangedEventArgs_adaptor<X> { typedef adapt ITimedMetadataPresentationModeChangedEventArgs; };
struct ITimedMetadataPresentationModeChangedEventArgs : ITimedMetadataPresentationModeChangedEventArgs_raw, generate<ITimedMetadataPresentationModeChangedEventArgs> {};

// TimedMetadataPresentationModeChangedEventArgs
template<typename X> struct statics<TimedMetadataPresentationModeChangedEventArgs, X> : X {
	typedef typename X::root_type TimedMetadataPresentationModeChangedEventArgs;
};
struct TimedMetadataPresentationModeChangedEventArgs : generate<TimedMetadataPresentationModeChangedEventArgs> {};
}}}
} // namespace iso_winrt
