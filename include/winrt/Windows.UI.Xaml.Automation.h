#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Automation

#include "Windows.UI.Xaml.Automation.0.h"
#include "Windows.UI.Xaml.Automation.Peers.0.h"
#include "Windows.UI.Xaml.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
}}}

// defs

template<> struct def<Windows::UI::Xaml::Automation::AnnotationType> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationTextEditChangeType> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::DockPosition> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::ExpandCollapseState> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::RowOrColumnMajor> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::ScrollAmount> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::SupportedTextSelection> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::SynchronizedInputType> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::ToggleState> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::WindowInteractionState> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::WindowVisualState> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::ZoomUnit> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationProperty> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationProperty> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IAutomationProperty> {};
template<> struct def<Windows::UI::Xaml::Automation::AnnotationPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics5> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics6> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics7> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationElementIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IAutomationElementIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationProperties> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics5> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics6> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics7> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationProperties> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IAutomationProperties> {};
template<> struct def<Windows::UI::Xaml::Automation::IDockPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IDockPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::DockPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IDockPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IDragPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IDragPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::DragPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IDragPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::DropTargetPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ExpandCollapsePatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IGridItemPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IGridItemPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::GridItemPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IGridItemPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IGridPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IGridPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::GridPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IGridPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::MultipleViewPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::RangeValuePatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IScrollPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IScrollPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ScrollPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IScrollPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::SelectionItemPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ISelectionPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ISelectionPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::SelectionPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ISelectionPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::SpreadsheetItemPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IStylesPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IStylesPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::StylesPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IStylesPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ITableItemPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ITableItemPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::TableItemPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ITableItemPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ITablePatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ITablePatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::TablePatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ITablePatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ITogglePatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ITogglePatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::TogglePatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ITogglePatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ITransformPattern2Identifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ITransformPattern2IdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::TransformPattern2Identifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ITransformPattern2Identifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::ITransformPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ITransformPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::TransformPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::ITransformPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IValuePatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IValuePatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::ValuePatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IValuePatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IWindowPatternIdentifiers> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IWindowPatternIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::WindowPatternIdentifiers> : class_type<Platform::Object, Windows::UI::Xaml::Automation::IWindowPatternIdentifiers> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationAnnotation> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationAnnotationStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::IAutomationAnnotationFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationAnnotation> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::IAutomationAnnotation>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationActiveEnd> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationAnimationStyle> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationBulletStyle> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationCaretBidiMode> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationCaretPosition> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationFlowDirections> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationOutlineStyles> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationStyleId> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Automation::AutomationTextDecorationLineStyle> : enum_type<int> {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiers> { define_guid(0xD475A0C1, 0x48B2, 0x4E40, 0xA6, 0xCF, 0x3D, 0xC4, 0xB6, 0x38, 0xC0, 0xDE);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiersStatics> { define_guid(0xE0E3A35D, 0xD167, 0x46DC, 0x95, 0xAB, 0x33, 0xA, 0xF6, 0x1A, 0xEB, 0xB5);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationProperty> { define_guid(0xB627195B, 0x3227, 0x4E16, 0x95, 0x34, 0xDD, 0xEC, 0xE3, 0xD, 0xDB, 0x46);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiers> { define_guid(0xE68A63CF, 0x4345, 0x4E2D, 0x8A, 0x6A, 0x49, 0xCC, 0xE1, 0xFA, 0x2D, 0xCC);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics> { define_guid(0x4549399F, 0x8340, 0x4D67, 0xB9, 0xBF, 0x8C, 0x2A, 0xC6, 0xA0, 0x77, 0x3A);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics2> { define_guid(0xB5CBB1E2, 0xD55F, 0x46A9, 0x9E, 0xDA, 0x1A, 0x47, 0x42, 0x51, 0x5D, 0xC3);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics3> { define_guid(0xF5CBEBD, 0xB3EB, 0x4083, 0xAD, 0xC7, 0xC, 0x2F, 0x39, 0xBB, 0x35, 0x43);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics4> { define_guid(0x5AF51F75, 0x5913, 0x4D78, 0xB3, 0x30, 0xA6, 0xF5, 0xB, 0x73, 0xED, 0x9B);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics5> { define_guid(0x986A8206, 0xDE59, 0x42F9, 0xA1, 0xE7, 0x62, 0xB8, 0xAF, 0x9E, 0x75, 0x6D);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics6> { define_guid(0xDE52B00D, 0x8328, 0x4EAE, 0x80, 0x35, 0xF8, 0xDB, 0x99, 0xC8, 0xBA, 0xC4);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics7> { define_guid(0xF1ABB2, 0x742C, 0x446A, 0xA8, 0xF6, 0x16, 0x72, 0xB1, 0xD, 0x28, 0x74);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationProperties> { define_guid(0x68D7232C, 0xE622, 0x48E9, 0xAF, 0xB, 0x1F, 0xFA, 0x33, 0xCC, 0x5C, 0xBA);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics> { define_guid(0xB618FD7B, 0x32D0, 0x4970, 0x9C, 0x42, 0x7C, 0x3, 0x9A, 0xC7, 0xBE, 0x78);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics2> { define_guid(0x3976547F, 0x7089, 0x4801, 0x8F, 0x1D, 0xAA, 0xB7, 0x80, 0x90, 0xD1, 0xA0);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics3> { define_guid(0x7B75D735, 0x5CB1, 0x42AD, 0x9B, 0x57, 0x5F, 0xAB, 0xA8, 0xC1, 0x86, 0x7F);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics4> { define_guid(0xF7D62655, 0x311A, 0x4B7C, 0xA1, 0x31, 0x52, 0x4E, 0x89, 0xCD, 0x3C, 0xF9);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics5> { define_guid(0xBE35B26, 0xC8F9, 0x41A2, 0xB4, 0xDB, 0xE6, 0xA7, 0xA3, 0x2B, 0xC, 0x34);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics6> { define_guid(0xC61E030F, 0xEB49, 0x4E5D, 0xB0, 0x12, 0x4C, 0x1C, 0x96, 0xC3, 0x90, 0x1B);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics7> { define_guid(0xF7E98BF3, 0x8F91, 0x4068, 0xA4, 0xAD, 0xB7, 0xB4, 0x2, 0xD1, 0xA, 0x2C);};
template<> struct uuid<Windows::UI::Xaml::Automation::IDockPatternIdentifiers> { define_guid(0xCCD7F4E6, 0xE4F9, 0x47FF, 0xBD, 0xE7, 0x37, 0x8B, 0x11, 0xF7, 0x8E, 0x9);};
template<> struct uuid<Windows::UI::Xaml::Automation::IDockPatternIdentifiersStatics> { define_guid(0x2B87245C, 0xED80, 0x4FE5, 0x8E, 0xB4, 0x70, 0x8A, 0x39, 0xC8, 0x41, 0xE5);};
template<> struct uuid<Windows::UI::Xaml::Automation::IDragPatternIdentifiers> { define_guid(0x6266E985, 0x4D07, 0x4E80, 0x82, 0xEB, 0x8F, 0x96, 0x69, 0xA, 0x1A, 0xC);};
template<> struct uuid<Windows::UI::Xaml::Automation::IDragPatternIdentifiersStatics> { define_guid(0x2A05379D, 0x1755, 0x4082, 0x9D, 0x90, 0x46, 0xF1, 0x41, 0x1D, 0x79, 0x86);};
template<> struct uuid<Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiers> { define_guid(0x11865133, 0xA6FE, 0x4634, 0xBD, 0x18, 0xE, 0xF6, 0x12, 0xB7, 0xB2, 0x8);};
template<> struct uuid<Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiersStatics> { define_guid(0x1B693304, 0x89FB, 0x4B0A, 0x94, 0x52, 0xCA, 0x2C, 0x66, 0xAA, 0xF9, 0xF3);};
template<> struct uuid<Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiers> { define_guid(0xB006BAC0, 0x751B, 0x4D55, 0x92, 0xCB, 0x61, 0x3E, 0xC1, 0xBD, 0xF5, 0xD0);};
template<> struct uuid<Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiersStatics> { define_guid(0xD7816FD4, 0x6EE0, 0x4F38, 0x8E, 0x14, 0x56, 0xEF, 0x21, 0xAD, 0xAC, 0xFD);};
template<> struct uuid<Windows::UI::Xaml::Automation::IGridItemPatternIdentifiers> { define_guid(0x757744F1, 0x3285, 0x4FB1, 0x80, 0x3B, 0x25, 0x45, 0xBD, 0x43, 0x15, 0x99);};
template<> struct uuid<Windows::UI::Xaml::Automation::IGridItemPatternIdentifiersStatics> { define_guid(0x217D2402, 0x5E46, 0x4D61, 0x87, 0x94, 0xB8, 0xEE, 0x8E, 0x77, 0x47, 0x14);};
template<> struct uuid<Windows::UI::Xaml::Automation::IGridPatternIdentifiers> { define_guid(0xC902980F, 0x96C5, 0x450C, 0x90, 0x44, 0x7E, 0x52, 0xC2, 0x4F, 0x9E, 0x94);};
template<> struct uuid<Windows::UI::Xaml::Automation::IGridPatternIdentifiersStatics> { define_guid(0x7BC452F3, 0xA181, 0x4137, 0x8D, 0xE9, 0x1F, 0x9B, 0x1A, 0x83, 0x20, 0xED);};
template<> struct uuid<Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiers> { define_guid(0x5D5CD3B8, 0x1E12, 0x488B, 0xB0, 0xEA, 0x5E, 0x6C, 0xB8, 0x98, 0x16, 0xE1);};
template<> struct uuid<Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiersStatics> { define_guid(0xA9CFA66F, 0x6B84, 0x4D71, 0x9E, 0x48, 0xD7, 0x64, 0xD3, 0xBC, 0xDA, 0x8E);};
template<> struct uuid<Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiers> { define_guid(0xF8760F45, 0x33C9, 0x467D, 0xBC, 0x9E, 0xD1, 0x51, 0x52, 0x63, 0xAC, 0xE1);};
template<> struct uuid<Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiersStatics> { define_guid(0xCE23450F, 0x1C27, 0x457F, 0xB8, 0x15, 0x7A, 0x5E, 0x46, 0x86, 0x3D, 0xBB);};
template<> struct uuid<Windows::UI::Xaml::Automation::IScrollPatternIdentifiers> { define_guid(0x366B1003, 0x425C, 0x4951, 0xAE, 0x83, 0xD5, 0x21, 0xE7, 0x3B, 0xC6, 0x96);};
template<> struct uuid<Windows::UI::Xaml::Automation::IScrollPatternIdentifiersStatics> { define_guid(0x4BF8E0A1, 0xFB7F, 0x4FA4, 0x83, 0xB3, 0xCF, 0xAE, 0xB1, 0x3, 0xA6, 0x85);};
template<> struct uuid<Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiers> { define_guid(0x2DAFA41A, 0x3EF8, 0x4BB5, 0xA0, 0x2B, 0x3E, 0xE1, 0xB2, 0x27, 0x47, 0x40);};
template<> struct uuid<Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiersStatics> { define_guid(0xA918D163, 0x487E, 0x4E3E, 0x9F, 0x86, 0x7B, 0x44, 0xAC, 0xBE, 0x27, 0xCE);};
template<> struct uuid<Windows::UI::Xaml::Automation::ISelectionPatternIdentifiers> { define_guid(0x4AA66FB0, 0xE3F7, 0x475F, 0xB7, 0x8D, 0xF8, 0xA8, 0x3B, 0xB7, 0x30, 0xC4);};
template<> struct uuid<Windows::UI::Xaml::Automation::ISelectionPatternIdentifiersStatics> { define_guid(0x93035B4C, 0x6B50, 0x40A1, 0xB2, 0x3F, 0x5C, 0x78, 0xDD, 0xBD, 0x47, 0x9A);};
template<> struct uuid<Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiers> { define_guid(0x84347E19, 0xCA4B, 0x46A2, 0xA7, 0x94, 0xC8, 0x79, 0x28, 0xA3, 0xB1, 0xAB);};
template<> struct uuid<Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiersStatics> { define_guid(0x43658779, 0x5380, 0x4F12, 0xB4, 0x68, 0xB4, 0xF3, 0x68, 0xAD, 0x44, 0x99);};
template<> struct uuid<Windows::UI::Xaml::Automation::IStylesPatternIdentifiers> { define_guid(0xB0E4E201, 0xE89D, 0x436B, 0x82, 0x87, 0x4F, 0x79, 0x3, 0x46, 0x68, 0x79);};
template<> struct uuid<Windows::UI::Xaml::Automation::IStylesPatternIdentifiersStatics> { define_guid(0x528A457A, 0xBC3C, 0x4D48, 0x94, 0xAF, 0x1F, 0x68, 0x70, 0x3C, 0xA2, 0x96);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITableItemPatternIdentifiers> { define_guid(0xC326E5AD, 0x8077, 0x4C64, 0x98, 0xE4, 0xE8, 0x3B, 0xCF, 0x1B, 0x43, 0x89);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITableItemPatternIdentifiersStatics> { define_guid(0x24C4B923, 0xE9A2, 0x4DE9, 0xB2, 0xA4, 0xA8, 0xB2, 0x2D, 0xB, 0xE3, 0x62);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITablePatternIdentifiers> { define_guid(0x38D104FE, 0xD0C, 0x412A, 0xBF, 0x8D, 0x51, 0xED, 0xE6, 0x83, 0xBA, 0xF5);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITablePatternIdentifiersStatics> { define_guid(0x75073D25, 0x32C9, 0x4903, 0xAE, 0xCF, 0xDC, 0x35, 0x4, 0xCB, 0xD2, 0x44);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITogglePatternIdentifiers> { define_guid(0x7E191F6B, 0x34D4, 0x4AE7, 0x83, 0xAC, 0x29, 0xF8, 0x88, 0x82, 0xD9, 0x85);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITogglePatternIdentifiersStatics> { define_guid(0xC7F75544, 0x14A5, 0x4F2F, 0x92, 0xFC, 0x76, 0x5, 0x24, 0xDE, 0x6, 0xEA);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITransformPattern2Identifiers> { define_guid(0x8AAA03D, 0xDEA7, 0x402F, 0x80, 0x97, 0x9A, 0x27, 0x83, 0xD6, 0xE, 0x5D);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITransformPattern2IdentifiersStatics> { define_guid(0x78963644, 0x11F0, 0x467C, 0xA7, 0x2B, 0x5D, 0xAC, 0x41, 0xC1, 0xF6, 0xFE);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITransformPatternIdentifiers> { define_guid(0xE4115B8C, 0xC3C8, 0x4A37, 0xB9, 0x94, 0x27, 0x9, 0xA7, 0x81, 0x16, 0x65);};
template<> struct uuid<Windows::UI::Xaml::Automation::ITransformPatternIdentifiersStatics> { define_guid(0x4570EDAB, 0xD705, 0x40C4, 0xA1, 0xDC, 0xE9, 0xAC, 0xFC, 0xEF, 0x85, 0xF6);};
template<> struct uuid<Windows::UI::Xaml::Automation::IValuePatternIdentifiers> { define_guid(0x425BF64C, 0x5333, 0x4E41, 0xB4, 0x70, 0x2B, 0xAD, 0x14, 0xEC, 0xD0, 0x85);};
template<> struct uuid<Windows::UI::Xaml::Automation::IValuePatternIdentifiersStatics> { define_guid(0xC247E8F7, 0xADCC, 0x440F, 0xB1, 0x23, 0x33, 0x78, 0x8A, 0x40, 0x52, 0x5A);};
template<> struct uuid<Windows::UI::Xaml::Automation::IWindowPatternIdentifiers> { define_guid(0x39F78BB4, 0x7032, 0x41E2, 0xB7, 0x9E, 0x27, 0xB7, 0x4A, 0x86, 0x28, 0xDE);};
template<> struct uuid<Windows::UI::Xaml::Automation::IWindowPatternIdentifiersStatics> { define_guid(0x7D0AD06, 0x6302, 0x4D29, 0x87, 0x8B, 0x19, 0xDA, 0x3, 0xFC, 0x22, 0x8D);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationAnnotation> { define_guid(0xFB3C30CA, 0x3D8, 0x4618, 0x91, 0xBF, 0xE4, 0xD8, 0x4F, 0x4A, 0xF3, 0x18);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationAnnotationStatics> { define_guid(0xE503EAB7, 0x4EE5, 0x48CB, 0xB5, 0xB8, 0xBB, 0xCD, 0x46, 0xC9, 0xD1, 0xDA);};
template<> struct uuid<Windows::UI::Xaml::Automation::IAutomationAnnotationFactory> { define_guid(0x4906FA52, 0xDDC0, 0x4E69, 0xB7, 0x6B, 0x1, 0x9D, 0x92, 0x8D, 0x82, 0x2F);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Automation {

// IAnnotationPatternIdentifiers
struct IAnnotationPatternIdentifiers : IInspectable, generate<IAnnotationPatternIdentifiers> {};

// IAnnotationPatternIdentifiersStatics
struct IAnnotationPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_AnnotationTypeIdProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_AnnotationTypeNameProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_AuthorProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_DateTimeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_TargetProperty(AutomationProperty* *value);
};

// IAutomationProperty
struct IAutomationProperty : IInspectable, generate<IAutomationProperty> {};

// AutomationProperty
template<typename X> struct statics<AutomationProperty, X> : X {
	typedef typename X::root_type AutomationProperty;
};
struct AutomationProperty : generate<AutomationProperty> {};

// AnnotationPatternIdentifiers
template<typename> struct AnnotationPatternIdentifiers_statics {
	static struct _AnnotationTypeIdProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AnnotationPatternIdentifiers, IAnnotationPatternIdentifiersStatics>()->_get_AnnotationTypeIdProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} AnnotationTypeIdProperty;
	static struct _AnnotationTypeNameProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AnnotationPatternIdentifiers, IAnnotationPatternIdentifiersStatics>()->_get_AnnotationTypeNameProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} AnnotationTypeNameProperty;
	static struct _AuthorProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AnnotationPatternIdentifiers, IAnnotationPatternIdentifiersStatics>()->_get_AuthorProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} AuthorProperty;
	static struct _DateTimeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AnnotationPatternIdentifiers, IAnnotationPatternIdentifiersStatics>()->_get_DateTimeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} DateTimeProperty;
	static struct _TargetProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AnnotationPatternIdentifiers, IAnnotationPatternIdentifiersStatics>()->_get_TargetProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} TargetProperty;
};
template<typename X> typename AnnotationPatternIdentifiers_statics<X>::_AnnotationTypeIdProperty AnnotationPatternIdentifiers_statics<X>::AnnotationTypeIdProperty;
template<typename X> typename AnnotationPatternIdentifiers_statics<X>::_AnnotationTypeNameProperty AnnotationPatternIdentifiers_statics<X>::AnnotationTypeNameProperty;
template<typename X> typename AnnotationPatternIdentifiers_statics<X>::_AuthorProperty AnnotationPatternIdentifiers_statics<X>::AuthorProperty;
template<typename X> typename AnnotationPatternIdentifiers_statics<X>::_DateTimeProperty AnnotationPatternIdentifiers_statics<X>::DateTimeProperty;
template<typename X> typename AnnotationPatternIdentifiers_statics<X>::_TargetProperty AnnotationPatternIdentifiers_statics<X>::TargetProperty;

template<typename X> struct statics<AnnotationPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::AnnotationPatternIdentifiers_statics<void> {
	typedef typename X::root_type AnnotationPatternIdentifiers;
};
struct AnnotationPatternIdentifiers : generate<AnnotationPatternIdentifiers> {};

// IAutomationElementIdentifiers
struct IAutomationElementIdentifiers : IInspectable, generate<IAutomationElementIdentifiers> {};

// IAutomationElementIdentifiersStatics
struct IAutomationElementIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_AcceleratorKeyProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_AccessKeyProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_AutomationIdProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_BoundingRectangleProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ClassNameProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ClickablePointProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ControlTypeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_HasKeyboardFocusProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_HelpTextProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsContentElementProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsControlElementProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsEnabledProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsKeyboardFocusableProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsOffscreenProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsPasswordProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsRequiredForFormProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ItemStatusProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ItemTypeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_LabeledByProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_LocalizedControlTypeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_NameProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_OrientationProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_LiveSettingProperty(AutomationProperty* *value);
};

// IAutomationElementIdentifiersStatics2
struct IAutomationElementIdentifiersStatics2 : IInspectable {
	virtual STDMETHODIMP _get_ControlledPeersProperty(AutomationProperty* *value);
};

// IAutomationElementIdentifiersStatics3
struct IAutomationElementIdentifiersStatics3 : IInspectable {
	virtual STDMETHODIMP _get_PositionInSetProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_SizeOfSetProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_LevelProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_AnnotationsProperty(AutomationProperty* *value);
};

// IAutomationElementIdentifiersStatics4
struct IAutomationElementIdentifiersStatics4 : IInspectable {
	virtual STDMETHODIMP _get_LandmarkTypeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_LocalizedLandmarkTypeProperty(AutomationProperty* *value);
};

// IAutomationElementIdentifiersStatics5
struct IAutomationElementIdentifiersStatics5 : IInspectable {
	virtual STDMETHODIMP _get_IsPeripheralProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsDataValidForFormProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_FullDescriptionProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_DescribedByProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_FlowsToProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_FlowsFromProperty(AutomationProperty* *value);
};

// IAutomationElementIdentifiersStatics6
struct IAutomationElementIdentifiersStatics6 : IInspectable {
	virtual STDMETHODIMP _get_CultureProperty(AutomationProperty* *value);
};

// IAutomationElementIdentifiersStatics7
struct IAutomationElementIdentifiersStatics7 : IInspectable {
	virtual STDMETHODIMP _get_HeadingLevelProperty(AutomationProperty* *value);
};

// AutomationElementIdentifiers
template<typename> struct AutomationElementIdentifiers_statics {
	static struct _AcceleratorKeyProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_AcceleratorKeyProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} AcceleratorKeyProperty;
	static struct _AccessKeyProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_AccessKeyProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} AccessKeyProperty;
	static struct _AutomationIdProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_AutomationIdProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} AutomationIdProperty;
	static struct _BoundingRectangleProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_BoundingRectangleProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} BoundingRectangleProperty;
	static struct _ClassNameProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_ClassNameProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ClassNameProperty;
	static struct _ClickablePointProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_ClickablePointProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ClickablePointProperty;
	static struct _ControlTypeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_ControlTypeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ControlTypeProperty;
	static struct _HasKeyboardFocusProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_HasKeyboardFocusProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} HasKeyboardFocusProperty;
	static struct _HelpTextProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_HelpTextProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} HelpTextProperty;
	static struct _IsContentElementProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_IsContentElementProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsContentElementProperty;
	static struct _IsControlElementProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_IsControlElementProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsControlElementProperty;
	static struct _IsEnabledProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_IsEnabledProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsEnabledProperty;
	static struct _IsKeyboardFocusableProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_IsKeyboardFocusableProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsKeyboardFocusableProperty;
	static struct _IsOffscreenProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_IsOffscreenProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsOffscreenProperty;
	static struct _IsPasswordProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_IsPasswordProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsPasswordProperty;
	static struct _IsRequiredForFormProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_IsRequiredForFormProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsRequiredForFormProperty;
	static struct _ItemStatusProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_ItemStatusProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ItemStatusProperty;
	static struct _ItemTypeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_ItemTypeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ItemTypeProperty;
	static struct _LabeledByProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_LabeledByProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} LabeledByProperty;
	static struct _LiveSettingProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_LiveSettingProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} LiveSettingProperty;
	static struct _LocalizedControlTypeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_LocalizedControlTypeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} LocalizedControlTypeProperty;
	static struct _NameProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_NameProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} NameProperty;
	static struct _OrientationProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics>()->_get_OrientationProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} OrientationProperty;
	static struct _ControlledPeersProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics2>()->_get_ControlledPeersProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ControlledPeersProperty;
	static struct _AnnotationsProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics3>()->_get_AnnotationsProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} AnnotationsProperty;
	static struct _LevelProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics3>()->_get_LevelProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} LevelProperty;
	static struct _PositionInSetProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics3>()->_get_PositionInSetProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} PositionInSetProperty;
	static struct _SizeOfSetProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics3>()->_get_SizeOfSetProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} SizeOfSetProperty;
	static struct _LandmarkTypeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics4>()->_get_LandmarkTypeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} LandmarkTypeProperty;
	static struct _LocalizedLandmarkTypeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics4>()->_get_LocalizedLandmarkTypeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} LocalizedLandmarkTypeProperty;
	static struct _DescribedByProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics5>()->_get_DescribedByProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} DescribedByProperty;
	static struct _FlowsFromProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics5>()->_get_FlowsFromProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} FlowsFromProperty;
	static struct _FlowsToProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics5>()->_get_FlowsToProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} FlowsToProperty;
	static struct _FullDescriptionProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics5>()->_get_FullDescriptionProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} FullDescriptionProperty;
	static struct _IsDataValidForFormProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics5>()->_get_IsDataValidForFormProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsDataValidForFormProperty;
	static struct _IsPeripheralProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics5>()->_get_IsPeripheralProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsPeripheralProperty;
	static struct _CultureProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics6>()->_get_CultureProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CultureProperty;
	static struct _HeadingLevelProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<AutomationElementIdentifiers, IAutomationElementIdentifiersStatics7>()->_get_HeadingLevelProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} HeadingLevelProperty;
};
template<typename X> typename AutomationElementIdentifiers_statics<X>::_AcceleratorKeyProperty AutomationElementIdentifiers_statics<X>::AcceleratorKeyProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_AccessKeyProperty AutomationElementIdentifiers_statics<X>::AccessKeyProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_AutomationIdProperty AutomationElementIdentifiers_statics<X>::AutomationIdProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_BoundingRectangleProperty AutomationElementIdentifiers_statics<X>::BoundingRectangleProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_ClassNameProperty AutomationElementIdentifiers_statics<X>::ClassNameProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_ClickablePointProperty AutomationElementIdentifiers_statics<X>::ClickablePointProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_ControlTypeProperty AutomationElementIdentifiers_statics<X>::ControlTypeProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_HasKeyboardFocusProperty AutomationElementIdentifiers_statics<X>::HasKeyboardFocusProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_HelpTextProperty AutomationElementIdentifiers_statics<X>::HelpTextProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsContentElementProperty AutomationElementIdentifiers_statics<X>::IsContentElementProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsControlElementProperty AutomationElementIdentifiers_statics<X>::IsControlElementProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsEnabledProperty AutomationElementIdentifiers_statics<X>::IsEnabledProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsKeyboardFocusableProperty AutomationElementIdentifiers_statics<X>::IsKeyboardFocusableProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsOffscreenProperty AutomationElementIdentifiers_statics<X>::IsOffscreenProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsPasswordProperty AutomationElementIdentifiers_statics<X>::IsPasswordProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsRequiredForFormProperty AutomationElementIdentifiers_statics<X>::IsRequiredForFormProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_ItemStatusProperty AutomationElementIdentifiers_statics<X>::ItemStatusProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_ItemTypeProperty AutomationElementIdentifiers_statics<X>::ItemTypeProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_LabeledByProperty AutomationElementIdentifiers_statics<X>::LabeledByProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_LiveSettingProperty AutomationElementIdentifiers_statics<X>::LiveSettingProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_LocalizedControlTypeProperty AutomationElementIdentifiers_statics<X>::LocalizedControlTypeProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_NameProperty AutomationElementIdentifiers_statics<X>::NameProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_OrientationProperty AutomationElementIdentifiers_statics<X>::OrientationProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_ControlledPeersProperty AutomationElementIdentifiers_statics<X>::ControlledPeersProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_AnnotationsProperty AutomationElementIdentifiers_statics<X>::AnnotationsProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_LevelProperty AutomationElementIdentifiers_statics<X>::LevelProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_PositionInSetProperty AutomationElementIdentifiers_statics<X>::PositionInSetProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_SizeOfSetProperty AutomationElementIdentifiers_statics<X>::SizeOfSetProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_LandmarkTypeProperty AutomationElementIdentifiers_statics<X>::LandmarkTypeProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_LocalizedLandmarkTypeProperty AutomationElementIdentifiers_statics<X>::LocalizedLandmarkTypeProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_DescribedByProperty AutomationElementIdentifiers_statics<X>::DescribedByProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_FlowsFromProperty AutomationElementIdentifiers_statics<X>::FlowsFromProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_FlowsToProperty AutomationElementIdentifiers_statics<X>::FlowsToProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_FullDescriptionProperty AutomationElementIdentifiers_statics<X>::FullDescriptionProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsDataValidForFormProperty AutomationElementIdentifiers_statics<X>::IsDataValidForFormProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_IsPeripheralProperty AutomationElementIdentifiers_statics<X>::IsPeripheralProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_CultureProperty AutomationElementIdentifiers_statics<X>::CultureProperty;
template<typename X> typename AutomationElementIdentifiers_statics<X>::_HeadingLevelProperty AutomationElementIdentifiers_statics<X>::HeadingLevelProperty;

template<typename X> struct statics<AutomationElementIdentifiers, X> : X, Windows::UI::Xaml::Automation::AutomationElementIdentifiers_statics<void> {
	typedef typename X::root_type AutomationElementIdentifiers;
};
struct AutomationElementIdentifiers : generate<AutomationElementIdentifiers> {};

// IAutomationProperties
struct IAutomationProperties : IInspectable, generate<IAutomationProperties> {};

// IAutomationPropertiesStatics
struct IAutomationPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_AcceleratorKeyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetAcceleratorKey(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetAcceleratorKey(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_AccessKeyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetAccessKey(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetAccessKey(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_AutomationIdProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetAutomationId(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetAutomationId(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_HelpTextProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetHelpText(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetHelpText(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_IsRequiredForFormProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetIsRequiredForForm(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetIsRequiredForForm(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_ItemStatusProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetItemStatus(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetItemStatus(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_ItemTypeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetItemType(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetItemType(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_LabeledByProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetLabeledBy(DependencyObject* element, UIElement* *value);
	virtual STDMETHODIMP _SetLabeledBy(DependencyObject* element, UIElement* value);
	virtual STDMETHODIMP _get_NameProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetName(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetName(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_LiveSettingProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetLiveSetting(DependencyObject* element, Peers::AutomationLiveSetting *value);
	virtual STDMETHODIMP _SetLiveSetting(DependencyObject* element, Peers::AutomationLiveSetting value);
};

// IAutomationPropertiesStatics2
struct IAutomationPropertiesStatics2 : IInspectable {
	virtual STDMETHODIMP _get_AccessibilityViewProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetAccessibilityView(DependencyObject* element, Peers::AccessibilityView *value);
	virtual STDMETHODIMP _SetAccessibilityView(DependencyObject* element, Peers::AccessibilityView value);
	virtual STDMETHODIMP _get_ControlledPeersProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetControlledPeers(DependencyObject* element, Foundation::Collections::IVector<UIElement*>* *value);
};

// IAutomationPropertiesStatics3
struct IAutomationPropertiesStatics3 : IInspectable {
	virtual STDMETHODIMP _get_PositionInSetProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetPositionInSet(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetPositionInSet(DependencyObject* element, int value);
	virtual STDMETHODIMP _get_SizeOfSetProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetSizeOfSet(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetSizeOfSet(DependencyObject* element, int value);
	virtual STDMETHODIMP _get_LevelProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetLevel(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetLevel(DependencyObject* element, int value);
	virtual STDMETHODIMP _get_AnnotationsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetAnnotations(DependencyObject* element, Foundation::Collections::IVector<AutomationAnnotation*>* *value);
};

// IAutomationPropertiesStatics4
struct IAutomationPropertiesStatics4 : IInspectable {
	virtual STDMETHODIMP _get_LandmarkTypeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetLandmarkType(DependencyObject* element, Peers::AutomationLandmarkType *value);
	virtual STDMETHODIMP _SetLandmarkType(DependencyObject* element, Peers::AutomationLandmarkType value);
	virtual STDMETHODIMP _get_LocalizedLandmarkTypeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetLocalizedLandmarkType(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetLocalizedLandmarkType(DependencyObject* element, HSTRING value);
};

// IAutomationPropertiesStatics5
struct IAutomationPropertiesStatics5 : IInspectable {
	virtual STDMETHODIMP _get_IsPeripheralProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetIsPeripheral(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetIsPeripheral(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_IsDataValidForFormProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetIsDataValidForForm(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetIsDataValidForForm(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_FullDescriptionProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetFullDescription(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetFullDescription(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_LocalizedControlTypeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetLocalizedControlType(DependencyObject* element, HSTRING *value);
	virtual STDMETHODIMP _SetLocalizedControlType(DependencyObject* element, HSTRING value);
	virtual STDMETHODIMP _get_DescribedByProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetDescribedBy(DependencyObject* element, Foundation::Collections::IVector<DependencyObject*>* *value);
	virtual STDMETHODIMP _get_FlowsToProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetFlowsTo(DependencyObject* element, Foundation::Collections::IVector<DependencyObject*>* *value);
	virtual STDMETHODIMP _get_FlowsFromProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetFlowsFrom(DependencyObject* element, Foundation::Collections::IVector<DependencyObject*>* *value);
};

// IAutomationPropertiesStatics6
struct IAutomationPropertiesStatics6 : IInspectable {
	virtual STDMETHODIMP _get_CultureProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetCulture(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetCulture(DependencyObject* element, int value);
};

// IAutomationPropertiesStatics7
struct IAutomationPropertiesStatics7 : IInspectable {
	virtual STDMETHODIMP _get_HeadingLevelProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetHeadingLevel(DependencyObject* element, Peers::AutomationHeadingLevel *value);
	virtual STDMETHODIMP _SetHeadingLevel(DependencyObject* element, Peers::AutomationHeadingLevel value);
};

// AutomationProperties
template<typename> struct AutomationProperties_statics {
	static struct _AcceleratorKeyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_AcceleratorKeyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AcceleratorKeyProperty;
	static struct _AccessKeyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_AccessKeyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AccessKeyProperty;
	static struct _AutomationIdProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_AutomationIdProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AutomationIdProperty;
	static struct _HelpTextProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_HelpTextProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} HelpTextProperty;
	static struct _IsRequiredForFormProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_IsRequiredForFormProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsRequiredForFormProperty;
	static struct _ItemStatusProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_ItemStatusProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ItemStatusProperty;
	static struct _ItemTypeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_ItemTypeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ItemTypeProperty;
	static struct _LabeledByProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_LabeledByProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LabeledByProperty;
	static struct _LiveSettingProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_LiveSettingProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LiveSettingProperty;
	static struct _NameProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_get_NameProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} NameProperty;
	static struct _AccessibilityViewProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics2>()->_get_AccessibilityViewProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AccessibilityViewProperty;
	static struct _ControlledPeersProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics2>()->_get_ControlledPeersProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ControlledPeersProperty;
	static struct _AnnotationsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_get_AnnotationsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AnnotationsProperty;
	static struct _LevelProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_get_LevelProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LevelProperty;
	static struct _PositionInSetProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_get_PositionInSetProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PositionInSetProperty;
	static struct _SizeOfSetProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_get_SizeOfSetProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} SizeOfSetProperty;
	static struct _LandmarkTypeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics4>()->_get_LandmarkTypeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LandmarkTypeProperty;
	static struct _LocalizedLandmarkTypeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics4>()->_get_LocalizedLandmarkTypeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LocalizedLandmarkTypeProperty;
	static struct _DescribedByProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_get_DescribedByProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} DescribedByProperty;
	static struct _FlowsFromProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_get_FlowsFromProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FlowsFromProperty;
	static struct _FlowsToProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_get_FlowsToProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FlowsToProperty;
	static struct _FullDescriptionProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_get_FullDescriptionProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FullDescriptionProperty;
	static struct _IsDataValidForFormProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_get_IsDataValidForFormProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsDataValidForFormProperty;
	static struct _IsPeripheralProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_get_IsPeripheralProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsPeripheralProperty;
	static struct _LocalizedControlTypeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_get_LocalizedControlTypeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LocalizedControlTypeProperty;
	static struct _CultureProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics6>()->_get_CultureProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CultureProperty;
	static struct _HeadingLevelProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics7>()->_get_HeadingLevelProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} HeadingLevelProperty;
	static Peers::AutomationHeadingLevel GetHeadingLevel(pptr<DependencyObject> element) { Peers::AutomationHeadingLevel value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics7>()->_GetHeadingLevel(element, &value)); return value; }
	static void SetHeadingLevel(pptr<DependencyObject> element, Peers::AutomationHeadingLevel value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics7>()->_SetHeadingLevel(element, value)); }
	static int GetCulture(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics6>()->_GetCulture(element, &value)); return value; }
	static void SetCulture(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics6>()->_SetCulture(element, value)); }
	static bool GetIsPeripheral(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_GetIsPeripheral(element, &value)); return value; }
	static void SetIsPeripheral(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_SetIsPeripheral(element, value)); }
	static bool GetIsDataValidForForm(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_GetIsDataValidForForm(element, &value)); return value; }
	static void SetIsDataValidForForm(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_SetIsDataValidForForm(element, value)); }
	static hstring GetFullDescription(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_GetFullDescription(element, &value)); return from_abi(value); }
	static void SetFullDescription(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_SetFullDescription(element, value)); }
	static hstring GetLocalizedControlType(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_GetLocalizedControlType(element, &value)); return from_abi(value); }
	static void SetLocalizedControlType(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_SetLocalizedControlType(element, value)); }
	static ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> GetDescribedBy(pptr<DependencyObject> element) { Foundation::Collections::IVector<DependencyObject*>* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_GetDescribedBy(element, &value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> GetFlowsTo(pptr<DependencyObject> element) { Foundation::Collections::IVector<DependencyObject*>* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_GetFlowsTo(element, &value)); return from_abi(value); }
	static ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> GetFlowsFrom(pptr<DependencyObject> element) { Foundation::Collections::IVector<DependencyObject*>* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics5>()->_GetFlowsFrom(element, &value)); return from_abi(value); }
	static Peers::AutomationLandmarkType GetLandmarkType(pptr<DependencyObject> element) { Peers::AutomationLandmarkType value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics4>()->_GetLandmarkType(element, &value)); return value; }
	static void SetLandmarkType(pptr<DependencyObject> element, Peers::AutomationLandmarkType value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics4>()->_SetLandmarkType(element, value)); }
	static hstring GetLocalizedLandmarkType(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics4>()->_GetLocalizedLandmarkType(element, &value)); return from_abi(value); }
	static void SetLocalizedLandmarkType(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics4>()->_SetLocalizedLandmarkType(element, value)); }
	static int GetPositionInSet(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_GetPositionInSet(element, &value)); return value; }
	static void SetPositionInSet(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_SetPositionInSet(element, value)); }
	static int GetSizeOfSet(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_GetSizeOfSet(element, &value)); return value; }
	static void SetSizeOfSet(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_SetSizeOfSet(element, value)); }
	static int GetLevel(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_GetLevel(element, &value)); return value; }
	static void SetLevel(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_SetLevel(element, value)); }
	static ptr<Foundation::Collections::IVector<ptr<AutomationAnnotation>>> GetAnnotations(pptr<DependencyObject> element) { Foundation::Collections::IVector<AutomationAnnotation*>* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics3>()->_GetAnnotations(element, &value)); return from_abi(value); }
	static Peers::AccessibilityView GetAccessibilityView(pptr<DependencyObject> element) { Peers::AccessibilityView value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics2>()->_GetAccessibilityView(element, &value)); return value; }
	static void SetAccessibilityView(pptr<DependencyObject> element, Peers::AccessibilityView value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics2>()->_SetAccessibilityView(element, value)); }
	static ptr<Foundation::Collections::IVector<ptr<UIElement>>> GetControlledPeers(pptr<DependencyObject> element) { Foundation::Collections::IVector<UIElement*>* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics2>()->_GetControlledPeers(element, &value)); return from_abi(value); }
	static hstring GetAcceleratorKey(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetAcceleratorKey(element, &value)); return from_abi(value); }
	static void SetAcceleratorKey(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetAcceleratorKey(element, value)); }
	static hstring GetAccessKey(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetAccessKey(element, &value)); return from_abi(value); }
	static void SetAccessKey(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetAccessKey(element, value)); }
	static hstring GetAutomationId(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetAutomationId(element, &value)); return from_abi(value); }
	static void SetAutomationId(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetAutomationId(element, value)); }
	static hstring GetHelpText(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetHelpText(element, &value)); return from_abi(value); }
	static void SetHelpText(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetHelpText(element, value)); }
	static bool GetIsRequiredForForm(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetIsRequiredForForm(element, &value)); return value; }
	static void SetIsRequiredForForm(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetIsRequiredForForm(element, value)); }
	static hstring GetItemStatus(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetItemStatus(element, &value)); return from_abi(value); }
	static void SetItemStatus(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetItemStatus(element, value)); }
	static hstring GetItemType(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetItemType(element, &value)); return from_abi(value); }
	static void SetItemType(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetItemType(element, value)); }
	static ptr<UIElement> GetLabeledBy(pptr<DependencyObject> element) { UIElement* value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetLabeledBy(element, &value)); return from_abi(value); }
	static void SetLabeledBy(pptr<DependencyObject> element, pptr<UIElement> value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetLabeledBy(element, value)); }
	static hstring GetName(pptr<DependencyObject> element) { HSTRING value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetName(element, &value)); return from_abi(value); }
	static void SetName(pptr<DependencyObject> element, hstring_ref value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetName(element, value)); }
	static Peers::AutomationLiveSetting GetLiveSetting(pptr<DependencyObject> element) { Peers::AutomationLiveSetting value; hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_GetLiveSetting(element, &value)); return value; }
	static void SetLiveSetting(pptr<DependencyObject> element, Peers::AutomationLiveSetting value) { hrcheck(get_activation_factory<AutomationProperties, IAutomationPropertiesStatics>()->_SetLiveSetting(element, value)); }
};
template<typename X> typename AutomationProperties_statics<X>::_AcceleratorKeyProperty AutomationProperties_statics<X>::AcceleratorKeyProperty;
template<typename X> typename AutomationProperties_statics<X>::_AccessKeyProperty AutomationProperties_statics<X>::AccessKeyProperty;
template<typename X> typename AutomationProperties_statics<X>::_AutomationIdProperty AutomationProperties_statics<X>::AutomationIdProperty;
template<typename X> typename AutomationProperties_statics<X>::_HelpTextProperty AutomationProperties_statics<X>::HelpTextProperty;
template<typename X> typename AutomationProperties_statics<X>::_IsRequiredForFormProperty AutomationProperties_statics<X>::IsRequiredForFormProperty;
template<typename X> typename AutomationProperties_statics<X>::_ItemStatusProperty AutomationProperties_statics<X>::ItemStatusProperty;
template<typename X> typename AutomationProperties_statics<X>::_ItemTypeProperty AutomationProperties_statics<X>::ItemTypeProperty;
template<typename X> typename AutomationProperties_statics<X>::_LabeledByProperty AutomationProperties_statics<X>::LabeledByProperty;
template<typename X> typename AutomationProperties_statics<X>::_LiveSettingProperty AutomationProperties_statics<X>::LiveSettingProperty;
template<typename X> typename AutomationProperties_statics<X>::_NameProperty AutomationProperties_statics<X>::NameProperty;
template<typename X> typename AutomationProperties_statics<X>::_AccessibilityViewProperty AutomationProperties_statics<X>::AccessibilityViewProperty;
template<typename X> typename AutomationProperties_statics<X>::_ControlledPeersProperty AutomationProperties_statics<X>::ControlledPeersProperty;
template<typename X> typename AutomationProperties_statics<X>::_AnnotationsProperty AutomationProperties_statics<X>::AnnotationsProperty;
template<typename X> typename AutomationProperties_statics<X>::_LevelProperty AutomationProperties_statics<X>::LevelProperty;
template<typename X> typename AutomationProperties_statics<X>::_PositionInSetProperty AutomationProperties_statics<X>::PositionInSetProperty;
template<typename X> typename AutomationProperties_statics<X>::_SizeOfSetProperty AutomationProperties_statics<X>::SizeOfSetProperty;
template<typename X> typename AutomationProperties_statics<X>::_LandmarkTypeProperty AutomationProperties_statics<X>::LandmarkTypeProperty;
template<typename X> typename AutomationProperties_statics<X>::_LocalizedLandmarkTypeProperty AutomationProperties_statics<X>::LocalizedLandmarkTypeProperty;
template<typename X> typename AutomationProperties_statics<X>::_DescribedByProperty AutomationProperties_statics<X>::DescribedByProperty;
template<typename X> typename AutomationProperties_statics<X>::_FlowsFromProperty AutomationProperties_statics<X>::FlowsFromProperty;
template<typename X> typename AutomationProperties_statics<X>::_FlowsToProperty AutomationProperties_statics<X>::FlowsToProperty;
template<typename X> typename AutomationProperties_statics<X>::_FullDescriptionProperty AutomationProperties_statics<X>::FullDescriptionProperty;
template<typename X> typename AutomationProperties_statics<X>::_IsDataValidForFormProperty AutomationProperties_statics<X>::IsDataValidForFormProperty;
template<typename X> typename AutomationProperties_statics<X>::_IsPeripheralProperty AutomationProperties_statics<X>::IsPeripheralProperty;
template<typename X> typename AutomationProperties_statics<X>::_LocalizedControlTypeProperty AutomationProperties_statics<X>::LocalizedControlTypeProperty;
template<typename X> typename AutomationProperties_statics<X>::_CultureProperty AutomationProperties_statics<X>::CultureProperty;
template<typename X> typename AutomationProperties_statics<X>::_HeadingLevelProperty AutomationProperties_statics<X>::HeadingLevelProperty;

template<typename X> struct statics<AutomationProperties, X> : X, Windows::UI::Xaml::Automation::AutomationProperties_statics<void> {
	typedef typename X::root_type AutomationProperties;
};
struct AutomationProperties : generate<AutomationProperties> {};

// IDockPatternIdentifiers
struct IDockPatternIdentifiers : IInspectable, generate<IDockPatternIdentifiers> {};

// IDockPatternIdentifiersStatics
struct IDockPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_DockPositionProperty(AutomationProperty* *value);
};

// DockPatternIdentifiers
template<typename> struct DockPatternIdentifiers_statics {
	static struct _DockPositionProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<DockPatternIdentifiers, IDockPatternIdentifiersStatics>()->_get_DockPositionProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} DockPositionProperty;
};
template<typename X> typename DockPatternIdentifiers_statics<X>::_DockPositionProperty DockPatternIdentifiers_statics<X>::DockPositionProperty;

template<typename X> struct statics<DockPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::DockPatternIdentifiers_statics<void> {
	typedef typename X::root_type DockPatternIdentifiers;
};
struct DockPatternIdentifiers : generate<DockPatternIdentifiers> {};

// IDragPatternIdentifiers
struct IDragPatternIdentifiers : IInspectable, generate<IDragPatternIdentifiers> {};

// IDragPatternIdentifiersStatics
struct IDragPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_DropEffectProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_DropEffectsProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_GrabbedItemsProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsGrabbedProperty(AutomationProperty* *value);
};

// DragPatternIdentifiers
template<typename> struct DragPatternIdentifiers_statics {
	static struct _DropEffectProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<DragPatternIdentifiers, IDragPatternIdentifiersStatics>()->_get_DropEffectProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} DropEffectProperty;
	static struct _DropEffectsProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<DragPatternIdentifiers, IDragPatternIdentifiersStatics>()->_get_DropEffectsProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} DropEffectsProperty;
	static struct _GrabbedItemsProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<DragPatternIdentifiers, IDragPatternIdentifiersStatics>()->_get_GrabbedItemsProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} GrabbedItemsProperty;
	static struct _IsGrabbedProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<DragPatternIdentifiers, IDragPatternIdentifiersStatics>()->_get_IsGrabbedProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsGrabbedProperty;
};
template<typename X> typename DragPatternIdentifiers_statics<X>::_DropEffectProperty DragPatternIdentifiers_statics<X>::DropEffectProperty;
template<typename X> typename DragPatternIdentifiers_statics<X>::_DropEffectsProperty DragPatternIdentifiers_statics<X>::DropEffectsProperty;
template<typename X> typename DragPatternIdentifiers_statics<X>::_GrabbedItemsProperty DragPatternIdentifiers_statics<X>::GrabbedItemsProperty;
template<typename X> typename DragPatternIdentifiers_statics<X>::_IsGrabbedProperty DragPatternIdentifiers_statics<X>::IsGrabbedProperty;

template<typename X> struct statics<DragPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::DragPatternIdentifiers_statics<void> {
	typedef typename X::root_type DragPatternIdentifiers;
};
struct DragPatternIdentifiers : generate<DragPatternIdentifiers> {};

// IDropTargetPatternIdentifiers
struct IDropTargetPatternIdentifiers : IInspectable, generate<IDropTargetPatternIdentifiers> {};

// IDropTargetPatternIdentifiersStatics
struct IDropTargetPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_DropTargetEffectProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_DropTargetEffectsProperty(AutomationProperty* *value);
};

// DropTargetPatternIdentifiers
template<typename> struct DropTargetPatternIdentifiers_statics {
	static struct _DropTargetEffectProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<DropTargetPatternIdentifiers, IDropTargetPatternIdentifiersStatics>()->_get_DropTargetEffectProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} DropTargetEffectProperty;
	static struct _DropTargetEffectsProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<DropTargetPatternIdentifiers, IDropTargetPatternIdentifiersStatics>()->_get_DropTargetEffectsProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} DropTargetEffectsProperty;
};
template<typename X> typename DropTargetPatternIdentifiers_statics<X>::_DropTargetEffectProperty DropTargetPatternIdentifiers_statics<X>::DropTargetEffectProperty;
template<typename X> typename DropTargetPatternIdentifiers_statics<X>::_DropTargetEffectsProperty DropTargetPatternIdentifiers_statics<X>::DropTargetEffectsProperty;

template<typename X> struct statics<DropTargetPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::DropTargetPatternIdentifiers_statics<void> {
	typedef typename X::root_type DropTargetPatternIdentifiers;
};
struct DropTargetPatternIdentifiers : generate<DropTargetPatternIdentifiers> {};

// IExpandCollapsePatternIdentifiers
struct IExpandCollapsePatternIdentifiers : IInspectable, generate<IExpandCollapsePatternIdentifiers> {};

// IExpandCollapsePatternIdentifiersStatics
struct IExpandCollapsePatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_ExpandCollapseStateProperty(AutomationProperty* *value);
};

// ExpandCollapsePatternIdentifiers
template<typename> struct ExpandCollapsePatternIdentifiers_statics {
	static struct _ExpandCollapseStateProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ExpandCollapsePatternIdentifiers, IExpandCollapsePatternIdentifiersStatics>()->_get_ExpandCollapseStateProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ExpandCollapseStateProperty;
};
template<typename X> typename ExpandCollapsePatternIdentifiers_statics<X>::_ExpandCollapseStateProperty ExpandCollapsePatternIdentifiers_statics<X>::ExpandCollapseStateProperty;

template<typename X> struct statics<ExpandCollapsePatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::ExpandCollapsePatternIdentifiers_statics<void> {
	typedef typename X::root_type ExpandCollapsePatternIdentifiers;
};
struct ExpandCollapsePatternIdentifiers : generate<ExpandCollapsePatternIdentifiers> {};

// IGridItemPatternIdentifiers
struct IGridItemPatternIdentifiers : IInspectable, generate<IGridItemPatternIdentifiers> {};

// IGridItemPatternIdentifiersStatics
struct IGridItemPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_ColumnProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ColumnSpanProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ContainingGridProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_RowProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_RowSpanProperty(AutomationProperty* *value);
};

// GridItemPatternIdentifiers
template<typename> struct GridItemPatternIdentifiers_statics {
	static struct _ColumnProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<GridItemPatternIdentifiers, IGridItemPatternIdentifiersStatics>()->_get_ColumnProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ColumnProperty;
	static struct _ColumnSpanProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<GridItemPatternIdentifiers, IGridItemPatternIdentifiersStatics>()->_get_ColumnSpanProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ColumnSpanProperty;
	static struct _ContainingGridProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<GridItemPatternIdentifiers, IGridItemPatternIdentifiersStatics>()->_get_ContainingGridProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ContainingGridProperty;
	static struct _RowProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<GridItemPatternIdentifiers, IGridItemPatternIdentifiersStatics>()->_get_RowProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} RowProperty;
	static struct _RowSpanProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<GridItemPatternIdentifiers, IGridItemPatternIdentifiersStatics>()->_get_RowSpanProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} RowSpanProperty;
};
template<typename X> typename GridItemPatternIdentifiers_statics<X>::_ColumnProperty GridItemPatternIdentifiers_statics<X>::ColumnProperty;
template<typename X> typename GridItemPatternIdentifiers_statics<X>::_ColumnSpanProperty GridItemPatternIdentifiers_statics<X>::ColumnSpanProperty;
template<typename X> typename GridItemPatternIdentifiers_statics<X>::_ContainingGridProperty GridItemPatternIdentifiers_statics<X>::ContainingGridProperty;
template<typename X> typename GridItemPatternIdentifiers_statics<X>::_RowProperty GridItemPatternIdentifiers_statics<X>::RowProperty;
template<typename X> typename GridItemPatternIdentifiers_statics<X>::_RowSpanProperty GridItemPatternIdentifiers_statics<X>::RowSpanProperty;

template<typename X> struct statics<GridItemPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::GridItemPatternIdentifiers_statics<void> {
	typedef typename X::root_type GridItemPatternIdentifiers;
};
struct GridItemPatternIdentifiers : generate<GridItemPatternIdentifiers> {};

// IGridPatternIdentifiers
struct IGridPatternIdentifiers : IInspectable, generate<IGridPatternIdentifiers> {};

// IGridPatternIdentifiersStatics
struct IGridPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_ColumnCountProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_RowCountProperty(AutomationProperty* *value);
};

// GridPatternIdentifiers
template<typename> struct GridPatternIdentifiers_statics {
	static struct _ColumnCountProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<GridPatternIdentifiers, IGridPatternIdentifiersStatics>()->_get_ColumnCountProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ColumnCountProperty;
	static struct _RowCountProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<GridPatternIdentifiers, IGridPatternIdentifiersStatics>()->_get_RowCountProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} RowCountProperty;
};
template<typename X> typename GridPatternIdentifiers_statics<X>::_ColumnCountProperty GridPatternIdentifiers_statics<X>::ColumnCountProperty;
template<typename X> typename GridPatternIdentifiers_statics<X>::_RowCountProperty GridPatternIdentifiers_statics<X>::RowCountProperty;

template<typename X> struct statics<GridPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::GridPatternIdentifiers_statics<void> {
	typedef typename X::root_type GridPatternIdentifiers;
};
struct GridPatternIdentifiers : generate<GridPatternIdentifiers> {};

// IMultipleViewPatternIdentifiers
struct IMultipleViewPatternIdentifiers : IInspectable, generate<IMultipleViewPatternIdentifiers> {};

// IMultipleViewPatternIdentifiersStatics
struct IMultipleViewPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_CurrentViewProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_SupportedViewsProperty(AutomationProperty* *value);
};

// MultipleViewPatternIdentifiers
template<typename> struct MultipleViewPatternIdentifiers_statics {
	static struct _CurrentViewProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<MultipleViewPatternIdentifiers, IMultipleViewPatternIdentifiersStatics>()->_get_CurrentViewProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CurrentViewProperty;
	static struct _SupportedViewsProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<MultipleViewPatternIdentifiers, IMultipleViewPatternIdentifiersStatics>()->_get_SupportedViewsProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} SupportedViewsProperty;
};
template<typename X> typename MultipleViewPatternIdentifiers_statics<X>::_CurrentViewProperty MultipleViewPatternIdentifiers_statics<X>::CurrentViewProperty;
template<typename X> typename MultipleViewPatternIdentifiers_statics<X>::_SupportedViewsProperty MultipleViewPatternIdentifiers_statics<X>::SupportedViewsProperty;

template<typename X> struct statics<MultipleViewPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::MultipleViewPatternIdentifiers_statics<void> {
	typedef typename X::root_type MultipleViewPatternIdentifiers;
};
struct MultipleViewPatternIdentifiers : generate<MultipleViewPatternIdentifiers> {};

// IRangeValuePatternIdentifiers
struct IRangeValuePatternIdentifiers : IInspectable, generate<IRangeValuePatternIdentifiers> {};

// IRangeValuePatternIdentifiersStatics
struct IRangeValuePatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_IsReadOnlyProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_LargeChangeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_MaximumProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_MinimumProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_SmallChangeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ValueProperty(AutomationProperty* *value);
};

// RangeValuePatternIdentifiers
template<typename> struct RangeValuePatternIdentifiers_statics {
	static struct _IsReadOnlyProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<RangeValuePatternIdentifiers, IRangeValuePatternIdentifiersStatics>()->_get_IsReadOnlyProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsReadOnlyProperty;
	static struct _LargeChangeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<RangeValuePatternIdentifiers, IRangeValuePatternIdentifiersStatics>()->_get_LargeChangeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} LargeChangeProperty;
	static struct _MaximumProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<RangeValuePatternIdentifiers, IRangeValuePatternIdentifiersStatics>()->_get_MaximumProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} MaximumProperty;
	static struct _MinimumProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<RangeValuePatternIdentifiers, IRangeValuePatternIdentifiersStatics>()->_get_MinimumProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} MinimumProperty;
	static struct _SmallChangeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<RangeValuePatternIdentifiers, IRangeValuePatternIdentifiersStatics>()->_get_SmallChangeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} SmallChangeProperty;
	static struct _ValueProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<RangeValuePatternIdentifiers, IRangeValuePatternIdentifiersStatics>()->_get_ValueProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ValueProperty;
};
template<typename X> typename RangeValuePatternIdentifiers_statics<X>::_IsReadOnlyProperty RangeValuePatternIdentifiers_statics<X>::IsReadOnlyProperty;
template<typename X> typename RangeValuePatternIdentifiers_statics<X>::_LargeChangeProperty RangeValuePatternIdentifiers_statics<X>::LargeChangeProperty;
template<typename X> typename RangeValuePatternIdentifiers_statics<X>::_MaximumProperty RangeValuePatternIdentifiers_statics<X>::MaximumProperty;
template<typename X> typename RangeValuePatternIdentifiers_statics<X>::_MinimumProperty RangeValuePatternIdentifiers_statics<X>::MinimumProperty;
template<typename X> typename RangeValuePatternIdentifiers_statics<X>::_SmallChangeProperty RangeValuePatternIdentifiers_statics<X>::SmallChangeProperty;
template<typename X> typename RangeValuePatternIdentifiers_statics<X>::_ValueProperty RangeValuePatternIdentifiers_statics<X>::ValueProperty;

template<typename X> struct statics<RangeValuePatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::RangeValuePatternIdentifiers_statics<void> {
	typedef typename X::root_type RangeValuePatternIdentifiers;
};
struct RangeValuePatternIdentifiers : generate<RangeValuePatternIdentifiers> {};

// IScrollPatternIdentifiers
struct IScrollPatternIdentifiers : IInspectable, generate<IScrollPatternIdentifiers> {};

// IScrollPatternIdentifiersStatics
struct IScrollPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_HorizontallyScrollableProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_HorizontalScrollPercentProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_HorizontalViewSizeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_NoScroll(double *value);
	virtual STDMETHODIMP _get_VerticallyScrollableProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_VerticalScrollPercentProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_VerticalViewSizeProperty(AutomationProperty* *value);
};

// ScrollPatternIdentifiers
template<typename> struct ScrollPatternIdentifiers_statics {
	static struct _HorizontalScrollPercentProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ScrollPatternIdentifiers, IScrollPatternIdentifiersStatics>()->_get_HorizontalScrollPercentProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} HorizontalScrollPercentProperty;
	static struct _HorizontalViewSizeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ScrollPatternIdentifiers, IScrollPatternIdentifiersStatics>()->_get_HorizontalViewSizeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} HorizontalViewSizeProperty;
	static struct _HorizontallyScrollableProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ScrollPatternIdentifiers, IScrollPatternIdentifiersStatics>()->_get_HorizontallyScrollableProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} HorizontallyScrollableProperty;
	static struct _NoScroll : property {
		double get() { double value; hrcheck(get_activation_factory<ScrollPatternIdentifiers, IScrollPatternIdentifiersStatics>()->_get_NoScroll(&value)); return value; }
		double operator()() { return get(); }
		operator double () { return get(); }
	} NoScroll;
	static struct _VerticalScrollPercentProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ScrollPatternIdentifiers, IScrollPatternIdentifiersStatics>()->_get_VerticalScrollPercentProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} VerticalScrollPercentProperty;
	static struct _VerticalViewSizeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ScrollPatternIdentifiers, IScrollPatternIdentifiersStatics>()->_get_VerticalViewSizeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} VerticalViewSizeProperty;
	static struct _VerticallyScrollableProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ScrollPatternIdentifiers, IScrollPatternIdentifiersStatics>()->_get_VerticallyScrollableProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} VerticallyScrollableProperty;
};
template<typename X> typename ScrollPatternIdentifiers_statics<X>::_HorizontalScrollPercentProperty ScrollPatternIdentifiers_statics<X>::HorizontalScrollPercentProperty;
template<typename X> typename ScrollPatternIdentifiers_statics<X>::_HorizontalViewSizeProperty ScrollPatternIdentifiers_statics<X>::HorizontalViewSizeProperty;
template<typename X> typename ScrollPatternIdentifiers_statics<X>::_HorizontallyScrollableProperty ScrollPatternIdentifiers_statics<X>::HorizontallyScrollableProperty;
template<typename X> typename ScrollPatternIdentifiers_statics<X>::_NoScroll ScrollPatternIdentifiers_statics<X>::NoScroll;
template<typename X> typename ScrollPatternIdentifiers_statics<X>::_VerticalScrollPercentProperty ScrollPatternIdentifiers_statics<X>::VerticalScrollPercentProperty;
template<typename X> typename ScrollPatternIdentifiers_statics<X>::_VerticalViewSizeProperty ScrollPatternIdentifiers_statics<X>::VerticalViewSizeProperty;
template<typename X> typename ScrollPatternIdentifiers_statics<X>::_VerticallyScrollableProperty ScrollPatternIdentifiers_statics<X>::VerticallyScrollableProperty;

template<typename X> struct statics<ScrollPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::ScrollPatternIdentifiers_statics<void> {
	typedef typename X::root_type ScrollPatternIdentifiers;
};
struct ScrollPatternIdentifiers : generate<ScrollPatternIdentifiers> {};

// ISelectionItemPatternIdentifiers
struct ISelectionItemPatternIdentifiers : IInspectable, generate<ISelectionItemPatternIdentifiers> {};

// ISelectionItemPatternIdentifiersStatics
struct ISelectionItemPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_IsSelectedProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_SelectionContainerProperty(AutomationProperty* *value);
};

// SelectionItemPatternIdentifiers
template<typename> struct SelectionItemPatternIdentifiers_statics {
	static struct _IsSelectedProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<SelectionItemPatternIdentifiers, ISelectionItemPatternIdentifiersStatics>()->_get_IsSelectedProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsSelectedProperty;
	static struct _SelectionContainerProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<SelectionItemPatternIdentifiers, ISelectionItemPatternIdentifiersStatics>()->_get_SelectionContainerProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} SelectionContainerProperty;
};
template<typename X> typename SelectionItemPatternIdentifiers_statics<X>::_IsSelectedProperty SelectionItemPatternIdentifiers_statics<X>::IsSelectedProperty;
template<typename X> typename SelectionItemPatternIdentifiers_statics<X>::_SelectionContainerProperty SelectionItemPatternIdentifiers_statics<X>::SelectionContainerProperty;

template<typename X> struct statics<SelectionItemPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::SelectionItemPatternIdentifiers_statics<void> {
	typedef typename X::root_type SelectionItemPatternIdentifiers;
};
struct SelectionItemPatternIdentifiers : generate<SelectionItemPatternIdentifiers> {};

// ISelectionPatternIdentifiers
struct ISelectionPatternIdentifiers : IInspectable, generate<ISelectionPatternIdentifiers> {};

// ISelectionPatternIdentifiersStatics
struct ISelectionPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_CanSelectMultipleProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsSelectionRequiredProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_SelectionProperty(AutomationProperty* *value);
};

// SelectionPatternIdentifiers
template<typename> struct SelectionPatternIdentifiers_statics {
	static struct _CanSelectMultipleProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<SelectionPatternIdentifiers, ISelectionPatternIdentifiersStatics>()->_get_CanSelectMultipleProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CanSelectMultipleProperty;
	static struct _IsSelectionRequiredProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<SelectionPatternIdentifiers, ISelectionPatternIdentifiersStatics>()->_get_IsSelectionRequiredProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsSelectionRequiredProperty;
	static struct _SelectionProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<SelectionPatternIdentifiers, ISelectionPatternIdentifiersStatics>()->_get_SelectionProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} SelectionProperty;
};
template<typename X> typename SelectionPatternIdentifiers_statics<X>::_CanSelectMultipleProperty SelectionPatternIdentifiers_statics<X>::CanSelectMultipleProperty;
template<typename X> typename SelectionPatternIdentifiers_statics<X>::_IsSelectionRequiredProperty SelectionPatternIdentifiers_statics<X>::IsSelectionRequiredProperty;
template<typename X> typename SelectionPatternIdentifiers_statics<X>::_SelectionProperty SelectionPatternIdentifiers_statics<X>::SelectionProperty;

template<typename X> struct statics<SelectionPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::SelectionPatternIdentifiers_statics<void> {
	typedef typename X::root_type SelectionPatternIdentifiers;
};
struct SelectionPatternIdentifiers : generate<SelectionPatternIdentifiers> {};

// ISpreadsheetItemPatternIdentifiers
struct ISpreadsheetItemPatternIdentifiers : IInspectable, generate<ISpreadsheetItemPatternIdentifiers> {};

// ISpreadsheetItemPatternIdentifiersStatics
struct ISpreadsheetItemPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_FormulaProperty(AutomationProperty* *value);
};

// SpreadsheetItemPatternIdentifiers
template<typename> struct SpreadsheetItemPatternIdentifiers_statics {
	static struct _FormulaProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<SpreadsheetItemPatternIdentifiers, ISpreadsheetItemPatternIdentifiersStatics>()->_get_FormulaProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} FormulaProperty;
};
template<typename X> typename SpreadsheetItemPatternIdentifiers_statics<X>::_FormulaProperty SpreadsheetItemPatternIdentifiers_statics<X>::FormulaProperty;

template<typename X> struct statics<SpreadsheetItemPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::SpreadsheetItemPatternIdentifiers_statics<void> {
	typedef typename X::root_type SpreadsheetItemPatternIdentifiers;
};
struct SpreadsheetItemPatternIdentifiers : generate<SpreadsheetItemPatternIdentifiers> {};

// IStylesPatternIdentifiers
struct IStylesPatternIdentifiers : IInspectable, generate<IStylesPatternIdentifiers> {};

// IStylesPatternIdentifiersStatics
struct IStylesPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_ExtendedPropertiesProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_FillColorProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_FillPatternColorProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_FillPatternStyleProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ShapeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_StyleIdProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_StyleNameProperty(AutomationProperty* *value);
};

// StylesPatternIdentifiers
template<typename> struct StylesPatternIdentifiers_statics {
	static struct _ExtendedPropertiesProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<StylesPatternIdentifiers, IStylesPatternIdentifiersStatics>()->_get_ExtendedPropertiesProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ExtendedPropertiesProperty;
	static struct _FillColorProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<StylesPatternIdentifiers, IStylesPatternIdentifiersStatics>()->_get_FillColorProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} FillColorProperty;
	static struct _FillPatternColorProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<StylesPatternIdentifiers, IStylesPatternIdentifiersStatics>()->_get_FillPatternColorProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} FillPatternColorProperty;
	static struct _FillPatternStyleProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<StylesPatternIdentifiers, IStylesPatternIdentifiersStatics>()->_get_FillPatternStyleProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} FillPatternStyleProperty;
	static struct _ShapeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<StylesPatternIdentifiers, IStylesPatternIdentifiersStatics>()->_get_ShapeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ShapeProperty;
	static struct _StyleIdProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<StylesPatternIdentifiers, IStylesPatternIdentifiersStatics>()->_get_StyleIdProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} StyleIdProperty;
	static struct _StyleNameProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<StylesPatternIdentifiers, IStylesPatternIdentifiersStatics>()->_get_StyleNameProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} StyleNameProperty;
};
template<typename X> typename StylesPatternIdentifiers_statics<X>::_ExtendedPropertiesProperty StylesPatternIdentifiers_statics<X>::ExtendedPropertiesProperty;
template<typename X> typename StylesPatternIdentifiers_statics<X>::_FillColorProperty StylesPatternIdentifiers_statics<X>::FillColorProperty;
template<typename X> typename StylesPatternIdentifiers_statics<X>::_FillPatternColorProperty StylesPatternIdentifiers_statics<X>::FillPatternColorProperty;
template<typename X> typename StylesPatternIdentifiers_statics<X>::_FillPatternStyleProperty StylesPatternIdentifiers_statics<X>::FillPatternStyleProperty;
template<typename X> typename StylesPatternIdentifiers_statics<X>::_ShapeProperty StylesPatternIdentifiers_statics<X>::ShapeProperty;
template<typename X> typename StylesPatternIdentifiers_statics<X>::_StyleIdProperty StylesPatternIdentifiers_statics<X>::StyleIdProperty;
template<typename X> typename StylesPatternIdentifiers_statics<X>::_StyleNameProperty StylesPatternIdentifiers_statics<X>::StyleNameProperty;

template<typename X> struct statics<StylesPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::StylesPatternIdentifiers_statics<void> {
	typedef typename X::root_type StylesPatternIdentifiers;
};
struct StylesPatternIdentifiers : generate<StylesPatternIdentifiers> {};

// ITableItemPatternIdentifiers
struct ITableItemPatternIdentifiers : IInspectable, generate<ITableItemPatternIdentifiers> {};

// ITableItemPatternIdentifiersStatics
struct ITableItemPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_ColumnHeaderItemsProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_RowHeaderItemsProperty(AutomationProperty* *value);
};

// TableItemPatternIdentifiers
template<typename> struct TableItemPatternIdentifiers_statics {
	static struct _ColumnHeaderItemsProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TableItemPatternIdentifiers, ITableItemPatternIdentifiersStatics>()->_get_ColumnHeaderItemsProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ColumnHeaderItemsProperty;
	static struct _RowHeaderItemsProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TableItemPatternIdentifiers, ITableItemPatternIdentifiersStatics>()->_get_RowHeaderItemsProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} RowHeaderItemsProperty;
};
template<typename X> typename TableItemPatternIdentifiers_statics<X>::_ColumnHeaderItemsProperty TableItemPatternIdentifiers_statics<X>::ColumnHeaderItemsProperty;
template<typename X> typename TableItemPatternIdentifiers_statics<X>::_RowHeaderItemsProperty TableItemPatternIdentifiers_statics<X>::RowHeaderItemsProperty;

template<typename X> struct statics<TableItemPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::TableItemPatternIdentifiers_statics<void> {
	typedef typename X::root_type TableItemPatternIdentifiers;
};
struct TableItemPatternIdentifiers : generate<TableItemPatternIdentifiers> {};

// ITablePatternIdentifiers
struct ITablePatternIdentifiers : IInspectable, generate<ITablePatternIdentifiers> {};

// ITablePatternIdentifiersStatics
struct ITablePatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_ColumnHeadersProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_RowHeadersProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_RowOrColumnMajorProperty(AutomationProperty* *value);
};

// TablePatternIdentifiers
template<typename> struct TablePatternIdentifiers_statics {
	static struct _ColumnHeadersProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TablePatternIdentifiers, ITablePatternIdentifiersStatics>()->_get_ColumnHeadersProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ColumnHeadersProperty;
	static struct _RowHeadersProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TablePatternIdentifiers, ITablePatternIdentifiersStatics>()->_get_RowHeadersProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} RowHeadersProperty;
	static struct _RowOrColumnMajorProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TablePatternIdentifiers, ITablePatternIdentifiersStatics>()->_get_RowOrColumnMajorProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} RowOrColumnMajorProperty;
};
template<typename X> typename TablePatternIdentifiers_statics<X>::_ColumnHeadersProperty TablePatternIdentifiers_statics<X>::ColumnHeadersProperty;
template<typename X> typename TablePatternIdentifiers_statics<X>::_RowHeadersProperty TablePatternIdentifiers_statics<X>::RowHeadersProperty;
template<typename X> typename TablePatternIdentifiers_statics<X>::_RowOrColumnMajorProperty TablePatternIdentifiers_statics<X>::RowOrColumnMajorProperty;

template<typename X> struct statics<TablePatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::TablePatternIdentifiers_statics<void> {
	typedef typename X::root_type TablePatternIdentifiers;
};
struct TablePatternIdentifiers : generate<TablePatternIdentifiers> {};

// ITogglePatternIdentifiers
struct ITogglePatternIdentifiers : IInspectable, generate<ITogglePatternIdentifiers> {};

// ITogglePatternIdentifiersStatics
struct ITogglePatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_ToggleStateProperty(AutomationProperty* *value);
};

// TogglePatternIdentifiers
template<typename> struct TogglePatternIdentifiers_statics {
	static struct _ToggleStateProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TogglePatternIdentifiers, ITogglePatternIdentifiersStatics>()->_get_ToggleStateProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ToggleStateProperty;
};
template<typename X> typename TogglePatternIdentifiers_statics<X>::_ToggleStateProperty TogglePatternIdentifiers_statics<X>::ToggleStateProperty;

template<typename X> struct statics<TogglePatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::TogglePatternIdentifiers_statics<void> {
	typedef typename X::root_type TogglePatternIdentifiers;
};
struct TogglePatternIdentifiers : generate<TogglePatternIdentifiers> {};

// ITransformPattern2Identifiers
struct ITransformPattern2Identifiers : IInspectable, generate<ITransformPattern2Identifiers> {};

// ITransformPattern2IdentifiersStatics
struct ITransformPattern2IdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_CanZoomProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ZoomLevelProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_MaxZoomProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_MinZoomProperty(AutomationProperty* *value);
};

// TransformPattern2Identifiers
template<typename> struct TransformPattern2Identifiers_statics {
	static struct _CanZoomProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TransformPattern2Identifiers, ITransformPattern2IdentifiersStatics>()->_get_CanZoomProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CanZoomProperty;
	static struct _MaxZoomProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TransformPattern2Identifiers, ITransformPattern2IdentifiersStatics>()->_get_MaxZoomProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} MaxZoomProperty;
	static struct _MinZoomProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TransformPattern2Identifiers, ITransformPattern2IdentifiersStatics>()->_get_MinZoomProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} MinZoomProperty;
	static struct _ZoomLevelProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TransformPattern2Identifiers, ITransformPattern2IdentifiersStatics>()->_get_ZoomLevelProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ZoomLevelProperty;
};
template<typename X> typename TransformPattern2Identifiers_statics<X>::_CanZoomProperty TransformPattern2Identifiers_statics<X>::CanZoomProperty;
template<typename X> typename TransformPattern2Identifiers_statics<X>::_MaxZoomProperty TransformPattern2Identifiers_statics<X>::MaxZoomProperty;
template<typename X> typename TransformPattern2Identifiers_statics<X>::_MinZoomProperty TransformPattern2Identifiers_statics<X>::MinZoomProperty;
template<typename X> typename TransformPattern2Identifiers_statics<X>::_ZoomLevelProperty TransformPattern2Identifiers_statics<X>::ZoomLevelProperty;

template<typename X> struct statics<TransformPattern2Identifiers, X> : X, Windows::UI::Xaml::Automation::TransformPattern2Identifiers_statics<void> {
	typedef typename X::root_type TransformPattern2Identifiers;
};
struct TransformPattern2Identifiers : generate<TransformPattern2Identifiers> {};

// ITransformPatternIdentifiers
struct ITransformPatternIdentifiers : IInspectable, generate<ITransformPatternIdentifiers> {};

// ITransformPatternIdentifiersStatics
struct ITransformPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_CanMoveProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_CanResizeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_CanRotateProperty(AutomationProperty* *value);
};

// TransformPatternIdentifiers
template<typename> struct TransformPatternIdentifiers_statics {
	static struct _CanMoveProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TransformPatternIdentifiers, ITransformPatternIdentifiersStatics>()->_get_CanMoveProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CanMoveProperty;
	static struct _CanResizeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TransformPatternIdentifiers, ITransformPatternIdentifiersStatics>()->_get_CanResizeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CanResizeProperty;
	static struct _CanRotateProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<TransformPatternIdentifiers, ITransformPatternIdentifiersStatics>()->_get_CanRotateProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CanRotateProperty;
};
template<typename X> typename TransformPatternIdentifiers_statics<X>::_CanMoveProperty TransformPatternIdentifiers_statics<X>::CanMoveProperty;
template<typename X> typename TransformPatternIdentifiers_statics<X>::_CanResizeProperty TransformPatternIdentifiers_statics<X>::CanResizeProperty;
template<typename X> typename TransformPatternIdentifiers_statics<X>::_CanRotateProperty TransformPatternIdentifiers_statics<X>::CanRotateProperty;

template<typename X> struct statics<TransformPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::TransformPatternIdentifiers_statics<void> {
	typedef typename X::root_type TransformPatternIdentifiers;
};
struct TransformPatternIdentifiers : generate<TransformPatternIdentifiers> {};

// IValuePatternIdentifiers
struct IValuePatternIdentifiers : IInspectable, generate<IValuePatternIdentifiers> {};

// IValuePatternIdentifiersStatics
struct IValuePatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_IsReadOnlyProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_ValueProperty(AutomationProperty* *value);
};

// ValuePatternIdentifiers
template<typename> struct ValuePatternIdentifiers_statics {
	static struct _IsReadOnlyProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ValuePatternIdentifiers, IValuePatternIdentifiersStatics>()->_get_IsReadOnlyProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsReadOnlyProperty;
	static struct _ValueProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<ValuePatternIdentifiers, IValuePatternIdentifiersStatics>()->_get_ValueProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} ValueProperty;
};
template<typename X> typename ValuePatternIdentifiers_statics<X>::_IsReadOnlyProperty ValuePatternIdentifiers_statics<X>::IsReadOnlyProperty;
template<typename X> typename ValuePatternIdentifiers_statics<X>::_ValueProperty ValuePatternIdentifiers_statics<X>::ValueProperty;

template<typename X> struct statics<ValuePatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::ValuePatternIdentifiers_statics<void> {
	typedef typename X::root_type ValuePatternIdentifiers;
};
struct ValuePatternIdentifiers : generate<ValuePatternIdentifiers> {};

// IWindowPatternIdentifiers
struct IWindowPatternIdentifiers : IInspectable, generate<IWindowPatternIdentifiers> {};

// IWindowPatternIdentifiersStatics
struct IWindowPatternIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_CanMaximizeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_CanMinimizeProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsModalProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_IsTopmostProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_WindowInteractionStateProperty(AutomationProperty* *value);
	virtual STDMETHODIMP _get_WindowVisualStateProperty(AutomationProperty* *value);
};

// WindowPatternIdentifiers
template<typename> struct WindowPatternIdentifiers_statics {
	static struct _CanMaximizeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<WindowPatternIdentifiers, IWindowPatternIdentifiersStatics>()->_get_CanMaximizeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CanMaximizeProperty;
	static struct _CanMinimizeProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<WindowPatternIdentifiers, IWindowPatternIdentifiersStatics>()->_get_CanMinimizeProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} CanMinimizeProperty;
	static struct _IsModalProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<WindowPatternIdentifiers, IWindowPatternIdentifiersStatics>()->_get_IsModalProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsModalProperty;
	static struct _IsTopmostProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<WindowPatternIdentifiers, IWindowPatternIdentifiersStatics>()->_get_IsTopmostProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} IsTopmostProperty;
	static struct _WindowInteractionStateProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<WindowPatternIdentifiers, IWindowPatternIdentifiersStatics>()->_get_WindowInteractionStateProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} WindowInteractionStateProperty;
	static struct _WindowVisualStateProperty : property {
		ptr<AutomationProperty> get() { AutomationProperty* value; hrcheck(get_activation_factory<WindowPatternIdentifiers, IWindowPatternIdentifiersStatics>()->_get_WindowVisualStateProperty(&value)); return from_abi(value); }
		ptr<AutomationProperty> operator()() { return get(); }
		operator ptr<AutomationProperty> () { return get(); }
		ptr<AutomationProperty> operator->() { return get(); }
	} WindowVisualStateProperty;
};
template<typename X> typename WindowPatternIdentifiers_statics<X>::_CanMaximizeProperty WindowPatternIdentifiers_statics<X>::CanMaximizeProperty;
template<typename X> typename WindowPatternIdentifiers_statics<X>::_CanMinimizeProperty WindowPatternIdentifiers_statics<X>::CanMinimizeProperty;
template<typename X> typename WindowPatternIdentifiers_statics<X>::_IsModalProperty WindowPatternIdentifiers_statics<X>::IsModalProperty;
template<typename X> typename WindowPatternIdentifiers_statics<X>::_IsTopmostProperty WindowPatternIdentifiers_statics<X>::IsTopmostProperty;
template<typename X> typename WindowPatternIdentifiers_statics<X>::_WindowInteractionStateProperty WindowPatternIdentifiers_statics<X>::WindowInteractionStateProperty;
template<typename X> typename WindowPatternIdentifiers_statics<X>::_WindowVisualStateProperty WindowPatternIdentifiers_statics<X>::WindowVisualStateProperty;

template<typename X> struct statics<WindowPatternIdentifiers, X> : X, Windows::UI::Xaml::Automation::WindowPatternIdentifiers_statics<void> {
	typedef typename X::root_type WindowPatternIdentifiers;
};
struct WindowPatternIdentifiers : generate<WindowPatternIdentifiers> {};

// IAutomationAnnotation
struct IAutomationAnnotation_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(AnnotationType *value);
	virtual STDMETHODIMP _put_Type(AnnotationType value);
	virtual STDMETHODIMP _get_Element(UIElement* *value);
	virtual STDMETHODIMP _put_Element(UIElement* value);
};
template<typename X> struct IAutomationAnnotation_adaptor : X {
	union {
		struct : property {
			ptr<UIElement> get() { UIElement* value; hrcheck(enc(&IAutomationAnnotation_adaptor::Element)->_get_Element(&value)); return from_abi(value); }
			ptr<UIElement> operator()() { return get(); }
			operator ptr<UIElement> () { return get(); }
			ptr<UIElement> operator->() { return get(); }
			void put(pptr<UIElement> value) { hrcheck(enc(&IAutomationAnnotation_adaptor::Element)->_put_Element(value)); }
			void operator=(pptr<UIElement> value) { put(value); }
			void operator()(pptr<UIElement> value) { put(value); }
		} Element;
		struct : property {
			AnnotationType get() { AnnotationType value; hrcheck(enc(&IAutomationAnnotation_adaptor::Type)->_get_Type(&value)); return value; }
			AnnotationType operator()() { return get(); }
			operator AnnotationType () { return get(); }
			void put(AnnotationType value) { hrcheck(enc(&IAutomationAnnotation_adaptor::Type)->_put_Type(value)); }
			void operator=(AnnotationType value) { put(value); }
			void operator()(AnnotationType value) { put(value); }
		} Type;
	};
	IAutomationAnnotation_adaptor() {}
};
template<typename X> struct adapt<IAutomationAnnotation, X> : Windows::UI::Xaml::Automation::IAutomationAnnotation_adaptor<X> { typedef adapt IAutomationAnnotation; };
struct IAutomationAnnotation : IAutomationAnnotation_raw, generate<IAutomationAnnotation> {};

// IAutomationAnnotationStatics
struct IAutomationAnnotationStatics : IInspectable {
	virtual STDMETHODIMP _get_TypeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ElementProperty(DependencyProperty* *value);
};

// IAutomationAnnotationFactory
struct IAutomationAnnotationFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(AnnotationType type, AutomationAnnotation* *instance);
	virtual STDMETHODIMP _CreateWithElementParameter(AnnotationType type, UIElement* element, AutomationAnnotation* *instance);
};

// AutomationAnnotation
template<typename> struct AutomationAnnotation_statics {
	static struct _ElementProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationAnnotation, IAutomationAnnotationStatics>()->_get_ElementProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ElementProperty;
	static struct _TypeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<AutomationAnnotation, IAutomationAnnotationStatics>()->_get_TypeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TypeProperty;
	static AutomationAnnotation *activate() { AutomationAnnotation *t; get_activation_factory<AutomationAnnotation>()->ActivateInstance((IInspectable**)&t); return t; }
	static AutomationAnnotation *activate(AnnotationType type) { AutomationAnnotation *instance; hrcheck(get_activation_factory<AutomationAnnotation, IAutomationAnnotationFactory>()->_CreateInstance(type, &instance)); return instance; }
	static AutomationAnnotation *activate(AnnotationType type, pptr<UIElement> element) { AutomationAnnotation *instance; hrcheck(get_activation_factory<AutomationAnnotation, IAutomationAnnotationFactory>()->_CreateWithElementParameter(type, element, &instance)); return instance; }
};
template<typename X> typename AutomationAnnotation_statics<X>::_ElementProperty AutomationAnnotation_statics<X>::ElementProperty;
template<typename X> typename AutomationAnnotation_statics<X>::_TypeProperty AutomationAnnotation_statics<X>::TypeProperty;

template<typename X> struct statics<AutomationAnnotation, X> : X, Windows::UI::Xaml::Automation::AutomationAnnotation_statics<void> {
	using Windows::UI::Xaml::Automation::AutomationAnnotation_statics<void>::activate;
	typedef typename X::root_type AutomationAnnotation;
};
struct AutomationAnnotation : generate<AutomationAnnotation> {};
}}}}
} // namespace iso_winrt
