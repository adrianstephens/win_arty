#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Shell

#include "Windows.UI.Shell.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Core {
struct AppListEntry;
}}
namespace Foundation {
template<typename TResult> struct IAsyncOperation;
}}

// defs

template<> struct def<Windows::UI::Shell::IAdaptiveCardBuilderStatics> : overridable_type<> {};
template<> struct def<Windows::UI::Shell::AdaptiveCardBuilder> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Shell::ITaskbarManager> : interface_type<> {};
template<> struct def<Windows::UI::Shell::ITaskbarManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Shell::TaskbarManager> : class_type<Platform::Object, Windows::UI::Shell::ITaskbarManager> {};
template<> struct def<Windows::UI::Shell::IAdaptiveCard> : overridable_type<> {};

// uuids

template<> struct uuid<Windows::UI::Shell::IAdaptiveCardBuilderStatics> { define_guid(0x766D8F08, 0xD3FE, 0x4347, 0xA0, 0xBC, 0xB9, 0xEA, 0x9A, 0x6D, 0xC2, 0x8E);};
template<> struct uuid<Windows::UI::Shell::ITaskbarManager> { define_guid(0x87490A19, 0x1AD9, 0x49F4, 0xB2, 0xE8, 0x86, 0x73, 0x8D, 0xC5, 0xAC, 0x40);};
template<> struct uuid<Windows::UI::Shell::ITaskbarManagerStatics> { define_guid(0xDB32AB74, 0xDE52, 0x4FE6, 0xB7, 0xB6, 0x95, 0xFF, 0x9F, 0x83, 0x95, 0xDF);};
template<> struct uuid<Windows::UI::Shell::IAdaptiveCard> { define_guid(0x72D0568C, 0xA274, 0x41CD, 0x82, 0xA8, 0x98, 0x9D, 0x40, 0xB9, 0xB0, 0x5E);};

// types

namespace Windows { namespace UI { namespace Shell {

// IAdaptiveCardBuilderStatics
struct IAdaptiveCardBuilderStatics_raw : IInspectable {
	virtual STDMETHODIMP _CreateAdaptiveCardFromJson(HSTRING value, IAdaptiveCard* *result) = 0;
};
template<typename X> struct IAdaptiveCardBuilderStatics_adaptor : X {
	ptr<IAdaptiveCard> CreateAdaptiveCardFromJson(hstring_ref value) { IAdaptiveCard* result; hrcheck(X::get()->_CreateAdaptiveCardFromJson(value, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IAdaptiveCardBuilderStatics, X> : Windows::UI::Shell::IAdaptiveCardBuilderStatics_adaptor<X> { typedef adapt IAdaptiveCardBuilderStatics; };
template<typename X> struct IAdaptiveCardBuilderStatics_unadaptor : X {
	STDMETHODIMP _CreateAdaptiveCardFromJson(HSTRING value, IAdaptiveCard* *result) { return hrtry([&, this] { *result = to_abi(X::get()->CreateAdaptiveCardFromJson(value)); }); }
};
template<typename X> struct unadapt<IAdaptiveCardBuilderStatics, X> : Windows::UI::Shell::IAdaptiveCardBuilderStatics_unadaptor<X> {};
struct IAdaptiveCardBuilderStatics : IAdaptiveCardBuilderStatics_raw, generate<IAdaptiveCardBuilderStatics> {};

// AdaptiveCardBuilder
template<typename> struct AdaptiveCardBuilder_statics {
	static ptr<IAdaptiveCard> CreateAdaptiveCardFromJson(hstring_ref value);
};

template<typename X> struct statics<AdaptiveCardBuilder, X> : X, Windows::UI::Shell::AdaptiveCardBuilder_statics<void> {
	typedef typename X::root_type AdaptiveCardBuilder;
};
struct AdaptiveCardBuilder : generate<AdaptiveCardBuilder> {};

// ITaskbarManager
struct ITaskbarManager_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSupported(bool *value);
	virtual STDMETHODIMP _get_IsPinningAllowed(bool *value);
	virtual STDMETHODIMP _IsCurrentAppPinnedAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _IsAppListEntryPinnedAsync(ApplicationModel::Core::AppListEntry* appListEntry, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestPinCurrentAppAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestPinAppListEntryAsync(ApplicationModel::Core::AppListEntry* appListEntry, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ITaskbarManager_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITaskbarManager_adaptor::IsPinningAllowed)->_get_IsPinningAllowed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPinningAllowed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITaskbarManager_adaptor::IsSupported)->_get_IsSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSupported;
	};
	ptr<Foundation::IAsyncOperation<bool>> IsCurrentAppPinnedAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_IsCurrentAppPinnedAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> IsAppListEntryPinnedAsync(pptr<ApplicationModel::Core::AppListEntry> appListEntry) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_IsAppListEntryPinnedAsync(appListEntry, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestPinCurrentAppAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestPinCurrentAppAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestPinAppListEntryAsync(pptr<ApplicationModel::Core::AppListEntry> appListEntry) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestPinAppListEntryAsync(appListEntry, &operation)); return from_abi(operation); }
	ITaskbarManager_adaptor() {}
};
template<typename X> struct adapt<ITaskbarManager, X> : Windows::UI::Shell::ITaskbarManager_adaptor<X> { typedef adapt ITaskbarManager; };
struct ITaskbarManager : ITaskbarManager_raw, generate<ITaskbarManager> {};

// ITaskbarManagerStatics
struct ITaskbarManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(TaskbarManager* *result);
};

// TaskbarManager
template<typename> struct TaskbarManager_statics {
	static ptr<TaskbarManager> GetDefault() { TaskbarManager* result; hrcheck(get_activation_factory<TaskbarManager, ITaskbarManagerStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<TaskbarManager, X> : X, Windows::UI::Shell::TaskbarManager_statics<void> {
	typedef typename X::root_type TaskbarManager;
};
struct TaskbarManager : generate<TaskbarManager> {};

// IAdaptiveCard
struct IAdaptiveCard_raw : IInspectable {
	virtual STDMETHODIMP _ToJson(HSTRING *result) = 0;
};
template<typename X> struct IAdaptiveCard_adaptor : X {
	hstring ToJson() { HSTRING result; hrcheck(X::get()->_ToJson(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IAdaptiveCard, X> : Windows::UI::Shell::IAdaptiveCard_adaptor<X> { typedef adapt IAdaptiveCard; };
template<typename X> struct IAdaptiveCard_unadaptor : X {
	STDMETHODIMP _ToJson(HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->ToJson()); }); }
};
template<typename X> struct unadapt<IAdaptiveCard, X> : Windows::UI::Shell::IAdaptiveCard_unadaptor<X> {};
struct IAdaptiveCard : IAdaptiveCard_raw, generate<IAdaptiveCard> {};
}}}
} // namespace iso_winrt
