#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Appointments.AppointmentsProvider

#include "Windows.ApplicationModel.Appointments.AppointmentsProvider.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Appointments {
struct Appointment;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::AppointmentsProviderLaunchActionVerbs> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics> { define_guid(0x36DBBA28, 0x9E2E, 0x49C6, 0x8E, 0xF7, 0x3A, 0xB7, 0xA5, 0xDC, 0xC8, 0xB8);};
template<> struct uuid<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics2> { define_guid(0xEF9049A4, 0xAF21, 0x473C, 0x88, 0xDC, 0x76, 0xCD, 0x89, 0xF6, 0xC, 0xA5);};
template<> struct uuid<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation> { define_guid(0xEC4A9AF3, 0x620D, 0x4C69, 0xAD, 0xD7, 0x97, 0x94, 0xE9, 0x18, 0x8, 0x1F);};
template<> struct uuid<Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation> { define_guid(0xF4903D9B, 0x9E61, 0x4DE2, 0xA7, 0x32, 0x26, 0x87, 0xC0, 0x7D, 0x1D, 0xE8);};
template<> struct uuid<Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation> { define_guid(0x8B66ABA, 0xFE33, 0x46CD, 0xA5, 0xC, 0xA8, 0xFF, 0xB3, 0x26, 0x5, 0x37);};

// types

namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

// IAppointmentsProviderLaunchActionVerbsStatics
struct IAppointmentsProviderLaunchActionVerbsStatics : IInspectable {
	virtual STDMETHODIMP _get_AddAppointment(HSTRING *value);
	virtual STDMETHODIMP _get_ReplaceAppointment(HSTRING *value);
	virtual STDMETHODIMP _get_RemoveAppointment(HSTRING *value);
	virtual STDMETHODIMP _get_ShowTimeFrame(HSTRING *value);
};

// IAppointmentsProviderLaunchActionVerbsStatics2
struct IAppointmentsProviderLaunchActionVerbsStatics2 : IInspectable {
	virtual STDMETHODIMP _get_ShowAppointmentDetails(HSTRING *value);
};

// IAddAppointmentOperation
struct IAddAppointmentOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentInformation(Appointment* *value);
	virtual STDMETHODIMP _get_SourcePackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _ReportCompleted(HSTRING itemId);
	virtual STDMETHODIMP _ReportCanceled();
	virtual STDMETHODIMP _ReportError(HSTRING value);
	virtual STDMETHODIMP _DismissUI();
};
template<typename X> struct IAddAppointmentOperation_adaptor : X {
	union {
		struct : property {
			ptr<Appointment> get() { Appointment* value; hrcheck(enc(&IAddAppointmentOperation_adaptor::AppointmentInformation)->_get_AppointmentInformation(&value)); return from_abi(value); }
			ptr<Appointment> operator()() { return get(); }
			operator ptr<Appointment> () { return get(); }
			ptr<Appointment> operator->() { return get(); }
		} AppointmentInformation;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAddAppointmentOperation_adaptor::SourcePackageFamilyName)->_get_SourcePackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourcePackageFamilyName;
	};
	void ReportCompleted(hstring_ref itemId) { hrcheck(X::get()->_ReportCompleted(itemId)); }
	void ReportCanceled() { hrcheck(X::get()->_ReportCanceled()); }
	void ReportError(hstring_ref value) { hrcheck(X::get()->_ReportError(value)); }
	void DismissUI() { hrcheck(X::get()->_DismissUI()); }
	IAddAppointmentOperation_adaptor() {}
};
template<typename X> struct adapt<IAddAppointmentOperation, X> : Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation_adaptor<X> { typedef adapt IAddAppointmentOperation; };
struct IAddAppointmentOperation : IAddAppointmentOperation_raw, generate<IAddAppointmentOperation> {};

// IReplaceAppointmentOperation
struct IReplaceAppointmentOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentInformation(Appointment* *value);
	virtual STDMETHODIMP _get_InstanceStartDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_SourcePackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _ReportCompleted(HSTRING itemId);
	virtual STDMETHODIMP _ReportCanceled();
	virtual STDMETHODIMP _ReportError(HSTRING value);
	virtual STDMETHODIMP _DismissUI();
};
template<typename X> struct IReplaceAppointmentOperation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IReplaceAppointmentOperation_adaptor::AppointmentId)->_get_AppointmentId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentId;
		struct : property {
			ptr<Appointment> get() { Appointment* value; hrcheck(enc(&IReplaceAppointmentOperation_adaptor::AppointmentInformation)->_get_AppointmentInformation(&value)); return from_abi(value); }
			ptr<Appointment> operator()() { return get(); }
			operator ptr<Appointment> () { return get(); }
			ptr<Appointment> operator->() { return get(); }
		} AppointmentInformation;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IReplaceAppointmentOperation_adaptor::InstanceStartDate)->_get_InstanceStartDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} InstanceStartDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IReplaceAppointmentOperation_adaptor::SourcePackageFamilyName)->_get_SourcePackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourcePackageFamilyName;
	};
	void ReportCompleted(hstring_ref itemId) { hrcheck(X::get()->_ReportCompleted(itemId)); }
	void ReportCanceled() { hrcheck(X::get()->_ReportCanceled()); }
	void ReportError(hstring_ref value) { hrcheck(X::get()->_ReportError(value)); }
	void DismissUI() { hrcheck(X::get()->_DismissUI()); }
	IReplaceAppointmentOperation_adaptor() {}
};
template<typename X> struct adapt<IReplaceAppointmentOperation, X> : Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation_adaptor<X> { typedef adapt IReplaceAppointmentOperation; };
struct IReplaceAppointmentOperation : IReplaceAppointmentOperation_raw, generate<IReplaceAppointmentOperation> {};

// IRemoveAppointmentOperation
struct IRemoveAppointmentOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentId(HSTRING *value);
	virtual STDMETHODIMP _get_InstanceStartDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_SourcePackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _ReportCompleted();
	virtual STDMETHODIMP _ReportCanceled();
	virtual STDMETHODIMP _ReportError(HSTRING value);
	virtual STDMETHODIMP _DismissUI();
};
template<typename X> struct IRemoveAppointmentOperation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoveAppointmentOperation_adaptor::AppointmentId)->_get_AppointmentId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentId;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IRemoveAppointmentOperation_adaptor::InstanceStartDate)->_get_InstanceStartDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} InstanceStartDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoveAppointmentOperation_adaptor::SourcePackageFamilyName)->_get_SourcePackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourcePackageFamilyName;
	};
	void ReportCompleted() { hrcheck(X::get()->_ReportCompleted()); }
	void ReportCanceled() { hrcheck(X::get()->_ReportCanceled()); }
	void ReportError(hstring_ref value) { hrcheck(X::get()->_ReportError(value)); }
	void DismissUI() { hrcheck(X::get()->_DismissUI()); }
	IRemoveAppointmentOperation_adaptor() {}
};
template<typename X> struct adapt<IRemoveAppointmentOperation, X> : Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation_adaptor<X> { typedef adapt IRemoveAppointmentOperation; };
struct IRemoveAppointmentOperation : IRemoveAppointmentOperation_raw, generate<IRemoveAppointmentOperation> {};

// AppointmentsProviderLaunchActionVerbs
template<typename> struct AppointmentsProviderLaunchActionVerbs_statics {
	static struct _AddAppointment : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>()->_get_AddAppointment(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AddAppointment;
	static struct _RemoveAppointment : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>()->_get_RemoveAppointment(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RemoveAppointment;
	static struct _ReplaceAppointment : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>()->_get_ReplaceAppointment(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ReplaceAppointment;
	static struct _ShowTimeFrame : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>()->_get_ShowTimeFrame(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ShowTimeFrame;
	static struct _ShowAppointmentDetails : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics2>()->_get_ShowAppointmentDetails(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ShowAppointmentDetails;
};
template<typename X> typename AppointmentsProviderLaunchActionVerbs_statics<X>::_AddAppointment AppointmentsProviderLaunchActionVerbs_statics<X>::AddAppointment;
template<typename X> typename AppointmentsProviderLaunchActionVerbs_statics<X>::_RemoveAppointment AppointmentsProviderLaunchActionVerbs_statics<X>::RemoveAppointment;
template<typename X> typename AppointmentsProviderLaunchActionVerbs_statics<X>::_ReplaceAppointment AppointmentsProviderLaunchActionVerbs_statics<X>::ReplaceAppointment;
template<typename X> typename AppointmentsProviderLaunchActionVerbs_statics<X>::_ShowTimeFrame AppointmentsProviderLaunchActionVerbs_statics<X>::ShowTimeFrame;
template<typename X> typename AppointmentsProviderLaunchActionVerbs_statics<X>::_ShowAppointmentDetails AppointmentsProviderLaunchActionVerbs_statics<X>::ShowAppointmentDetails;

template<typename X> struct statics<AppointmentsProviderLaunchActionVerbs, X> : X, Windows::ApplicationModel::Appointments::AppointmentsProvider::AppointmentsProviderLaunchActionVerbs_statics<void> {
	typedef typename X::root_type AppointmentsProviderLaunchActionVerbs;
};
struct AppointmentsProviderLaunchActionVerbs : generate<AppointmentsProviderLaunchActionVerbs> {};

// AddAppointmentOperation
template<typename X> struct statics<AddAppointmentOperation, X> : X {
	typedef typename X::root_type AddAppointmentOperation;
};
struct AddAppointmentOperation : generate<AddAppointmentOperation> {};

// ReplaceAppointmentOperation
template<typename X> struct statics<ReplaceAppointmentOperation, X> : X {
	typedef typename X::root_type ReplaceAppointmentOperation;
};
struct ReplaceAppointmentOperation : generate<ReplaceAppointmentOperation> {};

// RemoveAppointmentOperation
template<typename X> struct statics<RemoveAppointmentOperation, X> : X {
	typedef typename X::root_type RemoveAppointmentOperation;
};
struct RemoveAppointmentOperation : generate<RemoveAppointmentOperation> {};
}}}}
} // namespace iso_winrt
