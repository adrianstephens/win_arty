#pragma once
// generated by isopod tools
// namespaces:
// Windows.Globalization.PhoneNumberFormatting

#include "Windows.Globalization.PhoneNumberFormatting.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Globalization::PhoneNumberFormatting::PhoneNumberFormat> : enum_type<int> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::PredictedPhoneNumberKind> : enum_type<int> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::PhoneNumberParseResult> : enum_type<int> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::PhoneNumberMatchResult> : enum_type<int> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfo> : interface_type<> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfoStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfoFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::PhoneNumberInfo> : class_type<Platform::Object, Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfo, Windows::Foundation::IStringable>, custom_activators {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberFormatter> : interface_type<> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberFormatterStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::PhoneNumberFormatting::PhoneNumberFormatter> : class_type<Platform::Object, Windows::Globalization::PhoneNumberFormatting::IPhoneNumberFormatter> {};

// uuids

template<> struct uuid<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfo> { define_guid(0x1C7CE4DD, 0xC8B4, 0x4EA3, 0x9A, 0xEF, 0xB3, 0x42, 0xE2, 0xC5, 0xB4, 0x17);};
template<> struct uuid<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfoStatics> { define_guid(0x5B3F4F6A, 0x86A9, 0x40E9, 0x86, 0x49, 0x6D, 0x61, 0x16, 0x19, 0x28, 0xD4);};
template<> struct uuid<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfoFactory> { define_guid(0x8202B964, 0xADAA, 0x4CFF, 0x8F, 0xCF, 0x17, 0xE7, 0x51, 0x6A, 0x28, 0xFF);};
template<> struct uuid<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberFormatter> { define_guid(0x1556B49E, 0xBAD4, 0x4B4A, 0x90, 0xD, 0x44, 0x7, 0xAD, 0xB7, 0xC9, 0x81);};
template<> struct uuid<Windows::Globalization::PhoneNumberFormatting::IPhoneNumberFormatterStatics> { define_guid(0x5CA6F931, 0x84D9, 0x414B, 0xAB, 0x4E, 0xA0, 0x55, 0x2C, 0x87, 0x86, 0x2);};

// types

namespace Windows { namespace Globalization { namespace PhoneNumberFormatting {

// IPhoneNumberInfo
struct IPhoneNumberInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_CountryCode(int *value);
	virtual STDMETHODIMP _get_PhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _GetLengthOfGeographicalAreaCode(int *result);
	virtual STDMETHODIMP _GetNationalSignificantNumber(HSTRING *result);
	virtual STDMETHODIMP _GetLengthOfNationalDestinationCode(int *result);
	virtual STDMETHODIMP _PredictNumberKind(PredictedPhoneNumberKind *result);
	virtual STDMETHODIMP _GetGeographicRegionCode(HSTRING *result);
	virtual STDMETHODIMP _CheckNumberMatch(PhoneNumberInfo* otherNumber, PhoneNumberMatchResult *result);
};
template<typename X> struct IPhoneNumberInfo_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IPhoneNumberInfo_adaptor::CountryCode)->_get_CountryCode(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} CountryCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhoneNumberInfo_adaptor::PhoneNumber)->_get_PhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhoneNumber;
	};
	int GetLengthOfGeographicalAreaCode() { int result; hrcheck(X::get()->_GetLengthOfGeographicalAreaCode(&result)); return result; }
	hstring GetNationalSignificantNumber() { HSTRING result; hrcheck(X::get()->_GetNationalSignificantNumber(&result)); return from_abi(result); }
	int GetLengthOfNationalDestinationCode() { int result; hrcheck(X::get()->_GetLengthOfNationalDestinationCode(&result)); return result; }
	PredictedPhoneNumberKind PredictNumberKind() { PredictedPhoneNumberKind result; hrcheck(X::get()->_PredictNumberKind(&result)); return result; }
	hstring GetGeographicRegionCode() { HSTRING result; hrcheck(X::get()->_GetGeographicRegionCode(&result)); return from_abi(result); }
	PhoneNumberMatchResult CheckNumberMatch(pptr<PhoneNumberInfo> otherNumber) { PhoneNumberMatchResult result; hrcheck(X::get()->_CheckNumberMatch(otherNumber, &result)); return result; }
	IPhoneNumberInfo_adaptor() {}
};
template<typename X> struct adapt<IPhoneNumberInfo, X> : Windows::Globalization::PhoneNumberFormatting::IPhoneNumberInfo_adaptor<X> { typedef adapt IPhoneNumberInfo; };
struct IPhoneNumberInfo : IPhoneNumberInfo_raw, generate<IPhoneNumberInfo> {};

// IPhoneNumberInfoStatics
struct IPhoneNumberInfoStatics : IInspectable {
	virtual STDMETHODIMP _TryParse(HSTRING input, PhoneNumberInfo* *phoneNumber, PhoneNumberParseResult *result);
	virtual STDMETHODIMP _TryParseWithRegion(HSTRING input, HSTRING regionCode, PhoneNumberInfo* *phoneNumber, PhoneNumberParseResult *result);
};

// IPhoneNumberInfoFactory
struct IPhoneNumberInfoFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING number, PhoneNumberInfo* *result);
};

// PhoneNumberInfo
template<typename> struct PhoneNumberInfo_statics {
	static PhoneNumberParseResult TryParse(hstring_ref input, pptr<PhoneNumberInfo> *phoneNumber) { PhoneNumberParseResult result; hrcheck(get_activation_factory<PhoneNumberInfo, IPhoneNumberInfoStatics>()->_TryParse(input, phoneNumber, &result)); return result; }
	static PhoneNumberParseResult TryParse(hstring_ref input, hstring_ref regionCode, pptr<PhoneNumberInfo> *phoneNumber) { PhoneNumberParseResult result; hrcheck(get_activation_factory<PhoneNumberInfo, IPhoneNumberInfoStatics>()->_TryParseWithRegion(input, regionCode, phoneNumber, &result)); return result; }
	static PhoneNumberInfo *activate(hstring_ref number) { PhoneNumberInfo *result; hrcheck(get_activation_factory<PhoneNumberInfo, IPhoneNumberInfoFactory>()->_Create(number, &result)); return result; }
};

template<typename X> struct statics<PhoneNumberInfo, X> : X, Windows::Globalization::PhoneNumberFormatting::PhoneNumberInfo_statics<void> {
	using Windows::Globalization::PhoneNumberFormatting::PhoneNumberInfo_statics<void>::activate;
	typedef typename X::root_type PhoneNumberInfo;
};
struct PhoneNumberInfo : generate<PhoneNumberInfo> {};

// IPhoneNumberFormatter
struct IPhoneNumberFormatter_raw : IInspectable {
	virtual STDMETHODIMP _Format(PhoneNumberInfo* number, HSTRING *result);
	virtual STDMETHODIMP _FormatWithOutputFormat(PhoneNumberInfo* number, PhoneNumberFormat numberFormat, HSTRING *result);
	virtual STDMETHODIMP _FormatPartialString(HSTRING number, HSTRING *result);
	virtual STDMETHODIMP _FormatString(HSTRING number, HSTRING *result);
	virtual STDMETHODIMP _FormatStringWithLeftToRightMarkers(HSTRING number, HSTRING *result);
};
template<typename X> struct IPhoneNumberFormatter_adaptor : X {
	hstring Format(pptr<PhoneNumberInfo> number) { HSTRING result; hrcheck(X::get()->_Format(number, &result)); return from_abi(result); }
	hstring Format(pptr<PhoneNumberInfo> number, PhoneNumberFormat numberFormat) { HSTRING result; hrcheck(X::get()->_FormatWithOutputFormat(number, numberFormat, &result)); return from_abi(result); }
	hstring FormatPartialString(hstring_ref number) { HSTRING result; hrcheck(X::get()->_FormatPartialString(number, &result)); return from_abi(result); }
	hstring FormatString(hstring_ref number) { HSTRING result; hrcheck(X::get()->_FormatString(number, &result)); return from_abi(result); }
	hstring FormatStringWithLeftToRightMarkers(hstring_ref number) { HSTRING result; hrcheck(X::get()->_FormatStringWithLeftToRightMarkers(number, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPhoneNumberFormatter, X> : Windows::Globalization::PhoneNumberFormatting::IPhoneNumberFormatter_adaptor<X> { typedef adapt IPhoneNumberFormatter; };
struct IPhoneNumberFormatter : IPhoneNumberFormatter_raw, generate<IPhoneNumberFormatter> {};

// IPhoneNumberFormatterStatics
struct IPhoneNumberFormatterStatics : IInspectable {
	virtual STDMETHODIMP _TryCreate(HSTRING regionCode, PhoneNumberFormatter* *phoneNumber);
	virtual STDMETHODIMP _GetCountryCodeForRegion(HSTRING regionCode, int *result);
	virtual STDMETHODIMP _GetNationalDirectDialingPrefixForRegion(HSTRING regionCode, bool stripNonDigit, HSTRING *result);
	virtual STDMETHODIMP _WrapWithLeftToRightMarkers(HSTRING number, HSTRING *result);
};

// PhoneNumberFormatter
template<typename> struct PhoneNumberFormatter_statics {
	static ptr<PhoneNumberFormatter> TryCreate(hstring_ref regionCode) { PhoneNumberFormatter* phoneNumber; hrcheck(get_activation_factory<PhoneNumberFormatter, IPhoneNumberFormatterStatics>()->_TryCreate(regionCode, &phoneNumber)); return from_abi(phoneNumber); }
	static int GetCountryCodeForRegion(hstring_ref regionCode) { int result; hrcheck(get_activation_factory<PhoneNumberFormatter, IPhoneNumberFormatterStatics>()->_GetCountryCodeForRegion(regionCode, &result)); return result; }
	static hstring GetNationalDirectDialingPrefixForRegion(hstring_ref regionCode, bool stripNonDigit) { HSTRING result; hrcheck(get_activation_factory<PhoneNumberFormatter, IPhoneNumberFormatterStatics>()->_GetNationalDirectDialingPrefixForRegion(regionCode, stripNonDigit, &result)); return from_abi(result); }
	static hstring WrapWithLeftToRightMarkers(hstring_ref number) { HSTRING result; hrcheck(get_activation_factory<PhoneNumberFormatter, IPhoneNumberFormatterStatics>()->_WrapWithLeftToRightMarkers(number, &result)); return from_abi(result); }
};

template<typename X> struct statics<PhoneNumberFormatter, X> : X, Windows::Globalization::PhoneNumberFormatting::PhoneNumberFormatter_statics<void> {
	typedef typename X::root_type PhoneNumberFormatter;
};
struct PhoneNumberFormatter : generate<PhoneNumberFormatter> {
	using IPhoneNumberFormatter::Format;
};
}}}
} // namespace iso_winrt
