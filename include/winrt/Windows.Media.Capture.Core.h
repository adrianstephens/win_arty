#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Capture.Core

#include "Windows.Media.Capture.Core.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Media { namespace Capture {
struct CapturedFrameControlValues;
struct CapturedFrame;
}}}

// defs

template<> struct def<Windows::Media::Capture::Core::IVariablePhotoCapturedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::Core::IVariablePhotoCapturedEventArgs> {};
template<> struct def<Windows::Media::Capture::Core::IVariablePhotoSequenceCapture> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Core::IVariablePhotoSequenceCapture2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Core::VariablePhotoSequenceCapture> : class_type<Platform::Object, Windows::Media::Capture::Core::IVariablePhotoSequenceCapture, Windows::Media::Capture::Core::IVariablePhotoSequenceCapture2> {};

// uuids

template<> struct uuid<Windows::Media::Capture::Core::IVariablePhotoCapturedEventArgs> { define_guid(0xD1EB4C5C, 0x1B53, 0x4E4A, 0x8B, 0x5C, 0xDB, 0x78, 0x87, 0xAC, 0x94, 0x9B);};
template<> struct uuid<Windows::Media::Capture::Core::IVariablePhotoSequenceCapture> { define_guid(0xD0112D1D, 0x31E, 0x4041, 0xA6, 0xD6, 0xBD, 0x74, 0x24, 0x76, 0xA8, 0xEE);};
template<> struct uuid<Windows::Media::Capture::Core::IVariablePhotoSequenceCapture2> { define_guid(0xFE2C62BC, 0x50B0, 0x43E3, 0x91, 0x7C, 0xE3, 0xB9, 0x27, 0x98, 0x94, 0x2F);};

// types

namespace Windows { namespace Media { namespace Capture { namespace Core {

// IVariablePhotoCapturedEventArgs
struct IVariablePhotoCapturedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Frame(CapturedFrame* *value);
	virtual STDMETHODIMP _get_CaptureTimeOffset(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_UsedFrameControllerIndex(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_CapturedFrameControlValues(Capture::CapturedFrameControlValues* *value);
};
template<typename X> struct IVariablePhotoCapturedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IVariablePhotoCapturedEventArgs_adaptor::CaptureTimeOffset)->_get_CaptureTimeOffset(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} CaptureTimeOffset;
		struct : property {
			ptr<Capture::CapturedFrameControlValues> get() { Capture::CapturedFrameControlValues* value; hrcheck(enc(&IVariablePhotoCapturedEventArgs_adaptor::CapturedFrameControlValues)->_get_CapturedFrameControlValues(&value)); return from_abi(value); }
			ptr<Capture::CapturedFrameControlValues> operator()() { return get(); }
			operator ptr<Capture::CapturedFrameControlValues> () { return get(); }
			ptr<Capture::CapturedFrameControlValues> operator->() { return get(); }
		} CapturedFrameControlValues;
		struct : property {
			ptr<CapturedFrame> get() { CapturedFrame* value; hrcheck(enc(&IVariablePhotoCapturedEventArgs_adaptor::Frame)->_get_Frame(&value)); return from_abi(value); }
			ptr<CapturedFrame> operator()() { return get(); }
			operator ptr<CapturedFrame> () { return get(); }
			ptr<CapturedFrame> operator->() { return get(); }
		} Frame;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IVariablePhotoCapturedEventArgs_adaptor::UsedFrameControllerIndex)->_get_UsedFrameControllerIndex(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} UsedFrameControllerIndex;
	};
	IVariablePhotoCapturedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IVariablePhotoCapturedEventArgs, X> : Windows::Media::Capture::Core::IVariablePhotoCapturedEventArgs_adaptor<X> { typedef adapt IVariablePhotoCapturedEventArgs; };
struct IVariablePhotoCapturedEventArgs : IVariablePhotoCapturedEventArgs_raw, generate<IVariablePhotoCapturedEventArgs> {};

// VariablePhotoCapturedEventArgs
template<typename X> struct statics<VariablePhotoCapturedEventArgs, X> : X {
	typedef typename X::root_type VariablePhotoCapturedEventArgs;
};
struct VariablePhotoCapturedEventArgs : generate<VariablePhotoCapturedEventArgs> {};

// IVariablePhotoSequenceCapture
struct IVariablePhotoSequenceCapture_raw : IInspectable {
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _StopAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _FinishAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _add_PhotoCaptured(Foundation::TypedEventHandler<VariablePhotoSequenceCapture*, VariablePhotoCapturedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PhotoCaptured(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<VariablePhotoSequenceCapture*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
};
template<typename X> struct IVariablePhotoSequenceCapture_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VariablePhotoSequenceCapture>, ptr<VariablePhotoCapturedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVariablePhotoSequenceCapture_adaptor::PhotoCaptured)->_add_PhotoCaptured(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVariablePhotoSequenceCapture_adaptor::PhotoCaptured)->_remove_PhotoCaptured(token)); }
		} PhotoCaptured;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<VariablePhotoSequenceCapture>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IVariablePhotoSequenceCapture_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IVariablePhotoSequenceCapture_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	ptr<Foundation::IAsyncAction> StartAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_StartAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> StopAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_StopAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> FinishAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_FinishAsync(&operation)); return from_abi(operation); }
	IVariablePhotoSequenceCapture_adaptor() {}
};
template<typename X> struct adapt<IVariablePhotoSequenceCapture, X> : Windows::Media::Capture::Core::IVariablePhotoSequenceCapture_adaptor<X> { typedef adapt IVariablePhotoSequenceCapture; };
struct IVariablePhotoSequenceCapture : IVariablePhotoSequenceCapture_raw, generate<IVariablePhotoSequenceCapture> {};

// IVariablePhotoSequenceCapture2
struct IVariablePhotoSequenceCapture2_raw : IInspectable {
	virtual STDMETHODIMP _UpdateSettingsAsync(Foundation::IAsyncAction* *operation);
};
template<typename X> struct IVariablePhotoSequenceCapture2_adaptor : X {
	ptr<Foundation::IAsyncAction> UpdateSettingsAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_UpdateSettingsAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IVariablePhotoSequenceCapture2, X> : Windows::Media::Capture::Core::IVariablePhotoSequenceCapture2_adaptor<X> { typedef adapt IVariablePhotoSequenceCapture2; };
struct IVariablePhotoSequenceCapture2 : IVariablePhotoSequenceCapture2_raw, generate<IVariablePhotoSequenceCapture2> {};

// VariablePhotoSequenceCapture
template<typename X> struct statics<VariablePhotoSequenceCapture, X> : X {
	typedef typename X::root_type VariablePhotoSequenceCapture;
};
struct VariablePhotoSequenceCapture : generate<VariablePhotoSequenceCapture> {};
}}}}
} // namespace iso_winrt
