#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.Power.Diagnostics

#include "Windows.System.Power.Diagnostics.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::System::Power::Diagnostics::IForegroundEnergyDiagnosticsStatics> : interface_type<> {};
template<> struct def<Windows::System::Power::Diagnostics::IBackgroundEnergyDiagnosticsStatics> : interface_type<> {};
template<> struct def<Windows::System::Power::Diagnostics::BackgroundEnergyDiagnostics> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Power::Diagnostics::ForegroundEnergyDiagnostics> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::System::Power::Diagnostics::IForegroundEnergyDiagnosticsStatics> { define_guid(0x23CA0917, 0xCD07, 0x4609, 0xBE, 0x15, 0x8F, 0xE8, 0x94, 0xC5, 0xE4, 0x1E);};
template<> struct uuid<Windows::System::Power::Diagnostics::IBackgroundEnergyDiagnosticsStatics> { define_guid(0xD7663702, 0xD3A6, 0x46E0, 0x8F, 0x9B, 0x50, 0xB9, 0x5B, 0xB4, 0xF9, 0xC5);};

// types

namespace Windows { namespace System { namespace Power { namespace Diagnostics {

// IForegroundEnergyDiagnosticsStatics
struct IForegroundEnergyDiagnosticsStatics : IInspectable {
	virtual STDMETHODIMP _get_DeviceSpecificConversionFactor(double *value);
	virtual STDMETHODIMP _ComputeTotalEnergyUsage(unsigned __int64 *value);
	virtual STDMETHODIMP _ResetTotalEnergyUsage();
};

// IBackgroundEnergyDiagnosticsStatics
struct IBackgroundEnergyDiagnosticsStatics : IInspectable {
	virtual STDMETHODIMP _get_DeviceSpecificConversionFactor(double *value);
	virtual STDMETHODIMP _ComputeTotalEnergyUsage(unsigned __int64 *value);
	virtual STDMETHODIMP _ResetTotalEnergyUsage();
};

// BackgroundEnergyDiagnostics
template<typename> struct BackgroundEnergyDiagnostics_statics {
	static struct _DeviceSpecificConversionFactor : property {
		double get() { double value; hrcheck(get_activation_factory<BackgroundEnergyDiagnostics, IBackgroundEnergyDiagnosticsStatics>()->_get_DeviceSpecificConversionFactor(&value)); return value; }
		double operator()() { return get(); }
		operator double () { return get(); }
	} DeviceSpecificConversionFactor;
	static unsigned __int64 ComputeTotalEnergyUsage() { unsigned __int64 value; hrcheck(get_activation_factory<BackgroundEnergyDiagnostics, IBackgroundEnergyDiagnosticsStatics>()->_ComputeTotalEnergyUsage(&value)); return value; }
	static void ResetTotalEnergyUsage() { hrcheck(get_activation_factory<BackgroundEnergyDiagnostics, IBackgroundEnergyDiagnosticsStatics>()->_ResetTotalEnergyUsage()); }
};
template<typename X> typename BackgroundEnergyDiagnostics_statics<X>::_DeviceSpecificConversionFactor BackgroundEnergyDiagnostics_statics<X>::DeviceSpecificConversionFactor;

template<typename X> struct statics<BackgroundEnergyDiagnostics, X> : X, Windows::System::Power::Diagnostics::BackgroundEnergyDiagnostics_statics<void> {
	typedef typename X::root_type BackgroundEnergyDiagnostics;
};
struct BackgroundEnergyDiagnostics : generate<BackgroundEnergyDiagnostics> {};

// ForegroundEnergyDiagnostics
template<typename> struct ForegroundEnergyDiagnostics_statics {
	static struct _DeviceSpecificConversionFactor : property {
		double get() { double value; hrcheck(get_activation_factory<ForegroundEnergyDiagnostics, IForegroundEnergyDiagnosticsStatics>()->_get_DeviceSpecificConversionFactor(&value)); return value; }
		double operator()() { return get(); }
		operator double () { return get(); }
	} DeviceSpecificConversionFactor;
	static unsigned __int64 ComputeTotalEnergyUsage() { unsigned __int64 value; hrcheck(get_activation_factory<ForegroundEnergyDiagnostics, IForegroundEnergyDiagnosticsStatics>()->_ComputeTotalEnergyUsage(&value)); return value; }
	static void ResetTotalEnergyUsage() { hrcheck(get_activation_factory<ForegroundEnergyDiagnostics, IForegroundEnergyDiagnosticsStatics>()->_ResetTotalEnergyUsage()); }
};
template<typename X> typename ForegroundEnergyDiagnostics_statics<X>::_DeviceSpecificConversionFactor ForegroundEnergyDiagnostics_statics<X>::DeviceSpecificConversionFactor;

template<typename X> struct statics<ForegroundEnergyDiagnostics, X> : X, Windows::System::Power::Diagnostics::ForegroundEnergyDiagnostics_statics<void> {
	typedef typename X::root_type ForegroundEnergyDiagnostics;
};
struct ForegroundEnergyDiagnostics : generate<ForegroundEnergyDiagnostics> {};
}}}}
} // namespace iso_winrt
