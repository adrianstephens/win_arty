#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Resources

#include "Windows.ApplicationModel.Resources.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
struct Uri;
}}

// defs

template<> struct def<Windows::ApplicationModel::Resources::IResourceLoader2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::IResourceLoaderStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::IResourceLoaderStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::IResourceLoaderFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::IResourceLoader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::ResourceLoader> : class_type<Platform::Object, Windows::ApplicationModel::Resources::IResourceLoader, Windows::ApplicationModel::Resources::IResourceLoader2>, custom_activators {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Resources::IResourceLoader2> { define_guid(0x10EB6EC6, 0x8138, 0x48C1, 0xBC, 0x65, 0xE1, 0xF1, 0x42, 0x7, 0x36, 0x7C);};
template<> struct uuid<Windows::ApplicationModel::Resources::IResourceLoaderStatics2> { define_guid(0xCC04141, 0x6466, 0x4989, 0x94, 0x94, 0xB, 0x82, 0xDF, 0xC5, 0x3F, 0x1F);};
template<> struct uuid<Windows::ApplicationModel::Resources::IResourceLoaderStatics> { define_guid(0xBF777CE1, 0x19C8, 0x49C2, 0x95, 0x3C, 0x47, 0xE9, 0x22, 0x7B, 0x33, 0x4E);};
template<> struct uuid<Windows::ApplicationModel::Resources::IResourceLoaderFactory> { define_guid(0xC33A3603, 0x69DC, 0x4285, 0xA0, 0x77, 0xD5, 0xC0, 0xE4, 0x7C, 0xCB, 0xE8);};
template<> struct uuid<Windows::ApplicationModel::Resources::IResourceLoader> { define_guid(0x8524908, 0x16EF, 0x45AD, 0xA6, 0x2, 0x29, 0x36, 0x37, 0xD7, 0xE6, 0x1A);};

// types

namespace Windows { namespace ApplicationModel { namespace Resources {

// IResourceLoader2
struct IResourceLoader2_raw : IInspectable {
	virtual STDMETHODIMP _GetStringForUri(Foundation::Uri* uri, HSTRING *value);
};
template<typename X> struct IResourceLoader2_adaptor : X {
	hstring GetStringForUri(pptr<Foundation::Uri> uri) { HSTRING value; hrcheck(X::get()->_GetStringForUri(uri, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IResourceLoader2, X> : Windows::ApplicationModel::Resources::IResourceLoader2_adaptor<X> { typedef adapt IResourceLoader2; };
struct IResourceLoader2 : IResourceLoader2_raw, generate<IResourceLoader2> {};

// IResourceLoaderStatics2
struct IResourceLoaderStatics2 : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(ResourceLoader* *loader);
	virtual STDMETHODIMP _GetForCurrentViewWithName(HSTRING name, ResourceLoader* *loader);
	virtual STDMETHODIMP _GetForViewIndependentUse(ResourceLoader* *loader);
	virtual STDMETHODIMP _GetForViewIndependentUseWithName(HSTRING name, ResourceLoader* *loader);
};

// IResourceLoaderStatics
struct IResourceLoaderStatics : IInspectable {
	virtual STDMETHODIMP _GetStringForReference(Foundation::Uri* uri, HSTRING *value);
};

// IResourceLoaderFactory
struct IResourceLoaderFactory : IInspectable {
	virtual STDMETHODIMP _CreateResourceLoaderByName(HSTRING name, ResourceLoader* *loader);
};

// IResourceLoader
struct IResourceLoader_raw : IInspectable {
	virtual STDMETHODIMP _GetString(HSTRING resource, HSTRING *value);
};
template<typename X> struct IResourceLoader_adaptor : X {
	hstring GetString(hstring_ref resource) { HSTRING value; hrcheck(X::get()->_GetString(resource, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IResourceLoader, X> : Windows::ApplicationModel::Resources::IResourceLoader_adaptor<X> { typedef adapt IResourceLoader; };
struct IResourceLoader : IResourceLoader_raw, generate<IResourceLoader> {};

// ResourceLoader
template<typename> struct ResourceLoader_statics {
	static ptr<ResourceLoader> GetForCurrentView() { ResourceLoader* loader; hrcheck(get_activation_factory<ResourceLoader, IResourceLoaderStatics2>()->_GetForCurrentView(&loader)); return from_abi(loader); }
	static ptr<ResourceLoader> GetForCurrentView(hstring_ref name) { ResourceLoader* loader; hrcheck(get_activation_factory<ResourceLoader, IResourceLoaderStatics2>()->_GetForCurrentViewWithName(name, &loader)); return from_abi(loader); }
	static ptr<ResourceLoader> GetForViewIndependentUse() { ResourceLoader* loader; hrcheck(get_activation_factory<ResourceLoader, IResourceLoaderStatics2>()->_GetForViewIndependentUse(&loader)); return from_abi(loader); }
	static ptr<ResourceLoader> GetForViewIndependentUse(hstring_ref name) { ResourceLoader* loader; hrcheck(get_activation_factory<ResourceLoader, IResourceLoaderStatics2>()->_GetForViewIndependentUseWithName(name, &loader)); return from_abi(loader); }
	static hstring GetStringForReference(pptr<Foundation::Uri> uri) { HSTRING value; hrcheck(get_activation_factory<ResourceLoader, IResourceLoaderStatics>()->_GetStringForReference(uri, &value)); return from_abi(value); }
	static ResourceLoader *activate() { ResourceLoader *t; get_activation_factory<ResourceLoader>()->ActivateInstance((IInspectable**)&t); return t; }
	static ResourceLoader *activate(hstring_ref name) { ResourceLoader *loader; hrcheck(get_activation_factory<ResourceLoader, IResourceLoaderFactory>()->_CreateResourceLoaderByName(name, &loader)); return loader; }
};

template<typename X> struct statics<ResourceLoader, X> : X, Windows::ApplicationModel::Resources::ResourceLoader_statics<void> {
	using Windows::ApplicationModel::Resources::ResourceLoader_statics<void>::activate;
	typedef typename X::root_type ResourceLoader;
};
struct ResourceLoader : generate<ResourceLoader> {};
}}}
} // namespace iso_winrt
