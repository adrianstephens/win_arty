#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.DataTransfer

#include "Windows.ApplicationModel.DataTransfer.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"
#include "Windows.Security.EnterpriseData.0.h"
#include "Windows.Foundation.Collections.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
struct RandomAccessStreamReference;
}
struct StorageFile;
struct IStorageFile;
struct IStorageItem;
}}

// defs

template<> struct def<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::StandardDataFormats> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView> : interface_type<Windows::Foundation::Collections::IMapView<HSTRING, object>, Windows::Foundation::Collections::IIterable<ptr<Windows::Foundation::Collections::IKeyValuePair<HSTRING, object>>>> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView4> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet> : interface_type<Windows::Foundation::Collections::IMap<HSTRING, object>, Windows::Foundation::Collections::IIterable<ptr<Windows::Foundation::Collections::IKeyValuePair<HSTRING, object>>>> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet4> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView4, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataPackagePropertySet> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet4, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataProviderDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataProviderDeferral> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataProviderDeferral> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataProviderRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataProviderRequest> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataProviderRequest> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataProviderHandler> : delegate_type {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataPackageOperation> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs, Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs2> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareProviderHandler> : delegate_type {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IShareProviderOperation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareProviderOperation> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IShareProviderOperation> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IShareProvider> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IShareProviderFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareProvider> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IShareProvider>, custom_activators {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackageView4> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackageView3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackageView2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackageView> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataPackageView> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataPackageView, Windows::ApplicationModel::DataTransfer::IDataPackageView2, Windows::ApplicationModel::DataTransfer::IDataPackageView3, Windows::ApplicationModel::DataTransfer::IDataPackageView4> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IShareTargetInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareTargetInfo> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IShareTargetInfo> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IShareCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareCompletedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IShareCompletedEventArgs> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackage> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackage3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataPackage2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataPackage> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataPackage, Windows::ApplicationModel::DataTransfer::IDataPackage2, Windows::ApplicationModel::DataTransfer::IDataPackage3> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::HtmlFormatHelper> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IClipboardStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::Clipboard> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareUITheme> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IShareUIOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareUIOptions> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IShareUIOptions> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataRequestDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataRequestDeferral> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataRequestDeferral> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataRequest> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataRequest> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IShareProvidersRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ShareProvidersRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IShareProvidersRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataTransferManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::IDataTransferManager2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::DataTransferManager> : class_type<Platform::Object, Windows::ApplicationModel::DataTransfer::IDataTransferManager, Windows::ApplicationModel::DataTransfer::IDataTransferManager2> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::ISharedStorageAccessManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::DataTransfer::SharedStorageAccessManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics> { define_guid(0x7ED681A1, 0xA880, 0x40C9, 0xB4, 0xED, 0xB, 0xEE, 0x1E, 0x15, 0xF5, 0x49);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2> { define_guid(0x42A254F4, 0x9D76, 0x42E8, 0x86, 0x1B, 0x47, 0xC2, 0x5D, 0xD0, 0xCF, 0x71);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics3> { define_guid(0x3B57B069, 0x1D4, 0x474C, 0x8B, 0x5F, 0xBC, 0x8E, 0x27, 0xF3, 0x8B, 0x21);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView> { define_guid(0xB94CEC01, 0xC1A, 0x4C57, 0xBE, 0x55, 0x75, 0xD0, 0x12, 0x89, 0x73, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2> { define_guid(0x6054509B, 0x8EBE, 0x4FEB, 0x9C, 0x1E, 0x75, 0xE6, 0x9D, 0xE5, 0x4B, 0x84);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3> { define_guid(0xDB764CE5, 0xD174, 0x495C, 0x84, 0xFC, 0x1A, 0x51, 0xF6, 0xAB, 0x45, 0xD7);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView4> { define_guid(0x4474C80D, 0xD16F, 0x40AE, 0x95, 0x80, 0x6F, 0x85, 0x62, 0xB9, 0x42, 0x35);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet> { define_guid(0xCD1C93EB, 0x4C4C, 0x443A, 0xA8, 0xD3, 0xF5, 0xC2, 0x41, 0xE9, 0x16, 0x89);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2> { define_guid(0xEB505D4A, 0x9800, 0x46AA, 0xB1, 0x81, 0x7B, 0x6F, 0xF, 0x2B, 0x91, 0x9A);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3> { define_guid(0x9E87FD9B, 0x5205, 0x401B, 0x87, 0x4A, 0x45, 0x56, 0x53, 0xBD, 0x39, 0xE8);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet4> { define_guid(0x6390EBF5, 0x1739, 0x4C74, 0xB2, 0x2F, 0x86, 0x5F, 0xAB, 0x5E, 0x85, 0x45);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataProviderDeferral> { define_guid(0xC2CF2373, 0x2D26, 0x43D9, 0xB6, 0x9D, 0xDC, 0xB8, 0x6D, 0x3, 0xF6, 0xDA);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataProviderRequest> { define_guid(0xEBBC7157, 0xD3C8, 0x47DA, 0xAC, 0xDE, 0xF8, 0x23, 0x88, 0xD5, 0xF7, 0x16);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::DataProviderHandler> { define_guid(0xE7ECD720, 0xF2F4, 0x4A2D, 0x92, 0xE, 0x17, 0xA, 0x2F, 0x48, 0x2A, 0x27);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs> { define_guid(0xE7AF329D, 0x51D, 0x4FAB, 0xB1, 0xA9, 0x47, 0xFD, 0x77, 0xF7, 0xA, 0x41);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs2> { define_guid(0x858FA073, 0x1E19, 0x4105, 0xB2, 0xF7, 0xC8, 0x47, 0x88, 0x8, 0xD5, 0x62);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::ShareProviderHandler> { define_guid(0xE7F9D9BA, 0xE1BA, 0x4E4D, 0xBD, 0x65, 0xD4, 0x38, 0x45, 0xD3, 0x21, 0x2F);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IShareProviderOperation> { define_guid(0x19CEF937, 0xD435, 0x4179, 0xB6, 0xAF, 0x14, 0xE0, 0x49, 0x2B, 0x69, 0xF6);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IShareProvider> { define_guid(0x2FABE026, 0x443E, 0x4CDA, 0xAF, 0x25, 0x8D, 0x81, 0x7, 0xE, 0xFD, 0x80);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IShareProviderFactory> { define_guid(0x172A174C, 0xE79E, 0x4F6D, 0xB0, 0x7D, 0x12, 0x8F, 0x46, 0x9E, 0x2, 0x96);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackageView4> { define_guid(0xDFE96F1F, 0xE042, 0x4433, 0xA0, 0x9F, 0x26, 0xD6, 0xFF, 0xDA, 0x8B, 0x85);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackageView3> { define_guid(0xD37771A8, 0xDDAD, 0x4288, 0x84, 0x28, 0xD1, 0xCA, 0xE3, 0x94, 0x12, 0x8B);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackageView2> { define_guid(0x40ECBA95, 0x2450, 0x4C1D, 0xB6, 0xB4, 0xED, 0x45, 0x46, 0x3D, 0xEE, 0x9C);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackageView> { define_guid(0x7B840471, 0x5900, 0x4D85, 0xA9, 0xB, 0x10, 0xCB, 0x85, 0xFE, 0x35, 0x52);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IShareTargetInfo> { define_guid(0x385BE607, 0xC6E8, 0x4114, 0xB2, 0x94, 0x28, 0xF3, 0xBB, 0x6F, 0x99, 0x4);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IShareCompletedEventArgs> { define_guid(0x4574C442, 0xF913, 0x4F60, 0x9D, 0xF7, 0xCC, 0x40, 0x60, 0xAB, 0x19, 0x16);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackage> { define_guid(0x61EBF5C7, 0xEFEA, 0x4346, 0x95, 0x54, 0x98, 0x1D, 0x7E, 0x19, 0x8F, 0xFE);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackage3> { define_guid(0x88F31F5D, 0x787B, 0x4D32, 0x96, 0x5A, 0xA9, 0x83, 0x81, 0x5, 0xA0, 0x56);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataPackage2> { define_guid(0x41C1FE9, 0x2409, 0x45E1, 0xA5, 0x38, 0x4C, 0x53, 0xEE, 0xEE, 0x4, 0xA7);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics> { define_guid(0xE22E7749, 0xDD70, 0x446F, 0xAE, 0xFC, 0x61, 0xCE, 0xE5, 0x9F, 0x65, 0x5E);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IClipboardStatics> { define_guid(0xC627E291, 0x34E2, 0x4963, 0x8E, 0xED, 0x93, 0xCB, 0xB0, 0xEA, 0x3D, 0x70);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IShareUIOptions> { define_guid(0x72FA8A80, 0x342F, 0x4D90, 0x95, 0x51, 0x2A, 0xE0, 0x4E, 0x37, 0x68, 0xC);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataRequestDeferral> { define_guid(0x6DC4B89F, 0x386, 0x4263, 0x87, 0xC1, 0xED, 0x7D, 0xCE, 0x30, 0x89, 0xE);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataRequest> { define_guid(0x4341AE3B, 0xFC12, 0x4E53, 0x8C, 0x2, 0xAC, 0x71, 0x4C, 0x41, 0x5A, 0x27);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs> { define_guid(0xCB8BA807, 0x6AC5, 0x43C9, 0x8A, 0xC5, 0x9B, 0xA2, 0x32, 0x16, 0x31, 0x82);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IShareProvidersRequestedEventArgs> { define_guid(0xF888F356, 0xA3F8, 0x4FCE, 0x85, 0xE4, 0x88, 0x26, 0xE6, 0x3B, 0xE7, 0x99);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs> { define_guid(0xCA6FB8AC, 0x2987, 0x4EE3, 0x9C, 0x54, 0xD8, 0xAF, 0xBC, 0xB8, 0x6C, 0x1D);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataTransferManager> { define_guid(0xA5CAEE9B, 0x8708, 0x49D1, 0x8D, 0x36, 0x67, 0xD2, 0x5A, 0x8D, 0xA0, 0xC);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics3> { define_guid(0x5845473, 0x6C82, 0x4F5C, 0xAC, 0x23, 0x62, 0xE4, 0x58, 0x36, 0x1F, 0xAC);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics2> { define_guid(0xC54EC2EC, 0x9F97, 0x4D63, 0x98, 0x68, 0x39, 0x5E, 0x27, 0x1A, 0xD8, 0xF5);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics> { define_guid(0xA9DA01AA, 0xE00E, 0x4CFE, 0xAA, 0x44, 0x2D, 0xD9, 0x32, 0xDC, 0xA3, 0xD8);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::IDataTransferManager2> { define_guid(0x30AE7D71, 0x8BA8, 0x4C02, 0x8E, 0x3F, 0xDD, 0xB2, 0x3B, 0x38, 0x87, 0x15);};
template<> struct uuid<Windows::ApplicationModel::DataTransfer::ISharedStorageAccessManagerStatics> { define_guid(0xC6132ADA, 0x34B1, 0x4849, 0xBD, 0x5F, 0xD0, 0x9F, 0xEE, 0x31, 0x58, 0xC5);};

// types

namespace Windows { namespace ApplicationModel { namespace DataTransfer {

// IStandardDataFormatsStatics
struct IStandardDataFormatsStatics : IInspectable {
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _get_Uri(HSTRING *value);
	virtual STDMETHODIMP _get_Html(HSTRING *value);
	virtual STDMETHODIMP _get_Rtf(HSTRING *value);
	virtual STDMETHODIMP _get_Bitmap(HSTRING *value);
	virtual STDMETHODIMP _get_StorageItems(HSTRING *value);
};

// IStandardDataFormatsStatics2
struct IStandardDataFormatsStatics2 : IInspectable {
	virtual STDMETHODIMP _get_WebLink(HSTRING *value);
	virtual STDMETHODIMP _get_ApplicationLink(HSTRING *value);
};

// IStandardDataFormatsStatics3
struct IStandardDataFormatsStatics3 : IInspectable {
	virtual STDMETHODIMP _get_UserActivityJsonArray(HSTRING *value);
};

// StandardDataFormats
template<typename> struct StandardDataFormats_statics {
	static struct _Bitmap : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics>()->_get_Bitmap(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Bitmap;
	static struct _Html : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics>()->_get_Html(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Html;
	static struct _Rtf : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics>()->_get_Rtf(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rtf;
	static struct _StorageItems : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics>()->_get_StorageItems(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} StorageItems;
	static struct _Text : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics>()->_get_Text(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Text;
	static struct _Uri : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics>()->_get_Uri(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Uri;
	static struct _ApplicationLink : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics2>()->_get_ApplicationLink(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ApplicationLink;
	static struct _WebLink : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics2>()->_get_WebLink(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WebLink;
	static struct _UserActivityJsonArray : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<StandardDataFormats, IStandardDataFormatsStatics3>()->_get_UserActivityJsonArray(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UserActivityJsonArray;
};
template<typename X> typename StandardDataFormats_statics<X>::_Bitmap StandardDataFormats_statics<X>::Bitmap;
template<typename X> typename StandardDataFormats_statics<X>::_Html StandardDataFormats_statics<X>::Html;
template<typename X> typename StandardDataFormats_statics<X>::_Rtf StandardDataFormats_statics<X>::Rtf;
template<typename X> typename StandardDataFormats_statics<X>::_StorageItems StandardDataFormats_statics<X>::StorageItems;
template<typename X> typename StandardDataFormats_statics<X>::_Text StandardDataFormats_statics<X>::Text;
template<typename X> typename StandardDataFormats_statics<X>::_Uri StandardDataFormats_statics<X>::Uri;
template<typename X> typename StandardDataFormats_statics<X>::_ApplicationLink StandardDataFormats_statics<X>::ApplicationLink;
template<typename X> typename StandardDataFormats_statics<X>::_WebLink StandardDataFormats_statics<X>::WebLink;
template<typename X> typename StandardDataFormats_statics<X>::_UserActivityJsonArray StandardDataFormats_statics<X>::UserActivityJsonArray;

template<typename X> struct statics<StandardDataFormats, X> : X, Windows::ApplicationModel::DataTransfer::StandardDataFormats_statics<void> {
	typedef typename X::root_type StandardDataFormats;
};
struct StandardDataFormats : generate<StandardDataFormats> {};

// IDataPackagePropertySetView
struct IDataPackagePropertySetView_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::RandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_FileTypes(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_ApplicationName(HSTRING *value);
	virtual STDMETHODIMP _get_ApplicationListingUri(Foundation::Uri* *value);
};
template<typename X> struct IDataPackagePropertySetView_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDataPackagePropertySetView_adaptor::ApplicationListingUri)->_get_ApplicationListingUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ApplicationListingUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySetView_adaptor::ApplicationName)->_get_ApplicationName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ApplicationName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySetView_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IDataPackagePropertySetView_adaptor::FileTypes)->_get_FileTypes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} FileTypes;
		struct : property {
			ptr<Storage::Streams::RandomAccessStreamReference> get() { Storage::Streams::RandomAccessStreamReference* value; hrcheck(enc(&IDataPackagePropertySetView_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::RandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator->() { return get(); }
		} Thumbnail;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySetView_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IDataPackagePropertySetView_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySetView, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView_adaptor<X> { typedef adapt IDataPackagePropertySetView; };
struct IDataPackagePropertySetView : IDataPackagePropertySetView_raw, generate<IDataPackagePropertySetView> {};

// IDataPackagePropertySetView2
struct IDataPackagePropertySetView2_raw : IInspectable {
	virtual STDMETHODIMP _get_PackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _get_ContentSourceWebLink(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ContentSourceApplicationLink(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Square30x30Logo(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_LogoBackgroundColor(UI::Color *value);
};
template<typename X> struct IDataPackagePropertySetView2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDataPackagePropertySetView2_adaptor::ContentSourceApplicationLink)->_get_ContentSourceApplicationLink(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ContentSourceApplicationLink;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDataPackagePropertySetView2_adaptor::ContentSourceWebLink)->_get_ContentSourceWebLink(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ContentSourceWebLink;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IDataPackagePropertySetView2_adaptor::LogoBackgroundColor)->_get_LogoBackgroundColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
		} LogoBackgroundColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySetView2_adaptor::PackageFamilyName)->_get_PackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PackageFamilyName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IDataPackagePropertySetView2_adaptor::Square30x30Logo)->_get_Square30x30Logo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} Square30x30Logo;
	};
	IDataPackagePropertySetView2_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySetView2, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2_adaptor<X> { typedef adapt IDataPackagePropertySetView2; };
struct IDataPackagePropertySetView2 : IDataPackagePropertySetView2_raw, generate<IDataPackagePropertySetView2> {};

// IDataPackagePropertySetView3
struct IDataPackagePropertySetView3_raw : IInspectable {
	virtual STDMETHODIMP _get_EnterpriseId(HSTRING *value);
};
template<typename X> struct IDataPackagePropertySetView3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySetView3_adaptor::EnterpriseId)->_get_EnterpriseId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} EnterpriseId;
	};
	IDataPackagePropertySetView3_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySetView3, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3_adaptor<X> { typedef adapt IDataPackagePropertySetView3; };
struct IDataPackagePropertySetView3 : IDataPackagePropertySetView3_raw, generate<IDataPackagePropertySetView3> {};

// IDataPackagePropertySetView4
struct IDataPackagePropertySetView4_raw : IInspectable {
	virtual STDMETHODIMP _get_ContentSourceUserActivityJson(HSTRING *value);
};
template<typename X> struct IDataPackagePropertySetView4_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySetView4_adaptor::ContentSourceUserActivityJson)->_get_ContentSourceUserActivityJson(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ContentSourceUserActivityJson;
	};
	IDataPackagePropertySetView4_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySetView4, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView4_adaptor<X> { typedef adapt IDataPackagePropertySetView4; };
struct IDataPackagePropertySetView4 : IDataPackagePropertySetView4_raw, generate<IDataPackagePropertySetView4> {};

// IDataPackagePropertySet
struct IDataPackagePropertySet_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Thumbnail(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_FileTypes(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_ApplicationName(HSTRING *value);
	virtual STDMETHODIMP _put_ApplicationName(HSTRING value);
	virtual STDMETHODIMP _get_ApplicationListingUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ApplicationListingUri(Foundation::Uri* value);
};
template<typename X> struct IDataPackagePropertySet_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDataPackagePropertySet_adaptor::ApplicationListingUri)->_get_ApplicationListingUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IDataPackagePropertySet_adaptor::ApplicationListingUri)->_put_ApplicationListingUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ApplicationListingUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySet_adaptor::ApplicationName)->_get_ApplicationName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDataPackagePropertySet_adaptor::ApplicationName)->_put_ApplicationName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ApplicationName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySet_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDataPackagePropertySet_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IDataPackagePropertySet_adaptor::FileTypes)->_get_FileTypes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} FileTypes;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IDataPackagePropertySet_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IDataPackagePropertySet_adaptor::Thumbnail)->_put_Thumbnail(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Thumbnail;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySet_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDataPackagePropertySet_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	IDataPackagePropertySet_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySet, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet_adaptor<X> { typedef adapt IDataPackagePropertySet; };
struct IDataPackagePropertySet : IDataPackagePropertySet_raw, generate<IDataPackagePropertySet> {};

// IDataPackagePropertySet2
struct IDataPackagePropertySet2_raw : IInspectable {
	virtual STDMETHODIMP _get_ContentSourceWebLink(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ContentSourceWebLink(Foundation::Uri* value);
	virtual STDMETHODIMP _get_ContentSourceApplicationLink(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ContentSourceApplicationLink(Foundation::Uri* value);
	virtual STDMETHODIMP _get_PackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _put_PackageFamilyName(HSTRING value);
	virtual STDMETHODIMP _get_Square30x30Logo(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Square30x30Logo(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_LogoBackgroundColor(UI::Color *value);
	virtual STDMETHODIMP _put_LogoBackgroundColor(UI::Color value);
};
template<typename X> struct IDataPackagePropertySet2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDataPackagePropertySet2_adaptor::ContentSourceApplicationLink)->_get_ContentSourceApplicationLink(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IDataPackagePropertySet2_adaptor::ContentSourceApplicationLink)->_put_ContentSourceApplicationLink(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ContentSourceApplicationLink;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IDataPackagePropertySet2_adaptor::ContentSourceWebLink)->_get_ContentSourceWebLink(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IDataPackagePropertySet2_adaptor::ContentSourceWebLink)->_put_ContentSourceWebLink(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ContentSourceWebLink;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IDataPackagePropertySet2_adaptor::LogoBackgroundColor)->_get_LogoBackgroundColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IDataPackagePropertySet2_adaptor::LogoBackgroundColor)->_put_LogoBackgroundColor(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} LogoBackgroundColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySet2_adaptor::PackageFamilyName)->_get_PackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDataPackagePropertySet2_adaptor::PackageFamilyName)->_put_PackageFamilyName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PackageFamilyName;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IDataPackagePropertySet2_adaptor::Square30x30Logo)->_get_Square30x30Logo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IDataPackagePropertySet2_adaptor::Square30x30Logo)->_put_Square30x30Logo(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Square30x30Logo;
	};
	IDataPackagePropertySet2_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySet2, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2_adaptor<X> { typedef adapt IDataPackagePropertySet2; };
struct IDataPackagePropertySet2 : IDataPackagePropertySet2_raw, generate<IDataPackagePropertySet2> {};

// IDataPackagePropertySet3
struct IDataPackagePropertySet3_raw : IInspectable {
	virtual STDMETHODIMP _get_EnterpriseId(HSTRING *value);
	virtual STDMETHODIMP _put_EnterpriseId(HSTRING value);
};
template<typename X> struct IDataPackagePropertySet3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySet3_adaptor::EnterpriseId)->_get_EnterpriseId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDataPackagePropertySet3_adaptor::EnterpriseId)->_put_EnterpriseId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} EnterpriseId;
	};
	IDataPackagePropertySet3_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySet3, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3_adaptor<X> { typedef adapt IDataPackagePropertySet3; };
struct IDataPackagePropertySet3 : IDataPackagePropertySet3_raw, generate<IDataPackagePropertySet3> {};

// IDataPackagePropertySet4
struct IDataPackagePropertySet4_raw : IInspectable {
	virtual STDMETHODIMP _get_ContentSourceUserActivityJson(HSTRING *value);
	virtual STDMETHODIMP _put_ContentSourceUserActivityJson(HSTRING value);
};
template<typename X> struct IDataPackagePropertySet4_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataPackagePropertySet4_adaptor::ContentSourceUserActivityJson)->_get_ContentSourceUserActivityJson(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDataPackagePropertySet4_adaptor::ContentSourceUserActivityJson)->_put_ContentSourceUserActivityJson(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContentSourceUserActivityJson;
	};
	IDataPackagePropertySet4_adaptor() {}
};
template<typename X> struct adapt<IDataPackagePropertySet4, X> : Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet4_adaptor<X> { typedef adapt IDataPackagePropertySet4; };
struct IDataPackagePropertySet4 : IDataPackagePropertySet4_raw, generate<IDataPackagePropertySet4> {};

// DataPackagePropertySetView
template<typename X> struct statics<DataPackagePropertySetView, X> : X {
	typedef typename X::root_type DataPackagePropertySetView;
};
struct DataPackagePropertySetView : generate<DataPackagePropertySetView> {};

// DataPackagePropertySet
template<typename X> struct statics<DataPackagePropertySet, X> : X {
	typedef typename X::root_type DataPackagePropertySet;
};
struct DataPackagePropertySet : generate<DataPackagePropertySet> {};

// IDataProviderDeferral
struct IDataProviderDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IDataProviderDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IDataProviderDeferral, X> : Windows::ApplicationModel::DataTransfer::IDataProviderDeferral_adaptor<X> { typedef adapt IDataProviderDeferral; };
struct IDataProviderDeferral : IDataProviderDeferral_raw, generate<IDataProviderDeferral> {};

// DataProviderDeferral
template<typename X> struct statics<DataProviderDeferral, X> : X {
	typedef typename X::root_type DataProviderDeferral;
};
struct DataProviderDeferral : generate<DataProviderDeferral> {};

// IDataProviderRequest
struct IDataProviderRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_FormatId(HSTRING *value);
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
	virtual STDMETHODIMP _GetDeferral(DataProviderDeferral* *value);
	virtual STDMETHODIMP _SetData(IInspectable* value);
};
template<typename X> struct IDataProviderRequest_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IDataProviderRequest_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDataProviderRequest_adaptor::FormatId)->_get_FormatId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FormatId;
	};
	ptr<DataProviderDeferral> GetDeferral() { DataProviderDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	void SetData(object_ref value) { hrcheck(X::get()->_SetData(value)); }
	IDataProviderRequest_adaptor() {}
};
template<typename X> struct adapt<IDataProviderRequest, X> : Windows::ApplicationModel::DataTransfer::IDataProviderRequest_adaptor<X> { typedef adapt IDataProviderRequest; };
struct IDataProviderRequest : IDataProviderRequest_raw, generate<IDataProviderRequest> {};

// DataProviderRequest
template<typename X> struct statics<DataProviderRequest, X> : X {
	typedef typename X::root_type DataProviderRequest;
};
struct DataProviderRequest : generate<DataProviderRequest> {};

// DataProviderHandler
struct DataProviderHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(DataProviderRequest* request) = 0;
};

// IOperationCompletedEventArgs
struct IOperationCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Operation(DataPackageOperation *value);
};
template<typename X> struct IOperationCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			DataPackageOperation get() { DataPackageOperation value; hrcheck(enc(&IOperationCompletedEventArgs_adaptor::Operation)->_get_Operation(&value)); return value; }
			DataPackageOperation operator()() { return get(); }
			operator DataPackageOperation () { return get(); }
		} Operation;
	};
	IOperationCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IOperationCompletedEventArgs, X> : Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs_adaptor<X> { typedef adapt IOperationCompletedEventArgs; };
struct IOperationCompletedEventArgs : IOperationCompletedEventArgs_raw, generate<IOperationCompletedEventArgs> {};

// IOperationCompletedEventArgs2
struct IOperationCompletedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_AcceptedFormatId(HSTRING *value);
};
template<typename X> struct IOperationCompletedEventArgs2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IOperationCompletedEventArgs2_adaptor::AcceptedFormatId)->_get_AcceptedFormatId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AcceptedFormatId;
	};
	IOperationCompletedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IOperationCompletedEventArgs2, X> : Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs2_adaptor<X> { typedef adapt IOperationCompletedEventArgs2; };
struct IOperationCompletedEventArgs2 : IOperationCompletedEventArgs2_raw, generate<IOperationCompletedEventArgs2> {};

// OperationCompletedEventArgs
template<typename X> struct statics<OperationCompletedEventArgs, X> : X {
	typedef typename X::root_type OperationCompletedEventArgs;
};
struct OperationCompletedEventArgs : generate<OperationCompletedEventArgs> {};

// ShareProviderHandler
struct ShareProviderHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(ShareProviderOperation* operation) = 0;
};

// IShareProviderOperation
struct IShareProviderOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(DataPackageView* *value);
	virtual STDMETHODIMP _get_Provider(ShareProvider* *value);
	virtual STDMETHODIMP _ReportCompleted();
};
template<typename X> struct IShareProviderOperation_adaptor : X {
	union {
		struct : property {
			ptr<DataPackageView> get() { DataPackageView* value; hrcheck(enc(&IShareProviderOperation_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<DataPackageView> operator()() { return get(); }
			operator ptr<DataPackageView> () { return get(); }
			ptr<DataPackageView> operator->() { return get(); }
		} Data;
		struct : property {
			ptr<ShareProvider> get() { ShareProvider* value; hrcheck(enc(&IShareProviderOperation_adaptor::Provider)->_get_Provider(&value)); return from_abi(value); }
			ptr<ShareProvider> operator()() { return get(); }
			operator ptr<ShareProvider> () { return get(); }
			ptr<ShareProvider> operator->() { return get(); }
		} Provider;
	};
	void ReportCompleted() { hrcheck(X::get()->_ReportCompleted()); }
	IShareProviderOperation_adaptor() {}
};
template<typename X> struct adapt<IShareProviderOperation, X> : Windows::ApplicationModel::DataTransfer::IShareProviderOperation_adaptor<X> { typedef adapt IShareProviderOperation; };
struct IShareProviderOperation : IShareProviderOperation_raw, generate<IShareProviderOperation> {};

// ShareProviderOperation
template<typename X> struct statics<ShareProviderOperation, X> : X {
	typedef typename X::root_type ShareProviderOperation;
};
struct ShareProviderOperation : generate<ShareProviderOperation> {};

// IShareProvider
struct IShareProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayIcon(Storage::Streams::RandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_BackgroundColor(UI::Color *value);
	virtual STDMETHODIMP _get_Tag(IInspectable* *value);
	virtual STDMETHODIMP _put_Tag(IInspectable* value);
};
template<typename X> struct IShareProvider_adaptor : X {
	union {
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IShareProvider_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
		} BackgroundColor;
		struct : property {
			ptr<Storage::Streams::RandomAccessStreamReference> get() { Storage::Streams::RandomAccessStreamReference* value; hrcheck(enc(&IShareProvider_adaptor::DisplayIcon)->_get_DisplayIcon(&value)); return from_abi(value); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::RandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::RandomAccessStreamReference> operator->() { return get(); }
		} DisplayIcon;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IShareProvider_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
			void put(object_ref value) { hrcheck(enc(&IShareProvider_adaptor::Tag)->_put_Tag(value)); }
			void operator=(object_ref value) { put(move(value)); }
			void operator()(object_ref value) { put(move(value)); }
		} Tag;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IShareProvider_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IShareProvider_adaptor() {}
};
template<typename X> struct adapt<IShareProvider, X> : Windows::ApplicationModel::DataTransfer::IShareProvider_adaptor<X> { typedef adapt IShareProvider; };
struct IShareProvider : IShareProvider_raw, generate<IShareProvider> {};

// IShareProviderFactory
struct IShareProviderFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING title, Storage::Streams::RandomAccessStreamReference* displayIcon, UI::Color backgroundColor, ShareProviderHandler* handler, ShareProvider* *result);
};

// ShareProvider
template<typename> struct ShareProvider_statics {
	static ShareProvider *activate(hstring_ref title, pptr<Storage::Streams::RandomAccessStreamReference> displayIcon, const UI::Color& backgroundColor, handler_ref<ShareProviderHandler> handler) { ShareProvider *result; hrcheck(get_activation_factory<ShareProvider, IShareProviderFactory>()->_Create(title, displayIcon, backgroundColor, handler, &result)); return result; }
};

template<typename X> struct statics<ShareProvider, X> : X, Windows::ApplicationModel::DataTransfer::ShareProvider_statics<void> {
	using Windows::ApplicationModel::DataTransfer::ShareProvider_statics<void>::activate;
	typedef typename X::root_type ShareProvider;
};
struct ShareProvider : generate<ShareProvider> {};

// IDataPackageView4
struct IDataPackageView4_raw : IInspectable {
	virtual STDMETHODIMP _SetAcceptedFormatId(HSTRING formatId);
};
template<typename X> struct IDataPackageView4_adaptor : X {
	void SetAcceptedFormatId(hstring_ref formatId) { hrcheck(X::get()->_SetAcceptedFormatId(formatId)); }
};
template<typename X> struct adapt<IDataPackageView4, X> : Windows::ApplicationModel::DataTransfer::IDataPackageView4_adaptor<X> { typedef adapt IDataPackageView4; };
struct IDataPackageView4 : IDataPackageView4_raw, generate<IDataPackageView4> {};

// IDataPackageView3
struct IDataPackageView3_raw : IInspectable {
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<Security::EnterpriseData::ProtectionPolicyEvaluationResult>* *operation);
	virtual STDMETHODIMP _RequestAccessWithEnterpriseIdAsync(HSTRING enterpriseId, Foundation::IAsyncOperation<Security::EnterpriseData::ProtectionPolicyEvaluationResult>* *operation);
	virtual STDMETHODIMP _UnlockAndAssumeEnterpriseIdentity(Security::EnterpriseData::ProtectionPolicyEvaluationResult *result);
};
template<typename X> struct IDataPackageView3_adaptor : X {
	ptr<Foundation::IAsyncOperation<Security::EnterpriseData::ProtectionPolicyEvaluationResult>> RequestAccessAsync() { Foundation::IAsyncOperation<Security::EnterpriseData::ProtectionPolicyEvaluationResult>* operation; hrcheck(X::get()->_RequestAccessAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<Security::EnterpriseData::ProtectionPolicyEvaluationResult>> RequestAccessAsync(hstring_ref enterpriseId) { Foundation::IAsyncOperation<Security::EnterpriseData::ProtectionPolicyEvaluationResult>* operation; hrcheck(X::get()->_RequestAccessWithEnterpriseIdAsync(enterpriseId, &operation)); return from_abi(operation); }
	Security::EnterpriseData::ProtectionPolicyEvaluationResult UnlockAndAssumeEnterpriseIdentity() { Security::EnterpriseData::ProtectionPolicyEvaluationResult result; hrcheck(X::get()->_UnlockAndAssumeEnterpriseIdentity(&result)); return result; }
};
template<typename X> struct adapt<IDataPackageView3, X> : Windows::ApplicationModel::DataTransfer::IDataPackageView3_adaptor<X> { typedef adapt IDataPackageView3; };
struct IDataPackageView3 : IDataPackageView3_raw, generate<IDataPackageView3> {};

// IDataPackageView2
struct IDataPackageView2_raw : IInspectable {
	virtual STDMETHODIMP _GetApplicationLinkAsync(Foundation::IAsyncOperation<Foundation::Uri*>* *operation);
	virtual STDMETHODIMP _GetWebLinkAsync(Foundation::IAsyncOperation<Foundation::Uri*>* *operation);
};
template<typename X> struct IDataPackageView2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Uri>>> GetApplicationLinkAsync() { Foundation::IAsyncOperation<Foundation::Uri*>* operation; hrcheck(X::get()->_GetApplicationLinkAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Uri>>> GetWebLinkAsync() { Foundation::IAsyncOperation<Foundation::Uri*>* operation; hrcheck(X::get()->_GetWebLinkAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IDataPackageView2, X> : Windows::ApplicationModel::DataTransfer::IDataPackageView2_adaptor<X> { typedef adapt IDataPackageView2; };
struct IDataPackageView2 : IDataPackageView2_raw, generate<IDataPackageView2> {};

// IDataPackageView
struct IDataPackageView_raw : IInspectable {
	virtual STDMETHODIMP _get_Properties(DataPackagePropertySetView* *value);
	virtual STDMETHODIMP _get_RequestedOperation(DataPackageOperation *value);
	virtual STDMETHODIMP _ReportOperationCompleted(DataPackageOperation value);
	virtual STDMETHODIMP _get_AvailableFormats(Foundation::Collections::IVectorView<HSTRING>* *formatIds);
	virtual STDMETHODIMP _Contains(HSTRING formatId, bool *value);
	virtual STDMETHODIMP _GetDataAsync(HSTRING formatId, Foundation::IAsyncOperation<IInspectable*>* *operation);
	virtual STDMETHODIMP _GetTextAsync(Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetCustomTextAsync(HSTRING formatId, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetUriAsync(Foundation::IAsyncOperation<Foundation::Uri*>* *operation);
	virtual STDMETHODIMP _GetHtmlFormatAsync(Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetResourceMapAsync(Foundation::IAsyncOperation<Foundation::Collections::IMapView<HSTRING, Storage::Streams::RandomAccessStreamReference*>*>* *operation);
	virtual STDMETHODIMP _GetRtfAsync(Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetBitmapAsync(Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* *operation);
	virtual STDMETHODIMP _GetStorageItemsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Storage::IStorageItem*>*>* *operation);
};
template<typename X> struct IDataPackageView_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* formatIds; hrcheck(enc(&IDataPackageView_adaptor::AvailableFormats)->_get_AvailableFormats(&formatIds)); return from_abi(formatIds); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} AvailableFormats;
		struct : property {
			ptr<DataPackagePropertySetView> get() { DataPackagePropertySetView* value; hrcheck(enc(&IDataPackageView_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<DataPackagePropertySetView> operator()() { return get(); }
			operator ptr<DataPackagePropertySetView> () { return get(); }
			ptr<DataPackagePropertySetView> operator->() { return get(); }
		} Properties;
		struct : property {
			DataPackageOperation get() { DataPackageOperation value; hrcheck(enc(&IDataPackageView_adaptor::RequestedOperation)->_get_RequestedOperation(&value)); return value; }
			DataPackageOperation operator()() { return get(); }
			operator DataPackageOperation () { return get(); }
		} RequestedOperation;
	};
	void ReportOperationCompleted(DataPackageOperation value) { hrcheck(X::get()->_ReportOperationCompleted(value)); }
	bool Contains(hstring_ref formatId) { bool value; hrcheck(X::get()->_Contains(formatId, &value)); return value; }
	ptr<Foundation::IAsyncOperation<object>> GetDataAsync(hstring_ref formatId) { Foundation::IAsyncOperation<IInspectable*>* operation; hrcheck(X::get()->_GetDataAsync(formatId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> GetTextAsync() { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_GetTextAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> GetTextAsync(hstring_ref formatId) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_GetCustomTextAsync(formatId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Uri>>> GetUriAsync() { Foundation::IAsyncOperation<Foundation::Uri*>* operation; hrcheck(X::get()->_GetUriAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> GetHtmlFormatAsync() { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_GetHtmlFormatAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMapView<hstring, ptr<Storage::Streams::RandomAccessStreamReference>>>>> GetResourceMapAsync() { Foundation::IAsyncOperation<Foundation::Collections::IMapView<HSTRING, Storage::Streams::RandomAccessStreamReference*>*>* operation; hrcheck(X::get()->_GetResourceMapAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> GetRtfAsync() { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_GetRtfAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::RandomAccessStreamReference>>> GetBitmapAsync() { Foundation::IAsyncOperation<Storage::Streams::RandomAccessStreamReference*>* operation; hrcheck(X::get()->_GetBitmapAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Storage::IStorageItem>>>>> GetStorageItemsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Storage::IStorageItem*>*>* operation; hrcheck(X::get()->_GetStorageItemsAsync(&operation)); return from_abi(operation); }
	IDataPackageView_adaptor() {}
};
template<typename X> struct adapt<IDataPackageView, X> : Windows::ApplicationModel::DataTransfer::IDataPackageView_adaptor<X> { typedef adapt IDataPackageView; };
struct IDataPackageView : IDataPackageView_raw, generate<IDataPackageView> {};

// DataPackageView
template<typename X> struct statics<DataPackageView, X> : X {
	typedef typename X::root_type DataPackageView;
};
struct DataPackageView : generate<DataPackageView> {
	using IDataPackageView::GetTextAsync;
	using IDataPackageView3::RequestAccessAsync;
};

// IShareTargetInfo
struct IShareTargetInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_AppUserModelId(HSTRING *value);
	virtual STDMETHODIMP _get_ShareProvider(DataTransfer::ShareProvider* *value);
};
template<typename X> struct IShareTargetInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IShareTargetInfo_adaptor::AppUserModelId)->_get_AppUserModelId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppUserModelId;
		struct : property {
			ptr<DataTransfer::ShareProvider> get() { DataTransfer::ShareProvider* value; hrcheck(enc(&IShareTargetInfo_adaptor::ShareProvider)->_get_ShareProvider(&value)); return from_abi(value); }
			ptr<DataTransfer::ShareProvider> operator()() { return get(); }
			operator ptr<DataTransfer::ShareProvider> () { return get(); }
			ptr<DataTransfer::ShareProvider> operator->() { return get(); }
		} ShareProvider;
	};
	IShareTargetInfo_adaptor() {}
};
template<typename X> struct adapt<IShareTargetInfo, X> : Windows::ApplicationModel::DataTransfer::IShareTargetInfo_adaptor<X> { typedef adapt IShareTargetInfo; };
struct IShareTargetInfo : IShareTargetInfo_raw, generate<IShareTargetInfo> {};

// ShareTargetInfo
template<typename X> struct statics<ShareTargetInfo, X> : X {
	typedef typename X::root_type ShareTargetInfo;
};
struct ShareTargetInfo : generate<ShareTargetInfo> {};

// IShareCompletedEventArgs
struct IShareCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ShareTarget(ShareTargetInfo* *value);
};
template<typename X> struct IShareCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<ShareTargetInfo> get() { ShareTargetInfo* value; hrcheck(enc(&IShareCompletedEventArgs_adaptor::ShareTarget)->_get_ShareTarget(&value)); return from_abi(value); }
			ptr<ShareTargetInfo> operator()() { return get(); }
			operator ptr<ShareTargetInfo> () { return get(); }
			ptr<ShareTargetInfo> operator->() { return get(); }
		} ShareTarget;
	};
	IShareCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IShareCompletedEventArgs, X> : Windows::ApplicationModel::DataTransfer::IShareCompletedEventArgs_adaptor<X> { typedef adapt IShareCompletedEventArgs; };
struct IShareCompletedEventArgs : IShareCompletedEventArgs_raw, generate<IShareCompletedEventArgs> {};

// ShareCompletedEventArgs
template<typename X> struct statics<ShareCompletedEventArgs, X> : X {
	typedef typename X::root_type ShareCompletedEventArgs;
};
struct ShareCompletedEventArgs : generate<ShareCompletedEventArgs> {};

// IDataPackage
struct IDataPackage_raw : IInspectable {
	virtual STDMETHODIMP _GetView(DataPackageView* *value);
	virtual STDMETHODIMP _get_Properties(DataPackagePropertySet* *value);
	virtual STDMETHODIMP _get_RequestedOperation(DataPackageOperation *value);
	virtual STDMETHODIMP _put_RequestedOperation(DataPackageOperation value);
	virtual STDMETHODIMP _add_OperationCompleted(Foundation::TypedEventHandler<DataPackage*, OperationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_OperationCompleted(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_Destroyed(Foundation::TypedEventHandler<DataPackage*, IInspectable*>* handler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_Destroyed(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _SetData(HSTRING formatId, IInspectable* value);
	virtual STDMETHODIMP _SetDataProvider(HSTRING formatId, DataProviderHandler* delayRenderer);
	virtual STDMETHODIMP _SetText(HSTRING value);
	virtual STDMETHODIMP _SetUri(Foundation::Uri* value);
	virtual STDMETHODIMP _SetHtmlFormat(HSTRING value);
	virtual STDMETHODIMP _get_ResourceMap(Foundation::Collections::IMap<HSTRING, Storage::Streams::RandomAccessStreamReference*>* *value);
	virtual STDMETHODIMP _SetRtf(HSTRING value);
	virtual STDMETHODIMP _SetBitmap(Storage::Streams::RandomAccessStreamReference* value);
	virtual STDMETHODIMP _SetStorageItemsReadOnly(Foundation::Collections::IIterable<Storage::IStorageItem*>* value);
	virtual STDMETHODIMP _SetStorageItems(Foundation::Collections::IIterable<Storage::IStorageItem*>* value, bool readOnly);
};
template<typename X> struct IDataPackage_adaptor : X {
	union {
		struct : property {
			ptr<DataPackagePropertySet> get() { DataPackagePropertySet* value; hrcheck(enc(&IDataPackage_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<DataPackagePropertySet> operator()() { return get(); }
			operator ptr<DataPackagePropertySet> () { return get(); }
			ptr<DataPackagePropertySet> operator->() { return get(); }
		} Properties;
		struct : property {
			DataPackageOperation get() { DataPackageOperation value; hrcheck(enc(&IDataPackage_adaptor::RequestedOperation)->_get_RequestedOperation(&value)); return value; }
			DataPackageOperation operator()() { return get(); }
			operator DataPackageOperation () { return get(); }
			void put(DataPackageOperation value) { hrcheck(enc(&IDataPackage_adaptor::RequestedOperation)->_put_RequestedOperation(value)); }
			void operator=(DataPackageOperation value) { put(value); }
			void operator()(DataPackageOperation value) { put(value); }
		} RequestedOperation;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, ptr<Storage::Streams::RandomAccessStreamReference>>> get() { Foundation::Collections::IMap<HSTRING, Storage::Streams::RandomAccessStreamReference*>* value; hrcheck(enc(&IDataPackage_adaptor::ResourceMap)->_get_ResourceMap(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, ptr<Storage::Streams::RandomAccessStreamReference>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, ptr<Storage::Streams::RandomAccessStreamReference>>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, ptr<Storage::Streams::RandomAccessStreamReference>>> operator->() { return get(); }
		} ResourceMap;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DataPackage>, object>> handler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IDataPackage_adaptor::Destroyed)->_add_Destroyed(to_abi(handler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IDataPackage_adaptor::Destroyed)->_remove_Destroyed(eventCookie)); }
		} Destroyed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DataPackage>, ptr<OperationCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IDataPackage_adaptor::OperationCompleted)->_add_OperationCompleted(to_abi(handler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IDataPackage_adaptor::OperationCompleted)->_remove_OperationCompleted(eventCookie)); }
		} OperationCompleted;
	};
	ptr<DataPackageView> GetView() { DataPackageView* value; hrcheck(X::get()->_GetView(&value)); return from_abi(value); }
	void SetData(hstring_ref formatId, object_ref value) { hrcheck(X::get()->_SetData(formatId, value)); }
	void SetDataProvider(hstring_ref formatId, handler_ref<DataProviderHandler> delayRenderer) { hrcheck(X::get()->_SetDataProvider(formatId, delayRenderer)); }
	void SetText(hstring_ref value) { hrcheck(X::get()->_SetText(value)); }
	void SetUri(pptr<Foundation::Uri> value) { hrcheck(X::get()->_SetUri(value)); }
	void SetHtmlFormat(hstring_ref value) { hrcheck(X::get()->_SetHtmlFormat(value)); }
	void SetRtf(hstring_ref value) { hrcheck(X::get()->_SetRtf(value)); }
	void SetBitmap(pptr<Storage::Streams::RandomAccessStreamReference> value) { hrcheck(X::get()->_SetBitmap(value)); }
	void SetStorageItems(pptr<Foundation::Collections::IIterable<ptr<Storage::IStorageItem>>> value) { hrcheck(X::get()->_SetStorageItemsReadOnly(to_abi(value))); }
	void SetStorageItems(pptr<Foundation::Collections::IIterable<ptr<Storage::IStorageItem>>> value, bool readOnly) { hrcheck(X::get()->_SetStorageItems(to_abi(value), readOnly)); }
	IDataPackage_adaptor() {}
};
template<typename X> struct adapt<IDataPackage, X> : Windows::ApplicationModel::DataTransfer::IDataPackage_adaptor<X> { typedef adapt IDataPackage; };
struct IDataPackage : IDataPackage_raw, generate<IDataPackage> {};

// IDataPackage3
struct IDataPackage3_raw : IInspectable {
	virtual STDMETHODIMP _add_ShareCompleted(Foundation::TypedEventHandler<DataPackage*, ShareCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ShareCompleted(Foundation::EventRegistrationToken token);
};
template<typename X> struct IDataPackage3_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DataPackage>, ptr<ShareCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDataPackage3_adaptor::ShareCompleted)->_add_ShareCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDataPackage3_adaptor::ShareCompleted)->_remove_ShareCompleted(token)); }
		} ShareCompleted;
	};
	IDataPackage3_adaptor() {}
};
template<typename X> struct adapt<IDataPackage3, X> : Windows::ApplicationModel::DataTransfer::IDataPackage3_adaptor<X> { typedef adapt IDataPackage3; };
struct IDataPackage3 : IDataPackage3_raw, generate<IDataPackage3> {};

// IDataPackage2
struct IDataPackage2_raw : IInspectable {
	virtual STDMETHODIMP _SetApplicationLink(Foundation::Uri* value);
	virtual STDMETHODIMP _SetWebLink(Foundation::Uri* value);
};
template<typename X> struct IDataPackage2_adaptor : X {
	void SetApplicationLink(pptr<Foundation::Uri> value) { hrcheck(X::get()->_SetApplicationLink(value)); }
	void SetWebLink(pptr<Foundation::Uri> value) { hrcheck(X::get()->_SetWebLink(value)); }
};
template<typename X> struct adapt<IDataPackage2, X> : Windows::ApplicationModel::DataTransfer::IDataPackage2_adaptor<X> { typedef adapt IDataPackage2; };
struct IDataPackage2 : IDataPackage2_raw, generate<IDataPackage2> {};

// DataPackage
template<typename X> struct statics<DataPackage, X> : X {
	typedef typename X::root_type DataPackage;
};
struct DataPackage : generate<DataPackage> {
	using IDataPackage::SetStorageItems;
};

// IHtmlFormatHelperStatics
struct IHtmlFormatHelperStatics : IInspectable {
	virtual STDMETHODIMP _GetStaticFragment(HSTRING htmlFormat, HSTRING *htmlFragment);
	virtual STDMETHODIMP _CreateHtmlFormat(HSTRING htmlFragment, HSTRING *htmlFormat);
};

// HtmlFormatHelper
template<typename> struct HtmlFormatHelper_statics {
	static hstring GetStaticFragment(hstring_ref htmlFormat) { HSTRING htmlFragment; hrcheck(get_activation_factory<HtmlFormatHelper, IHtmlFormatHelperStatics>()->_GetStaticFragment(htmlFormat, &htmlFragment)); return from_abi(htmlFragment); }
	static hstring CreateHtmlFormat(hstring_ref htmlFragment) { HSTRING htmlFormat; hrcheck(get_activation_factory<HtmlFormatHelper, IHtmlFormatHelperStatics>()->_CreateHtmlFormat(htmlFragment, &htmlFormat)); return from_abi(htmlFormat); }
};

template<typename X> struct statics<HtmlFormatHelper, X> : X, Windows::ApplicationModel::DataTransfer::HtmlFormatHelper_statics<void> {
	typedef typename X::root_type HtmlFormatHelper;
};
struct HtmlFormatHelper : generate<HtmlFormatHelper> {};

// IClipboardStatics
struct IClipboardStatics : IInspectable {
	virtual STDMETHODIMP _GetContent(DataPackageView* *content);
	virtual STDMETHODIMP _SetContent(DataPackage* content);
	virtual STDMETHODIMP _Flush();
	virtual STDMETHODIMP _Clear();
	virtual STDMETHODIMP _add_ContentChanged(Foundation::EventHandler<IInspectable*>* changeHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ContentChanged(Foundation::EventRegistrationToken token);
};

// Clipboard
template<typename> struct Clipboard_statics {
	static struct _ContentChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> changeHandler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<Clipboard, IClipboardStatics>()->_add_ContentChanged(to_abi(changeHandler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<Clipboard, IClipboardStatics>()->_remove_ContentChanged(token)); }
	} ContentChanged;
	static ptr<DataPackageView> GetContent() { DataPackageView* content; hrcheck(get_activation_factory<Clipboard, IClipboardStatics>()->_GetContent(&content)); return from_abi(content); }
	static void SetContent(pptr<DataPackage> content) { hrcheck(get_activation_factory<Clipboard, IClipboardStatics>()->_SetContent(content)); }
	static void Flush() { hrcheck(get_activation_factory<Clipboard, IClipboardStatics>()->_Flush()); }
	static void Clear() { hrcheck(get_activation_factory<Clipboard, IClipboardStatics>()->_Clear()); }
};
template<typename X> typename Clipboard_statics<X>::_ContentChanged Clipboard_statics<X>::ContentChanged;

template<typename X> struct statics<Clipboard, X> : X, Windows::ApplicationModel::DataTransfer::Clipboard_statics<void> {
	typedef typename X::root_type Clipboard;
};
struct Clipboard : generate<Clipboard> {};

// IShareUIOptions
struct IShareUIOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_Theme(ShareUITheme *value);
	virtual STDMETHODIMP _put_Theme(ShareUITheme value);
	virtual STDMETHODIMP _get_SelectionRect(Foundation::IReference<Foundation::Rect>* *value);
	virtual STDMETHODIMP _put_SelectionRect(Foundation::IReference<Foundation::Rect>* value);
};
template<typename X> struct IShareUIOptions_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::Rect>> get() { Foundation::IReference<Foundation::Rect>* value; hrcheck(enc(&IShareUIOptions_adaptor::SelectionRect)->_get_SelectionRect(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::Rect>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::Rect>> () { return get(); }
			ptr<Foundation::IReference<Foundation::Rect>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::Rect>> value) { hrcheck(enc(&IShareUIOptions_adaptor::SelectionRect)->_put_SelectionRect(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::Rect>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::Rect>> value) { put(to_abi(value)); }
		} SelectionRect;
		struct : property {
			ShareUITheme get() { ShareUITheme value; hrcheck(enc(&IShareUIOptions_adaptor::Theme)->_get_Theme(&value)); return value; }
			ShareUITheme operator()() { return get(); }
			operator ShareUITheme () { return get(); }
			void put(ShareUITheme value) { hrcheck(enc(&IShareUIOptions_adaptor::Theme)->_put_Theme(value)); }
			void operator=(ShareUITheme value) { put(value); }
			void operator()(ShareUITheme value) { put(value); }
		} Theme;
	};
	IShareUIOptions_adaptor() {}
};
template<typename X> struct adapt<IShareUIOptions, X> : Windows::ApplicationModel::DataTransfer::IShareUIOptions_adaptor<X> { typedef adapt IShareUIOptions; };
struct IShareUIOptions : IShareUIOptions_raw, generate<IShareUIOptions> {};

// ShareUIOptions
template<typename X> struct statics<ShareUIOptions, X> : X {
	typedef typename X::root_type ShareUIOptions;
};
struct ShareUIOptions : generate<ShareUIOptions> {};

// IDataRequestDeferral
struct IDataRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IDataRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IDataRequestDeferral, X> : Windows::ApplicationModel::DataTransfer::IDataRequestDeferral_adaptor<X> { typedef adapt IDataRequestDeferral; };
struct IDataRequestDeferral : IDataRequestDeferral_raw, generate<IDataRequestDeferral> {};

// DataRequestDeferral
template<typename X> struct statics<DataRequestDeferral, X> : X {
	typedef typename X::root_type DataRequestDeferral;
};
struct DataRequestDeferral : generate<DataRequestDeferral> {};

// IDataRequest
struct IDataRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(DataPackage* *value);
	virtual STDMETHODIMP _put_Data(DataPackage* value);
	virtual STDMETHODIMP _get_Deadline(Foundation::DateTime *value);
	virtual STDMETHODIMP _FailWithDisplayText(HSTRING value);
	virtual STDMETHODIMP _GetDeferral(DataRequestDeferral* *value);
};
template<typename X> struct IDataRequest_adaptor : X {
	union {
		struct : property {
			ptr<DataPackage> get() { DataPackage* value; hrcheck(enc(&IDataRequest_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<DataPackage> operator()() { return get(); }
			operator ptr<DataPackage> () { return get(); }
			ptr<DataPackage> operator->() { return get(); }
			void put(pptr<DataPackage> value) { hrcheck(enc(&IDataRequest_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<DataPackage> value) { put(value); }
			void operator()(pptr<DataPackage> value) { put(value); }
		} Data;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IDataRequest_adaptor::Deadline)->_get_Deadline(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Deadline;
	};
	void FailWithDisplayText(hstring_ref value) { hrcheck(X::get()->_FailWithDisplayText(value)); }
	ptr<DataRequestDeferral> GetDeferral() { DataRequestDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IDataRequest_adaptor() {}
};
template<typename X> struct adapt<IDataRequest, X> : Windows::ApplicationModel::DataTransfer::IDataRequest_adaptor<X> { typedef adapt IDataRequest; };
struct IDataRequest : IDataRequest_raw, generate<IDataRequest> {};

// DataRequest
template<typename X> struct statics<DataRequest, X> : X {
	typedef typename X::root_type DataRequest;
};
struct DataRequest : generate<DataRequest> {};

// IDataRequestedEventArgs
struct IDataRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(DataRequest* *value);
};
template<typename X> struct IDataRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<DataRequest> get() { DataRequest* value; hrcheck(enc(&IDataRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<DataRequest> operator()() { return get(); }
			operator ptr<DataRequest> () { return get(); }
			ptr<DataRequest> operator->() { return get(); }
		} Request;
	};
	IDataRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDataRequestedEventArgs, X> : Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs_adaptor<X> { typedef adapt IDataRequestedEventArgs; };
struct IDataRequestedEventArgs : IDataRequestedEventArgs_raw, generate<IDataRequestedEventArgs> {};

// DataRequestedEventArgs
template<typename X> struct statics<DataRequestedEventArgs, X> : X {
	typedef typename X::root_type DataRequestedEventArgs;
};
struct DataRequestedEventArgs : generate<DataRequestedEventArgs> {};

// IShareProvidersRequestedEventArgs
struct IShareProvidersRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Providers(Foundation::Collections::IVector<ShareProvider*>* *value);
	virtual STDMETHODIMP _get_Data(DataPackageView* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IShareProvidersRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<DataPackageView> get() { DataPackageView* value; hrcheck(enc(&IShareProvidersRequestedEventArgs_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<DataPackageView> operator()() { return get(); }
			operator ptr<DataPackageView> () { return get(); }
			ptr<DataPackageView> operator->() { return get(); }
		} Data;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ShareProvider>>> get() { Foundation::Collections::IVector<ShareProvider*>* value; hrcheck(enc(&IShareProvidersRequestedEventArgs_adaptor::Providers)->_get_Providers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ShareProvider>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ShareProvider>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ShareProvider>>> operator->() { return get(); }
		} Providers;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IShareProvidersRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IShareProvidersRequestedEventArgs, X> : Windows::ApplicationModel::DataTransfer::IShareProvidersRequestedEventArgs_adaptor<X> { typedef adapt IShareProvidersRequestedEventArgs; };
struct IShareProvidersRequestedEventArgs : IShareProvidersRequestedEventArgs_raw, generate<IShareProvidersRequestedEventArgs> {};

// ShareProvidersRequestedEventArgs
template<typename X> struct statics<ShareProvidersRequestedEventArgs, X> : X {
	typedef typename X::root_type ShareProvidersRequestedEventArgs;
};
struct ShareProvidersRequestedEventArgs : generate<ShareProvidersRequestedEventArgs> {};

// ITargetApplicationChosenEventArgs
struct ITargetApplicationChosenEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ApplicationName(HSTRING *value);
};
template<typename X> struct ITargetApplicationChosenEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetApplicationChosenEventArgs_adaptor::ApplicationName)->_get_ApplicationName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ApplicationName;
	};
	ITargetApplicationChosenEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITargetApplicationChosenEventArgs, X> : Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs_adaptor<X> { typedef adapt ITargetApplicationChosenEventArgs; };
struct ITargetApplicationChosenEventArgs : ITargetApplicationChosenEventArgs_raw, generate<ITargetApplicationChosenEventArgs> {};

// TargetApplicationChosenEventArgs
template<typename X> struct statics<TargetApplicationChosenEventArgs, X> : X {
	typedef typename X::root_type TargetApplicationChosenEventArgs;
};
struct TargetApplicationChosenEventArgs : generate<TargetApplicationChosenEventArgs> {};

// IDataTransferManager
struct IDataTransferManager_raw : IInspectable {
	virtual STDMETHODIMP _add_DataRequested(Foundation::TypedEventHandler<DataTransferManager*, DataRequestedEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_DataRequested(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _add_TargetApplicationChosen(Foundation::TypedEventHandler<DataTransferManager*, TargetApplicationChosenEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_TargetApplicationChosen(Foundation::EventRegistrationToken eventCookie);
};
template<typename X> struct IDataTransferManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DataTransferManager>, ptr<DataRequestedEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IDataTransferManager_adaptor::DataRequested)->_add_DataRequested(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IDataTransferManager_adaptor::DataRequested)->_remove_DataRequested(eventCookie)); }
		} DataRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DataTransferManager>, ptr<TargetApplicationChosenEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IDataTransferManager_adaptor::TargetApplicationChosen)->_add_TargetApplicationChosen(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IDataTransferManager_adaptor::TargetApplicationChosen)->_remove_TargetApplicationChosen(eventCookie)); }
		} TargetApplicationChosen;
	};
	IDataTransferManager_adaptor() {}
};
template<typename X> struct adapt<IDataTransferManager, X> : Windows::ApplicationModel::DataTransfer::IDataTransferManager_adaptor<X> { typedef adapt IDataTransferManager; };
struct IDataTransferManager : IDataTransferManager_raw, generate<IDataTransferManager> {};

// IDataTransferManagerStatics3
struct IDataTransferManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _ShowShareUIWithOptions(ShareUIOptions* options);
};

// IDataTransferManagerStatics2
struct IDataTransferManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *value);
};

// IDataTransferManagerStatics
struct IDataTransferManagerStatics : IInspectable {
	virtual STDMETHODIMP _ShowShareUI();
	virtual STDMETHODIMP _GetForCurrentView(DataTransferManager* *value);
};

// IDataTransferManager2
struct IDataTransferManager2_raw : IInspectable {
	virtual STDMETHODIMP _add_ShareProvidersRequested(Foundation::TypedEventHandler<DataTransferManager*, ShareProvidersRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ShareProvidersRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IDataTransferManager2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DataTransferManager>, ptr<ShareProvidersRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDataTransferManager2_adaptor::ShareProvidersRequested)->_add_ShareProvidersRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDataTransferManager2_adaptor::ShareProvidersRequested)->_remove_ShareProvidersRequested(token)); }
		} ShareProvidersRequested;
	};
	IDataTransferManager2_adaptor() {}
};
template<typename X> struct adapt<IDataTransferManager2, X> : Windows::ApplicationModel::DataTransfer::IDataTransferManager2_adaptor<X> { typedef adapt IDataTransferManager2; };
struct IDataTransferManager2 : IDataTransferManager2_raw, generate<IDataTransferManager2> {};

// DataTransferManager
template<typename> struct DataTransferManager_statics {
	static void ShowShareUI(pptr<ShareUIOptions> options) { hrcheck(get_activation_factory<DataTransferManager, IDataTransferManagerStatics3>()->_ShowShareUIWithOptions(options)); }
	static bool IsSupported() { bool value; hrcheck(get_activation_factory<DataTransferManager, IDataTransferManagerStatics2>()->_IsSupported(&value)); return value; }
	static void ShowShareUI() { hrcheck(get_activation_factory<DataTransferManager, IDataTransferManagerStatics>()->_ShowShareUI()); }
	static ptr<DataTransferManager> GetForCurrentView() { DataTransferManager* value; hrcheck(get_activation_factory<DataTransferManager, IDataTransferManagerStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
};

template<typename X> struct statics<DataTransferManager, X> : X, Windows::ApplicationModel::DataTransfer::DataTransferManager_statics<void> {
	typedef typename X::root_type DataTransferManager;
};
struct DataTransferManager : generate<DataTransferManager> {};

// ISharedStorageAccessManagerStatics
struct ISharedStorageAccessManagerStatics : IInspectable {
	virtual STDMETHODIMP _AddFile(Storage::IStorageFile* file, HSTRING *outToken);
	virtual STDMETHODIMP _RedeemTokenForFileAsync(HSTRING token, Foundation::IAsyncOperation<Storage::StorageFile*>* *operation);
	virtual STDMETHODIMP _RemoveFile(HSTRING token);
};

// SharedStorageAccessManager
template<typename> struct SharedStorageAccessManager_statics {
	static hstring AddFile(pptr<Storage::IStorageFile> file) { HSTRING outToken; hrcheck(get_activation_factory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>()->_AddFile(file, &outToken)); return from_abi(outToken); }
	static ptr<Foundation::IAsyncOperation<ptr<Storage::StorageFile>>> RedeemTokenForFileAsync(hstring_ref token) { Foundation::IAsyncOperation<Storage::StorageFile*>* operation; hrcheck(get_activation_factory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>()->_RedeemTokenForFileAsync(token, &operation)); return from_abi(operation); }
	static void RemoveFile(hstring_ref token) { hrcheck(get_activation_factory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>()->_RemoveFile(token)); }
};

template<typename X> struct statics<SharedStorageAccessManager, X> : X, Windows::ApplicationModel::DataTransfer::SharedStorageAccessManager_statics<void> {
	typedef typename X::root_type SharedStorageAccessManager;
};
struct SharedStorageAccessManager : generate<SharedStorageAccessManager> {};
}}}
} // namespace iso_winrt
