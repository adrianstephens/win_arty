#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Payments.Provider

#include "Windows.ApplicationModel.Payments.Provider.0.h"
#include "Windows.ApplicationModel.Payments.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
}
struct IAsyncAction;
template<typename TResult> struct IAsyncOperation;
}}

// defs

template<> struct def<Windows::ApplicationModel::Payments::Provider::IPaymentAppManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::IPaymentAppManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::PaymentAppManager> : class_type<Platform::Object, Windows::ApplicationModel::Payments::Provider::IPaymentAppManager> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::IPaymentTransaction> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::IPaymentTransactionAcceptResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::PaymentTransactionAcceptResult> : class_type<Platform::Object, Windows::ApplicationModel::Payments::Provider::IPaymentTransactionAcceptResult> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::IPaymentTransactionStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::PaymentTransaction> : class_type<Platform::Object, Windows::ApplicationModel::Payments::Provider::IPaymentTransaction> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::IPaymentAppCanMakePaymentTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Payments::Provider::PaymentAppCanMakePaymentTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Payments::Provider::IPaymentAppCanMakePaymentTriggerDetails> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Payments::Provider::IPaymentAppManager> { define_guid(0xE47AA53, 0x8521, 0x4969, 0xA9, 0x57, 0xDF, 0x25, 0x38, 0xA3, 0xA9, 0x8F);};
template<> struct uuid<Windows::ApplicationModel::Payments::Provider::IPaymentAppManagerStatics> { define_guid(0xA341AC28, 0xFC89, 0x4406, 0xB4, 0xD9, 0x34, 0xE7, 0xFE, 0x79, 0xDF, 0xB6);};
template<> struct uuid<Windows::ApplicationModel::Payments::Provider::IPaymentTransaction> { define_guid(0x62581DA0, 0x26A5, 0x4E9B, 0xA6, 0xEB, 0x66, 0x60, 0x6C, 0xF0, 0x1, 0xD3);};
template<> struct uuid<Windows::ApplicationModel::Payments::Provider::IPaymentTransactionAcceptResult> { define_guid(0x60E3276, 0xD30C, 0x4817, 0x95, 0xA2, 0xDF, 0x7A, 0xE9, 0x27, 0x3B, 0x56);};
template<> struct uuid<Windows::ApplicationModel::Payments::Provider::IPaymentTransactionStatics> { define_guid(0x8D639750, 0xEE0A, 0x4DF5, 0x9B, 0x1E, 0x1C, 0xF, 0x9E, 0xC5, 0x98, 0x81);};
template<> struct uuid<Windows::ApplicationModel::Payments::Provider::IPaymentAppCanMakePaymentTriggerDetails> { define_guid(0xCE201F0, 0x8B93, 0x4EB6, 0x8C, 0x46, 0x2E, 0x4A, 0x6C, 0x6A, 0x26, 0xF6);};

// types

namespace Windows { namespace ApplicationModel { namespace Payments { namespace Provider {

// IPaymentAppManager
struct IPaymentAppManager_raw : IInspectable {
	virtual STDMETHODIMP _RegisterAsync(Foundation::Collections::IIterable<HSTRING>* supportedPaymentMethodIds, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _UnregisterAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IPaymentAppManager_adaptor : X {
	ptr<Foundation::IAsyncAction> RegisterAsync(pptr<Foundation::Collections::IIterable<hstring>> supportedPaymentMethodIds) { Foundation::IAsyncAction* result; hrcheck(X::get()->_RegisterAsync(to_abi(supportedPaymentMethodIds), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> UnregisterAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_UnregisterAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IPaymentAppManager, X> : Windows::ApplicationModel::Payments::Provider::IPaymentAppManager_adaptor<X> { typedef adapt IPaymentAppManager; };
struct IPaymentAppManager : IPaymentAppManager_raw, generate<IPaymentAppManager> {};

// IPaymentAppManagerStatics
struct IPaymentAppManagerStatics : IInspectable {
	virtual STDMETHODIMP _get_Current(PaymentAppManager* *value);
};

// PaymentAppManager
template<typename> struct PaymentAppManager_statics {
	static struct _Current : property {
		ptr<PaymentAppManager> get() { PaymentAppManager* value; hrcheck(get_activation_factory<PaymentAppManager, IPaymentAppManagerStatics>()->_get_Current(&value)); return from_abi(value); }
		ptr<PaymentAppManager> operator()() { return get(); }
		operator ptr<PaymentAppManager> () { return get(); }
		ptr<PaymentAppManager> operator->() { return get(); }
	} Current;
};
template<typename X> typename PaymentAppManager_statics<X>::_Current PaymentAppManager_statics<X>::Current;

template<typename X> struct statics<PaymentAppManager, X> : X, Windows::ApplicationModel::Payments::Provider::PaymentAppManager_statics<void> {
	typedef typename X::root_type PaymentAppManager;
};
struct PaymentAppManager : generate<PaymentAppManager> {};

// IPaymentTransaction
struct IPaymentTransaction_raw : IInspectable {
	virtual STDMETHODIMP _get_PaymentRequest(Payments::PaymentRequest* *value);
	virtual STDMETHODIMP _get_PayerEmail(HSTRING *value);
	virtual STDMETHODIMP _put_PayerEmail(HSTRING value);
	virtual STDMETHODIMP _get_PayerName(HSTRING *value);
	virtual STDMETHODIMP _put_PayerName(HSTRING value);
	virtual STDMETHODIMP _get_PayerPhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _put_PayerPhoneNumber(HSTRING value);
	virtual STDMETHODIMP _UpdateShippingAddressAsync(PaymentAddress* shippingAddress, Foundation::IAsyncOperation<PaymentRequestChangedResult*>* *result);
	virtual STDMETHODIMP _UpdateSelectedShippingOptionAsync(PaymentShippingOption* selectedShippingOption, Foundation::IAsyncOperation<PaymentRequestChangedResult*>* *result);
	virtual STDMETHODIMP _AcceptAsync(PaymentToken* paymentToken, Foundation::IAsyncOperation<PaymentTransactionAcceptResult*>* *result);
	virtual STDMETHODIMP _Reject();
};
template<typename X> struct IPaymentTransaction_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentTransaction_adaptor::PayerEmail)->_get_PayerEmail(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentTransaction_adaptor::PayerEmail)->_put_PayerEmail(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PayerEmail;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentTransaction_adaptor::PayerName)->_get_PayerName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentTransaction_adaptor::PayerName)->_put_PayerName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PayerName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPaymentTransaction_adaptor::PayerPhoneNumber)->_get_PayerPhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPaymentTransaction_adaptor::PayerPhoneNumber)->_put_PayerPhoneNumber(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PayerPhoneNumber;
		struct : property {
			ptr<Payments::PaymentRequest> get() { Payments::PaymentRequest* value; hrcheck(enc(&IPaymentTransaction_adaptor::PaymentRequest)->_get_PaymentRequest(&value)); return from_abi(value); }
			ptr<Payments::PaymentRequest> operator()() { return get(); }
			operator ptr<Payments::PaymentRequest> () { return get(); }
			ptr<Payments::PaymentRequest> operator->() { return get(); }
		} PaymentRequest;
	};
	ptr<Foundation::IAsyncOperation<ptr<PaymentRequestChangedResult>>> UpdateShippingAddressAsync(pptr<PaymentAddress> shippingAddress) { Foundation::IAsyncOperation<PaymentRequestChangedResult*>* result; hrcheck(X::get()->_UpdateShippingAddressAsync(shippingAddress, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PaymentRequestChangedResult>>> UpdateSelectedShippingOptionAsync(pptr<PaymentShippingOption> selectedShippingOption) { Foundation::IAsyncOperation<PaymentRequestChangedResult*>* result; hrcheck(X::get()->_UpdateSelectedShippingOptionAsync(selectedShippingOption, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PaymentTransactionAcceptResult>>> AcceptAsync(pptr<PaymentToken> paymentToken) { Foundation::IAsyncOperation<PaymentTransactionAcceptResult*>* result; hrcheck(X::get()->_AcceptAsync(paymentToken, &result)); return from_abi(result); }
	void Reject() { hrcheck(X::get()->_Reject()); }
	IPaymentTransaction_adaptor() {}
};
template<typename X> struct adapt<IPaymentTransaction, X> : Windows::ApplicationModel::Payments::Provider::IPaymentTransaction_adaptor<X> { typedef adapt IPaymentTransaction; };
struct IPaymentTransaction : IPaymentTransaction_raw, generate<IPaymentTransaction> {};

// IPaymentTransactionAcceptResult
struct IPaymentTransactionAcceptResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(PaymentRequestCompletionStatus *value);
};
template<typename X> struct IPaymentTransactionAcceptResult_adaptor : X {
	union {
		struct : property {
			PaymentRequestCompletionStatus get() { PaymentRequestCompletionStatus value; hrcheck(enc(&IPaymentTransactionAcceptResult_adaptor::Status)->_get_Status(&value)); return value; }
			PaymentRequestCompletionStatus operator()() { return get(); }
			operator PaymentRequestCompletionStatus () { return get(); }
		} Status;
	};
	IPaymentTransactionAcceptResult_adaptor() {}
};
template<typename X> struct adapt<IPaymentTransactionAcceptResult, X> : Windows::ApplicationModel::Payments::Provider::IPaymentTransactionAcceptResult_adaptor<X> { typedef adapt IPaymentTransactionAcceptResult; };
struct IPaymentTransactionAcceptResult : IPaymentTransactionAcceptResult_raw, generate<IPaymentTransactionAcceptResult> {};

// PaymentTransactionAcceptResult
template<typename X> struct statics<PaymentTransactionAcceptResult, X> : X {
	typedef typename X::root_type PaymentTransactionAcceptResult;
};
struct PaymentTransactionAcceptResult : generate<PaymentTransactionAcceptResult> {};

// IPaymentTransactionStatics
struct IPaymentTransactionStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING id, Foundation::IAsyncOperation<PaymentTransaction*>* *result);
};

// PaymentTransaction
template<typename> struct PaymentTransaction_statics {
	static ptr<Foundation::IAsyncOperation<ptr<PaymentTransaction>>> FromIdAsync(hstring_ref id) { Foundation::IAsyncOperation<PaymentTransaction*>* result; hrcheck(get_activation_factory<PaymentTransaction, IPaymentTransactionStatics>()->_FromIdAsync(id, &result)); return from_abi(result); }
};

template<typename X> struct statics<PaymentTransaction, X> : X, Windows::ApplicationModel::Payments::Provider::PaymentTransaction_statics<void> {
	typedef typename X::root_type PaymentTransaction;
};
struct PaymentTransaction : generate<PaymentTransaction> {};

// IPaymentAppCanMakePaymentTriggerDetails
struct IPaymentAppCanMakePaymentTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(PaymentRequest* *result);
	virtual STDMETHODIMP _ReportCanMakePaymentResult(PaymentCanMakePaymentResult* value);
};
template<typename X> struct IPaymentAppCanMakePaymentTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<PaymentRequest> get() { PaymentRequest* result; hrcheck(enc(&IPaymentAppCanMakePaymentTriggerDetails_adaptor::Request)->_get_Request(&result)); return from_abi(result); }
			ptr<PaymentRequest> operator()() { return get(); }
			operator ptr<PaymentRequest> () { return get(); }
			ptr<PaymentRequest> operator->() { return get(); }
		} Request;
	};
	void ReportCanMakePaymentResult(pptr<PaymentCanMakePaymentResult> value) { hrcheck(X::get()->_ReportCanMakePaymentResult(value)); }
	IPaymentAppCanMakePaymentTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IPaymentAppCanMakePaymentTriggerDetails, X> : Windows::ApplicationModel::Payments::Provider::IPaymentAppCanMakePaymentTriggerDetails_adaptor<X> { typedef adapt IPaymentAppCanMakePaymentTriggerDetails; };
struct IPaymentAppCanMakePaymentTriggerDetails : IPaymentAppCanMakePaymentTriggerDetails_raw, generate<IPaymentAppCanMakePaymentTriggerDetails> {};

// PaymentAppCanMakePaymentTriggerDetails
template<typename X> struct statics<PaymentAppCanMakePaymentTriggerDetails, X> : X {
	typedef typename X::root_type PaymentAppCanMakePaymentTriggerDetails;
};
struct PaymentAppCanMakePaymentTriggerDetails : generate<PaymentAppCanMakePaymentTriggerDetails> {};
}}}}
} // namespace iso_winrt
