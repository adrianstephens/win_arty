#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Devices

#include "Windows.Media.Devices.0.h"
#include "Windows.Media.MediaProperties.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.Media.Capture.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}}
namespace Media { namespace Devices { namespace Core {
struct VariablePhotoSequenceController;
}}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Media::Devices::AudioDeviceRole> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs> : overridable_type<> {};
template<> struct def<Windows::Media::Devices::IMediaDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> : class_type<Platform::Object, Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs> {};
template<> struct def<Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> : class_type<Platform::Object, Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs> {};
template<> struct def<Windows::Media::Devices::SendCommandStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IModuleCommandResult> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ModuleCommandResult> : class_type<Platform::Object, Windows::Media::Devices::IModuleCommandResult> {};
template<> struct def<Windows::Media::Devices::IAudioDeviceModule> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IAudioDeviceModulesManager> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IAudioDeviceModulesManagerFactory> : interface_type<> {};
template<> struct def<Windows::Media::Devices::AudioDeviceModulesManager> : class_type<Platform::Object, Windows::Media::Devices::IAudioDeviceModulesManager>, custom_activators {};
template<> struct def<Windows::Media::Devices::IAudioDeviceModuleNotificationEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Devices::AudioDeviceModuleNotificationEventArgs> : class_type<Platform::Object, Windows::Media::Devices::IAudioDeviceModuleNotificationEventArgs> {};
template<> struct def<Windows::Media::Devices::AudioDeviceModule> : class_type<Platform::Object, Windows::Media::Devices::IAudioDeviceModule> {};
template<> struct def<Windows::Media::Devices::MediaDevice> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::Devices::IsoSpeedPreset> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::CaptureSceneMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::MediaCaptureFocusState> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::CameraStreamState> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::MediaCapturePauseBehavior> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::AdvancedPhotoMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::ISceneModeControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::SceneModeControl> : class_type<Platform::Object, Windows::Media::Devices::ISceneModeControl> {};
template<> struct def<Windows::Media::Devices::ITorchControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::TorchControl> : class_type<Platform::Object, Windows::Media::Devices::ITorchControl> {};
template<> struct def<Windows::Media::Devices::IFlashControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IFlashControl2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::FlashControl> : class_type<Platform::Object, Windows::Media::Devices::IFlashControl, Windows::Media::Devices::IFlashControl2> {};
template<> struct def<Windows::Media::Devices::IExposureCompensationControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ExposureCompensationControl> : class_type<Platform::Object, Windows::Media::Devices::IExposureCompensationControl> {};
template<> struct def<Windows::Media::Devices::IIsoSpeedControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IIsoSpeedControl2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IsoSpeedControl> : class_type<Platform::Object, Windows::Media::Devices::IIsoSpeedControl, Windows::Media::Devices::IIsoSpeedControl2> {};
template<> struct def<Windows::Media::Devices::ColorTemperaturePreset> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IWhiteBalanceControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::WhiteBalanceControl> : class_type<Platform::Object, Windows::Media::Devices::IWhiteBalanceControl> {};
template<> struct def<Windows::Media::Devices::IExposureControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ExposureControl> : class_type<Platform::Object, Windows::Media::Devices::IExposureControl> {};
template<> struct def<Windows::Media::Devices::ZoomTransitionMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IZoomSettings> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ZoomSettings> : class_type<Platform::Object, Windows::Media::Devices::IZoomSettings> {};
template<> struct def<Windows::Media::Devices::IZoomControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IZoomControl2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ZoomControl> : class_type<Platform::Object, Windows::Media::Devices::IZoomControl, Windows::Media::Devices::IZoomControl2> {};
template<> struct def<Windows::Media::Devices::FocusPreset> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::FocusMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::ManualFocusDistance> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::AutoFocusRange> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IFocusSettings> : interface_type<> {};
template<> struct def<Windows::Media::Devices::FocusSettings> : class_type<Platform::Object, Windows::Media::Devices::IFocusSettings> {};
template<> struct def<Windows::Media::Devices::IFocusControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IFocusControl2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::FocusControl> : class_type<Platform::Object, Windows::Media::Devices::IFocusControl, Windows::Media::Devices::IFocusControl2> {};
template<> struct def<Windows::Media::Devices::IRegionOfInterest> : interface_type<> {};
template<> struct def<Windows::Media::Devices::RegionOfInterestType> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IRegionOfInterest2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::RegionOfInterest> : class_type<Platform::Object, Windows::Media::Devices::IRegionOfInterest, Windows::Media::Devices::IRegionOfInterest2> {};
template<> struct def<Windows::Media::Devices::IRegionsOfInterestControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::RegionsOfInterestControl> : class_type<Platform::Object, Windows::Media::Devices::IRegionsOfInterestControl> {};
template<> struct def<Windows::Media::Devices::IExposurePriorityVideoControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ExposurePriorityVideoControl> : class_type<Platform::Object, Windows::Media::Devices::IExposurePriorityVideoControl> {};
template<> struct def<Windows::Media::Devices::HdrVideoMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IHdrVideoControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::HdrVideoControl> : class_type<Platform::Object, Windows::Media::Devices::IHdrVideoControl> {};
template<> struct def<Windows::Media::Devices::IAdvancedPhotoCaptureSettings> : interface_type<> {};
template<> struct def<Windows::Media::Devices::AdvancedPhotoCaptureSettings> : class_type<Platform::Object, Windows::Media::Devices::IAdvancedPhotoCaptureSettings> {};
template<> struct def<Windows::Media::Devices::IAdvancedPhotoControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::AdvancedPhotoControl> : class_type<Platform::Object, Windows::Media::Devices::IAdvancedPhotoControl> {};
template<> struct def<Windows::Media::Devices::OpticalImageStabilizationMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IOpticalImageStabilizationControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::OpticalImageStabilizationControl> : class_type<Platform::Object, Windows::Media::Devices::IOpticalImageStabilizationControl> {};
template<> struct def<Windows::Media::Devices::VideoTemporalDenoisingMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IVideoTemporalDenoisingControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::VideoTemporalDenoisingControl> : class_type<Platform::Object, Windows::Media::Devices::IVideoTemporalDenoisingControl> {};
template<> struct def<Windows::Media::Devices::IMediaDeviceController> : overridable_type<> {};
template<> struct def<Windows::Media::Devices::IAudioDeviceController> : interface_type<Windows::Media::Devices::IMediaDeviceController> {};
template<> struct def<Windows::Media::Devices::IVideoDeviceController> : interface_type<Windows::Media::Devices::IMediaDeviceController> {};
template<> struct def<Windows::Media::Devices::IMediaDeviceControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::MediaDeviceControl> : class_type<Platform::Object, Windows::Media::Devices::IMediaDeviceControl> {};
template<> struct def<Windows::Media::Devices::CaptureUse> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::MediaCaptureOptimization> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ILowLagPhotoSequenceControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::LowLagPhotoSequenceControl> : class_type<Platform::Object, Windows::Media::Devices::ILowLagPhotoSequenceControl> {};
template<> struct def<Windows::Media::Devices::ILowLagPhotoControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::LowLagPhotoControl> : class_type<Platform::Object, Windows::Media::Devices::ILowLagPhotoControl> {};
template<> struct def<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController3> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IPhotoConfirmationControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::PhotoConfirmationControl> : class_type<Platform::Object, Windows::Media::Devices::IPhotoConfirmationControl> {};
template<> struct def<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController4> : interface_type<> {};
template<> struct def<Windows::Media::Devices::VideoDeviceControllerSetDevicePropertyStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::VideoDeviceControllerGetDevicePropertyStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IVideoDeviceControllerGetDevicePropertyResult> : interface_type<> {};
template<> struct def<Windows::Media::Devices::VideoDeviceControllerGetDevicePropertyResult> : class_type<Platform::Object, Windows::Media::Devices::IVideoDeviceControllerGetDevicePropertyResult> {};
template<> struct def<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController5> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController6> : interface_type<> {};
template<> struct def<Windows::Media::Devices::IMediaDeviceControlCapabilities> : interface_type<> {};
template<> struct def<Windows::Media::Devices::MediaDeviceControlCapabilities> : class_type<Platform::Object, Windows::Media::Devices::IMediaDeviceControlCapabilities> {};
template<> struct def<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController> : interface_type<> {};
template<> struct def<Windows::Media::Devices::VideoDeviceController> : class_type<Platform::Object, Windows::Media::Devices::IVideoDeviceController, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController6, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController3, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController4, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController5> {};
template<> struct def<Windows::Media::Devices::AudioDeviceController> : class_type<Platform::Object, Windows::Media::Devices::IAudioDeviceController> {};
template<> struct def<Windows::Media::Devices::CallControlContract> : value_type<> {};
template<> struct def<Windows::Media::Devices::TelephonyKey> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::IDialRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Devices::DialRequestedEventArgs> : class_type<Platform::Object, Windows::Media::Devices::IDialRequestedEventArgs> {};
template<> struct def<Windows::Media::Devices::IRedialRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Devices::RedialRequestedEventArgs> : class_type<Platform::Object, Windows::Media::Devices::IRedialRequestedEventArgs> {};
template<> struct def<Windows::Media::Devices::IKeypadPressedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Devices::KeypadPressedEventArgs> : class_type<Platform::Object, Windows::Media::Devices::IKeypadPressedEventArgs> {};
template<> struct def<Windows::Media::Devices::CallControlEventHandler> : delegate_type {};
template<> struct def<Windows::Media::Devices::ICallControlStatics> : interface_type<> {};
template<> struct def<Windows::Media::Devices::ICallControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::CallControl> : class_type<Platform::Object, Windows::Media::Devices::ICallControl> {};
template<> struct def<Windows::Media::Devices::DialRequestedEventHandler> : delegate_type {};
template<> struct def<Windows::Media::Devices::RedialRequestedEventHandler> : delegate_type {};
template<> struct def<Windows::Media::Devices::KeypadPressedEventHandler> : delegate_type {};

// uuids

template<> struct uuid<Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs> { define_guid(0x110F882F, 0x1C05, 0x4657, 0xA1, 0x8E, 0x47, 0xC9, 0xB6, 0x9F, 0x7, 0xAB);};
template<> struct uuid<Windows::Media::Devices::IMediaDeviceStatics> { define_guid(0xAA2D9A40, 0x909F, 0x4BBA, 0xBF, 0x8B, 0xC, 0xD, 0x29, 0x6F, 0x14, 0xF0);};
template<> struct uuid<Windows::Media::Devices::IModuleCommandResult> { define_guid(0x520D1EB4, 0x1374, 0x4C7D, 0xB1, 0xE4, 0x39, 0xDC, 0xDF, 0x3E, 0xAE, 0x4E);};
template<> struct uuid<Windows::Media::Devices::IAudioDeviceModule> { define_guid(0x86CFAC36, 0x47C1, 0x4B33, 0x98, 0x52, 0x87, 0x73, 0xEC, 0x4B, 0xE1, 0x23);};
template<> struct uuid<Windows::Media::Devices::IAudioDeviceModulesManager> { define_guid(0x6AA40C4D, 0x960A, 0x4D1C, 0xB3, 0x18, 0x0, 0x22, 0x60, 0x45, 0x47, 0xED);};
template<> struct uuid<Windows::Media::Devices::IAudioDeviceModulesManagerFactory> { define_guid(0x8DB03670, 0xE64D, 0x4773, 0x96, 0xC0, 0xBC, 0x7E, 0xBF, 0xE, 0x6, 0x3F);};
template<> struct uuid<Windows::Media::Devices::IAudioDeviceModuleNotificationEventArgs> { define_guid(0xE3E3CCAF, 0x224C, 0x48BE, 0x95, 0x6B, 0x9A, 0x13, 0x13, 0x4E, 0x96, 0xE8);};
template<> struct uuid<Windows::Media::Devices::ISceneModeControl> { define_guid(0xD48E5AF7, 0x8D59, 0x4854, 0x8C, 0x62, 0x12, 0xC7, 0xB, 0xA8, 0x9B, 0x7C);};
template<> struct uuid<Windows::Media::Devices::ITorchControl> { define_guid(0xA6053665, 0x8250, 0x416C, 0x91, 0x9A, 0x72, 0x42, 0x96, 0xAF, 0xA3, 0x6);};
template<> struct uuid<Windows::Media::Devices::IFlashControl> { define_guid(0xDEF41DBE, 0x7D68, 0x45E3, 0x8C, 0xF, 0xBE, 0x7B, 0xB3, 0x28, 0x37, 0xD0);};
template<> struct uuid<Windows::Media::Devices::IFlashControl2> { define_guid(0x7D29CC9E, 0x75E1, 0x4AF7, 0xBD, 0x7D, 0x4E, 0x38, 0xE1, 0xC0, 0x6C, 0xD6);};
template<> struct uuid<Windows::Media::Devices::IExposureCompensationControl> { define_guid(0x81C8E834, 0xDCEC, 0x4011, 0xA6, 0x10, 0x1F, 0x38, 0x47, 0xE6, 0x4A, 0xCA);};
template<> struct uuid<Windows::Media::Devices::IIsoSpeedControl> { define_guid(0x27B6C322, 0x25AD, 0x4F1B, 0xAA, 0xAB, 0x52, 0x4A, 0xB3, 0x76, 0xCA, 0x33);};
template<> struct uuid<Windows::Media::Devices::IIsoSpeedControl2> { define_guid(0x6F1578F2, 0x6D77, 0x4F8A, 0x8C, 0x2F, 0x61, 0x30, 0xB6, 0x39, 0x50, 0x53);};
template<> struct uuid<Windows::Media::Devices::IWhiteBalanceControl> { define_guid(0x781F047E, 0x7162, 0x49C8, 0xA8, 0xF9, 0x94, 0x81, 0xC5, 0x65, 0x36, 0x3E);};
template<> struct uuid<Windows::Media::Devices::IExposureControl> { define_guid(0x9E8CBE2, 0xAD96, 0x4F28, 0xA0, 0xE0, 0x96, 0xED, 0x7E, 0x1B, 0x5F, 0xD2);};
template<> struct uuid<Windows::Media::Devices::IZoomSettings> { define_guid(0x6AD66B24, 0x14B4, 0x4BFD, 0xB1, 0x8F, 0x88, 0xFE, 0x24, 0x46, 0x3B, 0x52);};
template<> struct uuid<Windows::Media::Devices::IZoomControl> { define_guid(0x3A1E0B12, 0x32DA, 0x4C17, 0xBF, 0xD7, 0x8D, 0xC, 0x73, 0xC8, 0xF5, 0xA5);};
template<> struct uuid<Windows::Media::Devices::IZoomControl2> { define_guid(0x69843DB0, 0x2E99, 0x4641, 0x85, 0x29, 0x18, 0x4F, 0x31, 0x9D, 0x16, 0x71);};
template<> struct uuid<Windows::Media::Devices::IFocusSettings> { define_guid(0x79958F6B, 0x3263, 0x4275, 0x85, 0xD6, 0xAE, 0xAE, 0x89, 0x1C, 0x96, 0xEE);};
template<> struct uuid<Windows::Media::Devices::IFocusControl> { define_guid(0xC0D889F6, 0x5228, 0x4453, 0xB1, 0x53, 0x85, 0x60, 0x65, 0x92, 0xB2, 0x38);};
template<> struct uuid<Windows::Media::Devices::IFocusControl2> { define_guid(0x3F7CFF48, 0xC534, 0x4E9E, 0x94, 0xC3, 0x52, 0xEF, 0x2A, 0xFD, 0x5D, 0x7);};
template<> struct uuid<Windows::Media::Devices::IRegionOfInterest> { define_guid(0xE5ECC834, 0xCE66, 0x4E05, 0xA7, 0x8F, 0xCF, 0x39, 0x1A, 0x5E, 0xC2, 0xD1);};
template<> struct uuid<Windows::Media::Devices::IRegionOfInterest2> { define_guid(0x19FE2A91, 0x73AA, 0x4D51, 0x8A, 0x9D, 0x56, 0xCC, 0xF7, 0xDB, 0x7F, 0x54);};
template<> struct uuid<Windows::Media::Devices::IRegionsOfInterestControl> { define_guid(0xC323F527, 0xAB0B, 0x4558, 0x8B, 0x5B, 0xDF, 0x56, 0x93, 0xDB, 0x3, 0x78);};
template<> struct uuid<Windows::Media::Devices::IExposurePriorityVideoControl> { define_guid(0x2CB240A3, 0x5168, 0x4271, 0x9E, 0xA5, 0x47, 0x62, 0x1A, 0x98, 0xA3, 0x52);};
template<> struct uuid<Windows::Media::Devices::IHdrVideoControl> { define_guid(0x55D8E2D0, 0x30C0, 0x43BF, 0x9B, 0x9A, 0x97, 0x99, 0xD7, 0xC, 0xED, 0x94);};
template<> struct uuid<Windows::Media::Devices::IAdvancedPhotoCaptureSettings> { define_guid(0x8F3863A, 0x18, 0x445B, 0x93, 0xD2, 0x64, 0x6D, 0x1C, 0x5E, 0xD0, 0x5C);};
template<> struct uuid<Windows::Media::Devices::IAdvancedPhotoControl> { define_guid(0xC5B15486, 0x9001, 0x4682, 0x93, 0x9, 0x68, 0xEA, 0xE0, 0x8, 0xE, 0xEC);};
template<> struct uuid<Windows::Media::Devices::IOpticalImageStabilizationControl> { define_guid(0xBFAD9C1D, 0xBC, 0x423B, 0x8E, 0xB2, 0xA0, 0x17, 0x8C, 0xA9, 0x42, 0x47);};
template<> struct uuid<Windows::Media::Devices::IVideoTemporalDenoisingControl> { define_guid(0x7AB34735, 0x3E2A, 0x4A32, 0xBA, 0xFF, 0x43, 0x58, 0xC4, 0xFB, 0xDD, 0x57);};
template<> struct uuid<Windows::Media::Devices::IMediaDeviceController> { define_guid(0xF6F8F5CE, 0x209A, 0x48FB, 0x86, 0xFC, 0xD4, 0x45, 0x78, 0xF3, 0x17, 0xE6);};
template<> struct uuid<Windows::Media::Devices::IAudioDeviceController> { define_guid(0xEDD4A388, 0x79C7, 0x4F7C, 0x90, 0xE8, 0xEF, 0x93, 0x4B, 0x21, 0x58, 0xA);};
template<> struct uuid<Windows::Media::Devices::IVideoDeviceController> { define_guid(0x99555575, 0x2E2E, 0x40B8, 0xB6, 0xC7, 0xF8, 0x2D, 0x10, 0x1, 0x32, 0x10);};
template<> struct uuid<Windows::Media::Devices::IMediaDeviceControl> { define_guid(0xEFA8DFA9, 0x6F75, 0x4863, 0xBA, 0xB, 0x58, 0x3F, 0x30, 0x36, 0xB4, 0xDE);};
template<> struct uuid<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2> { define_guid(0x8BB94F8F, 0xF11A, 0x43DB, 0xB4, 0x2, 0x11, 0x93, 0xB, 0x80, 0xAE, 0x56);};
template<> struct uuid<Windows::Media::Devices::ILowLagPhotoSequenceControl> { define_guid(0x3DCF909D, 0x6D16, 0x409C, 0xBA, 0xFE, 0xB9, 0xA5, 0x94, 0xC6, 0xFD, 0xE6);};
template<> struct uuid<Windows::Media::Devices::ILowLagPhotoControl> { define_guid(0x6D5C4DD0, 0xFADF, 0x415D, 0xAE, 0xE6, 0x3B, 0xAA, 0x52, 0x93, 0x0, 0xC9);};
template<> struct uuid<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController3> { define_guid(0xA98B8F34, 0xEE0D, 0x470C, 0xB9, 0xF0, 0x42, 0x29, 0xC4, 0xBB, 0xD0, 0x89);};
template<> struct uuid<Windows::Media::Devices::IPhotoConfirmationControl> { define_guid(0xC8F3F363, 0xFF5E, 0x4582, 0xA9, 0xA8, 0x5, 0x50, 0xF8, 0x5A, 0x4A, 0x76);};
template<> struct uuid<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController4> { define_guid(0xEA9FBFAF, 0xD371, 0x41C3, 0x9A, 0x17, 0x82, 0x4A, 0x87, 0xEB, 0xDF, 0xD2);};
template<> struct uuid<Windows::Media::Devices::IVideoDeviceControllerGetDevicePropertyResult> { define_guid(0xC5D88395, 0x6ED5, 0x4790, 0x8B, 0x5D, 0xE, 0xF1, 0x39, 0x35, 0xD0, 0xF8);};
template<> struct uuid<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController5> { define_guid(0x33512B17, 0xB9CB, 0x4A23, 0xB8, 0x75, 0xF9, 0xEA, 0xAB, 0x53, 0x54, 0x92);};
template<> struct uuid<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController6> { define_guid(0xB6563A53, 0x68A1, 0x44B7, 0x9F, 0x89, 0xB5, 0xFA, 0x97, 0xAC, 0xC, 0xBE);};
template<> struct uuid<Windows::Media::Devices::IMediaDeviceControlCapabilities> { define_guid(0x23005816, 0xEB85, 0x43E2, 0xB9, 0x2B, 0x82, 0x40, 0xD5, 0xEE, 0x70, 0xEC);};
template<> struct uuid<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController> { define_guid(0xDE6FF4D3, 0x2B96, 0x4583, 0x80, 0xAB, 0xB5, 0xB0, 0x1D, 0xC6, 0xA8, 0xD7);};
template<> struct uuid<Windows::Media::Devices::IDialRequestedEventArgs> { define_guid(0x37B929E, 0x953C, 0x4286, 0x88, 0x66, 0x4F, 0xF, 0x37, 0x6C, 0x85, 0x5A);};
template<> struct uuid<Windows::Media::Devices::IRedialRequestedEventArgs> { define_guid(0x7EB55209, 0x76AB, 0x4C31, 0xB4, 0xE, 0x4B, 0x58, 0x37, 0x9D, 0x58, 0xC);};
template<> struct uuid<Windows::Media::Devices::IKeypadPressedEventArgs> { define_guid(0xD3A43900, 0xB4FA, 0x49CD, 0x94, 0x42, 0x89, 0xAF, 0x65, 0x68, 0xF6, 0x1);};
template<> struct uuid<Windows::Media::Devices::CallControlEventHandler> { define_guid(0x596F759F, 0x50DF, 0x4454, 0xBC, 0x63, 0x4D, 0x3D, 0x1, 0xB6, 0x19, 0x58);};
template<> struct uuid<Windows::Media::Devices::ICallControlStatics> { define_guid(0x3945AD5, 0x85AB, 0x40E1, 0xAF, 0x19, 0x56, 0xC9, 0x43, 0x3, 0xB0, 0x19);};
template<> struct uuid<Windows::Media::Devices::ICallControl> { define_guid(0xA520D0D6, 0xAE8D, 0x45DB, 0x80, 0x11, 0xCA, 0x49, 0xD3, 0xB3, 0xE5, 0x78);};
template<> struct uuid<Windows::Media::Devices::DialRequestedEventHandler> { define_guid(0x5ABBFFDB, 0xC21F, 0x4BC4, 0x89, 0x1B, 0x25, 0x7E, 0x28, 0xC1, 0xB1, 0xA4);};
template<> struct uuid<Windows::Media::Devices::RedialRequestedEventHandler> { define_guid(0xBAF257D1, 0x4EBD, 0x4B84, 0x9F, 0x47, 0x6E, 0xC4, 0x3D, 0x75, 0xD8, 0xB1);};
template<> struct uuid<Windows::Media::Devices::KeypadPressedEventHandler> { define_guid(0xE637A454, 0xC527, 0x422C, 0x89, 0x26, 0xC9, 0xAF, 0x83, 0xB5, 0x59, 0xA0);};

// types

namespace Windows { namespace Media { namespace Devices {

// IDefaultAudioDeviceChangedEventArgs
struct IDefaultAudioDeviceChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Role(AudioDeviceRole *value) = 0;
};
template<typename X> struct IDefaultAudioDeviceChangedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDefaultAudioDeviceChangedEventArgs_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			AudioDeviceRole get() { AudioDeviceRole value; hrcheck(enc(&IDefaultAudioDeviceChangedEventArgs_adaptor::Role)->_get_Role(&value)); return value; }
			AudioDeviceRole operator()() { return get(); }
			operator AudioDeviceRole () { return get(); }
		} Role;
	};
	IDefaultAudioDeviceChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDefaultAudioDeviceChangedEventArgs, X> : Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs_adaptor<X> { typedef adapt IDefaultAudioDeviceChangedEventArgs; };
template<typename X> struct IDefaultAudioDeviceChangedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Id(HSTRING *value) { return hrtry([&, this] { get_prop(value, Id); }); }
	STDMETHODIMP _get_Role(AudioDeviceRole *value) { return hrtry([&, this] { get_prop(value, Role); }); }
};
template<typename X> struct unadapt<IDefaultAudioDeviceChangedEventArgs, X> : Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs_unadaptor<X> {};
struct IDefaultAudioDeviceChangedEventArgs : IDefaultAudioDeviceChangedEventArgs_raw, generate<IDefaultAudioDeviceChangedEventArgs> {};

// IMediaDeviceStatics
struct IMediaDeviceStatics : IInspectable {
	virtual STDMETHODIMP _GetAudioCaptureSelector(HSTRING *selector);
	virtual STDMETHODIMP _GetAudioRenderSelector(HSTRING *selector);
	virtual STDMETHODIMP _GetVideoCaptureSelector(HSTRING *selector);
	virtual STDMETHODIMP _GetDefaultAudioCaptureId(AudioDeviceRole role, HSTRING *deviceId);
	virtual STDMETHODIMP _GetDefaultAudioRenderId(AudioDeviceRole role, HSTRING *deviceId);
	virtual STDMETHODIMP _add_DefaultAudioCaptureDeviceChanged(Foundation::TypedEventHandler<IInspectable*, DefaultAudioCaptureDeviceChangedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_DefaultAudioCaptureDeviceChanged(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_DefaultAudioRenderDeviceChanged(Foundation::TypedEventHandler<IInspectable*, DefaultAudioRenderDeviceChangedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_DefaultAudioRenderDeviceChanged(Foundation::EventRegistrationToken cookie);
};

// DefaultAudioCaptureDeviceChangedEventArgs
template<typename X> struct statics<DefaultAudioCaptureDeviceChangedEventArgs, X> : X {
	typedef typename X::root_type DefaultAudioCaptureDeviceChangedEventArgs;
};
struct DefaultAudioCaptureDeviceChangedEventArgs : generate<DefaultAudioCaptureDeviceChangedEventArgs> {};

// DefaultAudioRenderDeviceChangedEventArgs
template<typename X> struct statics<DefaultAudioRenderDeviceChangedEventArgs, X> : X {
	typedef typename X::root_type DefaultAudioRenderDeviceChangedEventArgs;
};
struct DefaultAudioRenderDeviceChangedEventArgs : generate<DefaultAudioRenderDeviceChangedEventArgs> {};

// IModuleCommandResult
struct IModuleCommandResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(SendCommandStatus *value);
	virtual STDMETHODIMP _get_Result(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IModuleCommandResult_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IModuleCommandResult_adaptor::Result)->_get_Result(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Result;
		struct : property {
			SendCommandStatus get() { SendCommandStatus value; hrcheck(enc(&IModuleCommandResult_adaptor::Status)->_get_Status(&value)); return value; }
			SendCommandStatus operator()() { return get(); }
			operator SendCommandStatus () { return get(); }
		} Status;
	};
	IModuleCommandResult_adaptor() {}
};
template<typename X> struct adapt<IModuleCommandResult, X> : Windows::Media::Devices::IModuleCommandResult_adaptor<X> { typedef adapt IModuleCommandResult; };
struct IModuleCommandResult : IModuleCommandResult_raw, generate<IModuleCommandResult> {};

// ModuleCommandResult
template<typename X> struct statics<ModuleCommandResult, X> : X {
	typedef typename X::root_type ModuleCommandResult;
};
struct ModuleCommandResult : generate<ModuleCommandResult> {};

// IAudioDeviceModule
struct IAudioDeviceModule_raw : IInspectable {
	virtual STDMETHODIMP _get_ClassId(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_InstanceId(unsigned *value);
	virtual STDMETHODIMP _get_MajorVersion(unsigned *value);
	virtual STDMETHODIMP _get_MinorVersion(unsigned *value);
	virtual STDMETHODIMP _SendCommandAsync(Storage::Streams::IBuffer* Command, Foundation::IAsyncOperation<ModuleCommandResult*>* *operation);
};
template<typename X> struct IAudioDeviceModule_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAudioDeviceModule_adaptor::ClassId)->_get_ClassId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ClassId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAudioDeviceModule_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAudioDeviceModule_adaptor::InstanceId)->_get_InstanceId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} InstanceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAudioDeviceModule_adaptor::MajorVersion)->_get_MajorVersion(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MajorVersion;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAudioDeviceModule_adaptor::MinorVersion)->_get_MinorVersion(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinorVersion;
	};
	ptr<Foundation::IAsyncOperation<ptr<ModuleCommandResult>>> SendCommandAsync(pptr<Storage::Streams::IBuffer> Command) { Foundation::IAsyncOperation<ModuleCommandResult*>* operation; hrcheck(X::get()->_SendCommandAsync(Command, &operation)); return from_abi(operation); }
	IAudioDeviceModule_adaptor() {}
};
template<typename X> struct adapt<IAudioDeviceModule, X> : Windows::Media::Devices::IAudioDeviceModule_adaptor<X> { typedef adapt IAudioDeviceModule; };
struct IAudioDeviceModule : IAudioDeviceModule_raw, generate<IAudioDeviceModule> {};

// IAudioDeviceModulesManager
struct IAudioDeviceModulesManager_raw : IInspectable {
	virtual STDMETHODIMP _add_ModuleNotificationReceived(Foundation::TypedEventHandler<AudioDeviceModulesManager*, AudioDeviceModuleNotificationEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ModuleNotificationReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _FindAllById(HSTRING moduleId, Foundation::Collections::IVectorView<AudioDeviceModule*>* *modules);
	virtual STDMETHODIMP _FindAll(Foundation::Collections::IVectorView<AudioDeviceModule*>* *modules);
};
template<typename X> struct IAudioDeviceModulesManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AudioDeviceModulesManager>, ptr<AudioDeviceModuleNotificationEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAudioDeviceModulesManager_adaptor::ModuleNotificationReceived)->_add_ModuleNotificationReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAudioDeviceModulesManager_adaptor::ModuleNotificationReceived)->_remove_ModuleNotificationReceived(token)); }
		} ModuleNotificationReceived;
	};
	ptr<Foundation::Collections::IVectorView<ptr<AudioDeviceModule>>> FindAllById(hstring_ref moduleId) { Foundation::Collections::IVectorView<AudioDeviceModule*>* modules; hrcheck(X::get()->_FindAllById(moduleId, &modules)); return from_abi(modules); }
	ptr<Foundation::Collections::IVectorView<ptr<AudioDeviceModule>>> FindAll() { Foundation::Collections::IVectorView<AudioDeviceModule*>* modules; hrcheck(X::get()->_FindAll(&modules)); return from_abi(modules); }
	IAudioDeviceModulesManager_adaptor() {}
};
template<typename X> struct adapt<IAudioDeviceModulesManager, X> : Windows::Media::Devices::IAudioDeviceModulesManager_adaptor<X> { typedef adapt IAudioDeviceModulesManager; };
struct IAudioDeviceModulesManager : IAudioDeviceModulesManager_raw, generate<IAudioDeviceModulesManager> {};

// IAudioDeviceModulesManagerFactory
struct IAudioDeviceModulesManagerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING deviceId, AudioDeviceModulesManager* *result);
};

// AudioDeviceModulesManager
template<typename> struct AudioDeviceModulesManager_statics {
	static AudioDeviceModulesManager *activate(hstring_ref deviceId) { AudioDeviceModulesManager *result; hrcheck(get_activation_factory<AudioDeviceModulesManager, IAudioDeviceModulesManagerFactory>()->_Create(deviceId, &result)); return result; }
};

template<typename X> struct statics<AudioDeviceModulesManager, X> : X, Windows::Media::Devices::AudioDeviceModulesManager_statics<void> {
	using Windows::Media::Devices::AudioDeviceModulesManager_statics<void>::activate;
	typedef typename X::root_type AudioDeviceModulesManager;
};
struct AudioDeviceModulesManager : generate<AudioDeviceModulesManager> {};

// IAudioDeviceModuleNotificationEventArgs
struct IAudioDeviceModuleNotificationEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Module(AudioDeviceModule* *value);
	virtual STDMETHODIMP _get_NotificationData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IAudioDeviceModuleNotificationEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AudioDeviceModule> get() { AudioDeviceModule* value; hrcheck(enc(&IAudioDeviceModuleNotificationEventArgs_adaptor::Module)->_get_Module(&value)); return from_abi(value); }
			ptr<AudioDeviceModule> operator()() { return get(); }
			operator ptr<AudioDeviceModule> () { return get(); }
			ptr<AudioDeviceModule> operator->() { return get(); }
		} Module;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IAudioDeviceModuleNotificationEventArgs_adaptor::NotificationData)->_get_NotificationData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} NotificationData;
	};
	IAudioDeviceModuleNotificationEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAudioDeviceModuleNotificationEventArgs, X> : Windows::Media::Devices::IAudioDeviceModuleNotificationEventArgs_adaptor<X> { typedef adapt IAudioDeviceModuleNotificationEventArgs; };
struct IAudioDeviceModuleNotificationEventArgs : IAudioDeviceModuleNotificationEventArgs_raw, generate<IAudioDeviceModuleNotificationEventArgs> {};

// AudioDeviceModuleNotificationEventArgs
template<typename X> struct statics<AudioDeviceModuleNotificationEventArgs, X> : X {
	typedef typename X::root_type AudioDeviceModuleNotificationEventArgs;
};
struct AudioDeviceModuleNotificationEventArgs : generate<AudioDeviceModuleNotificationEventArgs> {};

// AudioDeviceModule
template<typename X> struct statics<AudioDeviceModule, X> : X {
	typedef typename X::root_type AudioDeviceModule;
};
struct AudioDeviceModule : generate<AudioDeviceModule> {};

// MediaDevice
template<typename> struct MediaDevice_statics {
	static struct _DefaultAudioCaptureDeviceChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<DefaultAudioCaptureDeviceChangedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_add_DefaultAudioCaptureDeviceChanged(to_abi(handler), &cookie)); return cookie; }
		void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_remove_DefaultAudioCaptureDeviceChanged(cookie)); }
	} DefaultAudioCaptureDeviceChanged;
	static struct _DefaultAudioRenderDeviceChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<object, ptr<DefaultAudioRenderDeviceChangedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_add_DefaultAudioRenderDeviceChanged(to_abi(handler), &cookie)); return cookie; }
		void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_remove_DefaultAudioRenderDeviceChanged(cookie)); }
	} DefaultAudioRenderDeviceChanged;
	static hstring GetAudioCaptureSelector() { HSTRING selector; hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_GetAudioCaptureSelector(&selector)); return from_abi(selector); }
	static hstring GetAudioRenderSelector() { HSTRING selector; hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_GetAudioRenderSelector(&selector)); return from_abi(selector); }
	static hstring GetVideoCaptureSelector() { HSTRING selector; hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_GetVideoCaptureSelector(&selector)); return from_abi(selector); }
	static hstring GetDefaultAudioCaptureId(AudioDeviceRole role) { HSTRING deviceId; hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_GetDefaultAudioCaptureId(role, &deviceId)); return from_abi(deviceId); }
	static hstring GetDefaultAudioRenderId(AudioDeviceRole role) { HSTRING deviceId; hrcheck(get_activation_factory<MediaDevice, IMediaDeviceStatics>()->_GetDefaultAudioRenderId(role, &deviceId)); return from_abi(deviceId); }
};
template<typename X> typename MediaDevice_statics<X>::_DefaultAudioCaptureDeviceChanged MediaDevice_statics<X>::DefaultAudioCaptureDeviceChanged;
template<typename X> typename MediaDevice_statics<X>::_DefaultAudioRenderDeviceChanged MediaDevice_statics<X>::DefaultAudioRenderDeviceChanged;

template<typename X> struct statics<MediaDevice, X> : X, Windows::Media::Devices::MediaDevice_statics<void> {
	typedef typename X::root_type MediaDevice;
};
struct MediaDevice : generate<MediaDevice> {};

// ISceneModeControl
struct ISceneModeControl_raw : IInspectable {
	virtual STDMETHODIMP _get_SupportedModes(Foundation::Collections::IVectorView<CaptureSceneMode>* *value);
	virtual STDMETHODIMP _get_Value(CaptureSceneMode *value);
	virtual STDMETHODIMP _SetValueAsync(CaptureSceneMode sceneMode, Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct ISceneModeControl_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<CaptureSceneMode>> get() { Foundation::Collections::IVectorView<CaptureSceneMode>* value; hrcheck(enc(&ISceneModeControl_adaptor::SupportedModes)->_get_SupportedModes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<CaptureSceneMode>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<CaptureSceneMode>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<CaptureSceneMode>> operator->() { return get(); }
		} SupportedModes;
		struct : property {
			CaptureSceneMode get() { CaptureSceneMode value; hrcheck(enc(&ISceneModeControl_adaptor::Value)->_get_Value(&value)); return value; }
			CaptureSceneMode operator()() { return get(); }
			operator CaptureSceneMode () { return get(); }
		} Value;
	};
	ptr<Foundation::IAsyncAction> SetValueAsync(CaptureSceneMode sceneMode) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetValueAsync(sceneMode, &asyncInfo)); return from_abi(asyncInfo); }
	ISceneModeControl_adaptor() {}
};
template<typename X> struct adapt<ISceneModeControl, X> : Windows::Media::Devices::ISceneModeControl_adaptor<X> { typedef adapt ISceneModeControl; };
struct ISceneModeControl : ISceneModeControl_raw, generate<ISceneModeControl> {};

// SceneModeControl
template<typename X> struct statics<SceneModeControl, X> : X {
	typedef typename X::root_type SceneModeControl;
};
struct SceneModeControl : generate<SceneModeControl> {};

// ITorchControl
struct ITorchControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_PowerSupported(bool *value);
	virtual STDMETHODIMP _get_Enabled(bool *value);
	virtual STDMETHODIMP _put_Enabled(bool value);
	virtual STDMETHODIMP _get_PowerPercent(float *value);
	virtual STDMETHODIMP _put_PowerPercent(float value);
};
template<typename X> struct ITorchControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITorchControl_adaptor::Enabled)->_get_Enabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ITorchControl_adaptor::Enabled)->_put_Enabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Enabled;
		struct : property {
			float get() { float value; hrcheck(enc(&ITorchControl_adaptor::PowerPercent)->_get_PowerPercent(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&ITorchControl_adaptor::PowerPercent)->_put_PowerPercent(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} PowerPercent;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITorchControl_adaptor::PowerSupported)->_get_PowerSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} PowerSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITorchControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	ITorchControl_adaptor() {}
};
template<typename X> struct adapt<ITorchControl, X> : Windows::Media::Devices::ITorchControl_adaptor<X> { typedef adapt ITorchControl; };
struct ITorchControl : ITorchControl_raw, generate<ITorchControl> {};

// TorchControl
template<typename X> struct statics<TorchControl, X> : X {
	typedef typename X::root_type TorchControl;
};
struct TorchControl : generate<TorchControl> {};

// IFlashControl
struct IFlashControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_PowerSupported(bool *value);
	virtual STDMETHODIMP _get_RedEyeReductionSupported(bool *value);
	virtual STDMETHODIMP _get_Enabled(bool *value);
	virtual STDMETHODIMP _put_Enabled(bool value);
	virtual STDMETHODIMP _get_Auto(bool *value);
	virtual STDMETHODIMP _put_Auto(bool value);
	virtual STDMETHODIMP _get_RedEyeReduction(bool *value);
	virtual STDMETHODIMP _put_RedEyeReduction(bool value);
	virtual STDMETHODIMP _get_PowerPercent(float *value);
	virtual STDMETHODIMP _put_PowerPercent(float value);
};
template<typename X> struct IFlashControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl_adaptor::Auto)->_get_Auto(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFlashControl_adaptor::Auto)->_put_Auto(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Auto;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl_adaptor::Enabled)->_get_Enabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFlashControl_adaptor::Enabled)->_put_Enabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Enabled;
		struct : property {
			float get() { float value; hrcheck(enc(&IFlashControl_adaptor::PowerPercent)->_get_PowerPercent(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IFlashControl_adaptor::PowerPercent)->_put_PowerPercent(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} PowerPercent;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl_adaptor::PowerSupported)->_get_PowerSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} PowerSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl_adaptor::RedEyeReduction)->_get_RedEyeReduction(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFlashControl_adaptor::RedEyeReduction)->_put_RedEyeReduction(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} RedEyeReduction;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl_adaptor::RedEyeReductionSupported)->_get_RedEyeReductionSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} RedEyeReductionSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IFlashControl_adaptor() {}
};
template<typename X> struct adapt<IFlashControl, X> : Windows::Media::Devices::IFlashControl_adaptor<X> { typedef adapt IFlashControl; };
struct IFlashControl : IFlashControl_raw, generate<IFlashControl> {};

// IFlashControl2
struct IFlashControl2_raw : IInspectable {
	virtual STDMETHODIMP _get_AssistantLightSupported(bool *value);
	virtual STDMETHODIMP _get_AssistantLightEnabled(bool *value);
	virtual STDMETHODIMP _put_AssistantLightEnabled(bool value);
};
template<typename X> struct IFlashControl2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl2_adaptor::AssistantLightEnabled)->_get_AssistantLightEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFlashControl2_adaptor::AssistantLightEnabled)->_put_AssistantLightEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AssistantLightEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFlashControl2_adaptor::AssistantLightSupported)->_get_AssistantLightSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AssistantLightSupported;
	};
	IFlashControl2_adaptor() {}
};
template<typename X> struct adapt<IFlashControl2, X> : Windows::Media::Devices::IFlashControl2_adaptor<X> { typedef adapt IFlashControl2; };
struct IFlashControl2 : IFlashControl2_raw, generate<IFlashControl2> {};

// FlashControl
template<typename X> struct statics<FlashControl, X> : X {
	typedef typename X::root_type FlashControl;
};
struct FlashControl : generate<FlashControl> {};

// IExposureCompensationControl
struct IExposureCompensationControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Min(float *value);
	virtual STDMETHODIMP _get_Max(float *value);
	virtual STDMETHODIMP _get_Step(float *value);
	virtual STDMETHODIMP _get_Value(float *value);
	virtual STDMETHODIMP _SetValueAsync(float value, Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct IExposureCompensationControl_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&IExposureCompensationControl_adaptor::Max)->_get_Max(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Max;
		struct : property {
			float get() { float value; hrcheck(enc(&IExposureCompensationControl_adaptor::Min)->_get_Min(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Min;
		struct : property {
			float get() { float value; hrcheck(enc(&IExposureCompensationControl_adaptor::Step)->_get_Step(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IExposureCompensationControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			float get() { float value; hrcheck(enc(&IExposureCompensationControl_adaptor::Value)->_get_Value(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Value;
	};
	ptr<Foundation::IAsyncAction> SetValueAsync(float value) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetValueAsync(value, &asyncInfo)); return from_abi(asyncInfo); }
	IExposureCompensationControl_adaptor() {}
};
template<typename X> struct adapt<IExposureCompensationControl, X> : Windows::Media::Devices::IExposureCompensationControl_adaptor<X> { typedef adapt IExposureCompensationControl; };
struct IExposureCompensationControl : IExposureCompensationControl_raw, generate<IExposureCompensationControl> {};

// ExposureCompensationControl
template<typename X> struct statics<ExposureCompensationControl, X> : X {
	typedef typename X::root_type ExposureCompensationControl;
};
struct ExposureCompensationControl : generate<ExposureCompensationControl> {};

// IIsoSpeedControl
struct IIsoSpeedControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_SupportedPresets(Foundation::Collections::IVectorView<IsoSpeedPreset>* *value);
	virtual STDMETHODIMP _get_Preset(IsoSpeedPreset *value);
	virtual STDMETHODIMP _SetPresetAsync(IsoSpeedPreset preset, Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct IIsoSpeedControl_adaptor : X {
	union {
		struct : property {
			IsoSpeedPreset get() { IsoSpeedPreset value; hrcheck(enc(&IIsoSpeedControl_adaptor::Preset)->_get_Preset(&value)); return value; }
			IsoSpeedPreset operator()() { return get(); }
			operator IsoSpeedPreset () { return get(); }
		} Preset;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IIsoSpeedControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			ptr<Foundation::Collections::IVectorView<IsoSpeedPreset>> get() { Foundation::Collections::IVectorView<IsoSpeedPreset>* value; hrcheck(enc(&IIsoSpeedControl_adaptor::SupportedPresets)->_get_SupportedPresets(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<IsoSpeedPreset>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<IsoSpeedPreset>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<IsoSpeedPreset>> operator->() { return get(); }
		} SupportedPresets;
	};
	ptr<Foundation::IAsyncAction> SetPresetAsync(IsoSpeedPreset preset) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetPresetAsync(preset, &asyncInfo)); return from_abi(asyncInfo); }
	IIsoSpeedControl_adaptor() {}
};
template<typename X> struct adapt<IIsoSpeedControl, X> : Windows::Media::Devices::IIsoSpeedControl_adaptor<X> { typedef adapt IIsoSpeedControl; };
struct IIsoSpeedControl : IIsoSpeedControl_raw, generate<IIsoSpeedControl> {};

// IIsoSpeedControl2
struct IIsoSpeedControl2_raw : IInspectable {
	virtual STDMETHODIMP _get_Min(unsigned *value);
	virtual STDMETHODIMP _get_Max(unsigned *value);
	virtual STDMETHODIMP _get_Step(unsigned *value);
	virtual STDMETHODIMP _get_Value(unsigned *value);
	virtual STDMETHODIMP _SetValueAsync(unsigned isoSpeed, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _get_Auto(bool *value);
	virtual STDMETHODIMP _SetAutoAsync(Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct IIsoSpeedControl2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IIsoSpeedControl2_adaptor::Auto)->_get_Auto(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Auto;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IIsoSpeedControl2_adaptor::Max)->_get_Max(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Max;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IIsoSpeedControl2_adaptor::Min)->_get_Min(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Min;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IIsoSpeedControl2_adaptor::Step)->_get_Step(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Step;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IIsoSpeedControl2_adaptor::Value)->_get_Value(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Value;
	};
	ptr<Foundation::IAsyncAction> SetValueAsync(unsigned isoSpeed) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetValueAsync(isoSpeed, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> SetAutoAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetAutoAsync(&asyncInfo)); return from_abi(asyncInfo); }
	IIsoSpeedControl2_adaptor() {}
};
template<typename X> struct adapt<IIsoSpeedControl2, X> : Windows::Media::Devices::IIsoSpeedControl2_adaptor<X> { typedef adapt IIsoSpeedControl2; };
struct IIsoSpeedControl2 : IIsoSpeedControl2_raw, generate<IIsoSpeedControl2> {};

// IsoSpeedControl
template<typename X> struct statics<IsoSpeedControl, X> : X {
	typedef typename X::root_type IsoSpeedControl;
};
struct IsoSpeedControl : generate<IsoSpeedControl> {};

// IWhiteBalanceControl
struct IWhiteBalanceControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Preset(ColorTemperaturePreset *value);
	virtual STDMETHODIMP _SetPresetAsync(ColorTemperaturePreset preset, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _get_Min(unsigned *value);
	virtual STDMETHODIMP _get_Max(unsigned *value);
	virtual STDMETHODIMP _get_Step(unsigned *value);
	virtual STDMETHODIMP _get_Value(unsigned *value);
	virtual STDMETHODIMP _SetValueAsync(unsigned temperature, Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct IWhiteBalanceControl_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWhiteBalanceControl_adaptor::Max)->_get_Max(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Max;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWhiteBalanceControl_adaptor::Min)->_get_Min(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Min;
		struct : property {
			ColorTemperaturePreset get() { ColorTemperaturePreset value; hrcheck(enc(&IWhiteBalanceControl_adaptor::Preset)->_get_Preset(&value)); return value; }
			ColorTemperaturePreset operator()() { return get(); }
			operator ColorTemperaturePreset () { return get(); }
		} Preset;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWhiteBalanceControl_adaptor::Step)->_get_Step(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWhiteBalanceControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWhiteBalanceControl_adaptor::Value)->_get_Value(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Value;
	};
	ptr<Foundation::IAsyncAction> SetPresetAsync(ColorTemperaturePreset preset) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetPresetAsync(preset, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> SetValueAsync(unsigned temperature) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetValueAsync(temperature, &asyncInfo)); return from_abi(asyncInfo); }
	IWhiteBalanceControl_adaptor() {}
};
template<typename X> struct adapt<IWhiteBalanceControl, X> : Windows::Media::Devices::IWhiteBalanceControl_adaptor<X> { typedef adapt IWhiteBalanceControl; };
struct IWhiteBalanceControl : IWhiteBalanceControl_raw, generate<IWhiteBalanceControl> {};

// WhiteBalanceControl
template<typename X> struct statics<WhiteBalanceControl, X> : X {
	typedef typename X::root_type WhiteBalanceControl;
};
struct WhiteBalanceControl : generate<WhiteBalanceControl> {};

// IExposureControl
struct IExposureControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Auto(bool *value);
	virtual STDMETHODIMP _SetAutoAsync(bool value, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _get_Min(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Max(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Step(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Value(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _SetValueAsync(Foundation::TimeSpan shutterDuration, Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct IExposureControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IExposureControl_adaptor::Auto)->_get_Auto(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Auto;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IExposureControl_adaptor::Max)->_get_Max(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Max;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IExposureControl_adaptor::Min)->_get_Min(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Min;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IExposureControl_adaptor::Step)->_get_Step(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IExposureControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IExposureControl_adaptor::Value)->_get_Value(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Value;
	};
	ptr<Foundation::IAsyncAction> SetAutoAsync(bool value) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetAutoAsync(value, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> SetValueAsync(const Foundation::TimeSpan& shutterDuration) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetValueAsync(shutterDuration, &asyncInfo)); return from_abi(asyncInfo); }
	IExposureControl_adaptor() {}
};
template<typename X> struct adapt<IExposureControl, X> : Windows::Media::Devices::IExposureControl_adaptor<X> { typedef adapt IExposureControl; };
struct IExposureControl : IExposureControl_raw, generate<IExposureControl> {};

// ExposureControl
template<typename X> struct statics<ExposureControl, X> : X {
	typedef typename X::root_type ExposureControl;
};
struct ExposureControl : generate<ExposureControl> {};

// IZoomSettings
struct IZoomSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_Mode(ZoomTransitionMode *value);
	virtual STDMETHODIMP _put_Mode(ZoomTransitionMode value);
	virtual STDMETHODIMP _get_Value(float *value);
	virtual STDMETHODIMP _put_Value(float value);
};
template<typename X> struct IZoomSettings_adaptor : X {
	union {
		struct : property {
			ZoomTransitionMode get() { ZoomTransitionMode value; hrcheck(enc(&IZoomSettings_adaptor::Mode)->_get_Mode(&value)); return value; }
			ZoomTransitionMode operator()() { return get(); }
			operator ZoomTransitionMode () { return get(); }
			void put(ZoomTransitionMode value) { hrcheck(enc(&IZoomSettings_adaptor::Mode)->_put_Mode(value)); }
			void operator=(ZoomTransitionMode value) { put(value); }
			void operator()(ZoomTransitionMode value) { put(value); }
		} Mode;
		struct : property {
			float get() { float value; hrcheck(enc(&IZoomSettings_adaptor::Value)->_get_Value(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IZoomSettings_adaptor::Value)->_put_Value(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} Value;
	};
	IZoomSettings_adaptor() {}
};
template<typename X> struct adapt<IZoomSettings, X> : Windows::Media::Devices::IZoomSettings_adaptor<X> { typedef adapt IZoomSettings; };
struct IZoomSettings : IZoomSettings_raw, generate<IZoomSettings> {};

// ZoomSettings
template<typename X> struct statics<ZoomSettings, X> : X {
	typedef typename X::root_type ZoomSettings;
};
struct ZoomSettings : generate<ZoomSettings> {};

// IZoomControl
struct IZoomControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Min(float *value);
	virtual STDMETHODIMP _get_Max(float *value);
	virtual STDMETHODIMP _get_Step(float *value);
	virtual STDMETHODIMP _get_Value(float *value);
	virtual STDMETHODIMP _put_Value(float value);
};
template<typename X> struct IZoomControl_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&IZoomControl_adaptor::Max)->_get_Max(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Max;
		struct : property {
			float get() { float value; hrcheck(enc(&IZoomControl_adaptor::Min)->_get_Min(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Min;
		struct : property {
			float get() { float value; hrcheck(enc(&IZoomControl_adaptor::Step)->_get_Step(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IZoomControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			float get() { float value; hrcheck(enc(&IZoomControl_adaptor::Value)->_get_Value(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IZoomControl_adaptor::Value)->_put_Value(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} Value;
	};
	IZoomControl_adaptor() {}
};
template<typename X> struct adapt<IZoomControl, X> : Windows::Media::Devices::IZoomControl_adaptor<X> { typedef adapt IZoomControl; };
struct IZoomControl : IZoomControl_raw, generate<IZoomControl> {};

// IZoomControl2
struct IZoomControl2_raw : IInspectable {
	virtual STDMETHODIMP _get_SupportedModes(Foundation::Collections::IVectorView<ZoomTransitionMode>* *value);
	virtual STDMETHODIMP _get_Mode(ZoomTransitionMode *value);
	virtual STDMETHODIMP _Configure(ZoomSettings* settings);
};
template<typename X> struct IZoomControl2_adaptor : X {
	union {
		struct : property {
			ZoomTransitionMode get() { ZoomTransitionMode value; hrcheck(enc(&IZoomControl2_adaptor::Mode)->_get_Mode(&value)); return value; }
			ZoomTransitionMode operator()() { return get(); }
			operator ZoomTransitionMode () { return get(); }
		} Mode;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ZoomTransitionMode>> get() { Foundation::Collections::IVectorView<ZoomTransitionMode>* value; hrcheck(enc(&IZoomControl2_adaptor::SupportedModes)->_get_SupportedModes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ZoomTransitionMode>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ZoomTransitionMode>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ZoomTransitionMode>> operator->() { return get(); }
		} SupportedModes;
	};
	void Configure(pptr<ZoomSettings> settings) { hrcheck(X::get()->_Configure(settings)); }
	IZoomControl2_adaptor() {}
};
template<typename X> struct adapt<IZoomControl2, X> : Windows::Media::Devices::IZoomControl2_adaptor<X> { typedef adapt IZoomControl2; };
struct IZoomControl2 : IZoomControl2_raw, generate<IZoomControl2> {};

// ZoomControl
template<typename X> struct statics<ZoomControl, X> : X {
	typedef typename X::root_type ZoomControl;
};
struct ZoomControl : generate<ZoomControl> {};

// IFocusSettings
struct IFocusSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_Mode(FocusMode *value);
	virtual STDMETHODIMP _put_Mode(FocusMode value);
	virtual STDMETHODIMP _get_AutoFocusRange(Devices::AutoFocusRange *value);
	virtual STDMETHODIMP _put_AutoFocusRange(Devices::AutoFocusRange value);
	virtual STDMETHODIMP _get_Value(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_Value(Foundation::IReference<unsigned>* value);
	virtual STDMETHODIMP _get_Distance(Foundation::IReference<ManualFocusDistance>* *value);
	virtual STDMETHODIMP _put_Distance(Foundation::IReference<ManualFocusDistance>* value);
	virtual STDMETHODIMP _get_WaitForFocus(bool *value);
	virtual STDMETHODIMP _put_WaitForFocus(bool value);
	virtual STDMETHODIMP _get_DisableDriverFallback(bool *value);
	virtual STDMETHODIMP _put_DisableDriverFallback(bool value);
};
template<typename X> struct IFocusSettings_adaptor : X {
	union {
		struct : property {
			Devices::AutoFocusRange get() { Devices::AutoFocusRange value; hrcheck(enc(&IFocusSettings_adaptor::AutoFocusRange)->_get_AutoFocusRange(&value)); return value; }
			Devices::AutoFocusRange operator()() { return get(); }
			operator Devices::AutoFocusRange () { return get(); }
			void put(Devices::AutoFocusRange value) { hrcheck(enc(&IFocusSettings_adaptor::AutoFocusRange)->_put_AutoFocusRange(value)); }
			void operator=(Devices::AutoFocusRange value) { put(value); }
			void operator()(Devices::AutoFocusRange value) { put(value); }
		} AutoFocusRange;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFocusSettings_adaptor::DisableDriverFallback)->_get_DisableDriverFallback(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFocusSettings_adaptor::DisableDriverFallback)->_put_DisableDriverFallback(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} DisableDriverFallback;
		struct : property {
			ptr<Foundation::IReference<ManualFocusDistance>> get() { Foundation::IReference<ManualFocusDistance>* value; hrcheck(enc(&IFocusSettings_adaptor::Distance)->_get_Distance(&value)); return from_abi(value); }
			ptr<Foundation::IReference<ManualFocusDistance>> operator()() { return get(); }
			operator ptr<Foundation::IReference<ManualFocusDistance>> () { return get(); }
			ptr<Foundation::IReference<ManualFocusDistance>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<ManualFocusDistance>> value) { hrcheck(enc(&IFocusSettings_adaptor::Distance)->_put_Distance(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<ManualFocusDistance>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<ManualFocusDistance>> value) { put(to_abi(value)); }
		} Distance;
		struct : property {
			FocusMode get() { FocusMode value; hrcheck(enc(&IFocusSettings_adaptor::Mode)->_get_Mode(&value)); return value; }
			FocusMode operator()() { return get(); }
			operator FocusMode () { return get(); }
			void put(FocusMode value) { hrcheck(enc(&IFocusSettings_adaptor::Mode)->_put_Mode(value)); }
			void operator=(FocusMode value) { put(value); }
			void operator()(FocusMode value) { put(value); }
		} Mode;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IFocusSettings_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IFocusSettings_adaptor::Value)->_put_Value(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} Value;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFocusSettings_adaptor::WaitForFocus)->_get_WaitForFocus(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFocusSettings_adaptor::WaitForFocus)->_put_WaitForFocus(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} WaitForFocus;
	};
	IFocusSettings_adaptor() {}
};
template<typename X> struct adapt<IFocusSettings, X> : Windows::Media::Devices::IFocusSettings_adaptor<X> { typedef adapt IFocusSettings; };
struct IFocusSettings : IFocusSettings_raw, generate<IFocusSettings> {};

// FocusSettings
template<typename X> struct statics<FocusSettings, X> : X {
	typedef typename X::root_type FocusSettings;
};
struct FocusSettings : generate<FocusSettings> {};

// IFocusControl
struct IFocusControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_SupportedPresets(Foundation::Collections::IVectorView<FocusPreset>* *value);
	virtual STDMETHODIMP _get_Preset(FocusPreset *value);
	virtual STDMETHODIMP _SetPresetAsync(FocusPreset preset, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _SetPresetWithCompletionOptionAsync(FocusPreset preset, bool completeBeforeFocus, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _get_Min(unsigned *value);
	virtual STDMETHODIMP _get_Max(unsigned *value);
	virtual STDMETHODIMP _get_Step(unsigned *value);
	virtual STDMETHODIMP _get_Value(unsigned *value);
	virtual STDMETHODIMP _SetValueAsync(unsigned focus, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _FocusAsync(Foundation::IAsyncAction* *asyncInfo);
};
template<typename X> struct IFocusControl_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFocusControl_adaptor::Max)->_get_Max(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Max;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFocusControl_adaptor::Min)->_get_Min(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Min;
		struct : property {
			FocusPreset get() { FocusPreset value; hrcheck(enc(&IFocusControl_adaptor::Preset)->_get_Preset(&value)); return value; }
			FocusPreset operator()() { return get(); }
			operator FocusPreset () { return get(); }
		} Preset;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFocusControl_adaptor::Step)->_get_Step(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFocusControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			ptr<Foundation::Collections::IVectorView<FocusPreset>> get() { Foundation::Collections::IVectorView<FocusPreset>* value; hrcheck(enc(&IFocusControl_adaptor::SupportedPresets)->_get_SupportedPresets(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<FocusPreset>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<FocusPreset>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<FocusPreset>> operator->() { return get(); }
		} SupportedPresets;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFocusControl_adaptor::Value)->_get_Value(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Value;
	};
	ptr<Foundation::IAsyncAction> SetPresetAsync(FocusPreset preset) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetPresetAsync(preset, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> SetPresetAsync(FocusPreset preset, bool completeBeforeFocus) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetPresetWithCompletionOptionAsync(preset, completeBeforeFocus, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> SetValueAsync(unsigned focus) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetValueAsync(focus, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> FocusAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_FocusAsync(&asyncInfo)); return from_abi(asyncInfo); }
	IFocusControl_adaptor() {}
};
template<typename X> struct adapt<IFocusControl, X> : Windows::Media::Devices::IFocusControl_adaptor<X> { typedef adapt IFocusControl; };
struct IFocusControl : IFocusControl_raw, generate<IFocusControl> {};

// IFocusControl2
struct IFocusControl2_raw : IInspectable {
	virtual STDMETHODIMP _get_FocusChangedSupported(bool *value);
	virtual STDMETHODIMP _get_WaitForFocusSupported(bool *value);
	virtual STDMETHODIMP _get_SupportedFocusModes(Foundation::Collections::IVectorView<FocusMode>* *value);
	virtual STDMETHODIMP _get_SupportedFocusDistances(Foundation::Collections::IVectorView<ManualFocusDistance>* *value);
	virtual STDMETHODIMP _get_SupportedFocusRanges(Foundation::Collections::IVectorView<AutoFocusRange>* *value);
	virtual STDMETHODIMP _get_Mode(FocusMode *value);
	virtual STDMETHODIMP _get_FocusState(MediaCaptureFocusState *value);
	virtual STDMETHODIMP _UnlockAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _LockAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _Configure(FocusSettings* settings);
};
template<typename X> struct IFocusControl2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFocusControl2_adaptor::FocusChangedSupported)->_get_FocusChangedSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} FocusChangedSupported;
		struct : property {
			MediaCaptureFocusState get() { MediaCaptureFocusState value; hrcheck(enc(&IFocusControl2_adaptor::FocusState)->_get_FocusState(&value)); return value; }
			MediaCaptureFocusState operator()() { return get(); }
			operator MediaCaptureFocusState () { return get(); }
		} FocusState;
		struct : property {
			FocusMode get() { FocusMode value; hrcheck(enc(&IFocusControl2_adaptor::Mode)->_get_Mode(&value)); return value; }
			FocusMode operator()() { return get(); }
			operator FocusMode () { return get(); }
		} Mode;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ManualFocusDistance>> get() { Foundation::Collections::IVectorView<ManualFocusDistance>* value; hrcheck(enc(&IFocusControl2_adaptor::SupportedFocusDistances)->_get_SupportedFocusDistances(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ManualFocusDistance>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ManualFocusDistance>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ManualFocusDistance>> operator->() { return get(); }
		} SupportedFocusDistances;
		struct : property {
			ptr<Foundation::Collections::IVectorView<FocusMode>> get() { Foundation::Collections::IVectorView<FocusMode>* value; hrcheck(enc(&IFocusControl2_adaptor::SupportedFocusModes)->_get_SupportedFocusModes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<FocusMode>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<FocusMode>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<FocusMode>> operator->() { return get(); }
		} SupportedFocusModes;
		struct : property {
			ptr<Foundation::Collections::IVectorView<AutoFocusRange>> get() { Foundation::Collections::IVectorView<AutoFocusRange>* value; hrcheck(enc(&IFocusControl2_adaptor::SupportedFocusRanges)->_get_SupportedFocusRanges(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<AutoFocusRange>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<AutoFocusRange>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<AutoFocusRange>> operator->() { return get(); }
		} SupportedFocusRanges;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFocusControl2_adaptor::WaitForFocusSupported)->_get_WaitForFocusSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} WaitForFocusSupported;
	};
	ptr<Foundation::IAsyncAction> UnlockAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_UnlockAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> LockAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_LockAsync(&asyncInfo)); return from_abi(asyncInfo); }
	void Configure(pptr<FocusSettings> settings) { hrcheck(X::get()->_Configure(settings)); }
	IFocusControl2_adaptor() {}
};
template<typename X> struct adapt<IFocusControl2, X> : Windows::Media::Devices::IFocusControl2_adaptor<X> { typedef adapt IFocusControl2; };
struct IFocusControl2 : IFocusControl2_raw, generate<IFocusControl2> {};

// FocusControl
template<typename X> struct statics<FocusControl, X> : X {
	typedef typename X::root_type FocusControl;
};
struct FocusControl : generate<FocusControl> {
	using IFocusControl::SetPresetAsync;
};

// IRegionOfInterest
struct IRegionOfInterest_raw : IInspectable {
	virtual STDMETHODIMP _get_AutoFocusEnabled(bool *value);
	virtual STDMETHODIMP _put_AutoFocusEnabled(bool value);
	virtual STDMETHODIMP _get_AutoWhiteBalanceEnabled(bool *value);
	virtual STDMETHODIMP _put_AutoWhiteBalanceEnabled(bool value);
	virtual STDMETHODIMP _get_AutoExposureEnabled(bool *value);
	virtual STDMETHODIMP _put_AutoExposureEnabled(bool value);
	virtual STDMETHODIMP _get_Bounds(Foundation::Rect *value);
	virtual STDMETHODIMP _put_Bounds(Foundation::Rect value);
};
template<typename X> struct IRegionOfInterest_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRegionOfInterest_adaptor::AutoExposureEnabled)->_get_AutoExposureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRegionOfInterest_adaptor::AutoExposureEnabled)->_put_AutoExposureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoExposureEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRegionOfInterest_adaptor::AutoFocusEnabled)->_get_AutoFocusEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRegionOfInterest_adaptor::AutoFocusEnabled)->_put_AutoFocusEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoFocusEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRegionOfInterest_adaptor::AutoWhiteBalanceEnabled)->_get_AutoWhiteBalanceEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRegionOfInterest_adaptor::AutoWhiteBalanceEnabled)->_put_AutoWhiteBalanceEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoWhiteBalanceEnabled;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IRegionOfInterest_adaptor::Bounds)->_get_Bounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
			void put(const Foundation::Rect& value) { hrcheck(enc(&IRegionOfInterest_adaptor::Bounds)->_put_Bounds(value)); }
			void operator=(const Foundation::Rect& value) { put(value); }
			void operator()(const Foundation::Rect& value) { put(value); }
		} Bounds;
	};
	IRegionOfInterest_adaptor() {}
};
template<typename X> struct adapt<IRegionOfInterest, X> : Windows::Media::Devices::IRegionOfInterest_adaptor<X> { typedef adapt IRegionOfInterest; };
struct IRegionOfInterest : IRegionOfInterest_raw, generate<IRegionOfInterest> {};

// IRegionOfInterest2
struct IRegionOfInterest2_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(RegionOfInterestType *value);
	virtual STDMETHODIMP _put_Type(RegionOfInterestType value);
	virtual STDMETHODIMP _get_BoundsNormalized(bool *value);
	virtual STDMETHODIMP _put_BoundsNormalized(bool value);
	virtual STDMETHODIMP _get_Weight(unsigned *value);
	virtual STDMETHODIMP _put_Weight(unsigned value);
};
template<typename X> struct IRegionOfInterest2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRegionOfInterest2_adaptor::BoundsNormalized)->_get_BoundsNormalized(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRegionOfInterest2_adaptor::BoundsNormalized)->_put_BoundsNormalized(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} BoundsNormalized;
		struct : property {
			RegionOfInterestType get() { RegionOfInterestType value; hrcheck(enc(&IRegionOfInterest2_adaptor::Type)->_get_Type(&value)); return value; }
			RegionOfInterestType operator()() { return get(); }
			operator RegionOfInterestType () { return get(); }
			void put(RegionOfInterestType value) { hrcheck(enc(&IRegionOfInterest2_adaptor::Type)->_put_Type(value)); }
			void operator=(RegionOfInterestType value) { put(value); }
			void operator()(RegionOfInterestType value) { put(value); }
		} Type;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IRegionOfInterest2_adaptor::Weight)->_get_Weight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IRegionOfInterest2_adaptor::Weight)->_put_Weight(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Weight;
	};
	IRegionOfInterest2_adaptor() {}
};
template<typename X> struct adapt<IRegionOfInterest2, X> : Windows::Media::Devices::IRegionOfInterest2_adaptor<X> { typedef adapt IRegionOfInterest2; };
struct IRegionOfInterest2 : IRegionOfInterest2_raw, generate<IRegionOfInterest2> {};

// RegionOfInterest
template<typename X> struct statics<RegionOfInterest, X> : X {
	typedef typename X::root_type RegionOfInterest;
};
struct RegionOfInterest : generate<RegionOfInterest> {};

// IRegionsOfInterestControl
struct IRegionsOfInterestControl_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxRegions(unsigned *value);
	virtual STDMETHODIMP _SetRegionsAsync(Foundation::Collections::IIterable<RegionOfInterest*>* regions, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _SetRegionsWithLockAsync(Foundation::Collections::IIterable<RegionOfInterest*>* regions, bool lockValues, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _ClearRegionsAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _get_AutoFocusSupported(bool *value);
	virtual STDMETHODIMP _get_AutoWhiteBalanceSupported(bool *value);
	virtual STDMETHODIMP _get_AutoExposureSupported(bool *value);
};
template<typename X> struct IRegionsOfInterestControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRegionsOfInterestControl_adaptor::AutoExposureSupported)->_get_AutoExposureSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AutoExposureSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRegionsOfInterestControl_adaptor::AutoFocusSupported)->_get_AutoFocusSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AutoFocusSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRegionsOfInterestControl_adaptor::AutoWhiteBalanceSupported)->_get_AutoWhiteBalanceSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AutoWhiteBalanceSupported;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IRegionsOfInterestControl_adaptor::MaxRegions)->_get_MaxRegions(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxRegions;
	};
	ptr<Foundation::IAsyncAction> SetRegionsAsync(pptr<Foundation::Collections::IIterable<ptr<RegionOfInterest>>> regions) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetRegionsAsync(to_abi(regions), &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> SetRegionsAsync(pptr<Foundation::Collections::IIterable<ptr<RegionOfInterest>>> regions, bool lockValues) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetRegionsWithLockAsync(to_abi(regions), lockValues, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> ClearRegionsAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_ClearRegionsAsync(&asyncInfo)); return from_abi(asyncInfo); }
	IRegionsOfInterestControl_adaptor() {}
};
template<typename X> struct adapt<IRegionsOfInterestControl, X> : Windows::Media::Devices::IRegionsOfInterestControl_adaptor<X> { typedef adapt IRegionsOfInterestControl; };
struct IRegionsOfInterestControl : IRegionsOfInterestControl_raw, generate<IRegionsOfInterestControl> {};

// RegionsOfInterestControl
template<typename X> struct statics<RegionsOfInterestControl, X> : X {
	typedef typename X::root_type RegionsOfInterestControl;
};
struct RegionsOfInterestControl : generate<RegionsOfInterestControl> {
	using IRegionsOfInterestControl::SetRegionsAsync;
};

// IExposurePriorityVideoControl
struct IExposurePriorityVideoControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Enabled(bool *value);
	virtual STDMETHODIMP _put_Enabled(bool value);
};
template<typename X> struct IExposurePriorityVideoControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IExposurePriorityVideoControl_adaptor::Enabled)->_get_Enabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IExposurePriorityVideoControl_adaptor::Enabled)->_put_Enabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Enabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IExposurePriorityVideoControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IExposurePriorityVideoControl_adaptor() {}
};
template<typename X> struct adapt<IExposurePriorityVideoControl, X> : Windows::Media::Devices::IExposurePriorityVideoControl_adaptor<X> { typedef adapt IExposurePriorityVideoControl; };
struct IExposurePriorityVideoControl : IExposurePriorityVideoControl_raw, generate<IExposurePriorityVideoControl> {};

// ExposurePriorityVideoControl
template<typename X> struct statics<ExposurePriorityVideoControl, X> : X {
	typedef typename X::root_type ExposurePriorityVideoControl;
};
struct ExposurePriorityVideoControl : generate<ExposurePriorityVideoControl> {};

// IHdrVideoControl
struct IHdrVideoControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_SupportedModes(Foundation::Collections::IVectorView<HdrVideoMode>* *value);
	virtual STDMETHODIMP _get_Mode(HdrVideoMode *value);
	virtual STDMETHODIMP _put_Mode(HdrVideoMode value);
};
template<typename X> struct IHdrVideoControl_adaptor : X {
	union {
		struct : property {
			HdrVideoMode get() { HdrVideoMode value; hrcheck(enc(&IHdrVideoControl_adaptor::Mode)->_get_Mode(&value)); return value; }
			HdrVideoMode operator()() { return get(); }
			operator HdrVideoMode () { return get(); }
			void put(HdrVideoMode value) { hrcheck(enc(&IHdrVideoControl_adaptor::Mode)->_put_Mode(value)); }
			void operator=(HdrVideoMode value) { put(value); }
			void operator()(HdrVideoMode value) { put(value); }
		} Mode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHdrVideoControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			ptr<Foundation::Collections::IVectorView<HdrVideoMode>> get() { Foundation::Collections::IVectorView<HdrVideoMode>* value; hrcheck(enc(&IHdrVideoControl_adaptor::SupportedModes)->_get_SupportedModes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<HdrVideoMode>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<HdrVideoMode>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<HdrVideoMode>> operator->() { return get(); }
		} SupportedModes;
	};
	IHdrVideoControl_adaptor() {}
};
template<typename X> struct adapt<IHdrVideoControl, X> : Windows::Media::Devices::IHdrVideoControl_adaptor<X> { typedef adapt IHdrVideoControl; };
struct IHdrVideoControl : IHdrVideoControl_raw, generate<IHdrVideoControl> {};

// HdrVideoControl
template<typename X> struct statics<HdrVideoControl, X> : X {
	typedef typename X::root_type HdrVideoControl;
};
struct HdrVideoControl : generate<HdrVideoControl> {};

// IAdvancedPhotoCaptureSettings
struct IAdvancedPhotoCaptureSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_Mode(AdvancedPhotoMode *value);
	virtual STDMETHODIMP _put_Mode(AdvancedPhotoMode value);
};
template<typename X> struct IAdvancedPhotoCaptureSettings_adaptor : X {
	union {
		struct : property {
			AdvancedPhotoMode get() { AdvancedPhotoMode value; hrcheck(enc(&IAdvancedPhotoCaptureSettings_adaptor::Mode)->_get_Mode(&value)); return value; }
			AdvancedPhotoMode operator()() { return get(); }
			operator AdvancedPhotoMode () { return get(); }
			void put(AdvancedPhotoMode value) { hrcheck(enc(&IAdvancedPhotoCaptureSettings_adaptor::Mode)->_put_Mode(value)); }
			void operator=(AdvancedPhotoMode value) { put(value); }
			void operator()(AdvancedPhotoMode value) { put(value); }
		} Mode;
	};
	IAdvancedPhotoCaptureSettings_adaptor() {}
};
template<typename X> struct adapt<IAdvancedPhotoCaptureSettings, X> : Windows::Media::Devices::IAdvancedPhotoCaptureSettings_adaptor<X> { typedef adapt IAdvancedPhotoCaptureSettings; };
struct IAdvancedPhotoCaptureSettings : IAdvancedPhotoCaptureSettings_raw, generate<IAdvancedPhotoCaptureSettings> {};

// AdvancedPhotoCaptureSettings
template<typename X> struct statics<AdvancedPhotoCaptureSettings, X> : X {
	typedef typename X::root_type AdvancedPhotoCaptureSettings;
};
struct AdvancedPhotoCaptureSettings : generate<AdvancedPhotoCaptureSettings> {};

// IAdvancedPhotoControl
struct IAdvancedPhotoControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_SupportedModes(Foundation::Collections::IVectorView<AdvancedPhotoMode>* *value);
	virtual STDMETHODIMP _get_Mode(AdvancedPhotoMode *value);
	virtual STDMETHODIMP _Configure(AdvancedPhotoCaptureSettings* settings);
};
template<typename X> struct IAdvancedPhotoControl_adaptor : X {
	union {
		struct : property {
			AdvancedPhotoMode get() { AdvancedPhotoMode value; hrcheck(enc(&IAdvancedPhotoControl_adaptor::Mode)->_get_Mode(&value)); return value; }
			AdvancedPhotoMode operator()() { return get(); }
			operator AdvancedPhotoMode () { return get(); }
		} Mode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAdvancedPhotoControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			ptr<Foundation::Collections::IVectorView<AdvancedPhotoMode>> get() { Foundation::Collections::IVectorView<AdvancedPhotoMode>* value; hrcheck(enc(&IAdvancedPhotoControl_adaptor::SupportedModes)->_get_SupportedModes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<AdvancedPhotoMode>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<AdvancedPhotoMode>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<AdvancedPhotoMode>> operator->() { return get(); }
		} SupportedModes;
	};
	void Configure(pptr<AdvancedPhotoCaptureSettings> settings) { hrcheck(X::get()->_Configure(settings)); }
	IAdvancedPhotoControl_adaptor() {}
};
template<typename X> struct adapt<IAdvancedPhotoControl, X> : Windows::Media::Devices::IAdvancedPhotoControl_adaptor<X> { typedef adapt IAdvancedPhotoControl; };
struct IAdvancedPhotoControl : IAdvancedPhotoControl_raw, generate<IAdvancedPhotoControl> {};

// AdvancedPhotoControl
template<typename X> struct statics<AdvancedPhotoControl, X> : X {
	typedef typename X::root_type AdvancedPhotoControl;
};
struct AdvancedPhotoControl : generate<AdvancedPhotoControl> {};

// IOpticalImageStabilizationControl
struct IOpticalImageStabilizationControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_SupportedModes(Foundation::Collections::IVectorView<OpticalImageStabilizationMode>* *value);
	virtual STDMETHODIMP _get_Mode(OpticalImageStabilizationMode *value);
	virtual STDMETHODIMP _put_Mode(OpticalImageStabilizationMode value);
};
template<typename X> struct IOpticalImageStabilizationControl_adaptor : X {
	union {
		struct : property {
			OpticalImageStabilizationMode get() { OpticalImageStabilizationMode value; hrcheck(enc(&IOpticalImageStabilizationControl_adaptor::Mode)->_get_Mode(&value)); return value; }
			OpticalImageStabilizationMode operator()() { return get(); }
			operator OpticalImageStabilizationMode () { return get(); }
			void put(OpticalImageStabilizationMode value) { hrcheck(enc(&IOpticalImageStabilizationControl_adaptor::Mode)->_put_Mode(value)); }
			void operator=(OpticalImageStabilizationMode value) { put(value); }
			void operator()(OpticalImageStabilizationMode value) { put(value); }
		} Mode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IOpticalImageStabilizationControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			ptr<Foundation::Collections::IVectorView<OpticalImageStabilizationMode>> get() { Foundation::Collections::IVectorView<OpticalImageStabilizationMode>* value; hrcheck(enc(&IOpticalImageStabilizationControl_adaptor::SupportedModes)->_get_SupportedModes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<OpticalImageStabilizationMode>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<OpticalImageStabilizationMode>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<OpticalImageStabilizationMode>> operator->() { return get(); }
		} SupportedModes;
	};
	IOpticalImageStabilizationControl_adaptor() {}
};
template<typename X> struct adapt<IOpticalImageStabilizationControl, X> : Windows::Media::Devices::IOpticalImageStabilizationControl_adaptor<X> { typedef adapt IOpticalImageStabilizationControl; };
struct IOpticalImageStabilizationControl : IOpticalImageStabilizationControl_raw, generate<IOpticalImageStabilizationControl> {};

// OpticalImageStabilizationControl
template<typename X> struct statics<OpticalImageStabilizationControl, X> : X {
	typedef typename X::root_type OpticalImageStabilizationControl;
};
struct OpticalImageStabilizationControl : generate<OpticalImageStabilizationControl> {};

// IVideoTemporalDenoisingControl
struct IVideoTemporalDenoisingControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_SupportedModes(Foundation::Collections::IVectorView<VideoTemporalDenoisingMode>* *value);
	virtual STDMETHODIMP _get_Mode(VideoTemporalDenoisingMode *value);
	virtual STDMETHODIMP _put_Mode(VideoTemporalDenoisingMode value);
};
template<typename X> struct IVideoTemporalDenoisingControl_adaptor : X {
	union {
		struct : property {
			VideoTemporalDenoisingMode get() { VideoTemporalDenoisingMode value; hrcheck(enc(&IVideoTemporalDenoisingControl_adaptor::Mode)->_get_Mode(&value)); return value; }
			VideoTemporalDenoisingMode operator()() { return get(); }
			operator VideoTemporalDenoisingMode () { return get(); }
			void put(VideoTemporalDenoisingMode value) { hrcheck(enc(&IVideoTemporalDenoisingControl_adaptor::Mode)->_put_Mode(value)); }
			void operator=(VideoTemporalDenoisingMode value) { put(value); }
			void operator()(VideoTemporalDenoisingMode value) { put(value); }
		} Mode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IVideoTemporalDenoisingControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			ptr<Foundation::Collections::IVectorView<VideoTemporalDenoisingMode>> get() { Foundation::Collections::IVectorView<VideoTemporalDenoisingMode>* value; hrcheck(enc(&IVideoTemporalDenoisingControl_adaptor::SupportedModes)->_get_SupportedModes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<VideoTemporalDenoisingMode>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<VideoTemporalDenoisingMode>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<VideoTemporalDenoisingMode>> operator->() { return get(); }
		} SupportedModes;
	};
	IVideoTemporalDenoisingControl_adaptor() {}
};
template<typename X> struct adapt<IVideoTemporalDenoisingControl, X> : Windows::Media::Devices::IVideoTemporalDenoisingControl_adaptor<X> { typedef adapt IVideoTemporalDenoisingControl; };
struct IVideoTemporalDenoisingControl : IVideoTemporalDenoisingControl_raw, generate<IVideoTemporalDenoisingControl> {};

// VideoTemporalDenoisingControl
template<typename X> struct statics<VideoTemporalDenoisingControl, X> : X {
	typedef typename X::root_type VideoTemporalDenoisingControl;
};
struct VideoTemporalDenoisingControl : generate<VideoTemporalDenoisingControl> {};

// IMediaDeviceController
struct IMediaDeviceController_raw : IInspectable {
	virtual STDMETHODIMP _GetAvailableMediaStreamProperties(Capture::MediaStreamType mediaStreamType, Foundation::Collections::IVectorView<MediaProperties::IMediaEncodingProperties*>* *value) = 0;
	virtual STDMETHODIMP _GetMediaStreamProperties(Capture::MediaStreamType mediaStreamType, MediaProperties::IMediaEncodingProperties* *value) = 0;
	virtual STDMETHODIMP _SetMediaStreamPropertiesAsync(Capture::MediaStreamType mediaStreamType, MediaProperties::IMediaEncodingProperties* mediaEncodingProperties, Foundation::IAsyncAction* *asyncInfo) = 0;
};
template<typename X> struct IMediaDeviceController_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<MediaProperties::IMediaEncodingProperties>>> GetAvailableMediaStreamProperties(Capture::MediaStreamType mediaStreamType) { Foundation::Collections::IVectorView<MediaProperties::IMediaEncodingProperties*>* value; hrcheck(X::get()->_GetAvailableMediaStreamProperties(mediaStreamType, &value)); return from_abi(value); }
	ptr<MediaProperties::IMediaEncodingProperties> GetMediaStreamProperties(Capture::MediaStreamType mediaStreamType) { MediaProperties::IMediaEncodingProperties* value; hrcheck(X::get()->_GetMediaStreamProperties(mediaStreamType, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> SetMediaStreamPropertiesAsync(Capture::MediaStreamType mediaStreamType, pptr<MediaProperties::IMediaEncodingProperties> mediaEncodingProperties) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_SetMediaStreamPropertiesAsync(mediaStreamType, mediaEncodingProperties, &asyncInfo)); return from_abi(asyncInfo); }
};
template<typename X> struct adapt<IMediaDeviceController, X> : Windows::Media::Devices::IMediaDeviceController_adaptor<X> { typedef adapt IMediaDeviceController; };
template<typename X> struct IMediaDeviceController_unadaptor : X {
	STDMETHODIMP _GetAvailableMediaStreamProperties(Capture::MediaStreamType mediaStreamType, Foundation::Collections::IVectorView<MediaProperties::IMediaEncodingProperties*>* *value) { return hrtry([&, this] { *value = to_abi(X::get()->GetAvailableMediaStreamProperties(mediaStreamType)); }); }
	STDMETHODIMP _GetMediaStreamProperties(Capture::MediaStreamType mediaStreamType, MediaProperties::IMediaEncodingProperties* *value) { return hrtry([&, this] { *value = to_abi(X::get()->GetMediaStreamProperties(mediaStreamType)); }); }
	STDMETHODIMP _SetMediaStreamPropertiesAsync(Capture::MediaStreamType mediaStreamType, MediaProperties::IMediaEncodingProperties* mediaEncodingProperties, Foundation::IAsyncAction* *asyncInfo) { return hrtry([&, this] { *asyncInfo = to_abi(X::get()->SetMediaStreamPropertiesAsync(mediaStreamType, mediaEncodingProperties)); }); }
};
template<typename X> struct unadapt<IMediaDeviceController, X> : Windows::Media::Devices::IMediaDeviceController_unadaptor<X> {};
struct IMediaDeviceController : IMediaDeviceController_raw, generate<IMediaDeviceController> {};

// IAudioDeviceController
struct IAudioDeviceController_raw : IInspectable {
	virtual STDMETHODIMP _put_Muted(bool value);
	virtual STDMETHODIMP _get_Muted(bool *value);
	virtual STDMETHODIMP _put_VolumePercent(float value);
	virtual STDMETHODIMP _get_VolumePercent(float *value);
};
template<typename X> struct IAudioDeviceController_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAudioDeviceController_adaptor::Muted)->_get_Muted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAudioDeviceController_adaptor::Muted)->_put_Muted(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Muted;
		struct : property {
			float get() { float value; hrcheck(enc(&IAudioDeviceController_adaptor::VolumePercent)->_get_VolumePercent(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IAudioDeviceController_adaptor::VolumePercent)->_put_VolumePercent(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} VolumePercent;
	};
	IAudioDeviceController_adaptor() {}
};
template<typename X> struct adapt<IAudioDeviceController, X> : Windows::Media::Devices::IAudioDeviceController_adaptor<X> { typedef adapt IAudioDeviceController; };
struct IAudioDeviceController : IAudioDeviceController_raw, generate<IAudioDeviceController> {};

// IVideoDeviceController
struct IVideoDeviceController_raw : IInspectable {
	virtual STDMETHODIMP _get_Brightness(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Contrast(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Hue(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_WhiteBalance(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_BacklightCompensation(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Pan(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Tilt(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Zoom(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Roll(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Exposure(MediaDeviceControl* *value);
	virtual STDMETHODIMP _get_Focus(MediaDeviceControl* *value);
	virtual STDMETHODIMP _TrySetPowerlineFrequency(Capture::PowerlineFrequency value, bool *succeeded);
	virtual STDMETHODIMP _TryGetPowerlineFrequency(Capture::PowerlineFrequency *value, bool *succeeded);
};
template<typename X> struct IVideoDeviceController_adaptor : X {
	union {
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::BacklightCompensation)->_get_BacklightCompensation(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} BacklightCompensation;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Brightness)->_get_Brightness(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Brightness;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Contrast)->_get_Contrast(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Contrast;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Exposure)->_get_Exposure(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Exposure;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Focus)->_get_Focus(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Focus;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Hue)->_get_Hue(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Hue;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Pan)->_get_Pan(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Pan;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Roll)->_get_Roll(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Roll;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Tilt)->_get_Tilt(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Tilt;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::WhiteBalance)->_get_WhiteBalance(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} WhiteBalance;
		struct : property {
			ptr<MediaDeviceControl> get() { MediaDeviceControl* value; hrcheck(enc(&IVideoDeviceController_adaptor::Zoom)->_get_Zoom(&value)); return from_abi(value); }
			ptr<MediaDeviceControl> operator()() { return get(); }
			operator ptr<MediaDeviceControl> () { return get(); }
			ptr<MediaDeviceControl> operator->() { return get(); }
		} Zoom;
	};
	bool TrySetPowerlineFrequency(Capture::PowerlineFrequency value) { bool succeeded; hrcheck(X::get()->_TrySetPowerlineFrequency(value, &succeeded)); return succeeded; }
	bool TryGetPowerlineFrequency(Capture::PowerlineFrequency *value) { bool succeeded; hrcheck(X::get()->_TryGetPowerlineFrequency(value, &succeeded)); return succeeded; }
	IVideoDeviceController_adaptor() {}
};
template<typename X> struct adapt<IVideoDeviceController, X> : Windows::Media::Devices::IVideoDeviceController_adaptor<X> { typedef adapt IVideoDeviceController; };
struct IVideoDeviceController : IVideoDeviceController_raw, generate<IVideoDeviceController> {};

// IMediaDeviceControl
struct IMediaDeviceControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Capabilities(MediaDeviceControlCapabilities* *value);
	virtual STDMETHODIMP _TryGetValue(double *value, bool *succeeded);
	virtual STDMETHODIMP _TrySetValue(double value, bool *succeeded);
	virtual STDMETHODIMP _TryGetAuto(bool *value, bool *succeeded);
	virtual STDMETHODIMP _TrySetAuto(bool value, bool *succeeded);
};
template<typename X> struct IMediaDeviceControl_adaptor : X {
	union {
		struct : property {
			ptr<MediaDeviceControlCapabilities> get() { MediaDeviceControlCapabilities* value; hrcheck(enc(&IMediaDeviceControl_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<MediaDeviceControlCapabilities> operator()() { return get(); }
			operator ptr<MediaDeviceControlCapabilities> () { return get(); }
			ptr<MediaDeviceControlCapabilities> operator->() { return get(); }
		} Capabilities;
	};
	bool TryGetValue(double *value) { bool succeeded; hrcheck(X::get()->_TryGetValue(value, &succeeded)); return succeeded; }
	bool TrySetValue(double value) { bool succeeded; hrcheck(X::get()->_TrySetValue(value, &succeeded)); return succeeded; }
	bool TryGetAuto(bool *value) { bool succeeded; hrcheck(X::get()->_TryGetAuto(value, &succeeded)); return succeeded; }
	bool TrySetAuto(bool value) { bool succeeded; hrcheck(X::get()->_TrySetAuto(value, &succeeded)); return succeeded; }
	IMediaDeviceControl_adaptor() {}
};
template<typename X> struct adapt<IMediaDeviceControl, X> : Windows::Media::Devices::IMediaDeviceControl_adaptor<X> { typedef adapt IMediaDeviceControl; };
struct IMediaDeviceControl : IMediaDeviceControl_raw, generate<IMediaDeviceControl> {};

// MediaDeviceControl
template<typename X> struct statics<MediaDeviceControl, X> : X {
	typedef typename X::root_type MediaDeviceControl;
};
struct MediaDeviceControl : generate<MediaDeviceControl> {};

// IAdvancedVideoCaptureDeviceController2
struct IAdvancedVideoCaptureDeviceController2_raw : IInspectable {
	virtual STDMETHODIMP _get_LowLagPhotoSequence(LowLagPhotoSequenceControl* *value);
	virtual STDMETHODIMP _get_LowLagPhoto(LowLagPhotoControl* *value);
	virtual STDMETHODIMP _get_SceneModeControl(Devices::SceneModeControl* *value);
	virtual STDMETHODIMP _get_TorchControl(Devices::TorchControl* *value);
	virtual STDMETHODIMP _get_FlashControl(Devices::FlashControl* *value);
	virtual STDMETHODIMP _get_WhiteBalanceControl(Devices::WhiteBalanceControl* *value);
	virtual STDMETHODIMP _get_ExposureControl(Devices::ExposureControl* *value);
	virtual STDMETHODIMP _get_FocusControl(Devices::FocusControl* *value);
	virtual STDMETHODIMP _get_ExposureCompensationControl(Devices::ExposureCompensationControl* *value);
	virtual STDMETHODIMP _get_IsoSpeedControl(Devices::IsoSpeedControl* *value);
	virtual STDMETHODIMP _get_RegionsOfInterestControl(Devices::RegionsOfInterestControl* *value);
	virtual STDMETHODIMP _get_PrimaryUse(CaptureUse *value);
	virtual STDMETHODIMP _put_PrimaryUse(CaptureUse value);
};
template<typename X> struct IAdvancedVideoCaptureDeviceController2_adaptor : X {
	union {
		struct : property {
			ptr<Devices::ExposureCompensationControl> get() { Devices::ExposureCompensationControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::ExposureCompensationControl)->_get_ExposureCompensationControl(&value)); return from_abi(value); }
			ptr<Devices::ExposureCompensationControl> operator()() { return get(); }
			operator ptr<Devices::ExposureCompensationControl> () { return get(); }
			ptr<Devices::ExposureCompensationControl> operator->() { return get(); }
		} ExposureCompensationControl;
		struct : property {
			ptr<Devices::ExposureControl> get() { Devices::ExposureControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::ExposureControl)->_get_ExposureControl(&value)); return from_abi(value); }
			ptr<Devices::ExposureControl> operator()() { return get(); }
			operator ptr<Devices::ExposureControl> () { return get(); }
			ptr<Devices::ExposureControl> operator->() { return get(); }
		} ExposureControl;
		struct : property {
			ptr<Devices::FlashControl> get() { Devices::FlashControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::FlashControl)->_get_FlashControl(&value)); return from_abi(value); }
			ptr<Devices::FlashControl> operator()() { return get(); }
			operator ptr<Devices::FlashControl> () { return get(); }
			ptr<Devices::FlashControl> operator->() { return get(); }
		} FlashControl;
		struct : property {
			ptr<Devices::FocusControl> get() { Devices::FocusControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::FocusControl)->_get_FocusControl(&value)); return from_abi(value); }
			ptr<Devices::FocusControl> operator()() { return get(); }
			operator ptr<Devices::FocusControl> () { return get(); }
			ptr<Devices::FocusControl> operator->() { return get(); }
		} FocusControl;
		struct : property {
			ptr<Devices::IsoSpeedControl> get() { Devices::IsoSpeedControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::IsoSpeedControl)->_get_IsoSpeedControl(&value)); return from_abi(value); }
			ptr<Devices::IsoSpeedControl> operator()() { return get(); }
			operator ptr<Devices::IsoSpeedControl> () { return get(); }
			ptr<Devices::IsoSpeedControl> operator->() { return get(); }
		} IsoSpeedControl;
		struct : property {
			ptr<LowLagPhotoControl> get() { LowLagPhotoControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::LowLagPhoto)->_get_LowLagPhoto(&value)); return from_abi(value); }
			ptr<LowLagPhotoControl> operator()() { return get(); }
			operator ptr<LowLagPhotoControl> () { return get(); }
			ptr<LowLagPhotoControl> operator->() { return get(); }
		} LowLagPhoto;
		struct : property {
			ptr<LowLagPhotoSequenceControl> get() { LowLagPhotoSequenceControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::LowLagPhotoSequence)->_get_LowLagPhotoSequence(&value)); return from_abi(value); }
			ptr<LowLagPhotoSequenceControl> operator()() { return get(); }
			operator ptr<LowLagPhotoSequenceControl> () { return get(); }
			ptr<LowLagPhotoSequenceControl> operator->() { return get(); }
		} LowLagPhotoSequence;
		struct : property {
			CaptureUse get() { CaptureUse value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::PrimaryUse)->_get_PrimaryUse(&value)); return value; }
			CaptureUse operator()() { return get(); }
			operator CaptureUse () { return get(); }
			void put(CaptureUse value) { hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::PrimaryUse)->_put_PrimaryUse(value)); }
			void operator=(CaptureUse value) { put(value); }
			void operator()(CaptureUse value) { put(value); }
		} PrimaryUse;
		struct : property {
			ptr<Devices::RegionsOfInterestControl> get() { Devices::RegionsOfInterestControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::RegionsOfInterestControl)->_get_RegionsOfInterestControl(&value)); return from_abi(value); }
			ptr<Devices::RegionsOfInterestControl> operator()() { return get(); }
			operator ptr<Devices::RegionsOfInterestControl> () { return get(); }
			ptr<Devices::RegionsOfInterestControl> operator->() { return get(); }
		} RegionsOfInterestControl;
		struct : property {
			ptr<Devices::SceneModeControl> get() { Devices::SceneModeControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::SceneModeControl)->_get_SceneModeControl(&value)); return from_abi(value); }
			ptr<Devices::SceneModeControl> operator()() { return get(); }
			operator ptr<Devices::SceneModeControl> () { return get(); }
			ptr<Devices::SceneModeControl> operator->() { return get(); }
		} SceneModeControl;
		struct : property {
			ptr<Devices::TorchControl> get() { Devices::TorchControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::TorchControl)->_get_TorchControl(&value)); return from_abi(value); }
			ptr<Devices::TorchControl> operator()() { return get(); }
			operator ptr<Devices::TorchControl> () { return get(); }
			ptr<Devices::TorchControl> operator->() { return get(); }
		} TorchControl;
		struct : property {
			ptr<Devices::WhiteBalanceControl> get() { Devices::WhiteBalanceControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController2_adaptor::WhiteBalanceControl)->_get_WhiteBalanceControl(&value)); return from_abi(value); }
			ptr<Devices::WhiteBalanceControl> operator()() { return get(); }
			operator ptr<Devices::WhiteBalanceControl> () { return get(); }
			ptr<Devices::WhiteBalanceControl> operator->() { return get(); }
		} WhiteBalanceControl;
	};
	IAdvancedVideoCaptureDeviceController2_adaptor() {}
};
template<typename X> struct adapt<IAdvancedVideoCaptureDeviceController2, X> : Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2_adaptor<X> { typedef adapt IAdvancedVideoCaptureDeviceController2; };
struct IAdvancedVideoCaptureDeviceController2 : IAdvancedVideoCaptureDeviceController2_raw, generate<IAdvancedVideoCaptureDeviceController2> {};

// ILowLagPhotoSequenceControl
struct ILowLagPhotoSequenceControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_MaxPastPhotos(unsigned *value);
	virtual STDMETHODIMP _get_MaxPhotosPerSecond(float *value);
	virtual STDMETHODIMP _get_PastPhotoLimit(unsigned *value);
	virtual STDMETHODIMP _put_PastPhotoLimit(unsigned value);
	virtual STDMETHODIMP _get_PhotosPerSecondLimit(float *value);
	virtual STDMETHODIMP _put_PhotosPerSecondLimit(float value);
	virtual STDMETHODIMP _GetHighestConcurrentFrameRate(MediaProperties::IMediaEncodingProperties* captureProperties, MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _GetCurrentFrameRate(MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _get_ThumbnailEnabled(bool *value);
	virtual STDMETHODIMP _put_ThumbnailEnabled(bool value);
	virtual STDMETHODIMP _get_ThumbnailFormat(MediaProperties::MediaThumbnailFormat *value);
	virtual STDMETHODIMP _put_ThumbnailFormat(MediaProperties::MediaThumbnailFormat value);
	virtual STDMETHODIMP _get_DesiredThumbnailSize(unsigned *value);
	virtual STDMETHODIMP _put_DesiredThumbnailSize(unsigned value);
	virtual STDMETHODIMP _get_HardwareAcceleratedThumbnailSupported(unsigned *value);
};
template<typename X> struct ILowLagPhotoSequenceControl_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::DesiredThumbnailSize)->_get_DesiredThumbnailSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::DesiredThumbnailSize)->_put_DesiredThumbnailSize(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DesiredThumbnailSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::HardwareAcceleratedThumbnailSupported)->_get_HardwareAcceleratedThumbnailSupported(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} HardwareAcceleratedThumbnailSupported;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::MaxPastPhotos)->_get_MaxPastPhotos(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxPastPhotos;
		struct : property {
			float get() { float value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::MaxPhotosPerSecond)->_get_MaxPhotosPerSecond(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MaxPhotosPerSecond;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::PastPhotoLimit)->_get_PastPhotoLimit(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::PastPhotoLimit)->_put_PastPhotoLimit(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} PastPhotoLimit;
		struct : property {
			float get() { float value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::PhotosPerSecondLimit)->_get_PhotosPerSecondLimit(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::PhotosPerSecondLimit)->_put_PhotosPerSecondLimit(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} PhotosPerSecondLimit;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::ThumbnailEnabled)->_get_ThumbnailEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::ThumbnailEnabled)->_put_ThumbnailEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ThumbnailEnabled;
		struct : property {
			MediaProperties::MediaThumbnailFormat get() { MediaProperties::MediaThumbnailFormat value; hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::ThumbnailFormat)->_get_ThumbnailFormat(&value)); return value; }
			MediaProperties::MediaThumbnailFormat operator()() { return get(); }
			operator MediaProperties::MediaThumbnailFormat () { return get(); }
			void put(MediaProperties::MediaThumbnailFormat value) { hrcheck(enc(&ILowLagPhotoSequenceControl_adaptor::ThumbnailFormat)->_put_ThumbnailFormat(value)); }
			void operator=(MediaProperties::MediaThumbnailFormat value) { put(value); }
			void operator()(MediaProperties::MediaThumbnailFormat value) { put(value); }
		} ThumbnailFormat;
	};
	ptr<MediaProperties::MediaRatio> GetHighestConcurrentFrameRate(pptr<MediaProperties::IMediaEncodingProperties> captureProperties) { MediaProperties::MediaRatio* value; hrcheck(X::get()->_GetHighestConcurrentFrameRate(captureProperties, &value)); return from_abi(value); }
	ptr<MediaProperties::MediaRatio> GetCurrentFrameRate() { MediaProperties::MediaRatio* value; hrcheck(X::get()->_GetCurrentFrameRate(&value)); return from_abi(value); }
	ILowLagPhotoSequenceControl_adaptor() {}
};
template<typename X> struct adapt<ILowLagPhotoSequenceControl, X> : Windows::Media::Devices::ILowLagPhotoSequenceControl_adaptor<X> { typedef adapt ILowLagPhotoSequenceControl; };
struct ILowLagPhotoSequenceControl : ILowLagPhotoSequenceControl_raw, generate<ILowLagPhotoSequenceControl> {};

// LowLagPhotoSequenceControl
template<typename X> struct statics<LowLagPhotoSequenceControl, X> : X {
	typedef typename X::root_type LowLagPhotoSequenceControl;
};
struct LowLagPhotoSequenceControl : generate<LowLagPhotoSequenceControl> {};

// ILowLagPhotoControl
struct ILowLagPhotoControl_raw : IInspectable {
	virtual STDMETHODIMP _GetHighestConcurrentFrameRate(MediaProperties::IMediaEncodingProperties* captureProperties, MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _GetCurrentFrameRate(MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _get_ThumbnailEnabled(bool *value);
	virtual STDMETHODIMP _put_ThumbnailEnabled(bool value);
	virtual STDMETHODIMP _get_ThumbnailFormat(MediaProperties::MediaThumbnailFormat *value);
	virtual STDMETHODIMP _put_ThumbnailFormat(MediaProperties::MediaThumbnailFormat value);
	virtual STDMETHODIMP _get_DesiredThumbnailSize(unsigned *value);
	virtual STDMETHODIMP _put_DesiredThumbnailSize(unsigned value);
	virtual STDMETHODIMP _get_HardwareAcceleratedThumbnailSupported(unsigned *value);
};
template<typename X> struct ILowLagPhotoControl_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILowLagPhotoControl_adaptor::DesiredThumbnailSize)->_get_DesiredThumbnailSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ILowLagPhotoControl_adaptor::DesiredThumbnailSize)->_put_DesiredThumbnailSize(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DesiredThumbnailSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILowLagPhotoControl_adaptor::HardwareAcceleratedThumbnailSupported)->_get_HardwareAcceleratedThumbnailSupported(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} HardwareAcceleratedThumbnailSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILowLagPhotoControl_adaptor::ThumbnailEnabled)->_get_ThumbnailEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ILowLagPhotoControl_adaptor::ThumbnailEnabled)->_put_ThumbnailEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ThumbnailEnabled;
		struct : property {
			MediaProperties::MediaThumbnailFormat get() { MediaProperties::MediaThumbnailFormat value; hrcheck(enc(&ILowLagPhotoControl_adaptor::ThumbnailFormat)->_get_ThumbnailFormat(&value)); return value; }
			MediaProperties::MediaThumbnailFormat operator()() { return get(); }
			operator MediaProperties::MediaThumbnailFormat () { return get(); }
			void put(MediaProperties::MediaThumbnailFormat value) { hrcheck(enc(&ILowLagPhotoControl_adaptor::ThumbnailFormat)->_put_ThumbnailFormat(value)); }
			void operator=(MediaProperties::MediaThumbnailFormat value) { put(value); }
			void operator()(MediaProperties::MediaThumbnailFormat value) { put(value); }
		} ThumbnailFormat;
	};
	ptr<MediaProperties::MediaRatio> GetHighestConcurrentFrameRate(pptr<MediaProperties::IMediaEncodingProperties> captureProperties) { MediaProperties::MediaRatio* value; hrcheck(X::get()->_GetHighestConcurrentFrameRate(captureProperties, &value)); return from_abi(value); }
	ptr<MediaProperties::MediaRatio> GetCurrentFrameRate() { MediaProperties::MediaRatio* value; hrcheck(X::get()->_GetCurrentFrameRate(&value)); return from_abi(value); }
	ILowLagPhotoControl_adaptor() {}
};
template<typename X> struct adapt<ILowLagPhotoControl, X> : Windows::Media::Devices::ILowLagPhotoControl_adaptor<X> { typedef adapt ILowLagPhotoControl; };
struct ILowLagPhotoControl : ILowLagPhotoControl_raw, generate<ILowLagPhotoControl> {};

// LowLagPhotoControl
template<typename X> struct statics<LowLagPhotoControl, X> : X {
	typedef typename X::root_type LowLagPhotoControl;
};
struct LowLagPhotoControl : generate<LowLagPhotoControl> {};

// IAdvancedVideoCaptureDeviceController3
struct IAdvancedVideoCaptureDeviceController3_raw : IInspectable {
	virtual STDMETHODIMP _get_VariablePhotoSequenceController(Core::VariablePhotoSequenceController* *value);
	virtual STDMETHODIMP _get_PhotoConfirmationControl(Devices::PhotoConfirmationControl* *value);
	virtual STDMETHODIMP _get_ZoomControl(Devices::ZoomControl* *value);
};
template<typename X> struct IAdvancedVideoCaptureDeviceController3_adaptor : X {
	union {
		struct : property {
			ptr<Devices::PhotoConfirmationControl> get() { Devices::PhotoConfirmationControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController3_adaptor::PhotoConfirmationControl)->_get_PhotoConfirmationControl(&value)); return from_abi(value); }
			ptr<Devices::PhotoConfirmationControl> operator()() { return get(); }
			operator ptr<Devices::PhotoConfirmationControl> () { return get(); }
			ptr<Devices::PhotoConfirmationControl> operator->() { return get(); }
		} PhotoConfirmationControl;
		struct : property {
			ptr<Core::VariablePhotoSequenceController> get() { Core::VariablePhotoSequenceController* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController3_adaptor::VariablePhotoSequenceController)->_get_VariablePhotoSequenceController(&value)); return from_abi(value); }
			ptr<Core::VariablePhotoSequenceController> operator()() { return get(); }
			operator ptr<Core::VariablePhotoSequenceController> () { return get(); }
			ptr<Core::VariablePhotoSequenceController> operator->() { return get(); }
		} VariablePhotoSequenceController;
		struct : property {
			ptr<Devices::ZoomControl> get() { Devices::ZoomControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController3_adaptor::ZoomControl)->_get_ZoomControl(&value)); return from_abi(value); }
			ptr<Devices::ZoomControl> operator()() { return get(); }
			operator ptr<Devices::ZoomControl> () { return get(); }
			ptr<Devices::ZoomControl> operator->() { return get(); }
		} ZoomControl;
	};
	IAdvancedVideoCaptureDeviceController3_adaptor() {}
};
template<typename X> struct adapt<IAdvancedVideoCaptureDeviceController3, X> : Windows::Media::Devices::IAdvancedVideoCaptureDeviceController3_adaptor<X> { typedef adapt IAdvancedVideoCaptureDeviceController3; };
struct IAdvancedVideoCaptureDeviceController3 : IAdvancedVideoCaptureDeviceController3_raw, generate<IAdvancedVideoCaptureDeviceController3> {};

// IPhotoConfirmationControl
struct IPhotoConfirmationControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *pbSupported);
	virtual STDMETHODIMP _get_Enabled(bool *value);
	virtual STDMETHODIMP _put_Enabled(bool value);
	virtual STDMETHODIMP _get_PixelFormat(MediaProperties::MediaPixelFormat *format);
	virtual STDMETHODIMP _put_PixelFormat(MediaProperties::MediaPixelFormat format);
};
template<typename X> struct IPhotoConfirmationControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoConfirmationControl_adaptor::Enabled)->_get_Enabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhotoConfirmationControl_adaptor::Enabled)->_put_Enabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Enabled;
		struct : property {
			MediaProperties::MediaPixelFormat get() { MediaProperties::MediaPixelFormat format; hrcheck(enc(&IPhotoConfirmationControl_adaptor::PixelFormat)->_get_PixelFormat(&format)); return format; }
			MediaProperties::MediaPixelFormat operator()() { return get(); }
			operator MediaProperties::MediaPixelFormat () { return get(); }
			void put(MediaProperties::MediaPixelFormat format) { hrcheck(enc(&IPhotoConfirmationControl_adaptor::PixelFormat)->_put_PixelFormat(format)); }
			void operator=(MediaProperties::MediaPixelFormat format) { put(format); }
			void operator()(MediaProperties::MediaPixelFormat format) { put(format); }
		} PixelFormat;
		struct : property {
			bool get() { bool pbSupported; hrcheck(enc(&IPhotoConfirmationControl_adaptor::Supported)->_get_Supported(&pbSupported)); return pbSupported; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IPhotoConfirmationControl_adaptor() {}
};
template<typename X> struct adapt<IPhotoConfirmationControl, X> : Windows::Media::Devices::IPhotoConfirmationControl_adaptor<X> { typedef adapt IPhotoConfirmationControl; };
struct IPhotoConfirmationControl : IPhotoConfirmationControl_raw, generate<IPhotoConfirmationControl> {};

// PhotoConfirmationControl
template<typename X> struct statics<PhotoConfirmationControl, X> : X {
	typedef typename X::root_type PhotoConfirmationControl;
};
struct PhotoConfirmationControl : generate<PhotoConfirmationControl> {};

// IAdvancedVideoCaptureDeviceController4
struct IAdvancedVideoCaptureDeviceController4_raw : IInspectable {
	virtual STDMETHODIMP _get_ExposurePriorityVideoControl(Devices::ExposurePriorityVideoControl* *value);
	virtual STDMETHODIMP _get_DesiredOptimization(MediaCaptureOptimization *value);
	virtual STDMETHODIMP _put_DesiredOptimization(MediaCaptureOptimization value);
	virtual STDMETHODIMP _get_HdrVideoControl(Devices::HdrVideoControl* *value);
	virtual STDMETHODIMP _get_OpticalImageStabilizationControl(Devices::OpticalImageStabilizationControl* *value);
	virtual STDMETHODIMP _get_AdvancedPhotoControl(Devices::AdvancedPhotoControl* *value);
};
template<typename X> struct IAdvancedVideoCaptureDeviceController4_adaptor : X {
	union {
		struct : property {
			ptr<Devices::AdvancedPhotoControl> get() { Devices::AdvancedPhotoControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController4_adaptor::AdvancedPhotoControl)->_get_AdvancedPhotoControl(&value)); return from_abi(value); }
			ptr<Devices::AdvancedPhotoControl> operator()() { return get(); }
			operator ptr<Devices::AdvancedPhotoControl> () { return get(); }
			ptr<Devices::AdvancedPhotoControl> operator->() { return get(); }
		} AdvancedPhotoControl;
		struct : property {
			MediaCaptureOptimization get() { MediaCaptureOptimization value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController4_adaptor::DesiredOptimization)->_get_DesiredOptimization(&value)); return value; }
			MediaCaptureOptimization operator()() { return get(); }
			operator MediaCaptureOptimization () { return get(); }
			void put(MediaCaptureOptimization value) { hrcheck(enc(&IAdvancedVideoCaptureDeviceController4_adaptor::DesiredOptimization)->_put_DesiredOptimization(value)); }
			void operator=(MediaCaptureOptimization value) { put(value); }
			void operator()(MediaCaptureOptimization value) { put(value); }
		} DesiredOptimization;
		struct : property {
			ptr<Devices::ExposurePriorityVideoControl> get() { Devices::ExposurePriorityVideoControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController4_adaptor::ExposurePriorityVideoControl)->_get_ExposurePriorityVideoControl(&value)); return from_abi(value); }
			ptr<Devices::ExposurePriorityVideoControl> operator()() { return get(); }
			operator ptr<Devices::ExposurePriorityVideoControl> () { return get(); }
			ptr<Devices::ExposurePriorityVideoControl> operator->() { return get(); }
		} ExposurePriorityVideoControl;
		struct : property {
			ptr<Devices::HdrVideoControl> get() { Devices::HdrVideoControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController4_adaptor::HdrVideoControl)->_get_HdrVideoControl(&value)); return from_abi(value); }
			ptr<Devices::HdrVideoControl> operator()() { return get(); }
			operator ptr<Devices::HdrVideoControl> () { return get(); }
			ptr<Devices::HdrVideoControl> operator->() { return get(); }
		} HdrVideoControl;
		struct : property {
			ptr<Devices::OpticalImageStabilizationControl> get() { Devices::OpticalImageStabilizationControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController4_adaptor::OpticalImageStabilizationControl)->_get_OpticalImageStabilizationControl(&value)); return from_abi(value); }
			ptr<Devices::OpticalImageStabilizationControl> operator()() { return get(); }
			operator ptr<Devices::OpticalImageStabilizationControl> () { return get(); }
			ptr<Devices::OpticalImageStabilizationControl> operator->() { return get(); }
		} OpticalImageStabilizationControl;
	};
	IAdvancedVideoCaptureDeviceController4_adaptor() {}
};
template<typename X> struct adapt<IAdvancedVideoCaptureDeviceController4, X> : Windows::Media::Devices::IAdvancedVideoCaptureDeviceController4_adaptor<X> { typedef adapt IAdvancedVideoCaptureDeviceController4; };
struct IAdvancedVideoCaptureDeviceController4 : IAdvancedVideoCaptureDeviceController4_raw, generate<IAdvancedVideoCaptureDeviceController4> {};

// IVideoDeviceControllerGetDevicePropertyResult
struct IVideoDeviceControllerGetDevicePropertyResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(VideoDeviceControllerGetDevicePropertyStatus *value);
	virtual STDMETHODIMP _get_Value(IInspectable* *value);
};
template<typename X> struct IVideoDeviceControllerGetDevicePropertyResult_adaptor : X {
	union {
		struct : property {
			VideoDeviceControllerGetDevicePropertyStatus get() { VideoDeviceControllerGetDevicePropertyStatus value; hrcheck(enc(&IVideoDeviceControllerGetDevicePropertyResult_adaptor::Status)->_get_Status(&value)); return value; }
			VideoDeviceControllerGetDevicePropertyStatus operator()() { return get(); }
			operator VideoDeviceControllerGetDevicePropertyStatus () { return get(); }
		} Status;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IVideoDeviceControllerGetDevicePropertyResult_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Value;
	};
	IVideoDeviceControllerGetDevicePropertyResult_adaptor() {}
};
template<typename X> struct adapt<IVideoDeviceControllerGetDevicePropertyResult, X> : Windows::Media::Devices::IVideoDeviceControllerGetDevicePropertyResult_adaptor<X> { typedef adapt IVideoDeviceControllerGetDevicePropertyResult; };
struct IVideoDeviceControllerGetDevicePropertyResult : IVideoDeviceControllerGetDevicePropertyResult_raw, generate<IVideoDeviceControllerGetDevicePropertyResult> {};

// VideoDeviceControllerGetDevicePropertyResult
template<typename X> struct statics<VideoDeviceControllerGetDevicePropertyResult, X> : X {
	typedef typename X::root_type VideoDeviceControllerGetDevicePropertyResult;
};
struct VideoDeviceControllerGetDevicePropertyResult : generate<VideoDeviceControllerGetDevicePropertyResult> {};

// IAdvancedVideoCaptureDeviceController5
struct IAdvancedVideoCaptureDeviceController5_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _GetDevicePropertyById(HSTRING propertyId, Foundation::IReference<unsigned>* maxPropertyValueSize, VideoDeviceControllerGetDevicePropertyResult* *value);
	virtual STDMETHODIMP _SetDevicePropertyById(HSTRING propertyId, IInspectable* propertyValue, VideoDeviceControllerSetDevicePropertyStatus *value);
	virtual STDMETHODIMP _GetDevicePropertyByExtendedId(unsigned extendedPropertyIdSize, unsigned char *extendedPropertyId, Foundation::IReference<unsigned>* maxPropertyValueSize, VideoDeviceControllerGetDevicePropertyResult* *value);
	virtual STDMETHODIMP _SetDevicePropertyByExtendedId(unsigned extendedPropertyIdSize, unsigned char *extendedPropertyId, unsigned propertyValueSize, unsigned char *propertyValue, VideoDeviceControllerSetDevicePropertyStatus *value);
};
template<typename X> struct IAdvancedVideoCaptureDeviceController5_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController5_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
	};
	ptr<VideoDeviceControllerGetDevicePropertyResult> GetDevicePropertyById(hstring_ref propertyId, pptr<Foundation::IReference<unsigned>> maxPropertyValueSize) { VideoDeviceControllerGetDevicePropertyResult* value; hrcheck(X::get()->_GetDevicePropertyById(propertyId, to_abi(maxPropertyValueSize), &value)); return from_abi(value); }
	VideoDeviceControllerSetDevicePropertyStatus SetDevicePropertyById(hstring_ref propertyId, object_ref propertyValue) { VideoDeviceControllerSetDevicePropertyStatus value; hrcheck(X::get()->_SetDevicePropertyById(propertyId, propertyValue, &value)); return value; }
	ptr<VideoDeviceControllerGetDevicePropertyResult> GetDevicePropertyByExtendedId(const szarray<unsigned char>& extendedPropertyId, pptr<Foundation::IReference<unsigned>> maxPropertyValueSize) { VideoDeviceControllerGetDevicePropertyResult* value; hrcheck(X::get()->_GetDevicePropertyByExtendedId(extendedPropertyId.size, to_abi(extendedPropertyId.p), to_abi(maxPropertyValueSize), &value)); return from_abi(value); }
	VideoDeviceControllerSetDevicePropertyStatus SetDevicePropertyByExtendedId(const szarray<unsigned char>& extendedPropertyId, const szarray<unsigned char>& propertyValue) { VideoDeviceControllerSetDevicePropertyStatus value; hrcheck(X::get()->_SetDevicePropertyByExtendedId(extendedPropertyId.size, to_abi(extendedPropertyId.p), propertyValue.size, to_abi(propertyValue.p), &value)); return value; }
	IAdvancedVideoCaptureDeviceController5_adaptor() {}
};
template<typename X> struct adapt<IAdvancedVideoCaptureDeviceController5, X> : Windows::Media::Devices::IAdvancedVideoCaptureDeviceController5_adaptor<X> { typedef adapt IAdvancedVideoCaptureDeviceController5; };
struct IAdvancedVideoCaptureDeviceController5 : IAdvancedVideoCaptureDeviceController5_raw, generate<IAdvancedVideoCaptureDeviceController5> {};

// IAdvancedVideoCaptureDeviceController6
struct IAdvancedVideoCaptureDeviceController6_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoTemporalDenoisingControl(Devices::VideoTemporalDenoisingControl* *value);
};
template<typename X> struct IAdvancedVideoCaptureDeviceController6_adaptor : X {
	union {
		struct : property {
			ptr<Devices::VideoTemporalDenoisingControl> get() { Devices::VideoTemporalDenoisingControl* value; hrcheck(enc(&IAdvancedVideoCaptureDeviceController6_adaptor::VideoTemporalDenoisingControl)->_get_VideoTemporalDenoisingControl(&value)); return from_abi(value); }
			ptr<Devices::VideoTemporalDenoisingControl> operator()() { return get(); }
			operator ptr<Devices::VideoTemporalDenoisingControl> () { return get(); }
			ptr<Devices::VideoTemporalDenoisingControl> operator->() { return get(); }
		} VideoTemporalDenoisingControl;
	};
	IAdvancedVideoCaptureDeviceController6_adaptor() {}
};
template<typename X> struct adapt<IAdvancedVideoCaptureDeviceController6, X> : Windows::Media::Devices::IAdvancedVideoCaptureDeviceController6_adaptor<X> { typedef adapt IAdvancedVideoCaptureDeviceController6; };
struct IAdvancedVideoCaptureDeviceController6 : IAdvancedVideoCaptureDeviceController6_raw, generate<IAdvancedVideoCaptureDeviceController6> {};

// IMediaDeviceControlCapabilities
struct IMediaDeviceControlCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Min(double *value);
	virtual STDMETHODIMP _get_Max(double *value);
	virtual STDMETHODIMP _get_Step(double *value);
	virtual STDMETHODIMP _get_Default(double *value);
	virtual STDMETHODIMP _get_AutoModeSupported(bool *value);
};
template<typename X> struct IMediaDeviceControlCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaDeviceControlCapabilities_adaptor::AutoModeSupported)->_get_AutoModeSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AutoModeSupported;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaDeviceControlCapabilities_adaptor::Default)->_get_Default(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Default;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaDeviceControlCapabilities_adaptor::Max)->_get_Max(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Max;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaDeviceControlCapabilities_adaptor::Min)->_get_Min(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Min;
		struct : property {
			double get() { double value; hrcheck(enc(&IMediaDeviceControlCapabilities_adaptor::Step)->_get_Step(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMediaDeviceControlCapabilities_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IMediaDeviceControlCapabilities_adaptor() {}
};
template<typename X> struct adapt<IMediaDeviceControlCapabilities, X> : Windows::Media::Devices::IMediaDeviceControlCapabilities_adaptor<X> { typedef adapt IMediaDeviceControlCapabilities; };
struct IMediaDeviceControlCapabilities : IMediaDeviceControlCapabilities_raw, generate<IMediaDeviceControlCapabilities> {};

// MediaDeviceControlCapabilities
template<typename X> struct statics<MediaDeviceControlCapabilities, X> : X {
	typedef typename X::root_type MediaDeviceControlCapabilities;
};
struct MediaDeviceControlCapabilities : generate<MediaDeviceControlCapabilities> {};

// IAdvancedVideoCaptureDeviceController
struct IAdvancedVideoCaptureDeviceController_raw : IInspectable {
	virtual STDMETHODIMP _SetDeviceProperty(HSTRING propertyId, IInspectable* propertyValue);
	virtual STDMETHODIMP _GetDeviceProperty(HSTRING propertyId, IInspectable* *propertyValue);
};
template<typename X> struct IAdvancedVideoCaptureDeviceController_adaptor : X {
	void SetDeviceProperty(hstring_ref propertyId, object_ref propertyValue) { hrcheck(X::get()->_SetDeviceProperty(propertyId, propertyValue)); }
	object GetDeviceProperty(hstring_ref propertyId) { IInspectable* propertyValue; hrcheck(X::get()->_GetDeviceProperty(propertyId, &propertyValue)); return from_abi(propertyValue); }
};
template<typename X> struct adapt<IAdvancedVideoCaptureDeviceController, X> : Windows::Media::Devices::IAdvancedVideoCaptureDeviceController_adaptor<X> { typedef adapt IAdvancedVideoCaptureDeviceController; };
struct IAdvancedVideoCaptureDeviceController : IAdvancedVideoCaptureDeviceController_raw, generate<IAdvancedVideoCaptureDeviceController> {};

// VideoDeviceController
template<typename X> struct statics<VideoDeviceController, X> : X {
	typedef typename X::root_type VideoDeviceController;
};
struct VideoDeviceController : generate<VideoDeviceController> {};

// AudioDeviceController
template<typename X> struct statics<AudioDeviceController, X> : X {
	typedef typename X::root_type AudioDeviceController;
};
struct AudioDeviceController : generate<AudioDeviceController> {};

// IDialRequestedEventArgs
struct IDialRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _Handled();
	virtual STDMETHODIMP _get_Contact(IInspectable* *value);
};
template<typename X> struct IDialRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IDialRequestedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Contact;
	};
	void Handled() { hrcheck(X::get()->_Handled()); }
	IDialRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDialRequestedEventArgs, X> : Windows::Media::Devices::IDialRequestedEventArgs_adaptor<X> { typedef adapt IDialRequestedEventArgs; };
struct IDialRequestedEventArgs : IDialRequestedEventArgs_raw, generate<IDialRequestedEventArgs> {};

// DialRequestedEventArgs
template<typename X> struct statics<DialRequestedEventArgs, X> : X {
	typedef typename X::root_type DialRequestedEventArgs;
};
struct DialRequestedEventArgs : generate<DialRequestedEventArgs> {};

// IRedialRequestedEventArgs
struct IRedialRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _Handled();
};
template<typename X> struct IRedialRequestedEventArgs_adaptor : X {
	void Handled() { hrcheck(X::get()->_Handled()); }
};
template<typename X> struct adapt<IRedialRequestedEventArgs, X> : Windows::Media::Devices::IRedialRequestedEventArgs_adaptor<X> { typedef adapt IRedialRequestedEventArgs; };
struct IRedialRequestedEventArgs : IRedialRequestedEventArgs_raw, generate<IRedialRequestedEventArgs> {};

// RedialRequestedEventArgs
template<typename X> struct statics<RedialRequestedEventArgs, X> : X {
	typedef typename X::root_type RedialRequestedEventArgs;
};
struct RedialRequestedEventArgs : generate<RedialRequestedEventArgs> {};

// IKeypadPressedEventArgs
struct IKeypadPressedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_TelephonyKey(Devices::TelephonyKey *telephonyKey);
};
template<typename X> struct IKeypadPressedEventArgs_adaptor : X {
	union {
		struct : property {
			Devices::TelephonyKey get() { Devices::TelephonyKey telephonyKey; hrcheck(enc(&IKeypadPressedEventArgs_adaptor::TelephonyKey)->_get_TelephonyKey(&telephonyKey)); return telephonyKey; }
			Devices::TelephonyKey operator()() { return get(); }
			operator Devices::TelephonyKey () { return get(); }
		} TelephonyKey;
	};
	IKeypadPressedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IKeypadPressedEventArgs, X> : Windows::Media::Devices::IKeypadPressedEventArgs_adaptor<X> { typedef adapt IKeypadPressedEventArgs; };
struct IKeypadPressedEventArgs : IKeypadPressedEventArgs_raw, generate<IKeypadPressedEventArgs> {};

// KeypadPressedEventArgs
template<typename X> struct statics<KeypadPressedEventArgs, X> : X {
	typedef typename X::root_type KeypadPressedEventArgs;
};
struct KeypadPressedEventArgs : generate<KeypadPressedEventArgs> {};

// CallControlEventHandler
struct CallControlEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(CallControl* sender) = 0;
};

// ICallControlStatics
struct ICallControlStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(CallControl* *callControl);
	virtual STDMETHODIMP _FromId(HSTRING deviceId, CallControl* *callControl);
};

// ICallControl
struct ICallControl_raw : IInspectable {
	virtual STDMETHODIMP _IndicateNewIncomingCall(bool enableRinger, HSTRING callerId, unsigned __int64 *callToken);
	virtual STDMETHODIMP _IndicateNewOutgoingCall(unsigned __int64 *callToken);
	virtual STDMETHODIMP _IndicateActiveCall(unsigned __int64 callToken);
	virtual STDMETHODIMP _EndCall(unsigned __int64 callToken);
	virtual STDMETHODIMP _get_HasRinger(bool *value);
	virtual STDMETHODIMP _add_AnswerRequested(CallControlEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AnswerRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_HangUpRequested(CallControlEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HangUpRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DialRequested(DialRequestedEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DialRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RedialRequested(RedialRequestedEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RedialRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_KeypadPressed(KeypadPressedEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_KeypadPressed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AudioTransferRequested(CallControlEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AudioTransferRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICallControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICallControl_adaptor::HasRinger)->_get_HasRinger(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasRinger;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<CallControlEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICallControl_adaptor::AnswerRequested)->_add_AnswerRequested(handler, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICallControl_adaptor::AnswerRequested)->_remove_AnswerRequested(token)); }
		} AnswerRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<CallControlEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICallControl_adaptor::AudioTransferRequested)->_add_AudioTransferRequested(handler, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICallControl_adaptor::AudioTransferRequested)->_remove_AudioTransferRequested(token)); }
		} AudioTransferRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<DialRequestedEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICallControl_adaptor::DialRequested)->_add_DialRequested(handler, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICallControl_adaptor::DialRequested)->_remove_DialRequested(token)); }
		} DialRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<CallControlEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICallControl_adaptor::HangUpRequested)->_add_HangUpRequested(handler, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICallControl_adaptor::HangUpRequested)->_remove_HangUpRequested(token)); }
		} HangUpRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<KeypadPressedEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICallControl_adaptor::KeypadPressed)->_add_KeypadPressed(handler, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICallControl_adaptor::KeypadPressed)->_remove_KeypadPressed(token)); }
		} KeypadPressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<RedialRequestedEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICallControl_adaptor::RedialRequested)->_add_RedialRequested(handler, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICallControl_adaptor::RedialRequested)->_remove_RedialRequested(token)); }
		} RedialRequested;
	};
	unsigned __int64 IndicateNewIncomingCall(bool enableRinger, hstring_ref callerId) { unsigned __int64 callToken; hrcheck(X::get()->_IndicateNewIncomingCall(enableRinger, callerId, &callToken)); return callToken; }
	unsigned __int64 IndicateNewOutgoingCall() { unsigned __int64 callToken; hrcheck(X::get()->_IndicateNewOutgoingCall(&callToken)); return callToken; }
	void IndicateActiveCall(unsigned __int64 callToken) { hrcheck(X::get()->_IndicateActiveCall(callToken)); }
	void EndCall(unsigned __int64 callToken) { hrcheck(X::get()->_EndCall(callToken)); }
	ICallControl_adaptor() {}
};
template<typename X> struct adapt<ICallControl, X> : Windows::Media::Devices::ICallControl_adaptor<X> { typedef adapt ICallControl; };
struct ICallControl : ICallControl_raw, generate<ICallControl> {};

// CallControl
template<typename> struct CallControl_statics {
	static ptr<CallControl> GetDefault() { CallControl* callControl; hrcheck(get_activation_factory<CallControl, ICallControlStatics>()->_GetDefault(&callControl)); return from_abi(callControl); }
	static ptr<CallControl> FromId(hstring_ref deviceId) { CallControl* callControl; hrcheck(get_activation_factory<CallControl, ICallControlStatics>()->_FromId(deviceId, &callControl)); return from_abi(callControl); }
};

template<typename X> struct statics<CallControl, X> : X, Windows::Media::Devices::CallControl_statics<void> {
	typedef typename X::root_type CallControl;
};
struct CallControl : generate<CallControl> {};

// DialRequestedEventHandler
struct DialRequestedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(CallControl* sender, DialRequestedEventArgs* e) = 0;
};

// RedialRequestedEventHandler
struct RedialRequestedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(CallControl* sender, RedialRequestedEventArgs* e) = 0;
};

// KeypadPressedEventHandler
struct KeypadPressedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(CallControl* sender, KeypadPressedEventArgs* e) = 0;
};
}}}
} // namespace iso_winrt
