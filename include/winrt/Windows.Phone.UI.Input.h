#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.UI.Input

#include "Windows.Phone.UI.Input.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Phone::UI::Input::IBackPressedEventArgs> : interface_type<> {};
template<> struct def<Windows::Phone::UI::Input::BackPressedEventArgs> : class_type<Platform::Object, Windows::Phone::UI::Input::IBackPressedEventArgs> {};
template<> struct def<Windows::Phone::UI::Input::IHardwareButtonsStatics2> : interface_type<> {};
template<> struct def<Windows::Phone::UI::Input::ICameraEventArgs> : interface_type<> {};
template<> struct def<Windows::Phone::UI::Input::CameraEventArgs> : class_type<Platform::Object, Windows::Phone::UI::Input::ICameraEventArgs> {};
template<> struct def<Windows::Phone::UI::Input::IHardwareButtonsStatics> : interface_type<> {};
template<> struct def<Windows::Phone::UI::Input::HardwareButtons> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Phone::UI::Input::IBackPressedEventArgs> { define_guid(0xF6F555FF, 0x64EC, 0x42A2, 0xB9, 0x3B, 0x2F, 0xBC, 0xC, 0x36, 0xA1, 0x21);};
template<> struct uuid<Windows::Phone::UI::Input::IHardwareButtonsStatics2> { define_guid(0x39C6C274, 0x993F, 0x40DD, 0x85, 0x4C, 0x83, 0x1A, 0x89, 0x34, 0xB9, 0x2E);};
template<> struct uuid<Windows::Phone::UI::Input::ICameraEventArgs> { define_guid(0xB4063BDA, 0x201F, 0x473D, 0xBC, 0x69, 0xE9, 0xE4, 0xAC, 0x57, 0xC9, 0xD0);};
template<> struct uuid<Windows::Phone::UI::Input::IHardwareButtonsStatics> { define_guid(0x594B8780, 0xDA66, 0x4FD8, 0xA7, 0x76, 0x75, 0x6, 0xBD, 0xC, 0xBF, 0xA7);};

// types

namespace Windows { namespace Phone { namespace UI { namespace Input {

// IBackPressedEventArgs
struct IBackPressedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct IBackPressedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBackPressedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IBackPressedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	IBackPressedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBackPressedEventArgs, X> : Windows::Phone::UI::Input::IBackPressedEventArgs_adaptor<X> { typedef adapt IBackPressedEventArgs; };
struct IBackPressedEventArgs : IBackPressedEventArgs_raw, generate<IBackPressedEventArgs> {};

// BackPressedEventArgs
template<typename X> struct statics<BackPressedEventArgs, X> : X {
	typedef typename X::root_type BackPressedEventArgs;
};
struct BackPressedEventArgs : generate<BackPressedEventArgs> {};

// IHardwareButtonsStatics2
struct IHardwareButtonsStatics2 : IInspectable {
	virtual STDMETHODIMP _add_CameraHalfPressed(Foundation::EventHandler<CameraEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraHalfPressed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CameraPressed(Foundation::EventHandler<CameraEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraPressed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CameraReleased(Foundation::EventHandler<CameraEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraReleased(Foundation::EventRegistrationToken token);
};

// ICameraEventArgs
struct ICameraEventArgs : IInspectable, generate<ICameraEventArgs> {};

// CameraEventArgs
template<typename X> struct statics<CameraEventArgs, X> : X {
	typedef typename X::root_type CameraEventArgs;
};
struct CameraEventArgs : generate<CameraEventArgs> {};

// IHardwareButtonsStatics
struct IHardwareButtonsStatics : IInspectable {
	virtual STDMETHODIMP _add_BackPressed(Foundation::EventHandler<BackPressedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BackPressed(Foundation::EventRegistrationToken token);
};

// HardwareButtons
template<typename> struct HardwareButtons_statics {
	static struct _BackPressed : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<BackPressedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics>()->_add_BackPressed(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics>()->_remove_BackPressed(token)); }
	} BackPressed;
	static struct _CameraHalfPressed : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<CameraEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics2>()->_add_CameraHalfPressed(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics2>()->_remove_CameraHalfPressed(token)); }
	} CameraHalfPressed;
	static struct _CameraPressed : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<CameraEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics2>()->_add_CameraPressed(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics2>()->_remove_CameraPressed(token)); }
	} CameraPressed;
	static struct _CameraReleased : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<CameraEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics2>()->_add_CameraReleased(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<HardwareButtons, IHardwareButtonsStatics2>()->_remove_CameraReleased(token)); }
	} CameraReleased;
};
template<typename X> typename HardwareButtons_statics<X>::_BackPressed HardwareButtons_statics<X>::BackPressed;
template<typename X> typename HardwareButtons_statics<X>::_CameraHalfPressed HardwareButtons_statics<X>::CameraHalfPressed;
template<typename X> typename HardwareButtons_statics<X>::_CameraPressed HardwareButtons_statics<X>::CameraPressed;
template<typename X> typename HardwareButtons_statics<X>::_CameraReleased HardwareButtons_statics<X>::CameraReleased;

template<typename X> struct statics<HardwareButtons, X> : X, Windows::Phone::UI::Input::HardwareButtons_statics<void> {
	typedef typename X::root_type HardwareButtons;
};
struct HardwareButtons : generate<HardwareButtons> {};
}}}}
} // namespace iso_winrt
