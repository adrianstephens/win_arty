#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.AppExtensions

#include "Windows.ApplicationModel.AppExtensions.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel {
struct AppInfo;
struct Package;
}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
struct IPropertySet;
}}
namespace Storage {
struct StorageFolder;
}}

// defs

template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtensionCatalogStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtensionCatalog> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::AppExtensionCatalog> : class_type<Platform::Object, Windows::ApplicationModel::AppExtensions::IAppExtensionCatalog> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtension> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::AppExtension> : class_type<Platform::Object, Windows::ApplicationModel::AppExtensions::IAppExtension> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageInstalledEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::AppExtensionPackageInstalledEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::AppExtensions::IAppExtensionPackageInstalledEventArgs> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatingEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatingEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatingEventArgs> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::AppExtensionPackageUpdatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUninstallingEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::AppExtensionPackageUninstallingEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUninstallingEventArgs> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageStatusChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::AppExtensions::AppExtensionPackageStatusChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::AppExtensions::IAppExtensionPackageStatusChangedEventArgs> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtensionCatalogStatics> { define_guid(0x3C36668A, 0x5F18, 0x4F0B, 0x9C, 0xE5, 0xCA, 0xB6, 0x1D, 0x19, 0x6F, 0x11);};
template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtensionCatalog> { define_guid(0x97872032, 0x8426, 0x4AD1, 0x90, 0x84, 0x92, 0xE8, 0x8C, 0x2D, 0xA2, 0x0);};
template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtension> { define_guid(0x8450902C, 0x15ED, 0x4FAF, 0x93, 0xEA, 0x22, 0x37, 0xBB, 0xF8, 0xCB, 0xD6);};
template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageInstalledEventArgs> { define_guid(0x39E59234, 0x3351, 0x4A8D, 0x97, 0x45, 0xE7, 0xD3, 0xDD, 0x45, 0xBC, 0x48);};
template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatingEventArgs> { define_guid(0x7ED59329, 0x1A65, 0x4800, 0xA7, 0x0, 0xB3, 0x21, 0x0, 0x9E, 0x30, 0x6A);};
template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatedEventArgs> { define_guid(0x3A83C43F, 0x797E, 0x44B5, 0xBA, 0x24, 0xA4, 0xC8, 0xB5, 0xA5, 0x43, 0xD7);};
template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUninstallingEventArgs> { define_guid(0x60F160C5, 0x171E, 0x40FF, 0xAE, 0x98, 0xAB, 0x2C, 0x20, 0xDD, 0x4D, 0x75);};
template<> struct uuid<Windows::ApplicationModel::AppExtensions::IAppExtensionPackageStatusChangedEventArgs> { define_guid(0x1CE17433, 0x1153, 0x44FD, 0x87, 0xB1, 0x8A, 0xE1, 0x5, 0x3, 0x3, 0xDF);};

// types

namespace Windows { namespace ApplicationModel { namespace AppExtensions {

// IAppExtensionCatalogStatics
struct IAppExtensionCatalogStatics : IInspectable {
	virtual STDMETHODIMP _Open(HSTRING appExtensionName, AppExtensionCatalog* *value);
};

// IAppExtensionCatalog
struct IAppExtensionCatalog_raw : IInspectable {
	virtual STDMETHODIMP _FindAllAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppExtension*>*>* *operation);
	virtual STDMETHODIMP _RequestRemovePackageAsync(HSTRING packageFullName, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _add_PackageInstalled(Foundation::TypedEventHandler<AppExtensionCatalog*, AppExtensionPackageInstalledEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PackageInstalled(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PackageUpdating(Foundation::TypedEventHandler<AppExtensionCatalog*, AppExtensionPackageUpdatingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PackageUpdating(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PackageUpdated(Foundation::TypedEventHandler<AppExtensionCatalog*, AppExtensionPackageUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PackageUpdated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PackageUninstalling(Foundation::TypedEventHandler<AppExtensionCatalog*, AppExtensionPackageUninstallingEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PackageUninstalling(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PackageStatusChanged(Foundation::TypedEventHandler<AppExtensionCatalog*, AppExtensionPackageStatusChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PackageStatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppExtensionCatalog_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppExtensionCatalog>, ptr<AppExtensionPackageInstalledEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageInstalled)->_add_PackageInstalled(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageInstalled)->_remove_PackageInstalled(token)); }
		} PackageInstalled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppExtensionCatalog>, ptr<AppExtensionPackageStatusChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageStatusChanged)->_add_PackageStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageStatusChanged)->_remove_PackageStatusChanged(token)); }
		} PackageStatusChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppExtensionCatalog>, ptr<AppExtensionPackageUninstallingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageUninstalling)->_add_PackageUninstalling(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageUninstalling)->_remove_PackageUninstalling(token)); }
		} PackageUninstalling;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppExtensionCatalog>, ptr<AppExtensionPackageUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageUpdated)->_add_PackageUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageUpdated)->_remove_PackageUpdated(token)); }
		} PackageUpdated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppExtensionCatalog>, ptr<AppExtensionPackageUpdatingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageUpdating)->_add_PackageUpdating(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppExtensionCatalog_adaptor::PackageUpdating)->_remove_PackageUpdating(token)); }
		} PackageUpdating;
	};
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>>>> FindAllAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppExtension*>*>* operation; hrcheck(X::get()->_FindAllAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestRemovePackageAsync(hstring_ref packageFullName) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestRemovePackageAsync(packageFullName, &operation)); return from_abi(operation); }
	IAppExtensionCatalog_adaptor() {}
};
template<typename X> struct adapt<IAppExtensionCatalog, X> : Windows::ApplicationModel::AppExtensions::IAppExtensionCatalog_adaptor<X> { typedef adapt IAppExtensionCatalog; };
struct IAppExtensionCatalog : IAppExtensionCatalog_raw, generate<IAppExtensionCatalog> {};

// AppExtensionCatalog
template<typename> struct AppExtensionCatalog_statics {
	static ptr<AppExtensionCatalog> Open(hstring_ref appExtensionName) { AppExtensionCatalog* value; hrcheck(get_activation_factory<AppExtensionCatalog, IAppExtensionCatalogStatics>()->_Open(appExtensionName, &value)); return from_abi(value); }
};

template<typename X> struct statics<AppExtensionCatalog, X> : X, Windows::ApplicationModel::AppExtensions::AppExtensionCatalog_statics<void> {
	typedef typename X::root_type AppExtensionCatalog;
};
struct AppExtensionCatalog : generate<AppExtensionCatalog> {};

// IAppExtension
struct IAppExtension_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_Package(ApplicationModel::Package* *value);
	virtual STDMETHODIMP _get_AppInfo(ApplicationModel::AppInfo* *value);
	virtual STDMETHODIMP _GetExtensionPropertiesAsync(Foundation::IAsyncOperation<Foundation::Collections::IPropertySet*>* *operation);
	virtual STDMETHODIMP _GetPublicFolderAsync(Foundation::IAsyncOperation<Storage::StorageFolder*>* *operation);
};
template<typename X> struct IAppExtension_adaptor : X {
	union {
		struct : property {
			ptr<ApplicationModel::AppInfo> get() { ApplicationModel::AppInfo* value; hrcheck(enc(&IAppExtension_adaptor::AppInfo)->_get_AppInfo(&value)); return from_abi(value); }
			ptr<ApplicationModel::AppInfo> operator()() { return get(); }
			operator ptr<ApplicationModel::AppInfo> () { return get(); }
			ptr<ApplicationModel::AppInfo> operator->() { return get(); }
		} AppInfo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtension_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtension_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtension_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			ptr<ApplicationModel::Package> get() { ApplicationModel::Package* value; hrcheck(enc(&IAppExtension_adaptor::Package)->_get_Package(&value)); return from_abi(value); }
			ptr<ApplicationModel::Package> operator()() { return get(); }
			operator ptr<ApplicationModel::Package> () { return get(); }
			ptr<ApplicationModel::Package> operator->() { return get(); }
		} Package;
	};
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IPropertySet>>> GetExtensionPropertiesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IPropertySet*>* operation; hrcheck(X::get()->_GetExtensionPropertiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::StorageFolder>>> GetPublicFolderAsync() { Foundation::IAsyncOperation<Storage::StorageFolder*>* operation; hrcheck(X::get()->_GetPublicFolderAsync(&operation)); return from_abi(operation); }
	IAppExtension_adaptor() {}
};
template<typename X> struct adapt<IAppExtension, X> : Windows::ApplicationModel::AppExtensions::IAppExtension_adaptor<X> { typedef adapt IAppExtension; };
struct IAppExtension : IAppExtension_raw, generate<IAppExtension> {};

// AppExtension
template<typename X> struct statics<AppExtension, X> : X {
	typedef typename X::root_type AppExtension;
};
struct AppExtension : generate<AppExtension> {};

// IAppExtensionPackageInstalledEventArgs
struct IAppExtensionPackageInstalledEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AppExtensionName(HSTRING *value);
	virtual STDMETHODIMP _get_Package(ApplicationModel::Package* *value);
	virtual STDMETHODIMP _get_Extensions(Foundation::Collections::IVectorView<AppExtension*>* *values);
};
template<typename X> struct IAppExtensionPackageInstalledEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtensionPackageInstalledEventArgs_adaptor::AppExtensionName)->_get_AppExtensionName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppExtensionName;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> get() { Foundation::Collections::IVectorView<AppExtension*>* values; hrcheck(enc(&IAppExtensionPackageInstalledEventArgs_adaptor::Extensions)->_get_Extensions(&values)); return from_abi(values); }
			ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> operator->() { return get(); }
		} Extensions;
		struct : property {
			ptr<ApplicationModel::Package> get() { ApplicationModel::Package* value; hrcheck(enc(&IAppExtensionPackageInstalledEventArgs_adaptor::Package)->_get_Package(&value)); return from_abi(value); }
			ptr<ApplicationModel::Package> operator()() { return get(); }
			operator ptr<ApplicationModel::Package> () { return get(); }
			ptr<ApplicationModel::Package> operator->() { return get(); }
		} Package;
	};
	IAppExtensionPackageInstalledEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppExtensionPackageInstalledEventArgs, X> : Windows::ApplicationModel::AppExtensions::IAppExtensionPackageInstalledEventArgs_adaptor<X> { typedef adapt IAppExtensionPackageInstalledEventArgs; };
struct IAppExtensionPackageInstalledEventArgs : IAppExtensionPackageInstalledEventArgs_raw, generate<IAppExtensionPackageInstalledEventArgs> {};

// AppExtensionPackageInstalledEventArgs
template<typename X> struct statics<AppExtensionPackageInstalledEventArgs, X> : X {
	typedef typename X::root_type AppExtensionPackageInstalledEventArgs;
};
struct AppExtensionPackageInstalledEventArgs : generate<AppExtensionPackageInstalledEventArgs> {};

// IAppExtensionPackageUpdatingEventArgs
struct IAppExtensionPackageUpdatingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AppExtensionName(HSTRING *value);
	virtual STDMETHODIMP _get_Package(ApplicationModel::Package* *value);
};
template<typename X> struct IAppExtensionPackageUpdatingEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtensionPackageUpdatingEventArgs_adaptor::AppExtensionName)->_get_AppExtensionName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppExtensionName;
		struct : property {
			ptr<ApplicationModel::Package> get() { ApplicationModel::Package* value; hrcheck(enc(&IAppExtensionPackageUpdatingEventArgs_adaptor::Package)->_get_Package(&value)); return from_abi(value); }
			ptr<ApplicationModel::Package> operator()() { return get(); }
			operator ptr<ApplicationModel::Package> () { return get(); }
			ptr<ApplicationModel::Package> operator->() { return get(); }
		} Package;
	};
	IAppExtensionPackageUpdatingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppExtensionPackageUpdatingEventArgs, X> : Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatingEventArgs_adaptor<X> { typedef adapt IAppExtensionPackageUpdatingEventArgs; };
struct IAppExtensionPackageUpdatingEventArgs : IAppExtensionPackageUpdatingEventArgs_raw, generate<IAppExtensionPackageUpdatingEventArgs> {};

// AppExtensionPackageUpdatingEventArgs
template<typename X> struct statics<AppExtensionPackageUpdatingEventArgs, X> : X {
	typedef typename X::root_type AppExtensionPackageUpdatingEventArgs;
};
struct AppExtensionPackageUpdatingEventArgs : generate<AppExtensionPackageUpdatingEventArgs> {};

// IAppExtensionPackageUpdatedEventArgs
struct IAppExtensionPackageUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AppExtensionName(HSTRING *value);
	virtual STDMETHODIMP _get_Package(ApplicationModel::Package* *value);
	virtual STDMETHODIMP _get_Extensions(Foundation::Collections::IVectorView<AppExtension*>* *values);
};
template<typename X> struct IAppExtensionPackageUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtensionPackageUpdatedEventArgs_adaptor::AppExtensionName)->_get_AppExtensionName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppExtensionName;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> get() { Foundation::Collections::IVectorView<AppExtension*>* values; hrcheck(enc(&IAppExtensionPackageUpdatedEventArgs_adaptor::Extensions)->_get_Extensions(&values)); return from_abi(values); }
			ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<AppExtension>>> operator->() { return get(); }
		} Extensions;
		struct : property {
			ptr<ApplicationModel::Package> get() { ApplicationModel::Package* value; hrcheck(enc(&IAppExtensionPackageUpdatedEventArgs_adaptor::Package)->_get_Package(&value)); return from_abi(value); }
			ptr<ApplicationModel::Package> operator()() { return get(); }
			operator ptr<ApplicationModel::Package> () { return get(); }
			ptr<ApplicationModel::Package> operator->() { return get(); }
		} Package;
	};
	IAppExtensionPackageUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppExtensionPackageUpdatedEventArgs, X> : Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUpdatedEventArgs_adaptor<X> { typedef adapt IAppExtensionPackageUpdatedEventArgs; };
struct IAppExtensionPackageUpdatedEventArgs : IAppExtensionPackageUpdatedEventArgs_raw, generate<IAppExtensionPackageUpdatedEventArgs> {};

// AppExtensionPackageUpdatedEventArgs
template<typename X> struct statics<AppExtensionPackageUpdatedEventArgs, X> : X {
	typedef typename X::root_type AppExtensionPackageUpdatedEventArgs;
};
struct AppExtensionPackageUpdatedEventArgs : generate<AppExtensionPackageUpdatedEventArgs> {};

// IAppExtensionPackageUninstallingEventArgs
struct IAppExtensionPackageUninstallingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AppExtensionName(HSTRING *value);
	virtual STDMETHODIMP _get_Package(ApplicationModel::Package* *value);
};
template<typename X> struct IAppExtensionPackageUninstallingEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtensionPackageUninstallingEventArgs_adaptor::AppExtensionName)->_get_AppExtensionName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppExtensionName;
		struct : property {
			ptr<ApplicationModel::Package> get() { ApplicationModel::Package* value; hrcheck(enc(&IAppExtensionPackageUninstallingEventArgs_adaptor::Package)->_get_Package(&value)); return from_abi(value); }
			ptr<ApplicationModel::Package> operator()() { return get(); }
			operator ptr<ApplicationModel::Package> () { return get(); }
			ptr<ApplicationModel::Package> operator->() { return get(); }
		} Package;
	};
	IAppExtensionPackageUninstallingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppExtensionPackageUninstallingEventArgs, X> : Windows::ApplicationModel::AppExtensions::IAppExtensionPackageUninstallingEventArgs_adaptor<X> { typedef adapt IAppExtensionPackageUninstallingEventArgs; };
struct IAppExtensionPackageUninstallingEventArgs : IAppExtensionPackageUninstallingEventArgs_raw, generate<IAppExtensionPackageUninstallingEventArgs> {};

// AppExtensionPackageUninstallingEventArgs
template<typename X> struct statics<AppExtensionPackageUninstallingEventArgs, X> : X {
	typedef typename X::root_type AppExtensionPackageUninstallingEventArgs;
};
struct AppExtensionPackageUninstallingEventArgs : generate<AppExtensionPackageUninstallingEventArgs> {};

// IAppExtensionPackageStatusChangedEventArgs
struct IAppExtensionPackageStatusChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AppExtensionName(HSTRING *value);
	virtual STDMETHODIMP _get_Package(ApplicationModel::Package* *value);
};
template<typename X> struct IAppExtensionPackageStatusChangedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppExtensionPackageStatusChangedEventArgs_adaptor::AppExtensionName)->_get_AppExtensionName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppExtensionName;
		struct : property {
			ptr<ApplicationModel::Package> get() { ApplicationModel::Package* value; hrcheck(enc(&IAppExtensionPackageStatusChangedEventArgs_adaptor::Package)->_get_Package(&value)); return from_abi(value); }
			ptr<ApplicationModel::Package> operator()() { return get(); }
			operator ptr<ApplicationModel::Package> () { return get(); }
			ptr<ApplicationModel::Package> operator->() { return get(); }
		} Package;
	};
	IAppExtensionPackageStatusChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppExtensionPackageStatusChangedEventArgs, X> : Windows::ApplicationModel::AppExtensions::IAppExtensionPackageStatusChangedEventArgs_adaptor<X> { typedef adapt IAppExtensionPackageStatusChangedEventArgs; };
struct IAppExtensionPackageStatusChangedEventArgs : IAppExtensionPackageStatusChangedEventArgs_raw, generate<IAppExtensionPackageStatusChangedEventArgs> {};

// AppExtensionPackageStatusChangedEventArgs
template<typename X> struct statics<AppExtensionPackageStatusChangedEventArgs, X> : X {
	typedef typename X::root_type AppExtensionPackageStatusChangedEventArgs;
};
struct AppExtensionPackageStatusChangedEventArgs : generate<AppExtensionPackageStatusChangedEventArgs> {};
}}}
} // namespace iso_winrt
