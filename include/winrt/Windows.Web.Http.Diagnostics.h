#pragma once
// generated by isopod tools
// namespaces:
// Windows.Web.Http.Diagnostics

#include "Windows.Web.Http.Diagnostics.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace System { namespace Diagnostics {
struct ProcessDiagnosticInfo;
}}
namespace Web { namespace Http {
struct HttpRequestMessage;
struct HttpResponseMessage;
}}}

// defs

template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticsContract> : value_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticRequestInitiator> : enum_type<int> {};
template<> struct def<Windows::Web::Http::Diagnostics::IHttpDiagnosticSourceLocation> : interface_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticSourceLocation> : class_type<Platform::Object, Windows::Web::Http::Diagnostics::IHttpDiagnosticSourceLocation> {};
template<> struct def<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestSentEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticProviderRequestSentEventArgs> : class_type<Platform::Object, Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestSentEventArgs> {};
template<> struct def<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderResponseReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticProviderResponseReceivedEventArgs> : class_type<Platform::Object, Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderResponseReceivedEventArgs> {};
template<> struct def<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseTimestamps> : interface_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticProviderRequestResponseTimestamps> : class_type<Platform::Object, Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseTimestamps> {};
template<> struct def<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticProviderRequestResponseCompletedEventArgs> : class_type<Platform::Object, Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseCompletedEventArgs> {};
template<> struct def<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderStatics> : interface_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::IHttpDiagnosticProvider> : interface_type<> {};
template<> struct def<Windows::Web::Http::Diagnostics::HttpDiagnosticProvider> : class_type<Platform::Object, Windows::Web::Http::Diagnostics::IHttpDiagnosticProvider> {};

// uuids

template<> struct uuid<Windows::Web::Http::Diagnostics::IHttpDiagnosticSourceLocation> { define_guid(0x54A9D260, 0x8860, 0x423F, 0xB6, 0xFA, 0xD7, 0x77, 0x16, 0xF6, 0x47, 0xA7);};
template<> struct uuid<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestSentEventArgs> { define_guid(0x3F5196D0, 0x4C1F, 0x4EBE, 0xA5, 0x7A, 0x6, 0x93, 0x7, 0x71, 0xC5, 0xD);};
template<> struct uuid<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderResponseReceivedEventArgs> { define_guid(0xA0A2566C, 0xAB5F, 0x4D66, 0xBB, 0x2D, 0x8, 0x4C, 0xF4, 0x16, 0x35, 0xD0);};
template<> struct uuid<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseTimestamps> { define_guid(0xE0AFDE10, 0x55CF, 0x4C01, 0x91, 0xD4, 0xA2, 0x5, 0x57, 0xD8, 0x49, 0xF0);};
template<> struct uuid<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseCompletedEventArgs> { define_guid(0x735F98EE, 0x94F6, 0x4532, 0xB2, 0x6E, 0x61, 0xE1, 0xB1, 0xE4, 0xEF, 0xD4);};
template<> struct uuid<Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderStatics> { define_guid(0x5B824EC1, 0x6A6C, 0x47CC, 0xAF, 0xEC, 0x1E, 0x86, 0xBC, 0x26, 0x5, 0x3B);};
template<> struct uuid<Windows::Web::Http::Diagnostics::IHttpDiagnosticProvider> { define_guid(0xBD811501, 0xA056, 0x4D39, 0xB1, 0x74, 0x83, 0x3B, 0x7B, 0x3, 0xB0, 0x2C);};

// types

namespace Windows { namespace Web { namespace Http { namespace Diagnostics {

// IHttpDiagnosticSourceLocation
struct IHttpDiagnosticSourceLocation_raw : IInspectable {
	virtual STDMETHODIMP _get_SourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_LineNumber(unsigned __int64 *value);
	virtual STDMETHODIMP _get_ColumnNumber(unsigned __int64 *value);
};
template<typename X> struct IHttpDiagnosticSourceLocation_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IHttpDiagnosticSourceLocation_adaptor::ColumnNumber)->_get_ColumnNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} ColumnNumber;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IHttpDiagnosticSourceLocation_adaptor::LineNumber)->_get_LineNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} LineNumber;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IHttpDiagnosticSourceLocation_adaptor::SourceUri)->_get_SourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} SourceUri;
	};
	IHttpDiagnosticSourceLocation_adaptor() {}
};
template<typename X> struct adapt<IHttpDiagnosticSourceLocation, X> : Windows::Web::Http::Diagnostics::IHttpDiagnosticSourceLocation_adaptor<X> { typedef adapt IHttpDiagnosticSourceLocation; };
struct IHttpDiagnosticSourceLocation : IHttpDiagnosticSourceLocation_raw, generate<IHttpDiagnosticSourceLocation> {};

// HttpDiagnosticSourceLocation
template<typename X> struct statics<HttpDiagnosticSourceLocation, X> : X {
	typedef typename X::root_type HttpDiagnosticSourceLocation;
};
struct HttpDiagnosticSourceLocation : generate<HttpDiagnosticSourceLocation> {};

// IHttpDiagnosticProviderRequestSentEventArgs
struct IHttpDiagnosticProviderRequestSentEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_ActivityId(Platform::Guid *value);
	virtual STDMETHODIMP _get_Message(HttpRequestMessage* *value);
	virtual STDMETHODIMP _get_ProcessId(unsigned *value);
	virtual STDMETHODIMP _get_ThreadId(unsigned *value);
	virtual STDMETHODIMP _get_Initiator(HttpDiagnosticRequestInitiator *value);
	virtual STDMETHODIMP _get_SourceLocations(Foundation::Collections::IVectorView<HttpDiagnosticSourceLocation*>* *value);
};
template<typename X> struct IHttpDiagnosticProviderRequestSentEventArgs_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IHttpDiagnosticProviderRequestSentEventArgs_adaptor::ActivityId)->_get_ActivityId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} ActivityId;
		struct : property {
			HttpDiagnosticRequestInitiator get() { HttpDiagnosticRequestInitiator value; hrcheck(enc(&IHttpDiagnosticProviderRequestSentEventArgs_adaptor::Initiator)->_get_Initiator(&value)); return value; }
			HttpDiagnosticRequestInitiator operator()() { return get(); }
			operator HttpDiagnosticRequestInitiator () { return get(); }
		} Initiator;
		struct : property {
			ptr<HttpRequestMessage> get() { HttpRequestMessage* value; hrcheck(enc(&IHttpDiagnosticProviderRequestSentEventArgs_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<HttpRequestMessage> operator()() { return get(); }
			operator ptr<HttpRequestMessage> () { return get(); }
			ptr<HttpRequestMessage> operator->() { return get(); }
		} Message;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHttpDiagnosticProviderRequestSentEventArgs_adaptor::ProcessId)->_get_ProcessId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ProcessId;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> get() { Foundation::Collections::IVectorView<HttpDiagnosticSourceLocation*>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestSentEventArgs_adaptor::SourceLocations)->_get_SourceLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> operator->() { return get(); }
		} SourceLocations;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHttpDiagnosticProviderRequestSentEventArgs_adaptor::ThreadId)->_get_ThreadId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ThreadId;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IHttpDiagnosticProviderRequestSentEventArgs_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IHttpDiagnosticProviderRequestSentEventArgs_adaptor() {}
};
template<typename X> struct adapt<IHttpDiagnosticProviderRequestSentEventArgs, X> : Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestSentEventArgs_adaptor<X> { typedef adapt IHttpDiagnosticProviderRequestSentEventArgs; };
struct IHttpDiagnosticProviderRequestSentEventArgs : IHttpDiagnosticProviderRequestSentEventArgs_raw, generate<IHttpDiagnosticProviderRequestSentEventArgs> {};

// HttpDiagnosticProviderRequestSentEventArgs
template<typename X> struct statics<HttpDiagnosticProviderRequestSentEventArgs, X> : X {
	typedef typename X::root_type HttpDiagnosticProviderRequestSentEventArgs;
};
struct HttpDiagnosticProviderRequestSentEventArgs : generate<HttpDiagnosticProviderRequestSentEventArgs> {};

// IHttpDiagnosticProviderResponseReceivedEventArgs
struct IHttpDiagnosticProviderResponseReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_ActivityId(Platform::Guid *value);
	virtual STDMETHODIMP _get_Message(HttpResponseMessage* *value);
};
template<typename X> struct IHttpDiagnosticProviderResponseReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IHttpDiagnosticProviderResponseReceivedEventArgs_adaptor::ActivityId)->_get_ActivityId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} ActivityId;
		struct : property {
			ptr<HttpResponseMessage> get() { HttpResponseMessage* value; hrcheck(enc(&IHttpDiagnosticProviderResponseReceivedEventArgs_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<HttpResponseMessage> operator()() { return get(); }
			operator ptr<HttpResponseMessage> () { return get(); }
			ptr<HttpResponseMessage> operator->() { return get(); }
		} Message;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IHttpDiagnosticProviderResponseReceivedEventArgs_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IHttpDiagnosticProviderResponseReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IHttpDiagnosticProviderResponseReceivedEventArgs, X> : Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderResponseReceivedEventArgs_adaptor<X> { typedef adapt IHttpDiagnosticProviderResponseReceivedEventArgs; };
struct IHttpDiagnosticProviderResponseReceivedEventArgs : IHttpDiagnosticProviderResponseReceivedEventArgs_raw, generate<IHttpDiagnosticProviderResponseReceivedEventArgs> {};

// HttpDiagnosticProviderResponseReceivedEventArgs
template<typename X> struct statics<HttpDiagnosticProviderResponseReceivedEventArgs, X> : X {
	typedef typename X::root_type HttpDiagnosticProviderResponseReceivedEventArgs;
};
struct HttpDiagnosticProviderResponseReceivedEventArgs : generate<HttpDiagnosticProviderResponseReceivedEventArgs> {};

// IHttpDiagnosticProviderRequestResponseTimestamps
struct IHttpDiagnosticProviderRequestResponseTimestamps_raw : IInspectable {
	virtual STDMETHODIMP _get_CacheCheckedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_ConnectionInitiatedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_NameResolvedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_SslNegotiatedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_ConnectionCompletedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_RequestSentTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_RequestCompletedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_ResponseReceivedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_ResponseCompletedTimestamp(Foundation::IReference<Foundation::DateTime>* *value);
};
template<typename X> struct IHttpDiagnosticProviderRequestResponseTimestamps_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::CacheCheckedTimestamp)->_get_CacheCheckedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} CacheCheckedTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::ConnectionCompletedTimestamp)->_get_ConnectionCompletedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} ConnectionCompletedTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::ConnectionInitiatedTimestamp)->_get_ConnectionInitiatedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} ConnectionInitiatedTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::NameResolvedTimestamp)->_get_NameResolvedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} NameResolvedTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::RequestCompletedTimestamp)->_get_RequestCompletedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} RequestCompletedTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::RequestSentTimestamp)->_get_RequestSentTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} RequestSentTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::ResponseCompletedTimestamp)->_get_ResponseCompletedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} ResponseCompletedTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::ResponseReceivedTimestamp)->_get_ResponseReceivedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} ResponseReceivedTimestamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseTimestamps_adaptor::SslNegotiatedTimestamp)->_get_SslNegotiatedTimestamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} SslNegotiatedTimestamp;
	};
	IHttpDiagnosticProviderRequestResponseTimestamps_adaptor() {}
};
template<typename X> struct adapt<IHttpDiagnosticProviderRequestResponseTimestamps, X> : Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseTimestamps_adaptor<X> { typedef adapt IHttpDiagnosticProviderRequestResponseTimestamps; };
struct IHttpDiagnosticProviderRequestResponseTimestamps : IHttpDiagnosticProviderRequestResponseTimestamps_raw, generate<IHttpDiagnosticProviderRequestResponseTimestamps> {};

// HttpDiagnosticProviderRequestResponseTimestamps
template<typename X> struct statics<HttpDiagnosticProviderRequestResponseTimestamps, X> : X {
	typedef typename X::root_type HttpDiagnosticProviderRequestResponseTimestamps;
};
struct HttpDiagnosticProviderRequestResponseTimestamps : generate<HttpDiagnosticProviderRequestResponseTimestamps> {};

// IHttpDiagnosticProviderRequestResponseCompletedEventArgs
struct IHttpDiagnosticProviderRequestResponseCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ActivityId(Platform::Guid *value);
	virtual STDMETHODIMP _get_Timestamps(HttpDiagnosticProviderRequestResponseTimestamps* *value);
	virtual STDMETHODIMP _get_RequestedUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ProcessId(unsigned *value);
	virtual STDMETHODIMP _get_ThreadId(unsigned *value);
	virtual STDMETHODIMP _get_Initiator(HttpDiagnosticRequestInitiator *value);
	virtual STDMETHODIMP _get_SourceLocations(Foundation::Collections::IVectorView<HttpDiagnosticSourceLocation*>* *value);
};
template<typename X> struct IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor::ActivityId)->_get_ActivityId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} ActivityId;
		struct : property {
			HttpDiagnosticRequestInitiator get() { HttpDiagnosticRequestInitiator value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor::Initiator)->_get_Initiator(&value)); return value; }
			HttpDiagnosticRequestInitiator operator()() { return get(); }
			operator HttpDiagnosticRequestInitiator () { return get(); }
		} Initiator;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor::ProcessId)->_get_ProcessId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ProcessId;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor::RequestedUri)->_get_RequestedUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} RequestedUri;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> get() { Foundation::Collections::IVectorView<HttpDiagnosticSourceLocation*>* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor::SourceLocations)->_get_SourceLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HttpDiagnosticSourceLocation>>> operator->() { return get(); }
		} SourceLocations;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor::ThreadId)->_get_ThreadId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ThreadId;
		struct : property {
			ptr<HttpDiagnosticProviderRequestResponseTimestamps> get() { HttpDiagnosticProviderRequestResponseTimestamps* value; hrcheck(enc(&IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor::Timestamps)->_get_Timestamps(&value)); return from_abi(value); }
			ptr<HttpDiagnosticProviderRequestResponseTimestamps> operator()() { return get(); }
			operator ptr<HttpDiagnosticProviderRequestResponseTimestamps> () { return get(); }
			ptr<HttpDiagnosticProviderRequestResponseTimestamps> operator->() { return get(); }
		} Timestamps;
	};
	IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IHttpDiagnosticProviderRequestResponseCompletedEventArgs, X> : Windows::Web::Http::Diagnostics::IHttpDiagnosticProviderRequestResponseCompletedEventArgs_adaptor<X> { typedef adapt IHttpDiagnosticProviderRequestResponseCompletedEventArgs; };
struct IHttpDiagnosticProviderRequestResponseCompletedEventArgs : IHttpDiagnosticProviderRequestResponseCompletedEventArgs_raw, generate<IHttpDiagnosticProviderRequestResponseCompletedEventArgs> {};

// HttpDiagnosticProviderRequestResponseCompletedEventArgs
template<typename X> struct statics<HttpDiagnosticProviderRequestResponseCompletedEventArgs, X> : X {
	typedef typename X::root_type HttpDiagnosticProviderRequestResponseCompletedEventArgs;
};
struct HttpDiagnosticProviderRequestResponseCompletedEventArgs : generate<HttpDiagnosticProviderRequestResponseCompletedEventArgs> {};

// IHttpDiagnosticProviderStatics
struct IHttpDiagnosticProviderStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromProcessDiagnosticInfo(System::Diagnostics::ProcessDiagnosticInfo* processDiagnosticInfo, HttpDiagnosticProvider* *value);
};

// IHttpDiagnosticProvider
struct IHttpDiagnosticProvider_raw : IInspectable {
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _add_RequestSent(Foundation::TypedEventHandler<HttpDiagnosticProvider*, HttpDiagnosticProviderRequestSentEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RequestSent(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ResponseReceived(Foundation::TypedEventHandler<HttpDiagnosticProvider*, HttpDiagnosticProviderResponseReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ResponseReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RequestResponseCompleted(Foundation::TypedEventHandler<HttpDiagnosticProvider*, HttpDiagnosticProviderRequestResponseCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RequestResponseCompleted(Foundation::EventRegistrationToken token);
};
template<typename X> struct IHttpDiagnosticProvider_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HttpDiagnosticProvider>, ptr<HttpDiagnosticProviderRequestResponseCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHttpDiagnosticProvider_adaptor::RequestResponseCompleted)->_add_RequestResponseCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHttpDiagnosticProvider_adaptor::RequestResponseCompleted)->_remove_RequestResponseCompleted(token)); }
		} RequestResponseCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HttpDiagnosticProvider>, ptr<HttpDiagnosticProviderRequestSentEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHttpDiagnosticProvider_adaptor::RequestSent)->_add_RequestSent(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHttpDiagnosticProvider_adaptor::RequestSent)->_remove_RequestSent(token)); }
		} RequestSent;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HttpDiagnosticProvider>, ptr<HttpDiagnosticProviderResponseReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHttpDiagnosticProvider_adaptor::ResponseReceived)->_add_ResponseReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHttpDiagnosticProvider_adaptor::ResponseReceived)->_remove_ResponseReceived(token)); }
		} ResponseReceived;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IHttpDiagnosticProvider_adaptor() {}
};
template<typename X> struct adapt<IHttpDiagnosticProvider, X> : Windows::Web::Http::Diagnostics::IHttpDiagnosticProvider_adaptor<X> { typedef adapt IHttpDiagnosticProvider; };
struct IHttpDiagnosticProvider : IHttpDiagnosticProvider_raw, generate<IHttpDiagnosticProvider> {};

// HttpDiagnosticProvider
template<typename> struct HttpDiagnosticProvider_statics {
	static ptr<HttpDiagnosticProvider> CreateFromProcessDiagnosticInfo(pptr<System::Diagnostics::ProcessDiagnosticInfo> processDiagnosticInfo) { HttpDiagnosticProvider* value; hrcheck(get_activation_factory<HttpDiagnosticProvider, IHttpDiagnosticProviderStatics>()->_CreateFromProcessDiagnosticInfo(processDiagnosticInfo, &value)); return from_abi(value); }
};

template<typename X> struct statics<HttpDiagnosticProvider, X> : X, Windows::Web::Http::Diagnostics::HttpDiagnosticProvider_statics<void> {
	typedef typename X::root_type HttpDiagnosticProvider;
};
struct HttpDiagnosticProvider : generate<HttpDiagnosticProvider> {};
}}}}
} // namespace iso_winrt
