#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Documents

#include "Windows.UI.Xaml.Documents.0.h"
#include "Windows.UI.Text.0.h"
#include "Windows.UI.Xaml.Input.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.Core.0.h"
#include "Windows.UI.Xaml.Media.0.h"
#include "Windows.UI.Xaml.h"
#include "Windows.Foundation.Collections.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::UI::Xaml::Documents::LogicalDirection> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Documents::UnderlineStyle> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Documents::TextRange> : value_type<int, int> {};
template<> struct def<Windows::UI::Xaml::Documents::IBlockStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IBlockFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IBlockStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IBlock2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IBlock> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElementStatics4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElementStatics3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElementStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElementFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElementStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElement4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElement3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElement2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElementOverrides> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextElement> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::TextElement> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::ITextElement2, Windows::UI::Xaml::Documents::ITextElement3, Windows::UI::Xaml::Documents::ITextElement4> {};
template<> struct def<Windows::UI::Xaml::Documents::Block> : class_type<Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::IBlock, Windows::UI::Xaml::Documents::IBlock2> {};
template<> struct def<Windows::UI::Xaml::Documents::BlockCollection> : class_type<Platform::Object, Windows::Foundation::Collections::IVector<ptr<Windows::UI::Xaml::Documents::Block>>, Windows::Foundation::Collections::IIterable<ptr<Windows::UI::Xaml::Documents::Block>>> {};
template<> struct def<Windows::UI::Xaml::Documents::IInlineFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IInline> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::Inline> : class_type<Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::IInline> {};
template<> struct def<Windows::UI::Xaml::Documents::InlineCollection> : class_type<Platform::Object, Windows::Foundation::Collections::IVector<ptr<Windows::UI::Xaml::Documents::Inline>>, Windows::Foundation::Collections::IIterable<ptr<Windows::UI::Xaml::Documents::Inline>>> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextHighlighter> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextHighlighterStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextHighlighterFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::TextHighlighter> : class_type<Platform::Object, Windows::UI::Xaml::Documents::ITextHighlighter>, composer_type<Windows::UI::Xaml::Documents::ITextHighlighterFactory> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextPointer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::TextPointer> : class_type<Platform::Object, Windows::UI::Xaml::Documents::ITextPointer> {};
template<> struct def<Windows::UI::Xaml::Documents::ITypography> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITypographyStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::Typography> : class_type<Platform::Object, Windows::UI::Xaml::Documents::ITypography> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextHighlighterBase> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ITextHighlighterBaseFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IInlineUIContainer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ILineBreak> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IParagraph> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IParagraphStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IRun> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IRunStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ISpan> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ISpanFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IBold> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IItalic> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IUnderline> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IContentLinkInvokedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ContentLinkInvokedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Documents::IContentLinkInvokedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Documents::IContentLinkProviderFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IContentLinkProvider> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::ContentLinkProvider> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::IContentLinkProvider> {};
template<> struct def<Windows::UI::Xaml::Documents::IContentLinkProviderCollection> : interface_type<Windows::Foundation::Collections::IVector<ptr<Windows::UI::Xaml::Documents::ContentLinkProvider>>, Windows::Foundation::Collections::IIterable<ptr<Windows::UI::Xaml::Documents::ContentLinkProvider>>> {};
template<> struct def<Windows::UI::Xaml::Documents::ContentLinkProviderCollection> : class_type<Platform::Object, Windows::UI::Xaml::Documents::IContentLinkProviderCollection> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlinkClickEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IContactContentLinkProvider> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IPlaceContentLinkProvider> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IContentLink> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IContentLinkStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IGlyphs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IGlyphsStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IGlyphs2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IGlyphsStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlink> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlinkStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlink2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlinkStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlink3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlinkStatics3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlink4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlinkStatics4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlink5> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::IHyperlinkStatics5> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Documents::TextHighlighterBase> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::ITextHighlighterBase> {};
template<> struct def<Windows::UI::Xaml::Documents::InlineUIContainer> : class_type<Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::IInlineUIContainer> {};
template<> struct def<Windows::UI::Xaml::Documents::LineBreak> : class_type<Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::ILineBreak> {};
template<> struct def<Windows::UI::Xaml::Documents::Paragraph> : class_type<Windows::UI::Xaml::Documents::Block, Windows::UI::Xaml::Documents::IParagraph> {};
template<> struct def<Windows::UI::Xaml::Documents::Run> : class_type<Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::IRun> {};
template<> struct def<Windows::UI::Xaml::Documents::Span> : class_type<Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::ISpan>, composer_type<Windows::UI::Xaml::Documents::ISpanFactory> {};
template<> struct def<Windows::UI::Xaml::Documents::Bold> : class_type<Windows::UI::Xaml::Documents::Span, Windows::UI::Xaml::Documents::IBold> {};
template<> struct def<Windows::UI::Xaml::Documents::Italic> : class_type<Windows::UI::Xaml::Documents::Span, Windows::UI::Xaml::Documents::IItalic> {};
template<> struct def<Windows::UI::Xaml::Documents::Underline> : class_type<Windows::UI::Xaml::Documents::Span, Windows::UI::Xaml::Documents::IUnderline> {};
template<> struct def<Windows::UI::Xaml::Documents::ContactContentLinkProvider> : class_type<Windows::UI::Xaml::Documents::ContentLinkProvider, Windows::UI::Xaml::Documents::IContactContentLinkProvider> {};
template<> struct def<Windows::UI::Xaml::Documents::PlaceContentLinkProvider> : class_type<Windows::UI::Xaml::Documents::ContentLinkProvider, Windows::UI::Xaml::Documents::IPlaceContentLinkProvider> {};
template<> struct def<Windows::UI::Xaml::Documents::ContentLink> : class_type<Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::IContentLink> {};
template<> struct def<Windows::UI::Xaml::Documents::Hyperlink> : class_type<Windows::UI::Xaml::Documents::Span, Windows::UI::Xaml::Documents::IHyperlink, Windows::UI::Xaml::Documents::IHyperlink2, Windows::UI::Xaml::Documents::IHyperlink3, Windows::UI::Xaml::Documents::IHyperlink4, Windows::UI::Xaml::Documents::IHyperlink5> {};
template<> struct def<Windows::UI::Xaml::Documents::HyperlinkClickEventArgs> : class_type<Windows::UI::Xaml::RoutedEventArgs, Windows::UI::Xaml::Documents::IHyperlinkClickEventArgs> {};
template<> struct def<Windows::UI::Xaml::Documents::Glyphs> : class_type<Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Documents::IGlyphs, Windows::UI::Xaml::Documents::IGlyphs2> {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Documents::IBlockStatics2> { define_guid(0xAF01A4D6, 0x3E3, 0x4CEE, 0x9B, 0x2, 0x2B, 0xFC, 0x30, 0x8B, 0x27, 0xA9);};
template<> struct uuid<Windows::UI::Xaml::Documents::IBlockFactory> { define_guid(0x7110532, 0x4F59, 0x4F3B, 0x9C, 0xE5, 0x25, 0x78, 0x4C, 0x43, 0x5, 0x7);};
template<> struct uuid<Windows::UI::Xaml::Documents::IBlockStatics> { define_guid(0xF86A8C34, 0x8D18, 0x4C53, 0xAE, 0xBD, 0x91, 0xE6, 0x10, 0xA5, 0xE0, 0x10);};
template<> struct uuid<Windows::UI::Xaml::Documents::IBlock2> { define_guid(0x5EC7BDF3, 0x1333, 0x4A92, 0x83, 0x18, 0x6C, 0xAE, 0xDC, 0x12, 0xEF, 0x89);};
template<> struct uuid<Windows::UI::Xaml::Documents::IBlock> { define_guid(0x4BCE0016, 0xDD47, 0x4350, 0x8C, 0xB0, 0xE1, 0x71, 0x60, 0xA, 0xC8, 0x96);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElementStatics4> { define_guid(0xFD8F641E, 0x6B12, 0x40D5, 0xB6, 0xEF, 0xD1, 0xBD, 0x12, 0xAC, 0x90, 0x66);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElementStatics3> { define_guid(0xCFEFCFAF, 0xFA1, 0x45EC, 0x9A, 0x4E, 0x9B, 0x33, 0x66, 0x4D, 0xC8, 0xB1);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElementStatics2> { define_guid(0x164297B2, 0x982B, 0x49E1, 0x8C, 0x3, 0xCA, 0x43, 0xBC, 0x4D, 0x5B, 0x6D);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElementFactory> { define_guid(0x35007285, 0xCF47, 0x4BFE, 0xB1, 0xBC, 0x39, 0xC9, 0x3A, 0xF4, 0xAE, 0x80);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElementStatics> { define_guid(0xA2F9B98, 0x6C03, 0x4470, 0xA7, 0x9B, 0x32, 0x98, 0xA1, 0x4, 0x82, 0xCE);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElement4> { define_guid(0xB196E222, 0xCA0E, 0x48A9, 0x83, 0xBC, 0x36, 0xCE, 0x50, 0x56, 0x6A, 0xC7);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElement3> { define_guid(0xD1DB340F, 0x1BC4, 0x4CA8, 0xBC, 0xF7, 0x77, 0xB, 0xFF, 0x9B, 0x27, 0xAB);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElement2> { define_guid(0xA8076AA8, 0xF892, 0x49F6, 0x8C, 0xD2, 0x89, 0xAD, 0xDA, 0xF0, 0x6D, 0x2D);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElementOverrides> { define_guid(0xCE21EE7, 0x4F76, 0x4DD9, 0xBF, 0x91, 0x16, 0x3B, 0xEC, 0xCF, 0x84, 0xBC);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextElement> { define_guid(0xE83B0062, 0xD776, 0x4F92, 0xBA, 0xEA, 0x40, 0xE7, 0x7D, 0x47, 0x91, 0xD5);};
template<> struct uuid<Windows::UI::Xaml::Documents::IInlineFactory> { define_guid(0x4058ACD1, 0x2F90, 0x4B8F, 0x99, 0xDD, 0x42, 0x18, 0xEF, 0x5F, 0x3, 0xDE);};
template<> struct uuid<Windows::UI::Xaml::Documents::IInline> { define_guid(0xC92712D, 0x1BC9, 0x4931, 0x8C, 0xB1, 0x1A, 0xEA, 0xDF, 0x1C, 0xC6, 0x85);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextHighlighter> { define_guid(0xBA6CB54B, 0x7D75, 0x4535, 0xB3, 0xD, 0xA8, 0x1A, 0x0, 0xB6, 0x37, 0xA4);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextHighlighterStatics> { define_guid(0xB3B009C4, 0x3A7E, 0x49CC, 0xAB, 0x84, 0x29, 0xC4, 0x5, 0x48, 0x87, 0x65);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextHighlighterFactory> { define_guid(0x70125461, 0x9A8F, 0x4FA0, 0xB2, 0x35, 0x8F, 0xFA, 0xA5, 0x7, 0xBE, 0xF2);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextPointer> { define_guid(0xAC687AA1, 0x6A41, 0x43FF, 0x85, 0x1E, 0x45, 0x34, 0x8A, 0xA2, 0xCF, 0x7B);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITypography> { define_guid(0x866F65D5, 0xEA97, 0x42AB, 0x92, 0x88, 0x9C, 0x1, 0xAE, 0xBC, 0x7A, 0x97);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITypographyStatics> { define_guid(0x67B9EC88, 0x6C57, 0x4CE0, 0x95, 0xF1, 0xD4, 0xB9, 0xED, 0x63, 0x2F, 0xB4);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextHighlighterBase> { define_guid(0xD957601A, 0x5F0D, 0x4CDF, 0x97, 0x58, 0x97, 0xE0, 0xEB, 0x95, 0xC8, 0xFA);};
template<> struct uuid<Windows::UI::Xaml::Documents::ITextHighlighterBaseFactory> { define_guid(0x9592B2D0, 0xEADC, 0x4C74, 0x92, 0xC8, 0x6E, 0x89, 0x6E, 0x22, 0x50, 0x6D);};
template<> struct uuid<Windows::UI::Xaml::Documents::IInlineUIContainer> { define_guid(0x1416CE81, 0x28EE, 0x452E, 0xB1, 0x21, 0x5F, 0xC4, 0xF6, 0xB, 0x86, 0xA6);};
template<> struct uuid<Windows::UI::Xaml::Documents::ILineBreak> { define_guid(0x645589C4, 0xF769, 0x41ED, 0x89, 0x5B, 0x8A, 0x1B, 0x2F, 0xB3, 0x15, 0x62);};
template<> struct uuid<Windows::UI::Xaml::Documents::IParagraph> { define_guid(0xF83EF59A, 0xFA61, 0x4BEF, 0xAE, 0x33, 0xB, 0xA, 0xD7, 0x56, 0xA8, 0x4D);};
template<> struct uuid<Windows::UI::Xaml::Documents::IParagraphStatics> { define_guid(0xEF08889A, 0x535B, 0x4E4C, 0x8D, 0x84, 0x28, 0x3B, 0x33, 0xE9, 0x8A, 0x37);};
template<> struct uuid<Windows::UI::Xaml::Documents::IRun> { define_guid(0x59553C83, 0xE14, 0x49BD, 0xB8, 0x4B, 0xC5, 0x26, 0xF3, 0x3, 0x43, 0x49);};
template<> struct uuid<Windows::UI::Xaml::Documents::IRunStatics> { define_guid(0xE9303CEF, 0x65A0, 0x4B8D, 0xA7, 0xF7, 0x8F, 0xDB, 0x28, 0x7B, 0x46, 0xF3);};
template<> struct uuid<Windows::UI::Xaml::Documents::ISpan> { define_guid(0x9839D4A9, 0x2AF, 0x4811, 0xAA, 0x15, 0x6B, 0xEF, 0x3A, 0xCA, 0xC9, 0x7A);};
template<> struct uuid<Windows::UI::Xaml::Documents::ISpanFactory> { define_guid(0x5B916F5C, 0xCD2D, 0x40C0, 0x95, 0x6A, 0x38, 0x64, 0x48, 0x32, 0x2F, 0x79);};
template<> struct uuid<Windows::UI::Xaml::Documents::IBold> { define_guid(0xADE73784, 0x1B59, 0x4DA4, 0xBB, 0x23, 0xF, 0x20, 0xE8, 0x85, 0xB4, 0xBF);};
template<> struct uuid<Windows::UI::Xaml::Documents::IItalic> { define_guid(0x91F4619C, 0xFCBB, 0x4157, 0x80, 0x2C, 0x76, 0xF6, 0x3B, 0x5F, 0xB6, 0x57);};
template<> struct uuid<Windows::UI::Xaml::Documents::IUnderline> { define_guid(0xA5FA8202, 0x61C0, 0x47D7, 0x93, 0xEF, 0xBC, 0xB, 0x57, 0x7C, 0x5F, 0x26);};
template<> struct uuid<Windows::UI::Xaml::Documents::IContentLinkInvokedEventArgs> { define_guid(0x546717C1, 0xE8DF, 0x4593, 0x96, 0x39, 0x97, 0x59, 0x5F, 0xDF, 0x83, 0x10);};
template<> struct uuid<Windows::UI::Xaml::Documents::IContentLinkProviderFactory> { define_guid(0x57D60D3B, 0xEF1A, 0x4E8E, 0x83, 0x9B, 0xD3, 0x6E, 0xF3, 0xA5, 0x3, 0xE0);};
template<> struct uuid<Windows::UI::Xaml::Documents::IContentLinkProvider> { define_guid(0x730587FD, 0xBFDC, 0x4CB3, 0x90, 0x4D, 0xB6, 0x5A, 0xB3, 0x39, 0xBB, 0xF5);};
template<> struct uuid<Windows::UI::Xaml::Documents::IContentLinkProviderCollection> { define_guid(0xF5B84D0C, 0xA9F4, 0x4D1A, 0xA1, 0x3C, 0x10, 0xDE, 0xF1, 0x84, 0x37, 0x34);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlinkClickEventArgs> { define_guid(0xC755916B, 0x7BDC, 0x4BE7, 0xB3, 0x73, 0x92, 0x40, 0xA5, 0x3, 0xD8, 0x70);};
template<> struct uuid<Windows::UI::Xaml::Documents::IContactContentLinkProvider> { define_guid(0xF92FD29B, 0x589B, 0x4ABD, 0x9D, 0x37, 0x35, 0xA1, 0x46, 0x8F, 0x2, 0x1E);};
template<> struct uuid<Windows::UI::Xaml::Documents::IPlaceContentLinkProvider> { define_guid(0x10348A4C, 0x2366, 0x41BE, 0x90, 0xC8, 0x32, 0x58, 0xB5, 0x3B, 0x54, 0x83);};
template<> struct uuid<Windows::UI::Xaml::Documents::IContentLink> { define_guid(0x6C60C3E1, 0x528C, 0x42F8, 0x92, 0xBE, 0x34, 0xB8, 0xC6, 0x8B, 0xE3, 0x4);};
template<> struct uuid<Windows::UI::Xaml::Documents::IContentLinkStatics> { define_guid(0xA34E3063, 0xEB16, 0x484E, 0xA3, 0xDF, 0x52, 0x2B, 0x9A, 0x83, 0x2E, 0x6E);};
template<> struct uuid<Windows::UI::Xaml::Documents::IGlyphs> { define_guid(0xD079498B, 0xF2B1, 0x4281, 0x99, 0xA2, 0xE4, 0xD0, 0x59, 0x32, 0xB2, 0xB5);};
template<> struct uuid<Windows::UI::Xaml::Documents::IGlyphsStatics> { define_guid(0x225CF4C5, 0xFDF1, 0x43ED, 0x95, 0x8F, 0x41, 0x4E, 0x86, 0xF1, 0x3, 0xF2);};
template<> struct uuid<Windows::UI::Xaml::Documents::IGlyphs2> { define_guid(0xAA8BFE5C, 0x3754, 0x4BEE, 0xBB, 0xE1, 0x44, 0x3, 0xEE, 0x9B, 0x86, 0xF0);};
template<> struct uuid<Windows::UI::Xaml::Documents::IGlyphsStatics2> { define_guid(0x10489AA7, 0x1615, 0x4A33, 0xAA, 0x2, 0xD7, 0xEF, 0x2A, 0xEF, 0xC7, 0x39);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlink> { define_guid(0xFE2363B, 0x14E9, 0x4152, 0x9E, 0x58, 0x5A, 0xEA, 0x5B, 0x21, 0xF0, 0x8D);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlinkStatics> { define_guid(0x3A44D3D4, 0xFD41, 0x41DB, 0x8C, 0x72, 0x3B, 0x79, 0xA, 0xCD, 0x9F, 0xD3);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlink2> { define_guid(0x4CE9DA5F, 0x7CFF, 0x4291, 0xB7, 0x8F, 0xDF, 0xEC, 0x72, 0x49, 0x5, 0x76);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlinkStatics2> { define_guid(0x5028D8B7, 0x7ADF, 0x43EE, 0xA4, 0xAE, 0x9C, 0x92, 0x5F, 0x75, 0x57, 0x16);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlink3> { define_guid(0xC3F157D9, 0xE5D3, 0x4FB7, 0x87, 0x2, 0x4F, 0x6D, 0x85, 0xDD, 0x9E, 0xA);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlinkStatics3> { define_guid(0x3E15DEA0, 0x205E, 0x4947, 0x99, 0xA5, 0x74, 0xE7, 0x57, 0xE8, 0xE1, 0xB4);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlink4> { define_guid(0xF7D02959, 0x82FB, 0x400A, 0xA4, 0x7, 0x5A, 0x4E, 0xE6, 0x77, 0x98, 0x8A);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlinkStatics4> { define_guid(0x476B378, 0x8FAA, 0x4E24, 0xB3, 0xB6, 0xE9, 0xDE, 0x4D, 0x3C, 0x70, 0x8C);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlink5> { define_guid(0x607DD7D2, 0x945, 0x4328, 0x91, 0xEE, 0x94, 0xCC, 0xEC, 0x2E, 0xA6, 0xC3);};
template<> struct uuid<Windows::UI::Xaml::Documents::IHyperlinkStatics5> { define_guid(0x59308CEA, 0x1E49, 0x4921, 0xBD, 0x88, 0xA2, 0x87, 0x8D, 0x7, 0xE3, 0xE);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Documents {

// IBlockStatics2
struct IBlockStatics2 : IInspectable {
	virtual STDMETHODIMP _get_HorizontalTextAlignmentProperty(DependencyProperty* *value);
};

// IBlockFactory
struct IBlockFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, Block* *instance);
};

// IBlockStatics
struct IBlockStatics : IInspectable {
	virtual STDMETHODIMP _get_TextAlignmentProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_LineHeightProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_LineStackingStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_MarginProperty(DependencyProperty* *value);
};

// IBlock2
struct IBlock2_raw : IInspectable {
	virtual STDMETHODIMP _get_HorizontalTextAlignment(TextAlignment *value);
	virtual STDMETHODIMP _put_HorizontalTextAlignment(TextAlignment value);
};
template<typename X> struct IBlock2_adaptor : X {
	union {
		struct : property {
			TextAlignment get() { TextAlignment value; hrcheck(enc(&IBlock2_adaptor::HorizontalTextAlignment)->_get_HorizontalTextAlignment(&value)); return value; }
			TextAlignment operator()() { return get(); }
			operator TextAlignment () { return get(); }
			void put(TextAlignment value) { hrcheck(enc(&IBlock2_adaptor::HorizontalTextAlignment)->_put_HorizontalTextAlignment(value)); }
			void operator=(TextAlignment value) { put(value); }
			void operator()(TextAlignment value) { put(value); }
		} HorizontalTextAlignment;
	};
	IBlock2_adaptor() {}
};
template<typename X> struct adapt<IBlock2, X> : Windows::UI::Xaml::Documents::IBlock2_adaptor<X> { typedef adapt IBlock2; };
struct IBlock2 : IBlock2_raw, generate<IBlock2> {};

// IBlock
struct IBlock_raw : IInspectable {
	virtual STDMETHODIMP _get_TextAlignment(Xaml::TextAlignment *value);
	virtual STDMETHODIMP _put_TextAlignment(Xaml::TextAlignment value);
	virtual STDMETHODIMP _get_LineHeight(double *value);
	virtual STDMETHODIMP _put_LineHeight(double value);
	virtual STDMETHODIMP _get_LineStackingStrategy(Xaml::LineStackingStrategy *value);
	virtual STDMETHODIMP _put_LineStackingStrategy(Xaml::LineStackingStrategy value);
	virtual STDMETHODIMP _get_Margin(Thickness *value);
	virtual STDMETHODIMP _put_Margin(Thickness value);
};
template<typename X> struct IBlock_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IBlock_adaptor::LineHeight)->_get_LineHeight(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IBlock_adaptor::LineHeight)->_put_LineHeight(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} LineHeight;
		struct : property {
			Xaml::LineStackingStrategy get() { Xaml::LineStackingStrategy value; hrcheck(enc(&IBlock_adaptor::LineStackingStrategy)->_get_LineStackingStrategy(&value)); return value; }
			Xaml::LineStackingStrategy operator()() { return get(); }
			operator Xaml::LineStackingStrategy () { return get(); }
			void put(Xaml::LineStackingStrategy value) { hrcheck(enc(&IBlock_adaptor::LineStackingStrategy)->_put_LineStackingStrategy(value)); }
			void operator=(Xaml::LineStackingStrategy value) { put(value); }
			void operator()(Xaml::LineStackingStrategy value) { put(value); }
		} LineStackingStrategy;
		struct : property {
			Thickness get() { Thickness value; hrcheck(enc(&IBlock_adaptor::Margin)->_get_Margin(&value)); return value; }
			Thickness operator()() { return get(); }
			operator Thickness () { return get(); }
			void put(const Thickness& value) { hrcheck(enc(&IBlock_adaptor::Margin)->_put_Margin(value)); }
			void operator=(const Thickness& value) { put(value); }
			void operator()(const Thickness& value) { put(value); }
		} Margin;
		struct : property {
			Xaml::TextAlignment get() { Xaml::TextAlignment value; hrcheck(enc(&IBlock_adaptor::TextAlignment)->_get_TextAlignment(&value)); return value; }
			Xaml::TextAlignment operator()() { return get(); }
			operator Xaml::TextAlignment () { return get(); }
			void put(Xaml::TextAlignment value) { hrcheck(enc(&IBlock_adaptor::TextAlignment)->_put_TextAlignment(value)); }
			void operator=(Xaml::TextAlignment value) { put(value); }
			void operator()(Xaml::TextAlignment value) { put(value); }
		} TextAlignment;
	};
	IBlock_adaptor() {}
};
template<typename X> struct adapt<IBlock, X> : Windows::UI::Xaml::Documents::IBlock_adaptor<X> { typedef adapt IBlock; };
struct IBlock : IBlock_raw, generate<IBlock> {};

// ITextElementStatics4
struct ITextElementStatics4 : IInspectable {
	virtual STDMETHODIMP _get_TextDecorationsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_IsAccessKeyScopeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_AccessKeyScopeOwnerProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_KeyTipPlacementModeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_KeyTipHorizontalOffsetProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_KeyTipVerticalOffsetProperty(DependencyProperty* *value);
};

// ITextElementStatics3
struct ITextElementStatics3 : IInspectable {
	virtual STDMETHODIMP _get_AllowFocusOnInteractionProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_AccessKeyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ExitDisplayModeOnAccessKeyInvokedProperty(DependencyProperty* *value);
};

// ITextElementStatics2
struct ITextElementStatics2 : IInspectable {
	virtual STDMETHODIMP _get_IsTextScaleFactorEnabledProperty(DependencyProperty* *value);
};

// ITextElementFactory
struct ITextElementFactory : IInspectable, generate<ITextElementFactory> {};

// ITextElementStatics
struct ITextElementStatics : IInspectable {
	virtual STDMETHODIMP _get_FontSizeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FontFamilyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FontWeightProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FontStyleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FontStretchProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_CharacterSpacingProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ForegroundProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_LanguageProperty(DependencyProperty* *value);
};

// ITextElement4
struct ITextElement4_raw : IInspectable {
	virtual STDMETHODIMP _get_TextDecorations(Text::TextDecorations *value);
	virtual STDMETHODIMP _put_TextDecorations(Text::TextDecorations value);
	virtual STDMETHODIMP _get_IsAccessKeyScope(bool *value);
	virtual STDMETHODIMP _put_IsAccessKeyScope(bool value);
	virtual STDMETHODIMP _get_AccessKeyScopeOwner(DependencyObject* *value);
	virtual STDMETHODIMP _put_AccessKeyScopeOwner(DependencyObject* value);
	virtual STDMETHODIMP _get_KeyTipPlacementMode(Input::KeyTipPlacementMode *value);
	virtual STDMETHODIMP _put_KeyTipPlacementMode(Input::KeyTipPlacementMode value);
	virtual STDMETHODIMP _get_KeyTipHorizontalOffset(double *value);
	virtual STDMETHODIMP _put_KeyTipHorizontalOffset(double value);
	virtual STDMETHODIMP _get_KeyTipVerticalOffset(double *value);
	virtual STDMETHODIMP _put_KeyTipVerticalOffset(double value);
	virtual STDMETHODIMP _add_AccessKeyDisplayRequested(Foundation::TypedEventHandler<TextElement*, Input::AccessKeyDisplayRequestedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AccessKeyDisplayRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AccessKeyDisplayDismissed(Foundation::TypedEventHandler<TextElement*, Input::AccessKeyDisplayDismissedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AccessKeyDisplayDismissed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AccessKeyInvoked(Foundation::TypedEventHandler<TextElement*, Input::AccessKeyInvokedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AccessKeyInvoked(Foundation::EventRegistrationToken token);
};
template<typename X> struct ITextElement4_adaptor : X {
	union {
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&ITextElement4_adaptor::AccessKeyScopeOwner)->_get_AccessKeyScopeOwner(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&ITextElement4_adaptor::AccessKeyScopeOwner)->_put_AccessKeyScopeOwner(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} AccessKeyScopeOwner;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITextElement4_adaptor::IsAccessKeyScope)->_get_IsAccessKeyScope(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ITextElement4_adaptor::IsAccessKeyScope)->_put_IsAccessKeyScope(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAccessKeyScope;
		struct : property {
			double get() { double value; hrcheck(enc(&ITextElement4_adaptor::KeyTipHorizontalOffset)->_get_KeyTipHorizontalOffset(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ITextElement4_adaptor::KeyTipHorizontalOffset)->_put_KeyTipHorizontalOffset(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} KeyTipHorizontalOffset;
		struct : property {
			Input::KeyTipPlacementMode get() { Input::KeyTipPlacementMode value; hrcheck(enc(&ITextElement4_adaptor::KeyTipPlacementMode)->_get_KeyTipPlacementMode(&value)); return value; }
			Input::KeyTipPlacementMode operator()() { return get(); }
			operator Input::KeyTipPlacementMode () { return get(); }
			void put(Input::KeyTipPlacementMode value) { hrcheck(enc(&ITextElement4_adaptor::KeyTipPlacementMode)->_put_KeyTipPlacementMode(value)); }
			void operator=(Input::KeyTipPlacementMode value) { put(value); }
			void operator()(Input::KeyTipPlacementMode value) { put(value); }
		} KeyTipPlacementMode;
		struct : property {
			double get() { double value; hrcheck(enc(&ITextElement4_adaptor::KeyTipVerticalOffset)->_get_KeyTipVerticalOffset(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ITextElement4_adaptor::KeyTipVerticalOffset)->_put_KeyTipVerticalOffset(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} KeyTipVerticalOffset;
		struct : property {
			Text::TextDecorations get() { Text::TextDecorations value; hrcheck(enc(&ITextElement4_adaptor::TextDecorations)->_get_TextDecorations(&value)); return value; }
			Text::TextDecorations operator()() { return get(); }
			operator Text::TextDecorations () { return get(); }
			void put(Text::TextDecorations value) { hrcheck(enc(&ITextElement4_adaptor::TextDecorations)->_put_TextDecorations(value)); }
			void operator=(Text::TextDecorations value) { put(value); }
			void operator()(Text::TextDecorations value) { put(value); }
		} TextDecorations;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<TextElement>, ptr<Input::AccessKeyDisplayDismissedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&ITextElement4_adaptor::AccessKeyDisplayDismissed)->_add_AccessKeyDisplayDismissed(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ITextElement4_adaptor::AccessKeyDisplayDismissed)->_remove_AccessKeyDisplayDismissed(token)); }
		} AccessKeyDisplayDismissed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<TextElement>, ptr<Input::AccessKeyDisplayRequestedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&ITextElement4_adaptor::AccessKeyDisplayRequested)->_add_AccessKeyDisplayRequested(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ITextElement4_adaptor::AccessKeyDisplayRequested)->_remove_AccessKeyDisplayRequested(token)); }
		} AccessKeyDisplayRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<TextElement>, ptr<Input::AccessKeyInvokedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&ITextElement4_adaptor::AccessKeyInvoked)->_add_AccessKeyInvoked(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ITextElement4_adaptor::AccessKeyInvoked)->_remove_AccessKeyInvoked(token)); }
		} AccessKeyInvoked;
	};
	ITextElement4_adaptor() {}
};
template<typename X> struct adapt<ITextElement4, X> : Windows::UI::Xaml::Documents::ITextElement4_adaptor<X> { typedef adapt ITextElement4; };
struct ITextElement4 : ITextElement4_raw, generate<ITextElement4> {};

// ITextElement3
struct ITextElement3_raw : IInspectable {
	virtual STDMETHODIMP _get_AllowFocusOnInteraction(bool *value);
	virtual STDMETHODIMP _put_AllowFocusOnInteraction(bool value);
	virtual STDMETHODIMP _get_AccessKey(HSTRING *value);
	virtual STDMETHODIMP _put_AccessKey(HSTRING value);
	virtual STDMETHODIMP _get_ExitDisplayModeOnAccessKeyInvoked(bool *value);
	virtual STDMETHODIMP _put_ExitDisplayModeOnAccessKeyInvoked(bool value);
};
template<typename X> struct ITextElement3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITextElement3_adaptor::AccessKey)->_get_AccessKey(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ITextElement3_adaptor::AccessKey)->_put_AccessKey(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AccessKey;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITextElement3_adaptor::AllowFocusOnInteraction)->_get_AllowFocusOnInteraction(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ITextElement3_adaptor::AllowFocusOnInteraction)->_put_AllowFocusOnInteraction(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowFocusOnInteraction;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITextElement3_adaptor::ExitDisplayModeOnAccessKeyInvoked)->_get_ExitDisplayModeOnAccessKeyInvoked(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ITextElement3_adaptor::ExitDisplayModeOnAccessKeyInvoked)->_put_ExitDisplayModeOnAccessKeyInvoked(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ExitDisplayModeOnAccessKeyInvoked;
	};
	ITextElement3_adaptor() {}
};
template<typename X> struct adapt<ITextElement3, X> : Windows::UI::Xaml::Documents::ITextElement3_adaptor<X> { typedef adapt ITextElement3; };
struct ITextElement3 : ITextElement3_raw, generate<ITextElement3> {};

// ITextElement2
struct ITextElement2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTextScaleFactorEnabled(bool *value);
	virtual STDMETHODIMP _put_IsTextScaleFactorEnabled(bool value);
};
template<typename X> struct ITextElement2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITextElement2_adaptor::IsTextScaleFactorEnabled)->_get_IsTextScaleFactorEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ITextElement2_adaptor::IsTextScaleFactorEnabled)->_put_IsTextScaleFactorEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsTextScaleFactorEnabled;
	};
	ITextElement2_adaptor() {}
};
template<typename X> struct adapt<ITextElement2, X> : Windows::UI::Xaml::Documents::ITextElement2_adaptor<X> { typedef adapt ITextElement2; };
struct ITextElement2 : ITextElement2_raw, generate<ITextElement2> {};

// ITextElementOverrides
struct ITextElementOverrides_raw : IInspectable {
	virtual STDMETHODIMP _OnDisconnectVisualChildren() = 0;
};
template<typename X> struct ITextElementOverrides_adaptor : X {
	void OnDisconnectVisualChildren() { hrcheck(X::get()->_OnDisconnectVisualChildren()); }
};
template<typename X> struct adapt<ITextElementOverrides, X> : Windows::UI::Xaml::Documents::ITextElementOverrides_adaptor<X> { typedef adapt ITextElementOverrides; };
template<typename X> struct ITextElementOverrides_unadaptor : X {
	STDMETHODIMP _OnDisconnectVisualChildren() { return hrtry([&, this] { X::get()->OnDisconnectVisualChildren(); }); }
};
template<typename X> struct unadapt<ITextElementOverrides, X> : Windows::UI::Xaml::Documents::ITextElementOverrides_unadaptor<X> {};
struct ITextElementOverrides : ITextElementOverrides_raw, generate<ITextElementOverrides> {};

// ITextElement
struct ITextElement_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_FontSize(double *value);
	virtual STDMETHODIMP _put_FontSize(double value);
	virtual STDMETHODIMP _get_FontFamily(Media::FontFamily* *value);
	virtual STDMETHODIMP _put_FontFamily(Media::FontFamily* value);
	virtual STDMETHODIMP _get_FontWeight(Text::FontWeight *value);
	virtual STDMETHODIMP _put_FontWeight(Text::FontWeight value);
	virtual STDMETHODIMP _get_FontStyle(Text::FontStyle *value);
	virtual STDMETHODIMP _put_FontStyle(Text::FontStyle value);
	virtual STDMETHODIMP _get_FontStretch(Text::FontStretch *value);
	virtual STDMETHODIMP _put_FontStretch(Text::FontStretch value);
	virtual STDMETHODIMP _get_CharacterSpacing(int *value);
	virtual STDMETHODIMP _put_CharacterSpacing(int value);
	virtual STDMETHODIMP _get_Foreground(Media::Brush* *value);
	virtual STDMETHODIMP _put_Foreground(Media::Brush* value);
	virtual STDMETHODIMP _get_Language(HSTRING *value);
	virtual STDMETHODIMP _put_Language(HSTRING value);
	virtual STDMETHODIMP _get_ContentStart(TextPointer* *value);
	virtual STDMETHODIMP _get_ContentEnd(TextPointer* *value);
	virtual STDMETHODIMP _get_ElementStart(TextPointer* *value);
	virtual STDMETHODIMP _get_ElementEnd(TextPointer* *value);
	virtual STDMETHODIMP _FindName(HSTRING name, IInspectable* *returnValue);
};
template<typename X> struct ITextElement_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&ITextElement_adaptor::CharacterSpacing)->_get_CharacterSpacing(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ITextElement_adaptor::CharacterSpacing)->_put_CharacterSpacing(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} CharacterSpacing;
		struct : property {
			ptr<TextPointer> get() { TextPointer* value; hrcheck(enc(&ITextElement_adaptor::ContentEnd)->_get_ContentEnd(&value)); return from_abi(value); }
			ptr<TextPointer> operator()() { return get(); }
			operator ptr<TextPointer> () { return get(); }
			ptr<TextPointer> operator->() { return get(); }
		} ContentEnd;
		struct : property {
			ptr<TextPointer> get() { TextPointer* value; hrcheck(enc(&ITextElement_adaptor::ContentStart)->_get_ContentStart(&value)); return from_abi(value); }
			ptr<TextPointer> operator()() { return get(); }
			operator ptr<TextPointer> () { return get(); }
			ptr<TextPointer> operator->() { return get(); }
		} ContentStart;
		struct : property {
			ptr<TextPointer> get() { TextPointer* value; hrcheck(enc(&ITextElement_adaptor::ElementEnd)->_get_ElementEnd(&value)); return from_abi(value); }
			ptr<TextPointer> operator()() { return get(); }
			operator ptr<TextPointer> () { return get(); }
			ptr<TextPointer> operator->() { return get(); }
		} ElementEnd;
		struct : property {
			ptr<TextPointer> get() { TextPointer* value; hrcheck(enc(&ITextElement_adaptor::ElementStart)->_get_ElementStart(&value)); return from_abi(value); }
			ptr<TextPointer> operator()() { return get(); }
			operator ptr<TextPointer> () { return get(); }
			ptr<TextPointer> operator->() { return get(); }
		} ElementStart;
		struct : property {
			ptr<Media::FontFamily> get() { Media::FontFamily* value; hrcheck(enc(&ITextElement_adaptor::FontFamily)->_get_FontFamily(&value)); return from_abi(value); }
			ptr<Media::FontFamily> operator()() { return get(); }
			operator ptr<Media::FontFamily> () { return get(); }
			ptr<Media::FontFamily> operator->() { return get(); }
			void put(pptr<Media::FontFamily> value) { hrcheck(enc(&ITextElement_adaptor::FontFamily)->_put_FontFamily(value)); }
			void operator=(pptr<Media::FontFamily> value) { put(value); }
			void operator()(pptr<Media::FontFamily> value) { put(value); }
		} FontFamily;
		struct : property {
			double get() { double value; hrcheck(enc(&ITextElement_adaptor::FontSize)->_get_FontSize(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ITextElement_adaptor::FontSize)->_put_FontSize(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} FontSize;
		struct : property {
			Text::FontStretch get() { Text::FontStretch value; hrcheck(enc(&ITextElement_adaptor::FontStretch)->_get_FontStretch(&value)); return value; }
			Text::FontStretch operator()() { return get(); }
			operator Text::FontStretch () { return get(); }
			void put(Text::FontStretch value) { hrcheck(enc(&ITextElement_adaptor::FontStretch)->_put_FontStretch(value)); }
			void operator=(Text::FontStretch value) { put(value); }
			void operator()(Text::FontStretch value) { put(value); }
		} FontStretch;
		struct : property {
			Text::FontStyle get() { Text::FontStyle value; hrcheck(enc(&ITextElement_adaptor::FontStyle)->_get_FontStyle(&value)); return value; }
			Text::FontStyle operator()() { return get(); }
			operator Text::FontStyle () { return get(); }
			void put(Text::FontStyle value) { hrcheck(enc(&ITextElement_adaptor::FontStyle)->_put_FontStyle(value)); }
			void operator=(Text::FontStyle value) { put(value); }
			void operator()(Text::FontStyle value) { put(value); }
		} FontStyle;
		struct : property {
			Text::FontWeight get() { Text::FontWeight value; hrcheck(enc(&ITextElement_adaptor::FontWeight)->_get_FontWeight(&value)); return value; }
			Text::FontWeight operator()() { return get(); }
			operator Text::FontWeight () { return get(); }
			void put(const Text::FontWeight& value) { hrcheck(enc(&ITextElement_adaptor::FontWeight)->_put_FontWeight(value)); }
			void operator=(const Text::FontWeight& value) { put(value); }
			void operator()(const Text::FontWeight& value) { put(value); }
		} FontWeight;
		struct : property {
			ptr<Media::Brush> get() { Media::Brush* value; hrcheck(enc(&ITextElement_adaptor::Foreground)->_get_Foreground(&value)); return from_abi(value); }
			ptr<Media::Brush> operator()() { return get(); }
			operator ptr<Media::Brush> () { return get(); }
			ptr<Media::Brush> operator->() { return get(); }
			void put(pptr<Media::Brush> value) { hrcheck(enc(&ITextElement_adaptor::Foreground)->_put_Foreground(value)); }
			void operator=(pptr<Media::Brush> value) { put(value); }
			void operator()(pptr<Media::Brush> value) { put(value); }
		} Foreground;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITextElement_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ITextElement_adaptor::Language)->_put_Language(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITextElement_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	object FindName(hstring_ref name) { IInspectable* returnValue; hrcheck(X::get()->_FindName(name, &returnValue)); return from_abi(returnValue); }
	ITextElement_adaptor() {}
};
template<typename X> struct adapt<ITextElement, X> : Windows::UI::Xaml::Documents::ITextElement_adaptor<X> { typedef adapt ITextElement; };
struct ITextElement : ITextElement_raw, generate<ITextElement> {};

// TextElement
template<typename> struct TextElement_statics {
	static struct _CharacterSpacingProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_CharacterSpacingProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CharacterSpacingProperty;
	static struct _FontFamilyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_FontFamilyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FontFamilyProperty;
	static struct _FontSizeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_FontSizeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FontSizeProperty;
	static struct _FontStretchProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_FontStretchProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FontStretchProperty;
	static struct _FontStyleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_FontStyleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FontStyleProperty;
	static struct _FontWeightProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_FontWeightProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FontWeightProperty;
	static struct _ForegroundProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_ForegroundProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ForegroundProperty;
	static struct _LanguageProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics>()->_get_LanguageProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LanguageProperty;
	static struct _IsTextScaleFactorEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics2>()->_get_IsTextScaleFactorEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsTextScaleFactorEnabledProperty;
	static struct _AccessKeyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics3>()->_get_AccessKeyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AccessKeyProperty;
	static struct _AllowFocusOnInteractionProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics3>()->_get_AllowFocusOnInteractionProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AllowFocusOnInteractionProperty;
	static struct _ExitDisplayModeOnAccessKeyInvokedProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics3>()->_get_ExitDisplayModeOnAccessKeyInvokedProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ExitDisplayModeOnAccessKeyInvokedProperty;
	static struct _AccessKeyScopeOwnerProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics4>()->_get_AccessKeyScopeOwnerProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AccessKeyScopeOwnerProperty;
	static struct _IsAccessKeyScopeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics4>()->_get_IsAccessKeyScopeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsAccessKeyScopeProperty;
	static struct _KeyTipHorizontalOffsetProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics4>()->_get_KeyTipHorizontalOffsetProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} KeyTipHorizontalOffsetProperty;
	static struct _KeyTipPlacementModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics4>()->_get_KeyTipPlacementModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} KeyTipPlacementModeProperty;
	static struct _KeyTipVerticalOffsetProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics4>()->_get_KeyTipVerticalOffsetProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} KeyTipVerticalOffsetProperty;
	static struct _TextDecorationsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextElement, ITextElementStatics4>()->_get_TextDecorationsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TextDecorationsProperty;
};
template<typename X> typename TextElement_statics<X>::_CharacterSpacingProperty TextElement_statics<X>::CharacterSpacingProperty;
template<typename X> typename TextElement_statics<X>::_FontFamilyProperty TextElement_statics<X>::FontFamilyProperty;
template<typename X> typename TextElement_statics<X>::_FontSizeProperty TextElement_statics<X>::FontSizeProperty;
template<typename X> typename TextElement_statics<X>::_FontStretchProperty TextElement_statics<X>::FontStretchProperty;
template<typename X> typename TextElement_statics<X>::_FontStyleProperty TextElement_statics<X>::FontStyleProperty;
template<typename X> typename TextElement_statics<X>::_FontWeightProperty TextElement_statics<X>::FontWeightProperty;
template<typename X> typename TextElement_statics<X>::_ForegroundProperty TextElement_statics<X>::ForegroundProperty;
template<typename X> typename TextElement_statics<X>::_LanguageProperty TextElement_statics<X>::LanguageProperty;
template<typename X> typename TextElement_statics<X>::_IsTextScaleFactorEnabledProperty TextElement_statics<X>::IsTextScaleFactorEnabledProperty;
template<typename X> typename TextElement_statics<X>::_AccessKeyProperty TextElement_statics<X>::AccessKeyProperty;
template<typename X> typename TextElement_statics<X>::_AllowFocusOnInteractionProperty TextElement_statics<X>::AllowFocusOnInteractionProperty;
template<typename X> typename TextElement_statics<X>::_ExitDisplayModeOnAccessKeyInvokedProperty TextElement_statics<X>::ExitDisplayModeOnAccessKeyInvokedProperty;
template<typename X> typename TextElement_statics<X>::_AccessKeyScopeOwnerProperty TextElement_statics<X>::AccessKeyScopeOwnerProperty;
template<typename X> typename TextElement_statics<X>::_IsAccessKeyScopeProperty TextElement_statics<X>::IsAccessKeyScopeProperty;
template<typename X> typename TextElement_statics<X>::_KeyTipHorizontalOffsetProperty TextElement_statics<X>::KeyTipHorizontalOffsetProperty;
template<typename X> typename TextElement_statics<X>::_KeyTipPlacementModeProperty TextElement_statics<X>::KeyTipPlacementModeProperty;
template<typename X> typename TextElement_statics<X>::_KeyTipVerticalOffsetProperty TextElement_statics<X>::KeyTipVerticalOffsetProperty;
template<typename X> typename TextElement_statics<X>::_TextDecorationsProperty TextElement_statics<X>::TextDecorationsProperty;

template<typename X> struct statics<TextElement, X> : X, Windows::UI::Xaml::Documents::TextElement_statics<void> {
	typedef typename X::root_type TextElement;
};
struct TextElement : generate<TextElement> {};

// Block
template<typename> struct Block_statics {
	static struct _LineHeightProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Block, IBlockStatics>()->_get_LineHeightProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LineHeightProperty;
	static struct _LineStackingStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Block, IBlockStatics>()->_get_LineStackingStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LineStackingStrategyProperty;
	static struct _MarginProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Block, IBlockStatics>()->_get_MarginProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MarginProperty;
	static struct _TextAlignmentProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Block, IBlockStatics>()->_get_TextAlignmentProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TextAlignmentProperty;
	static struct _HorizontalTextAlignmentProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Block, IBlockStatics2>()->_get_HorizontalTextAlignmentProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} HorizontalTextAlignmentProperty;
};
template<typename X> typename Block_statics<X>::_LineHeightProperty Block_statics<X>::LineHeightProperty;
template<typename X> typename Block_statics<X>::_LineStackingStrategyProperty Block_statics<X>::LineStackingStrategyProperty;
template<typename X> typename Block_statics<X>::_MarginProperty Block_statics<X>::MarginProperty;
template<typename X> typename Block_statics<X>::_TextAlignmentProperty Block_statics<X>::TextAlignmentProperty;
template<typename X> typename Block_statics<X>::_HorizontalTextAlignmentProperty Block_statics<X>::HorizontalTextAlignmentProperty;

template<typename X> struct statics<Block, X> : X, Windows::UI::Xaml::Documents::Block_statics<void> {
	typedef typename X::root_type Block;
};
struct Block : generate<Block> {};

// BlockCollection
template<typename X> struct statics<BlockCollection, X> : X {
	typedef typename X::root_type BlockCollection;
};
struct BlockCollection : generate<BlockCollection> {};

// IInlineFactory
struct IInlineFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, Inline* *instance);
};

// IInline
struct IInline : IInspectable, generate<IInline> {};

// Inline
template<typename X> struct statics<Inline, X> : X {
	typedef typename X::root_type Inline;
};
struct Inline : generate<Inline> {};

// InlineCollection
template<typename X> struct statics<InlineCollection, X> : X {
	typedef typename X::root_type InlineCollection;
};
struct InlineCollection : generate<InlineCollection> {};

// ITextHighlighter
struct ITextHighlighter_raw : IInspectable {
	virtual STDMETHODIMP _get_Ranges(Foundation::Collections::IVector<TextRange>* *value);
	virtual STDMETHODIMP _get_Foreground(Media::Brush* *value);
	virtual STDMETHODIMP _put_Foreground(Media::Brush* value);
	virtual STDMETHODIMP _get_Background(Media::Brush* *value);
	virtual STDMETHODIMP _put_Background(Media::Brush* value);
};
template<typename X> struct ITextHighlighter_adaptor : X {
	union {
		struct : property {
			ptr<Media::Brush> get() { Media::Brush* value; hrcheck(enc(&ITextHighlighter_adaptor::Background)->_get_Background(&value)); return from_abi(value); }
			ptr<Media::Brush> operator()() { return get(); }
			operator ptr<Media::Brush> () { return get(); }
			ptr<Media::Brush> operator->() { return get(); }
			void put(pptr<Media::Brush> value) { hrcheck(enc(&ITextHighlighter_adaptor::Background)->_put_Background(value)); }
			void operator=(pptr<Media::Brush> value) { put(value); }
			void operator()(pptr<Media::Brush> value) { put(value); }
		} Background;
		struct : property {
			ptr<Media::Brush> get() { Media::Brush* value; hrcheck(enc(&ITextHighlighter_adaptor::Foreground)->_get_Foreground(&value)); return from_abi(value); }
			ptr<Media::Brush> operator()() { return get(); }
			operator ptr<Media::Brush> () { return get(); }
			ptr<Media::Brush> operator->() { return get(); }
			void put(pptr<Media::Brush> value) { hrcheck(enc(&ITextHighlighter_adaptor::Foreground)->_put_Foreground(value)); }
			void operator=(pptr<Media::Brush> value) { put(value); }
			void operator()(pptr<Media::Brush> value) { put(value); }
		} Foreground;
		struct : property {
			ptr<Foundation::Collections::IVector<TextRange>> get() { Foundation::Collections::IVector<TextRange>* value; hrcheck(enc(&ITextHighlighter_adaptor::Ranges)->_get_Ranges(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<TextRange>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<TextRange>> () { return get(); }
			ptr<Foundation::Collections::IVector<TextRange>> operator->() { return get(); }
		} Ranges;
	};
	ITextHighlighter_adaptor() {}
};
template<typename X> struct adapt<ITextHighlighter, X> : Windows::UI::Xaml::Documents::ITextHighlighter_adaptor<X> { typedef adapt ITextHighlighter; };
struct ITextHighlighter : ITextHighlighter_raw, generate<ITextHighlighter> {};

// ITextHighlighterStatics
struct ITextHighlighterStatics : IInspectable {
	virtual STDMETHODIMP _get_ForegroundProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_BackgroundProperty(DependencyProperty* *value);
};

// ITextHighlighterFactory
struct ITextHighlighterFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, TextHighlighter* *instance);
};

// TextHighlighter
template<typename> struct TextHighlighter_statics {
	static struct _BackgroundProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextHighlighter, ITextHighlighterStatics>()->_get_BackgroundProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} BackgroundProperty;
	static struct _ForegroundProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<TextHighlighter, ITextHighlighterStatics>()->_get_ForegroundProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ForegroundProperty;
	static TextHighlighter *activate(object_ref outer, IInspectable* *inner) { TextHighlighter *instance; hrcheck(get_activation_factory<TextHighlighter, ITextHighlighterFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};
template<typename X> typename TextHighlighter_statics<X>::_BackgroundProperty TextHighlighter_statics<X>::BackgroundProperty;
template<typename X> typename TextHighlighter_statics<X>::_ForegroundProperty TextHighlighter_statics<X>::ForegroundProperty;

template<typename X> struct statics<TextHighlighter, X> : X, Windows::UI::Xaml::Documents::TextHighlighter_statics<void> {
	using Windows::UI::Xaml::Documents::TextHighlighter_statics<void>::activate;
	typedef typename X::root_type TextHighlighter;
};
struct TextHighlighter : generate<TextHighlighter> {};

// ITextPointer
struct ITextPointer_raw : IInspectable {
	virtual STDMETHODIMP _get_Parent(DependencyObject* *value);
	virtual STDMETHODIMP _get_VisualParent(FrameworkElement* *value);
	virtual STDMETHODIMP _get_LogicalDirection(Documents::LogicalDirection *value);
	virtual STDMETHODIMP _get_Offset(int *value);
	virtual STDMETHODIMP _GetCharacterRect(Documents::LogicalDirection direction, Foundation::Rect *returnValue);
	virtual STDMETHODIMP _GetPositionAtOffset(int offset, Documents::LogicalDirection direction, TextPointer* *returnValue);
};
template<typename X> struct ITextPointer_adaptor : X {
	union {
		struct : property {
			Documents::LogicalDirection get() { Documents::LogicalDirection value; hrcheck(enc(&ITextPointer_adaptor::LogicalDirection)->_get_LogicalDirection(&value)); return value; }
			Documents::LogicalDirection operator()() { return get(); }
			operator Documents::LogicalDirection () { return get(); }
		} LogicalDirection;
		struct : property {
			int get() { int value; hrcheck(enc(&ITextPointer_adaptor::Offset)->_get_Offset(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Offset;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&ITextPointer_adaptor::Parent)->_get_Parent(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
		} Parent;
		struct : property {
			ptr<FrameworkElement> get() { FrameworkElement* value; hrcheck(enc(&ITextPointer_adaptor::VisualParent)->_get_VisualParent(&value)); return from_abi(value); }
			ptr<FrameworkElement> operator()() { return get(); }
			operator ptr<FrameworkElement> () { return get(); }
			ptr<FrameworkElement> operator->() { return get(); }
		} VisualParent;
	};
	Foundation::Rect GetCharacterRect(Documents::LogicalDirection direction) { Foundation::Rect returnValue; hrcheck(X::get()->_GetCharacterRect(direction, &returnValue)); return returnValue; }
	ptr<TextPointer> GetPositionAtOffset(int offset, Documents::LogicalDirection direction) { TextPointer* returnValue; hrcheck(X::get()->_GetPositionAtOffset(offset, direction, &returnValue)); return from_abi(returnValue); }
	ITextPointer_adaptor() {}
};
template<typename X> struct adapt<ITextPointer, X> : Windows::UI::Xaml::Documents::ITextPointer_adaptor<X> { typedef adapt ITextPointer; };
struct ITextPointer : ITextPointer_raw, generate<ITextPointer> {};

// TextPointer
template<typename X> struct statics<TextPointer, X> : X {
	typedef typename X::root_type TextPointer;
};
struct TextPointer : generate<TextPointer> {};

// ITypography
struct ITypography : IInspectable, generate<ITypography> {};

// ITypographyStatics
struct ITypographyStatics : IInspectable {
	virtual STDMETHODIMP _get_AnnotationAlternatesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetAnnotationAlternates(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetAnnotationAlternates(DependencyObject* element, int value);
	virtual STDMETHODIMP _get_EastAsianExpertFormsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetEastAsianExpertForms(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetEastAsianExpertForms(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_EastAsianLanguageProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetEastAsianLanguage(DependencyObject* element, FontEastAsianLanguage *value);
	virtual STDMETHODIMP _SetEastAsianLanguage(DependencyObject* element, FontEastAsianLanguage value);
	virtual STDMETHODIMP _get_EastAsianWidthsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetEastAsianWidths(DependencyObject* element, FontEastAsianWidths *value);
	virtual STDMETHODIMP _SetEastAsianWidths(DependencyObject* element, FontEastAsianWidths value);
	virtual STDMETHODIMP _get_StandardLigaturesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStandardLigatures(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStandardLigatures(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_ContextualLigaturesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetContextualLigatures(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetContextualLigatures(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_DiscretionaryLigaturesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetDiscretionaryLigatures(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetDiscretionaryLigatures(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_HistoricalLigaturesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetHistoricalLigatures(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetHistoricalLigatures(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StandardSwashesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStandardSwashes(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetStandardSwashes(DependencyObject* element, int value);
	virtual STDMETHODIMP _get_ContextualSwashesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetContextualSwashes(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetContextualSwashes(DependencyObject* element, int value);
	virtual STDMETHODIMP _get_ContextualAlternatesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetContextualAlternates(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetContextualAlternates(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticAlternatesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticAlternates(DependencyObject* element, int *value);
	virtual STDMETHODIMP _SetStylisticAlternates(DependencyObject* element, int value);
	virtual STDMETHODIMP _get_StylisticSet1Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet1(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet1(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet2Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet2(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet2(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet3Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet3(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet3(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet4Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet4(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet4(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet5Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet5(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet5(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet6Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet6(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet6(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet7Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet7(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet7(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet8Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet8(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet8(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet9Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet9(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet9(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet10Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet10(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet10(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet11Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet11(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet11(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet12Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet12(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet12(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet13Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet13(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet13(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet14Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet14(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet14(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet15Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet15(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet15(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet16Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet16(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet16(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet17Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet17(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet17(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet18Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet18(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet18(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet19Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet19(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet19(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_StylisticSet20Property(DependencyProperty* *value);
	virtual STDMETHODIMP _GetStylisticSet20(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetStylisticSet20(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_CapitalsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetCapitals(DependencyObject* element, FontCapitals *value);
	virtual STDMETHODIMP _SetCapitals(DependencyObject* element, FontCapitals value);
	virtual STDMETHODIMP _get_CapitalSpacingProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetCapitalSpacing(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetCapitalSpacing(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_KerningProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetKerning(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetKerning(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_CaseSensitiveFormsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetCaseSensitiveForms(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetCaseSensitiveForms(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_HistoricalFormsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetHistoricalForms(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetHistoricalForms(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_FractionProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetFraction(DependencyObject* element, FontFraction *value);
	virtual STDMETHODIMP _SetFraction(DependencyObject* element, FontFraction value);
	virtual STDMETHODIMP _get_NumeralStyleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetNumeralStyle(DependencyObject* element, FontNumeralStyle *value);
	virtual STDMETHODIMP _SetNumeralStyle(DependencyObject* element, FontNumeralStyle value);
	virtual STDMETHODIMP _get_NumeralAlignmentProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetNumeralAlignment(DependencyObject* element, FontNumeralAlignment *value);
	virtual STDMETHODIMP _SetNumeralAlignment(DependencyObject* element, FontNumeralAlignment value);
	virtual STDMETHODIMP _get_SlashedZeroProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetSlashedZero(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetSlashedZero(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_MathematicalGreekProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetMathematicalGreek(DependencyObject* element, bool *value);
	virtual STDMETHODIMP _SetMathematicalGreek(DependencyObject* element, bool value);
	virtual STDMETHODIMP _get_VariantsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetVariants(DependencyObject* element, FontVariants *value);
	virtual STDMETHODIMP _SetVariants(DependencyObject* element, FontVariants value);
};

// Typography
template<typename> struct Typography_statics {
	static struct _AnnotationAlternatesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_AnnotationAlternatesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AnnotationAlternatesProperty;
	static struct _CapitalSpacingProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_CapitalSpacingProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CapitalSpacingProperty;
	static struct _CapitalsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_CapitalsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CapitalsProperty;
	static struct _CaseSensitiveFormsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_CaseSensitiveFormsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CaseSensitiveFormsProperty;
	static struct _ContextualAlternatesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_ContextualAlternatesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ContextualAlternatesProperty;
	static struct _ContextualLigaturesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_ContextualLigaturesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ContextualLigaturesProperty;
	static struct _ContextualSwashesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_ContextualSwashesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ContextualSwashesProperty;
	static struct _DiscretionaryLigaturesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_DiscretionaryLigaturesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} DiscretionaryLigaturesProperty;
	static struct _EastAsianExpertFormsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_EastAsianExpertFormsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} EastAsianExpertFormsProperty;
	static struct _EastAsianLanguageProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_EastAsianLanguageProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} EastAsianLanguageProperty;
	static struct _EastAsianWidthsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_EastAsianWidthsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} EastAsianWidthsProperty;
	static struct _FractionProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_FractionProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FractionProperty;
	static struct _HistoricalFormsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_HistoricalFormsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} HistoricalFormsProperty;
	static struct _HistoricalLigaturesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_HistoricalLigaturesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} HistoricalLigaturesProperty;
	static struct _KerningProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_KerningProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} KerningProperty;
	static struct _MathematicalGreekProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_MathematicalGreekProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MathematicalGreekProperty;
	static struct _NumeralAlignmentProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_NumeralAlignmentProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} NumeralAlignmentProperty;
	static struct _NumeralStyleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_NumeralStyleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} NumeralStyleProperty;
	static struct _SlashedZeroProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_SlashedZeroProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} SlashedZeroProperty;
	static struct _StandardLigaturesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StandardLigaturesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StandardLigaturesProperty;
	static struct _StandardSwashesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StandardSwashesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StandardSwashesProperty;
	static struct _StylisticAlternatesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticAlternatesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticAlternatesProperty;
	static struct _StylisticSet10Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet10Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet10Property;
	static struct _StylisticSet11Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet11Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet11Property;
	static struct _StylisticSet12Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet12Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet12Property;
	static struct _StylisticSet13Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet13Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet13Property;
	static struct _StylisticSet14Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet14Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet14Property;
	static struct _StylisticSet15Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet15Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet15Property;
	static struct _StylisticSet16Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet16Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet16Property;
	static struct _StylisticSet17Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet17Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet17Property;
	static struct _StylisticSet18Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet18Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet18Property;
	static struct _StylisticSet19Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet19Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet19Property;
	static struct _StylisticSet1Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet1Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet1Property;
	static struct _StylisticSet20Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet20Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet20Property;
	static struct _StylisticSet2Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet2Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet2Property;
	static struct _StylisticSet3Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet3Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet3Property;
	static struct _StylisticSet4Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet4Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet4Property;
	static struct _StylisticSet5Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet5Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet5Property;
	static struct _StylisticSet6Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet6Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet6Property;
	static struct _StylisticSet7Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet7Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet7Property;
	static struct _StylisticSet8Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet8Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet8Property;
	static struct _StylisticSet9Property : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_StylisticSet9Property(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StylisticSet9Property;
	static struct _VariantsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_get_VariantsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} VariantsProperty;
	static int GetAnnotationAlternates(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetAnnotationAlternates(element, &value)); return value; }
	static void SetAnnotationAlternates(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetAnnotationAlternates(element, value)); }
	static bool GetEastAsianExpertForms(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetEastAsianExpertForms(element, &value)); return value; }
	static void SetEastAsianExpertForms(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetEastAsianExpertForms(element, value)); }
	static FontEastAsianLanguage GetEastAsianLanguage(pptr<DependencyObject> element) { FontEastAsianLanguage value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetEastAsianLanguage(element, &value)); return value; }
	static void SetEastAsianLanguage(pptr<DependencyObject> element, FontEastAsianLanguage value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetEastAsianLanguage(element, value)); }
	static FontEastAsianWidths GetEastAsianWidths(pptr<DependencyObject> element) { FontEastAsianWidths value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetEastAsianWidths(element, &value)); return value; }
	static void SetEastAsianWidths(pptr<DependencyObject> element, FontEastAsianWidths value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetEastAsianWidths(element, value)); }
	static bool GetStandardLigatures(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStandardLigatures(element, &value)); return value; }
	static void SetStandardLigatures(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStandardLigatures(element, value)); }
	static bool GetContextualLigatures(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetContextualLigatures(element, &value)); return value; }
	static void SetContextualLigatures(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetContextualLigatures(element, value)); }
	static bool GetDiscretionaryLigatures(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetDiscretionaryLigatures(element, &value)); return value; }
	static void SetDiscretionaryLigatures(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetDiscretionaryLigatures(element, value)); }
	static bool GetHistoricalLigatures(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetHistoricalLigatures(element, &value)); return value; }
	static void SetHistoricalLigatures(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetHistoricalLigatures(element, value)); }
	static int GetStandardSwashes(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStandardSwashes(element, &value)); return value; }
	static void SetStandardSwashes(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStandardSwashes(element, value)); }
	static int GetContextualSwashes(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetContextualSwashes(element, &value)); return value; }
	static void SetContextualSwashes(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetContextualSwashes(element, value)); }
	static bool GetContextualAlternates(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetContextualAlternates(element, &value)); return value; }
	static void SetContextualAlternates(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetContextualAlternates(element, value)); }
	static int GetStylisticAlternates(pptr<DependencyObject> element) { int value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticAlternates(element, &value)); return value; }
	static void SetStylisticAlternates(pptr<DependencyObject> element, int value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticAlternates(element, value)); }
	static bool GetStylisticSet1(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet1(element, &value)); return value; }
	static void SetStylisticSet1(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet1(element, value)); }
	static bool GetStylisticSet2(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet2(element, &value)); return value; }
	static void SetStylisticSet2(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet2(element, value)); }
	static bool GetStylisticSet3(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet3(element, &value)); return value; }
	static void SetStylisticSet3(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet3(element, value)); }
	static bool GetStylisticSet4(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet4(element, &value)); return value; }
	static void SetStylisticSet4(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet4(element, value)); }
	static bool GetStylisticSet5(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet5(element, &value)); return value; }
	static void SetStylisticSet5(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet5(element, value)); }
	static bool GetStylisticSet6(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet6(element, &value)); return value; }
	static void SetStylisticSet6(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet6(element, value)); }
	static bool GetStylisticSet7(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet7(element, &value)); return value; }
	static void SetStylisticSet7(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet7(element, value)); }
	static bool GetStylisticSet8(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet8(element, &value)); return value; }
	static void SetStylisticSet8(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet8(element, value)); }
	static bool GetStylisticSet9(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet9(element, &value)); return value; }
	static void SetStylisticSet9(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet9(element, value)); }
	static bool GetStylisticSet10(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet10(element, &value)); return value; }
	static void SetStylisticSet10(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet10(element, value)); }
	static bool GetStylisticSet11(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet11(element, &value)); return value; }
	static void SetStylisticSet11(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet11(element, value)); }
	static bool GetStylisticSet12(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet12(element, &value)); return value; }
	static void SetStylisticSet12(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet12(element, value)); }
	static bool GetStylisticSet13(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet13(element, &value)); return value; }
	static void SetStylisticSet13(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet13(element, value)); }
	static bool GetStylisticSet14(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet14(element, &value)); return value; }
	static void SetStylisticSet14(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet14(element, value)); }
	static bool GetStylisticSet15(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet15(element, &value)); return value; }
	static void SetStylisticSet15(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet15(element, value)); }
	static bool GetStylisticSet16(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet16(element, &value)); return value; }
	static void SetStylisticSet16(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet16(element, value)); }
	static bool GetStylisticSet17(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet17(element, &value)); return value; }
	static void SetStylisticSet17(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet17(element, value)); }
	static bool GetStylisticSet18(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet18(element, &value)); return value; }
	static void SetStylisticSet18(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet18(element, value)); }
	static bool GetStylisticSet19(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet19(element, &value)); return value; }
	static void SetStylisticSet19(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet19(element, value)); }
	static bool GetStylisticSet20(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetStylisticSet20(element, &value)); return value; }
	static void SetStylisticSet20(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetStylisticSet20(element, value)); }
	static FontCapitals GetCapitals(pptr<DependencyObject> element) { FontCapitals value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetCapitals(element, &value)); return value; }
	static void SetCapitals(pptr<DependencyObject> element, FontCapitals value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetCapitals(element, value)); }
	static bool GetCapitalSpacing(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetCapitalSpacing(element, &value)); return value; }
	static void SetCapitalSpacing(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetCapitalSpacing(element, value)); }
	static bool GetKerning(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetKerning(element, &value)); return value; }
	static void SetKerning(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetKerning(element, value)); }
	static bool GetCaseSensitiveForms(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetCaseSensitiveForms(element, &value)); return value; }
	static void SetCaseSensitiveForms(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetCaseSensitiveForms(element, value)); }
	static bool GetHistoricalForms(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetHistoricalForms(element, &value)); return value; }
	static void SetHistoricalForms(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetHistoricalForms(element, value)); }
	static FontFraction GetFraction(pptr<DependencyObject> element) { FontFraction value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetFraction(element, &value)); return value; }
	static void SetFraction(pptr<DependencyObject> element, FontFraction value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetFraction(element, value)); }
	static FontNumeralStyle GetNumeralStyle(pptr<DependencyObject> element) { FontNumeralStyle value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetNumeralStyle(element, &value)); return value; }
	static void SetNumeralStyle(pptr<DependencyObject> element, FontNumeralStyle value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetNumeralStyle(element, value)); }
	static FontNumeralAlignment GetNumeralAlignment(pptr<DependencyObject> element) { FontNumeralAlignment value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetNumeralAlignment(element, &value)); return value; }
	static void SetNumeralAlignment(pptr<DependencyObject> element, FontNumeralAlignment value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetNumeralAlignment(element, value)); }
	static bool GetSlashedZero(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetSlashedZero(element, &value)); return value; }
	static void SetSlashedZero(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetSlashedZero(element, value)); }
	static bool GetMathematicalGreek(pptr<DependencyObject> element) { bool value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetMathematicalGreek(element, &value)); return value; }
	static void SetMathematicalGreek(pptr<DependencyObject> element, bool value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetMathematicalGreek(element, value)); }
	static FontVariants GetVariants(pptr<DependencyObject> element) { FontVariants value; hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_GetVariants(element, &value)); return value; }
	static void SetVariants(pptr<DependencyObject> element, FontVariants value) { hrcheck(get_activation_factory<Typography, ITypographyStatics>()->_SetVariants(element, value)); }
};
template<typename X> typename Typography_statics<X>::_AnnotationAlternatesProperty Typography_statics<X>::AnnotationAlternatesProperty;
template<typename X> typename Typography_statics<X>::_CapitalSpacingProperty Typography_statics<X>::CapitalSpacingProperty;
template<typename X> typename Typography_statics<X>::_CapitalsProperty Typography_statics<X>::CapitalsProperty;
template<typename X> typename Typography_statics<X>::_CaseSensitiveFormsProperty Typography_statics<X>::CaseSensitiveFormsProperty;
template<typename X> typename Typography_statics<X>::_ContextualAlternatesProperty Typography_statics<X>::ContextualAlternatesProperty;
template<typename X> typename Typography_statics<X>::_ContextualLigaturesProperty Typography_statics<X>::ContextualLigaturesProperty;
template<typename X> typename Typography_statics<X>::_ContextualSwashesProperty Typography_statics<X>::ContextualSwashesProperty;
template<typename X> typename Typography_statics<X>::_DiscretionaryLigaturesProperty Typography_statics<X>::DiscretionaryLigaturesProperty;
template<typename X> typename Typography_statics<X>::_EastAsianExpertFormsProperty Typography_statics<X>::EastAsianExpertFormsProperty;
template<typename X> typename Typography_statics<X>::_EastAsianLanguageProperty Typography_statics<X>::EastAsianLanguageProperty;
template<typename X> typename Typography_statics<X>::_EastAsianWidthsProperty Typography_statics<X>::EastAsianWidthsProperty;
template<typename X> typename Typography_statics<X>::_FractionProperty Typography_statics<X>::FractionProperty;
template<typename X> typename Typography_statics<X>::_HistoricalFormsProperty Typography_statics<X>::HistoricalFormsProperty;
template<typename X> typename Typography_statics<X>::_HistoricalLigaturesProperty Typography_statics<X>::HistoricalLigaturesProperty;
template<typename X> typename Typography_statics<X>::_KerningProperty Typography_statics<X>::KerningProperty;
template<typename X> typename Typography_statics<X>::_MathematicalGreekProperty Typography_statics<X>::MathematicalGreekProperty;
template<typename X> typename Typography_statics<X>::_NumeralAlignmentProperty Typography_statics<X>::NumeralAlignmentProperty;
template<typename X> typename Typography_statics<X>::_NumeralStyleProperty Typography_statics<X>::NumeralStyleProperty;
template<typename X> typename Typography_statics<X>::_SlashedZeroProperty Typography_statics<X>::SlashedZeroProperty;
template<typename X> typename Typography_statics<X>::_StandardLigaturesProperty Typography_statics<X>::StandardLigaturesProperty;
template<typename X> typename Typography_statics<X>::_StandardSwashesProperty Typography_statics<X>::StandardSwashesProperty;
template<typename X> typename Typography_statics<X>::_StylisticAlternatesProperty Typography_statics<X>::StylisticAlternatesProperty;
template<typename X> typename Typography_statics<X>::_StylisticSet10Property Typography_statics<X>::StylisticSet10Property;
template<typename X> typename Typography_statics<X>::_StylisticSet11Property Typography_statics<X>::StylisticSet11Property;
template<typename X> typename Typography_statics<X>::_StylisticSet12Property Typography_statics<X>::StylisticSet12Property;
template<typename X> typename Typography_statics<X>::_StylisticSet13Property Typography_statics<X>::StylisticSet13Property;
template<typename X> typename Typography_statics<X>::_StylisticSet14Property Typography_statics<X>::StylisticSet14Property;
template<typename X> typename Typography_statics<X>::_StylisticSet15Property Typography_statics<X>::StylisticSet15Property;
template<typename X> typename Typography_statics<X>::_StylisticSet16Property Typography_statics<X>::StylisticSet16Property;
template<typename X> typename Typography_statics<X>::_StylisticSet17Property Typography_statics<X>::StylisticSet17Property;
template<typename X> typename Typography_statics<X>::_StylisticSet18Property Typography_statics<X>::StylisticSet18Property;
template<typename X> typename Typography_statics<X>::_StylisticSet19Property Typography_statics<X>::StylisticSet19Property;
template<typename X> typename Typography_statics<X>::_StylisticSet1Property Typography_statics<X>::StylisticSet1Property;
template<typename X> typename Typography_statics<X>::_StylisticSet20Property Typography_statics<X>::StylisticSet20Property;
template<typename X> typename Typography_statics<X>::_StylisticSet2Property Typography_statics<X>::StylisticSet2Property;
template<typename X> typename Typography_statics<X>::_StylisticSet3Property Typography_statics<X>::StylisticSet3Property;
template<typename X> typename Typography_statics<X>::_StylisticSet4Property Typography_statics<X>::StylisticSet4Property;
template<typename X> typename Typography_statics<X>::_StylisticSet5Property Typography_statics<X>::StylisticSet5Property;
template<typename X> typename Typography_statics<X>::_StylisticSet6Property Typography_statics<X>::StylisticSet6Property;
template<typename X> typename Typography_statics<X>::_StylisticSet7Property Typography_statics<X>::StylisticSet7Property;
template<typename X> typename Typography_statics<X>::_StylisticSet8Property Typography_statics<X>::StylisticSet8Property;
template<typename X> typename Typography_statics<X>::_StylisticSet9Property Typography_statics<X>::StylisticSet9Property;
template<typename X> typename Typography_statics<X>::_VariantsProperty Typography_statics<X>::VariantsProperty;

template<typename X> struct statics<Typography, X> : X, Windows::UI::Xaml::Documents::Typography_statics<void> {
	typedef typename X::root_type Typography;
};
struct Typography : generate<Typography> {};

// ITextHighlighterBase
struct ITextHighlighterBase : IInspectable, generate<ITextHighlighterBase> {};

// ITextHighlighterBaseFactory
struct ITextHighlighterBaseFactory : IInspectable, generate<ITextHighlighterBaseFactory> {};

// IInlineUIContainer
struct IInlineUIContainer_raw : IInspectable {
	virtual STDMETHODIMP _get_Child(UIElement* *value);
	virtual STDMETHODIMP _put_Child(UIElement* value);
};
template<typename X> struct IInlineUIContainer_adaptor : X {
	union {
		struct : property {
			ptr<UIElement> get() { UIElement* value; hrcheck(enc(&IInlineUIContainer_adaptor::Child)->_get_Child(&value)); return from_abi(value); }
			ptr<UIElement> operator()() { return get(); }
			operator ptr<UIElement> () { return get(); }
			ptr<UIElement> operator->() { return get(); }
			void put(pptr<UIElement> value) { hrcheck(enc(&IInlineUIContainer_adaptor::Child)->_put_Child(value)); }
			void operator=(pptr<UIElement> value) { put(value); }
			void operator()(pptr<UIElement> value) { put(value); }
		} Child;
	};
	IInlineUIContainer_adaptor() {}
};
template<typename X> struct adapt<IInlineUIContainer, X> : Windows::UI::Xaml::Documents::IInlineUIContainer_adaptor<X> { typedef adapt IInlineUIContainer; };
struct IInlineUIContainer : IInlineUIContainer_raw, generate<IInlineUIContainer> {};

// ILineBreak
struct ILineBreak : IInspectable, generate<ILineBreak> {};

// IParagraph
struct IParagraph_raw : IInspectable {
	virtual STDMETHODIMP _get_Inlines(InlineCollection* *value);
	virtual STDMETHODIMP _get_TextIndent(double *value);
	virtual STDMETHODIMP _put_TextIndent(double value);
};
template<typename X> struct IParagraph_adaptor : X {
	union {
		struct : property {
			ptr<InlineCollection> get() { InlineCollection* value; hrcheck(enc(&IParagraph_adaptor::Inlines)->_get_Inlines(&value)); return from_abi(value); }
			ptr<InlineCollection> operator()() { return get(); }
			operator ptr<InlineCollection> () { return get(); }
			ptr<InlineCollection> operator->() { return get(); }
		} Inlines;
		struct : property {
			double get() { double value; hrcheck(enc(&IParagraph_adaptor::TextIndent)->_get_TextIndent(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IParagraph_adaptor::TextIndent)->_put_TextIndent(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} TextIndent;
	};
	IParagraph_adaptor() {}
};
template<typename X> struct adapt<IParagraph, X> : Windows::UI::Xaml::Documents::IParagraph_adaptor<X> { typedef adapt IParagraph; };
struct IParagraph : IParagraph_raw, generate<IParagraph> {};

// IParagraphStatics
struct IParagraphStatics : IInspectable {
	virtual STDMETHODIMP _get_TextIndentProperty(DependencyProperty* *value);
};

// IRun
struct IRun_raw : IInspectable {
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
	virtual STDMETHODIMP _get_FlowDirection(Xaml::FlowDirection *value);
	virtual STDMETHODIMP _put_FlowDirection(Xaml::FlowDirection value);
};
template<typename X> struct IRun_adaptor : X {
	union {
		struct : property {
			Xaml::FlowDirection get() { Xaml::FlowDirection value; hrcheck(enc(&IRun_adaptor::FlowDirection)->_get_FlowDirection(&value)); return value; }
			Xaml::FlowDirection operator()() { return get(); }
			operator Xaml::FlowDirection () { return get(); }
			void put(Xaml::FlowDirection value) { hrcheck(enc(&IRun_adaptor::FlowDirection)->_put_FlowDirection(value)); }
			void operator=(Xaml::FlowDirection value) { put(value); }
			void operator()(Xaml::FlowDirection value) { put(value); }
		} FlowDirection;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRun_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IRun_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
	};
	IRun_adaptor() {}
};
template<typename X> struct adapt<IRun, X> : Windows::UI::Xaml::Documents::IRun_adaptor<X> { typedef adapt IRun; };
struct IRun : IRun_raw, generate<IRun> {};

// IRunStatics
struct IRunStatics : IInspectable {
	virtual STDMETHODIMP _get_FlowDirectionProperty(DependencyProperty* *value);
};

// ISpan
struct ISpan_raw : IInspectable {
	virtual STDMETHODIMP _get_Inlines(InlineCollection* *value);
	virtual STDMETHODIMP _put_Inlines(InlineCollection* value);
};
template<typename X> struct ISpan_adaptor : X {
	union {
		struct : property {
			ptr<InlineCollection> get() { InlineCollection* value; hrcheck(enc(&ISpan_adaptor::Inlines)->_get_Inlines(&value)); return from_abi(value); }
			ptr<InlineCollection> operator()() { return get(); }
			operator ptr<InlineCollection> () { return get(); }
			ptr<InlineCollection> operator->() { return get(); }
			void put(pptr<InlineCollection> value) { hrcheck(enc(&ISpan_adaptor::Inlines)->_put_Inlines(value)); }
			void operator=(pptr<InlineCollection> value) { put(value); }
			void operator()(pptr<InlineCollection> value) { put(value); }
		} Inlines;
	};
	ISpan_adaptor() {}
};
template<typename X> struct adapt<ISpan, X> : Windows::UI::Xaml::Documents::ISpan_adaptor<X> { typedef adapt ISpan; };
struct ISpan : ISpan_raw, generate<ISpan> {};

// ISpanFactory
struct ISpanFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, Span* *instance);
};

// IBold
struct IBold : IInspectable, generate<IBold> {};

// IItalic
struct IItalic : IInspectable, generate<IItalic> {};

// IUnderline
struct IUnderline : IInspectable, generate<IUnderline> {};

// IContentLinkInvokedEventArgs
struct IContentLinkInvokedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ContentLinkInfo(Text::ContentLinkInfo* *value);
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct IContentLinkInvokedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Text::ContentLinkInfo> get() { Text::ContentLinkInfo* value; hrcheck(enc(&IContentLinkInvokedEventArgs_adaptor::ContentLinkInfo)->_get_ContentLinkInfo(&value)); return from_abi(value); }
			ptr<Text::ContentLinkInfo> operator()() { return get(); }
			operator ptr<Text::ContentLinkInfo> () { return get(); }
			ptr<Text::ContentLinkInfo> operator->() { return get(); }
		} ContentLinkInfo;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContentLinkInvokedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IContentLinkInvokedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	IContentLinkInvokedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContentLinkInvokedEventArgs, X> : Windows::UI::Xaml::Documents::IContentLinkInvokedEventArgs_adaptor<X> { typedef adapt IContentLinkInvokedEventArgs; };
struct IContentLinkInvokedEventArgs : IContentLinkInvokedEventArgs_raw, generate<IContentLinkInvokedEventArgs> {};

// ContentLinkInvokedEventArgs
template<typename X> struct statics<ContentLinkInvokedEventArgs, X> : X {
	typedef typename X::root_type ContentLinkInvokedEventArgs;
};
struct ContentLinkInvokedEventArgs : generate<ContentLinkInvokedEventArgs> {};

// IContentLinkProviderFactory
struct IContentLinkProviderFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, ContentLinkProvider* *instance);
};

// IContentLinkProvider
struct IContentLinkProvider : IInspectable, generate<IContentLinkProvider> {};

// ContentLinkProvider
template<typename X> struct statics<ContentLinkProvider, X> : X {
	typedef typename X::root_type ContentLinkProvider;
};
struct ContentLinkProvider : generate<ContentLinkProvider> {};

// IContentLinkProviderCollection
struct IContentLinkProviderCollection : IInspectable, generate<IContentLinkProviderCollection> {};

// ContentLinkProviderCollection
template<typename X> struct statics<ContentLinkProviderCollection, X> : X {
	typedef typename X::root_type ContentLinkProviderCollection;
};
struct ContentLinkProviderCollection : generate<ContentLinkProviderCollection> {};

// IHyperlinkClickEventArgs
struct IHyperlinkClickEventArgs : IInspectable, generate<IHyperlinkClickEventArgs> {};

// IContactContentLinkProvider
struct IContactContentLinkProvider : IInspectable, generate<IContactContentLinkProvider> {};

// IPlaceContentLinkProvider
struct IPlaceContentLinkProvider : IInspectable, generate<IPlaceContentLinkProvider> {};

// IContentLink
struct IContentLink_raw : IInspectable {
	virtual STDMETHODIMP _get_Info(Text::ContentLinkInfo* *value);
	virtual STDMETHODIMP _put_Info(Text::ContentLinkInfo* value);
	virtual STDMETHODIMP _get_Background(Media::Brush* *value);
	virtual STDMETHODIMP _put_Background(Media::Brush* value);
	virtual STDMETHODIMP _get_Cursor(Core::CoreCursorType *value);
	virtual STDMETHODIMP _put_Cursor(Core::CoreCursorType value);
	virtual STDMETHODIMP _get_XYFocusLeft(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusLeft(DependencyObject* value);
	virtual STDMETHODIMP _get_XYFocusRight(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusRight(DependencyObject* value);
	virtual STDMETHODIMP _get_XYFocusUp(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusUp(DependencyObject* value);
	virtual STDMETHODIMP _get_XYFocusDown(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusDown(DependencyObject* value);
	virtual STDMETHODIMP _get_ElementSoundMode(Xaml::ElementSoundMode *value);
	virtual STDMETHODIMP _put_ElementSoundMode(Xaml::ElementSoundMode value);
	virtual STDMETHODIMP _get_FocusState(Xaml::FocusState *value);
	virtual STDMETHODIMP _get_XYFocusUpNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusUpNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _get_XYFocusDownNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusDownNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _get_XYFocusLeftNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusLeftNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _get_XYFocusRightNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusRightNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _get_IsTabStop(bool *value);
	virtual STDMETHODIMP _put_IsTabStop(bool value);
	virtual STDMETHODIMP _get_TabIndex(int *value);
	virtual STDMETHODIMP _put_TabIndex(int value);
	virtual STDMETHODIMP _add_Invoked(Foundation::TypedEventHandler<ContentLink*, ContentLinkInvokedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Invoked(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_GotFocus(RoutedEventHandler* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_GotFocus(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_LostFocus(RoutedEventHandler* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LostFocus(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _Focus(Xaml::FocusState value, bool *result);
};
template<typename X> struct IContentLink_adaptor : X {
	union {
		struct : property {
			ptr<Media::Brush> get() { Media::Brush* value; hrcheck(enc(&IContentLink_adaptor::Background)->_get_Background(&value)); return from_abi(value); }
			ptr<Media::Brush> operator()() { return get(); }
			operator ptr<Media::Brush> () { return get(); }
			ptr<Media::Brush> operator->() { return get(); }
			void put(pptr<Media::Brush> value) { hrcheck(enc(&IContentLink_adaptor::Background)->_put_Background(value)); }
			void operator=(pptr<Media::Brush> value) { put(value); }
			void operator()(pptr<Media::Brush> value) { put(value); }
		} Background;
		struct : property {
			Core::CoreCursorType get() { Core::CoreCursorType value; hrcheck(enc(&IContentLink_adaptor::Cursor)->_get_Cursor(&value)); return value; }
			Core::CoreCursorType operator()() { return get(); }
			operator Core::CoreCursorType () { return get(); }
			void put(Core::CoreCursorType value) { hrcheck(enc(&IContentLink_adaptor::Cursor)->_put_Cursor(value)); }
			void operator=(Core::CoreCursorType value) { put(value); }
			void operator()(Core::CoreCursorType value) { put(value); }
		} Cursor;
		struct : property {
			Xaml::ElementSoundMode get() { Xaml::ElementSoundMode value; hrcheck(enc(&IContentLink_adaptor::ElementSoundMode)->_get_ElementSoundMode(&value)); return value; }
			Xaml::ElementSoundMode operator()() { return get(); }
			operator Xaml::ElementSoundMode () { return get(); }
			void put(Xaml::ElementSoundMode value) { hrcheck(enc(&IContentLink_adaptor::ElementSoundMode)->_put_ElementSoundMode(value)); }
			void operator=(Xaml::ElementSoundMode value) { put(value); }
			void operator()(Xaml::ElementSoundMode value) { put(value); }
		} ElementSoundMode;
		struct : property {
			Xaml::FocusState get() { Xaml::FocusState value; hrcheck(enc(&IContentLink_adaptor::FocusState)->_get_FocusState(&value)); return value; }
			Xaml::FocusState operator()() { return get(); }
			operator Xaml::FocusState () { return get(); }
		} FocusState;
		struct : property {
			ptr<Text::ContentLinkInfo> get() { Text::ContentLinkInfo* value; hrcheck(enc(&IContentLink_adaptor::Info)->_get_Info(&value)); return from_abi(value); }
			ptr<Text::ContentLinkInfo> operator()() { return get(); }
			operator ptr<Text::ContentLinkInfo> () { return get(); }
			ptr<Text::ContentLinkInfo> operator->() { return get(); }
			void put(pptr<Text::ContentLinkInfo> value) { hrcheck(enc(&IContentLink_adaptor::Info)->_put_Info(value)); }
			void operator=(pptr<Text::ContentLinkInfo> value) { put(value); }
			void operator()(pptr<Text::ContentLinkInfo> value) { put(value); }
		} Info;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IContentLink_adaptor::IsTabStop)->_get_IsTabStop(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IContentLink_adaptor::IsTabStop)->_put_IsTabStop(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsTabStop;
		struct : property {
			int get() { int value; hrcheck(enc(&IContentLink_adaptor::TabIndex)->_get_TabIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IContentLink_adaptor::TabIndex)->_put_TabIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} TabIndex;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IContentLink_adaptor::XYFocusDown)->_get_XYFocusDown(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IContentLink_adaptor::XYFocusDown)->_put_XYFocusDown(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusDown;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IContentLink_adaptor::XYFocusDownNavigationStrategy)->_get_XYFocusDownNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IContentLink_adaptor::XYFocusDownNavigationStrategy)->_put_XYFocusDownNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusDownNavigationStrategy;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IContentLink_adaptor::XYFocusLeft)->_get_XYFocusLeft(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IContentLink_adaptor::XYFocusLeft)->_put_XYFocusLeft(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusLeft;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IContentLink_adaptor::XYFocusLeftNavigationStrategy)->_get_XYFocusLeftNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IContentLink_adaptor::XYFocusLeftNavigationStrategy)->_put_XYFocusLeftNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusLeftNavigationStrategy;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IContentLink_adaptor::XYFocusRight)->_get_XYFocusRight(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IContentLink_adaptor::XYFocusRight)->_put_XYFocusRight(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusRight;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IContentLink_adaptor::XYFocusRightNavigationStrategy)->_get_XYFocusRightNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IContentLink_adaptor::XYFocusRightNavigationStrategy)->_put_XYFocusRightNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusRightNavigationStrategy;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IContentLink_adaptor::XYFocusUp)->_get_XYFocusUp(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IContentLink_adaptor::XYFocusUp)->_put_XYFocusUp(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusUp;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IContentLink_adaptor::XYFocusUpNavigationStrategy)->_get_XYFocusUpNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IContentLink_adaptor::XYFocusUpNavigationStrategy)->_put_XYFocusUpNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusUpNavigationStrategy;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<RoutedEventHandler> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IContentLink_adaptor::GotFocus)->_add_GotFocus(value, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IContentLink_adaptor::GotFocus)->_remove_GotFocus(token)); }
		} GotFocus;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ContentLink>, ptr<ContentLinkInvokedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IContentLink_adaptor::Invoked)->_add_Invoked(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IContentLink_adaptor::Invoked)->_remove_Invoked(token)); }
		} Invoked;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<RoutedEventHandler> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IContentLink_adaptor::LostFocus)->_add_LostFocus(value, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IContentLink_adaptor::LostFocus)->_remove_LostFocus(token)); }
		} LostFocus;
	};
	bool Focus(Xaml::FocusState value) { bool result; hrcheck(X::get()->_Focus(value, &result)); return result; }
	IContentLink_adaptor() {}
};
template<typename X> struct adapt<IContentLink, X> : Windows::UI::Xaml::Documents::IContentLink_adaptor<X> { typedef adapt IContentLink; };
struct IContentLink : IContentLink_raw, generate<IContentLink> {};

// IContentLinkStatics
struct IContentLinkStatics : IInspectable {
	virtual STDMETHODIMP _get_BackgroundProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_CursorProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusLeftProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusRightProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusUpProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusDownProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ElementSoundModeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FocusStateProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusUpNavigationStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusDownNavigationStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusLeftNavigationStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusRightNavigationStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_IsTabStopProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TabIndexProperty(DependencyProperty* *value);
};

// IGlyphs
struct IGlyphs_raw : IInspectable {
	virtual STDMETHODIMP _get_UnicodeString(HSTRING *value);
	virtual STDMETHODIMP _put_UnicodeString(HSTRING value);
	virtual STDMETHODIMP _get_Indices(HSTRING *value);
	virtual STDMETHODIMP _put_Indices(HSTRING value);
	virtual STDMETHODIMP _get_FontUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_FontUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_StyleSimulations(Media::StyleSimulations *value);
	virtual STDMETHODIMP _put_StyleSimulations(Media::StyleSimulations value);
	virtual STDMETHODIMP _get_FontRenderingEmSize(double *value);
	virtual STDMETHODIMP _put_FontRenderingEmSize(double value);
	virtual STDMETHODIMP _get_OriginX(double *value);
	virtual STDMETHODIMP _put_OriginX(double value);
	virtual STDMETHODIMP _get_OriginY(double *value);
	virtual STDMETHODIMP _put_OriginY(double value);
	virtual STDMETHODIMP _get_Fill(Media::Brush* *value);
	virtual STDMETHODIMP _put_Fill(Media::Brush* value);
};
template<typename X> struct IGlyphs_adaptor : X {
	union {
		struct : property {
			ptr<Media::Brush> get() { Media::Brush* value; hrcheck(enc(&IGlyphs_adaptor::Fill)->_get_Fill(&value)); return from_abi(value); }
			ptr<Media::Brush> operator()() { return get(); }
			operator ptr<Media::Brush> () { return get(); }
			ptr<Media::Brush> operator->() { return get(); }
			void put(pptr<Media::Brush> value) { hrcheck(enc(&IGlyphs_adaptor::Fill)->_put_Fill(value)); }
			void operator=(pptr<Media::Brush> value) { put(value); }
			void operator()(pptr<Media::Brush> value) { put(value); }
		} Fill;
		struct : property {
			double get() { double value; hrcheck(enc(&IGlyphs_adaptor::FontRenderingEmSize)->_get_FontRenderingEmSize(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IGlyphs_adaptor::FontRenderingEmSize)->_put_FontRenderingEmSize(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} FontRenderingEmSize;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IGlyphs_adaptor::FontUri)->_get_FontUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IGlyphs_adaptor::FontUri)->_put_FontUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} FontUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGlyphs_adaptor::Indices)->_get_Indices(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IGlyphs_adaptor::Indices)->_put_Indices(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Indices;
		struct : property {
			double get() { double value; hrcheck(enc(&IGlyphs_adaptor::OriginX)->_get_OriginX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IGlyphs_adaptor::OriginX)->_put_OriginX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} OriginX;
		struct : property {
			double get() { double value; hrcheck(enc(&IGlyphs_adaptor::OriginY)->_get_OriginY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IGlyphs_adaptor::OriginY)->_put_OriginY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} OriginY;
		struct : property {
			Media::StyleSimulations get() { Media::StyleSimulations value; hrcheck(enc(&IGlyphs_adaptor::StyleSimulations)->_get_StyleSimulations(&value)); return value; }
			Media::StyleSimulations operator()() { return get(); }
			operator Media::StyleSimulations () { return get(); }
			void put(Media::StyleSimulations value) { hrcheck(enc(&IGlyphs_adaptor::StyleSimulations)->_put_StyleSimulations(value)); }
			void operator=(Media::StyleSimulations value) { put(value); }
			void operator()(Media::StyleSimulations value) { put(value); }
		} StyleSimulations;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGlyphs_adaptor::UnicodeString)->_get_UnicodeString(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IGlyphs_adaptor::UnicodeString)->_put_UnicodeString(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} UnicodeString;
	};
	IGlyphs_adaptor() {}
};
template<typename X> struct adapt<IGlyphs, X> : Windows::UI::Xaml::Documents::IGlyphs_adaptor<X> { typedef adapt IGlyphs; };
struct IGlyphs : IGlyphs_raw, generate<IGlyphs> {};

// IGlyphsStatics
struct IGlyphsStatics : IInspectable {
	virtual STDMETHODIMP _get_UnicodeStringProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_IndicesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FontUriProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_StyleSimulationsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FontRenderingEmSizeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_OriginXProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_OriginYProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_FillProperty(DependencyProperty* *value);
};

// IGlyphs2
struct IGlyphs2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsColorFontEnabled(bool *value);
	virtual STDMETHODIMP _put_IsColorFontEnabled(bool value);
	virtual STDMETHODIMP _get_ColorFontPaletteIndex(int *value);
	virtual STDMETHODIMP _put_ColorFontPaletteIndex(int value);
};
template<typename X> struct IGlyphs2_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IGlyphs2_adaptor::ColorFontPaletteIndex)->_get_ColorFontPaletteIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IGlyphs2_adaptor::ColorFontPaletteIndex)->_put_ColorFontPaletteIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ColorFontPaletteIndex;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IGlyphs2_adaptor::IsColorFontEnabled)->_get_IsColorFontEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IGlyphs2_adaptor::IsColorFontEnabled)->_put_IsColorFontEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsColorFontEnabled;
	};
	IGlyphs2_adaptor() {}
};
template<typename X> struct adapt<IGlyphs2, X> : Windows::UI::Xaml::Documents::IGlyphs2_adaptor<X> { typedef adapt IGlyphs2; };
struct IGlyphs2 : IGlyphs2_raw, generate<IGlyphs2> {};

// IGlyphsStatics2
struct IGlyphsStatics2 : IInspectable {
	virtual STDMETHODIMP _get_IsColorFontEnabledProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ColorFontPaletteIndexProperty(DependencyProperty* *value);
};

// IHyperlink
struct IHyperlink_raw : IInspectable {
	virtual STDMETHODIMP _get_NavigateUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_NavigateUri(Foundation::Uri* value);
	virtual STDMETHODIMP _add_Click(Foundation::TypedEventHandler<Hyperlink*, HyperlinkClickEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Click(Foundation::EventRegistrationToken token);
};
template<typename X> struct IHyperlink_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IHyperlink_adaptor::NavigateUri)->_get_NavigateUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IHyperlink_adaptor::NavigateUri)->_put_NavigateUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} NavigateUri;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Hyperlink>, ptr<HyperlinkClickEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHyperlink_adaptor::Click)->_add_Click(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHyperlink_adaptor::Click)->_remove_Click(token)); }
		} Click;
	};
	IHyperlink_adaptor() {}
};
template<typename X> struct adapt<IHyperlink, X> : Windows::UI::Xaml::Documents::IHyperlink_adaptor<X> { typedef adapt IHyperlink; };
struct IHyperlink : IHyperlink_raw, generate<IHyperlink> {};

// IHyperlinkStatics
struct IHyperlinkStatics : IInspectable {
	virtual STDMETHODIMP _get_NavigateUriProperty(DependencyProperty* *value);
};

// IHyperlink2
struct IHyperlink2_raw : IInspectable {
	virtual STDMETHODIMP _get_UnderlineStyle(Documents::UnderlineStyle *value);
	virtual STDMETHODIMP _put_UnderlineStyle(Documents::UnderlineStyle value);
};
template<typename X> struct IHyperlink2_adaptor : X {
	union {
		struct : property {
			Documents::UnderlineStyle get() { Documents::UnderlineStyle value; hrcheck(enc(&IHyperlink2_adaptor::UnderlineStyle)->_get_UnderlineStyle(&value)); return value; }
			Documents::UnderlineStyle operator()() { return get(); }
			operator Documents::UnderlineStyle () { return get(); }
			void put(Documents::UnderlineStyle value) { hrcheck(enc(&IHyperlink2_adaptor::UnderlineStyle)->_put_UnderlineStyle(value)); }
			void operator=(Documents::UnderlineStyle value) { put(value); }
			void operator()(Documents::UnderlineStyle value) { put(value); }
		} UnderlineStyle;
	};
	IHyperlink2_adaptor() {}
};
template<typename X> struct adapt<IHyperlink2, X> : Windows::UI::Xaml::Documents::IHyperlink2_adaptor<X> { typedef adapt IHyperlink2; };
struct IHyperlink2 : IHyperlink2_raw, generate<IHyperlink2> {};

// IHyperlinkStatics2
struct IHyperlinkStatics2 : IInspectable {
	virtual STDMETHODIMP _get_UnderlineStyleProperty(DependencyProperty* *value);
};

// IHyperlink3
struct IHyperlink3_raw : IInspectable {
	virtual STDMETHODIMP _get_XYFocusLeft(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusLeft(DependencyObject* value);
	virtual STDMETHODIMP _get_XYFocusRight(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusRight(DependencyObject* value);
	virtual STDMETHODIMP _get_XYFocusUp(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusUp(DependencyObject* value);
	virtual STDMETHODIMP _get_XYFocusDown(DependencyObject* *value);
	virtual STDMETHODIMP _put_XYFocusDown(DependencyObject* value);
	virtual STDMETHODIMP _get_ElementSoundMode(Xaml::ElementSoundMode *value);
	virtual STDMETHODIMP _put_ElementSoundMode(Xaml::ElementSoundMode value);
};
template<typename X> struct IHyperlink3_adaptor : X {
	union {
		struct : property {
			Xaml::ElementSoundMode get() { Xaml::ElementSoundMode value; hrcheck(enc(&IHyperlink3_adaptor::ElementSoundMode)->_get_ElementSoundMode(&value)); return value; }
			Xaml::ElementSoundMode operator()() { return get(); }
			operator Xaml::ElementSoundMode () { return get(); }
			void put(Xaml::ElementSoundMode value) { hrcheck(enc(&IHyperlink3_adaptor::ElementSoundMode)->_put_ElementSoundMode(value)); }
			void operator=(Xaml::ElementSoundMode value) { put(value); }
			void operator()(Xaml::ElementSoundMode value) { put(value); }
		} ElementSoundMode;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IHyperlink3_adaptor::XYFocusDown)->_get_XYFocusDown(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IHyperlink3_adaptor::XYFocusDown)->_put_XYFocusDown(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusDown;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IHyperlink3_adaptor::XYFocusLeft)->_get_XYFocusLeft(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IHyperlink3_adaptor::XYFocusLeft)->_put_XYFocusLeft(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusLeft;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IHyperlink3_adaptor::XYFocusRight)->_get_XYFocusRight(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IHyperlink3_adaptor::XYFocusRight)->_put_XYFocusRight(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusRight;
		struct : property {
			ptr<DependencyObject> get() { DependencyObject* value; hrcheck(enc(&IHyperlink3_adaptor::XYFocusUp)->_get_XYFocusUp(&value)); return from_abi(value); }
			ptr<DependencyObject> operator()() { return get(); }
			operator ptr<DependencyObject> () { return get(); }
			ptr<DependencyObject> operator->() { return get(); }
			void put(pptr<DependencyObject> value) { hrcheck(enc(&IHyperlink3_adaptor::XYFocusUp)->_put_XYFocusUp(value)); }
			void operator=(pptr<DependencyObject> value) { put(value); }
			void operator()(pptr<DependencyObject> value) { put(value); }
		} XYFocusUp;
	};
	IHyperlink3_adaptor() {}
};
template<typename X> struct adapt<IHyperlink3, X> : Windows::UI::Xaml::Documents::IHyperlink3_adaptor<X> { typedef adapt IHyperlink3; };
struct IHyperlink3 : IHyperlink3_raw, generate<IHyperlink3> {};

// IHyperlinkStatics3
struct IHyperlinkStatics3 : IInspectable {
	virtual STDMETHODIMP _get_XYFocusLeftProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusRightProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusUpProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusDownProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ElementSoundModeProperty(DependencyProperty* *value);
};

// IHyperlink4
struct IHyperlink4_raw : IInspectable {
	virtual STDMETHODIMP _get_FocusState(Xaml::FocusState *value);
	virtual STDMETHODIMP _get_XYFocusUpNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusUpNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _get_XYFocusDownNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusDownNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _get_XYFocusLeftNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusLeftNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _get_XYFocusRightNavigationStrategy(Input::XYFocusNavigationStrategy *value);
	virtual STDMETHODIMP _put_XYFocusRightNavigationStrategy(Input::XYFocusNavigationStrategy value);
	virtual STDMETHODIMP _add_GotFocus(RoutedEventHandler* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_GotFocus(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_LostFocus(RoutedEventHandler* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LostFocus(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _Focus(Xaml::FocusState value, bool *returnValue);
};
template<typename X> struct IHyperlink4_adaptor : X {
	union {
		struct : property {
			Xaml::FocusState get() { Xaml::FocusState value; hrcheck(enc(&IHyperlink4_adaptor::FocusState)->_get_FocusState(&value)); return value; }
			Xaml::FocusState operator()() { return get(); }
			operator Xaml::FocusState () { return get(); }
		} FocusState;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IHyperlink4_adaptor::XYFocusDownNavigationStrategy)->_get_XYFocusDownNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IHyperlink4_adaptor::XYFocusDownNavigationStrategy)->_put_XYFocusDownNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusDownNavigationStrategy;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IHyperlink4_adaptor::XYFocusLeftNavigationStrategy)->_get_XYFocusLeftNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IHyperlink4_adaptor::XYFocusLeftNavigationStrategy)->_put_XYFocusLeftNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusLeftNavigationStrategy;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IHyperlink4_adaptor::XYFocusRightNavigationStrategy)->_get_XYFocusRightNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IHyperlink4_adaptor::XYFocusRightNavigationStrategy)->_put_XYFocusRightNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusRightNavigationStrategy;
		struct : property {
			Input::XYFocusNavigationStrategy get() { Input::XYFocusNavigationStrategy value; hrcheck(enc(&IHyperlink4_adaptor::XYFocusUpNavigationStrategy)->_get_XYFocusUpNavigationStrategy(&value)); return value; }
			Input::XYFocusNavigationStrategy operator()() { return get(); }
			operator Input::XYFocusNavigationStrategy () { return get(); }
			void put(Input::XYFocusNavigationStrategy value) { hrcheck(enc(&IHyperlink4_adaptor::XYFocusUpNavigationStrategy)->_put_XYFocusUpNavigationStrategy(value)); }
			void operator=(Input::XYFocusNavigationStrategy value) { put(value); }
			void operator()(Input::XYFocusNavigationStrategy value) { put(value); }
		} XYFocusUpNavigationStrategy;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<RoutedEventHandler> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHyperlink4_adaptor::GotFocus)->_add_GotFocus(value, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHyperlink4_adaptor::GotFocus)->_remove_GotFocus(token)); }
		} GotFocus;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<RoutedEventHandler> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHyperlink4_adaptor::LostFocus)->_add_LostFocus(value, &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHyperlink4_adaptor::LostFocus)->_remove_LostFocus(token)); }
		} LostFocus;
	};
	bool Focus(Xaml::FocusState value) { bool returnValue; hrcheck(X::get()->_Focus(value, &returnValue)); return returnValue; }
	IHyperlink4_adaptor() {}
};
template<typename X> struct adapt<IHyperlink4, X> : Windows::UI::Xaml::Documents::IHyperlink4_adaptor<X> { typedef adapt IHyperlink4; };
struct IHyperlink4 : IHyperlink4_raw, generate<IHyperlink4> {};

// IHyperlinkStatics4
struct IHyperlinkStatics4 : IInspectable {
	virtual STDMETHODIMP _get_FocusStateProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusUpNavigationStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusDownNavigationStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusLeftNavigationStrategyProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_XYFocusRightNavigationStrategyProperty(DependencyProperty* *value);
};

// IHyperlink5
struct IHyperlink5_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTabStop(bool *value);
	virtual STDMETHODIMP _put_IsTabStop(bool value);
	virtual STDMETHODIMP _get_TabIndex(int *value);
	virtual STDMETHODIMP _put_TabIndex(int value);
};
template<typename X> struct IHyperlink5_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHyperlink5_adaptor::IsTabStop)->_get_IsTabStop(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IHyperlink5_adaptor::IsTabStop)->_put_IsTabStop(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsTabStop;
		struct : property {
			int get() { int value; hrcheck(enc(&IHyperlink5_adaptor::TabIndex)->_get_TabIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IHyperlink5_adaptor::TabIndex)->_put_TabIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} TabIndex;
	};
	IHyperlink5_adaptor() {}
};
template<typename X> struct adapt<IHyperlink5, X> : Windows::UI::Xaml::Documents::IHyperlink5_adaptor<X> { typedef adapt IHyperlink5; };
struct IHyperlink5 : IHyperlink5_raw, generate<IHyperlink5> {};

// IHyperlinkStatics5
struct IHyperlinkStatics5 : IInspectable {
	virtual STDMETHODIMP _get_IsTabStopProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TabIndexProperty(DependencyProperty* *value);
};

// TextHighlighterBase
template<typename X> struct statics<TextHighlighterBase, X> : X {
	typedef typename X::root_type TextHighlighterBase;
};
struct TextHighlighterBase : generate<TextHighlighterBase> {};

// InlineUIContainer
template<typename X> struct statics<InlineUIContainer, X> : X {
	typedef typename X::root_type InlineUIContainer;
};
struct InlineUIContainer : generate<InlineUIContainer> {};

// LineBreak
template<typename X> struct statics<LineBreak, X> : X {
	typedef typename X::root_type LineBreak;
};
struct LineBreak : generate<LineBreak> {};

// Paragraph
template<typename> struct Paragraph_statics {
	static struct _TextIndentProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Paragraph, IParagraphStatics>()->_get_TextIndentProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TextIndentProperty;
};
template<typename X> typename Paragraph_statics<X>::_TextIndentProperty Paragraph_statics<X>::TextIndentProperty;

template<typename X> struct statics<Paragraph, X> : X, Windows::UI::Xaml::Documents::Paragraph_statics<void> {
	typedef typename X::root_type Paragraph;
};
struct Paragraph : generate<Paragraph> {};

// Run
template<typename> struct Run_statics {
	static struct _FlowDirectionProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Run, IRunStatics>()->_get_FlowDirectionProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FlowDirectionProperty;
};
template<typename X> typename Run_statics<X>::_FlowDirectionProperty Run_statics<X>::FlowDirectionProperty;

template<typename X> struct statics<Run, X> : X, Windows::UI::Xaml::Documents::Run_statics<void> {
	typedef typename X::root_type Run;
};
struct Run : generate<Run> {};

// Span
template<typename> struct Span_statics {
	static Span *activate(object_ref outer, IInspectable* *inner) { Span *instance; hrcheck(get_activation_factory<Span, ISpanFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<Span, X> : X, Windows::UI::Xaml::Documents::Span_statics<void> {
	using Windows::UI::Xaml::Documents::Span_statics<void>::activate;
	typedef typename X::root_type Span;
};
struct Span : generate<Span> {};

// Bold
template<typename X> struct statics<Bold, X> : X {
	typedef typename X::root_type Bold;
};
struct Bold : generate<Bold> {};

// Italic
template<typename X> struct statics<Italic, X> : X {
	typedef typename X::root_type Italic;
};
struct Italic : generate<Italic> {};

// Underline
template<typename X> struct statics<Underline, X> : X {
	typedef typename X::root_type Underline;
};
struct Underline : generate<Underline> {};

// ContactContentLinkProvider
template<typename X> struct statics<ContactContentLinkProvider, X> : X {
	typedef typename X::root_type ContactContentLinkProvider;
};
struct ContactContentLinkProvider : generate<ContactContentLinkProvider> {};

// PlaceContentLinkProvider
template<typename X> struct statics<PlaceContentLinkProvider, X> : X {
	typedef typename X::root_type PlaceContentLinkProvider;
};
struct PlaceContentLinkProvider : generate<PlaceContentLinkProvider> {};

// ContentLink
template<typename> struct ContentLink_statics {
	static struct _BackgroundProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_BackgroundProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} BackgroundProperty;
	static struct _CursorProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_CursorProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CursorProperty;
	static struct _ElementSoundModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_ElementSoundModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ElementSoundModeProperty;
	static struct _FocusStateProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_FocusStateProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FocusStateProperty;
	static struct _IsTabStopProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_IsTabStopProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsTabStopProperty;
	static struct _TabIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_TabIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TabIndexProperty;
	static struct _XYFocusDownNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusDownNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusDownNavigationStrategyProperty;
	static struct _XYFocusDownProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusDownProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusDownProperty;
	static struct _XYFocusLeftNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusLeftNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusLeftNavigationStrategyProperty;
	static struct _XYFocusLeftProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusLeftProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusLeftProperty;
	static struct _XYFocusRightNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusRightNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusRightNavigationStrategyProperty;
	static struct _XYFocusRightProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusRightProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusRightProperty;
	static struct _XYFocusUpNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusUpNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusUpNavigationStrategyProperty;
	static struct _XYFocusUpProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<ContentLink, IContentLinkStatics>()->_get_XYFocusUpProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusUpProperty;
};
template<typename X> typename ContentLink_statics<X>::_BackgroundProperty ContentLink_statics<X>::BackgroundProperty;
template<typename X> typename ContentLink_statics<X>::_CursorProperty ContentLink_statics<X>::CursorProperty;
template<typename X> typename ContentLink_statics<X>::_ElementSoundModeProperty ContentLink_statics<X>::ElementSoundModeProperty;
template<typename X> typename ContentLink_statics<X>::_FocusStateProperty ContentLink_statics<X>::FocusStateProperty;
template<typename X> typename ContentLink_statics<X>::_IsTabStopProperty ContentLink_statics<X>::IsTabStopProperty;
template<typename X> typename ContentLink_statics<X>::_TabIndexProperty ContentLink_statics<X>::TabIndexProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusDownNavigationStrategyProperty ContentLink_statics<X>::XYFocusDownNavigationStrategyProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusDownProperty ContentLink_statics<X>::XYFocusDownProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusLeftNavigationStrategyProperty ContentLink_statics<X>::XYFocusLeftNavigationStrategyProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusLeftProperty ContentLink_statics<X>::XYFocusLeftProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusRightNavigationStrategyProperty ContentLink_statics<X>::XYFocusRightNavigationStrategyProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusRightProperty ContentLink_statics<X>::XYFocusRightProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusUpNavigationStrategyProperty ContentLink_statics<X>::XYFocusUpNavigationStrategyProperty;
template<typename X> typename ContentLink_statics<X>::_XYFocusUpProperty ContentLink_statics<X>::XYFocusUpProperty;

template<typename X> struct statics<ContentLink, X> : X, Windows::UI::Xaml::Documents::ContentLink_statics<void> {
	typedef typename X::root_type ContentLink;
};
struct ContentLink : generate<ContentLink> {};

// Hyperlink
template<typename> struct Hyperlink_statics {
	static struct _NavigateUriProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics>()->_get_NavigateUriProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} NavigateUriProperty;
	static struct _UnderlineStyleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics2>()->_get_UnderlineStyleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} UnderlineStyleProperty;
	static struct _ElementSoundModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics3>()->_get_ElementSoundModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ElementSoundModeProperty;
	static struct _XYFocusDownProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics3>()->_get_XYFocusDownProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusDownProperty;
	static struct _XYFocusLeftProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics3>()->_get_XYFocusLeftProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusLeftProperty;
	static struct _XYFocusRightProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics3>()->_get_XYFocusRightProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusRightProperty;
	static struct _XYFocusUpProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics3>()->_get_XYFocusUpProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusUpProperty;
	static struct _FocusStateProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics4>()->_get_FocusStateProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FocusStateProperty;
	static struct _XYFocusDownNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics4>()->_get_XYFocusDownNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusDownNavigationStrategyProperty;
	static struct _XYFocusLeftNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics4>()->_get_XYFocusLeftNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusLeftNavigationStrategyProperty;
	static struct _XYFocusRightNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics4>()->_get_XYFocusRightNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusRightNavigationStrategyProperty;
	static struct _XYFocusUpNavigationStrategyProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics4>()->_get_XYFocusUpNavigationStrategyProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} XYFocusUpNavigationStrategyProperty;
	static struct _IsTabStopProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics5>()->_get_IsTabStopProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsTabStopProperty;
	static struct _TabIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Hyperlink, IHyperlinkStatics5>()->_get_TabIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TabIndexProperty;
};
template<typename X> typename Hyperlink_statics<X>::_NavigateUriProperty Hyperlink_statics<X>::NavigateUriProperty;
template<typename X> typename Hyperlink_statics<X>::_UnderlineStyleProperty Hyperlink_statics<X>::UnderlineStyleProperty;
template<typename X> typename Hyperlink_statics<X>::_ElementSoundModeProperty Hyperlink_statics<X>::ElementSoundModeProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusDownProperty Hyperlink_statics<X>::XYFocusDownProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusLeftProperty Hyperlink_statics<X>::XYFocusLeftProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusRightProperty Hyperlink_statics<X>::XYFocusRightProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusUpProperty Hyperlink_statics<X>::XYFocusUpProperty;
template<typename X> typename Hyperlink_statics<X>::_FocusStateProperty Hyperlink_statics<X>::FocusStateProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusDownNavigationStrategyProperty Hyperlink_statics<X>::XYFocusDownNavigationStrategyProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusLeftNavigationStrategyProperty Hyperlink_statics<X>::XYFocusLeftNavigationStrategyProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusRightNavigationStrategyProperty Hyperlink_statics<X>::XYFocusRightNavigationStrategyProperty;
template<typename X> typename Hyperlink_statics<X>::_XYFocusUpNavigationStrategyProperty Hyperlink_statics<X>::XYFocusUpNavigationStrategyProperty;
template<typename X> typename Hyperlink_statics<X>::_IsTabStopProperty Hyperlink_statics<X>::IsTabStopProperty;
template<typename X> typename Hyperlink_statics<X>::_TabIndexProperty Hyperlink_statics<X>::TabIndexProperty;

template<typename X> struct statics<Hyperlink, X> : X, Windows::UI::Xaml::Documents::Hyperlink_statics<void> {
	typedef typename X::root_type Hyperlink;
};
struct Hyperlink : generate<Hyperlink> {};

// HyperlinkClickEventArgs
template<typename X> struct statics<HyperlinkClickEventArgs, X> : X {
	typedef typename X::root_type HyperlinkClickEventArgs;
};
struct HyperlinkClickEventArgs : generate<HyperlinkClickEventArgs> {};

// Glyphs
template<typename> struct Glyphs_statics {
	static struct _FillProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_FillProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FillProperty;
	static struct _FontRenderingEmSizeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_FontRenderingEmSizeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FontRenderingEmSizeProperty;
	static struct _FontUriProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_FontUriProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} FontUriProperty;
	static struct _IndicesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_IndicesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IndicesProperty;
	static struct _OriginXProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_OriginXProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} OriginXProperty;
	static struct _OriginYProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_OriginYProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} OriginYProperty;
	static struct _StyleSimulationsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_StyleSimulationsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StyleSimulationsProperty;
	static struct _UnicodeStringProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics>()->_get_UnicodeStringProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} UnicodeStringProperty;
	static struct _ColorFontPaletteIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics2>()->_get_ColorFontPaletteIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ColorFontPaletteIndexProperty;
	static struct _IsColorFontEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<Glyphs, IGlyphsStatics2>()->_get_IsColorFontEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsColorFontEnabledProperty;
};
template<typename X> typename Glyphs_statics<X>::_FillProperty Glyphs_statics<X>::FillProperty;
template<typename X> typename Glyphs_statics<X>::_FontRenderingEmSizeProperty Glyphs_statics<X>::FontRenderingEmSizeProperty;
template<typename X> typename Glyphs_statics<X>::_FontUriProperty Glyphs_statics<X>::FontUriProperty;
template<typename X> typename Glyphs_statics<X>::_IndicesProperty Glyphs_statics<X>::IndicesProperty;
template<typename X> typename Glyphs_statics<X>::_OriginXProperty Glyphs_statics<X>::OriginXProperty;
template<typename X> typename Glyphs_statics<X>::_OriginYProperty Glyphs_statics<X>::OriginYProperty;
template<typename X> typename Glyphs_statics<X>::_StyleSimulationsProperty Glyphs_statics<X>::StyleSimulationsProperty;
template<typename X> typename Glyphs_statics<X>::_UnicodeStringProperty Glyphs_statics<X>::UnicodeStringProperty;
template<typename X> typename Glyphs_statics<X>::_ColorFontPaletteIndexProperty Glyphs_statics<X>::ColorFontPaletteIndexProperty;
template<typename X> typename Glyphs_statics<X>::_IsColorFontEnabledProperty Glyphs_statics<X>::IsColorFontEnabledProperty;

template<typename X> struct statics<Glyphs, X> : X, Windows::UI::Xaml::Documents::Glyphs_statics<void> {
	typedef typename X::root_type Glyphs;
};
struct Glyphs : generate<Glyphs> {};
}}}}
} // namespace iso_winrt
