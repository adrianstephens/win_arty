#pragma once
// generated by isopod tools
// namespaces:
// Windows.Web.UI.Interop

#include "Windows.Web.UI.Interop.0.h"
#include "Windows.System.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.Core.0.h"
#include "Windows.UI.0.h"
#include "Windows.Web.UI.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace DataTransfer {
struct DataPackage;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStream;
}}
namespace Web { namespace Http {
struct HttpRequestMessage;
}
struct IUriToStreamResolver;
}}

// defs

template<> struct def<Windows::Web::UI::Interop::WebViewControlMoveFocusReason> : enum_type<int> {};
template<> struct def<Windows::Web::UI::Interop::WebViewControlProcessCapabilityState> : enum_type<int> {};
template<> struct def<Windows::Web::UI::Interop::WebViewControlAcceleratorKeyRoutingStage> : enum_type<int> {};
template<> struct def<Windows::Web::UI::Interop::IWebViewControlSite> : interface_type<> {};
template<> struct def<Windows::Web::UI::Interop::IWebViewControlProcessFactory> : interface_type<> {};
template<> struct def<Windows::Web::UI::Interop::IWebViewControlProcess> : interface_type<> {};
template<> struct def<Windows::Web::UI::Interop::WebViewControlProcess> : class_type<Platform::Object, Windows::Web::UI::Interop::IWebViewControlProcess>, custom_activators {};
template<> struct def<Windows::Web::UI::Interop::WebViewControl> : class_type<Platform::Object, Windows::Web::UI::IWebViewControl, Windows::Web::UI::Interop::IWebViewControlSite> {};
template<> struct def<Windows::Web::UI::Interop::IWebViewControlMoveFocusRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::Interop::WebViewControlMoveFocusRequestedEventArgs> : class_type<Platform::Object, Windows::Web::UI::Interop::IWebViewControlMoveFocusRequestedEventArgs> {};
template<> struct def<Windows::Web::UI::Interop::IWebViewControlAcceleratorKeyPressedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::Interop::WebViewControlAcceleratorKeyPressedEventArgs> : class_type<Platform::Object, Windows::Web::UI::Interop::IWebViewControlAcceleratorKeyPressedEventArgs> {};
template<> struct def<Windows::Web::UI::Interop::IWebViewControlProcessOptions> : interface_type<> {};
template<> struct def<Windows::Web::UI::Interop::WebViewControlProcessOptions> : class_type<Platform::Object, Windows::Web::UI::Interop::IWebViewControlProcessOptions> {};

// uuids

template<> struct uuid<Windows::Web::UI::Interop::IWebViewControlSite> { define_guid(0x133F47C6, 0x12DC, 0x4898, 0xBD, 0x47, 0x4, 0x96, 0x7D, 0xE6, 0x48, 0xBA);};
template<> struct uuid<Windows::Web::UI::Interop::IWebViewControlProcessFactory> { define_guid(0x47B65CF9, 0xA2D2, 0x453C, 0xB0, 0x97, 0xF6, 0x77, 0x9D, 0x4B, 0x8E, 0x2);};
template<> struct uuid<Windows::Web::UI::Interop::IWebViewControlProcess> { define_guid(0x2C723EC, 0x98D6, 0x424A, 0xB6, 0x3E, 0xC6, 0x13, 0x6C, 0x36, 0xA0, 0xF2);};
template<> struct uuid<Windows::Web::UI::Interop::IWebViewControlMoveFocusRequestedEventArgs> { define_guid(0x6B2A340D, 0x4BD0, 0x405E, 0xB7, 0xC1, 0x1E, 0x72, 0xA4, 0x92, 0xF4, 0x46);};
template<> struct uuid<Windows::Web::UI::Interop::IWebViewControlAcceleratorKeyPressedEventArgs> { define_guid(0x77A2A53E, 0x7C74, 0x437D, 0xA2, 0x90, 0x3A, 0xC0, 0xD8, 0xCD, 0x56, 0x55);};
template<> struct uuid<Windows::Web::UI::Interop::IWebViewControlProcessOptions> { define_guid(0x1CCA72A7, 0x3BD6, 0x4826, 0x82, 0x61, 0x6C, 0x81, 0x89, 0x50, 0x5D, 0x89);};

// types

namespace Windows { namespace Web { namespace UI { namespace Interop {

// IWebViewControlSite
struct IWebViewControlSite_raw : IInspectable {
	virtual STDMETHODIMP _get_Process(WebViewControlProcess* *value);
	virtual STDMETHODIMP _put_Scale(double value);
	virtual STDMETHODIMP _get_Scale(double *value);
	virtual STDMETHODIMP _put_Bounds(Foundation::Rect value);
	virtual STDMETHODIMP _get_Bounds(Foundation::Rect *value);
	virtual STDMETHODIMP _put_IsVisible(bool value);
	virtual STDMETHODIMP _get_IsVisible(bool *value);
	virtual STDMETHODIMP _Close();
	virtual STDMETHODIMP _MoveFocus(WebViewControlMoveFocusReason reason);
	virtual STDMETHODIMP _add_MoveFocusRequested(Foundation::TypedEventHandler<WebViewControl*, WebViewControlMoveFocusRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MoveFocusRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AcceleratorKeyPressed(Foundation::TypedEventHandler<WebViewControl*, WebViewControlAcceleratorKeyPressedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AcceleratorKeyPressed(Foundation::EventRegistrationToken token);
};
template<typename X> struct IWebViewControlSite_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IWebViewControlSite_adaptor::Bounds)->_get_Bounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
			void put(const Foundation::Rect& value) { hrcheck(enc(&IWebViewControlSite_adaptor::Bounds)->_put_Bounds(value)); }
			void operator=(const Foundation::Rect& value) { put(value); }
			void operator()(const Foundation::Rect& value) { put(value); }
		} Bounds;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlSite_adaptor::IsVisible)->_get_IsVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlSite_adaptor::IsVisible)->_put_IsVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsVisible;
		struct : property {
			ptr<WebViewControlProcess> get() { WebViewControlProcess* value; hrcheck(enc(&IWebViewControlSite_adaptor::Process)->_get_Process(&value)); return from_abi(value); }
			ptr<WebViewControlProcess> operator()() { return get(); }
			operator ptr<WebViewControlProcess> () { return get(); }
			ptr<WebViewControlProcess> operator->() { return get(); }
		} Process;
		struct : property {
			double get() { double value; hrcheck(enc(&IWebViewControlSite_adaptor::Scale)->_get_Scale(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IWebViewControlSite_adaptor::Scale)->_put_Scale(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Scale;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WebViewControl>, ptr<WebViewControlAcceleratorKeyPressedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControlSite_adaptor::AcceleratorKeyPressed)->_add_AcceleratorKeyPressed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControlSite_adaptor::AcceleratorKeyPressed)->_remove_AcceleratorKeyPressed(token)); }
		} AcceleratorKeyPressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WebViewControl>, ptr<WebViewControlMoveFocusRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControlSite_adaptor::MoveFocusRequested)->_add_MoveFocusRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControlSite_adaptor::MoveFocusRequested)->_remove_MoveFocusRequested(token)); }
		} MoveFocusRequested;
	};
	void Close() { hrcheck(X::get()->_Close()); }
	void MoveFocus(WebViewControlMoveFocusReason reason) { hrcheck(X::get()->_MoveFocus(reason)); }
	IWebViewControlSite_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlSite, X> : Windows::Web::UI::Interop::IWebViewControlSite_adaptor<X> { typedef adapt IWebViewControlSite; };
struct IWebViewControlSite : IWebViewControlSite_raw, generate<IWebViewControlSite> {};

// IWebViewControlProcessFactory
struct IWebViewControlProcessFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithOptions(WebViewControlProcessOptions* processOptions, WebViewControlProcess* *result);
};

// IWebViewControlProcess
struct IWebViewControlProcess_raw : IInspectable {
	virtual STDMETHODIMP _get_ProcessId(unsigned *value);
	virtual STDMETHODIMP _get_EnterpriseId(HSTRING *value);
	virtual STDMETHODIMP _get_IsPrivateNetworkClientServerCapabilityEnabled(bool *value);
	virtual STDMETHODIMP _CreateWebViewControlAsync(__int64 hostWindowHandle, Foundation::Rect bounds, Foundation::IAsyncOperation<WebViewControl*>* *operation);
	virtual STDMETHODIMP _GetWebViewControls(Foundation::Collections::IVectorView<WebViewControl*>* *result);
	virtual STDMETHODIMP _Terminate();
	virtual STDMETHODIMP _add_ProcessExited(Foundation::TypedEventHandler<WebViewControlProcess*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ProcessExited(Foundation::EventRegistrationToken token);
};
template<typename X> struct IWebViewControlProcess_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebViewControlProcess_adaptor::EnterpriseId)->_get_EnterpriseId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} EnterpriseId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlProcess_adaptor::IsPrivateNetworkClientServerCapabilityEnabled)->_get_IsPrivateNetworkClientServerCapabilityEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPrivateNetworkClientServerCapabilityEnabled;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWebViewControlProcess_adaptor::ProcessId)->_get_ProcessId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ProcessId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WebViewControlProcess>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControlProcess_adaptor::ProcessExited)->_add_ProcessExited(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControlProcess_adaptor::ProcessExited)->_remove_ProcessExited(token)); }
		} ProcessExited;
	};
	ptr<Foundation::IAsyncOperation<ptr<WebViewControl>>> CreateWebViewControlAsync(__int64 hostWindowHandle, const Foundation::Rect& bounds) { Foundation::IAsyncOperation<WebViewControl*>* operation; hrcheck(X::get()->_CreateWebViewControlAsync(hostWindowHandle, bounds, &operation)); return from_abi(operation); }
	ptr<Foundation::Collections::IVectorView<ptr<WebViewControl>>> GetWebViewControls() { Foundation::Collections::IVectorView<WebViewControl*>* result; hrcheck(X::get()->_GetWebViewControls(&result)); return from_abi(result); }
	void Terminate() { hrcheck(X::get()->_Terminate()); }
	IWebViewControlProcess_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlProcess, X> : Windows::Web::UI::Interop::IWebViewControlProcess_adaptor<X> { typedef adapt IWebViewControlProcess; };
struct IWebViewControlProcess : IWebViewControlProcess_raw, generate<IWebViewControlProcess> {};

// WebViewControlProcess
template<typename> struct WebViewControlProcess_statics {
	static WebViewControlProcess *activate(pptr<WebViewControlProcessOptions> processOptions) { WebViewControlProcess *result; hrcheck(get_activation_factory<WebViewControlProcess, IWebViewControlProcessFactory>()->_CreateWithOptions(processOptions, &result)); return result; }
	static WebViewControlProcess *activate() { WebViewControlProcess *t; get_activation_factory<WebViewControlProcess>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<WebViewControlProcess, X> : X, Windows::Web::UI::Interop::WebViewControlProcess_statics<void> {
	using Windows::Web::UI::Interop::WebViewControlProcess_statics<void>::activate;
	typedef typename X::root_type WebViewControlProcess;
};
struct WebViewControlProcess : generate<WebViewControlProcess> {};

// WebViewControl
template<typename X> struct statics<WebViewControl, X> : X {
	typedef typename X::root_type WebViewControl;
};
struct WebViewControl : generate<WebViewControl> {};

// IWebViewControlMoveFocusRequestedEventArgs
struct IWebViewControlMoveFocusRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(WebViewControlMoveFocusReason *value);
};
template<typename X> struct IWebViewControlMoveFocusRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			WebViewControlMoveFocusReason get() { WebViewControlMoveFocusReason value; hrcheck(enc(&IWebViewControlMoveFocusRequestedEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			WebViewControlMoveFocusReason operator()() { return get(); }
			operator WebViewControlMoveFocusReason () { return get(); }
		} Reason;
	};
	IWebViewControlMoveFocusRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlMoveFocusRequestedEventArgs, X> : Windows::Web::UI::Interop::IWebViewControlMoveFocusRequestedEventArgs_adaptor<X> { typedef adapt IWebViewControlMoveFocusRequestedEventArgs; };
struct IWebViewControlMoveFocusRequestedEventArgs : IWebViewControlMoveFocusRequestedEventArgs_raw, generate<IWebViewControlMoveFocusRequestedEventArgs> {};

// WebViewControlMoveFocusRequestedEventArgs
template<typename X> struct statics<WebViewControlMoveFocusRequestedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlMoveFocusRequestedEventArgs;
};
struct WebViewControlMoveFocusRequestedEventArgs : generate<WebViewControlMoveFocusRequestedEventArgs> {};

// IWebViewControlAcceleratorKeyPressedEventArgs
struct IWebViewControlAcceleratorKeyPressedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_EventType(Windows::UI::Core::CoreAcceleratorKeyEventType *value);
	virtual STDMETHODIMP _get_VirtualKey(System::VirtualKey *value);
	virtual STDMETHODIMP _get_KeyStatus(Windows::UI::Core::CorePhysicalKeyStatus *value);
	virtual STDMETHODIMP _get_RoutingStage(WebViewControlAcceleratorKeyRoutingStage *value);
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct IWebViewControlAcceleratorKeyPressedEventArgs_adaptor : X {
	union {
		struct : property {
			Windows::UI::Core::CoreAcceleratorKeyEventType get() { Windows::UI::Core::CoreAcceleratorKeyEventType value; hrcheck(enc(&IWebViewControlAcceleratorKeyPressedEventArgs_adaptor::EventType)->_get_EventType(&value)); return value; }
			Windows::UI::Core::CoreAcceleratorKeyEventType operator()() { return get(); }
			operator Windows::UI::Core::CoreAcceleratorKeyEventType () { return get(); }
		} EventType;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlAcceleratorKeyPressedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlAcceleratorKeyPressedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
		struct : property {
			Windows::UI::Core::CorePhysicalKeyStatus get() { Windows::UI::Core::CorePhysicalKeyStatus value; hrcheck(enc(&IWebViewControlAcceleratorKeyPressedEventArgs_adaptor::KeyStatus)->_get_KeyStatus(&value)); return value; }
			Windows::UI::Core::CorePhysicalKeyStatus operator()() { return get(); }
			operator Windows::UI::Core::CorePhysicalKeyStatus () { return get(); }
		} KeyStatus;
		struct : property {
			WebViewControlAcceleratorKeyRoutingStage get() { WebViewControlAcceleratorKeyRoutingStage value; hrcheck(enc(&IWebViewControlAcceleratorKeyPressedEventArgs_adaptor::RoutingStage)->_get_RoutingStage(&value)); return value; }
			WebViewControlAcceleratorKeyRoutingStage operator()() { return get(); }
			operator WebViewControlAcceleratorKeyRoutingStage () { return get(); }
		} RoutingStage;
		struct : property {
			System::VirtualKey get() { System::VirtualKey value; hrcheck(enc(&IWebViewControlAcceleratorKeyPressedEventArgs_adaptor::VirtualKey)->_get_VirtualKey(&value)); return value; }
			System::VirtualKey operator()() { return get(); }
			operator System::VirtualKey () { return get(); }
		} VirtualKey;
	};
	IWebViewControlAcceleratorKeyPressedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlAcceleratorKeyPressedEventArgs, X> : Windows::Web::UI::Interop::IWebViewControlAcceleratorKeyPressedEventArgs_adaptor<X> { typedef adapt IWebViewControlAcceleratorKeyPressedEventArgs; };
struct IWebViewControlAcceleratorKeyPressedEventArgs : IWebViewControlAcceleratorKeyPressedEventArgs_raw, generate<IWebViewControlAcceleratorKeyPressedEventArgs> {};

// WebViewControlAcceleratorKeyPressedEventArgs
template<typename X> struct statics<WebViewControlAcceleratorKeyPressedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlAcceleratorKeyPressedEventArgs;
};
struct WebViewControlAcceleratorKeyPressedEventArgs : generate<WebViewControlAcceleratorKeyPressedEventArgs> {};

// IWebViewControlProcessOptions
struct IWebViewControlProcessOptions_raw : IInspectable {
	virtual STDMETHODIMP _put_EnterpriseId(HSTRING value);
	virtual STDMETHODIMP _get_EnterpriseId(HSTRING *value);
	virtual STDMETHODIMP _put_PrivateNetworkClientServerCapability(WebViewControlProcessCapabilityState value);
	virtual STDMETHODIMP _get_PrivateNetworkClientServerCapability(WebViewControlProcessCapabilityState *value);
};
template<typename X> struct IWebViewControlProcessOptions_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebViewControlProcessOptions_adaptor::EnterpriseId)->_get_EnterpriseId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IWebViewControlProcessOptions_adaptor::EnterpriseId)->_put_EnterpriseId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} EnterpriseId;
		struct : property {
			WebViewControlProcessCapabilityState get() { WebViewControlProcessCapabilityState value; hrcheck(enc(&IWebViewControlProcessOptions_adaptor::PrivateNetworkClientServerCapability)->_get_PrivateNetworkClientServerCapability(&value)); return value; }
			WebViewControlProcessCapabilityState operator()() { return get(); }
			operator WebViewControlProcessCapabilityState () { return get(); }
			void put(WebViewControlProcessCapabilityState value) { hrcheck(enc(&IWebViewControlProcessOptions_adaptor::PrivateNetworkClientServerCapability)->_put_PrivateNetworkClientServerCapability(value)); }
			void operator=(WebViewControlProcessCapabilityState value) { put(value); }
			void operator()(WebViewControlProcessCapabilityState value) { put(value); }
		} PrivateNetworkClientServerCapability;
	};
	IWebViewControlProcessOptions_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlProcessOptions, X> : Windows::Web::UI::Interop::IWebViewControlProcessOptions_adaptor<X> { typedef adapt IWebViewControlProcessOptions; };
struct IWebViewControlProcessOptions : IWebViewControlProcessOptions_raw, generate<IWebViewControlProcessOptions> {};

// WebViewControlProcessOptions
template<typename X> struct statics<WebViewControlProcessOptions, X> : X {
	typedef typename X::root_type WebViewControlProcessOptions;
};
struct WebViewControlProcessOptions : generate<WebViewControlProcessOptions> {};
}}}}
} // namespace iso_winrt
