#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Core.Preview

#include "Windows.UI.Core.Preview.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::UI::Core::Preview::ISystemNavigationCloseRequestedPreviewEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Core::Preview::SystemNavigationCloseRequestedPreviewEventArgs> : class_type<Platform::Object, Windows::UI::Core::Preview::ISystemNavigationCloseRequestedPreviewEventArgs> {};
template<> struct def<Windows::UI::Core::Preview::ISystemNavigationManagerPreviewStatics> : interface_type<> {};
template<> struct def<Windows::UI::Core::Preview::ISystemNavigationManagerPreview> : interface_type<> {};
template<> struct def<Windows::UI::Core::Preview::SystemNavigationManagerPreview> : class_type<Platform::Object, Windows::UI::Core::Preview::ISystemNavigationManagerPreview> {};

// uuids

template<> struct uuid<Windows::UI::Core::Preview::ISystemNavigationCloseRequestedPreviewEventArgs> { define_guid(0x83D00DE1, 0xCBE5, 0x4F31, 0x84, 0x14, 0x36, 0x1D, 0xA0, 0x46, 0x51, 0x8F);};
template<> struct uuid<Windows::UI::Core::Preview::ISystemNavigationManagerPreviewStatics> { define_guid(0xE971360, 0xDF74, 0x4BCE, 0x84, 0xCB, 0xBD, 0x11, 0x81, 0xAC, 0xA, 0x71);};
template<> struct uuid<Windows::UI::Core::Preview::ISystemNavigationManagerPreview> { define_guid(0xEC5F0488, 0x6425, 0x4777, 0xA5, 0x36, 0xCB, 0x56, 0x34, 0x42, 0x7F, 0xD);};

// types

namespace Windows { namespace UI { namespace Core { namespace Preview {

// ISystemNavigationCloseRequestedPreviewEventArgs
struct ISystemNavigationCloseRequestedPreviewEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *result);
};
template<typename X> struct ISystemNavigationCloseRequestedPreviewEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISystemNavigationCloseRequestedPreviewEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISystemNavigationCloseRequestedPreviewEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
	ISystemNavigationCloseRequestedPreviewEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISystemNavigationCloseRequestedPreviewEventArgs, X> : Windows::UI::Core::Preview::ISystemNavigationCloseRequestedPreviewEventArgs_adaptor<X> { typedef adapt ISystemNavigationCloseRequestedPreviewEventArgs; };
struct ISystemNavigationCloseRequestedPreviewEventArgs : ISystemNavigationCloseRequestedPreviewEventArgs_raw, generate<ISystemNavigationCloseRequestedPreviewEventArgs> {};

// SystemNavigationCloseRequestedPreviewEventArgs
template<typename X> struct statics<SystemNavigationCloseRequestedPreviewEventArgs, X> : X {
	typedef typename X::root_type SystemNavigationCloseRequestedPreviewEventArgs;
};
struct SystemNavigationCloseRequestedPreviewEventArgs : generate<SystemNavigationCloseRequestedPreviewEventArgs> {};

// ISystemNavigationManagerPreviewStatics
struct ISystemNavigationManagerPreviewStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(SystemNavigationManagerPreview* *loader);
};

// ISystemNavigationManagerPreview
struct ISystemNavigationManagerPreview_raw : IInspectable {
	virtual STDMETHODIMP _add_CloseRequested(Foundation::EventHandler<SystemNavigationCloseRequestedPreviewEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CloseRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct ISystemNavigationManagerPreview_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<SystemNavigationCloseRequestedPreviewEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISystemNavigationManagerPreview_adaptor::CloseRequested)->_add_CloseRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISystemNavigationManagerPreview_adaptor::CloseRequested)->_remove_CloseRequested(token)); }
		} CloseRequested;
	};
	ISystemNavigationManagerPreview_adaptor() {}
};
template<typename X> struct adapt<ISystemNavigationManagerPreview, X> : Windows::UI::Core::Preview::ISystemNavigationManagerPreview_adaptor<X> { typedef adapt ISystemNavigationManagerPreview; };
struct ISystemNavigationManagerPreview : ISystemNavigationManagerPreview_raw, generate<ISystemNavigationManagerPreview> {};

// SystemNavigationManagerPreview
template<typename> struct SystemNavigationManagerPreview_statics {
	static ptr<SystemNavigationManagerPreview> GetForCurrentView() { SystemNavigationManagerPreview* loader; hrcheck(get_activation_factory<SystemNavigationManagerPreview, ISystemNavigationManagerPreviewStatics>()->_GetForCurrentView(&loader)); return from_abi(loader); }
};

template<typename X> struct statics<SystemNavigationManagerPreview, X> : X, Windows::UI::Core::Preview::SystemNavigationManagerPreview_statics<void> {
	typedef typename X::root_type SystemNavigationManagerPreview;
};
struct SystemNavigationManagerPreview : generate<SystemNavigationManagerPreview> {};
}}}}
} // namespace iso_winrt
