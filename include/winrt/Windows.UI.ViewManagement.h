#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.ViewManagement

#include "Windows.UI.ViewManagement.0.h"
#include "Windows.UI.Popups.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Enumeration {
struct DeviceInformation;
}}
namespace UI { namespace Core {
struct ICoreWindow;
}}}

// defs

template<> struct def<Windows::UI::ViewManagement::ApplicationViewState> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewOrientation> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewSwitchingOptions> : enum_type<unsigned> {};
template<> struct def<Windows::UI::ViewManagement::ViewSizePreference> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewBoundsMode> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::FullScreenSystemOverlayMode> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewWindowingMode> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewMode> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::IViewModePreferences> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IViewModePreferencesStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ViewModePreferences> : class_type<Platform::Object, Windows::UI::ViewManagement::IViewModePreferences> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics3> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewInteropStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewStatics2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewFullscreenStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewStatics3> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationView4> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationView3> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationView2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationView> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationView> : class_type<Platform::Object, Windows::UI::ViewManagement::IApplicationView, Windows::UI::ViewManagement::IApplicationView2, Windows::UI::ViewManagement::IApplicationView3, Windows::UI::ViewManagement::IApplicationView4> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs> : class_type<Platform::Object, Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs, Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs2> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewTitleBar> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewTitleBar> : class_type<Platform::Object, Windows::UI::ViewManagement::IApplicationViewTitleBar> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewSwitcher> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::ViewManagement::IActivationViewSwitcher> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ActivationViewSwitcher> : class_type<Platform::Object, Windows::UI::ViewManagement::IActivationViewSwitcher> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewTransferContext> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewTransferContextStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewTransferContext> : class_type<Platform::Object, Windows::UI::ViewManagement::IApplicationViewTransferContext> {};
template<> struct def<Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> : class_type<Platform::Object, Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs> {};
template<> struct def<Windows::UI::ViewManagement::IInputPane> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IInputPaneStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IInputPaneControl> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IInputPane2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::InputPane> : class_type<Platform::Object, Windows::UI::ViewManagement::IInputPane, Windows::UI::ViewManagement::IInputPane2, Windows::UI::ViewManagement::IInputPaneControl> {};
template<> struct def<Windows::UI::ViewManagement::IProjectionManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IProjectionManagerStatics2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ProjectionManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::ViewManagement::UserInteractionMode> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::IUIViewSettings> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IUIViewSettingsStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::UIViewSettings> : class_type<Platform::Object, Windows::UI::ViewManagement::IUIViewSettings> {};
template<> struct def<Windows::UI::ViewManagement::HandPreference> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::UIColorType> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::UIElementType> : enum_type<int> {};
template<> struct def<Windows::UI::ViewManagement::IAccessibilitySettings> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::AccessibilitySettings> : class_type<Platform::Object, Windows::UI::ViewManagement::IAccessibilitySettings> {};
template<> struct def<Windows::UI::ViewManagement::IUISettings> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IUISettings2> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IUISettings4> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IUISettings3> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::UISettings> : class_type<Platform::Object, Windows::UI::ViewManagement::IUISettings, Windows::UI::ViewManagement::IUISettings2, Windows::UI::ViewManagement::IUISettings3, Windows::UI::ViewManagement::IUISettings4> {};
template<> struct def<Windows::UI::ViewManagement::IStatusBarStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IStatusBar> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::StatusBar> : class_type<Platform::Object, Windows::UI::ViewManagement::IStatusBar> {};
template<> struct def<Windows::UI::ViewManagement::IStatusBarProgressIndicator> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::StatusBarProgressIndicator> : class_type<Platform::Object, Windows::UI::ViewManagement::IStatusBarProgressIndicator> {};
template<> struct def<Windows::UI::ViewManagement::ViewManagementViewScalingContract> : value_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewScalingStatics> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::IApplicationViewScaling> : interface_type<> {};
template<> struct def<Windows::UI::ViewManagement::ApplicationViewScaling> : class_type<Platform::Object, Windows::UI::ViewManagement::IApplicationViewScaling> {};

// uuids

template<> struct uuid<Windows::UI::ViewManagement::IViewModePreferences> { define_guid(0x878FCD3A, 0xB99, 0x42C9, 0x84, 0xD0, 0xD3, 0xF1, 0xD4, 0x3, 0x55, 0x4B);};
template<> struct uuid<Windows::UI::ViewManagement::IViewModePreferencesStatics> { define_guid(0x69B60A65, 0x5DE5, 0x40D8, 0x83, 0x6, 0x38, 0x33, 0xDF, 0x7A, 0x22, 0x74);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics> { define_guid(0x975F2F1E, 0xE656, 0x4C5E, 0xA0, 0xA1, 0x71, 0x7C, 0x6F, 0xFA, 0x7D, 0x64);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics2> { define_guid(0x60E995CD, 0x4FC2, 0x48C4, 0xB8, 0xE3, 0x39, 0x5F, 0x2B, 0x9F, 0xF, 0xC1);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics3> { define_guid(0x92059420, 0x80A7, 0x486D, 0xB2, 0x1F, 0xC7, 0xA4, 0xA2, 0x42, 0xA3, 0x83);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewInteropStatics> { define_guid(0xC446FB5D, 0x4793, 0x4896, 0xA8, 0xE2, 0xBE, 0x57, 0xA8, 0xBB, 0xF, 0x50);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewStatics> { define_guid(0x10A6306, 0xC433, 0x44E5, 0xA9, 0xF2, 0xBD, 0x84, 0xD4, 0x3, 0xA, 0x95);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewStatics2> { define_guid(0xAF338AE5, 0xCF64, 0x423C, 0x85, 0xE5, 0xF3, 0xE7, 0x24, 0x48, 0xFB, 0x23);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewFullscreenStatics> { define_guid(0xBC792EBD, 0x64FE, 0x4B65, 0xA0, 0xC0, 0x90, 0x1C, 0xE2, 0xB6, 0x86, 0x36);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewStatics3> { define_guid(0xA28D7594, 0x8C41, 0x4E13, 0x97, 0x19, 0x51, 0x64, 0x79, 0x6F, 0xE4, 0xC7);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationView4> { define_guid(0x15E5CBEC, 0x9E0F, 0x46B5, 0xBC, 0x3F, 0x9B, 0xF6, 0x53, 0xE7, 0x4B, 0x5E);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationView3> { define_guid(0x903C9CE5, 0x793A, 0x4FDF, 0xA2, 0xB2, 0xAF, 0x1A, 0xC2, 0x1E, 0x31, 0x8);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationView2> { define_guid(0xE876B196, 0xA545, 0x40DC, 0xB5, 0x94, 0x45, 0xC, 0xBA, 0x68, 0xCC, 0x0);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationView> { define_guid(0xD222D519, 0x4361, 0x451E, 0x96, 0xC4, 0x60, 0xF4, 0xF9, 0x74, 0x2D, 0xB0);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs2> { define_guid(0x1C199ECC, 0x6DC1, 0x40F4, 0xAF, 0xEE, 0x7, 0xD9, 0xEA, 0x29, 0x64, 0x30);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs> { define_guid(0x514449EC, 0x7EA2, 0x4DE7, 0xA6, 0xA6, 0x7D, 0xFB, 0xAA, 0xEB, 0xB6, 0xFB);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewTitleBar> { define_guid(0x924AC0, 0x932B, 0x4A6B, 0x9C, 0x4B, 0xDC, 0x38, 0xC8, 0x24, 0x78, 0xCE);};
template<> struct uuid<Windows::UI::ViewManagement::IActivationViewSwitcher> { define_guid(0xDCA71BB6, 0x7350, 0x492B, 0xAA, 0xC7, 0xC8, 0xA1, 0x3D, 0x72, 0x24, 0xAD);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewTransferContext> { define_guid(0x8574BC63, 0x3C17, 0x408E, 0x94, 0x8, 0x8A, 0x1A, 0x9E, 0xA8, 0x1B, 0xFA);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewTransferContextStatics> { define_guid(0x15A89D92, 0xDD79, 0x4B0B, 0xBC, 0x47, 0xD5, 0xF1, 0x95, 0xF1, 0x46, 0x61);};
template<> struct uuid<Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs> { define_guid(0xD243E016, 0xD907, 0x4FCC, 0xBB, 0x8D, 0xF7, 0x7B, 0xAA, 0x50, 0x28, 0xF1);};
template<> struct uuid<Windows::UI::ViewManagement::IInputPane> { define_guid(0x640ADA70, 0x6F3, 0x4C87, 0xA6, 0x78, 0x98, 0x29, 0xC9, 0x12, 0x7C, 0x28);};
template<> struct uuid<Windows::UI::ViewManagement::IInputPaneStatics> { define_guid(0x95F4AF3A, 0xEF47, 0x424A, 0x97, 0x41, 0xFD, 0x28, 0x15, 0xEB, 0xA2, 0xBD);};
template<> struct uuid<Windows::UI::ViewManagement::IInputPaneControl> { define_guid(0x88BB24F, 0x962F, 0x489D, 0xAA, 0x6E, 0xC6, 0xBE, 0x1A, 0xA, 0x6E, 0x52);};
template<> struct uuid<Windows::UI::ViewManagement::IInputPane2> { define_guid(0x8A6B3F26, 0x7090, 0x4793, 0x94, 0x4C, 0xC3, 0xF2, 0xCD, 0xE2, 0x62, 0x76);};
template<> struct uuid<Windows::UI::ViewManagement::IProjectionManagerStatics> { define_guid(0xB65F913D, 0xE2F0, 0x4FFD, 0xBA, 0x95, 0x34, 0x24, 0x16, 0x47, 0xE4, 0x5C);};
template<> struct uuid<Windows::UI::ViewManagement::IProjectionManagerStatics2> { define_guid(0xF33D2F43, 0x2749, 0x4CDE, 0xB9, 0x77, 0xC0, 0xC4, 0x1E, 0x74, 0x15, 0xD1);};
template<> struct uuid<Windows::UI::ViewManagement::IUIViewSettings> { define_guid(0xC63657F6, 0x8850, 0x470D, 0x88, 0xF8, 0x45, 0x5E, 0x16, 0xEA, 0x2C, 0x26);};
template<> struct uuid<Windows::UI::ViewManagement::IUIViewSettingsStatics> { define_guid(0x595C97A5, 0xF8F6, 0x41CF, 0xB0, 0xFB, 0xAA, 0xCD, 0xB8, 0x1F, 0xD5, 0xF6);};
template<> struct uuid<Windows::UI::ViewManagement::IAccessibilitySettings> { define_guid(0xFE0E8147, 0xC4C0, 0x4562, 0xB9, 0x62, 0x13, 0x27, 0xB5, 0x2A, 0xD5, 0xB9);};
template<> struct uuid<Windows::UI::ViewManagement::IUISettings> { define_guid(0x85361600, 0x1C63, 0x4627, 0xBC, 0xB1, 0x3A, 0x89, 0xE0, 0xBC, 0x9C, 0x55);};
template<> struct uuid<Windows::UI::ViewManagement::IUISettings2> { define_guid(0xBAD82401, 0x2721, 0x44F9, 0xBB, 0x91, 0x2B, 0xB2, 0x28, 0xBE, 0x44, 0x2F);};
template<> struct uuid<Windows::UI::ViewManagement::IUISettings4> { define_guid(0x52BB3002, 0x919B, 0x4D6B, 0x9B, 0x78, 0x8D, 0xD6, 0x6F, 0xF4, 0xB9, 0x3B);};
template<> struct uuid<Windows::UI::ViewManagement::IUISettings3> { define_guid(0x3021BE4, 0x5254, 0x4781, 0x81, 0x94, 0x51, 0x68, 0xF7, 0xD0, 0x6D, 0x7B);};
template<> struct uuid<Windows::UI::ViewManagement::IStatusBarStatics> { define_guid(0x8B463FDF, 0x422F, 0x4561, 0x88, 0x6, 0xFB, 0x12, 0x89, 0xCA, 0xDF, 0xB7);};
template<> struct uuid<Windows::UI::ViewManagement::IStatusBar> { define_guid(0xFFCC5BF, 0x98D0, 0x4864, 0xB1, 0xE8, 0xB3, 0xF4, 0x2, 0xB, 0xE8, 0xB4);};
template<> struct uuid<Windows::UI::ViewManagement::IStatusBarProgressIndicator> { define_guid(0x76CB2670, 0xA3D7, 0x49CF, 0x82, 0x0, 0x4F, 0x3E, 0xED, 0xCA, 0x27, 0xBB);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewScalingStatics> { define_guid(0xB08FECF0, 0xB946, 0x45C8, 0xA5, 0xE3, 0x71, 0xF5, 0xAA, 0x78, 0xF8, 0x61);};
template<> struct uuid<Windows::UI::ViewManagement::IApplicationViewScaling> { define_guid(0x1D0DDC23, 0x23F3, 0x4B2D, 0x84, 0xFE, 0x74, 0xBF, 0x37, 0xB4, 0x8B, 0x66);};

// types

namespace Windows { namespace UI { namespace ViewManagement {

// IViewModePreferences
struct IViewModePreferences_raw : IInspectable {
	virtual STDMETHODIMP _get_ViewSizePreference(ViewManagement::ViewSizePreference *value);
	virtual STDMETHODIMP _put_ViewSizePreference(ViewManagement::ViewSizePreference value);
	virtual STDMETHODIMP _get_CustomSize(Foundation::Size *value);
	virtual STDMETHODIMP _put_CustomSize(Foundation::Size value);
};
template<typename X> struct IViewModePreferences_adaptor : X {
	union {
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IViewModePreferences_adaptor::CustomSize)->_get_CustomSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
			void put(const Foundation::Size& value) { hrcheck(enc(&IViewModePreferences_adaptor::CustomSize)->_put_CustomSize(value)); }
			void operator=(const Foundation::Size& value) { put(value); }
			void operator()(const Foundation::Size& value) { put(value); }
		} CustomSize;
		struct : property {
			ViewManagement::ViewSizePreference get() { ViewManagement::ViewSizePreference value; hrcheck(enc(&IViewModePreferences_adaptor::ViewSizePreference)->_get_ViewSizePreference(&value)); return value; }
			ViewManagement::ViewSizePreference operator()() { return get(); }
			operator ViewManagement::ViewSizePreference () { return get(); }
			void put(ViewManagement::ViewSizePreference value) { hrcheck(enc(&IViewModePreferences_adaptor::ViewSizePreference)->_put_ViewSizePreference(value)); }
			void operator=(ViewManagement::ViewSizePreference value) { put(value); }
			void operator()(ViewManagement::ViewSizePreference value) { put(value); }
		} ViewSizePreference;
	};
	IViewModePreferences_adaptor() {}
};
template<typename X> struct adapt<IViewModePreferences, X> : Windows::UI::ViewManagement::IViewModePreferences_adaptor<X> { typedef adapt IViewModePreferences; };
struct IViewModePreferences : IViewModePreferences_raw, generate<IViewModePreferences> {};

// IViewModePreferencesStatics
struct IViewModePreferencesStatics : IInspectable {
	virtual STDMETHODIMP _CreateDefault(ApplicationViewMode mode, ViewModePreferences* *result);
};

// ViewModePreferences
template<typename> struct ViewModePreferences_statics {
	static ptr<ViewModePreferences> CreateDefault(ApplicationViewMode mode) { ViewModePreferences* result; hrcheck(get_activation_factory<ViewModePreferences, IViewModePreferencesStatics>()->_CreateDefault(mode, &result)); return from_abi(result); }
};

template<typename X> struct statics<ViewModePreferences, X> : X, Windows::UI::ViewManagement::ViewModePreferences_statics<void> {
	typedef typename X::root_type ViewModePreferences;
};
struct ViewModePreferences : generate<ViewModePreferences> {};

// IApplicationViewSwitcherStatics
struct IApplicationViewSwitcherStatics : IInspectable {
	virtual STDMETHODIMP _DisableShowingMainViewOnActivation();
	virtual STDMETHODIMP _TryShowAsStandaloneAsync(int viewId, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryShowAsStandaloneWithSizePreferenceAsync(int viewId, ViewSizePreference sizePreference, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync(int viewId, ViewSizePreference sizePreference, int anchorViewId, ViewSizePreference anchorSizePreference, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _SwitchAsync(int viewId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _SwitchFromViewAsync(int toViewId, int fromViewId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _SwitchFromViewWithOptionsAsync(int toViewId, int fromViewId, ApplicationViewSwitchingOptions options, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, ApplicationViewSwitchingOptions options, Foundation::IAsyncOperation<bool>* *operation);
};

// IApplicationViewSwitcherStatics2
struct IApplicationViewSwitcherStatics2 : IInspectable {
	virtual STDMETHODIMP _DisableSystemViewActivationPolicy();
};

// IApplicationViewSwitcherStatics3
struct IApplicationViewSwitcherStatics3 : IInspectable {
	virtual STDMETHODIMP _TryShowAsViewModeAsync(int viewId, ApplicationViewMode viewMode, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryShowAsViewModeWithPreferencesAsync(int viewId, ApplicationViewMode viewMode, ViewModePreferences* viewModePreferences, Foundation::IAsyncOperation<bool>* *operation);
};

// IApplicationViewInteropStatics
struct IApplicationViewInteropStatics : IInspectable {
	virtual STDMETHODIMP _GetApplicationViewIdForWindow(UI::Core::ICoreWindow* window, int *id);
};

// IApplicationViewStatics
struct IApplicationViewStatics : IInspectable {
	virtual STDMETHODIMP _get_Value(ApplicationViewState *value);
	virtual STDMETHODIMP _TryUnsnap(bool *success);
};

// IApplicationViewStatics2
struct IApplicationViewStatics2 : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(ApplicationView* *current);
	virtual STDMETHODIMP _get_TerminateAppOnFinalViewClose(bool *value);
	virtual STDMETHODIMP _put_TerminateAppOnFinalViewClose(bool value);
};

// IApplicationViewFullscreenStatics
struct IApplicationViewFullscreenStatics : IInspectable {
	virtual STDMETHODIMP _TryUnsnapToFullscreen(bool *success);
};

// IApplicationViewStatics3
struct IApplicationViewStatics3 : IInspectable {
	virtual STDMETHODIMP _get_PreferredLaunchWindowingMode(ApplicationViewWindowingMode *value);
	virtual STDMETHODIMP _put_PreferredLaunchWindowingMode(ApplicationViewWindowingMode value);
	virtual STDMETHODIMP _get_PreferredLaunchViewSize(Foundation::Size *value);
	virtual STDMETHODIMP _put_PreferredLaunchViewSize(Foundation::Size value);
};

// IApplicationView4
struct IApplicationView4_raw : IInspectable {
	virtual STDMETHODIMP _get_ViewMode(ApplicationViewMode *value);
	virtual STDMETHODIMP _IsViewModeSupported(ApplicationViewMode viewMode, bool *isViewModeSupported);
	virtual STDMETHODIMP _TryEnterViewModeAsync(ApplicationViewMode viewMode, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryEnterViewModeWithPreferencesAsync(ApplicationViewMode viewMode, ViewModePreferences* viewModePreferences, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryConsolidateAsync(Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IApplicationView4_adaptor : X {
	union {
		struct : property {
			ApplicationViewMode get() { ApplicationViewMode value; hrcheck(enc(&IApplicationView4_adaptor::ViewMode)->_get_ViewMode(&value)); return value; }
			ApplicationViewMode operator()() { return get(); }
			operator ApplicationViewMode () { return get(); }
		} ViewMode;
	};
	bool IsViewModeSupported(ApplicationViewMode viewMode) { bool isViewModeSupported; hrcheck(X::get()->_IsViewModeSupported(viewMode, &isViewModeSupported)); return isViewModeSupported; }
	ptr<Foundation::IAsyncOperation<bool>> TryEnterViewModeAsync(ApplicationViewMode viewMode) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryEnterViewModeAsync(viewMode, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryEnterViewModeAsync(ApplicationViewMode viewMode, pptr<ViewModePreferences> viewModePreferences) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryEnterViewModeWithPreferencesAsync(viewMode, viewModePreferences, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryConsolidateAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryConsolidateAsync(&operation)); return from_abi(operation); }
	IApplicationView4_adaptor() {}
};
template<typename X> struct adapt<IApplicationView4, X> : Windows::UI::ViewManagement::IApplicationView4_adaptor<X> { typedef adapt IApplicationView4; };
struct IApplicationView4 : IApplicationView4_raw, generate<IApplicationView4> {};

// IApplicationView3
struct IApplicationView3_raw : IInspectable {
	virtual STDMETHODIMP _get_TitleBar(ApplicationViewTitleBar* *value);
	virtual STDMETHODIMP _get_FullScreenSystemOverlayMode(ViewManagement::FullScreenSystemOverlayMode *value);
	virtual STDMETHODIMP _put_FullScreenSystemOverlayMode(ViewManagement::FullScreenSystemOverlayMode value);
	virtual STDMETHODIMP _get_IsFullScreenMode(bool *value);
	virtual STDMETHODIMP _TryEnterFullScreenMode(bool *success);
	virtual STDMETHODIMP _ExitFullScreenMode();
	virtual STDMETHODIMP _ShowStandardSystemOverlays();
	virtual STDMETHODIMP _TryResizeView(Foundation::Size value, bool *success);
	virtual STDMETHODIMP _SetPreferredMinSize(Foundation::Size minSize);
};
template<typename X> struct IApplicationView3_adaptor : X {
	union {
		struct : property {
			ViewManagement::FullScreenSystemOverlayMode get() { ViewManagement::FullScreenSystemOverlayMode value; hrcheck(enc(&IApplicationView3_adaptor::FullScreenSystemOverlayMode)->_get_FullScreenSystemOverlayMode(&value)); return value; }
			ViewManagement::FullScreenSystemOverlayMode operator()() { return get(); }
			operator ViewManagement::FullScreenSystemOverlayMode () { return get(); }
			void put(ViewManagement::FullScreenSystemOverlayMode value) { hrcheck(enc(&IApplicationView3_adaptor::FullScreenSystemOverlayMode)->_put_FullScreenSystemOverlayMode(value)); }
			void operator=(ViewManagement::FullScreenSystemOverlayMode value) { put(value); }
			void operator()(ViewManagement::FullScreenSystemOverlayMode value) { put(value); }
		} FullScreenSystemOverlayMode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationView3_adaptor::IsFullScreenMode)->_get_IsFullScreenMode(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsFullScreenMode;
		struct : property {
			ptr<ApplicationViewTitleBar> get() { ApplicationViewTitleBar* value; hrcheck(enc(&IApplicationView3_adaptor::TitleBar)->_get_TitleBar(&value)); return from_abi(value); }
			ptr<ApplicationViewTitleBar> operator()() { return get(); }
			operator ptr<ApplicationViewTitleBar> () { return get(); }
			ptr<ApplicationViewTitleBar> operator->() { return get(); }
		} TitleBar;
	};
	bool TryEnterFullScreenMode() { bool success; hrcheck(X::get()->_TryEnterFullScreenMode(&success)); return success; }
	void ExitFullScreenMode() { hrcheck(X::get()->_ExitFullScreenMode()); }
	void ShowStandardSystemOverlays() { hrcheck(X::get()->_ShowStandardSystemOverlays()); }
	bool TryResizeView(const Foundation::Size& value) { bool success; hrcheck(X::get()->_TryResizeView(value, &success)); return success; }
	void SetPreferredMinSize(const Foundation::Size& minSize) { hrcheck(X::get()->_SetPreferredMinSize(minSize)); }
	IApplicationView3_adaptor() {}
};
template<typename X> struct adapt<IApplicationView3, X> : Windows::UI::ViewManagement::IApplicationView3_adaptor<X> { typedef adapt IApplicationView3; };
struct IApplicationView3 : IApplicationView3_raw, generate<IApplicationView3> {};

// IApplicationView2
struct IApplicationView2_raw : IInspectable {
	virtual STDMETHODIMP _get_SuppressSystemOverlays(bool *value);
	virtual STDMETHODIMP _put_SuppressSystemOverlays(bool value);
	virtual STDMETHODIMP _get_VisibleBounds(Foundation::Rect *value);
	virtual STDMETHODIMP _add_VisibleBoundsChanged(Foundation::TypedEventHandler<ApplicationView*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VisibleBoundsChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _SetDesiredBoundsMode(ApplicationViewBoundsMode boundsMode, bool *success);
	virtual STDMETHODIMP _get_DesiredBoundsMode(ApplicationViewBoundsMode *value);
};
template<typename X> struct IApplicationView2_adaptor : X {
	union {
		struct : property {
			ApplicationViewBoundsMode get() { ApplicationViewBoundsMode value; hrcheck(enc(&IApplicationView2_adaptor::DesiredBoundsMode)->_get_DesiredBoundsMode(&value)); return value; }
			ApplicationViewBoundsMode operator()() { return get(); }
			operator ApplicationViewBoundsMode () { return get(); }
		} DesiredBoundsMode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationView2_adaptor::SuppressSystemOverlays)->_get_SuppressSystemOverlays(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IApplicationView2_adaptor::SuppressSystemOverlays)->_put_SuppressSystemOverlays(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SuppressSystemOverlays;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IApplicationView2_adaptor::VisibleBounds)->_get_VisibleBounds(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} VisibleBounds;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ApplicationView>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IApplicationView2_adaptor::VisibleBoundsChanged)->_add_VisibleBoundsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IApplicationView2_adaptor::VisibleBoundsChanged)->_remove_VisibleBoundsChanged(token)); }
		} VisibleBoundsChanged;
	};
	bool SetDesiredBoundsMode(ApplicationViewBoundsMode boundsMode) { bool success; hrcheck(X::get()->_SetDesiredBoundsMode(boundsMode, &success)); return success; }
	IApplicationView2_adaptor() {}
};
template<typename X> struct adapt<IApplicationView2, X> : Windows::UI::ViewManagement::IApplicationView2_adaptor<X> { typedef adapt IApplicationView2; };
struct IApplicationView2 : IApplicationView2_raw, generate<IApplicationView2> {};

// IApplicationView
struct IApplicationView_raw : IInspectable {
	virtual STDMETHODIMP _get_Orientation(ApplicationViewOrientation *value);
	virtual STDMETHODIMP _get_AdjacentToLeftDisplayEdge(bool *value);
	virtual STDMETHODIMP _get_AdjacentToRightDisplayEdge(bool *value);
	virtual STDMETHODIMP _get_IsFullScreen(bool *value);
	virtual STDMETHODIMP _get_IsOnLockScreen(bool *value);
	virtual STDMETHODIMP _get_IsScreenCaptureEnabled(bool *value);
	virtual STDMETHODIMP _put_IsScreenCaptureEnabled(bool value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Id(int *value);
	virtual STDMETHODIMP _add_Consolidated(Foundation::TypedEventHandler<ApplicationView*, ApplicationViewConsolidatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Consolidated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IApplicationView_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationView_adaptor::AdjacentToLeftDisplayEdge)->_get_AdjacentToLeftDisplayEdge(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AdjacentToLeftDisplayEdge;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationView_adaptor::AdjacentToRightDisplayEdge)->_get_AdjacentToRightDisplayEdge(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AdjacentToRightDisplayEdge;
		struct : property {
			int get() { int value; hrcheck(enc(&IApplicationView_adaptor::Id)->_get_Id(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationView_adaptor::IsFullScreen)->_get_IsFullScreen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsFullScreen;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationView_adaptor::IsOnLockScreen)->_get_IsOnLockScreen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOnLockScreen;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationView_adaptor::IsScreenCaptureEnabled)->_get_IsScreenCaptureEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IApplicationView_adaptor::IsScreenCaptureEnabled)->_put_IsScreenCaptureEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsScreenCaptureEnabled;
		struct : property {
			ApplicationViewOrientation get() { ApplicationViewOrientation value; hrcheck(enc(&IApplicationView_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			ApplicationViewOrientation operator()() { return get(); }
			operator ApplicationViewOrientation () { return get(); }
		} Orientation;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IApplicationView_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IApplicationView_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ApplicationView>, ptr<ApplicationViewConsolidatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IApplicationView_adaptor::Consolidated)->_add_Consolidated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IApplicationView_adaptor::Consolidated)->_remove_Consolidated(token)); }
		} Consolidated;
	};
	IApplicationView_adaptor() {}
};
template<typename X> struct adapt<IApplicationView, X> : Windows::UI::ViewManagement::IApplicationView_adaptor<X> { typedef adapt IApplicationView; };
struct IApplicationView : IApplicationView_raw, generate<IApplicationView> {};

// ApplicationView
template<typename> struct ApplicationView_statics {
	static struct _Value : property {
		ApplicationViewState get() { ApplicationViewState value; hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics>()->_get_Value(&value)); return value; }
		ApplicationViewState operator()() { return get(); }
		operator ApplicationViewState () { return get(); }
	} Value;
	static struct _TerminateAppOnFinalViewClose : property {
		bool get() { bool value; hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics2>()->_get_TerminateAppOnFinalViewClose(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics2>()->_put_TerminateAppOnFinalViewClose(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} TerminateAppOnFinalViewClose;
	static struct _PreferredLaunchViewSize : property {
		Foundation::Size get() { Foundation::Size value; hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics3>()->_get_PreferredLaunchViewSize(&value)); return value; }
		Foundation::Size operator()() { return get(); }
		operator Foundation::Size () { return get(); }
		void put(const Foundation::Size& value) { hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics3>()->_put_PreferredLaunchViewSize(value)); }
		void operator=(const Foundation::Size& value) { put(value); }
		void operator()(const Foundation::Size& value) { put(value); }
	} PreferredLaunchViewSize;
	static struct _PreferredLaunchWindowingMode : property {
		ApplicationViewWindowingMode get() { ApplicationViewWindowingMode value; hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics3>()->_get_PreferredLaunchWindowingMode(&value)); return value; }
		ApplicationViewWindowingMode operator()() { return get(); }
		operator ApplicationViewWindowingMode () { return get(); }
		void put(ApplicationViewWindowingMode value) { hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics3>()->_put_PreferredLaunchWindowingMode(value)); }
		void operator=(ApplicationViewWindowingMode value) { put(value); }
		void operator()(ApplicationViewWindowingMode value) { put(value); }
	} PreferredLaunchWindowingMode;
	static bool TryUnsnapToFullscreen() { bool success; hrcheck(get_activation_factory<ApplicationView, IApplicationViewFullscreenStatics>()->_TryUnsnapToFullscreen(&success)); return success; }
	static int GetApplicationViewIdForWindow(pptr<UI::Core::ICoreWindow> window) { int id; hrcheck(get_activation_factory<ApplicationView, IApplicationViewInteropStatics>()->_GetApplicationViewIdForWindow(window, &id)); return id; }
	static ptr<ApplicationView> GetForCurrentView() { ApplicationView* current; hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics2>()->_GetForCurrentView(&current)); return from_abi(current); }
	static bool TryUnsnap() { bool success; hrcheck(get_activation_factory<ApplicationView, IApplicationViewStatics>()->_TryUnsnap(&success)); return success; }
};
template<typename X> typename ApplicationView_statics<X>::_Value ApplicationView_statics<X>::Value;
template<typename X> typename ApplicationView_statics<X>::_TerminateAppOnFinalViewClose ApplicationView_statics<X>::TerminateAppOnFinalViewClose;
template<typename X> typename ApplicationView_statics<X>::_PreferredLaunchViewSize ApplicationView_statics<X>::PreferredLaunchViewSize;
template<typename X> typename ApplicationView_statics<X>::_PreferredLaunchWindowingMode ApplicationView_statics<X>::PreferredLaunchWindowingMode;

template<typename X> struct statics<ApplicationView, X> : X, Windows::UI::ViewManagement::ApplicationView_statics<void> {
	typedef typename X::root_type ApplicationView;
};
struct ApplicationView : generate<ApplicationView> {
	using IApplicationView4::TryEnterViewModeAsync;
};

// IApplicationViewConsolidatedEventArgs2
struct IApplicationViewConsolidatedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsAppInitiated(bool *value);
};
template<typename X> struct IApplicationViewConsolidatedEventArgs2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationViewConsolidatedEventArgs2_adaptor::IsAppInitiated)->_get_IsAppInitiated(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAppInitiated;
	};
	IApplicationViewConsolidatedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IApplicationViewConsolidatedEventArgs2, X> : Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs2_adaptor<X> { typedef adapt IApplicationViewConsolidatedEventArgs2; };
struct IApplicationViewConsolidatedEventArgs2 : IApplicationViewConsolidatedEventArgs2_raw, generate<IApplicationViewConsolidatedEventArgs2> {};

// IApplicationViewConsolidatedEventArgs
struct IApplicationViewConsolidatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsUserInitiated(bool *value);
};
template<typename X> struct IApplicationViewConsolidatedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IApplicationViewConsolidatedEventArgs_adaptor::IsUserInitiated)->_get_IsUserInitiated(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsUserInitiated;
	};
	IApplicationViewConsolidatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IApplicationViewConsolidatedEventArgs, X> : Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs_adaptor<X> { typedef adapt IApplicationViewConsolidatedEventArgs; };
struct IApplicationViewConsolidatedEventArgs : IApplicationViewConsolidatedEventArgs_raw, generate<IApplicationViewConsolidatedEventArgs> {};

// ApplicationViewConsolidatedEventArgs
template<typename X> struct statics<ApplicationViewConsolidatedEventArgs, X> : X {
	typedef typename X::root_type ApplicationViewConsolidatedEventArgs;
};
struct ApplicationViewConsolidatedEventArgs : generate<ApplicationViewConsolidatedEventArgs> {};

// IApplicationViewTitleBar
struct IApplicationViewTitleBar_raw : IInspectable {
	virtual STDMETHODIMP _put_ForegroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ForegroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_BackgroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_BackgroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonForegroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonForegroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonBackgroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonBackgroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonHoverForegroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonHoverForegroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonHoverBackgroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonHoverBackgroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonPressedForegroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonPressedForegroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonPressedBackgroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonPressedBackgroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_InactiveForegroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_InactiveForegroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_InactiveBackgroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_InactiveBackgroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonInactiveForegroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonInactiveForegroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ButtonInactiveBackgroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ButtonInactiveBackgroundColor(Foundation::IReference<Color>* *value);
};
template<typename X> struct IApplicationViewTitleBar_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::BackgroundColor)->_put_BackgroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} BackgroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonBackgroundColor)->_get_ButtonBackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonBackgroundColor)->_put_ButtonBackgroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonBackgroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonForegroundColor)->_get_ButtonForegroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonForegroundColor)->_put_ButtonForegroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonForegroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonHoverBackgroundColor)->_get_ButtonHoverBackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonHoverBackgroundColor)->_put_ButtonHoverBackgroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonHoverBackgroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonHoverForegroundColor)->_get_ButtonHoverForegroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonHoverForegroundColor)->_put_ButtonHoverForegroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonHoverForegroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonInactiveBackgroundColor)->_get_ButtonInactiveBackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonInactiveBackgroundColor)->_put_ButtonInactiveBackgroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonInactiveBackgroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonInactiveForegroundColor)->_get_ButtonInactiveForegroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonInactiveForegroundColor)->_put_ButtonInactiveForegroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonInactiveForegroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonPressedBackgroundColor)->_get_ButtonPressedBackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonPressedBackgroundColor)->_put_ButtonPressedBackgroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonPressedBackgroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonPressedForegroundColor)->_get_ButtonPressedForegroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ButtonPressedForegroundColor)->_put_ButtonPressedForegroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ButtonPressedForegroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::ForegroundColor)->_get_ForegroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::ForegroundColor)->_put_ForegroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ForegroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::InactiveBackgroundColor)->_get_InactiveBackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::InactiveBackgroundColor)->_put_InactiveBackgroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} InactiveBackgroundColor;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IApplicationViewTitleBar_adaptor::InactiveForegroundColor)->_get_InactiveForegroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IApplicationViewTitleBar_adaptor::InactiveForegroundColor)->_put_InactiveForegroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} InactiveForegroundColor;
	};
	IApplicationViewTitleBar_adaptor() {}
};
template<typename X> struct adapt<IApplicationViewTitleBar, X> : Windows::UI::ViewManagement::IApplicationViewTitleBar_adaptor<X> { typedef adapt IApplicationViewTitleBar; };
struct IApplicationViewTitleBar : IApplicationViewTitleBar_raw, generate<IApplicationViewTitleBar> {};

// ApplicationViewTitleBar
template<typename X> struct statics<ApplicationViewTitleBar, X> : X {
	typedef typename X::root_type ApplicationViewTitleBar;
};
struct ApplicationViewTitleBar : generate<ApplicationViewTitleBar> {};

// ApplicationViewSwitcher
template<typename> struct ApplicationViewSwitcher_statics {
	static ptr<Foundation::IAsyncOperation<bool>> TryShowAsViewModeAsync(int viewId, ApplicationViewMode viewMode) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics3>()->_TryShowAsViewModeAsync(viewId, viewMode, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> TryShowAsViewModeAsync(int viewId, ApplicationViewMode viewMode, pptr<ViewModePreferences> viewModePreferences) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics3>()->_TryShowAsViewModeWithPreferencesAsync(viewId, viewMode, viewModePreferences, &operation)); return from_abi(operation); }
	static void DisableSystemViewActivationPolicy() { hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics2>()->_DisableSystemViewActivationPolicy()); }
	static void DisableShowingMainViewOnActivation() { hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_DisableShowingMainViewOnActivation()); }
	static ptr<Foundation::IAsyncOperation<bool>> TryShowAsStandaloneAsync(int viewId) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_TryShowAsStandaloneAsync(viewId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> TryShowAsStandaloneAsync(int viewId, ViewSizePreference sizePreference) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_TryShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> TryShowAsStandaloneAsync(int viewId, ViewSizePreference sizePreference, int anchorViewId, ViewSizePreference anchorSizePreference) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_TryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync(viewId, sizePreference, anchorViewId, anchorSizePreference, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> SwitchAsync(int viewId) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_SwitchAsync(viewId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> SwitchAsync(int toViewId, int fromViewId) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_SwitchFromViewAsync(toViewId, fromViewId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> SwitchAsync(int toViewId, int fromViewId, ApplicationViewSwitchingOptions options) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_SwitchFromViewWithOptionsAsync(toViewId, fromViewId, options, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, ApplicationViewSwitchingOptions options) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>()->_PrepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<ApplicationViewSwitcher, X> : X, Windows::UI::ViewManagement::ApplicationViewSwitcher_statics<void> {
	typedef typename X::root_type ApplicationViewSwitcher;
};
struct ApplicationViewSwitcher : generate<ApplicationViewSwitcher> {};

// IActivationViewSwitcher
struct IActivationViewSwitcher_raw : IInspectable {
	virtual STDMETHODIMP _ShowAsStandaloneAsync(int viewId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ShowAsStandaloneWithSizePreferenceAsync(int viewId, ViewSizePreference sizePreference, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _IsViewPresentedOnActivationVirtualDesktop(int viewId, bool *value);
};
template<typename X> struct IActivationViewSwitcher_adaptor : X {
	ptr<Foundation::IAsyncAction> ShowAsStandaloneAsync(int viewId) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ShowAsStandaloneAsync(viewId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ShowAsStandaloneAsync(int viewId, ViewSizePreference sizePreference) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference, &operation)); return from_abi(operation); }
	bool IsViewPresentedOnActivationVirtualDesktop(int viewId) { bool value; hrcheck(X::get()->_IsViewPresentedOnActivationVirtualDesktop(viewId, &value)); return value; }
};
template<typename X> struct adapt<IActivationViewSwitcher, X> : Windows::UI::ViewManagement::IActivationViewSwitcher_adaptor<X> { typedef adapt IActivationViewSwitcher; };
struct IActivationViewSwitcher : IActivationViewSwitcher_raw, generate<IActivationViewSwitcher> {};

// ActivationViewSwitcher
template<typename X> struct statics<ActivationViewSwitcher, X> : X {
	typedef typename X::root_type ActivationViewSwitcher;
};
struct ActivationViewSwitcher : generate<ActivationViewSwitcher> {
	using IActivationViewSwitcher::ShowAsStandaloneAsync;
};

// IApplicationViewTransferContext
struct IApplicationViewTransferContext_raw : IInspectable {
	virtual STDMETHODIMP _get_ViewId(int *value);
	virtual STDMETHODIMP _put_ViewId(int value);
};
template<typename X> struct IApplicationViewTransferContext_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IApplicationViewTransferContext_adaptor::ViewId)->_get_ViewId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IApplicationViewTransferContext_adaptor::ViewId)->_put_ViewId(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ViewId;
	};
	IApplicationViewTransferContext_adaptor() {}
};
template<typename X> struct adapt<IApplicationViewTransferContext, X> : Windows::UI::ViewManagement::IApplicationViewTransferContext_adaptor<X> { typedef adapt IApplicationViewTransferContext; };
struct IApplicationViewTransferContext : IApplicationViewTransferContext_raw, generate<IApplicationViewTransferContext> {};

// IApplicationViewTransferContextStatics
struct IApplicationViewTransferContextStatics : IInspectable {
	virtual STDMETHODIMP _get_DataPackageFormatId(HSTRING *value);
};

// ApplicationViewTransferContext
template<typename> struct ApplicationViewTransferContext_statics {
	static struct _DataPackageFormatId : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ApplicationViewTransferContext, IApplicationViewTransferContextStatics>()->_get_DataPackageFormatId(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DataPackageFormatId;
};
template<typename X> typename ApplicationViewTransferContext_statics<X>::_DataPackageFormatId ApplicationViewTransferContext_statics<X>::DataPackageFormatId;

template<typename X> struct statics<ApplicationViewTransferContext, X> : X, Windows::UI::ViewManagement::ApplicationViewTransferContext_statics<void> {
	typedef typename X::root_type ApplicationViewTransferContext;
};
struct ApplicationViewTransferContext : generate<ApplicationViewTransferContext> {};

// IInputPaneVisibilityEventArgs
struct IInputPaneVisibilityEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_OccludedRect(Foundation::Rect *value);
	virtual STDMETHODIMP _put_EnsuredFocusedElementInView(bool value);
	virtual STDMETHODIMP _get_EnsuredFocusedElementInView(bool *value);
};
template<typename X> struct IInputPaneVisibilityEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInputPaneVisibilityEventArgs_adaptor::EnsuredFocusedElementInView)->_get_EnsuredFocusedElementInView(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInputPaneVisibilityEventArgs_adaptor::EnsuredFocusedElementInView)->_put_EnsuredFocusedElementInView(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} EnsuredFocusedElementInView;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IInputPaneVisibilityEventArgs_adaptor::OccludedRect)->_get_OccludedRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} OccludedRect;
	};
	IInputPaneVisibilityEventArgs_adaptor() {}
};
template<typename X> struct adapt<IInputPaneVisibilityEventArgs, X> : Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs_adaptor<X> { typedef adapt IInputPaneVisibilityEventArgs; };
struct IInputPaneVisibilityEventArgs : IInputPaneVisibilityEventArgs_raw, generate<IInputPaneVisibilityEventArgs> {};

// InputPaneVisibilityEventArgs
template<typename X> struct statics<InputPaneVisibilityEventArgs, X> : X {
	typedef typename X::root_type InputPaneVisibilityEventArgs;
};
struct InputPaneVisibilityEventArgs : generate<InputPaneVisibilityEventArgs> {};

// IInputPane
struct IInputPane_raw : IInspectable {
	virtual STDMETHODIMP _add_Showing(Foundation::TypedEventHandler<InputPane*, InputPaneVisibilityEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Showing(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Hiding(Foundation::TypedEventHandler<InputPane*, InputPaneVisibilityEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Hiding(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_OccludedRect(Foundation::Rect *value);
};
template<typename X> struct IInputPane_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IInputPane_adaptor::OccludedRect)->_get_OccludedRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} OccludedRect;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InputPane>, ptr<InputPaneVisibilityEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IInputPane_adaptor::Hiding)->_add_Hiding(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IInputPane_adaptor::Hiding)->_remove_Hiding(token)); }
		} Hiding;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<InputPane>, ptr<InputPaneVisibilityEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IInputPane_adaptor::Showing)->_add_Showing(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IInputPane_adaptor::Showing)->_remove_Showing(token)); }
		} Showing;
	};
	IInputPane_adaptor() {}
};
template<typename X> struct adapt<IInputPane, X> : Windows::UI::ViewManagement::IInputPane_adaptor<X> { typedef adapt IInputPane; };
struct IInputPane : IInputPane_raw, generate<IInputPane> {};

// IInputPaneStatics
struct IInputPaneStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(InputPane* *inputPane);
};

// IInputPaneControl
struct IInputPaneControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Visible(bool *value);
	virtual STDMETHODIMP _put_Visible(bool value);
};
template<typename X> struct IInputPaneControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInputPaneControl_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IInputPaneControl_adaptor::Visible)->_put_Visible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Visible;
	};
	IInputPaneControl_adaptor() {}
};
template<typename X> struct adapt<IInputPaneControl, X> : Windows::UI::ViewManagement::IInputPaneControl_adaptor<X> { typedef adapt IInputPaneControl; };
struct IInputPaneControl : IInputPaneControl_raw, generate<IInputPaneControl> {};

// IInputPane2
struct IInputPane2_raw : IInspectable {
	virtual STDMETHODIMP _TryShow(bool *result);
	virtual STDMETHODIMP _TryHide(bool *result);
};
template<typename X> struct IInputPane2_adaptor : X {
	bool TryShow() { bool result; hrcheck(X::get()->_TryShow(&result)); return result; }
	bool TryHide() { bool result; hrcheck(X::get()->_TryHide(&result)); return result; }
};
template<typename X> struct adapt<IInputPane2, X> : Windows::UI::ViewManagement::IInputPane2_adaptor<X> { typedef adapt IInputPane2; };
struct IInputPane2 : IInputPane2_raw, generate<IInputPane2> {};

// InputPane
template<typename> struct InputPane_statics {
	static ptr<InputPane> GetForCurrentView() { InputPane* inputPane; hrcheck(get_activation_factory<InputPane, IInputPaneStatics>()->_GetForCurrentView(&inputPane)); return from_abi(inputPane); }
};

template<typename X> struct statics<InputPane, X> : X, Windows::UI::ViewManagement::InputPane_statics<void> {
	typedef typename X::root_type InputPane;
};
struct InputPane : generate<InputPane> {};

// IProjectionManagerStatics
struct IProjectionManagerStatics : IInspectable {
	virtual STDMETHODIMP _StartProjectingAsync(int projectionViewId, int anchorViewId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _StopProjectingAsync(int projectionViewId, int anchorViewId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _get_ProjectionDisplayAvailable(bool *value);
	virtual STDMETHODIMP _add_ProjectionDisplayAvailableChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ProjectionDisplayAvailableChanged(Foundation::EventRegistrationToken token);
};

// IProjectionManagerStatics2
struct IProjectionManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _StartProjectingWithDeviceInfoAsync(int projectionViewId, int anchorViewId, Devices::Enumeration::DeviceInformation* displayDeviceInfo, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _RequestStartProjectingAsync(int projectionViewId, int anchorViewId, Foundation::Rect selection, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestStartProjectingWithPlacementAsync(int projectionViewId, int anchorViewId, Foundation::Rect selection, Popups::Placement prefferedPlacement, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *selector);
};

// ProjectionManager
template<typename> struct ProjectionManager_statics {
	static struct _ProjectionDisplayAvailable : property {
		bool get() { bool value; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics>()->_get_ProjectionDisplayAvailable(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} ProjectionDisplayAvailable;
	static struct _ProjectionDisplayAvailableChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics>()->_add_ProjectionDisplayAvailableChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics>()->_remove_ProjectionDisplayAvailableChanged(token)); }
	} ProjectionDisplayAvailableChanged;
	static ptr<Foundation::IAsyncAction> StartProjectingAsync(int projectionViewId, int anchorViewId, pptr<Devices::Enumeration::DeviceInformation> displayDeviceInfo) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics2>()->_StartProjectingWithDeviceInfoAsync(projectionViewId, anchorViewId, displayDeviceInfo, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> RequestStartProjectingAsync(int projectionViewId, int anchorViewId, const Foundation::Rect& selection) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics2>()->_RequestStartProjectingAsync(projectionViewId, anchorViewId, selection, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> RequestStartProjectingAsync(int projectionViewId, int anchorViewId, const Foundation::Rect& selection, Popups::Placement prefferedPlacement) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics2>()->_RequestStartProjectingWithPlacementAsync(projectionViewId, anchorViewId, selection, prefferedPlacement, &operation)); return from_abi(operation); }
	static hstring GetDeviceSelector() { HSTRING selector; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics2>()->_GetDeviceSelector(&selector)); return from_abi(selector); }
	static ptr<Foundation::IAsyncAction> StartProjectingAsync(int projectionViewId, int anchorViewId) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics>()->_StartProjectingAsync(projectionViewId, anchorViewId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics>()->_SwapDisplaysForViewsAsync(projectionViewId, anchorViewId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> StopProjectingAsync(int projectionViewId, int anchorViewId) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<ProjectionManager, IProjectionManagerStatics>()->_StopProjectingAsync(projectionViewId, anchorViewId, &operation)); return from_abi(operation); }
};
template<typename X> typename ProjectionManager_statics<X>::_ProjectionDisplayAvailable ProjectionManager_statics<X>::ProjectionDisplayAvailable;
template<typename X> typename ProjectionManager_statics<X>::_ProjectionDisplayAvailableChanged ProjectionManager_statics<X>::ProjectionDisplayAvailableChanged;

template<typename X> struct statics<ProjectionManager, X> : X, Windows::UI::ViewManagement::ProjectionManager_statics<void> {
	typedef typename X::root_type ProjectionManager;
};
struct ProjectionManager : generate<ProjectionManager> {};

// IUIViewSettings
struct IUIViewSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_UserInteractionMode(ViewManagement::UserInteractionMode *value);
};
template<typename X> struct IUIViewSettings_adaptor : X {
	union {
		struct : property {
			ViewManagement::UserInteractionMode get() { ViewManagement::UserInteractionMode value; hrcheck(enc(&IUIViewSettings_adaptor::UserInteractionMode)->_get_UserInteractionMode(&value)); return value; }
			ViewManagement::UserInteractionMode operator()() { return get(); }
			operator ViewManagement::UserInteractionMode () { return get(); }
		} UserInteractionMode;
	};
	IUIViewSettings_adaptor() {}
};
template<typename X> struct adapt<IUIViewSettings, X> : Windows::UI::ViewManagement::IUIViewSettings_adaptor<X> { typedef adapt IUIViewSettings; };
struct IUIViewSettings : IUIViewSettings_raw, generate<IUIViewSettings> {};

// IUIViewSettingsStatics
struct IUIViewSettingsStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(UIViewSettings* *current);
};

// UIViewSettings
template<typename> struct UIViewSettings_statics {
	static ptr<UIViewSettings> GetForCurrentView() { UIViewSettings* current; hrcheck(get_activation_factory<UIViewSettings, IUIViewSettingsStatics>()->_GetForCurrentView(&current)); return from_abi(current); }
};

template<typename X> struct statics<UIViewSettings, X> : X, Windows::UI::ViewManagement::UIViewSettings_statics<void> {
	typedef typename X::root_type UIViewSettings;
};
struct UIViewSettings : generate<UIViewSettings> {};

// IAccessibilitySettings
struct IAccessibilitySettings_raw : IInspectable {
	virtual STDMETHODIMP _get_HighContrast(bool *value);
	virtual STDMETHODIMP _get_HighContrastScheme(HSTRING *value);
	virtual STDMETHODIMP _add_HighContrastChanged(Foundation::TypedEventHandler<AccessibilitySettings*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_HighContrastChanged(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IAccessibilitySettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAccessibilitySettings_adaptor::HighContrast)->_get_HighContrast(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HighContrast;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAccessibilitySettings_adaptor::HighContrastScheme)->_get_HighContrastScheme(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} HighContrastScheme;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AccessibilitySettings>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IAccessibilitySettings_adaptor::HighContrastChanged)->_add_HighContrastChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IAccessibilitySettings_adaptor::HighContrastChanged)->_remove_HighContrastChanged(cookie)); }
		} HighContrastChanged;
	};
	IAccessibilitySettings_adaptor() {}
};
template<typename X> struct adapt<IAccessibilitySettings, X> : Windows::UI::ViewManagement::IAccessibilitySettings_adaptor<X> { typedef adapt IAccessibilitySettings; };
struct IAccessibilitySettings : IAccessibilitySettings_raw, generate<IAccessibilitySettings> {};

// AccessibilitySettings
template<typename X> struct statics<AccessibilitySettings, X> : X {
	typedef typename X::root_type AccessibilitySettings;
};
struct AccessibilitySettings : generate<AccessibilitySettings> {};

// IUISettings
struct IUISettings_raw : IInspectable {
	virtual STDMETHODIMP _get_HandPreference(ViewManagement::HandPreference *value);
	virtual STDMETHODIMP _get_CursorSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_ScrollBarSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_ScrollBarArrowSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_ScrollBarThumbBoxSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_MessageDuration(unsigned *value);
	virtual STDMETHODIMP _get_AnimationsEnabled(bool *value);
	virtual STDMETHODIMP _get_CaretBrowsingEnabled(bool *value);
	virtual STDMETHODIMP _get_CaretBlinkRate(unsigned *value);
	virtual STDMETHODIMP _get_CaretWidth(unsigned *value);
	virtual STDMETHODIMP _get_DoubleClickTime(unsigned *value);
	virtual STDMETHODIMP _get_MouseHoverTime(unsigned *value);
	virtual STDMETHODIMP _UIElementColor(UIElementType desiredElement, Color *value);
};
template<typename X> struct IUISettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IUISettings_adaptor::AnimationsEnabled)->_get_AnimationsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AnimationsEnabled;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUISettings_adaptor::CaretBlinkRate)->_get_CaretBlinkRate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CaretBlinkRate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IUISettings_adaptor::CaretBrowsingEnabled)->_get_CaretBrowsingEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CaretBrowsingEnabled;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUISettings_adaptor::CaretWidth)->_get_CaretWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CaretWidth;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IUISettings_adaptor::CursorSize)->_get_CursorSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} CursorSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUISettings_adaptor::DoubleClickTime)->_get_DoubleClickTime(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} DoubleClickTime;
		struct : property {
			ViewManagement::HandPreference get() { ViewManagement::HandPreference value; hrcheck(enc(&IUISettings_adaptor::HandPreference)->_get_HandPreference(&value)); return value; }
			ViewManagement::HandPreference operator()() { return get(); }
			operator ViewManagement::HandPreference () { return get(); }
		} HandPreference;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUISettings_adaptor::MessageDuration)->_get_MessageDuration(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MessageDuration;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUISettings_adaptor::MouseHoverTime)->_get_MouseHoverTime(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MouseHoverTime;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IUISettings_adaptor::ScrollBarArrowSize)->_get_ScrollBarArrowSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} ScrollBarArrowSize;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IUISettings_adaptor::ScrollBarSize)->_get_ScrollBarSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} ScrollBarSize;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IUISettings_adaptor::ScrollBarThumbBoxSize)->_get_ScrollBarThumbBoxSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} ScrollBarThumbBoxSize;
	};
	Color UIElementColor(UIElementType desiredElement) { Color value; hrcheck(X::get()->_UIElementColor(desiredElement, &value)); return value; }
	IUISettings_adaptor() {}
};
template<typename X> struct adapt<IUISettings, X> : Windows::UI::ViewManagement::IUISettings_adaptor<X> { typedef adapt IUISettings; };
struct IUISettings : IUISettings_raw, generate<IUISettings> {};

// IUISettings2
struct IUISettings2_raw : IInspectable {
	virtual STDMETHODIMP _get_TextScaleFactor(double *value);
	virtual STDMETHODIMP _add_TextScaleFactorChanged(Foundation::TypedEventHandler<UISettings*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_TextScaleFactorChanged(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IUISettings2_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IUISettings2_adaptor::TextScaleFactor)->_get_TextScaleFactor(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} TextScaleFactor;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UISettings>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IUISettings2_adaptor::TextScaleFactorChanged)->_add_TextScaleFactorChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IUISettings2_adaptor::TextScaleFactorChanged)->_remove_TextScaleFactorChanged(cookie)); }
		} TextScaleFactorChanged;
	};
	IUISettings2_adaptor() {}
};
template<typename X> struct adapt<IUISettings2, X> : Windows::UI::ViewManagement::IUISettings2_adaptor<X> { typedef adapt IUISettings2; };
struct IUISettings2 : IUISettings2_raw, generate<IUISettings2> {};

// IUISettings4
struct IUISettings4_raw : IInspectable {
	virtual STDMETHODIMP _get_AdvancedEffectsEnabled(bool *value);
	virtual STDMETHODIMP _add_AdvancedEffectsEnabledChanged(Foundation::TypedEventHandler<UISettings*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_AdvancedEffectsEnabledChanged(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IUISettings4_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IUISettings4_adaptor::AdvancedEffectsEnabled)->_get_AdvancedEffectsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AdvancedEffectsEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UISettings>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IUISettings4_adaptor::AdvancedEffectsEnabledChanged)->_add_AdvancedEffectsEnabledChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IUISettings4_adaptor::AdvancedEffectsEnabledChanged)->_remove_AdvancedEffectsEnabledChanged(cookie)); }
		} AdvancedEffectsEnabledChanged;
	};
	IUISettings4_adaptor() {}
};
template<typename X> struct adapt<IUISettings4, X> : Windows::UI::ViewManagement::IUISettings4_adaptor<X> { typedef adapt IUISettings4; };
struct IUISettings4 : IUISettings4_raw, generate<IUISettings4> {};

// IUISettings3
struct IUISettings3_raw : IInspectable {
	virtual STDMETHODIMP _GetColorValue(UIColorType desiredColor, Color *value);
	virtual STDMETHODIMP _add_ColorValuesChanged(Foundation::TypedEventHandler<UISettings*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ColorValuesChanged(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct IUISettings3_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UISettings>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IUISettings3_adaptor::ColorValuesChanged)->_add_ColorValuesChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IUISettings3_adaptor::ColorValuesChanged)->_remove_ColorValuesChanged(cookie)); }
		} ColorValuesChanged;
	};
	Color GetColorValue(UIColorType desiredColor) { Color value; hrcheck(X::get()->_GetColorValue(desiredColor, &value)); return value; }
	IUISettings3_adaptor() {}
};
template<typename X> struct adapt<IUISettings3, X> : Windows::UI::ViewManagement::IUISettings3_adaptor<X> { typedef adapt IUISettings3; };
struct IUISettings3 : IUISettings3_raw, generate<IUISettings3> {};

// UISettings
template<typename X> struct statics<UISettings, X> : X {
	typedef typename X::root_type UISettings;
};
struct UISettings : generate<UISettings> {};

// IStatusBarStatics
struct IStatusBarStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(StatusBar* *value);
};

// IStatusBar
struct IStatusBar_raw : IInspectable {
	virtual STDMETHODIMP _ShowAsync(Foundation::IAsyncAction* *returnValue);
	virtual STDMETHODIMP _HideAsync(Foundation::IAsyncAction* *returnValue);
	virtual STDMETHODIMP _get_BackgroundOpacity(double *value);
	virtual STDMETHODIMP _put_BackgroundOpacity(double value);
	virtual STDMETHODIMP _get_ForegroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_ForegroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_BackgroundColor(Foundation::IReference<Color>* *value);
	virtual STDMETHODIMP _put_BackgroundColor(Foundation::IReference<Color>* value);
	virtual STDMETHODIMP _get_ProgressIndicator(StatusBarProgressIndicator* *value);
	virtual STDMETHODIMP _get_OccludedRect(Foundation::Rect *value);
	virtual STDMETHODIMP _add_Showing(Foundation::TypedEventHandler<StatusBar*, IInspectable*>* eventHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Showing(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Hiding(Foundation::TypedEventHandler<StatusBar*, IInspectable*>* eventHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Hiding(Foundation::EventRegistrationToken token);
};
template<typename X> struct IStatusBar_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IStatusBar_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IStatusBar_adaptor::BackgroundColor)->_put_BackgroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} BackgroundColor;
		struct : property {
			double get() { double value; hrcheck(enc(&IStatusBar_adaptor::BackgroundOpacity)->_get_BackgroundOpacity(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IStatusBar_adaptor::BackgroundOpacity)->_put_BackgroundOpacity(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} BackgroundOpacity;
		struct : property {
			ptr<Foundation::IReference<Color>> get() { Foundation::IReference<Color>* value; hrcheck(enc(&IStatusBar_adaptor::ForegroundColor)->_get_ForegroundColor(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Color>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Color>> () { return get(); }
			ptr<Foundation::IReference<Color>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Color>> value) { hrcheck(enc(&IStatusBar_adaptor::ForegroundColor)->_put_ForegroundColor(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Color>> value) { put(to_abi(value)); }
		} ForegroundColor;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IStatusBar_adaptor::OccludedRect)->_get_OccludedRect(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} OccludedRect;
		struct : property {
			ptr<StatusBarProgressIndicator> get() { StatusBarProgressIndicator* value; hrcheck(enc(&IStatusBar_adaptor::ProgressIndicator)->_get_ProgressIndicator(&value)); return from_abi(value); }
			ptr<StatusBarProgressIndicator> operator()() { return get(); }
			operator ptr<StatusBarProgressIndicator> () { return get(); }
			ptr<StatusBarProgressIndicator> operator->() { return get(); }
		} ProgressIndicator;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<StatusBar>, object>> eventHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IStatusBar_adaptor::Hiding)->_add_Hiding(to_abi(eventHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IStatusBar_adaptor::Hiding)->_remove_Hiding(token)); }
		} Hiding;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<StatusBar>, object>> eventHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IStatusBar_adaptor::Showing)->_add_Showing(to_abi(eventHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IStatusBar_adaptor::Showing)->_remove_Showing(token)); }
		} Showing;
	};
	ptr<Foundation::IAsyncAction> ShowAsync() { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_ShowAsync(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncAction> HideAsync() { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_HideAsync(&returnValue)); return from_abi(returnValue); }
	IStatusBar_adaptor() {}
};
template<typename X> struct adapt<IStatusBar, X> : Windows::UI::ViewManagement::IStatusBar_adaptor<X> { typedef adapt IStatusBar; };
struct IStatusBar : IStatusBar_raw, generate<IStatusBar> {};

// StatusBar
template<typename> struct StatusBar_statics {
	static ptr<StatusBar> GetForCurrentView() { StatusBar* value; hrcheck(get_activation_factory<StatusBar, IStatusBarStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
};

template<typename X> struct statics<StatusBar, X> : X, Windows::UI::ViewManagement::StatusBar_statics<void> {
	typedef typename X::root_type StatusBar;
};
struct StatusBar : generate<StatusBar> {};

// IStatusBarProgressIndicator
struct IStatusBarProgressIndicator_raw : IInspectable {
	virtual STDMETHODIMP _ShowAsync(Foundation::IAsyncAction* *returnValue);
	virtual STDMETHODIMP _HideAsync(Foundation::IAsyncAction* *returnValue);
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
	virtual STDMETHODIMP _get_ProgressValue(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _put_ProgressValue(Foundation::IReference<double>* value);
};
template<typename X> struct IStatusBarProgressIndicator_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IStatusBarProgressIndicator_adaptor::ProgressValue)->_get_ProgressValue(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<double>> value) { hrcheck(enc(&IStatusBarProgressIndicator_adaptor::ProgressValue)->_put_ProgressValue(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<double>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<double>> value) { put(to_abi(value)); }
		} ProgressValue;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStatusBarProgressIndicator_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStatusBarProgressIndicator_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
	};
	ptr<Foundation::IAsyncAction> ShowAsync() { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_ShowAsync(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncAction> HideAsync() { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_HideAsync(&returnValue)); return from_abi(returnValue); }
	IStatusBarProgressIndicator_adaptor() {}
};
template<typename X> struct adapt<IStatusBarProgressIndicator, X> : Windows::UI::ViewManagement::IStatusBarProgressIndicator_adaptor<X> { typedef adapt IStatusBarProgressIndicator; };
struct IStatusBarProgressIndicator : IStatusBarProgressIndicator_raw, generate<IStatusBarProgressIndicator> {};

// StatusBarProgressIndicator
template<typename X> struct statics<StatusBarProgressIndicator, X> : X {
	typedef typename X::root_type StatusBarProgressIndicator;
};
struct StatusBarProgressIndicator : generate<StatusBarProgressIndicator> {};

// IApplicationViewScalingStatics
struct IApplicationViewScalingStatics : IInspectable {
	virtual STDMETHODIMP _get_DisableLayoutScaling(bool *value);
	virtual STDMETHODIMP _TrySetDisableLayoutScaling(bool disableLayoutScaling, bool *success);
};

// IApplicationViewScaling
struct IApplicationViewScaling : IInspectable, generate<IApplicationViewScaling> {};

// ApplicationViewScaling
template<typename> struct ApplicationViewScaling_statics {
	static struct _DisableLayoutScaling : property {
		bool get() { bool value; hrcheck(get_activation_factory<ApplicationViewScaling, IApplicationViewScalingStatics>()->_get_DisableLayoutScaling(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} DisableLayoutScaling;
	static bool TrySetDisableLayoutScaling(bool disableLayoutScaling) { bool success; hrcheck(get_activation_factory<ApplicationViewScaling, IApplicationViewScalingStatics>()->_TrySetDisableLayoutScaling(disableLayoutScaling, &success)); return success; }
};
template<typename X> typename ApplicationViewScaling_statics<X>::_DisableLayoutScaling ApplicationViewScaling_statics<X>::DisableLayoutScaling;

template<typename X> struct statics<ApplicationViewScaling, X> : X, Windows::UI::ViewManagement::ApplicationViewScaling_statics<void> {
	typedef typename X::root_type ApplicationViewScaling;
};
struct ApplicationViewScaling : generate<ApplicationViewScaling> {};
}}}
} // namespace iso_winrt
