#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Preview.InkWorkspace

#include "Windows.ApplicationModel.Preview.InkWorkspace.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
struct IAsyncAction;
}
namespace Graphics { namespace Imaging {
struct SoftwareBitmap;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Preview::InkWorkspace::IInkWorkspaceHostedAppManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::InkWorkspace::IInkWorkspaceHostedAppManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Preview::InkWorkspace::InkWorkspaceHostedAppManager> : class_type<Platform::Object, Windows::ApplicationModel::Preview::InkWorkspace::IInkWorkspaceHostedAppManager> {};
template<> struct def<Windows::ApplicationModel::Preview::InkWorkspace::PreviewInkWorkspaceContract> : value_type<> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Preview::InkWorkspace::IInkWorkspaceHostedAppManager> { define_guid(0xFE0A7990, 0x5E59, 0x4BB7, 0x8A, 0x63, 0x7D, 0x21, 0x8C, 0xD9, 0x63, 0x0);};
template<> struct uuid<Windows::ApplicationModel::Preview::InkWorkspace::IInkWorkspaceHostedAppManagerStatics> { define_guid(0xCBFD8CC5, 0xA162, 0x4BC4, 0x84, 0xEE, 0xE8, 0x71, 0x6D, 0x52, 0x33, 0xC5);};

// types

namespace Windows { namespace ApplicationModel { namespace Preview { namespace InkWorkspace {

// IInkWorkspaceHostedAppManager
struct IInkWorkspaceHostedAppManager_raw : IInspectable {
	virtual STDMETHODIMP _SetThumbnailAsync(Graphics::Imaging::SoftwareBitmap* bitmap, Foundation::IAsyncAction* *action);
};
template<typename X> struct IInkWorkspaceHostedAppManager_adaptor : X {
	ptr<Foundation::IAsyncAction> SetThumbnailAsync(pptr<Graphics::Imaging::SoftwareBitmap> bitmap) { Foundation::IAsyncAction* action; hrcheck(X::get()->_SetThumbnailAsync(bitmap, &action)); return from_abi(action); }
};
template<typename X> struct adapt<IInkWorkspaceHostedAppManager, X> : Windows::ApplicationModel::Preview::InkWorkspace::IInkWorkspaceHostedAppManager_adaptor<X> { typedef adapt IInkWorkspaceHostedAppManager; };
struct IInkWorkspaceHostedAppManager : IInkWorkspaceHostedAppManager_raw, generate<IInkWorkspaceHostedAppManager> {};

// IInkWorkspaceHostedAppManagerStatics
struct IInkWorkspaceHostedAppManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentApp(InkWorkspaceHostedAppManager* *current);
};

// InkWorkspaceHostedAppManager
template<typename> struct InkWorkspaceHostedAppManager_statics {
	static ptr<InkWorkspaceHostedAppManager> GetForCurrentApp() { InkWorkspaceHostedAppManager* current; hrcheck(get_activation_factory<InkWorkspaceHostedAppManager, IInkWorkspaceHostedAppManagerStatics>()->_GetForCurrentApp(&current)); return from_abi(current); }
};

template<typename X> struct statics<InkWorkspaceHostedAppManager, X> : X, Windows::ApplicationModel::Preview::InkWorkspace::InkWorkspaceHostedAppManager_statics<void> {
	typedef typename X::root_type InkWorkspaceHostedAppManager;
};
struct InkWorkspaceHostedAppManager : generate<InkWorkspaceHostedAppManager> {};
}}}}
} // namespace iso_winrt
