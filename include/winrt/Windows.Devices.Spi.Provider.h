#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Spi.Provider

#include "Windows.Devices.Spi.Provider.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::Devices::Spi::Provider::ProviderSpiSharingMode> : enum_type<int> {};
template<> struct def<Windows::Devices::Spi::Provider::IProviderSpiConnectionSettingsFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Spi::Provider::ProviderSpiMode> : enum_type<int> {};
template<> struct def<Windows::Devices::Spi::Provider::IProviderSpiConnectionSettings> : interface_type<> {};
template<> struct def<Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings> : class_type<Platform::Object, Windows::Devices::Spi::Provider::IProviderSpiConnectionSettings>, custom_activators {};
template<> struct def<Windows::Devices::Spi::Provider::ISpiControllerProvider> : overridable_type<> {};
template<> struct def<Windows::Devices::Spi::Provider::ISpiProvider> : overridable_type<> {};
template<> struct def<Windows::Devices::Spi::Provider::ISpiDeviceProvider> : overridable_type<Windows::Foundation::IClosable> {};

// uuids

template<> struct uuid<Windows::Devices::Spi::Provider::IProviderSpiConnectionSettingsFactory> { define_guid(0x66456B5A, 0xC79, 0x43E3, 0x9F, 0x3C, 0xE5, 0x97, 0x80, 0xAC, 0x18, 0xFA);};
template<> struct uuid<Windows::Devices::Spi::Provider::IProviderSpiConnectionSettings> { define_guid(0xF6034550, 0xA542, 0x4EC0, 0x96, 0x1, 0xA4, 0xDD, 0x68, 0xF8, 0x69, 0x7B);};
template<> struct uuid<Windows::Devices::Spi::Provider::ISpiControllerProvider> { define_guid(0xC1686504, 0x2CE, 0x4226, 0xA3, 0x85, 0x4F, 0x11, 0xFB, 0x4, 0xB4, 0x1B);};
template<> struct uuid<Windows::Devices::Spi::Provider::ISpiProvider> { define_guid(0x96B461E2, 0x77D4, 0x48CE, 0xAA, 0xA0, 0x75, 0x71, 0x5A, 0x83, 0x62, 0xCF);};
template<> struct uuid<Windows::Devices::Spi::Provider::ISpiDeviceProvider> { define_guid(0xD1C3443, 0x304B, 0x405C, 0xB4, 0xF7, 0xF5, 0xAB, 0x10, 0x74, 0x46, 0x1E);};

// types

namespace Windows { namespace Devices { namespace Spi { namespace Provider {

// IProviderSpiConnectionSettingsFactory
struct IProviderSpiConnectionSettingsFactory : IInspectable {
	virtual STDMETHODIMP _Create(int chipSelectLine, ProviderSpiConnectionSettings* *value);
};

// IProviderSpiConnectionSettings
struct IProviderSpiConnectionSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_ChipSelectLine(int *value);
	virtual STDMETHODIMP _put_ChipSelectLine(int value);
	virtual STDMETHODIMP _get_Mode(ProviderSpiMode *value);
	virtual STDMETHODIMP _put_Mode(ProviderSpiMode value);
	virtual STDMETHODIMP _get_DataBitLength(int *value);
	virtual STDMETHODIMP _put_DataBitLength(int value);
	virtual STDMETHODIMP _get_ClockFrequency(int *value);
	virtual STDMETHODIMP _put_ClockFrequency(int value);
	virtual STDMETHODIMP _get_SharingMode(ProviderSpiSharingMode *value);
	virtual STDMETHODIMP _put_SharingMode(ProviderSpiSharingMode value);
};
template<typename X> struct IProviderSpiConnectionSettings_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::ChipSelectLine)->_get_ChipSelectLine(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::ChipSelectLine)->_put_ChipSelectLine(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ChipSelectLine;
		struct : property {
			int get() { int value; hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::ClockFrequency)->_get_ClockFrequency(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::ClockFrequency)->_put_ClockFrequency(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ClockFrequency;
		struct : property {
			int get() { int value; hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::DataBitLength)->_get_DataBitLength(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::DataBitLength)->_put_DataBitLength(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} DataBitLength;
		struct : property {
			ProviderSpiMode get() { ProviderSpiMode value; hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::Mode)->_get_Mode(&value)); return value; }
			ProviderSpiMode operator()() { return get(); }
			operator ProviderSpiMode () { return get(); }
			void put(ProviderSpiMode value) { hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::Mode)->_put_Mode(value)); }
			void operator=(ProviderSpiMode value) { put(value); }
			void operator()(ProviderSpiMode value) { put(value); }
		} Mode;
		struct : property {
			ProviderSpiSharingMode get() { ProviderSpiSharingMode value; hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::SharingMode)->_get_SharingMode(&value)); return value; }
			ProviderSpiSharingMode operator()() { return get(); }
			operator ProviderSpiSharingMode () { return get(); }
			void put(ProviderSpiSharingMode value) { hrcheck(enc(&IProviderSpiConnectionSettings_adaptor::SharingMode)->_put_SharingMode(value)); }
			void operator=(ProviderSpiSharingMode value) { put(value); }
			void operator()(ProviderSpiSharingMode value) { put(value); }
		} SharingMode;
	};
	IProviderSpiConnectionSettings_adaptor() {}
};
template<typename X> struct adapt<IProviderSpiConnectionSettings, X> : Windows::Devices::Spi::Provider::IProviderSpiConnectionSettings_adaptor<X> { typedef adapt IProviderSpiConnectionSettings; };
struct IProviderSpiConnectionSettings : IProviderSpiConnectionSettings_raw, generate<IProviderSpiConnectionSettings> {};

// ProviderSpiConnectionSettings
template<typename> struct ProviderSpiConnectionSettings_statics {
	static ProviderSpiConnectionSettings *activate(int chipSelectLine) { ProviderSpiConnectionSettings *value; hrcheck(get_activation_factory<ProviderSpiConnectionSettings, IProviderSpiConnectionSettingsFactory>()->_Create(chipSelectLine, &value)); return value; }
};

template<typename X> struct statics<ProviderSpiConnectionSettings, X> : X, Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings_statics<void> {
	using Windows::Devices::Spi::Provider::ProviderSpiConnectionSettings_statics<void>::activate;
	typedef typename X::root_type ProviderSpiConnectionSettings;
};
struct ProviderSpiConnectionSettings : generate<ProviderSpiConnectionSettings> {};

// ISpiControllerProvider
struct ISpiControllerProvider_raw : IInspectable {
	virtual STDMETHODIMP _GetDeviceProvider(ProviderSpiConnectionSettings* settings, ISpiDeviceProvider* *result) = 0;
};
template<typename X> struct ISpiControllerProvider_adaptor : X {
	ptr<ISpiDeviceProvider> GetDeviceProvider(pptr<ProviderSpiConnectionSettings> settings) { ISpiDeviceProvider* result; hrcheck(X::get()->_GetDeviceProvider(settings, &result)); return from_abi(result); }
};
template<typename X> struct adapt<ISpiControllerProvider, X> : Windows::Devices::Spi::Provider::ISpiControllerProvider_adaptor<X> { typedef adapt ISpiControllerProvider; };
template<typename X> struct ISpiControllerProvider_unadaptor : X {
	STDMETHODIMP _GetDeviceProvider(ProviderSpiConnectionSettings* settings, ISpiDeviceProvider* *result) { return hrtry([&, this] { *result = to_abi(X::get()->GetDeviceProvider(settings)); }); }
};
template<typename X> struct unadapt<ISpiControllerProvider, X> : Windows::Devices::Spi::Provider::ISpiControllerProvider_unadaptor<X> {};
struct ISpiControllerProvider : ISpiControllerProvider_raw, generate<ISpiControllerProvider> {};

// ISpiProvider
struct ISpiProvider_raw : IInspectable {
	virtual STDMETHODIMP _GetControllersAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ISpiControllerProvider*>*>* *result) = 0;
};
template<typename X> struct ISpiProvider_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ISpiControllerProvider>>>>> GetControllersAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ISpiControllerProvider*>*>* result; hrcheck(X::get()->_GetControllersAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<ISpiProvider, X> : Windows::Devices::Spi::Provider::ISpiProvider_adaptor<X> { typedef adapt ISpiProvider; };
template<typename X> struct ISpiProvider_unadaptor : X {
	STDMETHODIMP _GetControllersAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ISpiControllerProvider*>*>* *result) { return hrtry([&, this] { *result = to_abi(X::get()->GetControllersAsync()); }); }
};
template<typename X> struct unadapt<ISpiProvider, X> : Windows::Devices::Spi::Provider::ISpiProvider_unadaptor<X> {};
struct ISpiProvider : ISpiProvider_raw, generate<ISpiProvider> {};

// ISpiDeviceProvider
struct ISpiDeviceProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_ConnectionSettings(ProviderSpiConnectionSettings* *value) = 0;
	virtual STDMETHODIMP _Write(unsigned bufferSize, unsigned char *buffer) = 0;
	virtual STDMETHODIMP _Read(unsigned bufferSize, unsigned char *buffer) = 0;
	virtual STDMETHODIMP _TransferSequential(unsigned writeBufferSize, unsigned char *writeBuffer, unsigned readBufferSize, unsigned char *readBuffer) = 0;
	virtual STDMETHODIMP _TransferFullDuplex(unsigned writeBufferSize, unsigned char *writeBuffer, unsigned readBufferSize, unsigned char *readBuffer) = 0;
};
template<typename X> struct ISpiDeviceProvider_adaptor : X {
	union {
		struct : property {
			ptr<ProviderSpiConnectionSettings> get() { ProviderSpiConnectionSettings* value; hrcheck(enc(&ISpiDeviceProvider_adaptor::ConnectionSettings)->_get_ConnectionSettings(&value)); return from_abi(value); }
			ptr<ProviderSpiConnectionSettings> operator()() { return get(); }
			operator ptr<ProviderSpiConnectionSettings> () { return get(); }
			ptr<ProviderSpiConnectionSettings> operator->() { return get(); }
		} ConnectionSettings;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISpiDeviceProvider_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	void Write(const szarray<unsigned char>& buffer) { hrcheck(X::get()->_Write(buffer.size, to_abi(buffer.p))); }
	void Read(const szarray<unsigned char>& buffer) { hrcheck(X::get()->_Read(buffer.size, to_abi(buffer.p))); }
	void TransferSequential(const szarray<unsigned char>& writeBuffer, const szarray<unsigned char>& readBuffer) { hrcheck(X::get()->_TransferSequential(writeBuffer.size, to_abi(writeBuffer.p), readBuffer.size, to_abi(readBuffer.p))); }
	void TransferFullDuplex(const szarray<unsigned char>& writeBuffer, const szarray<unsigned char>& readBuffer) { hrcheck(X::get()->_TransferFullDuplex(writeBuffer.size, to_abi(writeBuffer.p), readBuffer.size, to_abi(readBuffer.p))); }
	ISpiDeviceProvider_adaptor() {}
};
template<typename X> struct adapt<ISpiDeviceProvider, X> : Windows::Devices::Spi::Provider::ISpiDeviceProvider_adaptor<X> { typedef adapt ISpiDeviceProvider; };
template<typename X> struct ISpiDeviceProvider_unadaptor : X {
	STDMETHODIMP _get_DeviceId(HSTRING *value) { return hrtry([&, this] { get_prop(value, DeviceId); }); }
	STDMETHODIMP _get_ConnectionSettings(ProviderSpiConnectionSettings* *value) { return hrtry([&, this] { get_prop(value, ConnectionSettings); }); }
	STDMETHODIMP _Write(unsigned bufferSize, unsigned char *buffer) { return hrtry([&, this] { X::get()->Write({(unsigned char*)buffer, bufferSize}); }); }
	STDMETHODIMP _Read(unsigned bufferSize, unsigned char *buffer) { return hrtry([&, this] { X::get()->Read({(unsigned char*)buffer, bufferSize}); }); }
	STDMETHODIMP _TransferSequential(unsigned writeBufferSize, unsigned char *writeBuffer, unsigned readBufferSize, unsigned char *readBuffer) { return hrtry([&, this] { X::get()->TransferSequential({(unsigned char*)writeBuffer, writeBufferSize}, {(unsigned char*)readBuffer, readBufferSize}); }); }
	STDMETHODIMP _TransferFullDuplex(unsigned writeBufferSize, unsigned char *writeBuffer, unsigned readBufferSize, unsigned char *readBuffer) { return hrtry([&, this] { X::get()->TransferFullDuplex({(unsigned char*)writeBuffer, writeBufferSize}, {(unsigned char*)readBuffer, readBufferSize}); }); }
};
template<typename X> struct unadapt<ISpiDeviceProvider, X> : Windows::Devices::Spi::Provider::ISpiDeviceProvider_unadaptor<X> {};
struct ISpiDeviceProvider : ISpiDeviceProvider_raw, generate<ISpiDeviceProvider> {};
}}}}
} // namespace iso_winrt
