#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Hosting

#include "Windows.UI.Xaml.Hosting.0.h"
#include "Windows.UI.Xaml.Controls.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace UI { namespace Composition {
struct Visual;
struct ICompositionAnimationBase;
struct CompositionPropertySet;
}
namespace Xaml {
struct ResourceDictionary;
struct UIElement;
struct FrameworkElement;
}}}

// defs

template<> struct def<Windows::UI::Xaml::Hosting::IElementCompositionPreview> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IElementCompositionPreviewStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IElementCompositionPreviewStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::ElementCompositionPreview> : class_type<Platform::Object, Windows::UI::Xaml::Hosting::IElementCompositionPreview> {};
template<> struct def<Windows::UI::Xaml::Hosting::HostingContract> : value_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::DesignerAppViewState> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost2> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost3> : overridable_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IDesignerAppExitedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::DesignerAppExitedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Hosting::IDesignerAppExitedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Hosting::IDesignerAppManager> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IDesignerAppManagerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::DesignerAppManager> : class_type<Platform::Object, Windows::UI::Xaml::Hosting::IDesignerAppManager, Windows::Foundation::IClosable>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Hosting::IDesignerAppView> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::DesignerAppView> : class_type<Platform::Object, Windows::UI::Xaml::Hosting::IDesignerAppView, Windows::Foundation::IClosable> {};
template<> struct def<Windows::UI::Xaml::Hosting::IXamlUIPresenter> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Hosting::XamlUIPresenter> : class_type<Platform::Object, Windows::UI::Xaml::Hosting::IXamlUIPresenter> {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Hosting::IElementCompositionPreview> { define_guid(0xB6F1A676, 0xCFE6, 0x46AC, 0xAC, 0xF6, 0xC4, 0x68, 0x7B, 0xB6, 0x5E, 0x60);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IElementCompositionPreviewStatics> { define_guid(0x8C92B38, 0xEC99, 0x4C55, 0xBC, 0x85, 0xA1, 0xC1, 0x80, 0xB2, 0x76, 0x46);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IElementCompositionPreviewStatics2> { define_guid(0x24148FBB, 0x23D6, 0x4F37, 0xBA, 0xC, 0x7, 0x33, 0xE7, 0x99, 0x72, 0x2D);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost> { define_guid(0xAAFB84CD, 0x9F6D, 0x4F80, 0xAC, 0x2C, 0xE, 0x6C, 0xB9, 0xF3, 0x16, 0x59);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost2> { define_guid(0x61595672, 0x7CA4, 0x4A21, 0xB5, 0x6A, 0x88, 0xF4, 0x81, 0x23, 0x88, 0xCA);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost3> { define_guid(0xB14292BF, 0x7320, 0x41BB, 0x9F, 0x26, 0x4D, 0x6F, 0xD3, 0x4D, 0xB4, 0x5A);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IDesignerAppExitedEventArgs> { define_guid(0xF6AAC86A, 0xCAD, 0x410C, 0x8F, 0x62, 0xDC, 0x29, 0x36, 0x15, 0x1C, 0x74);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IDesignerAppManager> { define_guid(0xA6272CAA, 0xD5C6, 0x40CB, 0xAB, 0xD9, 0x27, 0xBA, 0x43, 0x83, 0x1B, 0xB7);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IDesignerAppManagerFactory> { define_guid(0x8F9D633B, 0x1266, 0x4C0E, 0x84, 0x99, 0xD, 0xB8, 0x5B, 0xBD, 0x4C, 0x43);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IDesignerAppView> { define_guid(0x5C777CEA, 0xDD71, 0x4A84, 0xA5, 0x6F, 0xDA, 0xCB, 0x4B, 0x14, 0x70, 0x6F);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IXamlUIPresenter> { define_guid(0xA714944A, 0x1619, 0x4FC6, 0xB3, 0x1B, 0x89, 0x51, 0x2E, 0xF0, 0x22, 0xA2);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics> { define_guid(0x71EAEAC8, 0x45E1, 0x4192, 0x85, 0xAA, 0x3A, 0x42, 0x2E, 0xDD, 0x23, 0xCF);};
template<> struct uuid<Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics2> { define_guid(0x5C6B68D2, 0xCF1C, 0x4F53, 0xBF, 0x9, 0x6A, 0x74, 0x5F, 0x7A, 0x97, 0x3);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Hosting {

// IElementCompositionPreview
struct IElementCompositionPreview : IInspectable, generate<IElementCompositionPreview> {};

// IElementCompositionPreviewStatics
struct IElementCompositionPreviewStatics : IInspectable {
	virtual STDMETHODIMP _GetElementVisual(UIElement* element, Composition::Visual* *result);
	virtual STDMETHODIMP _GetElementChildVisual(UIElement* element, Composition::Visual* *result);
	virtual STDMETHODIMP _SetElementChildVisual(UIElement* element, Composition::Visual* visual);
	virtual STDMETHODIMP _GetScrollViewerManipulationPropertySet(Controls::ScrollViewer* scrollViewer, Composition::CompositionPropertySet* *result);
};

// IElementCompositionPreviewStatics2
struct IElementCompositionPreviewStatics2 : IInspectable {
	virtual STDMETHODIMP _SetImplicitShowAnimation(UIElement* element, Composition::ICompositionAnimationBase* animation);
	virtual STDMETHODIMP _SetImplicitHideAnimation(UIElement* element, Composition::ICompositionAnimationBase* animation);
	virtual STDMETHODIMP _SetIsTranslationEnabled(UIElement* element, bool value);
	virtual STDMETHODIMP _GetPointerPositionPropertySet(UIElement* targetElement, Composition::CompositionPropertySet* *result);
};

// ElementCompositionPreview
template<typename> struct ElementCompositionPreview_statics {
	static void SetImplicitShowAnimation(pptr<UIElement> element, pptr<Composition::ICompositionAnimationBase> animation) { hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics2>()->_SetImplicitShowAnimation(element, animation)); }
	static void SetImplicitHideAnimation(pptr<UIElement> element, pptr<Composition::ICompositionAnimationBase> animation) { hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics2>()->_SetImplicitHideAnimation(element, animation)); }
	static void SetIsTranslationEnabled(pptr<UIElement> element, bool value) { hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics2>()->_SetIsTranslationEnabled(element, value)); }
	static ptr<Composition::CompositionPropertySet> GetPointerPositionPropertySet(pptr<UIElement> targetElement) { Composition::CompositionPropertySet* result; hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics2>()->_GetPointerPositionPropertySet(targetElement, &result)); return from_abi(result); }
	static ptr<Composition::Visual> GetElementVisual(pptr<UIElement> element) { Composition::Visual* result; hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics>()->_GetElementVisual(element, &result)); return from_abi(result); }
	static ptr<Composition::Visual> GetElementChildVisual(pptr<UIElement> element) { Composition::Visual* result; hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics>()->_GetElementChildVisual(element, &result)); return from_abi(result); }
	static void SetElementChildVisual(pptr<UIElement> element, pptr<Composition::Visual> visual) { hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics>()->_SetElementChildVisual(element, visual)); }
	static ptr<Composition::CompositionPropertySet> GetScrollViewerManipulationPropertySet(pptr<Controls::ScrollViewer> scrollViewer) { Composition::CompositionPropertySet* result; hrcheck(get_activation_factory<ElementCompositionPreview, IElementCompositionPreviewStatics>()->_GetScrollViewerManipulationPropertySet(scrollViewer, &result)); return from_abi(result); }
};

template<typename X> struct statics<ElementCompositionPreview, X> : X, Windows::UI::Xaml::Hosting::ElementCompositionPreview_statics<void> {
	typedef typename X::root_type ElementCompositionPreview;
};
struct ElementCompositionPreview : generate<ElementCompositionPreview> {};

// IXamlUIPresenterHost
struct IXamlUIPresenterHost_raw : IInspectable {
	virtual STDMETHODIMP _ResolveFileResource(HSTRING path, HSTRING *returnValue) = 0;
};
template<typename X> struct IXamlUIPresenterHost_adaptor : X {
	hstring ResolveFileResource(hstring_ref path) { HSTRING returnValue; hrcheck(X::get()->_ResolveFileResource(path, &returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IXamlUIPresenterHost, X> : Windows::UI::Xaml::Hosting::IXamlUIPresenterHost_adaptor<X> { typedef adapt IXamlUIPresenterHost; };
template<typename X> struct IXamlUIPresenterHost_unadaptor : X {
	STDMETHODIMP _ResolveFileResource(HSTRING path, HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->ResolveFileResource(path)); }); }
};
template<typename X> struct unadapt<IXamlUIPresenterHost, X> : Windows::UI::Xaml::Hosting::IXamlUIPresenterHost_unadaptor<X> {};
struct IXamlUIPresenterHost : IXamlUIPresenterHost_raw, generate<IXamlUIPresenterHost> {};

// IXamlUIPresenterHost2
struct IXamlUIPresenterHost2_raw : IInspectable {
	virtual STDMETHODIMP _GetGenericXamlFilePath(HSTRING *returnValue) = 0;
};
template<typename X> struct IXamlUIPresenterHost2_adaptor : X {
	hstring GetGenericXamlFilePath() { HSTRING returnValue; hrcheck(X::get()->_GetGenericXamlFilePath(&returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IXamlUIPresenterHost2, X> : Windows::UI::Xaml::Hosting::IXamlUIPresenterHost2_adaptor<X> { typedef adapt IXamlUIPresenterHost2; };
template<typename X> struct IXamlUIPresenterHost2_unadaptor : X {
	STDMETHODIMP _GetGenericXamlFilePath(HSTRING *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->GetGenericXamlFilePath()); }); }
};
template<typename X> struct unadapt<IXamlUIPresenterHost2, X> : Windows::UI::Xaml::Hosting::IXamlUIPresenterHost2_unadaptor<X> {};
struct IXamlUIPresenterHost2 : IXamlUIPresenterHost2_raw, generate<IXamlUIPresenterHost2> {};

// IXamlUIPresenterHost3
struct IXamlUIPresenterHost3_raw : IInspectable {
	virtual STDMETHODIMP _ResolveDictionaryResource(ResourceDictionary* dictionary, IInspectable* dictionaryKey, IInspectable* suggestedValue, IInspectable* *returnValue) = 0;
};
template<typename X> struct IXamlUIPresenterHost3_adaptor : X {
	object ResolveDictionaryResource(pptr<ResourceDictionary> dictionary, object_ref dictionaryKey, object_ref suggestedValue) { IInspectable* returnValue; hrcheck(X::get()->_ResolveDictionaryResource(dictionary, dictionaryKey, suggestedValue, &returnValue)); return from_abi(returnValue); }
};
template<typename X> struct adapt<IXamlUIPresenterHost3, X> : Windows::UI::Xaml::Hosting::IXamlUIPresenterHost3_adaptor<X> { typedef adapt IXamlUIPresenterHost3; };
template<typename X> struct IXamlUIPresenterHost3_unadaptor : X {
	STDMETHODIMP _ResolveDictionaryResource(ResourceDictionary* dictionary, IInspectable* dictionaryKey, IInspectable* suggestedValue, IInspectable* *returnValue) { return hrtry([&, this] { *returnValue = to_abi(X::get()->ResolveDictionaryResource(dictionary, dictionaryKey, suggestedValue)); }); }
};
template<typename X> struct unadapt<IXamlUIPresenterHost3, X> : Windows::UI::Xaml::Hosting::IXamlUIPresenterHost3_unadaptor<X> {};
struct IXamlUIPresenterHost3 : IXamlUIPresenterHost3_raw, generate<IXamlUIPresenterHost3> {};

// IDesignerAppExitedEventArgs
struct IDesignerAppExitedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ExitCode(unsigned *value);
};
template<typename X> struct IDesignerAppExitedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IDesignerAppExitedEventArgs_adaptor::ExitCode)->_get_ExitCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ExitCode;
	};
	IDesignerAppExitedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDesignerAppExitedEventArgs, X> : Windows::UI::Xaml::Hosting::IDesignerAppExitedEventArgs_adaptor<X> { typedef adapt IDesignerAppExitedEventArgs; };
struct IDesignerAppExitedEventArgs : IDesignerAppExitedEventArgs_raw, generate<IDesignerAppExitedEventArgs> {};

// DesignerAppExitedEventArgs
template<typename X> struct statics<DesignerAppExitedEventArgs, X> : X {
	typedef typename X::root_type DesignerAppExitedEventArgs;
};
struct DesignerAppExitedEventArgs : generate<DesignerAppExitedEventArgs> {};

// IDesignerAppManager
struct IDesignerAppManager_raw : IInspectable {
	virtual STDMETHODIMP _get_AppUserModelId(HSTRING *value);
	virtual STDMETHODIMP _add_DesignerAppExited(Foundation::TypedEventHandler<DesignerAppManager*, DesignerAppExitedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DesignerAppExited(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CreateNewViewAsync(DesignerAppViewState initialViewState, Foundation::Size initialViewSize, Foundation::IAsyncOperation<DesignerAppView*>* *returnValue);
	virtual STDMETHODIMP _LoadObjectIntoAppAsync(HSTRING dllName, Platform::Guid classId, HSTRING initializationData, Foundation::IAsyncAction* *returnValue);
};
template<typename X> struct IDesignerAppManager_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDesignerAppManager_adaptor::AppUserModelId)->_get_AppUserModelId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppUserModelId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DesignerAppManager>, ptr<DesignerAppExitedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDesignerAppManager_adaptor::DesignerAppExited)->_add_DesignerAppExited(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDesignerAppManager_adaptor::DesignerAppExited)->_remove_DesignerAppExited(token)); }
		} DesignerAppExited;
	};
	ptr<Foundation::IAsyncOperation<ptr<DesignerAppView>>> CreateNewViewAsync(DesignerAppViewState initialViewState, const Foundation::Size& initialViewSize) { Foundation::IAsyncOperation<DesignerAppView*>* returnValue; hrcheck(X::get()->_CreateNewViewAsync(initialViewState, initialViewSize, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncAction> LoadObjectIntoAppAsync(hstring_ref dllName, const Platform::Guid& classId, hstring_ref initializationData) { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_LoadObjectIntoAppAsync(dllName, classId, initializationData, &returnValue)); return from_abi(returnValue); }
	IDesignerAppManager_adaptor() {}
};
template<typename X> struct adapt<IDesignerAppManager, X> : Windows::UI::Xaml::Hosting::IDesignerAppManager_adaptor<X> { typedef adapt IDesignerAppManager; };
struct IDesignerAppManager : IDesignerAppManager_raw, generate<IDesignerAppManager> {};

// IDesignerAppManagerFactory
struct IDesignerAppManagerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING appUserModelId, DesignerAppManager* *instance);
};

// DesignerAppManager
template<typename> struct DesignerAppManager_statics {
	static DesignerAppManager *activate(hstring_ref appUserModelId) { DesignerAppManager *instance; hrcheck(get_activation_factory<DesignerAppManager, IDesignerAppManagerFactory>()->_Create(appUserModelId, &instance)); return instance; }
};

template<typename X> struct statics<DesignerAppManager, X> : X, Windows::UI::Xaml::Hosting::DesignerAppManager_statics<void> {
	using Windows::UI::Xaml::Hosting::DesignerAppManager_statics<void>::activate;
	typedef typename X::root_type DesignerAppManager;
};
struct DesignerAppManager : generate<DesignerAppManager> {};

// IDesignerAppView
struct IDesignerAppView_raw : IInspectable {
	virtual STDMETHODIMP _get_ApplicationViewId(int *value);
	virtual STDMETHODIMP _get_AppUserModelId(HSTRING *value);
	virtual STDMETHODIMP _get_ViewState(DesignerAppViewState *value);
	virtual STDMETHODIMP _get_ViewSize(Foundation::Size *value);
	virtual STDMETHODIMP _UpdateViewAsync(DesignerAppViewState viewState, Foundation::Size viewSize, Foundation::IAsyncAction* *returnValue);
};
template<typename X> struct IDesignerAppView_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDesignerAppView_adaptor::AppUserModelId)->_get_AppUserModelId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppUserModelId;
		struct : property {
			int get() { int value; hrcheck(enc(&IDesignerAppView_adaptor::ApplicationViewId)->_get_ApplicationViewId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ApplicationViewId;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IDesignerAppView_adaptor::ViewSize)->_get_ViewSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} ViewSize;
		struct : property {
			DesignerAppViewState get() { DesignerAppViewState value; hrcheck(enc(&IDesignerAppView_adaptor::ViewState)->_get_ViewState(&value)); return value; }
			DesignerAppViewState operator()() { return get(); }
			operator DesignerAppViewState () { return get(); }
		} ViewState;
	};
	ptr<Foundation::IAsyncAction> UpdateViewAsync(DesignerAppViewState viewState, const Foundation::Size& viewSize) { Foundation::IAsyncAction* returnValue; hrcheck(X::get()->_UpdateViewAsync(viewState, viewSize, &returnValue)); return from_abi(returnValue); }
	IDesignerAppView_adaptor() {}
};
template<typename X> struct adapt<IDesignerAppView, X> : Windows::UI::Xaml::Hosting::IDesignerAppView_adaptor<X> { typedef adapt IDesignerAppView; };
struct IDesignerAppView : IDesignerAppView_raw, generate<IDesignerAppView> {};

// DesignerAppView
template<typename X> struct statics<DesignerAppView, X> : X {
	typedef typename X::root_type DesignerAppView;
};
struct DesignerAppView : generate<DesignerAppView> {};

// IXamlUIPresenter
struct IXamlUIPresenter_raw : IInspectable {
	virtual STDMETHODIMP _get_RootElement(UIElement* *value);
	virtual STDMETHODIMP _put_RootElement(UIElement* value);
	virtual STDMETHODIMP _get_ThemeKey(HSTRING *value);
	virtual STDMETHODIMP _put_ThemeKey(HSTRING value);
	virtual STDMETHODIMP _get_ThemeResourcesXaml(HSTRING *value);
	virtual STDMETHODIMP _put_ThemeResourcesXaml(HSTRING value);
	virtual STDMETHODIMP _SetSize(int width, int height);
	virtual STDMETHODIMP _Render();
	virtual STDMETHODIMP _Present();
};
template<typename X> struct IXamlUIPresenter_adaptor : X {
	union {
		struct : property {
			ptr<UIElement> get() { UIElement* value; hrcheck(enc(&IXamlUIPresenter_adaptor::RootElement)->_get_RootElement(&value)); return from_abi(value); }
			ptr<UIElement> operator()() { return get(); }
			operator ptr<UIElement> () { return get(); }
			ptr<UIElement> operator->() { return get(); }
			void put(pptr<UIElement> value) { hrcheck(enc(&IXamlUIPresenter_adaptor::RootElement)->_put_RootElement(value)); }
			void operator=(pptr<UIElement> value) { put(value); }
			void operator()(pptr<UIElement> value) { put(value); }
		} RootElement;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IXamlUIPresenter_adaptor::ThemeKey)->_get_ThemeKey(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IXamlUIPresenter_adaptor::ThemeKey)->_put_ThemeKey(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ThemeKey;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IXamlUIPresenter_adaptor::ThemeResourcesXaml)->_get_ThemeResourcesXaml(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IXamlUIPresenter_adaptor::ThemeResourcesXaml)->_put_ThemeResourcesXaml(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ThemeResourcesXaml;
	};
	void SetSize(int width, int height) { hrcheck(X::get()->_SetSize(width, height)); }
	void Render() { hrcheck(X::get()->_Render()); }
	void Present() { hrcheck(X::get()->_Present()); }
	IXamlUIPresenter_adaptor() {}
};
template<typename X> struct adapt<IXamlUIPresenter, X> : Windows::UI::Xaml::Hosting::IXamlUIPresenter_adaptor<X> { typedef adapt IXamlUIPresenter; };
struct IXamlUIPresenter : IXamlUIPresenter_raw, generate<IXamlUIPresenter> {};

// IXamlUIPresenterStatics
struct IXamlUIPresenterStatics : IInspectable {
	virtual STDMETHODIMP _get_CompleteTimelinesAutomatically(bool *value);
	virtual STDMETHODIMP _put_CompleteTimelinesAutomatically(bool value);
	virtual STDMETHODIMP _SetHost(IXamlUIPresenterHost* host);
	virtual STDMETHODIMP _NotifyWindowSizeChanged();
};

// IXamlUIPresenterStatics2
struct IXamlUIPresenterStatics2 : IInspectable {
	virtual STDMETHODIMP _GetFlyoutPlacementTargetInfo(FrameworkElement* placementTarget, Controls::Primitives::FlyoutPlacementMode preferredPlacement, Controls::Primitives::FlyoutPlacementMode *targetPreferredPlacement, bool *allowFallbacks, Foundation::Rect *returnValue);
	virtual STDMETHODIMP _GetFlyoutPlacement(Foundation::Rect placementTargetBounds, Foundation::Size controlSize, Foundation::Size minControlSize, Foundation::Rect containerRect, Controls::Primitives::FlyoutPlacementMode targetPreferredPlacement, bool allowFallbacks, Controls::Primitives::FlyoutPlacementMode *chosenPlacement, Foundation::Rect *returnValue);
};

// XamlUIPresenter
template<typename> struct XamlUIPresenter_statics {
	static struct _CompleteTimelinesAutomatically : property {
		bool get() { bool value; hrcheck(get_activation_factory<XamlUIPresenter, IXamlUIPresenterStatics>()->_get_CompleteTimelinesAutomatically(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
		void put(bool value) { hrcheck(get_activation_factory<XamlUIPresenter, IXamlUIPresenterStatics>()->_put_CompleteTimelinesAutomatically(value)); }
		void operator=(bool value) { put(value); }
		void operator()(bool value) { put(value); }
	} CompleteTimelinesAutomatically;
	static Foundation::Rect GetFlyoutPlacementTargetInfo(pptr<FrameworkElement> placementTarget, Controls::Primitives::FlyoutPlacementMode preferredPlacement, Controls::Primitives::FlyoutPlacementMode *targetPreferredPlacement, bool *allowFallbacks) { Foundation::Rect returnValue; hrcheck(get_activation_factory<XamlUIPresenter, IXamlUIPresenterStatics2>()->_GetFlyoutPlacementTargetInfo(placementTarget, preferredPlacement, targetPreferredPlacement, allowFallbacks, &returnValue)); return returnValue; }
	static Foundation::Rect GetFlyoutPlacement(const Foundation::Rect& placementTargetBounds, const Foundation::Size& controlSize, const Foundation::Size& minControlSize, const Foundation::Rect& containerRect, Controls::Primitives::FlyoutPlacementMode targetPreferredPlacement, bool allowFallbacks, Controls::Primitives::FlyoutPlacementMode *chosenPlacement) { Foundation::Rect returnValue; hrcheck(get_activation_factory<XamlUIPresenter, IXamlUIPresenterStatics2>()->_GetFlyoutPlacement(placementTargetBounds, controlSize, minControlSize, containerRect, targetPreferredPlacement, allowFallbacks, chosenPlacement, &returnValue)); return returnValue; }
	static void SetHost(pptr<IXamlUIPresenterHost> host) { hrcheck(get_activation_factory<XamlUIPresenter, IXamlUIPresenterStatics>()->_SetHost(host)); }
	static void NotifyWindowSizeChanged() { hrcheck(get_activation_factory<XamlUIPresenter, IXamlUIPresenterStatics>()->_NotifyWindowSizeChanged()); }
};
template<typename X> typename XamlUIPresenter_statics<X>::_CompleteTimelinesAutomatically XamlUIPresenter_statics<X>::CompleteTimelinesAutomatically;

template<typename X> struct statics<XamlUIPresenter, X> : X, Windows::UI::Xaml::Hosting::XamlUIPresenter_statics<void> {
	typedef typename X::root_type XamlUIPresenter;
};
struct XamlUIPresenter : generate<XamlUIPresenter> {};
}}}}
} // namespace iso_winrt
