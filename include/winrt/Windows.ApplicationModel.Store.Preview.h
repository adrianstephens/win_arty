#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Store.Preview

#include "Windows.ApplicationModel.Store.Preview.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}}
namespace Security { namespace Authentication { namespace Web { namespace Core {
struct WebTokenRequest;
struct WebTokenRequestResult;
}}}
namespace Credentials {
struct WebAccount;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}
namespace System {
struct User;
}
namespace UI { namespace Xaml {
struct UIElement;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Store::Preview::StorePreviewProductPurchaseStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StoreSystemFeature> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StoreLogOptions> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStorePreviewProductInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStorePreviewSkuInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo> : class_type<Platform::Object, Windows::ApplicationModel::Store::Preview::IStorePreviewSkuInfo> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStorePreviewPurchaseResults> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStorePreview> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults> : class_type<Platform::Object, Windows::ApplicationModel::Store::Preview::IStorePreviewPurchaseResults> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo> : class_type<Platform::Object, Windows::ApplicationModel::Store::Preview::IStorePreviewProductInfo> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStoreHardwareManufacturerInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo> : class_type<Platform::Object, Windows::ApplicationModel::Store::Preview::IStoreHardwareManufacturerInfo> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics4> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::IWebAuthenticationCoreManagerHelper> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StorePreview> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::StoreConfiguration> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStorePreviewProductInfo> { define_guid(0x1937DBB3, 0x6C01, 0x4C9D, 0x85, 0xCD, 0x5B, 0xAB, 0xAA, 0xC2, 0xB3, 0x51);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStorePreviewSkuInfo> { define_guid(0x81FD76E2, 0xB26, 0x48D9, 0x98, 0xCE, 0x27, 0x46, 0x1C, 0x66, 0x9D, 0x6C);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStorePreviewPurchaseResults> { define_guid(0xB0DAAED1, 0xD6C5, 0x4E53, 0xA0, 0x43, 0xFB, 0xA0, 0xD8, 0xE6, 0x12, 0x31);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStorePreview> { define_guid(0x8A157241, 0x840E, 0x49A9, 0xBC, 0x1, 0x5D, 0x5B, 0x1, 0xFB, 0xC8, 0xE9);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStoreHardwareManufacturerInfo> { define_guid(0xF292DC08, 0xC654, 0x43AC, 0xA2, 0x1F, 0x34, 0x80, 0x1C, 0x9D, 0x33, 0x88);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics> { define_guid(0x728F7FC0, 0x8628, 0x42EC, 0x84, 0xA2, 0x7, 0x78, 0xE, 0xB4, 0x4D, 0x8B);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics2> { define_guid(0x657C4595, 0xC8B7, 0x4FE9, 0x9F, 0x4C, 0x4D, 0x71, 0x2, 0x7D, 0x34, 0x7E);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics3> { define_guid(0x6D45F57C, 0xF144, 0x4CB5, 0x9D, 0x3F, 0x4E, 0xB0, 0x5E, 0x30, 0xB6, 0xD3);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IStoreConfigurationStatics4> { define_guid(0x20FF56D2, 0x4EE3, 0x4CF0, 0x9B, 0x12, 0x55, 0x2C, 0x3, 0x31, 0xF, 0x75);};
template<> struct uuid<Windows::ApplicationModel::Store::Preview::IWebAuthenticationCoreManagerHelper> { define_guid(0x6A50525, 0xE715, 0x4123, 0x92, 0x76, 0x9D, 0x6F, 0x86, 0x5B, 0xA5, 0x5F);};

// types

namespace Windows { namespace ApplicationModel { namespace Store { namespace Preview {

// IStorePreviewProductInfo
struct IStorePreviewProductInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_ProductId(HSTRING *value);
	virtual STDMETHODIMP _get_ProductType(HSTRING *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_SkuInfoList(Foundation::Collections::IVectorView<StorePreviewSkuInfo*>* *value);
};
template<typename X> struct IStorePreviewProductInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewProductInfo_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewProductInfo_adaptor::ProductId)->_get_ProductId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProductId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewProductInfo_adaptor::ProductType)->_get_ProductType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProductType;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<StorePreviewSkuInfo>>> get() { Foundation::Collections::IVectorView<StorePreviewSkuInfo*>* value; hrcheck(enc(&IStorePreviewProductInfo_adaptor::SkuInfoList)->_get_SkuInfoList(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<StorePreviewSkuInfo>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<StorePreviewSkuInfo>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<StorePreviewSkuInfo>>> operator->() { return get(); }
		} SkuInfoList;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewProductInfo_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IStorePreviewProductInfo_adaptor() {}
};
template<typename X> struct adapt<IStorePreviewProductInfo, X> : Windows::ApplicationModel::Store::Preview::IStorePreviewProductInfo_adaptor<X> { typedef adapt IStorePreviewProductInfo; };
struct IStorePreviewProductInfo : IStorePreviewProductInfo_raw, generate<IStorePreviewProductInfo> {};

// IStorePreviewSkuInfo
struct IStorePreviewSkuInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_ProductId(HSTRING *value);
	virtual STDMETHODIMP _get_SkuId(HSTRING *value);
	virtual STDMETHODIMP _get_SkuType(HSTRING *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_CustomDeveloperData(HSTRING *value);
	virtual STDMETHODIMP _get_CurrencyCode(HSTRING *value);
	virtual STDMETHODIMP _get_FormattedListPrice(HSTRING *value);
	virtual STDMETHODIMP _get_ExtendedData(HSTRING *value);
};
template<typename X> struct IStorePreviewSkuInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::CurrencyCode)->_get_CurrencyCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CurrencyCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::CustomDeveloperData)->_get_CustomDeveloperData(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CustomDeveloperData;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::ExtendedData)->_get_ExtendedData(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ExtendedData;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::FormattedListPrice)->_get_FormattedListPrice(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FormattedListPrice;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::ProductId)->_get_ProductId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProductId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::SkuId)->_get_SkuId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SkuId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::SkuType)->_get_SkuType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SkuType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorePreviewSkuInfo_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IStorePreviewSkuInfo_adaptor() {}
};
template<typename X> struct adapt<IStorePreviewSkuInfo, X> : Windows::ApplicationModel::Store::Preview::IStorePreviewSkuInfo_adaptor<X> { typedef adapt IStorePreviewSkuInfo; };
struct IStorePreviewSkuInfo : IStorePreviewSkuInfo_raw, generate<IStorePreviewSkuInfo> {};

// StorePreviewSkuInfo
template<typename X> struct statics<StorePreviewSkuInfo, X> : X {
	typedef typename X::root_type StorePreviewSkuInfo;
};
struct StorePreviewSkuInfo : generate<StorePreviewSkuInfo> {};

// IStorePreviewPurchaseResults
struct IStorePreviewPurchaseResults_raw : IInspectable {
	virtual STDMETHODIMP _get_ProductPurchaseStatus(StorePreviewProductPurchaseStatus *value);
};
template<typename X> struct IStorePreviewPurchaseResults_adaptor : X {
	union {
		struct : property {
			StorePreviewProductPurchaseStatus get() { StorePreviewProductPurchaseStatus value; hrcheck(enc(&IStorePreviewPurchaseResults_adaptor::ProductPurchaseStatus)->_get_ProductPurchaseStatus(&value)); return value; }
			StorePreviewProductPurchaseStatus operator()() { return get(); }
			operator StorePreviewProductPurchaseStatus () { return get(); }
		} ProductPurchaseStatus;
	};
	IStorePreviewPurchaseResults_adaptor() {}
};
template<typename X> struct adapt<IStorePreviewPurchaseResults, X> : Windows::ApplicationModel::Store::Preview::IStorePreviewPurchaseResults_adaptor<X> { typedef adapt IStorePreviewPurchaseResults; };
struct IStorePreviewPurchaseResults : IStorePreviewPurchaseResults_raw, generate<IStorePreviewPurchaseResults> {};

// IStorePreview
struct IStorePreview : IInspectable {
	virtual STDMETHODIMP _RequestProductPurchaseByProductIdAndSkuIdAsync(HSTRING productId, HSTRING skuId, Foundation::IAsyncOperation<StorePreviewPurchaseResults*>* *requestPurchaseBySkuIdOperation);
	virtual STDMETHODIMP _LoadAddOnProductInfosAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StorePreviewProductInfo*>*>* *loadAddOnProductInfosOperation);
};

// StorePreviewPurchaseResults
template<typename X> struct statics<StorePreviewPurchaseResults, X> : X {
	typedef typename X::root_type StorePreviewPurchaseResults;
};
struct StorePreviewPurchaseResults : generate<StorePreviewPurchaseResults> {};

// StorePreviewProductInfo
template<typename X> struct statics<StorePreviewProductInfo, X> : X {
	typedef typename X::root_type StorePreviewProductInfo;
};
struct StorePreviewProductInfo : generate<StorePreviewProductInfo> {};

// IStoreHardwareManufacturerInfo
struct IStoreHardwareManufacturerInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_HardwareManufacturerId(HSTRING *value);
	virtual STDMETHODIMP _get_StoreContentModifierId(HSTRING *value);
	virtual STDMETHODIMP _get_ModelName(HSTRING *value);
	virtual STDMETHODIMP _get_ManufacturerName(HSTRING *value);
};
template<typename X> struct IStoreHardwareManufacturerInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStoreHardwareManufacturerInfo_adaptor::HardwareManufacturerId)->_get_HardwareManufacturerId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} HardwareManufacturerId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStoreHardwareManufacturerInfo_adaptor::ManufacturerName)->_get_ManufacturerName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ManufacturerName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStoreHardwareManufacturerInfo_adaptor::ModelName)->_get_ModelName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ModelName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStoreHardwareManufacturerInfo_adaptor::StoreContentModifierId)->_get_StoreContentModifierId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} StoreContentModifierId;
	};
	IStoreHardwareManufacturerInfo_adaptor() {}
};
template<typename X> struct adapt<IStoreHardwareManufacturerInfo, X> : Windows::ApplicationModel::Store::Preview::IStoreHardwareManufacturerInfo_adaptor<X> { typedef adapt IStoreHardwareManufacturerInfo; };
struct IStoreHardwareManufacturerInfo : IStoreHardwareManufacturerInfo_raw, generate<IStoreHardwareManufacturerInfo> {};

// IStoreConfigurationStatics
struct IStoreConfigurationStatics : IInspectable {
	virtual STDMETHODIMP _SetSystemConfiguration(HSTRING catalogHardwareManufacturerId, HSTRING catalogStoreContentModifierId, Foundation::DateTime systemConfigurationExpiration, HSTRING catalogHardwareDescriptor);
	virtual STDMETHODIMP _SetMobileOperatorConfiguration(HSTRING mobileOperatorId, unsigned appDownloadLimitInMegabytes, unsigned updateDownloadLimitInMegabytes);
	virtual STDMETHODIMP _SetStoreWebAccountId(HSTRING webAccountId);
	virtual STDMETHODIMP _IsStoreWebAccountId(HSTRING webAccountId, bool *value);
	virtual STDMETHODIMP _get_HardwareManufacturerInfo(StoreHardwareManufacturerInfo* *value);
	virtual STDMETHODIMP _FilterUnsupportedSystemFeaturesAsync(Foundation::Collections::IIterable<StoreSystemFeature>* systemFeatures, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StoreSystemFeature>*>* *operation);
};

// StoreHardwareManufacturerInfo
template<typename X> struct statics<StoreHardwareManufacturerInfo, X> : X {
	typedef typename X::root_type StoreHardwareManufacturerInfo;
};
struct StoreHardwareManufacturerInfo : generate<StoreHardwareManufacturerInfo> {};

// IStoreConfigurationStatics2
struct IStoreConfigurationStatics2 : IInspectable {
	virtual STDMETHODIMP _get_PurchasePromptingPolicy(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_PurchasePromptingPolicy(Foundation::IReference<unsigned>* value);
};

// IStoreConfigurationStatics3
struct IStoreConfigurationStatics3 : IInspectable {
	virtual STDMETHODIMP _HasStoreWebAccount(bool *value);
	virtual STDMETHODIMP _HasStoreWebAccountForUser(System::User* user, bool *value);
	virtual STDMETHODIMP _GetStoreLogDataAsync(StoreLogOptions options, Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamReference*>* *operation);
	virtual STDMETHODIMP _SetStoreWebAccountIdForUser(System::User* user, HSTRING webAccountId);
	virtual STDMETHODIMP _IsStoreWebAccountIdForUser(System::User* user, HSTRING webAccountId, bool *value);
	virtual STDMETHODIMP _GetPurchasePromptingPolicyForUser(System::User* user, Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _SetPurchasePromptingPolicyForUser(System::User* user, Foundation::IReference<unsigned>* value);
};

// IStoreConfigurationStatics4
struct IStoreConfigurationStatics4 : IInspectable {
	virtual STDMETHODIMP _GetStoreWebAccountId(HSTRING *result);
	virtual STDMETHODIMP _GetStoreWebAccountIdForUser(System::User* user, HSTRING *result);
	virtual STDMETHODIMP _SetEnterpriseStoreWebAccountId(HSTRING webAccountId);
	virtual STDMETHODIMP _SetEnterpriseStoreWebAccountIdForUser(System::User* user, HSTRING webAccountId);
	virtual STDMETHODIMP _GetEnterpriseStoreWebAccountId(HSTRING *result);
	virtual STDMETHODIMP _GetEnterpriseStoreWebAccountIdForUser(System::User* user, HSTRING *result);
	virtual STDMETHODIMP _ShouldRestrictToEnterpriseStoreOnly(bool *result);
	virtual STDMETHODIMP _ShouldRestrictToEnterpriseStoreOnlyForUser(System::User* user, bool *result);
};

// IWebAuthenticationCoreManagerHelper
struct IWebAuthenticationCoreManagerHelper : IInspectable {
	virtual STDMETHODIMP _RequestTokenWithUIElementHostingAsync(Security::Authentication::Web::Core::WebTokenRequest* request, UI::Xaml::UIElement* uiElement, Foundation::IAsyncOperation<Security::Authentication::Web::Core::WebTokenRequestResult*>* *asyncInfo);
	virtual STDMETHODIMP _RequestTokenWithUIElementHostingAndWebAccountAsync(Security::Authentication::Web::Core::WebTokenRequest* request, Security::Credentials::WebAccount* webAccount, UI::Xaml::UIElement* uiElement, Foundation::IAsyncOperation<Security::Authentication::Web::Core::WebTokenRequestResult*>* *asyncInfo);
};

// StorePreview
template<typename> struct StorePreview_statics {
	static ptr<Foundation::IAsyncOperation<ptr<StorePreviewPurchaseResults>>> RequestProductPurchaseByProductIdAndSkuIdAsync(hstring_ref productId, hstring_ref skuId) { Foundation::IAsyncOperation<StorePreviewPurchaseResults*>* requestPurchaseBySkuIdOperation; hrcheck(get_activation_factory<StorePreview, IStorePreview>()->_RequestProductPurchaseByProductIdAndSkuIdAsync(productId, skuId, &requestPurchaseBySkuIdOperation)); return from_abi(requestPurchaseBySkuIdOperation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<StorePreviewProductInfo>>>>> LoadAddOnProductInfosAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StorePreviewProductInfo*>*>* loadAddOnProductInfosOperation; hrcheck(get_activation_factory<StorePreview, IStorePreview>()->_LoadAddOnProductInfosAsync(&loadAddOnProductInfosOperation)); return from_abi(loadAddOnProductInfosOperation); }
};

template<typename X> struct statics<StorePreview, X> : X, Windows::ApplicationModel::Store::Preview::StorePreview_statics<void> {
	typedef typename X::root_type StorePreview;
};
struct StorePreview : generate<StorePreview> {};

// StoreConfiguration
template<typename> struct StoreConfiguration_statics {
	static struct _HardwareManufacturerInfo : property {
		ptr<StoreHardwareManufacturerInfo> get() { StoreHardwareManufacturerInfo* value; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics>()->_get_HardwareManufacturerInfo(&value)); return from_abi(value); }
		ptr<StoreHardwareManufacturerInfo> operator()() { return get(); }
		operator ptr<StoreHardwareManufacturerInfo> () { return get(); }
		ptr<StoreHardwareManufacturerInfo> operator->() { return get(); }
	} HardwareManufacturerInfo;
	static struct _PurchasePromptingPolicy : property {
		ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics2>()->_get_PurchasePromptingPolicy(&value)); return from_abi(value); }
		ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::IReference<unsigned>> () { return get(); }
		ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics2>()->_put_PurchasePromptingPolicy(to_abi(value))); }
		void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
	} PurchasePromptingPolicy;
	static hstring GetStoreWebAccountId() { HSTRING result; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_GetStoreWebAccountId(&result)); return from_abi(result); }
	static hstring GetStoreWebAccountIdForUser(pptr<System::User> user) { HSTRING result; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_GetStoreWebAccountIdForUser(user, &result)); return from_abi(result); }
	static void SetEnterpriseStoreWebAccountId(hstring_ref webAccountId) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_SetEnterpriseStoreWebAccountId(webAccountId)); }
	static void SetEnterpriseStoreWebAccountIdForUser(pptr<System::User> user, hstring_ref webAccountId) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_SetEnterpriseStoreWebAccountIdForUser(user, webAccountId)); }
	static hstring GetEnterpriseStoreWebAccountId() { HSTRING result; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_GetEnterpriseStoreWebAccountId(&result)); return from_abi(result); }
	static hstring GetEnterpriseStoreWebAccountIdForUser(pptr<System::User> user) { HSTRING result; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_GetEnterpriseStoreWebAccountIdForUser(user, &result)); return from_abi(result); }
	static bool ShouldRestrictToEnterpriseStoreOnly() { bool result; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_ShouldRestrictToEnterpriseStoreOnly(&result)); return result; }
	static bool ShouldRestrictToEnterpriseStoreOnlyForUser(pptr<System::User> user) { bool result; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics4>()->_ShouldRestrictToEnterpriseStoreOnlyForUser(user, &result)); return result; }
	static bool HasStoreWebAccount() { bool value; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics3>()->_HasStoreWebAccount(&value)); return value; }
	static bool HasStoreWebAccountForUser(pptr<System::User> user) { bool value; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics3>()->_HasStoreWebAccountForUser(user, &value)); return value; }
	static ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStreamReference>>> GetStoreLogDataAsync(StoreLogOptions options) { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamReference*>* operation; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics3>()->_GetStoreLogDataAsync(options, &operation)); return from_abi(operation); }
	static void SetStoreWebAccountIdForUser(pptr<System::User> user, hstring_ref webAccountId) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics3>()->_SetStoreWebAccountIdForUser(user, webAccountId)); }
	static bool IsStoreWebAccountIdForUser(pptr<System::User> user, hstring_ref webAccountId) { bool value; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics3>()->_IsStoreWebAccountIdForUser(user, webAccountId, &value)); return value; }
	static ptr<Foundation::IReference<unsigned>> GetPurchasePromptingPolicyForUser(pptr<System::User> user) { Foundation::IReference<unsigned>* value; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics3>()->_GetPurchasePromptingPolicyForUser(user, &value)); return from_abi(value); }
	static void SetPurchasePromptingPolicyForUser(pptr<System::User> user, pptr<Foundation::IReference<unsigned>> value) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics3>()->_SetPurchasePromptingPolicyForUser(user, to_abi(value))); }
	static void SetSystemConfiguration(hstring_ref catalogHardwareManufacturerId, hstring_ref catalogStoreContentModifierId, const Foundation::DateTime& systemConfigurationExpiration, hstring_ref catalogHardwareDescriptor) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics>()->_SetSystemConfiguration(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor)); }
	static void SetMobileOperatorConfiguration(hstring_ref mobileOperatorId, unsigned appDownloadLimitInMegabytes, unsigned updateDownloadLimitInMegabytes) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics>()->_SetMobileOperatorConfiguration(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes)); }
	static void SetStoreWebAccountId(hstring_ref webAccountId) { hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics>()->_SetStoreWebAccountId(webAccountId)); }
	static bool IsStoreWebAccountId(hstring_ref webAccountId) { bool value; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics>()->_IsStoreWebAccountId(webAccountId, &value)); return value; }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<StoreSystemFeature>>>> FilterUnsupportedSystemFeaturesAsync(pptr<Foundation::Collections::IIterable<StoreSystemFeature>> systemFeatures) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<StoreSystemFeature>*>* operation; hrcheck(get_activation_factory<StoreConfiguration, IStoreConfigurationStatics>()->_FilterUnsupportedSystemFeaturesAsync(to_abi(systemFeatures), &operation)); return from_abi(operation); }
};
template<typename X> typename StoreConfiguration_statics<X>::_HardwareManufacturerInfo StoreConfiguration_statics<X>::HardwareManufacturerInfo;
template<typename X> typename StoreConfiguration_statics<X>::_PurchasePromptingPolicy StoreConfiguration_statics<X>::PurchasePromptingPolicy;

template<typename X> struct statics<StoreConfiguration, X> : X, Windows::ApplicationModel::Store::Preview::StoreConfiguration_statics<void> {
	typedef typename X::root_type StoreConfiguration;
};
struct StoreConfiguration : generate<StoreConfiguration> {};

// WebAuthenticationCoreManagerHelper
template<typename> struct WebAuthenticationCoreManagerHelper_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Security::Authentication::Web::Core::WebTokenRequestResult>>> RequestTokenWithUIElementHostingAsync(pptr<Security::Authentication::Web::Core::WebTokenRequest> request, pptr<UI::Xaml::UIElement> uiElement) { Foundation::IAsyncOperation<Security::Authentication::Web::Core::WebTokenRequestResult*>* asyncInfo; hrcheck(get_activation_factory<WebAuthenticationCoreManagerHelper, IWebAuthenticationCoreManagerHelper>()->_RequestTokenWithUIElementHostingAsync(request, uiElement, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<Security::Authentication::Web::Core::WebTokenRequestResult>>> RequestTokenWithUIElementHostingAsync(pptr<Security::Authentication::Web::Core::WebTokenRequest> request, pptr<Security::Credentials::WebAccount> webAccount, pptr<UI::Xaml::UIElement> uiElement) { Foundation::IAsyncOperation<Security::Authentication::Web::Core::WebTokenRequestResult*>* asyncInfo; hrcheck(get_activation_factory<WebAuthenticationCoreManagerHelper, IWebAuthenticationCoreManagerHelper>()->_RequestTokenWithUIElementHostingAndWebAccountAsync(request, webAccount, uiElement, &asyncInfo)); return from_abi(asyncInfo); }
};

template<typename X> struct statics<WebAuthenticationCoreManagerHelper, X> : X, Windows::ApplicationModel::Store::Preview::WebAuthenticationCoreManagerHelper_statics<void> {
	typedef typename X::root_type WebAuthenticationCoreManagerHelper;
};
struct WebAuthenticationCoreManagerHelper : generate<WebAuthenticationCoreManagerHelper> {};
}}}}
} // namespace iso_winrt
