#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Controls.Maps

#include "Windows.UI.Xaml.Controls.Maps.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"
#include "Windows.Devices.Geolocation.0.h"
#include "Windows.UI.Xaml.Controls.h"
#include "Windows.UI.Xaml.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVector;
template<typename K, typename V> struct IMapView;
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMap;
}}
namespace Services { namespace Maps { namespace LocalSearch {
struct LocalLocation;
}
struct MapRoute;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapStyleSheetEntriesStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapStyleSheetEntries> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapStyleSheetEntryStatesStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapStyleSheetEntryStates> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapAnimationKind> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapCameraChangeReason> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapColorScheme> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementCollisionBehavior> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapInteractionMode> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapLoadingStatus> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapModel3DShadingOption> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapPanInteractionMode> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapProjection> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapStyle> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileLayer> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapVisibleRegionKind> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapWatermarkMode> : enum_type<int> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapZoomLevelRange> : value_type<double, double> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapActualCameraChangedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs, Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs2> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapActualCameraChangingEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs, Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs2> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapContextRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapContextRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapContextRequestedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapCustomExperienceChangedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementClickEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementPointerEnteredEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementPointerExitedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerClickEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementsLayerClickEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapElementsLayerClickEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerContextRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementsLayerContextRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapElementsLayerContextRequestedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerEnteredEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerEnteredEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerEnteredEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerExitedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementsLayerPointerExitedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerExitedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapRightTappedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTargetCameraChangedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs, Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs2> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestDeferral> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequest> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileBitmapRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileUriRequestDeferral> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileUriRequest> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileUriRequestedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapCamera> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapCameraFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapCamera> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapCamera>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapCustomExperience> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapCustomExperience> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapCustomExperience>, composer_type<Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElement> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElement2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElement3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementStatics3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElement4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementStatics4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElement> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapElement, Windows::UI::Xaml::Controls::Maps::IMapElement2, Windows::UI::Xaml::Controls::Maps::IMapElement3, Windows::UI::Xaml::Controls::Maps::IMapElement4>, composer_type<Windows::UI::Xaml::Controls::Maps::IMapElementFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapInputEventArgs> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapItemsControl> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapItemsControlStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapItemsControl> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapItemsControl> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapLayer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapLayerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapLayerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapLayer> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapLayer>, composer_type<Windows::UI::Xaml::Controls::Maps::IMapLayerFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapModel3D> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapModel3DStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapModel3DFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapModel3D> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapModel3D>, composer_type<Windows::UI::Xaml::Controls::Maps::IMapModel3DFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapRouteView> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapRouteViewFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapRouteView> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapRouteView>, composer_type<Windows::UI::Xaml::Controls::Maps::IMapRouteViewFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapScene> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapSceneStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapScene> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapScene> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapStyleSheet> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapStyleSheetStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapStyleSheet> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapStyleSheet> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileDataSource> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileDataSourceFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileDataSource> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapTileDataSource>, composer_type<Windows::UI::Xaml::Controls::Maps::IMapTileDataSourceFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileSource> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileSourceStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapTileSourceFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapTileSource> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapTileSource>, composer_type<Windows::UI::Xaml::Controls::Maps::IMapTileSourceFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IStreetsidePanoramaStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::StreetsidePanorama> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSourceFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource> : class_type<Windows::UI::Xaml::Controls::Maps::MapTileDataSource, Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource>, composer_type<Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSourceFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSourceFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource> : class_type<Windows::UI::Xaml::Controls::Maps::MapTileDataSource, Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource>, composer_type<Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSourceFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSourceFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource> : class_type<Windows::UI::Xaml::Controls::Maps::MapTileDataSource, Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource>, composer_type<Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSourceFactory> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapBillboard> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapBillboardStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapBillboardFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapBillboard> : class_type<Windows::UI::Xaml::Controls::Maps::MapElement, Windows::UI::Xaml::Controls::Maps::IMapBillboard>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElement3D> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElement3DStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElement3D> : class_type<Windows::UI::Xaml::Controls::Maps::MapElement, Windows::UI::Xaml::Controls::Maps::IMapElement3D> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementsLayer> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapElementsLayer> : class_type<Windows::UI::Xaml::Controls::Maps::MapLayer, Windows::UI::Xaml::Controls::Maps::IMapElementsLayer> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapIcon> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapIconStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapIcon2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapIconStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapIcon> : class_type<Windows::UI::Xaml::Controls::Maps::MapElement, Windows::UI::Xaml::Controls::Maps::IMapIcon, Windows::UI::Xaml::Controls::Maps::IMapIcon2> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapPolygon> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapPolygonStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapPolygon2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapPolygon> : class_type<Windows::UI::Xaml::Controls::Maps::MapElement, Windows::UI::Xaml::Controls::Maps::IMapPolygon, Windows::UI::Xaml::Controls::Maps::IMapPolygon2> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapPolyline> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapPolylineStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapPolyline> : class_type<Windows::UI::Xaml::Controls::Maps::MapElement, Windows::UI::Xaml::Controls::Maps::IMapPolyline> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IStreetsideExperience> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IStreetsideExperienceFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::StreetsideExperience> : class_type<Windows::UI::Xaml::Controls::Maps::MapCustomExperience, Windows::UI::Xaml::Controls::Maps::IStreetsideExperience>, custom_activators {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControl> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControl2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlStatics2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControl3> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControl4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlStatics4> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControl5> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlStatics5> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControl6> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlStatics6> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControl7> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlStatics7> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControl> : class_type<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::Maps::IMapControl, Windows::UI::Xaml::Controls::Maps::IMapControl2, Windows::UI::Xaml::Controls::Maps::IMapControl3, Windows::UI::Xaml::Controls::Maps::IMapControl4, Windows::UI::Xaml::Controls::Maps::IMapControl5, Windows::UI::Xaml::Controls::Maps::IMapControl6, Windows::UI::Xaml::Controls::Maps::IMapControl7> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkClickEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureClickEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkRightTappedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlTransitFeatureRightTappedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper2> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerEnteredEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerEnteredEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerEnteredEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerEnteredEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerEnteredEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerEnteredEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerExitedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlBusinessLandmarkPointerExitedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerExitedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerExitedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlTransitFeaturePointerExitedEventArgs> : class_type<Platform::Object, Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerExitedEventArgs> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelperStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelperFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Controls::Maps::MapControlDataHelper> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper, Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper2>, custom_activators {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapStyleSheetEntriesStatics> { define_guid(0xC9636345, 0xEF1A, 0x41A4, 0xA7, 0x57, 0xBD, 0x4F, 0x43, 0xE1, 0xE4, 0xD1);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapStyleSheetEntryStatesStatics> { define_guid(0x23AC5532, 0x866D, 0x4BFA, 0xB4, 0x81, 0x39, 0xBE, 0xA1, 0xDE, 0x35, 0x6);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs> { define_guid(0xDAA080DA, 0xB7F4, 0x422C, 0xA6, 0x18, 0xBB, 0xAA, 0x7C, 0x1D, 0x81, 0x4C);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs2> { define_guid(0x7BA4C7E5, 0x10DC, 0x455A, 0x9D, 0x4, 0x1D, 0x72, 0xFB, 0x6D, 0x9B, 0x93);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs> { define_guid(0x6B0DBED6, 0x93F7, 0x4682, 0x8D, 0xE5, 0xA4, 0x7A, 0x1C, 0xC7, 0xA9, 0x45);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs2> { define_guid(0xF2867897, 0x40AC, 0x4E8A, 0xA9, 0x27, 0x51, 0xF, 0x38, 0x46, 0xA4, 0x7E);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapContextRequestedEventArgs> { define_guid(0xFDD1B423, 0xC961, 0x4DF2, 0xBB, 0x57, 0x82, 0xEE, 0xF, 0xB, 0xB5, 0x91);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceChangedEventArgs> { define_guid(0xB9E6FB9B, 0x8FC1, 0x4042, 0xAC, 0x34, 0xA6, 0x1B, 0x38, 0xBB, 0x75, 0x14);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs> { define_guid(0x40168A11, 0xD080, 0x4519, 0x99, 0xA1, 0x31, 0x49, 0xFB, 0x89, 0x99, 0xD0);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs> { define_guid(0xAB85DD4E, 0x91D7, 0x4B31, 0x8F, 0xA, 0xD3, 0x90, 0xC7, 0xD3, 0xA2, 0xEF);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs> { define_guid(0xC1A45AF9, 0x60C9, 0x4679, 0x91, 0x19, 0x20, 0xAB, 0xC7, 0x5D, 0x93, 0x1F);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerClickEventArgs> { define_guid(0x2CA7CF66, 0xAF1B, 0x4C05, 0x8C, 0x85, 0xF7, 0x4A, 0xE3, 0xD4, 0x67, 0x7F);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerContextRequestedEventArgs> { define_guid(0xDA45D0B3, 0x7A0E, 0x4758, 0x80, 0x8B, 0x3A, 0x63, 0x76, 0x27, 0xEB, 0xD);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerEnteredEventArgs> { define_guid(0x757FC032, 0x4694, 0x4404, 0x8C, 0x89, 0x34, 0x8B, 0x6B, 0x76, 0xC5, 0xE6);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerExitedEventArgs> { define_guid(0x92F3C6AD, 0x3ED, 0x4C39, 0xAF, 0x20, 0x2A, 0x7, 0xEE, 0x1C, 0xCE, 0xA6);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs> { define_guid(0x20943171, 0x6FE8, 0x40A6, 0xAD, 0xE, 0x29, 0x73, 0x79, 0xB5, 0x75, 0xA7);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs> { define_guid(0xDBF00472, 0xE953, 0x4FA8, 0x97, 0xD0, 0xEA, 0x86, 0x35, 0x90, 0x57, 0xCF);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs2> { define_guid(0x97C0B332, 0xF2B6, 0x460B, 0x8D, 0x91, 0xAC, 0x2, 0xA, 0x23, 0x83, 0xDD);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest> { define_guid(0x46733FBC, 0xD89D, 0x472B, 0xB5, 0xF6, 0xD7, 0x6, 0x6B, 0x5, 0x84, 0xF4);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral> { define_guid(0xFE370542, 0xA4AC, 0x4EFA, 0x96, 0x65, 0x4, 0x90, 0xB0, 0xCA, 0xFD, 0xD2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs> { define_guid(0x337F691D, 0x9B02, 0x4AA2, 0x8B, 0x1E, 0xCC, 0x4D, 0x91, 0x71, 0x9B, 0xF3);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest> { define_guid(0x17402335, 0x3127, 0x45B8, 0x87, 0xA7, 0x99, 0xF8, 0x7D, 0x4E, 0x27, 0x45);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral> { define_guid(0xC117ADE0, 0xBF3E, 0x4C51, 0x8F, 0xAA, 0x4B, 0x59, 0x3C, 0xF6, 0x8E, 0xB2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs> { define_guid(0xD2147B43, 0x1BBF, 0x4B98, 0x8D, 0xD3, 0xB7, 0x83, 0x4E, 0x40, 0x7E, 0xD);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapCamera> { define_guid(0x53A6B623, 0xC0F8, 0x4D8B, 0xAD, 0x1E, 0xA5, 0x95, 0x98, 0xEA, 0x84, 0xB);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapCameraFactory> { define_guid(0xEA3B0F16, 0x83AF, 0x4ACE, 0x8E, 0x71, 0x10, 0xAD, 0x9F, 0x1E, 0x9E, 0x7F);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapCustomExperience> { define_guid(0x64592866, 0x14A3, 0x4E5F, 0x88, 0x83, 0x8E, 0x9C, 0x50, 0xE, 0xEE, 0xDE);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapCustomExperienceFactory> { define_guid(0x7A403FB5, 0xA1B1, 0x4E7F, 0x92, 0x1E, 0x3E, 0x6B, 0x8D, 0x8E, 0xBE, 0xD6);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElement> { define_guid(0xD61FC4DF, 0xB245, 0x47F2, 0x9A, 0xC2, 0x43, 0xC0, 0x58, 0xB1, 0xC9, 0x3);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementStatics> { define_guid(0xE8C71CF2, 0xBFEF, 0x4B49, 0x8E, 0x99, 0x41, 0xB5, 0xE3, 0x78, 0x9F, 0xD2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementFactory> { define_guid(0x4A30D007, 0xBD6, 0x47A5, 0x86, 0xB, 0x7E, 0x7C, 0xF5, 0xF0, 0xC5, 0x73);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElement2> { define_guid(0x6619F261, 0xFBA6, 0x4964, 0xA7, 0xFF, 0xF1, 0xAF, 0x63, 0xAB, 0x9C, 0xB0);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementStatics2> { define_guid(0x9BF72F30, 0x80FE, 0x4F30, 0xBC, 0xC1, 0xFA, 0x89, 0x40, 0x50, 0xF6, 0x76);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElement3> { define_guid(0x13EFBC59, 0x45ED, 0x48B4, 0x93, 0xAD, 0xE3, 0xF7, 0x8F, 0x8C, 0xF2, 0x18);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementStatics3> { define_guid(0xE11EE92F, 0x9742, 0x49AA, 0xAA, 0xD8, 0x2E, 0x46, 0x6B, 0xFF, 0x37, 0x96);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElement4> { define_guid(0x645883B6, 0x1FC1, 0x4CEB, 0x93, 0xBD, 0xDC, 0x2C, 0x96, 0x0, 0x72, 0xE9);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementStatics4> { define_guid(0xA4296F0B, 0xDFF8, 0x467C, 0x93, 0x15, 0x6F, 0x6D, 0xB9, 0x3E, 0xE2, 0xBA);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs> { define_guid(0x9FC503A0, 0xA8A2, 0x4394, 0x92, 0xE9, 0x22, 0x47, 0x76, 0x4F, 0x2F, 0x49);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapItemsControl> { define_guid(0x94C2C4D3, 0xB335, 0x42C5, 0xB6, 0x60, 0xE6, 0xA0, 0x7E, 0xC3, 0xBD, 0xDC);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapItemsControlStatics> { define_guid(0x33A859C7, 0x789B, 0x425C, 0x8A, 0xA, 0x32, 0x38, 0x58, 0x96, 0xCB, 0x4A);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapLayer> { define_guid(0x6D0FF9C1, 0xA14D, 0x4F97, 0x8F, 0x57, 0x46, 0x71, 0x5B, 0x57, 0x68, 0x3A);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapLayerStatics> { define_guid(0x9CA4A26B, 0x5DB9, 0x4F0C, 0xBD, 0xD5, 0xB1, 0xBF, 0xFD, 0xCC, 0xE9, 0x46);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapLayerFactory> { define_guid(0xE02A2207, 0xDEE3, 0x47C8, 0x98, 0x25, 0xBD, 0x2, 0x9C, 0x57, 0x52, 0xF7);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapModel3D> { define_guid(0xF8C541A1, 0xCA27, 0x4968, 0xA2, 0xBF, 0x9C, 0x20, 0xF0, 0x6A, 0x4, 0x68);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapModel3DStatics> { define_guid(0x4834A480, 0x8E56, 0x4B0F, 0x87, 0x2D, 0x7E, 0xAD, 0x10, 0x31, 0x87, 0xCD);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapModel3DFactory> { define_guid(0xDF7F0BCC, 0x580A, 0x498B, 0x93, 0x9B, 0x1, 0x19, 0xA9, 0xDA, 0xDB, 0x9E);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapRouteView> { define_guid(0x740EAEC5, 0xBACC, 0x41E1, 0xA6, 0x7E, 0xDD, 0x65, 0x13, 0x83, 0x20, 0x49);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapRouteViewFactory> { define_guid(0xF083ADDF, 0x66, 0x4628, 0x82, 0xFE, 0xEA, 0x78, 0xC2, 0x3C, 0xEC, 0x1E);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapScene> { define_guid(0x8BBA10A9, 0x50E7, 0x482C, 0x97, 0x89, 0xC6, 0x88, 0xB1, 0x78, 0xAC, 0x24);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapSceneStatics> { define_guid(0x3E4AD6C, 0x86EC, 0x44D9, 0x95, 0x97, 0xFB, 0x75, 0xB7, 0xDE, 0xBA, 0xA);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapStyleSheet> { define_guid(0xAE54B2BF, 0x8991, 0x42ED, 0x8D, 0x58, 0x20, 0x47, 0x3D, 0xEE, 0xDE, 0x1D);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapStyleSheetStatics> { define_guid(0xABBD00AD, 0xA1C, 0x4335, 0x82, 0xF4, 0x61, 0xD9, 0x36, 0xAA, 0x19, 0x7D);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileDataSource> { define_guid(0xC03D9F5E, 0xBE1F, 0x4C69, 0x99, 0x69, 0x79, 0x46, 0x7A, 0x51, 0x3C, 0x38);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileDataSourceFactory> { define_guid(0xA3920FBD, 0xE446, 0x4648, 0xA7, 0x4D, 0xFD, 0x2C, 0x5D, 0x55, 0x7C, 0x6);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileSource> { define_guid(0x88A76E4E, 0x2FDF, 0x4567, 0x92, 0x55, 0x11, 0x0, 0x51, 0x9C, 0x8D, 0x62);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileSourceStatics> { define_guid(0x93FCC93C, 0x7035, 0x4603, 0x99, 0xB1, 0xE6, 0x59, 0x92, 0x1B, 0x60, 0x93);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapTileSourceFactory> { define_guid(0xCD7F811F, 0x77FA, 0x482B, 0x9D, 0x34, 0x71, 0xD3, 0x1D, 0x46, 0x5C, 0x48);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama> { define_guid(0x6FE00FD8, 0xAD60, 0x4664, 0xB5, 0x39, 0xB1, 0x6, 0x9F, 0x16, 0xC5, 0xAF);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IStreetsidePanoramaStatics> { define_guid(0xD3B47F69, 0x54B3, 0x4EC5, 0xB2, 0xA0, 0x4F, 0x82, 0x4, 0x57, 0x65, 0x7);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource> { define_guid(0x65DA384A, 0x2DB1, 0x4BE1, 0xB1, 0x55, 0x3D, 0xC, 0x9E, 0xCF, 0x47, 0x99);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSourceFactory> { define_guid(0xC8477947, 0xC955, 0x4F22, 0x94, 0x44, 0xA1, 0xD8, 0xD7, 0x44, 0xAF, 0x11);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource> { define_guid(0x9D03CB5C, 0xFD79, 0x4795, 0x87, 0xBE, 0x7E, 0x54, 0xCA, 0xB, 0x37, 0xD0);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSourceFactory> { define_guid(0x53B4B107, 0x84DC, 0x4291, 0x89, 0xF8, 0x6D, 0xB, 0xB6, 0x12, 0xA0, 0x55);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource> { define_guid(0x616257B5, 0x9108, 0x4F12, 0x8B, 0xF4, 0xBB, 0x3C, 0x8F, 0x62, 0x74, 0xE5);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSourceFactory> { define_guid(0xC5CFE9FC, 0x72AC, 0x4839, 0x8A, 0xD, 0x1, 0x1F, 0x24, 0x69, 0x3C, 0x79);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapBillboard> { define_guid(0x1694259D, 0xAE2, 0x4F42, 0xA0, 0x2E, 0x29, 0x2C, 0xA8, 0x35, 0xD3, 0x9D);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapBillboardStatics> { define_guid(0xFDF839FE, 0xE1F7, 0x4FB0, 0x88, 0x87, 0x7D, 0xA6, 0x8C, 0x64, 0x73, 0x33);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapBillboardFactory> { define_guid(0xBE45A4C5, 0x8F09, 0x4B86, 0xAE, 0x28, 0x78, 0x37, 0x40, 0xEB, 0x8B, 0x31);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElement3D> { define_guid(0x827AF8D5, 0x3843, 0x48E2, 0xBD, 0x0, 0xF, 0x6, 0x44, 0xFB, 0xE6, 0xA5);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElement3DStatics> { define_guid(0x6128011A, 0x450F, 0x442A, 0xB9, 0xD9, 0xAA, 0x81, 0x5C, 0x71, 0x90, 0x7A);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementsLayer> { define_guid(0xDE79689A, 0x1EF, 0x46F4, 0xAC, 0x60, 0x7C, 0x20, 0xB, 0x55, 0x26, 0x10);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapElementsLayerStatics> { define_guid(0x34005727, 0xF509, 0x4D28, 0x91, 0x80, 0x91, 0x1C, 0x3, 0x41, 0x1D, 0x74);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapIcon> { define_guid(0xD2096872, 0x23D9, 0x4A2B, 0x8B, 0xE0, 0x69, 0xF3, 0xA8, 0x54, 0x82, 0xAB);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapIconStatics> { define_guid(0xDCBC9E56, 0x1190, 0x4B5D, 0x9E, 0x56, 0xE5, 0xB6, 0x72, 0x4A, 0xA3, 0x28);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapIcon2> { define_guid(0x611254B9, 0xD8AA, 0x4BBD, 0xA3, 0x16, 0xBA, 0xDF, 0x6, 0x91, 0x1D, 0x63);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapIconStatics2> { define_guid(0xFF4C306A, 0xCF76, 0x46AB, 0xA1, 0x2F, 0xB6, 0x3, 0xB9, 0x86, 0xC6, 0x96);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapPolygon> { define_guid(0xABDA2285, 0x4926, 0x4C3A, 0xA5, 0xF9, 0x19, 0xDF, 0x7F, 0x69, 0xDB, 0x3D);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapPolygonStatics> { define_guid(0x37F573BE, 0x97B, 0x424C, 0x87, 0xCC, 0x2E, 0xE0, 0x42, 0xFD, 0xA6, 0xD2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapPolygon2> { define_guid(0x96C8A11E, 0x636B, 0x4018, 0x9C, 0x2E, 0xAC, 0xC9, 0x12, 0x2A, 0x1, 0xB2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapPolyline> { define_guid(0xFBAD24A2, 0x24DF, 0x4A86, 0x8F, 0xFA, 0xF, 0x8F, 0x4D, 0x9E, 0xC1, 0x7D);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapPolylineStatics> { define_guid(0x61FDE44B, 0x1DDF, 0x4303, 0xB8, 0x9, 0xEC, 0x87, 0xF5, 0x8A, 0xD0, 0x65);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IStreetsideExperience> { define_guid(0xA558AEC9, 0xE30C, 0x46C8, 0x81, 0x16, 0x48, 0x46, 0x91, 0x67, 0x55, 0x58);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IStreetsideExperienceFactory> { define_guid(0x7A5BCF3C, 0x649E, 0x4342, 0x99, 0x95, 0x68, 0xA6, 0xCF, 0x59, 0x61, 0xA7);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControl> { define_guid(0x42D0B851, 0x5256, 0x4747, 0x9E, 0x6C, 0xD, 0x11, 0xE9, 0x66, 0x14, 0x1E);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlStatics> { define_guid(0xC2C61795, 0x2147, 0x4F0A, 0x94, 0x2A, 0x54, 0x93, 0xA8, 0x5D, 0xE8, 0x7);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControl2> { define_guid(0xE1FD644D, 0x96EC, 0x4065, 0xB0, 0xF0, 0x75, 0x28, 0x1D, 0xA3, 0x65, 0x4D);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlStatics2> { define_guid(0x4852B93, 0xB446, 0x4D31, 0x97, 0x52, 0x1E, 0xC6, 0x9A, 0x59, 0x96, 0xAE);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControl3> { define_guid(0x586328F8, 0x8CDD, 0x40AE, 0x93, 0x38, 0xAF, 0x2A, 0x7B, 0xE8, 0x45, 0xE5);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControl4> { define_guid(0x68F132A, 0x1817, 0x466D, 0xB7, 0xCE, 0x41, 0x9B, 0x3F, 0x8E, 0x24, 0x8B);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlStatics4> { define_guid(0xFE785D97, 0x5D13, 0x4FA1, 0xBF, 0x1D, 0x84, 0x6, 0x17, 0x68, 0xC1, 0x83);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControl5> { define_guid(0xDD9B0FFD, 0x7823, 0x46A2, 0x82, 0xC9, 0x65, 0xDD, 0xAC, 0x4F, 0x36, 0x5F);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlStatics5> { define_guid(0x9626F00, 0xB7DD, 0x4189, 0xA7, 0xF7, 0x83, 0xC, 0x41, 0x2D, 0xEE, 0xA3);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControl6> { define_guid(0xB0DA89A2, 0x1041, 0x4BEA, 0xB8, 0x8A, 0x12, 0xAC, 0x9A, 0x82, 0xE0, 0xE2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlStatics6> { define_guid(0x3CCFDD7F, 0x24D1, 0x40A2, 0x83, 0x51, 0xB3, 0x6, 0x3A, 0x8C, 0x95, 0xA4);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControl7> { define_guid(0xD86E453, 0xC1F, 0x4F7E, 0xAE, 0x66, 0x4A, 0xD0, 0xB4, 0x98, 0x78, 0x57);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlStatics7> { define_guid(0x55F1AC4D, 0x72C2, 0x46B2, 0xB7, 0xAE, 0x79, 0x2, 0x60, 0xBE, 0x64, 0x1B);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper> { define_guid(0x8BB0F09C, 0x14AB, 0x486C, 0x9D, 0xE5, 0x5A, 0x5D, 0xEF, 0x2, 0x5, 0xA2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs> { define_guid(0x5E464922, 0x4A1A, 0x4797, 0xBE, 0xB7, 0x5C, 0xF7, 0x75, 0x4C, 0xB8, 0x67);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs> { define_guid(0x76179969, 0xB765, 0x4622, 0xB0, 0x8A, 0x30, 0x72, 0x74, 0x5A, 0x45, 0x41);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs> { define_guid(0x59AB8AE7, 0xF184, 0x4AB1, 0xB0, 0xB0, 0x35, 0xC8, 0xBF, 0x6, 0x54, 0xB2);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs> { define_guid(0xAEA1CC49, 0xA729, 0x4EAE, 0xA5, 0x9A, 0x3E, 0xC9, 0xA1, 0x25, 0xA0, 0x28);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper2> { define_guid(0x59CE429E, 0x562F, 0x4C21, 0xA6, 0x74, 0xF, 0x11, 0xDE, 0xCF, 0xF, 0xB3);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerEnteredEventArgs> { define_guid(0x5E4081A6, 0xEA98, 0x4F95, 0x8C, 0xAF, 0x5B, 0x42, 0x69, 0x6F, 0xF5, 0x4);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerEnteredEventArgs> { define_guid(0x73911A4E, 0xEC4F, 0x479E, 0x94, 0xA1, 0x36, 0xE0, 0x81, 0xD0, 0xD8, 0x97);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerExitedEventArgs> { define_guid(0x2BB52CAF, 0xF24A, 0x46D0, 0xB4, 0x63, 0x65, 0xF7, 0x19, 0x73, 0x10, 0x57);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerExitedEventArgs> { define_guid(0x6A11258D, 0x448D, 0x44E7, 0xBC, 0x69, 0xD1, 0x3D, 0x49, 0x71, 0x54, 0xE9);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelperStatics> { define_guid(0x7A6632D6, 0xE944, 0x4110, 0x83, 0xCF, 0x31, 0x4D, 0x7, 0x22, 0xE2, 0xE5);};
template<> struct uuid<Windows::UI::Xaml::Controls::Maps::IMapControlDataHelperFactory> { define_guid(0x3B70AA8E, 0x2EF, 0x469C, 0xBB, 0xAF, 0xDC, 0x21, 0x58, 0xD4, 0x28, 0x9B);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Controls { namespace Maps {

// IMapStyleSheetEntriesStatics
struct IMapStyleSheetEntriesStatics : IInspectable {
	virtual STDMETHODIMP _get_Area(HSTRING *value);
	virtual STDMETHODIMP _get_Airport(HSTRING *value);
	virtual STDMETHODIMP _get_Cemetery(HSTRING *value);
	virtual STDMETHODIMP _get_Continent(HSTRING *value);
	virtual STDMETHODIMP _get_Education(HSTRING *value);
	virtual STDMETHODIMP _get_IndigenousPeoplesReserve(HSTRING *value);
	virtual STDMETHODIMP _get_Island(HSTRING *value);
	virtual STDMETHODIMP _get_Medical(HSTRING *value);
	virtual STDMETHODIMP _get_Military(HSTRING *value);
	virtual STDMETHODIMP _get_Nautical(HSTRING *value);
	virtual STDMETHODIMP _get_Neighborhood(HSTRING *value);
	virtual STDMETHODIMP _get_Runway(HSTRING *value);
	virtual STDMETHODIMP _get_Sand(HSTRING *value);
	virtual STDMETHODIMP _get_ShoppingCenter(HSTRING *value);
	virtual STDMETHODIMP _get_Stadium(HSTRING *value);
	virtual STDMETHODIMP _get_Vegetation(HSTRING *value);
	virtual STDMETHODIMP _get_Forest(HSTRING *value);
	virtual STDMETHODIMP _get_GolfCourse(HSTRING *value);
	virtual STDMETHODIMP _get_Park(HSTRING *value);
	virtual STDMETHODIMP _get_PlayingField(HSTRING *value);
	virtual STDMETHODIMP _get_Reserve(HSTRING *value);
	virtual STDMETHODIMP _get_Point(HSTRING *value);
	virtual STDMETHODIMP _get_NaturalPoint(HSTRING *value);
	virtual STDMETHODIMP _get_Peak(HSTRING *value);
	virtual STDMETHODIMP _get_VolcanicPeak(HSTRING *value);
	virtual STDMETHODIMP _get_WaterPoint(HSTRING *value);
	virtual STDMETHODIMP _get_PointOfInterest(HSTRING *value);
	virtual STDMETHODIMP _get_Business(HSTRING *value);
	virtual STDMETHODIMP _get_FoodPoint(HSTRING *value);
	virtual STDMETHODIMP _get_PopulatedPlace(HSTRING *value);
	virtual STDMETHODIMP _get_Capital(HSTRING *value);
	virtual STDMETHODIMP _get_AdminDistrictCapital(HSTRING *value);
	virtual STDMETHODIMP _get_CountryRegionCapital(HSTRING *value);
	virtual STDMETHODIMP _get_RoadShield(HSTRING *value);
	virtual STDMETHODIMP _get_RoadExit(HSTRING *value);
	virtual STDMETHODIMP _get_Transit(HSTRING *value);
	virtual STDMETHODIMP _get_Political(HSTRING *value);
	virtual STDMETHODIMP _get_CountryRegion(HSTRING *value);
	virtual STDMETHODIMP _get_AdminDistrict(HSTRING *value);
	virtual STDMETHODIMP _get_District(HSTRING *value);
	virtual STDMETHODIMP _get_Structure(HSTRING *value);
	virtual STDMETHODIMP _get_Building(HSTRING *value);
	virtual STDMETHODIMP _get_EducationBuilding(HSTRING *value);
	virtual STDMETHODIMP _get_MedicalBuilding(HSTRING *value);
	virtual STDMETHODIMP _get_TransitBuilding(HSTRING *value);
	virtual STDMETHODIMP _get_Transportation(HSTRING *value);
	virtual STDMETHODIMP _get_Road(HSTRING *value);
	virtual STDMETHODIMP _get_ControlledAccessHighway(HSTRING *value);
	virtual STDMETHODIMP _get_HighSpeedRamp(HSTRING *value);
	virtual STDMETHODIMP _get_Highway(HSTRING *value);
	virtual STDMETHODIMP _get_MajorRoad(HSTRING *value);
	virtual STDMETHODIMP _get_ArterialRoad(HSTRING *value);
	virtual STDMETHODIMP _get_Street(HSTRING *value);
	virtual STDMETHODIMP _get_Ramp(HSTRING *value);
	virtual STDMETHODIMP _get_UnpavedStreet(HSTRING *value);
	virtual STDMETHODIMP _get_TollRoad(HSTRING *value);
	virtual STDMETHODIMP _get_Railway(HSTRING *value);
	virtual STDMETHODIMP _get_Trail(HSTRING *value);
	virtual STDMETHODIMP _get_WaterRoute(HSTRING *value);
	virtual STDMETHODIMP _get_Water(HSTRING *value);
	virtual STDMETHODIMP _get_River(HSTRING *value);
	virtual STDMETHODIMP _get_RouteLine(HSTRING *value);
	virtual STDMETHODIMP _get_WalkingRoute(HSTRING *value);
	virtual STDMETHODIMP _get_DrivingRoute(HSTRING *value);
};

// MapStyleSheetEntries
template<typename> struct MapStyleSheetEntries_statics {
	static struct _AdminDistrict : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_AdminDistrict(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AdminDistrict;
	static struct _AdminDistrictCapital : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_AdminDistrictCapital(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AdminDistrictCapital;
	static struct _Airport : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Airport(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Airport;
	static struct _Area : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Area(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Area;
	static struct _ArterialRoad : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_ArterialRoad(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ArterialRoad;
	static struct _Building : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Building(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Building;
	static struct _Business : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Business(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Business;
	static struct _Capital : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Capital(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Capital;
	static struct _Cemetery : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Cemetery(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Cemetery;
	static struct _Continent : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Continent(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Continent;
	static struct _ControlledAccessHighway : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_ControlledAccessHighway(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ControlledAccessHighway;
	static struct _CountryRegion : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_CountryRegion(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CountryRegion;
	static struct _CountryRegionCapital : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_CountryRegionCapital(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CountryRegionCapital;
	static struct _District : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_District(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} District;
	static struct _DrivingRoute : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_DrivingRoute(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DrivingRoute;
	static struct _Education : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Education(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Education;
	static struct _EducationBuilding : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_EducationBuilding(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EducationBuilding;
	static struct _FoodPoint : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_FoodPoint(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FoodPoint;
	static struct _Forest : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Forest(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Forest;
	static struct _GolfCourse : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_GolfCourse(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GolfCourse;
	static struct _HighSpeedRamp : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_HighSpeedRamp(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HighSpeedRamp;
	static struct _Highway : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Highway(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Highway;
	static struct _IndigenousPeoplesReserve : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_IndigenousPeoplesReserve(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IndigenousPeoplesReserve;
	static struct _Island : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Island(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Island;
	static struct _MajorRoad : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_MajorRoad(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MajorRoad;
	static struct _Medical : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Medical(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Medical;
	static struct _MedicalBuilding : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_MedicalBuilding(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MedicalBuilding;
	static struct _Military : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Military(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Military;
	static struct _NaturalPoint : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_NaturalPoint(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NaturalPoint;
	static struct _Nautical : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Nautical(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Nautical;
	static struct _Neighborhood : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Neighborhood(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Neighborhood;
	static struct _Park : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Park(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Park;
	static struct _Peak : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Peak(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Peak;
	static struct _PlayingField : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_PlayingField(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PlayingField;
	static struct _Point : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Point(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Point;
	static struct _PointOfInterest : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_PointOfInterest(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PointOfInterest;
	static struct _Political : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Political(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Political;
	static struct _PopulatedPlace : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_PopulatedPlace(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PopulatedPlace;
	static struct _Railway : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Railway(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Railway;
	static struct _Ramp : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Ramp(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Ramp;
	static struct _Reserve : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Reserve(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Reserve;
	static struct _River : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_River(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} River;
	static struct _Road : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Road(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Road;
	static struct _RoadExit : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_RoadExit(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RoadExit;
	static struct _RoadShield : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_RoadShield(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RoadShield;
	static struct _RouteLine : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_RouteLine(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RouteLine;
	static struct _Runway : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Runway(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Runway;
	static struct _Sand : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Sand(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sand;
	static struct _ShoppingCenter : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_ShoppingCenter(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ShoppingCenter;
	static struct _Stadium : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Stadium(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Stadium;
	static struct _Street : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Street(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Street;
	static struct _Structure : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Structure(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Structure;
	static struct _TollRoad : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_TollRoad(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TollRoad;
	static struct _Trail : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Trail(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Trail;
	static struct _Transit : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Transit(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Transit;
	static struct _TransitBuilding : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_TransitBuilding(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TransitBuilding;
	static struct _Transportation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Transportation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Transportation;
	static struct _UnpavedStreet : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_UnpavedStreet(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UnpavedStreet;
	static struct _Vegetation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Vegetation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Vegetation;
	static struct _VolcanicPeak : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_VolcanicPeak(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} VolcanicPeak;
	static struct _WalkingRoute : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_WalkingRoute(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WalkingRoute;
	static struct _Water : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_Water(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Water;
	static struct _WaterPoint : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_WaterPoint(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WaterPoint;
	static struct _WaterRoute : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntries, IMapStyleSheetEntriesStatics>()->_get_WaterRoute(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WaterRoute;
};
template<typename X> typename MapStyleSheetEntries_statics<X>::_AdminDistrict MapStyleSheetEntries_statics<X>::AdminDistrict;
template<typename X> typename MapStyleSheetEntries_statics<X>::_AdminDistrictCapital MapStyleSheetEntries_statics<X>::AdminDistrictCapital;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Airport MapStyleSheetEntries_statics<X>::Airport;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Area MapStyleSheetEntries_statics<X>::Area;
template<typename X> typename MapStyleSheetEntries_statics<X>::_ArterialRoad MapStyleSheetEntries_statics<X>::ArterialRoad;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Building MapStyleSheetEntries_statics<X>::Building;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Business MapStyleSheetEntries_statics<X>::Business;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Capital MapStyleSheetEntries_statics<X>::Capital;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Cemetery MapStyleSheetEntries_statics<X>::Cemetery;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Continent MapStyleSheetEntries_statics<X>::Continent;
template<typename X> typename MapStyleSheetEntries_statics<X>::_ControlledAccessHighway MapStyleSheetEntries_statics<X>::ControlledAccessHighway;
template<typename X> typename MapStyleSheetEntries_statics<X>::_CountryRegion MapStyleSheetEntries_statics<X>::CountryRegion;
template<typename X> typename MapStyleSheetEntries_statics<X>::_CountryRegionCapital MapStyleSheetEntries_statics<X>::CountryRegionCapital;
template<typename X> typename MapStyleSheetEntries_statics<X>::_District MapStyleSheetEntries_statics<X>::District;
template<typename X> typename MapStyleSheetEntries_statics<X>::_DrivingRoute MapStyleSheetEntries_statics<X>::DrivingRoute;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Education MapStyleSheetEntries_statics<X>::Education;
template<typename X> typename MapStyleSheetEntries_statics<X>::_EducationBuilding MapStyleSheetEntries_statics<X>::EducationBuilding;
template<typename X> typename MapStyleSheetEntries_statics<X>::_FoodPoint MapStyleSheetEntries_statics<X>::FoodPoint;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Forest MapStyleSheetEntries_statics<X>::Forest;
template<typename X> typename MapStyleSheetEntries_statics<X>::_GolfCourse MapStyleSheetEntries_statics<X>::GolfCourse;
template<typename X> typename MapStyleSheetEntries_statics<X>::_HighSpeedRamp MapStyleSheetEntries_statics<X>::HighSpeedRamp;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Highway MapStyleSheetEntries_statics<X>::Highway;
template<typename X> typename MapStyleSheetEntries_statics<X>::_IndigenousPeoplesReserve MapStyleSheetEntries_statics<X>::IndigenousPeoplesReserve;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Island MapStyleSheetEntries_statics<X>::Island;
template<typename X> typename MapStyleSheetEntries_statics<X>::_MajorRoad MapStyleSheetEntries_statics<X>::MajorRoad;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Medical MapStyleSheetEntries_statics<X>::Medical;
template<typename X> typename MapStyleSheetEntries_statics<X>::_MedicalBuilding MapStyleSheetEntries_statics<X>::MedicalBuilding;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Military MapStyleSheetEntries_statics<X>::Military;
template<typename X> typename MapStyleSheetEntries_statics<X>::_NaturalPoint MapStyleSheetEntries_statics<X>::NaturalPoint;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Nautical MapStyleSheetEntries_statics<X>::Nautical;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Neighborhood MapStyleSheetEntries_statics<X>::Neighborhood;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Park MapStyleSheetEntries_statics<X>::Park;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Peak MapStyleSheetEntries_statics<X>::Peak;
template<typename X> typename MapStyleSheetEntries_statics<X>::_PlayingField MapStyleSheetEntries_statics<X>::PlayingField;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Point MapStyleSheetEntries_statics<X>::Point;
template<typename X> typename MapStyleSheetEntries_statics<X>::_PointOfInterest MapStyleSheetEntries_statics<X>::PointOfInterest;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Political MapStyleSheetEntries_statics<X>::Political;
template<typename X> typename MapStyleSheetEntries_statics<X>::_PopulatedPlace MapStyleSheetEntries_statics<X>::PopulatedPlace;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Railway MapStyleSheetEntries_statics<X>::Railway;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Ramp MapStyleSheetEntries_statics<X>::Ramp;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Reserve MapStyleSheetEntries_statics<X>::Reserve;
template<typename X> typename MapStyleSheetEntries_statics<X>::_River MapStyleSheetEntries_statics<X>::River;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Road MapStyleSheetEntries_statics<X>::Road;
template<typename X> typename MapStyleSheetEntries_statics<X>::_RoadExit MapStyleSheetEntries_statics<X>::RoadExit;
template<typename X> typename MapStyleSheetEntries_statics<X>::_RoadShield MapStyleSheetEntries_statics<X>::RoadShield;
template<typename X> typename MapStyleSheetEntries_statics<X>::_RouteLine MapStyleSheetEntries_statics<X>::RouteLine;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Runway MapStyleSheetEntries_statics<X>::Runway;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Sand MapStyleSheetEntries_statics<X>::Sand;
template<typename X> typename MapStyleSheetEntries_statics<X>::_ShoppingCenter MapStyleSheetEntries_statics<X>::ShoppingCenter;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Stadium MapStyleSheetEntries_statics<X>::Stadium;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Street MapStyleSheetEntries_statics<X>::Street;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Structure MapStyleSheetEntries_statics<X>::Structure;
template<typename X> typename MapStyleSheetEntries_statics<X>::_TollRoad MapStyleSheetEntries_statics<X>::TollRoad;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Trail MapStyleSheetEntries_statics<X>::Trail;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Transit MapStyleSheetEntries_statics<X>::Transit;
template<typename X> typename MapStyleSheetEntries_statics<X>::_TransitBuilding MapStyleSheetEntries_statics<X>::TransitBuilding;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Transportation MapStyleSheetEntries_statics<X>::Transportation;
template<typename X> typename MapStyleSheetEntries_statics<X>::_UnpavedStreet MapStyleSheetEntries_statics<X>::UnpavedStreet;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Vegetation MapStyleSheetEntries_statics<X>::Vegetation;
template<typename X> typename MapStyleSheetEntries_statics<X>::_VolcanicPeak MapStyleSheetEntries_statics<X>::VolcanicPeak;
template<typename X> typename MapStyleSheetEntries_statics<X>::_WalkingRoute MapStyleSheetEntries_statics<X>::WalkingRoute;
template<typename X> typename MapStyleSheetEntries_statics<X>::_Water MapStyleSheetEntries_statics<X>::Water;
template<typename X> typename MapStyleSheetEntries_statics<X>::_WaterPoint MapStyleSheetEntries_statics<X>::WaterPoint;
template<typename X> typename MapStyleSheetEntries_statics<X>::_WaterRoute MapStyleSheetEntries_statics<X>::WaterRoute;

template<typename X> struct statics<MapStyleSheetEntries, X> : X, Windows::UI::Xaml::Controls::Maps::MapStyleSheetEntries_statics<void> {
	typedef typename X::root_type MapStyleSheetEntries;
};
struct MapStyleSheetEntries : generate<MapStyleSheetEntries> {};

// IMapStyleSheetEntryStatesStatics
struct IMapStyleSheetEntryStatesStatics : IInspectable {
	virtual STDMETHODIMP _get_Disabled(HSTRING *value);
	virtual STDMETHODIMP _get_Hover(HSTRING *value);
	virtual STDMETHODIMP _get_Selected(HSTRING *value);
};

// MapStyleSheetEntryStates
template<typename> struct MapStyleSheetEntryStates_statics {
	static struct _Disabled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntryStates, IMapStyleSheetEntryStatesStatics>()->_get_Disabled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Disabled;
	static struct _Hover : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntryStates, IMapStyleSheetEntryStatesStatics>()->_get_Hover(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Hover;
	static struct _Selected : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MapStyleSheetEntryStates, IMapStyleSheetEntryStatesStatics>()->_get_Selected(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Selected;
};
template<typename X> typename MapStyleSheetEntryStates_statics<X>::_Disabled MapStyleSheetEntryStates_statics<X>::Disabled;
template<typename X> typename MapStyleSheetEntryStates_statics<X>::_Hover MapStyleSheetEntryStates_statics<X>::Hover;
template<typename X> typename MapStyleSheetEntryStates_statics<X>::_Selected MapStyleSheetEntryStates_statics<X>::Selected;

template<typename X> struct statics<MapStyleSheetEntryStates, X> : X, Windows::UI::Xaml::Controls::Maps::MapStyleSheetEntryStates_statics<void> {
	typedef typename X::root_type MapStyleSheetEntryStates;
};
struct MapStyleSheetEntryStates : generate<MapStyleSheetEntryStates> {};

// IMapActualCameraChangedEventArgs
struct IMapActualCameraChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Camera(MapCamera* *value);
};
template<typename X> struct IMapActualCameraChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MapCamera> get() { MapCamera* value; hrcheck(enc(&IMapActualCameraChangedEventArgs_adaptor::Camera)->_get_Camera(&value)); return from_abi(value); }
			ptr<MapCamera> operator()() { return get(); }
			operator ptr<MapCamera> () { return get(); }
			ptr<MapCamera> operator->() { return get(); }
		} Camera;
	};
	IMapActualCameraChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapActualCameraChangedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs_adaptor<X> { typedef adapt IMapActualCameraChangedEventArgs; };
struct IMapActualCameraChangedEventArgs : IMapActualCameraChangedEventArgs_raw, generate<IMapActualCameraChangedEventArgs> {};

// IMapActualCameraChangedEventArgs2
struct IMapActualCameraChangedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeReason(MapCameraChangeReason *value);
};
template<typename X> struct IMapActualCameraChangedEventArgs2_adaptor : X {
	union {
		struct : property {
			MapCameraChangeReason get() { MapCameraChangeReason value; hrcheck(enc(&IMapActualCameraChangedEventArgs2_adaptor::ChangeReason)->_get_ChangeReason(&value)); return value; }
			MapCameraChangeReason operator()() { return get(); }
			operator MapCameraChangeReason () { return get(); }
		} ChangeReason;
	};
	IMapActualCameraChangedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IMapActualCameraChangedEventArgs2, X> : Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangedEventArgs2_adaptor<X> { typedef adapt IMapActualCameraChangedEventArgs2; };
struct IMapActualCameraChangedEventArgs2 : IMapActualCameraChangedEventArgs2_raw, generate<IMapActualCameraChangedEventArgs2> {};

// MapActualCameraChangedEventArgs
template<typename X> struct statics<MapActualCameraChangedEventArgs, X> : X {
	typedef typename X::root_type MapActualCameraChangedEventArgs;
};
struct MapActualCameraChangedEventArgs : generate<MapActualCameraChangedEventArgs> {};

// IMapActualCameraChangingEventArgs
struct IMapActualCameraChangingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Camera(MapCamera* *value);
};
template<typename X> struct IMapActualCameraChangingEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MapCamera> get() { MapCamera* value; hrcheck(enc(&IMapActualCameraChangingEventArgs_adaptor::Camera)->_get_Camera(&value)); return from_abi(value); }
			ptr<MapCamera> operator()() { return get(); }
			operator ptr<MapCamera> () { return get(); }
			ptr<MapCamera> operator->() { return get(); }
		} Camera;
	};
	IMapActualCameraChangingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapActualCameraChangingEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs_adaptor<X> { typedef adapt IMapActualCameraChangingEventArgs; };
struct IMapActualCameraChangingEventArgs : IMapActualCameraChangingEventArgs_raw, generate<IMapActualCameraChangingEventArgs> {};

// IMapActualCameraChangingEventArgs2
struct IMapActualCameraChangingEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeReason(MapCameraChangeReason *value);
};
template<typename X> struct IMapActualCameraChangingEventArgs2_adaptor : X {
	union {
		struct : property {
			MapCameraChangeReason get() { MapCameraChangeReason value; hrcheck(enc(&IMapActualCameraChangingEventArgs2_adaptor::ChangeReason)->_get_ChangeReason(&value)); return value; }
			MapCameraChangeReason operator()() { return get(); }
			operator MapCameraChangeReason () { return get(); }
		} ChangeReason;
	};
	IMapActualCameraChangingEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IMapActualCameraChangingEventArgs2, X> : Windows::UI::Xaml::Controls::Maps::IMapActualCameraChangingEventArgs2_adaptor<X> { typedef adapt IMapActualCameraChangingEventArgs2; };
struct IMapActualCameraChangingEventArgs2 : IMapActualCameraChangingEventArgs2_raw, generate<IMapActualCameraChangingEventArgs2> {};

// MapActualCameraChangingEventArgs
template<typename X> struct statics<MapActualCameraChangingEventArgs, X> : X {
	typedef typename X::root_type MapActualCameraChangingEventArgs;
};
struct MapActualCameraChangingEventArgs : generate<MapActualCameraChangingEventArgs> {};

// IMapContextRequestedEventArgs
struct IMapContextRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElements(Foundation::Collections::IVectorView<MapElement*>* *value);
};
template<typename X> struct IMapContextRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapContextRequestedEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> get() { Foundation::Collections::IVectorView<MapElement*>* value; hrcheck(enc(&IMapContextRequestedEventArgs_adaptor::MapElements)->_get_MapElements(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> operator->() { return get(); }
		} MapElements;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapContextRequestedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapContextRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapContextRequestedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapContextRequestedEventArgs_adaptor<X> { typedef adapt IMapContextRequestedEventArgs; };
struct IMapContextRequestedEventArgs : IMapContextRequestedEventArgs_raw, generate<IMapContextRequestedEventArgs> {};

// MapContextRequestedEventArgs
template<typename X> struct statics<MapContextRequestedEventArgs, X> : X {
	typedef typename X::root_type MapContextRequestedEventArgs;
};
struct MapContextRequestedEventArgs : generate<MapContextRequestedEventArgs> {};

// IMapCustomExperienceChangedEventArgs
struct IMapCustomExperienceChangedEventArgs : IInspectable, generate<IMapCustomExperienceChangedEventArgs> {};

// MapCustomExperienceChangedEventArgs
template<typename X> struct statics<MapCustomExperienceChangedEventArgs, X> : X {
	typedef typename X::root_type MapCustomExperienceChangedEventArgs;
};
struct MapCustomExperienceChangedEventArgs : generate<MapCustomExperienceChangedEventArgs> {};

// IMapElementClickEventArgs
struct IMapElementClickEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElements(Foundation::Collections::IVector<MapElement*>* *value);
};
template<typename X> struct IMapElementClickEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElementClickEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> get() { Foundation::Collections::IVector<MapElement*>* value; hrcheck(enc(&IMapElementClickEventArgs_adaptor::MapElements)->_get_MapElements(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<MapElement>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator->() { return get(); }
		} MapElements;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapElementClickEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapElementClickEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapElementClickEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapElementClickEventArgs_adaptor<X> { typedef adapt IMapElementClickEventArgs; };
struct IMapElementClickEventArgs : IMapElementClickEventArgs_raw, generate<IMapElementClickEventArgs> {};

// MapElementClickEventArgs
template<typename X> struct statics<MapElementClickEventArgs, X> : X {
	typedef typename X::root_type MapElementClickEventArgs;
};
struct MapElementClickEventArgs : generate<MapElementClickEventArgs> {};

// IMapElementPointerEnteredEventArgs
struct IMapElementPointerEnteredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElement(Maps::MapElement* *value);
};
template<typename X> struct IMapElementPointerEnteredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElementPointerEnteredEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Maps::MapElement> get() { Maps::MapElement* value; hrcheck(enc(&IMapElementPointerEnteredEventArgs_adaptor::MapElement)->_get_MapElement(&value)); return from_abi(value); }
			ptr<Maps::MapElement> operator()() { return get(); }
			operator ptr<Maps::MapElement> () { return get(); }
			ptr<Maps::MapElement> operator->() { return get(); }
		} MapElement;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapElementPointerEnteredEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapElementPointerEnteredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapElementPointerEnteredEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapElementPointerEnteredEventArgs_adaptor<X> { typedef adapt IMapElementPointerEnteredEventArgs; };
struct IMapElementPointerEnteredEventArgs : IMapElementPointerEnteredEventArgs_raw, generate<IMapElementPointerEnteredEventArgs> {};

// MapElementPointerEnteredEventArgs
template<typename X> struct statics<MapElementPointerEnteredEventArgs, X> : X {
	typedef typename X::root_type MapElementPointerEnteredEventArgs;
};
struct MapElementPointerEnteredEventArgs : generate<MapElementPointerEnteredEventArgs> {};

// IMapElementPointerExitedEventArgs
struct IMapElementPointerExitedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElement(Maps::MapElement* *value);
};
template<typename X> struct IMapElementPointerExitedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElementPointerExitedEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Maps::MapElement> get() { Maps::MapElement* value; hrcheck(enc(&IMapElementPointerExitedEventArgs_adaptor::MapElement)->_get_MapElement(&value)); return from_abi(value); }
			ptr<Maps::MapElement> operator()() { return get(); }
			operator ptr<Maps::MapElement> () { return get(); }
			ptr<Maps::MapElement> operator->() { return get(); }
		} MapElement;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapElementPointerExitedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapElementPointerExitedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapElementPointerExitedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapElementPointerExitedEventArgs_adaptor<X> { typedef adapt IMapElementPointerExitedEventArgs; };
struct IMapElementPointerExitedEventArgs : IMapElementPointerExitedEventArgs_raw, generate<IMapElementPointerExitedEventArgs> {};

// MapElementPointerExitedEventArgs
template<typename X> struct statics<MapElementPointerExitedEventArgs, X> : X {
	typedef typename X::root_type MapElementPointerExitedEventArgs;
};
struct MapElementPointerExitedEventArgs : generate<MapElementPointerExitedEventArgs> {};

// IMapElementsLayerClickEventArgs
struct IMapElementsLayerClickEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElements(Foundation::Collections::IVector<MapElement*>* *value);
};
template<typename X> struct IMapElementsLayerClickEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElementsLayerClickEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> get() { Foundation::Collections::IVector<MapElement*>* value; hrcheck(enc(&IMapElementsLayerClickEventArgs_adaptor::MapElements)->_get_MapElements(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<MapElement>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator->() { return get(); }
		} MapElements;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapElementsLayerClickEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapElementsLayerClickEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapElementsLayerClickEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapElementsLayerClickEventArgs_adaptor<X> { typedef adapt IMapElementsLayerClickEventArgs; };
struct IMapElementsLayerClickEventArgs : IMapElementsLayerClickEventArgs_raw, generate<IMapElementsLayerClickEventArgs> {};

// MapElementsLayerClickEventArgs
template<typename X> struct statics<MapElementsLayerClickEventArgs, X> : X {
	typedef typename X::root_type MapElementsLayerClickEventArgs;
};
struct MapElementsLayerClickEventArgs : generate<MapElementsLayerClickEventArgs> {};

// IMapElementsLayerContextRequestedEventArgs
struct IMapElementsLayerContextRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElements(Foundation::Collections::IVectorView<MapElement*>* *value);
};
template<typename X> struct IMapElementsLayerContextRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElementsLayerContextRequestedEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> get() { Foundation::Collections::IVectorView<MapElement*>* value; hrcheck(enc(&IMapElementsLayerContextRequestedEventArgs_adaptor::MapElements)->_get_MapElements(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> operator->() { return get(); }
		} MapElements;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapElementsLayerContextRequestedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapElementsLayerContextRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapElementsLayerContextRequestedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapElementsLayerContextRequestedEventArgs_adaptor<X> { typedef adapt IMapElementsLayerContextRequestedEventArgs; };
struct IMapElementsLayerContextRequestedEventArgs : IMapElementsLayerContextRequestedEventArgs_raw, generate<IMapElementsLayerContextRequestedEventArgs> {};

// MapElementsLayerContextRequestedEventArgs
template<typename X> struct statics<MapElementsLayerContextRequestedEventArgs, X> : X {
	typedef typename X::root_type MapElementsLayerContextRequestedEventArgs;
};
struct MapElementsLayerContextRequestedEventArgs : generate<MapElementsLayerContextRequestedEventArgs> {};

// IMapElementsLayerPointerEnteredEventArgs
struct IMapElementsLayerPointerEnteredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElement(Maps::MapElement* *value);
};
template<typename X> struct IMapElementsLayerPointerEnteredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElementsLayerPointerEnteredEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Maps::MapElement> get() { Maps::MapElement* value; hrcheck(enc(&IMapElementsLayerPointerEnteredEventArgs_adaptor::MapElement)->_get_MapElement(&value)); return from_abi(value); }
			ptr<Maps::MapElement> operator()() { return get(); }
			operator ptr<Maps::MapElement> () { return get(); }
			ptr<Maps::MapElement> operator->() { return get(); }
		} MapElement;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapElementsLayerPointerEnteredEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapElementsLayerPointerEnteredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapElementsLayerPointerEnteredEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerEnteredEventArgs_adaptor<X> { typedef adapt IMapElementsLayerPointerEnteredEventArgs; };
struct IMapElementsLayerPointerEnteredEventArgs : IMapElementsLayerPointerEnteredEventArgs_raw, generate<IMapElementsLayerPointerEnteredEventArgs> {};

// MapElementsLayerPointerEnteredEventArgs
template<typename X> struct statics<MapElementsLayerPointerEnteredEventArgs, X> : X {
	typedef typename X::root_type MapElementsLayerPointerEnteredEventArgs;
};
struct MapElementsLayerPointerEnteredEventArgs : generate<MapElementsLayerPointerEnteredEventArgs> {};

// IMapElementsLayerPointerExitedEventArgs
struct IMapElementsLayerPointerExitedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_MapElement(Maps::MapElement* *value);
};
template<typename X> struct IMapElementsLayerPointerExitedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElementsLayerPointerExitedEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Maps::MapElement> get() { Maps::MapElement* value; hrcheck(enc(&IMapElementsLayerPointerExitedEventArgs_adaptor::MapElement)->_get_MapElement(&value)); return from_abi(value); }
			ptr<Maps::MapElement> operator()() { return get(); }
			operator ptr<Maps::MapElement> () { return get(); }
			ptr<Maps::MapElement> operator->() { return get(); }
		} MapElement;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapElementsLayerPointerExitedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapElementsLayerPointerExitedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapElementsLayerPointerExitedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapElementsLayerPointerExitedEventArgs_adaptor<X> { typedef adapt IMapElementsLayerPointerExitedEventArgs; };
struct IMapElementsLayerPointerExitedEventArgs : IMapElementsLayerPointerExitedEventArgs_raw, generate<IMapElementsLayerPointerExitedEventArgs> {};

// MapElementsLayerPointerExitedEventArgs
template<typename X> struct statics<MapElementsLayerPointerExitedEventArgs, X> : X {
	typedef typename X::root_type MapElementsLayerPointerExitedEventArgs;
};
struct MapElementsLayerPointerExitedEventArgs : generate<MapElementsLayerPointerExitedEventArgs> {};

// IMapRightTappedEventArgs
struct IMapRightTappedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
};
template<typename X> struct IMapRightTappedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapRightTappedEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapRightTappedEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapRightTappedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapRightTappedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapRightTappedEventArgs_adaptor<X> { typedef adapt IMapRightTappedEventArgs; };
struct IMapRightTappedEventArgs : IMapRightTappedEventArgs_raw, generate<IMapRightTappedEventArgs> {};

// MapRightTappedEventArgs
template<typename X> struct statics<MapRightTappedEventArgs, X> : X {
	typedef typename X::root_type MapRightTappedEventArgs;
};
struct MapRightTappedEventArgs : generate<MapRightTappedEventArgs> {};

// IMapTargetCameraChangedEventArgs
struct IMapTargetCameraChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Camera(MapCamera* *value);
};
template<typename X> struct IMapTargetCameraChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MapCamera> get() { MapCamera* value; hrcheck(enc(&IMapTargetCameraChangedEventArgs_adaptor::Camera)->_get_Camera(&value)); return from_abi(value); }
			ptr<MapCamera> operator()() { return get(); }
			operator ptr<MapCamera> () { return get(); }
			ptr<MapCamera> operator->() { return get(); }
		} Camera;
	};
	IMapTargetCameraChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapTargetCameraChangedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs_adaptor<X> { typedef adapt IMapTargetCameraChangedEventArgs; };
struct IMapTargetCameraChangedEventArgs : IMapTargetCameraChangedEventArgs_raw, generate<IMapTargetCameraChangedEventArgs> {};

// IMapTargetCameraChangedEventArgs2
struct IMapTargetCameraChangedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeReason(MapCameraChangeReason *value);
};
template<typename X> struct IMapTargetCameraChangedEventArgs2_adaptor : X {
	union {
		struct : property {
			MapCameraChangeReason get() { MapCameraChangeReason value; hrcheck(enc(&IMapTargetCameraChangedEventArgs2_adaptor::ChangeReason)->_get_ChangeReason(&value)); return value; }
			MapCameraChangeReason operator()() { return get(); }
			operator MapCameraChangeReason () { return get(); }
		} ChangeReason;
	};
	IMapTargetCameraChangedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IMapTargetCameraChangedEventArgs2, X> : Windows::UI::Xaml::Controls::Maps::IMapTargetCameraChangedEventArgs2_adaptor<X> { typedef adapt IMapTargetCameraChangedEventArgs2; };
struct IMapTargetCameraChangedEventArgs2 : IMapTargetCameraChangedEventArgs2_raw, generate<IMapTargetCameraChangedEventArgs2> {};

// MapTargetCameraChangedEventArgs
template<typename X> struct statics<MapTargetCameraChangedEventArgs, X> : X {
	typedef typename X::root_type MapTargetCameraChangedEventArgs;
};
struct MapTargetCameraChangedEventArgs : generate<MapTargetCameraChangedEventArgs> {};

// IMapTileBitmapRequest
struct IMapTileBitmapRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_PixelData(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_PixelData(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _GetDeferral(MapTileBitmapRequestDeferral* *returnValue);
};
template<typename X> struct IMapTileBitmapRequest_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IMapTileBitmapRequest_adaptor::PixelData)->_get_PixelData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IMapTileBitmapRequest_adaptor::PixelData)->_put_PixelData(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} PixelData;
	};
	ptr<MapTileBitmapRequestDeferral> GetDeferral() { MapTileBitmapRequestDeferral* returnValue; hrcheck(X::get()->_GetDeferral(&returnValue)); return from_abi(returnValue); }
	IMapTileBitmapRequest_adaptor() {}
};
template<typename X> struct adapt<IMapTileBitmapRequest, X> : Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequest_adaptor<X> { typedef adapt IMapTileBitmapRequest; };
struct IMapTileBitmapRequest : IMapTileBitmapRequest_raw, generate<IMapTileBitmapRequest> {};

// IMapTileBitmapRequestDeferral
struct IMapTileBitmapRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IMapTileBitmapRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IMapTileBitmapRequestDeferral, X> : Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestDeferral_adaptor<X> { typedef adapt IMapTileBitmapRequestDeferral; };
struct IMapTileBitmapRequestDeferral : IMapTileBitmapRequestDeferral_raw, generate<IMapTileBitmapRequestDeferral> {};

// MapTileBitmapRequestDeferral
template<typename X> struct statics<MapTileBitmapRequestDeferral, X> : X {
	typedef typename X::root_type MapTileBitmapRequestDeferral;
};
struct MapTileBitmapRequestDeferral : generate<MapTileBitmapRequestDeferral> {};

// MapTileBitmapRequest
template<typename X> struct statics<MapTileBitmapRequest, X> : X {
	typedef typename X::root_type MapTileBitmapRequest;
};
struct MapTileBitmapRequest : generate<MapTileBitmapRequest> {};

// IMapTileBitmapRequestedEventArgs
struct IMapTileBitmapRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_X(int *value);
	virtual STDMETHODIMP _get_Y(int *value);
	virtual STDMETHODIMP _get_ZoomLevel(int *value);
	virtual STDMETHODIMP _get_Request(MapTileBitmapRequest* *value);
};
template<typename Z> struct IMapTileBitmapRequestedEventArgs_adaptor : Z {
	union {
		struct : property {
			ptr<MapTileBitmapRequest> get() { MapTileBitmapRequest* value; hrcheck(enc(&IMapTileBitmapRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<MapTileBitmapRequest> operator()() { return get(); }
			operator ptr<MapTileBitmapRequest> () { return get(); }
			ptr<MapTileBitmapRequest> operator->() { return get(); }
		} Request;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileBitmapRequestedEventArgs_adaptor::X)->_get_X(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} X;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileBitmapRequestedEventArgs_adaptor::Y)->_get_Y(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Y;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileBitmapRequestedEventArgs_adaptor::ZoomLevel)->_get_ZoomLevel(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ZoomLevel;
	};
	IMapTileBitmapRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapTileBitmapRequestedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapTileBitmapRequestedEventArgs_adaptor<X> { typedef adapt IMapTileBitmapRequestedEventArgs; };
struct IMapTileBitmapRequestedEventArgs : IMapTileBitmapRequestedEventArgs_raw, generate<IMapTileBitmapRequestedEventArgs> {};

// MapTileBitmapRequestedEventArgs
template<typename X> struct statics<MapTileBitmapRequestedEventArgs, X> : X {
	typedef typename X::root_type MapTileBitmapRequestedEventArgs;
};
struct MapTileBitmapRequestedEventArgs : generate<MapTileBitmapRequestedEventArgs> {};

// IMapTileUriRequest
struct IMapTileUriRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* value);
	virtual STDMETHODIMP _GetDeferral(MapTileUriRequestDeferral* *returnValue);
};
template<typename X> struct IMapTileUriRequest_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IMapTileUriRequest_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IMapTileUriRequest_adaptor::Uri)->_put_Uri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Uri;
	};
	ptr<MapTileUriRequestDeferral> GetDeferral() { MapTileUriRequestDeferral* returnValue; hrcheck(X::get()->_GetDeferral(&returnValue)); return from_abi(returnValue); }
	IMapTileUriRequest_adaptor() {}
};
template<typename X> struct adapt<IMapTileUriRequest, X> : Windows::UI::Xaml::Controls::Maps::IMapTileUriRequest_adaptor<X> { typedef adapt IMapTileUriRequest; };
struct IMapTileUriRequest : IMapTileUriRequest_raw, generate<IMapTileUriRequest> {};

// IMapTileUriRequestDeferral
struct IMapTileUriRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IMapTileUriRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IMapTileUriRequestDeferral, X> : Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestDeferral_adaptor<X> { typedef adapt IMapTileUriRequestDeferral; };
struct IMapTileUriRequestDeferral : IMapTileUriRequestDeferral_raw, generate<IMapTileUriRequestDeferral> {};

// MapTileUriRequestDeferral
template<typename X> struct statics<MapTileUriRequestDeferral, X> : X {
	typedef typename X::root_type MapTileUriRequestDeferral;
};
struct MapTileUriRequestDeferral : generate<MapTileUriRequestDeferral> {};

// MapTileUriRequest
template<typename X> struct statics<MapTileUriRequest, X> : X {
	typedef typename X::root_type MapTileUriRequest;
};
struct MapTileUriRequest : generate<MapTileUriRequest> {};

// IMapTileUriRequestedEventArgs
struct IMapTileUriRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_X(int *value);
	virtual STDMETHODIMP _get_Y(int *value);
	virtual STDMETHODIMP _get_ZoomLevel(int *value);
	virtual STDMETHODIMP _get_Request(MapTileUriRequest* *value);
};
template<typename Z> struct IMapTileUriRequestedEventArgs_adaptor : Z {
	union {
		struct : property {
			ptr<MapTileUriRequest> get() { MapTileUriRequest* value; hrcheck(enc(&IMapTileUriRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<MapTileUriRequest> operator()() { return get(); }
			operator ptr<MapTileUriRequest> () { return get(); }
			ptr<MapTileUriRequest> operator->() { return get(); }
		} Request;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileUriRequestedEventArgs_adaptor::X)->_get_X(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} X;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileUriRequestedEventArgs_adaptor::Y)->_get_Y(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Y;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileUriRequestedEventArgs_adaptor::ZoomLevel)->_get_ZoomLevel(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ZoomLevel;
	};
	IMapTileUriRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapTileUriRequestedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapTileUriRequestedEventArgs_adaptor<X> { typedef adapt IMapTileUriRequestedEventArgs; };
struct IMapTileUriRequestedEventArgs : IMapTileUriRequestedEventArgs_raw, generate<IMapTileUriRequestedEventArgs> {};

// MapTileUriRequestedEventArgs
template<typename X> struct statics<MapTileUriRequestedEventArgs, X> : X {
	typedef typename X::root_type MapTileUriRequestedEventArgs;
};
struct MapTileUriRequestedEventArgs : generate<MapTileUriRequestedEventArgs> {};

// IMapCamera
struct IMapCamera_raw : IInspectable {
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _put_Location(Devices::Geolocation::Geopoint* value);
	virtual STDMETHODIMP _get_Heading(double *value);
	virtual STDMETHODIMP _put_Heading(double value);
	virtual STDMETHODIMP _get_Pitch(double *value);
	virtual STDMETHODIMP _put_Pitch(double value);
	virtual STDMETHODIMP _get_Roll(double *value);
	virtual STDMETHODIMP _put_Roll(double value);
	virtual STDMETHODIMP _get_FieldOfView(double *value);
	virtual STDMETHODIMP _put_FieldOfView(double value);
};
template<typename X> struct IMapCamera_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IMapCamera_adaptor::FieldOfView)->_get_FieldOfView(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapCamera_adaptor::FieldOfView)->_put_FieldOfView(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} FieldOfView;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapCamera_adaptor::Heading)->_get_Heading(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapCamera_adaptor::Heading)->_put_Heading(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Heading;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapCamera_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::Geopoint> value) { hrcheck(enc(&IMapCamera_adaptor::Location)->_put_Location(value)); }
			void operator=(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
		} Location;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapCamera_adaptor::Pitch)->_get_Pitch(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapCamera_adaptor::Pitch)->_put_Pitch(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Pitch;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapCamera_adaptor::Roll)->_get_Roll(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapCamera_adaptor::Roll)->_put_Roll(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Roll;
	};
	IMapCamera_adaptor() {}
};
template<typename X> struct adapt<IMapCamera, X> : Windows::UI::Xaml::Controls::Maps::IMapCamera_adaptor<X> { typedef adapt IMapCamera; };
struct IMapCamera : IMapCamera_raw, generate<IMapCamera> {};

// IMapCameraFactory
struct IMapCameraFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithLocation(Devices::Geolocation::Geopoint* location, MapCamera* *instance);
	virtual STDMETHODIMP _CreateInstanceWithLocationAndHeading(Devices::Geolocation::Geopoint* location, double headingInDegrees, MapCamera* *instance);
	virtual STDMETHODIMP _CreateInstanceWithLocationHeadingAndPitch(Devices::Geolocation::Geopoint* location, double headingInDegrees, double pitchInDegrees, MapCamera* *instance);
	virtual STDMETHODIMP _CreateInstanceWithLocationHeadingPitchRollAndFieldOfView(Devices::Geolocation::Geopoint* location, double headingInDegrees, double pitchInDegrees, double rollInDegrees, double fieldOfViewInDegrees, MapCamera* *instance);
};

// MapCamera
template<typename> struct MapCamera_statics {
	static MapCamera *activate(pptr<Devices::Geolocation::Geopoint> location) { MapCamera *instance; hrcheck(get_activation_factory<MapCamera, IMapCameraFactory>()->_CreateInstanceWithLocation(location, &instance)); return instance; }
	static MapCamera *activate(pptr<Devices::Geolocation::Geopoint> location, double headingInDegrees) { MapCamera *instance; hrcheck(get_activation_factory<MapCamera, IMapCameraFactory>()->_CreateInstanceWithLocationAndHeading(location, headingInDegrees, &instance)); return instance; }
	static MapCamera *activate(pptr<Devices::Geolocation::Geopoint> location, double headingInDegrees, double pitchInDegrees) { MapCamera *instance; hrcheck(get_activation_factory<MapCamera, IMapCameraFactory>()->_CreateInstanceWithLocationHeadingAndPitch(location, headingInDegrees, pitchInDegrees, &instance)); return instance; }
	static MapCamera *activate(pptr<Devices::Geolocation::Geopoint> location, double headingInDegrees, double pitchInDegrees, double rollInDegrees, double fieldOfViewInDegrees) { MapCamera *instance; hrcheck(get_activation_factory<MapCamera, IMapCameraFactory>()->_CreateInstanceWithLocationHeadingPitchRollAndFieldOfView(location, headingInDegrees, pitchInDegrees, rollInDegrees, fieldOfViewInDegrees, &instance)); return instance; }
};

template<typename X> struct statics<MapCamera, X> : X, Windows::UI::Xaml::Controls::Maps::MapCamera_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapCamera_statics<void>::activate;
	typedef typename X::root_type MapCamera;
};
struct MapCamera : generate<MapCamera> {};

// IMapCustomExperience
struct IMapCustomExperience : IInspectable, generate<IMapCustomExperience> {};

// IMapCustomExperienceFactory
struct IMapCustomExperienceFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, MapCustomExperience* *instance);
};

// MapCustomExperience
template<typename> struct MapCustomExperience_statics {
	static MapCustomExperience *activate(object_ref outer, IInspectable* *inner) { MapCustomExperience *instance; hrcheck(get_activation_factory<MapCustomExperience, IMapCustomExperienceFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MapCustomExperience, X> : X, Windows::UI::Xaml::Controls::Maps::MapCustomExperience_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapCustomExperience_statics<void>::activate;
	typedef typename X::root_type MapCustomExperience;
};
struct MapCustomExperience : generate<MapCustomExperience> {};

// IMapElement
struct IMapElement_raw : IInspectable {
	virtual STDMETHODIMP _get_ZIndex(int *value);
	virtual STDMETHODIMP _put_ZIndex(int value);
	virtual STDMETHODIMP _get_Visible(bool *value);
	virtual STDMETHODIMP _put_Visible(bool value);
};
template<typename X> struct IMapElement_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapElement_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapElement_adaptor::Visible)->_put_Visible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Visible;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapElement_adaptor::ZIndex)->_get_ZIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IMapElement_adaptor::ZIndex)->_put_ZIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ZIndex;
	};
	IMapElement_adaptor() {}
};
template<typename X> struct adapt<IMapElement, X> : Windows::UI::Xaml::Controls::Maps::IMapElement_adaptor<X> { typedef adapt IMapElement; };
struct IMapElement : IMapElement_raw, generate<IMapElement> {};

// IMapElementStatics
struct IMapElementStatics : IInspectable {
	virtual STDMETHODIMP _get_ZIndexProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_VisibleProperty(DependencyProperty* *value);
};

// IMapElementFactory
struct IMapElementFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, MapElement* *instance);
};

// IMapElement2
struct IMapElement2_raw : IInspectable {
	virtual STDMETHODIMP _get_MapTabIndex(int *value);
	virtual STDMETHODIMP _put_MapTabIndex(int value);
};
template<typename X> struct IMapElement2_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IMapElement2_adaptor::MapTabIndex)->_get_MapTabIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IMapElement2_adaptor::MapTabIndex)->_put_MapTabIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} MapTabIndex;
	};
	IMapElement2_adaptor() {}
};
template<typename X> struct adapt<IMapElement2, X> : Windows::UI::Xaml::Controls::Maps::IMapElement2_adaptor<X> { typedef adapt IMapElement2; };
struct IMapElement2 : IMapElement2_raw, generate<IMapElement2> {};

// IMapElementStatics2
struct IMapElementStatics2 : IInspectable {
	virtual STDMETHODIMP _get_MapTabIndexProperty(DependencyProperty* *value);
};

// IMapElement3
struct IMapElement3_raw : IInspectable {
	virtual STDMETHODIMP _get_MapStyleSheetEntry(HSTRING *value);
	virtual STDMETHODIMP _put_MapStyleSheetEntry(HSTRING value);
	virtual STDMETHODIMP _get_MapStyleSheetEntryState(HSTRING *value);
	virtual STDMETHODIMP _put_MapStyleSheetEntryState(HSTRING value);
	virtual STDMETHODIMP _get_Tag(IInspectable* *value);
	virtual STDMETHODIMP _put_Tag(IInspectable* value);
};
template<typename X> struct IMapElement3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapElement3_adaptor::MapStyleSheetEntry)->_get_MapStyleSheetEntry(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMapElement3_adaptor::MapStyleSheetEntry)->_put_MapStyleSheetEntry(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MapStyleSheetEntry;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapElement3_adaptor::MapStyleSheetEntryState)->_get_MapStyleSheetEntryState(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMapElement3_adaptor::MapStyleSheetEntryState)->_put_MapStyleSheetEntryState(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MapStyleSheetEntryState;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IMapElement3_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
			void put(object_ref value) { hrcheck(enc(&IMapElement3_adaptor::Tag)->_put_Tag(value)); }
			void operator=(object_ref value) { put(move(value)); }
			void operator()(object_ref value) { put(move(value)); }
		} Tag;
	};
	IMapElement3_adaptor() {}
};
template<typename X> struct adapt<IMapElement3, X> : Windows::UI::Xaml::Controls::Maps::IMapElement3_adaptor<X> { typedef adapt IMapElement3; };
struct IMapElement3 : IMapElement3_raw, generate<IMapElement3> {};

// IMapElementStatics3
struct IMapElementStatics3 : IInspectable {
	virtual STDMETHODIMP _get_MapStyleSheetEntryProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_MapStyleSheetEntryStateProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TagProperty(DependencyProperty* *value);
};

// IMapElement4
struct IMapElement4_raw : IInspectable {
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsEnabled(bool value);
};
template<typename X> struct IMapElement4_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapElement4_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapElement4_adaptor::IsEnabled)->_put_IsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsEnabled;
	};
	IMapElement4_adaptor() {}
};
template<typename X> struct adapt<IMapElement4, X> : Windows::UI::Xaml::Controls::Maps::IMapElement4_adaptor<X> { typedef adapt IMapElement4; };
struct IMapElement4 : IMapElement4_raw, generate<IMapElement4> {};

// IMapElementStatics4
struct IMapElementStatics4 : IInspectable {
	virtual STDMETHODIMP _get_IsEnabledProperty(DependencyProperty* *value);
};

// MapElement
template<typename> struct MapElement_statics {
	static struct _VisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement, IMapElementStatics>()->_get_VisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} VisibleProperty;
	static struct _ZIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement, IMapElementStatics>()->_get_ZIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ZIndexProperty;
	static struct _MapTabIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement, IMapElementStatics2>()->_get_MapTabIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapTabIndexProperty;
	static struct _MapStyleSheetEntryProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement, IMapElementStatics3>()->_get_MapStyleSheetEntryProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapStyleSheetEntryProperty;
	static struct _MapStyleSheetEntryStateProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement, IMapElementStatics3>()->_get_MapStyleSheetEntryStateProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapStyleSheetEntryStateProperty;
	static struct _TagProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement, IMapElementStatics3>()->_get_TagProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TagProperty;
	static struct _IsEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement, IMapElementStatics4>()->_get_IsEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsEnabledProperty;
	static MapElement *activate(object_ref outer, IInspectable* *inner) { MapElement *instance; hrcheck(get_activation_factory<MapElement, IMapElementFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};
template<typename X> typename MapElement_statics<X>::_VisibleProperty MapElement_statics<X>::VisibleProperty;
template<typename X> typename MapElement_statics<X>::_ZIndexProperty MapElement_statics<X>::ZIndexProperty;
template<typename X> typename MapElement_statics<X>::_MapTabIndexProperty MapElement_statics<X>::MapTabIndexProperty;
template<typename X> typename MapElement_statics<X>::_MapStyleSheetEntryProperty MapElement_statics<X>::MapStyleSheetEntryProperty;
template<typename X> typename MapElement_statics<X>::_MapStyleSheetEntryStateProperty MapElement_statics<X>::MapStyleSheetEntryStateProperty;
template<typename X> typename MapElement_statics<X>::_TagProperty MapElement_statics<X>::TagProperty;
template<typename X> typename MapElement_statics<X>::_IsEnabledProperty MapElement_statics<X>::IsEnabledProperty;

template<typename X> struct statics<MapElement, X> : X, Windows::UI::Xaml::Controls::Maps::MapElement_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapElement_statics<void>::activate;
	typedef typename X::root_type MapElement;
};
struct MapElement : generate<MapElement> {};

// IMapInputEventArgs
struct IMapInputEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
};
template<typename X> struct IMapInputEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapInputEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapInputEventArgs_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} Position;
	};
	IMapInputEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapInputEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapInputEventArgs_adaptor<X> { typedef adapt IMapInputEventArgs; };
struct IMapInputEventArgs : IMapInputEventArgs_raw, generate<IMapInputEventArgs> {};

// MapInputEventArgs
template<typename X> struct statics<MapInputEventArgs, X> : X {
	typedef typename X::root_type MapInputEventArgs;
};
struct MapInputEventArgs : generate<MapInputEventArgs> {};

// IMapItemsControl
struct IMapItemsControl_raw : IInspectable {
	virtual STDMETHODIMP _get_ItemsSource(IInspectable* *value);
	virtual STDMETHODIMP _put_ItemsSource(IInspectable* value);
	virtual STDMETHODIMP _get_Items(Foundation::Collections::IVector<DependencyObject*>* *value);
	virtual STDMETHODIMP _get_ItemTemplate(DataTemplate* *value);
	virtual STDMETHODIMP _put_ItemTemplate(DataTemplate* value);
};
template<typename X> struct IMapItemsControl_adaptor : X {
	union {
		struct : property {
			ptr<DataTemplate> get() { DataTemplate* value; hrcheck(enc(&IMapItemsControl_adaptor::ItemTemplate)->_get_ItemTemplate(&value)); return from_abi(value); }
			ptr<DataTemplate> operator()() { return get(); }
			operator ptr<DataTemplate> () { return get(); }
			ptr<DataTemplate> operator->() { return get(); }
			void put(pptr<DataTemplate> value) { hrcheck(enc(&IMapItemsControl_adaptor::ItemTemplate)->_put_ItemTemplate(value)); }
			void operator=(pptr<DataTemplate> value) { put(value); }
			void operator()(pptr<DataTemplate> value) { put(value); }
		} ItemTemplate;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> get() { Foundation::Collections::IVector<DependencyObject*>* value; hrcheck(enc(&IMapItemsControl_adaptor::Items)->_get_Items(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> operator->() { return get(); }
		} Items;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IMapItemsControl_adaptor::ItemsSource)->_get_ItemsSource(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
			void put(object_ref value) { hrcheck(enc(&IMapItemsControl_adaptor::ItemsSource)->_put_ItemsSource(value)); }
			void operator=(object_ref value) { put(move(value)); }
			void operator()(object_ref value) { put(move(value)); }
		} ItemsSource;
	};
	IMapItemsControl_adaptor() {}
};
template<typename X> struct adapt<IMapItemsControl, X> : Windows::UI::Xaml::Controls::Maps::IMapItemsControl_adaptor<X> { typedef adapt IMapItemsControl; };
struct IMapItemsControl : IMapItemsControl_raw, generate<IMapItemsControl> {};

// IMapItemsControlStatics
struct IMapItemsControlStatics : IInspectable {
	virtual STDMETHODIMP _get_ItemsSourceProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ItemsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ItemTemplateProperty(DependencyProperty* *value);
};

// MapItemsControl
template<typename> struct MapItemsControl_statics {
	static struct _ItemTemplateProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapItemsControl, IMapItemsControlStatics>()->_get_ItemTemplateProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ItemTemplateProperty;
	static struct _ItemsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapItemsControl, IMapItemsControlStatics>()->_get_ItemsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ItemsProperty;
	static struct _ItemsSourceProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapItemsControl, IMapItemsControlStatics>()->_get_ItemsSourceProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ItemsSourceProperty;
};
template<typename X> typename MapItemsControl_statics<X>::_ItemTemplateProperty MapItemsControl_statics<X>::ItemTemplateProperty;
template<typename X> typename MapItemsControl_statics<X>::_ItemsProperty MapItemsControl_statics<X>::ItemsProperty;
template<typename X> typename MapItemsControl_statics<X>::_ItemsSourceProperty MapItemsControl_statics<X>::ItemsSourceProperty;

template<typename X> struct statics<MapItemsControl, X> : X, Windows::UI::Xaml::Controls::Maps::MapItemsControl_statics<void> {
	typedef typename X::root_type MapItemsControl;
};
struct MapItemsControl : generate<MapItemsControl> {};

// IMapLayer
struct IMapLayer_raw : IInspectable {
	virtual STDMETHODIMP _get_MapTabIndex(int *value);
	virtual STDMETHODIMP _put_MapTabIndex(int value);
	virtual STDMETHODIMP _get_Visible(bool *value);
	virtual STDMETHODIMP _put_Visible(bool value);
	virtual STDMETHODIMP _get_ZIndex(int *value);
	virtual STDMETHODIMP _put_ZIndex(int value);
};
template<typename X> struct IMapLayer_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IMapLayer_adaptor::MapTabIndex)->_get_MapTabIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IMapLayer_adaptor::MapTabIndex)->_put_MapTabIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} MapTabIndex;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapLayer_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapLayer_adaptor::Visible)->_put_Visible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Visible;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapLayer_adaptor::ZIndex)->_get_ZIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IMapLayer_adaptor::ZIndex)->_put_ZIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ZIndex;
	};
	IMapLayer_adaptor() {}
};
template<typename X> struct adapt<IMapLayer, X> : Windows::UI::Xaml::Controls::Maps::IMapLayer_adaptor<X> { typedef adapt IMapLayer; };
struct IMapLayer : IMapLayer_raw, generate<IMapLayer> {};

// IMapLayerStatics
struct IMapLayerStatics : IInspectable {
	virtual STDMETHODIMP _get_MapTabIndexProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_VisibleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ZIndexProperty(DependencyProperty* *value);
};

// IMapLayerFactory
struct IMapLayerFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, MapLayer* *instance);
};

// MapLayer
template<typename> struct MapLayer_statics {
	static struct _MapTabIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapLayer, IMapLayerStatics>()->_get_MapTabIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapTabIndexProperty;
	static struct _VisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapLayer, IMapLayerStatics>()->_get_VisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} VisibleProperty;
	static struct _ZIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapLayer, IMapLayerStatics>()->_get_ZIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ZIndexProperty;
	static MapLayer *activate(object_ref outer, IInspectable* *inner) { MapLayer *instance; hrcheck(get_activation_factory<MapLayer, IMapLayerFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};
template<typename X> typename MapLayer_statics<X>::_MapTabIndexProperty MapLayer_statics<X>::MapTabIndexProperty;
template<typename X> typename MapLayer_statics<X>::_VisibleProperty MapLayer_statics<X>::VisibleProperty;
template<typename X> typename MapLayer_statics<X>::_ZIndexProperty MapLayer_statics<X>::ZIndexProperty;

template<typename X> struct statics<MapLayer, X> : X, Windows::UI::Xaml::Controls::Maps::MapLayer_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapLayer_statics<void>::activate;
	typedef typename X::root_type MapLayer;
};
struct MapLayer : generate<MapLayer> {};

// IMapModel3D
struct IMapModel3D : IInspectable, generate<IMapModel3D> {};

// IMapModel3DStatics
struct IMapModel3DStatics : IInspectable {
	virtual STDMETHODIMP _CreateFrom3MFAsync(Storage::Streams::IRandomAccessStreamReference* source, Foundation::IAsyncOperation<MapModel3D*>* *returnValue);
	virtual STDMETHODIMP _CreateFrom3MFWithShadingOptionAsync(Storage::Streams::IRandomAccessStreamReference* source, MapModel3DShadingOption shadingOption, Foundation::IAsyncOperation<MapModel3D*>* *returnValue);
};

// IMapModel3DFactory
struct IMapModel3DFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, MapModel3D* *instance);
};

// MapModel3D
template<typename> struct MapModel3D_statics {
	static ptr<Foundation::IAsyncOperation<ptr<MapModel3D>>> CreateFrom3MFAsync(pptr<Storage::Streams::IRandomAccessStreamReference> source) { Foundation::IAsyncOperation<MapModel3D*>* returnValue; hrcheck(get_activation_factory<MapModel3D, IMapModel3DStatics>()->_CreateFrom3MFAsync(source, &returnValue)); return from_abi(returnValue); }
	static ptr<Foundation::IAsyncOperation<ptr<MapModel3D>>> CreateFrom3MFAsync(pptr<Storage::Streams::IRandomAccessStreamReference> source, MapModel3DShadingOption shadingOption) { Foundation::IAsyncOperation<MapModel3D*>* returnValue; hrcheck(get_activation_factory<MapModel3D, IMapModel3DStatics>()->_CreateFrom3MFWithShadingOptionAsync(source, shadingOption, &returnValue)); return from_abi(returnValue); }
	static MapModel3D *activate(object_ref outer, IInspectable* *inner) { MapModel3D *instance; hrcheck(get_activation_factory<MapModel3D, IMapModel3DFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MapModel3D, X> : X, Windows::UI::Xaml::Controls::Maps::MapModel3D_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapModel3D_statics<void>::activate;
	typedef typename X::root_type MapModel3D;
};
struct MapModel3D : generate<MapModel3D> {};

// IMapRouteView
struct IMapRouteView_raw : IInspectable {
	virtual STDMETHODIMP _get_RouteColor(Color *value);
	virtual STDMETHODIMP _put_RouteColor(Color value);
	virtual STDMETHODIMP _get_OutlineColor(Color *value);
	virtual STDMETHODIMP _put_OutlineColor(Color value);
	virtual STDMETHODIMP _get_Route(Services::Maps::MapRoute* *value);
};
template<typename X> struct IMapRouteView_adaptor : X {
	union {
		struct : property {
			Color get() { Color value; hrcheck(enc(&IMapRouteView_adaptor::OutlineColor)->_get_OutlineColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IMapRouteView_adaptor::OutlineColor)->_put_OutlineColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} OutlineColor;
		struct : property {
			ptr<Services::Maps::MapRoute> get() { Services::Maps::MapRoute* value; hrcheck(enc(&IMapRouteView_adaptor::Route)->_get_Route(&value)); return from_abi(value); }
			ptr<Services::Maps::MapRoute> operator()() { return get(); }
			operator ptr<Services::Maps::MapRoute> () { return get(); }
			ptr<Services::Maps::MapRoute> operator->() { return get(); }
		} Route;
		struct : property {
			Color get() { Color value; hrcheck(enc(&IMapRouteView_adaptor::RouteColor)->_get_RouteColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IMapRouteView_adaptor::RouteColor)->_put_RouteColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} RouteColor;
	};
	IMapRouteView_adaptor() {}
};
template<typename X> struct adapt<IMapRouteView, X> : Windows::UI::Xaml::Controls::Maps::IMapRouteView_adaptor<X> { typedef adapt IMapRouteView; };
struct IMapRouteView : IMapRouteView_raw, generate<IMapRouteView> {};

// IMapRouteViewFactory
struct IMapRouteViewFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithMapRoute(Services::Maps::MapRoute* route, IInspectable* outer, IInspectable* *inner, MapRouteView* *instance);
};

// MapRouteView
template<typename> struct MapRouteView_statics {
	static MapRouteView *activate(pptr<Services::Maps::MapRoute> route, object_ref outer, IInspectable* *inner) { MapRouteView *instance; hrcheck(get_activation_factory<MapRouteView, IMapRouteViewFactory>()->_CreateInstanceWithMapRoute(route, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MapRouteView, X> : X, Windows::UI::Xaml::Controls::Maps::MapRouteView_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapRouteView_statics<void>::activate;
	typedef typename X::root_type MapRouteView;
};
struct MapRouteView : generate<MapRouteView> {};

// IMapScene
struct IMapScene_raw : IInspectable {
	virtual STDMETHODIMP _get_TargetCamera(MapCamera* *value);
	virtual STDMETHODIMP _add_TargetCameraChanged(Foundation::TypedEventHandler<MapScene*, MapTargetCameraChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TargetCameraChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMapScene_adaptor : X {
	union {
		struct : property {
			ptr<MapCamera> get() { MapCamera* value; hrcheck(enc(&IMapScene_adaptor::TargetCamera)->_get_TargetCamera(&value)); return from_abi(value); }
			ptr<MapCamera> operator()() { return get(); }
			operator ptr<MapCamera> () { return get(); }
			ptr<MapCamera> operator->() { return get(); }
		} TargetCamera;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapScene>, ptr<MapTargetCameraChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapScene_adaptor::TargetCameraChanged)->_add_TargetCameraChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapScene_adaptor::TargetCameraChanged)->_remove_TargetCameraChanged(token)); }
		} TargetCameraChanged;
	};
	IMapScene_adaptor() {}
};
template<typename X> struct adapt<IMapScene, X> : Windows::UI::Xaml::Controls::Maps::IMapScene_adaptor<X> { typedef adapt IMapScene; };
struct IMapScene : IMapScene_raw, generate<IMapScene> {};

// IMapSceneStatics
struct IMapSceneStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromBoundingBox(Devices::Geolocation::GeoboundingBox* bounds, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromBoundingBoxWithHeadingAndPitch(Devices::Geolocation::GeoboundingBox* bounds, double headingInDegrees, double pitchInDegrees, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromCamera(MapCamera* camera, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromLocation(Devices::Geolocation::Geopoint* location, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromLocationWithHeadingAndPitch(Devices::Geolocation::Geopoint* location, double headingInDegrees, double pitchInDegrees, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromLocationAndRadius(Devices::Geolocation::Geopoint* location, double radiusInMeters, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromLocationAndRadiusWithHeadingAndPitch(Devices::Geolocation::Geopoint* location, double radiusInMeters, double headingInDegrees, double pitchInDegrees, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromLocations(Foundation::Collections::IIterable<Devices::Geolocation::Geopoint*>* locations, MapScene* *returnValue);
	virtual STDMETHODIMP _CreateFromLocationsWithHeadingAndPitch(Foundation::Collections::IIterable<Devices::Geolocation::Geopoint*>* locations, double headingInDegrees, double pitchInDegrees, MapScene* *returnValue);
};

// MapScene
template<typename> struct MapScene_statics {
	static ptr<MapScene> CreateFromBoundingBox(pptr<Devices::Geolocation::GeoboundingBox> bounds) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromBoundingBox(bounds, &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromBoundingBox(pptr<Devices::Geolocation::GeoboundingBox> bounds, double headingInDegrees, double pitchInDegrees) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromBoundingBoxWithHeadingAndPitch(bounds, headingInDegrees, pitchInDegrees, &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromCamera(pptr<MapCamera> camera) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromCamera(camera, &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromLocation(pptr<Devices::Geolocation::Geopoint> location) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromLocation(location, &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromLocation(pptr<Devices::Geolocation::Geopoint> location, double headingInDegrees, double pitchInDegrees) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromLocationWithHeadingAndPitch(location, headingInDegrees, pitchInDegrees, &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromLocationAndRadius(pptr<Devices::Geolocation::Geopoint> location, double radiusInMeters) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromLocationAndRadius(location, radiusInMeters, &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromLocationAndRadius(pptr<Devices::Geolocation::Geopoint> location, double radiusInMeters, double headingInDegrees, double pitchInDegrees) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromLocationAndRadiusWithHeadingAndPitch(location, radiusInMeters, headingInDegrees, pitchInDegrees, &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromLocations(pptr<Foundation::Collections::IIterable<ptr<Devices::Geolocation::Geopoint>>> locations) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromLocations(to_abi(locations), &returnValue)); return from_abi(returnValue); }
	static ptr<MapScene> CreateFromLocations(pptr<Foundation::Collections::IIterable<ptr<Devices::Geolocation::Geopoint>>> locations, double headingInDegrees, double pitchInDegrees) { MapScene* returnValue; hrcheck(get_activation_factory<MapScene, IMapSceneStatics>()->_CreateFromLocationsWithHeadingAndPitch(to_abi(locations), headingInDegrees, pitchInDegrees, &returnValue)); return from_abi(returnValue); }
};

template<typename X> struct statics<MapScene, X> : X, Windows::UI::Xaml::Controls::Maps::MapScene_statics<void> {
	typedef typename X::root_type MapScene;
};
struct MapScene : generate<MapScene> {};

// IMapStyleSheet
struct IMapStyleSheet : IInspectable, generate<IMapStyleSheet> {};

// IMapStyleSheetStatics
struct IMapStyleSheetStatics : IInspectable {
	virtual STDMETHODIMP _Aerial(MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _AerialWithOverlay(MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _RoadLight(MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _RoadDark(MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _RoadHighContrastLight(MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _RoadHighContrastDark(MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _Combine(Foundation::Collections::IIterable<MapStyleSheet*>* styleSheets, MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _ParseFromJson(HSTRING styleAsJson, MapStyleSheet* *returnValue);
	virtual STDMETHODIMP _TryParseFromJson(HSTRING styleAsJson, MapStyleSheet* *styleSheet, bool *returnValue);
};

// MapStyleSheet
template<typename> struct MapStyleSheet_statics {
	static ptr<MapStyleSheet> Aerial() { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_Aerial(&returnValue)); return from_abi(returnValue); }
	static ptr<MapStyleSheet> AerialWithOverlay() { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_AerialWithOverlay(&returnValue)); return from_abi(returnValue); }
	static ptr<MapStyleSheet> RoadLight() { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_RoadLight(&returnValue)); return from_abi(returnValue); }
	static ptr<MapStyleSheet> RoadDark() { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_RoadDark(&returnValue)); return from_abi(returnValue); }
	static ptr<MapStyleSheet> RoadHighContrastLight() { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_RoadHighContrastLight(&returnValue)); return from_abi(returnValue); }
	static ptr<MapStyleSheet> RoadHighContrastDark() { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_RoadHighContrastDark(&returnValue)); return from_abi(returnValue); }
	static ptr<MapStyleSheet> Combine(pptr<Foundation::Collections::IIterable<ptr<MapStyleSheet>>> styleSheets) { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_Combine(to_abi(styleSheets), &returnValue)); return from_abi(returnValue); }
	static ptr<MapStyleSheet> ParseFromJson(hstring_ref styleAsJson) { MapStyleSheet* returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_ParseFromJson(styleAsJson, &returnValue)); return from_abi(returnValue); }
	static bool TryParseFromJson(hstring_ref styleAsJson, pptr<MapStyleSheet> *styleSheet) { bool returnValue; hrcheck(get_activation_factory<MapStyleSheet, IMapStyleSheetStatics>()->_TryParseFromJson(styleAsJson, styleSheet, &returnValue)); return returnValue; }
};

template<typename X> struct statics<MapStyleSheet, X> : X, Windows::UI::Xaml::Controls::Maps::MapStyleSheet_statics<void> {
	typedef typename X::root_type MapStyleSheet;
};
struct MapStyleSheet : generate<MapStyleSheet> {};

// IMapTileDataSource
struct IMapTileDataSource : IInspectable, generate<IMapTileDataSource> {};

// IMapTileDataSourceFactory
struct IMapTileDataSourceFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, MapTileDataSource* *instance);
};

// MapTileDataSource
template<typename> struct MapTileDataSource_statics {
	static MapTileDataSource *activate(object_ref outer, IInspectable* *inner) { MapTileDataSource *instance; hrcheck(get_activation_factory<MapTileDataSource, IMapTileDataSourceFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<MapTileDataSource, X> : X, Windows::UI::Xaml::Controls::Maps::MapTileDataSource_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapTileDataSource_statics<void>::activate;
	typedef typename X::root_type MapTileDataSource;
};
struct MapTileDataSource : generate<MapTileDataSource> {};

// IMapTileSource
struct IMapTileSource_raw : IInspectable {
	virtual STDMETHODIMP _get_DataSource(MapTileDataSource* *value);
	virtual STDMETHODIMP _put_DataSource(MapTileDataSource* value);
	virtual STDMETHODIMP _get_Layer(MapTileLayer *value);
	virtual STDMETHODIMP _put_Layer(MapTileLayer value);
	virtual STDMETHODIMP _get_ZoomLevelRange(MapZoomLevelRange *value);
	virtual STDMETHODIMP _put_ZoomLevelRange(MapZoomLevelRange value);
	virtual STDMETHODIMP _get_Bounds(Devices::Geolocation::GeoboundingBox* *value);
	virtual STDMETHODIMP _put_Bounds(Devices::Geolocation::GeoboundingBox* value);
	virtual STDMETHODIMP _get_AllowOverstretch(bool *value);
	virtual STDMETHODIMP _put_AllowOverstretch(bool value);
	virtual STDMETHODIMP _get_IsFadingEnabled(bool *value);
	virtual STDMETHODIMP _put_IsFadingEnabled(bool value);
	virtual STDMETHODIMP _get_IsTransparencyEnabled(bool *value);
	virtual STDMETHODIMP _put_IsTransparencyEnabled(bool value);
	virtual STDMETHODIMP _get_IsRetryEnabled(bool *value);
	virtual STDMETHODIMP _put_IsRetryEnabled(bool value);
	virtual STDMETHODIMP _get_ZIndex(int *value);
	virtual STDMETHODIMP _put_ZIndex(int value);
	virtual STDMETHODIMP _get_TilePixelSize(int *value);
	virtual STDMETHODIMP _put_TilePixelSize(int value);
	virtual STDMETHODIMP _get_Visible(bool *value);
	virtual STDMETHODIMP _put_Visible(bool value);
};
template<typename X> struct IMapTileSource_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapTileSource_adaptor::AllowOverstretch)->_get_AllowOverstretch(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapTileSource_adaptor::AllowOverstretch)->_put_AllowOverstretch(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowOverstretch;
		struct : property {
			ptr<Devices::Geolocation::GeoboundingBox> get() { Devices::Geolocation::GeoboundingBox* value; hrcheck(enc(&IMapTileSource_adaptor::Bounds)->_get_Bounds(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::GeoboundingBox> operator()() { return get(); }
			operator ptr<Devices::Geolocation::GeoboundingBox> () { return get(); }
			ptr<Devices::Geolocation::GeoboundingBox> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::GeoboundingBox> value) { hrcheck(enc(&IMapTileSource_adaptor::Bounds)->_put_Bounds(value)); }
			void operator=(pptr<Devices::Geolocation::GeoboundingBox> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::GeoboundingBox> value) { put(value); }
		} Bounds;
		struct : property {
			ptr<MapTileDataSource> get() { MapTileDataSource* value; hrcheck(enc(&IMapTileSource_adaptor::DataSource)->_get_DataSource(&value)); return from_abi(value); }
			ptr<MapTileDataSource> operator()() { return get(); }
			operator ptr<MapTileDataSource> () { return get(); }
			ptr<MapTileDataSource> operator->() { return get(); }
			void put(pptr<MapTileDataSource> value) { hrcheck(enc(&IMapTileSource_adaptor::DataSource)->_put_DataSource(value)); }
			void operator=(pptr<MapTileDataSource> value) { put(value); }
			void operator()(pptr<MapTileDataSource> value) { put(value); }
		} DataSource;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapTileSource_adaptor::IsFadingEnabled)->_get_IsFadingEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapTileSource_adaptor::IsFadingEnabled)->_put_IsFadingEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsFadingEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapTileSource_adaptor::IsRetryEnabled)->_get_IsRetryEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapTileSource_adaptor::IsRetryEnabled)->_put_IsRetryEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsRetryEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapTileSource_adaptor::IsTransparencyEnabled)->_get_IsTransparencyEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapTileSource_adaptor::IsTransparencyEnabled)->_put_IsTransparencyEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsTransparencyEnabled;
		struct : property {
			MapTileLayer get() { MapTileLayer value; hrcheck(enc(&IMapTileSource_adaptor::Layer)->_get_Layer(&value)); return value; }
			MapTileLayer operator()() { return get(); }
			operator MapTileLayer () { return get(); }
			void put(MapTileLayer value) { hrcheck(enc(&IMapTileSource_adaptor::Layer)->_put_Layer(value)); }
			void operator=(MapTileLayer value) { put(value); }
			void operator()(MapTileLayer value) { put(value); }
		} Layer;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileSource_adaptor::TilePixelSize)->_get_TilePixelSize(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IMapTileSource_adaptor::TilePixelSize)->_put_TilePixelSize(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} TilePixelSize;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapTileSource_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapTileSource_adaptor::Visible)->_put_Visible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Visible;
		struct : property {
			int get() { int value; hrcheck(enc(&IMapTileSource_adaptor::ZIndex)->_get_ZIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IMapTileSource_adaptor::ZIndex)->_put_ZIndex(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ZIndex;
		struct : property {
			MapZoomLevelRange get() { MapZoomLevelRange value; hrcheck(enc(&IMapTileSource_adaptor::ZoomLevelRange)->_get_ZoomLevelRange(&value)); return value; }
			MapZoomLevelRange operator()() { return get(); }
			operator MapZoomLevelRange () { return get(); }
			void put(const MapZoomLevelRange& value) { hrcheck(enc(&IMapTileSource_adaptor::ZoomLevelRange)->_put_ZoomLevelRange(value)); }
			void operator=(const MapZoomLevelRange& value) { put(value); }
			void operator()(const MapZoomLevelRange& value) { put(value); }
		} ZoomLevelRange;
	};
	IMapTileSource_adaptor() {}
};
template<typename X> struct adapt<IMapTileSource, X> : Windows::UI::Xaml::Controls::Maps::IMapTileSource_adaptor<X> { typedef adapt IMapTileSource; };
struct IMapTileSource : IMapTileSource_raw, generate<IMapTileSource> {};

// IMapTileSourceStatics
struct IMapTileSourceStatics : IInspectable {
	virtual STDMETHODIMP _get_DataSourceProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_LayerProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ZoomLevelRangeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_BoundsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_AllowOverstretchProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_IsFadingEnabledProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_IsTransparencyEnabledProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_IsRetryEnabledProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ZIndexProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TilePixelSizeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_VisibleProperty(DependencyProperty* *value);
};

// IMapTileSourceFactory
struct IMapTileSourceFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, MapTileSource* *instance);
	virtual STDMETHODIMP _CreateInstanceWithDataSource(MapTileDataSource* dataSource, IInspectable* outer, IInspectable* *inner, MapTileSource* *instance);
	virtual STDMETHODIMP _CreateInstanceWithDataSourceAndZoomRange(MapTileDataSource* dataSource, MapZoomLevelRange zoomLevelRange, IInspectable* outer, IInspectable* *inner, MapTileSource* *instance);
	virtual STDMETHODIMP _CreateInstanceWithDataSourceZoomRangeAndBounds(MapTileDataSource* dataSource, MapZoomLevelRange zoomLevelRange, Devices::Geolocation::GeoboundingBox* bounds, IInspectable* outer, IInspectable* *inner, MapTileSource* *instance);
	virtual STDMETHODIMP _CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize(MapTileDataSource* dataSource, MapZoomLevelRange zoomLevelRange, Devices::Geolocation::GeoboundingBox* bounds, int tileSizeInPixels, IInspectable* outer, IInspectable* *inner, MapTileSource* *instance);
};

// MapTileSource
template<typename> struct MapTileSource_statics {
	static struct _AllowOverstretchProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_AllowOverstretchProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} AllowOverstretchProperty;
	static struct _BoundsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_BoundsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} BoundsProperty;
	static struct _DataSourceProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_DataSourceProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} DataSourceProperty;
	static struct _IsFadingEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_IsFadingEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsFadingEnabledProperty;
	static struct _IsRetryEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_IsRetryEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsRetryEnabledProperty;
	static struct _IsTransparencyEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_IsTransparencyEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsTransparencyEnabledProperty;
	static struct _LayerProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_LayerProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LayerProperty;
	static struct _TilePixelSizeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_TilePixelSizeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TilePixelSizeProperty;
	static struct _VisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_VisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} VisibleProperty;
	static struct _ZIndexProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_ZIndexProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ZIndexProperty;
	static struct _ZoomLevelRangeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceStatics>()->_get_ZoomLevelRangeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ZoomLevelRangeProperty;
	static MapTileSource *activate(object_ref outer, IInspectable* *inner) { MapTileSource *instance; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
	static MapTileSource *activate(pptr<MapTileDataSource> dataSource, object_ref outer, IInspectable* *inner) { MapTileSource *instance; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceFactory>()->_CreateInstanceWithDataSource(dataSource, outer, inner, &instance)); return instance; }
	static MapTileSource *activate(pptr<MapTileDataSource> dataSource, const MapZoomLevelRange& zoomLevelRange, object_ref outer, IInspectable* *inner) { MapTileSource *instance; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceFactory>()->_CreateInstanceWithDataSourceAndZoomRange(dataSource, zoomLevelRange, outer, inner, &instance)); return instance; }
	static MapTileSource *activate(pptr<MapTileDataSource> dataSource, const MapZoomLevelRange& zoomLevelRange, pptr<Devices::Geolocation::GeoboundingBox> bounds, object_ref outer, IInspectable* *inner) { MapTileSource *instance; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceFactory>()->_CreateInstanceWithDataSourceZoomRangeAndBounds(dataSource, zoomLevelRange, bounds, outer, inner, &instance)); return instance; }
	static MapTileSource *activate(pptr<MapTileDataSource> dataSource, const MapZoomLevelRange& zoomLevelRange, pptr<Devices::Geolocation::GeoboundingBox> bounds, int tileSizeInPixels, object_ref outer, IInspectable* *inner) { MapTileSource *instance; hrcheck(get_activation_factory<MapTileSource, IMapTileSourceFactory>()->_CreateInstanceWithDataSourceZoomRangeBoundsAndTileSize(dataSource, zoomLevelRange, bounds, tileSizeInPixels, outer, inner, &instance)); return instance; }
};
template<typename X> typename MapTileSource_statics<X>::_AllowOverstretchProperty MapTileSource_statics<X>::AllowOverstretchProperty;
template<typename X> typename MapTileSource_statics<X>::_BoundsProperty MapTileSource_statics<X>::BoundsProperty;
template<typename X> typename MapTileSource_statics<X>::_DataSourceProperty MapTileSource_statics<X>::DataSourceProperty;
template<typename X> typename MapTileSource_statics<X>::_IsFadingEnabledProperty MapTileSource_statics<X>::IsFadingEnabledProperty;
template<typename X> typename MapTileSource_statics<X>::_IsRetryEnabledProperty MapTileSource_statics<X>::IsRetryEnabledProperty;
template<typename X> typename MapTileSource_statics<X>::_IsTransparencyEnabledProperty MapTileSource_statics<X>::IsTransparencyEnabledProperty;
template<typename X> typename MapTileSource_statics<X>::_LayerProperty MapTileSource_statics<X>::LayerProperty;
template<typename X> typename MapTileSource_statics<X>::_TilePixelSizeProperty MapTileSource_statics<X>::TilePixelSizeProperty;
template<typename X> typename MapTileSource_statics<X>::_VisibleProperty MapTileSource_statics<X>::VisibleProperty;
template<typename X> typename MapTileSource_statics<X>::_ZIndexProperty MapTileSource_statics<X>::ZIndexProperty;
template<typename X> typename MapTileSource_statics<X>::_ZoomLevelRangeProperty MapTileSource_statics<X>::ZoomLevelRangeProperty;

template<typename X> struct statics<MapTileSource, X> : X, Windows::UI::Xaml::Controls::Maps::MapTileSource_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapTileSource_statics<void>::activate;
	typedef typename X::root_type MapTileSource;
};
struct MapTileSource : generate<MapTileSource> {};

// IStreetsidePanorama
struct IStreetsidePanorama_raw : IInspectable {
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
};
template<typename X> struct IStreetsidePanorama_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IStreetsidePanorama_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
	};
	IStreetsidePanorama_adaptor() {}
};
template<typename X> struct adapt<IStreetsidePanorama, X> : Windows::UI::Xaml::Controls::Maps::IStreetsidePanorama_adaptor<X> { typedef adapt IStreetsidePanorama; };
struct IStreetsidePanorama : IStreetsidePanorama_raw, generate<IStreetsidePanorama> {};

// IStreetsidePanoramaStatics
struct IStreetsidePanoramaStatics : IInspectable {
	virtual STDMETHODIMP _FindNearbyWithLocationAsync(Devices::Geolocation::Geopoint* location, Foundation::IAsyncOperation<StreetsidePanorama*>* *returnValue);
	virtual STDMETHODIMP _FindNearbyWithLocationAndRadiusAsync(Devices::Geolocation::Geopoint* location, double radiusInMeters, Foundation::IAsyncOperation<StreetsidePanorama*>* *returnValue);
};

// StreetsidePanorama
template<typename> struct StreetsidePanorama_statics {
	static ptr<Foundation::IAsyncOperation<ptr<StreetsidePanorama>>> FindNearbyAsync(pptr<Devices::Geolocation::Geopoint> location) { Foundation::IAsyncOperation<StreetsidePanorama*>* returnValue; hrcheck(get_activation_factory<StreetsidePanorama, IStreetsidePanoramaStatics>()->_FindNearbyWithLocationAsync(location, &returnValue)); return from_abi(returnValue); }
	static ptr<Foundation::IAsyncOperation<ptr<StreetsidePanorama>>> FindNearbyAsync(pptr<Devices::Geolocation::Geopoint> location, double radiusInMeters) { Foundation::IAsyncOperation<StreetsidePanorama*>* returnValue; hrcheck(get_activation_factory<StreetsidePanorama, IStreetsidePanoramaStatics>()->_FindNearbyWithLocationAndRadiusAsync(location, radiusInMeters, &returnValue)); return from_abi(returnValue); }
};

template<typename X> struct statics<StreetsidePanorama, X> : X, Windows::UI::Xaml::Controls::Maps::StreetsidePanorama_statics<void> {
	typedef typename X::root_type StreetsidePanorama;
};
struct StreetsidePanorama : generate<StreetsidePanorama> {};

// ICustomMapTileDataSource
struct ICustomMapTileDataSource_raw : IInspectable {
	virtual STDMETHODIMP _add_BitmapRequested(Foundation::TypedEventHandler<CustomMapTileDataSource*, MapTileBitmapRequestedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BitmapRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICustomMapTileDataSource_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CustomMapTileDataSource>, ptr<MapTileBitmapRequestedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICustomMapTileDataSource_adaptor::BitmapRequested)->_add_BitmapRequested(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICustomMapTileDataSource_adaptor::BitmapRequested)->_remove_BitmapRequested(token)); }
		} BitmapRequested;
	};
	ICustomMapTileDataSource_adaptor() {}
};
template<typename X> struct adapt<ICustomMapTileDataSource, X> : Windows::UI::Xaml::Controls::Maps::ICustomMapTileDataSource_adaptor<X> { typedef adapt ICustomMapTileDataSource; };
struct ICustomMapTileDataSource : ICustomMapTileDataSource_raw, generate<ICustomMapTileDataSource> {};

// ICustomMapTileDataSourceFactory
struct ICustomMapTileDataSourceFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, CustomMapTileDataSource* *instance);
};

// CustomMapTileDataSource
template<typename> struct CustomMapTileDataSource_statics {
	static CustomMapTileDataSource *activate(object_ref outer, IInspectable* *inner) { CustomMapTileDataSource *instance; hrcheck(get_activation_factory<CustomMapTileDataSource, ICustomMapTileDataSourceFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<CustomMapTileDataSource, X> : X, Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::CustomMapTileDataSource_statics<void>::activate;
	typedef typename X::root_type CustomMapTileDataSource;
};
struct CustomMapTileDataSource : generate<CustomMapTileDataSource> {};

// IHttpMapTileDataSource
struct IHttpMapTileDataSource_raw : IInspectable {
	virtual STDMETHODIMP _get_UriFormatString(HSTRING *value);
	virtual STDMETHODIMP _put_UriFormatString(HSTRING value);
	virtual STDMETHODIMP _get_AdditionalRequestHeaders(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_AllowCaching(bool *value);
	virtual STDMETHODIMP _put_AllowCaching(bool value);
	virtual STDMETHODIMP _add_UriRequested(Foundation::TypedEventHandler<HttpMapTileDataSource*, MapTileUriRequestedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_UriRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IHttpMapTileDataSource_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&IHttpMapTileDataSource_adaptor::AdditionalRequestHeaders)->_get_AdditionalRequestHeaders(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} AdditionalRequestHeaders;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHttpMapTileDataSource_adaptor::AllowCaching)->_get_AllowCaching(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IHttpMapTileDataSource_adaptor::AllowCaching)->_put_AllowCaching(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowCaching;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IHttpMapTileDataSource_adaptor::UriFormatString)->_get_UriFormatString(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IHttpMapTileDataSource_adaptor::UriFormatString)->_put_UriFormatString(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} UriFormatString;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HttpMapTileDataSource>, ptr<MapTileUriRequestedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHttpMapTileDataSource_adaptor::UriRequested)->_add_UriRequested(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHttpMapTileDataSource_adaptor::UriRequested)->_remove_UriRequested(token)); }
		} UriRequested;
	};
	IHttpMapTileDataSource_adaptor() {}
};
template<typename X> struct adapt<IHttpMapTileDataSource, X> : Windows::UI::Xaml::Controls::Maps::IHttpMapTileDataSource_adaptor<X> { typedef adapt IHttpMapTileDataSource; };
struct IHttpMapTileDataSource : IHttpMapTileDataSource_raw, generate<IHttpMapTileDataSource> {};

// IHttpMapTileDataSourceFactory
struct IHttpMapTileDataSourceFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, HttpMapTileDataSource* *instance);
	virtual STDMETHODIMP _CreateInstanceWithUriFormatString(HSTRING uriFormatString, IInspectable* outer, IInspectable* *inner, HttpMapTileDataSource* *instance);
};

// HttpMapTileDataSource
template<typename> struct HttpMapTileDataSource_statics {
	static HttpMapTileDataSource *activate(object_ref outer, IInspectable* *inner) { HttpMapTileDataSource *instance; hrcheck(get_activation_factory<HttpMapTileDataSource, IHttpMapTileDataSourceFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
	static HttpMapTileDataSource *activate(hstring_ref uriFormatString, object_ref outer, IInspectable* *inner) { HttpMapTileDataSource *instance; hrcheck(get_activation_factory<HttpMapTileDataSource, IHttpMapTileDataSourceFactory>()->_CreateInstanceWithUriFormatString(uriFormatString, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<HttpMapTileDataSource, X> : X, Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::HttpMapTileDataSource_statics<void>::activate;
	typedef typename X::root_type HttpMapTileDataSource;
};
struct HttpMapTileDataSource : generate<HttpMapTileDataSource> {};

// ILocalMapTileDataSource
struct ILocalMapTileDataSource_raw : IInspectable {
	virtual STDMETHODIMP _get_UriFormatString(HSTRING *value);
	virtual STDMETHODIMP _put_UriFormatString(HSTRING value);
	virtual STDMETHODIMP _add_UriRequested(Foundation::TypedEventHandler<LocalMapTileDataSource*, MapTileUriRequestedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_UriRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct ILocalMapTileDataSource_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalMapTileDataSource_adaptor::UriFormatString)->_get_UriFormatString(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ILocalMapTileDataSource_adaptor::UriFormatString)->_put_UriFormatString(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} UriFormatString;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LocalMapTileDataSource>, ptr<MapTileUriRequestedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILocalMapTileDataSource_adaptor::UriRequested)->_add_UriRequested(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILocalMapTileDataSource_adaptor::UriRequested)->_remove_UriRequested(token)); }
		} UriRequested;
	};
	ILocalMapTileDataSource_adaptor() {}
};
template<typename X> struct adapt<ILocalMapTileDataSource, X> : Windows::UI::Xaml::Controls::Maps::ILocalMapTileDataSource_adaptor<X> { typedef adapt ILocalMapTileDataSource; };
struct ILocalMapTileDataSource : ILocalMapTileDataSource_raw, generate<ILocalMapTileDataSource> {};

// ILocalMapTileDataSourceFactory
struct ILocalMapTileDataSourceFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, LocalMapTileDataSource* *instance);
	virtual STDMETHODIMP _CreateInstanceWithUriFormatString(HSTRING uriFormatString, IInspectable* outer, IInspectable* *inner, LocalMapTileDataSource* *instance);
};

// LocalMapTileDataSource
template<typename> struct LocalMapTileDataSource_statics {
	static LocalMapTileDataSource *activate(object_ref outer, IInspectable* *inner) { LocalMapTileDataSource *instance; hrcheck(get_activation_factory<LocalMapTileDataSource, ILocalMapTileDataSourceFactory>()->_CreateInstance(outer, inner, &instance)); return instance; }
	static LocalMapTileDataSource *activate(hstring_ref uriFormatString, object_ref outer, IInspectable* *inner) { LocalMapTileDataSource *instance; hrcheck(get_activation_factory<LocalMapTileDataSource, ILocalMapTileDataSourceFactory>()->_CreateInstanceWithUriFormatString(uriFormatString, outer, inner, &instance)); return instance; }
};

template<typename X> struct statics<LocalMapTileDataSource, X> : X, Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::LocalMapTileDataSource_statics<void>::activate;
	typedef typename X::root_type LocalMapTileDataSource;
};
struct LocalMapTileDataSource : generate<LocalMapTileDataSource> {};

// IMapBillboard
struct IMapBillboard_raw : IInspectable {
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _put_Location(Devices::Geolocation::Geopoint* value);
	virtual STDMETHODIMP _get_NormalizedAnchorPoint(Foundation::Point *value);
	virtual STDMETHODIMP _put_NormalizedAnchorPoint(Foundation::Point value);
	virtual STDMETHODIMP _get_Image(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Image(Storage::Streams::IRandomAccessStreamReference* value);
	virtual STDMETHODIMP _get_CollisionBehaviorDesired(MapElementCollisionBehavior *value);
	virtual STDMETHODIMP _put_CollisionBehaviorDesired(MapElementCollisionBehavior value);
	virtual STDMETHODIMP _get_ReferenceCamera(MapCamera* *value);
};
template<typename X> struct IMapBillboard_adaptor : X {
	union {
		struct : property {
			MapElementCollisionBehavior get() { MapElementCollisionBehavior value; hrcheck(enc(&IMapBillboard_adaptor::CollisionBehaviorDesired)->_get_CollisionBehaviorDesired(&value)); return value; }
			MapElementCollisionBehavior operator()() { return get(); }
			operator MapElementCollisionBehavior () { return get(); }
			void put(MapElementCollisionBehavior value) { hrcheck(enc(&IMapBillboard_adaptor::CollisionBehaviorDesired)->_put_CollisionBehaviorDesired(value)); }
			void operator=(MapElementCollisionBehavior value) { put(value); }
			void operator()(MapElementCollisionBehavior value) { put(value); }
		} CollisionBehaviorDesired;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IMapBillboard_adaptor::Image)->_get_Image(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IMapBillboard_adaptor::Image)->_put_Image(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Image;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapBillboard_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::Geopoint> value) { hrcheck(enc(&IMapBillboard_adaptor::Location)->_put_Location(value)); }
			void operator=(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
		} Location;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapBillboard_adaptor::NormalizedAnchorPoint)->_get_NormalizedAnchorPoint(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
			void put(const Foundation::Point& value) { hrcheck(enc(&IMapBillboard_adaptor::NormalizedAnchorPoint)->_put_NormalizedAnchorPoint(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} NormalizedAnchorPoint;
		struct : property {
			ptr<MapCamera> get() { MapCamera* value; hrcheck(enc(&IMapBillboard_adaptor::ReferenceCamera)->_get_ReferenceCamera(&value)); return from_abi(value); }
			ptr<MapCamera> operator()() { return get(); }
			operator ptr<MapCamera> () { return get(); }
			ptr<MapCamera> operator->() { return get(); }
		} ReferenceCamera;
	};
	IMapBillboard_adaptor() {}
};
template<typename X> struct adapt<IMapBillboard, X> : Windows::UI::Xaml::Controls::Maps::IMapBillboard_adaptor<X> { typedef adapt IMapBillboard; };
struct IMapBillboard : IMapBillboard_raw, generate<IMapBillboard> {};

// IMapBillboardStatics
struct IMapBillboardStatics : IInspectable {
	virtual STDMETHODIMP _get_LocationProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_NormalizedAnchorPointProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_CollisionBehaviorDesiredProperty(DependencyProperty* *value);
};

// IMapBillboardFactory
struct IMapBillboardFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceFromCamera(MapCamera* camera, MapBillboard* *instance);
};

// MapBillboard
template<typename> struct MapBillboard_statics {
	static struct _CollisionBehaviorDesiredProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapBillboard, IMapBillboardStatics>()->_get_CollisionBehaviorDesiredProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CollisionBehaviorDesiredProperty;
	static struct _LocationProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapBillboard, IMapBillboardStatics>()->_get_LocationProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LocationProperty;
	static struct _NormalizedAnchorPointProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapBillboard, IMapBillboardStatics>()->_get_NormalizedAnchorPointProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} NormalizedAnchorPointProperty;
	static MapBillboard *activate(pptr<MapCamera> camera) { MapBillboard *instance; hrcheck(get_activation_factory<MapBillboard, IMapBillboardFactory>()->_CreateInstanceFromCamera(camera, &instance)); return instance; }
};
template<typename X> typename MapBillboard_statics<X>::_CollisionBehaviorDesiredProperty MapBillboard_statics<X>::CollisionBehaviorDesiredProperty;
template<typename X> typename MapBillboard_statics<X>::_LocationProperty MapBillboard_statics<X>::LocationProperty;
template<typename X> typename MapBillboard_statics<X>::_NormalizedAnchorPointProperty MapBillboard_statics<X>::NormalizedAnchorPointProperty;

template<typename X> struct statics<MapBillboard, X> : X, Windows::UI::Xaml::Controls::Maps::MapBillboard_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapBillboard_statics<void>::activate;
	typedef typename X::root_type MapBillboard;
};
struct MapBillboard : generate<MapBillboard> {};

// IMapElement3D
struct IMapElement3D_raw : IInspectable {
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _put_Location(Devices::Geolocation::Geopoint* value);
	virtual STDMETHODIMP _get_Model(MapModel3D* *value);
	virtual STDMETHODIMP _put_Model(MapModel3D* value);
	virtual STDMETHODIMP _get_Heading(double *value);
	virtual STDMETHODIMP _put_Heading(double value);
	virtual STDMETHODIMP _get_Pitch(double *value);
	virtual STDMETHODIMP _put_Pitch(double value);
	virtual STDMETHODIMP _get_Roll(double *value);
	virtual STDMETHODIMP _put_Roll(double value);
	virtual STDMETHODIMP _get_Scale(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _put_Scale(Foundation::Numerics::Vector3 value);
};
template<typename X> struct IMapElement3D_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IMapElement3D_adaptor::Heading)->_get_Heading(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapElement3D_adaptor::Heading)->_put_Heading(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Heading;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapElement3D_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::Geopoint> value) { hrcheck(enc(&IMapElement3D_adaptor::Location)->_put_Location(value)); }
			void operator=(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
		} Location;
		struct : property {
			ptr<MapModel3D> get() { MapModel3D* value; hrcheck(enc(&IMapElement3D_adaptor::Model)->_get_Model(&value)); return from_abi(value); }
			ptr<MapModel3D> operator()() { return get(); }
			operator ptr<MapModel3D> () { return get(); }
			ptr<MapModel3D> operator->() { return get(); }
			void put(pptr<MapModel3D> value) { hrcheck(enc(&IMapElement3D_adaptor::Model)->_put_Model(value)); }
			void operator=(pptr<MapModel3D> value) { put(value); }
			void operator()(pptr<MapModel3D> value) { put(value); }
		} Model;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapElement3D_adaptor::Pitch)->_get_Pitch(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapElement3D_adaptor::Pitch)->_put_Pitch(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Pitch;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapElement3D_adaptor::Roll)->_get_Roll(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapElement3D_adaptor::Roll)->_put_Roll(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Roll;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&IMapElement3D_adaptor::Scale)->_get_Scale(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
			void put(const Foundation::Numerics::Vector3& value) { hrcheck(enc(&IMapElement3D_adaptor::Scale)->_put_Scale(value)); }
			void operator=(const Foundation::Numerics::Vector3& value) { put(value); }
			void operator()(const Foundation::Numerics::Vector3& value) { put(value); }
		} Scale;
	};
	IMapElement3D_adaptor() {}
};
template<typename X> struct adapt<IMapElement3D, X> : Windows::UI::Xaml::Controls::Maps::IMapElement3D_adaptor<X> { typedef adapt IMapElement3D; };
struct IMapElement3D : IMapElement3D_raw, generate<IMapElement3D> {};

// IMapElement3DStatics
struct IMapElement3DStatics : IInspectable {
	virtual STDMETHODIMP _get_LocationProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_HeadingProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_PitchProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_RollProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ScaleProperty(DependencyProperty* *value);
};

// MapElement3D
template<typename> struct MapElement3D_statics {
	static struct _HeadingProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement3D, IMapElement3DStatics>()->_get_HeadingProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} HeadingProperty;
	static struct _LocationProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement3D, IMapElement3DStatics>()->_get_LocationProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LocationProperty;
	static struct _PitchProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement3D, IMapElement3DStatics>()->_get_PitchProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PitchProperty;
	static struct _RollProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement3D, IMapElement3DStatics>()->_get_RollProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} RollProperty;
	static struct _ScaleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElement3D, IMapElement3DStatics>()->_get_ScaleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ScaleProperty;
};
template<typename X> typename MapElement3D_statics<X>::_HeadingProperty MapElement3D_statics<X>::HeadingProperty;
template<typename X> typename MapElement3D_statics<X>::_LocationProperty MapElement3D_statics<X>::LocationProperty;
template<typename X> typename MapElement3D_statics<X>::_PitchProperty MapElement3D_statics<X>::PitchProperty;
template<typename X> typename MapElement3D_statics<X>::_RollProperty MapElement3D_statics<X>::RollProperty;
template<typename X> typename MapElement3D_statics<X>::_ScaleProperty MapElement3D_statics<X>::ScaleProperty;

template<typename X> struct statics<MapElement3D, X> : X, Windows::UI::Xaml::Controls::Maps::MapElement3D_statics<void> {
	typedef typename X::root_type MapElement3D;
};
struct MapElement3D : generate<MapElement3D> {};

// IMapElementsLayer
struct IMapElementsLayer_raw : IInspectable {
	virtual STDMETHODIMP _get_MapElements(Foundation::Collections::IVector<MapElement*>* *value);
	virtual STDMETHODIMP _put_MapElements(Foundation::Collections::IVector<MapElement*>* value);
	virtual STDMETHODIMP _add_MapElementClick(Foundation::TypedEventHandler<MapElementsLayer*, MapElementsLayerClickEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapElementClick(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapElementPointerEntered(Foundation::TypedEventHandler<MapElementsLayer*, MapElementsLayerPointerEnteredEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapElementPointerEntered(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapElementPointerExited(Foundation::TypedEventHandler<MapElementsLayer*, MapElementsLayerPointerExitedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapElementPointerExited(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapContextRequested(Foundation::TypedEventHandler<MapElementsLayer*, MapElementsLayerContextRequestedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapContextRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMapElementsLayer_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> get() { Foundation::Collections::IVector<MapElement*>* value; hrcheck(enc(&IMapElementsLayer_adaptor::MapElements)->_get_MapElements(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<MapElement>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator->() { return get(); }
			void put(pptr<Foundation::Collections::IVector<ptr<MapElement>>> value) { hrcheck(enc(&IMapElementsLayer_adaptor::MapElements)->_put_MapElements(to_abi(value))); }
			void operator=(pptr<Foundation::Collections::IVector<ptr<MapElement>>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::Collections::IVector<ptr<MapElement>>> value) { put(to_abi(value)); }
		} MapElements;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapElementsLayer>, ptr<MapElementsLayerContextRequestedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapElementsLayer_adaptor::MapContextRequested)->_add_MapContextRequested(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapElementsLayer_adaptor::MapContextRequested)->_remove_MapContextRequested(token)); }
		} MapContextRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapElementsLayer>, ptr<MapElementsLayerClickEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapElementsLayer_adaptor::MapElementClick)->_add_MapElementClick(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapElementsLayer_adaptor::MapElementClick)->_remove_MapElementClick(token)); }
		} MapElementClick;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapElementsLayer>, ptr<MapElementsLayerPointerEnteredEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapElementsLayer_adaptor::MapElementPointerEntered)->_add_MapElementPointerEntered(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapElementsLayer_adaptor::MapElementPointerEntered)->_remove_MapElementPointerEntered(token)); }
		} MapElementPointerEntered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapElementsLayer>, ptr<MapElementsLayerPointerExitedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapElementsLayer_adaptor::MapElementPointerExited)->_add_MapElementPointerExited(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapElementsLayer_adaptor::MapElementPointerExited)->_remove_MapElementPointerExited(token)); }
		} MapElementPointerExited;
	};
	IMapElementsLayer_adaptor() {}
};
template<typename X> struct adapt<IMapElementsLayer, X> : Windows::UI::Xaml::Controls::Maps::IMapElementsLayer_adaptor<X> { typedef adapt IMapElementsLayer; };
struct IMapElementsLayer : IMapElementsLayer_raw, generate<IMapElementsLayer> {};

// IMapElementsLayerStatics
struct IMapElementsLayerStatics : IInspectable {
	virtual STDMETHODIMP _get_MapElementsProperty(DependencyProperty* *value);
};

// MapElementsLayer
template<typename> struct MapElementsLayer_statics {
	static struct _MapElementsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapElementsLayer, IMapElementsLayerStatics>()->_get_MapElementsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapElementsProperty;
};
template<typename X> typename MapElementsLayer_statics<X>::_MapElementsProperty MapElementsLayer_statics<X>::MapElementsProperty;

template<typename X> struct statics<MapElementsLayer, X> : X, Windows::UI::Xaml::Controls::Maps::MapElementsLayer_statics<void> {
	typedef typename X::root_type MapElementsLayer;
};
struct MapElementsLayer : generate<MapElementsLayer> {};

// IMapIcon
struct IMapIcon_raw : IInspectable {
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _put_Location(Devices::Geolocation::Geopoint* value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_NormalizedAnchorPoint(Foundation::Point *value);
	virtual STDMETHODIMP _put_NormalizedAnchorPoint(Foundation::Point value);
	virtual STDMETHODIMP _get_Image(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _put_Image(Storage::Streams::IRandomAccessStreamReference* value);
};
template<typename X> struct IMapIcon_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IMapIcon_adaptor::Image)->_get_Image(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
			void put(pptr<Storage::Streams::IRandomAccessStreamReference> value) { hrcheck(enc(&IMapIcon_adaptor::Image)->_put_Image(value)); }
			void operator=(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
			void operator()(pptr<Storage::Streams::IRandomAccessStreamReference> value) { put(value); }
		} Image;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapIcon_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::Geopoint> value) { hrcheck(enc(&IMapIcon_adaptor::Location)->_put_Location(value)); }
			void operator=(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
		} Location;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapIcon_adaptor::NormalizedAnchorPoint)->_get_NormalizedAnchorPoint(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
			void put(const Foundation::Point& value) { hrcheck(enc(&IMapIcon_adaptor::NormalizedAnchorPoint)->_put_NormalizedAnchorPoint(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} NormalizedAnchorPoint;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapIcon_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMapIcon_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
	};
	IMapIcon_adaptor() {}
};
template<typename X> struct adapt<IMapIcon, X> : Windows::UI::Xaml::Controls::Maps::IMapIcon_adaptor<X> { typedef adapt IMapIcon; };
struct IMapIcon : IMapIcon_raw, generate<IMapIcon> {};

// IMapIconStatics
struct IMapIconStatics : IInspectable {
	virtual STDMETHODIMP _get_LocationProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TitleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_NormalizedAnchorPointProperty(DependencyProperty* *value);
};

// IMapIcon2
struct IMapIcon2_raw : IInspectable {
	virtual STDMETHODIMP _get_CollisionBehaviorDesired(MapElementCollisionBehavior *value);
	virtual STDMETHODIMP _put_CollisionBehaviorDesired(MapElementCollisionBehavior value);
};
template<typename X> struct IMapIcon2_adaptor : X {
	union {
		struct : property {
			MapElementCollisionBehavior get() { MapElementCollisionBehavior value; hrcheck(enc(&IMapIcon2_adaptor::CollisionBehaviorDesired)->_get_CollisionBehaviorDesired(&value)); return value; }
			MapElementCollisionBehavior operator()() { return get(); }
			operator MapElementCollisionBehavior () { return get(); }
			void put(MapElementCollisionBehavior value) { hrcheck(enc(&IMapIcon2_adaptor::CollisionBehaviorDesired)->_put_CollisionBehaviorDesired(value)); }
			void operator=(MapElementCollisionBehavior value) { put(value); }
			void operator()(MapElementCollisionBehavior value) { put(value); }
		} CollisionBehaviorDesired;
	};
	IMapIcon2_adaptor() {}
};
template<typename X> struct adapt<IMapIcon2, X> : Windows::UI::Xaml::Controls::Maps::IMapIcon2_adaptor<X> { typedef adapt IMapIcon2; };
struct IMapIcon2 : IMapIcon2_raw, generate<IMapIcon2> {};

// IMapIconStatics2
struct IMapIconStatics2 : IInspectable {
	virtual STDMETHODIMP _get_CollisionBehaviorDesiredProperty(DependencyProperty* *value);
};

// MapIcon
template<typename> struct MapIcon_statics {
	static struct _LocationProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapIcon, IMapIconStatics>()->_get_LocationProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LocationProperty;
	static struct _NormalizedAnchorPointProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapIcon, IMapIconStatics>()->_get_NormalizedAnchorPointProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} NormalizedAnchorPointProperty;
	static struct _TitleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapIcon, IMapIconStatics>()->_get_TitleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TitleProperty;
	static struct _CollisionBehaviorDesiredProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapIcon, IMapIconStatics2>()->_get_CollisionBehaviorDesiredProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CollisionBehaviorDesiredProperty;
};
template<typename X> typename MapIcon_statics<X>::_LocationProperty MapIcon_statics<X>::LocationProperty;
template<typename X> typename MapIcon_statics<X>::_NormalizedAnchorPointProperty MapIcon_statics<X>::NormalizedAnchorPointProperty;
template<typename X> typename MapIcon_statics<X>::_TitleProperty MapIcon_statics<X>::TitleProperty;
template<typename X> typename MapIcon_statics<X>::_CollisionBehaviorDesiredProperty MapIcon_statics<X>::CollisionBehaviorDesiredProperty;

template<typename X> struct statics<MapIcon, X> : X, Windows::UI::Xaml::Controls::Maps::MapIcon_statics<void> {
	typedef typename X::root_type MapIcon;
};
struct MapIcon : generate<MapIcon> {};

// IMapPolygon
struct IMapPolygon_raw : IInspectable {
	virtual STDMETHODIMP _get_Path(Devices::Geolocation::Geopath* *value);
	virtual STDMETHODIMP _put_Path(Devices::Geolocation::Geopath* value);
	virtual STDMETHODIMP _get_StrokeColor(Color *value);
	virtual STDMETHODIMP _put_StrokeColor(Color value);
	virtual STDMETHODIMP _get_StrokeThickness(double *value);
	virtual STDMETHODIMP _put_StrokeThickness(double value);
	virtual STDMETHODIMP _get_StrokeDashed(bool *value);
	virtual STDMETHODIMP _put_StrokeDashed(bool value);
	virtual STDMETHODIMP _get_FillColor(Color *value);
	virtual STDMETHODIMP _put_FillColor(Color value);
};
template<typename X> struct IMapPolygon_adaptor : X {
	union {
		struct : property {
			Color get() { Color value; hrcheck(enc(&IMapPolygon_adaptor::FillColor)->_get_FillColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IMapPolygon_adaptor::FillColor)->_put_FillColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} FillColor;
		struct : property {
			ptr<Devices::Geolocation::Geopath> get() { Devices::Geolocation::Geopath* value; hrcheck(enc(&IMapPolygon_adaptor::Path)->_get_Path(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopath> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopath> () { return get(); }
			ptr<Devices::Geolocation::Geopath> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::Geopath> value) { hrcheck(enc(&IMapPolygon_adaptor::Path)->_put_Path(value)); }
			void operator=(pptr<Devices::Geolocation::Geopath> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::Geopath> value) { put(value); }
		} Path;
		struct : property {
			Color get() { Color value; hrcheck(enc(&IMapPolygon_adaptor::StrokeColor)->_get_StrokeColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IMapPolygon_adaptor::StrokeColor)->_put_StrokeColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} StrokeColor;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapPolygon_adaptor::StrokeDashed)->_get_StrokeDashed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapPolygon_adaptor::StrokeDashed)->_put_StrokeDashed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} StrokeDashed;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapPolygon_adaptor::StrokeThickness)->_get_StrokeThickness(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapPolygon_adaptor::StrokeThickness)->_put_StrokeThickness(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} StrokeThickness;
	};
	IMapPolygon_adaptor() {}
};
template<typename X> struct adapt<IMapPolygon, X> : Windows::UI::Xaml::Controls::Maps::IMapPolygon_adaptor<X> { typedef adapt IMapPolygon; };
struct IMapPolygon : IMapPolygon_raw, generate<IMapPolygon> {};

// IMapPolygonStatics
struct IMapPolygonStatics : IInspectable {
	virtual STDMETHODIMP _get_PathProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_StrokeThicknessProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_StrokeDashedProperty(DependencyProperty* *value);
};

// IMapPolygon2
struct IMapPolygon2_raw : IInspectable {
	virtual STDMETHODIMP _get_Paths(Foundation::Collections::IVector<Devices::Geolocation::Geopath*>* *value);
};
template<typename X> struct IMapPolygon2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Devices::Geolocation::Geopath>>> get() { Foundation::Collections::IVector<Devices::Geolocation::Geopath*>* value; hrcheck(enc(&IMapPolygon2_adaptor::Paths)->_get_Paths(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Devices::Geolocation::Geopath>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Devices::Geolocation::Geopath>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Devices::Geolocation::Geopath>>> operator->() { return get(); }
		} Paths;
	};
	IMapPolygon2_adaptor() {}
};
template<typename X> struct adapt<IMapPolygon2, X> : Windows::UI::Xaml::Controls::Maps::IMapPolygon2_adaptor<X> { typedef adapt IMapPolygon2; };
struct IMapPolygon2 : IMapPolygon2_raw, generate<IMapPolygon2> {};

// MapPolygon
template<typename> struct MapPolygon_statics {
	static struct _PathProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapPolygon, IMapPolygonStatics>()->_get_PathProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PathProperty;
	static struct _StrokeDashedProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapPolygon, IMapPolygonStatics>()->_get_StrokeDashedProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StrokeDashedProperty;
	static struct _StrokeThicknessProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapPolygon, IMapPolygonStatics>()->_get_StrokeThicknessProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StrokeThicknessProperty;
};
template<typename X> typename MapPolygon_statics<X>::_PathProperty MapPolygon_statics<X>::PathProperty;
template<typename X> typename MapPolygon_statics<X>::_StrokeDashedProperty MapPolygon_statics<X>::StrokeDashedProperty;
template<typename X> typename MapPolygon_statics<X>::_StrokeThicknessProperty MapPolygon_statics<X>::StrokeThicknessProperty;

template<typename X> struct statics<MapPolygon, X> : X, Windows::UI::Xaml::Controls::Maps::MapPolygon_statics<void> {
	typedef typename X::root_type MapPolygon;
};
struct MapPolygon : generate<MapPolygon> {};

// IMapPolyline
struct IMapPolyline_raw : IInspectable {
	virtual STDMETHODIMP _get_Path(Devices::Geolocation::Geopath* *value);
	virtual STDMETHODIMP _put_Path(Devices::Geolocation::Geopath* value);
	virtual STDMETHODIMP _get_StrokeColor(Color *value);
	virtual STDMETHODIMP _put_StrokeColor(Color value);
	virtual STDMETHODIMP _get_StrokeThickness(double *value);
	virtual STDMETHODIMP _put_StrokeThickness(double value);
	virtual STDMETHODIMP _get_StrokeDashed(bool *value);
	virtual STDMETHODIMP _put_StrokeDashed(bool value);
};
template<typename X> struct IMapPolyline_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopath> get() { Devices::Geolocation::Geopath* value; hrcheck(enc(&IMapPolyline_adaptor::Path)->_get_Path(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopath> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopath> () { return get(); }
			ptr<Devices::Geolocation::Geopath> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::Geopath> value) { hrcheck(enc(&IMapPolyline_adaptor::Path)->_put_Path(value)); }
			void operator=(pptr<Devices::Geolocation::Geopath> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::Geopath> value) { put(value); }
		} Path;
		struct : property {
			Color get() { Color value; hrcheck(enc(&IMapPolyline_adaptor::StrokeColor)->_get_StrokeColor(&value)); return value; }
			Color operator()() { return get(); }
			operator Color () { return get(); }
			void put(const Color& value) { hrcheck(enc(&IMapPolyline_adaptor::StrokeColor)->_put_StrokeColor(value)); }
			void operator=(const Color& value) { put(value); }
			void operator()(const Color& value) { put(value); }
		} StrokeColor;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapPolyline_adaptor::StrokeDashed)->_get_StrokeDashed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapPolyline_adaptor::StrokeDashed)->_put_StrokeDashed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} StrokeDashed;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapPolyline_adaptor::StrokeThickness)->_get_StrokeThickness(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapPolyline_adaptor::StrokeThickness)->_put_StrokeThickness(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} StrokeThickness;
	};
	IMapPolyline_adaptor() {}
};
template<typename X> struct adapt<IMapPolyline, X> : Windows::UI::Xaml::Controls::Maps::IMapPolyline_adaptor<X> { typedef adapt IMapPolyline; };
struct IMapPolyline : IMapPolyline_raw, generate<IMapPolyline> {};

// IMapPolylineStatics
struct IMapPolylineStatics : IInspectable {
	virtual STDMETHODIMP _get_PathProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_StrokeDashedProperty(DependencyProperty* *value);
};

// MapPolyline
template<typename> struct MapPolyline_statics {
	static struct _PathProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapPolyline, IMapPolylineStatics>()->_get_PathProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PathProperty;
	static struct _StrokeDashedProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapPolyline, IMapPolylineStatics>()->_get_StrokeDashedProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StrokeDashedProperty;
};
template<typename X> typename MapPolyline_statics<X>::_PathProperty MapPolyline_statics<X>::PathProperty;
template<typename X> typename MapPolyline_statics<X>::_StrokeDashedProperty MapPolyline_statics<X>::StrokeDashedProperty;

template<typename X> struct statics<MapPolyline, X> : X, Windows::UI::Xaml::Controls::Maps::MapPolyline_statics<void> {
	typedef typename X::root_type MapPolyline;
};
struct MapPolyline : generate<MapPolyline> {};

// IStreetsideExperience
struct IStreetsideExperience_raw : IInspectable {
	virtual STDMETHODIMP _get_AddressTextVisible(bool *value);
	virtual STDMETHODIMP _put_AddressTextVisible(bool value);
	virtual STDMETHODIMP _get_CursorVisible(bool *value);
	virtual STDMETHODIMP _put_CursorVisible(bool value);
	virtual STDMETHODIMP _get_OverviewMapVisible(bool *value);
	virtual STDMETHODIMP _put_OverviewMapVisible(bool value);
	virtual STDMETHODIMP _get_StreetLabelsVisible(bool *value);
	virtual STDMETHODIMP _put_StreetLabelsVisible(bool value);
	virtual STDMETHODIMP _get_ExitButtonVisible(bool *value);
	virtual STDMETHODIMP _put_ExitButtonVisible(bool value);
	virtual STDMETHODIMP _get_ZoomButtonsVisible(bool *value);
	virtual STDMETHODIMP _put_ZoomButtonsVisible(bool value);
};
template<typename X> struct IStreetsideExperience_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStreetsideExperience_adaptor::AddressTextVisible)->_get_AddressTextVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStreetsideExperience_adaptor::AddressTextVisible)->_put_AddressTextVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AddressTextVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStreetsideExperience_adaptor::CursorVisible)->_get_CursorVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStreetsideExperience_adaptor::CursorVisible)->_put_CursorVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CursorVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStreetsideExperience_adaptor::ExitButtonVisible)->_get_ExitButtonVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStreetsideExperience_adaptor::ExitButtonVisible)->_put_ExitButtonVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ExitButtonVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStreetsideExperience_adaptor::OverviewMapVisible)->_get_OverviewMapVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStreetsideExperience_adaptor::OverviewMapVisible)->_put_OverviewMapVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} OverviewMapVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStreetsideExperience_adaptor::StreetLabelsVisible)->_get_StreetLabelsVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStreetsideExperience_adaptor::StreetLabelsVisible)->_put_StreetLabelsVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} StreetLabelsVisible;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStreetsideExperience_adaptor::ZoomButtonsVisible)->_get_ZoomButtonsVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStreetsideExperience_adaptor::ZoomButtonsVisible)->_put_ZoomButtonsVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ZoomButtonsVisible;
	};
	IStreetsideExperience_adaptor() {}
};
template<typename X> struct adapt<IStreetsideExperience, X> : Windows::UI::Xaml::Controls::Maps::IStreetsideExperience_adaptor<X> { typedef adapt IStreetsideExperience; };
struct IStreetsideExperience : IStreetsideExperience_raw, generate<IStreetsideExperience> {};

// IStreetsideExperienceFactory
struct IStreetsideExperienceFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstanceWithPanorama(StreetsidePanorama* panorama, StreetsideExperience* *instance);
	virtual STDMETHODIMP _CreateInstanceWithPanoramaHeadingPitchAndFieldOfView(StreetsidePanorama* panorama, double headingInDegrees, double pitchInDegrees, double fieldOfViewInDegrees, StreetsideExperience* *instance);
};

// StreetsideExperience
template<typename> struct StreetsideExperience_statics {
	static StreetsideExperience *activate(pptr<StreetsidePanorama> panorama) { StreetsideExperience *instance; hrcheck(get_activation_factory<StreetsideExperience, IStreetsideExperienceFactory>()->_CreateInstanceWithPanorama(panorama, &instance)); return instance; }
	static StreetsideExperience *activate(pptr<StreetsidePanorama> panorama, double headingInDegrees, double pitchInDegrees, double fieldOfViewInDegrees) { StreetsideExperience *instance; hrcheck(get_activation_factory<StreetsideExperience, IStreetsideExperienceFactory>()->_CreateInstanceWithPanoramaHeadingPitchAndFieldOfView(panorama, headingInDegrees, pitchInDegrees, fieldOfViewInDegrees, &instance)); return instance; }
};

template<typename X> struct statics<StreetsideExperience, X> : X, Windows::UI::Xaml::Controls::Maps::StreetsideExperience_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::StreetsideExperience_statics<void>::activate;
	typedef typename X::root_type StreetsideExperience;
};
struct StreetsideExperience : generate<StreetsideExperience> {};

// IMapControl
struct IMapControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Center(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _put_Center(Devices::Geolocation::Geopoint* value);
	virtual STDMETHODIMP _get_Children(Foundation::Collections::IVector<DependencyObject*>* *value);
	virtual STDMETHODIMP _get_ColorScheme(MapColorScheme *value);
	virtual STDMETHODIMP _put_ColorScheme(MapColorScheme value);
	virtual STDMETHODIMP _get_DesiredPitch(double *value);
	virtual STDMETHODIMP _put_DesiredPitch(double value);
	virtual STDMETHODIMP _get_Heading(double *value);
	virtual STDMETHODIMP _put_Heading(double value);
	virtual STDMETHODIMP _get_LandmarksVisible(bool *value);
	virtual STDMETHODIMP _put_LandmarksVisible(bool value);
	virtual STDMETHODIMP _get_LoadingStatus(MapLoadingStatus *value);
	virtual STDMETHODIMP _get_MapServiceToken(HSTRING *value);
	virtual STDMETHODIMP _put_MapServiceToken(HSTRING value);
	virtual STDMETHODIMP _get_MaxZoomLevel(double *value);
	virtual STDMETHODIMP _get_MinZoomLevel(double *value);
	virtual STDMETHODIMP _get_PedestrianFeaturesVisible(bool *value);
	virtual STDMETHODIMP _put_PedestrianFeaturesVisible(bool value);
	virtual STDMETHODIMP _get_Pitch(double *value);
	virtual STDMETHODIMP _get_Style(MapStyle *value);
	virtual STDMETHODIMP _put_Style(MapStyle value);
	virtual STDMETHODIMP _get_TrafficFlowVisible(bool *value);
	virtual STDMETHODIMP _put_TrafficFlowVisible(bool value);
	virtual STDMETHODIMP _get_TransformOrigin(Foundation::Point *value);
	virtual STDMETHODIMP _put_TransformOrigin(Foundation::Point value);
	virtual STDMETHODIMP _get_WatermarkMode(MapWatermarkMode *value);
	virtual STDMETHODIMP _put_WatermarkMode(MapWatermarkMode value);
	virtual STDMETHODIMP _get_ZoomLevel(double *value);
	virtual STDMETHODIMP _put_ZoomLevel(double value);
	virtual STDMETHODIMP _get_MapElements(Foundation::Collections::IVector<MapElement*>* *value);
	virtual STDMETHODIMP _get_Routes(Foundation::Collections::IVector<MapRouteView*>* *value);
	virtual STDMETHODIMP _get_TileSources(Foundation::Collections::IVector<MapTileSource*>* *value);
	virtual STDMETHODIMP _add_CenterChanged(Foundation::TypedEventHandler<MapControl*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CenterChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_HeadingChanged(Foundation::TypedEventHandler<MapControl*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HeadingChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_LoadingStatusChanged(Foundation::TypedEventHandler<MapControl*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LoadingStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapDoubleTapped(Foundation::TypedEventHandler<MapControl*, MapInputEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapDoubleTapped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapHolding(Foundation::TypedEventHandler<MapControl*, MapInputEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapHolding(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapTapped(Foundation::TypedEventHandler<MapControl*, MapInputEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapTapped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PitchChanged(Foundation::TypedEventHandler<MapControl*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PitchChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TransformOriginChanged(Foundation::TypedEventHandler<MapControl*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TransformOriginChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ZoomLevelChanged(Foundation::TypedEventHandler<MapControl*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ZoomLevelChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _FindMapElementsAtOffset(Foundation::Point offset, Foundation::Collections::IVectorView<MapElement*>* *returnValue);
	virtual STDMETHODIMP _GetLocationFromOffset(Foundation::Point offset, Devices::Geolocation::Geopoint* *location);
	virtual STDMETHODIMP _GetOffsetFromLocation(Devices::Geolocation::Geopoint* location, Foundation::Point *offset);
	virtual STDMETHODIMP _IsLocationInView(Devices::Geolocation::Geopoint* location, bool *isInView);
	virtual STDMETHODIMP _TrySetViewBoundsAsync(Devices::Geolocation::GeoboundingBox* bounds, Foundation::IReference<Thickness>* margin, MapAnimationKind animation, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TrySetViewWithCenterAsync(Devices::Geolocation::Geopoint* center, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TrySetViewWithCenterAndZoomAsync(Devices::Geolocation::Geopoint* center, Foundation::IReference<double>* zoomLevel, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TrySetViewWithCenterZoomHeadingAndPitchAsync(Devices::Geolocation::Geopoint* center, Foundation::IReference<double>* zoomLevel, Foundation::IReference<double>* heading, Foundation::IReference<double>* desiredPitch, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync(Devices::Geolocation::Geopoint* center, Foundation::IReference<double>* zoomLevel, Foundation::IReference<double>* heading, Foundation::IReference<double>* desiredPitch, MapAnimationKind animation, Foundation::IAsyncOperation<bool>* *returnValue);
};
template<typename X> struct IMapControl_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapControl_adaptor::Center)->_get_Center(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
			void put(pptr<Devices::Geolocation::Geopoint> value) { hrcheck(enc(&IMapControl_adaptor::Center)->_put_Center(value)); }
			void operator=(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
			void operator()(pptr<Devices::Geolocation::Geopoint> value) { put(value); }
		} Center;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> get() { Foundation::Collections::IVector<DependencyObject*>* value; hrcheck(enc(&IMapControl_adaptor::Children)->_get_Children(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<DependencyObject>>> operator->() { return get(); }
		} Children;
		struct : property {
			MapColorScheme get() { MapColorScheme value; hrcheck(enc(&IMapControl_adaptor::ColorScheme)->_get_ColorScheme(&value)); return value; }
			MapColorScheme operator()() { return get(); }
			operator MapColorScheme () { return get(); }
			void put(MapColorScheme value) { hrcheck(enc(&IMapControl_adaptor::ColorScheme)->_put_ColorScheme(value)); }
			void operator=(MapColorScheme value) { put(value); }
			void operator()(MapColorScheme value) { put(value); }
		} ColorScheme;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapControl_adaptor::DesiredPitch)->_get_DesiredPitch(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapControl_adaptor::DesiredPitch)->_put_DesiredPitch(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} DesiredPitch;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapControl_adaptor::Heading)->_get_Heading(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapControl_adaptor::Heading)->_put_Heading(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Heading;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl_adaptor::LandmarksVisible)->_get_LandmarksVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapControl_adaptor::LandmarksVisible)->_put_LandmarksVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} LandmarksVisible;
		struct : property {
			MapLoadingStatus get() { MapLoadingStatus value; hrcheck(enc(&IMapControl_adaptor::LoadingStatus)->_get_LoadingStatus(&value)); return value; }
			MapLoadingStatus operator()() { return get(); }
			operator MapLoadingStatus () { return get(); }
		} LoadingStatus;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> get() { Foundation::Collections::IVector<MapElement*>* value; hrcheck(enc(&IMapControl_adaptor::MapElements)->_get_MapElements(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<MapElement>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<MapElement>>> operator->() { return get(); }
		} MapElements;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapControl_adaptor::MapServiceToken)->_get_MapServiceToken(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMapControl_adaptor::MapServiceToken)->_put_MapServiceToken(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MapServiceToken;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapControl_adaptor::MaxZoomLevel)->_get_MaxZoomLevel(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} MaxZoomLevel;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapControl_adaptor::MinZoomLevel)->_get_MinZoomLevel(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} MinZoomLevel;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl_adaptor::PedestrianFeaturesVisible)->_get_PedestrianFeaturesVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapControl_adaptor::PedestrianFeaturesVisible)->_put_PedestrianFeaturesVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} PedestrianFeaturesVisible;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapControl_adaptor::Pitch)->_get_Pitch(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Pitch;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<MapRouteView>>> get() { Foundation::Collections::IVector<MapRouteView*>* value; hrcheck(enc(&IMapControl_adaptor::Routes)->_get_Routes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<MapRouteView>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<MapRouteView>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<MapRouteView>>> operator->() { return get(); }
		} Routes;
		struct : property {
			MapStyle get() { MapStyle value; hrcheck(enc(&IMapControl_adaptor::Style)->_get_Style(&value)); return value; }
			MapStyle operator()() { return get(); }
			operator MapStyle () { return get(); }
			void put(MapStyle value) { hrcheck(enc(&IMapControl_adaptor::Style)->_put_Style(value)); }
			void operator=(MapStyle value) { put(value); }
			void operator()(MapStyle value) { put(value); }
		} Style;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<MapTileSource>>> get() { Foundation::Collections::IVector<MapTileSource*>* value; hrcheck(enc(&IMapControl_adaptor::TileSources)->_get_TileSources(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<MapTileSource>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<MapTileSource>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<MapTileSource>>> operator->() { return get(); }
		} TileSources;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl_adaptor::TrafficFlowVisible)->_get_TrafficFlowVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapControl_adaptor::TrafficFlowVisible)->_put_TrafficFlowVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} TrafficFlowVisible;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IMapControl_adaptor::TransformOrigin)->_get_TransformOrigin(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
			void put(const Foundation::Point& value) { hrcheck(enc(&IMapControl_adaptor::TransformOrigin)->_put_TransformOrigin(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} TransformOrigin;
		struct : property {
			MapWatermarkMode get() { MapWatermarkMode value; hrcheck(enc(&IMapControl_adaptor::WatermarkMode)->_get_WatermarkMode(&value)); return value; }
			MapWatermarkMode operator()() { return get(); }
			operator MapWatermarkMode () { return get(); }
			void put(MapWatermarkMode value) { hrcheck(enc(&IMapControl_adaptor::WatermarkMode)->_put_WatermarkMode(value)); }
			void operator=(MapWatermarkMode value) { put(value); }
			void operator()(MapWatermarkMode value) { put(value); }
		} WatermarkMode;
		struct : property {
			double get() { double value; hrcheck(enc(&IMapControl_adaptor::ZoomLevel)->_get_ZoomLevel(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMapControl_adaptor::ZoomLevel)->_put_ZoomLevel(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} ZoomLevel;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::CenterChanged)->_add_CenterChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::CenterChanged)->_remove_CenterChanged(token)); }
		} CenterChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::HeadingChanged)->_add_HeadingChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::HeadingChanged)->_remove_HeadingChanged(token)); }
		} HeadingChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::LoadingStatusChanged)->_add_LoadingStatusChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::LoadingStatusChanged)->_remove_LoadingStatusChanged(token)); }
		} LoadingStatusChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapInputEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::MapDoubleTapped)->_add_MapDoubleTapped(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::MapDoubleTapped)->_remove_MapDoubleTapped(token)); }
		} MapDoubleTapped;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapInputEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::MapHolding)->_add_MapHolding(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::MapHolding)->_remove_MapHolding(token)); }
		} MapHolding;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapInputEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::MapTapped)->_add_MapTapped(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::MapTapped)->_remove_MapTapped(token)); }
		} MapTapped;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::PitchChanged)->_add_PitchChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::PitchChanged)->_remove_PitchChanged(token)); }
		} PitchChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::TransformOriginChanged)->_add_TransformOriginChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::TransformOriginChanged)->_remove_TransformOriginChanged(token)); }
		} TransformOriginChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl_adaptor::ZoomLevelChanged)->_add_ZoomLevelChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl_adaptor::ZoomLevelChanged)->_remove_ZoomLevelChanged(token)); }
		} ZoomLevelChanged;
	};
	ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> FindMapElementsAtOffset(const Foundation::Point& offset) { Foundation::Collections::IVectorView<MapElement*>* returnValue; hrcheck(X::get()->_FindMapElementsAtOffset(offset, &returnValue)); return from_abi(returnValue); }
	ptr<Devices::Geolocation::Geopoint> GetLocationFromOffset(const Foundation::Point& offset) { Devices::Geolocation::Geopoint* location; hrcheck(X::get()->_GetLocationFromOffset(offset, &location)); return from_abi(location); }
	Foundation::Point GetOffsetFromLocation(pptr<Devices::Geolocation::Geopoint> location) { Foundation::Point offset; hrcheck(X::get()->_GetOffsetFromLocation(location, &offset)); return offset; }
	bool IsLocationInView(pptr<Devices::Geolocation::Geopoint> location) { bool isInView; hrcheck(X::get()->_IsLocationInView(location, &isInView)); return isInView; }
	ptr<Foundation::IAsyncOperation<bool>> TrySetViewBoundsAsync(pptr<Devices::Geolocation::GeoboundingBox> bounds, pptr<Foundation::IReference<Thickness>> margin, MapAnimationKind animation) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TrySetViewBoundsAsync(bounds, to_abi(margin), animation, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetViewAsync(pptr<Devices::Geolocation::Geopoint> center) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TrySetViewWithCenterAsync(center, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetViewAsync(pptr<Devices::Geolocation::Geopoint> center, pptr<Foundation::IReference<double>> zoomLevel) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TrySetViewWithCenterAndZoomAsync(center, to_abi(zoomLevel), &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetViewAsync(pptr<Devices::Geolocation::Geopoint> center, pptr<Foundation::IReference<double>> zoomLevel, pptr<Foundation::IReference<double>> heading, pptr<Foundation::IReference<double>> desiredPitch) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TrySetViewWithCenterZoomHeadingAndPitchAsync(center, to_abi(zoomLevel), to_abi(heading), to_abi(desiredPitch), &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetViewAsync(pptr<Devices::Geolocation::Geopoint> center, pptr<Foundation::IReference<double>> zoomLevel, pptr<Foundation::IReference<double>> heading, pptr<Foundation::IReference<double>> desiredPitch, MapAnimationKind animation) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TrySetViewWithCenterZoomHeadingPitchAndAnimationAsync(center, to_abi(zoomLevel), to_abi(heading), to_abi(desiredPitch), animation, &returnValue)); return from_abi(returnValue); }
	IMapControl_adaptor() {}
};
template<typename X> struct adapt<IMapControl, X> : Windows::UI::Xaml::Controls::Maps::IMapControl_adaptor<X> { typedef adapt IMapControl; };
struct IMapControl : IMapControl_raw, generate<IMapControl> {};

// IMapControlStatics
struct IMapControlStatics : IInspectable {
	virtual STDMETHODIMP _get_CenterProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ChildrenProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ColorSchemeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_DesiredPitchProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_HeadingProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_LandmarksVisibleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_LoadingStatusProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_MapServiceTokenProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_PedestrianFeaturesVisibleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_PitchProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_StyleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TrafficFlowVisibleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TransformOriginProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_WatermarkModeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ZoomLevelProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_MapElementsProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_RoutesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TileSourcesProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_LocationProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetLocation(DependencyObject* element, Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _SetLocation(DependencyObject* element, Devices::Geolocation::Geopoint* value);
	virtual STDMETHODIMP _get_NormalizedAnchorPointProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _GetNormalizedAnchorPoint(DependencyObject* element, Foundation::Point *value);
	virtual STDMETHODIMP _SetNormalizedAnchorPoint(DependencyObject* element, Foundation::Point value);
};

// IMapControl2
struct IMapControl2_raw : IInspectable {
	virtual STDMETHODIMP _get_BusinessLandmarksVisible(bool *value);
	virtual STDMETHODIMP _put_BusinessLandmarksVisible(bool value);
	virtual STDMETHODIMP _get_TransitFeaturesVisible(bool *value);
	virtual STDMETHODIMP _put_TransitFeaturesVisible(bool value);
	virtual STDMETHODIMP _get_PanInteractionMode(MapPanInteractionMode *value);
	virtual STDMETHODIMP _put_PanInteractionMode(MapPanInteractionMode value);
	virtual STDMETHODIMP _get_RotateInteractionMode(MapInteractionMode *value);
	virtual STDMETHODIMP _put_RotateInteractionMode(MapInteractionMode value);
	virtual STDMETHODIMP _get_TiltInteractionMode(MapInteractionMode *value);
	virtual STDMETHODIMP _put_TiltInteractionMode(MapInteractionMode value);
	virtual STDMETHODIMP _get_ZoomInteractionMode(MapInteractionMode *value);
	virtual STDMETHODIMP _put_ZoomInteractionMode(MapInteractionMode value);
	virtual STDMETHODIMP _get_Is3DSupported(bool *value);
	virtual STDMETHODIMP _get_IsStreetsideSupported(bool *value);
	virtual STDMETHODIMP _get_Scene(MapScene* *value);
	virtual STDMETHODIMP _put_Scene(MapScene* value);
	virtual STDMETHODIMP _get_ActualCamera(MapCamera* *value);
	virtual STDMETHODIMP _get_TargetCamera(MapCamera* *value);
	virtual STDMETHODIMP _get_CustomExperience(MapCustomExperience* *value);
	virtual STDMETHODIMP _put_CustomExperience(MapCustomExperience* value);
	virtual STDMETHODIMP _add_MapElementClick(Foundation::TypedEventHandler<MapControl*, MapElementClickEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapElementClick(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapElementPointerEntered(Foundation::TypedEventHandler<MapControl*, MapElementPointerEnteredEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapElementPointerEntered(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_MapElementPointerExited(Foundation::TypedEventHandler<MapControl*, MapElementPointerExitedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapElementPointerExited(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ActualCameraChanged(Foundation::TypedEventHandler<MapControl*, MapActualCameraChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ActualCameraChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ActualCameraChanging(Foundation::TypedEventHandler<MapControl*, MapActualCameraChangingEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ActualCameraChanging(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TargetCameraChanged(Foundation::TypedEventHandler<MapControl*, MapTargetCameraChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TargetCameraChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CustomExperienceChanged(Foundation::TypedEventHandler<MapControl*, MapCustomExperienceChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CustomExperienceChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _StartContinuousRotate(double rateInDegreesPerSecond);
	virtual STDMETHODIMP _StopContinuousRotate();
	virtual STDMETHODIMP _StartContinuousTilt(double rateInDegreesPerSecond);
	virtual STDMETHODIMP _StopContinuousTilt();
	virtual STDMETHODIMP _StartContinuousZoom(double rateOfChangePerSecond);
	virtual STDMETHODIMP _StopContinuousZoom();
	virtual STDMETHODIMP _TryRotateAsync(double degrees, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TryRotateToAsync(double angleInDegrees, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TryTiltAsync(double degrees, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TryTiltToAsync(double angleInDegrees, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TryZoomInAsync(Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TryZoomOutAsync(Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TryZoomToAsync(double zoomLevel, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TrySetSceneAsync(MapScene* scene, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TrySetSceneWithAnimationAsync(MapScene* scene, MapAnimationKind animationKind, Foundation::IAsyncOperation<bool>* *returnValue);
};
template<typename X> struct IMapControl2_adaptor : X {
	union {
		struct : property {
			ptr<MapCamera> get() { MapCamera* value; hrcheck(enc(&IMapControl2_adaptor::ActualCamera)->_get_ActualCamera(&value)); return from_abi(value); }
			ptr<MapCamera> operator()() { return get(); }
			operator ptr<MapCamera> () { return get(); }
			ptr<MapCamera> operator->() { return get(); }
		} ActualCamera;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl2_adaptor::BusinessLandmarksVisible)->_get_BusinessLandmarksVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapControl2_adaptor::BusinessLandmarksVisible)->_put_BusinessLandmarksVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} BusinessLandmarksVisible;
		struct : property {
			ptr<MapCustomExperience> get() { MapCustomExperience* value; hrcheck(enc(&IMapControl2_adaptor::CustomExperience)->_get_CustomExperience(&value)); return from_abi(value); }
			ptr<MapCustomExperience> operator()() { return get(); }
			operator ptr<MapCustomExperience> () { return get(); }
			ptr<MapCustomExperience> operator->() { return get(); }
			void put(pptr<MapCustomExperience> value) { hrcheck(enc(&IMapControl2_adaptor::CustomExperience)->_put_CustomExperience(value)); }
			void operator=(pptr<MapCustomExperience> value) { put(value); }
			void operator()(pptr<MapCustomExperience> value) { put(value); }
		} CustomExperience;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl2_adaptor::Is3DSupported)->_get_Is3DSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Is3DSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl2_adaptor::IsStreetsideSupported)->_get_IsStreetsideSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStreetsideSupported;
		struct : property {
			MapPanInteractionMode get() { MapPanInteractionMode value; hrcheck(enc(&IMapControl2_adaptor::PanInteractionMode)->_get_PanInteractionMode(&value)); return value; }
			MapPanInteractionMode operator()() { return get(); }
			operator MapPanInteractionMode () { return get(); }
			void put(MapPanInteractionMode value) { hrcheck(enc(&IMapControl2_adaptor::PanInteractionMode)->_put_PanInteractionMode(value)); }
			void operator=(MapPanInteractionMode value) { put(value); }
			void operator()(MapPanInteractionMode value) { put(value); }
		} PanInteractionMode;
		struct : property {
			MapInteractionMode get() { MapInteractionMode value; hrcheck(enc(&IMapControl2_adaptor::RotateInteractionMode)->_get_RotateInteractionMode(&value)); return value; }
			MapInteractionMode operator()() { return get(); }
			operator MapInteractionMode () { return get(); }
			void put(MapInteractionMode value) { hrcheck(enc(&IMapControl2_adaptor::RotateInteractionMode)->_put_RotateInteractionMode(value)); }
			void operator=(MapInteractionMode value) { put(value); }
			void operator()(MapInteractionMode value) { put(value); }
		} RotateInteractionMode;
		struct : property {
			ptr<MapScene> get() { MapScene* value; hrcheck(enc(&IMapControl2_adaptor::Scene)->_get_Scene(&value)); return from_abi(value); }
			ptr<MapScene> operator()() { return get(); }
			operator ptr<MapScene> () { return get(); }
			ptr<MapScene> operator->() { return get(); }
			void put(pptr<MapScene> value) { hrcheck(enc(&IMapControl2_adaptor::Scene)->_put_Scene(value)); }
			void operator=(pptr<MapScene> value) { put(value); }
			void operator()(pptr<MapScene> value) { put(value); }
		} Scene;
		struct : property {
			ptr<MapCamera> get() { MapCamera* value; hrcheck(enc(&IMapControl2_adaptor::TargetCamera)->_get_TargetCamera(&value)); return from_abi(value); }
			ptr<MapCamera> operator()() { return get(); }
			operator ptr<MapCamera> () { return get(); }
			ptr<MapCamera> operator->() { return get(); }
		} TargetCamera;
		struct : property {
			MapInteractionMode get() { MapInteractionMode value; hrcheck(enc(&IMapControl2_adaptor::TiltInteractionMode)->_get_TiltInteractionMode(&value)); return value; }
			MapInteractionMode operator()() { return get(); }
			operator MapInteractionMode () { return get(); }
			void put(MapInteractionMode value) { hrcheck(enc(&IMapControl2_adaptor::TiltInteractionMode)->_put_TiltInteractionMode(value)); }
			void operator=(MapInteractionMode value) { put(value); }
			void operator()(MapInteractionMode value) { put(value); }
		} TiltInteractionMode;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl2_adaptor::TransitFeaturesVisible)->_get_TransitFeaturesVisible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapControl2_adaptor::TransitFeaturesVisible)->_put_TransitFeaturesVisible(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} TransitFeaturesVisible;
		struct : property {
			MapInteractionMode get() { MapInteractionMode value; hrcheck(enc(&IMapControl2_adaptor::ZoomInteractionMode)->_get_ZoomInteractionMode(&value)); return value; }
			MapInteractionMode operator()() { return get(); }
			operator MapInteractionMode () { return get(); }
			void put(MapInteractionMode value) { hrcheck(enc(&IMapControl2_adaptor::ZoomInteractionMode)->_put_ZoomInteractionMode(value)); }
			void operator=(MapInteractionMode value) { put(value); }
			void operator()(MapInteractionMode value) { put(value); }
		} ZoomInteractionMode;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapActualCameraChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl2_adaptor::ActualCameraChanged)->_add_ActualCameraChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl2_adaptor::ActualCameraChanged)->_remove_ActualCameraChanged(token)); }
		} ActualCameraChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapActualCameraChangingEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl2_adaptor::ActualCameraChanging)->_add_ActualCameraChanging(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl2_adaptor::ActualCameraChanging)->_remove_ActualCameraChanging(token)); }
		} ActualCameraChanging;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapCustomExperienceChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl2_adaptor::CustomExperienceChanged)->_add_CustomExperienceChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl2_adaptor::CustomExperienceChanged)->_remove_CustomExperienceChanged(token)); }
		} CustomExperienceChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapElementClickEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl2_adaptor::MapElementClick)->_add_MapElementClick(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl2_adaptor::MapElementClick)->_remove_MapElementClick(token)); }
		} MapElementClick;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapElementPointerEnteredEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl2_adaptor::MapElementPointerEntered)->_add_MapElementPointerEntered(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl2_adaptor::MapElementPointerEntered)->_remove_MapElementPointerEntered(token)); }
		} MapElementPointerEntered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapElementPointerExitedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl2_adaptor::MapElementPointerExited)->_add_MapElementPointerExited(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl2_adaptor::MapElementPointerExited)->_remove_MapElementPointerExited(token)); }
		} MapElementPointerExited;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapTargetCameraChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl2_adaptor::TargetCameraChanged)->_add_TargetCameraChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl2_adaptor::TargetCameraChanged)->_remove_TargetCameraChanged(token)); }
		} TargetCameraChanged;
	};
	void StartContinuousRotate(double rateInDegreesPerSecond) { hrcheck(X::get()->_StartContinuousRotate(rateInDegreesPerSecond)); }
	void StopContinuousRotate() { hrcheck(X::get()->_StopContinuousRotate()); }
	void StartContinuousTilt(double rateInDegreesPerSecond) { hrcheck(X::get()->_StartContinuousTilt(rateInDegreesPerSecond)); }
	void StopContinuousTilt() { hrcheck(X::get()->_StopContinuousTilt()); }
	void StartContinuousZoom(double rateOfChangePerSecond) { hrcheck(X::get()->_StartContinuousZoom(rateOfChangePerSecond)); }
	void StopContinuousZoom() { hrcheck(X::get()->_StopContinuousZoom()); }
	ptr<Foundation::IAsyncOperation<bool>> TryRotateAsync(double degrees) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryRotateAsync(degrees, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TryRotateToAsync(double angleInDegrees) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryRotateToAsync(angleInDegrees, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TryTiltAsync(double degrees) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryTiltAsync(degrees, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TryTiltToAsync(double angleInDegrees) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryTiltToAsync(angleInDegrees, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TryZoomInAsync() { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryZoomInAsync(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TryZoomOutAsync() { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryZoomOutAsync(&returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TryZoomToAsync(double zoomLevel) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryZoomToAsync(zoomLevel, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetSceneAsync(pptr<MapScene> scene) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TrySetSceneAsync(scene, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetSceneAsync(pptr<MapScene> scene, MapAnimationKind animationKind) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TrySetSceneWithAnimationAsync(scene, animationKind, &returnValue)); return from_abi(returnValue); }
	IMapControl2_adaptor() {}
};
template<typename X> struct adapt<IMapControl2, X> : Windows::UI::Xaml::Controls::Maps::IMapControl2_adaptor<X> { typedef adapt IMapControl2; };
struct IMapControl2 : IMapControl2_raw, generate<IMapControl2> {};

// IMapControlStatics2
struct IMapControlStatics2 : IInspectable {
	virtual STDMETHODIMP _get_BusinessLandmarksVisibleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TransitFeaturesVisibleProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_PanInteractionModeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_RotateInteractionModeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TiltInteractionModeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ZoomInteractionModeProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_Is3DSupportedProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_IsStreetsideSupportedProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_SceneProperty(DependencyProperty* *value);
};

// IMapControl3
struct IMapControl3_raw : IInspectable {
	virtual STDMETHODIMP _add_MapRightTapped(Foundation::TypedEventHandler<MapControl*, MapRightTappedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapRightTapped(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMapControl3_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapRightTappedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl3_adaptor::MapRightTapped)->_add_MapRightTapped(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl3_adaptor::MapRightTapped)->_remove_MapRightTapped(token)); }
		} MapRightTapped;
	};
	IMapControl3_adaptor() {}
};
template<typename X> struct adapt<IMapControl3, X> : Windows::UI::Xaml::Controls::Maps::IMapControl3_adaptor<X> { typedef adapt IMapControl3; };
struct IMapControl3 : IMapControl3_raw, generate<IMapControl3> {};

// IMapControl4
struct IMapControl4_raw : IInspectable {
	virtual STDMETHODIMP _get_BusinessLandmarksEnabled(bool *value);
	virtual STDMETHODIMP _put_BusinessLandmarksEnabled(bool value);
	virtual STDMETHODIMP _get_TransitFeaturesEnabled(bool *value);
	virtual STDMETHODIMP _put_TransitFeaturesEnabled(bool value);
	virtual STDMETHODIMP _GetVisibleRegion(MapVisibleRegionKind region, Devices::Geolocation::Geopath* *returnValue);
};
template<typename X> struct IMapControl4_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl4_adaptor::BusinessLandmarksEnabled)->_get_BusinessLandmarksEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapControl4_adaptor::BusinessLandmarksEnabled)->_put_BusinessLandmarksEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} BusinessLandmarksEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMapControl4_adaptor::TransitFeaturesEnabled)->_get_TransitFeaturesEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IMapControl4_adaptor::TransitFeaturesEnabled)->_put_TransitFeaturesEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} TransitFeaturesEnabled;
	};
	ptr<Devices::Geolocation::Geopath> GetVisibleRegion(MapVisibleRegionKind region) { Devices::Geolocation::Geopath* returnValue; hrcheck(X::get()->_GetVisibleRegion(region, &returnValue)); return from_abi(returnValue); }
	IMapControl4_adaptor() {}
};
template<typename X> struct adapt<IMapControl4, X> : Windows::UI::Xaml::Controls::Maps::IMapControl4_adaptor<X> { typedef adapt IMapControl4; };
struct IMapControl4 : IMapControl4_raw, generate<IMapControl4> {};

// IMapControlStatics4
struct IMapControlStatics4 : IInspectable {
	virtual STDMETHODIMP _get_BusinessLandmarksEnabledProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TransitFeaturesEnabledProperty(DependencyProperty* *value);
};

// IMapControl5
struct IMapControl5_raw : IInspectable {
	virtual STDMETHODIMP _get_MapProjection(Maps::MapProjection *value);
	virtual STDMETHODIMP _put_MapProjection(Maps::MapProjection value);
	virtual STDMETHODIMP _get_StyleSheet(MapStyleSheet* *value);
	virtual STDMETHODIMP _put_StyleSheet(MapStyleSheet* value);
	virtual STDMETHODIMP _get_ViewPadding(Thickness *value);
	virtual STDMETHODIMP _put_ViewPadding(Thickness value);
	virtual STDMETHODIMP _add_MapContextRequested(Foundation::TypedEventHandler<MapControl*, MapContextRequestedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MapContextRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _FindMapElementsAtOffsetWithRadius(Foundation::Point offset, double radius, Foundation::Collections::IVectorView<MapElement*>* *returnValue);
	virtual STDMETHODIMP _GetLocationFromOffsetWithReferenceSystem(Foundation::Point offset, Devices::Geolocation::AltitudeReferenceSystem desiredReferenceSystem, Devices::Geolocation::Geopoint* *location);
	virtual STDMETHODIMP _StartContinuousPan(double horizontalPixelsPerSecond, double verticalPixelsPerSecond);
	virtual STDMETHODIMP _StopContinuousPan();
	virtual STDMETHODIMP _TryPanAsync(double horizontalPixels, double verticalPixels, Foundation::IAsyncOperation<bool>* *returnValue);
	virtual STDMETHODIMP _TryPanToAsync(Devices::Geolocation::Geopoint* location, Foundation::IAsyncOperation<bool>* *returnValue);
};
template<typename X> struct IMapControl5_adaptor : X {
	union {
		struct : property {
			Maps::MapProjection get() { Maps::MapProjection value; hrcheck(enc(&IMapControl5_adaptor::MapProjection)->_get_MapProjection(&value)); return value; }
			Maps::MapProjection operator()() { return get(); }
			operator Maps::MapProjection () { return get(); }
			void put(Maps::MapProjection value) { hrcheck(enc(&IMapControl5_adaptor::MapProjection)->_put_MapProjection(value)); }
			void operator=(Maps::MapProjection value) { put(value); }
			void operator()(Maps::MapProjection value) { put(value); }
		} MapProjection;
		struct : property {
			ptr<MapStyleSheet> get() { MapStyleSheet* value; hrcheck(enc(&IMapControl5_adaptor::StyleSheet)->_get_StyleSheet(&value)); return from_abi(value); }
			ptr<MapStyleSheet> operator()() { return get(); }
			operator ptr<MapStyleSheet> () { return get(); }
			ptr<MapStyleSheet> operator->() { return get(); }
			void put(pptr<MapStyleSheet> value) { hrcheck(enc(&IMapControl5_adaptor::StyleSheet)->_put_StyleSheet(value)); }
			void operator=(pptr<MapStyleSheet> value) { put(value); }
			void operator()(pptr<MapStyleSheet> value) { put(value); }
		} StyleSheet;
		struct : property {
			Thickness get() { Thickness value; hrcheck(enc(&IMapControl5_adaptor::ViewPadding)->_get_ViewPadding(&value)); return value; }
			Thickness operator()() { return get(); }
			operator Thickness () { return get(); }
			void put(const Thickness& value) { hrcheck(enc(&IMapControl5_adaptor::ViewPadding)->_put_ViewPadding(value)); }
			void operator=(const Thickness& value) { put(value); }
			void operator()(const Thickness& value) { put(value); }
		} ViewPadding;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapContextRequestedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControl5_adaptor::MapContextRequested)->_add_MapContextRequested(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControl5_adaptor::MapContextRequested)->_remove_MapContextRequested(token)); }
		} MapContextRequested;
	};
	ptr<Foundation::Collections::IVectorView<ptr<MapElement>>> FindMapElementsAtOffset(const Foundation::Point& offset, double radius) { Foundation::Collections::IVectorView<MapElement*>* returnValue; hrcheck(X::get()->_FindMapElementsAtOffsetWithRadius(offset, radius, &returnValue)); return from_abi(returnValue); }
	ptr<Devices::Geolocation::Geopoint> GetLocationFromOffset(const Foundation::Point& offset, Devices::Geolocation::AltitudeReferenceSystem desiredReferenceSystem) { Devices::Geolocation::Geopoint* location; hrcheck(X::get()->_GetLocationFromOffsetWithReferenceSystem(offset, desiredReferenceSystem, &location)); return from_abi(location); }
	void StartContinuousPan(double horizontalPixelsPerSecond, double verticalPixelsPerSecond) { hrcheck(X::get()->_StartContinuousPan(horizontalPixelsPerSecond, verticalPixelsPerSecond)); }
	void StopContinuousPan() { hrcheck(X::get()->_StopContinuousPan()); }
	ptr<Foundation::IAsyncOperation<bool>> TryPanAsync(double horizontalPixels, double verticalPixels) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryPanAsync(horizontalPixels, verticalPixels, &returnValue)); return from_abi(returnValue); }
	ptr<Foundation::IAsyncOperation<bool>> TryPanToAsync(pptr<Devices::Geolocation::Geopoint> location) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(X::get()->_TryPanToAsync(location, &returnValue)); return from_abi(returnValue); }
	IMapControl5_adaptor() {}
};
template<typename X> struct adapt<IMapControl5, X> : Windows::UI::Xaml::Controls::Maps::IMapControl5_adaptor<X> { typedef adapt IMapControl5; };
struct IMapControl5 : IMapControl5_raw, generate<IMapControl5> {};

// IMapControlStatics5
struct IMapControlStatics5 : IInspectable {
	virtual STDMETHODIMP _get_MapProjectionProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_StyleSheetProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ViewPaddingProperty(DependencyProperty* *value);
};

// IMapControl6
struct IMapControl6_raw : IInspectable {
	virtual STDMETHODIMP _get_Layers(Foundation::Collections::IVector<MapLayer*>* *value);
	virtual STDMETHODIMP _put_Layers(Foundation::Collections::IVector<MapLayer*>* value);
	virtual STDMETHODIMP _TryGetLocationFromOffset(Foundation::Point offset, Devices::Geolocation::Geopoint* *location, bool *returnValue);
	virtual STDMETHODIMP _TryGetLocationFromOffsetWithReferenceSystem(Foundation::Point offset, Devices::Geolocation::AltitudeReferenceSystem desiredReferenceSystem, Devices::Geolocation::Geopoint* *location, bool *returnValue);
};
template<typename X> struct IMapControl6_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<MapLayer>>> get() { Foundation::Collections::IVector<MapLayer*>* value; hrcheck(enc(&IMapControl6_adaptor::Layers)->_get_Layers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<MapLayer>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<MapLayer>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<MapLayer>>> operator->() { return get(); }
			void put(pptr<Foundation::Collections::IVector<ptr<MapLayer>>> value) { hrcheck(enc(&IMapControl6_adaptor::Layers)->_put_Layers(to_abi(value))); }
			void operator=(pptr<Foundation::Collections::IVector<ptr<MapLayer>>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::Collections::IVector<ptr<MapLayer>>> value) { put(to_abi(value)); }
		} Layers;
	};
	bool TryGetLocationFromOffset(const Foundation::Point& offset, pptr<Devices::Geolocation::Geopoint> *location) { bool returnValue; hrcheck(X::get()->_TryGetLocationFromOffset(offset, location, &returnValue)); return returnValue; }
	bool TryGetLocationFromOffset(const Foundation::Point& offset, Devices::Geolocation::AltitudeReferenceSystem desiredReferenceSystem, pptr<Devices::Geolocation::Geopoint> *location) { bool returnValue; hrcheck(X::get()->_TryGetLocationFromOffsetWithReferenceSystem(offset, desiredReferenceSystem, location, &returnValue)); return returnValue; }
	IMapControl6_adaptor() {}
};
template<typename X> struct adapt<IMapControl6, X> : Windows::UI::Xaml::Controls::Maps::IMapControl6_adaptor<X> { typedef adapt IMapControl6; };
struct IMapControl6 : IMapControl6_raw, generate<IMapControl6> {};

// IMapControlStatics6
struct IMapControlStatics6 : IInspectable {
	virtual STDMETHODIMP _get_LayersProperty(DependencyProperty* *value);
};

// IMapControl7
struct IMapControl7_raw : IInspectable {
	virtual STDMETHODIMP _get_Region(HSTRING *value);
	virtual STDMETHODIMP _put_Region(HSTRING value);
};
template<typename X> struct IMapControl7_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapControl7_adaptor::Region)->_get_Region(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IMapControl7_adaptor::Region)->_put_Region(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Region;
	};
	IMapControl7_adaptor() {}
};
template<typename X> struct adapt<IMapControl7, X> : Windows::UI::Xaml::Controls::Maps::IMapControl7_adaptor<X> { typedef adapt IMapControl7; };
struct IMapControl7 : IMapControl7_raw, generate<IMapControl7> {};

// IMapControlStatics7
struct IMapControlStatics7 : IInspectable {
	virtual STDMETHODIMP _get_RegionProperty(DependencyProperty* *value);
};

// MapControl
template<typename> struct MapControl_statics {
	static struct _CenterProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_CenterProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CenterProperty;
	static struct _ChildrenProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_ChildrenProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ChildrenProperty;
	static struct _ColorSchemeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_ColorSchemeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ColorSchemeProperty;
	static struct _DesiredPitchProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_DesiredPitchProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} DesiredPitchProperty;
	static struct _HeadingProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_HeadingProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} HeadingProperty;
	static struct _LandmarksVisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_LandmarksVisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LandmarksVisibleProperty;
	static struct _LoadingStatusProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_LoadingStatusProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LoadingStatusProperty;
	static struct _LocationProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_LocationProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LocationProperty;
	static struct _MapElementsProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_MapElementsProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapElementsProperty;
	static struct _MapServiceTokenProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_MapServiceTokenProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapServiceTokenProperty;
	static struct _NormalizedAnchorPointProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_NormalizedAnchorPointProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} NormalizedAnchorPointProperty;
	static struct _PedestrianFeaturesVisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_PedestrianFeaturesVisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PedestrianFeaturesVisibleProperty;
	static struct _PitchProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_PitchProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PitchProperty;
	static struct _RoutesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_RoutesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} RoutesProperty;
	static struct _StyleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_StyleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StyleProperty;
	static struct _TileSourcesProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_TileSourcesProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TileSourcesProperty;
	static struct _TrafficFlowVisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_TrafficFlowVisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TrafficFlowVisibleProperty;
	static struct _TransformOriginProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_TransformOriginProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TransformOriginProperty;
	static struct _WatermarkModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_WatermarkModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} WatermarkModeProperty;
	static struct _ZoomLevelProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_get_ZoomLevelProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ZoomLevelProperty;
	static struct _BusinessLandmarksVisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_BusinessLandmarksVisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} BusinessLandmarksVisibleProperty;
	static struct _Is3DSupportedProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_Is3DSupportedProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} Is3DSupportedProperty;
	static struct _IsStreetsideSupportedProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_IsStreetsideSupportedProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} IsStreetsideSupportedProperty;
	static struct _PanInteractionModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_PanInteractionModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} PanInteractionModeProperty;
	static struct _RotateInteractionModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_RotateInteractionModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} RotateInteractionModeProperty;
	static struct _SceneProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_SceneProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} SceneProperty;
	static struct _TiltInteractionModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_TiltInteractionModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TiltInteractionModeProperty;
	static struct _TransitFeaturesVisibleProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_TransitFeaturesVisibleProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TransitFeaturesVisibleProperty;
	static struct _ZoomInteractionModeProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics2>()->_get_ZoomInteractionModeProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ZoomInteractionModeProperty;
	static struct _BusinessLandmarksEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics4>()->_get_BusinessLandmarksEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} BusinessLandmarksEnabledProperty;
	static struct _TransitFeaturesEnabledProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics4>()->_get_TransitFeaturesEnabledProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TransitFeaturesEnabledProperty;
	static struct _MapProjectionProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics5>()->_get_MapProjectionProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} MapProjectionProperty;
	static struct _StyleSheetProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics5>()->_get_StyleSheetProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} StyleSheetProperty;
	static struct _ViewPaddingProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics5>()->_get_ViewPaddingProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ViewPaddingProperty;
	static struct _LayersProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics6>()->_get_LayersProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} LayersProperty;
	static struct _RegionProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics7>()->_get_RegionProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} RegionProperty;
	static ptr<Devices::Geolocation::Geopoint> GetLocation(pptr<DependencyObject> element) { Devices::Geolocation::Geopoint* value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_GetLocation(element, &value)); return from_abi(value); }
	static void SetLocation(pptr<DependencyObject> element, pptr<Devices::Geolocation::Geopoint> value) { hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_SetLocation(element, value)); }
	static Foundation::Point GetNormalizedAnchorPoint(pptr<DependencyObject> element) { Foundation::Point value; hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_GetNormalizedAnchorPoint(element, &value)); return value; }
	static void SetNormalizedAnchorPoint(pptr<DependencyObject> element, const Foundation::Point& value) { hrcheck(get_activation_factory<MapControl, IMapControlStatics>()->_SetNormalizedAnchorPoint(element, value)); }
};
template<typename X> typename MapControl_statics<X>::_CenterProperty MapControl_statics<X>::CenterProperty;
template<typename X> typename MapControl_statics<X>::_ChildrenProperty MapControl_statics<X>::ChildrenProperty;
template<typename X> typename MapControl_statics<X>::_ColorSchemeProperty MapControl_statics<X>::ColorSchemeProperty;
template<typename X> typename MapControl_statics<X>::_DesiredPitchProperty MapControl_statics<X>::DesiredPitchProperty;
template<typename X> typename MapControl_statics<X>::_HeadingProperty MapControl_statics<X>::HeadingProperty;
template<typename X> typename MapControl_statics<X>::_LandmarksVisibleProperty MapControl_statics<X>::LandmarksVisibleProperty;
template<typename X> typename MapControl_statics<X>::_LoadingStatusProperty MapControl_statics<X>::LoadingStatusProperty;
template<typename X> typename MapControl_statics<X>::_LocationProperty MapControl_statics<X>::LocationProperty;
template<typename X> typename MapControl_statics<X>::_MapElementsProperty MapControl_statics<X>::MapElementsProperty;
template<typename X> typename MapControl_statics<X>::_MapServiceTokenProperty MapControl_statics<X>::MapServiceTokenProperty;
template<typename X> typename MapControl_statics<X>::_NormalizedAnchorPointProperty MapControl_statics<X>::NormalizedAnchorPointProperty;
template<typename X> typename MapControl_statics<X>::_PedestrianFeaturesVisibleProperty MapControl_statics<X>::PedestrianFeaturesVisibleProperty;
template<typename X> typename MapControl_statics<X>::_PitchProperty MapControl_statics<X>::PitchProperty;
template<typename X> typename MapControl_statics<X>::_RoutesProperty MapControl_statics<X>::RoutesProperty;
template<typename X> typename MapControl_statics<X>::_StyleProperty MapControl_statics<X>::StyleProperty;
template<typename X> typename MapControl_statics<X>::_TileSourcesProperty MapControl_statics<X>::TileSourcesProperty;
template<typename X> typename MapControl_statics<X>::_TrafficFlowVisibleProperty MapControl_statics<X>::TrafficFlowVisibleProperty;
template<typename X> typename MapControl_statics<X>::_TransformOriginProperty MapControl_statics<X>::TransformOriginProperty;
template<typename X> typename MapControl_statics<X>::_WatermarkModeProperty MapControl_statics<X>::WatermarkModeProperty;
template<typename X> typename MapControl_statics<X>::_ZoomLevelProperty MapControl_statics<X>::ZoomLevelProperty;
template<typename X> typename MapControl_statics<X>::_BusinessLandmarksVisibleProperty MapControl_statics<X>::BusinessLandmarksVisibleProperty;
template<typename X> typename MapControl_statics<X>::_Is3DSupportedProperty MapControl_statics<X>::Is3DSupportedProperty;
template<typename X> typename MapControl_statics<X>::_IsStreetsideSupportedProperty MapControl_statics<X>::IsStreetsideSupportedProperty;
template<typename X> typename MapControl_statics<X>::_PanInteractionModeProperty MapControl_statics<X>::PanInteractionModeProperty;
template<typename X> typename MapControl_statics<X>::_RotateInteractionModeProperty MapControl_statics<X>::RotateInteractionModeProperty;
template<typename X> typename MapControl_statics<X>::_SceneProperty MapControl_statics<X>::SceneProperty;
template<typename X> typename MapControl_statics<X>::_TiltInteractionModeProperty MapControl_statics<X>::TiltInteractionModeProperty;
template<typename X> typename MapControl_statics<X>::_TransitFeaturesVisibleProperty MapControl_statics<X>::TransitFeaturesVisibleProperty;
template<typename X> typename MapControl_statics<X>::_ZoomInteractionModeProperty MapControl_statics<X>::ZoomInteractionModeProperty;
template<typename X> typename MapControl_statics<X>::_BusinessLandmarksEnabledProperty MapControl_statics<X>::BusinessLandmarksEnabledProperty;
template<typename X> typename MapControl_statics<X>::_TransitFeaturesEnabledProperty MapControl_statics<X>::TransitFeaturesEnabledProperty;
template<typename X> typename MapControl_statics<X>::_MapProjectionProperty MapControl_statics<X>::MapProjectionProperty;
template<typename X> typename MapControl_statics<X>::_StyleSheetProperty MapControl_statics<X>::StyleSheetProperty;
template<typename X> typename MapControl_statics<X>::_ViewPaddingProperty MapControl_statics<X>::ViewPaddingProperty;
template<typename X> typename MapControl_statics<X>::_LayersProperty MapControl_statics<X>::LayersProperty;
template<typename X> typename MapControl_statics<X>::_RegionProperty MapControl_statics<X>::RegionProperty;

template<typename X> struct statics<MapControl, X> : X, Windows::UI::Xaml::Controls::Maps::MapControl_statics<void> {
	typedef typename X::root_type MapControl;
};
struct MapControl : generate<MapControl> {
	using IMapControl6::TryGetLocationFromOffset;
	using IMapControl2::TrySetSceneAsync;
	using IMapControl5::FindMapElementsAtOffset;
	using IMapControl::FindMapElementsAtOffset;
	using IMapControl::TrySetViewAsync;
	using IMapControl5::GetLocationFromOffset;
	using IMapControl::GetLocationFromOffset;
};

// IMapControlDataHelper
struct IMapControlDataHelper_raw : IInspectable {
	virtual STDMETHODIMP _add_BusinessLandmarkClick(Foundation::TypedEventHandler<MapControl*, MapControlBusinessLandmarkClickEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BusinessLandmarkClick(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TransitFeatureClick(Foundation::TypedEventHandler<MapControl*, MapControlTransitFeatureClickEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TransitFeatureClick(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BusinessLandmarkRightTapped(Foundation::TypedEventHandler<MapControl*, MapControlBusinessLandmarkRightTappedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BusinessLandmarkRightTapped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TransitFeatureRightTapped(Foundation::TypedEventHandler<MapControl*, MapControlTransitFeatureRightTappedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TransitFeatureRightTapped(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMapControlDataHelper_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlBusinessLandmarkClickEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper_adaptor::BusinessLandmarkClick)->_add_BusinessLandmarkClick(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper_adaptor::BusinessLandmarkClick)->_remove_BusinessLandmarkClick(token)); }
		} BusinessLandmarkClick;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlBusinessLandmarkRightTappedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper_adaptor::BusinessLandmarkRightTapped)->_add_BusinessLandmarkRightTapped(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper_adaptor::BusinessLandmarkRightTapped)->_remove_BusinessLandmarkRightTapped(token)); }
		} BusinessLandmarkRightTapped;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlTransitFeatureClickEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper_adaptor::TransitFeatureClick)->_add_TransitFeatureClick(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper_adaptor::TransitFeatureClick)->_remove_TransitFeatureClick(token)); }
		} TransitFeatureClick;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlTransitFeatureRightTappedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper_adaptor::TransitFeatureRightTapped)->_add_TransitFeatureRightTapped(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper_adaptor::TransitFeatureRightTapped)->_remove_TransitFeatureRightTapped(token)); }
		} TransitFeatureRightTapped;
	};
	IMapControlDataHelper_adaptor() {}
};
template<typename X> struct adapt<IMapControlDataHelper, X> : Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper_adaptor<X> { typedef adapt IMapControlDataHelper; };
struct IMapControlDataHelper : IMapControlDataHelper_raw, generate<IMapControlDataHelper> {};

// IMapControlBusinessLandmarkClickEventArgs
struct IMapControlBusinessLandmarkClickEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_LocalLocations(Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* *value);
};
template<typename X> struct IMapControlBusinessLandmarkClickEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> get() { Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* value; hrcheck(enc(&IMapControlBusinessLandmarkClickEventArgs_adaptor::LocalLocations)->_get_LocalLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator->() { return get(); }
		} LocalLocations;
	};
	IMapControlBusinessLandmarkClickEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlBusinessLandmarkClickEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkClickEventArgs_adaptor<X> { typedef adapt IMapControlBusinessLandmarkClickEventArgs; };
struct IMapControlBusinessLandmarkClickEventArgs : IMapControlBusinessLandmarkClickEventArgs_raw, generate<IMapControlBusinessLandmarkClickEventArgs> {};

// MapControlBusinessLandmarkClickEventArgs
template<typename X> struct statics<MapControlBusinessLandmarkClickEventArgs, X> : X {
	typedef typename X::root_type MapControlBusinessLandmarkClickEventArgs;
};
struct MapControlBusinessLandmarkClickEventArgs : generate<MapControlBusinessLandmarkClickEventArgs> {};

// IMapControlTransitFeatureClickEventArgs
struct IMapControlTransitFeatureClickEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_TransitProperties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IMapControlTransitFeatureClickEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapControlTransitFeatureClickEventArgs_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapControlTransitFeatureClickEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IMapControlTransitFeatureClickEventArgs_adaptor::TransitProperties)->_get_TransitProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} TransitProperties;
	};
	IMapControlTransitFeatureClickEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlTransitFeatureClickEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureClickEventArgs_adaptor<X> { typedef adapt IMapControlTransitFeatureClickEventArgs; };
struct IMapControlTransitFeatureClickEventArgs : IMapControlTransitFeatureClickEventArgs_raw, generate<IMapControlTransitFeatureClickEventArgs> {};

// MapControlTransitFeatureClickEventArgs
template<typename X> struct statics<MapControlTransitFeatureClickEventArgs, X> : X {
	typedef typename X::root_type MapControlTransitFeatureClickEventArgs;
};
struct MapControlTransitFeatureClickEventArgs : generate<MapControlTransitFeatureClickEventArgs> {};

// IMapControlBusinessLandmarkRightTappedEventArgs
struct IMapControlBusinessLandmarkRightTappedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_LocalLocations(Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* *value);
};
template<typename X> struct IMapControlBusinessLandmarkRightTappedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> get() { Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* value; hrcheck(enc(&IMapControlBusinessLandmarkRightTappedEventArgs_adaptor::LocalLocations)->_get_LocalLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator->() { return get(); }
		} LocalLocations;
	};
	IMapControlBusinessLandmarkRightTappedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlBusinessLandmarkRightTappedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkRightTappedEventArgs_adaptor<X> { typedef adapt IMapControlBusinessLandmarkRightTappedEventArgs; };
struct IMapControlBusinessLandmarkRightTappedEventArgs : IMapControlBusinessLandmarkRightTappedEventArgs_raw, generate<IMapControlBusinessLandmarkRightTappedEventArgs> {};

// MapControlBusinessLandmarkRightTappedEventArgs
template<typename X> struct statics<MapControlBusinessLandmarkRightTappedEventArgs, X> : X {
	typedef typename X::root_type MapControlBusinessLandmarkRightTappedEventArgs;
};
struct MapControlBusinessLandmarkRightTappedEventArgs : generate<MapControlBusinessLandmarkRightTappedEventArgs> {};

// IMapControlTransitFeatureRightTappedEventArgs
struct IMapControlTransitFeatureRightTappedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_TransitProperties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IMapControlTransitFeatureRightTappedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapControlTransitFeatureRightTappedEventArgs_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapControlTransitFeatureRightTappedEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IMapControlTransitFeatureRightTappedEventArgs_adaptor::TransitProperties)->_get_TransitProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} TransitProperties;
	};
	IMapControlTransitFeatureRightTappedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlTransitFeatureRightTappedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeatureRightTappedEventArgs_adaptor<X> { typedef adapt IMapControlTransitFeatureRightTappedEventArgs; };
struct IMapControlTransitFeatureRightTappedEventArgs : IMapControlTransitFeatureRightTappedEventArgs_raw, generate<IMapControlTransitFeatureRightTappedEventArgs> {};

// MapControlTransitFeatureRightTappedEventArgs
template<typename X> struct statics<MapControlTransitFeatureRightTappedEventArgs, X> : X {
	typedef typename X::root_type MapControlTransitFeatureRightTappedEventArgs;
};
struct MapControlTransitFeatureRightTappedEventArgs : generate<MapControlTransitFeatureRightTappedEventArgs> {};

// IMapControlDataHelper2
struct IMapControlDataHelper2_raw : IInspectable {
	virtual STDMETHODIMP _add_BusinessLandmarkPointerEntered(Foundation::TypedEventHandler<MapControl*, MapControlBusinessLandmarkPointerEnteredEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BusinessLandmarkPointerEntered(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TransitFeaturePointerEntered(Foundation::TypedEventHandler<MapControl*, MapControlTransitFeaturePointerEnteredEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TransitFeaturePointerEntered(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BusinessLandmarkPointerExited(Foundation::TypedEventHandler<MapControl*, MapControlBusinessLandmarkPointerExitedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BusinessLandmarkPointerExited(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TransitFeaturePointerExited(Foundation::TypedEventHandler<MapControl*, MapControlTransitFeaturePointerExitedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TransitFeaturePointerExited(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMapControlDataHelper2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlBusinessLandmarkPointerEnteredEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper2_adaptor::BusinessLandmarkPointerEntered)->_add_BusinessLandmarkPointerEntered(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper2_adaptor::BusinessLandmarkPointerEntered)->_remove_BusinessLandmarkPointerEntered(token)); }
		} BusinessLandmarkPointerEntered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlBusinessLandmarkPointerExitedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper2_adaptor::BusinessLandmarkPointerExited)->_add_BusinessLandmarkPointerExited(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper2_adaptor::BusinessLandmarkPointerExited)->_remove_BusinessLandmarkPointerExited(token)); }
		} BusinessLandmarkPointerExited;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlTransitFeaturePointerEnteredEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper2_adaptor::TransitFeaturePointerEntered)->_add_TransitFeaturePointerEntered(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper2_adaptor::TransitFeaturePointerEntered)->_remove_TransitFeaturePointerEntered(token)); }
		} TransitFeaturePointerEntered;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MapControl>, ptr<MapControlTransitFeaturePointerExitedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMapControlDataHelper2_adaptor::TransitFeaturePointerExited)->_add_TransitFeaturePointerExited(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMapControlDataHelper2_adaptor::TransitFeaturePointerExited)->_remove_TransitFeaturePointerExited(token)); }
		} TransitFeaturePointerExited;
	};
	IMapControlDataHelper2_adaptor() {}
};
template<typename X> struct adapt<IMapControlDataHelper2, X> : Windows::UI::Xaml::Controls::Maps::IMapControlDataHelper2_adaptor<X> { typedef adapt IMapControlDataHelper2; };
struct IMapControlDataHelper2 : IMapControlDataHelper2_raw, generate<IMapControlDataHelper2> {};

// IMapControlBusinessLandmarkPointerEnteredEventArgs
struct IMapControlBusinessLandmarkPointerEnteredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_LocalLocations(Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* *value);
};
template<typename X> struct IMapControlBusinessLandmarkPointerEnteredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> get() { Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* value; hrcheck(enc(&IMapControlBusinessLandmarkPointerEnteredEventArgs_adaptor::LocalLocations)->_get_LocalLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator->() { return get(); }
		} LocalLocations;
	};
	IMapControlBusinessLandmarkPointerEnteredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlBusinessLandmarkPointerEnteredEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerEnteredEventArgs_adaptor<X> { typedef adapt IMapControlBusinessLandmarkPointerEnteredEventArgs; };
struct IMapControlBusinessLandmarkPointerEnteredEventArgs : IMapControlBusinessLandmarkPointerEnteredEventArgs_raw, generate<IMapControlBusinessLandmarkPointerEnteredEventArgs> {};

// MapControlBusinessLandmarkPointerEnteredEventArgs
template<typename X> struct statics<MapControlBusinessLandmarkPointerEnteredEventArgs, X> : X {
	typedef typename X::root_type MapControlBusinessLandmarkPointerEnteredEventArgs;
};
struct MapControlBusinessLandmarkPointerEnteredEventArgs : generate<MapControlBusinessLandmarkPointerEnteredEventArgs> {};

// IMapControlTransitFeaturePointerEnteredEventArgs
struct IMapControlTransitFeaturePointerEnteredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_TransitProperties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IMapControlTransitFeaturePointerEnteredEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapControlTransitFeaturePointerEnteredEventArgs_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapControlTransitFeaturePointerEnteredEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IMapControlTransitFeaturePointerEnteredEventArgs_adaptor::TransitProperties)->_get_TransitProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} TransitProperties;
	};
	IMapControlTransitFeaturePointerEnteredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlTransitFeaturePointerEnteredEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerEnteredEventArgs_adaptor<X> { typedef adapt IMapControlTransitFeaturePointerEnteredEventArgs; };
struct IMapControlTransitFeaturePointerEnteredEventArgs : IMapControlTransitFeaturePointerEnteredEventArgs_raw, generate<IMapControlTransitFeaturePointerEnteredEventArgs> {};

// MapControlTransitFeaturePointerEnteredEventArgs
template<typename X> struct statics<MapControlTransitFeaturePointerEnteredEventArgs, X> : X {
	typedef typename X::root_type MapControlTransitFeaturePointerEnteredEventArgs;
};
struct MapControlTransitFeaturePointerEnteredEventArgs : generate<MapControlTransitFeaturePointerEnteredEventArgs> {};

// IMapControlBusinessLandmarkPointerExitedEventArgs
struct IMapControlBusinessLandmarkPointerExitedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_LocalLocations(Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* *value);
};
template<typename X> struct IMapControlBusinessLandmarkPointerExitedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> get() { Foundation::Collections::IVectorView<Services::Maps::LocalSearch::LocalLocation*>* value; hrcheck(enc(&IMapControlBusinessLandmarkPointerExitedEventArgs_adaptor::LocalLocations)->_get_LocalLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Services::Maps::LocalSearch::LocalLocation>>> operator->() { return get(); }
		} LocalLocations;
	};
	IMapControlBusinessLandmarkPointerExitedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlBusinessLandmarkPointerExitedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlBusinessLandmarkPointerExitedEventArgs_adaptor<X> { typedef adapt IMapControlBusinessLandmarkPointerExitedEventArgs; };
struct IMapControlBusinessLandmarkPointerExitedEventArgs : IMapControlBusinessLandmarkPointerExitedEventArgs_raw, generate<IMapControlBusinessLandmarkPointerExitedEventArgs> {};

// MapControlBusinessLandmarkPointerExitedEventArgs
template<typename X> struct statics<MapControlBusinessLandmarkPointerExitedEventArgs, X> : X {
	typedef typename X::root_type MapControlBusinessLandmarkPointerExitedEventArgs;
};
struct MapControlBusinessLandmarkPointerExitedEventArgs : generate<MapControlBusinessLandmarkPointerExitedEventArgs> {};

// IMapControlTransitFeaturePointerExitedEventArgs
struct IMapControlTransitFeaturePointerExitedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Location(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_TransitProperties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IMapControlTransitFeaturePointerExitedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMapControlTransitFeaturePointerExitedEventArgs_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&IMapControlTransitFeaturePointerExitedEventArgs_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Location;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IMapControlTransitFeaturePointerExitedEventArgs_adaptor::TransitProperties)->_get_TransitProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} TransitProperties;
	};
	IMapControlTransitFeaturePointerExitedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMapControlTransitFeaturePointerExitedEventArgs, X> : Windows::UI::Xaml::Controls::Maps::IMapControlTransitFeaturePointerExitedEventArgs_adaptor<X> { typedef adapt IMapControlTransitFeaturePointerExitedEventArgs; };
struct IMapControlTransitFeaturePointerExitedEventArgs : IMapControlTransitFeaturePointerExitedEventArgs_raw, generate<IMapControlTransitFeaturePointerExitedEventArgs> {};

// MapControlTransitFeaturePointerExitedEventArgs
template<typename X> struct statics<MapControlTransitFeaturePointerExitedEventArgs, X> : X {
	typedef typename X::root_type MapControlTransitFeaturePointerExitedEventArgs;
};
struct MapControlTransitFeaturePointerExitedEventArgs : generate<MapControlTransitFeaturePointerExitedEventArgs> {};

// IMapControlDataHelperStatics
struct IMapControlDataHelperStatics : IInspectable {
	virtual STDMETHODIMP _CreateMapControl(bool rasterRenderMode, MapControl* *returnValue);
};

// IMapControlDataHelperFactory
struct IMapControlDataHelperFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(MapControl* map, MapControlDataHelper* *instance);
};

// MapControlDataHelper
template<typename> struct MapControlDataHelper_statics {
	static ptr<MapControl> CreateMapControl(bool rasterRenderMode) { MapControl* returnValue; hrcheck(get_activation_factory<MapControlDataHelper, IMapControlDataHelperStatics>()->_CreateMapControl(rasterRenderMode, &returnValue)); return from_abi(returnValue); }
	static MapControlDataHelper *activate(pptr<MapControl> map) { MapControlDataHelper *instance; hrcheck(get_activation_factory<MapControlDataHelper, IMapControlDataHelperFactory>()->_CreateInstance(map, &instance)); return instance; }
};

template<typename X> struct statics<MapControlDataHelper, X> : X, Windows::UI::Xaml::Controls::Maps::MapControlDataHelper_statics<void> {
	using Windows::UI::Xaml::Controls::Maps::MapControlDataHelper_statics<void>::activate;
	typedef typename X::root_type MapControlDataHelper;
};
struct MapControlDataHelper : generate<MapControlDataHelper> {};
}}}}}
} // namespace iso_winrt
