#pragma once
// generated by isopod tools
// namespaces:
// Windows.Storage.Provider

#include "Windows.Storage.Provider.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
template<typename T> struct IVector;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}
struct StorageFile;
struct IStorageFolder;
struct IStorageFile;
struct IStorageItem;
}}

// defs

template<> struct def<Windows::Storage::Provider::CachedFileTarget> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::UIStatus> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::ICachedFileUpdaterUI> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::ICachedFileUpdaterUI2> : interface_type<Windows::Storage::Provider::ICachedFileUpdaterUI> {};
template<> struct def<Windows::Storage::Provider::CachedFileUpdaterUI> : class_type<Platform::Object, Windows::Storage::Provider::ICachedFileUpdaterUI, Windows::Storage::Provider::ICachedFileUpdaterUI2> {};
template<> struct def<Windows::Storage::Provider::IFileUpdateRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::FileUpdateRequestedEventArgs> : class_type<Platform::Object, Windows::Storage::Provider::IFileUpdateRequestedEventArgs> {};
template<> struct def<Windows::Storage::Provider::FileUpdateStatus> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::IFileUpdateRequest> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::IFileUpdateRequest2> : interface_type<Windows::Storage::Provider::IFileUpdateRequest> {};
template<> struct def<Windows::Storage::Provider::FileUpdateRequest> : class_type<Platform::Object, Windows::Storage::Provider::IFileUpdateRequest, Windows::Storage::Provider::IFileUpdateRequest2> {};
template<> struct def<Windows::Storage::Provider::IFileUpdateRequestDeferral> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::FileUpdateRequestDeferral> : class_type<Platform::Object, Windows::Storage::Provider::IFileUpdateRequestDeferral> {};
template<> struct def<Windows::Storage::Provider::CachedFileOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Storage::Provider::ReadActivationMode> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::WriteActivationMode> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::ICachedFileUpdaterStatics> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::CachedFileUpdater> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Storage::Provider::CloudFilesContract> : value_type<> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderPropertyCapabilities> : overridable_type<> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderItemProperty> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderItemProperty> : class_type<Platform::Object, Windows::Storage::Provider::IStorageProviderItemProperty> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderItemPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderItemProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderItemPropertySource> : overridable_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderHydrationPolicy> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::StorageProviderPopulationPolicy> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::StorageProviderHydrationPolicyModifier> : enum_type<unsigned> {};
template<> struct def<Windows::Storage::Provider::StorageProviderInSyncPolicy> : enum_type<unsigned> {};
template<> struct def<Windows::Storage::Provider::StorageProviderHardlinkPolicy> : enum_type<unsigned> {};
template<> struct def<Windows::Storage::Provider::StorageProviderProtectionMode> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderItemPropertyDefinition> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderItemPropertyDefinition> : class_type<Platform::Object, Windows::Storage::Provider::IStorageProviderItemPropertyDefinition> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderSyncRootInfo> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderSyncRootInfo> : class_type<Platform::Object, Windows::Storage::Provider::IStorageProviderSyncRootInfo> {};
template<> struct def<Windows::Storage::Provider::StorageProviderUriSourceStatus> : enum_type<int> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderGetContentInfoForPathResult> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderGetContentInfoForPathResult> : class_type<Platform::Object, Windows::Storage::Provider::IStorageProviderGetContentInfoForPathResult> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderGetPathForContentUriResult> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderGetPathForContentUriResult> : class_type<Platform::Object, Windows::Storage::Provider::IStorageProviderGetPathForContentUriResult> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderUriSource> : overridable_type<> {};
template<> struct def<Windows::Storage::Provider::IStorageProviderSyncRootManagerStatics> : interface_type<> {};
template<> struct def<Windows::Storage::Provider::StorageProviderSyncRootManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Storage::Provider::ICachedFileUpdaterUI> { define_guid(0x9E6F41E6, 0xBAF2, 0x4A97, 0xB6, 0x0, 0x93, 0x33, 0xF5, 0xDF, 0x80, 0xFD);};
template<> struct uuid<Windows::Storage::Provider::ICachedFileUpdaterUI2> { define_guid(0x8856A21C, 0x8699, 0x4340, 0x9F, 0x49, 0xF7, 0xCA, 0xD7, 0xFE, 0x89, 0x91);};
template<> struct uuid<Windows::Storage::Provider::IFileUpdateRequestedEventArgs> { define_guid(0x7B0A9342, 0x3905, 0x438D, 0xAA, 0xEF, 0x78, 0xAE, 0x26, 0x5F, 0x8D, 0xD2);};
template<> struct uuid<Windows::Storage::Provider::IFileUpdateRequest> { define_guid(0x40C82536, 0xC1FE, 0x4D93, 0xA7, 0x92, 0x1E, 0x73, 0x6B, 0xC7, 0x8, 0x37);};
template<> struct uuid<Windows::Storage::Provider::IFileUpdateRequest2> { define_guid(0x82484648, 0xBDBE, 0x447B, 0xA2, 0xEE, 0x7A, 0xFE, 0x6A, 0x3, 0x2A, 0x94);};
template<> struct uuid<Windows::Storage::Provider::IFileUpdateRequestDeferral> { define_guid(0xFFCEDB2B, 0x8ADE, 0x44A5, 0xBB, 0x0, 0x16, 0x4C, 0x4E, 0x72, 0xF1, 0x3A);};
template<> struct uuid<Windows::Storage::Provider::ICachedFileUpdaterStatics> { define_guid(0x9FC90920, 0x7BCF, 0x4888, 0xA8, 0x1E, 0x10, 0x2D, 0x70, 0x34, 0xD7, 0xCE);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderPropertyCapabilities> { define_guid(0x658D2F0E, 0x63B7, 0x4567, 0xAC, 0xF9, 0x51, 0xAB, 0xE3, 0x1, 0xDD, 0xA5);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderItemProperty> { define_guid(0x476CB558, 0x730B, 0x4188, 0xB7, 0xB5, 0x63, 0xB7, 0x16, 0xED, 0x47, 0x6D);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderItemPropertiesStatics> { define_guid(0x2D2C1C97, 0x2704, 0x4729, 0x8F, 0xA9, 0x7E, 0x6B, 0x8E, 0x15, 0x8C, 0x2F);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderItemPropertySource> { define_guid(0x8F6F9C3E, 0xF632, 0x4A9B, 0x8D, 0x99, 0xD2, 0xD7, 0xA1, 0x1D, 0xF5, 0x6A);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderItemPropertyDefinition> { define_guid(0xC5B383BB, 0xFF1F, 0x4298, 0x83, 0x1E, 0xFF, 0x1C, 0x8, 0x8, 0x96, 0x90);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderSyncRootInfo> { define_guid(0x7C1305C4, 0x99F9, 0x41AC, 0x89, 0x4, 0xAB, 0x5, 0x5D, 0x65, 0x49, 0x26);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderGetContentInfoForPathResult> { define_guid(0x2564711D, 0xAA89, 0x4D12, 0x82, 0xE3, 0xF7, 0x2A, 0x92, 0xE3, 0x39, 0x66);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderGetPathForContentUriResult> { define_guid(0x63711A9D, 0x4118, 0x45A6, 0xAC, 0xB6, 0x22, 0xC4, 0x9D, 0x1, 0x9F, 0x40);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderUriSource> { define_guid(0xB29806D1, 0x8BE0, 0x4962, 0x8B, 0xB6, 0xD, 0x4C, 0x2E, 0x14, 0xD4, 0x7A);};
template<> struct uuid<Windows::Storage::Provider::IStorageProviderSyncRootManagerStatics> { define_guid(0x3E99FBBF, 0x8FE3, 0x4B40, 0xAB, 0xC7, 0xF6, 0xFC, 0x3D, 0x74, 0xC9, 0x8E);};

// types

namespace Windows { namespace Storage { namespace Provider {

// ICachedFileUpdaterUI
struct ICachedFileUpdaterUI_raw : IInspectable {
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_UpdateTarget(CachedFileTarget *value);
	virtual STDMETHODIMP _add_FileUpdateRequested(Foundation::TypedEventHandler<CachedFileUpdaterUI*, FileUpdateRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FileUpdateRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_UIRequested(Foundation::TypedEventHandler<CachedFileUpdaterUI*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_UIRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_UIStatus(Provider::UIStatus *value);
};
template<typename X> struct ICachedFileUpdaterUI_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICachedFileUpdaterUI_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICachedFileUpdaterUI_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			Provider::UIStatus get() { Provider::UIStatus value; hrcheck(enc(&ICachedFileUpdaterUI_adaptor::UIStatus)->_get_UIStatus(&value)); return value; }
			Provider::UIStatus operator()() { return get(); }
			operator Provider::UIStatus () { return get(); }
		} UIStatus;
		struct : property {
			CachedFileTarget get() { CachedFileTarget value; hrcheck(enc(&ICachedFileUpdaterUI_adaptor::UpdateTarget)->_get_UpdateTarget(&value)); return value; }
			CachedFileTarget operator()() { return get(); }
			operator CachedFileTarget () { return get(); }
		} UpdateTarget;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CachedFileUpdaterUI>, ptr<FileUpdateRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICachedFileUpdaterUI_adaptor::FileUpdateRequested)->_add_FileUpdateRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICachedFileUpdaterUI_adaptor::FileUpdateRequested)->_remove_FileUpdateRequested(token)); }
		} FileUpdateRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CachedFileUpdaterUI>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICachedFileUpdaterUI_adaptor::UIRequested)->_add_UIRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICachedFileUpdaterUI_adaptor::UIRequested)->_remove_UIRequested(token)); }
		} UIRequested;
	};
	ICachedFileUpdaterUI_adaptor() {}
};
template<typename X> struct adapt<ICachedFileUpdaterUI, X> : Windows::Storage::Provider::ICachedFileUpdaterUI_adaptor<X> { typedef adapt ICachedFileUpdaterUI; };
struct ICachedFileUpdaterUI : ICachedFileUpdaterUI_raw, generate<ICachedFileUpdaterUI> {};

// ICachedFileUpdaterUI2
struct ICachedFileUpdaterUI2_raw : IInspectable {
	virtual STDMETHODIMP _get_UpdateRequest(FileUpdateRequest* *value);
	virtual STDMETHODIMP _GetDeferral(FileUpdateRequestDeferral* *value);
};
template<typename X> struct ICachedFileUpdaterUI2_adaptor : X {
	union {
		struct : property {
			ptr<FileUpdateRequest> get() { FileUpdateRequest* value; hrcheck(enc(&ICachedFileUpdaterUI2_adaptor::UpdateRequest)->_get_UpdateRequest(&value)); return from_abi(value); }
			ptr<FileUpdateRequest> operator()() { return get(); }
			operator ptr<FileUpdateRequest> () { return get(); }
			ptr<FileUpdateRequest> operator->() { return get(); }
		} UpdateRequest;
	};
	ptr<FileUpdateRequestDeferral> GetDeferral() { FileUpdateRequestDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICachedFileUpdaterUI2_adaptor() {}
};
template<typename X> struct adapt<ICachedFileUpdaterUI2, X> : Windows::Storage::Provider::ICachedFileUpdaterUI2_adaptor<X> { typedef adapt ICachedFileUpdaterUI2; };
struct ICachedFileUpdaterUI2 : ICachedFileUpdaterUI2_raw, generate<ICachedFileUpdaterUI2> {};

// CachedFileUpdaterUI
template<typename X> struct statics<CachedFileUpdaterUI, X> : X {
	typedef typename X::root_type CachedFileUpdaterUI;
};
struct CachedFileUpdaterUI : generate<CachedFileUpdaterUI> {};

// IFileUpdateRequestedEventArgs
struct IFileUpdateRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(FileUpdateRequest* *value);
};
template<typename X> struct IFileUpdateRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<FileUpdateRequest> get() { FileUpdateRequest* value; hrcheck(enc(&IFileUpdateRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<FileUpdateRequest> operator()() { return get(); }
			operator ptr<FileUpdateRequest> () { return get(); }
			ptr<FileUpdateRequest> operator->() { return get(); }
		} Request;
	};
	IFileUpdateRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFileUpdateRequestedEventArgs, X> : Windows::Storage::Provider::IFileUpdateRequestedEventArgs_adaptor<X> { typedef adapt IFileUpdateRequestedEventArgs; };
struct IFileUpdateRequestedEventArgs : IFileUpdateRequestedEventArgs_raw, generate<IFileUpdateRequestedEventArgs> {};

// FileUpdateRequestedEventArgs
template<typename X> struct statics<FileUpdateRequestedEventArgs, X> : X {
	typedef typename X::root_type FileUpdateRequestedEventArgs;
};
struct FileUpdateRequestedEventArgs : generate<FileUpdateRequestedEventArgs> {};

// IFileUpdateRequest
struct IFileUpdateRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_ContentId(HSTRING *value);
	virtual STDMETHODIMP _get_File(StorageFile* *value);
	virtual STDMETHODIMP _get_Status(FileUpdateStatus *value);
	virtual STDMETHODIMP _put_Status(FileUpdateStatus value);
	virtual STDMETHODIMP _GetDeferral(FileUpdateRequestDeferral* *value);
	virtual STDMETHODIMP _UpdateLocalFile(IStorageFile* value);
};
template<typename X> struct IFileUpdateRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileUpdateRequest_adaptor::ContentId)->_get_ContentId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ContentId;
		struct : property {
			ptr<StorageFile> get() { StorageFile* value; hrcheck(enc(&IFileUpdateRequest_adaptor::File)->_get_File(&value)); return from_abi(value); }
			ptr<StorageFile> operator()() { return get(); }
			operator ptr<StorageFile> () { return get(); }
			ptr<StorageFile> operator->() { return get(); }
		} File;
		struct : property {
			FileUpdateStatus get() { FileUpdateStatus value; hrcheck(enc(&IFileUpdateRequest_adaptor::Status)->_get_Status(&value)); return value; }
			FileUpdateStatus operator()() { return get(); }
			operator FileUpdateStatus () { return get(); }
			void put(FileUpdateStatus value) { hrcheck(enc(&IFileUpdateRequest_adaptor::Status)->_put_Status(value)); }
			void operator=(FileUpdateStatus value) { put(value); }
			void operator()(FileUpdateStatus value) { put(value); }
		} Status;
	};
	ptr<FileUpdateRequestDeferral> GetDeferral() { FileUpdateRequestDeferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	void UpdateLocalFile(pptr<IStorageFile> value) { hrcheck(X::get()->_UpdateLocalFile(value)); }
	IFileUpdateRequest_adaptor() {}
};
template<typename X> struct adapt<IFileUpdateRequest, X> : Windows::Storage::Provider::IFileUpdateRequest_adaptor<X> { typedef adapt IFileUpdateRequest; };
struct IFileUpdateRequest : IFileUpdateRequest_raw, generate<IFileUpdateRequest> {};

// IFileUpdateRequest2
struct IFileUpdateRequest2_raw : IInspectable {
	virtual STDMETHODIMP _get_UserInputNeededMessage(HSTRING *value);
	virtual STDMETHODIMP _put_UserInputNeededMessage(HSTRING value);
};
template<typename X> struct IFileUpdateRequest2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileUpdateRequest2_adaptor::UserInputNeededMessage)->_get_UserInputNeededMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IFileUpdateRequest2_adaptor::UserInputNeededMessage)->_put_UserInputNeededMessage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} UserInputNeededMessage;
	};
	IFileUpdateRequest2_adaptor() {}
};
template<typename X> struct adapt<IFileUpdateRequest2, X> : Windows::Storage::Provider::IFileUpdateRequest2_adaptor<X> { typedef adapt IFileUpdateRequest2; };
struct IFileUpdateRequest2 : IFileUpdateRequest2_raw, generate<IFileUpdateRequest2> {};

// FileUpdateRequest
template<typename X> struct statics<FileUpdateRequest, X> : X {
	typedef typename X::root_type FileUpdateRequest;
};
struct FileUpdateRequest : generate<FileUpdateRequest> {};

// IFileUpdateRequestDeferral
struct IFileUpdateRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IFileUpdateRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IFileUpdateRequestDeferral, X> : Windows::Storage::Provider::IFileUpdateRequestDeferral_adaptor<X> { typedef adapt IFileUpdateRequestDeferral; };
struct IFileUpdateRequestDeferral : IFileUpdateRequestDeferral_raw, generate<IFileUpdateRequestDeferral> {};

// FileUpdateRequestDeferral
template<typename X> struct statics<FileUpdateRequestDeferral, X> : X {
	typedef typename X::root_type FileUpdateRequestDeferral;
};
struct FileUpdateRequestDeferral : generate<FileUpdateRequestDeferral> {};

// ICachedFileUpdaterStatics
struct ICachedFileUpdaterStatics : IInspectable {
	virtual STDMETHODIMP _SetUpdateInformation(IStorageFile* file, HSTRING contentId, ReadActivationMode readMode, WriteActivationMode writeMode, CachedFileOptions options);
};

// CachedFileUpdater
template<typename> struct CachedFileUpdater_statics {
	static void SetUpdateInformation(pptr<IStorageFile> file, hstring_ref contentId, ReadActivationMode readMode, WriteActivationMode writeMode, CachedFileOptions options) { hrcheck(get_activation_factory<CachedFileUpdater, ICachedFileUpdaterStatics>()->_SetUpdateInformation(file, contentId, readMode, writeMode, options)); }
};

template<typename X> struct statics<CachedFileUpdater, X> : X, Windows::Storage::Provider::CachedFileUpdater_statics<void> {
	typedef typename X::root_type CachedFileUpdater;
};
struct CachedFileUpdater : generate<CachedFileUpdater> {};

// IStorageProviderPropertyCapabilities
struct IStorageProviderPropertyCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _IsPropertySupported(HSTRING propertyCanonicalName, bool *isSupported) = 0;
};
template<typename X> struct IStorageProviderPropertyCapabilities_adaptor : X {
	bool IsPropertySupported(hstring_ref propertyCanonicalName) { bool isSupported; hrcheck(X::get()->_IsPropertySupported(propertyCanonicalName, &isSupported)); return isSupported; }
};
template<typename X> struct adapt<IStorageProviderPropertyCapabilities, X> : Windows::Storage::Provider::IStorageProviderPropertyCapabilities_adaptor<X> { typedef adapt IStorageProviderPropertyCapabilities; };
template<typename X> struct IStorageProviderPropertyCapabilities_unadaptor : X {
	STDMETHODIMP _IsPropertySupported(HSTRING propertyCanonicalName, bool *isSupported) { return hrtry([&, this] { *isSupported = X::get()->IsPropertySupported(propertyCanonicalName); }); }
};
template<typename X> struct unadapt<IStorageProviderPropertyCapabilities, X> : Windows::Storage::Provider::IStorageProviderPropertyCapabilities_unadaptor<X> {};
struct IStorageProviderPropertyCapabilities : IStorageProviderPropertyCapabilities_raw, generate<IStorageProviderPropertyCapabilities> {};

// IStorageProviderItemProperty
struct IStorageProviderItemProperty_raw : IInspectable {
	virtual STDMETHODIMP _put_Id(int value);
	virtual STDMETHODIMP _get_Id(int *value);
	virtual STDMETHODIMP _put_Value(HSTRING value);
	virtual STDMETHODIMP _get_Value(HSTRING *value);
	virtual STDMETHODIMP _put_IconResource(HSTRING value);
	virtual STDMETHODIMP _get_IconResource(HSTRING *value);
};
template<typename X> struct IStorageProviderItemProperty_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderItemProperty_adaptor::IconResource)->_get_IconResource(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderItemProperty_adaptor::IconResource)->_put_IconResource(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} IconResource;
		struct : property {
			int get() { int value; hrcheck(enc(&IStorageProviderItemProperty_adaptor::Id)->_get_Id(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IStorageProviderItemProperty_adaptor::Id)->_put_Id(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderItemProperty_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderItemProperty_adaptor::Value)->_put_Value(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Value;
	};
	IStorageProviderItemProperty_adaptor() {}
};
template<typename X> struct adapt<IStorageProviderItemProperty, X> : Windows::Storage::Provider::IStorageProviderItemProperty_adaptor<X> { typedef adapt IStorageProviderItemProperty; };
struct IStorageProviderItemProperty : IStorageProviderItemProperty_raw, generate<IStorageProviderItemProperty> {};

// StorageProviderItemProperty
template<typename X> struct statics<StorageProviderItemProperty, X> : X {
	typedef typename X::root_type StorageProviderItemProperty;
};
struct StorageProviderItemProperty : generate<StorageProviderItemProperty> {};

// IStorageProviderItemPropertiesStatics
struct IStorageProviderItemPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _SetAsync(IStorageItem* item, Foundation::Collections::IIterable<StorageProviderItemProperty*>* itemProperties, Foundation::IAsyncAction* *operation);
};

// StorageProviderItemProperties
template<typename> struct StorageProviderItemProperties_statics {
	static ptr<Foundation::IAsyncAction> SetAsync(pptr<IStorageItem> item, pptr<Foundation::Collections::IIterable<ptr<StorageProviderItemProperty>>> itemProperties) { Foundation::IAsyncAction* operation; hrcheck(get_activation_factory<StorageProviderItemProperties, IStorageProviderItemPropertiesStatics>()->_SetAsync(item, to_abi(itemProperties), &operation)); return from_abi(operation); }
};

template<typename X> struct statics<StorageProviderItemProperties, X> : X, Windows::Storage::Provider::StorageProviderItemProperties_statics<void> {
	typedef typename X::root_type StorageProviderItemProperties;
};
struct StorageProviderItemProperties : generate<StorageProviderItemProperties> {};

// IStorageProviderItemPropertySource
struct IStorageProviderItemPropertySource_raw : IInspectable {
	virtual STDMETHODIMP _GetItemProperties(HSTRING itemPath, Foundation::Collections::IIterable<StorageProviderItemProperty*>* *itemProperties) = 0;
};
template<typename X> struct IStorageProviderItemPropertySource_adaptor : X {
	ptr<Foundation::Collections::IIterable<ptr<StorageProviderItemProperty>>> GetItemProperties(hstring_ref itemPath) { Foundation::Collections::IIterable<StorageProviderItemProperty*>* itemProperties; hrcheck(X::get()->_GetItemProperties(itemPath, &itemProperties)); return from_abi(itemProperties); }
};
template<typename X> struct adapt<IStorageProviderItemPropertySource, X> : Windows::Storage::Provider::IStorageProviderItemPropertySource_adaptor<X> { typedef adapt IStorageProviderItemPropertySource; };
template<typename X> struct IStorageProviderItemPropertySource_unadaptor : X {
	STDMETHODIMP _GetItemProperties(HSTRING itemPath, Foundation::Collections::IIterable<StorageProviderItemProperty*>* *itemProperties) { return hrtry([&, this] { *itemProperties = to_abi(X::get()->GetItemProperties(itemPath)); }); }
};
template<typename X> struct unadapt<IStorageProviderItemPropertySource, X> : Windows::Storage::Provider::IStorageProviderItemPropertySource_unadaptor<X> {};
struct IStorageProviderItemPropertySource : IStorageProviderItemPropertySource_raw, generate<IStorageProviderItemPropertySource> {};

// IStorageProviderItemPropertyDefinition
struct IStorageProviderItemPropertyDefinition_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(int *value);
	virtual STDMETHODIMP _put_Id(int value);
	virtual STDMETHODIMP _get_DisplayNameResource(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayNameResource(HSTRING value);
};
template<typename X> struct IStorageProviderItemPropertyDefinition_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderItemPropertyDefinition_adaptor::DisplayNameResource)->_get_DisplayNameResource(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderItemPropertyDefinition_adaptor::DisplayNameResource)->_put_DisplayNameResource(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayNameResource;
		struct : property {
			int get() { int value; hrcheck(enc(&IStorageProviderItemPropertyDefinition_adaptor::Id)->_get_Id(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IStorageProviderItemPropertyDefinition_adaptor::Id)->_put_Id(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Id;
	};
	IStorageProviderItemPropertyDefinition_adaptor() {}
};
template<typename X> struct adapt<IStorageProviderItemPropertyDefinition, X> : Windows::Storage::Provider::IStorageProviderItemPropertyDefinition_adaptor<X> { typedef adapt IStorageProviderItemPropertyDefinition; };
struct IStorageProviderItemPropertyDefinition : IStorageProviderItemPropertyDefinition_raw, generate<IStorageProviderItemPropertyDefinition> {};

// StorageProviderItemPropertyDefinition
template<typename X> struct statics<StorageProviderItemPropertyDefinition, X> : X {
	typedef typename X::root_type StorageProviderItemPropertyDefinition;
};
struct StorageProviderItemPropertyDefinition : generate<StorageProviderItemPropertyDefinition> {};

// IStorageProviderSyncRootInfo
struct IStorageProviderSyncRootInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_Context(Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_Context(Streams::IBuffer* value);
	virtual STDMETHODIMP _get_Path(IStorageFolder* *folder);
	virtual STDMETHODIMP _put_Path(IStorageFolder* folder);
	virtual STDMETHODIMP _get_DisplayNameResource(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayNameResource(HSTRING value);
	virtual STDMETHODIMP _get_IconResource(HSTRING *value);
	virtual STDMETHODIMP _put_IconResource(HSTRING value);
	virtual STDMETHODIMP _get_HydrationPolicy(StorageProviderHydrationPolicy *value);
	virtual STDMETHODIMP _put_HydrationPolicy(StorageProviderHydrationPolicy value);
	virtual STDMETHODIMP _get_HydrationPolicyModifier(StorageProviderHydrationPolicyModifier *value);
	virtual STDMETHODIMP _put_HydrationPolicyModifier(StorageProviderHydrationPolicyModifier value);
	virtual STDMETHODIMP _get_PopulationPolicy(StorageProviderPopulationPolicy *value);
	virtual STDMETHODIMP _put_PopulationPolicy(StorageProviderPopulationPolicy value);
	virtual STDMETHODIMP _get_InSyncPolicy(StorageProviderInSyncPolicy *value);
	virtual STDMETHODIMP _put_InSyncPolicy(StorageProviderInSyncPolicy value);
	virtual STDMETHODIMP _get_HardlinkPolicy(StorageProviderHardlinkPolicy *value);
	virtual STDMETHODIMP _put_HardlinkPolicy(StorageProviderHardlinkPolicy value);
	virtual STDMETHODIMP _get_ShowSiblingsAsGroup(bool *value);
	virtual STDMETHODIMP _put_ShowSiblingsAsGroup(bool value);
	virtual STDMETHODIMP _get_Version(HSTRING *value);
	virtual STDMETHODIMP _put_Version(HSTRING value);
	virtual STDMETHODIMP _get_ProtectionMode(StorageProviderProtectionMode *value);
	virtual STDMETHODIMP _put_ProtectionMode(StorageProviderProtectionMode value);
	virtual STDMETHODIMP _get_AllowPinning(bool *value);
	virtual STDMETHODIMP _put_AllowPinning(bool value);
	virtual STDMETHODIMP _get_StorageProviderItemPropertyDefinitions(Foundation::Collections::IVector<StorageProviderItemPropertyDefinition*>* *value);
	virtual STDMETHODIMP _get_RecycleBinUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_RecycleBinUri(Foundation::Uri* value);
};
template<typename X> struct IStorageProviderSyncRootInfo_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::AllowPinning)->_get_AllowPinning(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::AllowPinning)->_put_AllowPinning(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowPinning;
		struct : property {
			ptr<Streams::IBuffer> get() { Streams::IBuffer* value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Context)->_get_Context(&value)); return from_abi(value); }
			ptr<Streams::IBuffer> operator()() { return get(); }
			operator ptr<Streams::IBuffer> () { return get(); }
			ptr<Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Streams::IBuffer> value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Context)->_put_Context(value)); }
			void operator=(pptr<Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Streams::IBuffer> value) { put(value); }
		} Context;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::DisplayNameResource)->_get_DisplayNameResource(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::DisplayNameResource)->_put_DisplayNameResource(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayNameResource;
		struct : property {
			StorageProviderHardlinkPolicy get() { StorageProviderHardlinkPolicy value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::HardlinkPolicy)->_get_HardlinkPolicy(&value)); return value; }
			StorageProviderHardlinkPolicy operator()() { return get(); }
			operator StorageProviderHardlinkPolicy () { return get(); }
			void put(StorageProviderHardlinkPolicy value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::HardlinkPolicy)->_put_HardlinkPolicy(value)); }
			void operator=(StorageProviderHardlinkPolicy value) { put(value); }
			void operator()(StorageProviderHardlinkPolicy value) { put(value); }
		} HardlinkPolicy;
		struct : property {
			StorageProviderHydrationPolicy get() { StorageProviderHydrationPolicy value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::HydrationPolicy)->_get_HydrationPolicy(&value)); return value; }
			StorageProviderHydrationPolicy operator()() { return get(); }
			operator StorageProviderHydrationPolicy () { return get(); }
			void put(StorageProviderHydrationPolicy value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::HydrationPolicy)->_put_HydrationPolicy(value)); }
			void operator=(StorageProviderHydrationPolicy value) { put(value); }
			void operator()(StorageProviderHydrationPolicy value) { put(value); }
		} HydrationPolicy;
		struct : property {
			StorageProviderHydrationPolicyModifier get() { StorageProviderHydrationPolicyModifier value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::HydrationPolicyModifier)->_get_HydrationPolicyModifier(&value)); return value; }
			StorageProviderHydrationPolicyModifier operator()() { return get(); }
			operator StorageProviderHydrationPolicyModifier () { return get(); }
			void put(StorageProviderHydrationPolicyModifier value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::HydrationPolicyModifier)->_put_HydrationPolicyModifier(value)); }
			void operator=(StorageProviderHydrationPolicyModifier value) { put(value); }
			void operator()(StorageProviderHydrationPolicyModifier value) { put(value); }
		} HydrationPolicyModifier;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::IconResource)->_get_IconResource(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::IconResource)->_put_IconResource(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} IconResource;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			StorageProviderInSyncPolicy get() { StorageProviderInSyncPolicy value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::InSyncPolicy)->_get_InSyncPolicy(&value)); return value; }
			StorageProviderInSyncPolicy operator()() { return get(); }
			operator StorageProviderInSyncPolicy () { return get(); }
			void put(StorageProviderInSyncPolicy value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::InSyncPolicy)->_put_InSyncPolicy(value)); }
			void operator=(StorageProviderInSyncPolicy value) { put(value); }
			void operator()(StorageProviderInSyncPolicy value) { put(value); }
		} InSyncPolicy;
		struct : property {
			ptr<IStorageFolder> get() { IStorageFolder* folder; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Path)->_get_Path(&folder)); return from_abi(folder); }
			ptr<IStorageFolder> operator()() { return get(); }
			operator ptr<IStorageFolder> () { return get(); }
			ptr<IStorageFolder> operator->() { return get(); }
			void put(pptr<IStorageFolder> folder) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Path)->_put_Path(folder)); }
			void operator=(pptr<IStorageFolder> folder) { put(folder); }
			void operator()(pptr<IStorageFolder> folder) { put(folder); }
		} Path;
		struct : property {
			StorageProviderPopulationPolicy get() { StorageProviderPopulationPolicy value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::PopulationPolicy)->_get_PopulationPolicy(&value)); return value; }
			StorageProviderPopulationPolicy operator()() { return get(); }
			operator StorageProviderPopulationPolicy () { return get(); }
			void put(StorageProviderPopulationPolicy value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::PopulationPolicy)->_put_PopulationPolicy(value)); }
			void operator=(StorageProviderPopulationPolicy value) { put(value); }
			void operator()(StorageProviderPopulationPolicy value) { put(value); }
		} PopulationPolicy;
		struct : property {
			StorageProviderProtectionMode get() { StorageProviderProtectionMode value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::ProtectionMode)->_get_ProtectionMode(&value)); return value; }
			StorageProviderProtectionMode operator()() { return get(); }
			operator StorageProviderProtectionMode () { return get(); }
			void put(StorageProviderProtectionMode value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::ProtectionMode)->_put_ProtectionMode(value)); }
			void operator=(StorageProviderProtectionMode value) { put(value); }
			void operator()(StorageProviderProtectionMode value) { put(value); }
		} ProtectionMode;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::RecycleBinUri)->_get_RecycleBinUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::RecycleBinUri)->_put_RecycleBinUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} RecycleBinUri;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::ShowSiblingsAsGroup)->_get_ShowSiblingsAsGroup(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::ShowSiblingsAsGroup)->_put_ShowSiblingsAsGroup(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShowSiblingsAsGroup;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<StorageProviderItemPropertyDefinition>>> get() { Foundation::Collections::IVector<StorageProviderItemPropertyDefinition*>* value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::StorageProviderItemPropertyDefinitions)->_get_StorageProviderItemPropertyDefinitions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<StorageProviderItemPropertyDefinition>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<StorageProviderItemPropertyDefinition>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<StorageProviderItemPropertyDefinition>>> operator->() { return get(); }
		} StorageProviderItemPropertyDefinitions;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Version)->_get_Version(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderSyncRootInfo_adaptor::Version)->_put_Version(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Version;
	};
	IStorageProviderSyncRootInfo_adaptor() {}
};
template<typename X> struct adapt<IStorageProviderSyncRootInfo, X> : Windows::Storage::Provider::IStorageProviderSyncRootInfo_adaptor<X> { typedef adapt IStorageProviderSyncRootInfo; };
struct IStorageProviderSyncRootInfo : IStorageProviderSyncRootInfo_raw, generate<IStorageProviderSyncRootInfo> {};

// StorageProviderSyncRootInfo
template<typename X> struct statics<StorageProviderSyncRootInfo, X> : X {
	typedef typename X::root_type StorageProviderSyncRootInfo;
};
struct StorageProviderSyncRootInfo : generate<StorageProviderSyncRootInfo> {};

// IStorageProviderGetContentInfoForPathResult
struct IStorageProviderGetContentInfoForPathResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(StorageProviderUriSourceStatus *value);
	virtual STDMETHODIMP _put_Status(StorageProviderUriSourceStatus value);
	virtual STDMETHODIMP _get_ContentUri(HSTRING *value);
	virtual STDMETHODIMP _put_ContentUri(HSTRING value);
	virtual STDMETHODIMP _get_ContentId(HSTRING *value);
	virtual STDMETHODIMP _put_ContentId(HSTRING value);
};
template<typename X> struct IStorageProviderGetContentInfoForPathResult_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderGetContentInfoForPathResult_adaptor::ContentId)->_get_ContentId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderGetContentInfoForPathResult_adaptor::ContentId)->_put_ContentId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContentId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderGetContentInfoForPathResult_adaptor::ContentUri)->_get_ContentUri(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderGetContentInfoForPathResult_adaptor::ContentUri)->_put_ContentUri(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContentUri;
		struct : property {
			StorageProviderUriSourceStatus get() { StorageProviderUriSourceStatus value; hrcheck(enc(&IStorageProviderGetContentInfoForPathResult_adaptor::Status)->_get_Status(&value)); return value; }
			StorageProviderUriSourceStatus operator()() { return get(); }
			operator StorageProviderUriSourceStatus () { return get(); }
			void put(StorageProviderUriSourceStatus value) { hrcheck(enc(&IStorageProviderGetContentInfoForPathResult_adaptor::Status)->_put_Status(value)); }
			void operator=(StorageProviderUriSourceStatus value) { put(value); }
			void operator()(StorageProviderUriSourceStatus value) { put(value); }
		} Status;
	};
	IStorageProviderGetContentInfoForPathResult_adaptor() {}
};
template<typename X> struct adapt<IStorageProviderGetContentInfoForPathResult, X> : Windows::Storage::Provider::IStorageProviderGetContentInfoForPathResult_adaptor<X> { typedef adapt IStorageProviderGetContentInfoForPathResult; };
struct IStorageProviderGetContentInfoForPathResult : IStorageProviderGetContentInfoForPathResult_raw, generate<IStorageProviderGetContentInfoForPathResult> {};

// StorageProviderGetContentInfoForPathResult
template<typename X> struct statics<StorageProviderGetContentInfoForPathResult, X> : X {
	typedef typename X::root_type StorageProviderGetContentInfoForPathResult;
};
struct StorageProviderGetContentInfoForPathResult : generate<StorageProviderGetContentInfoForPathResult> {};

// IStorageProviderGetPathForContentUriResult
struct IStorageProviderGetPathForContentUriResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(StorageProviderUriSourceStatus *value);
	virtual STDMETHODIMP _put_Status(StorageProviderUriSourceStatus value);
	virtual STDMETHODIMP _get_Path(HSTRING *value);
	virtual STDMETHODIMP _put_Path(HSTRING value);
};
template<typename X> struct IStorageProviderGetPathForContentUriResult_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStorageProviderGetPathForContentUriResult_adaptor::Path)->_get_Path(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IStorageProviderGetPathForContentUriResult_adaptor::Path)->_put_Path(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Path;
		struct : property {
			StorageProviderUriSourceStatus get() { StorageProviderUriSourceStatus value; hrcheck(enc(&IStorageProviderGetPathForContentUriResult_adaptor::Status)->_get_Status(&value)); return value; }
			StorageProviderUriSourceStatus operator()() { return get(); }
			operator StorageProviderUriSourceStatus () { return get(); }
			void put(StorageProviderUriSourceStatus value) { hrcheck(enc(&IStorageProviderGetPathForContentUriResult_adaptor::Status)->_put_Status(value)); }
			void operator=(StorageProviderUriSourceStatus value) { put(value); }
			void operator()(StorageProviderUriSourceStatus value) { put(value); }
		} Status;
	};
	IStorageProviderGetPathForContentUriResult_adaptor() {}
};
template<typename X> struct adapt<IStorageProviderGetPathForContentUriResult, X> : Windows::Storage::Provider::IStorageProviderGetPathForContentUriResult_adaptor<X> { typedef adapt IStorageProviderGetPathForContentUriResult; };
struct IStorageProviderGetPathForContentUriResult : IStorageProviderGetPathForContentUriResult_raw, generate<IStorageProviderGetPathForContentUriResult> {};

// StorageProviderGetPathForContentUriResult
template<typename X> struct statics<StorageProviderGetPathForContentUriResult, X> : X {
	typedef typename X::root_type StorageProviderGetPathForContentUriResult;
};
struct StorageProviderGetPathForContentUriResult : generate<StorageProviderGetPathForContentUriResult> {};

// IStorageProviderUriSource
struct IStorageProviderUriSource_raw : IInspectable {
	virtual STDMETHODIMP _GetPathForContentUri(HSTRING contentUri, StorageProviderGetPathForContentUriResult* result) = 0;
	virtual STDMETHODIMP _GetContentInfoForPath(HSTRING path, StorageProviderGetContentInfoForPathResult* result) = 0;
};
template<typename X> struct IStorageProviderUriSource_adaptor : X {
	void GetPathForContentUri(hstring_ref contentUri, pptr<StorageProviderGetPathForContentUriResult> result) { hrcheck(X::get()->_GetPathForContentUri(contentUri, result)); }
	void GetContentInfoForPath(hstring_ref path, pptr<StorageProviderGetContentInfoForPathResult> result) { hrcheck(X::get()->_GetContentInfoForPath(path, result)); }
};
template<typename X> struct adapt<IStorageProviderUriSource, X> : Windows::Storage::Provider::IStorageProviderUriSource_adaptor<X> { typedef adapt IStorageProviderUriSource; };
template<typename X> struct IStorageProviderUriSource_unadaptor : X {
	STDMETHODIMP _GetPathForContentUri(HSTRING contentUri, StorageProviderGetPathForContentUriResult* result) { return hrtry([&, this] { X::get()->GetPathForContentUri(contentUri, result); }); }
	STDMETHODIMP _GetContentInfoForPath(HSTRING path, StorageProviderGetContentInfoForPathResult* result) { return hrtry([&, this] { X::get()->GetContentInfoForPath(path, result); }); }
};
template<typename X> struct unadapt<IStorageProviderUriSource, X> : Windows::Storage::Provider::IStorageProviderUriSource_unadaptor<X> {};
struct IStorageProviderUriSource : IStorageProviderUriSource_raw, generate<IStorageProviderUriSource> {};

// IStorageProviderSyncRootManagerStatics
struct IStorageProviderSyncRootManagerStatics : IInspectable {
	virtual STDMETHODIMP _Register(StorageProviderSyncRootInfo* syncRootInformation);
	virtual STDMETHODIMP _Unregister(HSTRING id);
	virtual STDMETHODIMP _GetSyncRootInformationForFolder(IStorageFolder* folder, StorageProviderSyncRootInfo* *syncRootInformation);
	virtual STDMETHODIMP _GetSyncRootInformationForId(HSTRING id, StorageProviderSyncRootInfo* *syncRootInformation);
	virtual STDMETHODIMP _GetCurrentSyncRoots(Foundation::Collections::IVectorView<StorageProviderSyncRootInfo*>* *value);
};

// StorageProviderSyncRootManager
template<typename> struct StorageProviderSyncRootManager_statics {
	static void Register(pptr<StorageProviderSyncRootInfo> syncRootInformation) { hrcheck(get_activation_factory<StorageProviderSyncRootManager, IStorageProviderSyncRootManagerStatics>()->_Register(syncRootInformation)); }
	static void Unregister(hstring_ref id) { hrcheck(get_activation_factory<StorageProviderSyncRootManager, IStorageProviderSyncRootManagerStatics>()->_Unregister(id)); }
	static ptr<StorageProviderSyncRootInfo> GetSyncRootInformationForFolder(pptr<IStorageFolder> folder) { StorageProviderSyncRootInfo* syncRootInformation; hrcheck(get_activation_factory<StorageProviderSyncRootManager, IStorageProviderSyncRootManagerStatics>()->_GetSyncRootInformationForFolder(folder, &syncRootInformation)); return from_abi(syncRootInformation); }
	static ptr<StorageProviderSyncRootInfo> GetSyncRootInformationForId(hstring_ref id) { StorageProviderSyncRootInfo* syncRootInformation; hrcheck(get_activation_factory<StorageProviderSyncRootManager, IStorageProviderSyncRootManagerStatics>()->_GetSyncRootInformationForId(id, &syncRootInformation)); return from_abi(syncRootInformation); }
	static ptr<Foundation::Collections::IVectorView<ptr<StorageProviderSyncRootInfo>>> GetCurrentSyncRoots() { Foundation::Collections::IVectorView<StorageProviderSyncRootInfo*>* value; hrcheck(get_activation_factory<StorageProviderSyncRootManager, IStorageProviderSyncRootManagerStatics>()->_GetCurrentSyncRoots(&value)); return from_abi(value); }
};

template<typename X> struct statics<StorageProviderSyncRootManager, X> : X, Windows::Storage::Provider::StorageProviderSyncRootManager_statics<void> {
	typedef typename X::root_type StorageProviderSyncRootManager;
};
struct StorageProviderSyncRootManager : generate<StorageProviderSyncRootManager> {};
}}}
} // namespace iso_winrt
