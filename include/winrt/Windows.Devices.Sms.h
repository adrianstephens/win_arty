#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Sms

#include "Windows.Devices.Sms.0.h"
#include "Windows.Foundation.Collections.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::Sms::LegacySmsApiContract> : value_type<> {};
template<> struct def<Windows::Devices::Sms::SmsMessageClass> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::ISmsMessage> : overridable_type<> {};
template<> struct def<Windows::Devices::Sms::SmsDataFormat> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::ISmsBinaryMessage> : overridable_type<Windows::Devices::Sms::ISmsMessage> {};
template<> struct def<Windows::Devices::Sms::SmsBinaryMessage> : class_type<Platform::Object, Windows::Devices::Sms::ISmsBinaryMessage> {};
template<> struct def<Windows::Devices::Sms::SmsEncoding> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::ISmsTextMessage> : overridable_type<Windows::Devices::Sms::ISmsMessage> {};
template<> struct def<Windows::Devices::Sms::ISmsTextMessageStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsTextMessage> : class_type<Platform::Object, Windows::Devices::Sms::ISmsTextMessage> {};
template<> struct def<Windows::Devices::Sms::SmsMessageFilter> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::DeleteSmsMessageOperation> : class_type<Platform::Object, Windows::Foundation::IAsyncAction, Windows::Foundation::IAsyncInfo> {};
template<> struct def<Windows::Devices::Sms::DeleteSmsMessagesOperation> : class_type<Platform::Object, Windows::Foundation::IAsyncAction, Windows::Foundation::IAsyncInfo> {};
template<> struct def<Windows::Devices::Sms::GetSmsMessageOperation> : class_type<Platform::Object, Windows::Foundation::IAsyncOperation<ptr<Windows::Devices::Sms::ISmsMessage>>, Windows::Foundation::IAsyncInfo> {};
template<> struct def<Windows::Devices::Sms::GetSmsMessagesOperation> : class_type<Platform::Object, Windows::Foundation::IAsyncOperationWithProgress<ptr<Windows::Foundation::Collections::IVectorView<ptr<Windows::Devices::Sms::ISmsMessage>>>, int>, Windows::Foundation::IAsyncInfo> {};
template<> struct def<Windows::Devices::Sms::ISmsDeviceMessageStore> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsDeviceMessageStore> : class_type<Platform::Object, Windows::Devices::Sms::ISmsDeviceMessageStore> {};
template<> struct def<Windows::Devices::Sms::SendSmsMessageOperation> : class_type<Platform::Object, Windows::Foundation::IAsyncAction, Windows::Foundation::IAsyncInfo> {};
template<> struct def<Windows::Devices::Sms::ISmsMessageReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsMessageReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::Sms::ISmsMessageReceivedEventArgs> {};
template<> struct def<Windows::Devices::Sms::SmsMessageReceivedEventHandler> : delegate_type {};
template<> struct def<Windows::Devices::Sms::ISmsDeviceStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::ISmsDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsDeviceStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::CellularClass> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::SmsEncodedLength> : value_type<unsigned, unsigned, unsigned, unsigned, unsigned> {};
template<> struct def<Windows::Devices::Sms::ISmsDevice> : overridable_type<> {};
template<> struct def<Windows::Devices::Sms::SmsDevice> : class_type<Platform::Object, Windows::Devices::Sms::ISmsDevice> {};
template<> struct def<Windows::Devices::Sms::SmsDeviceStatusChangedEventHandler> : delegate_type {};
template<> struct def<Windows::Devices::Sms::GetSmsDeviceOperation> : class_type<Platform::Object, Windows::Foundation::IAsyncOperation<ptr<Windows::Devices::Sms::SmsDevice>>, Windows::Foundation::IAsyncInfo> {};
template<> struct def<Windows::Devices::Sms::ISmsReceivedEventDetails> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::ISmsReceivedEventDetails2> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsReceivedEventDetails> : class_type<Platform::Object, Windows::Devices::Sms::ISmsReceivedEventDetails, Windows::Devices::Sms::ISmsReceivedEventDetails2> {};
template<> struct def<Windows::Devices::Sms::SmsMessageType> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::ISmsMessageBase> : overridable_type<> {};
template<> struct def<Windows::Devices::Sms::ISmsTextMessage2> : interface_type<Windows::Devices::Sms::ISmsMessageBase> {};
template<> struct def<Windows::Devices::Sms::SmsTextMessage2> : class_type<Platform::Object, Windows::Devices::Sms::ISmsTextMessage2> {};
template<> struct def<Windows::Devices::Sms::ISmsWapMessage> : interface_type<Windows::Devices::Sms::ISmsMessageBase> {};
template<> struct def<Windows::Devices::Sms::SmsWapMessage> : class_type<Platform::Object, Windows::Devices::Sms::ISmsWapMessage> {};
template<> struct def<Windows::Devices::Sms::ISmsAppMessage> : interface_type<Windows::Devices::Sms::ISmsMessageBase> {};
template<> struct def<Windows::Devices::Sms::SmsAppMessage> : class_type<Platform::Object, Windows::Devices::Sms::ISmsAppMessage> {};
template<> struct def<Windows::Devices::Sms::SmsGeographicalScope> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::SmsBroadcastType> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::ISmsBroadcastMessage> : interface_type<Windows::Devices::Sms::ISmsMessageBase> {};
template<> struct def<Windows::Devices::Sms::SmsBroadcastMessage> : class_type<Platform::Object, Windows::Devices::Sms::ISmsBroadcastMessage> {};
template<> struct def<Windows::Devices::Sms::ISmsVoicemailMessage> : interface_type<Windows::Devices::Sms::ISmsMessageBase> {};
template<> struct def<Windows::Devices::Sms::SmsVoicemailMessage> : class_type<Platform::Object, Windows::Devices::Sms::ISmsVoicemailMessage> {};
template<> struct def<Windows::Devices::Sms::ISmsStatusMessage> : interface_type<Windows::Devices::Sms::ISmsMessageBase> {};
template<> struct def<Windows::Devices::Sms::SmsStatusMessage> : class_type<Platform::Object, Windows::Devices::Sms::ISmsStatusMessage> {};
template<> struct def<Windows::Devices::Sms::SmsModemErrorCode> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::ISmsSendMessageResult> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsSendMessageResult> : class_type<Platform::Object, Windows::Devices::Sms::ISmsSendMessageResult> {};
template<> struct def<Windows::Devices::Sms::ISmsDevice2Statics> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::ISmsDevice2> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsDevice2> : class_type<Platform::Object, Windows::Devices::Sms::ISmsDevice2> {};
template<> struct def<Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsMessageReceivedTriggerDetails> : class_type<Platform::Object, Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails> {};
template<> struct def<Windows::Devices::Sms::SmsFilterActionType> : enum_type<int> {};
template<> struct def<Windows::Devices::Sms::ISmsFilterRule> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::ISmsFilterRuleFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsFilterRule> : class_type<Platform::Object, Windows::Devices::Sms::ISmsFilterRule>, custom_activators {};
template<> struct def<Windows::Devices::Sms::ISmsFilterRules> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::ISmsFilterRulesFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsFilterRules> : class_type<Platform::Object, Windows::Devices::Sms::ISmsFilterRules>, custom_activators {};
template<> struct def<Windows::Devices::Sms::ISmsMessageRegistrationStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::ISmsMessageRegistration> : interface_type<> {};
template<> struct def<Windows::Devices::Sms::SmsMessageRegistration> : class_type<Platform::Object, Windows::Devices::Sms::ISmsMessageRegistration> {};

// uuids

template<> struct uuid<Windows::Devices::Sms::ISmsMessage> { define_guid(0xED3C5E28, 0x6984, 0x4B07, 0x81, 0x1D, 0x8D, 0x59, 0x6, 0xED, 0x3C, 0xEA);};
template<> struct uuid<Windows::Devices::Sms::ISmsBinaryMessage> { define_guid(0x5BF4E813, 0x3B53, 0x4C6E, 0xB6, 0x1A, 0xD8, 0x6A, 0x63, 0x75, 0x56, 0x50);};
template<> struct uuid<Windows::Devices::Sms::ISmsTextMessage> { define_guid(0xD61C904C, 0xA495, 0x487F, 0x9A, 0x6F, 0x97, 0x15, 0x48, 0xC5, 0xBC, 0x9F);};
template<> struct uuid<Windows::Devices::Sms::ISmsTextMessageStatics> { define_guid(0x7F68C5ED, 0x3CCC, 0x47A3, 0x8C, 0x55, 0x38, 0xD, 0x3B, 0x1, 0x8, 0x92);};
template<> struct uuid<Windows::Devices::Sms::ISmsDeviceMessageStore> { define_guid(0x9889F253, 0xF188, 0x4427, 0x8D, 0x54, 0xCE, 0xC, 0x24, 0x23, 0xC5, 0xC1);};
template<> struct uuid<Windows::Devices::Sms::ISmsMessageReceivedEventArgs> { define_guid(0x8E80A98, 0xB8E5, 0x41C1, 0xA3, 0xD8, 0xD3, 0xAB, 0xFA, 0xE2, 0x26, 0x75);};
template<> struct uuid<Windows::Devices::Sms::SmsMessageReceivedEventHandler> { define_guid(0xB7AD409, 0xEC2D, 0x47CE, 0xA2, 0x53, 0x73, 0x2B, 0xEE, 0xEB, 0xCA, 0xCD);};
template<> struct uuid<Windows::Devices::Sms::ISmsDeviceStatics2> { define_guid(0x2CA11C87, 0x873, 0x4CAF, 0x8A, 0x7D, 0xBD, 0x47, 0x1E, 0x85, 0x86, 0xD1);};
template<> struct uuid<Windows::Devices::Sms::ISmsDeviceStatics> { define_guid(0xF88D07EA, 0xD815, 0x4DD1, 0xA2, 0x34, 0x45, 0x20, 0xCE, 0x46, 0x4, 0xA4);};
template<> struct uuid<Windows::Devices::Sms::ISmsDevice> { define_guid(0x91791ED, 0x872B, 0x4EEC, 0x9C, 0x72, 0xAB, 0x11, 0x62, 0x7B, 0x34, 0xEC);};
template<> struct uuid<Windows::Devices::Sms::SmsDeviceStatusChangedEventHandler> { define_guid(0x982B1162, 0x3DD7, 0x4618, 0xAF, 0x89, 0xC, 0x27, 0x2D, 0x5D, 0x6, 0xD8);};
template<> struct uuid<Windows::Devices::Sms::ISmsReceivedEventDetails> { define_guid(0x5BB50F15, 0xE46D, 0x4C82, 0x84, 0x7D, 0x5A, 0x3, 0x4, 0xC1, 0xD5, 0x3D);};
template<> struct uuid<Windows::Devices::Sms::ISmsReceivedEventDetails2> { define_guid(0x40E05C86, 0xA7B4, 0x4771, 0x9A, 0xE7, 0xB, 0x5F, 0xFB, 0x12, 0xC0, 0x3A);};
template<> struct uuid<Windows::Devices::Sms::ISmsMessageBase> { define_guid(0x2CF0FE30, 0xFE50, 0x4FC6, 0xAA, 0x88, 0x4C, 0xCF, 0xE2, 0x7A, 0x29, 0xEA);};
template<> struct uuid<Windows::Devices::Sms::ISmsTextMessage2> { define_guid(0x22A0D893, 0x4555, 0x4755, 0xB5, 0xA1, 0xE7, 0xFD, 0x84, 0x95, 0x5F, 0x8D);};
template<> struct uuid<Windows::Devices::Sms::ISmsWapMessage> { define_guid(0xCD937743, 0x7A55, 0x4D3B, 0x90, 0x21, 0xF2, 0x2E, 0x2, 0x2D, 0x9, 0xC5);};
template<> struct uuid<Windows::Devices::Sms::ISmsAppMessage> { define_guid(0xE8BB8494, 0xD3A0, 0x4A0A, 0x86, 0xD7, 0x29, 0x10, 0x33, 0xA8, 0xCF, 0x54);};
template<> struct uuid<Windows::Devices::Sms::ISmsBroadcastMessage> { define_guid(0x75AEBBF1, 0xE4B7, 0x4874, 0xA0, 0x9C, 0x29, 0x56, 0xE5, 0x92, 0xF9, 0x57);};
template<> struct uuid<Windows::Devices::Sms::ISmsVoicemailMessage> { define_guid(0x271AA0A6, 0x95B1, 0x44FF, 0xBC, 0xB8, 0xB8, 0xFD, 0xD7, 0xE0, 0x8B, 0xC3);};
template<> struct uuid<Windows::Devices::Sms::ISmsStatusMessage> { define_guid(0xE6D28342, 0xB70B, 0x4677, 0x93, 0x79, 0xC9, 0x78, 0x3F, 0xDF, 0xF8, 0xF4);};
template<> struct uuid<Windows::Devices::Sms::ISmsSendMessageResult> { define_guid(0xDB139AF2, 0x78C9, 0x4FEB, 0x96, 0x22, 0x45, 0x23, 0x28, 0x8, 0x8D, 0x62);};
template<> struct uuid<Windows::Devices::Sms::ISmsDevice2Statics> { define_guid(0x65C78325, 0x1031, 0x491E, 0x8F, 0xB6, 0xEF, 0x99, 0x91, 0xAF, 0xE3, 0x63);};
template<> struct uuid<Windows::Devices::Sms::ISmsDevice2> { define_guid(0xBD8A5C13, 0xE522, 0x46CB, 0xB8, 0xD5, 0x9E, 0xAD, 0x30, 0xFB, 0x6C, 0x47);};
template<> struct uuid<Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails> { define_guid(0x2BCFCBD4, 0x2657, 0x4128, 0xAD, 0x5F, 0xE3, 0x87, 0x71, 0x32, 0xBD, 0xB1);};
template<> struct uuid<Windows::Devices::Sms::ISmsFilterRule> { define_guid(0x40E32FAE, 0xB049, 0x4FBC, 0xAF, 0xE9, 0xE2, 0xA6, 0x10, 0xEF, 0xF5, 0x5C);};
template<> struct uuid<Windows::Devices::Sms::ISmsFilterRuleFactory> { define_guid(0xC36508, 0x6296, 0x4F29, 0x9A, 0xAD, 0x89, 0x20, 0xCE, 0xBA, 0x3C, 0xE8);};
template<> struct uuid<Windows::Devices::Sms::ISmsFilterRules> { define_guid(0x4E47EAFB, 0x79CD, 0x4881, 0x98, 0x94, 0x55, 0xA4, 0x13, 0x5B, 0x23, 0xFA);};
template<> struct uuid<Windows::Devices::Sms::ISmsFilterRulesFactory> { define_guid(0xA09924ED, 0x6E2E, 0x4530, 0x9F, 0xDE, 0x46, 0x5D, 0x2, 0xEE, 0xD0, 0xE);};
template<> struct uuid<Windows::Devices::Sms::ISmsMessageRegistrationStatics> { define_guid(0x63A05464, 0x2898, 0x4778, 0xA0, 0x3C, 0x6F, 0x99, 0x49, 0x7, 0xD6, 0x3A);};
template<> struct uuid<Windows::Devices::Sms::ISmsMessageRegistration> { define_guid(0x1720503E, 0xF34F, 0x446B, 0x83, 0xB3, 0xF, 0xF1, 0x99, 0x23, 0xB4, 0x9);};

// types

namespace Windows { namespace Devices { namespace Sms {

// ISmsMessage
struct ISmsMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value) = 0;
	virtual STDMETHODIMP _get_MessageClass(SmsMessageClass *value) = 0;
};
template<typename X> struct ISmsMessage_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmsMessage_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			SmsMessageClass get() { SmsMessageClass value; hrcheck(enc(&ISmsMessage_adaptor::MessageClass)->_get_MessageClass(&value)); return value; }
			SmsMessageClass operator()() { return get(); }
			operator SmsMessageClass () { return get(); }
		} MessageClass;
	};
	ISmsMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsMessage, X> : Windows::Devices::Sms::ISmsMessage_adaptor<X> { typedef adapt ISmsMessage; };
template<typename X> struct ISmsMessage_unadaptor : X {
	STDMETHODIMP _get_Id(unsigned *value) { return hrtry([&, this] { get_prop(value, Id); }); }
	STDMETHODIMP _get_MessageClass(SmsMessageClass *value) { return hrtry([&, this] { get_prop(value, MessageClass); }); }
};
template<typename X> struct unadapt<ISmsMessage, X> : Windows::Devices::Sms::ISmsMessage_unadaptor<X> {};
struct ISmsMessage : ISmsMessage_raw, generate<ISmsMessage> {};

// ISmsBinaryMessage
struct ISmsBinaryMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Format(SmsDataFormat *value) = 0;
	virtual STDMETHODIMP _put_Format(SmsDataFormat value) = 0;
	virtual STDMETHODIMP _GetData(unsigned *valueSize, unsigned char **value) = 0;
	virtual STDMETHODIMP _SetData(unsigned valueSize, unsigned char *value) = 0;
};
template<typename X> struct ISmsBinaryMessage_adaptor : X {
	union {
		struct : property {
			SmsDataFormat get() { SmsDataFormat value; hrcheck(enc(&ISmsBinaryMessage_adaptor::Format)->_get_Format(&value)); return value; }
			SmsDataFormat operator()() { return get(); }
			operator SmsDataFormat () { return get(); }
			void put(SmsDataFormat value) { hrcheck(enc(&ISmsBinaryMessage_adaptor::Format)->_put_Format(value)); }
			void operator=(SmsDataFormat value) { put(value); }
			void operator()(SmsDataFormat value) { put(value); }
		} Format;
	};
	szarray<unsigned char> GetData() { szarray<unsigned char> value; hrcheck(X::get()->_GetData(&value.size, &value.p)); return value; }
	void SetData(const szarray<unsigned char>& value) { hrcheck(X::get()->_SetData(value.size, to_abi(value.p))); }
	ISmsBinaryMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsBinaryMessage, X> : Windows::Devices::Sms::ISmsBinaryMessage_adaptor<X> { typedef adapt ISmsBinaryMessage; };
template<typename X> struct ISmsBinaryMessage_unadaptor : X {
	STDMETHODIMP _get_Format(SmsDataFormat *value) { return hrtry([&, this] { get_prop(value, Format); }); }
	STDMETHODIMP _put_Format(SmsDataFormat value) { return hrtry([&, this] { put_prop(value, Format); }); }
	STDMETHODIMP _GetData(unsigned *valueSize, unsigned char **value) { return hrtry([&, this] { *value = X::get()->GetData().detach(valueSize); }); }
	STDMETHODIMP _SetData(unsigned valueSize, unsigned char *value) { return hrtry([&, this] { X::get()->SetData({(unsigned char*)value, valueSize}); }); }
};
template<typename X> struct unadapt<ISmsBinaryMessage, X> : Windows::Devices::Sms::ISmsBinaryMessage_unadaptor<X> {};
struct ISmsBinaryMessage : ISmsBinaryMessage_raw, generate<ISmsBinaryMessage> {};

// SmsBinaryMessage
template<typename X> struct statics<SmsBinaryMessage, X> : X {
	typedef typename X::root_type SmsBinaryMessage;
};
struct SmsBinaryMessage : generate<SmsBinaryMessage> {};

// ISmsTextMessage
struct ISmsTextMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value) = 0;
	virtual STDMETHODIMP _get_PartReferenceId(unsigned *value) = 0;
	virtual STDMETHODIMP _get_PartNumber(unsigned *value) = 0;
	virtual STDMETHODIMP _get_PartCount(unsigned *value) = 0;
	virtual STDMETHODIMP _get_To(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_To(HSTRING value) = 0;
	virtual STDMETHODIMP _get_From(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_From(HSTRING value) = 0;
	virtual STDMETHODIMP _get_Body(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_Body(HSTRING value) = 0;
	virtual STDMETHODIMP _get_Encoding(SmsEncoding *value) = 0;
	virtual STDMETHODIMP _put_Encoding(SmsEncoding value) = 0;
	virtual STDMETHODIMP _ToBinaryMessages(SmsDataFormat format, Foundation::Collections::IVectorView<ISmsBinaryMessage*>* *messages) = 0;
};
template<typename X> struct ISmsTextMessage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsTextMessage_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsTextMessage_adaptor::Body)->_put_Body(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Body;
		struct : property {
			SmsEncoding get() { SmsEncoding value; hrcheck(enc(&ISmsTextMessage_adaptor::Encoding)->_get_Encoding(&value)); return value; }
			SmsEncoding operator()() { return get(); }
			operator SmsEncoding () { return get(); }
			void put(SmsEncoding value) { hrcheck(enc(&ISmsTextMessage_adaptor::Encoding)->_put_Encoding(value)); }
			void operator=(SmsEncoding value) { put(value); }
			void operator()(SmsEncoding value) { put(value); }
		} Encoding;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsTextMessage_adaptor::From)->_get_From(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsTextMessage_adaptor::From)->_put_From(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} From;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmsTextMessage_adaptor::PartCount)->_get_PartCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PartCount;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmsTextMessage_adaptor::PartNumber)->_get_PartNumber(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PartNumber;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmsTextMessage_adaptor::PartReferenceId)->_get_PartReferenceId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PartReferenceId;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsTextMessage_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsTextMessage_adaptor::To)->_get_To(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsTextMessage_adaptor::To)->_put_To(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} To;
	};
	ptr<Foundation::Collections::IVectorView<ptr<ISmsBinaryMessage>>> ToBinaryMessages(SmsDataFormat format) { Foundation::Collections::IVectorView<ISmsBinaryMessage*>* messages; hrcheck(X::get()->_ToBinaryMessages(format, &messages)); return from_abi(messages); }
	ISmsTextMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsTextMessage, X> : Windows::Devices::Sms::ISmsTextMessage_adaptor<X> { typedef adapt ISmsTextMessage; };
template<typename X> struct ISmsTextMessage_unadaptor : X {
	STDMETHODIMP _get_Timestamp(Foundation::DateTime *value) { return hrtry([&, this] { get_prop(value, Timestamp); }); }
	STDMETHODIMP _get_PartReferenceId(unsigned *value) { return hrtry([&, this] { get_prop(value, PartReferenceId); }); }
	STDMETHODIMP _get_PartNumber(unsigned *value) { return hrtry([&, this] { get_prop(value, PartNumber); }); }
	STDMETHODIMP _get_PartCount(unsigned *value) { return hrtry([&, this] { get_prop(value, PartCount); }); }
	STDMETHODIMP _get_To(HSTRING *value) { return hrtry([&, this] { get_prop(value, To); }); }
	STDMETHODIMP _put_To(HSTRING value) { return hrtry([&, this] { put_prop(value, To); }); }
	STDMETHODIMP _get_From(HSTRING *value) { return hrtry([&, this] { get_prop(value, From); }); }
	STDMETHODIMP _put_From(HSTRING value) { return hrtry([&, this] { put_prop(value, From); }); }
	STDMETHODIMP _get_Body(HSTRING *value) { return hrtry([&, this] { get_prop(value, Body); }); }
	STDMETHODIMP _put_Body(HSTRING value) { return hrtry([&, this] { put_prop(value, Body); }); }
	STDMETHODIMP _get_Encoding(SmsEncoding *value) { return hrtry([&, this] { get_prop(value, Encoding); }); }
	STDMETHODIMP _put_Encoding(SmsEncoding value) { return hrtry([&, this] { put_prop(value, Encoding); }); }
	STDMETHODIMP _ToBinaryMessages(SmsDataFormat format, Foundation::Collections::IVectorView<ISmsBinaryMessage*>* *messages) { return hrtry([&, this] { *messages = to_abi(X::get()->ToBinaryMessages(format)); }); }
};
template<typename X> struct unadapt<ISmsTextMessage, X> : Windows::Devices::Sms::ISmsTextMessage_unadaptor<X> {};
struct ISmsTextMessage : ISmsTextMessage_raw, generate<ISmsTextMessage> {};

// ISmsTextMessageStatics
struct ISmsTextMessageStatics : IInspectable {
	virtual STDMETHODIMP _FromBinaryMessage(SmsBinaryMessage* binaryMessage, SmsTextMessage* *textMessage);
	virtual STDMETHODIMP _FromBinaryData(SmsDataFormat format, unsigned valueSize, unsigned char *value, SmsTextMessage* *textMessage);
};

// SmsTextMessage
template<typename> struct SmsTextMessage_statics {
	static ptr<SmsTextMessage> FromBinaryMessage(pptr<SmsBinaryMessage> binaryMessage) { SmsTextMessage* textMessage; hrcheck(get_activation_factory<SmsTextMessage, ISmsTextMessageStatics>()->_FromBinaryMessage(binaryMessage, &textMessage)); return from_abi(textMessage); }
	static ptr<SmsTextMessage> FromBinaryData(SmsDataFormat format, const szarray<unsigned char>& value) { SmsTextMessage* textMessage; hrcheck(get_activation_factory<SmsTextMessage, ISmsTextMessageStatics>()->_FromBinaryData(format, value.size, to_abi(value.p), &textMessage)); return from_abi(textMessage); }
};

template<typename X> struct statics<SmsTextMessage, X> : X, Windows::Devices::Sms::SmsTextMessage_statics<void> {
	typedef typename X::root_type SmsTextMessage;
};
struct SmsTextMessage : generate<SmsTextMessage> {};

// DeleteSmsMessageOperation
template<typename X> struct statics<DeleteSmsMessageOperation, X> : X {
	typedef typename X::root_type DeleteSmsMessageOperation;
};
struct DeleteSmsMessageOperation : generate<DeleteSmsMessageOperation> {};

// DeleteSmsMessagesOperation
template<typename X> struct statics<DeleteSmsMessagesOperation, X> : X {
	typedef typename X::root_type DeleteSmsMessagesOperation;
};
struct DeleteSmsMessagesOperation : generate<DeleteSmsMessagesOperation> {};

// GetSmsMessageOperation
template<typename X> struct statics<GetSmsMessageOperation, X> : X {
	typedef typename X::root_type GetSmsMessageOperation;
};
struct GetSmsMessageOperation : generate<GetSmsMessageOperation> {};

// GetSmsMessagesOperation
template<typename X> struct statics<GetSmsMessagesOperation, X> : X {
	typedef typename X::root_type GetSmsMessagesOperation;
};
struct GetSmsMessagesOperation : generate<GetSmsMessagesOperation> {};

// ISmsDeviceMessageStore
struct ISmsDeviceMessageStore_raw : IInspectable {
	virtual STDMETHODIMP _DeleteMessageAsync(unsigned messageId, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _DeleteMessagesAsync(SmsMessageFilter messageFilter, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _GetMessageAsync(unsigned messageId, Foundation::IAsyncOperation<ISmsMessage*>* *asyncInfo);
	virtual STDMETHODIMP _GetMessagesAsync(SmsMessageFilter messageFilter, Foundation::IAsyncOperationWithProgress<Foundation::Collections::IVectorView<ISmsMessage*>*, int>* *asyncInfo);
	virtual STDMETHODIMP _get_MaxMessages(unsigned *value);
};
template<typename X> struct ISmsDeviceMessageStore_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmsDeviceMessageStore_adaptor::MaxMessages)->_get_MaxMessages(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxMessages;
	};
	ptr<Foundation::IAsyncAction> DeleteMessageAsync(unsigned messageId) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_DeleteMessageAsync(messageId, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncAction> DeleteMessagesAsync(SmsMessageFilter messageFilter) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_DeleteMessagesAsync(messageFilter, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<ISmsMessage>>> GetMessageAsync(unsigned messageId) { Foundation::IAsyncOperation<ISmsMessage*>* asyncInfo; hrcheck(X::get()->_GetMessageAsync(messageId, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperationWithProgress<ptr<Foundation::Collections::IVectorView<ptr<ISmsMessage>>>, int>> GetMessagesAsync(SmsMessageFilter messageFilter) { Foundation::IAsyncOperationWithProgress<Foundation::Collections::IVectorView<ISmsMessage*>*, int>* asyncInfo; hrcheck(X::get()->_GetMessagesAsync(messageFilter, &asyncInfo)); return from_abi(asyncInfo); }
	ISmsDeviceMessageStore_adaptor() {}
};
template<typename X> struct adapt<ISmsDeviceMessageStore, X> : Windows::Devices::Sms::ISmsDeviceMessageStore_adaptor<X> { typedef adapt ISmsDeviceMessageStore; };
struct ISmsDeviceMessageStore : ISmsDeviceMessageStore_raw, generate<ISmsDeviceMessageStore> {};

// SmsDeviceMessageStore
template<typename X> struct statics<SmsDeviceMessageStore, X> : X {
	typedef typename X::root_type SmsDeviceMessageStore;
};
struct SmsDeviceMessageStore : generate<SmsDeviceMessageStore> {};

// SendSmsMessageOperation
template<typename X> struct statics<SendSmsMessageOperation, X> : X {
	typedef typename X::root_type SendSmsMessageOperation;
};
struct SendSmsMessageOperation : generate<SendSmsMessageOperation> {};

// ISmsMessageReceivedEventArgs
struct ISmsMessageReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_TextMessage(SmsTextMessage* *value);
	virtual STDMETHODIMP _get_BinaryMessage(SmsBinaryMessage* *value);
};
template<typename X> struct ISmsMessageReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SmsBinaryMessage> get() { SmsBinaryMessage* value; hrcheck(enc(&ISmsMessageReceivedEventArgs_adaptor::BinaryMessage)->_get_BinaryMessage(&value)); return from_abi(value); }
			ptr<SmsBinaryMessage> operator()() { return get(); }
			operator ptr<SmsBinaryMessage> () { return get(); }
			ptr<SmsBinaryMessage> operator->() { return get(); }
		} BinaryMessage;
		struct : property {
			ptr<SmsTextMessage> get() { SmsTextMessage* value; hrcheck(enc(&ISmsMessageReceivedEventArgs_adaptor::TextMessage)->_get_TextMessage(&value)); return from_abi(value); }
			ptr<SmsTextMessage> operator()() { return get(); }
			operator ptr<SmsTextMessage> () { return get(); }
			ptr<SmsTextMessage> operator->() { return get(); }
		} TextMessage;
	};
	ISmsMessageReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISmsMessageReceivedEventArgs, X> : Windows::Devices::Sms::ISmsMessageReceivedEventArgs_adaptor<X> { typedef adapt ISmsMessageReceivedEventArgs; };
struct ISmsMessageReceivedEventArgs : ISmsMessageReceivedEventArgs_raw, generate<ISmsMessageReceivedEventArgs> {};

// SmsMessageReceivedEventArgs
template<typename X> struct statics<SmsMessageReceivedEventArgs, X> : X {
	typedef typename X::root_type SmsMessageReceivedEventArgs;
};
struct SmsMessageReceivedEventArgs : generate<SmsMessageReceivedEventArgs> {};

// SmsMessageReceivedEventHandler
struct SmsMessageReceivedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(SmsDevice* sender, SmsMessageReceivedEventArgs* e) = 0;
};

// ISmsDeviceStatics2
struct ISmsDeviceStatics2 : IInspectable {
	virtual STDMETHODIMP _FromNetworkAccountIdAsync(HSTRING networkAccountId, Foundation::IAsyncOperation<SmsDevice*>* *asyncInfo);
};

// ISmsDeviceStatics
struct ISmsDeviceStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *phstrDeviceClassSelector);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<SmsDevice*>* *asyncInfo);
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<SmsDevice*>* *asyncInfo);
};

// ISmsDevice
struct ISmsDevice_raw : IInspectable {
	virtual STDMETHODIMP _SendMessageAsync(ISmsMessage* message, SendSmsMessageOperation* *asyncInfo) = 0;
	virtual STDMETHODIMP _CalculateLength(SmsTextMessage* message, SmsEncodedLength *encodedLength) = 0;
	virtual STDMETHODIMP _get_AccountPhoneNumber(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_CellularClass(Sms::CellularClass *value) = 0;
	virtual STDMETHODIMP _get_MessageStore(SmsDeviceMessageStore* *value) = 0;
	virtual STDMETHODIMP _get_DeviceStatus(SmsDeviceStatus *value) = 0;
	virtual STDMETHODIMP _add_SmsMessageReceived(SmsMessageReceivedEventHandler* eventHandler, Foundation::EventRegistrationToken *eventCookie) = 0;
	virtual STDMETHODIMP _remove_SmsMessageReceived(Foundation::EventRegistrationToken eventCookie) = 0;
	virtual STDMETHODIMP _add_SmsDeviceStatusChanged(SmsDeviceStatusChangedEventHandler* eventHandler, Foundation::EventRegistrationToken *eventCookie) = 0;
	virtual STDMETHODIMP _remove_SmsDeviceStatusChanged(Foundation::EventRegistrationToken eventCookie) = 0;
};
template<typename X> struct ISmsDevice_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsDevice_adaptor::AccountPhoneNumber)->_get_AccountPhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccountPhoneNumber;
		struct : property {
			Sms::CellularClass get() { Sms::CellularClass value; hrcheck(enc(&ISmsDevice_adaptor::CellularClass)->_get_CellularClass(&value)); return value; }
			Sms::CellularClass operator()() { return get(); }
			operator Sms::CellularClass () { return get(); }
		} CellularClass;
		struct : property {
			SmsDeviceStatus get() { SmsDeviceStatus value; hrcheck(enc(&ISmsDevice_adaptor::DeviceStatus)->_get_DeviceStatus(&value)); return value; }
			SmsDeviceStatus operator()() { return get(); }
			operator SmsDeviceStatus () { return get(); }
		} DeviceStatus;
		struct : property {
			ptr<SmsDeviceMessageStore> get() { SmsDeviceMessageStore* value; hrcheck(enc(&ISmsDevice_adaptor::MessageStore)->_get_MessageStore(&value)); return from_abi(value); }
			ptr<SmsDeviceMessageStore> operator()() { return get(); }
			operator ptr<SmsDeviceMessageStore> () { return get(); }
			ptr<SmsDeviceMessageStore> operator->() { return get(); }
		} MessageStore;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<SmsDeviceStatusChangedEventHandler> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&ISmsDevice_adaptor::SmsDeviceStatusChanged)->_add_SmsDeviceStatusChanged(eventHandler, &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&ISmsDevice_adaptor::SmsDeviceStatusChanged)->_remove_SmsDeviceStatusChanged(eventCookie)); }
		} SmsDeviceStatusChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<SmsMessageReceivedEventHandler> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&ISmsDevice_adaptor::SmsMessageReceived)->_add_SmsMessageReceived(eventHandler, &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&ISmsDevice_adaptor::SmsMessageReceived)->_remove_SmsMessageReceived(eventCookie)); }
		} SmsMessageReceived;
	};
	ptr<SendSmsMessageOperation> SendMessageAsync(pptr<ISmsMessage> message) { SendSmsMessageOperation* asyncInfo; hrcheck(X::get()->_SendMessageAsync(message, &asyncInfo)); return from_abi(asyncInfo); }
	SmsEncodedLength CalculateLength(pptr<SmsTextMessage> message) { SmsEncodedLength encodedLength; hrcheck(X::get()->_CalculateLength(message, &encodedLength)); return encodedLength; }
	ISmsDevice_adaptor() {}
};
template<typename X> struct adapt<ISmsDevice, X> : Windows::Devices::Sms::ISmsDevice_adaptor<X> { typedef adapt ISmsDevice; };
template<typename X> struct ISmsDevice_unadaptor : X {
	STDMETHODIMP _SendMessageAsync(ISmsMessage* message, SendSmsMessageOperation* *asyncInfo) { return hrtry([&, this] { *asyncInfo = to_abi(X::get()->SendMessageAsync(message)); }); }
	STDMETHODIMP _CalculateLength(SmsTextMessage* message, SmsEncodedLength *encodedLength) { return hrtry([&, this] { *encodedLength = X::get()->CalculateLength(message); }); }
	STDMETHODIMP _get_AccountPhoneNumber(HSTRING *value) { return hrtry([&, this] { get_prop(value, AccountPhoneNumber); }); }
	STDMETHODIMP _get_CellularClass(Sms::CellularClass *value) { return hrtry([&, this] { get_prop(value, CellularClass); }); }
	STDMETHODIMP _get_MessageStore(SmsDeviceMessageStore* *value) { return hrtry([&, this] { get_prop(value, MessageStore); }); }
	STDMETHODIMP _get_DeviceStatus(SmsDeviceStatus *value) { return hrtry([&, this] { get_prop(value, DeviceStatus); }); }
	STDMETHODIMP _add_SmsMessageReceived(SmsMessageReceivedEventHandler* eventHandler, Foundation::EventRegistrationToken *eventCookie) { return hrtry([&, this] { *eventCookie = X::get()->SmsMessageReceived+=eventHandler; }); }
	STDMETHODIMP _remove_SmsMessageReceived(Foundation::EventRegistrationToken eventCookie) { return hrtry([&, this] { X::get()->SmsMessageReceived-=eventCookie; }); }
	STDMETHODIMP _add_SmsDeviceStatusChanged(SmsDeviceStatusChangedEventHandler* eventHandler, Foundation::EventRegistrationToken *eventCookie) { return hrtry([&, this] { *eventCookie = X::get()->SmsDeviceStatusChanged+=eventHandler; }); }
	STDMETHODIMP _remove_SmsDeviceStatusChanged(Foundation::EventRegistrationToken eventCookie) { return hrtry([&, this] { X::get()->SmsDeviceStatusChanged-=eventCookie; }); }
};
template<typename X> struct unadapt<ISmsDevice, X> : Windows::Devices::Sms::ISmsDevice_unadaptor<X> {};
struct ISmsDevice : ISmsDevice_raw, generate<ISmsDevice> {};

// SmsDevice
template<typename> struct SmsDevice_statics {
	static ptr<Foundation::IAsyncOperation<ptr<SmsDevice>>> FromNetworkAccountIdAsync(hstring_ref networkAccountId) { Foundation::IAsyncOperation<SmsDevice*>* asyncInfo; hrcheck(get_activation_factory<SmsDevice, ISmsDeviceStatics2>()->_FromNetworkAccountIdAsync(networkAccountId, &asyncInfo)); return from_abi(asyncInfo); }
	static hstring GetDeviceSelector() { HSTRING phstrDeviceClassSelector; hrcheck(get_activation_factory<SmsDevice, ISmsDeviceStatics>()->_GetDeviceSelector(&phstrDeviceClassSelector)); return from_abi(phstrDeviceClassSelector); }
	static ptr<Foundation::IAsyncOperation<ptr<SmsDevice>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<SmsDevice*>* asyncInfo; hrcheck(get_activation_factory<SmsDevice, ISmsDeviceStatics>()->_FromIdAsync(deviceId, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<SmsDevice>>> GetDefaultAsync() { Foundation::IAsyncOperation<SmsDevice*>* asyncInfo; hrcheck(get_activation_factory<SmsDevice, ISmsDeviceStatics>()->_GetDefaultAsync(&asyncInfo)); return from_abi(asyncInfo); }
};

template<typename X> struct statics<SmsDevice, X> : X, Windows::Devices::Sms::SmsDevice_statics<void> {
	typedef typename X::root_type SmsDevice;
};
struct SmsDevice : generate<SmsDevice> {};

// SmsDeviceStatusChangedEventHandler
struct SmsDeviceStatusChangedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(SmsDevice* sender) = 0;
};

// GetSmsDeviceOperation
template<typename X> struct statics<GetSmsDeviceOperation, X> : X {
	typedef typename X::root_type GetSmsDeviceOperation;
};
struct GetSmsDeviceOperation : generate<GetSmsDeviceOperation> {};

// ISmsReceivedEventDetails
struct ISmsReceivedEventDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_MessageIndex(unsigned *value);
};
template<typename X> struct ISmsReceivedEventDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsReceivedEventDetails_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISmsReceivedEventDetails_adaptor::MessageIndex)->_get_MessageIndex(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MessageIndex;
	};
	ISmsReceivedEventDetails_adaptor() {}
};
template<typename X> struct adapt<ISmsReceivedEventDetails, X> : Windows::Devices::Sms::ISmsReceivedEventDetails_adaptor<X> { typedef adapt ISmsReceivedEventDetails; };
struct ISmsReceivedEventDetails : ISmsReceivedEventDetails_raw, generate<ISmsReceivedEventDetails> {};

// ISmsReceivedEventDetails2
struct ISmsReceivedEventDetails2_raw : IInspectable {
	virtual STDMETHODIMP _get_MessageClass(SmsMessageClass *value);
	virtual STDMETHODIMP _get_BinaryMessage(SmsBinaryMessage* *value);
};
template<typename X> struct ISmsReceivedEventDetails2_adaptor : X {
	union {
		struct : property {
			ptr<SmsBinaryMessage> get() { SmsBinaryMessage* value; hrcheck(enc(&ISmsReceivedEventDetails2_adaptor::BinaryMessage)->_get_BinaryMessage(&value)); return from_abi(value); }
			ptr<SmsBinaryMessage> operator()() { return get(); }
			operator ptr<SmsBinaryMessage> () { return get(); }
			ptr<SmsBinaryMessage> operator->() { return get(); }
		} BinaryMessage;
		struct : property {
			SmsMessageClass get() { SmsMessageClass value; hrcheck(enc(&ISmsReceivedEventDetails2_adaptor::MessageClass)->_get_MessageClass(&value)); return value; }
			SmsMessageClass operator()() { return get(); }
			operator SmsMessageClass () { return get(); }
		} MessageClass;
	};
	ISmsReceivedEventDetails2_adaptor() {}
};
template<typename X> struct adapt<ISmsReceivedEventDetails2, X> : Windows::Devices::Sms::ISmsReceivedEventDetails2_adaptor<X> { typedef adapt ISmsReceivedEventDetails2; };
struct ISmsReceivedEventDetails2 : ISmsReceivedEventDetails2_raw, generate<ISmsReceivedEventDetails2> {};

// SmsReceivedEventDetails
template<typename X> struct statics<SmsReceivedEventDetails, X> : X {
	typedef typename X::root_type SmsReceivedEventDetails;
};
struct SmsReceivedEventDetails : generate<SmsReceivedEventDetails> {};

// ISmsMessageBase
struct ISmsMessageBase_raw : IInspectable {
	virtual STDMETHODIMP _get_MessageType(SmsMessageType *value) = 0;
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_CellularClass(Sms::CellularClass *value) = 0;
	virtual STDMETHODIMP _get_MessageClass(SmsMessageClass *value) = 0;
	virtual STDMETHODIMP _get_SimIccId(HSTRING *value) = 0;
};
template<typename X> struct ISmsMessageBase_adaptor : X {
	union {
		struct : property {
			Sms::CellularClass get() { Sms::CellularClass value; hrcheck(enc(&ISmsMessageBase_adaptor::CellularClass)->_get_CellularClass(&value)); return value; }
			Sms::CellularClass operator()() { return get(); }
			operator Sms::CellularClass () { return get(); }
		} CellularClass;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsMessageBase_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			SmsMessageClass get() { SmsMessageClass value; hrcheck(enc(&ISmsMessageBase_adaptor::MessageClass)->_get_MessageClass(&value)); return value; }
			SmsMessageClass operator()() { return get(); }
			operator SmsMessageClass () { return get(); }
		} MessageClass;
		struct : property {
			SmsMessageType get() { SmsMessageType value; hrcheck(enc(&ISmsMessageBase_adaptor::MessageType)->_get_MessageType(&value)); return value; }
			SmsMessageType operator()() { return get(); }
			operator SmsMessageType () { return get(); }
		} MessageType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsMessageBase_adaptor::SimIccId)->_get_SimIccId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SimIccId;
	};
	ISmsMessageBase_adaptor() {}
};
template<typename X> struct adapt<ISmsMessageBase, X> : Windows::Devices::Sms::ISmsMessageBase_adaptor<X> { typedef adapt ISmsMessageBase; };
template<typename X> struct ISmsMessageBase_unadaptor : X {
	STDMETHODIMP _get_MessageType(SmsMessageType *value) { return hrtry([&, this] { get_prop(value, MessageType); }); }
	STDMETHODIMP _get_DeviceId(HSTRING *value) { return hrtry([&, this] { get_prop(value, DeviceId); }); }
	STDMETHODIMP _get_CellularClass(Sms::CellularClass *value) { return hrtry([&, this] { get_prop(value, CellularClass); }); }
	STDMETHODIMP _get_MessageClass(SmsMessageClass *value) { return hrtry([&, this] { get_prop(value, MessageClass); }); }
	STDMETHODIMP _get_SimIccId(HSTRING *value) { return hrtry([&, this] { get_prop(value, SimIccId); }); }
};
template<typename X> struct unadapt<ISmsMessageBase, X> : Windows::Devices::Sms::ISmsMessageBase_unadaptor<X> {};
struct ISmsMessageBase : ISmsMessageBase_raw, generate<ISmsMessageBase> {};

// ISmsTextMessage2
struct ISmsTextMessage2_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_To(HSTRING *value);
	virtual STDMETHODIMP _put_To(HSTRING value);
	virtual STDMETHODIMP _get_From(HSTRING *value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _put_Body(HSTRING value);
	virtual STDMETHODIMP _get_Encoding(SmsEncoding *value);
	virtual STDMETHODIMP _put_Encoding(SmsEncoding value);
	virtual STDMETHODIMP _get_CallbackNumber(HSTRING *value);
	virtual STDMETHODIMP _put_CallbackNumber(HSTRING value);
	virtual STDMETHODIMP _get_IsDeliveryNotificationEnabled(bool *value);
	virtual STDMETHODIMP _put_IsDeliveryNotificationEnabled(bool value);
	virtual STDMETHODIMP _get_RetryAttemptCount(int *value);
	virtual STDMETHODIMP _put_RetryAttemptCount(int value);
	virtual STDMETHODIMP _get_TeleserviceId(int *value);
	virtual STDMETHODIMP _get_ProtocolId(int *value);
};
template<typename X> struct ISmsTextMessage2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsTextMessage2_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsTextMessage2_adaptor::Body)->_put_Body(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Body;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsTextMessage2_adaptor::CallbackNumber)->_get_CallbackNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsTextMessage2_adaptor::CallbackNumber)->_put_CallbackNumber(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CallbackNumber;
		struct : property {
			SmsEncoding get() { SmsEncoding value; hrcheck(enc(&ISmsTextMessage2_adaptor::Encoding)->_get_Encoding(&value)); return value; }
			SmsEncoding operator()() { return get(); }
			operator SmsEncoding () { return get(); }
			void put(SmsEncoding value) { hrcheck(enc(&ISmsTextMessage2_adaptor::Encoding)->_put_Encoding(value)); }
			void operator=(SmsEncoding value) { put(value); }
			void operator()(SmsEncoding value) { put(value); }
		} Encoding;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsTextMessage2_adaptor::From)->_get_From(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} From;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmsTextMessage2_adaptor::IsDeliveryNotificationEnabled)->_get_IsDeliveryNotificationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISmsTextMessage2_adaptor::IsDeliveryNotificationEnabled)->_put_IsDeliveryNotificationEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDeliveryNotificationEnabled;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsTextMessage2_adaptor::ProtocolId)->_get_ProtocolId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ProtocolId;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsTextMessage2_adaptor::RetryAttemptCount)->_get_RetryAttemptCount(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmsTextMessage2_adaptor::RetryAttemptCount)->_put_RetryAttemptCount(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} RetryAttemptCount;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsTextMessage2_adaptor::TeleserviceId)->_get_TeleserviceId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} TeleserviceId;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsTextMessage2_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsTextMessage2_adaptor::To)->_get_To(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsTextMessage2_adaptor::To)->_put_To(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} To;
	};
	ISmsTextMessage2_adaptor() {}
};
template<typename X> struct adapt<ISmsTextMessage2, X> : Windows::Devices::Sms::ISmsTextMessage2_adaptor<X> { typedef adapt ISmsTextMessage2; };
struct ISmsTextMessage2 : ISmsTextMessage2_raw, generate<ISmsTextMessage2> {};

// SmsTextMessage2
template<typename X> struct statics<SmsTextMessage2, X> : X {
	typedef typename X::root_type SmsTextMessage2;
};
struct SmsTextMessage2 : generate<SmsTextMessage2> {};

// ISmsWapMessage
struct ISmsWapMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_To(HSTRING *value);
	virtual STDMETHODIMP _get_From(HSTRING *value);
	virtual STDMETHODIMP _get_ApplicationId(HSTRING *value);
	virtual STDMETHODIMP _get_ContentType(HSTRING *value);
	virtual STDMETHODIMP _get_BinaryBody(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_Headers(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
};
template<typename X> struct ISmsWapMessage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsWapMessage_adaptor::ApplicationId)->_get_ApplicationId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ApplicationId;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmsWapMessage_adaptor::BinaryBody)->_get_BinaryBody(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} BinaryBody;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsWapMessage_adaptor::ContentType)->_get_ContentType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ContentType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsWapMessage_adaptor::From)->_get_From(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} From;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&ISmsWapMessage_adaptor::Headers)->_get_Headers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} Headers;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsWapMessage_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsWapMessage_adaptor::To)->_get_To(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} To;
	};
	ISmsWapMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsWapMessage, X> : Windows::Devices::Sms::ISmsWapMessage_adaptor<X> { typedef adapt ISmsWapMessage; };
struct ISmsWapMessage : ISmsWapMessage_raw, generate<ISmsWapMessage> {};

// SmsWapMessage
template<typename X> struct statics<SmsWapMessage, X> : X {
	typedef typename X::root_type SmsWapMessage;
};
struct SmsWapMessage : generate<SmsWapMessage> {};

// ISmsAppMessage
struct ISmsAppMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_To(HSTRING *value);
	virtual STDMETHODIMP _put_To(HSTRING value);
	virtual STDMETHODIMP _get_From(HSTRING *value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _put_Body(HSTRING value);
	virtual STDMETHODIMP _get_CallbackNumber(HSTRING *value);
	virtual STDMETHODIMP _put_CallbackNumber(HSTRING value);
	virtual STDMETHODIMP _get_IsDeliveryNotificationEnabled(bool *value);
	virtual STDMETHODIMP _put_IsDeliveryNotificationEnabled(bool value);
	virtual STDMETHODIMP _get_RetryAttemptCount(int *value);
	virtual STDMETHODIMP _put_RetryAttemptCount(int value);
	virtual STDMETHODIMP _get_Encoding(SmsEncoding *value);
	virtual STDMETHODIMP _put_Encoding(SmsEncoding value);
	virtual STDMETHODIMP _get_PortNumber(int *value);
	virtual STDMETHODIMP _put_PortNumber(int value);
	virtual STDMETHODIMP _get_TeleserviceId(int *value);
	virtual STDMETHODIMP _put_TeleserviceId(int value);
	virtual STDMETHODIMP _get_ProtocolId(int *value);
	virtual STDMETHODIMP _put_ProtocolId(int value);
	virtual STDMETHODIMP _get_BinaryBody(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_BinaryBody(Storage::Streams::IBuffer* value);
};
template<typename X> struct ISmsAppMessage_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISmsAppMessage_adaptor::BinaryBody)->_get_BinaryBody(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&ISmsAppMessage_adaptor::BinaryBody)->_put_BinaryBody(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} BinaryBody;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsAppMessage_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsAppMessage_adaptor::Body)->_put_Body(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Body;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsAppMessage_adaptor::CallbackNumber)->_get_CallbackNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsAppMessage_adaptor::CallbackNumber)->_put_CallbackNumber(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CallbackNumber;
		struct : property {
			SmsEncoding get() { SmsEncoding value; hrcheck(enc(&ISmsAppMessage_adaptor::Encoding)->_get_Encoding(&value)); return value; }
			SmsEncoding operator()() { return get(); }
			operator SmsEncoding () { return get(); }
			void put(SmsEncoding value) { hrcheck(enc(&ISmsAppMessage_adaptor::Encoding)->_put_Encoding(value)); }
			void operator=(SmsEncoding value) { put(value); }
			void operator()(SmsEncoding value) { put(value); }
		} Encoding;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsAppMessage_adaptor::From)->_get_From(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} From;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmsAppMessage_adaptor::IsDeliveryNotificationEnabled)->_get_IsDeliveryNotificationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISmsAppMessage_adaptor::IsDeliveryNotificationEnabled)->_put_IsDeliveryNotificationEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDeliveryNotificationEnabled;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsAppMessage_adaptor::PortNumber)->_get_PortNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmsAppMessage_adaptor::PortNumber)->_put_PortNumber(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} PortNumber;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsAppMessage_adaptor::ProtocolId)->_get_ProtocolId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmsAppMessage_adaptor::ProtocolId)->_put_ProtocolId(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ProtocolId;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsAppMessage_adaptor::RetryAttemptCount)->_get_RetryAttemptCount(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmsAppMessage_adaptor::RetryAttemptCount)->_put_RetryAttemptCount(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} RetryAttemptCount;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsAppMessage_adaptor::TeleserviceId)->_get_TeleserviceId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISmsAppMessage_adaptor::TeleserviceId)->_put_TeleserviceId(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} TeleserviceId;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsAppMessage_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsAppMessage_adaptor::To)->_get_To(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsAppMessage_adaptor::To)->_put_To(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} To;
	};
	ISmsAppMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsAppMessage, X> : Windows::Devices::Sms::ISmsAppMessage_adaptor<X> { typedef adapt ISmsAppMessage; };
struct ISmsAppMessage : ISmsAppMessage_raw, generate<ISmsAppMessage> {};

// SmsAppMessage
template<typename X> struct statics<SmsAppMessage, X> : X {
	typedef typename X::root_type SmsAppMessage;
};
struct SmsAppMessage : generate<SmsAppMessage> {};

// ISmsBroadcastMessage
struct ISmsBroadcastMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_To(HSTRING *value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _get_Channel(int *value);
	virtual STDMETHODIMP _get_GeographicalScope(SmsGeographicalScope *value);
	virtual STDMETHODIMP _get_MessageCode(int *value);
	virtual STDMETHODIMP _get_UpdateNumber(int *value);
	virtual STDMETHODIMP _get_BroadcastType(SmsBroadcastType *value);
	virtual STDMETHODIMP _get_IsEmergencyAlert(bool *value);
	virtual STDMETHODIMP _get_IsUserPopupRequested(bool *value);
};
template<typename X> struct ISmsBroadcastMessage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Body;
		struct : property {
			SmsBroadcastType get() { SmsBroadcastType value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::BroadcastType)->_get_BroadcastType(&value)); return value; }
			SmsBroadcastType operator()() { return get(); }
			operator SmsBroadcastType () { return get(); }
		} BroadcastType;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Channel;
		struct : property {
			SmsGeographicalScope get() { SmsGeographicalScope value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::GeographicalScope)->_get_GeographicalScope(&value)); return value; }
			SmsGeographicalScope operator()() { return get(); }
			operator SmsGeographicalScope () { return get(); }
		} GeographicalScope;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::IsEmergencyAlert)->_get_IsEmergencyAlert(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsEmergencyAlert;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::IsUserPopupRequested)->_get_IsUserPopupRequested(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsUserPopupRequested;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::MessageCode)->_get_MessageCode(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MessageCode;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::To)->_get_To(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} To;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsBroadcastMessage_adaptor::UpdateNumber)->_get_UpdateNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} UpdateNumber;
	};
	ISmsBroadcastMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsBroadcastMessage, X> : Windows::Devices::Sms::ISmsBroadcastMessage_adaptor<X> { typedef adapt ISmsBroadcastMessage; };
struct ISmsBroadcastMessage : ISmsBroadcastMessage_raw, generate<ISmsBroadcastMessage> {};

// SmsBroadcastMessage
template<typename X> struct statics<SmsBroadcastMessage, X> : X {
	typedef typename X::root_type SmsBroadcastMessage;
};
struct SmsBroadcastMessage : generate<SmsBroadcastMessage> {};

// ISmsVoicemailMessage
struct ISmsVoicemailMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_To(HSTRING *value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _get_MessageCount(Foundation::IReference<int>* *value);
};
template<typename X> struct ISmsVoicemailMessage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsVoicemailMessage_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Body;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&ISmsVoicemailMessage_adaptor::MessageCount)->_get_MessageCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} MessageCount;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsVoicemailMessage_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsVoicemailMessage_adaptor::To)->_get_To(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} To;
	};
	ISmsVoicemailMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsVoicemailMessage, X> : Windows::Devices::Sms::ISmsVoicemailMessage_adaptor<X> { typedef adapt ISmsVoicemailMessage; };
struct ISmsVoicemailMessage : ISmsVoicemailMessage_raw, generate<ISmsVoicemailMessage> {};

// SmsVoicemailMessage
template<typename X> struct statics<SmsVoicemailMessage, X> : X {
	typedef typename X::root_type SmsVoicemailMessage;
};
struct SmsVoicemailMessage : generate<SmsVoicemailMessage> {};

// ISmsStatusMessage
struct ISmsStatusMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_To(HSTRING *value);
	virtual STDMETHODIMP _get_From(HSTRING *value);
	virtual STDMETHODIMP _get_Body(HSTRING *value);
	virtual STDMETHODIMP _get_Status(int *value);
	virtual STDMETHODIMP _get_MessageReferenceNumber(int *value);
	virtual STDMETHODIMP _get_ServiceCenterTimestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_DischargeTime(Foundation::DateTime *value);
};
template<typename X> struct ISmsStatusMessage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsStatusMessage_adaptor::Body)->_get_Body(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Body;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsStatusMessage_adaptor::DischargeTime)->_get_DischargeTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} DischargeTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsStatusMessage_adaptor::From)->_get_From(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} From;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsStatusMessage_adaptor::MessageReferenceNumber)->_get_MessageReferenceNumber(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} MessageReferenceNumber;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISmsStatusMessage_adaptor::ServiceCenterTimestamp)->_get_ServiceCenterTimestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} ServiceCenterTimestamp;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsStatusMessage_adaptor::Status)->_get_Status(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Status;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsStatusMessage_adaptor::To)->_get_To(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} To;
	};
	ISmsStatusMessage_adaptor() {}
};
template<typename X> struct adapt<ISmsStatusMessage, X> : Windows::Devices::Sms::ISmsStatusMessage_adaptor<X> { typedef adapt ISmsStatusMessage; };
struct ISmsStatusMessage : ISmsStatusMessage_raw, generate<ISmsStatusMessage> {};

// SmsStatusMessage
template<typename X> struct statics<SmsStatusMessage, X> : X {
	typedef typename X::root_type SmsStatusMessage;
};
struct SmsStatusMessage : generate<SmsStatusMessage> {};

// ISmsSendMessageResult
struct ISmsSendMessageResult_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSuccessful(bool *value);
	virtual STDMETHODIMP _get_MessageReferenceNumbers(Foundation::Collections::IVectorView<int>* *value);
	virtual STDMETHODIMP _get_CellularClass(Sms::CellularClass *value);
	virtual STDMETHODIMP _get_ModemErrorCode(SmsModemErrorCode *value);
	virtual STDMETHODIMP _get_IsErrorTransient(bool *value);
	virtual STDMETHODIMP _get_NetworkCauseCode(int *value);
	virtual STDMETHODIMP _get_TransportFailureCause(int *value);
};
template<typename X> struct ISmsSendMessageResult_adaptor : X {
	union {
		struct : property {
			Sms::CellularClass get() { Sms::CellularClass value; hrcheck(enc(&ISmsSendMessageResult_adaptor::CellularClass)->_get_CellularClass(&value)); return value; }
			Sms::CellularClass operator()() { return get(); }
			operator Sms::CellularClass () { return get(); }
		} CellularClass;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmsSendMessageResult_adaptor::IsErrorTransient)->_get_IsErrorTransient(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsErrorTransient;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISmsSendMessageResult_adaptor::IsSuccessful)->_get_IsSuccessful(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSuccessful;
		struct : property {
			ptr<Foundation::Collections::IVectorView<int>> get() { Foundation::Collections::IVectorView<int>* value; hrcheck(enc(&ISmsSendMessageResult_adaptor::MessageReferenceNumbers)->_get_MessageReferenceNumbers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<int>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<int>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<int>> operator->() { return get(); }
		} MessageReferenceNumbers;
		struct : property {
			SmsModemErrorCode get() { SmsModemErrorCode value; hrcheck(enc(&ISmsSendMessageResult_adaptor::ModemErrorCode)->_get_ModemErrorCode(&value)); return value; }
			SmsModemErrorCode operator()() { return get(); }
			operator SmsModemErrorCode () { return get(); }
		} ModemErrorCode;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsSendMessageResult_adaptor::NetworkCauseCode)->_get_NetworkCauseCode(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NetworkCauseCode;
		struct : property {
			int get() { int value; hrcheck(enc(&ISmsSendMessageResult_adaptor::TransportFailureCause)->_get_TransportFailureCause(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} TransportFailureCause;
	};
	ISmsSendMessageResult_adaptor() {}
};
template<typename X> struct adapt<ISmsSendMessageResult, X> : Windows::Devices::Sms::ISmsSendMessageResult_adaptor<X> { typedef adapt ISmsSendMessageResult; };
struct ISmsSendMessageResult : ISmsSendMessageResult_raw, generate<ISmsSendMessageResult> {};

// SmsSendMessageResult
template<typename X> struct statics<SmsSendMessageResult, X> : X {
	typedef typename X::root_type SmsSendMessageResult;
};
struct SmsSendMessageResult : generate<SmsSendMessageResult> {};

// ISmsDevice2Statics
struct ISmsDevice2Statics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
	virtual STDMETHODIMP _FromId(HSTRING deviceId, SmsDevice2* *value);
	virtual STDMETHODIMP _GetDefault(SmsDevice2* *value);
	virtual STDMETHODIMP _FromParentId(HSTRING parentDeviceId, SmsDevice2* *value);
};

// ISmsDevice2
struct ISmsDevice2_raw : IInspectable {
	virtual STDMETHODIMP _get_SmscAddress(HSTRING *value);
	virtual STDMETHODIMP _put_SmscAddress(HSTRING value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_ParentDeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_AccountPhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _get_CellularClass(Sms::CellularClass *value);
	virtual STDMETHODIMP _get_DeviceStatus(SmsDeviceStatus *value);
	virtual STDMETHODIMP _CalculateLength(ISmsMessageBase* message, SmsEncodedLength *value);
	virtual STDMETHODIMP _SendMessageAndGetResultAsync(ISmsMessageBase* message, Foundation::IAsyncOperation<SmsSendMessageResult*>* *asyncInfo);
	virtual STDMETHODIMP _add_DeviceStatusChanged(Foundation::TypedEventHandler<SmsDevice2*, IInspectable*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_DeviceStatusChanged(Foundation::EventRegistrationToken eventCookie);
};
template<typename X> struct ISmsDevice2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsDevice2_adaptor::AccountPhoneNumber)->_get_AccountPhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccountPhoneNumber;
		struct : property {
			Sms::CellularClass get() { Sms::CellularClass value; hrcheck(enc(&ISmsDevice2_adaptor::CellularClass)->_get_CellularClass(&value)); return value; }
			Sms::CellularClass operator()() { return get(); }
			operator Sms::CellularClass () { return get(); }
		} CellularClass;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsDevice2_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			SmsDeviceStatus get() { SmsDeviceStatus value; hrcheck(enc(&ISmsDevice2_adaptor::DeviceStatus)->_get_DeviceStatus(&value)); return value; }
			SmsDeviceStatus operator()() { return get(); }
			operator SmsDeviceStatus () { return get(); }
		} DeviceStatus;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsDevice2_adaptor::ParentDeviceId)->_get_ParentDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ParentDeviceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsDevice2_adaptor::SmscAddress)->_get_SmscAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISmsDevice2_adaptor::SmscAddress)->_put_SmscAddress(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SmscAddress;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SmsDevice2>, object>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&ISmsDevice2_adaptor::DeviceStatusChanged)->_add_DeviceStatusChanged(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&ISmsDevice2_adaptor::DeviceStatusChanged)->_remove_DeviceStatusChanged(eventCookie)); }
		} DeviceStatusChanged;
	};
	SmsEncodedLength CalculateLength(pptr<ISmsMessageBase> message) { SmsEncodedLength value; hrcheck(X::get()->_CalculateLength(message, &value)); return value; }
	ptr<Foundation::IAsyncOperation<ptr<SmsSendMessageResult>>> SendMessageAndGetResultAsync(pptr<ISmsMessageBase> message) { Foundation::IAsyncOperation<SmsSendMessageResult*>* asyncInfo; hrcheck(X::get()->_SendMessageAndGetResultAsync(message, &asyncInfo)); return from_abi(asyncInfo); }
	ISmsDevice2_adaptor() {}
};
template<typename X> struct adapt<ISmsDevice2, X> : Windows::Devices::Sms::ISmsDevice2_adaptor<X> { typedef adapt ISmsDevice2; };
struct ISmsDevice2 : ISmsDevice2_raw, generate<ISmsDevice2> {};

// SmsDevice2
template<typename> struct SmsDevice2_statics {
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<SmsDevice2, ISmsDevice2Statics>()->_GetDeviceSelector(&value)); return from_abi(value); }
	static ptr<SmsDevice2> FromId(hstring_ref deviceId) { SmsDevice2* value; hrcheck(get_activation_factory<SmsDevice2, ISmsDevice2Statics>()->_FromId(deviceId, &value)); return from_abi(value); }
	static ptr<SmsDevice2> GetDefault() { SmsDevice2* value; hrcheck(get_activation_factory<SmsDevice2, ISmsDevice2Statics>()->_GetDefault(&value)); return from_abi(value); }
	static ptr<SmsDevice2> FromParentId(hstring_ref parentDeviceId) { SmsDevice2* value; hrcheck(get_activation_factory<SmsDevice2, ISmsDevice2Statics>()->_FromParentId(parentDeviceId, &value)); return from_abi(value); }
};

template<typename X> struct statics<SmsDevice2, X> : X, Windows::Devices::Sms::SmsDevice2_statics<void> {
	typedef typename X::root_type SmsDevice2;
};
struct SmsDevice2 : generate<SmsDevice2> {};

// ISmsMessageReceivedTriggerDetails
struct ISmsMessageReceivedTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_MessageType(SmsMessageType *value);
	virtual STDMETHODIMP _get_TextMessage(SmsTextMessage2* *value);
	virtual STDMETHODIMP _get_WapMessage(SmsWapMessage* *value);
	virtual STDMETHODIMP _get_AppMessage(SmsAppMessage* *value);
	virtual STDMETHODIMP _get_BroadcastMessage(SmsBroadcastMessage* *value);
	virtual STDMETHODIMP _get_VoicemailMessage(SmsVoicemailMessage* *value);
	virtual STDMETHODIMP _get_StatusMessage(SmsStatusMessage* *value);
	virtual STDMETHODIMP _Drop();
	virtual STDMETHODIMP _Accept();
};
template<typename X> struct ISmsMessageReceivedTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<SmsAppMessage> get() { SmsAppMessage* value; hrcheck(enc(&ISmsMessageReceivedTriggerDetails_adaptor::AppMessage)->_get_AppMessage(&value)); return from_abi(value); }
			ptr<SmsAppMessage> operator()() { return get(); }
			operator ptr<SmsAppMessage> () { return get(); }
			ptr<SmsAppMessage> operator->() { return get(); }
		} AppMessage;
		struct : property {
			ptr<SmsBroadcastMessage> get() { SmsBroadcastMessage* value; hrcheck(enc(&ISmsMessageReceivedTriggerDetails_adaptor::BroadcastMessage)->_get_BroadcastMessage(&value)); return from_abi(value); }
			ptr<SmsBroadcastMessage> operator()() { return get(); }
			operator ptr<SmsBroadcastMessage> () { return get(); }
			ptr<SmsBroadcastMessage> operator->() { return get(); }
		} BroadcastMessage;
		struct : property {
			SmsMessageType get() { SmsMessageType value; hrcheck(enc(&ISmsMessageReceivedTriggerDetails_adaptor::MessageType)->_get_MessageType(&value)); return value; }
			SmsMessageType operator()() { return get(); }
			operator SmsMessageType () { return get(); }
		} MessageType;
		struct : property {
			ptr<SmsStatusMessage> get() { SmsStatusMessage* value; hrcheck(enc(&ISmsMessageReceivedTriggerDetails_adaptor::StatusMessage)->_get_StatusMessage(&value)); return from_abi(value); }
			ptr<SmsStatusMessage> operator()() { return get(); }
			operator ptr<SmsStatusMessage> () { return get(); }
			ptr<SmsStatusMessage> operator->() { return get(); }
		} StatusMessage;
		struct : property {
			ptr<SmsTextMessage2> get() { SmsTextMessage2* value; hrcheck(enc(&ISmsMessageReceivedTriggerDetails_adaptor::TextMessage)->_get_TextMessage(&value)); return from_abi(value); }
			ptr<SmsTextMessage2> operator()() { return get(); }
			operator ptr<SmsTextMessage2> () { return get(); }
			ptr<SmsTextMessage2> operator->() { return get(); }
		} TextMessage;
		struct : property {
			ptr<SmsVoicemailMessage> get() { SmsVoicemailMessage* value; hrcheck(enc(&ISmsMessageReceivedTriggerDetails_adaptor::VoicemailMessage)->_get_VoicemailMessage(&value)); return from_abi(value); }
			ptr<SmsVoicemailMessage> operator()() { return get(); }
			operator ptr<SmsVoicemailMessage> () { return get(); }
			ptr<SmsVoicemailMessage> operator->() { return get(); }
		} VoicemailMessage;
		struct : property {
			ptr<SmsWapMessage> get() { SmsWapMessage* value; hrcheck(enc(&ISmsMessageReceivedTriggerDetails_adaptor::WapMessage)->_get_WapMessage(&value)); return from_abi(value); }
			ptr<SmsWapMessage> operator()() { return get(); }
			operator ptr<SmsWapMessage> () { return get(); }
			ptr<SmsWapMessage> operator->() { return get(); }
		} WapMessage;
	};
	void Drop() { hrcheck(X::get()->_Drop()); }
	void Accept() { hrcheck(X::get()->_Accept()); }
	ISmsMessageReceivedTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<ISmsMessageReceivedTriggerDetails, X> : Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails_adaptor<X> { typedef adapt ISmsMessageReceivedTriggerDetails; };
struct ISmsMessageReceivedTriggerDetails : ISmsMessageReceivedTriggerDetails_raw, generate<ISmsMessageReceivedTriggerDetails> {};

// SmsMessageReceivedTriggerDetails
template<typename X> struct statics<SmsMessageReceivedTriggerDetails, X> : X {
	typedef typename X::root_type SmsMessageReceivedTriggerDetails;
};
struct SmsMessageReceivedTriggerDetails : generate<SmsMessageReceivedTriggerDetails> {};

// ISmsFilterRule
struct ISmsFilterRule_raw : IInspectable {
	virtual STDMETHODIMP _get_MessageType(SmsMessageType *value);
	virtual STDMETHODIMP _get_ImsiPrefixes(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_DeviceIds(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_SenderNumbers(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_TextMessagePrefixes(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_PortNumbers(Foundation::Collections::IVector<int>* *value);
	virtual STDMETHODIMP _get_CellularClass(Sms::CellularClass *value);
	virtual STDMETHODIMP _put_CellularClass(Sms::CellularClass value);
	virtual STDMETHODIMP _get_ProtocolIds(Foundation::Collections::IVector<int>* *value);
	virtual STDMETHODIMP _get_TeleserviceIds(Foundation::Collections::IVector<int>* *value);
	virtual STDMETHODIMP _get_WapApplicationIds(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_WapContentTypes(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_BroadcastTypes(Foundation::Collections::IVector<SmsBroadcastType>* *value);
	virtual STDMETHODIMP _get_BroadcastChannels(Foundation::Collections::IVector<int>* *value);
};
template<typename X> struct ISmsFilterRule_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<int>> get() { Foundation::Collections::IVector<int>* value; hrcheck(enc(&ISmsFilterRule_adaptor::BroadcastChannels)->_get_BroadcastChannels(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<int>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<int>> () { return get(); }
			ptr<Foundation::Collections::IVector<int>> operator->() { return get(); }
		} BroadcastChannels;
		struct : property {
			ptr<Foundation::Collections::IVector<SmsBroadcastType>> get() { Foundation::Collections::IVector<SmsBroadcastType>* value; hrcheck(enc(&ISmsFilterRule_adaptor::BroadcastTypes)->_get_BroadcastTypes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<SmsBroadcastType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<SmsBroadcastType>> () { return get(); }
			ptr<Foundation::Collections::IVector<SmsBroadcastType>> operator->() { return get(); }
		} BroadcastTypes;
		struct : property {
			Sms::CellularClass get() { Sms::CellularClass value; hrcheck(enc(&ISmsFilterRule_adaptor::CellularClass)->_get_CellularClass(&value)); return value; }
			Sms::CellularClass operator()() { return get(); }
			operator Sms::CellularClass () { return get(); }
			void put(Sms::CellularClass value) { hrcheck(enc(&ISmsFilterRule_adaptor::CellularClass)->_put_CellularClass(value)); }
			void operator=(Sms::CellularClass value) { put(value); }
			void operator()(Sms::CellularClass value) { put(value); }
		} CellularClass;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ISmsFilterRule_adaptor::DeviceIds)->_get_DeviceIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} DeviceIds;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ISmsFilterRule_adaptor::ImsiPrefixes)->_get_ImsiPrefixes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} ImsiPrefixes;
		struct : property {
			SmsMessageType get() { SmsMessageType value; hrcheck(enc(&ISmsFilterRule_adaptor::MessageType)->_get_MessageType(&value)); return value; }
			SmsMessageType operator()() { return get(); }
			operator SmsMessageType () { return get(); }
		} MessageType;
		struct : property {
			ptr<Foundation::Collections::IVector<int>> get() { Foundation::Collections::IVector<int>* value; hrcheck(enc(&ISmsFilterRule_adaptor::PortNumbers)->_get_PortNumbers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<int>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<int>> () { return get(); }
			ptr<Foundation::Collections::IVector<int>> operator->() { return get(); }
		} PortNumbers;
		struct : property {
			ptr<Foundation::Collections::IVector<int>> get() { Foundation::Collections::IVector<int>* value; hrcheck(enc(&ISmsFilterRule_adaptor::ProtocolIds)->_get_ProtocolIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<int>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<int>> () { return get(); }
			ptr<Foundation::Collections::IVector<int>> operator->() { return get(); }
		} ProtocolIds;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ISmsFilterRule_adaptor::SenderNumbers)->_get_SenderNumbers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} SenderNumbers;
		struct : property {
			ptr<Foundation::Collections::IVector<int>> get() { Foundation::Collections::IVector<int>* value; hrcheck(enc(&ISmsFilterRule_adaptor::TeleserviceIds)->_get_TeleserviceIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<int>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<int>> () { return get(); }
			ptr<Foundation::Collections::IVector<int>> operator->() { return get(); }
		} TeleserviceIds;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ISmsFilterRule_adaptor::TextMessagePrefixes)->_get_TextMessagePrefixes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} TextMessagePrefixes;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ISmsFilterRule_adaptor::WapApplicationIds)->_get_WapApplicationIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} WapApplicationIds;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ISmsFilterRule_adaptor::WapContentTypes)->_get_WapContentTypes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} WapContentTypes;
	};
	ISmsFilterRule_adaptor() {}
};
template<typename X> struct adapt<ISmsFilterRule, X> : Windows::Devices::Sms::ISmsFilterRule_adaptor<X> { typedef adapt ISmsFilterRule; };
struct ISmsFilterRule : ISmsFilterRule_raw, generate<ISmsFilterRule> {};

// ISmsFilterRuleFactory
struct ISmsFilterRuleFactory : IInspectable {
	virtual STDMETHODIMP _CreateFilterRule(SmsMessageType messageType, SmsFilterRule* *value);
};

// SmsFilterRule
template<typename> struct SmsFilterRule_statics {
	static SmsFilterRule *activate(SmsMessageType messageType) { SmsFilterRule *value; hrcheck(get_activation_factory<SmsFilterRule, ISmsFilterRuleFactory>()->_CreateFilterRule(messageType, &value)); return value; }
};

template<typename X> struct statics<SmsFilterRule, X> : X, Windows::Devices::Sms::SmsFilterRule_statics<void> {
	using Windows::Devices::Sms::SmsFilterRule_statics<void>::activate;
	typedef typename X::root_type SmsFilterRule;
};
struct SmsFilterRule : generate<SmsFilterRule> {};

// ISmsFilterRules
struct ISmsFilterRules_raw : IInspectable {
	virtual STDMETHODIMP _get_ActionType(SmsFilterActionType *value);
	virtual STDMETHODIMP _get_Rules(Foundation::Collections::IVector<SmsFilterRule*>* *value);
};
template<typename X> struct ISmsFilterRules_adaptor : X {
	union {
		struct : property {
			SmsFilterActionType get() { SmsFilterActionType value; hrcheck(enc(&ISmsFilterRules_adaptor::ActionType)->_get_ActionType(&value)); return value; }
			SmsFilterActionType operator()() { return get(); }
			operator SmsFilterActionType () { return get(); }
		} ActionType;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SmsFilterRule>>> get() { Foundation::Collections::IVector<SmsFilterRule*>* value; hrcheck(enc(&ISmsFilterRules_adaptor::Rules)->_get_Rules(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SmsFilterRule>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SmsFilterRule>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SmsFilterRule>>> operator->() { return get(); }
		} Rules;
	};
	ISmsFilterRules_adaptor() {}
};
template<typename X> struct adapt<ISmsFilterRules, X> : Windows::Devices::Sms::ISmsFilterRules_adaptor<X> { typedef adapt ISmsFilterRules; };
struct ISmsFilterRules : ISmsFilterRules_raw, generate<ISmsFilterRules> {};

// ISmsFilterRulesFactory
struct ISmsFilterRulesFactory : IInspectable {
	virtual STDMETHODIMP _CreateFilterRules(SmsFilterActionType actionType, SmsFilterRules* *value);
};

// SmsFilterRules
template<typename> struct SmsFilterRules_statics {
	static SmsFilterRules *activate(SmsFilterActionType actionType) { SmsFilterRules *value; hrcheck(get_activation_factory<SmsFilterRules, ISmsFilterRulesFactory>()->_CreateFilterRules(actionType, &value)); return value; }
};

template<typename X> struct statics<SmsFilterRules, X> : X, Windows::Devices::Sms::SmsFilterRules_statics<void> {
	using Windows::Devices::Sms::SmsFilterRules_statics<void>::activate;
	typedef typename X::root_type SmsFilterRules;
};
struct SmsFilterRules : generate<SmsFilterRules> {};

// ISmsMessageRegistrationStatics
struct ISmsMessageRegistrationStatics : IInspectable {
	virtual STDMETHODIMP _get_AllRegistrations(Foundation::Collections::IVectorView<SmsMessageRegistration*>* *value);
	virtual STDMETHODIMP _Register(HSTRING id, SmsFilterRules* filterRules, SmsMessageRegistration* *value);
};

// ISmsMessageRegistration
struct ISmsMessageRegistration_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _Unregister();
	virtual STDMETHODIMP _add_MessageReceived(Foundation::TypedEventHandler<SmsMessageRegistration*, SmsMessageReceivedTriggerDetails*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_MessageReceived(Foundation::EventRegistrationToken eventCookie);
};
template<typename X> struct ISmsMessageRegistration_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISmsMessageRegistration_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SmsMessageRegistration>, ptr<SmsMessageReceivedTriggerDetails>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&ISmsMessageRegistration_adaptor::MessageReceived)->_add_MessageReceived(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&ISmsMessageRegistration_adaptor::MessageReceived)->_remove_MessageReceived(eventCookie)); }
		} MessageReceived;
	};
	void Unregister() { hrcheck(X::get()->_Unregister()); }
	ISmsMessageRegistration_adaptor() {}
};
template<typename X> struct adapt<ISmsMessageRegistration, X> : Windows::Devices::Sms::ISmsMessageRegistration_adaptor<X> { typedef adapt ISmsMessageRegistration; };
struct ISmsMessageRegistration : ISmsMessageRegistration_raw, generate<ISmsMessageRegistration> {};

// SmsMessageRegistration
template<typename> struct SmsMessageRegistration_statics {
	static struct _AllRegistrations : property {
		ptr<Foundation::Collections::IVectorView<ptr<SmsMessageRegistration>>> get() { Foundation::Collections::IVectorView<SmsMessageRegistration*>* value; hrcheck(get_activation_factory<SmsMessageRegistration, ISmsMessageRegistrationStatics>()->_get_AllRegistrations(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<ptr<SmsMessageRegistration>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<ptr<SmsMessageRegistration>>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<ptr<SmsMessageRegistration>>> operator->() { return get(); }
	} AllRegistrations;
	static ptr<SmsMessageRegistration> Register(hstring_ref id, pptr<SmsFilterRules> filterRules) { SmsMessageRegistration* value; hrcheck(get_activation_factory<SmsMessageRegistration, ISmsMessageRegistrationStatics>()->_Register(id, filterRules, &value)); return from_abi(value); }
};
template<typename X> typename SmsMessageRegistration_statics<X>::_AllRegistrations SmsMessageRegistration_statics<X>::AllRegistrations;

template<typename X> struct statics<SmsMessageRegistration, X> : X, Windows::Devices::Sms::SmsMessageRegistration_statics<void> {
	typedef typename X::root_type SmsMessageRegistration;
};
struct SmsMessageRegistration : generate<SmsMessageRegistration> {};
}}}
} // namespace iso_winrt
