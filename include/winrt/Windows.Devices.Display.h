#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Display

#include "Windows.Devices.Display.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.Graphics.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Devices::Display::DisplayMonitorPhysicalConnectorKind> : enum_type<int> {};
template<> struct def<Windows::Devices::Display::DisplayMonitorDescriptorKind> : enum_type<int> {};
template<> struct def<Windows::Devices::Display::DisplayMonitorUsageKind> : enum_type<int> {};
template<> struct def<Windows::Devices::Display::DisplayMonitorConnectionKind> : enum_type<int> {};
template<> struct def<Windows::Devices::Display::IDisplayMonitor> : interface_type<> {};
template<> struct def<Windows::Devices::Display::IDisplayMonitorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Display::DisplayMonitor> : class_type<Platform::Object, Windows::Devices::Display::IDisplayMonitor> {};

// uuids

template<> struct uuid<Windows::Devices::Display::IDisplayMonitor> { define_guid(0x1F6B15D4, 0x1D01, 0x4C51, 0x87, 0xE2, 0x6F, 0x95, 0x4A, 0x77, 0x2B, 0x59);};
template<> struct uuid<Windows::Devices::Display::IDisplayMonitorStatics> { define_guid(0x6EAE698F, 0xA228, 0x4C05, 0x82, 0x1D, 0xB6, 0x95, 0xD6, 0x67, 0xDE, 0x8E);};

// types

namespace Windows { namespace Devices { namespace Display {

// IDisplayMonitor
struct IDisplayMonitor_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_ConnectionKind(DisplayMonitorConnectionKind *value);
	virtual STDMETHODIMP _get_PhysicalConnector(DisplayMonitorPhysicalConnectorKind *value);
	virtual STDMETHODIMP _get_DisplayAdapterDeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayAdapterId(Graphics::DisplayAdapterId *value);
	virtual STDMETHODIMP _get_DisplayAdapterTargetId(unsigned *value);
	virtual STDMETHODIMP _get_UsageKind(DisplayMonitorUsageKind *value);
	virtual STDMETHODIMP _get_NativeResolutionInRawPixels(Graphics::SizeInt32 *value);
	virtual STDMETHODIMP _get_PhysicalSizeInInches(Foundation::IReference<Foundation::Size>* *value);
	virtual STDMETHODIMP _get_RawDpiX(float *value);
	virtual STDMETHODIMP _get_RawDpiY(float *value);
	virtual STDMETHODIMP _get_RedPrimary(Foundation::Point *value);
	virtual STDMETHODIMP _get_GreenPrimary(Foundation::Point *value);
	virtual STDMETHODIMP _get_BluePrimary(Foundation::Point *value);
	virtual STDMETHODIMP _get_WhitePoint(Foundation::Point *value);
	virtual STDMETHODIMP _get_MaxLuminanceInNits(float *value);
	virtual STDMETHODIMP _get_MinLuminanceInNits(float *value);
	virtual STDMETHODIMP _get_MaxAverageFullFrameLuminanceInNits(float *value);
	virtual STDMETHODIMP _GetDescriptor(DisplayMonitorDescriptorKind descriptorKind, unsigned *valueSize, unsigned char **value);
};
template<typename X> struct IDisplayMonitor_adaptor : X {
	union {
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IDisplayMonitor_adaptor::BluePrimary)->_get_BluePrimary(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} BluePrimary;
		struct : property {
			DisplayMonitorConnectionKind get() { DisplayMonitorConnectionKind value; hrcheck(enc(&IDisplayMonitor_adaptor::ConnectionKind)->_get_ConnectionKind(&value)); return value; }
			DisplayMonitorConnectionKind operator()() { return get(); }
			operator DisplayMonitorConnectionKind () { return get(); }
		} ConnectionKind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDisplayMonitor_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDisplayMonitor_adaptor::DisplayAdapterDeviceId)->_get_DisplayAdapterDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayAdapterDeviceId;
		struct : property {
			Graphics::DisplayAdapterId get() { Graphics::DisplayAdapterId value; hrcheck(enc(&IDisplayMonitor_adaptor::DisplayAdapterId)->_get_DisplayAdapterId(&value)); return value; }
			Graphics::DisplayAdapterId operator()() { return get(); }
			operator Graphics::DisplayAdapterId () { return get(); }
		} DisplayAdapterId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IDisplayMonitor_adaptor::DisplayAdapterTargetId)->_get_DisplayAdapterTargetId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} DisplayAdapterTargetId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDisplayMonitor_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IDisplayMonitor_adaptor::GreenPrimary)->_get_GreenPrimary(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} GreenPrimary;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayMonitor_adaptor::MaxAverageFullFrameLuminanceInNits)->_get_MaxAverageFullFrameLuminanceInNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MaxAverageFullFrameLuminanceInNits;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayMonitor_adaptor::MaxLuminanceInNits)->_get_MaxLuminanceInNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MaxLuminanceInNits;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayMonitor_adaptor::MinLuminanceInNits)->_get_MinLuminanceInNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MinLuminanceInNits;
		struct : property {
			Graphics::SizeInt32 get() { Graphics::SizeInt32 value; hrcheck(enc(&IDisplayMonitor_adaptor::NativeResolutionInRawPixels)->_get_NativeResolutionInRawPixels(&value)); return value; }
			Graphics::SizeInt32 operator()() { return get(); }
			operator Graphics::SizeInt32 () { return get(); }
		} NativeResolutionInRawPixels;
		struct : property {
			DisplayMonitorPhysicalConnectorKind get() { DisplayMonitorPhysicalConnectorKind value; hrcheck(enc(&IDisplayMonitor_adaptor::PhysicalConnector)->_get_PhysicalConnector(&value)); return value; }
			DisplayMonitorPhysicalConnectorKind operator()() { return get(); }
			operator DisplayMonitorPhysicalConnectorKind () { return get(); }
		} PhysicalConnector;
		struct : property {
			ptr<Foundation::IReference<Foundation::Size>> get() { Foundation::IReference<Foundation::Size>* value; hrcheck(enc(&IDisplayMonitor_adaptor::PhysicalSizeInInches)->_get_PhysicalSizeInInches(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::Size>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::Size>> () { return get(); }
			ptr<Foundation::IReference<Foundation::Size>> operator->() { return get(); }
		} PhysicalSizeInInches;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayMonitor_adaptor::RawDpiX)->_get_RawDpiX(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} RawDpiX;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayMonitor_adaptor::RawDpiY)->_get_RawDpiY(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} RawDpiY;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IDisplayMonitor_adaptor::RedPrimary)->_get_RedPrimary(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} RedPrimary;
		struct : property {
			DisplayMonitorUsageKind get() { DisplayMonitorUsageKind value; hrcheck(enc(&IDisplayMonitor_adaptor::UsageKind)->_get_UsageKind(&value)); return value; }
			DisplayMonitorUsageKind operator()() { return get(); }
			operator DisplayMonitorUsageKind () { return get(); }
		} UsageKind;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IDisplayMonitor_adaptor::WhitePoint)->_get_WhitePoint(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} WhitePoint;
	};
	szarray<unsigned char> GetDescriptor(DisplayMonitorDescriptorKind descriptorKind) { szarray<unsigned char> value; hrcheck(X::get()->_GetDescriptor(descriptorKind, &value.size, &value.p)); return value; }
	IDisplayMonitor_adaptor() {}
};
template<typename X> struct adapt<IDisplayMonitor, X> : Windows::Devices::Display::IDisplayMonitor_adaptor<X> { typedef adapt IDisplayMonitor; };
struct IDisplayMonitor : IDisplayMonitor_raw, generate<IDisplayMonitor> {};

// IDisplayMonitorStatics
struct IDisplayMonitorStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<DisplayMonitor*>* *operation);
	virtual STDMETHODIMP _FromInterfaceIdAsync(HSTRING deviceInterfaceId, Foundation::IAsyncOperation<DisplayMonitor*>* *operation);
};

// DisplayMonitor
template<typename> struct DisplayMonitor_statics {
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<DisplayMonitor, IDisplayMonitorStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<DisplayMonitor>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<DisplayMonitor*>* operation; hrcheck(get_activation_factory<DisplayMonitor, IDisplayMonitorStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<DisplayMonitor>>> FromInterfaceIdAsync(hstring_ref deviceInterfaceId) { Foundation::IAsyncOperation<DisplayMonitor*>* operation; hrcheck(get_activation_factory<DisplayMonitor, IDisplayMonitorStatics>()->_FromInterfaceIdAsync(deviceInterfaceId, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<DisplayMonitor, X> : X, Windows::Devices::Display::DisplayMonitor_statics<void> {
	typedef typename X::root_type DisplayMonitor;
};
struct DisplayMonitor : generate<DisplayMonitor> {};
}}}
} // namespace iso_winrt
