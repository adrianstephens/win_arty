#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Midi

#include "Windows.Devices.Midi.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Enumeration {
struct DeviceInformation;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::Midi::MidiMessageType> : enum_type<int> {};
template<> struct def<Windows::Devices::Midi::IMidiMessage> : overridable_type<> {};
template<> struct def<Windows::Devices::Midi::IMidiNoteOffMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiNoteOnMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiControlChangeMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiProgramChangeMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiChannelPressureMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiPitchBendChangeMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiTimeCodeMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiSongPositionPointerMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiSongSelectMessage> : interface_type<Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiNoteOffMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiNoteOffMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiNoteOffMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiNoteOnMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiNoteOnMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiNoteOnMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiControlChangeMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiControlChangeMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiControlChangeMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiProgramChangeMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiProgramChangeMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiProgramChangeMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiChannelPressureMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiChannelPressureMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiChannelPressureMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiPitchBendChangeMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiPitchBendChangeMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiPitchBendChangeMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiSystemExclusiveMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiSystemExclusiveMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiTimeCodeMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiTimeCodeMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiTimeCodeMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiSongPositionPointerMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiSongPositionPointerMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiSongPositionPointerMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::IMidiSongSelectMessageFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiSongSelectMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiSongSelectMessage>, custom_activators {};
template<> struct def<Windows::Devices::Midi::MidiTuneRequestMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::MidiTimingClockMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::MidiStartMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::MidiContinueMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::MidiStopMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::MidiActiveSensingMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::MidiSystemResetMessage> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessage> {};
template<> struct def<Windows::Devices::Midi::IMidiMessageReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::MidiMessageReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::Midi::IMidiMessageReceivedEventArgs> {};
template<> struct def<Windows::Devices::Midi::IMidiInPortStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::IMidiInPort> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Midi::MidiInPort> : class_type<Platform::Object, Windows::Devices::Midi::IMidiInPort> {};
template<> struct def<Windows::Devices::Midi::IMidiOutPortStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::IMidiOutPort> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Midi::MidiOutPort> : class_type<Platform::Object, Windows::Devices::Midi::IMidiOutPort> {};
template<> struct def<Windows::Devices::Midi::IMidiSynthesizerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Midi::IMidiSynthesizer> : interface_type<Windows::Devices::Midi::IMidiOutPort> {};
template<> struct def<Windows::Devices::Midi::MidiSynthesizer> : class_type<Platform::Object, Windows::Devices::Midi::IMidiSynthesizer> {};

// uuids

template<> struct uuid<Windows::Devices::Midi::IMidiMessage> { define_guid(0x79767945, 0x1094, 0x4283, 0x9B, 0xE0, 0x28, 0x9F, 0xC0, 0xEE, 0x83, 0x34);};
template<> struct uuid<Windows::Devices::Midi::IMidiNoteOffMessage> { define_guid(0x16FD8AF4, 0x198E, 0x4D8F, 0xA6, 0x54, 0xD3, 0x5, 0xA2, 0x93, 0x54, 0x8F);};
template<> struct uuid<Windows::Devices::Midi::IMidiNoteOnMessage> { define_guid(0xE0224AF5, 0x6181, 0x46DD, 0xAF, 0xA2, 0x41, 0x0, 0x4, 0xC0, 0x57, 0xAA);};
template<> struct uuid<Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessage> { define_guid(0x1F7337FE, 0xACE8, 0x48A0, 0x86, 0x8E, 0x7C, 0xDB, 0xF2, 0xF, 0x4, 0xD6);};
template<> struct uuid<Windows::Devices::Midi::IMidiControlChangeMessage> { define_guid(0xB7E15F83, 0x780D, 0x405F, 0xB7, 0x81, 0x3E, 0x15, 0x98, 0xC9, 0x7F, 0x40);};
template<> struct uuid<Windows::Devices::Midi::IMidiProgramChangeMessage> { define_guid(0x9CBB3C78, 0x7A3E, 0x4327, 0xAA, 0x98, 0x20, 0xB8, 0xE4, 0x48, 0x5A, 0xF8);};
template<> struct uuid<Windows::Devices::Midi::IMidiChannelPressureMessage> { define_guid(0xBE1FA860, 0x62B4, 0x4D52, 0xA3, 0x7E, 0x92, 0xE5, 0x4D, 0x35, 0xB9, 0x9);};
template<> struct uuid<Windows::Devices::Midi::IMidiPitchBendChangeMessage> { define_guid(0x29DF4CB1, 0x2E9F, 0x4FAF, 0x8C, 0x2B, 0x9C, 0xB8, 0x2A, 0x90, 0x79, 0xCA);};
template<> struct uuid<Windows::Devices::Midi::IMidiTimeCodeMessage> { define_guid(0xBF7087D, 0xFA63, 0x4A1C, 0x8D, 0xEB, 0xC0, 0xE8, 0x77, 0x96, 0xA6, 0xD7);};
template<> struct uuid<Windows::Devices::Midi::IMidiSongPositionPointerMessage> { define_guid(0x4CA50C56, 0xEC5E, 0x4AE4, 0xA1, 0x15, 0x88, 0xDC, 0x57, 0xCC, 0x2B, 0x79);};
template<> struct uuid<Windows::Devices::Midi::IMidiSongSelectMessage> { define_guid(0x49F0F27F, 0x6D83, 0x4741, 0xA5, 0xBF, 0x46, 0x29, 0xF6, 0xBE, 0x97, 0x4F);};
template<> struct uuid<Windows::Devices::Midi::IMidiNoteOffMessageFactory> { define_guid(0xA6B240E0, 0xA749, 0x425F, 0x8A, 0xF4, 0xA4, 0xD9, 0x79, 0xCC, 0x15, 0xB5);};
template<> struct uuid<Windows::Devices::Midi::IMidiNoteOnMessageFactory> { define_guid(0x9B4280A0, 0x59C1, 0x420E, 0xB5, 0x17, 0x15, 0xA1, 0xA, 0xA9, 0x60, 0x6B);};
template<> struct uuid<Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessageFactory> { define_guid(0xE98F483E, 0xC4B3, 0x4DD2, 0x91, 0x7C, 0xE3, 0x49, 0x81, 0x5A, 0x1B, 0x3B);};
template<> struct uuid<Windows::Devices::Midi::IMidiControlChangeMessageFactory> { define_guid(0x2AB14321, 0x956C, 0x46AD, 0x97, 0x52, 0xF8, 0x7F, 0x55, 0x5, 0x2F, 0xE3);};
template<> struct uuid<Windows::Devices::Midi::IMidiProgramChangeMessageFactory> { define_guid(0xD6B04387, 0x524B, 0x4104, 0x9C, 0x99, 0x65, 0x72, 0xBF, 0xD2, 0xE2, 0x61);};
template<> struct uuid<Windows::Devices::Midi::IMidiChannelPressureMessageFactory> { define_guid(0x6218ED2F, 0x2284, 0x412A, 0x94, 0xCF, 0x10, 0xFB, 0x4, 0x84, 0x2C, 0x6C);};
template<> struct uuid<Windows::Devices::Midi::IMidiPitchBendChangeMessageFactory> { define_guid(0xF5EEDF55, 0xCFC8, 0x4926, 0xB3, 0xE, 0xA3, 0x62, 0x23, 0x93, 0x30, 0x6C);};
template<> struct uuid<Windows::Devices::Midi::IMidiSystemExclusiveMessageFactory> { define_guid(0x83DE222, 0x3B74, 0x4320, 0x9B, 0x42, 0xC, 0xA8, 0x54, 0x5F, 0x8A, 0x24);};
template<> struct uuid<Windows::Devices::Midi::IMidiTimeCodeMessageFactory> { define_guid(0xEB3099C5, 0x771C, 0x40DE, 0xB9, 0x61, 0x17, 0x5A, 0x74, 0x89, 0xA8, 0x5E);};
template<> struct uuid<Windows::Devices::Midi::IMidiSongPositionPointerMessageFactory> { define_guid(0x9C00E996, 0xF10B, 0x4FEA, 0xB3, 0x95, 0xF5, 0xD6, 0xCF, 0x80, 0xF6, 0x4E);};
template<> struct uuid<Windows::Devices::Midi::IMidiSongSelectMessageFactory> { define_guid(0x848878E4, 0x8748, 0x4129, 0xA6, 0x6C, 0xA0, 0x54, 0x93, 0xF7, 0x5D, 0xAA);};
template<> struct uuid<Windows::Devices::Midi::IMidiMessageReceivedEventArgs> { define_guid(0x76566E56, 0xF328, 0x4B51, 0x90, 0x7D, 0xB3, 0xA8, 0xCE, 0x96, 0xBF, 0x80);};
template<> struct uuid<Windows::Devices::Midi::IMidiInPortStatics> { define_guid(0x44C439DC, 0x67FF, 0x4A6E, 0x8B, 0xAC, 0xFD, 0xB6, 0x61, 0xC, 0xF2, 0x96);};
template<> struct uuid<Windows::Devices::Midi::IMidiInPort> { define_guid(0xD5C1D9DB, 0x971A, 0x4EAF, 0xA2, 0x3D, 0xEA, 0x19, 0xFE, 0x60, 0x7F, 0xF9);};
template<> struct uuid<Windows::Devices::Midi::IMidiOutPortStatics> { define_guid(0x65CC3E9, 0xF88, 0x448B, 0x9B, 0x64, 0xA9, 0x58, 0x26, 0xC6, 0x5B, 0x8F);};
template<> struct uuid<Windows::Devices::Midi::IMidiOutPort> { define_guid(0x931D6D9F, 0x57A2, 0x4A3A, 0xAD, 0xB8, 0x46, 0x40, 0x88, 0x6F, 0x66, 0x93);};
template<> struct uuid<Windows::Devices::Midi::IMidiSynthesizerStatics> { define_guid(0x4224EAA8, 0x6629, 0x4D6B, 0xAA, 0x8F, 0xD4, 0x52, 0x1A, 0x5A, 0x31, 0xCE);};
template<> struct uuid<Windows::Devices::Midi::IMidiSynthesizer> { define_guid(0xF0DA155E, 0xDB90, 0x405F, 0xB8, 0xAE, 0x21, 0xD2, 0xE1, 0x7F, 0x2E, 0x45);};

// types

namespace Windows { namespace Devices { namespace Midi {

// IMidiMessage
struct IMidiMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::TimeSpan *value) = 0;
	virtual STDMETHODIMP _get_RawData(Storage::Streams::IBuffer* *value) = 0;
	virtual STDMETHODIMP _get_Type(MidiMessageType *value) = 0;
};
template<typename X> struct IMidiMessage_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMidiMessage_adaptor::RawData)->_get_RawData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} RawData;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMidiMessage_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Timestamp;
		struct : property {
			MidiMessageType get() { MidiMessageType value; hrcheck(enc(&IMidiMessage_adaptor::Type)->_get_Type(&value)); return value; }
			MidiMessageType operator()() { return get(); }
			operator MidiMessageType () { return get(); }
		} Type;
	};
	IMidiMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiMessage, X> : Windows::Devices::Midi::IMidiMessage_adaptor<X> { typedef adapt IMidiMessage; };
template<typename X> struct IMidiMessage_unadaptor : X {
	STDMETHODIMP _get_Timestamp(Foundation::TimeSpan *value) { return hrtry([&, this] { get_prop(value, Timestamp); }); }
	STDMETHODIMP _get_RawData(Storage::Streams::IBuffer* *value) { return hrtry([&, this] { get_prop(value, RawData); }); }
	STDMETHODIMP _get_Type(MidiMessageType *value) { return hrtry([&, this] { get_prop(value, Type); }); }
};
template<typename X> struct unadapt<IMidiMessage, X> : Windows::Devices::Midi::IMidiMessage_unadaptor<X> {};
struct IMidiMessage : IMidiMessage_raw, generate<IMidiMessage> {};

// IMidiNoteOffMessage
struct IMidiNoteOffMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(unsigned char *value);
	virtual STDMETHODIMP _get_Note(unsigned char *value);
	virtual STDMETHODIMP _get_Velocity(unsigned char *value);
};
template<typename X> struct IMidiNoteOffMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiNoteOffMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Channel;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiNoteOffMessage_adaptor::Note)->_get_Note(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Note;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiNoteOffMessage_adaptor::Velocity)->_get_Velocity(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Velocity;
	};
	IMidiNoteOffMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiNoteOffMessage, X> : Windows::Devices::Midi::IMidiNoteOffMessage_adaptor<X> { typedef adapt IMidiNoteOffMessage; };
struct IMidiNoteOffMessage : IMidiNoteOffMessage_raw, generate<IMidiNoteOffMessage> {};

// IMidiNoteOnMessage
struct IMidiNoteOnMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(unsigned char *value);
	virtual STDMETHODIMP _get_Note(unsigned char *value);
	virtual STDMETHODIMP _get_Velocity(unsigned char *value);
};
template<typename X> struct IMidiNoteOnMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiNoteOnMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Channel;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiNoteOnMessage_adaptor::Note)->_get_Note(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Note;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiNoteOnMessage_adaptor::Velocity)->_get_Velocity(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Velocity;
	};
	IMidiNoteOnMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiNoteOnMessage, X> : Windows::Devices::Midi::IMidiNoteOnMessage_adaptor<X> { typedef adapt IMidiNoteOnMessage; };
struct IMidiNoteOnMessage : IMidiNoteOnMessage_raw, generate<IMidiNoteOnMessage> {};

// IMidiPolyphonicKeyPressureMessage
struct IMidiPolyphonicKeyPressureMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(unsigned char *value);
	virtual STDMETHODIMP _get_Note(unsigned char *value);
	virtual STDMETHODIMP _get_Pressure(unsigned char *value);
};
template<typename X> struct IMidiPolyphonicKeyPressureMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiPolyphonicKeyPressureMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Channel;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiPolyphonicKeyPressureMessage_adaptor::Note)->_get_Note(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Note;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiPolyphonicKeyPressureMessage_adaptor::Pressure)->_get_Pressure(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Pressure;
	};
	IMidiPolyphonicKeyPressureMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiPolyphonicKeyPressureMessage, X> : Windows::Devices::Midi::IMidiPolyphonicKeyPressureMessage_adaptor<X> { typedef adapt IMidiPolyphonicKeyPressureMessage; };
struct IMidiPolyphonicKeyPressureMessage : IMidiPolyphonicKeyPressureMessage_raw, generate<IMidiPolyphonicKeyPressureMessage> {};

// IMidiControlChangeMessage
struct IMidiControlChangeMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(unsigned char *value);
	virtual STDMETHODIMP _get_Controller(unsigned char *value);
	virtual STDMETHODIMP _get_ControlValue(unsigned char *value);
};
template<typename X> struct IMidiControlChangeMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiControlChangeMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Channel;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiControlChangeMessage_adaptor::ControlValue)->_get_ControlValue(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} ControlValue;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiControlChangeMessage_adaptor::Controller)->_get_Controller(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Controller;
	};
	IMidiControlChangeMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiControlChangeMessage, X> : Windows::Devices::Midi::IMidiControlChangeMessage_adaptor<X> { typedef adapt IMidiControlChangeMessage; };
struct IMidiControlChangeMessage : IMidiControlChangeMessage_raw, generate<IMidiControlChangeMessage> {};

// IMidiProgramChangeMessage
struct IMidiProgramChangeMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(unsigned char *value);
	virtual STDMETHODIMP _get_Program(unsigned char *value);
};
template<typename X> struct IMidiProgramChangeMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiProgramChangeMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Channel;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiProgramChangeMessage_adaptor::Program)->_get_Program(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Program;
	};
	IMidiProgramChangeMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiProgramChangeMessage, X> : Windows::Devices::Midi::IMidiProgramChangeMessage_adaptor<X> { typedef adapt IMidiProgramChangeMessage; };
struct IMidiProgramChangeMessage : IMidiProgramChangeMessage_raw, generate<IMidiProgramChangeMessage> {};

// IMidiChannelPressureMessage
struct IMidiChannelPressureMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(unsigned char *value);
	virtual STDMETHODIMP _get_Pressure(unsigned char *value);
};
template<typename X> struct IMidiChannelPressureMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiChannelPressureMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Channel;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiChannelPressureMessage_adaptor::Pressure)->_get_Pressure(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Pressure;
	};
	IMidiChannelPressureMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiChannelPressureMessage, X> : Windows::Devices::Midi::IMidiChannelPressureMessage_adaptor<X> { typedef adapt IMidiChannelPressureMessage; };
struct IMidiChannelPressureMessage : IMidiChannelPressureMessage_raw, generate<IMidiChannelPressureMessage> {};

// IMidiPitchBendChangeMessage
struct IMidiPitchBendChangeMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(unsigned char *value);
	virtual STDMETHODIMP _get_Bend(unsigned short *value);
};
template<typename X> struct IMidiPitchBendChangeMessage_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IMidiPitchBendChangeMessage_adaptor::Bend)->_get_Bend(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Bend;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiPitchBendChangeMessage_adaptor::Channel)->_get_Channel(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Channel;
	};
	IMidiPitchBendChangeMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiPitchBendChangeMessage, X> : Windows::Devices::Midi::IMidiPitchBendChangeMessage_adaptor<X> { typedef adapt IMidiPitchBendChangeMessage; };
struct IMidiPitchBendChangeMessage : IMidiPitchBendChangeMessage_raw, generate<IMidiPitchBendChangeMessage> {};

// IMidiTimeCodeMessage
struct IMidiTimeCodeMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameType(unsigned char *value);
	virtual STDMETHODIMP _get_Values(unsigned char *value);
};
template<typename X> struct IMidiTimeCodeMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiTimeCodeMessage_adaptor::FrameType)->_get_FrameType(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} FrameType;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiTimeCodeMessage_adaptor::Values)->_get_Values(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Values;
	};
	IMidiTimeCodeMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiTimeCodeMessage, X> : Windows::Devices::Midi::IMidiTimeCodeMessage_adaptor<X> { typedef adapt IMidiTimeCodeMessage; };
struct IMidiTimeCodeMessage : IMidiTimeCodeMessage_raw, generate<IMidiTimeCodeMessage> {};

// IMidiSongPositionPointerMessage
struct IMidiSongPositionPointerMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Beats(unsigned short *value);
};
template<typename X> struct IMidiSongPositionPointerMessage_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IMidiSongPositionPointerMessage_adaptor::Beats)->_get_Beats(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Beats;
	};
	IMidiSongPositionPointerMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiSongPositionPointerMessage, X> : Windows::Devices::Midi::IMidiSongPositionPointerMessage_adaptor<X> { typedef adapt IMidiSongPositionPointerMessage; };
struct IMidiSongPositionPointerMessage : IMidiSongPositionPointerMessage_raw, generate<IMidiSongPositionPointerMessage> {};

// IMidiSongSelectMessage
struct IMidiSongSelectMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_Song(unsigned char *value);
};
template<typename X> struct IMidiSongSelectMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IMidiSongSelectMessage_adaptor::Song)->_get_Song(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} Song;
	};
	IMidiSongSelectMessage_adaptor() {}
};
template<typename X> struct adapt<IMidiSongSelectMessage, X> : Windows::Devices::Midi::IMidiSongSelectMessage_adaptor<X> { typedef adapt IMidiSongSelectMessage; };
struct IMidiSongSelectMessage : IMidiSongSelectMessage_raw, generate<IMidiSongSelectMessage> {};

// IMidiNoteOffMessageFactory
struct IMidiNoteOffMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiNoteOffMessage(unsigned char channel, unsigned char note, unsigned char velocity, MidiNoteOffMessage* *value);
};

// MidiNoteOffMessage
template<typename> struct MidiNoteOffMessage_statics {
	static MidiNoteOffMessage *activate(unsigned char channel, unsigned char note, unsigned char velocity) { MidiNoteOffMessage *value; hrcheck(get_activation_factory<MidiNoteOffMessage, IMidiNoteOffMessageFactory>()->_CreateMidiNoteOffMessage(channel, note, velocity, &value)); return value; }
};

template<typename X> struct statics<MidiNoteOffMessage, X> : X, Windows::Devices::Midi::MidiNoteOffMessage_statics<void> {
	using Windows::Devices::Midi::MidiNoteOffMessage_statics<void>::activate;
	typedef typename X::root_type MidiNoteOffMessage;
};
struct MidiNoteOffMessage : generate<MidiNoteOffMessage> {};

// IMidiNoteOnMessageFactory
struct IMidiNoteOnMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiNoteOnMessage(unsigned char channel, unsigned char note, unsigned char velocity, MidiNoteOnMessage* *value);
};

// MidiNoteOnMessage
template<typename> struct MidiNoteOnMessage_statics {
	static MidiNoteOnMessage *activate(unsigned char channel, unsigned char note, unsigned char velocity) { MidiNoteOnMessage *value; hrcheck(get_activation_factory<MidiNoteOnMessage, IMidiNoteOnMessageFactory>()->_CreateMidiNoteOnMessage(channel, note, velocity, &value)); return value; }
};

template<typename X> struct statics<MidiNoteOnMessage, X> : X, Windows::Devices::Midi::MidiNoteOnMessage_statics<void> {
	using Windows::Devices::Midi::MidiNoteOnMessage_statics<void>::activate;
	typedef typename X::root_type MidiNoteOnMessage;
};
struct MidiNoteOnMessage : generate<MidiNoteOnMessage> {};

// IMidiPolyphonicKeyPressureMessageFactory
struct IMidiPolyphonicKeyPressureMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiPolyphonicKeyPressureMessage(unsigned char channel, unsigned char note, unsigned char pressure, MidiPolyphonicKeyPressureMessage* *value);
};

// MidiPolyphonicKeyPressureMessage
template<typename> struct MidiPolyphonicKeyPressureMessage_statics {
	static MidiPolyphonicKeyPressureMessage *activate(unsigned char channel, unsigned char note, unsigned char pressure) { MidiPolyphonicKeyPressureMessage *value; hrcheck(get_activation_factory<MidiPolyphonicKeyPressureMessage, IMidiPolyphonicKeyPressureMessageFactory>()->_CreateMidiPolyphonicKeyPressureMessage(channel, note, pressure, &value)); return value; }
};

template<typename X> struct statics<MidiPolyphonicKeyPressureMessage, X> : X, Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage_statics<void> {
	using Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage_statics<void>::activate;
	typedef typename X::root_type MidiPolyphonicKeyPressureMessage;
};
struct MidiPolyphonicKeyPressureMessage : generate<MidiPolyphonicKeyPressureMessage> {};

// IMidiControlChangeMessageFactory
struct IMidiControlChangeMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiControlChangeMessage(unsigned char channel, unsigned char controller, unsigned char controlValue, MidiControlChangeMessage* *value);
};

// MidiControlChangeMessage
template<typename> struct MidiControlChangeMessage_statics {
	static MidiControlChangeMessage *activate(unsigned char channel, unsigned char controller, unsigned char controlValue) { MidiControlChangeMessage *value; hrcheck(get_activation_factory<MidiControlChangeMessage, IMidiControlChangeMessageFactory>()->_CreateMidiControlChangeMessage(channel, controller, controlValue, &value)); return value; }
};

template<typename X> struct statics<MidiControlChangeMessage, X> : X, Windows::Devices::Midi::MidiControlChangeMessage_statics<void> {
	using Windows::Devices::Midi::MidiControlChangeMessage_statics<void>::activate;
	typedef typename X::root_type MidiControlChangeMessage;
};
struct MidiControlChangeMessage : generate<MidiControlChangeMessage> {};

// IMidiProgramChangeMessageFactory
struct IMidiProgramChangeMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiProgramChangeMessage(unsigned char channel, unsigned char program, MidiProgramChangeMessage* *value);
};

// MidiProgramChangeMessage
template<typename> struct MidiProgramChangeMessage_statics {
	static MidiProgramChangeMessage *activate(unsigned char channel, unsigned char program) { MidiProgramChangeMessage *value; hrcheck(get_activation_factory<MidiProgramChangeMessage, IMidiProgramChangeMessageFactory>()->_CreateMidiProgramChangeMessage(channel, program, &value)); return value; }
};

template<typename X> struct statics<MidiProgramChangeMessage, X> : X, Windows::Devices::Midi::MidiProgramChangeMessage_statics<void> {
	using Windows::Devices::Midi::MidiProgramChangeMessage_statics<void>::activate;
	typedef typename X::root_type MidiProgramChangeMessage;
};
struct MidiProgramChangeMessage : generate<MidiProgramChangeMessage> {};

// IMidiChannelPressureMessageFactory
struct IMidiChannelPressureMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiChannelPressureMessage(unsigned char channel, unsigned char pressure, MidiChannelPressureMessage* *value);
};

// MidiChannelPressureMessage
template<typename> struct MidiChannelPressureMessage_statics {
	static MidiChannelPressureMessage *activate(unsigned char channel, unsigned char pressure) { MidiChannelPressureMessage *value; hrcheck(get_activation_factory<MidiChannelPressureMessage, IMidiChannelPressureMessageFactory>()->_CreateMidiChannelPressureMessage(channel, pressure, &value)); return value; }
};

template<typename X> struct statics<MidiChannelPressureMessage, X> : X, Windows::Devices::Midi::MidiChannelPressureMessage_statics<void> {
	using Windows::Devices::Midi::MidiChannelPressureMessage_statics<void>::activate;
	typedef typename X::root_type MidiChannelPressureMessage;
};
struct MidiChannelPressureMessage : generate<MidiChannelPressureMessage> {};

// IMidiPitchBendChangeMessageFactory
struct IMidiPitchBendChangeMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiPitchBendChangeMessage(unsigned char channel, unsigned short bend, MidiPitchBendChangeMessage* *value);
};

// MidiPitchBendChangeMessage
template<typename> struct MidiPitchBendChangeMessage_statics {
	static MidiPitchBendChangeMessage *activate(unsigned char channel, unsigned short bend) { MidiPitchBendChangeMessage *value; hrcheck(get_activation_factory<MidiPitchBendChangeMessage, IMidiPitchBendChangeMessageFactory>()->_CreateMidiPitchBendChangeMessage(channel, bend, &value)); return value; }
};

template<typename X> struct statics<MidiPitchBendChangeMessage, X> : X, Windows::Devices::Midi::MidiPitchBendChangeMessage_statics<void> {
	using Windows::Devices::Midi::MidiPitchBendChangeMessage_statics<void>::activate;
	typedef typename X::root_type MidiPitchBendChangeMessage;
};
struct MidiPitchBendChangeMessage : generate<MidiPitchBendChangeMessage> {};

// IMidiSystemExclusiveMessageFactory
struct IMidiSystemExclusiveMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiSystemExclusiveMessage(Storage::Streams::IBuffer* rawData, MidiSystemExclusiveMessage* *value);
};

// MidiSystemExclusiveMessage
template<typename> struct MidiSystemExclusiveMessage_statics {
	static MidiSystemExclusiveMessage *activate(pptr<Storage::Streams::IBuffer> rawData) { MidiSystemExclusiveMessage *value; hrcheck(get_activation_factory<MidiSystemExclusiveMessage, IMidiSystemExclusiveMessageFactory>()->_CreateMidiSystemExclusiveMessage(rawData, &value)); return value; }
};

template<typename X> struct statics<MidiSystemExclusiveMessage, X> : X, Windows::Devices::Midi::MidiSystemExclusiveMessage_statics<void> {
	using Windows::Devices::Midi::MidiSystemExclusiveMessage_statics<void>::activate;
	typedef typename X::root_type MidiSystemExclusiveMessage;
};
struct MidiSystemExclusiveMessage : generate<MidiSystemExclusiveMessage> {};

// IMidiTimeCodeMessageFactory
struct IMidiTimeCodeMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiTimeCodeMessage(unsigned char frameType, unsigned char values, MidiTimeCodeMessage* *value);
};

// MidiTimeCodeMessage
template<typename> struct MidiTimeCodeMessage_statics {
	static MidiTimeCodeMessage *activate(unsigned char frameType, unsigned char values) { MidiTimeCodeMessage *value; hrcheck(get_activation_factory<MidiTimeCodeMessage, IMidiTimeCodeMessageFactory>()->_CreateMidiTimeCodeMessage(frameType, values, &value)); return value; }
};

template<typename X> struct statics<MidiTimeCodeMessage, X> : X, Windows::Devices::Midi::MidiTimeCodeMessage_statics<void> {
	using Windows::Devices::Midi::MidiTimeCodeMessage_statics<void>::activate;
	typedef typename X::root_type MidiTimeCodeMessage;
};
struct MidiTimeCodeMessage : generate<MidiTimeCodeMessage> {};

// IMidiSongPositionPointerMessageFactory
struct IMidiSongPositionPointerMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiSongPositionPointerMessage(unsigned short beats, MidiSongPositionPointerMessage* *value);
};

// MidiSongPositionPointerMessage
template<typename> struct MidiSongPositionPointerMessage_statics {
	static MidiSongPositionPointerMessage *activate(unsigned short beats) { MidiSongPositionPointerMessage *value; hrcheck(get_activation_factory<MidiSongPositionPointerMessage, IMidiSongPositionPointerMessageFactory>()->_CreateMidiSongPositionPointerMessage(beats, &value)); return value; }
};

template<typename X> struct statics<MidiSongPositionPointerMessage, X> : X, Windows::Devices::Midi::MidiSongPositionPointerMessage_statics<void> {
	using Windows::Devices::Midi::MidiSongPositionPointerMessage_statics<void>::activate;
	typedef typename X::root_type MidiSongPositionPointerMessage;
};
struct MidiSongPositionPointerMessage : generate<MidiSongPositionPointerMessage> {};

// IMidiSongSelectMessageFactory
struct IMidiSongSelectMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMidiSongSelectMessage(unsigned char song, MidiSongSelectMessage* *value);
};

// MidiSongSelectMessage
template<typename> struct MidiSongSelectMessage_statics {
	static MidiSongSelectMessage *activate(unsigned char song) { MidiSongSelectMessage *value; hrcheck(get_activation_factory<MidiSongSelectMessage, IMidiSongSelectMessageFactory>()->_CreateMidiSongSelectMessage(song, &value)); return value; }
};

template<typename X> struct statics<MidiSongSelectMessage, X> : X, Windows::Devices::Midi::MidiSongSelectMessage_statics<void> {
	using Windows::Devices::Midi::MidiSongSelectMessage_statics<void>::activate;
	typedef typename X::root_type MidiSongSelectMessage;
};
struct MidiSongSelectMessage : generate<MidiSongSelectMessage> {};

// MidiTuneRequestMessage
template<typename X> struct statics<MidiTuneRequestMessage, X> : X {
	typedef typename X::root_type MidiTuneRequestMessage;
};
struct MidiTuneRequestMessage : generate<MidiTuneRequestMessage> {};

// MidiTimingClockMessage
template<typename X> struct statics<MidiTimingClockMessage, X> : X {
	typedef typename X::root_type MidiTimingClockMessage;
};
struct MidiTimingClockMessage : generate<MidiTimingClockMessage> {};

// MidiStartMessage
template<typename X> struct statics<MidiStartMessage, X> : X {
	typedef typename X::root_type MidiStartMessage;
};
struct MidiStartMessage : generate<MidiStartMessage> {};

// MidiContinueMessage
template<typename X> struct statics<MidiContinueMessage, X> : X {
	typedef typename X::root_type MidiContinueMessage;
};
struct MidiContinueMessage : generate<MidiContinueMessage> {};

// MidiStopMessage
template<typename X> struct statics<MidiStopMessage, X> : X {
	typedef typename X::root_type MidiStopMessage;
};
struct MidiStopMessage : generate<MidiStopMessage> {};

// MidiActiveSensingMessage
template<typename X> struct statics<MidiActiveSensingMessage, X> : X {
	typedef typename X::root_type MidiActiveSensingMessage;
};
struct MidiActiveSensingMessage : generate<MidiActiveSensingMessage> {};

// MidiSystemResetMessage
template<typename X> struct statics<MidiSystemResetMessage, X> : X {
	typedef typename X::root_type MidiSystemResetMessage;
};
struct MidiSystemResetMessage : generate<MidiSystemResetMessage> {};

// IMidiMessageReceivedEventArgs
struct IMidiMessageReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Message(IMidiMessage* *value);
};
template<typename X> struct IMidiMessageReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<IMidiMessage> get() { IMidiMessage* value; hrcheck(enc(&IMidiMessageReceivedEventArgs_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<IMidiMessage> operator()() { return get(); }
			operator ptr<IMidiMessage> () { return get(); }
			ptr<IMidiMessage> operator->() { return get(); }
		} Message;
	};
	IMidiMessageReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMidiMessageReceivedEventArgs, X> : Windows::Devices::Midi::IMidiMessageReceivedEventArgs_adaptor<X> { typedef adapt IMidiMessageReceivedEventArgs; };
struct IMidiMessageReceivedEventArgs : IMidiMessageReceivedEventArgs_raw, generate<IMidiMessageReceivedEventArgs> {};

// MidiMessageReceivedEventArgs
template<typename X> struct statics<MidiMessageReceivedEventArgs, X> : X {
	typedef typename X::root_type MidiMessageReceivedEventArgs;
};
struct MidiMessageReceivedEventArgs : generate<MidiMessageReceivedEventArgs> {};

// IMidiInPortStatics
struct IMidiInPortStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<MidiInPort*>* *value);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
};

// IMidiInPort
struct IMidiInPort_raw : IInspectable {
	virtual STDMETHODIMP _add_MessageReceived(Foundation::TypedEventHandler<MidiInPort*, MidiMessageReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_MessageReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IMidiInPort_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMidiInPort_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MidiInPort>, ptr<MidiMessageReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMidiInPort_adaptor::MessageReceived)->_add_MessageReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMidiInPort_adaptor::MessageReceived)->_remove_MessageReceived(token)); }
		} MessageReceived;
	};
	IMidiInPort_adaptor() {}
};
template<typename X> struct adapt<IMidiInPort, X> : Windows::Devices::Midi::IMidiInPort_adaptor<X> { typedef adapt IMidiInPort; };
struct IMidiInPort : IMidiInPort_raw, generate<IMidiInPort> {};

// MidiInPort
template<typename> struct MidiInPort_statics {
	static ptr<Foundation::IAsyncOperation<ptr<MidiInPort>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<MidiInPort*>* value; hrcheck(get_activation_factory<MidiInPort, IMidiInPortStatics>()->_FromIdAsync(deviceId, &value)); return from_abi(value); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<MidiInPort, IMidiInPortStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
};

template<typename X> struct statics<MidiInPort, X> : X, Windows::Devices::Midi::MidiInPort_statics<void> {
	typedef typename X::root_type MidiInPort;
};
struct MidiInPort : generate<MidiInPort> {};

// IMidiOutPortStatics
struct IMidiOutPortStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<IMidiOutPort*>* *value);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
};

// IMidiOutPort
struct IMidiOutPort_raw : IInspectable {
	virtual STDMETHODIMP _SendMessage(IMidiMessage* midiMessage) = 0;
	virtual STDMETHODIMP _SendBuffer(Storage::Streams::IBuffer* midiData) = 0;
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value) = 0;
};
template<typename X> struct IMidiOutPort_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMidiOutPort_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	void SendMessage(pptr<IMidiMessage> midiMessage) { hrcheck(X::get()->_SendMessage(midiMessage)); }
	void SendBuffer(pptr<Storage::Streams::IBuffer> midiData) { hrcheck(X::get()->_SendBuffer(midiData)); }
	IMidiOutPort_adaptor() {}
};
template<typename X> struct adapt<IMidiOutPort, X> : Windows::Devices::Midi::IMidiOutPort_adaptor<X> { typedef adapt IMidiOutPort; };
template<typename X> struct IMidiOutPort_unadaptor : X {
	STDMETHODIMP _SendMessage(IMidiMessage* midiMessage) { return hrtry([&, this] { X::get()->SendMessage(midiMessage); }); }
	STDMETHODIMP _SendBuffer(Storage::Streams::IBuffer* midiData) { return hrtry([&, this] { X::get()->SendBuffer(midiData); }); }
	STDMETHODIMP _get_DeviceId(HSTRING *value) { return hrtry([&, this] { get_prop(value, DeviceId); }); }
};
template<typename X> struct unadapt<IMidiOutPort, X> : Windows::Devices::Midi::IMidiOutPort_unadaptor<X> {};
struct IMidiOutPort : IMidiOutPort_raw, generate<IMidiOutPort> {};

// MidiOutPort
template<typename> struct MidiOutPort_statics {
	static ptr<Foundation::IAsyncOperation<ptr<IMidiOutPort>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<IMidiOutPort*>* value; hrcheck(get_activation_factory<MidiOutPort, IMidiOutPortStatics>()->_FromIdAsync(deviceId, &value)); return from_abi(value); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<MidiOutPort, IMidiOutPortStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
};

template<typename X> struct statics<MidiOutPort, X> : X, Windows::Devices::Midi::MidiOutPort_statics<void> {
	typedef typename X::root_type MidiOutPort;
};
struct MidiOutPort : generate<MidiOutPort> {};

// IMidiSynthesizerStatics
struct IMidiSynthesizerStatics : IInspectable {
	virtual STDMETHODIMP _CreateAsync(Foundation::IAsyncOperation<MidiSynthesizer*>* *value);
	virtual STDMETHODIMP _CreateFromAudioDeviceAsync(Enumeration::DeviceInformation* audioDevice, Foundation::IAsyncOperation<MidiSynthesizer*>* *value);
	virtual STDMETHODIMP _IsSynthesizer(Enumeration::DeviceInformation* midiDevice, bool *value);
};

// IMidiSynthesizer
struct IMidiSynthesizer_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioDevice(Enumeration::DeviceInformation* *value);
	virtual STDMETHODIMP _get_Volume(double *value);
	virtual STDMETHODIMP _put_Volume(double value);
};
template<typename X> struct IMidiSynthesizer_adaptor : X {
	union {
		struct : property {
			ptr<Enumeration::DeviceInformation> get() { Enumeration::DeviceInformation* value; hrcheck(enc(&IMidiSynthesizer_adaptor::AudioDevice)->_get_AudioDevice(&value)); return from_abi(value); }
			ptr<Enumeration::DeviceInformation> operator()() { return get(); }
			operator ptr<Enumeration::DeviceInformation> () { return get(); }
			ptr<Enumeration::DeviceInformation> operator->() { return get(); }
		} AudioDevice;
		struct : property {
			double get() { double value; hrcheck(enc(&IMidiSynthesizer_adaptor::Volume)->_get_Volume(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IMidiSynthesizer_adaptor::Volume)->_put_Volume(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Volume;
	};
	IMidiSynthesizer_adaptor() {}
};
template<typename X> struct adapt<IMidiSynthesizer, X> : Windows::Devices::Midi::IMidiSynthesizer_adaptor<X> { typedef adapt IMidiSynthesizer; };
struct IMidiSynthesizer : IMidiSynthesizer_raw, generate<IMidiSynthesizer> {};

// MidiSynthesizer
template<typename> struct MidiSynthesizer_statics {
	static ptr<Foundation::IAsyncOperation<ptr<MidiSynthesizer>>> CreateAsync() { Foundation::IAsyncOperation<MidiSynthesizer*>* value; hrcheck(get_activation_factory<MidiSynthesizer, IMidiSynthesizerStatics>()->_CreateAsync(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<MidiSynthesizer>>> CreateAsync(pptr<Enumeration::DeviceInformation> audioDevice) { Foundation::IAsyncOperation<MidiSynthesizer*>* value; hrcheck(get_activation_factory<MidiSynthesizer, IMidiSynthesizerStatics>()->_CreateFromAudioDeviceAsync(audioDevice, &value)); return from_abi(value); }
	static bool IsSynthesizer(pptr<Enumeration::DeviceInformation> midiDevice) { bool value; hrcheck(get_activation_factory<MidiSynthesizer, IMidiSynthesizerStatics>()->_IsSynthesizer(midiDevice, &value)); return value; }
};

template<typename X> struct statics<MidiSynthesizer, X> : X, Windows::Devices::Midi::MidiSynthesizer_statics<void> {
	typedef typename X::root_type MidiSynthesizer;
};
struct MidiSynthesizer : generate<MidiSynthesizer> {};
}}}
} // namespace iso_winrt
