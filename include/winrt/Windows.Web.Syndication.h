#pragma once
// generated by isopod tools
// namespaces:
// Windows.Web.Syndication

#include "Windows.Web.Syndication.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Data { namespace Xml { namespace Dom {
struct XmlDocument;
}}}
namespace Foundation { namespace Collections {
template<typename T> struct IVector;
}}
namespace Security { namespace Credentials {
struct PasswordCredential;
}}}

// defs

template<> struct def<Windows::Web::Syndication::RetrievalProgress> : value_type<unsigned, unsigned> {};
template<> struct def<Windows::Web::Syndication::TransferProgress> : value_type<unsigned, unsigned, unsigned, unsigned> {};
template<> struct def<Windows::Web::Syndication::SyndicationFormat> : enum_type<int> {};
template<> struct def<Windows::Web::Syndication::SyndicationErrorStatus> : enum_type<int> {};
template<> struct def<Windows::Web::Syndication::ISyndicationAttribute> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::ISyndicationAttributeFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationAttribute> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationAttribute>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationNode> : overridable_type<> {};
template<> struct def<Windows::Web::Syndication::ISyndicationNodeFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationNode> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationNode>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationGenerator> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::ISyndicationGeneratorFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationGenerator> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationGenerator, Windows::Web::Syndication::ISyndicationNode>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationText> : overridable_type<Windows::Web::Syndication::ISyndicationNode> {};
template<> struct def<Windows::Web::Syndication::SyndicationTextType> : enum_type<int> {};
template<> struct def<Windows::Web::Syndication::ISyndicationTextFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationText> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationText>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationContent> : interface_type<Windows::Web::Syndication::ISyndicationText> {};
template<> struct def<Windows::Web::Syndication::ISyndicationContentFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationContent> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationContent>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationLink> : interface_type<Windows::Web::Syndication::ISyndicationNode> {};
template<> struct def<Windows::Web::Syndication::ISyndicationLinkFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationLink> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationLink>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationPerson> : interface_type<Windows::Web::Syndication::ISyndicationNode> {};
template<> struct def<Windows::Web::Syndication::ISyndicationPersonFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationPerson> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationPerson>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationCategory> : interface_type<Windows::Web::Syndication::ISyndicationNode> {};
template<> struct def<Windows::Web::Syndication::ISyndicationCategoryFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationCategory> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationCategory>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationItem> : interface_type<Windows::Web::Syndication::ISyndicationNode> {};
template<> struct def<Windows::Web::Syndication::ISyndicationFeedFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::ISyndicationFeed> : interface_type<Windows::Web::Syndication::ISyndicationNode> {};
template<> struct def<Windows::Web::Syndication::SyndicationFeed> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationFeed>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationItemFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationItem> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationItem>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationClient> : overridable_type<> {};
template<> struct def<Windows::Web::Syndication::ISyndicationClientFactory> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationClient> : class_type<Platform::Object, Windows::Web::Syndication::ISyndicationClient>, custom_activators {};
template<> struct def<Windows::Web::Syndication::ISyndicationErrorStatics> : interface_type<> {};
template<> struct def<Windows::Web::Syndication::SyndicationError> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Web::Syndication::ISyndicationAttribute> { define_guid(0x71E8F969, 0x526E, 0x4001, 0x9A, 0x91, 0xE8, 0x4F, 0x83, 0x16, 0x1A, 0xB1);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationAttributeFactory> { define_guid(0x624F1599, 0xED3E, 0x420F, 0xBE, 0x86, 0x64, 0x4, 0x14, 0x88, 0x6E, 0x4B);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationNode> { define_guid(0x753CEF78, 0x51F8, 0x45C0, 0xA9, 0xF5, 0xF1, 0x71, 0x9D, 0xEC, 0x3F, 0xB2);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationNodeFactory> { define_guid(0x12902188, 0x4ACB, 0x49A8, 0xB7, 0x77, 0xA5, 0xEB, 0x92, 0xE1, 0x8A, 0x79);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationGenerator> { define_guid(0x9768B379, 0xFB2B, 0x4F6D, 0xB4, 0x1C, 0x8, 0x8A, 0x58, 0x68, 0x82, 0x5C);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationGeneratorFactory> { define_guid(0xA34083E3, 0x1E26, 0x4DBC, 0xBA, 0x9D, 0x1A, 0xB8, 0x4B, 0xEF, 0xF9, 0x7B);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationText> { define_guid(0xB9CC5E80, 0x313A, 0x4091, 0xA2, 0xA6, 0x24, 0x3E, 0xE, 0xE9, 0x23, 0xF9);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationTextFactory> { define_guid(0xEE7342F7, 0x11C6, 0x4B25, 0xAB, 0x62, 0xE5, 0x96, 0xBD, 0x16, 0x29, 0x46);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationContent> { define_guid(0x4641FEFE, 0xE55, 0x40D0, 0xB8, 0xD0, 0x6A, 0x2C, 0xCB, 0xA9, 0xFC, 0x7C);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationContentFactory> { define_guid(0x3D2FBB93, 0x9520, 0x4173, 0x93, 0x88, 0x7E, 0x2D, 0xF3, 0x24, 0xA8, 0xA0);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationLink> { define_guid(0x27553ABD, 0xA10E, 0x41B5, 0x86, 0xBD, 0x97, 0x59, 0x8, 0x6E, 0xB0, 0xC5);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationLinkFactory> { define_guid(0x5ED863D4, 0x5535, 0x48AC, 0x98, 0xD4, 0xC1, 0x90, 0x99, 0x50, 0x80, 0xB3);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationPerson> { define_guid(0xFA1EE5DA, 0xA7C6, 0x4517, 0xA0, 0x96, 0x1, 0x43, 0xFA, 0xF2, 0x93, 0x27);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationPersonFactory> { define_guid(0xDCF4886D, 0x229D, 0x4B58, 0xA4, 0x9B, 0xF3, 0xD2, 0xF0, 0xF5, 0xC9, 0x9F);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationCategory> { define_guid(0x8715626F, 0xCBA, 0x4A7F, 0x89, 0xFF, 0xEC, 0xB5, 0x28, 0x14, 0x23, 0xB6);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationCategoryFactory> { define_guid(0xAB42802F, 0x49E0, 0x4525, 0x8A, 0xB2, 0xAB, 0x45, 0xC0, 0x25, 0x28, 0xFF);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationItem> { define_guid(0x548DB883, 0xC384, 0x45C1, 0x8A, 0xE8, 0xA3, 0x78, 0xC4, 0xEC, 0x48, 0x6C);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationFeedFactory> { define_guid(0x23472232, 0x8BE9, 0x48B7, 0x89, 0x34, 0x62, 0x5, 0x13, 0x1D, 0x93, 0x57);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationFeed> { define_guid(0x7FFE3CD2, 0x5B66, 0x4D62, 0x84, 0x3, 0x1B, 0xC1, 0xD, 0x91, 0xD, 0x6B);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationItemFactory> { define_guid(0x251D434F, 0x7DB8, 0x487A, 0x85, 0xE4, 0x10, 0xD1, 0x91, 0xE6, 0x6E, 0xBB);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationClient> { define_guid(0x9E18A9B7, 0x7249, 0x4B45, 0xB2, 0x29, 0x7D, 0xF8, 0x95, 0xA5, 0xA1, 0xF5);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationClientFactory> { define_guid(0x2EC4B32C, 0xA79B, 0x4114, 0xB2, 0x9A, 0x5, 0xDF, 0xFB, 0xAF, 0xB9, 0xA4);};
template<> struct uuid<Windows::Web::Syndication::ISyndicationErrorStatics> { define_guid(0x1FBB2361, 0x45C7, 0x4833, 0x8A, 0xA0, 0xBE, 0x5F, 0x3B, 0x58, 0xA7, 0xF4);};

// types

namespace Windows { namespace Web { namespace Syndication {

// ISyndicationAttribute
struct ISyndicationAttribute_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Namespace(HSTRING *value);
	virtual STDMETHODIMP _put_Namespace(HSTRING value);
	virtual STDMETHODIMP _get_Value(HSTRING *value);
	virtual STDMETHODIMP _put_Value(HSTRING value);
};
template<typename X> struct ISyndicationAttribute_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationAttribute_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationAttribute_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationAttribute_adaptor::Namespace)->_get_Namespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationAttribute_adaptor::Namespace)->_put_Namespace(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Namespace;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationAttribute_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationAttribute_adaptor::Value)->_put_Value(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Value;
	};
	ISyndicationAttribute_adaptor() {}
};
template<typename X> struct adapt<ISyndicationAttribute, X> : Windows::Web::Syndication::ISyndicationAttribute_adaptor<X> { typedef adapt ISyndicationAttribute; };
struct ISyndicationAttribute : ISyndicationAttribute_raw, generate<ISyndicationAttribute> {};

// ISyndicationAttributeFactory
struct ISyndicationAttributeFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationAttribute(HSTRING attributeName, HSTRING attributeNamespace, HSTRING attributeValue, SyndicationAttribute* *syndicationAttribute);
};

// SyndicationAttribute
template<typename> struct SyndicationAttribute_statics {
	static SyndicationAttribute *activate(hstring_ref attributeName, hstring_ref attributeNamespace, hstring_ref attributeValue) { SyndicationAttribute *syndicationAttribute; hrcheck(get_activation_factory<SyndicationAttribute, ISyndicationAttributeFactory>()->_CreateSyndicationAttribute(attributeName, attributeNamespace, attributeValue, &syndicationAttribute)); return syndicationAttribute; }
	static SyndicationAttribute *activate() { SyndicationAttribute *t; get_activation_factory<SyndicationAttribute>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<SyndicationAttribute, X> : X, Windows::Web::Syndication::SyndicationAttribute_statics<void> {
	using Windows::Web::Syndication::SyndicationAttribute_statics<void>::activate;
	typedef typename X::root_type SyndicationAttribute;
};
struct SyndicationAttribute : generate<SyndicationAttribute> {};

// ISyndicationNode
struct ISyndicationNode_raw : IInspectable {
	virtual STDMETHODIMP _get_NodeName(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_NodeName(HSTRING value) = 0;
	virtual STDMETHODIMP _get_NodeNamespace(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_NodeNamespace(HSTRING value) = 0;
	virtual STDMETHODIMP _get_NodeValue(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_NodeValue(HSTRING value) = 0;
	virtual STDMETHODIMP _get_Language(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_Language(HSTRING value) = 0;
	virtual STDMETHODIMP _get_BaseUri(Foundation::Uri* *value) = 0;
	virtual STDMETHODIMP _put_BaseUri(Foundation::Uri* value) = 0;
	virtual STDMETHODIMP _get_AttributeExtensions(Foundation::Collections::IVector<SyndicationAttribute*>* *value) = 0;
	virtual STDMETHODIMP _get_ElementExtensions(Foundation::Collections::IVector<ISyndicationNode*>* *value) = 0;
	virtual STDMETHODIMP _GetXmlDocument(SyndicationFormat format, Data::Xml::Dom::XmlDocument* *xmlDocument) = 0;
};
template<typename X> struct ISyndicationNode_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationAttribute>>> get() { Foundation::Collections::IVector<SyndicationAttribute*>* value; hrcheck(enc(&ISyndicationNode_adaptor::AttributeExtensions)->_get_AttributeExtensions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationAttribute>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationAttribute>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationAttribute>>> operator->() { return get(); }
		} AttributeExtensions;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationNode_adaptor::BaseUri)->_get_BaseUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationNode_adaptor::BaseUri)->_put_BaseUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} BaseUri;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<ISyndicationNode>>> get() { Foundation::Collections::IVector<ISyndicationNode*>* value; hrcheck(enc(&ISyndicationNode_adaptor::ElementExtensions)->_get_ElementExtensions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<ISyndicationNode>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<ISyndicationNode>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<ISyndicationNode>>> operator->() { return get(); }
		} ElementExtensions;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationNode_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationNode_adaptor::Language)->_put_Language(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationNode_adaptor::NodeName)->_get_NodeName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationNode_adaptor::NodeName)->_put_NodeName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} NodeName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationNode_adaptor::NodeNamespace)->_get_NodeNamespace(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationNode_adaptor::NodeNamespace)->_put_NodeNamespace(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} NodeNamespace;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationNode_adaptor::NodeValue)->_get_NodeValue(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationNode_adaptor::NodeValue)->_put_NodeValue(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} NodeValue;
	};
	ptr<Data::Xml::Dom::XmlDocument> GetXmlDocument(SyndicationFormat format) { Data::Xml::Dom::XmlDocument* xmlDocument; hrcheck(X::get()->_GetXmlDocument(format, &xmlDocument)); return from_abi(xmlDocument); }
	ISyndicationNode_adaptor() {}
};
template<typename X> struct adapt<ISyndicationNode, X> : Windows::Web::Syndication::ISyndicationNode_adaptor<X> { typedef adapt ISyndicationNode; };
template<typename X> struct ISyndicationNode_unadaptor : X {
	STDMETHODIMP _get_NodeName(HSTRING *value) { return hrtry([&, this] { get_prop(value, NodeName); }); }
	STDMETHODIMP _put_NodeName(HSTRING value) { return hrtry([&, this] { put_prop(value, NodeName); }); }
	STDMETHODIMP _get_NodeNamespace(HSTRING *value) { return hrtry([&, this] { get_prop(value, NodeNamespace); }); }
	STDMETHODIMP _put_NodeNamespace(HSTRING value) { return hrtry([&, this] { put_prop(value, NodeNamespace); }); }
	STDMETHODIMP _get_NodeValue(HSTRING *value) { return hrtry([&, this] { get_prop(value, NodeValue); }); }
	STDMETHODIMP _put_NodeValue(HSTRING value) { return hrtry([&, this] { put_prop(value, NodeValue); }); }
	STDMETHODIMP _get_Language(HSTRING *value) { return hrtry([&, this] { get_prop(value, Language); }); }
	STDMETHODIMP _put_Language(HSTRING value) { return hrtry([&, this] { put_prop(value, Language); }); }
	STDMETHODIMP _get_BaseUri(Foundation::Uri* *value) { return hrtry([&, this] { get_prop(value, BaseUri); }); }
	STDMETHODIMP _put_BaseUri(Foundation::Uri* value) { return hrtry([&, this] { put_prop(value, BaseUri); }); }
	STDMETHODIMP _get_AttributeExtensions(Foundation::Collections::IVector<SyndicationAttribute*>* *value) { return hrtry([&, this] { get_prop(value, AttributeExtensions); }); }
	STDMETHODIMP _get_ElementExtensions(Foundation::Collections::IVector<ISyndicationNode*>* *value) { return hrtry([&, this] { get_prop(value, ElementExtensions); }); }
	STDMETHODIMP _GetXmlDocument(SyndicationFormat format, Data::Xml::Dom::XmlDocument* *xmlDocument) { return hrtry([&, this] { *xmlDocument = to_abi(X::get()->GetXmlDocument(format)); }); }
};
template<typename X> struct unadapt<ISyndicationNode, X> : Windows::Web::Syndication::ISyndicationNode_unadaptor<X> {};
struct ISyndicationNode : ISyndicationNode_raw, generate<ISyndicationNode> {};

// ISyndicationNodeFactory
struct ISyndicationNodeFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationNode(HSTRING nodeName, HSTRING nodeNamespace, HSTRING nodeValue, SyndicationNode* *node);
};

// SyndicationNode
template<typename> struct SyndicationNode_statics {
	static SyndicationNode *activate(hstring_ref nodeName, hstring_ref nodeNamespace, hstring_ref nodeValue) { SyndicationNode *node; hrcheck(get_activation_factory<SyndicationNode, ISyndicationNodeFactory>()->_CreateSyndicationNode(nodeName, nodeNamespace, nodeValue, &node)); return node; }
	static SyndicationNode *activate() { SyndicationNode *t; get_activation_factory<SyndicationNode>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<SyndicationNode, X> : X, Windows::Web::Syndication::SyndicationNode_statics<void> {
	using Windows::Web::Syndication::SyndicationNode_statics<void>::activate;
	typedef typename X::root_type SyndicationNode;
};
struct SyndicationNode : generate<SyndicationNode> {};

// ISyndicationGenerator
struct ISyndicationGenerator_raw : IInspectable {
	virtual STDMETHODIMP _get_Text(HSTRING *value);
	virtual STDMETHODIMP _put_Text(HSTRING value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Version(HSTRING *value);
	virtual STDMETHODIMP _put_Version(HSTRING value);
};
template<typename X> struct ISyndicationGenerator_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationGenerator_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationGenerator_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationGenerator_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationGenerator_adaptor::Uri)->_put_Uri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Uri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationGenerator_adaptor::Version)->_get_Version(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationGenerator_adaptor::Version)->_put_Version(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Version;
	};
	ISyndicationGenerator_adaptor() {}
};
template<typename X> struct adapt<ISyndicationGenerator, X> : Windows::Web::Syndication::ISyndicationGenerator_adaptor<X> { typedef adapt ISyndicationGenerator; };
struct ISyndicationGenerator : ISyndicationGenerator_raw, generate<ISyndicationGenerator> {};

// ISyndicationGeneratorFactory
struct ISyndicationGeneratorFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationGenerator(HSTRING text, SyndicationGenerator* *generator);
};

// SyndicationGenerator
template<typename> struct SyndicationGenerator_statics {
	static SyndicationGenerator *activate() { SyndicationGenerator *t; get_activation_factory<SyndicationGenerator>()->ActivateInstance((IInspectable**)&t); return t; }
	static SyndicationGenerator *activate(hstring_ref text) { SyndicationGenerator *generator; hrcheck(get_activation_factory<SyndicationGenerator, ISyndicationGeneratorFactory>()->_CreateSyndicationGenerator(text, &generator)); return generator; }
};

template<typename X> struct statics<SyndicationGenerator, X> : X, Windows::Web::Syndication::SyndicationGenerator_statics<void> {
	using Windows::Web::Syndication::SyndicationGenerator_statics<void>::activate;
	typedef typename X::root_type SyndicationGenerator;
};
struct SyndicationGenerator : generate<SyndicationGenerator> {};

// ISyndicationText
struct ISyndicationText_raw : IInspectable {
	virtual STDMETHODIMP _get_Text(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_Text(HSTRING value) = 0;
	virtual STDMETHODIMP _get_Type(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_Type(HSTRING value) = 0;
	virtual STDMETHODIMP _get_Xml(Data::Xml::Dom::XmlDocument* *value) = 0;
	virtual STDMETHODIMP _put_Xml(Data::Xml::Dom::XmlDocument* value) = 0;
};
template<typename X> struct ISyndicationText_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationText_adaptor::Text)->_get_Text(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationText_adaptor::Text)->_put_Text(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Text;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationText_adaptor::Type)->_get_Type(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationText_adaptor::Type)->_put_Type(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Type;
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&ISyndicationText_adaptor::Xml)->_get_Xml(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
			void put(pptr<Data::Xml::Dom::XmlDocument> value) { hrcheck(enc(&ISyndicationText_adaptor::Xml)->_put_Xml(value)); }
			void operator=(pptr<Data::Xml::Dom::XmlDocument> value) { put(value); }
			void operator()(pptr<Data::Xml::Dom::XmlDocument> value) { put(value); }
		} Xml;
	};
	ISyndicationText_adaptor() {}
};
template<typename X> struct adapt<ISyndicationText, X> : Windows::Web::Syndication::ISyndicationText_adaptor<X> { typedef adapt ISyndicationText; };
template<typename X> struct ISyndicationText_unadaptor : X {
	STDMETHODIMP _get_Text(HSTRING *value) { return hrtry([&, this] { get_prop(value, Text); }); }
	STDMETHODIMP _put_Text(HSTRING value) { return hrtry([&, this] { put_prop(value, Text); }); }
	STDMETHODIMP _get_Type(HSTRING *value) { return hrtry([&, this] { get_prop(value, Type); }); }
	STDMETHODIMP _put_Type(HSTRING value) { return hrtry([&, this] { put_prop(value, Type); }); }
	STDMETHODIMP _get_Xml(Data::Xml::Dom::XmlDocument* *value) { return hrtry([&, this] { get_prop(value, Xml); }); }
	STDMETHODIMP _put_Xml(Data::Xml::Dom::XmlDocument* value) { return hrtry([&, this] { put_prop(value, Xml); }); }
};
template<typename X> struct unadapt<ISyndicationText, X> : Windows::Web::Syndication::ISyndicationText_unadaptor<X> {};
struct ISyndicationText : ISyndicationText_raw, generate<ISyndicationText> {};

// ISyndicationTextFactory
struct ISyndicationTextFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationText(HSTRING text, SyndicationText* *syndicationText);
	virtual STDMETHODIMP _CreateSyndicationTextEx(HSTRING text, SyndicationTextType type, SyndicationText* *syndicationText);
};

// SyndicationText
template<typename> struct SyndicationText_statics {
	static SyndicationText *activate(hstring_ref text) { SyndicationText *syndicationText; hrcheck(get_activation_factory<SyndicationText, ISyndicationTextFactory>()->_CreateSyndicationText(text, &syndicationText)); return syndicationText; }
	static SyndicationText *activate(hstring_ref text, SyndicationTextType type) { SyndicationText *syndicationText; hrcheck(get_activation_factory<SyndicationText, ISyndicationTextFactory>()->_CreateSyndicationTextEx(text, type, &syndicationText)); return syndicationText; }
	static SyndicationText *activate() { SyndicationText *t; get_activation_factory<SyndicationText>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<SyndicationText, X> : X, Windows::Web::Syndication::SyndicationText_statics<void> {
	using Windows::Web::Syndication::SyndicationText_statics<void>::activate;
	typedef typename X::root_type SyndicationText;
};
struct SyndicationText : generate<SyndicationText> {};

// ISyndicationContent
struct ISyndicationContent_raw : IInspectable {
	virtual STDMETHODIMP _get_SourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_SourceUri(Foundation::Uri* value);
};
template<typename X> struct ISyndicationContent_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationContent_adaptor::SourceUri)->_get_SourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationContent_adaptor::SourceUri)->_put_SourceUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} SourceUri;
	};
	ISyndicationContent_adaptor() {}
};
template<typename X> struct adapt<ISyndicationContent, X> : Windows::Web::Syndication::ISyndicationContent_adaptor<X> { typedef adapt ISyndicationContent; };
struct ISyndicationContent : ISyndicationContent_raw, generate<ISyndicationContent> {};

// ISyndicationContentFactory
struct ISyndicationContentFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationContent(HSTRING text, SyndicationTextType type, SyndicationContent* *content);
	virtual STDMETHODIMP _CreateSyndicationContentWithSourceUri(Foundation::Uri* sourceUri, SyndicationContent* *content);
};

// SyndicationContent
template<typename> struct SyndicationContent_statics {
	static SyndicationContent *activate(hstring_ref text, SyndicationTextType type) { SyndicationContent *content; hrcheck(get_activation_factory<SyndicationContent, ISyndicationContentFactory>()->_CreateSyndicationContent(text, type, &content)); return content; }
	static SyndicationContent *activate(pptr<Foundation::Uri> sourceUri) { SyndicationContent *content; hrcheck(get_activation_factory<SyndicationContent, ISyndicationContentFactory>()->_CreateSyndicationContentWithSourceUri(sourceUri, &content)); return content; }
	static SyndicationContent *activate() { SyndicationContent *t; get_activation_factory<SyndicationContent>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<SyndicationContent, X> : X, Windows::Web::Syndication::SyndicationContent_statics<void> {
	using Windows::Web::Syndication::SyndicationContent_statics<void>::activate;
	typedef typename X::root_type SyndicationContent;
};
struct SyndicationContent : generate<SyndicationContent> {};

// ISyndicationLink
struct ISyndicationLink_raw : IInspectable {
	virtual STDMETHODIMP _get_Length(unsigned *value);
	virtual STDMETHODIMP _put_Length(unsigned value);
	virtual STDMETHODIMP _get_MediaType(HSTRING *value);
	virtual STDMETHODIMP _put_MediaType(HSTRING value);
	virtual STDMETHODIMP _get_Relationship(HSTRING *value);
	virtual STDMETHODIMP _put_Relationship(HSTRING value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _put_Title(HSTRING value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_ResourceLanguage(HSTRING *value);
	virtual STDMETHODIMP _put_ResourceLanguage(HSTRING value);
};
template<typename X> struct ISyndicationLink_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISyndicationLink_adaptor::Length)->_get_Length(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ISyndicationLink_adaptor::Length)->_put_Length(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Length;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationLink_adaptor::MediaType)->_get_MediaType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationLink_adaptor::MediaType)->_put_MediaType(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} MediaType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationLink_adaptor::Relationship)->_get_Relationship(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationLink_adaptor::Relationship)->_put_Relationship(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Relationship;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationLink_adaptor::ResourceLanguage)->_get_ResourceLanguage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationLink_adaptor::ResourceLanguage)->_put_ResourceLanguage(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ResourceLanguage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationLink_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationLink_adaptor::Title)->_put_Title(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Title;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationLink_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationLink_adaptor::Uri)->_put_Uri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Uri;
	};
	ISyndicationLink_adaptor() {}
};
template<typename X> struct adapt<ISyndicationLink, X> : Windows::Web::Syndication::ISyndicationLink_adaptor<X> { typedef adapt ISyndicationLink; };
struct ISyndicationLink : ISyndicationLink_raw, generate<ISyndicationLink> {};

// ISyndicationLinkFactory
struct ISyndicationLinkFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationLink(Foundation::Uri* uri, SyndicationLink* *link);
	virtual STDMETHODIMP _CreateSyndicationLinkEx(Foundation::Uri* uri, HSTRING relationship, HSTRING title, HSTRING mediaType, unsigned length, SyndicationLink* *link);
};

// SyndicationLink
template<typename> struct SyndicationLink_statics {
	static SyndicationLink *activate(pptr<Foundation::Uri> uri) { SyndicationLink *link; hrcheck(get_activation_factory<SyndicationLink, ISyndicationLinkFactory>()->_CreateSyndicationLink(uri, &link)); return link; }
	static SyndicationLink *activate(pptr<Foundation::Uri> uri, hstring_ref relationship, hstring_ref title, hstring_ref mediaType, unsigned length) { SyndicationLink *link; hrcheck(get_activation_factory<SyndicationLink, ISyndicationLinkFactory>()->_CreateSyndicationLinkEx(uri, relationship, title, mediaType, length, &link)); return link; }
	static SyndicationLink *activate() { SyndicationLink *t; get_activation_factory<SyndicationLink>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<SyndicationLink, X> : X, Windows::Web::Syndication::SyndicationLink_statics<void> {
	using Windows::Web::Syndication::SyndicationLink_statics<void>::activate;
	typedef typename X::root_type SyndicationLink;
};
struct SyndicationLink : generate<SyndicationLink> {};

// ISyndicationPerson
struct ISyndicationPerson_raw : IInspectable {
	virtual STDMETHODIMP _get_Email(HSTRING *value);
	virtual STDMETHODIMP _put_Email(HSTRING value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* value);
};
template<typename X> struct ISyndicationPerson_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationPerson_adaptor::Email)->_get_Email(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationPerson_adaptor::Email)->_put_Email(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Email;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationPerson_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationPerson_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationPerson_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationPerson_adaptor::Uri)->_put_Uri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Uri;
	};
	ISyndicationPerson_adaptor() {}
};
template<typename X> struct adapt<ISyndicationPerson, X> : Windows::Web::Syndication::ISyndicationPerson_adaptor<X> { typedef adapt ISyndicationPerson; };
struct ISyndicationPerson : ISyndicationPerson_raw, generate<ISyndicationPerson> {};

// ISyndicationPersonFactory
struct ISyndicationPersonFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationPerson(HSTRING name, SyndicationPerson* *person);
	virtual STDMETHODIMP _CreateSyndicationPersonEx(HSTRING name, HSTRING email, Foundation::Uri* uri, SyndicationPerson* *person);
};

// SyndicationPerson
template<typename> struct SyndicationPerson_statics {
	static SyndicationPerson *activate() { SyndicationPerson *t; get_activation_factory<SyndicationPerson>()->ActivateInstance((IInspectable**)&t); return t; }
	static SyndicationPerson *activate(hstring_ref name) { SyndicationPerson *person; hrcheck(get_activation_factory<SyndicationPerson, ISyndicationPersonFactory>()->_CreateSyndicationPerson(name, &person)); return person; }
	static SyndicationPerson *activate(hstring_ref name, hstring_ref email, pptr<Foundation::Uri> uri) { SyndicationPerson *person; hrcheck(get_activation_factory<SyndicationPerson, ISyndicationPersonFactory>()->_CreateSyndicationPersonEx(name, email, uri, &person)); return person; }
};

template<typename X> struct statics<SyndicationPerson, X> : X, Windows::Web::Syndication::SyndicationPerson_statics<void> {
	using Windows::Web::Syndication::SyndicationPerson_statics<void>::activate;
	typedef typename X::root_type SyndicationPerson;
};
struct SyndicationPerson : generate<SyndicationPerson> {};

// ISyndicationCategory
struct ISyndicationCategory_raw : IInspectable {
	virtual STDMETHODIMP _get_Label(HSTRING *value);
	virtual STDMETHODIMP _put_Label(HSTRING value);
	virtual STDMETHODIMP _get_Scheme(HSTRING *value);
	virtual STDMETHODIMP _put_Scheme(HSTRING value);
	virtual STDMETHODIMP _get_Term(HSTRING *value);
	virtual STDMETHODIMP _put_Term(HSTRING value);
};
template<typename X> struct ISyndicationCategory_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationCategory_adaptor::Label)->_get_Label(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationCategory_adaptor::Label)->_put_Label(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Label;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationCategory_adaptor::Scheme)->_get_Scheme(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationCategory_adaptor::Scheme)->_put_Scheme(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Scheme;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationCategory_adaptor::Term)->_get_Term(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationCategory_adaptor::Term)->_put_Term(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Term;
	};
	ISyndicationCategory_adaptor() {}
};
template<typename X> struct adapt<ISyndicationCategory, X> : Windows::Web::Syndication::ISyndicationCategory_adaptor<X> { typedef adapt ISyndicationCategory; };
struct ISyndicationCategory : ISyndicationCategory_raw, generate<ISyndicationCategory> {};

// ISyndicationCategoryFactory
struct ISyndicationCategoryFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationCategory(HSTRING term, SyndicationCategory* *category);
	virtual STDMETHODIMP _CreateSyndicationCategoryEx(HSTRING term, HSTRING scheme, HSTRING label, SyndicationCategory* *category);
};

// SyndicationCategory
template<typename> struct SyndicationCategory_statics {
	static SyndicationCategory *activate() { SyndicationCategory *t; get_activation_factory<SyndicationCategory>()->ActivateInstance((IInspectable**)&t); return t; }
	static SyndicationCategory *activate(hstring_ref term) { SyndicationCategory *category; hrcheck(get_activation_factory<SyndicationCategory, ISyndicationCategoryFactory>()->_CreateSyndicationCategory(term, &category)); return category; }
	static SyndicationCategory *activate(hstring_ref term, hstring_ref scheme, hstring_ref label) { SyndicationCategory *category; hrcheck(get_activation_factory<SyndicationCategory, ISyndicationCategoryFactory>()->_CreateSyndicationCategoryEx(term, scheme, label, &category)); return category; }
};

template<typename X> struct statics<SyndicationCategory, X> : X, Windows::Web::Syndication::SyndicationCategory_statics<void> {
	using Windows::Web::Syndication::SyndicationCategory_statics<void>::activate;
	typedef typename X::root_type SyndicationCategory;
};
struct SyndicationCategory : generate<SyndicationCategory> {};

// ISyndicationItem
struct ISyndicationItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Authors(Foundation::Collections::IVector<SyndicationPerson*>* *value);
	virtual STDMETHODIMP _get_Categories(Foundation::Collections::IVector<SyndicationCategory*>* *value);
	virtual STDMETHODIMP _get_Contributors(Foundation::Collections::IVector<SyndicationPerson*>* *value);
	virtual STDMETHODIMP _get_Content(SyndicationContent* *value);
	virtual STDMETHODIMP _put_Content(SyndicationContent* value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_LastUpdatedTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_LastUpdatedTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_Links(Foundation::Collections::IVector<SyndicationLink*>* *value);
	virtual STDMETHODIMP _get_PublishedDate(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_PublishedDate(Foundation::DateTime value);
	virtual STDMETHODIMP _get_Rights(ISyndicationText* *value);
	virtual STDMETHODIMP _put_Rights(ISyndicationText* value);
	virtual STDMETHODIMP _get_Source(SyndicationFeed* *value);
	virtual STDMETHODIMP _put_Source(SyndicationFeed* value);
	virtual STDMETHODIMP _get_Summary(ISyndicationText* *value);
	virtual STDMETHODIMP _put_Summary(ISyndicationText* value);
	virtual STDMETHODIMP _get_Title(ISyndicationText* *value);
	virtual STDMETHODIMP _put_Title(ISyndicationText* value);
	virtual STDMETHODIMP _get_CommentsUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_CommentsUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_EditUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_EditMediaUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ETag(HSTRING *value);
	virtual STDMETHODIMP _get_ItemUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _Load(HSTRING item);
	virtual STDMETHODIMP _LoadFromXml(Data::Xml::Dom::XmlDocument* itemDocument);
};
template<typename X> struct ISyndicationItem_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> get() { Foundation::Collections::IVector<SyndicationPerson*>* value; hrcheck(enc(&ISyndicationItem_adaptor::Authors)->_get_Authors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator->() { return get(); }
		} Authors;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> get() { Foundation::Collections::IVector<SyndicationCategory*>* value; hrcheck(enc(&ISyndicationItem_adaptor::Categories)->_get_Categories(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> operator->() { return get(); }
		} Categories;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationItem_adaptor::CommentsUri)->_get_CommentsUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationItem_adaptor::CommentsUri)->_put_CommentsUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} CommentsUri;
		struct : property {
			ptr<SyndicationContent> get() { SyndicationContent* value; hrcheck(enc(&ISyndicationItem_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<SyndicationContent> operator()() { return get(); }
			operator ptr<SyndicationContent> () { return get(); }
			ptr<SyndicationContent> operator->() { return get(); }
			void put(pptr<SyndicationContent> value) { hrcheck(enc(&ISyndicationItem_adaptor::Content)->_put_Content(value)); }
			void operator=(pptr<SyndicationContent> value) { put(value); }
			void operator()(pptr<SyndicationContent> value) { put(value); }
		} Content;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> get() { Foundation::Collections::IVector<SyndicationPerson*>* value; hrcheck(enc(&ISyndicationItem_adaptor::Contributors)->_get_Contributors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator->() { return get(); }
		} Contributors;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationItem_adaptor::ETag)->_get_ETag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ETag;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationItem_adaptor::EditMediaUri)->_get_EditMediaUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} EditMediaUri;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationItem_adaptor::EditUri)->_get_EditUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} EditUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationItem_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationItem_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationItem_adaptor::ItemUri)->_get_ItemUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ItemUri;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISyndicationItem_adaptor::LastUpdatedTime)->_get_LastUpdatedTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&ISyndicationItem_adaptor::LastUpdatedTime)->_put_LastUpdatedTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastUpdatedTime;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> get() { Foundation::Collections::IVector<SyndicationLink*>* value; hrcheck(enc(&ISyndicationItem_adaptor::Links)->_get_Links(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> operator->() { return get(); }
		} Links;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISyndicationItem_adaptor::PublishedDate)->_get_PublishedDate(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&ISyndicationItem_adaptor::PublishedDate)->_put_PublishedDate(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} PublishedDate;
		struct : property {
			ptr<ISyndicationText> get() { ISyndicationText* value; hrcheck(enc(&ISyndicationItem_adaptor::Rights)->_get_Rights(&value)); return from_abi(value); }
			ptr<ISyndicationText> operator()() { return get(); }
			operator ptr<ISyndicationText> () { return get(); }
			ptr<ISyndicationText> operator->() { return get(); }
			void put(pptr<ISyndicationText> value) { hrcheck(enc(&ISyndicationItem_adaptor::Rights)->_put_Rights(value)); }
			void operator=(pptr<ISyndicationText> value) { put(value); }
			void operator()(pptr<ISyndicationText> value) { put(value); }
		} Rights;
		struct : property {
			ptr<SyndicationFeed> get() { SyndicationFeed* value; hrcheck(enc(&ISyndicationItem_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<SyndicationFeed> operator()() { return get(); }
			operator ptr<SyndicationFeed> () { return get(); }
			ptr<SyndicationFeed> operator->() { return get(); }
			void put(pptr<SyndicationFeed> value) { hrcheck(enc(&ISyndicationItem_adaptor::Source)->_put_Source(value)); }
			void operator=(pptr<SyndicationFeed> value) { put(value); }
			void operator()(pptr<SyndicationFeed> value) { put(value); }
		} Source;
		struct : property {
			ptr<ISyndicationText> get() { ISyndicationText* value; hrcheck(enc(&ISyndicationItem_adaptor::Summary)->_get_Summary(&value)); return from_abi(value); }
			ptr<ISyndicationText> operator()() { return get(); }
			operator ptr<ISyndicationText> () { return get(); }
			ptr<ISyndicationText> operator->() { return get(); }
			void put(pptr<ISyndicationText> value) { hrcheck(enc(&ISyndicationItem_adaptor::Summary)->_put_Summary(value)); }
			void operator=(pptr<ISyndicationText> value) { put(value); }
			void operator()(pptr<ISyndicationText> value) { put(value); }
		} Summary;
		struct : property {
			ptr<ISyndicationText> get() { ISyndicationText* value; hrcheck(enc(&ISyndicationItem_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			ptr<ISyndicationText> operator()() { return get(); }
			operator ptr<ISyndicationText> () { return get(); }
			ptr<ISyndicationText> operator->() { return get(); }
			void put(pptr<ISyndicationText> value) { hrcheck(enc(&ISyndicationItem_adaptor::Title)->_put_Title(value)); }
			void operator=(pptr<ISyndicationText> value) { put(value); }
			void operator()(pptr<ISyndicationText> value) { put(value); }
		} Title;
	};
	void Load(hstring_ref item) { hrcheck(X::get()->_Load(item)); }
	void LoadFromXml(pptr<Data::Xml::Dom::XmlDocument> itemDocument) { hrcheck(X::get()->_LoadFromXml(itemDocument)); }
	ISyndicationItem_adaptor() {}
};
template<typename X> struct adapt<ISyndicationItem, X> : Windows::Web::Syndication::ISyndicationItem_adaptor<X> { typedef adapt ISyndicationItem; };
struct ISyndicationItem : ISyndicationItem_raw, generate<ISyndicationItem> {};

// ISyndicationFeedFactory
struct ISyndicationFeedFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationFeed(HSTRING title, HSTRING subtitle, Foundation::Uri* uri, SyndicationFeed* *feed);
};

// ISyndicationFeed
struct ISyndicationFeed_raw : IInspectable {
	virtual STDMETHODIMP _get_Authors(Foundation::Collections::IVector<SyndicationPerson*>* *value);
	virtual STDMETHODIMP _get_Categories(Foundation::Collections::IVector<SyndicationCategory*>* *value);
	virtual STDMETHODIMP _get_Contributors(Foundation::Collections::IVector<SyndicationPerson*>* *value);
	virtual STDMETHODIMP _get_Generator(SyndicationGenerator* *value);
	virtual STDMETHODIMP _put_Generator(SyndicationGenerator* value);
	virtual STDMETHODIMP _get_IconUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_IconUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_Items(Foundation::Collections::IVector<SyndicationItem*>* *value);
	virtual STDMETHODIMP _get_LastUpdatedTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_LastUpdatedTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_Links(Foundation::Collections::IVector<SyndicationLink*>* *value);
	virtual STDMETHODIMP _get_ImageUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ImageUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_Rights(ISyndicationText* *value);
	virtual STDMETHODIMP _put_Rights(ISyndicationText* value);
	virtual STDMETHODIMP _get_Subtitle(ISyndicationText* *value);
	virtual STDMETHODIMP _put_Subtitle(ISyndicationText* value);
	virtual STDMETHODIMP _get_Title(ISyndicationText* *value);
	virtual STDMETHODIMP _put_Title(ISyndicationText* value);
	virtual STDMETHODIMP _get_FirstUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_LastUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_NextUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_PreviousUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_SourceFormat(SyndicationFormat *value);
	virtual STDMETHODIMP _Load(HSTRING feed);
	virtual STDMETHODIMP _LoadFromXml(Data::Xml::Dom::XmlDocument* feedDocument);
};
template<typename X> struct ISyndicationFeed_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> get() { Foundation::Collections::IVector<SyndicationPerson*>* value; hrcheck(enc(&ISyndicationFeed_adaptor::Authors)->_get_Authors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator->() { return get(); }
		} Authors;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> get() { Foundation::Collections::IVector<SyndicationCategory*>* value; hrcheck(enc(&ISyndicationFeed_adaptor::Categories)->_get_Categories(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationCategory>>> operator->() { return get(); }
		} Categories;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> get() { Foundation::Collections::IVector<SyndicationPerson*>* value; hrcheck(enc(&ISyndicationFeed_adaptor::Contributors)->_get_Contributors(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationPerson>>> operator->() { return get(); }
		} Contributors;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationFeed_adaptor::FirstUri)->_get_FirstUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} FirstUri;
		struct : property {
			ptr<SyndicationGenerator> get() { SyndicationGenerator* value; hrcheck(enc(&ISyndicationFeed_adaptor::Generator)->_get_Generator(&value)); return from_abi(value); }
			ptr<SyndicationGenerator> operator()() { return get(); }
			operator ptr<SyndicationGenerator> () { return get(); }
			ptr<SyndicationGenerator> operator->() { return get(); }
			void put(pptr<SyndicationGenerator> value) { hrcheck(enc(&ISyndicationFeed_adaptor::Generator)->_put_Generator(value)); }
			void operator=(pptr<SyndicationGenerator> value) { put(value); }
			void operator()(pptr<SyndicationGenerator> value) { put(value); }
		} Generator;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationFeed_adaptor::IconUri)->_get_IconUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationFeed_adaptor::IconUri)->_put_IconUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} IconUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISyndicationFeed_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISyndicationFeed_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationFeed_adaptor::ImageUri)->_get_ImageUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&ISyndicationFeed_adaptor::ImageUri)->_put_ImageUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ImageUri;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationItem>>> get() { Foundation::Collections::IVector<SyndicationItem*>* value; hrcheck(enc(&ISyndicationFeed_adaptor::Items)->_get_Items(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationItem>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationItem>>> operator->() { return get(); }
		} Items;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISyndicationFeed_adaptor::LastUpdatedTime)->_get_LastUpdatedTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&ISyndicationFeed_adaptor::LastUpdatedTime)->_put_LastUpdatedTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastUpdatedTime;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationFeed_adaptor::LastUri)->_get_LastUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} LastUri;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> get() { Foundation::Collections::IVector<SyndicationLink*>* value; hrcheck(enc(&ISyndicationFeed_adaptor::Links)->_get_Links(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<SyndicationLink>>> operator->() { return get(); }
		} Links;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationFeed_adaptor::NextUri)->_get_NextUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} NextUri;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ISyndicationFeed_adaptor::PreviousUri)->_get_PreviousUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} PreviousUri;
		struct : property {
			ptr<ISyndicationText> get() { ISyndicationText* value; hrcheck(enc(&ISyndicationFeed_adaptor::Rights)->_get_Rights(&value)); return from_abi(value); }
			ptr<ISyndicationText> operator()() { return get(); }
			operator ptr<ISyndicationText> () { return get(); }
			ptr<ISyndicationText> operator->() { return get(); }
			void put(pptr<ISyndicationText> value) { hrcheck(enc(&ISyndicationFeed_adaptor::Rights)->_put_Rights(value)); }
			void operator=(pptr<ISyndicationText> value) { put(value); }
			void operator()(pptr<ISyndicationText> value) { put(value); }
		} Rights;
		struct : property {
			SyndicationFormat get() { SyndicationFormat value; hrcheck(enc(&ISyndicationFeed_adaptor::SourceFormat)->_get_SourceFormat(&value)); return value; }
			SyndicationFormat operator()() { return get(); }
			operator SyndicationFormat () { return get(); }
		} SourceFormat;
		struct : property {
			ptr<ISyndicationText> get() { ISyndicationText* value; hrcheck(enc(&ISyndicationFeed_adaptor::Subtitle)->_get_Subtitle(&value)); return from_abi(value); }
			ptr<ISyndicationText> operator()() { return get(); }
			operator ptr<ISyndicationText> () { return get(); }
			ptr<ISyndicationText> operator->() { return get(); }
			void put(pptr<ISyndicationText> value) { hrcheck(enc(&ISyndicationFeed_adaptor::Subtitle)->_put_Subtitle(value)); }
			void operator=(pptr<ISyndicationText> value) { put(value); }
			void operator()(pptr<ISyndicationText> value) { put(value); }
		} Subtitle;
		struct : property {
			ptr<ISyndicationText> get() { ISyndicationText* value; hrcheck(enc(&ISyndicationFeed_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			ptr<ISyndicationText> operator()() { return get(); }
			operator ptr<ISyndicationText> () { return get(); }
			ptr<ISyndicationText> operator->() { return get(); }
			void put(pptr<ISyndicationText> value) { hrcheck(enc(&ISyndicationFeed_adaptor::Title)->_put_Title(value)); }
			void operator=(pptr<ISyndicationText> value) { put(value); }
			void operator()(pptr<ISyndicationText> value) { put(value); }
		} Title;
	};
	void Load(hstring_ref feed) { hrcheck(X::get()->_Load(feed)); }
	void LoadFromXml(pptr<Data::Xml::Dom::XmlDocument> feedDocument) { hrcheck(X::get()->_LoadFromXml(feedDocument)); }
	ISyndicationFeed_adaptor() {}
};
template<typename X> struct adapt<ISyndicationFeed, X> : Windows::Web::Syndication::ISyndicationFeed_adaptor<X> { typedef adapt ISyndicationFeed; };
struct ISyndicationFeed : ISyndicationFeed_raw, generate<ISyndicationFeed> {};

// SyndicationFeed
template<typename> struct SyndicationFeed_statics {
	static SyndicationFeed *activate(hstring_ref title, hstring_ref subtitle, pptr<Foundation::Uri> uri) { SyndicationFeed *feed; hrcheck(get_activation_factory<SyndicationFeed, ISyndicationFeedFactory>()->_CreateSyndicationFeed(title, subtitle, uri, &feed)); return feed; }
	static SyndicationFeed *activate() { SyndicationFeed *t; get_activation_factory<SyndicationFeed>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<SyndicationFeed, X> : X, Windows::Web::Syndication::SyndicationFeed_statics<void> {
	using Windows::Web::Syndication::SyndicationFeed_statics<void>::activate;
	typedef typename X::root_type SyndicationFeed;
};
struct SyndicationFeed : generate<SyndicationFeed> {};

// ISyndicationItemFactory
struct ISyndicationItemFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationItem(HSTRING title, SyndicationContent* content, Foundation::Uri* uri, SyndicationItem* *item);
};

// SyndicationItem
template<typename> struct SyndicationItem_statics {
	static SyndicationItem *activate(hstring_ref title, pptr<SyndicationContent> content, pptr<Foundation::Uri> uri) { SyndicationItem *item; hrcheck(get_activation_factory<SyndicationItem, ISyndicationItemFactory>()->_CreateSyndicationItem(title, content, uri, &item)); return item; }
	static SyndicationItem *activate() { SyndicationItem *t; get_activation_factory<SyndicationItem>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<SyndicationItem, X> : X, Windows::Web::Syndication::SyndicationItem_statics<void> {
	using Windows::Web::Syndication::SyndicationItem_statics<void>::activate;
	typedef typename X::root_type SyndicationItem;
};
struct SyndicationItem : generate<SyndicationItem> {};

// ISyndicationClient
struct ISyndicationClient_raw : IInspectable {
	virtual STDMETHODIMP _get_ServerCredential(Security::Credentials::PasswordCredential* *value) = 0;
	virtual STDMETHODIMP _put_ServerCredential(Security::Credentials::PasswordCredential* value) = 0;
	virtual STDMETHODIMP _get_ProxyCredential(Security::Credentials::PasswordCredential* *value) = 0;
	virtual STDMETHODIMP _put_ProxyCredential(Security::Credentials::PasswordCredential* value) = 0;
	virtual STDMETHODIMP _get_MaxResponseBufferSize(unsigned *value) = 0;
	virtual STDMETHODIMP _put_MaxResponseBufferSize(unsigned value) = 0;
	virtual STDMETHODIMP _get_Timeout(unsigned *value) = 0;
	virtual STDMETHODIMP _put_Timeout(unsigned value) = 0;
	virtual STDMETHODIMP _get_BypassCacheOnRetrieve(bool *value) = 0;
	virtual STDMETHODIMP _put_BypassCacheOnRetrieve(bool value) = 0;
	virtual STDMETHODIMP _SetRequestHeader(HSTRING name, HSTRING value) = 0;
	virtual STDMETHODIMP _RetrieveFeedAsync(Foundation::Uri* uri, Foundation::IAsyncOperationWithProgress<SyndicationFeed*, RetrievalProgress>* *operation) = 0;
};
template<typename X> struct ISyndicationClient_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISyndicationClient_adaptor::BypassCacheOnRetrieve)->_get_BypassCacheOnRetrieve(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISyndicationClient_adaptor::BypassCacheOnRetrieve)->_put_BypassCacheOnRetrieve(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} BypassCacheOnRetrieve;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISyndicationClient_adaptor::MaxResponseBufferSize)->_get_MaxResponseBufferSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ISyndicationClient_adaptor::MaxResponseBufferSize)->_put_MaxResponseBufferSize(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MaxResponseBufferSize;
		struct : property {
			ptr<Security::Credentials::PasswordCredential> get() { Security::Credentials::PasswordCredential* value; hrcheck(enc(&ISyndicationClient_adaptor::ProxyCredential)->_get_ProxyCredential(&value)); return from_abi(value); }
			ptr<Security::Credentials::PasswordCredential> operator()() { return get(); }
			operator ptr<Security::Credentials::PasswordCredential> () { return get(); }
			ptr<Security::Credentials::PasswordCredential> operator->() { return get(); }
			void put(pptr<Security::Credentials::PasswordCredential> value) { hrcheck(enc(&ISyndicationClient_adaptor::ProxyCredential)->_put_ProxyCredential(value)); }
			void operator=(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
			void operator()(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
		} ProxyCredential;
		struct : property {
			ptr<Security::Credentials::PasswordCredential> get() { Security::Credentials::PasswordCredential* value; hrcheck(enc(&ISyndicationClient_adaptor::ServerCredential)->_get_ServerCredential(&value)); return from_abi(value); }
			ptr<Security::Credentials::PasswordCredential> operator()() { return get(); }
			operator ptr<Security::Credentials::PasswordCredential> () { return get(); }
			ptr<Security::Credentials::PasswordCredential> operator->() { return get(); }
			void put(pptr<Security::Credentials::PasswordCredential> value) { hrcheck(enc(&ISyndicationClient_adaptor::ServerCredential)->_put_ServerCredential(value)); }
			void operator=(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
			void operator()(pptr<Security::Credentials::PasswordCredential> value) { put(value); }
		} ServerCredential;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISyndicationClient_adaptor::Timeout)->_get_Timeout(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ISyndicationClient_adaptor::Timeout)->_put_Timeout(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Timeout;
	};
	void SetRequestHeader(hstring_ref name, hstring_ref value) { hrcheck(X::get()->_SetRequestHeader(name, value)); }
	ptr<Foundation::IAsyncOperationWithProgress<ptr<SyndicationFeed>, RetrievalProgress>> RetrieveFeedAsync(pptr<Foundation::Uri> uri) { Foundation::IAsyncOperationWithProgress<SyndicationFeed*, RetrievalProgress>* operation; hrcheck(X::get()->_RetrieveFeedAsync(uri, &operation)); return from_abi(operation); }
	ISyndicationClient_adaptor() {}
};
template<typename X> struct adapt<ISyndicationClient, X> : Windows::Web::Syndication::ISyndicationClient_adaptor<X> { typedef adapt ISyndicationClient; };
template<typename X> struct ISyndicationClient_unadaptor : X {
	STDMETHODIMP _get_ServerCredential(Security::Credentials::PasswordCredential* *value) { return hrtry([&, this] { get_prop(value, ServerCredential); }); }
	STDMETHODIMP _put_ServerCredential(Security::Credentials::PasswordCredential* value) { return hrtry([&, this] { put_prop(value, ServerCredential); }); }
	STDMETHODIMP _get_ProxyCredential(Security::Credentials::PasswordCredential* *value) { return hrtry([&, this] { get_prop(value, ProxyCredential); }); }
	STDMETHODIMP _put_ProxyCredential(Security::Credentials::PasswordCredential* value) { return hrtry([&, this] { put_prop(value, ProxyCredential); }); }
	STDMETHODIMP _get_MaxResponseBufferSize(unsigned *value) { return hrtry([&, this] { get_prop(value, MaxResponseBufferSize); }); }
	STDMETHODIMP _put_MaxResponseBufferSize(unsigned value) { return hrtry([&, this] { put_prop(value, MaxResponseBufferSize); }); }
	STDMETHODIMP _get_Timeout(unsigned *value) { return hrtry([&, this] { get_prop(value, Timeout); }); }
	STDMETHODIMP _put_Timeout(unsigned value) { return hrtry([&, this] { put_prop(value, Timeout); }); }
	STDMETHODIMP _get_BypassCacheOnRetrieve(bool *value) { return hrtry([&, this] { get_prop(value, BypassCacheOnRetrieve); }); }
	STDMETHODIMP _put_BypassCacheOnRetrieve(bool value) { return hrtry([&, this] { put_prop(value, BypassCacheOnRetrieve); }); }
	STDMETHODIMP _SetRequestHeader(HSTRING name, HSTRING value) { return hrtry([&, this] { X::get()->SetRequestHeader(name, value); }); }
	STDMETHODIMP _RetrieveFeedAsync(Foundation::Uri* uri, Foundation::IAsyncOperationWithProgress<SyndicationFeed*, RetrievalProgress>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->RetrieveFeedAsync(uri)); }); }
};
template<typename X> struct unadapt<ISyndicationClient, X> : Windows::Web::Syndication::ISyndicationClient_unadaptor<X> {};
struct ISyndicationClient : ISyndicationClient_raw, generate<ISyndicationClient> {};

// ISyndicationClientFactory
struct ISyndicationClientFactory : IInspectable {
	virtual STDMETHODIMP _CreateSyndicationClient(Security::Credentials::PasswordCredential* serverCredential, SyndicationClient* *syndicationClient);
};

// SyndicationClient
template<typename> struct SyndicationClient_statics {
	static SyndicationClient *activate() { SyndicationClient *t; get_activation_factory<SyndicationClient>()->ActivateInstance((IInspectable**)&t); return t; }
	static SyndicationClient *activate(pptr<Security::Credentials::PasswordCredential> serverCredential) { SyndicationClient *syndicationClient; hrcheck(get_activation_factory<SyndicationClient, ISyndicationClientFactory>()->_CreateSyndicationClient(serverCredential, &syndicationClient)); return syndicationClient; }
};

template<typename X> struct statics<SyndicationClient, X> : X, Windows::Web::Syndication::SyndicationClient_statics<void> {
	using Windows::Web::Syndication::SyndicationClient_statics<void>::activate;
	typedef typename X::root_type SyndicationClient;
};
struct SyndicationClient : generate<SyndicationClient> {};

// ISyndicationErrorStatics
struct ISyndicationErrorStatics : IInspectable {
	virtual STDMETHODIMP _GetStatus(int hresult, SyndicationErrorStatus *status);
};

// SyndicationError
template<typename> struct SyndicationError_statics {
	static SyndicationErrorStatus GetStatus(int hresult) { SyndicationErrorStatus status; hrcheck(get_activation_factory<SyndicationError, ISyndicationErrorStatics>()->_GetStatus(hresult, &status)); return status; }
};

template<typename X> struct statics<SyndicationError, X> : X, Windows::Web::Syndication::SyndicationError_statics<void> {
	typedef typename X::root_type SyndicationError;
};
struct SyndicationError : generate<SyndicationError> {};
}}}
} // namespace iso_winrt
