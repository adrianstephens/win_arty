#pragma once
// generated by isopod tools
// namespaces:
// Windows.Security.Authentication.Identity.Provider

#include "Windows.Security.Authentication.Identity.Provider.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorDeviceCapabilities> : enum_type<unsigned> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorDeviceFindScope> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthenticationStage> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorRegistrationStatus> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthenticationStatus> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorFinishAuthenticationStatus> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthenticationScenario> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthenticationMessage> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorDevicePresence> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorDevicePresenceMonitoringMode> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistrationResult> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistrationStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistration> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorRegistration> : class_type<Platform::Object, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistration> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorRegistrationResult> : class_type<Platform::Object, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistrationResult> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationResult> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthentication> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthentication> : class_type<Platform::Object, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthentication> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthenticationResult> : class_type<Platform::Object, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationResult> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo2> : interface_type<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorInfo> : class_type<Platform::Object, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo2> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs> : class_type<Platform::Object, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageInfo> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthenticationStageInfo> : class_type<Platform::Object, Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageInfo> {};

// uuids

template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistrationResult> { define_guid(0xA4FE35F0, 0xADE3, 0x4981, 0xAF, 0x6B, 0xEC, 0x19, 0x59, 0x21, 0x68, 0x2A);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics> { define_guid(0x90499A19, 0x7EF2, 0x4523, 0x95, 0x1C, 0xA4, 0x17, 0xA2, 0x4A, 0xCF, 0x93);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistrationStatics> { define_guid(0x1ADF0F65, 0xE3B7, 0x4155, 0x99, 0x7F, 0xB7, 0x56, 0xEF, 0x65, 0xBE, 0xBA);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistration> { define_guid(0x9F4CBBB4, 0x8CBA, 0x48B0, 0x84, 0xD, 0xDB, 0xB2, 0x2A, 0x54, 0xC6, 0x78);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationResult> { define_guid(0x9CBB5987, 0xEF6D, 0x4BC2, 0xBF, 0x49, 0x46, 0x17, 0x51, 0x5A, 0xF, 0x9A);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStatics> { define_guid(0x3F582656, 0x28F8, 0x4E0F, 0xAE, 0x8C, 0x58, 0x98, 0xB9, 0xAE, 0x24, 0x69);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthentication> { define_guid(0x20A16E5, 0x6A25, 0x40A3, 0x8C, 0x0, 0x50, 0xA0, 0x23, 0xF6, 0x19, 0xD1);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo> { define_guid(0x1E2BA861, 0x8533, 0x4FCE, 0x83, 0x9B, 0xEC, 0xB7, 0x24, 0x10, 0xAC, 0x14);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo2> { define_guid(0x14D981A3, 0xFC26, 0x4FF7, 0xAB, 0xC3, 0x48, 0xE8, 0x2A, 0x51, 0x2A, 0xA);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs> { define_guid(0xD4A5EE56, 0x7291, 0x4073, 0xBC, 0x1F, 0xCC, 0xB8, 0xF5, 0xAF, 0xDF, 0x96);};
template<> struct uuid<Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageInfo> { define_guid(0x56FEC28B, 0xE8AA, 0x4C0F, 0x8E, 0x4C, 0xA5, 0x59, 0xE7, 0x3A, 0xDD, 0x88);};

// types

namespace Windows { namespace Security { namespace Authentication { namespace Identity { namespace Provider {

// ISecondaryAuthenticationFactorRegistrationResult
struct ISecondaryAuthenticationFactorRegistrationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(SecondaryAuthenticationFactorRegistrationStatus *value);
	virtual STDMETHODIMP _get_Registration(SecondaryAuthenticationFactorRegistration* *value);
};
template<typename X> struct ISecondaryAuthenticationFactorRegistrationResult_adaptor : X {
	union {
		struct : property {
			ptr<SecondaryAuthenticationFactorRegistration> get() { SecondaryAuthenticationFactorRegistration* value; hrcheck(enc(&ISecondaryAuthenticationFactorRegistrationResult_adaptor::Registration)->_get_Registration(&value)); return from_abi(value); }
			ptr<SecondaryAuthenticationFactorRegistration> operator()() { return get(); }
			operator ptr<SecondaryAuthenticationFactorRegistration> () { return get(); }
			ptr<SecondaryAuthenticationFactorRegistration> operator->() { return get(); }
		} Registration;
		struct : property {
			SecondaryAuthenticationFactorRegistrationStatus get() { SecondaryAuthenticationFactorRegistrationStatus value; hrcheck(enc(&ISecondaryAuthenticationFactorRegistrationResult_adaptor::Status)->_get_Status(&value)); return value; }
			SecondaryAuthenticationFactorRegistrationStatus operator()() { return get(); }
			operator SecondaryAuthenticationFactorRegistrationStatus () { return get(); }
		} Status;
	};
	ISecondaryAuthenticationFactorRegistrationResult_adaptor() {}
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorRegistrationResult, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistrationResult_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorRegistrationResult; };
struct ISecondaryAuthenticationFactorRegistrationResult : ISecondaryAuthenticationFactorRegistrationResult_raw, generate<ISecondaryAuthenticationFactorRegistrationResult> {};

// ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics
struct ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics : IInspectable {
	virtual STDMETHODIMP _RegisterDevicePresenceMonitoringAsync(HSTRING deviceId, HSTRING deviceInstancePath, SecondaryAuthenticationFactorDevicePresenceMonitoringMode monitoringMode, Foundation::IAsyncOperation<SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus>* *operation);
	virtual STDMETHODIMP _RegisterDevicePresenceMonitoringWithNewDeviceAsync(HSTRING deviceId, HSTRING deviceInstancePath, SecondaryAuthenticationFactorDevicePresenceMonitoringMode monitoringMode, HSTRING deviceFriendlyName, HSTRING deviceModelNumber, Storage::Streams::IBuffer* deviceConfigurationData, Foundation::IAsyncOperation<SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus>* *operation);
	virtual STDMETHODIMP _UnregisterDevicePresenceMonitoringAsync(HSTRING deviceId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _IsDevicePresenceMonitoringSupported(bool *value);
};

// ISecondaryAuthenticationFactorRegistrationStatics
struct ISecondaryAuthenticationFactorRegistrationStatics : IInspectable {
	virtual STDMETHODIMP _RequestStartRegisteringDeviceAsync(HSTRING deviceId, SecondaryAuthenticationFactorDeviceCapabilities capabilities, HSTRING deviceFriendlyName, HSTRING deviceModelNumber, Storage::Streams::IBuffer* deviceKey, Storage::Streams::IBuffer* mutualAuthenticationKey, Foundation::IAsyncOperation<SecondaryAuthenticationFactorRegistrationResult*>* *operation);
	virtual STDMETHODIMP _FindAllRegisteredDeviceInfoAsync(SecondaryAuthenticationFactorDeviceFindScope queryType, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryAuthenticationFactorInfo*>*>* *deviceInfoList);
	virtual STDMETHODIMP _UnregisterDeviceAsync(HSTRING deviceId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _UpdateDeviceConfigurationDataAsync(HSTRING deviceId, Storage::Streams::IBuffer* deviceConfigurationData, Foundation::IAsyncAction* *result);
};

// ISecondaryAuthenticationFactorRegistration
struct ISecondaryAuthenticationFactorRegistration_raw : IInspectable {
	virtual STDMETHODIMP _FinishRegisteringDeviceAsync(Storage::Streams::IBuffer* deviceConfigurationData, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _AbortRegisteringDeviceAsync(HSTRING errorLogMessage, Foundation::IAsyncAction* *result);
};
template<typename X> struct ISecondaryAuthenticationFactorRegistration_adaptor : X {
	ptr<Foundation::IAsyncAction> FinishRegisteringDeviceAsync(pptr<Storage::Streams::IBuffer> deviceConfigurationData) { Foundation::IAsyncAction* result; hrcheck(X::get()->_FinishRegisteringDeviceAsync(deviceConfigurationData, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> AbortRegisteringDeviceAsync(hstring_ref errorLogMessage) { Foundation::IAsyncAction* result; hrcheck(X::get()->_AbortRegisteringDeviceAsync(errorLogMessage, &result)); return from_abi(result); }
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorRegistration, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorRegistration_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorRegistration; };
struct ISecondaryAuthenticationFactorRegistration : ISecondaryAuthenticationFactorRegistration_raw, generate<ISecondaryAuthenticationFactorRegistration> {};

// SecondaryAuthenticationFactorRegistration
template<typename> struct SecondaryAuthenticationFactorRegistration_statics {
	static ptr<Foundation::IAsyncOperation<SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus>> RegisterDevicePresenceMonitoringAsync(hstring_ref deviceId, hstring_ref deviceInstancePath, SecondaryAuthenticationFactorDevicePresenceMonitoringMode monitoringMode) { Foundation::IAsyncOperation<SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus>* operation; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics>()->_RegisterDevicePresenceMonitoringAsync(deviceId, deviceInstancePath, monitoringMode, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus>> RegisterDevicePresenceMonitoringAsync(hstring_ref deviceId, hstring_ref deviceInstancePath, SecondaryAuthenticationFactorDevicePresenceMonitoringMode monitoringMode, hstring_ref deviceFriendlyName, hstring_ref deviceModelNumber, pptr<Storage::Streams::IBuffer> deviceConfigurationData) { Foundation::IAsyncOperation<SecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatus>* operation; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics>()->_RegisterDevicePresenceMonitoringWithNewDeviceAsync(deviceId, deviceInstancePath, monitoringMode, deviceFriendlyName, deviceModelNumber, deviceConfigurationData, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> UnregisterDevicePresenceMonitoringAsync(hstring_ref deviceId) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics>()->_UnregisterDevicePresenceMonitoringAsync(deviceId, &result)); return from_abi(result); }
	static bool IsDevicePresenceMonitoringSupported() { bool value; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorDevicePresenceMonitoringRegistrationStatics>()->_IsDevicePresenceMonitoringSupported(&value)); return value; }
	static ptr<Foundation::IAsyncOperation<ptr<SecondaryAuthenticationFactorRegistrationResult>>> RequestStartRegisteringDeviceAsync(hstring_ref deviceId, SecondaryAuthenticationFactorDeviceCapabilities capabilities, hstring_ref deviceFriendlyName, hstring_ref deviceModelNumber, pptr<Storage::Streams::IBuffer> deviceKey, pptr<Storage::Streams::IBuffer> mutualAuthenticationKey) { Foundation::IAsyncOperation<SecondaryAuthenticationFactorRegistrationResult*>* operation; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorRegistrationStatics>()->_RequestStartRegisteringDeviceAsync(deviceId, capabilities, deviceFriendlyName, deviceModelNumber, deviceKey, mutualAuthenticationKey, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<SecondaryAuthenticationFactorInfo>>>>> FindAllRegisteredDeviceInfoAsync(SecondaryAuthenticationFactorDeviceFindScope queryType) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<SecondaryAuthenticationFactorInfo*>*>* deviceInfoList; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorRegistrationStatics>()->_FindAllRegisteredDeviceInfoAsync(queryType, &deviceInfoList)); return from_abi(deviceInfoList); }
	static ptr<Foundation::IAsyncAction> UnregisterDeviceAsync(hstring_ref deviceId) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorRegistrationStatics>()->_UnregisterDeviceAsync(deviceId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> UpdateDeviceConfigurationDataAsync(hstring_ref deviceId, pptr<Storage::Streams::IBuffer> deviceConfigurationData) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<SecondaryAuthenticationFactorRegistration, ISecondaryAuthenticationFactorRegistrationStatics>()->_UpdateDeviceConfigurationDataAsync(deviceId, deviceConfigurationData, &result)); return from_abi(result); }
};

template<typename X> struct statics<SecondaryAuthenticationFactorRegistration, X> : X, Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorRegistration_statics<void> {
	typedef typename X::root_type SecondaryAuthenticationFactorRegistration;
};
struct SecondaryAuthenticationFactorRegistration : generate<SecondaryAuthenticationFactorRegistration> {};

// SecondaryAuthenticationFactorRegistrationResult
template<typename X> struct statics<SecondaryAuthenticationFactorRegistrationResult, X> : X {
	typedef typename X::root_type SecondaryAuthenticationFactorRegistrationResult;
};
struct SecondaryAuthenticationFactorRegistrationResult : generate<SecondaryAuthenticationFactorRegistrationResult> {};

// ISecondaryAuthenticationFactorAuthenticationResult
struct ISecondaryAuthenticationFactorAuthenticationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(SecondaryAuthenticationFactorAuthenticationStatus *value);
	virtual STDMETHODIMP _get_Authentication(SecondaryAuthenticationFactorAuthentication* *value);
};
template<typename X> struct ISecondaryAuthenticationFactorAuthenticationResult_adaptor : X {
	union {
		struct : property {
			ptr<SecondaryAuthenticationFactorAuthentication> get() { SecondaryAuthenticationFactorAuthentication* value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthenticationResult_adaptor::Authentication)->_get_Authentication(&value)); return from_abi(value); }
			ptr<SecondaryAuthenticationFactorAuthentication> operator()() { return get(); }
			operator ptr<SecondaryAuthenticationFactorAuthentication> () { return get(); }
			ptr<SecondaryAuthenticationFactorAuthentication> operator->() { return get(); }
		} Authentication;
		struct : property {
			SecondaryAuthenticationFactorAuthenticationStatus get() { SecondaryAuthenticationFactorAuthenticationStatus value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthenticationResult_adaptor::Status)->_get_Status(&value)); return value; }
			SecondaryAuthenticationFactorAuthenticationStatus operator()() { return get(); }
			operator SecondaryAuthenticationFactorAuthenticationStatus () { return get(); }
		} Status;
	};
	ISecondaryAuthenticationFactorAuthenticationResult_adaptor() {}
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorAuthenticationResult, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationResult_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorAuthenticationResult; };
struct ISecondaryAuthenticationFactorAuthenticationResult : ISecondaryAuthenticationFactorAuthenticationResult_raw, generate<ISecondaryAuthenticationFactorAuthenticationResult> {};

// ISecondaryAuthenticationFactorAuthenticationStatics
struct ISecondaryAuthenticationFactorAuthenticationStatics : IInspectable {
	virtual STDMETHODIMP _ShowNotificationMessageAsync(HSTRING deviceName, SecondaryAuthenticationFactorAuthenticationMessage message, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _StartAuthenticationAsync(HSTRING deviceId, Storage::Streams::IBuffer* serviceAuthenticationNonce, Foundation::IAsyncOperation<SecondaryAuthenticationFactorAuthenticationResult*>* *operation);
	virtual STDMETHODIMP _add_AuthenticationStageChanged(Foundation::EventHandler<SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AuthenticationStageChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetAuthenticationStageInfoAsync(Foundation::IAsyncOperation<SecondaryAuthenticationFactorAuthenticationStageInfo*>* *result);
};

// ISecondaryAuthenticationFactorAuthentication
struct ISecondaryAuthenticationFactorAuthentication_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceAuthenticationHmac(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_SessionNonce(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_DeviceNonce(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_DeviceConfigurationData(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _FinishAuthenticationAsync(Storage::Streams::IBuffer* deviceHmac, Storage::Streams::IBuffer* sessionHmac, Foundation::IAsyncOperation<SecondaryAuthenticationFactorFinishAuthenticationStatus>* *result);
	virtual STDMETHODIMP _AbortAuthenticationAsync(HSTRING errorLogMessage, Foundation::IAsyncAction* *result);
};
template<typename X> struct ISecondaryAuthenticationFactorAuthentication_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthentication_adaptor::DeviceConfigurationData)->_get_DeviceConfigurationData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} DeviceConfigurationData;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthentication_adaptor::DeviceNonce)->_get_DeviceNonce(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} DeviceNonce;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthentication_adaptor::ServiceAuthenticationHmac)->_get_ServiceAuthenticationHmac(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} ServiceAuthenticationHmac;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthentication_adaptor::SessionNonce)->_get_SessionNonce(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} SessionNonce;
	};
	ptr<Foundation::IAsyncOperation<SecondaryAuthenticationFactorFinishAuthenticationStatus>> FinishAuthenticationAsync(pptr<Storage::Streams::IBuffer> deviceHmac, pptr<Storage::Streams::IBuffer> sessionHmac) { Foundation::IAsyncOperation<SecondaryAuthenticationFactorFinishAuthenticationStatus>* result; hrcheck(X::get()->_FinishAuthenticationAsync(deviceHmac, sessionHmac, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> AbortAuthenticationAsync(hstring_ref errorLogMessage) { Foundation::IAsyncAction* result; hrcheck(X::get()->_AbortAuthenticationAsync(errorLogMessage, &result)); return from_abi(result); }
	ISecondaryAuthenticationFactorAuthentication_adaptor() {}
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorAuthentication, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthentication_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorAuthentication; };
struct ISecondaryAuthenticationFactorAuthentication : ISecondaryAuthenticationFactorAuthentication_raw, generate<ISecondaryAuthenticationFactorAuthentication> {};

// SecondaryAuthenticationFactorAuthentication
template<typename> struct SecondaryAuthenticationFactorAuthentication_statics {
	static struct _AuthenticationStageChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<SecondaryAuthenticationFactorAuthentication, ISecondaryAuthenticationFactorAuthenticationStatics>()->_add_AuthenticationStageChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<SecondaryAuthenticationFactorAuthentication, ISecondaryAuthenticationFactorAuthenticationStatics>()->_remove_AuthenticationStageChanged(token)); }
	} AuthenticationStageChanged;
	static ptr<Foundation::IAsyncAction> ShowNotificationMessageAsync(hstring_ref deviceName, SecondaryAuthenticationFactorAuthenticationMessage message) { Foundation::IAsyncAction* result; hrcheck(get_activation_factory<SecondaryAuthenticationFactorAuthentication, ISecondaryAuthenticationFactorAuthenticationStatics>()->_ShowNotificationMessageAsync(deviceName, message, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<SecondaryAuthenticationFactorAuthenticationResult>>> StartAuthenticationAsync(hstring_ref deviceId, pptr<Storage::Streams::IBuffer> serviceAuthenticationNonce) { Foundation::IAsyncOperation<SecondaryAuthenticationFactorAuthenticationResult*>* operation; hrcheck(get_activation_factory<SecondaryAuthenticationFactorAuthentication, ISecondaryAuthenticationFactorAuthenticationStatics>()->_StartAuthenticationAsync(deviceId, serviceAuthenticationNonce, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<SecondaryAuthenticationFactorAuthenticationStageInfo>>> GetAuthenticationStageInfoAsync() { Foundation::IAsyncOperation<SecondaryAuthenticationFactorAuthenticationStageInfo*>* result; hrcheck(get_activation_factory<SecondaryAuthenticationFactorAuthentication, ISecondaryAuthenticationFactorAuthenticationStatics>()->_GetAuthenticationStageInfoAsync(&result)); return from_abi(result); }
};
template<typename X> typename SecondaryAuthenticationFactorAuthentication_statics<X>::_AuthenticationStageChanged SecondaryAuthenticationFactorAuthentication_statics<X>::AuthenticationStageChanged;

template<typename X> struct statics<SecondaryAuthenticationFactorAuthentication, X> : X, Windows::Security::Authentication::Identity::Provider::SecondaryAuthenticationFactorAuthentication_statics<void> {
	typedef typename X::root_type SecondaryAuthenticationFactorAuthentication;
};
struct SecondaryAuthenticationFactorAuthentication : generate<SecondaryAuthenticationFactorAuthentication> {};

// SecondaryAuthenticationFactorAuthenticationResult
template<typename X> struct statics<SecondaryAuthenticationFactorAuthenticationResult, X> : X {
	typedef typename X::root_type SecondaryAuthenticationFactorAuthenticationResult;
};
struct SecondaryAuthenticationFactorAuthenticationResult : generate<SecondaryAuthenticationFactorAuthenticationResult> {};

// ISecondaryAuthenticationFactorInfo
struct ISecondaryAuthenticationFactorInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *deviceId);
	virtual STDMETHODIMP _get_DeviceFriendlyName(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceModelNumber(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceConfigurationData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct ISecondaryAuthenticationFactorInfo_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISecondaryAuthenticationFactorInfo_adaptor::DeviceConfigurationData)->_get_DeviceConfigurationData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} DeviceConfigurationData;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryAuthenticationFactorInfo_adaptor::DeviceFriendlyName)->_get_DeviceFriendlyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceFriendlyName;
		struct : property {
			hstring get() { HSTRING deviceId; hrcheck(enc(&ISecondaryAuthenticationFactorInfo_adaptor::DeviceId)->_get_DeviceId(&deviceId)); return from_abi(deviceId); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryAuthenticationFactorInfo_adaptor::DeviceModelNumber)->_get_DeviceModelNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceModelNumber;
	};
	ISecondaryAuthenticationFactorInfo_adaptor() {}
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorInfo, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorInfo; };
struct ISecondaryAuthenticationFactorInfo : ISecondaryAuthenticationFactorInfo_raw, generate<ISecondaryAuthenticationFactorInfo> {};

// ISecondaryAuthenticationFactorInfo2
struct ISecondaryAuthenticationFactorInfo2_raw : IInspectable {
	virtual STDMETHODIMP _get_PresenceMonitoringMode(SecondaryAuthenticationFactorDevicePresenceMonitoringMode *value);
	virtual STDMETHODIMP _UpdateDevicePresenceAsync(SecondaryAuthenticationFactorDevicePresence presenceState, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _get_IsAuthenticationSupported(bool *value);
};
template<typename X> struct ISecondaryAuthenticationFactorInfo2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISecondaryAuthenticationFactorInfo2_adaptor::IsAuthenticationSupported)->_get_IsAuthenticationSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAuthenticationSupported;
		struct : property {
			SecondaryAuthenticationFactorDevicePresenceMonitoringMode get() { SecondaryAuthenticationFactorDevicePresenceMonitoringMode value; hrcheck(enc(&ISecondaryAuthenticationFactorInfo2_adaptor::PresenceMonitoringMode)->_get_PresenceMonitoringMode(&value)); return value; }
			SecondaryAuthenticationFactorDevicePresenceMonitoringMode operator()() { return get(); }
			operator SecondaryAuthenticationFactorDevicePresenceMonitoringMode () { return get(); }
		} PresenceMonitoringMode;
	};
	ptr<Foundation::IAsyncAction> UpdateDevicePresenceAsync(SecondaryAuthenticationFactorDevicePresence presenceState) { Foundation::IAsyncAction* result; hrcheck(X::get()->_UpdateDevicePresenceAsync(presenceState, &result)); return from_abi(result); }
	ISecondaryAuthenticationFactorInfo2_adaptor() {}
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorInfo2, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorInfo2_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorInfo2; };
struct ISecondaryAuthenticationFactorInfo2 : ISecondaryAuthenticationFactorInfo2_raw, generate<ISecondaryAuthenticationFactorInfo2> {};

// SecondaryAuthenticationFactorInfo
template<typename X> struct statics<SecondaryAuthenticationFactorInfo, X> : X {
	typedef typename X::root_type SecondaryAuthenticationFactorInfo;
};
struct SecondaryAuthenticationFactorInfo : generate<SecondaryAuthenticationFactorInfo> {};

// ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs
struct ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_StageInfo(SecondaryAuthenticationFactorAuthenticationStageInfo* *value);
};
template<typename X> struct ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SecondaryAuthenticationFactorAuthenticationStageInfo> get() { SecondaryAuthenticationFactorAuthenticationStageInfo* value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs_adaptor::StageInfo)->_get_StageInfo(&value)); return from_abi(value); }
			ptr<SecondaryAuthenticationFactorAuthenticationStageInfo> operator()() { return get(); }
			operator ptr<SecondaryAuthenticationFactorAuthenticationStageInfo> () { return get(); }
			ptr<SecondaryAuthenticationFactorAuthenticationStageInfo> operator->() { return get(); }
		} StageInfo;
	};
	ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs; };
struct ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs : ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs_raw, generate<ISecondaryAuthenticationFactorAuthenticationStageChangedEventArgs> {};

// SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs
template<typename X> struct statics<SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs, X> : X {
	typedef typename X::root_type SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs;
};
struct SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs : generate<SecondaryAuthenticationFactorAuthenticationStageChangedEventArgs> {};

// ISecondaryAuthenticationFactorAuthenticationStageInfo
struct ISecondaryAuthenticationFactorAuthenticationStageInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Stage(SecondaryAuthenticationFactorAuthenticationStage *value);
	virtual STDMETHODIMP _get_Scenario(SecondaryAuthenticationFactorAuthenticationScenario *value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct ISecondaryAuthenticationFactorAuthenticationStageInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthenticationStageInfo_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			SecondaryAuthenticationFactorAuthenticationScenario get() { SecondaryAuthenticationFactorAuthenticationScenario value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthenticationStageInfo_adaptor::Scenario)->_get_Scenario(&value)); return value; }
			SecondaryAuthenticationFactorAuthenticationScenario operator()() { return get(); }
			operator SecondaryAuthenticationFactorAuthenticationScenario () { return get(); }
		} Scenario;
		struct : property {
			SecondaryAuthenticationFactorAuthenticationStage get() { SecondaryAuthenticationFactorAuthenticationStage value; hrcheck(enc(&ISecondaryAuthenticationFactorAuthenticationStageInfo_adaptor::Stage)->_get_Stage(&value)); return value; }
			SecondaryAuthenticationFactorAuthenticationStage operator()() { return get(); }
			operator SecondaryAuthenticationFactorAuthenticationStage () { return get(); }
		} Stage;
	};
	ISecondaryAuthenticationFactorAuthenticationStageInfo_adaptor() {}
};
template<typename X> struct adapt<ISecondaryAuthenticationFactorAuthenticationStageInfo, X> : Windows::Security::Authentication::Identity::Provider::ISecondaryAuthenticationFactorAuthenticationStageInfo_adaptor<X> { typedef adapt ISecondaryAuthenticationFactorAuthenticationStageInfo; };
struct ISecondaryAuthenticationFactorAuthenticationStageInfo : ISecondaryAuthenticationFactorAuthenticationStageInfo_raw, generate<ISecondaryAuthenticationFactorAuthenticationStageInfo> {};

// SecondaryAuthenticationFactorAuthenticationStageInfo
template<typename X> struct statics<SecondaryAuthenticationFactorAuthenticationStageInfo, X> : X {
	typedef typename X::root_type SecondaryAuthenticationFactorAuthenticationStageInfo;
};
struct SecondaryAuthenticationFactorAuthenticationStageInfo : generate<SecondaryAuthenticationFactorAuthenticationStageInfo> {};
}}}}}
} // namespace iso_winrt
