#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.WiFi

#include "Windows.Devices.WiFi.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Networking { namespace Connectivity {
struct NetworkSecuritySettings;
struct NetworkAdapter;
}}
namespace Security { namespace Credentials {
struct PasswordCredential;
}}}

// defs

template<> struct def<Windows::Devices::WiFi::WiFiNetworkKind> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::WiFiPhyKind> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::WiFiAccessStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::WiFiReconnectionKind> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::WiFiConnectionStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::WiFiConnectionMethod> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::WiFiWpsKind> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::WiFiWpsConfigurationStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFi::IWiFiAdapterStatics> : interface_type<> {};
template<> struct def<Windows::Devices::WiFi::IWiFiAdapter2> : interface_type<> {};
template<> struct def<Windows::Devices::WiFi::IWiFiAdapter> : interface_type<> {};
template<> struct def<Windows::Devices::WiFi::WiFiAdapter> : class_type<Platform::Object, Windows::Devices::WiFi::IWiFiAdapter, Windows::Devices::WiFi::IWiFiAdapter2> {};
template<> struct def<Windows::Devices::WiFi::IWiFiNetworkReport> : interface_type<> {};
template<> struct def<Windows::Devices::WiFi::WiFiNetworkReport> : class_type<Platform::Object, Windows::Devices::WiFi::IWiFiNetworkReport> {};
template<> struct def<Windows::Devices::WiFi::IWiFiAvailableNetwork> : interface_type<> {};
template<> struct def<Windows::Devices::WiFi::WiFiAvailableNetwork> : class_type<Platform::Object, Windows::Devices::WiFi::IWiFiAvailableNetwork> {};
template<> struct def<Windows::Devices::WiFi::IWiFiConnectionResult> : interface_type<> {};
template<> struct def<Windows::Devices::WiFi::WiFiConnectionResult> : class_type<Platform::Object, Windows::Devices::WiFi::IWiFiConnectionResult> {};
template<> struct def<Windows::Devices::WiFi::IWiFiWpsConfigurationResult> : interface_type<> {};
template<> struct def<Windows::Devices::WiFi::WiFiWpsConfigurationResult> : class_type<Platform::Object, Windows::Devices::WiFi::IWiFiWpsConfigurationResult> {};

// uuids

template<> struct uuid<Windows::Devices::WiFi::IWiFiAdapterStatics> { define_guid(0xDA25FDDD, 0xD24C, 0x43E3, 0xAA, 0xBD, 0xC4, 0x65, 0x9F, 0x73, 0xF, 0x99);};
template<> struct uuid<Windows::Devices::WiFi::IWiFiAdapter2> { define_guid(0x5BC4501D, 0x81E4, 0x453D, 0x94, 0x30, 0x1F, 0xCA, 0xFB, 0xAD, 0xD6, 0xB6);};
template<> struct uuid<Windows::Devices::WiFi::IWiFiAdapter> { define_guid(0xA6C4E423, 0x3D75, 0x43A4, 0xB9, 0xDE, 0x11, 0xE2, 0x6B, 0x72, 0xD9, 0xB0);};
template<> struct uuid<Windows::Devices::WiFi::IWiFiNetworkReport> { define_guid(0x9524DED2, 0x5911, 0x445E, 0x81, 0x94, 0xBE, 0x4F, 0x1A, 0x70, 0x48, 0x95);};
template<> struct uuid<Windows::Devices::WiFi::IWiFiAvailableNetwork> { define_guid(0x26E96246, 0x183E, 0x4704, 0x98, 0x26, 0x71, 0xB4, 0xA2, 0xF0, 0xF6, 0x68);};
template<> struct uuid<Windows::Devices::WiFi::IWiFiConnectionResult> { define_guid(0x143BDFD9, 0xC37D, 0x40BE, 0xA5, 0xC8, 0x85, 0x7B, 0xCE, 0x85, 0xA9, 0x31);};
template<> struct uuid<Windows::Devices::WiFi::IWiFiWpsConfigurationResult> { define_guid(0x67B49871, 0x17EE, 0x42D1, 0xB1, 0x4F, 0x5A, 0x11, 0xF1, 0x22, 0x6F, 0xB5);};

// types

namespace Windows { namespace Devices { namespace WiFi {

// IWiFiAdapterStatics
struct IWiFiAdapterStatics : IInspectable {
	virtual STDMETHODIMP _FindAllAdaptersAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WiFiAdapter*>*>* *value);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *deviceSelector);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<WiFiAdapter*>* *asyncOp);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<WiFiAccessStatus>* *value);
};

// IWiFiAdapter2
struct IWiFiAdapter2_raw : IInspectable {
	virtual STDMETHODIMP _GetWpsConfigurationAsync(WiFiAvailableNetwork* availableNetwork, Foundation::IAsyncOperation<WiFiWpsConfigurationResult*>* *operation);
	virtual STDMETHODIMP _ConnectWithPasswordCredentialAndSsidAndConnectionMethodAsync(WiFiAvailableNetwork* availableNetwork, WiFiReconnectionKind reconnectionKind, Security::Credentials::PasswordCredential* passwordCredential, HSTRING ssid, WiFiConnectionMethod connectionMethod, Foundation::IAsyncOperation<WiFiConnectionResult*>* *operation);
};
template<typename X> struct IWiFiAdapter2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<WiFiWpsConfigurationResult>>> GetWpsConfigurationAsync(pptr<WiFiAvailableNetwork> availableNetwork) { Foundation::IAsyncOperation<WiFiWpsConfigurationResult*>* operation; hrcheck(X::get()->_GetWpsConfigurationAsync(availableNetwork, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<WiFiConnectionResult>>> ConnectAsync(pptr<WiFiAvailableNetwork> availableNetwork, WiFiReconnectionKind reconnectionKind, pptr<Security::Credentials::PasswordCredential> passwordCredential, hstring_ref ssid, WiFiConnectionMethod connectionMethod) { Foundation::IAsyncOperation<WiFiConnectionResult*>* operation; hrcheck(X::get()->_ConnectWithPasswordCredentialAndSsidAndConnectionMethodAsync(availableNetwork, reconnectionKind, passwordCredential, ssid, connectionMethod, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IWiFiAdapter2, X> : Windows::Devices::WiFi::IWiFiAdapter2_adaptor<X> { typedef adapt IWiFiAdapter2; };
struct IWiFiAdapter2 : IWiFiAdapter2_raw, generate<IWiFiAdapter2> {};

// IWiFiAdapter
struct IWiFiAdapter_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAdapter(Networking::Connectivity::NetworkAdapter* *value);
	virtual STDMETHODIMP _ScanAsync(Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _get_NetworkReport(WiFiNetworkReport* *value);
	virtual STDMETHODIMP _add_AvailableNetworksChanged(Foundation::TypedEventHandler<WiFiAdapter*, IInspectable*>* args, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_AvailableNetworksChanged(Foundation::EventRegistrationToken eventCookie);
	virtual STDMETHODIMP _ConnectAsync(WiFiAvailableNetwork* availableNetwork, WiFiReconnectionKind reconnectionKind, Foundation::IAsyncOperation<WiFiConnectionResult*>* *value);
	virtual STDMETHODIMP _ConnectWithPasswordCredentialAsync(WiFiAvailableNetwork* availableNetwork, WiFiReconnectionKind reconnectionKind, Security::Credentials::PasswordCredential* passwordCredential, Foundation::IAsyncOperation<WiFiConnectionResult*>* *value);
	virtual STDMETHODIMP _ConnectWithPasswordCredentialAndSsidAsync(WiFiAvailableNetwork* availableNetwork, WiFiReconnectionKind reconnectionKind, Security::Credentials::PasswordCredential* passwordCredential, HSTRING ssid, Foundation::IAsyncOperation<WiFiConnectionResult*>* *value);
	virtual STDMETHODIMP _Disconnect();
};
template<typename X> struct IWiFiAdapter_adaptor : X {
	union {
		struct : property {
			ptr<Networking::Connectivity::NetworkAdapter> get() { Networking::Connectivity::NetworkAdapter* value; hrcheck(enc(&IWiFiAdapter_adaptor::NetworkAdapter)->_get_NetworkAdapter(&value)); return from_abi(value); }
			ptr<Networking::Connectivity::NetworkAdapter> operator()() { return get(); }
			operator ptr<Networking::Connectivity::NetworkAdapter> () { return get(); }
			ptr<Networking::Connectivity::NetworkAdapter> operator->() { return get(); }
		} NetworkAdapter;
		struct : property {
			ptr<WiFiNetworkReport> get() { WiFiNetworkReport* value; hrcheck(enc(&IWiFiAdapter_adaptor::NetworkReport)->_get_NetworkReport(&value)); return from_abi(value); }
			ptr<WiFiNetworkReport> operator()() { return get(); }
			operator ptr<WiFiNetworkReport> () { return get(); }
			ptr<WiFiNetworkReport> operator->() { return get(); }
		} NetworkReport;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WiFiAdapter>, object>> args) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IWiFiAdapter_adaptor::AvailableNetworksChanged)->_add_AvailableNetworksChanged(to_abi(args), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IWiFiAdapter_adaptor::AvailableNetworksChanged)->_remove_AvailableNetworksChanged(eventCookie)); }
		} AvailableNetworksChanged;
	};
	ptr<Foundation::IAsyncAction> ScanAsync() { Foundation::IAsyncAction* value; hrcheck(X::get()->_ScanAsync(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<WiFiConnectionResult>>> ConnectAsync(pptr<WiFiAvailableNetwork> availableNetwork, WiFiReconnectionKind reconnectionKind) { Foundation::IAsyncOperation<WiFiConnectionResult*>* value; hrcheck(X::get()->_ConnectAsync(availableNetwork, reconnectionKind, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<WiFiConnectionResult>>> ConnectAsync(pptr<WiFiAvailableNetwork> availableNetwork, WiFiReconnectionKind reconnectionKind, pptr<Security::Credentials::PasswordCredential> passwordCredential) { Foundation::IAsyncOperation<WiFiConnectionResult*>* value; hrcheck(X::get()->_ConnectWithPasswordCredentialAsync(availableNetwork, reconnectionKind, passwordCredential, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<WiFiConnectionResult>>> ConnectAsync(pptr<WiFiAvailableNetwork> availableNetwork, WiFiReconnectionKind reconnectionKind, pptr<Security::Credentials::PasswordCredential> passwordCredential, hstring_ref ssid) { Foundation::IAsyncOperation<WiFiConnectionResult*>* value; hrcheck(X::get()->_ConnectWithPasswordCredentialAndSsidAsync(availableNetwork, reconnectionKind, passwordCredential, ssid, &value)); return from_abi(value); }
	void Disconnect() { hrcheck(X::get()->_Disconnect()); }
	IWiFiAdapter_adaptor() {}
};
template<typename X> struct adapt<IWiFiAdapter, X> : Windows::Devices::WiFi::IWiFiAdapter_adaptor<X> { typedef adapt IWiFiAdapter; };
struct IWiFiAdapter : IWiFiAdapter_raw, generate<IWiFiAdapter> {};

// WiFiAdapter
template<typename> struct WiFiAdapter_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<WiFiAdapter>>>>> FindAllAdaptersAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WiFiAdapter*>*>* value; hrcheck(get_activation_factory<WiFiAdapter, IWiFiAdapterStatics>()->_FindAllAdaptersAsync(&value)); return from_abi(value); }
	static hstring GetDeviceSelector() { HSTRING deviceSelector; hrcheck(get_activation_factory<WiFiAdapter, IWiFiAdapterStatics>()->_GetDeviceSelector(&deviceSelector)); return from_abi(deviceSelector); }
	static ptr<Foundation::IAsyncOperation<ptr<WiFiAdapter>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<WiFiAdapter*>* asyncOp; hrcheck(get_activation_factory<WiFiAdapter, IWiFiAdapterStatics>()->_FromIdAsync(deviceId, &asyncOp)); return from_abi(asyncOp); }
	static ptr<Foundation::IAsyncOperation<WiFiAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<WiFiAccessStatus>* value; hrcheck(get_activation_factory<WiFiAdapter, IWiFiAdapterStatics>()->_RequestAccessAsync(&value)); return from_abi(value); }
};

template<typename X> struct statics<WiFiAdapter, X> : X, Windows::Devices::WiFi::WiFiAdapter_statics<void> {
	typedef typename X::root_type WiFiAdapter;
};
struct WiFiAdapter : generate<WiFiAdapter> {
	using IWiFiAdapter2::ConnectAsync;
	using IWiFiAdapter::ConnectAsync;
};

// IWiFiNetworkReport
struct IWiFiNetworkReport_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_AvailableNetworks(Foundation::Collections::IVectorView<WiFiAvailableNetwork*>* *value);
};
template<typename X> struct IWiFiNetworkReport_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<WiFiAvailableNetwork>>> get() { Foundation::Collections::IVectorView<WiFiAvailableNetwork*>* value; hrcheck(enc(&IWiFiNetworkReport_adaptor::AvailableNetworks)->_get_AvailableNetworks(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<WiFiAvailableNetwork>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<WiFiAvailableNetwork>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<WiFiAvailableNetwork>>> operator->() { return get(); }
		} AvailableNetworks;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IWiFiNetworkReport_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IWiFiNetworkReport_adaptor() {}
};
template<typename X> struct adapt<IWiFiNetworkReport, X> : Windows::Devices::WiFi::IWiFiNetworkReport_adaptor<X> { typedef adapt IWiFiNetworkReport; };
struct IWiFiNetworkReport : IWiFiNetworkReport_raw, generate<IWiFiNetworkReport> {};

// WiFiNetworkReport
template<typename X> struct statics<WiFiNetworkReport, X> : X {
	typedef typename X::root_type WiFiNetworkReport;
};
struct WiFiNetworkReport : generate<WiFiNetworkReport> {};

// IWiFiAvailableNetwork
struct IWiFiAvailableNetwork_raw : IInspectable {
	virtual STDMETHODIMP _get_Uptime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Ssid(HSTRING *value);
	virtual STDMETHODIMP _get_Bssid(HSTRING *value);
	virtual STDMETHODIMP _get_ChannelCenterFrequencyInKilohertz(int *value);
	virtual STDMETHODIMP _get_NetworkRssiInDecibelMilliwatts(double *value);
	virtual STDMETHODIMP _get_SignalBars(unsigned char *value);
	virtual STDMETHODIMP _get_NetworkKind(WiFiNetworkKind *value);
	virtual STDMETHODIMP _get_PhyKind(WiFiPhyKind *value);
	virtual STDMETHODIMP _get_SecuritySettings(Networking::Connectivity::NetworkSecuritySettings* *value);
	virtual STDMETHODIMP _get_BeaconInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_IsWiFiDirect(bool *value);
};
template<typename X> struct IWiFiAvailableNetwork_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::BeaconInterval)->_get_BeaconInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} BeaconInterval;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::Bssid)->_get_Bssid(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Bssid;
		struct : property {
			int get() { int value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::ChannelCenterFrequencyInKilohertz)->_get_ChannelCenterFrequencyInKilohertz(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} ChannelCenterFrequencyInKilohertz;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::IsWiFiDirect)->_get_IsWiFiDirect(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsWiFiDirect;
		struct : property {
			WiFiNetworkKind get() { WiFiNetworkKind value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::NetworkKind)->_get_NetworkKind(&value)); return value; }
			WiFiNetworkKind operator()() { return get(); }
			operator WiFiNetworkKind () { return get(); }
		} NetworkKind;
		struct : property {
			double get() { double value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::NetworkRssiInDecibelMilliwatts)->_get_NetworkRssiInDecibelMilliwatts(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} NetworkRssiInDecibelMilliwatts;
		struct : property {
			WiFiPhyKind get() { WiFiPhyKind value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::PhyKind)->_get_PhyKind(&value)); return value; }
			WiFiPhyKind operator()() { return get(); }
			operator WiFiPhyKind () { return get(); }
		} PhyKind;
		struct : property {
			ptr<Networking::Connectivity::NetworkSecuritySettings> get() { Networking::Connectivity::NetworkSecuritySettings* value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::SecuritySettings)->_get_SecuritySettings(&value)); return from_abi(value); }
			ptr<Networking::Connectivity::NetworkSecuritySettings> operator()() { return get(); }
			operator ptr<Networking::Connectivity::NetworkSecuritySettings> () { return get(); }
			ptr<Networking::Connectivity::NetworkSecuritySettings> operator->() { return get(); }
		} SecuritySettings;
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::SignalBars)->_get_SignalBars(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} SignalBars;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::Ssid)->_get_Ssid(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Ssid;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IWiFiAvailableNetwork_adaptor::Uptime)->_get_Uptime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Uptime;
	};
	IWiFiAvailableNetwork_adaptor() {}
};
template<typename X> struct adapt<IWiFiAvailableNetwork, X> : Windows::Devices::WiFi::IWiFiAvailableNetwork_adaptor<X> { typedef adapt IWiFiAvailableNetwork; };
struct IWiFiAvailableNetwork : IWiFiAvailableNetwork_raw, generate<IWiFiAvailableNetwork> {};

// WiFiAvailableNetwork
template<typename X> struct statics<WiFiAvailableNetwork, X> : X {
	typedef typename X::root_type WiFiAvailableNetwork;
};
struct WiFiAvailableNetwork : generate<WiFiAvailableNetwork> {};

// IWiFiConnectionResult
struct IWiFiConnectionResult_raw : IInspectable {
	virtual STDMETHODIMP _get_ConnectionStatus(WiFiConnectionStatus *value);
};
template<typename X> struct IWiFiConnectionResult_adaptor : X {
	union {
		struct : property {
			WiFiConnectionStatus get() { WiFiConnectionStatus value; hrcheck(enc(&IWiFiConnectionResult_adaptor::ConnectionStatus)->_get_ConnectionStatus(&value)); return value; }
			WiFiConnectionStatus operator()() { return get(); }
			operator WiFiConnectionStatus () { return get(); }
		} ConnectionStatus;
	};
	IWiFiConnectionResult_adaptor() {}
};
template<typename X> struct adapt<IWiFiConnectionResult, X> : Windows::Devices::WiFi::IWiFiConnectionResult_adaptor<X> { typedef adapt IWiFiConnectionResult; };
struct IWiFiConnectionResult : IWiFiConnectionResult_raw, generate<IWiFiConnectionResult> {};

// WiFiConnectionResult
template<typename X> struct statics<WiFiConnectionResult, X> : X {
	typedef typename X::root_type WiFiConnectionResult;
};
struct WiFiConnectionResult : generate<WiFiConnectionResult> {};

// IWiFiWpsConfigurationResult
struct IWiFiWpsConfigurationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(WiFiWpsConfigurationStatus *value);
	virtual STDMETHODIMP _get_SupportedWpsKinds(Foundation::Collections::IVectorView<WiFiWpsKind>* *value);
};
template<typename X> struct IWiFiWpsConfigurationResult_adaptor : X {
	union {
		struct : property {
			WiFiWpsConfigurationStatus get() { WiFiWpsConfigurationStatus value; hrcheck(enc(&IWiFiWpsConfigurationResult_adaptor::Status)->_get_Status(&value)); return value; }
			WiFiWpsConfigurationStatus operator()() { return get(); }
			operator WiFiWpsConfigurationStatus () { return get(); }
		} Status;
		struct : property {
			ptr<Foundation::Collections::IVectorView<WiFiWpsKind>> get() { Foundation::Collections::IVectorView<WiFiWpsKind>* value; hrcheck(enc(&IWiFiWpsConfigurationResult_adaptor::SupportedWpsKinds)->_get_SupportedWpsKinds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<WiFiWpsKind>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<WiFiWpsKind>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<WiFiWpsKind>> operator->() { return get(); }
		} SupportedWpsKinds;
	};
	IWiFiWpsConfigurationResult_adaptor() {}
};
template<typename X> struct adapt<IWiFiWpsConfigurationResult, X> : Windows::Devices::WiFi::IWiFiWpsConfigurationResult_adaptor<X> { typedef adapt IWiFiWpsConfigurationResult; };
struct IWiFiWpsConfigurationResult : IWiFiWpsConfigurationResult_raw, generate<IWiFiWpsConfigurationResult> {};

// WiFiWpsConfigurationResult
template<typename X> struct statics<WiFiWpsConfigurationResult, X> : X {
	typedef typename X::root_type WiFiWpsConfigurationResult;
};
struct WiFiWpsConfigurationResult : generate<WiFiWpsConfigurationResult> {};
}}}
} // namespace iso_winrt
