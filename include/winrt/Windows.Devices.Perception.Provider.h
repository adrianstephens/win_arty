#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Perception.Provider

#include "Windows.Devices.Perception.Provider.0.h"
#include "Windows.Graphics.Imaging.0.h"
#include "Windows.Devices.Perception.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
struct IPropertySet;
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
struct ValueSet;
}}
namespace Media {
struct VideoFrame;
}}

// defs

template<> struct def<Windows::Devices::Perception::Provider::IKnownPerceptionFrameKindStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionFrameProviderManagerServiceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionFrameProviderInfo> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionFrameProviderInfo> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionFrameProvider> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionPropertyChangeRequest> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionPropertyChangeRequest> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionPropertyChangeRequest> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroupFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroup> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroup>, custom_activators {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionControlGroupFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionControlGroup> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionControlGroup> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionControlGroup>, custom_activators {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionCorrelationGroupFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionCorrelationGroup> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup>, custom_activators {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionFrame> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionFrame> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionFrame> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionStartFaceAuthenticationHandler> : delegate_type {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionStopFaceAuthenticationHandler> : delegate_type {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionCorrelationFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionCorrelation> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionCorrelation> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionCorrelation>, custom_activators {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionVideoFrameAllocatorFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::Provider::IPerceptionVideoFrameAllocator> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionVideoFrameAllocator> : class_type<Platform::Object, Windows::Devices::Perception::Provider::IPerceptionVideoFrameAllocator>, custom_activators {};
template<> struct def<Windows::Devices::Perception::Provider::PerceptionFrameProviderManagerService> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Perception::Provider::KnownPerceptionFrameKind> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Devices::Perception::Provider::IKnownPerceptionFrameKindStatics> { define_guid(0x3AE651D6, 0x9669, 0x4106, 0x9F, 0xAE, 0x48, 0x35, 0xC1, 0xB9, 0x61, 0x4);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionFrameProviderManagerServiceStatics> { define_guid(0xAE8386E6, 0xCAD9, 0x4359, 0x8F, 0x96, 0x8E, 0xAE, 0x51, 0x81, 0x5, 0x26);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager> { define_guid(0xA959CE07, 0xEAD3, 0x33DF, 0x8E, 0xC1, 0xB9, 0x24, 0xAB, 0xE0, 0x19, 0xC4);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionFrameProviderInfo> { define_guid(0xCCA959E8, 0x797E, 0x4E83, 0x9B, 0x87, 0x3, 0x6A, 0x74, 0x14, 0x2F, 0xC4);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionFrameProvider> { define_guid(0x794F7AB9, 0xB37D, 0x3B33, 0xA1, 0xD, 0x30, 0x62, 0x64, 0x19, 0xCE, 0x65);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionPropertyChangeRequest> { define_guid(0x3C5AEB51, 0x350B, 0x4DF8, 0x94, 0x14, 0x59, 0xE0, 0x98, 0x15, 0x51, 0xB);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroupFactory> { define_guid(0xE68A05D4, 0xB60C, 0x40F4, 0xBC, 0xB9, 0xF2, 0x4D, 0x46, 0x46, 0x73, 0x20);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroup> { define_guid(0xE8019814, 0x4A91, 0x41B0, 0x83, 0xA6, 0x88, 0x1A, 0x17, 0x75, 0x35, 0x3E);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionControlGroupFactory> { define_guid(0x2F1AF2E0, 0xBAF1, 0x453B, 0xBE, 0xD4, 0xCD, 0x9D, 0x46, 0x19, 0x15, 0x4C);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionControlGroup> { define_guid(0x172C4882, 0x2FD9, 0x4C4E, 0xBA, 0x34, 0xFD, 0xF2, 0xA, 0x73, 0xDD, 0xE5);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionCorrelationGroupFactory> { define_guid(0x7DFE2088, 0x63DF, 0x48ED, 0x83, 0xB1, 0x4A, 0xB8, 0x29, 0x13, 0x29, 0x95);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup> { define_guid(0x752A0906, 0x36A7, 0x47BB, 0x9B, 0x79, 0x56, 0xCC, 0x6B, 0x74, 0x67, 0x70);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionFrame> { define_guid(0x7CFE7825, 0x54BB, 0x4D9D, 0xBE, 0xC5, 0x8E, 0xF6, 0x61, 0x51, 0xD2, 0xAC);};
template<> struct uuid<Windows::Devices::Perception::Provider::PerceptionStartFaceAuthenticationHandler> { define_guid(0x74816D2A, 0x2090, 0x4670, 0x8C, 0x48, 0xEF, 0x39, 0xE7, 0xFF, 0x7C, 0x26);};
template<> struct uuid<Windows::Devices::Perception::Provider::PerceptionStopFaceAuthenticationHandler> { define_guid(0x387EE6AA, 0x89CD, 0x481E, 0xAA, 0xDE, 0xDD, 0x92, 0xF7, 0xB, 0x2A, 0xD7);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionCorrelationFactory> { define_guid(0xD4A6C425, 0x2884, 0x4A8F, 0x81, 0x34, 0x28, 0x35, 0xD7, 0x28, 0x6C, 0xBF);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionCorrelation> { define_guid(0xB4131A82, 0xDFF5, 0x4047, 0x8A, 0x19, 0x3B, 0x4D, 0x80, 0x5F, 0x71, 0x76);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionVideoFrameAllocatorFactory> { define_guid(0x1A58B0E1, 0xE91A, 0x481E, 0xB8, 0x76, 0xA8, 0x9E, 0x2B, 0xBC, 0x6B, 0x33);};
template<> struct uuid<Windows::Devices::Perception::Provider::IPerceptionVideoFrameAllocator> { define_guid(0x4C38A7DA, 0xFDD8, 0x4ED4, 0xA0, 0x39, 0x2A, 0x6F, 0x9B, 0x23, 0x50, 0x38);};

// types

namespace Windows { namespace Devices { namespace Perception { namespace Provider {

// IKnownPerceptionFrameKindStatics
struct IKnownPerceptionFrameKindStatics : IInspectable {
	virtual STDMETHODIMP _get_Color(HSTRING *value);
	virtual STDMETHODIMP _get_Depth(HSTRING *value);
	virtual STDMETHODIMP _get_Infrared(HSTRING *value);
};

// IPerceptionFrameProviderManagerServiceStatics
struct IPerceptionFrameProviderManagerServiceStatics : IInspectable {
	virtual STDMETHODIMP _RegisterFrameProviderInfo(IPerceptionFrameProviderManager* manager, PerceptionFrameProviderInfo* frameProviderInfo);
	virtual STDMETHODIMP _UnregisterFrameProviderInfo(IPerceptionFrameProviderManager* manager, PerceptionFrameProviderInfo* frameProviderInfo);
	virtual STDMETHODIMP _RegisterFaceAuthenticationGroup(IPerceptionFrameProviderManager* manager, PerceptionFaceAuthenticationGroup* faceAuthenticationGroup);
	virtual STDMETHODIMP _UnregisterFaceAuthenticationGroup(IPerceptionFrameProviderManager* manager, PerceptionFaceAuthenticationGroup* faceAuthenticationGroup);
	virtual STDMETHODIMP _RegisterControlGroup(IPerceptionFrameProviderManager* manager, PerceptionControlGroup* controlGroup);
	virtual STDMETHODIMP _UnregisterControlGroup(IPerceptionFrameProviderManager* manager, PerceptionControlGroup* controlGroup);
	virtual STDMETHODIMP _RegisterCorrelationGroup(IPerceptionFrameProviderManager* manager, PerceptionCorrelationGroup* correlationGroup);
	virtual STDMETHODIMP _UnregisterCorrelationGroup(IPerceptionFrameProviderManager* manager, PerceptionCorrelationGroup* correlationGroup);
	virtual STDMETHODIMP _UpdateAvailabilityForProvider(IPerceptionFrameProvider* provider, bool available);
	virtual STDMETHODIMP _PublishFrameForProvider(IPerceptionFrameProvider* provider, PerceptionFrame* frame);
};

// IPerceptionFrameProviderManager
struct IPerceptionFrameProviderManager_raw : IInspectable {
	virtual STDMETHODIMP _GetFrameProvider(PerceptionFrameProviderInfo* frameProviderInfo, IPerceptionFrameProvider* *result) = 0;
};
template<typename X> struct IPerceptionFrameProviderManager_adaptor : X {
	ptr<IPerceptionFrameProvider> GetFrameProvider(pptr<PerceptionFrameProviderInfo> frameProviderInfo) { IPerceptionFrameProvider* result; hrcheck(X::get()->_GetFrameProvider(frameProviderInfo, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPerceptionFrameProviderManager, X> : Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager_adaptor<X> { typedef adapt IPerceptionFrameProviderManager; };
template<typename X> struct IPerceptionFrameProviderManager_unadaptor : X {
	STDMETHODIMP _GetFrameProvider(PerceptionFrameProviderInfo* frameProviderInfo, IPerceptionFrameProvider* *result) { return hrtry([&, this] { *result = to_abi(X::get()->GetFrameProvider(frameProviderInfo)); }); }
};
template<typename X> struct unadapt<IPerceptionFrameProviderManager, X> : Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager_unadaptor<X> {};
struct IPerceptionFrameProviderManager : IPerceptionFrameProviderManager_raw, generate<IPerceptionFrameProviderManager> {};

// IPerceptionFrameProviderInfo
struct IPerceptionFrameProviderInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _put_Id(HSTRING value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_DeviceKind(HSTRING *value);
	virtual STDMETHODIMP _put_DeviceKind(HSTRING value);
	virtual STDMETHODIMP _get_FrameKind(HSTRING *value);
	virtual STDMETHODIMP _put_FrameKind(HSTRING value);
	virtual STDMETHODIMP _get_Hidden(bool *value);
	virtual STDMETHODIMP _put_Hidden(bool value);
};
template<typename X> struct IPerceptionFrameProviderInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::DeviceKind)->_get_DeviceKind(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::DeviceKind)->_put_DeviceKind(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DeviceKind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::FrameKind)->_get_FrameKind(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::FrameKind)->_put_FrameKind(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} FrameKind;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::Hidden)->_get_Hidden(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::Hidden)->_put_Hidden(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Hidden;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPerceptionFrameProviderInfo_adaptor::Id)->_put_Id(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Id;
	};
	IPerceptionFrameProviderInfo_adaptor() {}
};
template<typename X> struct adapt<IPerceptionFrameProviderInfo, X> : Windows::Devices::Perception::Provider::IPerceptionFrameProviderInfo_adaptor<X> { typedef adapt IPerceptionFrameProviderInfo; };
struct IPerceptionFrameProviderInfo : IPerceptionFrameProviderInfo_raw, generate<IPerceptionFrameProviderInfo> {};

// PerceptionFrameProviderInfo
template<typename X> struct statics<PerceptionFrameProviderInfo, X> : X {
	typedef typename X::root_type PerceptionFrameProviderInfo;
};
struct PerceptionFrameProviderInfo : generate<PerceptionFrameProviderInfo> {};

// IPerceptionFrameProvider
struct IPerceptionFrameProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameProviderInfo(PerceptionFrameProviderInfo* *result) = 0;
	virtual STDMETHODIMP _get_Available(bool *value) = 0;
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IPropertySet* *value) = 0;
	virtual STDMETHODIMP _Start() = 0;
	virtual STDMETHODIMP _Stop() = 0;
	virtual STDMETHODIMP _SetProperty(PerceptionPropertyChangeRequest* value) = 0;
};
template<typename X> struct IPerceptionFrameProvider_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionFrameProvider_adaptor::Available)->_get_Available(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Available;
		struct : property {
			ptr<PerceptionFrameProviderInfo> get() { PerceptionFrameProviderInfo* result; hrcheck(enc(&IPerceptionFrameProvider_adaptor::FrameProviderInfo)->_get_FrameProviderInfo(&result)); return from_abi(result); }
			ptr<PerceptionFrameProviderInfo> operator()() { return get(); }
			operator ptr<PerceptionFrameProviderInfo> () { return get(); }
			ptr<PerceptionFrameProviderInfo> operator->() { return get(); }
		} FrameProviderInfo;
		struct : property {
			ptr<Foundation::Collections::IPropertySet> get() { Foundation::Collections::IPropertySet* value; hrcheck(enc(&IPerceptionFrameProvider_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IPropertySet> operator()() { return get(); }
			operator ptr<Foundation::Collections::IPropertySet> () { return get(); }
			ptr<Foundation::Collections::IPropertySet> operator->() { return get(); }
		} Properties;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	void SetProperty(pptr<PerceptionPropertyChangeRequest> value) { hrcheck(X::get()->_SetProperty(value)); }
	IPerceptionFrameProvider_adaptor() {}
};
template<typename X> struct adapt<IPerceptionFrameProvider, X> : Windows::Devices::Perception::Provider::IPerceptionFrameProvider_adaptor<X> { typedef adapt IPerceptionFrameProvider; };
template<typename X> struct IPerceptionFrameProvider_unadaptor : X {
	STDMETHODIMP _get_FrameProviderInfo(PerceptionFrameProviderInfo* *result) { return hrtry([&, this] { get_prop(result, FrameProviderInfo); }); }
	STDMETHODIMP _get_Available(bool *value) { return hrtry([&, this] { get_prop(value, Available); }); }
	STDMETHODIMP _get_Properties(Foundation::Collections::IPropertySet* *value) { return hrtry([&, this] { get_prop(value, Properties); }); }
	STDMETHODIMP _Start() { return hrtry([&, this] { X::get()->Start(); }); }
	STDMETHODIMP _Stop() { return hrtry([&, this] { X::get()->Stop(); }); }
	STDMETHODIMP _SetProperty(PerceptionPropertyChangeRequest* value) { return hrtry([&, this] { X::get()->SetProperty(value); }); }
};
template<typename X> struct unadapt<IPerceptionFrameProvider, X> : Windows::Devices::Perception::Provider::IPerceptionFrameProvider_unadaptor<X> {};
struct IPerceptionFrameProvider : IPerceptionFrameProvider_raw, generate<IPerceptionFrameProvider> {};

// IPerceptionPropertyChangeRequest
struct IPerceptionPropertyChangeRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_Value(IInspectable* *value);
	virtual STDMETHODIMP _get_Status(PerceptionFrameSourcePropertyChangeStatus *value);
	virtual STDMETHODIMP _put_Status(PerceptionFrameSourcePropertyChangeStatus value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *result);
};
template<typename X> struct IPerceptionPropertyChangeRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionPropertyChangeRequest_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			PerceptionFrameSourcePropertyChangeStatus get() { PerceptionFrameSourcePropertyChangeStatus value; hrcheck(enc(&IPerceptionPropertyChangeRequest_adaptor::Status)->_get_Status(&value)); return value; }
			PerceptionFrameSourcePropertyChangeStatus operator()() { return get(); }
			operator PerceptionFrameSourcePropertyChangeStatus () { return get(); }
			void put(PerceptionFrameSourcePropertyChangeStatus value) { hrcheck(enc(&IPerceptionPropertyChangeRequest_adaptor::Status)->_put_Status(value)); }
			void operator=(PerceptionFrameSourcePropertyChangeStatus value) { put(value); }
			void operator()(PerceptionFrameSourcePropertyChangeStatus value) { put(value); }
		} Status;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IPerceptionPropertyChangeRequest_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Value;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
	IPerceptionPropertyChangeRequest_adaptor() {}
};
template<typename X> struct adapt<IPerceptionPropertyChangeRequest, X> : Windows::Devices::Perception::Provider::IPerceptionPropertyChangeRequest_adaptor<X> { typedef adapt IPerceptionPropertyChangeRequest; };
struct IPerceptionPropertyChangeRequest : IPerceptionPropertyChangeRequest_raw, generate<IPerceptionPropertyChangeRequest> {};

// PerceptionPropertyChangeRequest
template<typename X> struct statics<PerceptionPropertyChangeRequest, X> : X {
	typedef typename X::root_type PerceptionPropertyChangeRequest;
};
struct PerceptionPropertyChangeRequest : generate<PerceptionPropertyChangeRequest> {};

// IPerceptionFaceAuthenticationGroupFactory
struct IPerceptionFaceAuthenticationGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Collections::IIterable<HSTRING>* ids, PerceptionStartFaceAuthenticationHandler* startHandler, PerceptionStopFaceAuthenticationHandler* stopHandler, PerceptionFaceAuthenticationGroup* *result);
};

// IPerceptionFaceAuthenticationGroup
struct IPerceptionFaceAuthenticationGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameProviderIds(Foundation::Collections::IVectorView<HSTRING>* *value);
};
template<typename X> struct IPerceptionFaceAuthenticationGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPerceptionFaceAuthenticationGroup_adaptor::FrameProviderIds)->_get_FrameProviderIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} FrameProviderIds;
	};
	IPerceptionFaceAuthenticationGroup_adaptor() {}
};
template<typename X> struct adapt<IPerceptionFaceAuthenticationGroup, X> : Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroup_adaptor<X> { typedef adapt IPerceptionFaceAuthenticationGroup; };
struct IPerceptionFaceAuthenticationGroup : IPerceptionFaceAuthenticationGroup_raw, generate<IPerceptionFaceAuthenticationGroup> {};

// PerceptionFaceAuthenticationGroup
template<typename> struct PerceptionFaceAuthenticationGroup_statics {
	static PerceptionFaceAuthenticationGroup *activate(pptr<Foundation::Collections::IIterable<hstring>> ids, handler_ref<PerceptionStartFaceAuthenticationHandler> startHandler, handler_ref<PerceptionStopFaceAuthenticationHandler> stopHandler) { PerceptionFaceAuthenticationGroup *result; hrcheck(get_activation_factory<PerceptionFaceAuthenticationGroup, IPerceptionFaceAuthenticationGroupFactory>()->_Create(to_abi(ids), startHandler, stopHandler, &result)); return result; }
};

template<typename X> struct statics<PerceptionFaceAuthenticationGroup, X> : X, Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup_statics<void> {
	using Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup_statics<void>::activate;
	typedef typename X::root_type PerceptionFaceAuthenticationGroup;
};
struct PerceptionFaceAuthenticationGroup : generate<PerceptionFaceAuthenticationGroup> {};

// IPerceptionControlGroupFactory
struct IPerceptionControlGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Collections::IIterable<HSTRING>* ids, PerceptionControlGroup* *result);
};

// IPerceptionControlGroup
struct IPerceptionControlGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameProviderIds(Foundation::Collections::IVectorView<HSTRING>* *value);
};
template<typename X> struct IPerceptionControlGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPerceptionControlGroup_adaptor::FrameProviderIds)->_get_FrameProviderIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} FrameProviderIds;
	};
	IPerceptionControlGroup_adaptor() {}
};
template<typename X> struct adapt<IPerceptionControlGroup, X> : Windows::Devices::Perception::Provider::IPerceptionControlGroup_adaptor<X> { typedef adapt IPerceptionControlGroup; };
struct IPerceptionControlGroup : IPerceptionControlGroup_raw, generate<IPerceptionControlGroup> {};

// PerceptionControlGroup
template<typename> struct PerceptionControlGroup_statics {
	static PerceptionControlGroup *activate(pptr<Foundation::Collections::IIterable<hstring>> ids) { PerceptionControlGroup *result; hrcheck(get_activation_factory<PerceptionControlGroup, IPerceptionControlGroupFactory>()->_Create(to_abi(ids), &result)); return result; }
};

template<typename X> struct statics<PerceptionControlGroup, X> : X, Windows::Devices::Perception::Provider::PerceptionControlGroup_statics<void> {
	using Windows::Devices::Perception::Provider::PerceptionControlGroup_statics<void>::activate;
	typedef typename X::root_type PerceptionControlGroup;
};
struct PerceptionControlGroup : generate<PerceptionControlGroup> {};

// IPerceptionCorrelationGroupFactory
struct IPerceptionCorrelationGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Collections::IIterable<PerceptionCorrelation*>* relativeLocations, PerceptionCorrelationGroup* *result);
};

// IPerceptionCorrelationGroup
struct IPerceptionCorrelationGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_RelativeLocations(Foundation::Collections::IVectorView<PerceptionCorrelation*>* *value);
};
template<typename X> struct IPerceptionCorrelationGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionCorrelation>>> get() { Foundation::Collections::IVectorView<PerceptionCorrelation*>* value; hrcheck(enc(&IPerceptionCorrelationGroup_adaptor::RelativeLocations)->_get_RelativeLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionCorrelation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PerceptionCorrelation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionCorrelation>>> operator->() { return get(); }
		} RelativeLocations;
	};
	IPerceptionCorrelationGroup_adaptor() {}
};
template<typename X> struct adapt<IPerceptionCorrelationGroup, X> : Windows::Devices::Perception::Provider::IPerceptionCorrelationGroup_adaptor<X> { typedef adapt IPerceptionCorrelationGroup; };
struct IPerceptionCorrelationGroup : IPerceptionCorrelationGroup_raw, generate<IPerceptionCorrelationGroup> {};

// PerceptionCorrelationGroup
template<typename> struct PerceptionCorrelationGroup_statics {
	static PerceptionCorrelationGroup *activate(pptr<Foundation::Collections::IIterable<ptr<PerceptionCorrelation>>> relativeLocations) { PerceptionCorrelationGroup *result; hrcheck(get_activation_factory<PerceptionCorrelationGroup, IPerceptionCorrelationGroupFactory>()->_Create(to_abi(relativeLocations), &result)); return result; }
};

template<typename X> struct statics<PerceptionCorrelationGroup, X> : X, Windows::Devices::Perception::Provider::PerceptionCorrelationGroup_statics<void> {
	using Windows::Devices::Perception::Provider::PerceptionCorrelationGroup_statics<void>::activate;
	typedef typename X::root_type PerceptionCorrelationGroup;
};
struct PerceptionCorrelationGroup : generate<PerceptionCorrelationGroup> {};

// IPerceptionFrame
struct IPerceptionFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_RelativeTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_RelativeTime(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::ValueSet* *value);
	virtual STDMETHODIMP _get_FrameData(Foundation::IMemoryBuffer* *value);
};
template<typename X> struct IPerceptionFrame_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IMemoryBuffer> get() { Foundation::IMemoryBuffer* value; hrcheck(enc(&IPerceptionFrame_adaptor::FrameData)->_get_FrameData(&value)); return from_abi(value); }
			ptr<Foundation::IMemoryBuffer> operator()() { return get(); }
			operator ptr<Foundation::IMemoryBuffer> () { return get(); }
			ptr<Foundation::IMemoryBuffer> operator->() { return get(); }
		} FrameData;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IPerceptionFrame_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Properties;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPerceptionFrame_adaptor::RelativeTime)->_get_RelativeTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IPerceptionFrame_adaptor::RelativeTime)->_put_RelativeTime(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} RelativeTime;
	};
	IPerceptionFrame_adaptor() {}
};
template<typename X> struct adapt<IPerceptionFrame, X> : Windows::Devices::Perception::Provider::IPerceptionFrame_adaptor<X> { typedef adapt IPerceptionFrame; };
struct IPerceptionFrame : IPerceptionFrame_raw, generate<IPerceptionFrame> {};

// PerceptionFrame
template<typename X> struct statics<PerceptionFrame, X> : X {
	typedef typename X::root_type PerceptionFrame;
};
struct PerceptionFrame : generate<PerceptionFrame> {};

// PerceptionStartFaceAuthenticationHandler
struct PerceptionStartFaceAuthenticationHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(PerceptionFaceAuthenticationGroup* sender, bool *result) = 0;
};

// PerceptionStopFaceAuthenticationHandler
struct PerceptionStopFaceAuthenticationHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(PerceptionFaceAuthenticationGroup* sender) = 0;
};

// IPerceptionCorrelationFactory
struct IPerceptionCorrelationFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING targetId, Foundation::Numerics::Vector3 position, Foundation::Numerics::Quaternion orientation, PerceptionCorrelation* *result);
};

// IPerceptionCorrelation
struct IPerceptionCorrelation_raw : IInspectable {
	virtual STDMETHODIMP _get_TargetId(HSTRING *value);
	virtual STDMETHODIMP _get_Position(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _get_Orientation(Foundation::Numerics::Quaternion *value);
};
template<typename X> struct IPerceptionCorrelation_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Quaternion get() { Foundation::Numerics::Quaternion value; hrcheck(enc(&IPerceptionCorrelation_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			Foundation::Numerics::Quaternion operator()() { return get(); }
			operator Foundation::Numerics::Quaternion () { return get(); }
		} Orientation;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&IPerceptionCorrelation_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} Position;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionCorrelation_adaptor::TargetId)->_get_TargetId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TargetId;
	};
	IPerceptionCorrelation_adaptor() {}
};
template<typename X> struct adapt<IPerceptionCorrelation, X> : Windows::Devices::Perception::Provider::IPerceptionCorrelation_adaptor<X> { typedef adapt IPerceptionCorrelation; };
struct IPerceptionCorrelation : IPerceptionCorrelation_raw, generate<IPerceptionCorrelation> {};

// PerceptionCorrelation
template<typename> struct PerceptionCorrelation_statics {
	static PerceptionCorrelation *activate(hstring_ref targetId, const Foundation::Numerics::Vector3& position, const Foundation::Numerics::Quaternion& orientation) { PerceptionCorrelation *result; hrcheck(get_activation_factory<PerceptionCorrelation, IPerceptionCorrelationFactory>()->_Create(targetId, position, orientation, &result)); return result; }
};

template<typename X> struct statics<PerceptionCorrelation, X> : X, Windows::Devices::Perception::Provider::PerceptionCorrelation_statics<void> {
	using Windows::Devices::Perception::Provider::PerceptionCorrelation_statics<void>::activate;
	typedef typename X::root_type PerceptionCorrelation;
};
struct PerceptionCorrelation : generate<PerceptionCorrelation> {};

// IPerceptionVideoFrameAllocatorFactory
struct IPerceptionVideoFrameAllocatorFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned maxOutstandingFrameCountForWrite, Graphics::Imaging::BitmapPixelFormat format, Foundation::Size resolution, Graphics::Imaging::BitmapAlphaMode alpha, PerceptionVideoFrameAllocator* *result);
};

// IPerceptionVideoFrameAllocator
struct IPerceptionVideoFrameAllocator_raw : IInspectable {
	virtual STDMETHODIMP _AllocateFrame(PerceptionFrame* *value);
	virtual STDMETHODIMP _CopyFromVideoFrame(Media::VideoFrame* frame, PerceptionFrame* *value);
};
template<typename X> struct IPerceptionVideoFrameAllocator_adaptor : X {
	ptr<PerceptionFrame> AllocateFrame() { PerceptionFrame* value; hrcheck(X::get()->_AllocateFrame(&value)); return from_abi(value); }
	ptr<PerceptionFrame> CopyFromVideoFrame(pptr<Media::VideoFrame> frame) { PerceptionFrame* value; hrcheck(X::get()->_CopyFromVideoFrame(frame, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IPerceptionVideoFrameAllocator, X> : Windows::Devices::Perception::Provider::IPerceptionVideoFrameAllocator_adaptor<X> { typedef adapt IPerceptionVideoFrameAllocator; };
struct IPerceptionVideoFrameAllocator : IPerceptionVideoFrameAllocator_raw, generate<IPerceptionVideoFrameAllocator> {};

// PerceptionVideoFrameAllocator
template<typename> struct PerceptionVideoFrameAllocator_statics {
	static PerceptionVideoFrameAllocator *activate(unsigned maxOutstandingFrameCountForWrite, Graphics::Imaging::BitmapPixelFormat format, const Foundation::Size& resolution, Graphics::Imaging::BitmapAlphaMode alpha) { PerceptionVideoFrameAllocator *result; hrcheck(get_activation_factory<PerceptionVideoFrameAllocator, IPerceptionVideoFrameAllocatorFactory>()->_Create(maxOutstandingFrameCountForWrite, format, resolution, alpha, &result)); return result; }
};

template<typename X> struct statics<PerceptionVideoFrameAllocator, X> : X, Windows::Devices::Perception::Provider::PerceptionVideoFrameAllocator_statics<void> {
	using Windows::Devices::Perception::Provider::PerceptionVideoFrameAllocator_statics<void>::activate;
	typedef typename X::root_type PerceptionVideoFrameAllocator;
};
struct PerceptionVideoFrameAllocator : generate<PerceptionVideoFrameAllocator> {};

// PerceptionFrameProviderManagerService
template<typename> struct PerceptionFrameProviderManagerService_statics {
	static void RegisterFrameProviderInfo(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionFrameProviderInfo> frameProviderInfo) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_RegisterFrameProviderInfo(manager, frameProviderInfo)); }
	static void UnregisterFrameProviderInfo(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionFrameProviderInfo> frameProviderInfo) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_UnregisterFrameProviderInfo(manager, frameProviderInfo)); }
	static void RegisterFaceAuthenticationGroup(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionFaceAuthenticationGroup> faceAuthenticationGroup) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_RegisterFaceAuthenticationGroup(manager, faceAuthenticationGroup)); }
	static void UnregisterFaceAuthenticationGroup(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionFaceAuthenticationGroup> faceAuthenticationGroup) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_UnregisterFaceAuthenticationGroup(manager, faceAuthenticationGroup)); }
	static void RegisterControlGroup(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionControlGroup> controlGroup) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_RegisterControlGroup(manager, controlGroup)); }
	static void UnregisterControlGroup(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionControlGroup> controlGroup) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_UnregisterControlGroup(manager, controlGroup)); }
	static void RegisterCorrelationGroup(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionCorrelationGroup> correlationGroup) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_RegisterCorrelationGroup(manager, correlationGroup)); }
	static void UnregisterCorrelationGroup(pptr<IPerceptionFrameProviderManager> manager, pptr<PerceptionCorrelationGroup> correlationGroup) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_UnregisterCorrelationGroup(manager, correlationGroup)); }
	static void UpdateAvailabilityForProvider(pptr<IPerceptionFrameProvider> provider, bool available) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_UpdateAvailabilityForProvider(provider, available)); }
	static void PublishFrameForProvider(pptr<IPerceptionFrameProvider> provider, pptr<PerceptionFrame> frame) { hrcheck(get_activation_factory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>()->_PublishFrameForProvider(provider, frame)); }
};

template<typename X> struct statics<PerceptionFrameProviderManagerService, X> : X, Windows::Devices::Perception::Provider::PerceptionFrameProviderManagerService_statics<void> {
	typedef typename X::root_type PerceptionFrameProviderManagerService;
};
struct PerceptionFrameProviderManagerService : generate<PerceptionFrameProviderManagerService> {};

// KnownPerceptionFrameKind
template<typename> struct KnownPerceptionFrameKind_statics {
	static struct _Color : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameKind, IKnownPerceptionFrameKindStatics>()->_get_Color(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Color;
	static struct _Depth : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameKind, IKnownPerceptionFrameKindStatics>()->_get_Depth(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Depth;
	static struct _Infrared : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameKind, IKnownPerceptionFrameKindStatics>()->_get_Infrared(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Infrared;
};
template<typename X> typename KnownPerceptionFrameKind_statics<X>::_Color KnownPerceptionFrameKind_statics<X>::Color;
template<typename X> typename KnownPerceptionFrameKind_statics<X>::_Depth KnownPerceptionFrameKind_statics<X>::Depth;
template<typename X> typename KnownPerceptionFrameKind_statics<X>::_Infrared KnownPerceptionFrameKind_statics<X>::Infrared;

template<typename X> struct statics<KnownPerceptionFrameKind, X> : X, Windows::Devices::Perception::Provider::KnownPerceptionFrameKind_statics<void> {
	typedef typename X::root_type KnownPerceptionFrameKind;
};
struct KnownPerceptionFrameKind : generate<KnownPerceptionFrameKind> {};
}}}}
} // namespace iso_winrt
