#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Input.Spatial

#include "Windows.UI.Input.Spatial.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Haptics {
struct SimpleHapticsController;
}
namespace Power {
struct BatteryReport;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Perception { namespace People {
struct HeadPose;
}
namespace Spatial {
struct SpatialCoordinateSystem;
}
struct PerceptionTimestamp;
}
namespace Storage { namespace Streams {
struct IRandomAccessStreamWithContentType;
}}}

// defs

template<> struct def<Windows::UI::Input::Spatial::SpatialGestureSettings> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSourceKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialRecognitionStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialRecognitionEndedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialTappedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialHoldStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialHoldCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialHoldCanceledEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialManipulationDelta> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialManipulationStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialManipulationUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialManipulationDelta> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialManipulationDelta> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialManipulationCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialManipulationCanceledEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialNavigationStartedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialNavigationUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialNavigationCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialNavigationCanceledEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialGestureRecognizer> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialGestureRecognizerFactory> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialGestureRecognizer> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialGestureRecognizer>, custom_activators {};
template<> struct def<Windows::UI::Input::Spatial::SpatialRecognitionStartedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialRecognitionStartedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialRecognitionEndedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialRecognitionEndedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialTappedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialTappedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialHoldStartedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialHoldStartedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialHoldCompletedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialHoldCompletedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialHoldCanceledEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialHoldCanceledEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialManipulationStartedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialManipulationStartedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialManipulationUpdatedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialManipulationUpdatedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialManipulationCompletedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialManipulationCompletedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialManipulationCanceledEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialManipulationCanceledEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialNavigationStartedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialNavigationStartedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialNavigationUpdatedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialNavigationUpdatedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialNavigationCompletedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialNavigationCompletedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialNavigationCanceledEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialNavigationCanceledEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionPressKind> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSourceHandedness> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSourcePositionAccuracy> : enum_type<int> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation2> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation3> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation2> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose2> : interface_type<Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialPointerInteractionSourcePose> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose, Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose2> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSource> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSource2> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionSource> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionController> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionController2> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionController> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionController3> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionController2> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionController> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionController, Windows::UI::Input::Spatial::ISpatialInteractionController3> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceState> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceState2> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionSourceState> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSourceState> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionSourceState, Windows::UI::Input::Spatial::ISpatialInteractionSourceState2> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSource3> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionSource2> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceProperties> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSourceLocation> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation, Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation3> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialPointerPose> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialPointerPose2> : interface_type<Windows::UI::Input::Spatial::ISpatialPointerPose> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSource> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionSource, Windows::UI::Input::Spatial::ISpatialInteractionSource3> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialPointerPoseStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialPointerPose> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialPointerPose, Windows::UI::Input::Spatial::ISpatialPointerPose2> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSourceProperties> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionSourceProperties> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionControllerProperties> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionControllerProperties> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionControllerProperties> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteraction> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteraction> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteraction> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs2> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs2> : interface_type<Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionManager> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::ISpatialInteractionManagerStatics> : interface_type<> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionManager> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionManager> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs, Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs2> {};
template<> struct def<Windows::UI::Input::Spatial::SpatialInteractionDetectedEventArgs> : class_type<Platform::Object, Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs, Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs2> {};

// uuids

template<> struct uuid<Windows::UI::Input::Spatial::ISpatialRecognitionStartedEventArgs> { define_guid(0x24DA128F, 0x8, 0x4A6D, 0xAA, 0x50, 0x2A, 0x76, 0xF9, 0xCF, 0xB2, 0x64);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialRecognitionEndedEventArgs> { define_guid(0xE35F5CB, 0x3F75, 0x43F3, 0xAC, 0x81, 0xD1, 0xDC, 0x2D, 0xF9, 0xB1, 0xFB);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialTappedEventArgs> { define_guid(0x296D83DE, 0xF444, 0x4AA1, 0xB2, 0xBF, 0x9D, 0xC8, 0x8D, 0x56, 0x7D, 0xA6);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialHoldStartedEventArgs> { define_guid(0x8E343D79, 0xACB6, 0x4144, 0x86, 0x15, 0x2C, 0xFB, 0xA8, 0xA3, 0xCB, 0x3F);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialHoldCompletedEventArgs> { define_guid(0x3F64470B, 0x4CFD, 0x43DA, 0x8D, 0xC4, 0xE6, 0x45, 0x52, 0x17, 0x39, 0x71);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialHoldCanceledEventArgs> { define_guid(0x5DFCB667, 0x4CAA, 0x4093, 0x8C, 0x35, 0xB6, 0x1, 0xA8, 0x39, 0xF3, 0x1B);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialManipulationDelta> { define_guid(0xA7EC967A, 0xD123, 0x3A81, 0xA1, 0x5B, 0x99, 0x29, 0x23, 0xDC, 0xBE, 0x91);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialManipulationStartedEventArgs> { define_guid(0xA1D6BBCE, 0x42A5, 0x377B, 0xAD, 0xA6, 0xD2, 0x8E, 0x3D, 0x38, 0x47, 0x37);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialManipulationUpdatedEventArgs> { define_guid(0x5F230B9B, 0x60C6, 0x4DC6, 0xBD, 0xC9, 0x9F, 0x4A, 0x6F, 0x15, 0xFE, 0x49);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialManipulationCompletedEventArgs> { define_guid(0x5086802, 0xF301, 0x4343, 0x92, 0x50, 0x2F, 0xBA, 0xA5, 0xF8, 0x7A, 0x37);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialManipulationCanceledEventArgs> { define_guid(0x2D40D1CB, 0xE7DA, 0x4220, 0xB0, 0xBF, 0x81, 0x93, 0x1, 0x67, 0x47, 0x80);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialNavigationStartedEventArgs> { define_guid(0x754A348A, 0xFB64, 0x4656, 0x8E, 0xBD, 0x9D, 0xEE, 0xCA, 0xAF, 0xE4, 0x75);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialNavigationUpdatedEventArgs> { define_guid(0x9B713FD7, 0x839D, 0x4A74, 0x87, 0x32, 0x45, 0x46, 0x6F, 0xC0, 0x44, 0xB5);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialNavigationCompletedEventArgs> { define_guid(0x12E80B7, 0xAF3B, 0x42C2, 0x9E, 0x41, 0xBA, 0xAA, 0xE, 0x72, 0x1F, 0x3A);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialNavigationCanceledEventArgs> { define_guid(0xCE503EDC, 0xE8A5, 0x46F0, 0x92, 0xD4, 0x3C, 0x12, 0x2B, 0x35, 0x11, 0x2A);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialGestureRecognizer> { define_guid(0x71605BCC, 0xC35, 0x4673, 0xAD, 0xBD, 0xCC, 0x4, 0xCA, 0xA6, 0xEF, 0x45);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialGestureRecognizerFactory> { define_guid(0x77214186, 0x57B9, 0x3150, 0x83, 0x82, 0x69, 0x8B, 0x24, 0xE2, 0x64, 0xD0);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation> { define_guid(0xEA4696C4, 0x7E8B, 0x30CA, 0xBC, 0xC5, 0xC7, 0x71, 0x89, 0xCE, 0xA3, 0xA);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation2> { define_guid(0x4C671045, 0x3917, 0x40FC, 0xA9, 0xAC, 0x31, 0xC9, 0xCF, 0x5F, 0xF9, 0x1B);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation3> { define_guid(0x6702E65E, 0xE915, 0x4CFB, 0x9C, 0x1B, 0x5, 0x38, 0xEF, 0xC8, 0x66, 0x87);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose> { define_guid(0xA7104307, 0x2C2B, 0x4D3A, 0x92, 0xA7, 0x80, 0xCE, 0xD7, 0xC4, 0xA0, 0xD0);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose2> { define_guid(0xECCD86B8, 0x52DB, 0x469F, 0x9E, 0x3F, 0x80, 0xC4, 0x7F, 0x74, 0xBC, 0xE9);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSource> { define_guid(0xFB5433BA, 0xB0B3, 0x3148, 0x9F, 0x3B, 0xE9, 0xF5, 0xDE, 0x56, 0x8F, 0x5D);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSource2> { define_guid(0xE4C5B70C, 0x470, 0x4028, 0x88, 0xC0, 0xA0, 0xEB, 0x44, 0xD3, 0x4E, 0xFE);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionController> { define_guid(0x5F0E5BA3, 0x954, 0x4E97, 0x86, 0xC5, 0xE7, 0xF3, 0xB, 0x11, 0x4D, 0xFD);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionController2> { define_guid(0x35B6D924, 0xC7A2, 0x49B7, 0xB7, 0x2E, 0x54, 0x36, 0xB2, 0xFB, 0x8F, 0x9C);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionController3> { define_guid(0x628466A0, 0x9D91, 0x4A0B, 0x88, 0x8D, 0x16, 0x5E, 0x67, 0xA, 0x8C, 0xD5);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceState> { define_guid(0xD5C475EF, 0x4B63, 0x37EC, 0x98, 0xB9, 0x9F, 0xC6, 0x52, 0xB9, 0xD2, 0xF2);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceState2> { define_guid(0x45F6D0BD, 0x1773, 0x492E, 0x9B, 0xA3, 0x8A, 0xC1, 0xCB, 0xE7, 0x7C, 0x8);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSource3> { define_guid(0x406D9F9, 0x9AFD, 0x44F9, 0x85, 0xDC, 0x70, 0x0, 0x23, 0xA9, 0x62, 0xE3);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceProperties> { define_guid(0x5604542, 0x3EF7, 0x3222, 0x9F, 0x53, 0x63, 0xC9, 0xCB, 0x7E, 0x3B, 0xC7);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialPointerPose> { define_guid(0x6953A42E, 0xC17E, 0x357D, 0x97, 0xA1, 0x72, 0x69, 0xD0, 0xED, 0x2D, 0x10);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialPointerPose2> { define_guid(0x9D202B17, 0x954E, 0x4E0C, 0x96, 0xD1, 0xB6, 0x79, 0xB, 0x6F, 0xC2, 0xFD);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialPointerPoseStatics> { define_guid(0xA25591A9, 0xACA1, 0x3EE0, 0x98, 0x16, 0x78, 0x5C, 0xFB, 0x2E, 0x3F, 0xB8);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionControllerProperties> { define_guid(0x61056FB1, 0x7BA9, 0x4E35, 0xB9, 0x3F, 0x92, 0x72, 0xCB, 0xA9, 0xB2, 0x8B);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteraction> { define_guid(0xFC967639, 0x88E6, 0x4646, 0x91, 0x12, 0x43, 0x44, 0xAA, 0xEC, 0x9D, 0xFA);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs> { define_guid(0x75878E4, 0x5961, 0x3B41, 0x9D, 0xFB, 0xCE, 0xA5, 0xD8, 0x9C, 0xC3, 0x8A);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs2> { define_guid(0x7B263E93, 0x5F13, 0x419C, 0x97, 0xD5, 0x83, 0x46, 0x78, 0x26, 0x6A, 0xA6);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs> { define_guid(0x23B786CF, 0xEC23, 0x3979, 0xB2, 0x7C, 0xEB, 0xE, 0x12, 0xFE, 0xB7, 0xC7);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs2> { define_guid(0xD8B4B467, 0xE648, 0x4D52, 0xAB, 0x49, 0xE0, 0xD2, 0x27, 0x19, 0x9F, 0x63);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionManager> { define_guid(0x32A64EA8, 0xA15A, 0x3995, 0xB8, 0xBD, 0x80, 0x51, 0x3C, 0xB5, 0xAD, 0xEF);};
template<> struct uuid<Windows::UI::Input::Spatial::ISpatialInteractionManagerStatics> { define_guid(0xE31FA6, 0x8CA2, 0x30BF, 0x91, 0xFE, 0xD9, 0xCB, 0x4A, 0x0, 0x89, 0x90);};

// types

namespace Windows { namespace UI { namespace Input { namespace Spatial {

// ISpatialRecognitionStartedEventArgs
struct ISpatialRecognitionStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetPointerPose(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialPointerPose* *value);
	virtual STDMETHODIMP _IsGesturePossible(SpatialGestureSettings gesture, bool *value);
};
template<typename X> struct ISpatialRecognitionStartedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialRecognitionStartedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ptr<SpatialPointerPose> TryGetPointerPose(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialPointerPose* value; hrcheck(X::get()->_TryGetPointerPose(coordinateSystem, &value)); return from_abi(value); }
	bool IsGesturePossible(SpatialGestureSettings gesture) { bool value; hrcheck(X::get()->_IsGesturePossible(gesture, &value)); return value; }
	ISpatialRecognitionStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialRecognitionStartedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialRecognitionStartedEventArgs_adaptor<X> { typedef adapt ISpatialRecognitionStartedEventArgs; };
struct ISpatialRecognitionStartedEventArgs : ISpatialRecognitionStartedEventArgs_raw, generate<ISpatialRecognitionStartedEventArgs> {};

// ISpatialRecognitionEndedEventArgs
struct ISpatialRecognitionEndedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
};
template<typename X> struct ISpatialRecognitionEndedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialRecognitionEndedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ISpatialRecognitionEndedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialRecognitionEndedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialRecognitionEndedEventArgs_adaptor<X> { typedef adapt ISpatialRecognitionEndedEventArgs; };
struct ISpatialRecognitionEndedEventArgs : ISpatialRecognitionEndedEventArgs_raw, generate<ISpatialRecognitionEndedEventArgs> {};

// ISpatialTappedEventArgs
struct ISpatialTappedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetPointerPose(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialPointerPose* *value);
	virtual STDMETHODIMP _get_TapCount(unsigned *value);
};
template<typename X> struct ISpatialTappedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialTappedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISpatialTappedEventArgs_adaptor::TapCount)->_get_TapCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} TapCount;
	};
	ptr<SpatialPointerPose> TryGetPointerPose(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialPointerPose* value; hrcheck(X::get()->_TryGetPointerPose(coordinateSystem, &value)); return from_abi(value); }
	ISpatialTappedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialTappedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialTappedEventArgs_adaptor<X> { typedef adapt ISpatialTappedEventArgs; };
struct ISpatialTappedEventArgs : ISpatialTappedEventArgs_raw, generate<ISpatialTappedEventArgs> {};

// ISpatialHoldStartedEventArgs
struct ISpatialHoldStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetPointerPose(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialPointerPose* *value);
};
template<typename X> struct ISpatialHoldStartedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialHoldStartedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ptr<SpatialPointerPose> TryGetPointerPose(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialPointerPose* value; hrcheck(X::get()->_TryGetPointerPose(coordinateSystem, &value)); return from_abi(value); }
	ISpatialHoldStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialHoldStartedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialHoldStartedEventArgs_adaptor<X> { typedef adapt ISpatialHoldStartedEventArgs; };
struct ISpatialHoldStartedEventArgs : ISpatialHoldStartedEventArgs_raw, generate<ISpatialHoldStartedEventArgs> {};

// ISpatialHoldCompletedEventArgs
struct ISpatialHoldCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
};
template<typename X> struct ISpatialHoldCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialHoldCompletedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ISpatialHoldCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialHoldCompletedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialHoldCompletedEventArgs_adaptor<X> { typedef adapt ISpatialHoldCompletedEventArgs; };
struct ISpatialHoldCompletedEventArgs : ISpatialHoldCompletedEventArgs_raw, generate<ISpatialHoldCompletedEventArgs> {};

// ISpatialHoldCanceledEventArgs
struct ISpatialHoldCanceledEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
};
template<typename X> struct ISpatialHoldCanceledEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialHoldCanceledEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ISpatialHoldCanceledEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialHoldCanceledEventArgs, X> : Windows::UI::Input::Spatial::ISpatialHoldCanceledEventArgs_adaptor<X> { typedef adapt ISpatialHoldCanceledEventArgs; };
struct ISpatialHoldCanceledEventArgs : ISpatialHoldCanceledEventArgs_raw, generate<ISpatialHoldCanceledEventArgs> {};

// ISpatialManipulationDelta
struct ISpatialManipulationDelta_raw : IInspectable {
	virtual STDMETHODIMP _get_Translation(Foundation::Numerics::Vector3 *value);
};
template<typename X> struct ISpatialManipulationDelta_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ISpatialManipulationDelta_adaptor::Translation)->_get_Translation(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} Translation;
	};
	ISpatialManipulationDelta_adaptor() {}
};
template<typename X> struct adapt<ISpatialManipulationDelta, X> : Windows::UI::Input::Spatial::ISpatialManipulationDelta_adaptor<X> { typedef adapt ISpatialManipulationDelta; };
struct ISpatialManipulationDelta : ISpatialManipulationDelta_raw, generate<ISpatialManipulationDelta> {};

// ISpatialManipulationStartedEventArgs
struct ISpatialManipulationStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetPointerPose(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialPointerPose* *value);
};
template<typename X> struct ISpatialManipulationStartedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialManipulationStartedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ptr<SpatialPointerPose> TryGetPointerPose(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialPointerPose* value; hrcheck(X::get()->_TryGetPointerPose(coordinateSystem, &value)); return from_abi(value); }
	ISpatialManipulationStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialManipulationStartedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialManipulationStartedEventArgs_adaptor<X> { typedef adapt ISpatialManipulationStartedEventArgs; };
struct ISpatialManipulationStartedEventArgs : ISpatialManipulationStartedEventArgs_raw, generate<ISpatialManipulationStartedEventArgs> {};

// ISpatialManipulationUpdatedEventArgs
struct ISpatialManipulationUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetCumulativeDelta(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialManipulationDelta* *value);
};
template<typename X> struct ISpatialManipulationUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialManipulationUpdatedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ptr<SpatialManipulationDelta> TryGetCumulativeDelta(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialManipulationDelta* value; hrcheck(X::get()->_TryGetCumulativeDelta(coordinateSystem, &value)); return from_abi(value); }
	ISpatialManipulationUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialManipulationUpdatedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialManipulationUpdatedEventArgs_adaptor<X> { typedef adapt ISpatialManipulationUpdatedEventArgs; };
struct ISpatialManipulationUpdatedEventArgs : ISpatialManipulationUpdatedEventArgs_raw, generate<ISpatialManipulationUpdatedEventArgs> {};

// SpatialManipulationDelta
template<typename X> struct statics<SpatialManipulationDelta, X> : X {
	typedef typename X::root_type SpatialManipulationDelta;
};
struct SpatialManipulationDelta : generate<SpatialManipulationDelta> {};

// ISpatialManipulationCompletedEventArgs
struct ISpatialManipulationCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetCumulativeDelta(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialManipulationDelta* *value);
};
template<typename X> struct ISpatialManipulationCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialManipulationCompletedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ptr<SpatialManipulationDelta> TryGetCumulativeDelta(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialManipulationDelta* value; hrcheck(X::get()->_TryGetCumulativeDelta(coordinateSystem, &value)); return from_abi(value); }
	ISpatialManipulationCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialManipulationCompletedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialManipulationCompletedEventArgs_adaptor<X> { typedef adapt ISpatialManipulationCompletedEventArgs; };
struct ISpatialManipulationCompletedEventArgs : ISpatialManipulationCompletedEventArgs_raw, generate<ISpatialManipulationCompletedEventArgs> {};

// ISpatialManipulationCanceledEventArgs
struct ISpatialManipulationCanceledEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
};
template<typename X> struct ISpatialManipulationCanceledEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialManipulationCanceledEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ISpatialManipulationCanceledEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialManipulationCanceledEventArgs, X> : Windows::UI::Input::Spatial::ISpatialManipulationCanceledEventArgs_adaptor<X> { typedef adapt ISpatialManipulationCanceledEventArgs; };
struct ISpatialManipulationCanceledEventArgs : ISpatialManipulationCanceledEventArgs_raw, generate<ISpatialManipulationCanceledEventArgs> {};

// ISpatialNavigationStartedEventArgs
struct ISpatialNavigationStartedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetPointerPose(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialPointerPose* *value);
	virtual STDMETHODIMP _get_IsNavigatingX(bool *value);
	virtual STDMETHODIMP _get_IsNavigatingY(bool *value);
	virtual STDMETHODIMP _get_IsNavigatingZ(bool *value);
};
template<typename X> struct ISpatialNavigationStartedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialNavigationStartedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialNavigationStartedEventArgs_adaptor::IsNavigatingX)->_get_IsNavigatingX(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsNavigatingX;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialNavigationStartedEventArgs_adaptor::IsNavigatingY)->_get_IsNavigatingY(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsNavigatingY;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialNavigationStartedEventArgs_adaptor::IsNavigatingZ)->_get_IsNavigatingZ(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsNavigatingZ;
	};
	ptr<SpatialPointerPose> TryGetPointerPose(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialPointerPose* value; hrcheck(X::get()->_TryGetPointerPose(coordinateSystem, &value)); return from_abi(value); }
	ISpatialNavigationStartedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialNavigationStartedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialNavigationStartedEventArgs_adaptor<X> { typedef adapt ISpatialNavigationStartedEventArgs; };
struct ISpatialNavigationStartedEventArgs : ISpatialNavigationStartedEventArgs_raw, generate<ISpatialNavigationStartedEventArgs> {};

// ISpatialNavigationUpdatedEventArgs
struct ISpatialNavigationUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _get_NormalizedOffset(Foundation::Numerics::Vector3 *value);
};
template<typename X> struct ISpatialNavigationUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialNavigationUpdatedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ISpatialNavigationUpdatedEventArgs_adaptor::NormalizedOffset)->_get_NormalizedOffset(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} NormalizedOffset;
	};
	ISpatialNavigationUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialNavigationUpdatedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialNavigationUpdatedEventArgs_adaptor<X> { typedef adapt ISpatialNavigationUpdatedEventArgs; };
struct ISpatialNavigationUpdatedEventArgs : ISpatialNavigationUpdatedEventArgs_raw, generate<ISpatialNavigationUpdatedEventArgs> {};

// ISpatialNavigationCompletedEventArgs
struct ISpatialNavigationCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _get_NormalizedOffset(Foundation::Numerics::Vector3 *value);
};
template<typename X> struct ISpatialNavigationCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialNavigationCompletedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ISpatialNavigationCompletedEventArgs_adaptor::NormalizedOffset)->_get_NormalizedOffset(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} NormalizedOffset;
	};
	ISpatialNavigationCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialNavigationCompletedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialNavigationCompletedEventArgs_adaptor<X> { typedef adapt ISpatialNavigationCompletedEventArgs; };
struct ISpatialNavigationCompletedEventArgs : ISpatialNavigationCompletedEventArgs_raw, generate<ISpatialNavigationCompletedEventArgs> {};

// ISpatialNavigationCanceledEventArgs
struct ISpatialNavigationCanceledEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
};
template<typename X> struct ISpatialNavigationCanceledEventArgs_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialNavigationCanceledEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ISpatialNavigationCanceledEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialNavigationCanceledEventArgs, X> : Windows::UI::Input::Spatial::ISpatialNavigationCanceledEventArgs_adaptor<X> { typedef adapt ISpatialNavigationCanceledEventArgs; };
struct ISpatialNavigationCanceledEventArgs : ISpatialNavigationCanceledEventArgs_raw, generate<ISpatialNavigationCanceledEventArgs> {};

// ISpatialGestureRecognizer
struct ISpatialGestureRecognizer_raw : IInspectable {
	virtual STDMETHODIMP _add_RecognitionStarted(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialRecognitionStartedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RecognitionStarted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RecognitionEnded(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialRecognitionEndedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RecognitionEnded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Tapped(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialTappedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Tapped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_HoldStarted(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialHoldStartedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HoldStarted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_HoldCompleted(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialHoldCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HoldCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_HoldCanceled(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialHoldCanceledEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_HoldCanceled(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ManipulationStarted(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialManipulationStartedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ManipulationStarted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ManipulationUpdated(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialManipulationUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ManipulationUpdated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ManipulationCompleted(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialManipulationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ManipulationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ManipulationCanceled(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialManipulationCanceledEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ManipulationCanceled(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NavigationStarted(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialNavigationStartedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NavigationStarted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NavigationUpdated(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialNavigationUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NavigationUpdated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NavigationCompleted(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialNavigationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NavigationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_NavigationCanceled(Foundation::TypedEventHandler<SpatialGestureRecognizer*, SpatialNavigationCanceledEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NavigationCanceled(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CaptureInteraction(SpatialInteraction* interaction);
	virtual STDMETHODIMP _CancelPendingGestures();
	virtual STDMETHODIMP _TrySetGestureSettings(SpatialGestureSettings settings, bool *succeeded);
	virtual STDMETHODIMP _get_GestureSettings(SpatialGestureSettings *value);
};
template<typename X> struct ISpatialGestureRecognizer_adaptor : X {
	union {
		struct : property {
			SpatialGestureSettings get() { SpatialGestureSettings value; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::GestureSettings)->_get_GestureSettings(&value)); return value; }
			SpatialGestureSettings operator()() { return get(); }
			operator SpatialGestureSettings () { return get(); }
		} GestureSettings;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialHoldCanceledEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::HoldCanceled)->_add_HoldCanceled(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::HoldCanceled)->_remove_HoldCanceled(token)); }
		} HoldCanceled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialHoldCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::HoldCompleted)->_add_HoldCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::HoldCompleted)->_remove_HoldCompleted(token)); }
		} HoldCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialHoldStartedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::HoldStarted)->_add_HoldStarted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::HoldStarted)->_remove_HoldStarted(token)); }
		} HoldStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialManipulationCanceledEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationCanceled)->_add_ManipulationCanceled(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationCanceled)->_remove_ManipulationCanceled(token)); }
		} ManipulationCanceled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialManipulationCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationCompleted)->_add_ManipulationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationCompleted)->_remove_ManipulationCompleted(token)); }
		} ManipulationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialManipulationStartedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationStarted)->_add_ManipulationStarted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationStarted)->_remove_ManipulationStarted(token)); }
		} ManipulationStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialManipulationUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationUpdated)->_add_ManipulationUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::ManipulationUpdated)->_remove_ManipulationUpdated(token)); }
		} ManipulationUpdated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialNavigationCanceledEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationCanceled)->_add_NavigationCanceled(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationCanceled)->_remove_NavigationCanceled(token)); }
		} NavigationCanceled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialNavigationCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationCompleted)->_add_NavigationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationCompleted)->_remove_NavigationCompleted(token)); }
		} NavigationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialNavigationStartedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationStarted)->_add_NavigationStarted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationStarted)->_remove_NavigationStarted(token)); }
		} NavigationStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialNavigationUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationUpdated)->_add_NavigationUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::NavigationUpdated)->_remove_NavigationUpdated(token)); }
		} NavigationUpdated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialRecognitionEndedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::RecognitionEnded)->_add_RecognitionEnded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::RecognitionEnded)->_remove_RecognitionEnded(token)); }
		} RecognitionEnded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialRecognitionStartedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::RecognitionStarted)->_add_RecognitionStarted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::RecognitionStarted)->_remove_RecognitionStarted(token)); }
		} RecognitionStarted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialGestureRecognizer>, ptr<SpatialTappedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialGestureRecognizer_adaptor::Tapped)->_add_Tapped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialGestureRecognizer_adaptor::Tapped)->_remove_Tapped(token)); }
		} Tapped;
	};
	void CaptureInteraction(pptr<SpatialInteraction> interaction) { hrcheck(X::get()->_CaptureInteraction(interaction)); }
	void CancelPendingGestures() { hrcheck(X::get()->_CancelPendingGestures()); }
	bool TrySetGestureSettings(SpatialGestureSettings settings) { bool succeeded; hrcheck(X::get()->_TrySetGestureSettings(settings, &succeeded)); return succeeded; }
	ISpatialGestureRecognizer_adaptor() {}
};
template<typename X> struct adapt<ISpatialGestureRecognizer, X> : Windows::UI::Input::Spatial::ISpatialGestureRecognizer_adaptor<X> { typedef adapt ISpatialGestureRecognizer; };
struct ISpatialGestureRecognizer : ISpatialGestureRecognizer_raw, generate<ISpatialGestureRecognizer> {};

// ISpatialGestureRecognizerFactory
struct ISpatialGestureRecognizerFactory : IInspectable {
	virtual STDMETHODIMP _Create(SpatialGestureSettings settings, SpatialGestureRecognizer* *value);
};

// SpatialGestureRecognizer
template<typename> struct SpatialGestureRecognizer_statics {
	static SpatialGestureRecognizer *activate(SpatialGestureSettings settings) { SpatialGestureRecognizer *value; hrcheck(get_activation_factory<SpatialGestureRecognizer, ISpatialGestureRecognizerFactory>()->_Create(settings, &value)); return value; }
};

template<typename X> struct statics<SpatialGestureRecognizer, X> : X, Windows::UI::Input::Spatial::SpatialGestureRecognizer_statics<void> {
	using Windows::UI::Input::Spatial::SpatialGestureRecognizer_statics<void>::activate;
	typedef typename X::root_type SpatialGestureRecognizer;
};
struct SpatialGestureRecognizer : generate<SpatialGestureRecognizer> {};

// SpatialRecognitionStartedEventArgs
template<typename X> struct statics<SpatialRecognitionStartedEventArgs, X> : X {
	typedef typename X::root_type SpatialRecognitionStartedEventArgs;
};
struct SpatialRecognitionStartedEventArgs : generate<SpatialRecognitionStartedEventArgs> {};

// SpatialRecognitionEndedEventArgs
template<typename X> struct statics<SpatialRecognitionEndedEventArgs, X> : X {
	typedef typename X::root_type SpatialRecognitionEndedEventArgs;
};
struct SpatialRecognitionEndedEventArgs : generate<SpatialRecognitionEndedEventArgs> {};

// SpatialTappedEventArgs
template<typename X> struct statics<SpatialTappedEventArgs, X> : X {
	typedef typename X::root_type SpatialTappedEventArgs;
};
struct SpatialTappedEventArgs : generate<SpatialTappedEventArgs> {};

// SpatialHoldStartedEventArgs
template<typename X> struct statics<SpatialHoldStartedEventArgs, X> : X {
	typedef typename X::root_type SpatialHoldStartedEventArgs;
};
struct SpatialHoldStartedEventArgs : generate<SpatialHoldStartedEventArgs> {};

// SpatialHoldCompletedEventArgs
template<typename X> struct statics<SpatialHoldCompletedEventArgs, X> : X {
	typedef typename X::root_type SpatialHoldCompletedEventArgs;
};
struct SpatialHoldCompletedEventArgs : generate<SpatialHoldCompletedEventArgs> {};

// SpatialHoldCanceledEventArgs
template<typename X> struct statics<SpatialHoldCanceledEventArgs, X> : X {
	typedef typename X::root_type SpatialHoldCanceledEventArgs;
};
struct SpatialHoldCanceledEventArgs : generate<SpatialHoldCanceledEventArgs> {};

// SpatialManipulationStartedEventArgs
template<typename X> struct statics<SpatialManipulationStartedEventArgs, X> : X {
	typedef typename X::root_type SpatialManipulationStartedEventArgs;
};
struct SpatialManipulationStartedEventArgs : generate<SpatialManipulationStartedEventArgs> {};

// SpatialManipulationUpdatedEventArgs
template<typename X> struct statics<SpatialManipulationUpdatedEventArgs, X> : X {
	typedef typename X::root_type SpatialManipulationUpdatedEventArgs;
};
struct SpatialManipulationUpdatedEventArgs : generate<SpatialManipulationUpdatedEventArgs> {};

// SpatialManipulationCompletedEventArgs
template<typename X> struct statics<SpatialManipulationCompletedEventArgs, X> : X {
	typedef typename X::root_type SpatialManipulationCompletedEventArgs;
};
struct SpatialManipulationCompletedEventArgs : generate<SpatialManipulationCompletedEventArgs> {};

// SpatialManipulationCanceledEventArgs
template<typename X> struct statics<SpatialManipulationCanceledEventArgs, X> : X {
	typedef typename X::root_type SpatialManipulationCanceledEventArgs;
};
struct SpatialManipulationCanceledEventArgs : generate<SpatialManipulationCanceledEventArgs> {};

// SpatialNavigationStartedEventArgs
template<typename X> struct statics<SpatialNavigationStartedEventArgs, X> : X {
	typedef typename X::root_type SpatialNavigationStartedEventArgs;
};
struct SpatialNavigationStartedEventArgs : generate<SpatialNavigationStartedEventArgs> {};

// SpatialNavigationUpdatedEventArgs
template<typename X> struct statics<SpatialNavigationUpdatedEventArgs, X> : X {
	typedef typename X::root_type SpatialNavigationUpdatedEventArgs;
};
struct SpatialNavigationUpdatedEventArgs : generate<SpatialNavigationUpdatedEventArgs> {};

// SpatialNavigationCompletedEventArgs
template<typename X> struct statics<SpatialNavigationCompletedEventArgs, X> : X {
	typedef typename X::root_type SpatialNavigationCompletedEventArgs;
};
struct SpatialNavigationCompletedEventArgs : generate<SpatialNavigationCompletedEventArgs> {};

// SpatialNavigationCanceledEventArgs
template<typename X> struct statics<SpatialNavigationCanceledEventArgs, X> : X {
	typedef typename X::root_type SpatialNavigationCanceledEventArgs;
};
struct SpatialNavigationCanceledEventArgs : generate<SpatialNavigationCanceledEventArgs> {};

// ISpatialInteractionSourceLocation
struct ISpatialInteractionSourceLocation_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::IReference<Foundation::Numerics::Vector3>* *value);
	virtual STDMETHODIMP _get_Velocity(Foundation::IReference<Foundation::Numerics::Vector3>* *value);
};
template<typename X> struct ISpatialInteractionSourceLocation_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> get() { Foundation::IReference<Foundation::Numerics::Vector3>* value; hrcheck(enc(&ISpatialInteractionSourceLocation_adaptor::Position)->_get_Position(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::Numerics::Vector3>> () { return get(); }
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> operator->() { return get(); }
		} Position;
		struct : property {
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> get() { Foundation::IReference<Foundation::Numerics::Vector3>* value; hrcheck(enc(&ISpatialInteractionSourceLocation_adaptor::Velocity)->_get_Velocity(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::Numerics::Vector3>> () { return get(); }
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> operator->() { return get(); }
		} Velocity;
	};
	ISpatialInteractionSourceLocation_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceLocation, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation_adaptor<X> { typedef adapt ISpatialInteractionSourceLocation; };
struct ISpatialInteractionSourceLocation : ISpatialInteractionSourceLocation_raw, generate<ISpatialInteractionSourceLocation> {};

// ISpatialInteractionSourceLocation2
struct ISpatialInteractionSourceLocation2_raw : IInspectable {
	virtual STDMETHODIMP _get_Orientation(Foundation::IReference<Foundation::Numerics::Quaternion>* *value);
};
template<typename X> struct ISpatialInteractionSourceLocation2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::Numerics::Quaternion>> get() { Foundation::IReference<Foundation::Numerics::Quaternion>* value; hrcheck(enc(&ISpatialInteractionSourceLocation2_adaptor::Orientation)->_get_Orientation(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::Numerics::Quaternion>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::Numerics::Quaternion>> () { return get(); }
			ptr<Foundation::IReference<Foundation::Numerics::Quaternion>> operator->() { return get(); }
		} Orientation;
	};
	ISpatialInteractionSourceLocation2_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceLocation2, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation2_adaptor<X> { typedef adapt ISpatialInteractionSourceLocation2; };
struct ISpatialInteractionSourceLocation2 : ISpatialInteractionSourceLocation2_raw, generate<ISpatialInteractionSourceLocation2> {};

// ISpatialInteractionSourceLocation3
struct ISpatialInteractionSourceLocation3_raw : IInspectable {
	virtual STDMETHODIMP _get_PositionAccuracy(SpatialInteractionSourcePositionAccuracy *value);
	virtual STDMETHODIMP _get_AngularVelocity(Foundation::IReference<Foundation::Numerics::Vector3>* *value);
	virtual STDMETHODIMP _get_SourcePointerPose(SpatialPointerInteractionSourcePose* *value);
};
template<typename X> struct ISpatialInteractionSourceLocation3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> get() { Foundation::IReference<Foundation::Numerics::Vector3>* value; hrcheck(enc(&ISpatialInteractionSourceLocation3_adaptor::AngularVelocity)->_get_AngularVelocity(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::Numerics::Vector3>> () { return get(); }
			ptr<Foundation::IReference<Foundation::Numerics::Vector3>> operator->() { return get(); }
		} AngularVelocity;
		struct : property {
			SpatialInteractionSourcePositionAccuracy get() { SpatialInteractionSourcePositionAccuracy value; hrcheck(enc(&ISpatialInteractionSourceLocation3_adaptor::PositionAccuracy)->_get_PositionAccuracy(&value)); return value; }
			SpatialInteractionSourcePositionAccuracy operator()() { return get(); }
			operator SpatialInteractionSourcePositionAccuracy () { return get(); }
		} PositionAccuracy;
		struct : property {
			ptr<SpatialPointerInteractionSourcePose> get() { SpatialPointerInteractionSourcePose* value; hrcheck(enc(&ISpatialInteractionSourceLocation3_adaptor::SourcePointerPose)->_get_SourcePointerPose(&value)); return from_abi(value); }
			ptr<SpatialPointerInteractionSourcePose> operator()() { return get(); }
			operator ptr<SpatialPointerInteractionSourcePose> () { return get(); }
			ptr<SpatialPointerInteractionSourcePose> operator->() { return get(); }
		} SourcePointerPose;
	};
	ISpatialInteractionSourceLocation3_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceLocation3, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceLocation3_adaptor<X> { typedef adapt ISpatialInteractionSourceLocation3; };
struct ISpatialInteractionSourceLocation3 : ISpatialInteractionSourceLocation3_raw, generate<ISpatialInteractionSourceLocation3> {};

// ISpatialPointerInteractionSourcePose
struct ISpatialPointerInteractionSourcePose_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _get_ForwardDirection(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _get_UpDirection(Foundation::Numerics::Vector3 *value);
};
template<typename X> struct ISpatialPointerInteractionSourcePose_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ISpatialPointerInteractionSourcePose_adaptor::ForwardDirection)->_get_ForwardDirection(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} ForwardDirection;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ISpatialPointerInteractionSourcePose_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} Position;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ISpatialPointerInteractionSourcePose_adaptor::UpDirection)->_get_UpDirection(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} UpDirection;
	};
	ISpatialPointerInteractionSourcePose_adaptor() {}
};
template<typename X> struct adapt<ISpatialPointerInteractionSourcePose, X> : Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose_adaptor<X> { typedef adapt ISpatialPointerInteractionSourcePose; };
struct ISpatialPointerInteractionSourcePose : ISpatialPointerInteractionSourcePose_raw, generate<ISpatialPointerInteractionSourcePose> {};

// ISpatialPointerInteractionSourcePose2
struct ISpatialPointerInteractionSourcePose2_raw : IInspectable {
	virtual STDMETHODIMP _get_Orientation(Foundation::Numerics::Quaternion *value);
	virtual STDMETHODIMP _get_PositionAccuracy(SpatialInteractionSourcePositionAccuracy *value);
};
template<typename X> struct ISpatialPointerInteractionSourcePose2_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Quaternion get() { Foundation::Numerics::Quaternion value; hrcheck(enc(&ISpatialPointerInteractionSourcePose2_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			Foundation::Numerics::Quaternion operator()() { return get(); }
			operator Foundation::Numerics::Quaternion () { return get(); }
		} Orientation;
		struct : property {
			SpatialInteractionSourcePositionAccuracy get() { SpatialInteractionSourcePositionAccuracy value; hrcheck(enc(&ISpatialPointerInteractionSourcePose2_adaptor::PositionAccuracy)->_get_PositionAccuracy(&value)); return value; }
			SpatialInteractionSourcePositionAccuracy operator()() { return get(); }
			operator SpatialInteractionSourcePositionAccuracy () { return get(); }
		} PositionAccuracy;
	};
	ISpatialPointerInteractionSourcePose2_adaptor() {}
};
template<typename X> struct adapt<ISpatialPointerInteractionSourcePose2, X> : Windows::UI::Input::Spatial::ISpatialPointerInteractionSourcePose2_adaptor<X> { typedef adapt ISpatialPointerInteractionSourcePose2; };
struct ISpatialPointerInteractionSourcePose2 : ISpatialPointerInteractionSourcePose2_raw, generate<ISpatialPointerInteractionSourcePose2> {};

// SpatialPointerInteractionSourcePose
template<typename X> struct statics<SpatialPointerInteractionSourcePose, X> : X {
	typedef typename X::root_type SpatialPointerInteractionSourcePose;
};
struct SpatialPointerInteractionSourcePose : generate<SpatialPointerInteractionSourcePose> {};

// ISpatialInteractionSource
struct ISpatialInteractionSource_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_Kind(SpatialInteractionSourceKind *value);
};
template<typename X> struct ISpatialInteractionSource_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISpatialInteractionSource_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialInteractionSource_adaptor::Kind)->_get_Kind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} Kind;
	};
	ISpatialInteractionSource_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSource, X> : Windows::UI::Input::Spatial::ISpatialInteractionSource_adaptor<X> { typedef adapt ISpatialInteractionSource; };
struct ISpatialInteractionSource : ISpatialInteractionSource_raw, generate<ISpatialInteractionSource> {};

// ISpatialInteractionSource2
struct ISpatialInteractionSource2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsPointingSupported(bool *value);
	virtual STDMETHODIMP _get_IsMenuSupported(bool *value);
	virtual STDMETHODIMP _get_IsGraspSupported(bool *value);
	virtual STDMETHODIMP _get_Controller(SpatialInteractionController* *value);
	virtual STDMETHODIMP _TryGetStateAtTimestamp(Perception::PerceptionTimestamp* timestamp, SpatialInteractionSourceState* *value);
};
template<typename X> struct ISpatialInteractionSource2_adaptor : X {
	union {
		struct : property {
			ptr<SpatialInteractionController> get() { SpatialInteractionController* value; hrcheck(enc(&ISpatialInteractionSource2_adaptor::Controller)->_get_Controller(&value)); return from_abi(value); }
			ptr<SpatialInteractionController> operator()() { return get(); }
			operator ptr<SpatialInteractionController> () { return get(); }
			ptr<SpatialInteractionController> operator->() { return get(); }
		} Controller;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionSource2_adaptor::IsGraspSupported)->_get_IsGraspSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsGraspSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionSource2_adaptor::IsMenuSupported)->_get_IsMenuSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMenuSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionSource2_adaptor::IsPointingSupported)->_get_IsPointingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPointingSupported;
	};
	ptr<SpatialInteractionSourceState> TryGetStateAtTimestamp(pptr<Perception::PerceptionTimestamp> timestamp) { SpatialInteractionSourceState* value; hrcheck(X::get()->_TryGetStateAtTimestamp(timestamp, &value)); return from_abi(value); }
	ISpatialInteractionSource2_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSource2, X> : Windows::UI::Input::Spatial::ISpatialInteractionSource2_adaptor<X> { typedef adapt ISpatialInteractionSource2; };
struct ISpatialInteractionSource2 : ISpatialInteractionSource2_raw, generate<ISpatialInteractionSource2> {};

// ISpatialInteractionController
struct ISpatialInteractionController_raw : IInspectable {
	virtual STDMETHODIMP _get_HasTouchpad(bool *value);
	virtual STDMETHODIMP _get_HasThumbstick(bool *value);
	virtual STDMETHODIMP _get_SimpleHapticsController(Devices::Haptics::SimpleHapticsController* *value);
	virtual STDMETHODIMP _get_VendorId(unsigned short *value);
	virtual STDMETHODIMP _get_ProductId(unsigned short *value);
	virtual STDMETHODIMP _get_Version(unsigned short *value);
};
template<typename X> struct ISpatialInteractionController_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionController_adaptor::HasThumbstick)->_get_HasThumbstick(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasThumbstick;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionController_adaptor::HasTouchpad)->_get_HasTouchpad(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasTouchpad;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&ISpatialInteractionController_adaptor::ProductId)->_get_ProductId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} ProductId;
		struct : property {
			ptr<Devices::Haptics::SimpleHapticsController> get() { Devices::Haptics::SimpleHapticsController* value; hrcheck(enc(&ISpatialInteractionController_adaptor::SimpleHapticsController)->_get_SimpleHapticsController(&value)); return from_abi(value); }
			ptr<Devices::Haptics::SimpleHapticsController> operator()() { return get(); }
			operator ptr<Devices::Haptics::SimpleHapticsController> () { return get(); }
			ptr<Devices::Haptics::SimpleHapticsController> operator->() { return get(); }
		} SimpleHapticsController;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&ISpatialInteractionController_adaptor::VendorId)->_get_VendorId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} VendorId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&ISpatialInteractionController_adaptor::Version)->_get_Version(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Version;
	};
	ISpatialInteractionController_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionController, X> : Windows::UI::Input::Spatial::ISpatialInteractionController_adaptor<X> { typedef adapt ISpatialInteractionController; };
struct ISpatialInteractionController : ISpatialInteractionController_raw, generate<ISpatialInteractionController> {};

// ISpatialInteractionController2
struct ISpatialInteractionController2_raw : IInspectable {
	virtual STDMETHODIMP _TryGetRenderableModelAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamWithContentType*>* *value);
};
template<typename X> struct ISpatialInteractionController2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStreamWithContentType>>> TryGetRenderableModelAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStreamWithContentType*>* value; hrcheck(X::get()->_TryGetRenderableModelAsync(&value)); return from_abi(value); }
};
template<typename X> struct adapt<ISpatialInteractionController2, X> : Windows::UI::Input::Spatial::ISpatialInteractionController2_adaptor<X> { typedef adapt ISpatialInteractionController2; };
struct ISpatialInteractionController2 : ISpatialInteractionController2_raw, generate<ISpatialInteractionController2> {};

// ISpatialInteractionController3
struct ISpatialInteractionController3_raw : IInspectable {
	virtual STDMETHODIMP _TryGetBatteryReport(Devices::Power::BatteryReport* *value);
};
template<typename X> struct ISpatialInteractionController3_adaptor : X {
	ptr<Devices::Power::BatteryReport> TryGetBatteryReport() { Devices::Power::BatteryReport* value; hrcheck(X::get()->_TryGetBatteryReport(&value)); return from_abi(value); }
};
template<typename X> struct adapt<ISpatialInteractionController3, X> : Windows::UI::Input::Spatial::ISpatialInteractionController3_adaptor<X> { typedef adapt ISpatialInteractionController3; };
struct ISpatialInteractionController3 : ISpatialInteractionController3_raw, generate<ISpatialInteractionController3> {};

// SpatialInteractionController
template<typename X> struct statics<SpatialInteractionController, X> : X {
	typedef typename X::root_type SpatialInteractionController;
};
struct SpatialInteractionController : generate<SpatialInteractionController> {};

// ISpatialInteractionSourceState
struct ISpatialInteractionSourceState_raw : IInspectable {
	virtual STDMETHODIMP _get_Source(SpatialInteractionSource* *value);
	virtual STDMETHODIMP _get_Properties(SpatialInteractionSourceProperties* *value);
	virtual STDMETHODIMP _get_IsPressed(bool *value);
	virtual STDMETHODIMP _get_Timestamp(Perception::PerceptionTimestamp* *value);
	virtual STDMETHODIMP _TryGetPointerPose(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialPointerPose* *value);
};
template<typename X> struct ISpatialInteractionSourceState_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionSourceState_adaptor::IsPressed)->_get_IsPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPressed;
		struct : property {
			ptr<SpatialInteractionSourceProperties> get() { SpatialInteractionSourceProperties* value; hrcheck(enc(&ISpatialInteractionSourceState_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<SpatialInteractionSourceProperties> operator()() { return get(); }
			operator ptr<SpatialInteractionSourceProperties> () { return get(); }
			ptr<SpatialInteractionSourceProperties> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<SpatialInteractionSource> get() { SpatialInteractionSource* value; hrcheck(enc(&ISpatialInteractionSourceState_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<SpatialInteractionSource> operator()() { return get(); }
			operator ptr<SpatialInteractionSource> () { return get(); }
			ptr<SpatialInteractionSource> operator->() { return get(); }
		} Source;
		struct : property {
			ptr<Perception::PerceptionTimestamp> get() { Perception::PerceptionTimestamp* value; hrcheck(enc(&ISpatialInteractionSourceState_adaptor::Timestamp)->_get_Timestamp(&value)); return from_abi(value); }
			ptr<Perception::PerceptionTimestamp> operator()() { return get(); }
			operator ptr<Perception::PerceptionTimestamp> () { return get(); }
			ptr<Perception::PerceptionTimestamp> operator->() { return get(); }
		} Timestamp;
	};
	ptr<SpatialPointerPose> TryGetPointerPose(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialPointerPose* value; hrcheck(X::get()->_TryGetPointerPose(coordinateSystem, &value)); return from_abi(value); }
	ISpatialInteractionSourceState_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceState, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceState_adaptor<X> { typedef adapt ISpatialInteractionSourceState; };
struct ISpatialInteractionSourceState : ISpatialInteractionSourceState_raw, generate<ISpatialInteractionSourceState> {};

// ISpatialInteractionSourceState2
struct ISpatialInteractionSourceState2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSelectPressed(bool *value);
	virtual STDMETHODIMP _get_IsMenuPressed(bool *value);
	virtual STDMETHODIMP _get_IsGrasped(bool *value);
	virtual STDMETHODIMP _get_SelectPressedValue(double *value);
	virtual STDMETHODIMP _get_ControllerProperties(SpatialInteractionControllerProperties* *value);
};
template<typename X> struct ISpatialInteractionSourceState2_adaptor : X {
	union {
		struct : property {
			ptr<SpatialInteractionControllerProperties> get() { SpatialInteractionControllerProperties* value; hrcheck(enc(&ISpatialInteractionSourceState2_adaptor::ControllerProperties)->_get_ControllerProperties(&value)); return from_abi(value); }
			ptr<SpatialInteractionControllerProperties> operator()() { return get(); }
			operator ptr<SpatialInteractionControllerProperties> () { return get(); }
			ptr<SpatialInteractionControllerProperties> operator->() { return get(); }
		} ControllerProperties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionSourceState2_adaptor::IsGrasped)->_get_IsGrasped(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsGrasped;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionSourceState2_adaptor::IsMenuPressed)->_get_IsMenuPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMenuPressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionSourceState2_adaptor::IsSelectPressed)->_get_IsSelectPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSelectPressed;
		struct : property {
			double get() { double value; hrcheck(enc(&ISpatialInteractionSourceState2_adaptor::SelectPressedValue)->_get_SelectPressedValue(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} SelectPressedValue;
	};
	ISpatialInteractionSourceState2_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceState2, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceState2_adaptor<X> { typedef adapt ISpatialInteractionSourceState2; };
struct ISpatialInteractionSourceState2 : ISpatialInteractionSourceState2_raw, generate<ISpatialInteractionSourceState2> {};

// SpatialInteractionSourceState
template<typename X> struct statics<SpatialInteractionSourceState, X> : X {
	typedef typename X::root_type SpatialInteractionSourceState;
};
struct SpatialInteractionSourceState : generate<SpatialInteractionSourceState> {};

// ISpatialInteractionSource3
struct ISpatialInteractionSource3_raw : IInspectable {
	virtual STDMETHODIMP _get_Handedness(SpatialInteractionSourceHandedness *value);
};
template<typename X> struct ISpatialInteractionSource3_adaptor : X {
	union {
		struct : property {
			SpatialInteractionSourceHandedness get() { SpatialInteractionSourceHandedness value; hrcheck(enc(&ISpatialInteractionSource3_adaptor::Handedness)->_get_Handedness(&value)); return value; }
			SpatialInteractionSourceHandedness operator()() { return get(); }
			operator SpatialInteractionSourceHandedness () { return get(); }
		} Handedness;
	};
	ISpatialInteractionSource3_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSource3, X> : Windows::UI::Input::Spatial::ISpatialInteractionSource3_adaptor<X> { typedef adapt ISpatialInteractionSource3; };
struct ISpatialInteractionSource3 : ISpatialInteractionSource3_raw, generate<ISpatialInteractionSource3> {};

// ISpatialInteractionSourceProperties
struct ISpatialInteractionSourceProperties_raw : IInspectable {
	virtual STDMETHODIMP _TryGetSourceLossMitigationDirection(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Foundation::IReference<Foundation::Numerics::Vector3>* *value);
	virtual STDMETHODIMP _get_SourceLossRisk(double *value);
	virtual STDMETHODIMP _TryGetLocation(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialInteractionSourceLocation* *value);
};
template<typename X> struct ISpatialInteractionSourceProperties_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&ISpatialInteractionSourceProperties_adaptor::SourceLossRisk)->_get_SourceLossRisk(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} SourceLossRisk;
	};
	ptr<Foundation::IReference<Foundation::Numerics::Vector3>> TryGetSourceLossMitigationDirection(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { Foundation::IReference<Foundation::Numerics::Vector3>* value; hrcheck(X::get()->_TryGetSourceLossMitigationDirection(coordinateSystem, &value)); return from_abi(value); }
	ptr<SpatialInteractionSourceLocation> TryGetLocation(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialInteractionSourceLocation* value; hrcheck(X::get()->_TryGetLocation(coordinateSystem, &value)); return from_abi(value); }
	ISpatialInteractionSourceProperties_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceProperties, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceProperties_adaptor<X> { typedef adapt ISpatialInteractionSourceProperties; };
struct ISpatialInteractionSourceProperties : ISpatialInteractionSourceProperties_raw, generate<ISpatialInteractionSourceProperties> {};

// SpatialInteractionSourceLocation
template<typename X> struct statics<SpatialInteractionSourceLocation, X> : X {
	typedef typename X::root_type SpatialInteractionSourceLocation;
};
struct SpatialInteractionSourceLocation : generate<SpatialInteractionSourceLocation> {};

// ISpatialPointerPose
struct ISpatialPointerPose_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Perception::PerceptionTimestamp* *value);
	virtual STDMETHODIMP _get_Head(Perception::People::HeadPose* *value);
};
template<typename X> struct ISpatialPointerPose_adaptor : X {
	union {
		struct : property {
			ptr<Perception::People::HeadPose> get() { Perception::People::HeadPose* value; hrcheck(enc(&ISpatialPointerPose_adaptor::Head)->_get_Head(&value)); return from_abi(value); }
			ptr<Perception::People::HeadPose> operator()() { return get(); }
			operator ptr<Perception::People::HeadPose> () { return get(); }
			ptr<Perception::People::HeadPose> operator->() { return get(); }
		} Head;
		struct : property {
			ptr<Perception::PerceptionTimestamp> get() { Perception::PerceptionTimestamp* value; hrcheck(enc(&ISpatialPointerPose_adaptor::Timestamp)->_get_Timestamp(&value)); return from_abi(value); }
			ptr<Perception::PerceptionTimestamp> operator()() { return get(); }
			operator ptr<Perception::PerceptionTimestamp> () { return get(); }
			ptr<Perception::PerceptionTimestamp> operator->() { return get(); }
		} Timestamp;
	};
	ISpatialPointerPose_adaptor() {}
};
template<typename X> struct adapt<ISpatialPointerPose, X> : Windows::UI::Input::Spatial::ISpatialPointerPose_adaptor<X> { typedef adapt ISpatialPointerPose; };
struct ISpatialPointerPose : ISpatialPointerPose_raw, generate<ISpatialPointerPose> {};

// ISpatialPointerPose2
struct ISpatialPointerPose2_raw : IInspectable {
	virtual STDMETHODIMP _TryGetInteractionSourcePose(SpatialInteractionSource* source, SpatialPointerInteractionSourcePose* *value);
};
template<typename X> struct ISpatialPointerPose2_adaptor : X {
	ptr<SpatialPointerInteractionSourcePose> TryGetInteractionSourcePose(pptr<SpatialInteractionSource> source) { SpatialPointerInteractionSourcePose* value; hrcheck(X::get()->_TryGetInteractionSourcePose(source, &value)); return from_abi(value); }
};
template<typename X> struct adapt<ISpatialPointerPose2, X> : Windows::UI::Input::Spatial::ISpatialPointerPose2_adaptor<X> { typedef adapt ISpatialPointerPose2; };
struct ISpatialPointerPose2 : ISpatialPointerPose2_raw, generate<ISpatialPointerPose2> {};

// SpatialInteractionSource
template<typename X> struct statics<SpatialInteractionSource, X> : X {
	typedef typename X::root_type SpatialInteractionSource;
};
struct SpatialInteractionSource : generate<SpatialInteractionSource> {};

// ISpatialPointerPoseStatics
struct ISpatialPointerPoseStatics : IInspectable {
	virtual STDMETHODIMP _TryGetAtTimestamp(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Perception::PerceptionTimestamp* timestamp, SpatialPointerPose* *value);
};

// SpatialPointerPose
template<typename> struct SpatialPointerPose_statics {
	static ptr<SpatialPointerPose> TryGetAtTimestamp(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem, pptr<Perception::PerceptionTimestamp> timestamp) { SpatialPointerPose* value; hrcheck(get_activation_factory<SpatialPointerPose, ISpatialPointerPoseStatics>()->_TryGetAtTimestamp(coordinateSystem, timestamp, &value)); return from_abi(value); }
};

template<typename X> struct statics<SpatialPointerPose, X> : X, Windows::UI::Input::Spatial::SpatialPointerPose_statics<void> {
	typedef typename X::root_type SpatialPointerPose;
};
struct SpatialPointerPose : generate<SpatialPointerPose> {};

// SpatialInteractionSourceProperties
template<typename X> struct statics<SpatialInteractionSourceProperties, X> : X {
	typedef typename X::root_type SpatialInteractionSourceProperties;
};
struct SpatialInteractionSourceProperties : generate<SpatialInteractionSourceProperties> {};

// ISpatialInteractionControllerProperties
struct ISpatialInteractionControllerProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTouchpadTouched(bool *value);
	virtual STDMETHODIMP _get_IsTouchpadPressed(bool *value);
	virtual STDMETHODIMP _get_IsThumbstickPressed(bool *value);
	virtual STDMETHODIMP _get_ThumbstickX(double *value);
	virtual STDMETHODIMP _get_ThumbstickY(double *value);
	virtual STDMETHODIMP _get_TouchpadX(double *value);
	virtual STDMETHODIMP _get_TouchpadY(double *value);
};
template<typename X> struct ISpatialInteractionControllerProperties_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionControllerProperties_adaptor::IsThumbstickPressed)->_get_IsThumbstickPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsThumbstickPressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionControllerProperties_adaptor::IsTouchpadPressed)->_get_IsTouchpadPressed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTouchpadPressed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialInteractionControllerProperties_adaptor::IsTouchpadTouched)->_get_IsTouchpadTouched(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTouchpadTouched;
		struct : property {
			double get() { double value; hrcheck(enc(&ISpatialInteractionControllerProperties_adaptor::ThumbstickX)->_get_ThumbstickX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} ThumbstickX;
		struct : property {
			double get() { double value; hrcheck(enc(&ISpatialInteractionControllerProperties_adaptor::ThumbstickY)->_get_ThumbstickY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} ThumbstickY;
		struct : property {
			double get() { double value; hrcheck(enc(&ISpatialInteractionControllerProperties_adaptor::TouchpadX)->_get_TouchpadX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} TouchpadX;
		struct : property {
			double get() { double value; hrcheck(enc(&ISpatialInteractionControllerProperties_adaptor::TouchpadY)->_get_TouchpadY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} TouchpadY;
	};
	ISpatialInteractionControllerProperties_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionControllerProperties, X> : Windows::UI::Input::Spatial::ISpatialInteractionControllerProperties_adaptor<X> { typedef adapt ISpatialInteractionControllerProperties; };
struct ISpatialInteractionControllerProperties : ISpatialInteractionControllerProperties_raw, generate<ISpatialInteractionControllerProperties> {};

// SpatialInteractionControllerProperties
template<typename X> struct statics<SpatialInteractionControllerProperties, X> : X {
	typedef typename X::root_type SpatialInteractionControllerProperties;
};
struct SpatialInteractionControllerProperties : generate<SpatialInteractionControllerProperties> {};

// ISpatialInteraction
struct ISpatialInteraction_raw : IInspectable {
	virtual STDMETHODIMP _get_SourceState(SpatialInteractionSourceState* *value);
};
template<typename X> struct ISpatialInteraction_adaptor : X {
	union {
		struct : property {
			ptr<SpatialInteractionSourceState> get() { SpatialInteractionSourceState* value; hrcheck(enc(&ISpatialInteraction_adaptor::SourceState)->_get_SourceState(&value)); return from_abi(value); }
			ptr<SpatialInteractionSourceState> operator()() { return get(); }
			operator ptr<SpatialInteractionSourceState> () { return get(); }
			ptr<SpatialInteractionSourceState> operator->() { return get(); }
		} SourceState;
	};
	ISpatialInteraction_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteraction, X> : Windows::UI::Input::Spatial::ISpatialInteraction_adaptor<X> { typedef adapt ISpatialInteraction; };
struct ISpatialInteraction : ISpatialInteraction_raw, generate<ISpatialInteraction> {};

// ISpatialInteractionDetectedEventArgs
struct ISpatialInteractionDetectedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSourceKind(SpatialInteractionSourceKind *value);
	virtual STDMETHODIMP _TryGetPointerPose(Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, SpatialPointerPose* *value);
	virtual STDMETHODIMP _get_Interaction(SpatialInteraction* *value);
};
template<typename X> struct ISpatialInteractionDetectedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SpatialInteraction> get() { SpatialInteraction* value; hrcheck(enc(&ISpatialInteractionDetectedEventArgs_adaptor::Interaction)->_get_Interaction(&value)); return from_abi(value); }
			ptr<SpatialInteraction> operator()() { return get(); }
			operator ptr<SpatialInteraction> () { return get(); }
			ptr<SpatialInteraction> operator->() { return get(); }
		} Interaction;
		struct : property {
			SpatialInteractionSourceKind get() { SpatialInteractionSourceKind value; hrcheck(enc(&ISpatialInteractionDetectedEventArgs_adaptor::InteractionSourceKind)->_get_InteractionSourceKind(&value)); return value; }
			SpatialInteractionSourceKind operator()() { return get(); }
			operator SpatialInteractionSourceKind () { return get(); }
		} InteractionSourceKind;
	};
	ptr<SpatialPointerPose> TryGetPointerPose(pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { SpatialPointerPose* value; hrcheck(X::get()->_TryGetPointerPose(coordinateSystem, &value)); return from_abi(value); }
	ISpatialInteractionDetectedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionDetectedEventArgs, X> : Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs_adaptor<X> { typedef adapt ISpatialInteractionDetectedEventArgs; };
struct ISpatialInteractionDetectedEventArgs : ISpatialInteractionDetectedEventArgs_raw, generate<ISpatialInteractionDetectedEventArgs> {};

// SpatialInteraction
template<typename X> struct statics<SpatialInteraction, X> : X {
	typedef typename X::root_type SpatialInteraction;
};
struct SpatialInteraction : generate<SpatialInteraction> {};

// ISpatialInteractionDetectedEventArgs2
struct ISpatialInteractionDetectedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_InteractionSource(SpatialInteractionSource* *value);
};
template<typename X> struct ISpatialInteractionDetectedEventArgs2_adaptor : X {
	union {
		struct : property {
			ptr<SpatialInteractionSource> get() { SpatialInteractionSource* value; hrcheck(enc(&ISpatialInteractionDetectedEventArgs2_adaptor::InteractionSource)->_get_InteractionSource(&value)); return from_abi(value); }
			ptr<SpatialInteractionSource> operator()() { return get(); }
			operator ptr<SpatialInteractionSource> () { return get(); }
			ptr<SpatialInteractionSource> operator->() { return get(); }
		} InteractionSource;
	};
	ISpatialInteractionDetectedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionDetectedEventArgs2, X> : Windows::UI::Input::Spatial::ISpatialInteractionDetectedEventArgs2_adaptor<X> { typedef adapt ISpatialInteractionDetectedEventArgs2; };
struct ISpatialInteractionDetectedEventArgs2 : ISpatialInteractionDetectedEventArgs2_raw, generate<ISpatialInteractionDetectedEventArgs2> {};

// ISpatialInteractionSourceEventArgs
struct ISpatialInteractionSourceEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_State(SpatialInteractionSourceState* *value);
};
template<typename X> struct ISpatialInteractionSourceEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SpatialInteractionSourceState> get() { SpatialInteractionSourceState* value; hrcheck(enc(&ISpatialInteractionSourceEventArgs_adaptor::State)->_get_State(&value)); return from_abi(value); }
			ptr<SpatialInteractionSourceState> operator()() { return get(); }
			operator ptr<SpatialInteractionSourceState> () { return get(); }
			ptr<SpatialInteractionSourceState> operator->() { return get(); }
		} State;
	};
	ISpatialInteractionSourceEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceEventArgs, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs_adaptor<X> { typedef adapt ISpatialInteractionSourceEventArgs; };
struct ISpatialInteractionSourceEventArgs : ISpatialInteractionSourceEventArgs_raw, generate<ISpatialInteractionSourceEventArgs> {};

// ISpatialInteractionSourceEventArgs2
struct ISpatialInteractionSourceEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_PressKind(SpatialInteractionPressKind *value);
};
template<typename X> struct ISpatialInteractionSourceEventArgs2_adaptor : X {
	union {
		struct : property {
			SpatialInteractionPressKind get() { SpatialInteractionPressKind value; hrcheck(enc(&ISpatialInteractionSourceEventArgs2_adaptor::PressKind)->_get_PressKind(&value)); return value; }
			SpatialInteractionPressKind operator()() { return get(); }
			operator SpatialInteractionPressKind () { return get(); }
		} PressKind;
	};
	ISpatialInteractionSourceEventArgs2_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionSourceEventArgs2, X> : Windows::UI::Input::Spatial::ISpatialInteractionSourceEventArgs2_adaptor<X> { typedef adapt ISpatialInteractionSourceEventArgs2; };
struct ISpatialInteractionSourceEventArgs2 : ISpatialInteractionSourceEventArgs2_raw, generate<ISpatialInteractionSourceEventArgs2> {};

// ISpatialInteractionManager
struct ISpatialInteractionManager_raw : IInspectable {
	virtual STDMETHODIMP _add_SourceDetected(Foundation::TypedEventHandler<SpatialInteractionManager*, SpatialInteractionSourceEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceDetected(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceLost(Foundation::TypedEventHandler<SpatialInteractionManager*, SpatialInteractionSourceEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceLost(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceUpdated(Foundation::TypedEventHandler<SpatialInteractionManager*, SpatialInteractionSourceEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceUpdated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourcePressed(Foundation::TypedEventHandler<SpatialInteractionManager*, SpatialInteractionSourceEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourcePressed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceReleased(Foundation::TypedEventHandler<SpatialInteractionManager*, SpatialInteractionSourceEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceReleased(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_InteractionDetected(Foundation::TypedEventHandler<SpatialInteractionManager*, SpatialInteractionDetectedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_InteractionDetected(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetDetectedSourcesAtTimestamp(Perception::PerceptionTimestamp* timeStamp, Foundation::Collections::IVectorView<SpatialInteractionSourceState*>* *value);
};
template<typename X> struct ISpatialInteractionManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialInteractionManager>, ptr<SpatialInteractionDetectedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialInteractionManager_adaptor::InteractionDetected)->_add_InteractionDetected(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialInteractionManager_adaptor::InteractionDetected)->_remove_InteractionDetected(token)); }
		} InteractionDetected;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialInteractionManager>, ptr<SpatialInteractionSourceEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceDetected)->_add_SourceDetected(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceDetected)->_remove_SourceDetected(token)); }
		} SourceDetected;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialInteractionManager>, ptr<SpatialInteractionSourceEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceLost)->_add_SourceLost(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceLost)->_remove_SourceLost(token)); }
		} SourceLost;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialInteractionManager>, ptr<SpatialInteractionSourceEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialInteractionManager_adaptor::SourcePressed)->_add_SourcePressed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialInteractionManager_adaptor::SourcePressed)->_remove_SourcePressed(token)); }
		} SourcePressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialInteractionManager>, ptr<SpatialInteractionSourceEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceReleased)->_add_SourceReleased(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceReleased)->_remove_SourceReleased(token)); }
		} SourceReleased;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialInteractionManager>, ptr<SpatialInteractionSourceEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceUpdated)->_add_SourceUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialInteractionManager_adaptor::SourceUpdated)->_remove_SourceUpdated(token)); }
		} SourceUpdated;
	};
	ptr<Foundation::Collections::IVectorView<ptr<SpatialInteractionSourceState>>> GetDetectedSourcesAtTimestamp(pptr<Perception::PerceptionTimestamp> timeStamp) { Foundation::Collections::IVectorView<SpatialInteractionSourceState*>* value; hrcheck(X::get()->_GetDetectedSourcesAtTimestamp(timeStamp, &value)); return from_abi(value); }
	ISpatialInteractionManager_adaptor() {}
};
template<typename X> struct adapt<ISpatialInteractionManager, X> : Windows::UI::Input::Spatial::ISpatialInteractionManager_adaptor<X> { typedef adapt ISpatialInteractionManager; };
struct ISpatialInteractionManager : ISpatialInteractionManager_raw, generate<ISpatialInteractionManager> {};

// ISpatialInteractionManagerStatics
struct ISpatialInteractionManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(SpatialInteractionManager* *value);
};

// SpatialInteractionManager
template<typename> struct SpatialInteractionManager_statics {
	static ptr<SpatialInteractionManager> GetForCurrentView() { SpatialInteractionManager* value; hrcheck(get_activation_factory<SpatialInteractionManager, ISpatialInteractionManagerStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
};

template<typename X> struct statics<SpatialInteractionManager, X> : X, Windows::UI::Input::Spatial::SpatialInteractionManager_statics<void> {
	typedef typename X::root_type SpatialInteractionManager;
};
struct SpatialInteractionManager : generate<SpatialInteractionManager> {};

// SpatialInteractionSourceEventArgs
template<typename X> struct statics<SpatialInteractionSourceEventArgs, X> : X {
	typedef typename X::root_type SpatialInteractionSourceEventArgs;
};
struct SpatialInteractionSourceEventArgs : generate<SpatialInteractionSourceEventArgs> {};

// SpatialInteractionDetectedEventArgs
template<typename X> struct statics<SpatialInteractionDetectedEventArgs, X> : X {
	typedef typename X::root_type SpatialInteractionDetectedEventArgs;
};
struct SpatialInteractionDetectedEventArgs : generate<SpatialInteractionDetectedEventArgs> {};
}}}}
} // namespace iso_winrt
