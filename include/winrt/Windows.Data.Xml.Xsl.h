#pragma once
// generated by isopod tools
// namespaces:
// Windows.Data.Xml.Xsl

#include "Windows.Data.Xml.Xsl.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Data { namespace Xml { namespace Dom {
struct IXmlNode;
struct XmlDocument;
}}}}

// defs

template<> struct def<Windows::Data::Xml::Xsl::IXsltProcessor2> : interface_type<> {};
template<> struct def<Windows::Data::Xml::Xsl::IXsltProcessorFactory> : interface_type<> {};
template<> struct def<Windows::Data::Xml::Xsl::IXsltProcessor> : interface_type<> {};
template<> struct def<Windows::Data::Xml::Xsl::XsltProcessor> : class_type<Platform::Object, Windows::Data::Xml::Xsl::IXsltProcessor, Windows::Data::Xml::Xsl::IXsltProcessor2>, custom_activators {};

// uuids

template<> struct uuid<Windows::Data::Xml::Xsl::IXsltProcessor2> { define_guid(0x8DA45C56, 0x97A5, 0x44CB, 0xA8, 0xBE, 0x27, 0xD8, 0x62, 0x80, 0xC7, 0xA);};
template<> struct uuid<Windows::Data::Xml::Xsl::IXsltProcessorFactory> { define_guid(0x274146C0, 0x9A51, 0x4663, 0xBF, 0x30, 0xE, 0xF7, 0x42, 0x14, 0x6F, 0x20);};
template<> struct uuid<Windows::Data::Xml::Xsl::IXsltProcessor> { define_guid(0x7B64703F, 0x550C, 0x48C6, 0xA9, 0xF, 0x93, 0xA5, 0xB9, 0x64, 0x51, 0x8F);};

// types

namespace Windows { namespace Data { namespace Xml { namespace Xsl {

// IXsltProcessor2
struct IXsltProcessor2_raw : IInspectable {
	virtual STDMETHODIMP _TransformToDocument(Dom::IXmlNode* inputNode, Dom::XmlDocument* *output);
};
template<typename X> struct IXsltProcessor2_adaptor : X {
	ptr<Dom::XmlDocument> TransformToDocument(pptr<Dom::IXmlNode> inputNode) { Dom::XmlDocument* output; hrcheck(X::get()->_TransformToDocument(inputNode, &output)); return from_abi(output); }
};
template<typename X> struct adapt<IXsltProcessor2, X> : Windows::Data::Xml::Xsl::IXsltProcessor2_adaptor<X> { typedef adapt IXsltProcessor2; };
struct IXsltProcessor2 : IXsltProcessor2_raw, generate<IXsltProcessor2> {};

// IXsltProcessorFactory
struct IXsltProcessorFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(Dom::XmlDocument* document, XsltProcessor* *xsltProcessor);
};

// IXsltProcessor
struct IXsltProcessor_raw : IInspectable {
	virtual STDMETHODIMP _TransformToString(Dom::IXmlNode* inputNode, HSTRING *output);
};
template<typename X> struct IXsltProcessor_adaptor : X {
	hstring TransformToString(pptr<Dom::IXmlNode> inputNode) { HSTRING output; hrcheck(X::get()->_TransformToString(inputNode, &output)); return from_abi(output); }
};
template<typename X> struct adapt<IXsltProcessor, X> : Windows::Data::Xml::Xsl::IXsltProcessor_adaptor<X> { typedef adapt IXsltProcessor; };
struct IXsltProcessor : IXsltProcessor_raw, generate<IXsltProcessor> {};

// XsltProcessor
template<typename> struct XsltProcessor_statics {
	static XsltProcessor *activate(pptr<Dom::XmlDocument> document) { XsltProcessor *xsltProcessor; hrcheck(get_activation_factory<XsltProcessor, IXsltProcessorFactory>()->_CreateInstance(document, &xsltProcessor)); return xsltProcessor; }
};

template<typename X> struct statics<XsltProcessor, X> : X, Windows::Data::Xml::Xsl::XsltProcessor_statics<void> {
	using Windows::Data::Xml::Xsl::XsltProcessor_statics<void>::activate;
	typedef typename X::root_type XsltProcessor;
};
struct XsltProcessor : generate<XsltProcessor> {};
}}}}
} // namespace iso_winrt
