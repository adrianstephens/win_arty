#pragma once
// generated by isopod tools
// namespaces:
// Windows.Services.Maps.LocalSearch

#include "Windows.Services.Maps.LocalSearch.0.h"
#include "Windows.Globalization.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Geolocation {
struct Geocircle;
struct Geopoint;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Services { namespace Maps {
struct MapAddress;
struct PlaceInfo;
}}}

// defs

template<> struct def<Windows::Services::Maps::LocalSearch::LocalLocationFinderStatus> : enum_type<int> {};
template<> struct def<Windows::Services::Maps::LocalSearch::ILocalLocation> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::ILocalLocationFinderResult> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::ILocalLocation2> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::LocalLocation> : class_type<Platform::Object, Windows::Services::Maps::LocalSearch::ILocalLocation, Windows::Services::Maps::LocalSearch::ILocalLocation2> {};
template<> struct def<Windows::Services::Maps::LocalSearch::ILocalLocationFinderStatics> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::LocalLocationFinderResult> : class_type<Platform::Object, Windows::Services::Maps::LocalSearch::ILocalLocationFinderResult> {};
template<> struct def<Windows::Services::Maps::LocalSearch::ILocalCategoriesStatics> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::ILocalLocationHoursOfOperationItem> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::ILocalLocationRatingInfo> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::LocalLocationRatingInfo> : class_type<Platform::Object, Windows::Services::Maps::LocalSearch::ILocalLocationRatingInfo> {};
template<> struct def<Windows::Services::Maps::LocalSearch::LocalLocationHoursOfOperationItem> : class_type<Platform::Object, Windows::Services::Maps::LocalSearch::ILocalLocationHoursOfOperationItem> {};
template<> struct def<Windows::Services::Maps::LocalSearch::IPlaceInfoHelperStatics> : interface_type<> {};
template<> struct def<Windows::Services::Maps::LocalSearch::LocalLocationFinder> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Services::Maps::LocalSearch::LocalCategories> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Services::Maps::LocalSearch::PlaceInfoHelper> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Services::Maps::LocalSearch::ILocalLocation> { define_guid(0xBB0FE9AB, 0x4502, 0x4F2C, 0x94, 0xA9, 0xD, 0x60, 0xDE, 0xE, 0x21, 0x63);};
template<> struct uuid<Windows::Services::Maps::LocalSearch::ILocalLocationFinderResult> { define_guid(0xD09B6CC6, 0xF338, 0x4191, 0x9F, 0xD8, 0x54, 0x40, 0xB9, 0xA6, 0x8F, 0x52);};
template<> struct uuid<Windows::Services::Maps::LocalSearch::ILocalLocation2> { define_guid(0x6E9E307C, 0xECB5, 0x4FFC, 0xBB, 0x8C, 0xBA, 0x50, 0xBA, 0x8C, 0x2D, 0xC6);};
template<> struct uuid<Windows::Services::Maps::LocalSearch::ILocalLocationFinderStatics> { define_guid(0xD2EF7344, 0xA0DE, 0x48CA, 0x81, 0xA8, 0x7, 0xC7, 0xDC, 0xFD, 0x37, 0xAB);};
template<> struct uuid<Windows::Services::Maps::LocalSearch::ILocalCategoriesStatics> { define_guid(0xF49399F5, 0x8261, 0x4321, 0x99, 0x74, 0xEF, 0x92, 0xD4, 0x9A, 0x8D, 0xCA);};
template<> struct uuid<Windows::Services::Maps::LocalSearch::ILocalLocationHoursOfOperationItem> { define_guid(0x23548C72, 0xA1C7, 0x43F1, 0xA4, 0xF0, 0x10, 0x91, 0xC3, 0x9E, 0xC6, 0x40);};
template<> struct uuid<Windows::Services::Maps::LocalSearch::ILocalLocationRatingInfo> { define_guid(0xCB1DAB56, 0x3354, 0x4311, 0x8B, 0xC0, 0xA2, 0xD4, 0xD5, 0xEB, 0x80, 0x6E);};
template<> struct uuid<Windows::Services::Maps::LocalSearch::IPlaceInfoHelperStatics> { define_guid(0xDD1CA9A7, 0xA9C6, 0x491B, 0xBC, 0x9, 0xE8, 0xF, 0xCE, 0xA4, 0x8E, 0xE6);};

// types

namespace Windows { namespace Services { namespace Maps { namespace LocalSearch {

// ILocalLocation
struct ILocalLocation_raw : IInspectable {
	virtual STDMETHODIMP _get_Address(MapAddress* *value);
	virtual STDMETHODIMP _get_Identifier(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Point(Devices::Geolocation::Geopoint* *value);
	virtual STDMETHODIMP _get_PhoneNumber(HSTRING *value);
	virtual STDMETHODIMP _get_DataAttribution(HSTRING *value);
};
template<typename X> struct ILocalLocation_adaptor : X {
	union {
		struct : property {
			ptr<MapAddress> get() { MapAddress* value; hrcheck(enc(&ILocalLocation_adaptor::Address)->_get_Address(&value)); return from_abi(value); }
			ptr<MapAddress> operator()() { return get(); }
			operator ptr<MapAddress> () { return get(); }
			ptr<MapAddress> operator->() { return get(); }
		} Address;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalLocation_adaptor::DataAttribution)->_get_DataAttribution(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DataAttribution;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalLocation_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalLocation_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalLocation_adaptor::Identifier)->_get_Identifier(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Identifier;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalLocation_adaptor::PhoneNumber)->_get_PhoneNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhoneNumber;
		struct : property {
			ptr<Devices::Geolocation::Geopoint> get() { Devices::Geolocation::Geopoint* value; hrcheck(enc(&ILocalLocation_adaptor::Point)->_get_Point(&value)); return from_abi(value); }
			ptr<Devices::Geolocation::Geopoint> operator()() { return get(); }
			operator ptr<Devices::Geolocation::Geopoint> () { return get(); }
			ptr<Devices::Geolocation::Geopoint> operator->() { return get(); }
		} Point;
	};
	ILocalLocation_adaptor() {}
};
template<typename X> struct adapt<ILocalLocation, X> : Windows::Services::Maps::LocalSearch::ILocalLocation_adaptor<X> { typedef adapt ILocalLocation; };
struct ILocalLocation : ILocalLocation_raw, generate<ILocalLocation> {};

// ILocalLocationFinderResult
struct ILocalLocationFinderResult_raw : IInspectable {
	virtual STDMETHODIMP _get_LocalLocations(Foundation::Collections::IVectorView<LocalLocation*>* *value);
	virtual STDMETHODIMP _get_Status(LocalLocationFinderStatus *value);
};
template<typename X> struct ILocalLocationFinderResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<LocalLocation>>> get() { Foundation::Collections::IVectorView<LocalLocation*>* value; hrcheck(enc(&ILocalLocationFinderResult_adaptor::LocalLocations)->_get_LocalLocations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<LocalLocation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<LocalLocation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<LocalLocation>>> operator->() { return get(); }
		} LocalLocations;
		struct : property {
			LocalLocationFinderStatus get() { LocalLocationFinderStatus value; hrcheck(enc(&ILocalLocationFinderResult_adaptor::Status)->_get_Status(&value)); return value; }
			LocalLocationFinderStatus operator()() { return get(); }
			operator LocalLocationFinderStatus () { return get(); }
		} Status;
	};
	ILocalLocationFinderResult_adaptor() {}
};
template<typename X> struct adapt<ILocalLocationFinderResult, X> : Windows::Services::Maps::LocalSearch::ILocalLocationFinderResult_adaptor<X> { typedef adapt ILocalLocationFinderResult; };
struct ILocalLocationFinderResult : ILocalLocationFinderResult_raw, generate<ILocalLocationFinderResult> {};

// ILocalLocation2
struct ILocalLocation2_raw : IInspectable {
	virtual STDMETHODIMP _get_Category(HSTRING *value);
	virtual STDMETHODIMP _get_RatingInfo(LocalLocationRatingInfo* *value);
	virtual STDMETHODIMP _get_HoursOfOperation(Foundation::Collections::IVectorView<LocalLocationHoursOfOperationItem*>* *value);
};
template<typename X> struct ILocalLocation2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalLocation2_adaptor::Category)->_get_Category(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Category;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<LocalLocationHoursOfOperationItem>>> get() { Foundation::Collections::IVectorView<LocalLocationHoursOfOperationItem*>* value; hrcheck(enc(&ILocalLocation2_adaptor::HoursOfOperation)->_get_HoursOfOperation(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<LocalLocationHoursOfOperationItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<LocalLocationHoursOfOperationItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<LocalLocationHoursOfOperationItem>>> operator->() { return get(); }
		} HoursOfOperation;
		struct : property {
			ptr<LocalLocationRatingInfo> get() { LocalLocationRatingInfo* value; hrcheck(enc(&ILocalLocation2_adaptor::RatingInfo)->_get_RatingInfo(&value)); return from_abi(value); }
			ptr<LocalLocationRatingInfo> operator()() { return get(); }
			operator ptr<LocalLocationRatingInfo> () { return get(); }
			ptr<LocalLocationRatingInfo> operator->() { return get(); }
		} RatingInfo;
	};
	ILocalLocation2_adaptor() {}
};
template<typename X> struct adapt<ILocalLocation2, X> : Windows::Services::Maps::LocalSearch::ILocalLocation2_adaptor<X> { typedef adapt ILocalLocation2; };
struct ILocalLocation2 : ILocalLocation2_raw, generate<ILocalLocation2> {};

// LocalLocation
template<typename X> struct statics<LocalLocation, X> : X {
	typedef typename X::root_type LocalLocation;
};
struct LocalLocation : generate<LocalLocation> {};

// ILocalLocationFinderStatics
struct ILocalLocationFinderStatics : IInspectable {
	virtual STDMETHODIMP _FindLocalLocationsAsync(HSTRING searchTerm, Devices::Geolocation::Geocircle* searchArea, HSTRING localCategory, unsigned maxResults, Foundation::IAsyncOperation<LocalLocationFinderResult*>* *result);
};

// LocalLocationFinderResult
template<typename X> struct statics<LocalLocationFinderResult, X> : X {
	typedef typename X::root_type LocalLocationFinderResult;
};
struct LocalLocationFinderResult : generate<LocalLocationFinderResult> {};

// ILocalCategoriesStatics
struct ILocalCategoriesStatics : IInspectable {
	virtual STDMETHODIMP _get_BankAndCreditUnions(HSTRING *value);
	virtual STDMETHODIMP _get_EatDrink(HSTRING *value);
	virtual STDMETHODIMP _get_Hospitals(HSTRING *value);
	virtual STDMETHODIMP _get_HotelsAndMotels(HSTRING *value);
	virtual STDMETHODIMP _get_All(HSTRING *value);
	virtual STDMETHODIMP _get_Parking(HSTRING *value);
	virtual STDMETHODIMP _get_SeeDo(HSTRING *value);
	virtual STDMETHODIMP _get_Shop(HSTRING *value);
};

// ILocalLocationHoursOfOperationItem
struct ILocalLocationHoursOfOperationItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Day(Globalization::DayOfWeek *value);
	virtual STDMETHODIMP _get_Start(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Span(Foundation::TimeSpan *value);
};
template<typename X> struct ILocalLocationHoursOfOperationItem_adaptor : X {
	union {
		struct : property {
			Globalization::DayOfWeek get() { Globalization::DayOfWeek value; hrcheck(enc(&ILocalLocationHoursOfOperationItem_adaptor::Day)->_get_Day(&value)); return value; }
			Globalization::DayOfWeek operator()() { return get(); }
			operator Globalization::DayOfWeek () { return get(); }
		} Day;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ILocalLocationHoursOfOperationItem_adaptor::Span)->_get_Span(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Span;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ILocalLocationHoursOfOperationItem_adaptor::Start)->_get_Start(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Start;
	};
	ILocalLocationHoursOfOperationItem_adaptor() {}
};
template<typename X> struct adapt<ILocalLocationHoursOfOperationItem, X> : Windows::Services::Maps::LocalSearch::ILocalLocationHoursOfOperationItem_adaptor<X> { typedef adapt ILocalLocationHoursOfOperationItem; };
struct ILocalLocationHoursOfOperationItem : ILocalLocationHoursOfOperationItem_raw, generate<ILocalLocationHoursOfOperationItem> {};

// ILocalLocationRatingInfo
struct ILocalLocationRatingInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_AggregateRating(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_RatingCount(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ProviderIdentifier(HSTRING *value);
};
template<typename X> struct ILocalLocationRatingInfo_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&ILocalLocationRatingInfo_adaptor::AggregateRating)->_get_AggregateRating(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} AggregateRating;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalLocationRatingInfo_adaptor::ProviderIdentifier)->_get_ProviderIdentifier(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderIdentifier;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&ILocalLocationRatingInfo_adaptor::RatingCount)->_get_RatingCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} RatingCount;
	};
	ILocalLocationRatingInfo_adaptor() {}
};
template<typename X> struct adapt<ILocalLocationRatingInfo, X> : Windows::Services::Maps::LocalSearch::ILocalLocationRatingInfo_adaptor<X> { typedef adapt ILocalLocationRatingInfo; };
struct ILocalLocationRatingInfo : ILocalLocationRatingInfo_raw, generate<ILocalLocationRatingInfo> {};

// LocalLocationRatingInfo
template<typename X> struct statics<LocalLocationRatingInfo, X> : X {
	typedef typename X::root_type LocalLocationRatingInfo;
};
struct LocalLocationRatingInfo : generate<LocalLocationRatingInfo> {};

// LocalLocationHoursOfOperationItem
template<typename X> struct statics<LocalLocationHoursOfOperationItem, X> : X {
	typedef typename X::root_type LocalLocationHoursOfOperationItem;
};
struct LocalLocationHoursOfOperationItem : generate<LocalLocationHoursOfOperationItem> {};

// IPlaceInfoHelperStatics
struct IPlaceInfoHelperStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromLocalLocation(LocalLocation* location, PlaceInfo* *resultValue);
};

// LocalLocationFinder
template<typename> struct LocalLocationFinder_statics {
	static ptr<Foundation::IAsyncOperation<ptr<LocalLocationFinderResult>>> FindLocalLocationsAsync(hstring_ref searchTerm, pptr<Devices::Geolocation::Geocircle> searchArea, hstring_ref localCategory, unsigned maxResults) { Foundation::IAsyncOperation<LocalLocationFinderResult*>* result; hrcheck(get_activation_factory<LocalLocationFinder, ILocalLocationFinderStatics>()->_FindLocalLocationsAsync(searchTerm, searchArea, localCategory, maxResults, &result)); return from_abi(result); }
};

template<typename X> struct statics<LocalLocationFinder, X> : X, Windows::Services::Maps::LocalSearch::LocalLocationFinder_statics<void> {
	typedef typename X::root_type LocalLocationFinder;
};
struct LocalLocationFinder : generate<LocalLocationFinder> {};

// LocalCategories
template<typename> struct LocalCategories_statics {
	static struct _All : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_All(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} All;
	static struct _BankAndCreditUnions : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_BankAndCreditUnions(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BankAndCreditUnions;
	static struct _EatDrink : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_EatDrink(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EatDrink;
	static struct _Hospitals : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_Hospitals(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Hospitals;
	static struct _HotelsAndMotels : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_HotelsAndMotels(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HotelsAndMotels;
	static struct _Parking : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_Parking(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Parking;
	static struct _SeeDo : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_SeeDo(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SeeDo;
	static struct _Shop : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<LocalCategories, ILocalCategoriesStatics>()->_get_Shop(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Shop;
};
template<typename X> typename LocalCategories_statics<X>::_All LocalCategories_statics<X>::All;
template<typename X> typename LocalCategories_statics<X>::_BankAndCreditUnions LocalCategories_statics<X>::BankAndCreditUnions;
template<typename X> typename LocalCategories_statics<X>::_EatDrink LocalCategories_statics<X>::EatDrink;
template<typename X> typename LocalCategories_statics<X>::_Hospitals LocalCategories_statics<X>::Hospitals;
template<typename X> typename LocalCategories_statics<X>::_HotelsAndMotels LocalCategories_statics<X>::HotelsAndMotels;
template<typename X> typename LocalCategories_statics<X>::_Parking LocalCategories_statics<X>::Parking;
template<typename X> typename LocalCategories_statics<X>::_SeeDo LocalCategories_statics<X>::SeeDo;
template<typename X> typename LocalCategories_statics<X>::_Shop LocalCategories_statics<X>::Shop;

template<typename X> struct statics<LocalCategories, X> : X, Windows::Services::Maps::LocalSearch::LocalCategories_statics<void> {
	typedef typename X::root_type LocalCategories;
};
struct LocalCategories : generate<LocalCategories> {};

// PlaceInfoHelper
template<typename> struct PlaceInfoHelper_statics {
	static ptr<PlaceInfo> CreateFromLocalLocation(pptr<LocalLocation> location) { PlaceInfo* resultValue; hrcheck(get_activation_factory<PlaceInfoHelper, IPlaceInfoHelperStatics>()->_CreateFromLocalLocation(location, &resultValue)); return from_abi(resultValue); }
};

template<typename X> struct statics<PlaceInfoHelper, X> : X, Windows::Services::Maps::LocalSearch::PlaceInfoHelper_statics<void> {
	typedef typename X::root_type PlaceInfoHelper;
};
struct PlaceInfoHelper : generate<PlaceInfoHelper> {};
}}}}
} // namespace iso_winrt
