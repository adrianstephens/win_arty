#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Import

#include "Windows.Media.Import.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}
struct IStorageFolder;
}}

// defs

template<> struct def<Windows::Media::Import::PhotoImportStage> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportAccessMode> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportImportMode> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportSourceType> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportContentType> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportPowerSource> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportStorageMediumType> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportContentTypeFilter> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportItemSelectionMode> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportSubfolderDateFormat> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportConnectionTransport> : enum_type<int> {};
template<> struct def<Windows::Media::Import::PhotoImportSubfolderCreationMode> : enum_type<int> {};
template<> struct def<Windows::Media::Import::IPhotoImportManagerStatics> : interface_type<> {};
template<> struct def<Windows::Media::Import::IPhotoImportSourceStatics> : interface_type<> {};
template<> struct def<Windows::Media::Import::IPhotoImportSource> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportSource> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportSource> {};
template<> struct def<Windows::Media::Import::PhotoImportProgress> : value_type<unsigned, unsigned, unsigned __int64, unsigned __int64, double> {};
template<> struct def<Windows::Media::Import::IPhotoImportOperation> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportOperation> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportOperation> {};
template<> struct def<Windows::Media::Import::PhotoImportManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Media::Import::IPhotoImportSession2> : interface_type<> {};
template<> struct def<Windows::Media::Import::IPhotoImportSession> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Import::PhotoImportSession> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportSession, Windows::Media::Import::IPhotoImportSession2> {};
template<> struct def<Windows::Media::Import::IPhotoImportFindItemsResult2> : interface_type<> {};
template<> struct def<Windows::Media::Import::IPhotoImportFindItemsResult> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportFindItemsResult> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportFindItemsResult, Windows::Media::Import::IPhotoImportFindItemsResult2> {};
template<> struct def<Windows::Media::Import::IPhotoImportImportItemsResult> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportImportItemsResult> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportImportItemsResult> {};
template<> struct def<Windows::Media::Import::IPhotoImportDeleteImportedItemsFromSourceResult> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportDeleteImportedItemsFromSourceResult> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportDeleteImportedItemsFromSourceResult> {};
template<> struct def<Windows::Media::Import::IPhotoImportStorageMedium> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportStorageMedium> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportStorageMedium> {};
template<> struct def<Windows::Media::Import::IPhotoImportItem> : interface_type<> {};
template<> struct def<Windows::Media::Import::IPhotoImportSidecar> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportSidecar> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportSidecar> {};
template<> struct def<Windows::Media::Import::IPhotoImportVideoSegment> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportVideoSegment> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportVideoSegment> {};
template<> struct def<Windows::Media::Import::PhotoImportItem> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportItem> {};
template<> struct def<Windows::Media::Import::IPhotoImportSelectionChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportSelectionChangedEventArgs> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportSelectionChangedEventArgs> {};
template<> struct def<Windows::Media::Import::IPhotoImportItemImportedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Import::PhotoImportItemImportedEventArgs> : class_type<Platform::Object, Windows::Media::Import::IPhotoImportItemImportedEventArgs> {};

// uuids

template<> struct uuid<Windows::Media::Import::IPhotoImportManagerStatics> { define_guid(0x2771903D, 0xA046, 0x4F06, 0x9B, 0x9C, 0xBF, 0xD6, 0x62, 0xE8, 0x32, 0x87);};
template<> struct uuid<Windows::Media::Import::IPhotoImportSourceStatics> { define_guid(0x528E586, 0x32D8, 0x467C, 0x8C, 0xEE, 0x23, 0xA1, 0xB2, 0xF4, 0x3E, 0x85);};
template<> struct uuid<Windows::Media::Import::IPhotoImportSource> { define_guid(0x1F8EA35E, 0x145B, 0x4CD6, 0x87, 0xF1, 0x54, 0x96, 0x5A, 0x98, 0x2F, 0xEF);};
template<> struct uuid<Windows::Media::Import::IPhotoImportOperation> { define_guid(0xD9F797E4, 0xA09A, 0x4EE4, 0xA4, 0xB1, 0x20, 0x94, 0x2, 0x77, 0xA5, 0xBE);};
template<> struct uuid<Windows::Media::Import::IPhotoImportSession2> { define_guid(0x2A526710, 0x3EC6, 0x469D, 0xA3, 0x75, 0x2B, 0x9F, 0x47, 0x85, 0x39, 0x1E);};
template<> struct uuid<Windows::Media::Import::IPhotoImportSession> { define_guid(0xAA63916E, 0xECDB, 0x4EFE, 0x94, 0xC6, 0x5F, 0x5C, 0xAF, 0xE3, 0x4C, 0xFB);};
template<> struct uuid<Windows::Media::Import::IPhotoImportFindItemsResult2> { define_guid(0xFBDD6A3B, 0xECF9, 0x406A, 0x81, 0x5E, 0x50, 0x15, 0x62, 0x5B, 0xA, 0x88);};
template<> struct uuid<Windows::Media::Import::IPhotoImportFindItemsResult> { define_guid(0x3915E647, 0x6C78, 0x492B, 0x84, 0x4E, 0x8F, 0xE5, 0xE8, 0xF6, 0xBF, 0xB9);};
template<> struct uuid<Windows::Media::Import::IPhotoImportImportItemsResult> { define_guid(0xE4D4F478, 0xD419, 0x4443, 0xA8, 0x4E, 0xF0, 0x6A, 0x85, 0xC, 0xB, 0x0);};
template<> struct uuid<Windows::Media::Import::IPhotoImportDeleteImportedItemsFromSourceResult> { define_guid(0xF4E112F8, 0x843D, 0x428A, 0xA1, 0xA6, 0x81, 0x51, 0x2, 0x92, 0xB0, 0xAE);};
template<> struct uuid<Windows::Media::Import::IPhotoImportStorageMedium> { define_guid(0xF2B9B093, 0xFC85, 0x487F, 0x87, 0xC2, 0x58, 0xD6, 0x75, 0xD0, 0x5B, 0x7);};
template<> struct uuid<Windows::Media::Import::IPhotoImportItem> { define_guid(0xA9D07E76, 0x9BFC, 0x43B8, 0xB3, 0x56, 0x63, 0x3B, 0x6A, 0x98, 0x8C, 0x9E);};
template<> struct uuid<Windows::Media::Import::IPhotoImportSidecar> { define_guid(0x46D7D757, 0xF802, 0x44C7, 0x9C, 0x98, 0x7A, 0x71, 0xF4, 0xBC, 0x14, 0x86);};
template<> struct uuid<Windows::Media::Import::IPhotoImportVideoSegment> { define_guid(0x623C0289, 0x321A, 0x41D8, 0x91, 0x66, 0x8C, 0x62, 0xA3, 0x33, 0x27, 0x6C);};
template<> struct uuid<Windows::Media::Import::IPhotoImportSelectionChangedEventArgs> { define_guid(0x10461782, 0xFA9D, 0x4C30, 0x8B, 0xC9, 0x4D, 0x64, 0x91, 0x15, 0x72, 0xD5);};
template<> struct uuid<Windows::Media::Import::IPhotoImportItemImportedEventArgs> { define_guid(0x42CB2FDD, 0x7D68, 0x47B5, 0xBC, 0x7C, 0xCE, 0xB7, 0x3E, 0xC, 0x77, 0xDC);};

// types

namespace Windows { namespace Media { namespace Import {

// IPhotoImportManagerStatics
struct IPhotoImportManagerStatics : IInspectable {
	virtual STDMETHODIMP _IsSupportedAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _FindAllSourcesAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PhotoImportSource*>*>* *operation);
	virtual STDMETHODIMP _GetPendingOperations(Foundation::Collections::IVectorView<PhotoImportOperation*>* *result);
};

// IPhotoImportSourceStatics
struct IPhotoImportSourceStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING sourceId, Foundation::IAsyncOperation<PhotoImportSource*>* *operation);
	virtual STDMETHODIMP _FromFolderAsync(Storage::IStorageFolder* sourceRootFolder, Foundation::IAsyncOperation<PhotoImportSource*>* *operation);
};

// IPhotoImportSource
struct IPhotoImportSource_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_Manufacturer(HSTRING *value);
	virtual STDMETHODIMP _get_Model(HSTRING *value);
	virtual STDMETHODIMP _get_SerialNumber(HSTRING *value);
	virtual STDMETHODIMP _get_ConnectionProtocol(HSTRING *value);
	virtual STDMETHODIMP _get_ConnectionTransport(PhotoImportConnectionTransport *value);
	virtual STDMETHODIMP _get_Type(PhotoImportSourceType *value);
	virtual STDMETHODIMP _get_PowerSource(PhotoImportPowerSource *value);
	virtual STDMETHODIMP _get_BatteryLevelPercent(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_DateTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_StorageMedia(Foundation::Collections::IVectorView<PhotoImportStorageMedium*>* *value);
	virtual STDMETHODIMP _get_IsLocked(Foundation::IReference<bool>* *value);
	virtual STDMETHODIMP _get_IsMassStorage(bool *value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _CreateImportSession(PhotoImportSession* *result);
};
template<typename X> struct IPhotoImportSource_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IPhotoImportSource_adaptor::BatteryLevelPercent)->_get_BatteryLevelPercent(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} BatteryLevelPercent;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSource_adaptor::ConnectionProtocol)->_get_ConnectionProtocol(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ConnectionProtocol;
		struct : property {
			PhotoImportConnectionTransport get() { PhotoImportConnectionTransport value; hrcheck(enc(&IPhotoImportSource_adaptor::ConnectionTransport)->_get_ConnectionTransport(&value)); return value; }
			PhotoImportConnectionTransport operator()() { return get(); }
			operator PhotoImportConnectionTransport () { return get(); }
		} ConnectionTransport;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IPhotoImportSource_adaptor::DateTime)->_get_DateTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} DateTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSource_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSource_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSource_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			ptr<Foundation::IReference<bool>> get() { Foundation::IReference<bool>* value; hrcheck(enc(&IPhotoImportSource_adaptor::IsLocked)->_get_IsLocked(&value)); return from_abi(value); }
			ptr<Foundation::IReference<bool>> operator()() { return get(); }
			operator ptr<Foundation::IReference<bool>> () { return get(); }
			ptr<Foundation::IReference<bool>> operator->() { return get(); }
		} IsLocked;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportSource_adaptor::IsMassStorage)->_get_IsMassStorage(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsMassStorage;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSource_adaptor::Manufacturer)->_get_Manufacturer(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Manufacturer;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSource_adaptor::Model)->_get_Model(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Model;
		struct : property {
			PhotoImportPowerSource get() { PhotoImportPowerSource value; hrcheck(enc(&IPhotoImportSource_adaptor::PowerSource)->_get_PowerSource(&value)); return value; }
			PhotoImportPowerSource operator()() { return get(); }
			operator PhotoImportPowerSource () { return get(); }
		} PowerSource;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSource_adaptor::SerialNumber)->_get_SerialNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SerialNumber;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportStorageMedium>>> get() { Foundation::Collections::IVectorView<PhotoImportStorageMedium*>* value; hrcheck(enc(&IPhotoImportSource_adaptor::StorageMedia)->_get_StorageMedia(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportStorageMedium>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PhotoImportStorageMedium>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportStorageMedium>>> operator->() { return get(); }
		} StorageMedia;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IPhotoImportSource_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} Thumbnail;
		struct : property {
			PhotoImportSourceType get() { PhotoImportSourceType value; hrcheck(enc(&IPhotoImportSource_adaptor::Type)->_get_Type(&value)); return value; }
			PhotoImportSourceType operator()() { return get(); }
			operator PhotoImportSourceType () { return get(); }
		} Type;
	};
	ptr<PhotoImportSession> CreateImportSession() { PhotoImportSession* result; hrcheck(X::get()->_CreateImportSession(&result)); return from_abi(result); }
	IPhotoImportSource_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportSource, X> : Windows::Media::Import::IPhotoImportSource_adaptor<X> { typedef adapt IPhotoImportSource; };
struct IPhotoImportSource : IPhotoImportSource_raw, generate<IPhotoImportSource> {};

// PhotoImportSource
template<typename> struct PhotoImportSource_statics {
	static ptr<Foundation::IAsyncOperation<ptr<PhotoImportSource>>> FromIdAsync(hstring_ref sourceId) { Foundation::IAsyncOperation<PhotoImportSource*>* operation; hrcheck(get_activation_factory<PhotoImportSource, IPhotoImportSourceStatics>()->_FromIdAsync(sourceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<PhotoImportSource>>> FromFolderAsync(pptr<Storage::IStorageFolder> sourceRootFolder) { Foundation::IAsyncOperation<PhotoImportSource*>* operation; hrcheck(get_activation_factory<PhotoImportSource, IPhotoImportSourceStatics>()->_FromFolderAsync(sourceRootFolder, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<PhotoImportSource, X> : X, Windows::Media::Import::PhotoImportSource_statics<void> {
	typedef typename X::root_type PhotoImportSource;
};
struct PhotoImportSource : generate<PhotoImportSource> {};

// IPhotoImportOperation
struct IPhotoImportOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_Stage(PhotoImportStage *value);
	virtual STDMETHODIMP _get_Session(PhotoImportSession* *value);
	virtual STDMETHODIMP _get_ContinueFindingItemsAsync(Foundation::IAsyncOperationWithProgress<PhotoImportFindItemsResult*, unsigned>* *operation);
	virtual STDMETHODIMP _get_ContinueImportingItemsAsync(Foundation::IAsyncOperationWithProgress<PhotoImportImportItemsResult*, PhotoImportProgress>* *operation);
	virtual STDMETHODIMP _get_ContinueDeletingImportedItemsFromSourceAsync(Foundation::IAsyncOperationWithProgress<PhotoImportDeleteImportedItemsFromSourceResult*, double>* *operation);
};
template<typename X> struct IPhotoImportOperation_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportDeleteImportedItemsFromSourceResult>, double>> get() { Foundation::IAsyncOperationWithProgress<PhotoImportDeleteImportedItemsFromSourceResult*, double>* operation; hrcheck(enc(&IPhotoImportOperation_adaptor::ContinueDeletingImportedItemsFromSourceAsync)->_get_ContinueDeletingImportedItemsFromSourceAsync(&operation)); return from_abi(operation); }
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportDeleteImportedItemsFromSourceResult>, double>> operator()() { return get(); }
			operator ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportDeleteImportedItemsFromSourceResult>, double>> () { return get(); }
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportDeleteImportedItemsFromSourceResult>, double>> operator->() { return get(); }
		} ContinueDeletingImportedItemsFromSourceAsync;
		struct : property {
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportFindItemsResult>, unsigned>> get() { Foundation::IAsyncOperationWithProgress<PhotoImportFindItemsResult*, unsigned>* operation; hrcheck(enc(&IPhotoImportOperation_adaptor::ContinueFindingItemsAsync)->_get_ContinueFindingItemsAsync(&operation)); return from_abi(operation); }
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportFindItemsResult>, unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportFindItemsResult>, unsigned>> () { return get(); }
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportFindItemsResult>, unsigned>> operator->() { return get(); }
		} ContinueFindingItemsAsync;
		struct : property {
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportImportItemsResult>, PhotoImportProgress>> get() { Foundation::IAsyncOperationWithProgress<PhotoImportImportItemsResult*, PhotoImportProgress>* operation; hrcheck(enc(&IPhotoImportOperation_adaptor::ContinueImportingItemsAsync)->_get_ContinueImportingItemsAsync(&operation)); return from_abi(operation); }
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportImportItemsResult>, PhotoImportProgress>> operator()() { return get(); }
			operator ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportImportItemsResult>, PhotoImportProgress>> () { return get(); }
			ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportImportItemsResult>, PhotoImportProgress>> operator->() { return get(); }
		} ContinueImportingItemsAsync;
		struct : property {
			ptr<PhotoImportSession> get() { PhotoImportSession* value; hrcheck(enc(&IPhotoImportOperation_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<PhotoImportSession> operator()() { return get(); }
			operator ptr<PhotoImportSession> () { return get(); }
			ptr<PhotoImportSession> operator->() { return get(); }
		} Session;
		struct : property {
			PhotoImportStage get() { PhotoImportStage value; hrcheck(enc(&IPhotoImportOperation_adaptor::Stage)->_get_Stage(&value)); return value; }
			PhotoImportStage operator()() { return get(); }
			operator PhotoImportStage () { return get(); }
		} Stage;
	};
	IPhotoImportOperation_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportOperation, X> : Windows::Media::Import::IPhotoImportOperation_adaptor<X> { typedef adapt IPhotoImportOperation; };
struct IPhotoImportOperation : IPhotoImportOperation_raw, generate<IPhotoImportOperation> {};

// PhotoImportOperation
template<typename X> struct statics<PhotoImportOperation, X> : X {
	typedef typename X::root_type PhotoImportOperation;
};
struct PhotoImportOperation : generate<PhotoImportOperation> {};

// PhotoImportManager
template<typename> struct PhotoImportManager_statics {
	static ptr<Foundation::IAsyncOperation<bool>> IsSupportedAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<PhotoImportManager, IPhotoImportManagerStatics>()->_IsSupportedAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSource>>>>> FindAllSourcesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PhotoImportSource*>*>* operation; hrcheck(get_activation_factory<PhotoImportManager, IPhotoImportManagerStatics>()->_FindAllSourcesAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::Collections::IVectorView<ptr<PhotoImportOperation>>> GetPendingOperations() { Foundation::Collections::IVectorView<PhotoImportOperation*>* result; hrcheck(get_activation_factory<PhotoImportManager, IPhotoImportManagerStatics>()->_GetPendingOperations(&result)); return from_abi(result); }
};

template<typename X> struct statics<PhotoImportManager, X> : X, Windows::Media::Import::PhotoImportManager_statics<void> {
	typedef typename X::root_type PhotoImportManager;
};
struct PhotoImportManager : generate<PhotoImportManager> {};

// IPhotoImportSession2
struct IPhotoImportSession2_raw : IInspectable {
	virtual STDMETHODIMP _put_SubfolderDateFormat(PhotoImportSubfolderDateFormat value);
	virtual STDMETHODIMP _get_SubfolderDateFormat(PhotoImportSubfolderDateFormat *value);
	virtual STDMETHODIMP _put_RememberDeselectedItems(bool value);
	virtual STDMETHODIMP _get_RememberDeselectedItems(bool *value);
};
template<typename X> struct IPhotoImportSession2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportSession2_adaptor::RememberDeselectedItems)->_get_RememberDeselectedItems(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhotoImportSession2_adaptor::RememberDeselectedItems)->_put_RememberDeselectedItems(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} RememberDeselectedItems;
		struct : property {
			PhotoImportSubfolderDateFormat get() { PhotoImportSubfolderDateFormat value; hrcheck(enc(&IPhotoImportSession2_adaptor::SubfolderDateFormat)->_get_SubfolderDateFormat(&value)); return value; }
			PhotoImportSubfolderDateFormat operator()() { return get(); }
			operator PhotoImportSubfolderDateFormat () { return get(); }
			void put(PhotoImportSubfolderDateFormat value) { hrcheck(enc(&IPhotoImportSession2_adaptor::SubfolderDateFormat)->_put_SubfolderDateFormat(value)); }
			void operator=(PhotoImportSubfolderDateFormat value) { put(value); }
			void operator()(PhotoImportSubfolderDateFormat value) { put(value); }
		} SubfolderDateFormat;
	};
	IPhotoImportSession2_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportSession2, X> : Windows::Media::Import::IPhotoImportSession2_adaptor<X> { typedef adapt IPhotoImportSession2; };
struct IPhotoImportSession2 : IPhotoImportSession2_raw, generate<IPhotoImportSession2> {};

// IPhotoImportSession
struct IPhotoImportSession_raw : IInspectable {
	virtual STDMETHODIMP _get_Source(PhotoImportSource* *value);
	virtual STDMETHODIMP _get_SessionId(Platform::Guid *value);
	virtual STDMETHODIMP _put_DestinationFolder(Storage::IStorageFolder* value);
	virtual STDMETHODIMP _get_DestinationFolder(Storage::IStorageFolder* *value);
	virtual STDMETHODIMP _put_AppendSessionDateToDestinationFolder(bool value);
	virtual STDMETHODIMP _get_AppendSessionDateToDestinationFolder(bool *value);
	virtual STDMETHODIMP _put_SubfolderCreationMode(PhotoImportSubfolderCreationMode value);
	virtual STDMETHODIMP _get_SubfolderCreationMode(PhotoImportSubfolderCreationMode *value);
	virtual STDMETHODIMP _put_DestinationFileNamePrefix(HSTRING value);
	virtual STDMETHODIMP _get_DestinationFileNamePrefix(HSTRING *value);
	virtual STDMETHODIMP _FindItemsAsync(PhotoImportContentTypeFilter contentTypeFilter, PhotoImportItemSelectionMode itemSelectionMode, Foundation::IAsyncOperationWithProgress<PhotoImportFindItemsResult*, unsigned>* *operation);
};
template<typename X> struct IPhotoImportSession_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportSession_adaptor::AppendSessionDateToDestinationFolder)->_get_AppendSessionDateToDestinationFolder(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhotoImportSession_adaptor::AppendSessionDateToDestinationFolder)->_put_AppendSessionDateToDestinationFolder(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AppendSessionDateToDestinationFolder;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSession_adaptor::DestinationFileNamePrefix)->_get_DestinationFileNamePrefix(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IPhotoImportSession_adaptor::DestinationFileNamePrefix)->_put_DestinationFileNamePrefix(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DestinationFileNamePrefix;
		struct : property {
			ptr<Storage::IStorageFolder> get() { Storage::IStorageFolder* value; hrcheck(enc(&IPhotoImportSession_adaptor::DestinationFolder)->_get_DestinationFolder(&value)); return from_abi(value); }
			ptr<Storage::IStorageFolder> operator()() { return get(); }
			operator ptr<Storage::IStorageFolder> () { return get(); }
			ptr<Storage::IStorageFolder> operator->() { return get(); }
			void put(pptr<Storage::IStorageFolder> value) { hrcheck(enc(&IPhotoImportSession_adaptor::DestinationFolder)->_put_DestinationFolder(value)); }
			void operator=(pptr<Storage::IStorageFolder> value) { put(value); }
			void operator()(pptr<Storage::IStorageFolder> value) { put(value); }
		} DestinationFolder;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IPhotoImportSession_adaptor::SessionId)->_get_SessionId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} SessionId;
		struct : property {
			ptr<PhotoImportSource> get() { PhotoImportSource* value; hrcheck(enc(&IPhotoImportSession_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<PhotoImportSource> operator()() { return get(); }
			operator ptr<PhotoImportSource> () { return get(); }
			ptr<PhotoImportSource> operator->() { return get(); }
		} Source;
		struct : property {
			PhotoImportSubfolderCreationMode get() { PhotoImportSubfolderCreationMode value; hrcheck(enc(&IPhotoImportSession_adaptor::SubfolderCreationMode)->_get_SubfolderCreationMode(&value)); return value; }
			PhotoImportSubfolderCreationMode operator()() { return get(); }
			operator PhotoImportSubfolderCreationMode () { return get(); }
			void put(PhotoImportSubfolderCreationMode value) { hrcheck(enc(&IPhotoImportSession_adaptor::SubfolderCreationMode)->_put_SubfolderCreationMode(value)); }
			void operator=(PhotoImportSubfolderCreationMode value) { put(value); }
			void operator()(PhotoImportSubfolderCreationMode value) { put(value); }
		} SubfolderCreationMode;
	};
	ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportFindItemsResult>, unsigned>> FindItemsAsync(PhotoImportContentTypeFilter contentTypeFilter, PhotoImportItemSelectionMode itemSelectionMode) { Foundation::IAsyncOperationWithProgress<PhotoImportFindItemsResult*, unsigned>* operation; hrcheck(X::get()->_FindItemsAsync(contentTypeFilter, itemSelectionMode, &operation)); return from_abi(operation); }
	IPhotoImportSession_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportSession, X> : Windows::Media::Import::IPhotoImportSession_adaptor<X> { typedef adapt IPhotoImportSession; };
struct IPhotoImportSession : IPhotoImportSession_raw, generate<IPhotoImportSession> {};

// PhotoImportSession
template<typename X> struct statics<PhotoImportSession, X> : X {
	typedef typename X::root_type PhotoImportSession;
};
struct PhotoImportSession : generate<PhotoImportSession> {};

// IPhotoImportFindItemsResult2
struct IPhotoImportFindItemsResult2_raw : IInspectable {
	virtual STDMETHODIMP _AddItemsInDateRangeToSelection(Foundation::DateTime rangeStart, Foundation::TimeSpan rangeLength);
};
template<typename X> struct IPhotoImportFindItemsResult2_adaptor : X {
	void AddItemsInDateRangeToSelection(const Foundation::DateTime& rangeStart, const Foundation::TimeSpan& rangeLength) { hrcheck(X::get()->_AddItemsInDateRangeToSelection(rangeStart, rangeLength)); }
};
template<typename X> struct adapt<IPhotoImportFindItemsResult2, X> : Windows::Media::Import::IPhotoImportFindItemsResult2_adaptor<X> { typedef adapt IPhotoImportFindItemsResult2; };
struct IPhotoImportFindItemsResult2 : IPhotoImportFindItemsResult2_raw, generate<IPhotoImportFindItemsResult2> {};

// IPhotoImportFindItemsResult
struct IPhotoImportFindItemsResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Session(PhotoImportSession* *value);
	virtual STDMETHODIMP _get_HasSucceeded(bool *value);
	virtual STDMETHODIMP _get_FoundItems(Foundation::Collections::IVectorView<PhotoImportItem*>* *value);
	virtual STDMETHODIMP _get_PhotosCount(unsigned *value);
	virtual STDMETHODIMP _get_PhotosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_VideosCount(unsigned *value);
	virtual STDMETHODIMP _get_VideosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SidecarsCount(unsigned *value);
	virtual STDMETHODIMP _get_SidecarsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SiblingsCount(unsigned *value);
	virtual STDMETHODIMP _get_SiblingsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_TotalCount(unsigned *value);
	virtual STDMETHODIMP _get_TotalSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _SelectAll();
	virtual STDMETHODIMP _SelectNone();
	virtual STDMETHODIMP _SelectNewAsync(Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _SetImportMode(PhotoImportImportMode value);
	virtual STDMETHODIMP _get_ImportMode(PhotoImportImportMode *value);
	virtual STDMETHODIMP _get_SelectedPhotosCount(unsigned *value);
	virtual STDMETHODIMP _get_SelectedPhotosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SelectedVideosCount(unsigned *value);
	virtual STDMETHODIMP _get_SelectedVideosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SelectedSidecarsCount(unsigned *value);
	virtual STDMETHODIMP _get_SelectedSidecarsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SelectedSiblingsCount(unsigned *value);
	virtual STDMETHODIMP _get_SelectedSiblingsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SelectedTotalCount(unsigned *value);
	virtual STDMETHODIMP _get_SelectedTotalSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _add_SelectionChanged(Foundation::TypedEventHandler<PhotoImportFindItemsResult*, PhotoImportSelectionChangedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SelectionChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _ImportItemsAsync(Foundation::IAsyncOperationWithProgress<PhotoImportImportItemsResult*, PhotoImportProgress>* *operation);
	virtual STDMETHODIMP _add_ItemImported(Foundation::TypedEventHandler<PhotoImportFindItemsResult*, PhotoImportItemImportedEventArgs*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ItemImported(Foundation::EventRegistrationToken token);
};
template<typename X> struct IPhotoImportFindItemsResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> get() { Foundation::Collections::IVectorView<PhotoImportItem*>* value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::FoundItems)->_get_FoundItems(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> operator->() { return get(); }
		} FoundItems;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::HasSucceeded)->_get_HasSucceeded(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasSucceeded;
		struct : property {
			PhotoImportImportMode get() { PhotoImportImportMode value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::ImportMode)->_get_ImportMode(&value)); return value; }
			PhotoImportImportMode operator()() { return get(); }
			operator PhotoImportImportMode () { return get(); }
		} ImportMode;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::PhotosCount)->_get_PhotosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PhotosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::PhotosSizeInBytes)->_get_PhotosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PhotosSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedPhotosCount)->_get_SelectedPhotosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SelectedPhotosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedPhotosSizeInBytes)->_get_SelectedPhotosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SelectedPhotosSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedSiblingsCount)->_get_SelectedSiblingsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SelectedSiblingsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedSiblingsSizeInBytes)->_get_SelectedSiblingsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SelectedSiblingsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedSidecarsCount)->_get_SelectedSidecarsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SelectedSidecarsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedSidecarsSizeInBytes)->_get_SelectedSidecarsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SelectedSidecarsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedTotalCount)->_get_SelectedTotalCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SelectedTotalCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedTotalSizeInBytes)->_get_SelectedTotalSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SelectedTotalSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedVideosCount)->_get_SelectedVideosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SelectedVideosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectedVideosSizeInBytes)->_get_SelectedVideosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SelectedVideosSizeInBytes;
		struct : property {
			ptr<PhotoImportSession> get() { PhotoImportSession* value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<PhotoImportSession> operator()() { return get(); }
			operator ptr<PhotoImportSession> () { return get(); }
			ptr<PhotoImportSession> operator->() { return get(); }
		} Session;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SiblingsCount)->_get_SiblingsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SiblingsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SiblingsSizeInBytes)->_get_SiblingsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SiblingsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SidecarsCount)->_get_SidecarsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SidecarsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SidecarsSizeInBytes)->_get_SidecarsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SidecarsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::TotalCount)->_get_TotalCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} TotalCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::TotalSizeInBytes)->_get_TotalSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} TotalSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::VideosCount)->_get_VideosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::VideosSizeInBytes)->_get_VideosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} VideosSizeInBytes;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhotoImportFindItemsResult>, ptr<PhotoImportItemImportedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::ItemImported)->_add_ItemImported(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::ItemImported)->_remove_ItemImported(token)); }
		} ItemImported;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PhotoImportFindItemsResult>, ptr<PhotoImportSelectionChangedEventArgs>>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectionChanged)->_add_SelectionChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPhotoImportFindItemsResult_adaptor::SelectionChanged)->_remove_SelectionChanged(token)); }
		} SelectionChanged;
	};
	void SelectAll() { hrcheck(X::get()->_SelectAll()); }
	void SelectNone() { hrcheck(X::get()->_SelectNone()); }
	ptr<Foundation::IAsyncAction> SelectNewAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_SelectNewAsync(&action)); return from_abi(action); }
	void SetImportMode(PhotoImportImportMode value) { hrcheck(X::get()->_SetImportMode(value)); }
	ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportImportItemsResult>, PhotoImportProgress>> ImportItemsAsync() { Foundation::IAsyncOperationWithProgress<PhotoImportImportItemsResult*, PhotoImportProgress>* operation; hrcheck(X::get()->_ImportItemsAsync(&operation)); return from_abi(operation); }
	IPhotoImportFindItemsResult_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportFindItemsResult, X> : Windows::Media::Import::IPhotoImportFindItemsResult_adaptor<X> { typedef adapt IPhotoImportFindItemsResult; };
struct IPhotoImportFindItemsResult : IPhotoImportFindItemsResult_raw, generate<IPhotoImportFindItemsResult> {};

// PhotoImportFindItemsResult
template<typename X> struct statics<PhotoImportFindItemsResult, X> : X {
	typedef typename X::root_type PhotoImportFindItemsResult;
};
struct PhotoImportFindItemsResult : generate<PhotoImportFindItemsResult> {};

// IPhotoImportImportItemsResult
struct IPhotoImportImportItemsResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Session(PhotoImportSession* *value);
	virtual STDMETHODIMP _get_HasSucceeded(bool *value);
	virtual STDMETHODIMP _get_ImportedItems(Foundation::Collections::IVectorView<PhotoImportItem*>* *value);
	virtual STDMETHODIMP _get_PhotosCount(unsigned *value);
	virtual STDMETHODIMP _get_PhotosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_VideosCount(unsigned *value);
	virtual STDMETHODIMP _get_VideosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SidecarsCount(unsigned *value);
	virtual STDMETHODIMP _get_SidecarsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SiblingsCount(unsigned *value);
	virtual STDMETHODIMP _get_SiblingsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_TotalCount(unsigned *value);
	virtual STDMETHODIMP _get_TotalSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _DeleteImportedItemsFromSourceAsync(Foundation::IAsyncOperationWithProgress<PhotoImportDeleteImportedItemsFromSourceResult*, double>* *result);
};
template<typename X> struct IPhotoImportImportItemsResult_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::HasSucceeded)->_get_HasSucceeded(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasSucceeded;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> get() { Foundation::Collections::IVectorView<PhotoImportItem*>* value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::ImportedItems)->_get_ImportedItems(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> operator->() { return get(); }
		} ImportedItems;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::PhotosCount)->_get_PhotosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PhotosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::PhotosSizeInBytes)->_get_PhotosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PhotosSizeInBytes;
		struct : property {
			ptr<PhotoImportSession> get() { PhotoImportSession* value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<PhotoImportSession> operator()() { return get(); }
			operator ptr<PhotoImportSession> () { return get(); }
			ptr<PhotoImportSession> operator->() { return get(); }
		} Session;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::SiblingsCount)->_get_SiblingsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SiblingsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::SiblingsSizeInBytes)->_get_SiblingsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SiblingsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::SidecarsCount)->_get_SidecarsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SidecarsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::SidecarsSizeInBytes)->_get_SidecarsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SidecarsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::TotalCount)->_get_TotalCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} TotalCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::TotalSizeInBytes)->_get_TotalSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} TotalSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::VideosCount)->_get_VideosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportImportItemsResult_adaptor::VideosSizeInBytes)->_get_VideosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} VideosSizeInBytes;
	};
	ptr<Foundation::IAsyncOperationWithProgress<ptr<PhotoImportDeleteImportedItemsFromSourceResult>, double>> DeleteImportedItemsFromSourceAsync() { Foundation::IAsyncOperationWithProgress<PhotoImportDeleteImportedItemsFromSourceResult*, double>* result; hrcheck(X::get()->_DeleteImportedItemsFromSourceAsync(&result)); return from_abi(result); }
	IPhotoImportImportItemsResult_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportImportItemsResult, X> : Windows::Media::Import::IPhotoImportImportItemsResult_adaptor<X> { typedef adapt IPhotoImportImportItemsResult; };
struct IPhotoImportImportItemsResult : IPhotoImportImportItemsResult_raw, generate<IPhotoImportImportItemsResult> {};

// PhotoImportImportItemsResult
template<typename X> struct statics<PhotoImportImportItemsResult, X> : X {
	typedef typename X::root_type PhotoImportImportItemsResult;
};
struct PhotoImportImportItemsResult : generate<PhotoImportImportItemsResult> {};

// IPhotoImportDeleteImportedItemsFromSourceResult
struct IPhotoImportDeleteImportedItemsFromSourceResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Session(PhotoImportSession* *value);
	virtual STDMETHODIMP _get_HasSucceeded(bool *value);
	virtual STDMETHODIMP _get_DeletedItems(Foundation::Collections::IVectorView<PhotoImportItem*>* *value);
	virtual STDMETHODIMP _get_PhotosCount(unsigned *value);
	virtual STDMETHODIMP _get_PhotosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_VideosCount(unsigned *value);
	virtual STDMETHODIMP _get_VideosSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SidecarsCount(unsigned *value);
	virtual STDMETHODIMP _get_SidecarsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_SiblingsCount(unsigned *value);
	virtual STDMETHODIMP _get_SiblingsSizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_TotalCount(unsigned *value);
	virtual STDMETHODIMP _get_TotalSizeInBytes(unsigned __int64 *value);
};
template<typename X> struct IPhotoImportDeleteImportedItemsFromSourceResult_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> get() { Foundation::Collections::IVectorView<PhotoImportItem*>* value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::DeletedItems)->_get_DeletedItems(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportItem>>> operator->() { return get(); }
		} DeletedItems;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::HasSucceeded)->_get_HasSucceeded(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasSucceeded;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::PhotosCount)->_get_PhotosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PhotosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::PhotosSizeInBytes)->_get_PhotosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} PhotosSizeInBytes;
		struct : property {
			ptr<PhotoImportSession> get() { PhotoImportSession* value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<PhotoImportSession> operator()() { return get(); }
			operator ptr<PhotoImportSession> () { return get(); }
			ptr<PhotoImportSession> operator->() { return get(); }
		} Session;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::SiblingsCount)->_get_SiblingsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SiblingsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::SiblingsSizeInBytes)->_get_SiblingsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SiblingsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::SidecarsCount)->_get_SidecarsCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SidecarsCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::SidecarsSizeInBytes)->_get_SidecarsSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SidecarsSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::TotalCount)->_get_TotalCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} TotalCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::TotalSizeInBytes)->_get_TotalSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} TotalSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::VideosCount)->_get_VideosCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} VideosCount;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportDeleteImportedItemsFromSourceResult_adaptor::VideosSizeInBytes)->_get_VideosSizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} VideosSizeInBytes;
	};
	IPhotoImportDeleteImportedItemsFromSourceResult_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportDeleteImportedItemsFromSourceResult, X> : Windows::Media::Import::IPhotoImportDeleteImportedItemsFromSourceResult_adaptor<X> { typedef adapt IPhotoImportDeleteImportedItemsFromSourceResult; };
struct IPhotoImportDeleteImportedItemsFromSourceResult : IPhotoImportDeleteImportedItemsFromSourceResult_raw, generate<IPhotoImportDeleteImportedItemsFromSourceResult> {};

// PhotoImportDeleteImportedItemsFromSourceResult
template<typename X> struct statics<PhotoImportDeleteImportedItemsFromSourceResult, X> : X {
	typedef typename X::root_type PhotoImportDeleteImportedItemsFromSourceResult;
};
struct PhotoImportDeleteImportedItemsFromSourceResult : generate<PhotoImportDeleteImportedItemsFromSourceResult> {};

// IPhotoImportStorageMedium
struct IPhotoImportStorageMedium_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_SerialNumber(HSTRING *value);
	virtual STDMETHODIMP _get_StorageMediumType(PhotoImportStorageMediumType *value);
	virtual STDMETHODIMP _get_SupportedAccessMode(PhotoImportAccessMode *value);
	virtual STDMETHODIMP _get_CapacityInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_AvailableSpaceInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _Refresh();
};
template<typename X> struct IPhotoImportStorageMedium_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportStorageMedium_adaptor::AvailableSpaceInBytes)->_get_AvailableSpaceInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} AvailableSpaceInBytes;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportStorageMedium_adaptor::CapacityInBytes)->_get_CapacityInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} CapacityInBytes;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportStorageMedium_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportStorageMedium_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportStorageMedium_adaptor::SerialNumber)->_get_SerialNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SerialNumber;
		struct : property {
			PhotoImportStorageMediumType get() { PhotoImportStorageMediumType value; hrcheck(enc(&IPhotoImportStorageMedium_adaptor::StorageMediumType)->_get_StorageMediumType(&value)); return value; }
			PhotoImportStorageMediumType operator()() { return get(); }
			operator PhotoImportStorageMediumType () { return get(); }
		} StorageMediumType;
		struct : property {
			PhotoImportAccessMode get() { PhotoImportAccessMode value; hrcheck(enc(&IPhotoImportStorageMedium_adaptor::SupportedAccessMode)->_get_SupportedAccessMode(&value)); return value; }
			PhotoImportAccessMode operator()() { return get(); }
			operator PhotoImportAccessMode () { return get(); }
		} SupportedAccessMode;
	};
	void Refresh() { hrcheck(X::get()->_Refresh()); }
	IPhotoImportStorageMedium_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportStorageMedium, X> : Windows::Media::Import::IPhotoImportStorageMedium_adaptor<X> { typedef adapt IPhotoImportStorageMedium; };
struct IPhotoImportStorageMedium : IPhotoImportStorageMedium_raw, generate<IPhotoImportStorageMedium> {};

// PhotoImportStorageMedium
template<typename X> struct statics<PhotoImportStorageMedium, X> : X {
	typedef typename X::root_type PhotoImportStorageMedium;
};
struct PhotoImportStorageMedium : generate<PhotoImportStorageMedium> {};

// IPhotoImportItem
struct IPhotoImportItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_ItemKey(unsigned __int64 *value);
	virtual STDMETHODIMP _get_ContentType(PhotoImportContentType *value);
	virtual STDMETHODIMP _get_SizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_Date(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Sibling(PhotoImportSidecar* *value);
	virtual STDMETHODIMP _get_Sidecars(Foundation::Collections::IVectorView<PhotoImportSidecar*>* *value);
	virtual STDMETHODIMP _get_VideoSegments(Foundation::Collections::IVectorView<PhotoImportVideoSegment*>* *value);
	virtual STDMETHODIMP _get_IsSelected(bool *value);
	virtual STDMETHODIMP _put_IsSelected(bool value);
	virtual STDMETHODIMP _get_Thumbnail(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_ImportedFileNames(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_DeletedFileNames(Foundation::Collections::IVectorView<HSTRING>* *value);
};
template<typename X> struct IPhotoImportItem_adaptor : X {
	union {
		struct : property {
			PhotoImportContentType get() { PhotoImportContentType value; hrcheck(enc(&IPhotoImportItem_adaptor::ContentType)->_get_ContentType(&value)); return value; }
			PhotoImportContentType operator()() { return get(); }
			operator PhotoImportContentType () { return get(); }
		} ContentType;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPhotoImportItem_adaptor::Date)->_get_Date(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Date;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPhotoImportItem_adaptor::DeletedFileNames)->_get_DeletedFileNames(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} DeletedFileNames;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPhotoImportItem_adaptor::ImportedFileNames)->_get_ImportedFileNames(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} ImportedFileNames;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportItem_adaptor::IsSelected)->_get_IsSelected(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPhotoImportItem_adaptor::IsSelected)->_put_IsSelected(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsSelected;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportItem_adaptor::ItemKey)->_get_ItemKey(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} ItemKey;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportItem_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<PhotoImportSidecar> get() { PhotoImportSidecar* value; hrcheck(enc(&IPhotoImportItem_adaptor::Sibling)->_get_Sibling(&value)); return from_abi(value); }
			ptr<PhotoImportSidecar> operator()() { return get(); }
			operator ptr<PhotoImportSidecar> () { return get(); }
			ptr<PhotoImportSidecar> operator->() { return get(); }
		} Sibling;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> get() { Foundation::Collections::IVectorView<PhotoImportSidecar*>* value; hrcheck(enc(&IPhotoImportItem_adaptor::Sidecars)->_get_Sidecars(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> operator->() { return get(); }
		} Sidecars;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportItem_adaptor::SizeInBytes)->_get_SizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SizeInBytes;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IPhotoImportItem_adaptor::Thumbnail)->_get_Thumbnail(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} Thumbnail;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportVideoSegment>>> get() { Foundation::Collections::IVectorView<PhotoImportVideoSegment*>* value; hrcheck(enc(&IPhotoImportItem_adaptor::VideoSegments)->_get_VideoSegments(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportVideoSegment>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PhotoImportVideoSegment>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportVideoSegment>>> operator->() { return get(); }
		} VideoSegments;
	};
	IPhotoImportItem_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportItem, X> : Windows::Media::Import::IPhotoImportItem_adaptor<X> { typedef adapt IPhotoImportItem; };
struct IPhotoImportItem : IPhotoImportItem_raw, generate<IPhotoImportItem> {};

// IPhotoImportSidecar
struct IPhotoImportSidecar_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_SizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_Date(Foundation::DateTime *value);
};
template<typename X> struct IPhotoImportSidecar_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPhotoImportSidecar_adaptor::Date)->_get_Date(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Date;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportSidecar_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportSidecar_adaptor::SizeInBytes)->_get_SizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SizeInBytes;
	};
	IPhotoImportSidecar_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportSidecar, X> : Windows::Media::Import::IPhotoImportSidecar_adaptor<X> { typedef adapt IPhotoImportSidecar; };
struct IPhotoImportSidecar : IPhotoImportSidecar_raw, generate<IPhotoImportSidecar> {};

// PhotoImportSidecar
template<typename X> struct statics<PhotoImportSidecar, X> : X {
	typedef typename X::root_type PhotoImportSidecar;
};
struct PhotoImportSidecar : generate<PhotoImportSidecar> {};

// IPhotoImportVideoSegment
struct IPhotoImportVideoSegment_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_SizeInBytes(unsigned __int64 *value);
	virtual STDMETHODIMP _get_Date(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Sibling(PhotoImportSidecar* *value);
	virtual STDMETHODIMP _get_Sidecars(Foundation::Collections::IVectorView<PhotoImportSidecar*>* *value);
};
template<typename X> struct IPhotoImportVideoSegment_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPhotoImportVideoSegment_adaptor::Date)->_get_Date(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Date;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPhotoImportVideoSegment_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<PhotoImportSidecar> get() { PhotoImportSidecar* value; hrcheck(enc(&IPhotoImportVideoSegment_adaptor::Sibling)->_get_Sibling(&value)); return from_abi(value); }
			ptr<PhotoImportSidecar> operator()() { return get(); }
			operator ptr<PhotoImportSidecar> () { return get(); }
			ptr<PhotoImportSidecar> operator->() { return get(); }
		} Sibling;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> get() { Foundation::Collections::IVectorView<PhotoImportSidecar*>* value; hrcheck(enc(&IPhotoImportVideoSegment_adaptor::Sidecars)->_get_Sidecars(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PhotoImportSidecar>>> operator->() { return get(); }
		} Sidecars;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IPhotoImportVideoSegment_adaptor::SizeInBytes)->_get_SizeInBytes(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} SizeInBytes;
	};
	IPhotoImportVideoSegment_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportVideoSegment, X> : Windows::Media::Import::IPhotoImportVideoSegment_adaptor<X> { typedef adapt IPhotoImportVideoSegment; };
struct IPhotoImportVideoSegment : IPhotoImportVideoSegment_raw, generate<IPhotoImportVideoSegment> {};

// PhotoImportVideoSegment
template<typename X> struct statics<PhotoImportVideoSegment, X> : X {
	typedef typename X::root_type PhotoImportVideoSegment;
};
struct PhotoImportVideoSegment : generate<PhotoImportVideoSegment> {};

// PhotoImportItem
template<typename X> struct statics<PhotoImportItem, X> : X {
	typedef typename X::root_type PhotoImportItem;
};
struct PhotoImportItem : generate<PhotoImportItem> {};

// IPhotoImportSelectionChangedEventArgs
struct IPhotoImportSelectionChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSelectionEmpty(bool *value);
};
template<typename X> struct IPhotoImportSelectionChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhotoImportSelectionChangedEventArgs_adaptor::IsSelectionEmpty)->_get_IsSelectionEmpty(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSelectionEmpty;
	};
	IPhotoImportSelectionChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportSelectionChangedEventArgs, X> : Windows::Media::Import::IPhotoImportSelectionChangedEventArgs_adaptor<X> { typedef adapt IPhotoImportSelectionChangedEventArgs; };
struct IPhotoImportSelectionChangedEventArgs : IPhotoImportSelectionChangedEventArgs_raw, generate<IPhotoImportSelectionChangedEventArgs> {};

// PhotoImportSelectionChangedEventArgs
template<typename X> struct statics<PhotoImportSelectionChangedEventArgs, X> : X {
	typedef typename X::root_type PhotoImportSelectionChangedEventArgs;
};
struct PhotoImportSelectionChangedEventArgs : generate<PhotoImportSelectionChangedEventArgs> {};

// IPhotoImportItemImportedEventArgs
struct IPhotoImportItemImportedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ImportedItem(PhotoImportItem* *value);
};
template<typename X> struct IPhotoImportItemImportedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PhotoImportItem> get() { PhotoImportItem* value; hrcheck(enc(&IPhotoImportItemImportedEventArgs_adaptor::ImportedItem)->_get_ImportedItem(&value)); return from_abi(value); }
			ptr<PhotoImportItem> operator()() { return get(); }
			operator ptr<PhotoImportItem> () { return get(); }
			ptr<PhotoImportItem> operator->() { return get(); }
		} ImportedItem;
	};
	IPhotoImportItemImportedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPhotoImportItemImportedEventArgs, X> : Windows::Media::Import::IPhotoImportItemImportedEventArgs_adaptor<X> { typedef adapt IPhotoImportItemImportedEventArgs; };
struct IPhotoImportItemImportedEventArgs : IPhotoImportItemImportedEventArgs_raw, generate<IPhotoImportItemImportedEventArgs> {};

// PhotoImportItemImportedEventArgs
template<typename X> struct statics<PhotoImportItemImportedEventArgs, X> : X {
	typedef typename X::root_type PhotoImportItemImportedEventArgs;
};
struct PhotoImportItemImportedEventArgs : generate<PhotoImportItemImportedEventArgs> {};
}}}
} // namespace iso_winrt
