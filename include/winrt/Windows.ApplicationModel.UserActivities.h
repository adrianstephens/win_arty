#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.UserActivities

#include "Windows.ApplicationModel.UserActivities.0.h"
#include "Windows.UI.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IIterable;
}}
namespace Security { namespace Credentials {
struct WebAccount;
}}
namespace UI { namespace Shell {
struct IAdaptiveCard;
}}}

// defs

template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityAttributionFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityAttribution> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityAttribution> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivityAttribution>, custom_activators {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityContentInfo> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityContentInfoStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityContentInfo> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivityContentInfo> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityVisualElements> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityVisualElements2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityVisualElements> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivityVisualElements, Windows::ApplicationModel::UserActivities::IUserActivityVisualElements2> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivitySession> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivitySession> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivitySession> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivity> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivity2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivity> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivity, Windows::ApplicationModel::UserActivities::IUserActivity2>, custom_activators {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityChannelStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityChannelStatics2> : interface_type<Windows::ApplicationModel::UserActivities::IUserActivityChannelStatics> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityChannel2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityChannel> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityChannel> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivityChannel, Windows::ApplicationModel::UserActivities::IUserActivityChannel2> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivitySessionHistoryItem> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivitySessionHistoryItem> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivitySessionHistoryItem> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityRequest> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivityRequest> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivityRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityRequestManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::IUserActivityRequestManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserActivities::UserActivityRequestManager> : class_type<Platform::Object, Windows::ApplicationModel::UserActivities::IUserActivityRequestManager> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityAttributionFactory> { define_guid(0xE62BD252, 0xC566, 0x4F42, 0x99, 0x74, 0x91, 0x6C, 0x4D, 0x76, 0x37, 0x7E);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityAttribution> { define_guid(0x34A5C8B5, 0x86DD, 0x4AEC, 0xA4, 0x91, 0x6A, 0x4F, 0xAE, 0xA5, 0xD2, 0x2E);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityContentInfo> { define_guid(0xB399E5AD, 0x137F, 0x409D, 0x82, 0x2D, 0xE1, 0xAF, 0x27, 0xCE, 0x8, 0xDC);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityContentInfoStatics> { define_guid(0x9988C34B, 0x386, 0x4BC9, 0x96, 0x8A, 0x82, 0x0, 0xB0, 0x4, 0x14, 0x4F);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityVisualElements> { define_guid(0x94757513, 0x262F, 0x49EF, 0xBB, 0xBF, 0x9B, 0x75, 0xD2, 0xE8, 0x52, 0x50);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityVisualElements2> { define_guid(0xCAAE7FC7, 0x3EEF, 0x4359, 0x82, 0x5C, 0x9D, 0x51, 0xB9, 0x22, 0xD, 0xE3);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivitySession> { define_guid(0xAE434D78, 0x24FA, 0x44A3, 0xAD, 0x48, 0x6E, 0xDA, 0x61, 0xAA, 0x19, 0x24);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivity> { define_guid(0xFC103E9E, 0x2CAB, 0x4D36, 0xAE, 0xA2, 0xB4, 0xBB, 0x55, 0x6C, 0xEF, 0xF);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivity2> { define_guid(0x9DC40C62, 0x8C4, 0x47AC, 0xAA, 0x9C, 0x2B, 0xB2, 0x22, 0x1C, 0x55, 0xFD);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityStatics> { define_guid(0x8C8FD333, 0xE09, 0x47F6, 0x9A, 0xC7, 0x95, 0xCF, 0x5C, 0x39, 0x36, 0x7B);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityFactory> { define_guid(0x7C385758, 0x361D, 0x4A67, 0x8A, 0x3B, 0x34, 0xCA, 0x29, 0x78, 0xF9, 0xA3);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityChannelStatics> { define_guid(0xC8C005AB, 0x198D, 0x4D80, 0xAB, 0xB2, 0xC9, 0x77, 0x5E, 0xC4, 0xA7, 0x29);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityChannelStatics2> { define_guid(0x8E87DE30, 0xAA4F, 0x4624, 0x9A, 0xD0, 0xD4, 0xF, 0x3B, 0xA0, 0x31, 0x7C);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityChannel2> { define_guid(0x1698E35B, 0xEB7E, 0x4EA0, 0xBF, 0x17, 0xA4, 0x59, 0xE8, 0xBE, 0x70, 0x6C);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityChannel> { define_guid(0xBAC0F8B8, 0xA0E4, 0x483B, 0xB9, 0x48, 0x9C, 0xBA, 0xBD, 0x6, 0x7, 0xC);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivitySessionHistoryItem> { define_guid(0xE8D59BD3, 0x3E5D, 0x49FD, 0x98, 0xD7, 0x6D, 0xA9, 0x75, 0x21, 0xE2, 0x55);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityRequestedEventArgs> { define_guid(0xA4CC7A4C, 0x8229, 0x4CFD, 0xA3, 0xBC, 0xC6, 0x1D, 0x31, 0x85, 0x75, 0xA4);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityRequest> { define_guid(0xA0EF6355, 0xCF35, 0x4FF0, 0x88, 0x33, 0x50, 0xCB, 0x4B, 0x72, 0xE0, 0x6D);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityRequestManager> { define_guid(0xC30BE4E, 0x903D, 0x48D6, 0x82, 0xD4, 0x40, 0x43, 0xED, 0x57, 0x79, 0x1B);};
template<> struct uuid<Windows::ApplicationModel::UserActivities::IUserActivityRequestManagerStatics> { define_guid(0xC0392DF1, 0x224A, 0x432C, 0x81, 0xE5, 0xC, 0x76, 0xB4, 0xC4, 0xCE, 0xFA);};

// types

namespace Windows { namespace ApplicationModel { namespace UserActivities {

// IUserActivityAttributionFactory
struct IUserActivityAttributionFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithUri(Foundation::Uri* iconUri, UserActivityAttribution* *result);
};

// IUserActivityAttribution
struct IUserActivityAttribution_raw : IInspectable {
	virtual STDMETHODIMP _get_IconUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_IconUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_AlternateText(HSTRING *value);
	virtual STDMETHODIMP _put_AlternateText(HSTRING value);
	virtual STDMETHODIMP _get_AddImageQuery(bool *value);
	virtual STDMETHODIMP _put_AddImageQuery(bool value);
};
template<typename X> struct IUserActivityAttribution_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IUserActivityAttribution_adaptor::AddImageQuery)->_get_AddImageQuery(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IUserActivityAttribution_adaptor::AddImageQuery)->_put_AddImageQuery(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AddImageQuery;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserActivityAttribution_adaptor::AlternateText)->_get_AlternateText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserActivityAttribution_adaptor::AlternateText)->_put_AlternateText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AlternateText;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IUserActivityAttribution_adaptor::IconUri)->_get_IconUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IUserActivityAttribution_adaptor::IconUri)->_put_IconUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} IconUri;
	};
	IUserActivityAttribution_adaptor() {}
};
template<typename X> struct adapt<IUserActivityAttribution, X> : Windows::ApplicationModel::UserActivities::IUserActivityAttribution_adaptor<X> { typedef adapt IUserActivityAttribution; };
struct IUserActivityAttribution : IUserActivityAttribution_raw, generate<IUserActivityAttribution> {};

// UserActivityAttribution
template<typename> struct UserActivityAttribution_statics {
	static UserActivityAttribution *activate(pptr<Foundation::Uri> iconUri) { UserActivityAttribution *result; hrcheck(get_activation_factory<UserActivityAttribution, IUserActivityAttributionFactory>()->_CreateWithUri(iconUri, &result)); return result; }
	static UserActivityAttribution *activate() { UserActivityAttribution *t; get_activation_factory<UserActivityAttribution>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<UserActivityAttribution, X> : X, Windows::ApplicationModel::UserActivities::UserActivityAttribution_statics<void> {
	using Windows::ApplicationModel::UserActivities::UserActivityAttribution_statics<void>::activate;
	typedef typename X::root_type UserActivityAttribution;
};
struct UserActivityAttribution : generate<UserActivityAttribution> {};

// IUserActivityContentInfo
struct IUserActivityContentInfo_raw : IInspectable {
	virtual STDMETHODIMP _ToJson(HSTRING *result) = 0;
};
template<typename X> struct IUserActivityContentInfo_adaptor : X {
	hstring ToJson() { HSTRING result; hrcheck(X::get()->_ToJson(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IUserActivityContentInfo, X> : Windows::ApplicationModel::UserActivities::IUserActivityContentInfo_adaptor<X> { typedef adapt IUserActivityContentInfo; };
template<typename X> struct IUserActivityContentInfo_unadaptor : X {
	STDMETHODIMP _ToJson(HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->ToJson()); }); }
};
template<typename X> struct unadapt<IUserActivityContentInfo, X> : Windows::ApplicationModel::UserActivities::IUserActivityContentInfo_unadaptor<X> {};
struct IUserActivityContentInfo : IUserActivityContentInfo_raw, generate<IUserActivityContentInfo> {};

// IUserActivityContentInfoStatics
struct IUserActivityContentInfoStatics : IInspectable {
	virtual STDMETHODIMP _FromJson(HSTRING value, UserActivityContentInfo* *result);
};

// UserActivityContentInfo
template<typename> struct UserActivityContentInfo_statics {
	static ptr<UserActivityContentInfo> FromJson(hstring_ref value) { UserActivityContentInfo* result; hrcheck(get_activation_factory<UserActivityContentInfo, IUserActivityContentInfoStatics>()->_FromJson(value, &result)); return from_abi(result); }
};

template<typename X> struct statics<UserActivityContentInfo, X> : X, Windows::ApplicationModel::UserActivities::UserActivityContentInfo_statics<void> {
	typedef typename X::root_type UserActivityContentInfo;
};
struct UserActivityContentInfo : generate<UserActivityContentInfo> {};

// IUserActivityVisualElements
struct IUserActivityVisualElements_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayText(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayText(HSTRING value);
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _put_Description(HSTRING value);
	virtual STDMETHODIMP _get_BackgroundColor(UI::Color *value);
	virtual STDMETHODIMP _put_BackgroundColor(UI::Color value);
	virtual STDMETHODIMP _get_Attribution(UserActivityAttribution* *value);
	virtual STDMETHODIMP _put_Attribution(UserActivityAttribution* value);
	virtual STDMETHODIMP _put_Content(UI::Shell::IAdaptiveCard* value);
	virtual STDMETHODIMP _get_Content(UI::Shell::IAdaptiveCard* *value);
};
template<typename X> struct IUserActivityVisualElements_adaptor : X {
	union {
		struct : property {
			ptr<UserActivityAttribution> get() { UserActivityAttribution* value; hrcheck(enc(&IUserActivityVisualElements_adaptor::Attribution)->_get_Attribution(&value)); return from_abi(value); }
			ptr<UserActivityAttribution> operator()() { return get(); }
			operator ptr<UserActivityAttribution> () { return get(); }
			ptr<UserActivityAttribution> operator->() { return get(); }
			void put(pptr<UserActivityAttribution> value) { hrcheck(enc(&IUserActivityVisualElements_adaptor::Attribution)->_put_Attribution(value)); }
			void operator=(pptr<UserActivityAttribution> value) { put(value); }
			void operator()(pptr<UserActivityAttribution> value) { put(value); }
		} Attribution;
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IUserActivityVisualElements_adaptor::BackgroundColor)->_get_BackgroundColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
			void put(const UI::Color& value) { hrcheck(enc(&IUserActivityVisualElements_adaptor::BackgroundColor)->_put_BackgroundColor(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} BackgroundColor;
		struct : property {
			ptr<UI::Shell::IAdaptiveCard> get() { UI::Shell::IAdaptiveCard* value; hrcheck(enc(&IUserActivityVisualElements_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<UI::Shell::IAdaptiveCard> operator()() { return get(); }
			operator ptr<UI::Shell::IAdaptiveCard> () { return get(); }
			ptr<UI::Shell::IAdaptiveCard> operator->() { return get(); }
			void put(pptr<UI::Shell::IAdaptiveCard> value) { hrcheck(enc(&IUserActivityVisualElements_adaptor::Content)->_put_Content(value)); }
			void operator=(pptr<UI::Shell::IAdaptiveCard> value) { put(value); }
			void operator()(pptr<UI::Shell::IAdaptiveCard> value) { put(value); }
		} Content;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserActivityVisualElements_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserActivityVisualElements_adaptor::Description)->_put_Description(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Description;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserActivityVisualElements_adaptor::DisplayText)->_get_DisplayText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserActivityVisualElements_adaptor::DisplayText)->_put_DisplayText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayText;
	};
	IUserActivityVisualElements_adaptor() {}
};
template<typename X> struct adapt<IUserActivityVisualElements, X> : Windows::ApplicationModel::UserActivities::IUserActivityVisualElements_adaptor<X> { typedef adapt IUserActivityVisualElements; };
struct IUserActivityVisualElements : IUserActivityVisualElements_raw, generate<IUserActivityVisualElements> {};

// IUserActivityVisualElements2
struct IUserActivityVisualElements2_raw : IInspectable {
	virtual STDMETHODIMP _get_AttributionDisplayText(HSTRING *value);
	virtual STDMETHODIMP _put_AttributionDisplayText(HSTRING value);
};
template<typename X> struct IUserActivityVisualElements2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserActivityVisualElements2_adaptor::AttributionDisplayText)->_get_AttributionDisplayText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserActivityVisualElements2_adaptor::AttributionDisplayText)->_put_AttributionDisplayText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AttributionDisplayText;
	};
	IUserActivityVisualElements2_adaptor() {}
};
template<typename X> struct adapt<IUserActivityVisualElements2, X> : Windows::ApplicationModel::UserActivities::IUserActivityVisualElements2_adaptor<X> { typedef adapt IUserActivityVisualElements2; };
struct IUserActivityVisualElements2 : IUserActivityVisualElements2_raw, generate<IUserActivityVisualElements2> {};

// UserActivityVisualElements
template<typename X> struct statics<UserActivityVisualElements, X> : X {
	typedef typename X::root_type UserActivityVisualElements;
};
struct UserActivityVisualElements : generate<UserActivityVisualElements> {};

// IUserActivitySession
struct IUserActivitySession_raw : IInspectable {
	virtual STDMETHODIMP _get_ActivityId(HSTRING *value);
};
template<typename X> struct IUserActivitySession_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserActivitySession_adaptor::ActivityId)->_get_ActivityId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ActivityId;
	};
	IUserActivitySession_adaptor() {}
};
template<typename X> struct adapt<IUserActivitySession, X> : Windows::ApplicationModel::UserActivities::IUserActivitySession_adaptor<X> { typedef adapt IUserActivitySession; };
struct IUserActivitySession : IUserActivitySession_raw, generate<IUserActivitySession> {};

// UserActivitySession
template<typename X> struct statics<UserActivitySession, X> : X {
	typedef typename X::root_type UserActivitySession;
};
struct UserActivitySession : generate<UserActivitySession> {};

// IUserActivity
struct IUserActivity_raw : IInspectable {
	virtual STDMETHODIMP _get_State(UserActivityState *value);
	virtual STDMETHODIMP _get_ActivityId(HSTRING *value);
	virtual STDMETHODIMP _get_VisualElements(UserActivityVisualElements* *value);
	virtual STDMETHODIMP _get_ContentUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ContentUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_ContentType(HSTRING *value);
	virtual STDMETHODIMP _put_ContentType(HSTRING value);
	virtual STDMETHODIMP _get_FallbackUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_FallbackUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_ActivationUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ActivationUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_ContentInfo(IUserActivityContentInfo* *value);
	virtual STDMETHODIMP _put_ContentInfo(IUserActivityContentInfo* value);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _CreateSession(UserActivitySession* *result);
};
template<typename X> struct IUserActivity_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IUserActivity_adaptor::ActivationUri)->_get_ActivationUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IUserActivity_adaptor::ActivationUri)->_put_ActivationUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ActivationUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserActivity_adaptor::ActivityId)->_get_ActivityId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ActivityId;
		struct : property {
			ptr<IUserActivityContentInfo> get() { IUserActivityContentInfo* value; hrcheck(enc(&IUserActivity_adaptor::ContentInfo)->_get_ContentInfo(&value)); return from_abi(value); }
			ptr<IUserActivityContentInfo> operator()() { return get(); }
			operator ptr<IUserActivityContentInfo> () { return get(); }
			ptr<IUserActivityContentInfo> operator->() { return get(); }
			void put(pptr<IUserActivityContentInfo> value) { hrcheck(enc(&IUserActivity_adaptor::ContentInfo)->_put_ContentInfo(value)); }
			void operator=(pptr<IUserActivityContentInfo> value) { put(value); }
			void operator()(pptr<IUserActivityContentInfo> value) { put(value); }
		} ContentInfo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserActivity_adaptor::ContentType)->_get_ContentType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserActivity_adaptor::ContentType)->_put_ContentType(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContentType;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IUserActivity_adaptor::ContentUri)->_get_ContentUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IUserActivity_adaptor::ContentUri)->_put_ContentUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ContentUri;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IUserActivity_adaptor::FallbackUri)->_get_FallbackUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IUserActivity_adaptor::FallbackUri)->_put_FallbackUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} FallbackUri;
		struct : property {
			UserActivityState get() { UserActivityState value; hrcheck(enc(&IUserActivity_adaptor::State)->_get_State(&value)); return value; }
			UserActivityState operator()() { return get(); }
			operator UserActivityState () { return get(); }
		} State;
		struct : property {
			ptr<UserActivityVisualElements> get() { UserActivityVisualElements* value; hrcheck(enc(&IUserActivity_adaptor::VisualElements)->_get_VisualElements(&value)); return from_abi(value); }
			ptr<UserActivityVisualElements> operator()() { return get(); }
			operator ptr<UserActivityVisualElements> () { return get(); }
			ptr<UserActivityVisualElements> operator->() { return get(); }
		} VisualElements;
	};
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SaveAsync(&operation)); return from_abi(operation); }
	ptr<UserActivitySession> CreateSession() { UserActivitySession* result; hrcheck(X::get()->_CreateSession(&result)); return from_abi(result); }
	IUserActivity_adaptor() {}
};
template<typename X> struct adapt<IUserActivity, X> : Windows::ApplicationModel::UserActivities::IUserActivity_adaptor<X> { typedef adapt IUserActivity; };
struct IUserActivity : IUserActivity_raw, generate<IUserActivity> {};

// IUserActivity2
struct IUserActivity2_raw : IInspectable {
	virtual STDMETHODIMP _ToJson(HSTRING *result);
};
template<typename X> struct IUserActivity2_adaptor : X {
	hstring ToJson() { HSTRING result; hrcheck(X::get()->_ToJson(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IUserActivity2, X> : Windows::ApplicationModel::UserActivities::IUserActivity2_adaptor<X> { typedef adapt IUserActivity2; };
struct IUserActivity2 : IUserActivity2_raw, generate<IUserActivity2> {};

// IUserActivityStatics
struct IUserActivityStatics : IInspectable {
	virtual STDMETHODIMP _TryParseFromJson(HSTRING json, UserActivity* *result);
	virtual STDMETHODIMP _TryParseFromJsonArray(HSTRING json, Foundation::Collections::IVector<UserActivity*>* *result);
	virtual STDMETHODIMP _ToJsonArray(Foundation::Collections::IIterable<UserActivity*>* activities, HSTRING *result);
};

// IUserActivityFactory
struct IUserActivityFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithActivityId(HSTRING activityId, UserActivity* *result);
};

// UserActivity
template<typename> struct UserActivity_statics {
	static ptr<UserActivity> TryParseFromJson(hstring_ref json) { UserActivity* result; hrcheck(get_activation_factory<UserActivity, IUserActivityStatics>()->_TryParseFromJson(json, &result)); return from_abi(result); }
	static ptr<Foundation::Collections::IVector<ptr<UserActivity>>> TryParseFromJsonArray(hstring_ref json) { Foundation::Collections::IVector<UserActivity*>* result; hrcheck(get_activation_factory<UserActivity, IUserActivityStatics>()->_TryParseFromJsonArray(json, &result)); return from_abi(result); }
	static hstring ToJsonArray(pptr<Foundation::Collections::IIterable<ptr<UserActivity>>> activities) { HSTRING result; hrcheck(get_activation_factory<UserActivity, IUserActivityStatics>()->_ToJsonArray(to_abi(activities), &result)); return from_abi(result); }
	static UserActivity *activate(hstring_ref activityId) { UserActivity *result; hrcheck(get_activation_factory<UserActivity, IUserActivityFactory>()->_CreateWithActivityId(activityId, &result)); return result; }
};

template<typename X> struct statics<UserActivity, X> : X, Windows::ApplicationModel::UserActivities::UserActivity_statics<void> {
	using Windows::ApplicationModel::UserActivities::UserActivity_statics<void>::activate;
	typedef typename X::root_type UserActivity;
};
struct UserActivity : generate<UserActivity> {};

// IUserActivityChannelStatics
struct IUserActivityChannelStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(UserActivityChannel* *value);
};

// IUserActivityChannelStatics2
struct IUserActivityChannelStatics2 : IInspectable {
	virtual STDMETHODIMP _DisableAutoSessionCreation();
	virtual STDMETHODIMP _TryGetForWebAccount(Security::Credentials::WebAccount* account, UserActivityChannel* *result);
};

// IUserActivityChannel2
struct IUserActivityChannel2_raw : IInspectable {
	virtual STDMETHODIMP _GetRecentUserActivitiesAsync(int maxUniqueActivities, Foundation::IAsyncOperation<Foundation::Collections::IVector<UserActivitySessionHistoryItem*>*>* *operation);
	virtual STDMETHODIMP _GetSessionHistoryItemsForUserActivityAsync(HSTRING activityId, Foundation::DateTime startTime, Foundation::IAsyncOperation<Foundation::Collections::IVector<UserActivitySessionHistoryItem*>*>* *operation);
};
template<typename X> struct IUserActivityChannel2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVector<ptr<UserActivitySessionHistoryItem>>>>> GetRecentUserActivitiesAsync(int maxUniqueActivities) { Foundation::IAsyncOperation<Foundation::Collections::IVector<UserActivitySessionHistoryItem*>*>* operation; hrcheck(X::get()->_GetRecentUserActivitiesAsync(maxUniqueActivities, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVector<ptr<UserActivitySessionHistoryItem>>>>> GetSessionHistoryItemsForUserActivityAsync(hstring_ref activityId, const Foundation::DateTime& startTime) { Foundation::IAsyncOperation<Foundation::Collections::IVector<UserActivitySessionHistoryItem*>*>* operation; hrcheck(X::get()->_GetSessionHistoryItemsForUserActivityAsync(activityId, startTime, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IUserActivityChannel2, X> : Windows::ApplicationModel::UserActivities::IUserActivityChannel2_adaptor<X> { typedef adapt IUserActivityChannel2; };
struct IUserActivityChannel2 : IUserActivityChannel2_raw, generate<IUserActivityChannel2> {};

// IUserActivityChannel
struct IUserActivityChannel_raw : IInspectable {
	virtual STDMETHODIMP _GetOrCreateUserActivityAsync(HSTRING activityId, Foundation::IAsyncOperation<UserActivity*>* *operation);
	virtual STDMETHODIMP _DeleteActivityAsync(HSTRING activityId, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _DeleteAllActivitiesAsync(Foundation::IAsyncAction* *operation);
};
template<typename X> struct IUserActivityChannel_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<UserActivity>>> GetOrCreateUserActivityAsync(hstring_ref activityId) { Foundation::IAsyncOperation<UserActivity*>* operation; hrcheck(X::get()->_GetOrCreateUserActivityAsync(activityId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> DeleteActivityAsync(hstring_ref activityId) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_DeleteActivityAsync(activityId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> DeleteAllActivitiesAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_DeleteAllActivitiesAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IUserActivityChannel, X> : Windows::ApplicationModel::UserActivities::IUserActivityChannel_adaptor<X> { typedef adapt IUserActivityChannel; };
struct IUserActivityChannel : IUserActivityChannel_raw, generate<IUserActivityChannel> {};

// UserActivityChannel
template<typename> struct UserActivityChannel_statics {
	static void DisableAutoSessionCreation() { hrcheck(get_activation_factory<UserActivityChannel, IUserActivityChannelStatics2>()->_DisableAutoSessionCreation()); }
	static ptr<UserActivityChannel> TryGetForWebAccount(pptr<Security::Credentials::WebAccount> account) { UserActivityChannel* result; hrcheck(get_activation_factory<UserActivityChannel, IUserActivityChannelStatics2>()->_TryGetForWebAccount(account, &result)); return from_abi(result); }
	static ptr<UserActivityChannel> GetDefault() { UserActivityChannel* value; hrcheck(get_activation_factory<UserActivityChannel, IUserActivityChannelStatics>()->_GetDefault(&value)); return from_abi(value); }
};

template<typename X> struct statics<UserActivityChannel, X> : X, Windows::ApplicationModel::UserActivities::UserActivityChannel_statics<void> {
	typedef typename X::root_type UserActivityChannel;
};
struct UserActivityChannel : generate<UserActivityChannel> {};

// IUserActivitySessionHistoryItem
struct IUserActivitySessionHistoryItem_raw : IInspectable {
	virtual STDMETHODIMP _get_UserActivity(UserActivities::UserActivity* *value);
	virtual STDMETHODIMP _get_StartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_EndTime(Foundation::IReference<Foundation::DateTime>* *value);
};
template<typename X> struct IUserActivitySessionHistoryItem_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IUserActivitySessionHistoryItem_adaptor::EndTime)->_get_EndTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} EndTime;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IUserActivitySessionHistoryItem_adaptor::StartTime)->_get_StartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} StartTime;
		struct : property {
			ptr<UserActivities::UserActivity> get() { UserActivities::UserActivity* value; hrcheck(enc(&IUserActivitySessionHistoryItem_adaptor::UserActivity)->_get_UserActivity(&value)); return from_abi(value); }
			ptr<UserActivities::UserActivity> operator()() { return get(); }
			operator ptr<UserActivities::UserActivity> () { return get(); }
			ptr<UserActivities::UserActivity> operator->() { return get(); }
		} UserActivity;
	};
	IUserActivitySessionHistoryItem_adaptor() {}
};
template<typename X> struct adapt<IUserActivitySessionHistoryItem, X> : Windows::ApplicationModel::UserActivities::IUserActivitySessionHistoryItem_adaptor<X> { typedef adapt IUserActivitySessionHistoryItem; };
struct IUserActivitySessionHistoryItem : IUserActivitySessionHistoryItem_raw, generate<IUserActivitySessionHistoryItem> {};

// UserActivitySessionHistoryItem
template<typename X> struct statics<UserActivitySessionHistoryItem, X> : X {
	typedef typename X::root_type UserActivitySessionHistoryItem;
};
struct UserActivitySessionHistoryItem : generate<UserActivitySessionHistoryItem> {};

// IUserActivityRequestedEventArgs
struct IUserActivityRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(UserActivityRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IUserActivityRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UserActivityRequest> get() { UserActivityRequest* value; hrcheck(enc(&IUserActivityRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<UserActivityRequest> operator()() { return get(); }
			operator ptr<UserActivityRequest> () { return get(); }
			ptr<UserActivityRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IUserActivityRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserActivityRequestedEventArgs, X> : Windows::ApplicationModel::UserActivities::IUserActivityRequestedEventArgs_adaptor<X> { typedef adapt IUserActivityRequestedEventArgs; };
struct IUserActivityRequestedEventArgs : IUserActivityRequestedEventArgs_raw, generate<IUserActivityRequestedEventArgs> {};

// IUserActivityRequest
struct IUserActivityRequest_raw : IInspectable {
	virtual STDMETHODIMP _SetUserActivity(UserActivity* activity);
};
template<typename X> struct IUserActivityRequest_adaptor : X {
	void SetUserActivity(pptr<UserActivity> activity) { hrcheck(X::get()->_SetUserActivity(activity)); }
};
template<typename X> struct adapt<IUserActivityRequest, X> : Windows::ApplicationModel::UserActivities::IUserActivityRequest_adaptor<X> { typedef adapt IUserActivityRequest; };
struct IUserActivityRequest : IUserActivityRequest_raw, generate<IUserActivityRequest> {};

// UserActivityRequest
template<typename X> struct statics<UserActivityRequest, X> : X {
	typedef typename X::root_type UserActivityRequest;
};
struct UserActivityRequest : generate<UserActivityRequest> {};

// UserActivityRequestedEventArgs
template<typename X> struct statics<UserActivityRequestedEventArgs, X> : X {
	typedef typename X::root_type UserActivityRequestedEventArgs;
};
struct UserActivityRequestedEventArgs : generate<UserActivityRequestedEventArgs> {};

// IUserActivityRequestManager
struct IUserActivityRequestManager_raw : IInspectable {
	virtual STDMETHODIMP _add_UserActivityRequested(Foundation::TypedEventHandler<UserActivityRequestManager*, UserActivityRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_UserActivityRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IUserActivityRequestManager_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UserActivityRequestManager>, ptr<UserActivityRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IUserActivityRequestManager_adaptor::UserActivityRequested)->_add_UserActivityRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IUserActivityRequestManager_adaptor::UserActivityRequested)->_remove_UserActivityRequested(token)); }
		} UserActivityRequested;
	};
	IUserActivityRequestManager_adaptor() {}
};
template<typename X> struct adapt<IUserActivityRequestManager, X> : Windows::ApplicationModel::UserActivities::IUserActivityRequestManager_adaptor<X> { typedef adapt IUserActivityRequestManager; };
struct IUserActivityRequestManager : IUserActivityRequestManager_raw, generate<IUserActivityRequestManager> {};

// IUserActivityRequestManagerStatics
struct IUserActivityRequestManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(UserActivityRequestManager* *result);
};

// UserActivityRequestManager
template<typename> struct UserActivityRequestManager_statics {
	static ptr<UserActivityRequestManager> GetForCurrentView() { UserActivityRequestManager* result; hrcheck(get_activation_factory<UserActivityRequestManager, IUserActivityRequestManagerStatics>()->_GetForCurrentView(&result)); return from_abi(result); }
};

template<typename X> struct statics<UserActivityRequestManager, X> : X, Windows::ApplicationModel::UserActivities::UserActivityRequestManager_statics<void> {
	typedef typename X::root_type UserActivityRequestManager;
};
struct UserActivityRequestManager : generate<UserActivityRequestManager> {};
}}}
} // namespace iso_winrt
