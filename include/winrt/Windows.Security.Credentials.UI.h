#pragma once
// generated by isopod tools
// namespaces:
// Windows.Security.Credentials.UI

#include "Windows.Security.Credentials.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
template<typename TResult> struct IAsyncOperation;
}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Security::Credentials::UI::AuthenticationProtocol> : enum_type<int> {};
template<> struct def<Windows::Security::Credentials::UI::CredentialSaveOption> : enum_type<int> {};
template<> struct def<Windows::Security::Credentials::UI::ICredentialPickerOptions> : interface_type<> {};
template<> struct def<Windows::Security::Credentials::UI::CredentialPickerOptions> : class_type<Platform::Object, Windows::Security::Credentials::UI::ICredentialPickerOptions> {};
template<> struct def<Windows::Security::Credentials::UI::ICredentialPickerStatics> : interface_type<> {};
template<> struct def<Windows::Security::Credentials::UI::ICredentialPickerResults> : interface_type<> {};
template<> struct def<Windows::Security::Credentials::UI::CredentialPickerResults> : class_type<Platform::Object, Windows::Security::Credentials::UI::ICredentialPickerResults> {};
template<> struct def<Windows::Security::Credentials::UI::CredentialPicker> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Credentials::UI::UserConsentVerifierAvailability> : enum_type<int> {};
template<> struct def<Windows::Security::Credentials::UI::UserConsentVerificationResult> : enum_type<int> {};
template<> struct def<Windows::Security::Credentials::UI::IUserConsentVerifierStatics> : interface_type<> {};
template<> struct def<Windows::Security::Credentials::UI::UserConsentVerifier> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Security::Credentials::UI::ICredentialPickerOptions> { define_guid(0x965A0B4C, 0x95FA, 0x467F, 0x99, 0x2B, 0xB, 0x22, 0xE5, 0x85, 0x9B, 0xF6);};
template<> struct uuid<Windows::Security::Credentials::UI::ICredentialPickerStatics> { define_guid(0xAA3A5C73, 0xC9EA, 0x4782, 0x99, 0xFB, 0xE6, 0xD7, 0xE9, 0x38, 0xE1, 0x2D);};
template<> struct uuid<Windows::Security::Credentials::UI::ICredentialPickerResults> { define_guid(0x1948F99A, 0xCC30, 0x410C, 0x9C, 0x38, 0xCC, 0x8, 0x84, 0xC5, 0xB3, 0xD7);};
template<> struct uuid<Windows::Security::Credentials::UI::IUserConsentVerifierStatics> { define_guid(0xAF4F3F91, 0x564C, 0x4DDC, 0xB8, 0xB5, 0x97, 0x34, 0x47, 0x62, 0x7C, 0x65);};

// types

namespace Windows { namespace Security { namespace Credentials { namespace UI {

// ICredentialPickerOptions
struct ICredentialPickerOptions_raw : IInspectable {
	virtual STDMETHODIMP _put_Caption(HSTRING value);
	virtual STDMETHODIMP _get_Caption(HSTRING *value);
	virtual STDMETHODIMP _put_Message(HSTRING value);
	virtual STDMETHODIMP _get_Message(HSTRING *value);
	virtual STDMETHODIMP _put_ErrorCode(unsigned value);
	virtual STDMETHODIMP _get_ErrorCode(unsigned *value);
	virtual STDMETHODIMP _put_TargetName(HSTRING value);
	virtual STDMETHODIMP _get_TargetName(HSTRING *value);
	virtual STDMETHODIMP _put_AuthenticationProtocol(UI::AuthenticationProtocol value);
	virtual STDMETHODIMP _get_AuthenticationProtocol(UI::AuthenticationProtocol *value);
	virtual STDMETHODIMP _put_CustomAuthenticationProtocol(HSTRING value);
	virtual STDMETHODIMP _get_CustomAuthenticationProtocol(HSTRING *value);
	virtual STDMETHODIMP _put_PreviousCredential(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_PreviousCredential(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_AlwaysDisplayDialog(bool value);
	virtual STDMETHODIMP _get_AlwaysDisplayDialog(bool *value);
	virtual STDMETHODIMP _put_CallerSavesCredential(bool value);
	virtual STDMETHODIMP _get_CallerSavesCredential(bool *value);
	virtual STDMETHODIMP _put_CredentialSaveOption(UI::CredentialSaveOption value);
	virtual STDMETHODIMP _get_CredentialSaveOption(UI::CredentialSaveOption *value);
};
template<typename X> struct ICredentialPickerOptions_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICredentialPickerOptions_adaptor::AlwaysDisplayDialog)->_get_AlwaysDisplayDialog(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::AlwaysDisplayDialog)->_put_AlwaysDisplayDialog(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AlwaysDisplayDialog;
		struct : property {
			UI::AuthenticationProtocol get() { UI::AuthenticationProtocol value; hrcheck(enc(&ICredentialPickerOptions_adaptor::AuthenticationProtocol)->_get_AuthenticationProtocol(&value)); return value; }
			UI::AuthenticationProtocol operator()() { return get(); }
			operator UI::AuthenticationProtocol () { return get(); }
			void put(UI::AuthenticationProtocol value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::AuthenticationProtocol)->_put_AuthenticationProtocol(value)); }
			void operator=(UI::AuthenticationProtocol value) { put(value); }
			void operator()(UI::AuthenticationProtocol value) { put(value); }
		} AuthenticationProtocol;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICredentialPickerOptions_adaptor::CallerSavesCredential)->_get_CallerSavesCredential(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::CallerSavesCredential)->_put_CallerSavesCredential(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CallerSavesCredential;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICredentialPickerOptions_adaptor::Caption)->_get_Caption(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::Caption)->_put_Caption(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Caption;
		struct : property {
			UI::CredentialSaveOption get() { UI::CredentialSaveOption value; hrcheck(enc(&ICredentialPickerOptions_adaptor::CredentialSaveOption)->_get_CredentialSaveOption(&value)); return value; }
			UI::CredentialSaveOption operator()() { return get(); }
			operator UI::CredentialSaveOption () { return get(); }
			void put(UI::CredentialSaveOption value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::CredentialSaveOption)->_put_CredentialSaveOption(value)); }
			void operator=(UI::CredentialSaveOption value) { put(value); }
			void operator()(UI::CredentialSaveOption value) { put(value); }
		} CredentialSaveOption;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICredentialPickerOptions_adaptor::CustomAuthenticationProtocol)->_get_CustomAuthenticationProtocol(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::CustomAuthenticationProtocol)->_put_CustomAuthenticationProtocol(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} CustomAuthenticationProtocol;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICredentialPickerOptions_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::ErrorCode)->_put_ErrorCode(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ErrorCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICredentialPickerOptions_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::Message)->_put_Message(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Message;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ICredentialPickerOptions_adaptor::PreviousCredential)->_get_PreviousCredential(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::PreviousCredential)->_put_PreviousCredential(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} PreviousCredential;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICredentialPickerOptions_adaptor::TargetName)->_get_TargetName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICredentialPickerOptions_adaptor::TargetName)->_put_TargetName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TargetName;
	};
	ICredentialPickerOptions_adaptor() {}
};
template<typename X> struct adapt<ICredentialPickerOptions, X> : Windows::Security::Credentials::UI::ICredentialPickerOptions_adaptor<X> { typedef adapt ICredentialPickerOptions; };
struct ICredentialPickerOptions : ICredentialPickerOptions_raw, generate<ICredentialPickerOptions> {};

// CredentialPickerOptions
template<typename X> struct statics<CredentialPickerOptions, X> : X {
	typedef typename X::root_type CredentialPickerOptions;
};
struct CredentialPickerOptions : generate<CredentialPickerOptions> {};

// ICredentialPickerStatics
struct ICredentialPickerStatics : IInspectable {
	virtual STDMETHODIMP _PickWithOptionsAsync(CredentialPickerOptions* options, Foundation::IAsyncOperation<CredentialPickerResults*>* *operation);
	virtual STDMETHODIMP _PickWithMessageAsync(HSTRING targetName, HSTRING message, Foundation::IAsyncOperation<CredentialPickerResults*>* *operation);
	virtual STDMETHODIMP _PickWithCaptionAsync(HSTRING targetName, HSTRING message, HSTRING caption, Foundation::IAsyncOperation<CredentialPickerResults*>* *operation);
};

// ICredentialPickerResults
struct ICredentialPickerResults_raw : IInspectable {
	virtual STDMETHODIMP _get_ErrorCode(unsigned *value);
	virtual STDMETHODIMP _get_CredentialSaveOption(UI::CredentialSaveOption *value);
	virtual STDMETHODIMP _get_CredentialSaved(bool *value);
	virtual STDMETHODIMP _get_Credential(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_CredentialDomainName(HSTRING *value);
	virtual STDMETHODIMP _get_CredentialUserName(HSTRING *value);
	virtual STDMETHODIMP _get_CredentialPassword(HSTRING *value);
};
template<typename X> struct ICredentialPickerResults_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ICredentialPickerResults_adaptor::Credential)->_get_Credential(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Credential;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICredentialPickerResults_adaptor::CredentialDomainName)->_get_CredentialDomainName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CredentialDomainName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICredentialPickerResults_adaptor::CredentialPassword)->_get_CredentialPassword(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CredentialPassword;
		struct : property {
			UI::CredentialSaveOption get() { UI::CredentialSaveOption value; hrcheck(enc(&ICredentialPickerResults_adaptor::CredentialSaveOption)->_get_CredentialSaveOption(&value)); return value; }
			UI::CredentialSaveOption operator()() { return get(); }
			operator UI::CredentialSaveOption () { return get(); }
		} CredentialSaveOption;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICredentialPickerResults_adaptor::CredentialSaved)->_get_CredentialSaved(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CredentialSaved;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICredentialPickerResults_adaptor::CredentialUserName)->_get_CredentialUserName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CredentialUserName;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICredentialPickerResults_adaptor::ErrorCode)->_get_ErrorCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ErrorCode;
	};
	ICredentialPickerResults_adaptor() {}
};
template<typename X> struct adapt<ICredentialPickerResults, X> : Windows::Security::Credentials::UI::ICredentialPickerResults_adaptor<X> { typedef adapt ICredentialPickerResults; };
struct ICredentialPickerResults : ICredentialPickerResults_raw, generate<ICredentialPickerResults> {};

// CredentialPickerResults
template<typename X> struct statics<CredentialPickerResults, X> : X {
	typedef typename X::root_type CredentialPickerResults;
};
struct CredentialPickerResults : generate<CredentialPickerResults> {};

// CredentialPicker
template<typename> struct CredentialPicker_statics {
	static ptr<Foundation::IAsyncOperation<ptr<CredentialPickerResults>>> PickAsync(pptr<CredentialPickerOptions> options) { Foundation::IAsyncOperation<CredentialPickerResults*>* operation; hrcheck(get_activation_factory<CredentialPicker, ICredentialPickerStatics>()->_PickWithOptionsAsync(options, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<CredentialPickerResults>>> PickAsync(hstring_ref targetName, hstring_ref message) { Foundation::IAsyncOperation<CredentialPickerResults*>* operation; hrcheck(get_activation_factory<CredentialPicker, ICredentialPickerStatics>()->_PickWithMessageAsync(targetName, message, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<CredentialPickerResults>>> PickAsync(hstring_ref targetName, hstring_ref message, hstring_ref caption) { Foundation::IAsyncOperation<CredentialPickerResults*>* operation; hrcheck(get_activation_factory<CredentialPicker, ICredentialPickerStatics>()->_PickWithCaptionAsync(targetName, message, caption, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<CredentialPicker, X> : X, Windows::Security::Credentials::UI::CredentialPicker_statics<void> {
	typedef typename X::root_type CredentialPicker;
};
struct CredentialPicker : generate<CredentialPicker> {};

// IUserConsentVerifierStatics
struct IUserConsentVerifierStatics : IInspectable {
	virtual STDMETHODIMP _CheckAvailabilityAsync(Foundation::IAsyncOperation<UserConsentVerifierAvailability>* *result);
	virtual STDMETHODIMP _RequestVerificationAsync(HSTRING message, Foundation::IAsyncOperation<UserConsentVerificationResult>* *result);
};

// UserConsentVerifier
template<typename> struct UserConsentVerifier_statics {
	static ptr<Foundation::IAsyncOperation<UserConsentVerifierAvailability>> CheckAvailabilityAsync() { Foundation::IAsyncOperation<UserConsentVerifierAvailability>* result; hrcheck(get_activation_factory<UserConsentVerifier, IUserConsentVerifierStatics>()->_CheckAvailabilityAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<UserConsentVerificationResult>> RequestVerificationAsync(hstring_ref message) { Foundation::IAsyncOperation<UserConsentVerificationResult>* result; hrcheck(get_activation_factory<UserConsentVerifier, IUserConsentVerifierStatics>()->_RequestVerificationAsync(message, &result)); return from_abi(result); }
};

template<typename X> struct statics<UserConsentVerifier, X> : X, Windows::Security::Credentials::UI::UserConsentVerifier_statics<void> {
	typedef typename X::root_type UserConsentVerifier;
};
struct UserConsentVerifier : generate<UserConsentVerifier> {};
}}}}
} // namespace iso_winrt
