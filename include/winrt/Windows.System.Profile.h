#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.Profile

#include "Windows.System.Profile.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename K, typename V> struct IMapView;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::System::Profile::SystemIdentificationSource> : enum_type<int> {};
template<> struct def<Windows::System::Profile::ISystemIdentificationInfo> : interface_type<> {};
template<> struct def<Windows::System::Profile::SystemIdentificationInfo> : class_type<Platform::Object, Windows::System::Profile::ISystemIdentificationInfo> {};
template<> struct def<Windows::System::Profile::ISystemIdentificationStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::SystemIdentification> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::IAnalyticsInfoStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::IAnalyticsVersionInfo> : interface_type<> {};
template<> struct def<Windows::System::Profile::AnalyticsVersionInfo> : class_type<Platform::Object, Windows::System::Profile::IAnalyticsVersionInfo> {};
template<> struct def<Windows::System::Profile::IAnalyticsInfoStatics2> : interface_type<> {};
template<> struct def<Windows::System::Profile::AnalyticsInfo> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::IEducationSettingsStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::EducationSettings> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::PlatformDataCollectionLevel> : enum_type<int> {};
template<> struct def<Windows::System::Profile::IPlatformDiagnosticsAndUsageDataSettingsStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::PlatformDiagnosticsAndUsageDataSettings> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::ProfileHardwareTokenContract> : value_type<> {};
template<> struct def<Windows::System::Profile::IHardwareToken> : interface_type<> {};
template<> struct def<Windows::System::Profile::HardwareToken> : class_type<Platform::Object, Windows::System::Profile::IHardwareToken> {};
template<> struct def<Windows::System::Profile::IHardwareIdentificationStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::HardwareIdentification> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::ProfileRetailInfoContract> : value_type<> {};
template<> struct def<Windows::System::Profile::IRetailInfoStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::IKnownRetailInfoPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::RetailInfo> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::KnownRetailInfoProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Profile::ProfileSharedModeContract> : value_type<> {};
template<> struct def<Windows::System::Profile::ISharedModeSettingsStatics> : interface_type<> {};
template<> struct def<Windows::System::Profile::ISharedModeSettingsStatics2> : interface_type<> {};
template<> struct def<Windows::System::Profile::SharedModeSettings> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::System::Profile::ISystemIdentificationInfo> { define_guid(0xC659E7D, 0xC3C2, 0x4D33, 0xA2, 0xDF, 0x21, 0xBC, 0x41, 0x91, 0x6E, 0xB3);};
template<> struct uuid<Windows::System::Profile::ISystemIdentificationStatics> { define_guid(0x5581F42A, 0xD3DF, 0x4D93, 0xA3, 0x7D, 0xC4, 0x1A, 0x61, 0x6C, 0x6D, 0x1);};
template<> struct uuid<Windows::System::Profile::IAnalyticsInfoStatics> { define_guid(0x1D5EE066, 0x188D, 0x5BA9, 0x43, 0x87, 0xAC, 0xAE, 0xB0, 0xE7, 0xE3, 0x5);};
template<> struct uuid<Windows::System::Profile::IAnalyticsVersionInfo> { define_guid(0x926130B8, 0x9955, 0x4C74, 0xBD, 0xC1, 0x7C, 0xD0, 0xDE, 0xCF, 0x9B, 0x3);};
template<> struct uuid<Windows::System::Profile::IAnalyticsInfoStatics2> { define_guid(0x101704EA, 0xA7F9, 0x46D2, 0xAB, 0x94, 0x1, 0x68, 0x65, 0xAF, 0xDB, 0x25);};
template<> struct uuid<Windows::System::Profile::IEducationSettingsStatics> { define_guid(0xFC53F0EF, 0x4D3E, 0x4E13, 0x9B, 0x23, 0x50, 0x5F, 0x4D, 0x9, 0x1E, 0x92);};
template<> struct uuid<Windows::System::Profile::IPlatformDiagnosticsAndUsageDataSettingsStatics> { define_guid(0xB6E24C1B, 0x7B1C, 0x4B32, 0x8C, 0x62, 0xA6, 0x65, 0x97, 0xCE, 0x72, 0x3A);};
template<> struct uuid<Windows::System::Profile::IHardwareToken> { define_guid(0x28F6D4C0, 0xFB12, 0x40A4, 0x81, 0x67, 0x7F, 0x4E, 0x3, 0xD2, 0x72, 0x4C);};
template<> struct uuid<Windows::System::Profile::IHardwareIdentificationStatics> { define_guid(0x971260E0, 0xF170, 0x4A42, 0xBD, 0x55, 0xA9, 0x0, 0xB2, 0x12, 0xDA, 0xE2);};
template<> struct uuid<Windows::System::Profile::IRetailInfoStatics> { define_guid(0x712C6B8, 0x8B92, 0x4F2A, 0x84, 0x99, 0x3, 0x1F, 0x17, 0x98, 0xD6, 0xEF);};
template<> struct uuid<Windows::System::Profile::IKnownRetailInfoPropertiesStatics> { define_guid(0x99571178, 0x500F, 0x487E, 0x8E, 0x75, 0x29, 0xE5, 0x51, 0x72, 0x87, 0x12);};
template<> struct uuid<Windows::System::Profile::ISharedModeSettingsStatics> { define_guid(0x893DF40E, 0xCAD6, 0x4D50, 0x8C, 0x49, 0x6F, 0xCF, 0xC0, 0x3E, 0xDB, 0x29);};
template<> struct uuid<Windows::System::Profile::ISharedModeSettingsStatics2> { define_guid(0x608988A4, 0xCCF1, 0x4EE8, 0xA5, 0xE2, 0xFD, 0x6A, 0x1D, 0xC, 0xFA, 0xC8);};

// types

namespace Windows { namespace System { namespace Profile {

// ISystemIdentificationInfo
struct ISystemIdentificationInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_Source(SystemIdentificationSource *value);
};
template<typename X> struct ISystemIdentificationInfo_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISystemIdentificationInfo_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Id;
		struct : property {
			SystemIdentificationSource get() { SystemIdentificationSource value; hrcheck(enc(&ISystemIdentificationInfo_adaptor::Source)->_get_Source(&value)); return value; }
			SystemIdentificationSource operator()() { return get(); }
			operator SystemIdentificationSource () { return get(); }
		} Source;
	};
	ISystemIdentificationInfo_adaptor() {}
};
template<typename X> struct adapt<ISystemIdentificationInfo, X> : Windows::System::Profile::ISystemIdentificationInfo_adaptor<X> { typedef adapt ISystemIdentificationInfo; };
struct ISystemIdentificationInfo : ISystemIdentificationInfo_raw, generate<ISystemIdentificationInfo> {};

// SystemIdentificationInfo
template<typename X> struct statics<SystemIdentificationInfo, X> : X {
	typedef typename X::root_type SystemIdentificationInfo;
};
struct SystemIdentificationInfo : generate<SystemIdentificationInfo> {};

// ISystemIdentificationStatics
struct ISystemIdentificationStatics : IInspectable {
	virtual STDMETHODIMP _GetSystemIdForPublisher(SystemIdentificationInfo* *result);
	virtual STDMETHODIMP _GetSystemIdForUser(User* user, SystemIdentificationInfo* *result);
};

// SystemIdentification
template<typename> struct SystemIdentification_statics {
	static ptr<SystemIdentificationInfo> GetSystemIdForPublisher() { SystemIdentificationInfo* result; hrcheck(get_activation_factory<SystemIdentification, ISystemIdentificationStatics>()->_GetSystemIdForPublisher(&result)); return from_abi(result); }
	static ptr<SystemIdentificationInfo> GetSystemIdForUser(pptr<User> user) { SystemIdentificationInfo* result; hrcheck(get_activation_factory<SystemIdentification, ISystemIdentificationStatics>()->_GetSystemIdForUser(user, &result)); return from_abi(result); }
};

template<typename X> struct statics<SystemIdentification, X> : X, Windows::System::Profile::SystemIdentification_statics<void> {
	typedef typename X::root_type SystemIdentification;
};
struct SystemIdentification : generate<SystemIdentification> {};

// IAnalyticsInfoStatics
struct IAnalyticsInfoStatics : IInspectable {
	virtual STDMETHODIMP _get_VersionInfo(AnalyticsVersionInfo* *value);
	virtual STDMETHODIMP _get_DeviceForm(HSTRING *value);
};

// IAnalyticsVersionInfo
struct IAnalyticsVersionInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceFamily(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceFamilyVersion(HSTRING *value);
};
template<typename X> struct IAnalyticsVersionInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAnalyticsVersionInfo_adaptor::DeviceFamily)->_get_DeviceFamily(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceFamily;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAnalyticsVersionInfo_adaptor::DeviceFamilyVersion)->_get_DeviceFamilyVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceFamilyVersion;
	};
	IAnalyticsVersionInfo_adaptor() {}
};
template<typename X> struct adapt<IAnalyticsVersionInfo, X> : Windows::System::Profile::IAnalyticsVersionInfo_adaptor<X> { typedef adapt IAnalyticsVersionInfo; };
struct IAnalyticsVersionInfo : IAnalyticsVersionInfo_raw, generate<IAnalyticsVersionInfo> {};

// AnalyticsVersionInfo
template<typename X> struct statics<AnalyticsVersionInfo, X> : X {
	typedef typename X::root_type AnalyticsVersionInfo;
};
struct AnalyticsVersionInfo : generate<AnalyticsVersionInfo> {};

// IAnalyticsInfoStatics2
struct IAnalyticsInfoStatics2 : IInspectable {
	virtual STDMETHODIMP _GetSystemPropertiesAsync(Foundation::Collections::IIterable<HSTRING>* attributeNames, Foundation::IAsyncOperation<Foundation::Collections::IMapView<HSTRING, HSTRING>*>* *operation);
};

// AnalyticsInfo
template<typename> struct AnalyticsInfo_statics {
	static struct _DeviceForm : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AnalyticsInfo, IAnalyticsInfoStatics>()->_get_DeviceForm(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DeviceForm;
	static struct _VersionInfo : property {
		ptr<AnalyticsVersionInfo> get() { AnalyticsVersionInfo* value; hrcheck(get_activation_factory<AnalyticsInfo, IAnalyticsInfoStatics>()->_get_VersionInfo(&value)); return from_abi(value); }
		ptr<AnalyticsVersionInfo> operator()() { return get(); }
		operator ptr<AnalyticsVersionInfo> () { return get(); }
		ptr<AnalyticsVersionInfo> operator->() { return get(); }
	} VersionInfo;
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IMapView<hstring, hstring>>>> GetSystemPropertiesAsync(pptr<Foundation::Collections::IIterable<hstring>> attributeNames) { Foundation::IAsyncOperation<Foundation::Collections::IMapView<HSTRING, HSTRING>*>* operation; hrcheck(get_activation_factory<AnalyticsInfo, IAnalyticsInfoStatics2>()->_GetSystemPropertiesAsync(to_abi(attributeNames), &operation)); return from_abi(operation); }
};
template<typename X> typename AnalyticsInfo_statics<X>::_DeviceForm AnalyticsInfo_statics<X>::DeviceForm;
template<typename X> typename AnalyticsInfo_statics<X>::_VersionInfo AnalyticsInfo_statics<X>::VersionInfo;

template<typename X> struct statics<AnalyticsInfo, X> : X, Windows::System::Profile::AnalyticsInfo_statics<void> {
	typedef typename X::root_type AnalyticsInfo;
};
struct AnalyticsInfo : generate<AnalyticsInfo> {};

// IEducationSettingsStatics
struct IEducationSettingsStatics : IInspectable {
	virtual STDMETHODIMP _get_IsEducationEnvironment(bool *value);
};

// EducationSettings
template<typename> struct EducationSettings_statics {
	static struct _IsEducationEnvironment : property {
		bool get() { bool value; hrcheck(get_activation_factory<EducationSettings, IEducationSettingsStatics>()->_get_IsEducationEnvironment(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsEducationEnvironment;
};
template<typename X> typename EducationSettings_statics<X>::_IsEducationEnvironment EducationSettings_statics<X>::IsEducationEnvironment;

template<typename X> struct statics<EducationSettings, X> : X, Windows::System::Profile::EducationSettings_statics<void> {
	typedef typename X::root_type EducationSettings;
};
struct EducationSettings : generate<EducationSettings> {};

// IPlatformDiagnosticsAndUsageDataSettingsStatics
struct IPlatformDiagnosticsAndUsageDataSettingsStatics : IInspectable {
	virtual STDMETHODIMP _get_CollectionLevel(PlatformDataCollectionLevel *value);
	virtual STDMETHODIMP _add_CollectionLevelChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CollectionLevelChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CanCollectDiagnostics(PlatformDataCollectionLevel level, bool *result);
};

// PlatformDiagnosticsAndUsageDataSettings
template<typename> struct PlatformDiagnosticsAndUsageDataSettings_statics {
	static struct _CollectionLevel : property {
		PlatformDataCollectionLevel get() { PlatformDataCollectionLevel value; hrcheck(get_activation_factory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>()->_get_CollectionLevel(&value)); return value; }
		PlatformDataCollectionLevel operator()() { return get(); }
		operator PlatformDataCollectionLevel () { return get(); }
	} CollectionLevel;
	static struct _CollectionLevelChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>()->_add_CollectionLevelChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>()->_remove_CollectionLevelChanged(token)); }
	} CollectionLevelChanged;
	static bool CanCollectDiagnostics(PlatformDataCollectionLevel level) { bool result; hrcheck(get_activation_factory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>()->_CanCollectDiagnostics(level, &result)); return result; }
};
template<typename X> typename PlatformDiagnosticsAndUsageDataSettings_statics<X>::_CollectionLevel PlatformDiagnosticsAndUsageDataSettings_statics<X>::CollectionLevel;
template<typename X> typename PlatformDiagnosticsAndUsageDataSettings_statics<X>::_CollectionLevelChanged PlatformDiagnosticsAndUsageDataSettings_statics<X>::CollectionLevelChanged;

template<typename X> struct statics<PlatformDiagnosticsAndUsageDataSettings, X> : X, Windows::System::Profile::PlatformDiagnosticsAndUsageDataSettings_statics<void> {
	typedef typename X::root_type PlatformDiagnosticsAndUsageDataSettings;
};
struct PlatformDiagnosticsAndUsageDataSettings : generate<PlatformDiagnosticsAndUsageDataSettings> {};

// IHardwareToken
struct IHardwareToken_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_Signature(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_Certificate(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IHardwareToken_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IHardwareToken_adaptor::Certificate)->_get_Certificate(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Certificate;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IHardwareToken_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Id;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IHardwareToken_adaptor::Signature)->_get_Signature(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Signature;
	};
	IHardwareToken_adaptor() {}
};
template<typename X> struct adapt<IHardwareToken, X> : Windows::System::Profile::IHardwareToken_adaptor<X> { typedef adapt IHardwareToken; };
struct IHardwareToken : IHardwareToken_raw, generate<IHardwareToken> {};

// HardwareToken
template<typename X> struct statics<HardwareToken, X> : X {
	typedef typename X::root_type HardwareToken;
};
struct HardwareToken : generate<HardwareToken> {};

// IHardwareIdentificationStatics
struct IHardwareIdentificationStatics : IInspectable {
	virtual STDMETHODIMP _GetPackageSpecificToken(Storage::Streams::IBuffer* nonce, HardwareToken* *packageSpecificHardwareToken);
};

// HardwareIdentification
template<typename> struct HardwareIdentification_statics {
	static ptr<HardwareToken> GetPackageSpecificToken(pptr<Storage::Streams::IBuffer> nonce) { HardwareToken* packageSpecificHardwareToken; hrcheck(get_activation_factory<HardwareIdentification, IHardwareIdentificationStatics>()->_GetPackageSpecificToken(nonce, &packageSpecificHardwareToken)); return from_abi(packageSpecificHardwareToken); }
};

template<typename X> struct statics<HardwareIdentification, X> : X, Windows::System::Profile::HardwareIdentification_statics<void> {
	typedef typename X::root_type HardwareIdentification;
};
struct HardwareIdentification : generate<HardwareIdentification> {};

// IRetailInfoStatics
struct IRetailInfoStatics : IInspectable {
	virtual STDMETHODIMP _get_IsDemoModeEnabled(bool *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};

// IKnownRetailInfoPropertiesStatics
struct IKnownRetailInfoPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_RetailAccessCode(HSTRING *value);
	virtual STDMETHODIMP _get_ManufacturerName(HSTRING *value);
	virtual STDMETHODIMP _get_ModelName(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayModelName(HSTRING *value);
	virtual STDMETHODIMP _get_Price(HSTRING *value);
	virtual STDMETHODIMP _get_IsFeatured(HSTRING *value);
	virtual STDMETHODIMP _get_FormFactor(HSTRING *value);
	virtual STDMETHODIMP _get_ScreenSize(HSTRING *value);
	virtual STDMETHODIMP _get_Weight(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayDescription(HSTRING *value);
	virtual STDMETHODIMP _get_BatteryLifeDescription(HSTRING *value);
	virtual STDMETHODIMP _get_ProcessorDescription(HSTRING *value);
	virtual STDMETHODIMP _get_Memory(HSTRING *value);
	virtual STDMETHODIMP _get_StorageDescription(HSTRING *value);
	virtual STDMETHODIMP _get_GraphicsDescription(HSTRING *value);
	virtual STDMETHODIMP _get_FrontCameraDescription(HSTRING *value);
	virtual STDMETHODIMP _get_RearCameraDescription(HSTRING *value);
	virtual STDMETHODIMP _get_HasNfc(HSTRING *value);
	virtual STDMETHODIMP _get_HasSdSlot(HSTRING *value);
	virtual STDMETHODIMP _get_HasOpticalDrive(HSTRING *value);
	virtual STDMETHODIMP _get_IsOfficeInstalled(HSTRING *value);
	virtual STDMETHODIMP _get_WindowsEdition(HSTRING *value);
};

// RetailInfo
template<typename> struct RetailInfo_statics {
	static struct _IsDemoModeEnabled : property {
		bool get() { bool value; hrcheck(get_activation_factory<RetailInfo, IRetailInfoStatics>()->_get_IsDemoModeEnabled(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsDemoModeEnabled;
	static struct _Properties : property {
		ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(get_activation_factory<RetailInfo, IRetailInfoStatics>()->_get_Properties(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
		ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
	} Properties;
};
template<typename X> typename RetailInfo_statics<X>::_IsDemoModeEnabled RetailInfo_statics<X>::IsDemoModeEnabled;
template<typename X> typename RetailInfo_statics<X>::_Properties RetailInfo_statics<X>::Properties;

template<typename X> struct statics<RetailInfo, X> : X, Windows::System::Profile::RetailInfo_statics<void> {
	typedef typename X::root_type RetailInfo;
};
struct RetailInfo : generate<RetailInfo> {};

// KnownRetailInfoProperties
template<typename> struct KnownRetailInfoProperties_statics {
	static struct _BatteryLifeDescription : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_BatteryLifeDescription(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BatteryLifeDescription;
	static struct _DisplayDescription : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_DisplayDescription(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DisplayDescription;
	static struct _DisplayModelName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_DisplayModelName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DisplayModelName;
	static struct _FormFactor : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_FormFactor(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FormFactor;
	static struct _FrontCameraDescription : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_FrontCameraDescription(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FrontCameraDescription;
	static struct _GraphicsDescription : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_GraphicsDescription(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GraphicsDescription;
	static struct _HasNfc : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_HasNfc(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HasNfc;
	static struct _HasOpticalDrive : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_HasOpticalDrive(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HasOpticalDrive;
	static struct _HasSdSlot : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_HasSdSlot(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HasSdSlot;
	static struct _IsFeatured : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_IsFeatured(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IsFeatured;
	static struct _IsOfficeInstalled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_IsOfficeInstalled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IsOfficeInstalled;
	static struct _ManufacturerName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_ManufacturerName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ManufacturerName;
	static struct _Memory : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_Memory(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Memory;
	static struct _ModelName : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_ModelName(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ModelName;
	static struct _Price : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_Price(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Price;
	static struct _ProcessorDescription : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_ProcessorDescription(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ProcessorDescription;
	static struct _RearCameraDescription : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_RearCameraDescription(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RearCameraDescription;
	static struct _RetailAccessCode : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_RetailAccessCode(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RetailAccessCode;
	static struct _ScreenSize : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_ScreenSize(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ScreenSize;
	static struct _StorageDescription : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_StorageDescription(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} StorageDescription;
	static struct _Weight : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_Weight(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Weight;
	static struct _WindowsEdition : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>()->_get_WindowsEdition(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WindowsEdition;
};
template<typename X> typename KnownRetailInfoProperties_statics<X>::_BatteryLifeDescription KnownRetailInfoProperties_statics<X>::BatteryLifeDescription;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_DisplayDescription KnownRetailInfoProperties_statics<X>::DisplayDescription;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_DisplayModelName KnownRetailInfoProperties_statics<X>::DisplayModelName;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_FormFactor KnownRetailInfoProperties_statics<X>::FormFactor;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_FrontCameraDescription KnownRetailInfoProperties_statics<X>::FrontCameraDescription;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_GraphicsDescription KnownRetailInfoProperties_statics<X>::GraphicsDescription;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_HasNfc KnownRetailInfoProperties_statics<X>::HasNfc;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_HasOpticalDrive KnownRetailInfoProperties_statics<X>::HasOpticalDrive;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_HasSdSlot KnownRetailInfoProperties_statics<X>::HasSdSlot;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_IsFeatured KnownRetailInfoProperties_statics<X>::IsFeatured;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_IsOfficeInstalled KnownRetailInfoProperties_statics<X>::IsOfficeInstalled;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_ManufacturerName KnownRetailInfoProperties_statics<X>::ManufacturerName;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_Memory KnownRetailInfoProperties_statics<X>::Memory;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_ModelName KnownRetailInfoProperties_statics<X>::ModelName;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_Price KnownRetailInfoProperties_statics<X>::Price;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_ProcessorDescription KnownRetailInfoProperties_statics<X>::ProcessorDescription;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_RearCameraDescription KnownRetailInfoProperties_statics<X>::RearCameraDescription;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_RetailAccessCode KnownRetailInfoProperties_statics<X>::RetailAccessCode;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_ScreenSize KnownRetailInfoProperties_statics<X>::ScreenSize;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_StorageDescription KnownRetailInfoProperties_statics<X>::StorageDescription;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_Weight KnownRetailInfoProperties_statics<X>::Weight;
template<typename X> typename KnownRetailInfoProperties_statics<X>::_WindowsEdition KnownRetailInfoProperties_statics<X>::WindowsEdition;

template<typename X> struct statics<KnownRetailInfoProperties, X> : X, Windows::System::Profile::KnownRetailInfoProperties_statics<void> {
	typedef typename X::root_type KnownRetailInfoProperties;
};
struct KnownRetailInfoProperties : generate<KnownRetailInfoProperties> {};

// ISharedModeSettingsStatics
struct ISharedModeSettingsStatics : IInspectable {
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
};

// ISharedModeSettingsStatics2
struct ISharedModeSettingsStatics2 : IInspectable {
	virtual STDMETHODIMP _get_ShouldAvoidLocalStorage(bool *value);
};

// SharedModeSettings
template<typename> struct SharedModeSettings_statics {
	static struct _IsEnabled : property {
		bool get() { bool value; hrcheck(get_activation_factory<SharedModeSettings, ISharedModeSettingsStatics>()->_get_IsEnabled(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsEnabled;
	static struct _ShouldAvoidLocalStorage : property {
		bool get() { bool value; hrcheck(get_activation_factory<SharedModeSettings, ISharedModeSettingsStatics2>()->_get_ShouldAvoidLocalStorage(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} ShouldAvoidLocalStorage;
};
template<typename X> typename SharedModeSettings_statics<X>::_IsEnabled SharedModeSettings_statics<X>::IsEnabled;
template<typename X> typename SharedModeSettings_statics<X>::_ShouldAvoidLocalStorage SharedModeSettings_statics<X>::ShouldAvoidLocalStorage;

template<typename X> struct statics<SharedModeSettings, X> : X, Windows::System::Profile::SharedModeSettings_statics<void> {
	typedef typename X::root_type SharedModeSettings;
};
struct SharedModeSettings : generate<SharedModeSettings> {};
}}}
} // namespace iso_winrt
