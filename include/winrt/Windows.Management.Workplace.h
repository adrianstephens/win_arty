#pragma once
// generated by isopod tools
// namespaces:
// Windows.Management.Workplace

#include "Windows.Management.Workplace.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Management::Workplace::MessagingSyncPolicy> : enum_type<int> {};
template<> struct def<Windows::Management::Workplace::IMdmPolicyStatics2> : interface_type<> {};
template<> struct def<Windows::Management::Workplace::IMdmAllowPolicyStatics> : interface_type<> {};
template<> struct def<Windows::Management::Workplace::MdmPolicy> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Management::Workplace::WorkplaceSettingsContract> : value_type<> {};
template<> struct def<Windows::Management::Workplace::IWorkplaceSettingsStatics> : interface_type<> {};
template<> struct def<Windows::Management::Workplace::WorkplaceSettings> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Management::Workplace::IMdmPolicyStatics2> { define_guid(0xC99C7526, 0x3D4, 0x49F9, 0xA9, 0x93, 0x43, 0xEF, 0xCC, 0xD2, 0x65, 0xC4);};
template<> struct uuid<Windows::Management::Workplace::IMdmAllowPolicyStatics> { define_guid(0xC39709E7, 0x741C, 0x41F2, 0xA4, 0xB6, 0x31, 0x4C, 0x31, 0x50, 0x25, 0x86);};
template<> struct uuid<Windows::Management::Workplace::IWorkplaceSettingsStatics> { define_guid(0xE4676FFD, 0x2D92, 0x4C08, 0xBA, 0xD4, 0xF6, 0x59, 0xB, 0x54, 0xA6, 0xD3);};

// types

namespace Windows { namespace Management { namespace Workplace {

// IMdmPolicyStatics2
struct IMdmPolicyStatics2 : IInspectable {
	virtual STDMETHODIMP _GetMessagingSyncPolicy(MessagingSyncPolicy *value);
};

// IMdmAllowPolicyStatics
struct IMdmAllowPolicyStatics : IInspectable {
	virtual STDMETHODIMP _IsBrowserAllowed(bool *value);
	virtual STDMETHODIMP _IsCameraAllowed(bool *value);
	virtual STDMETHODIMP _IsMicrosoftAccountAllowed(bool *value);
	virtual STDMETHODIMP _IsStoreAllowed(bool *value);
};

// MdmPolicy
template<typename> struct MdmPolicy_statics {
	static MessagingSyncPolicy GetMessagingSyncPolicy() { MessagingSyncPolicy value; hrcheck(get_activation_factory<MdmPolicy, IMdmPolicyStatics2>()->_GetMessagingSyncPolicy(&value)); return value; }
	static bool IsBrowserAllowed() { bool value; hrcheck(get_activation_factory<MdmPolicy, IMdmAllowPolicyStatics>()->_IsBrowserAllowed(&value)); return value; }
	static bool IsCameraAllowed() { bool value; hrcheck(get_activation_factory<MdmPolicy, IMdmAllowPolicyStatics>()->_IsCameraAllowed(&value)); return value; }
	static bool IsMicrosoftAccountAllowed() { bool value; hrcheck(get_activation_factory<MdmPolicy, IMdmAllowPolicyStatics>()->_IsMicrosoftAccountAllowed(&value)); return value; }
	static bool IsStoreAllowed() { bool value; hrcheck(get_activation_factory<MdmPolicy, IMdmAllowPolicyStatics>()->_IsStoreAllowed(&value)); return value; }
};

template<typename X> struct statics<MdmPolicy, X> : X, Windows::Management::Workplace::MdmPolicy_statics<void> {
	typedef typename X::root_type MdmPolicy;
};
struct MdmPolicy : generate<MdmPolicy> {};

// IWorkplaceSettingsStatics
struct IWorkplaceSettingsStatics : IInspectable {
	virtual STDMETHODIMP _get_IsMicrosoftAccountOptional(bool *value);
};

// WorkplaceSettings
template<typename> struct WorkplaceSettings_statics {
	static struct _IsMicrosoftAccountOptional : property {
		bool get() { bool value; hrcheck(get_activation_factory<WorkplaceSettings, IWorkplaceSettingsStatics>()->_get_IsMicrosoftAccountOptional(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} IsMicrosoftAccountOptional;
};
template<typename X> typename WorkplaceSettings_statics<X>::_IsMicrosoftAccountOptional WorkplaceSettings_statics<X>::IsMicrosoftAccountOptional;

template<typename X> struct statics<WorkplaceSettings, X> : X, Windows::Management::Workplace::WorkplaceSettings_statics<void> {
	typedef typename X::root_type WorkplaceSettings;
};
struct WorkplaceSettings : generate<WorkplaceSettings> {};
}}}
} // namespace iso_winrt
