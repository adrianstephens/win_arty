#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.Diagnostics.Telemetry

#include "Windows.System.Diagnostics.Telemetry.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationSettings> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationStatus> : enum_type<int> {};
template<> struct def<Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationResult> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationResult> : class_type<Platform::Object, Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationResult> {};
template<> struct def<Windows::System::Diagnostics::Telemetry::PlatformTelemetryRegistrationSettings> : class_type<Platform::Object, Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationSettings> {};
template<> struct def<Windows::System::Diagnostics::Telemetry::IPlatformTelemetryClientStatics> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationSettings> { define_guid(0x819A8582, 0xCA19, 0x415E, 0xBB, 0x79, 0x9C, 0x22, 0x4B, 0xFA, 0x3A, 0x73);};
template<> struct uuid<Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationResult> { define_guid(0x4D8518AB, 0x2292, 0x49BD, 0xA1, 0x5A, 0x3D, 0x71, 0xD2, 0x14, 0x51, 0x12);};
template<> struct uuid<Windows::System::Diagnostics::Telemetry::IPlatformTelemetryClientStatics> { define_guid(0x9BF3F25D, 0xD5C3, 0x4EEA, 0x8D, 0xBE, 0x9C, 0x8D, 0xBB, 0xD, 0x9D, 0x8F);};

// types

namespace Windows { namespace System { namespace Diagnostics { namespace Telemetry {

// IPlatformTelemetryRegistrationSettings
struct IPlatformTelemetryRegistrationSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_StorageSize(unsigned *value);
	virtual STDMETHODIMP _put_StorageSize(unsigned value);
	virtual STDMETHODIMP _get_UploadQuotaSize(unsigned *value);
	virtual STDMETHODIMP _put_UploadQuotaSize(unsigned value);
};
template<typename X> struct IPlatformTelemetryRegistrationSettings_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPlatformTelemetryRegistrationSettings_adaptor::StorageSize)->_get_StorageSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPlatformTelemetryRegistrationSettings_adaptor::StorageSize)->_put_StorageSize(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} StorageSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPlatformTelemetryRegistrationSettings_adaptor::UploadQuotaSize)->_get_UploadQuotaSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPlatformTelemetryRegistrationSettings_adaptor::UploadQuotaSize)->_put_UploadQuotaSize(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} UploadQuotaSize;
	};
	IPlatformTelemetryRegistrationSettings_adaptor() {}
};
template<typename X> struct adapt<IPlatformTelemetryRegistrationSettings, X> : Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationSettings_adaptor<X> { typedef adapt IPlatformTelemetryRegistrationSettings; };
struct IPlatformTelemetryRegistrationSettings : IPlatformTelemetryRegistrationSettings_raw, generate<IPlatformTelemetryRegistrationSettings> {};

// IPlatformTelemetryRegistrationResult
struct IPlatformTelemetryRegistrationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(PlatformTelemetryRegistrationStatus *value);
};
template<typename X> struct IPlatformTelemetryRegistrationResult_adaptor : X {
	union {
		struct : property {
			PlatformTelemetryRegistrationStatus get() { PlatformTelemetryRegistrationStatus value; hrcheck(enc(&IPlatformTelemetryRegistrationResult_adaptor::Status)->_get_Status(&value)); return value; }
			PlatformTelemetryRegistrationStatus operator()() { return get(); }
			operator PlatformTelemetryRegistrationStatus () { return get(); }
		} Status;
	};
	IPlatformTelemetryRegistrationResult_adaptor() {}
};
template<typename X> struct adapt<IPlatformTelemetryRegistrationResult, X> : Windows::System::Diagnostics::Telemetry::IPlatformTelemetryRegistrationResult_adaptor<X> { typedef adapt IPlatformTelemetryRegistrationResult; };
struct IPlatformTelemetryRegistrationResult : IPlatformTelemetryRegistrationResult_raw, generate<IPlatformTelemetryRegistrationResult> {};

// PlatformTelemetryRegistrationResult
template<typename X> struct statics<PlatformTelemetryRegistrationResult, X> : X {
	typedef typename X::root_type PlatformTelemetryRegistrationResult;
};
struct PlatformTelemetryRegistrationResult : generate<PlatformTelemetryRegistrationResult> {};

// PlatformTelemetryRegistrationSettings
template<typename X> struct statics<PlatformTelemetryRegistrationSettings, X> : X {
	typedef typename X::root_type PlatformTelemetryRegistrationSettings;
};
struct PlatformTelemetryRegistrationSettings : generate<PlatformTelemetryRegistrationSettings> {};

// IPlatformTelemetryClientStatics
struct IPlatformTelemetryClientStatics : IInspectable {
	virtual STDMETHODIMP _Register(HSTRING id, PlatformTelemetryRegistrationResult* *result);
	virtual STDMETHODIMP _RegisterWithSettings(HSTRING id, PlatformTelemetryRegistrationSettings* settings, PlatformTelemetryRegistrationResult* *result);
};

// PlatformTelemetryClient
template<typename> struct PlatformTelemetryClient_statics {
	static ptr<PlatformTelemetryRegistrationResult> Register(hstring_ref id) { PlatformTelemetryRegistrationResult* result; hrcheck(get_activation_factory<PlatformTelemetryClient, IPlatformTelemetryClientStatics>()->_Register(id, &result)); return from_abi(result); }
	static ptr<PlatformTelemetryRegistrationResult> Register(hstring_ref id, pptr<PlatformTelemetryRegistrationSettings> settings) { PlatformTelemetryRegistrationResult* result; hrcheck(get_activation_factory<PlatformTelemetryClient, IPlatformTelemetryClientStatics>()->_RegisterWithSettings(id, settings, &result)); return from_abi(result); }
};

template<typename X> struct statics<PlatformTelemetryClient, X> : X, Windows::System::Diagnostics::Telemetry::PlatformTelemetryClient_statics<void> {
	typedef typename X::root_type PlatformTelemetryClient;
};
struct PlatformTelemetryClient : generate<PlatformTelemetryClient> {};
}}}}
} // namespace iso_winrt
