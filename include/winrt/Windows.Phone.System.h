#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.System

#include "Windows.Phone.System.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Phone::System::ISystemProtectionStatics> : interface_type<> {};
template<> struct def<Windows::Phone::System::ISystemProtectionUnlockStatics> : interface_type<> {};
template<> struct def<Windows::Phone::System::SystemProtection> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Phone::System::ISystemProtectionStatics> { define_guid(0x49C36560, 0x97E1, 0x4D99, 0x8B, 0xFB, 0xBE, 0xFE, 0xAA, 0x6A, 0xCE, 0x6D);};
template<> struct uuid<Windows::Phone::System::ISystemProtectionUnlockStatics> { define_guid(0x692FA3F, 0x8F11, 0x4C4B, 0xAA, 0xD, 0x87, 0xD7, 0xAF, 0x7B, 0x17, 0x79);};

// types

namespace Windows { namespace Phone { namespace System {

// ISystemProtectionStatics
struct ISystemProtectionStatics : IInspectable {
	virtual STDMETHODIMP _get_ScreenLocked(bool *value);
};

// ISystemProtectionUnlockStatics
struct ISystemProtectionUnlockStatics : IInspectable {
	virtual STDMETHODIMP _RequestScreenUnlock();
};

// SystemProtection
template<typename> struct SystemProtection_statics {
	static struct _ScreenLocked : property {
		bool get() { bool value; hrcheck(get_activation_factory<SystemProtection, ISystemProtectionStatics>()->_get_ScreenLocked(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} ScreenLocked;
	static void RequestScreenUnlock() { hrcheck(get_activation_factory<SystemProtection, ISystemProtectionUnlockStatics>()->_RequestScreenUnlock()); }
};
template<typename X> typename SystemProtection_statics<X>::_ScreenLocked SystemProtection_statics<X>::ScreenLocked;

template<typename X> struct statics<SystemProtection, X> : X, Windows::Phone::System::SystemProtection_statics<void> {
	typedef typename X::root_type SystemProtection;
};
struct SystemProtection : generate<SystemProtection> {};
}}}
} // namespace iso_winrt
