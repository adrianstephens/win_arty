#pragma once
// generated by isopod tools
// namespaces:
// Windows.Services.Cortana

#include "Windows.Services.Cortana.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
}
template<typename TResult> struct IAsyncOperation;
}}

// defs

template<> struct def<Windows::Services::Cortana::CortanaPermission> : enum_type<int> {};
template<> struct def<Windows::Services::Cortana::CortanaPermissionsChangeResult> : enum_type<int> {};
template<> struct def<Windows::Services::Cortana::ICortanaPermissionsManager> : interface_type<> {};
template<> struct def<Windows::Services::Cortana::ICortanaPermissionsManagerStatics> : interface_type<> {};
template<> struct def<Windows::Services::Cortana::CortanaPermissionsManager> : class_type<Platform::Object, Windows::Services::Cortana::ICortanaPermissionsManager> {};
template<> struct def<Windows::Services::Cortana::ICortanaSettings> : interface_type<> {};
template<> struct def<Windows::Services::Cortana::ICortanaSettingsStatics> : interface_type<> {};
template<> struct def<Windows::Services::Cortana::CortanaSettings> : class_type<Platform::Object, Windows::Services::Cortana::ICortanaSettings> {};

// uuids

template<> struct uuid<Windows::Services::Cortana::ICortanaPermissionsManager> { define_guid(0x191330E0, 0x8695, 0x438A, 0x95, 0x45, 0x3D, 0xA4, 0xE8, 0x22, 0xDD, 0xB4);};
template<> struct uuid<Windows::Services::Cortana::ICortanaPermissionsManagerStatics> { define_guid(0x76B1E67A, 0xB045, 0x4414, 0x9D, 0x6D, 0x2A, 0xD3, 0xA5, 0xFE, 0x3A, 0x7E);};
template<> struct uuid<Windows::Services::Cortana::ICortanaSettings> { define_guid(0x54D571A7, 0x8062, 0x40F4, 0xAB, 0xE7, 0xDE, 0xDF, 0xD6, 0x97, 0xB0, 0x19);};
template<> struct uuid<Windows::Services::Cortana::ICortanaSettingsStatics> { define_guid(0x8B2CCD7E, 0x2EC0, 0x446D, 0x92, 0x85, 0x33, 0xF0, 0x7C, 0xE8, 0xAC, 0x4);};

// types

namespace Windows { namespace Services { namespace Cortana {

// ICortanaPermissionsManager
struct ICortanaPermissionsManager_raw : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *result);
	virtual STDMETHODIMP _ArePermissionsGrantedAsync(Foundation::Collections::IIterable<CortanaPermission>* permissions, Foundation::IAsyncOperation<bool>* *getGrantedPermissionsOperation);
	virtual STDMETHODIMP _GrantPermissionsAsync(Foundation::Collections::IIterable<CortanaPermission>* permissions, Foundation::IAsyncOperation<CortanaPermissionsChangeResult>* *grantOperation);
	virtual STDMETHODIMP _RevokePermissionsAsync(Foundation::Collections::IIterable<CortanaPermission>* permissions, Foundation::IAsyncOperation<CortanaPermissionsChangeResult>* *revokeOperation);
};
template<typename X> struct ICortanaPermissionsManager_adaptor : X {
	bool IsSupported() { bool result; hrcheck(X::get()->_IsSupported(&result)); return result; }
	ptr<Foundation::IAsyncOperation<bool>> ArePermissionsGrantedAsync(pptr<Foundation::Collections::IIterable<CortanaPermission>> permissions) { Foundation::IAsyncOperation<bool>* getGrantedPermissionsOperation; hrcheck(X::get()->_ArePermissionsGrantedAsync(to_abi(permissions), &getGrantedPermissionsOperation)); return from_abi(getGrantedPermissionsOperation); }
	ptr<Foundation::IAsyncOperation<CortanaPermissionsChangeResult>> GrantPermissionsAsync(pptr<Foundation::Collections::IIterable<CortanaPermission>> permissions) { Foundation::IAsyncOperation<CortanaPermissionsChangeResult>* grantOperation; hrcheck(X::get()->_GrantPermissionsAsync(to_abi(permissions), &grantOperation)); return from_abi(grantOperation); }
	ptr<Foundation::IAsyncOperation<CortanaPermissionsChangeResult>> RevokePermissionsAsync(pptr<Foundation::Collections::IIterable<CortanaPermission>> permissions) { Foundation::IAsyncOperation<CortanaPermissionsChangeResult>* revokeOperation; hrcheck(X::get()->_RevokePermissionsAsync(to_abi(permissions), &revokeOperation)); return from_abi(revokeOperation); }
};
template<typename X> struct adapt<ICortanaPermissionsManager, X> : Windows::Services::Cortana::ICortanaPermissionsManager_adaptor<X> { typedef adapt ICortanaPermissionsManager; };
struct ICortanaPermissionsManager : ICortanaPermissionsManager_raw, generate<ICortanaPermissionsManager> {};

// ICortanaPermissionsManagerStatics
struct ICortanaPermissionsManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(CortanaPermissionsManager* *result);
};

// CortanaPermissionsManager
template<typename> struct CortanaPermissionsManager_statics {
	static ptr<CortanaPermissionsManager> GetDefault() { CortanaPermissionsManager* result; hrcheck(get_activation_factory<CortanaPermissionsManager, ICortanaPermissionsManagerStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<CortanaPermissionsManager, X> : X, Windows::Services::Cortana::CortanaPermissionsManager_statics<void> {
	typedef typename X::root_type CortanaPermissionsManager;
};
struct CortanaPermissionsManager : generate<CortanaPermissionsManager> {};

// ICortanaSettings
struct ICortanaSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_HasUserConsentToVoiceActivation(bool *value);
	virtual STDMETHODIMP _get_IsVoiceActivationEnabled(bool *value);
	virtual STDMETHODIMP _put_IsVoiceActivationEnabled(bool value);
};
template<typename X> struct ICortanaSettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICortanaSettings_adaptor::HasUserConsentToVoiceActivation)->_get_HasUserConsentToVoiceActivation(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasUserConsentToVoiceActivation;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICortanaSettings_adaptor::IsVoiceActivationEnabled)->_get_IsVoiceActivationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICortanaSettings_adaptor::IsVoiceActivationEnabled)->_put_IsVoiceActivationEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsVoiceActivationEnabled;
	};
	ICortanaSettings_adaptor() {}
};
template<typename X> struct adapt<ICortanaSettings, X> : Windows::Services::Cortana::ICortanaSettings_adaptor<X> { typedef adapt ICortanaSettings; };
struct ICortanaSettings : ICortanaSettings_raw, generate<ICortanaSettings> {};

// ICortanaSettingsStatics
struct ICortanaSettingsStatics : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *value);
	virtual STDMETHODIMP _GetDefault(CortanaSettings* *result);
};

// CortanaSettings
template<typename> struct CortanaSettings_statics {
	static bool IsSupported() { bool value; hrcheck(get_activation_factory<CortanaSettings, ICortanaSettingsStatics>()->_IsSupported(&value)); return value; }
	static ptr<CortanaSettings> GetDefault() { CortanaSettings* result; hrcheck(get_activation_factory<CortanaSettings, ICortanaSettingsStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<CortanaSettings, X> : X, Windows::Services::Cortana::CortanaSettings_statics<void> {
	typedef typename X::root_type CortanaSettings;
};
struct CortanaSettings : generate<CortanaSettings> {};
}}}
} // namespace iso_winrt
