#pragma once
// generated by isopod tools
// namespaces:
// Windows.Perception.Spatial.Surfaces

#include "Windows.Perception.Spatial.Surfaces.0.h"
#include "Windows.Perception.Spatial.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Graphics.DirectX.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
template<typename K, typename V> struct IMapView;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshBuffer> : interface_type<> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMesh> : interface_type<> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceInfo> : interface_type<> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo> : class_type<Platform::Object, Windows::Perception::Spatial::Surfaces::ISpatialSurfaceInfo> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer> : class_type<Platform::Object, Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshBuffer> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshOptionsStatics> : interface_type<> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshOptions> : interface_type<> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh> : class_type<Platform::Object, Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMesh> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions> : class_type<Platform::Object, Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshOptions> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserverStatics> : interface_type<> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserverStatics2> : interface_type<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserverStatics> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserver> : interface_type<> {};
template<> struct def<Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver> : class_type<Platform::Object, Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserver> {};

// uuids

template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshBuffer> { define_guid(0x93CF59E0, 0x871F, 0x33F8, 0x98, 0xB2, 0x3, 0xD1, 0x1, 0x45, 0x8F, 0x6F);};
template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMesh> { define_guid(0x108F57D9, 0xDF0D, 0x3950, 0xA0, 0xFD, 0xF9, 0x72, 0xC7, 0x7C, 0x27, 0xB4);};
template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceInfo> { define_guid(0xF8E9EBE7, 0x39B7, 0x3962, 0xBB, 0x3, 0x57, 0xF5, 0x6E, 0x1F, 0xB0, 0xA1);};
template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshOptionsStatics> { define_guid(0x9B340ABF, 0x9781, 0x4505, 0x89, 0x35, 0x1, 0x35, 0x75, 0xCA, 0xAE, 0x5E);};
template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshOptions> { define_guid(0xD2759F89, 0x3572, 0x3D2D, 0xA1, 0xD, 0x5F, 0xEE, 0x93, 0x94, 0xAA, 0x37);};
template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserverStatics> { define_guid(0x165951ED, 0x2108, 0x4168, 0x91, 0x75, 0x87, 0xE0, 0x27, 0xBC, 0x92, 0x85);};
template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserverStatics2> { define_guid(0xF534261, 0xC55D, 0x4E6B, 0xA8, 0x95, 0xA1, 0x9D, 0xE6, 0x9A, 0x42, 0xE3);};
template<> struct uuid<Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserver> { define_guid(0x10B69819, 0xDDCA, 0x3483, 0xAC, 0x3A, 0x74, 0x8F, 0xE8, 0xC8, 0x6D, 0xF5);};

// types

namespace Windows { namespace Perception { namespace Spatial { namespace Surfaces {

// ISpatialSurfaceMeshBuffer
struct ISpatialSurfaceMeshBuffer_raw : IInspectable {
	virtual STDMETHODIMP _get_Format(Graphics::DirectX::DirectXPixelFormat *value);
	virtual STDMETHODIMP _get_Stride(unsigned *value);
	virtual STDMETHODIMP _get_ElementCount(unsigned *value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
};
template<typename X> struct ISpatialSurfaceMeshBuffer_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&ISpatialSurfaceMeshBuffer_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Data;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISpatialSurfaceMeshBuffer_adaptor::ElementCount)->_get_ElementCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ElementCount;
		struct : property {
			Graphics::DirectX::DirectXPixelFormat get() { Graphics::DirectX::DirectXPixelFormat value; hrcheck(enc(&ISpatialSurfaceMeshBuffer_adaptor::Format)->_get_Format(&value)); return value; }
			Graphics::DirectX::DirectXPixelFormat operator()() { return get(); }
			operator Graphics::DirectX::DirectXPixelFormat () { return get(); }
		} Format;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISpatialSurfaceMeshBuffer_adaptor::Stride)->_get_Stride(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Stride;
	};
	ISpatialSurfaceMeshBuffer_adaptor() {}
};
template<typename X> struct adapt<ISpatialSurfaceMeshBuffer, X> : Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshBuffer_adaptor<X> { typedef adapt ISpatialSurfaceMeshBuffer; };
struct ISpatialSurfaceMeshBuffer : ISpatialSurfaceMeshBuffer_raw, generate<ISpatialSurfaceMeshBuffer> {};

// ISpatialSurfaceMesh
struct ISpatialSurfaceMesh_raw : IInspectable {
	virtual STDMETHODIMP _get_SurfaceInfo(SpatialSurfaceInfo* *value);
	virtual STDMETHODIMP _get_CoordinateSystem(SpatialCoordinateSystem* *value);
	virtual STDMETHODIMP _get_TriangleIndices(SpatialSurfaceMeshBuffer* *value);
	virtual STDMETHODIMP _get_VertexPositions(SpatialSurfaceMeshBuffer* *value);
	virtual STDMETHODIMP _get_VertexPositionScale(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _get_VertexNormals(SpatialSurfaceMeshBuffer* *value);
};
template<typename X> struct ISpatialSurfaceMesh_adaptor : X {
	union {
		struct : property {
			ptr<SpatialCoordinateSystem> get() { SpatialCoordinateSystem* value; hrcheck(enc(&ISpatialSurfaceMesh_adaptor::CoordinateSystem)->_get_CoordinateSystem(&value)); return from_abi(value); }
			ptr<SpatialCoordinateSystem> operator()() { return get(); }
			operator ptr<SpatialCoordinateSystem> () { return get(); }
			ptr<SpatialCoordinateSystem> operator->() { return get(); }
		} CoordinateSystem;
		struct : property {
			ptr<SpatialSurfaceInfo> get() { SpatialSurfaceInfo* value; hrcheck(enc(&ISpatialSurfaceMesh_adaptor::SurfaceInfo)->_get_SurfaceInfo(&value)); return from_abi(value); }
			ptr<SpatialSurfaceInfo> operator()() { return get(); }
			operator ptr<SpatialSurfaceInfo> () { return get(); }
			ptr<SpatialSurfaceInfo> operator->() { return get(); }
		} SurfaceInfo;
		struct : property {
			ptr<SpatialSurfaceMeshBuffer> get() { SpatialSurfaceMeshBuffer* value; hrcheck(enc(&ISpatialSurfaceMesh_adaptor::TriangleIndices)->_get_TriangleIndices(&value)); return from_abi(value); }
			ptr<SpatialSurfaceMeshBuffer> operator()() { return get(); }
			operator ptr<SpatialSurfaceMeshBuffer> () { return get(); }
			ptr<SpatialSurfaceMeshBuffer> operator->() { return get(); }
		} TriangleIndices;
		struct : property {
			ptr<SpatialSurfaceMeshBuffer> get() { SpatialSurfaceMeshBuffer* value; hrcheck(enc(&ISpatialSurfaceMesh_adaptor::VertexNormals)->_get_VertexNormals(&value)); return from_abi(value); }
			ptr<SpatialSurfaceMeshBuffer> operator()() { return get(); }
			operator ptr<SpatialSurfaceMeshBuffer> () { return get(); }
			ptr<SpatialSurfaceMeshBuffer> operator->() { return get(); }
		} VertexNormals;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ISpatialSurfaceMesh_adaptor::VertexPositionScale)->_get_VertexPositionScale(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} VertexPositionScale;
		struct : property {
			ptr<SpatialSurfaceMeshBuffer> get() { SpatialSurfaceMeshBuffer* value; hrcheck(enc(&ISpatialSurfaceMesh_adaptor::VertexPositions)->_get_VertexPositions(&value)); return from_abi(value); }
			ptr<SpatialSurfaceMeshBuffer> operator()() { return get(); }
			operator ptr<SpatialSurfaceMeshBuffer> () { return get(); }
			ptr<SpatialSurfaceMeshBuffer> operator->() { return get(); }
		} VertexPositions;
	};
	ISpatialSurfaceMesh_adaptor() {}
};
template<typename X> struct adapt<ISpatialSurfaceMesh, X> : Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMesh_adaptor<X> { typedef adapt ISpatialSurfaceMesh; };
struct ISpatialSurfaceMesh : ISpatialSurfaceMesh_raw, generate<ISpatialSurfaceMesh> {};

// ISpatialSurfaceInfo
struct ISpatialSurfaceInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(Platform::Guid *value);
	virtual STDMETHODIMP _get_UpdateTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _TryGetBounds(SpatialCoordinateSystem* coordinateSystem, Foundation::IReference<SpatialBoundingOrientedBox>* *value);
	virtual STDMETHODIMP _TryComputeLatestMeshAsync(double maxTrianglesPerCubicMeter, Foundation::IAsyncOperation<SpatialSurfaceMesh*>* *value);
	virtual STDMETHODIMP _TryComputeLatestMeshWithOptionsAsync(double maxTrianglesPerCubicMeter, SpatialSurfaceMeshOptions* options, Foundation::IAsyncOperation<SpatialSurfaceMesh*>* *value);
};
template<typename X> struct ISpatialSurfaceInfo_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ISpatialSurfaceInfo_adaptor::Id)->_get_Id(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} Id;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISpatialSurfaceInfo_adaptor::UpdateTime)->_get_UpdateTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} UpdateTime;
	};
	ptr<Foundation::IReference<SpatialBoundingOrientedBox>> TryGetBounds(pptr<SpatialCoordinateSystem> coordinateSystem) { Foundation::IReference<SpatialBoundingOrientedBox>* value; hrcheck(X::get()->_TryGetBounds(coordinateSystem, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<SpatialSurfaceMesh>>> TryComputeLatestMeshAsync(double maxTrianglesPerCubicMeter) { Foundation::IAsyncOperation<SpatialSurfaceMesh*>* value; hrcheck(X::get()->_TryComputeLatestMeshAsync(maxTrianglesPerCubicMeter, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<SpatialSurfaceMesh>>> TryComputeLatestMeshAsync(double maxTrianglesPerCubicMeter, pptr<SpatialSurfaceMeshOptions> options) { Foundation::IAsyncOperation<SpatialSurfaceMesh*>* value; hrcheck(X::get()->_TryComputeLatestMeshWithOptionsAsync(maxTrianglesPerCubicMeter, options, &value)); return from_abi(value); }
	ISpatialSurfaceInfo_adaptor() {}
};
template<typename X> struct adapt<ISpatialSurfaceInfo, X> : Windows::Perception::Spatial::Surfaces::ISpatialSurfaceInfo_adaptor<X> { typedef adapt ISpatialSurfaceInfo; };
struct ISpatialSurfaceInfo : ISpatialSurfaceInfo_raw, generate<ISpatialSurfaceInfo> {};

// SpatialSurfaceInfo
template<typename X> struct statics<SpatialSurfaceInfo, X> : X {
	typedef typename X::root_type SpatialSurfaceInfo;
};
struct SpatialSurfaceInfo : generate<SpatialSurfaceInfo> {
	using ISpatialSurfaceInfo::TryComputeLatestMeshAsync;
};

// SpatialSurfaceMeshBuffer
template<typename X> struct statics<SpatialSurfaceMeshBuffer, X> : X {
	typedef typename X::root_type SpatialSurfaceMeshBuffer;
};
struct SpatialSurfaceMeshBuffer : generate<SpatialSurfaceMeshBuffer> {};

// ISpatialSurfaceMeshOptionsStatics
struct ISpatialSurfaceMeshOptionsStatics : IInspectable {
	virtual STDMETHODIMP _get_SupportedVertexPositionFormats(Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>* *value);
	virtual STDMETHODIMP _get_SupportedTriangleIndexFormats(Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>* *value);
	virtual STDMETHODIMP _get_SupportedVertexNormalFormats(Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>* *value);
};

// ISpatialSurfaceMeshOptions
struct ISpatialSurfaceMeshOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_VertexPositionFormat(Graphics::DirectX::DirectXPixelFormat *value);
	virtual STDMETHODIMP _put_VertexPositionFormat(Graphics::DirectX::DirectXPixelFormat value);
	virtual STDMETHODIMP _get_TriangleIndexFormat(Graphics::DirectX::DirectXPixelFormat *value);
	virtual STDMETHODIMP _put_TriangleIndexFormat(Graphics::DirectX::DirectXPixelFormat value);
	virtual STDMETHODIMP _get_VertexNormalFormat(Graphics::DirectX::DirectXPixelFormat *value);
	virtual STDMETHODIMP _put_VertexNormalFormat(Graphics::DirectX::DirectXPixelFormat value);
	virtual STDMETHODIMP _get_IncludeVertexNormals(bool *value);
	virtual STDMETHODIMP _put_IncludeVertexNormals(bool value);
};
template<typename X> struct ISpatialSurfaceMeshOptions_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::IncludeVertexNormals)->_get_IncludeVertexNormals(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::IncludeVertexNormals)->_put_IncludeVertexNormals(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IncludeVertexNormals;
		struct : property {
			Graphics::DirectX::DirectXPixelFormat get() { Graphics::DirectX::DirectXPixelFormat value; hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::TriangleIndexFormat)->_get_TriangleIndexFormat(&value)); return value; }
			Graphics::DirectX::DirectXPixelFormat operator()() { return get(); }
			operator Graphics::DirectX::DirectXPixelFormat () { return get(); }
			void put(Graphics::DirectX::DirectXPixelFormat value) { hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::TriangleIndexFormat)->_put_TriangleIndexFormat(value)); }
			void operator=(Graphics::DirectX::DirectXPixelFormat value) { put(value); }
			void operator()(Graphics::DirectX::DirectXPixelFormat value) { put(value); }
		} TriangleIndexFormat;
		struct : property {
			Graphics::DirectX::DirectXPixelFormat get() { Graphics::DirectX::DirectXPixelFormat value; hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::VertexNormalFormat)->_get_VertexNormalFormat(&value)); return value; }
			Graphics::DirectX::DirectXPixelFormat operator()() { return get(); }
			operator Graphics::DirectX::DirectXPixelFormat () { return get(); }
			void put(Graphics::DirectX::DirectXPixelFormat value) { hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::VertexNormalFormat)->_put_VertexNormalFormat(value)); }
			void operator=(Graphics::DirectX::DirectXPixelFormat value) { put(value); }
			void operator()(Graphics::DirectX::DirectXPixelFormat value) { put(value); }
		} VertexNormalFormat;
		struct : property {
			Graphics::DirectX::DirectXPixelFormat get() { Graphics::DirectX::DirectXPixelFormat value; hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::VertexPositionFormat)->_get_VertexPositionFormat(&value)); return value; }
			Graphics::DirectX::DirectXPixelFormat operator()() { return get(); }
			operator Graphics::DirectX::DirectXPixelFormat () { return get(); }
			void put(Graphics::DirectX::DirectXPixelFormat value) { hrcheck(enc(&ISpatialSurfaceMeshOptions_adaptor::VertexPositionFormat)->_put_VertexPositionFormat(value)); }
			void operator=(Graphics::DirectX::DirectXPixelFormat value) { put(value); }
			void operator()(Graphics::DirectX::DirectXPixelFormat value) { put(value); }
		} VertexPositionFormat;
	};
	ISpatialSurfaceMeshOptions_adaptor() {}
};
template<typename X> struct adapt<ISpatialSurfaceMeshOptions, X> : Windows::Perception::Spatial::Surfaces::ISpatialSurfaceMeshOptions_adaptor<X> { typedef adapt ISpatialSurfaceMeshOptions; };
struct ISpatialSurfaceMeshOptions : ISpatialSurfaceMeshOptions_raw, generate<ISpatialSurfaceMeshOptions> {};

// SpatialSurfaceMesh
template<typename X> struct statics<SpatialSurfaceMesh, X> : X {
	typedef typename X::root_type SpatialSurfaceMesh;
};
struct SpatialSurfaceMesh : generate<SpatialSurfaceMesh> {};

// SpatialSurfaceMeshOptions
template<typename> struct SpatialSurfaceMeshOptions_statics {
	static struct _SupportedTriangleIndexFormats : property {
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> get() { Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>* value; hrcheck(get_activation_factory<SpatialSurfaceMeshOptions, ISpatialSurfaceMeshOptionsStatics>()->_get_SupportedTriangleIndexFormats(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> operator->() { return get(); }
	} SupportedTriangleIndexFormats;
	static struct _SupportedVertexNormalFormats : property {
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> get() { Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>* value; hrcheck(get_activation_factory<SpatialSurfaceMeshOptions, ISpatialSurfaceMeshOptionsStatics>()->_get_SupportedVertexNormalFormats(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> operator->() { return get(); }
	} SupportedVertexNormalFormats;
	static struct _SupportedVertexPositionFormats : property {
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> get() { Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>* value; hrcheck(get_activation_factory<SpatialSurfaceMeshOptions, ISpatialSurfaceMeshOptionsStatics>()->_get_SupportedVertexPositionFormats(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<Graphics::DirectX::DirectXPixelFormat>> operator->() { return get(); }
	} SupportedVertexPositionFormats;
};
template<typename X> typename SpatialSurfaceMeshOptions_statics<X>::_SupportedTriangleIndexFormats SpatialSurfaceMeshOptions_statics<X>::SupportedTriangleIndexFormats;
template<typename X> typename SpatialSurfaceMeshOptions_statics<X>::_SupportedVertexNormalFormats SpatialSurfaceMeshOptions_statics<X>::SupportedVertexNormalFormats;
template<typename X> typename SpatialSurfaceMeshOptions_statics<X>::_SupportedVertexPositionFormats SpatialSurfaceMeshOptions_statics<X>::SupportedVertexPositionFormats;

template<typename X> struct statics<SpatialSurfaceMeshOptions, X> : X, Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions_statics<void> {
	typedef typename X::root_type SpatialSurfaceMeshOptions;
};
struct SpatialSurfaceMeshOptions : generate<SpatialSurfaceMeshOptions> {};

// ISpatialSurfaceObserverStatics
struct ISpatialSurfaceObserverStatics : IInspectable {
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<SpatialPerceptionAccessStatus>* *result);
};

// ISpatialSurfaceObserverStatics2
struct ISpatialSurfaceObserverStatics2 : IInspectable {
	virtual STDMETHODIMP _IsSupported(bool *value);
};

// ISpatialSurfaceObserver
struct ISpatialSurfaceObserver_raw : IInspectable {
	virtual STDMETHODIMP _GetObservedSurfaces(Foundation::Collections::IMapView<Platform::Guid, SpatialSurfaceInfo*>* *value);
	virtual STDMETHODIMP _SetBoundingVolume(SpatialBoundingVolume* bounds);
	virtual STDMETHODIMP _SetBoundingVolumes(Foundation::Collections::IIterable<SpatialBoundingVolume*>* bounds);
	virtual STDMETHODIMP _add_ObservedSurfacesChanged(Foundation::TypedEventHandler<SpatialSurfaceObserver*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ObservedSurfacesChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct ISpatialSurfaceObserver_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SpatialSurfaceObserver>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISpatialSurfaceObserver_adaptor::ObservedSurfacesChanged)->_add_ObservedSurfacesChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISpatialSurfaceObserver_adaptor::ObservedSurfacesChanged)->_remove_ObservedSurfacesChanged(token)); }
		} ObservedSurfacesChanged;
	};
	ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<SpatialSurfaceInfo>>> GetObservedSurfaces() { Foundation::Collections::IMapView<Platform::Guid, SpatialSurfaceInfo*>* value; hrcheck(X::get()->_GetObservedSurfaces(&value)); return from_abi(value); }
	void SetBoundingVolume(pptr<SpatialBoundingVolume> bounds) { hrcheck(X::get()->_SetBoundingVolume(bounds)); }
	void SetBoundingVolumes(pptr<Foundation::Collections::IIterable<ptr<SpatialBoundingVolume>>> bounds) { hrcheck(X::get()->_SetBoundingVolumes(to_abi(bounds))); }
	ISpatialSurfaceObserver_adaptor() {}
};
template<typename X> struct adapt<ISpatialSurfaceObserver, X> : Windows::Perception::Spatial::Surfaces::ISpatialSurfaceObserver_adaptor<X> { typedef adapt ISpatialSurfaceObserver; };
struct ISpatialSurfaceObserver : ISpatialSurfaceObserver_raw, generate<ISpatialSurfaceObserver> {};

// SpatialSurfaceObserver
template<typename> struct SpatialSurfaceObserver_statics {
	static bool IsSupported() { bool value; hrcheck(get_activation_factory<SpatialSurfaceObserver, ISpatialSurfaceObserverStatics2>()->_IsSupported(&value)); return value; }
	static ptr<Foundation::IAsyncOperation<SpatialPerceptionAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<SpatialPerceptionAccessStatus>* result; hrcheck(get_activation_factory<SpatialSurfaceObserver, ISpatialSurfaceObserverStatics>()->_RequestAccessAsync(&result)); return from_abi(result); }
};

template<typename X> struct statics<SpatialSurfaceObserver, X> : X, Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver_statics<void> {
	typedef typename X::root_type SpatialSurfaceObserver;
};
struct SpatialSurfaceObserver : generate<SpatialSurfaceObserver> {};
}}}}
} // namespace iso_winrt
