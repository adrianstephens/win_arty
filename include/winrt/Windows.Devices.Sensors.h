#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Sensors

#include "Windows.Devices.Sensors.0.h"
#include "Windows.Graphics.Display.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::Devices::Sensors::MagnetometerAccuracy> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::ActivityType> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::ActivitySensorReadingConfidence> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::SensorReadingType> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::AccelerometerReadingType> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::SensorOptimizationGoal> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::SensorType> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::ISensorDataThreshold> : overridable_type<> {};
template<> struct def<Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::SensorDataThresholdTriggerDetails> : class_type<Platform::Object, Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerStatics3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometer4> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometer3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometer2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometer> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Accelerometer> : class_type<Platform::Object, Windows::Devices::Sensors::IAccelerometer, Windows::Devices::Sensors::IAccelerometerDeviceId, Windows::Devices::Sensors::IAccelerometer2, Windows::Devices::Sensors::IAccelerometer3, Windows::Devices::Sensors::IAccelerometer4> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::AccelerometerReading> : class_type<Platform::Object, Windows::Devices::Sensors::IAccelerometerReading, Windows::Devices::Sensors::IAccelerometerReading2> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::IAccelerometerShakenEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::AccelerometerShakenEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IAccelerometerShakenEventArgs> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerStatics4> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerStatics3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometer3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometer2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometer> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Inclinometer> : class_type<Platform::Object, Windows::Devices::Sensors::IInclinometer, Windows::Devices::Sensors::IInclinometerDeviceId, Windows::Devices::Sensors::IInclinometer2, Windows::Devices::Sensors::IInclinometer3> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerReadingYawAccuracy> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::InclinometerReading> : class_type<Platform::Object, Windows::Devices::Sensors::IInclinometerReading, Windows::Devices::Sensors::IInclinometerReadingYawAccuracy, Windows::Devices::Sensors::IInclinometerReading2> {};
template<> struct def<Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::InclinometerReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::IGyrometerDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IGyrometerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IGyrometerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IGyrometer3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IGyrometer2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IGyrometer> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Gyrometer> : class_type<Platform::Object, Windows::Devices::Sensors::IGyrometer, Windows::Devices::Sensors::IGyrometerDeviceId, Windows::Devices::Sensors::IGyrometer2, Windows::Devices::Sensors::IGyrometer3> {};
template<> struct def<Windows::Devices::Sensors::IGyrometerReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IGyrometerReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::GyrometerReading> : class_type<Platform::Object, Windows::Devices::Sensors::IGyrometerReading, Windows::Devices::Sensors::IGyrometerReading2> {};
template<> struct def<Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::GyrometerReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::ICompassDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ICompassStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ICompassStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ICompass3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ICompass2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ICompass> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Compass> : class_type<Platform::Object, Windows::Devices::Sensors::ICompass, Windows::Devices::Sensors::ICompassDeviceId, Windows::Devices::Sensors::ICompass2, Windows::Devices::Sensors::ICompass3> {};
template<> struct def<Windows::Devices::Sensors::ICompassReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ICompassReadingHeadingAccuracy> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ICompassReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::CompassReading> : class_type<Platform::Object, Windows::Devices::Sensors::ICompassReading, Windows::Devices::Sensors::ICompassReadingHeadingAccuracy, Windows::Devices::Sensors::ICompassReading2> {};
template<> struct def<Windows::Devices::Sensors::ICompassReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::CompassReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::ICompassReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::ILightSensorDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ILightSensorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ILightSensorStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ILightSensor2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ILightSensor> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::LightSensor> : class_type<Platform::Object, Windows::Devices::Sensors::ILightSensor, Windows::Devices::Sensors::ILightSensorDeviceId, Windows::Devices::Sensors::ILightSensor2> {};
template<> struct def<Windows::Devices::Sensors::ILightSensorReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ILightSensorReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::LightSensorReading> : class_type<Platform::Object, Windows::Devices::Sensors::ILightSensorReading, Windows::Devices::Sensors::ILightSensorReading2> {};
template<> struct def<Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::LightSensorReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::ISensorRotationMatrix> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ISensorQuaternion> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::SensorRotationMatrix> : class_type<Platform::Object, Windows::Devices::Sensors::ISensorRotationMatrix> {};
template<> struct def<Windows::Devices::Sensors::SensorQuaternion> : class_type<Platform::Object, Windows::Devices::Sensors::ISensorQuaternion> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorStatics4> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorStatics3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensor3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensor2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensor> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::OrientationSensor> : class_type<Platform::Object, Windows::Devices::Sensors::IOrientationSensor, Windows::Devices::Sensors::IOrientationSensorDeviceId, Windows::Devices::Sensors::IOrientationSensor2, Windows::Devices::Sensors::IOrientationSensor3> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::OrientationSensorReading> : class_type<Platform::Object, Windows::Devices::Sensors::IOrientationSensorReading, Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy, Windows::Devices::Sensors::IOrientationSensorReading2> {};
template<> struct def<Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::SimpleOrientation> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ISimpleOrientationSensorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ISimpleOrientationSensor2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ISimpleOrientationSensor> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::SimpleOrientationSensor> : class_type<Platform::Object, Windows::Devices::Sensors::ISimpleOrientationSensor, Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId, Windows::Devices::Sensors::ISimpleOrientationSensor2> {};
template<> struct def<Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometerDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometer3> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometer2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometer> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Magnetometer> : class_type<Platform::Object, Windows::Devices::Sensors::IMagnetometer, Windows::Devices::Sensors::IMagnetometerDeviceId, Windows::Devices::Sensors::IMagnetometer2, Windows::Devices::Sensors::IMagnetometer3> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometerReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometerReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::MagnetometerReading> : class_type<Platform::Object, Windows::Devices::Sensors::IMagnetometerReading, Windows::Devices::Sensors::IMagnetometerReading2> {};
template<> struct def<Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::IActivitySensorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IActivitySensor> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ActivitySensor> : class_type<Platform::Object, Windows::Devices::Sensors::IActivitySensor> {};
template<> struct def<Windows::Devices::Sensors::IActivitySensorReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ActivitySensorReading> : class_type<Platform::Object, Windows::Devices::Sensors::IActivitySensorReading> {};
template<> struct def<Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::IActivitySensorReadingChangeReport> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IActivitySensorTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ActivitySensorReadingChangeReport> : class_type<Platform::Object, Windows::Devices::Sensors::IActivitySensorReadingChangeReport> {};
template<> struct def<Windows::Devices::Sensors::ActivitySensorTriggerDetails> : class_type<Platform::Object, Windows::Devices::Sensors::IActivitySensorTriggerDetails> {};
template<> struct def<Windows::Devices::Sensors::IBarometerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IBarometerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IBarometer2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IBarometer> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Barometer> : class_type<Platform::Object, Windows::Devices::Sensors::IBarometer, Windows::Devices::Sensors::IBarometer2> {};
template<> struct def<Windows::Devices::Sensors::IBarometerReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IBarometerReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::BarometerReading> : class_type<Platform::Object, Windows::Devices::Sensors::IBarometerReading, Windows::Devices::Sensors::IBarometerReading2> {};
template<> struct def<Windows::Devices::Sensors::IBarometerReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::BarometerReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IBarometerReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::PedometerStepKind> : enum_type<int> {};
template<> struct def<Windows::Devices::Sensors::IPedometerReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IPedometerReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::PedometerReading> : class_type<Platform::Object, Windows::Devices::Sensors::IPedometerReading> {};
template<> struct def<Windows::Devices::Sensors::IPedometerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IPedometerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IPedometer2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IPedometer> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Pedometer> : class_type<Platform::Object, Windows::Devices::Sensors::IPedometer, Windows::Devices::Sensors::IPedometer2> {};
template<> struct def<Windows::Devices::Sensors::PedometerReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IPedometerReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::IPedometerDataThresholdFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::PedometerDataThreshold> : class_type<Platform::Object, Windows::Devices::Sensors::ISensorDataThreshold>, custom_activators {};
template<> struct def<Windows::Devices::Sensors::IProximitySensorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IProximitySensorStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IProximitySensor> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ProximitySensor> : class_type<Platform::Object, Windows::Devices::Sensors::IProximitySensor> {};
template<> struct def<Windows::Devices::Sensors::IProximitySensorReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ProximitySensorReading> : class_type<Platform::Object, Windows::Devices::Sensors::IProximitySensorReading> {};
template<> struct def<Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs> {};
template<> struct def<Windows::Devices::Sensors::ProximitySensorDisplayOnOffController> : class_type<Platform::Object, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Sensors::IProximitySensorDataThresholdFactory> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::ProximitySensorDataThreshold> : class_type<Platform::Object, Windows::Devices::Sensors::ISensorDataThreshold>, custom_activators {};
template<> struct def<Windows::Devices::Sensors::IAltimeterStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAltimeter2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAltimeter> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Altimeter> : class_type<Platform::Object, Windows::Devices::Sensors::IAltimeter, Windows::Devices::Sensors::IAltimeter2> {};
template<> struct def<Windows::Devices::Sensors::IAltimeterReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::IAltimeterReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::AltimeterReading> : class_type<Platform::Object, Windows::Devices::Sensors::IAltimeterReading, Windows::Devices::Sensors::IAltimeterReading2> {};
template<> struct def<Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::AltimeterReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs> {};

// uuids

template<> struct uuid<Windows::Devices::Sensors::ISensorDataThreshold> { define_guid(0x54DAEC61, 0xFE4B, 0x4E07, 0xB2, 0x60, 0x3A, 0x4C, 0xDF, 0xBE, 0x39, 0x6E);};
template<> struct uuid<Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails> { define_guid(0x9106F1B7, 0xE88D, 0x48B1, 0xBC, 0x90, 0x61, 0x9C, 0x7B, 0x34, 0x93, 0x91);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerDeviceId> { define_guid(0x7EAC64A9, 0x97D5, 0x446D, 0xAB, 0x5A, 0x91, 0x7D, 0xF9, 0xB9, 0x6A, 0x2C);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerStatics> { define_guid(0xA5E28B74, 0x5A87, 0x4A2D, 0xBE, 0xCC, 0xF, 0x90, 0x6E, 0xA0, 0x61, 0xDD);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerStatics3> { define_guid(0x9DE218CF, 0x455D, 0x4CF3, 0x82, 0x0, 0x70, 0xE1, 0x41, 0x3, 0x40, 0xF8);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerStatics2> { define_guid(0xC4C4842F, 0xD86B, 0x4685, 0xB2, 0xD7, 0x33, 0x96, 0xF7, 0x98, 0xD5, 0x7B);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometer4> { define_guid(0x1D373C4F, 0x42D3, 0x45B2, 0x81, 0x44, 0xAB, 0x7F, 0xB6, 0x65, 0xEB, 0x59);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometer3> { define_guid(0x87E0022A, 0xED80, 0x49EB, 0xBF, 0x8A, 0xA4, 0xEA, 0x31, 0xE5, 0xCD, 0x84);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometer2> { define_guid(0xE8F092EE, 0x4964, 0x401A, 0xB6, 0x2, 0x22, 0xD, 0x71, 0x53, 0xC6, 0xA);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometer> { define_guid(0xDF184548, 0x2711, 0x4DA7, 0x80, 0x98, 0x4B, 0x82, 0x20, 0x5D, 0x3C, 0x7D);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerReading2> { define_guid(0xA864AA2, 0x15AE, 0x4A40, 0xBE, 0x55, 0xDB, 0x58, 0xD7, 0xDE, 0x73, 0x89);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerReading> { define_guid(0xB9FE7ACB, 0xD351, 0x40AF, 0x8B, 0xB6, 0x7A, 0xA9, 0xAE, 0x64, 0x1F, 0xB7);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs> { define_guid(0x95C65B, 0xB6AC, 0x475A, 0x9F, 0x44, 0x8B, 0x32, 0xD3, 0x5A, 0x3F, 0x25);};
template<> struct uuid<Windows::Devices::Sensors::IAccelerometerShakenEventArgs> { define_guid(0x95FF01D1, 0x4A28, 0x4F35, 0x98, 0xE8, 0x81, 0x78, 0xAA, 0xE4, 0x8, 0x4A);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerDeviceId> { define_guid(0x1E91982, 0x41FF, 0x4406, 0xAE, 0x83, 0x62, 0x21, 0xF, 0xF1, 0x6F, 0xE3);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerStatics> { define_guid(0xF22EC551, 0x9C30, 0x453A, 0x8B, 0x49, 0x3C, 0x3E, 0xEB, 0x33, 0xCB, 0x61);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerStatics4> { define_guid(0xE8BA96F9, 0x6E85, 0x4A83, 0xAE, 0xD0, 0xD7, 0xCD, 0xCC, 0x98, 0x56, 0xC8);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerStatics3> { define_guid(0xBD9A4280, 0xB91A, 0x4829, 0x93, 0x92, 0xAB, 0xC0, 0xB6, 0xBD, 0xF2, 0xB4);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerStatics2> { define_guid(0x43F9775, 0x6A1E, 0x499C, 0x86, 0xE0, 0x63, 0x8C, 0x1A, 0x86, 0x4B, 0x0);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometer3> { define_guid(0x3A095004, 0xD765, 0x4384, 0xA3, 0xD7, 0x2, 0x83, 0xF3, 0xAB, 0xE6, 0xAE);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometer2> { define_guid(0x29F3393, 0x28B2, 0x45F8, 0xBB, 0x16, 0x61, 0xE8, 0x6A, 0x7F, 0xAE, 0x6E);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometer> { define_guid(0x2648CA6F, 0x2286, 0x406F, 0x91, 0x61, 0xF0, 0xC4, 0xBD, 0x80, 0x6E, 0xBF);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerReading2> { define_guid(0x4F164781, 0xE90B, 0x4658, 0x89, 0x15, 0x1, 0x3, 0xE0, 0x8A, 0x80, 0x5A);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerReadingYawAccuracy> { define_guid(0xB453E880, 0x1FE3, 0x4986, 0xA2, 0x57, 0xE6, 0xEC, 0xE2, 0x72, 0x39, 0x49);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerReading> { define_guid(0x9F44F055, 0xB6F6, 0x497F, 0xB1, 0x27, 0x1A, 0x77, 0x5E, 0x50, 0x14, 0x58);};
template<> struct uuid<Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs> { define_guid(0x4AE91DC1, 0xE7EB, 0x4938, 0x85, 0x11, 0xAE, 0xD, 0x6B, 0x44, 0x4, 0x38);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometerDeviceId> { define_guid(0x1EE5E978, 0x89A2, 0x4275, 0x9E, 0x95, 0x71, 0x26, 0xF4, 0x70, 0x87, 0x60);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometerStatics> { define_guid(0x83B6E7C9, 0xE49D, 0x4B39, 0x86, 0xE6, 0xCD, 0x55, 0x4B, 0xE4, 0xC5, 0xC1);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometerStatics2> { define_guid(0xEF83F7A1, 0xD700, 0x4204, 0x96, 0x13, 0x79, 0xC6, 0xB1, 0x61, 0xDF, 0x4E);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometer3> { define_guid(0x5D6F88D5, 0x8FBC, 0x4484, 0x91, 0x4B, 0x52, 0x8A, 0xDF, 0xD9, 0x47, 0xB1);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometer2> { define_guid(0x63DF2443, 0x8CE8, 0x41C3, 0xAC, 0x44, 0x86, 0x98, 0x81, 0xB, 0x55, 0x7F);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometer> { define_guid(0xFDB9A9C4, 0x84B1, 0x4CA2, 0x97, 0x63, 0x9B, 0x58, 0x95, 0x6, 0xC7, 0xC);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometerReading2> { define_guid(0x16AFE13C, 0x2B89, 0x44BB, 0x82, 0x2B, 0xD1, 0xE1, 0x55, 0x6F, 0xF0, 0x9B);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometerReading> { define_guid(0xB3D6DE5C, 0x1EE4, 0x456F, 0x9D, 0xE7, 0xE2, 0x49, 0x3B, 0x5C, 0x8E, 0x3);};
template<> struct uuid<Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs> { define_guid(0xFDF1895, 0x6F9E, 0x42CE, 0x8D, 0x58, 0x38, 0x8C, 0xA, 0xB8, 0x35, 0x6D);};
template<> struct uuid<Windows::Devices::Sensors::ICompassDeviceId> { define_guid(0xD181CA29, 0xB085, 0x4B1D, 0x87, 0xA, 0x4F, 0xF5, 0x7B, 0xA7, 0x4F, 0xD4);};
template<> struct uuid<Windows::Devices::Sensors::ICompassStatics> { define_guid(0x9ABC97DF, 0x56EC, 0x4C25, 0xB5, 0x4D, 0x40, 0xA6, 0x8B, 0xB5, 0xB2, 0x69);};
template<> struct uuid<Windows::Devices::Sensors::ICompassStatics2> { define_guid(0xACE0EAD, 0x3BAA, 0x4990, 0x9C, 0xE4, 0xBE, 0x9, 0x13, 0x75, 0x4E, 0xD2);};
template<> struct uuid<Windows::Devices::Sensors::ICompass3> { define_guid(0xA424801B, 0xC5EA, 0x4D45, 0xA0, 0xEC, 0x4B, 0x79, 0x1F, 0x4, 0x1A, 0x89);};
template<> struct uuid<Windows::Devices::Sensors::ICompass2> { define_guid(0x36F26D09, 0xC7D7, 0x434F, 0xB4, 0x61, 0x97, 0x9D, 0xDF, 0xC2, 0x32, 0x2F);};
template<> struct uuid<Windows::Devices::Sensors::ICompass> { define_guid(0x292FFA94, 0x1B45, 0x403C, 0xBA, 0x6, 0xB1, 0x6, 0xDB, 0xA6, 0x9A, 0x64);};
template<> struct uuid<Windows::Devices::Sensors::ICompassReading2> { define_guid(0xB13A661E, 0x51BB, 0x4A12, 0xBE, 0xDD, 0xAD, 0x47, 0xFF, 0x87, 0xD2, 0xE8);};
template<> struct uuid<Windows::Devices::Sensors::ICompassReadingHeadingAccuracy> { define_guid(0xE761354E, 0x8911, 0x40F7, 0x9E, 0x16, 0x6E, 0xCC, 0x7D, 0xAE, 0xC5, 0xDE);};
template<> struct uuid<Windows::Devices::Sensors::ICompassReading> { define_guid(0x82911128, 0x513D, 0x4DC9, 0xB7, 0x81, 0x5E, 0xED, 0xFB, 0xF0, 0x2D, 0xC);};
template<> struct uuid<Windows::Devices::Sensors::ICompassReadingChangedEventArgs> { define_guid(0x8F1549B0, 0xE8BC, 0x4C7E, 0xB0, 0x9, 0x4E, 0x41, 0xDF, 0x13, 0x70, 0x72);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensorDeviceId> { define_guid(0x7FEE49F8, 0xAFB, 0x4F51, 0x87, 0xF0, 0x6C, 0x26, 0x37, 0x5C, 0xE9, 0x4F);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensorStatics> { define_guid(0x45DB8C84, 0xC3A8, 0x471E, 0x9A, 0x53, 0x64, 0x57, 0xFA, 0xD8, 0x7C, 0xE);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensorStatics2> { define_guid(0xEC0A650, 0xDDC6, 0x40AB, 0xAC, 0xE3, 0xEC, 0x33, 0x59, 0xD4, 0x2C, 0x51);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensor2> { define_guid(0x486B24E8, 0xA94C, 0x4090, 0x8F, 0x48, 0x9, 0xF7, 0x82, 0xA9, 0xF7, 0xD5);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensor> { define_guid(0xF84C0718, 0xC54, 0x47AE, 0x92, 0x2E, 0x78, 0x9F, 0x57, 0xFB, 0x3, 0xA0);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensorReading2> { define_guid(0xB7512185, 0x44A3, 0x44C9, 0x81, 0x90, 0x9E, 0xF6, 0xDE, 0xA, 0x8A, 0x74);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensorReading> { define_guid(0xFFDF6300, 0x227C, 0x4D2B, 0xB3, 0x2, 0xFC, 0x1, 0x42, 0x48, 0x5C, 0x68);};
template<> struct uuid<Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs> { define_guid(0xA3A2F4CF, 0x258B, 0x420C, 0xB8, 0xAB, 0x8E, 0xDD, 0x60, 0x1E, 0xCF, 0x50);};
template<> struct uuid<Windows::Devices::Sensors::ISensorRotationMatrix> { define_guid(0xA3D5A67, 0x22F4, 0x4392, 0x95, 0x38, 0x65, 0xD0, 0xBD, 0x6, 0x4A, 0xA6);};
template<> struct uuid<Windows::Devices::Sensors::ISensorQuaternion> { define_guid(0xC9C5C827, 0xC71C, 0x46E7, 0x9D, 0xA3, 0x36, 0xA1, 0x93, 0xB2, 0x32, 0xBC);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorDeviceId> { define_guid(0x5A69B648, 0x4C29, 0x49EC, 0xB2, 0x8F, 0xEA, 0x1D, 0x11, 0x7B, 0x66, 0xF0);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorStatics> { define_guid(0x10EF8712, 0xFB4C, 0x428A, 0x89, 0x8B, 0x27, 0x65, 0xE4, 0x9, 0xE6, 0x69);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorStatics4> { define_guid(0xA67FEB55, 0x2C85, 0x4B28, 0xA0, 0xFE, 0x58, 0xC4, 0xB2, 0x4, 0x95, 0xF5);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorStatics3> { define_guid(0xD82CE920, 0x2777, 0x40FF, 0x9F, 0x59, 0xD6, 0x54, 0xB0, 0x85, 0xF1, 0x2F);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorStatics2> { define_guid(0x59DA0D0B, 0xD40A, 0x4C71, 0x92, 0x76, 0x8A, 0x27, 0x2A, 0xA, 0x66, 0x19);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensor3> { define_guid(0x2CCE578D, 0x646B, 0x48C5, 0xB7, 0xEE, 0x44, 0xFD, 0xC4, 0xC6, 0xAA, 0xFD);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensor2> { define_guid(0xD924CF9, 0x2F1F, 0x49C9, 0x80, 0x42, 0x4A, 0x18, 0x13, 0xD6, 0x77, 0x60);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensor> { define_guid(0x5E354635, 0xCF6B, 0x4C63, 0xAB, 0xD8, 0x10, 0x25, 0x2B, 0xB, 0xF6, 0xEC);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorReading2> { define_guid(0x576E5F, 0x49F8, 0x4C05, 0x9E, 0x7, 0x24, 0xFA, 0xC7, 0x94, 0x8, 0xC3);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy> { define_guid(0xD1AC9824, 0x3F5A, 0x49A2, 0xBC, 0x7B, 0x11, 0x80, 0xBC, 0x38, 0xCD, 0x2B);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorReading> { define_guid(0x4756C993, 0x6595, 0x4897, 0xBC, 0xC6, 0xD5, 0x37, 0xEE, 0x75, 0x75, 0x64);};
template<> struct uuid<Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs> { define_guid(0x12C1186, 0xC3BA, 0x46BC, 0xAE, 0x65, 0x7A, 0x98, 0x99, 0x6C, 0xBF, 0xB8);};
template<> struct uuid<Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId> { define_guid(0xFBC00ACB, 0x3B76, 0x41F6, 0x80, 0x91, 0x30, 0xEF, 0xE6, 0x46, 0xD3, 0xCF);};
template<> struct uuid<Windows::Devices::Sensors::ISimpleOrientationSensorStatics> { define_guid(0x72ED066F, 0x70AA, 0x40C6, 0x9B, 0x1B, 0x34, 0x33, 0xF7, 0x45, 0x9B, 0x4E);};
template<> struct uuid<Windows::Devices::Sensors::ISimpleOrientationSensor2> { define_guid(0xA277A798, 0x8870, 0x453E, 0x8B, 0xD6, 0xB8, 0xF5, 0xD8, 0xD7, 0x94, 0x1B);};
template<> struct uuid<Windows::Devices::Sensors::ISimpleOrientationSensor> { define_guid(0x5FF53856, 0x214A, 0x4DEE, 0xA3, 0xF9, 0x61, 0x6F, 0x1A, 0xB0, 0x6F, 0xFD);};
template<> struct uuid<Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs> { define_guid(0xBCD5C660, 0x23D4, 0x4B4C, 0xA2, 0x2E, 0xBA, 0x81, 0xAD, 0xE0, 0xC6, 0x1);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometerDeviceId> { define_guid(0x58B498C2, 0x7E4B, 0x404C, 0x9F, 0xC5, 0x5D, 0xE8, 0xB4, 0xE, 0xBA, 0xE3);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometerStatics> { define_guid(0x853C64CC, 0x698, 0x4DDA, 0xA6, 0xDF, 0x9C, 0xB9, 0xCC, 0x4A, 0xB4, 0xA);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometerStatics2> { define_guid(0x2C0819F0, 0xFFC6, 0x4F89, 0xA0, 0x6F, 0x18, 0xFA, 0x10, 0x79, 0x29, 0x33);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometer3> { define_guid(0xBE93DB7C, 0xA625, 0x48EF, 0xAC, 0xF7, 0xFA, 0xC1, 0x4, 0x83, 0x26, 0x71);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometer2> { define_guid(0xB4656C85, 0x26F6, 0x444B, 0xA9, 0xE2, 0xA2, 0x3F, 0x96, 0x6C, 0xD3, 0x68);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometer> { define_guid(0x484F626E, 0xD3C9, 0x4111, 0xB3, 0xF6, 0x2C, 0xF1, 0xFA, 0xA4, 0x18, 0xD5);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometerReading2> { define_guid(0xD4C95C61, 0x61D9, 0x404B, 0xA3, 0x28, 0x6, 0x6F, 0x17, 0x7A, 0x14, 0x9);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometerReading> { define_guid(0xC2CC40D, 0xEBFD, 0x4E5C, 0xBB, 0x11, 0xAF, 0xC2, 0x9B, 0x3C, 0xAE, 0x61);};
template<> struct uuid<Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs> { define_guid(0x17EAE872, 0x2EB9, 0x4EE7, 0x8A, 0xD0, 0x31, 0x27, 0x53, 0x7D, 0x94, 0x9B);};
template<> struct uuid<Windows::Devices::Sensors::IActivitySensorStatics> { define_guid(0xA71E0E9D, 0xEE8B, 0x45D1, 0xB2, 0x5B, 0x8, 0xCC, 0xD, 0xF9, 0x2A, 0xB6);};
template<> struct uuid<Windows::Devices::Sensors::IActivitySensor> { define_guid(0xCD7A630C, 0xFB5F, 0x48EB, 0xB0, 0x9B, 0xA2, 0x70, 0x8D, 0x1C, 0x61, 0xEF);};
template<> struct uuid<Windows::Devices::Sensors::IActivitySensorReading> { define_guid(0x85125A96, 0x1472, 0x40A2, 0xB2, 0xAE, 0xE1, 0xEF, 0x29, 0x22, 0x6C, 0x78);};
template<> struct uuid<Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs> { define_guid(0xDE386717, 0xAEB6, 0x4EC7, 0x94, 0x6A, 0xD9, 0xCC, 0x19, 0xB9, 0x51, 0xEC);};
template<> struct uuid<Windows::Devices::Sensors::IActivitySensorReadingChangeReport> { define_guid(0x4F3C2915, 0xD93B, 0x47BD, 0x96, 0xA, 0xF2, 0xF, 0xB2, 0xF3, 0x22, 0xB9);};
template<> struct uuid<Windows::Devices::Sensors::IActivitySensorTriggerDetails> { define_guid(0x2C9E6612, 0xB9CA, 0x4677, 0xB2, 0x63, 0x24, 0x32, 0x97, 0xF7, 0x9D, 0x3A);};
template<> struct uuid<Windows::Devices::Sensors::IBarometerStatics> { define_guid(0x286B270A, 0x2E3, 0x4F86, 0x84, 0xFC, 0xFD, 0xD8, 0x92, 0xB5, 0x94, 0xF);};
template<> struct uuid<Windows::Devices::Sensors::IBarometerStatics2> { define_guid(0x8FC6B1E7, 0x95FF, 0x44AC, 0x87, 0x8E, 0xD6, 0x5C, 0x83, 0x8, 0xC3, 0x4C);};
template<> struct uuid<Windows::Devices::Sensors::IBarometer2> { define_guid(0x32BCC418, 0x3EEB, 0x4D04, 0x95, 0x74, 0x76, 0x33, 0xA8, 0x78, 0x1F, 0x9F);};
template<> struct uuid<Windows::Devices::Sensors::IBarometer> { define_guid(0x934475A8, 0x78BF, 0x452F, 0xB0, 0x17, 0xF0, 0x20, 0x9C, 0xE6, 0xDA, 0xB4);};
template<> struct uuid<Windows::Devices::Sensors::IBarometerReading2> { define_guid(0x85A244EB, 0x90C5, 0x4875, 0x89, 0x1C, 0x38, 0x65, 0xB4, 0xC3, 0x57, 0xE7);};
template<> struct uuid<Windows::Devices::Sensors::IBarometerReading> { define_guid(0xF5B9D2E6, 0x1DF6, 0x4A1A, 0xA7, 0xAD, 0x32, 0x1D, 0x4F, 0x5D, 0xB2, 0x47);};
template<> struct uuid<Windows::Devices::Sensors::IBarometerReadingChangedEventArgs> { define_guid(0x3D84945F, 0x37B, 0x404F, 0x9B, 0xBB, 0x62, 0x32, 0xD6, 0x95, 0x43, 0xC3);};
template<> struct uuid<Windows::Devices::Sensors::IPedometerReading> { define_guid(0x2245DCF4, 0xA8E1, 0x432F, 0x89, 0x6A, 0xBE, 0xD, 0xD9, 0xB0, 0x2D, 0x24);};
template<> struct uuid<Windows::Devices::Sensors::IPedometerReadingChangedEventArgs> { define_guid(0xF855E47E, 0xABBC, 0x4456, 0x86, 0xA8, 0x25, 0xCF, 0x2B, 0x33, 0x37, 0x42);};
template<> struct uuid<Windows::Devices::Sensors::IPedometerStatics> { define_guid(0x82980A2F, 0x4083, 0x4DFB, 0xB4, 0x11, 0x93, 0x8E, 0xA0, 0xF4, 0xB9, 0x46);};
template<> struct uuid<Windows::Devices::Sensors::IPedometerStatics2> { define_guid(0x79F5C6BB, 0xCE0E, 0x4133, 0xB4, 0x7E, 0x86, 0x27, 0xEA, 0x72, 0xF6, 0x77);};
template<> struct uuid<Windows::Devices::Sensors::IPedometer2> { define_guid(0xE5A406DF, 0x2B81, 0x4ADD, 0xB2, 0xFF, 0x77, 0xAB, 0x6C, 0x98, 0xBA, 0x19);};
template<> struct uuid<Windows::Devices::Sensors::IPedometer> { define_guid(0x9A1E013D, 0x3D98, 0x45F8, 0x89, 0x20, 0x8E, 0x4E, 0xCA, 0xCA, 0x5F, 0x97);};
template<> struct uuid<Windows::Devices::Sensors::IPedometerDataThresholdFactory> { define_guid(0xCBAD8F50, 0x7A54, 0x466B, 0x90, 0x10, 0x77, 0xA1, 0x62, 0xFC, 0xA5, 0xD7);};
template<> struct uuid<Windows::Devices::Sensors::IProximitySensorStatics> { define_guid(0x29186649, 0x6269, 0x4E57, 0xA5, 0xAD, 0x82, 0xBE, 0x80, 0x81, 0x33, 0x92);};
template<> struct uuid<Windows::Devices::Sensors::IProximitySensorStatics2> { define_guid(0xCBF473AE, 0xE9CA, 0x422F, 0xAD, 0x67, 0x4C, 0x3D, 0x25, 0xDF, 0x35, 0xC);};
template<> struct uuid<Windows::Devices::Sensors::IProximitySensor> { define_guid(0x54C076B8, 0xECFB, 0x4944, 0xB9, 0x28, 0x74, 0xFC, 0x50, 0x4D, 0x47, 0xEE);};
template<> struct uuid<Windows::Devices::Sensors::IProximitySensorReading> { define_guid(0x71228D59, 0x132D, 0x4D5F, 0x8F, 0xF9, 0x2F, 0xD, 0xB8, 0x75, 0x1C, 0xED);};
template<> struct uuid<Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs> { define_guid(0xCFC2F366, 0xC3E8, 0x40FD, 0x8C, 0xC3, 0x67, 0xE2, 0x89, 0x0, 0x49, 0x38);};
template<> struct uuid<Windows::Devices::Sensors::IProximitySensorDataThresholdFactory> { define_guid(0x905AC121, 0x6D27, 0x4AD3, 0x9D, 0xB5, 0x64, 0x67, 0xF2, 0xA5, 0xAD, 0x9D);};
template<> struct uuid<Windows::Devices::Sensors::IAltimeterStatics> { define_guid(0x9EB4D7C3, 0xE5AC, 0x47CE, 0x8E, 0xEF, 0xD3, 0x71, 0x81, 0x68, 0xC0, 0x1F);};
template<> struct uuid<Windows::Devices::Sensors::IAltimeter2> { define_guid(0xC9471BF9, 0x2ADD, 0x48F5, 0x9F, 0x8, 0x3D, 0xC, 0x76, 0x60, 0xD9, 0x38);};
template<> struct uuid<Windows::Devices::Sensors::IAltimeter> { define_guid(0x72F057FD, 0x8F04, 0x49F1, 0xB4, 0xA7, 0xF4, 0xE3, 0x63, 0xB7, 0x1, 0xA2);};
template<> struct uuid<Windows::Devices::Sensors::IAltimeterReading2> { define_guid(0x543A1BD9, 0x6D0B, 0x42B2, 0xBD, 0x69, 0xBC, 0x8F, 0xAE, 0xF, 0x78, 0x2C);};
template<> struct uuid<Windows::Devices::Sensors::IAltimeterReading> { define_guid(0xFBE8EF73, 0x7F5E, 0x48C8, 0xAA, 0x1A, 0xF1, 0xF3, 0xBE, 0xFC, 0x11, 0x44);};
template<> struct uuid<Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs> { define_guid(0x7069D077, 0x446D, 0x47F7, 0x99, 0x8C, 0xEB, 0xC2, 0x3B, 0x45, 0xE4, 0xA2);};

// types

namespace Windows { namespace Devices { namespace Sensors {

// ISensorDataThreshold
struct ISensorDataThreshold : IInspectable, generate<ISensorDataThreshold> {};

// ISensorDataThresholdTriggerDetails
struct ISensorDataThresholdTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_SensorType(Sensors::SensorType *value);
};
template<typename X> struct ISensorDataThresholdTriggerDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISensorDataThresholdTriggerDetails_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			Sensors::SensorType get() { Sensors::SensorType value; hrcheck(enc(&ISensorDataThresholdTriggerDetails_adaptor::SensorType)->_get_SensorType(&value)); return value; }
			Sensors::SensorType operator()() { return get(); }
			operator Sensors::SensorType () { return get(); }
		} SensorType;
	};
	ISensorDataThresholdTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<ISensorDataThresholdTriggerDetails, X> : Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails_adaptor<X> { typedef adapt ISensorDataThresholdTriggerDetails; };
struct ISensorDataThresholdTriggerDetails : ISensorDataThresholdTriggerDetails_raw, generate<ISensorDataThresholdTriggerDetails> {};

// SensorDataThresholdTriggerDetails
template<typename X> struct statics<SensorDataThresholdTriggerDetails, X> : X {
	typedef typename X::root_type SensorDataThresholdTriggerDetails;
};
struct SensorDataThresholdTriggerDetails : generate<SensorDataThresholdTriggerDetails> {};

// IAccelerometerDeviceId
struct IAccelerometerDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IAccelerometerDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAccelerometerDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IAccelerometerDeviceId_adaptor() {}
};
template<typename X> struct adapt<IAccelerometerDeviceId, X> : Windows::Devices::Sensors::IAccelerometerDeviceId_adaptor<X> { typedef adapt IAccelerometerDeviceId; };
struct IAccelerometerDeviceId : IAccelerometerDeviceId_raw, generate<IAccelerometerDeviceId> {};

// IAccelerometerStatics
struct IAccelerometerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Accelerometer* *result);
};

// IAccelerometerStatics3
struct IAccelerometerStatics3 : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Accelerometer*>* *operation);
	virtual STDMETHODIMP _GetDeviceSelector(AccelerometerReadingType readingType, HSTRING *result);
};

// IAccelerometerStatics2
struct IAccelerometerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDefaultWithAccelerometerReadingType(AccelerometerReadingType readingType, Accelerometer* *result);
};

// IAccelerometer4
struct IAccelerometer4_raw : IInspectable {
	virtual STDMETHODIMP _get_ReadingType(AccelerometerReadingType *type);
};
template<typename X> struct IAccelerometer4_adaptor : X {
	union {
		struct : property {
			AccelerometerReadingType get() { AccelerometerReadingType type; hrcheck(enc(&IAccelerometer4_adaptor::ReadingType)->_get_ReadingType(&type)); return type; }
			AccelerometerReadingType operator()() { return get(); }
			operator AccelerometerReadingType () { return get(); }
		} ReadingType;
	};
	IAccelerometer4_adaptor() {}
};
template<typename X> struct adapt<IAccelerometer4, X> : Windows::Devices::Sensors::IAccelerometer4_adaptor<X> { typedef adapt IAccelerometer4; };
struct IAccelerometer4 : IAccelerometer4_raw, generate<IAccelerometer4> {};

// IAccelerometer3
struct IAccelerometer3_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct IAccelerometer3_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAccelerometer3_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAccelerometer3_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAccelerometer3_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	IAccelerometer3_adaptor() {}
};
template<typename X> struct adapt<IAccelerometer3, X> : Windows::Devices::Sensors::IAccelerometer3_adaptor<X> { typedef adapt IAccelerometer3; };
struct IAccelerometer3 : IAccelerometer3_raw, generate<IAccelerometer3> {};

// IAccelerometer2
struct IAccelerometer2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReadingTransform(Graphics::Display::DisplayOrientations value);
	virtual STDMETHODIMP _get_ReadingTransform(Graphics::Display::DisplayOrientations *value);
};
template<typename X> struct IAccelerometer2_adaptor : X {
	union {
		struct : property {
			Graphics::Display::DisplayOrientations get() { Graphics::Display::DisplayOrientations value; hrcheck(enc(&IAccelerometer2_adaptor::ReadingTransform)->_get_ReadingTransform(&value)); return value; }
			Graphics::Display::DisplayOrientations operator()() { return get(); }
			operator Graphics::Display::DisplayOrientations () { return get(); }
			void put(Graphics::Display::DisplayOrientations value) { hrcheck(enc(&IAccelerometer2_adaptor::ReadingTransform)->_put_ReadingTransform(value)); }
			void operator=(Graphics::Display::DisplayOrientations value) { put(value); }
			void operator()(Graphics::Display::DisplayOrientations value) { put(value); }
		} ReadingTransform;
	};
	IAccelerometer2_adaptor() {}
};
template<typename X> struct adapt<IAccelerometer2, X> : Windows::Devices::Sensors::IAccelerometer2_adaptor<X> { typedef adapt IAccelerometer2; };
struct IAccelerometer2 : IAccelerometer2_raw, generate<IAccelerometer2> {};

// IAccelerometer
struct IAccelerometer_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(AccelerometerReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Accelerometer*, AccelerometerReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Shaken(Foundation::TypedEventHandler<Accelerometer*, AccelerometerShakenEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Shaken(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAccelerometer_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAccelerometer_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAccelerometer_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAccelerometer_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Accelerometer>, ptr<AccelerometerReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAccelerometer_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAccelerometer_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Accelerometer>, ptr<AccelerometerShakenEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAccelerometer_adaptor::Shaken)->_add_Shaken(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAccelerometer_adaptor::Shaken)->_remove_Shaken(token)); }
		} Shaken;
	};
	ptr<AccelerometerReading> GetCurrentReading() { AccelerometerReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	IAccelerometer_adaptor() {}
};
template<typename X> struct adapt<IAccelerometer, X> : Windows::Devices::Sensors::IAccelerometer_adaptor<X> { typedef adapt IAccelerometer; };
struct IAccelerometer : IAccelerometer_raw, generate<IAccelerometer> {};

// Accelerometer
template<typename> struct Accelerometer_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Accelerometer>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Accelerometer*>* operation; hrcheck(get_activation_factory<Accelerometer, IAccelerometerStatics3>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static hstring GetDeviceSelector(AccelerometerReadingType readingType) { HSTRING result; hrcheck(get_activation_factory<Accelerometer, IAccelerometerStatics3>()->_GetDeviceSelector(readingType, &result)); return from_abi(result); }
	static ptr<Accelerometer> GetDefault(AccelerometerReadingType readingType) { Accelerometer* result; hrcheck(get_activation_factory<Accelerometer, IAccelerometerStatics2>()->_GetDefaultWithAccelerometerReadingType(readingType, &result)); return from_abi(result); }
	static ptr<Accelerometer> GetDefault() { Accelerometer* result; hrcheck(get_activation_factory<Accelerometer, IAccelerometerStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Accelerometer, X> : X, Windows::Devices::Sensors::Accelerometer_statics<void> {
	typedef typename X::root_type Accelerometer;
};
struct Accelerometer : generate<Accelerometer> {};

// IAccelerometerReading2
struct IAccelerometerReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IAccelerometerReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAccelerometerReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IAccelerometerReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	IAccelerometerReading2_adaptor() {}
};
template<typename X> struct adapt<IAccelerometerReading2, X> : Windows::Devices::Sensors::IAccelerometerReading2_adaptor<X> { typedef adapt IAccelerometerReading2; };
struct IAccelerometerReading2 : IAccelerometerReading2_raw, generate<IAccelerometerReading2> {};

// IAccelerometerReading
struct IAccelerometerReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_AccelerationX(double *value);
	virtual STDMETHODIMP _get_AccelerationY(double *value);
	virtual STDMETHODIMP _get_AccelerationZ(double *value);
};
template<typename X> struct IAccelerometerReading_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IAccelerometerReading_adaptor::AccelerationX)->_get_AccelerationX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} AccelerationX;
		struct : property {
			double get() { double value; hrcheck(enc(&IAccelerometerReading_adaptor::AccelerationY)->_get_AccelerationY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} AccelerationY;
		struct : property {
			double get() { double value; hrcheck(enc(&IAccelerometerReading_adaptor::AccelerationZ)->_get_AccelerationZ(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} AccelerationZ;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAccelerometerReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IAccelerometerReading_adaptor() {}
};
template<typename X> struct adapt<IAccelerometerReading, X> : Windows::Devices::Sensors::IAccelerometerReading_adaptor<X> { typedef adapt IAccelerometerReading; };
struct IAccelerometerReading : IAccelerometerReading_raw, generate<IAccelerometerReading> {};

// AccelerometerReading
template<typename X> struct statics<AccelerometerReading, X> : X {
	typedef typename X::root_type AccelerometerReading;
};
struct AccelerometerReading : generate<AccelerometerReading> {};

// IAccelerometerReadingChangedEventArgs
struct IAccelerometerReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(AccelerometerReading* *value);
};
template<typename X> struct IAccelerometerReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AccelerometerReading> get() { AccelerometerReading* value; hrcheck(enc(&IAccelerometerReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<AccelerometerReading> operator()() { return get(); }
			operator ptr<AccelerometerReading> () { return get(); }
			ptr<AccelerometerReading> operator->() { return get(); }
		} Reading;
	};
	IAccelerometerReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAccelerometerReadingChangedEventArgs, X> : Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs_adaptor<X> { typedef adapt IAccelerometerReadingChangedEventArgs; };
struct IAccelerometerReadingChangedEventArgs : IAccelerometerReadingChangedEventArgs_raw, generate<IAccelerometerReadingChangedEventArgs> {};

// AccelerometerReadingChangedEventArgs
template<typename X> struct statics<AccelerometerReadingChangedEventArgs, X> : X {
	typedef typename X::root_type AccelerometerReadingChangedEventArgs;
};
struct AccelerometerReadingChangedEventArgs : generate<AccelerometerReadingChangedEventArgs> {};

// IAccelerometerShakenEventArgs
struct IAccelerometerShakenEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
};
template<typename X> struct IAccelerometerShakenEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAccelerometerShakenEventArgs_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IAccelerometerShakenEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAccelerometerShakenEventArgs, X> : Windows::Devices::Sensors::IAccelerometerShakenEventArgs_adaptor<X> { typedef adapt IAccelerometerShakenEventArgs; };
struct IAccelerometerShakenEventArgs : IAccelerometerShakenEventArgs_raw, generate<IAccelerometerShakenEventArgs> {};

// AccelerometerShakenEventArgs
template<typename X> struct statics<AccelerometerShakenEventArgs, X> : X {
	typedef typename X::root_type AccelerometerShakenEventArgs;
};
struct AccelerometerShakenEventArgs : generate<AccelerometerShakenEventArgs> {};

// IInclinometerDeviceId
struct IInclinometerDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IInclinometerDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IInclinometerDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IInclinometerDeviceId_adaptor() {}
};
template<typename X> struct adapt<IInclinometerDeviceId, X> : Windows::Devices::Sensors::IInclinometerDeviceId_adaptor<X> { typedef adapt IInclinometerDeviceId; };
struct IInclinometerDeviceId : IInclinometerDeviceId_raw, generate<IInclinometerDeviceId> {};

// IInclinometerStatics
struct IInclinometerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Inclinometer* *result);
};

// IInclinometerStatics4
struct IInclinometerStatics4 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(SensorReadingType readingType, HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Inclinometer*>* *operation);
};

// IInclinometerStatics3
struct IInclinometerStatics3 : IInspectable {
	virtual STDMETHODIMP _GetDefaultWithSensorReadingType(SensorReadingType sensorReadingtype, Inclinometer* *result);
};

// IInclinometerStatics2
struct IInclinometerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDefaultForRelativeReadings(Inclinometer* *result);
};

// IInclinometer3
struct IInclinometer3_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct IInclinometer3_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IInclinometer3_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IInclinometer3_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IInclinometer3_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	IInclinometer3_adaptor() {}
};
template<typename X> struct adapt<IInclinometer3, X> : Windows::Devices::Sensors::IInclinometer3_adaptor<X> { typedef adapt IInclinometer3; };
struct IInclinometer3 : IInclinometer3_raw, generate<IInclinometer3> {};

// IInclinometer2
struct IInclinometer2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReadingTransform(Graphics::Display::DisplayOrientations value);
	virtual STDMETHODIMP _get_ReadingTransform(Graphics::Display::DisplayOrientations *value);
	virtual STDMETHODIMP _get_ReadingType(SensorReadingType *type);
};
template<typename X> struct IInclinometer2_adaptor : X {
	union {
		struct : property {
			Graphics::Display::DisplayOrientations get() { Graphics::Display::DisplayOrientations value; hrcheck(enc(&IInclinometer2_adaptor::ReadingTransform)->_get_ReadingTransform(&value)); return value; }
			Graphics::Display::DisplayOrientations operator()() { return get(); }
			operator Graphics::Display::DisplayOrientations () { return get(); }
			void put(Graphics::Display::DisplayOrientations value) { hrcheck(enc(&IInclinometer2_adaptor::ReadingTransform)->_put_ReadingTransform(value)); }
			void operator=(Graphics::Display::DisplayOrientations value) { put(value); }
			void operator()(Graphics::Display::DisplayOrientations value) { put(value); }
		} ReadingTransform;
		struct : property {
			SensorReadingType get() { SensorReadingType type; hrcheck(enc(&IInclinometer2_adaptor::ReadingType)->_get_ReadingType(&type)); return type; }
			SensorReadingType operator()() { return get(); }
			operator SensorReadingType () { return get(); }
		} ReadingType;
	};
	IInclinometer2_adaptor() {}
};
template<typename X> struct adapt<IInclinometer2, X> : Windows::Devices::Sensors::IInclinometer2_adaptor<X> { typedef adapt IInclinometer2; };
struct IInclinometer2 : IInclinometer2_raw, generate<IInclinometer2> {};

// IInclinometer
struct IInclinometer_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(InclinometerReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Inclinometer*, InclinometerReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IInclinometer_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IInclinometer_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IInclinometer_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IInclinometer_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Inclinometer>, ptr<InclinometerReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IInclinometer_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IInclinometer_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<InclinometerReading> GetCurrentReading() { InclinometerReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	IInclinometer_adaptor() {}
};
template<typename X> struct adapt<IInclinometer, X> : Windows::Devices::Sensors::IInclinometer_adaptor<X> { typedef adapt IInclinometer; };
struct IInclinometer : IInclinometer_raw, generate<IInclinometer> {};

// Inclinometer
template<typename> struct Inclinometer_statics {
	static hstring GetDeviceSelector(SensorReadingType readingType) { HSTRING result; hrcheck(get_activation_factory<Inclinometer, IInclinometerStatics4>()->_GetDeviceSelector(readingType, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Inclinometer>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Inclinometer*>* operation; hrcheck(get_activation_factory<Inclinometer, IInclinometerStatics4>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Inclinometer> GetDefault(SensorReadingType sensorReadingtype) { Inclinometer* result; hrcheck(get_activation_factory<Inclinometer, IInclinometerStatics3>()->_GetDefaultWithSensorReadingType(sensorReadingtype, &result)); return from_abi(result); }
	static ptr<Inclinometer> GetDefaultForRelativeReadings() { Inclinometer* result; hrcheck(get_activation_factory<Inclinometer, IInclinometerStatics2>()->_GetDefaultForRelativeReadings(&result)); return from_abi(result); }
	static ptr<Inclinometer> GetDefault() { Inclinometer* result; hrcheck(get_activation_factory<Inclinometer, IInclinometerStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Inclinometer, X> : X, Windows::Devices::Sensors::Inclinometer_statics<void> {
	typedef typename X::root_type Inclinometer;
};
struct Inclinometer : generate<Inclinometer> {};

// IInclinometerReading2
struct IInclinometerReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IInclinometerReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IInclinometerReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IInclinometerReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	IInclinometerReading2_adaptor() {}
};
template<typename X> struct adapt<IInclinometerReading2, X> : Windows::Devices::Sensors::IInclinometerReading2_adaptor<X> { typedef adapt IInclinometerReading2; };
struct IInclinometerReading2 : IInclinometerReading2_raw, generate<IInclinometerReading2> {};

// IInclinometerReadingYawAccuracy
struct IInclinometerReadingYawAccuracy_raw : IInspectable {
	virtual STDMETHODIMP _get_YawAccuracy(MagnetometerAccuracy *value);
};
template<typename X> struct IInclinometerReadingYawAccuracy_adaptor : X {
	union {
		struct : property {
			MagnetometerAccuracy get() { MagnetometerAccuracy value; hrcheck(enc(&IInclinometerReadingYawAccuracy_adaptor::YawAccuracy)->_get_YawAccuracy(&value)); return value; }
			MagnetometerAccuracy operator()() { return get(); }
			operator MagnetometerAccuracy () { return get(); }
		} YawAccuracy;
	};
	IInclinometerReadingYawAccuracy_adaptor() {}
};
template<typename X> struct adapt<IInclinometerReadingYawAccuracy, X> : Windows::Devices::Sensors::IInclinometerReadingYawAccuracy_adaptor<X> { typedef adapt IInclinometerReadingYawAccuracy; };
struct IInclinometerReadingYawAccuracy : IInclinometerReadingYawAccuracy_raw, generate<IInclinometerReadingYawAccuracy> {};

// IInclinometerReading
struct IInclinometerReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_PitchDegrees(float *value);
	virtual STDMETHODIMP _get_RollDegrees(float *value);
	virtual STDMETHODIMP _get_YawDegrees(float *value);
};
template<typename X> struct IInclinometerReading_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&IInclinometerReading_adaptor::PitchDegrees)->_get_PitchDegrees(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} PitchDegrees;
		struct : property {
			float get() { float value; hrcheck(enc(&IInclinometerReading_adaptor::RollDegrees)->_get_RollDegrees(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} RollDegrees;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IInclinometerReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
		struct : property {
			float get() { float value; hrcheck(enc(&IInclinometerReading_adaptor::YawDegrees)->_get_YawDegrees(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} YawDegrees;
	};
	IInclinometerReading_adaptor() {}
};
template<typename X> struct adapt<IInclinometerReading, X> : Windows::Devices::Sensors::IInclinometerReading_adaptor<X> { typedef adapt IInclinometerReading; };
struct IInclinometerReading : IInclinometerReading_raw, generate<IInclinometerReading> {};

// InclinometerReading
template<typename X> struct statics<InclinometerReading, X> : X {
	typedef typename X::root_type InclinometerReading;
};
struct InclinometerReading : generate<InclinometerReading> {};

// IInclinometerReadingChangedEventArgs
struct IInclinometerReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(InclinometerReading* *value);
};
template<typename X> struct IInclinometerReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<InclinometerReading> get() { InclinometerReading* value; hrcheck(enc(&IInclinometerReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<InclinometerReading> operator()() { return get(); }
			operator ptr<InclinometerReading> () { return get(); }
			ptr<InclinometerReading> operator->() { return get(); }
		} Reading;
	};
	IInclinometerReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IInclinometerReadingChangedEventArgs, X> : Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs_adaptor<X> { typedef adapt IInclinometerReadingChangedEventArgs; };
struct IInclinometerReadingChangedEventArgs : IInclinometerReadingChangedEventArgs_raw, generate<IInclinometerReadingChangedEventArgs> {};

// InclinometerReadingChangedEventArgs
template<typename X> struct statics<InclinometerReadingChangedEventArgs, X> : X {
	typedef typename X::root_type InclinometerReadingChangedEventArgs;
};
struct InclinometerReadingChangedEventArgs : generate<InclinometerReadingChangedEventArgs> {};

// IGyrometerDeviceId
struct IGyrometerDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IGyrometerDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGyrometerDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IGyrometerDeviceId_adaptor() {}
};
template<typename X> struct adapt<IGyrometerDeviceId, X> : Windows::Devices::Sensors::IGyrometerDeviceId_adaptor<X> { typedef adapt IGyrometerDeviceId; };
struct IGyrometerDeviceId : IGyrometerDeviceId_raw, generate<IGyrometerDeviceId> {};

// IGyrometerStatics
struct IGyrometerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Gyrometer* *result);
};

// IGyrometerStatics2
struct IGyrometerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Gyrometer*>* *operation);
};

// IGyrometer3
struct IGyrometer3_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct IGyrometer3_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IGyrometer3_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IGyrometer3_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IGyrometer3_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	IGyrometer3_adaptor() {}
};
template<typename X> struct adapt<IGyrometer3, X> : Windows::Devices::Sensors::IGyrometer3_adaptor<X> { typedef adapt IGyrometer3; };
struct IGyrometer3 : IGyrometer3_raw, generate<IGyrometer3> {};

// IGyrometer2
struct IGyrometer2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReadingTransform(Graphics::Display::DisplayOrientations value);
	virtual STDMETHODIMP _get_ReadingTransform(Graphics::Display::DisplayOrientations *value);
};
template<typename X> struct IGyrometer2_adaptor : X {
	union {
		struct : property {
			Graphics::Display::DisplayOrientations get() { Graphics::Display::DisplayOrientations value; hrcheck(enc(&IGyrometer2_adaptor::ReadingTransform)->_get_ReadingTransform(&value)); return value; }
			Graphics::Display::DisplayOrientations operator()() { return get(); }
			operator Graphics::Display::DisplayOrientations () { return get(); }
			void put(Graphics::Display::DisplayOrientations value) { hrcheck(enc(&IGyrometer2_adaptor::ReadingTransform)->_put_ReadingTransform(value)); }
			void operator=(Graphics::Display::DisplayOrientations value) { put(value); }
			void operator()(Graphics::Display::DisplayOrientations value) { put(value); }
		} ReadingTransform;
	};
	IGyrometer2_adaptor() {}
};
template<typename X> struct adapt<IGyrometer2, X> : Windows::Devices::Sensors::IGyrometer2_adaptor<X> { typedef adapt IGyrometer2; };
struct IGyrometer2 : IGyrometer2_raw, generate<IGyrometer2> {};

// IGyrometer
struct IGyrometer_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(GyrometerReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Gyrometer*, GyrometerReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IGyrometer_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IGyrometer_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IGyrometer_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IGyrometer_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Gyrometer>, ptr<GyrometerReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IGyrometer_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IGyrometer_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<GyrometerReading> GetCurrentReading() { GyrometerReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	IGyrometer_adaptor() {}
};
template<typename X> struct adapt<IGyrometer, X> : Windows::Devices::Sensors::IGyrometer_adaptor<X> { typedef adapt IGyrometer; };
struct IGyrometer : IGyrometer_raw, generate<IGyrometer> {};

// Gyrometer
template<typename> struct Gyrometer_statics {
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<Gyrometer, IGyrometerStatics2>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Gyrometer>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Gyrometer*>* operation; hrcheck(get_activation_factory<Gyrometer, IGyrometerStatics2>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Gyrometer> GetDefault() { Gyrometer* result; hrcheck(get_activation_factory<Gyrometer, IGyrometerStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Gyrometer, X> : X, Windows::Devices::Sensors::Gyrometer_statics<void> {
	typedef typename X::root_type Gyrometer;
};
struct Gyrometer : generate<Gyrometer> {};

// IGyrometerReading2
struct IGyrometerReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IGyrometerReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IGyrometerReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IGyrometerReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	IGyrometerReading2_adaptor() {}
};
template<typename X> struct adapt<IGyrometerReading2, X> : Windows::Devices::Sensors::IGyrometerReading2_adaptor<X> { typedef adapt IGyrometerReading2; };
struct IGyrometerReading2 : IGyrometerReading2_raw, generate<IGyrometerReading2> {};

// IGyrometerReading
struct IGyrometerReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_AngularVelocityX(double *value);
	virtual STDMETHODIMP _get_AngularVelocityY(double *value);
	virtual STDMETHODIMP _get_AngularVelocityZ(double *value);
};
template<typename X> struct IGyrometerReading_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IGyrometerReading_adaptor::AngularVelocityX)->_get_AngularVelocityX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} AngularVelocityX;
		struct : property {
			double get() { double value; hrcheck(enc(&IGyrometerReading_adaptor::AngularVelocityY)->_get_AngularVelocityY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} AngularVelocityY;
		struct : property {
			double get() { double value; hrcheck(enc(&IGyrometerReading_adaptor::AngularVelocityZ)->_get_AngularVelocityZ(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} AngularVelocityZ;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IGyrometerReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IGyrometerReading_adaptor() {}
};
template<typename X> struct adapt<IGyrometerReading, X> : Windows::Devices::Sensors::IGyrometerReading_adaptor<X> { typedef adapt IGyrometerReading; };
struct IGyrometerReading : IGyrometerReading_raw, generate<IGyrometerReading> {};

// GyrometerReading
template<typename X> struct statics<GyrometerReading, X> : X {
	typedef typename X::root_type GyrometerReading;
};
struct GyrometerReading : generate<GyrometerReading> {};

// IGyrometerReadingChangedEventArgs
struct IGyrometerReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(GyrometerReading* *value);
};
template<typename X> struct IGyrometerReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<GyrometerReading> get() { GyrometerReading* value; hrcheck(enc(&IGyrometerReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<GyrometerReading> operator()() { return get(); }
			operator ptr<GyrometerReading> () { return get(); }
			ptr<GyrometerReading> operator->() { return get(); }
		} Reading;
	};
	IGyrometerReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IGyrometerReadingChangedEventArgs, X> : Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs_adaptor<X> { typedef adapt IGyrometerReadingChangedEventArgs; };
struct IGyrometerReadingChangedEventArgs : IGyrometerReadingChangedEventArgs_raw, generate<IGyrometerReadingChangedEventArgs> {};

// GyrometerReadingChangedEventArgs
template<typename X> struct statics<GyrometerReadingChangedEventArgs, X> : X {
	typedef typename X::root_type GyrometerReadingChangedEventArgs;
};
struct GyrometerReadingChangedEventArgs : generate<GyrometerReadingChangedEventArgs> {};

// ICompassDeviceId
struct ICompassDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct ICompassDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICompassDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	ICompassDeviceId_adaptor() {}
};
template<typename X> struct adapt<ICompassDeviceId, X> : Windows::Devices::Sensors::ICompassDeviceId_adaptor<X> { typedef adapt ICompassDeviceId; };
struct ICompassDeviceId : ICompassDeviceId_raw, generate<ICompassDeviceId> {};

// ICompassStatics
struct ICompassStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Compass* *result);
};

// ICompassStatics2
struct ICompassStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Compass*>* *operation);
};

// ICompass3
struct ICompass3_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct ICompass3_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICompass3_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICompass3_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICompass3_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	ICompass3_adaptor() {}
};
template<typename X> struct adapt<ICompass3, X> : Windows::Devices::Sensors::ICompass3_adaptor<X> { typedef adapt ICompass3; };
struct ICompass3 : ICompass3_raw, generate<ICompass3> {};

// ICompass2
struct ICompass2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReadingTransform(Graphics::Display::DisplayOrientations value);
	virtual STDMETHODIMP _get_ReadingTransform(Graphics::Display::DisplayOrientations *value);
};
template<typename X> struct ICompass2_adaptor : X {
	union {
		struct : property {
			Graphics::Display::DisplayOrientations get() { Graphics::Display::DisplayOrientations value; hrcheck(enc(&ICompass2_adaptor::ReadingTransform)->_get_ReadingTransform(&value)); return value; }
			Graphics::Display::DisplayOrientations operator()() { return get(); }
			operator Graphics::Display::DisplayOrientations () { return get(); }
			void put(Graphics::Display::DisplayOrientations value) { hrcheck(enc(&ICompass2_adaptor::ReadingTransform)->_put_ReadingTransform(value)); }
			void operator=(Graphics::Display::DisplayOrientations value) { put(value); }
			void operator()(Graphics::Display::DisplayOrientations value) { put(value); }
		} ReadingTransform;
	};
	ICompass2_adaptor() {}
};
template<typename X> struct adapt<ICompass2, X> : Windows::Devices::Sensors::ICompass2_adaptor<X> { typedef adapt ICompass2; };
struct ICompass2 : ICompass2_raw, generate<ICompass2> {};

// ICompass
struct ICompass_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(CompassReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Compass*, CompassReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICompass_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICompass_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICompass_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICompass_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Compass>, ptr<CompassReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICompass_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICompass_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<CompassReading> GetCurrentReading() { CompassReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	ICompass_adaptor() {}
};
template<typename X> struct adapt<ICompass, X> : Windows::Devices::Sensors::ICompass_adaptor<X> { typedef adapt ICompass; };
struct ICompass : ICompass_raw, generate<ICompass> {};

// Compass
template<typename> struct Compass_statics {
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<Compass, ICompassStatics2>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Compass>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Compass*>* operation; hrcheck(get_activation_factory<Compass, ICompassStatics2>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Compass> GetDefault() { Compass* result; hrcheck(get_activation_factory<Compass, ICompassStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Compass, X> : X, Windows::Devices::Sensors::Compass_statics<void> {
	typedef typename X::root_type Compass;
};
struct Compass : generate<Compass> {};

// ICompassReading2
struct ICompassReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct ICompassReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&ICompassReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&ICompassReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	ICompassReading2_adaptor() {}
};
template<typename X> struct adapt<ICompassReading2, X> : Windows::Devices::Sensors::ICompassReading2_adaptor<X> { typedef adapt ICompassReading2; };
struct ICompassReading2 : ICompassReading2_raw, generate<ICompassReading2> {};

// ICompassReadingHeadingAccuracy
struct ICompassReadingHeadingAccuracy_raw : IInspectable {
	virtual STDMETHODIMP _get_HeadingAccuracy(MagnetometerAccuracy *value);
};
template<typename X> struct ICompassReadingHeadingAccuracy_adaptor : X {
	union {
		struct : property {
			MagnetometerAccuracy get() { MagnetometerAccuracy value; hrcheck(enc(&ICompassReadingHeadingAccuracy_adaptor::HeadingAccuracy)->_get_HeadingAccuracy(&value)); return value; }
			MagnetometerAccuracy operator()() { return get(); }
			operator MagnetometerAccuracy () { return get(); }
		} HeadingAccuracy;
	};
	ICompassReadingHeadingAccuracy_adaptor() {}
};
template<typename X> struct adapt<ICompassReadingHeadingAccuracy, X> : Windows::Devices::Sensors::ICompassReadingHeadingAccuracy_adaptor<X> { typedef adapt ICompassReadingHeadingAccuracy; };
struct ICompassReadingHeadingAccuracy : ICompassReadingHeadingAccuracy_raw, generate<ICompassReadingHeadingAccuracy> {};

// ICompassReading
struct ICompassReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_HeadingMagneticNorth(double *value);
	virtual STDMETHODIMP _get_HeadingTrueNorth(Foundation::IReference<double>* *value);
};
template<typename X> struct ICompassReading_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&ICompassReading_adaptor::HeadingMagneticNorth)->_get_HeadingMagneticNorth(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} HeadingMagneticNorth;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&ICompassReading_adaptor::HeadingTrueNorth)->_get_HeadingTrueNorth(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} HeadingTrueNorth;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ICompassReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	ICompassReading_adaptor() {}
};
template<typename X> struct adapt<ICompassReading, X> : Windows::Devices::Sensors::ICompassReading_adaptor<X> { typedef adapt ICompassReading; };
struct ICompassReading : ICompassReading_raw, generate<ICompassReading> {};

// CompassReading
template<typename X> struct statics<CompassReading, X> : X {
	typedef typename X::root_type CompassReading;
};
struct CompassReading : generate<CompassReading> {};

// ICompassReadingChangedEventArgs
struct ICompassReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(CompassReading* *value);
};
template<typename X> struct ICompassReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<CompassReading> get() { CompassReading* value; hrcheck(enc(&ICompassReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<CompassReading> operator()() { return get(); }
			operator ptr<CompassReading> () { return get(); }
			ptr<CompassReading> operator->() { return get(); }
		} Reading;
	};
	ICompassReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICompassReadingChangedEventArgs, X> : Windows::Devices::Sensors::ICompassReadingChangedEventArgs_adaptor<X> { typedef adapt ICompassReadingChangedEventArgs; };
struct ICompassReadingChangedEventArgs : ICompassReadingChangedEventArgs_raw, generate<ICompassReadingChangedEventArgs> {};

// CompassReadingChangedEventArgs
template<typename X> struct statics<CompassReadingChangedEventArgs, X> : X {
	typedef typename X::root_type CompassReadingChangedEventArgs;
};
struct CompassReadingChangedEventArgs : generate<CompassReadingChangedEventArgs> {};

// ILightSensorDeviceId
struct ILightSensorDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct ILightSensorDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILightSensorDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	ILightSensorDeviceId_adaptor() {}
};
template<typename X> struct adapt<ILightSensorDeviceId, X> : Windows::Devices::Sensors::ILightSensorDeviceId_adaptor<X> { typedef adapt ILightSensorDeviceId; };
struct ILightSensorDeviceId : ILightSensorDeviceId_raw, generate<ILightSensorDeviceId> {};

// ILightSensorStatics
struct ILightSensorStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(LightSensor* *result);
};

// ILightSensorStatics2
struct ILightSensorStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<LightSensor*>* *operation);
};

// ILightSensor2
struct ILightSensor2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct ILightSensor2_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILightSensor2_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILightSensor2_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ILightSensor2_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	ILightSensor2_adaptor() {}
};
template<typename X> struct adapt<ILightSensor2, X> : Windows::Devices::Sensors::ILightSensor2_adaptor<X> { typedef adapt ILightSensor2; };
struct ILightSensor2 : ILightSensor2_raw, generate<ILightSensor2> {};

// ILightSensor
struct ILightSensor_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(LightSensorReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<LightSensor*, LightSensorReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct ILightSensor_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILightSensor_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILightSensor_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ILightSensor_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<LightSensor>, ptr<LightSensorReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ILightSensor_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ILightSensor_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<LightSensorReading> GetCurrentReading() { LightSensorReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	ILightSensor_adaptor() {}
};
template<typename X> struct adapt<ILightSensor, X> : Windows::Devices::Sensors::ILightSensor_adaptor<X> { typedef adapt ILightSensor; };
struct ILightSensor : ILightSensor_raw, generate<ILightSensor> {};

// LightSensor
template<typename> struct LightSensor_statics {
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<LightSensor, ILightSensorStatics2>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<LightSensor>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<LightSensor*>* operation; hrcheck(get_activation_factory<LightSensor, ILightSensorStatics2>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<LightSensor> GetDefault() { LightSensor* result; hrcheck(get_activation_factory<LightSensor, ILightSensorStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<LightSensor, X> : X, Windows::Devices::Sensors::LightSensor_statics<void> {
	typedef typename X::root_type LightSensor;
};
struct LightSensor : generate<LightSensor> {};

// ILightSensorReading2
struct ILightSensorReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct ILightSensorReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&ILightSensorReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&ILightSensorReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	ILightSensorReading2_adaptor() {}
};
template<typename X> struct adapt<ILightSensorReading2, X> : Windows::Devices::Sensors::ILightSensorReading2_adaptor<X> { typedef adapt ILightSensorReading2; };
struct ILightSensorReading2 : ILightSensorReading2_raw, generate<ILightSensorReading2> {};

// ILightSensorReading
struct ILightSensorReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_IlluminanceInLux(float *value);
};
template<typename X> struct ILightSensorReading_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&ILightSensorReading_adaptor::IlluminanceInLux)->_get_IlluminanceInLux(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} IlluminanceInLux;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ILightSensorReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	ILightSensorReading_adaptor() {}
};
template<typename X> struct adapt<ILightSensorReading, X> : Windows::Devices::Sensors::ILightSensorReading_adaptor<X> { typedef adapt ILightSensorReading; };
struct ILightSensorReading : ILightSensorReading_raw, generate<ILightSensorReading> {};

// LightSensorReading
template<typename X> struct statics<LightSensorReading, X> : X {
	typedef typename X::root_type LightSensorReading;
};
struct LightSensorReading : generate<LightSensorReading> {};

// ILightSensorReadingChangedEventArgs
struct ILightSensorReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(LightSensorReading* *value);
};
template<typename X> struct ILightSensorReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<LightSensorReading> get() { LightSensorReading* value; hrcheck(enc(&ILightSensorReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<LightSensorReading> operator()() { return get(); }
			operator ptr<LightSensorReading> () { return get(); }
			ptr<LightSensorReading> operator->() { return get(); }
		} Reading;
	};
	ILightSensorReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILightSensorReadingChangedEventArgs, X> : Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs_adaptor<X> { typedef adapt ILightSensorReadingChangedEventArgs; };
struct ILightSensorReadingChangedEventArgs : ILightSensorReadingChangedEventArgs_raw, generate<ILightSensorReadingChangedEventArgs> {};

// LightSensorReadingChangedEventArgs
template<typename X> struct statics<LightSensorReadingChangedEventArgs, X> : X {
	typedef typename X::root_type LightSensorReadingChangedEventArgs;
};
struct LightSensorReadingChangedEventArgs : generate<LightSensorReadingChangedEventArgs> {};

// ISensorRotationMatrix
struct ISensorRotationMatrix_raw : IInspectable {
	virtual STDMETHODIMP _get_M11(float *value);
	virtual STDMETHODIMP _get_M12(float *value);
	virtual STDMETHODIMP _get_M13(float *value);
	virtual STDMETHODIMP _get_M21(float *value);
	virtual STDMETHODIMP _get_M22(float *value);
	virtual STDMETHODIMP _get_M23(float *value);
	virtual STDMETHODIMP _get_M31(float *value);
	virtual STDMETHODIMP _get_M32(float *value);
	virtual STDMETHODIMP _get_M33(float *value);
};
template<typename X> struct ISensorRotationMatrix_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M11)->_get_M11(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M11;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M12)->_get_M12(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M12;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M13)->_get_M13(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M13;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M21)->_get_M21(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M21;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M22)->_get_M22(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M22;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M23)->_get_M23(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M23;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M31)->_get_M31(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M31;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M32)->_get_M32(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M32;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorRotationMatrix_adaptor::M33)->_get_M33(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} M33;
	};
	ISensorRotationMatrix_adaptor() {}
};
template<typename X> struct adapt<ISensorRotationMatrix, X> : Windows::Devices::Sensors::ISensorRotationMatrix_adaptor<X> { typedef adapt ISensorRotationMatrix; };
struct ISensorRotationMatrix : ISensorRotationMatrix_raw, generate<ISensorRotationMatrix> {};

// ISensorQuaternion
struct ISensorQuaternion_raw : IInspectable {
	virtual STDMETHODIMP _get_W(float *value);
	virtual STDMETHODIMP _get_X(float *value);
	virtual STDMETHODIMP _get_Y(float *value);
	virtual STDMETHODIMP _get_Z(float *value);
};
template<typename A> struct ISensorQuaternion_adaptor : A {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorQuaternion_adaptor::W)->_get_W(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} W;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorQuaternion_adaptor::X)->_get_X(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} X;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorQuaternion_adaptor::Y)->_get_Y(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Y;
		struct : property {
			float get() { float value; hrcheck(enc(&ISensorQuaternion_adaptor::Z)->_get_Z(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Z;
	};
	ISensorQuaternion_adaptor() {}
};
template<typename X> struct adapt<ISensorQuaternion, X> : Windows::Devices::Sensors::ISensorQuaternion_adaptor<X> { typedef adapt ISensorQuaternion; };
struct ISensorQuaternion : ISensorQuaternion_raw, generate<ISensorQuaternion> {};

// SensorRotationMatrix
template<typename X> struct statics<SensorRotationMatrix, X> : X {
	typedef typename X::root_type SensorRotationMatrix;
};
struct SensorRotationMatrix : generate<SensorRotationMatrix> {};

// SensorQuaternion
template<typename X> struct statics<SensorQuaternion, X> : X {
	typedef typename X::root_type SensorQuaternion;
};
struct SensorQuaternion : generate<SensorQuaternion> {};

// IOrientationSensorDeviceId
struct IOrientationSensorDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IOrientationSensorDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IOrientationSensorDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IOrientationSensorDeviceId_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensorDeviceId, X> : Windows::Devices::Sensors::IOrientationSensorDeviceId_adaptor<X> { typedef adapt IOrientationSensorDeviceId; };
struct IOrientationSensorDeviceId : IOrientationSensorDeviceId_raw, generate<IOrientationSensorDeviceId> {};

// IOrientationSensorStatics
struct IOrientationSensorStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(OrientationSensor* *result);
};

// IOrientationSensorStatics4
struct IOrientationSensorStatics4 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(SensorReadingType readingType, HSTRING *result);
	virtual STDMETHODIMP _GetDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal(SensorReadingType readingType, SensorOptimizationGoal optimizationGoal, HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<OrientationSensor*>* *operation);
};

// IOrientationSensorStatics3
struct IOrientationSensorStatics3 : IInspectable {
	virtual STDMETHODIMP _GetDefaultWithSensorReadingType(SensorReadingType sensorReadingtype, OrientationSensor* *result);
	virtual STDMETHODIMP _GetDefaultWithSensorReadingTypeAndSensorOptimizationGoal(SensorReadingType sensorReadingType, SensorOptimizationGoal optimizationGoal, OrientationSensor* *result);
};

// IOrientationSensorStatics2
struct IOrientationSensorStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDefaultForRelativeReadings(OrientationSensor* *result);
};

// IOrientationSensor3
struct IOrientationSensor3_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct IOrientationSensor3_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IOrientationSensor3_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IOrientationSensor3_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IOrientationSensor3_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	IOrientationSensor3_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensor3, X> : Windows::Devices::Sensors::IOrientationSensor3_adaptor<X> { typedef adapt IOrientationSensor3; };
struct IOrientationSensor3 : IOrientationSensor3_raw, generate<IOrientationSensor3> {};

// IOrientationSensor2
struct IOrientationSensor2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReadingTransform(Graphics::Display::DisplayOrientations value);
	virtual STDMETHODIMP _get_ReadingTransform(Graphics::Display::DisplayOrientations *value);
	virtual STDMETHODIMP _get_ReadingType(SensorReadingType *type);
};
template<typename X> struct IOrientationSensor2_adaptor : X {
	union {
		struct : property {
			Graphics::Display::DisplayOrientations get() { Graphics::Display::DisplayOrientations value; hrcheck(enc(&IOrientationSensor2_adaptor::ReadingTransform)->_get_ReadingTransform(&value)); return value; }
			Graphics::Display::DisplayOrientations operator()() { return get(); }
			operator Graphics::Display::DisplayOrientations () { return get(); }
			void put(Graphics::Display::DisplayOrientations value) { hrcheck(enc(&IOrientationSensor2_adaptor::ReadingTransform)->_put_ReadingTransform(value)); }
			void operator=(Graphics::Display::DisplayOrientations value) { put(value); }
			void operator()(Graphics::Display::DisplayOrientations value) { put(value); }
		} ReadingTransform;
		struct : property {
			SensorReadingType get() { SensorReadingType type; hrcheck(enc(&IOrientationSensor2_adaptor::ReadingType)->_get_ReadingType(&type)); return type; }
			SensorReadingType operator()() { return get(); }
			operator SensorReadingType () { return get(); }
		} ReadingType;
	};
	IOrientationSensor2_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensor2, X> : Windows::Devices::Sensors::IOrientationSensor2_adaptor<X> { typedef adapt IOrientationSensor2; };
struct IOrientationSensor2 : IOrientationSensor2_raw, generate<IOrientationSensor2> {};

// IOrientationSensor
struct IOrientationSensor_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(OrientationSensorReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<OrientationSensor*, OrientationSensorReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IOrientationSensor_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IOrientationSensor_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IOrientationSensor_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IOrientationSensor_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<OrientationSensor>, ptr<OrientationSensorReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IOrientationSensor_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IOrientationSensor_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<OrientationSensorReading> GetCurrentReading() { OrientationSensorReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	IOrientationSensor_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensor, X> : Windows::Devices::Sensors::IOrientationSensor_adaptor<X> { typedef adapt IOrientationSensor; };
struct IOrientationSensor : IOrientationSensor_raw, generate<IOrientationSensor> {};

// OrientationSensor
template<typename> struct OrientationSensor_statics {
	static hstring GetDeviceSelector(SensorReadingType readingType) { HSTRING result; hrcheck(get_activation_factory<OrientationSensor, IOrientationSensorStatics4>()->_GetDeviceSelector(readingType, &result)); return from_abi(result); }
	static hstring GetDeviceSelector(SensorReadingType readingType, SensorOptimizationGoal optimizationGoal) { HSTRING result; hrcheck(get_activation_factory<OrientationSensor, IOrientationSensorStatics4>()->_GetDeviceSelectorWithSensorReadingTypeAndSensorOptimizationGoal(readingType, optimizationGoal, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<OrientationSensor>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<OrientationSensor*>* operation; hrcheck(get_activation_factory<OrientationSensor, IOrientationSensorStatics4>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<OrientationSensor> GetDefault(SensorReadingType sensorReadingtype) { OrientationSensor* result; hrcheck(get_activation_factory<OrientationSensor, IOrientationSensorStatics3>()->_GetDefaultWithSensorReadingType(sensorReadingtype, &result)); return from_abi(result); }
	static ptr<OrientationSensor> GetDefault(SensorReadingType sensorReadingType, SensorOptimizationGoal optimizationGoal) { OrientationSensor* result; hrcheck(get_activation_factory<OrientationSensor, IOrientationSensorStatics3>()->_GetDefaultWithSensorReadingTypeAndSensorOptimizationGoal(sensorReadingType, optimizationGoal, &result)); return from_abi(result); }
	static ptr<OrientationSensor> GetDefaultForRelativeReadings() { OrientationSensor* result; hrcheck(get_activation_factory<OrientationSensor, IOrientationSensorStatics2>()->_GetDefaultForRelativeReadings(&result)); return from_abi(result); }
	static ptr<OrientationSensor> GetDefault() { OrientationSensor* result; hrcheck(get_activation_factory<OrientationSensor, IOrientationSensorStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<OrientationSensor, X> : X, Windows::Devices::Sensors::OrientationSensor_statics<void> {
	typedef typename X::root_type OrientationSensor;
};
struct OrientationSensor : generate<OrientationSensor> {};

// IOrientationSensorReading2
struct IOrientationSensorReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IOrientationSensorReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IOrientationSensorReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IOrientationSensorReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	IOrientationSensorReading2_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensorReading2, X> : Windows::Devices::Sensors::IOrientationSensorReading2_adaptor<X> { typedef adapt IOrientationSensorReading2; };
struct IOrientationSensorReading2 : IOrientationSensorReading2_raw, generate<IOrientationSensorReading2> {};

// IOrientationSensorReadingYawAccuracy
struct IOrientationSensorReadingYawAccuracy_raw : IInspectable {
	virtual STDMETHODIMP _get_YawAccuracy(MagnetometerAccuracy *value);
};
template<typename X> struct IOrientationSensorReadingYawAccuracy_adaptor : X {
	union {
		struct : property {
			MagnetometerAccuracy get() { MagnetometerAccuracy value; hrcheck(enc(&IOrientationSensorReadingYawAccuracy_adaptor::YawAccuracy)->_get_YawAccuracy(&value)); return value; }
			MagnetometerAccuracy operator()() { return get(); }
			operator MagnetometerAccuracy () { return get(); }
		} YawAccuracy;
	};
	IOrientationSensorReadingYawAccuracy_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensorReadingYawAccuracy, X> : Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy_adaptor<X> { typedef adapt IOrientationSensorReadingYawAccuracy; };
struct IOrientationSensorReadingYawAccuracy : IOrientationSensorReadingYawAccuracy_raw, generate<IOrientationSensorReadingYawAccuracy> {};

// IOrientationSensorReading
struct IOrientationSensorReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_RotationMatrix(SensorRotationMatrix* *value);
	virtual STDMETHODIMP _get_Quaternion(SensorQuaternion* *value);
};
template<typename X> struct IOrientationSensorReading_adaptor : X {
	union {
		struct : property {
			ptr<SensorQuaternion> get() { SensorQuaternion* value; hrcheck(enc(&IOrientationSensorReading_adaptor::Quaternion)->_get_Quaternion(&value)); return from_abi(value); }
			ptr<SensorQuaternion> operator()() { return get(); }
			operator ptr<SensorQuaternion> () { return get(); }
			ptr<SensorQuaternion> operator->() { return get(); }
		} Quaternion;
		struct : property {
			ptr<SensorRotationMatrix> get() { SensorRotationMatrix* value; hrcheck(enc(&IOrientationSensorReading_adaptor::RotationMatrix)->_get_RotationMatrix(&value)); return from_abi(value); }
			ptr<SensorRotationMatrix> operator()() { return get(); }
			operator ptr<SensorRotationMatrix> () { return get(); }
			ptr<SensorRotationMatrix> operator->() { return get(); }
		} RotationMatrix;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IOrientationSensorReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IOrientationSensorReading_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensorReading, X> : Windows::Devices::Sensors::IOrientationSensorReading_adaptor<X> { typedef adapt IOrientationSensorReading; };
struct IOrientationSensorReading : IOrientationSensorReading_raw, generate<IOrientationSensorReading> {};

// OrientationSensorReading
template<typename X> struct statics<OrientationSensorReading, X> : X {
	typedef typename X::root_type OrientationSensorReading;
};
struct OrientationSensorReading : generate<OrientationSensorReading> {};

// IOrientationSensorReadingChangedEventArgs
struct IOrientationSensorReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(OrientationSensorReading* *value);
};
template<typename X> struct IOrientationSensorReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<OrientationSensorReading> get() { OrientationSensorReading* value; hrcheck(enc(&IOrientationSensorReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<OrientationSensorReading> operator()() { return get(); }
			operator ptr<OrientationSensorReading> () { return get(); }
			ptr<OrientationSensorReading> operator->() { return get(); }
		} Reading;
	};
	IOrientationSensorReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IOrientationSensorReadingChangedEventArgs, X> : Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs_adaptor<X> { typedef adapt IOrientationSensorReadingChangedEventArgs; };
struct IOrientationSensorReadingChangedEventArgs : IOrientationSensorReadingChangedEventArgs_raw, generate<IOrientationSensorReadingChangedEventArgs> {};

// OrientationSensorReadingChangedEventArgs
template<typename X> struct statics<OrientationSensorReadingChangedEventArgs, X> : X {
	typedef typename X::root_type OrientationSensorReadingChangedEventArgs;
};
struct OrientationSensorReadingChangedEventArgs : generate<OrientationSensorReadingChangedEventArgs> {};

// ISimpleOrientationSensorDeviceId
struct ISimpleOrientationSensorDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct ISimpleOrientationSensorDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISimpleOrientationSensorDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	ISimpleOrientationSensorDeviceId_adaptor() {}
};
template<typename X> struct adapt<ISimpleOrientationSensorDeviceId, X> : Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId_adaptor<X> { typedef adapt ISimpleOrientationSensorDeviceId; };
struct ISimpleOrientationSensorDeviceId : ISimpleOrientationSensorDeviceId_raw, generate<ISimpleOrientationSensorDeviceId> {};

// ISimpleOrientationSensorStatics
struct ISimpleOrientationSensorStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(SimpleOrientationSensor* *result);
};

// ISimpleOrientationSensor2
struct ISimpleOrientationSensor2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReadingTransform(Graphics::Display::DisplayOrientations value);
	virtual STDMETHODIMP _get_ReadingTransform(Graphics::Display::DisplayOrientations *value);
};
template<typename X> struct ISimpleOrientationSensor2_adaptor : X {
	union {
		struct : property {
			Graphics::Display::DisplayOrientations get() { Graphics::Display::DisplayOrientations value; hrcheck(enc(&ISimpleOrientationSensor2_adaptor::ReadingTransform)->_get_ReadingTransform(&value)); return value; }
			Graphics::Display::DisplayOrientations operator()() { return get(); }
			operator Graphics::Display::DisplayOrientations () { return get(); }
			void put(Graphics::Display::DisplayOrientations value) { hrcheck(enc(&ISimpleOrientationSensor2_adaptor::ReadingTransform)->_put_ReadingTransform(value)); }
			void operator=(Graphics::Display::DisplayOrientations value) { put(value); }
			void operator()(Graphics::Display::DisplayOrientations value) { put(value); }
		} ReadingTransform;
	};
	ISimpleOrientationSensor2_adaptor() {}
};
template<typename X> struct adapt<ISimpleOrientationSensor2, X> : Windows::Devices::Sensors::ISimpleOrientationSensor2_adaptor<X> { typedef adapt ISimpleOrientationSensor2; };
struct ISimpleOrientationSensor2 : ISimpleOrientationSensor2_raw, generate<ISimpleOrientationSensor2> {};

// ISimpleOrientationSensor
struct ISimpleOrientationSensor_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentOrientation(SimpleOrientation *value);
	virtual STDMETHODIMP _add_OrientationChanged(Foundation::TypedEventHandler<SimpleOrientationSensor*, SimpleOrientationSensorOrientationChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_OrientationChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct ISimpleOrientationSensor_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SimpleOrientationSensor>, ptr<SimpleOrientationSensorOrientationChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISimpleOrientationSensor_adaptor::OrientationChanged)->_add_OrientationChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISimpleOrientationSensor_adaptor::OrientationChanged)->_remove_OrientationChanged(token)); }
		} OrientationChanged;
	};
	SimpleOrientation GetCurrentOrientation() { SimpleOrientation value; hrcheck(X::get()->_GetCurrentOrientation(&value)); return value; }
	ISimpleOrientationSensor_adaptor() {}
};
template<typename X> struct adapt<ISimpleOrientationSensor, X> : Windows::Devices::Sensors::ISimpleOrientationSensor_adaptor<X> { typedef adapt ISimpleOrientationSensor; };
struct ISimpleOrientationSensor : ISimpleOrientationSensor_raw, generate<ISimpleOrientationSensor> {};

// SimpleOrientationSensor
template<typename> struct SimpleOrientationSensor_statics {
	static ptr<SimpleOrientationSensor> GetDefault() { SimpleOrientationSensor* result; hrcheck(get_activation_factory<SimpleOrientationSensor, ISimpleOrientationSensorStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<SimpleOrientationSensor, X> : X, Windows::Devices::Sensors::SimpleOrientationSensor_statics<void> {
	typedef typename X::root_type SimpleOrientationSensor;
};
struct SimpleOrientationSensor : generate<SimpleOrientationSensor> {};

// ISimpleOrientationSensorOrientationChangedEventArgs
struct ISimpleOrientationSensorOrientationChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Orientation(SimpleOrientation *value);
};
template<typename X> struct ISimpleOrientationSensorOrientationChangedEventArgs_adaptor : X {
	union {
		struct : property {
			SimpleOrientation get() { SimpleOrientation value; hrcheck(enc(&ISimpleOrientationSensorOrientationChangedEventArgs_adaptor::Orientation)->_get_Orientation(&value)); return value; }
			SimpleOrientation operator()() { return get(); }
			operator SimpleOrientation () { return get(); }
		} Orientation;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ISimpleOrientationSensorOrientationChangedEventArgs_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	ISimpleOrientationSensorOrientationChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISimpleOrientationSensorOrientationChangedEventArgs, X> : Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs_adaptor<X> { typedef adapt ISimpleOrientationSensorOrientationChangedEventArgs; };
struct ISimpleOrientationSensorOrientationChangedEventArgs : ISimpleOrientationSensorOrientationChangedEventArgs_raw, generate<ISimpleOrientationSensorOrientationChangedEventArgs> {};

// SimpleOrientationSensorOrientationChangedEventArgs
template<typename X> struct statics<SimpleOrientationSensorOrientationChangedEventArgs, X> : X {
	typedef typename X::root_type SimpleOrientationSensorOrientationChangedEventArgs;
};
struct SimpleOrientationSensorOrientationChangedEventArgs : generate<SimpleOrientationSensorOrientationChangedEventArgs> {};

// IMagnetometerDeviceId
struct IMagnetometerDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IMagnetometerDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagnetometerDeviceId_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IMagnetometerDeviceId_adaptor() {}
};
template<typename X> struct adapt<IMagnetometerDeviceId, X> : Windows::Devices::Sensors::IMagnetometerDeviceId_adaptor<X> { typedef adapt IMagnetometerDeviceId; };
struct IMagnetometerDeviceId : IMagnetometerDeviceId_raw, generate<IMagnetometerDeviceId> {};

// IMagnetometerStatics
struct IMagnetometerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Magnetometer* *result);
};

// IMagnetometerStatics2
struct IMagnetometerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Magnetometer*>* *operation);
};

// IMagnetometer3
struct IMagnetometer3_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct IMagnetometer3_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagnetometer3_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagnetometer3_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IMagnetometer3_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	IMagnetometer3_adaptor() {}
};
template<typename X> struct adapt<IMagnetometer3, X> : Windows::Devices::Sensors::IMagnetometer3_adaptor<X> { typedef adapt IMagnetometer3; };
struct IMagnetometer3 : IMagnetometer3_raw, generate<IMagnetometer3> {};

// IMagnetometer2
struct IMagnetometer2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReadingTransform(Graphics::Display::DisplayOrientations value);
	virtual STDMETHODIMP _get_ReadingTransform(Graphics::Display::DisplayOrientations *value);
};
template<typename X> struct IMagnetometer2_adaptor : X {
	union {
		struct : property {
			Graphics::Display::DisplayOrientations get() { Graphics::Display::DisplayOrientations value; hrcheck(enc(&IMagnetometer2_adaptor::ReadingTransform)->_get_ReadingTransform(&value)); return value; }
			Graphics::Display::DisplayOrientations operator()() { return get(); }
			operator Graphics::Display::DisplayOrientations () { return get(); }
			void put(Graphics::Display::DisplayOrientations value) { hrcheck(enc(&IMagnetometer2_adaptor::ReadingTransform)->_put_ReadingTransform(value)); }
			void operator=(Graphics::Display::DisplayOrientations value) { put(value); }
			void operator()(Graphics::Display::DisplayOrientations value) { put(value); }
		} ReadingTransform;
	};
	IMagnetometer2_adaptor() {}
};
template<typename X> struct adapt<IMagnetometer2, X> : Windows::Devices::Sensors::IMagnetometer2_adaptor<X> { typedef adapt IMagnetometer2; };
struct IMagnetometer2 : IMagnetometer2_raw, generate<IMagnetometer2> {};

// IMagnetometer
struct IMagnetometer_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(MagnetometerReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Magnetometer*, MagnetometerReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMagnetometer_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagnetometer_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagnetometer_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IMagnetometer_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Magnetometer>, ptr<MagnetometerReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMagnetometer_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMagnetometer_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<MagnetometerReading> GetCurrentReading() { MagnetometerReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	IMagnetometer_adaptor() {}
};
template<typename X> struct adapt<IMagnetometer, X> : Windows::Devices::Sensors::IMagnetometer_adaptor<X> { typedef adapt IMagnetometer; };
struct IMagnetometer : IMagnetometer_raw, generate<IMagnetometer> {};

// Magnetometer
template<typename> struct Magnetometer_statics {
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<Magnetometer, IMagnetometerStatics2>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Magnetometer>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Magnetometer*>* operation; hrcheck(get_activation_factory<Magnetometer, IMagnetometerStatics2>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Magnetometer> GetDefault() { Magnetometer* result; hrcheck(get_activation_factory<Magnetometer, IMagnetometerStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Magnetometer, X> : X, Windows::Devices::Sensors::Magnetometer_statics<void> {
	typedef typename X::root_type Magnetometer;
};
struct Magnetometer : generate<Magnetometer> {};

// IMagnetometerReading2
struct IMagnetometerReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IMagnetometerReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IMagnetometerReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IMagnetometerReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	IMagnetometerReading2_adaptor() {}
};
template<typename X> struct adapt<IMagnetometerReading2, X> : Windows::Devices::Sensors::IMagnetometerReading2_adaptor<X> { typedef adapt IMagnetometerReading2; };
struct IMagnetometerReading2 : IMagnetometerReading2_raw, generate<IMagnetometerReading2> {};

// IMagnetometerReading
struct IMagnetometerReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_MagneticFieldX(float *value);
	virtual STDMETHODIMP _get_MagneticFieldY(float *value);
	virtual STDMETHODIMP _get_MagneticFieldZ(float *value);
	virtual STDMETHODIMP _get_DirectionalAccuracy(MagnetometerAccuracy *value);
};
template<typename X> struct IMagnetometerReading_adaptor : X {
	union {
		struct : property {
			MagnetometerAccuracy get() { MagnetometerAccuracy value; hrcheck(enc(&IMagnetometerReading_adaptor::DirectionalAccuracy)->_get_DirectionalAccuracy(&value)); return value; }
			MagnetometerAccuracy operator()() { return get(); }
			operator MagnetometerAccuracy () { return get(); }
		} DirectionalAccuracy;
		struct : property {
			float get() { float value; hrcheck(enc(&IMagnetometerReading_adaptor::MagneticFieldX)->_get_MagneticFieldX(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MagneticFieldX;
		struct : property {
			float get() { float value; hrcheck(enc(&IMagnetometerReading_adaptor::MagneticFieldY)->_get_MagneticFieldY(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MagneticFieldY;
		struct : property {
			float get() { float value; hrcheck(enc(&IMagnetometerReading_adaptor::MagneticFieldZ)->_get_MagneticFieldZ(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MagneticFieldZ;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IMagnetometerReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IMagnetometerReading_adaptor() {}
};
template<typename X> struct adapt<IMagnetometerReading, X> : Windows::Devices::Sensors::IMagnetometerReading_adaptor<X> { typedef adapt IMagnetometerReading; };
struct IMagnetometerReading : IMagnetometerReading_raw, generate<IMagnetometerReading> {};

// MagnetometerReading
template<typename X> struct statics<MagnetometerReading, X> : X {
	typedef typename X::root_type MagnetometerReading;
};
struct MagnetometerReading : generate<MagnetometerReading> {};

// IMagnetometerReadingChangedEventArgs
struct IMagnetometerReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(MagnetometerReading* *value);
};
template<typename X> struct IMagnetometerReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MagnetometerReading> get() { MagnetometerReading* value; hrcheck(enc(&IMagnetometerReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<MagnetometerReading> operator()() { return get(); }
			operator ptr<MagnetometerReading> () { return get(); }
			ptr<MagnetometerReading> operator->() { return get(); }
		} Reading;
	};
	IMagnetometerReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMagnetometerReadingChangedEventArgs, X> : Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs_adaptor<X> { typedef adapt IMagnetometerReadingChangedEventArgs; };
struct IMagnetometerReadingChangedEventArgs : IMagnetometerReadingChangedEventArgs_raw, generate<IMagnetometerReadingChangedEventArgs> {};

// MagnetometerReadingChangedEventArgs
template<typename X> struct statics<MagnetometerReadingChangedEventArgs, X> : X {
	typedef typename X::root_type MagnetometerReadingChangedEventArgs;
};
struct MagnetometerReadingChangedEventArgs : generate<MagnetometerReadingChangedEventArgs> {};

// IActivitySensorStatics
struct IActivitySensorStatics : IInspectable {
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<ActivitySensor*>* *result);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<ActivitySensor*>* *result);
	virtual STDMETHODIMP _GetSystemHistoryAsync(Foundation::DateTime fromTime, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ActivitySensorReading*>*>* *result);
	virtual STDMETHODIMP _GetSystemHistoryWithDurationAsync(Foundation::DateTime fromTime, Foundation::TimeSpan duration, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ActivitySensorReading*>*>* *result);
};

// IActivitySensor
struct IActivitySensor_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReadingAsync(Foundation::IAsyncOperation<ActivitySensorReading*>* *result);
	virtual STDMETHODIMP _get_SubscribedActivities(Foundation::Collections::IVector<ActivityType>* *value);
	virtual STDMETHODIMP _get_PowerInMilliwatts(double *value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_SupportedActivities(Foundation::Collections::IVectorView<ActivityType>* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<ActivitySensor*, ActivitySensorReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IActivitySensor_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IActivitySensor_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IActivitySensor_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			double get() { double value; hrcheck(enc(&IActivitySensor_adaptor::PowerInMilliwatts)->_get_PowerInMilliwatts(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} PowerInMilliwatts;
		struct : property {
			ptr<Foundation::Collections::IVector<ActivityType>> get() { Foundation::Collections::IVector<ActivityType>* value; hrcheck(enc(&IActivitySensor_adaptor::SubscribedActivities)->_get_SubscribedActivities(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ActivityType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ActivityType>> () { return get(); }
			ptr<Foundation::Collections::IVector<ActivityType>> operator->() { return get(); }
		} SubscribedActivities;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ActivityType>> get() { Foundation::Collections::IVectorView<ActivityType>* value; hrcheck(enc(&IActivitySensor_adaptor::SupportedActivities)->_get_SupportedActivities(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ActivityType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ActivityType>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ActivityType>> operator->() { return get(); }
		} SupportedActivities;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ActivitySensor>, ptr<ActivitySensorReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IActivitySensor_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IActivitySensor_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<ActivitySensorReading>>> GetCurrentReadingAsync() { Foundation::IAsyncOperation<ActivitySensorReading*>* result; hrcheck(X::get()->_GetCurrentReadingAsync(&result)); return from_abi(result); }
	IActivitySensor_adaptor() {}
};
template<typename X> struct adapt<IActivitySensor, X> : Windows::Devices::Sensors::IActivitySensor_adaptor<X> { typedef adapt IActivitySensor; };
struct IActivitySensor : IActivitySensor_raw, generate<IActivitySensor> {};

// ActivitySensor
template<typename> struct ActivitySensor_statics {
	static ptr<Foundation::IAsyncOperation<ptr<ActivitySensor>>> GetDefaultAsync() { Foundation::IAsyncOperation<ActivitySensor*>* result; hrcheck(get_activation_factory<ActivitySensor, IActivitySensorStatics>()->_GetDefaultAsync(&result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<ActivitySensor, IActivitySensorStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<ActivitySensor>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<ActivitySensor*>* result; hrcheck(get_activation_factory<ActivitySensor, IActivitySensorStatics>()->_FromIdAsync(deviceId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ActivitySensorReading>>>>> GetSystemHistoryAsync(const Foundation::DateTime& fromTime) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ActivitySensorReading*>*>* result; hrcheck(get_activation_factory<ActivitySensor, IActivitySensorStatics>()->_GetSystemHistoryAsync(fromTime, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<ActivitySensorReading>>>>> GetSystemHistoryAsync(const Foundation::DateTime& fromTime, const Foundation::TimeSpan& duration) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<ActivitySensorReading*>*>* result; hrcheck(get_activation_factory<ActivitySensor, IActivitySensorStatics>()->_GetSystemHistoryWithDurationAsync(fromTime, duration, &result)); return from_abi(result); }
};

template<typename X> struct statics<ActivitySensor, X> : X, Windows::Devices::Sensors::ActivitySensor_statics<void> {
	typedef typename X::root_type ActivitySensor;
};
struct ActivitySensor : generate<ActivitySensor> {};

// IActivitySensorReading
struct IActivitySensorReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Activity(ActivityType *value);
	virtual STDMETHODIMP _get_Confidence(ActivitySensorReadingConfidence *value);
};
template<typename X> struct IActivitySensorReading_adaptor : X {
	union {
		struct : property {
			ActivityType get() { ActivityType value; hrcheck(enc(&IActivitySensorReading_adaptor::Activity)->_get_Activity(&value)); return value; }
			ActivityType operator()() { return get(); }
			operator ActivityType () { return get(); }
		} Activity;
		struct : property {
			ActivitySensorReadingConfidence get() { ActivitySensorReadingConfidence value; hrcheck(enc(&IActivitySensorReading_adaptor::Confidence)->_get_Confidence(&value)); return value; }
			ActivitySensorReadingConfidence operator()() { return get(); }
			operator ActivitySensorReadingConfidence () { return get(); }
		} Confidence;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IActivitySensorReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IActivitySensorReading_adaptor() {}
};
template<typename X> struct adapt<IActivitySensorReading, X> : Windows::Devices::Sensors::IActivitySensorReading_adaptor<X> { typedef adapt IActivitySensorReading; };
struct IActivitySensorReading : IActivitySensorReading_raw, generate<IActivitySensorReading> {};

// ActivitySensorReading
template<typename X> struct statics<ActivitySensorReading, X> : X {
	typedef typename X::root_type ActivitySensorReading;
};
struct ActivitySensorReading : generate<ActivitySensorReading> {};

// IActivitySensorReadingChangedEventArgs
struct IActivitySensorReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(ActivitySensorReading* *value);
};
template<typename X> struct IActivitySensorReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<ActivitySensorReading> get() { ActivitySensorReading* value; hrcheck(enc(&IActivitySensorReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<ActivitySensorReading> operator()() { return get(); }
			operator ptr<ActivitySensorReading> () { return get(); }
			ptr<ActivitySensorReading> operator->() { return get(); }
		} Reading;
	};
	IActivitySensorReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IActivitySensorReadingChangedEventArgs, X> : Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs_adaptor<X> { typedef adapt IActivitySensorReadingChangedEventArgs; };
struct IActivitySensorReadingChangedEventArgs : IActivitySensorReadingChangedEventArgs_raw, generate<IActivitySensorReadingChangedEventArgs> {};

// ActivitySensorReadingChangedEventArgs
template<typename X> struct statics<ActivitySensorReadingChangedEventArgs, X> : X {
	typedef typename X::root_type ActivitySensorReadingChangedEventArgs;
};
struct ActivitySensorReadingChangedEventArgs : generate<ActivitySensorReadingChangedEventArgs> {};

// IActivitySensorReadingChangeReport
struct IActivitySensorReadingChangeReport_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(ActivitySensorReading* *value);
};
template<typename X> struct IActivitySensorReadingChangeReport_adaptor : X {
	union {
		struct : property {
			ptr<ActivitySensorReading> get() { ActivitySensorReading* value; hrcheck(enc(&IActivitySensorReadingChangeReport_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<ActivitySensorReading> operator()() { return get(); }
			operator ptr<ActivitySensorReading> () { return get(); }
			ptr<ActivitySensorReading> operator->() { return get(); }
		} Reading;
	};
	IActivitySensorReadingChangeReport_adaptor() {}
};
template<typename X> struct adapt<IActivitySensorReadingChangeReport, X> : Windows::Devices::Sensors::IActivitySensorReadingChangeReport_adaptor<X> { typedef adapt IActivitySensorReadingChangeReport; };
struct IActivitySensorReadingChangeReport : IActivitySensorReadingChangeReport_raw, generate<IActivitySensorReadingChangeReport> {};

// IActivitySensorTriggerDetails
struct IActivitySensorTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _ReadReports(Foundation::Collections::IVectorView<ActivitySensorReadingChangeReport*>* *value);
};
template<typename X> struct IActivitySensorTriggerDetails_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<ActivitySensorReadingChangeReport>>> ReadReports() { Foundation::Collections::IVectorView<ActivitySensorReadingChangeReport*>* value; hrcheck(X::get()->_ReadReports(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IActivitySensorTriggerDetails, X> : Windows::Devices::Sensors::IActivitySensorTriggerDetails_adaptor<X> { typedef adapt IActivitySensorTriggerDetails; };
struct IActivitySensorTriggerDetails : IActivitySensorTriggerDetails_raw, generate<IActivitySensorTriggerDetails> {};

// ActivitySensorReadingChangeReport
template<typename X> struct statics<ActivitySensorReadingChangeReport, X> : X {
	typedef typename X::root_type ActivitySensorReadingChangeReport;
};
struct ActivitySensorReadingChangeReport : generate<ActivitySensorReadingChangeReport> {};

// ActivitySensorTriggerDetails
template<typename X> struct statics<ActivitySensorTriggerDetails, X> : X {
	typedef typename X::root_type ActivitySensorTriggerDetails;
};
struct ActivitySensorTriggerDetails : generate<ActivitySensorTriggerDetails> {};

// IBarometerStatics
struct IBarometerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Barometer* *result);
};

// IBarometerStatics2
struct IBarometerStatics2 : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Barometer*>* *operation);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
};

// IBarometer2
struct IBarometer2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct IBarometer2_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarometer2_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarometer2_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IBarometer2_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	IBarometer2_adaptor() {}
};
template<typename X> struct adapt<IBarometer2, X> : Windows::Devices::Sensors::IBarometer2_adaptor<X> { typedef adapt IBarometer2; };
struct IBarometer2 : IBarometer2_raw, generate<IBarometer2> {};

// IBarometer
struct IBarometer_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(BarometerReading* *value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Barometer*, BarometerReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBarometer_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBarometer_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarometer_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarometer_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IBarometer_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Barometer>, ptr<BarometerReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBarometer_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBarometer_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<BarometerReading> GetCurrentReading() { BarometerReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	IBarometer_adaptor() {}
};
template<typename X> struct adapt<IBarometer, X> : Windows::Devices::Sensors::IBarometer_adaptor<X> { typedef adapt IBarometer; };
struct IBarometer : IBarometer_raw, generate<IBarometer> {};

// Barometer
template<typename> struct Barometer_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Barometer>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Barometer*>* operation; hrcheck(get_activation_factory<Barometer, IBarometerStatics2>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<Barometer, IBarometerStatics2>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static ptr<Barometer> GetDefault() { Barometer* result; hrcheck(get_activation_factory<Barometer, IBarometerStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Barometer, X> : X, Windows::Devices::Sensors::Barometer_statics<void> {
	typedef typename X::root_type Barometer;
};
struct Barometer : generate<Barometer> {};

// IBarometerReading2
struct IBarometerReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IBarometerReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IBarometerReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IBarometerReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	IBarometerReading2_adaptor() {}
};
template<typename X> struct adapt<IBarometerReading2, X> : Windows::Devices::Sensors::IBarometerReading2_adaptor<X> { typedef adapt IBarometerReading2; };
struct IBarometerReading2 : IBarometerReading2_raw, generate<IBarometerReading2> {};

// IBarometerReading
struct IBarometerReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_StationPressureInHectopascals(double *value);
};
template<typename X> struct IBarometerReading_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IBarometerReading_adaptor::StationPressureInHectopascals)->_get_StationPressureInHectopascals(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} StationPressureInHectopascals;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IBarometerReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IBarometerReading_adaptor() {}
};
template<typename X> struct adapt<IBarometerReading, X> : Windows::Devices::Sensors::IBarometerReading_adaptor<X> { typedef adapt IBarometerReading; };
struct IBarometerReading : IBarometerReading_raw, generate<IBarometerReading> {};

// BarometerReading
template<typename X> struct statics<BarometerReading, X> : X {
	typedef typename X::root_type BarometerReading;
};
struct BarometerReading : generate<BarometerReading> {};

// IBarometerReadingChangedEventArgs
struct IBarometerReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(BarometerReading* *value);
};
template<typename X> struct IBarometerReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<BarometerReading> get() { BarometerReading* value; hrcheck(enc(&IBarometerReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<BarometerReading> operator()() { return get(); }
			operator ptr<BarometerReading> () { return get(); }
			ptr<BarometerReading> operator->() { return get(); }
		} Reading;
	};
	IBarometerReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBarometerReadingChangedEventArgs, X> : Windows::Devices::Sensors::IBarometerReadingChangedEventArgs_adaptor<X> { typedef adapt IBarometerReadingChangedEventArgs; };
struct IBarometerReadingChangedEventArgs : IBarometerReadingChangedEventArgs_raw, generate<IBarometerReadingChangedEventArgs> {};

// BarometerReadingChangedEventArgs
template<typename X> struct statics<BarometerReadingChangedEventArgs, X> : X {
	typedef typename X::root_type BarometerReadingChangedEventArgs;
};
struct BarometerReadingChangedEventArgs : generate<BarometerReadingChangedEventArgs> {};

// IPedometerReading
struct IPedometerReading_raw : IInspectable {
	virtual STDMETHODIMP _get_StepKind(PedometerStepKind *value);
	virtual STDMETHODIMP _get_CumulativeSteps(int *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_CumulativeStepsDuration(Foundation::TimeSpan *value);
};
template<typename X> struct IPedometerReading_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IPedometerReading_adaptor::CumulativeSteps)->_get_CumulativeSteps(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} CumulativeSteps;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPedometerReading_adaptor::CumulativeStepsDuration)->_get_CumulativeStepsDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} CumulativeStepsDuration;
		struct : property {
			PedometerStepKind get() { PedometerStepKind value; hrcheck(enc(&IPedometerReading_adaptor::StepKind)->_get_StepKind(&value)); return value; }
			PedometerStepKind operator()() { return get(); }
			operator PedometerStepKind () { return get(); }
		} StepKind;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IPedometerReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IPedometerReading_adaptor() {}
};
template<typename X> struct adapt<IPedometerReading, X> : Windows::Devices::Sensors::IPedometerReading_adaptor<X> { typedef adapt IPedometerReading; };
struct IPedometerReading : IPedometerReading_raw, generate<IPedometerReading> {};

// IPedometerReadingChangedEventArgs
struct IPedometerReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(PedometerReading* *value);
};
template<typename X> struct IPedometerReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PedometerReading> get() { PedometerReading* value; hrcheck(enc(&IPedometerReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<PedometerReading> operator()() { return get(); }
			operator ptr<PedometerReading> () { return get(); }
			ptr<PedometerReading> operator->() { return get(); }
		} Reading;
	};
	IPedometerReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPedometerReadingChangedEventArgs, X> : Windows::Devices::Sensors::IPedometerReadingChangedEventArgs_adaptor<X> { typedef adapt IPedometerReadingChangedEventArgs; };
struct IPedometerReadingChangedEventArgs : IPedometerReadingChangedEventArgs_raw, generate<IPedometerReadingChangedEventArgs> {};

// PedometerReading
template<typename X> struct statics<PedometerReading, X> : X {
	typedef typename X::root_type PedometerReading;
};
struct PedometerReading : generate<PedometerReading> {};

// IPedometerStatics
struct IPedometerStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<Pedometer*>* *operation);
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<Pedometer*>* *operation);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _GetSystemHistoryAsync(Foundation::DateTime fromTime, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PedometerReading*>*>* *operation);
	virtual STDMETHODIMP _GetSystemHistoryWithDurationAsync(Foundation::DateTime fromTime, Foundation::TimeSpan duration, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PedometerReading*>*>* *operation);
};

// IPedometerStatics2
struct IPedometerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetReadingsFromTriggerDetails(SensorDataThresholdTriggerDetails* triggerDetails, Foundation::Collections::IVectorView<PedometerReading*>* *result);
};

// IPedometer2
struct IPedometer2_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReadings(Foundation::Collections::IMapView<PedometerStepKind, PedometerReading*>* *value);
};
template<typename X> struct IPedometer2_adaptor : X {
	ptr<Foundation::Collections::IMapView<PedometerStepKind, ptr<PedometerReading>>> GetCurrentReadings() { Foundation::Collections::IMapView<PedometerStepKind, PedometerReading*>* value; hrcheck(X::get()->_GetCurrentReadings(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IPedometer2, X> : Windows::Devices::Sensors::IPedometer2_adaptor<X> { typedef adapt IPedometer2; };
struct IPedometer2 : IPedometer2_raw, generate<IPedometer2> {};

// IPedometer
struct IPedometer_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_PowerInMilliwatts(double *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Pedometer*, PedometerReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IPedometer_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPedometer_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPedometer_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			double get() { double value; hrcheck(enc(&IPedometer_adaptor::PowerInMilliwatts)->_get_PowerInMilliwatts(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} PowerInMilliwatts;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPedometer_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IPedometer_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Pedometer>, ptr<PedometerReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPedometer_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPedometer_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	IPedometer_adaptor() {}
};
template<typename X> struct adapt<IPedometer, X> : Windows::Devices::Sensors::IPedometer_adaptor<X> { typedef adapt IPedometer; };
struct IPedometer : IPedometer_raw, generate<IPedometer> {};

// Pedometer
template<typename> struct Pedometer_statics {
	static ptr<Foundation::Collections::IVectorView<ptr<PedometerReading>>> GetReadingsFromTriggerDetails(pptr<SensorDataThresholdTriggerDetails> triggerDetails) { Foundation::Collections::IVectorView<PedometerReading*>* result; hrcheck(get_activation_factory<Pedometer, IPedometerStatics2>()->_GetReadingsFromTriggerDetails(triggerDetails, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Pedometer>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<Pedometer*>* operation; hrcheck(get_activation_factory<Pedometer, IPedometerStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Pedometer>>> GetDefaultAsync() { Foundation::IAsyncOperation<Pedometer*>* operation; hrcheck(get_activation_factory<Pedometer, IPedometerStatics>()->_GetDefaultAsync(&operation)); return from_abi(operation); }
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<Pedometer, IPedometerStatics>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PedometerReading>>>>> GetSystemHistoryAsync(const Foundation::DateTime& fromTime) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PedometerReading*>*>* operation; hrcheck(get_activation_factory<Pedometer, IPedometerStatics>()->_GetSystemHistoryAsync(fromTime, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PedometerReading>>>>> GetSystemHistoryAsync(const Foundation::DateTime& fromTime, const Foundation::TimeSpan& duration) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PedometerReading*>*>* operation; hrcheck(get_activation_factory<Pedometer, IPedometerStatics>()->_GetSystemHistoryWithDurationAsync(fromTime, duration, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<Pedometer, X> : X, Windows::Devices::Sensors::Pedometer_statics<void> {
	typedef typename X::root_type Pedometer;
};
struct Pedometer : generate<Pedometer> {};

// PedometerReadingChangedEventArgs
template<typename X> struct statics<PedometerReadingChangedEventArgs, X> : X {
	typedef typename X::root_type PedometerReadingChangedEventArgs;
};
struct PedometerReadingChangedEventArgs : generate<PedometerReadingChangedEventArgs> {};

// IPedometerDataThresholdFactory
struct IPedometerDataThresholdFactory : IInspectable {
	virtual STDMETHODIMP _Create(Pedometer* sensor, int stepGoal, PedometerDataThreshold* *threshold);
};

// PedometerDataThreshold
template<typename> struct PedometerDataThreshold_statics {
	static PedometerDataThreshold *activate(pptr<Pedometer> sensor, int stepGoal) { PedometerDataThreshold *threshold; hrcheck(get_activation_factory<PedometerDataThreshold, IPedometerDataThresholdFactory>()->_Create(sensor, stepGoal, &threshold)); return threshold; }
};

template<typename X> struct statics<PedometerDataThreshold, X> : X, Windows::Devices::Sensors::PedometerDataThreshold_statics<void> {
	using Windows::Devices::Sensors::PedometerDataThreshold_statics<void>::activate;
	typedef typename X::root_type PedometerDataThreshold;
};
struct PedometerDataThreshold : generate<PedometerDataThreshold> {};

// IProximitySensorStatics
struct IProximitySensorStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
	virtual STDMETHODIMP _FromId(HSTRING sensorId, ProximitySensor* *result);
};

// IProximitySensorStatics2
struct IProximitySensorStatics2 : IInspectable {
	virtual STDMETHODIMP _GetReadingsFromTriggerDetails(SensorDataThresholdTriggerDetails* triggerDetails, Foundation::Collections::IVectorView<ProximitySensorReading*>* *result);
};

// IProximitySensor
struct IProximitySensor_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_MaxDistanceInMillimeters(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _get_MinDistanceInMillimeters(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _GetCurrentReading(ProximitySensorReading* *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<ProximitySensor*, ProximitySensorReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CreateDisplayOnOffController(ProximitySensorDisplayOnOffController* *controller);
};
template<typename X> struct IProximitySensor_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProximitySensor_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IProximitySensor_adaptor::MaxDistanceInMillimeters)->_get_MaxDistanceInMillimeters(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} MaxDistanceInMillimeters;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IProximitySensor_adaptor::MinDistanceInMillimeters)->_get_MinDistanceInMillimeters(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} MinDistanceInMillimeters;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ProximitySensor>, ptr<ProximitySensorReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IProximitySensor_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IProximitySensor_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<ProximitySensorReading> GetCurrentReading() { ProximitySensorReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	ptr<ProximitySensorDisplayOnOffController> CreateDisplayOnOffController() { ProximitySensorDisplayOnOffController* controller; hrcheck(X::get()->_CreateDisplayOnOffController(&controller)); return from_abi(controller); }
	IProximitySensor_adaptor() {}
};
template<typename X> struct adapt<IProximitySensor, X> : Windows::Devices::Sensors::IProximitySensor_adaptor<X> { typedef adapt IProximitySensor; };
struct IProximitySensor : IProximitySensor_raw, generate<IProximitySensor> {};

// ProximitySensor
template<typename> struct ProximitySensor_statics {
	static ptr<Foundation::Collections::IVectorView<ptr<ProximitySensorReading>>> GetReadingsFromTriggerDetails(pptr<SensorDataThresholdTriggerDetails> triggerDetails) { Foundation::Collections::IVectorView<ProximitySensorReading*>* result; hrcheck(get_activation_factory<ProximitySensor, IProximitySensorStatics2>()->_GetReadingsFromTriggerDetails(triggerDetails, &result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<ProximitySensor, IProximitySensorStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
	static ptr<ProximitySensor> FromId(hstring_ref sensorId) { ProximitySensor* result; hrcheck(get_activation_factory<ProximitySensor, IProximitySensorStatics>()->_FromId(sensorId, &result)); return from_abi(result); }
};

template<typename X> struct statics<ProximitySensor, X> : X, Windows::Devices::Sensors::ProximitySensor_statics<void> {
	typedef typename X::root_type ProximitySensor;
};
struct ProximitySensor : generate<ProximitySensor> {};

// IProximitySensorReading
struct IProximitySensorReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_IsDetected(bool *value);
	virtual STDMETHODIMP _get_DistanceInMillimeters(Foundation::IReference<unsigned>* *value);
};
template<typename X> struct IProximitySensorReading_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IProximitySensorReading_adaptor::DistanceInMillimeters)->_get_DistanceInMillimeters(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} DistanceInMillimeters;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IProximitySensorReading_adaptor::IsDetected)->_get_IsDetected(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDetected;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IProximitySensorReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IProximitySensorReading_adaptor() {}
};
template<typename X> struct adapt<IProximitySensorReading, X> : Windows::Devices::Sensors::IProximitySensorReading_adaptor<X> { typedef adapt IProximitySensorReading; };
struct IProximitySensorReading : IProximitySensorReading_raw, generate<IProximitySensorReading> {};

// ProximitySensorReading
template<typename X> struct statics<ProximitySensorReading, X> : X {
	typedef typename X::root_type ProximitySensorReading;
};
struct ProximitySensorReading : generate<ProximitySensorReading> {};

// IProximitySensorReadingChangedEventArgs
struct IProximitySensorReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(ProximitySensorReading* *value);
};
template<typename X> struct IProximitySensorReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<ProximitySensorReading> get() { ProximitySensorReading* value; hrcheck(enc(&IProximitySensorReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<ProximitySensorReading> operator()() { return get(); }
			operator ptr<ProximitySensorReading> () { return get(); }
			ptr<ProximitySensorReading> operator->() { return get(); }
		} Reading;
	};
	IProximitySensorReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IProximitySensorReadingChangedEventArgs, X> : Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs_adaptor<X> { typedef adapt IProximitySensorReadingChangedEventArgs; };
struct IProximitySensorReadingChangedEventArgs : IProximitySensorReadingChangedEventArgs_raw, generate<IProximitySensorReadingChangedEventArgs> {};

// ProximitySensorReadingChangedEventArgs
template<typename X> struct statics<ProximitySensorReadingChangedEventArgs, X> : X {
	typedef typename X::root_type ProximitySensorReadingChangedEventArgs;
};
struct ProximitySensorReadingChangedEventArgs : generate<ProximitySensorReadingChangedEventArgs> {};

// ProximitySensorDisplayOnOffController
template<typename X> struct statics<ProximitySensorDisplayOnOffController, X> : X {
	typedef typename X::root_type ProximitySensorDisplayOnOffController;
};
struct ProximitySensorDisplayOnOffController : generate<ProximitySensorDisplayOnOffController> {};

// IProximitySensorDataThresholdFactory
struct IProximitySensorDataThresholdFactory : IInspectable {
	virtual STDMETHODIMP _Create(ProximitySensor* sensor, ProximitySensorDataThreshold* *threshold);
};

// ProximitySensorDataThreshold
template<typename> struct ProximitySensorDataThreshold_statics {
	static ProximitySensorDataThreshold *activate(pptr<ProximitySensor> sensor) { ProximitySensorDataThreshold *threshold; hrcheck(get_activation_factory<ProximitySensorDataThreshold, IProximitySensorDataThresholdFactory>()->_Create(sensor, &threshold)); return threshold; }
};

template<typename X> struct statics<ProximitySensorDataThreshold, X> : X, Windows::Devices::Sensors::ProximitySensorDataThreshold_statics<void> {
	using Windows::Devices::Sensors::ProximitySensorDataThreshold_statics<void>::activate;
	typedef typename X::root_type ProximitySensorDataThreshold;
};
struct ProximitySensorDataThreshold : generate<ProximitySensorDataThreshold> {};

// IAltimeterStatics
struct IAltimeterStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(Altimeter* *result);
};

// IAltimeter2
struct IAltimeter2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct IAltimeter2_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAltimeter2_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAltimeter2_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAltimeter2_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	IAltimeter2_adaptor() {}
};
template<typename X> struct adapt<IAltimeter2, X> : Windows::Devices::Sensors::IAltimeter2_adaptor<X> { typedef adapt IAltimeter2; };
struct IAltimeter2 : IAltimeter2_raw, generate<IAltimeter2> {};

// IAltimeter
struct IAltimeter_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(AltimeterReading* *value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<Altimeter*, AltimeterReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAltimeter_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAltimeter_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAltimeter_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAltimeter_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAltimeter_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<Altimeter>, ptr<AltimeterReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAltimeter_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAltimeter_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<AltimeterReading> GetCurrentReading() { AltimeterReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	IAltimeter_adaptor() {}
};
template<typename X> struct adapt<IAltimeter, X> : Windows::Devices::Sensors::IAltimeter_adaptor<X> { typedef adapt IAltimeter; };
struct IAltimeter : IAltimeter_raw, generate<IAltimeter> {};

// Altimeter
template<typename> struct Altimeter_statics {
	static ptr<Altimeter> GetDefault() { Altimeter* result; hrcheck(get_activation_factory<Altimeter, IAltimeterStatics>()->_GetDefault(&result)); return from_abi(result); }
};

template<typename X> struct statics<Altimeter, X> : X, Windows::Devices::Sensors::Altimeter_statics<void> {
	typedef typename X::root_type Altimeter;
};
struct Altimeter : generate<Altimeter> {};

// IAltimeterReading2
struct IAltimeterReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct IAltimeterReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAltimeterReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IAltimeterReading2_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
	};
	IAltimeterReading2_adaptor() {}
};
template<typename X> struct adapt<IAltimeterReading2, X> : Windows::Devices::Sensors::IAltimeterReading2_adaptor<X> { typedef adapt IAltimeterReading2; };
struct IAltimeterReading2 : IAltimeterReading2_raw, generate<IAltimeterReading2> {};

// IAltimeterReading
struct IAltimeterReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_AltitudeChangeInMeters(double *value);
};
template<typename X> struct IAltimeterReading_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IAltimeterReading_adaptor::AltitudeChangeInMeters)->_get_AltitudeChangeInMeters(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} AltitudeChangeInMeters;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAltimeterReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	IAltimeterReading_adaptor() {}
};
template<typename X> struct adapt<IAltimeterReading, X> : Windows::Devices::Sensors::IAltimeterReading_adaptor<X> { typedef adapt IAltimeterReading; };
struct IAltimeterReading : IAltimeterReading_raw, generate<IAltimeterReading> {};

// AltimeterReading
template<typename X> struct statics<AltimeterReading, X> : X {
	typedef typename X::root_type AltimeterReading;
};
struct AltimeterReading : generate<AltimeterReading> {};

// IAltimeterReadingChangedEventArgs
struct IAltimeterReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(AltimeterReading* *value);
};
template<typename X> struct IAltimeterReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AltimeterReading> get() { AltimeterReading* value; hrcheck(enc(&IAltimeterReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<AltimeterReading> operator()() { return get(); }
			operator ptr<AltimeterReading> () { return get(); }
			ptr<AltimeterReading> operator->() { return get(); }
		} Reading;
	};
	IAltimeterReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAltimeterReadingChangedEventArgs, X> : Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs_adaptor<X> { typedef adapt IAltimeterReadingChangedEventArgs; };
struct IAltimeterReadingChangedEventArgs : IAltimeterReadingChangedEventArgs_raw, generate<IAltimeterReadingChangedEventArgs> {};

// AltimeterReadingChangedEventArgs
template<typename X> struct statics<AltimeterReadingChangedEventArgs, X> : X {
	typedef typename X::root_type AltimeterReadingChangedEventArgs;
};
struct AltimeterReadingChangedEventArgs : generate<AltimeterReadingChangedEventArgs> {};
}}}
} // namespace iso_winrt
