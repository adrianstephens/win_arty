#pragma once
// generated by isopod tools
// namespaces:
// Windows.Networking.NetworkOperators

#include "Windows.Networking.NetworkOperators.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.Networking.Connectivity.0.h"
#include "Windows.Devices.Sms.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Data { namespace Xml { namespace Dom {
struct XmlDocument;
}}}
namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
}}
namespace Networking {
struct HostName;
}
namespace Storage { namespace Streams {
struct IBuffer;
struct IRandomAccessStreamReference;
}}}

// defs

template<> struct def<Windows::Networking::NetworkOperators::DataClasses> : enum_type<unsigned> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceType> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkDeviceStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkRegistrationState> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandRadioState> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorDataUsageNotificationKind> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorEventMessageType> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::TetheringOperationalState> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::TetheringCapability> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::TetheringOperationStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPinLockState> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPinType> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPinFormat> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppOperationStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::UiccAppKind> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::UiccAppRecordKind> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::UiccAccessCondition> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandModemStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAccountStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAccount3> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAccount2> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAccount> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandAccount> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandAccount, Windows::Networking::NetworkOperators::IMobileBroadbandAccount2, Windows::Networking::NetworkOperators::IMobileBroadbandAccount3> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork3> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork2> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandNetwork> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandNetwork, Windows::Networking::NetworkOperators::IMobileBroadbandNetwork2, Windows::Networking::NetworkOperators::IMobileBroadbandNetwork3> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation3> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation2> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation2, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation3> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandPinManager> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPinManager> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandPinManager> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandUiccApp> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandUiccApp> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandUiccApp> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandCellsInfo> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandCellsInfo> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandCellsInfo> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorDataUsageTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorDataUsageTriggerDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::INetworkOperatorDataUsageTriggerDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::ITetheringEntitlementCheckTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::TetheringEntitlementCheckTriggerDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::ITetheringEntitlementCheckTriggerDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration> : class_type<Platform::Object, Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics3> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics2> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringClientManager> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager> : class_type<Platform::Object, Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager, Windows::Networking::NetworkOperators::INetworkOperatorTetheringClientManager> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringClient> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorTetheringClient> : class_type<Platform::Object, Windows::Networking::NetworkOperators::INetworkOperatorTetheringClient> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModemStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModem3> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModem2> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModem> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandModem> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandModem, Windows::Networking::NetworkOperators::IMobileBroadbandModem2, Windows::Networking::NetworkOperators::IMobileBroadbandModem3> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandUicc> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandUicc> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandUicc> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration2> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandSarManager> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandSarManager> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandSarManager> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandModemConfiguration> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration, Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration2> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceInformation> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceInformation> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceInformation> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceService> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceService> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceService> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandPco> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPco> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandPco> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandPin> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPin> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandPin> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandPinOperationResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandPinOperationResult> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataSession> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataSession> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataSession> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandSession> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandSession> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandSession> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataReceivedEventArgs> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataReceivedEventArgs> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandResult> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppsResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppsResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppsResult> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppRecordDetailsResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppRecordDetailsResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppRecordDetailsResult> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppReadRecordResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppReadRecordResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppReadRecordResult> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChange> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandNetworkRegistrationStateChange> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChange> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandNetworkRegistrationStateChangeTriggerDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChange> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandRadioStateChange> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChange> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChangeTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandRadioStateChangeTriggerDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChangeTriggerDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChange> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPinLockStateChange> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChange> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChangeTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPinLockStateChangeTriggerDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChangeTriggerDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceTriggerDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceTriggerDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::IKnownCSimFilePathsStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::KnownCSimFilePaths> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Networking::NetworkOperators::IKnownRuimFilePathsStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::KnownRuimFilePaths> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Networking::NetworkOperators::IKnownSimFilePathsStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::KnownSimFilePaths> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Networking::NetworkOperators::IKnownUSimFilePathsStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::KnownUSimFilePaths> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandCellCdma> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandCellCdma> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandCellCdma> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandCellGsm> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandCellGsm> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandCellGsm> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandCellLte> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandCellLte> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandCellLte> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandCellTdscdma> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandCellTdscdma> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandCellTdscdma> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandCellUmts> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandCellUmts> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandCellUmts> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModemIsolationFactory> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandModemIsolation> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandModemIsolation> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandModemIsolation>, custom_activators {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandPcoDataChangeTriggerDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandPcoDataChangeTriggerDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandPcoDataChangeTriggerDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAntennaSarFactory> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandAntennaSar> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandAntennaSar> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandAntennaSar>, custom_activators {};
template<> struct def<Windows::Networking::NetworkOperators::IMobileBroadbandTransmissionStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::MobileBroadbandTransmissionStateChangedEventArgs> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IMobileBroadbandTransmissionStateChangedEventArgs> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimAuthenticationPreference> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimProfileClass> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimOperationStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimProfileMetadataState> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimProfileState> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimState> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimProfileInstallProgress> : value_type<int, int> {};
template<> struct def<Windows::Networking::NetworkOperators::IESim> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimPolicy> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimPolicy> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimPolicy> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimProfile> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimProfile> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimProfile> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimOperationResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimOperationResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimOperationResult> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimDownloadProfileMetadataResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimDownloadProfileMetadataResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimDownloadProfileMetadataResult> {};
template<> struct def<Windows::Networking::NetworkOperators::ESim> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESim> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimAddedEventArgs> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimAddedEventArgs> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimProfileMetadata> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimProfileMetadata> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimProfileMetadata> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimManagerStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimServiceInfo> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimServiceInfo> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimServiceInfo> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimWatcher> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimWatcher> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimWatcher> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimProfilePolicy> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimProfilePolicy> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimProfilePolicy> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimRemovedEventArgs> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimRemovedEventArgs> {};
template<> struct def<Windows::Networking::NetworkOperators::IESimUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ESimUpdatedEventArgs> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IESimUpdatedEventArgs> {};
template<> struct def<Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::HotspotAuthenticationEventDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails> {};
template<> struct def<Windows::Networking::NetworkOperators::IHotspotAuthenticationContextStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::HotspotAuthenticationContext> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IHotspotAuthenticationContext, Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2> {};
template<> struct def<Windows::Networking::NetworkOperators::HotspotAuthenticationResponseCode> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult> {};
template<> struct def<Windows::Networking::NetworkOperators::ProfileMediaType> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults> {};
template<> struct def<Windows::Networking::NetworkOperators::ProfileUsage> : value_type<unsigned, Windows::Foundation::DateTime> {};
template<> struct def<Windows::Networking::NetworkOperators::IProvisionedProfile> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ProvisionedProfile> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IProvisionedProfile> {};
template<> struct def<Windows::Networking::NetworkOperators::IProvisioningAgent> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IProvisioningAgentStaticMethods> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::ProvisioningAgent> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IProvisioningAgent> {};
template<> struct def<Windows::Networking::NetworkOperators::UssdResultCode> : enum_type<int> {};
template<> struct def<Windows::Networking::NetworkOperators::IUssdMessage> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IUssdMessageFactory> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::UssdMessage> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IUssdMessage>, custom_activators {};
template<> struct def<Windows::Networking::NetworkOperators::IUssdReply> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::UssdReply> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IUssdReply> {};
template<> struct def<Windows::Networking::NetworkOperators::IUssdSession> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IUssdSessionStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::UssdSession> : class_type<Platform::Object, Windows::Networking::NetworkOperators::IUssdSession> {};
template<> struct def<Windows::Networking::NetworkOperators::LegacyNetworkOperatorsContract> : value_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorNotificationEventDetails> : class_type<Platform::Object, Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails, Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck> {};
template<> struct def<Windows::Networking::NetworkOperators::NetworkOperatorsFdnContract> : value_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::IFdnAccessManagerStatics> : interface_type<> {};
template<> struct def<Windows::Networking::NetworkOperators::FdnAccessManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAccountStatics> { define_guid(0xAA7F4D24, 0xAFC1, 0x4FC8, 0xAE, 0x9A, 0xA9, 0x17, 0x53, 0x10, 0xFA, 0xAD);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAccount3> { define_guid(0x92A1E21, 0x9379, 0x4B9B, 0xAD, 0x31, 0xD5, 0xFE, 0xE2, 0xF7, 0x48, 0xC6);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAccount2> { define_guid(0x38F52F1C, 0x1136, 0x4257, 0x95, 0x9F, 0xB6, 0x58, 0xA3, 0x52, 0xB6, 0xD4);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAccount> { define_guid(0x36C24CCD, 0xCEE2, 0x43E0, 0xA6, 0x3, 0xEE, 0x86, 0xA3, 0x6D, 0x65, 0x70);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork3> { define_guid(0x33670A8A, 0xC7EF, 0x444C, 0xAB, 0x6C, 0xDF, 0x7E, 0xF7, 0xA3, 0x90, 0xFE);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork2> { define_guid(0x5A55DB22, 0x62F7, 0x4BDD, 0xBA, 0x1D, 0x47, 0x74, 0x41, 0x96, 0xB, 0xA0);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork> { define_guid(0xCB63928C, 0x309, 0x4CB6, 0xA8, 0xC1, 0x6A, 0x5A, 0x3C, 0x8E, 0x1F, 0xF6);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation3> { define_guid(0xE08BB4BD, 0x5D30, 0x4B5A, 0x92, 0xCC, 0xD5, 0x4D, 0xF8, 0x81, 0xD4, 0x9E);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation2> { define_guid(0x2E467AF1, 0xF932, 0x4737, 0xA7, 0x22, 0x3, 0xBA, 0x72, 0x37, 0xC, 0xB8);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation> { define_guid(0xE6D08168, 0xE381, 0x4C6E, 0x9B, 0xE8, 0xFE, 0x15, 0x69, 0x69, 0xA4, 0x46);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandPinManager> { define_guid(0x83567EDD, 0x6E1F, 0x4B9B, 0xA4, 0x13, 0x2B, 0x1F, 0x50, 0xCC, 0x36, 0xDF);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandUiccApp> { define_guid(0x4D170556, 0x98A1, 0x43DD, 0xB2, 0xEC, 0x50, 0xC9, 0xC, 0xF2, 0x48, 0xDF);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandCellsInfo> { define_guid(0x89A9562A, 0xE472, 0x4DA5, 0x92, 0x9C, 0xDE, 0x61, 0x71, 0x1D, 0xD2, 0x61);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorDataUsageTriggerDetails> { define_guid(0x50E3126D, 0xA465, 0x4EEB, 0x93, 0x17, 0x28, 0xA1, 0x67, 0x63, 0xC, 0xEA);};
template<> struct uuid<Windows::Networking::NetworkOperators::ITetheringEntitlementCheckTriggerDetails> { define_guid(0x3C65E9D, 0x5926, 0x41F3, 0xA9, 0x4E, 0xB5, 0x9, 0x26, 0xFC, 0x42, 0x1B);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration> { define_guid(0xBCC0284, 0x412E, 0x403D, 0xAC, 0xC6, 0xB7, 0x57, 0xE3, 0x47, 0x74, 0xA4);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult> { define_guid(0xEBD203A1, 0x1BA, 0x476D, 0xB4, 0xB3, 0xBF, 0x3D, 0x12, 0xC8, 0xF8, 0xC);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics> { define_guid(0x3EBCBACC, 0xF8C3, 0x405C, 0x99, 0x64, 0x70, 0xA1, 0xEE, 0xAB, 0xE1, 0x94);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics3> { define_guid(0x8FDAADB6, 0x4AF9, 0x4F21, 0x9B, 0x58, 0xD5, 0x3E, 0x9F, 0x24, 0x23, 0x1E);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics2> { define_guid(0x5B235412, 0x35F0, 0x49E7, 0x9B, 0x8, 0x16, 0xD2, 0x78, 0xFB, 0xAA, 0x42);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringClientManager> { define_guid(0x91B14016, 0x8DCA, 0x4225, 0xBB, 0xED, 0xEE, 0xF8, 0xB8, 0xD7, 0x18, 0xD7);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager> { define_guid(0xD45A8DA0, 0xE86, 0x4D98, 0x8B, 0xA4, 0xDD, 0x70, 0xD4, 0xB7, 0x64, 0xD3);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringClient> { define_guid(0x709D254C, 0x595F, 0x4847, 0xBB, 0x30, 0x64, 0x69, 0x35, 0x54, 0x29, 0x18);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs> { define_guid(0x3853C880, 0x77DE, 0x4C04, 0xBE, 0xAD, 0xA1, 0x23, 0xB0, 0x8C, 0x9F, 0x59);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs> { define_guid(0x7BC31D88, 0xA6BD, 0x49E1, 0x80, 0xAB, 0x6B, 0x91, 0x35, 0x4A, 0x57, 0xD4);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher> { define_guid(0x6BF3335E, 0x23B5, 0x449F, 0x92, 0x8D, 0x5E, 0xD, 0x3E, 0x4, 0x47, 0x1D);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModemStatics> { define_guid(0xF99ED637, 0xD6F1, 0x4A78, 0x8C, 0xBC, 0x64, 0x21, 0xA6, 0x50, 0x63, 0xC8);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModem3> { define_guid(0xE9FEC6EA, 0x2F34, 0x4582, 0x91, 0x2, 0xC3, 0x14, 0xD2, 0xA8, 0x7E, 0xEC);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModem2> { define_guid(0x12862B28, 0xB9EB, 0x4EE2, 0xBB, 0xE3, 0x71, 0x1F, 0x53, 0xEE, 0xA3, 0x73);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModem> { define_guid(0xD0356912, 0xE9F9, 0x4F67, 0xA0, 0x3D, 0x43, 0x18, 0x9A, 0x31, 0x6B, 0xF1);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration> { define_guid(0xFCE035A3, 0xD6CD, 0x4320, 0xB9, 0x82, 0xBE, 0x9D, 0x3E, 0xC7, 0x89, 0xF);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandUicc> { define_guid(0xE634F691, 0x525A, 0x4CE2, 0x8F, 0xCE, 0xAA, 0x41, 0x62, 0x57, 0x91, 0x54);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration2> { define_guid(0x320FF5C5, 0xE460, 0x42AE, 0xAA, 0x51, 0x69, 0x62, 0x1E, 0x7A, 0x44, 0x77);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandSarManager> { define_guid(0xE5B26833, 0x967E, 0x40C9, 0xA4, 0x85, 0x19, 0xC0, 0xDD, 0x20, 0x9E, 0x22);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceInformation> { define_guid(0x53D69B5B, 0xC4ED, 0x45F0, 0x80, 0x3A, 0xD9, 0x41, 0x7A, 0x6D, 0x98, 0x46);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceService> { define_guid(0x22BE1A52, 0xBD80, 0x40AC, 0x8E, 0x1F, 0x2E, 0x7, 0x83, 0x6A, 0x3D, 0xBD);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandPco> { define_guid(0xD4E4FCBE, 0xE3A3, 0x43C5, 0xA8, 0x7B, 0x6C, 0x86, 0xD2, 0x29, 0xD7, 0xFA);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandPin> { define_guid(0xE661D709, 0xE779, 0x45BF, 0x82, 0x81, 0x75, 0x32, 0x3D, 0xF9, 0xE3, 0x21);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandPinOperationResult> { define_guid(0x11DDDC32, 0x31E7, 0x49F5, 0xB6, 0x63, 0x12, 0x3D, 0x3B, 0xEF, 0x3, 0x62);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataSession> { define_guid(0xDAD62333, 0x8BCF, 0x4289, 0x8A, 0x37, 0x4, 0x5C, 0x21, 0x69, 0x48, 0x6A);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandSession> { define_guid(0xFC098A45, 0x913B, 0x4914, 0xB6, 0xC3, 0xAE, 0x63, 0x4, 0x59, 0x3E, 0x75);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataReceivedEventArgs> { define_guid(0xB6AA13DE, 0x1380, 0x40E3, 0x86, 0x18, 0x73, 0xCB, 0xCA, 0x48, 0x13, 0x8C);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandResult> { define_guid(0xB0F46ABB, 0x94D6, 0x44B9, 0xA5, 0x38, 0xF0, 0x81, 0xB, 0x64, 0x53, 0x89);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppsResult> { define_guid(0x744930EB, 0x8157, 0x4A41, 0x84, 0x94, 0x6B, 0xF5, 0x4C, 0x9B, 0x1D, 0x2B);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppRecordDetailsResult> { define_guid(0xD919682F, 0xBE14, 0x4934, 0x98, 0x1D, 0x2F, 0x57, 0xB9, 0xED, 0x83, 0xE6);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppReadRecordResult> { define_guid(0x64C95285, 0x358E, 0x47C5, 0x82, 0x49, 0x69, 0x5F, 0x38, 0x3B, 0x2B, 0xDB);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChange> { define_guid(0xBEAF94E1, 0x960F, 0x49B4, 0xA0, 0x8D, 0x7D, 0x85, 0xE9, 0x68, 0xC7, 0xEC);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails> { define_guid(0x89135CFF, 0x28B8, 0x46AA, 0xB1, 0x37, 0x1C, 0x4B, 0xF, 0x21, 0xED, 0xFE);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChange> { define_guid(0xB054A561, 0x9833, 0x4AED, 0x97, 0x17, 0x43, 0x48, 0xB2, 0x1A, 0x24, 0xB3);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChangeTriggerDetails> { define_guid(0x71301ACE, 0x93C, 0x42C6, 0xB0, 0xDB, 0xAD, 0x1F, 0x75, 0xA6, 0x54, 0x45);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChange> { define_guid(0xBE16673E, 0x1F04, 0x4F95, 0x8B, 0x90, 0xE7, 0xF5, 0x59, 0xDD, 0xE7, 0xE5);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChangeTriggerDetails> { define_guid(0xD338C091, 0x3E91, 0x4D38, 0x90, 0x36, 0xAE, 0xE8, 0x3A, 0x6E, 0x79, 0xAD);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceTriggerDetails> { define_guid(0x4A055B70, 0xB9AE, 0x4458, 0x92, 0x41, 0xA6, 0xA5, 0xFB, 0xF1, 0x8A, 0xC);};
template<> struct uuid<Windows::Networking::NetworkOperators::IKnownCSimFilePathsStatics> { define_guid(0xB458AEED, 0x49F1, 0x4C22, 0xB0, 0x73, 0x96, 0xD5, 0x11, 0xBF, 0x9C, 0x35);};
template<> struct uuid<Windows::Networking::NetworkOperators::IKnownRuimFilePathsStatics> { define_guid(0x3883C8B9, 0xFF24, 0x4571, 0xA8, 0x67, 0x9, 0xF9, 0x60, 0x42, 0x6E, 0x14);};
template<> struct uuid<Windows::Networking::NetworkOperators::IKnownSimFilePathsStatics> { define_guid(0x80CD1A63, 0x37A5, 0x43D3, 0x80, 0xA3, 0xCC, 0xD2, 0x3E, 0x8F, 0xEC, 0xEE);};
template<> struct uuid<Windows::Networking::NetworkOperators::IKnownUSimFilePathsStatics> { define_guid(0x7C34E581, 0x1F1B, 0x43F4, 0x95, 0x30, 0x8B, 0x9, 0x2D, 0x32, 0xD7, 0x1F);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandCellCdma> { define_guid(0x601B3B4, 0x411A, 0x4F2E, 0x82, 0x87, 0x76, 0xF5, 0x65, 0xC, 0x60, 0xCD);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandCellGsm> { define_guid(0xCC917F06, 0x7EE0, 0x47B8, 0x9E, 0x1F, 0xC3, 0xB4, 0x8D, 0xF9, 0xDF, 0x5B);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandCellLte> { define_guid(0x9197C87B, 0x2B78, 0x456D, 0x8B, 0x53, 0xAA, 0xA2, 0x5D, 0xA, 0xF7, 0x41);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandCellTdscdma> { define_guid(0xEDA1655, 0xDB0E, 0x4182, 0x8C, 0xDA, 0xCC, 0x41, 0x9A, 0x7B, 0xDE, 0x8);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandCellUmts> { define_guid(0x77B4B5AE, 0x49C8, 0x4F15, 0xB2, 0x85, 0x4C, 0x26, 0xA7, 0xF6, 0x72, 0x15);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModemIsolationFactory> { define_guid(0x21D7EC58, 0xC2B1, 0x4C2F, 0xA0, 0x30, 0x72, 0x82, 0xA, 0x24, 0xEC, 0xD9);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandModemIsolation> { define_guid(0xB5618FEC, 0xE661, 0x4330, 0x9B, 0xB4, 0x34, 0x80, 0x21, 0x2E, 0xC3, 0x54);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandPcoDataChangeTriggerDetails> { define_guid(0x263F5114, 0x64E0, 0x4493, 0x90, 0x9B, 0x2D, 0x14, 0xA0, 0x19, 0x62, 0xB1);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAntennaSarFactory> { define_guid(0xA91E1716, 0xC04D, 0x4A21, 0x86, 0x98, 0x14, 0x59, 0xDC, 0x67, 0x2C, 0x6E);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandAntennaSar> { define_guid(0xB9AF4B7E, 0xCBF9, 0x4109, 0x90, 0xBE, 0x5C, 0x6, 0xBF, 0xD5, 0x13, 0xB6);};
template<> struct uuid<Windows::Networking::NetworkOperators::IMobileBroadbandTransmissionStateChangedEventArgs> { define_guid(0x612E3875, 0x40A, 0x4F99, 0xA4, 0xF9, 0x61, 0xD7, 0xC3, 0x2D, 0xA1, 0x29);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESim> { define_guid(0x6F6E6E26, 0xF123, 0x437D, 0x8C, 0xED, 0xDC, 0x1D, 0x2B, 0xC0, 0xC3, 0xA9);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimPolicy> { define_guid(0x41E1B99D, 0xCF7E, 0x4315, 0x88, 0x2B, 0x6F, 0x1E, 0x74, 0xB0, 0xD3, 0x8F);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimProfile> { define_guid(0xEE1E7880, 0x6A9, 0x4027, 0xB4, 0xF8, 0xDD, 0xB2, 0x3D, 0x78, 0x10, 0xE0);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimOperationResult> { define_guid(0xA67B63B1, 0x309B, 0x4E77, 0x9E, 0x7E, 0xCD, 0x93, 0xF1, 0xDD, 0xC7, 0xB9);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimDownloadProfileMetadataResult> { define_guid(0xC4234D9E, 0x5AD6, 0x426D, 0x8D, 0x0, 0x44, 0x34, 0xF4, 0x49, 0xAF, 0xEC);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimAddedEventArgs> { define_guid(0x38BD0A58, 0x4D5A, 0x4D08, 0x8D, 0xA7, 0xE7, 0x3E, 0xFF, 0x36, 0x9D, 0xDD);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimProfileMetadata> { define_guid(0xED25831F, 0x90DB, 0x498D, 0xA7, 0xB4, 0xEB, 0xCE, 0x80, 0x7D, 0x3C, 0x23);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimManagerStatics> { define_guid(0xBFA2C0C, 0xDF88, 0x4631, 0xBF, 0x4, 0xC1, 0x2E, 0x28, 0x1B, 0x39, 0x62);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimServiceInfo> { define_guid(0xF16AABCF, 0x7F59, 0x4A51, 0x84, 0x94, 0xBD, 0x89, 0xD5, 0xFF, 0x50, 0xEE);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimWatcher> { define_guid(0xC1F84CEB, 0xA28D, 0x4FBF, 0x97, 0x71, 0x6E, 0x31, 0xB8, 0x1C, 0xCF, 0x22);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimProfilePolicy> { define_guid(0xE6DD0F1D, 0x9C5C, 0x46C5, 0xA2, 0x89, 0xA9, 0x48, 0x99, 0x9B, 0xF0, 0x62);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimRemovedEventArgs> { define_guid(0xDEC5277B, 0x2FD9, 0x4ED9, 0x83, 0x76, 0xD9, 0xB5, 0xE4, 0x12, 0x78, 0xA3);};
template<> struct uuid<Windows::Networking::NetworkOperators::IESimUpdatedEventArgs> { define_guid(0x4C125CEC, 0x508D, 0x4B88, 0x83, 0xCB, 0x68, 0xBE, 0xF8, 0x16, 0x8D, 0x12);};
template<> struct uuid<Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails> { define_guid(0xE756C791, 0x1001, 0x4DE5, 0x83, 0xC7, 0xDE, 0x61, 0xD8, 0x88, 0x31, 0xD0);};
template<> struct uuid<Windows::Networking::NetworkOperators::IHotspotAuthenticationContextStatics> { define_guid(0xE756C791, 0x1002, 0x4DE5, 0x83, 0xC7, 0xDE, 0x61, 0xD8, 0x88, 0x31, 0xD0);};
template<> struct uuid<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2> { define_guid(0xE756C791, 0x1004, 0x4DE5, 0x83, 0xC7, 0xDE, 0x61, 0xD8, 0x88, 0x31, 0xD0);};
template<> struct uuid<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext> { define_guid(0xE756C791, 0x1003, 0x4DE5, 0x83, 0xC7, 0xDE, 0x61, 0xD8, 0x88, 0x31, 0xD0);};
template<> struct uuid<Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult> { define_guid(0xE756C791, 0x1005, 0x4DE5, 0x83, 0xC7, 0xDE, 0x61, 0xD8, 0x88, 0x31, 0xD0);};
template<> struct uuid<Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults> { define_guid(0x217700E0, 0x8203, 0x11DF, 0xAD, 0xB9, 0xF4, 0xCE, 0x46, 0x2D, 0x91, 0x37);};
template<> struct uuid<Windows::Networking::NetworkOperators::IProvisionedProfile> { define_guid(0x217700E0, 0x8202, 0x11DF, 0xAD, 0xB9, 0xF4, 0xCE, 0x46, 0x2D, 0x91, 0x37);};
template<> struct uuid<Windows::Networking::NetworkOperators::IProvisioningAgent> { define_guid(0x217700E0, 0x8201, 0x11DF, 0xAD, 0xB9, 0xF4, 0xCE, 0x46, 0x2D, 0x91, 0x37);};
template<> struct uuid<Windows::Networking::NetworkOperators::IProvisioningAgentStaticMethods> { define_guid(0x217700E0, 0x8101, 0x11DF, 0xAD, 0xB9, 0xF4, 0xCE, 0x46, 0x2D, 0x91, 0x37);};
template<> struct uuid<Windows::Networking::NetworkOperators::IUssdMessage> { define_guid(0x2F9ACF82, 0x2004, 0x4D5D, 0xBF, 0x81, 0x2A, 0xBA, 0x1B, 0x4B, 0xE4, 0xA8);};
template<> struct uuid<Windows::Networking::NetworkOperators::IUssdMessageFactory> { define_guid(0x2F9ACF82, 0x1003, 0x4D5D, 0xBF, 0x81, 0x2A, 0xBA, 0x1B, 0x4B, 0xE4, 0xA8);};
template<> struct uuid<Windows::Networking::NetworkOperators::IUssdReply> { define_guid(0x2F9ACF82, 0x2005, 0x4D5D, 0xBF, 0x81, 0x2A, 0xBA, 0x1B, 0x4B, 0xE4, 0xA8);};
template<> struct uuid<Windows::Networking::NetworkOperators::IUssdSession> { define_guid(0x2F9ACF82, 0x2002, 0x4D5D, 0xBF, 0x81, 0x2A, 0xBA, 0x1B, 0x4B, 0xE4, 0xA8);};
template<> struct uuid<Windows::Networking::NetworkOperators::IUssdSessionStatics> { define_guid(0x2F9ACF82, 0x1001, 0x4D5D, 0xBF, 0x81, 0x2A, 0xBA, 0x1B, 0x4B, 0xE4, 0xA8);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails> { define_guid(0xBC68A9D1, 0x82E1, 0x4488, 0x9F, 0x2C, 0x12, 0x76, 0xC2, 0x46, 0x8F, 0xAC);};
template<> struct uuid<Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck> { define_guid(0x108916D, 0x9E9A, 0x4AF6, 0x8D, 0xA3, 0x60, 0x49, 0x3B, 0x19, 0xC2, 0x4);};
template<> struct uuid<Windows::Networking::NetworkOperators::IFdnAccessManagerStatics> { define_guid(0xF2AA4395, 0xF1E6, 0x4319, 0xAA, 0x3E, 0x47, 0x7C, 0xA6, 0x4B, 0x2B, 0xDF);};

// types

namespace Windows { namespace Networking { namespace NetworkOperators {

// IMobileBroadbandAccountStatics
struct IMobileBroadbandAccountStatics : IInspectable {
	virtual STDMETHODIMP _get_AvailableNetworkAccountIds(Foundation::Collections::IVectorView<HSTRING>* *ppAccountIds);
	virtual STDMETHODIMP _CreateFromNetworkAccountId(HSTRING networkAccountId, MobileBroadbandAccount* *ppAccount);
};

// IMobileBroadbandAccount3
struct IMobileBroadbandAccount3_raw : IInspectable {
	virtual STDMETHODIMP _get_AccountExperienceUrl(Foundation::Uri* *value);
};
template<typename X> struct IMobileBroadbandAccount3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IMobileBroadbandAccount3_adaptor::AccountExperienceUrl)->_get_AccountExperienceUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} AccountExperienceUrl;
	};
	IMobileBroadbandAccount3_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandAccount3, X> : Windows::Networking::NetworkOperators::IMobileBroadbandAccount3_adaptor<X> { typedef adapt IMobileBroadbandAccount3; };
struct IMobileBroadbandAccount3 : IMobileBroadbandAccount3_raw, generate<IMobileBroadbandAccount3> {};

// IMobileBroadbandAccount2
struct IMobileBroadbandAccount2_raw : IInspectable {
	virtual STDMETHODIMP _GetConnectionProfiles(Foundation::Collections::IVectorView<Connectivity::ConnectionProfile*>* *value);
};
template<typename X> struct IMobileBroadbandAccount2_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<Connectivity::ConnectionProfile>>> GetConnectionProfiles() { Foundation::Collections::IVectorView<Connectivity::ConnectionProfile*>* value; hrcheck(X::get()->_GetConnectionProfiles(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IMobileBroadbandAccount2, X> : Windows::Networking::NetworkOperators::IMobileBroadbandAccount2_adaptor<X> { typedef adapt IMobileBroadbandAccount2; };
struct IMobileBroadbandAccount2 : IMobileBroadbandAccount2_raw, generate<IMobileBroadbandAccount2> {};

// IMobileBroadbandAccount
struct IMobileBroadbandAccount_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAccountId(HSTRING *value);
	virtual STDMETHODIMP _get_ServiceProviderGuid(Platform::Guid *value);
	virtual STDMETHODIMP _get_ServiceProviderName(HSTRING *value);
	virtual STDMETHODIMP _get_CurrentNetwork(MobileBroadbandNetwork* *network);
	virtual STDMETHODIMP _get_CurrentDeviceInformation(MobileBroadbandDeviceInformation* *deviceInformation);
};
template<typename X> struct IMobileBroadbandAccount_adaptor : X {
	union {
		struct : property {
			ptr<MobileBroadbandDeviceInformation> get() { MobileBroadbandDeviceInformation* deviceInformation; hrcheck(enc(&IMobileBroadbandAccount_adaptor::CurrentDeviceInformation)->_get_CurrentDeviceInformation(&deviceInformation)); return from_abi(deviceInformation); }
			ptr<MobileBroadbandDeviceInformation> operator()() { return get(); }
			operator ptr<MobileBroadbandDeviceInformation> () { return get(); }
			ptr<MobileBroadbandDeviceInformation> operator->() { return get(); }
		} CurrentDeviceInformation;
		struct : property {
			ptr<MobileBroadbandNetwork> get() { MobileBroadbandNetwork* network; hrcheck(enc(&IMobileBroadbandAccount_adaptor::CurrentNetwork)->_get_CurrentNetwork(&network)); return from_abi(network); }
			ptr<MobileBroadbandNetwork> operator()() { return get(); }
			operator ptr<MobileBroadbandNetwork> () { return get(); }
			ptr<MobileBroadbandNetwork> operator->() { return get(); }
		} CurrentNetwork;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandAccount_adaptor::NetworkAccountId)->_get_NetworkAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkAccountId;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IMobileBroadbandAccount_adaptor::ServiceProviderGuid)->_get_ServiceProviderGuid(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} ServiceProviderGuid;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandAccount_adaptor::ServiceProviderName)->_get_ServiceProviderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceProviderName;
	};
	IMobileBroadbandAccount_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandAccount, X> : Windows::Networking::NetworkOperators::IMobileBroadbandAccount_adaptor<X> { typedef adapt IMobileBroadbandAccount; };
struct IMobileBroadbandAccount : IMobileBroadbandAccount_raw, generate<IMobileBroadbandAccount> {};

// MobileBroadbandAccount
template<typename> struct MobileBroadbandAccount_statics {
	static struct _AvailableNetworkAccountIds : property {
		ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* ppAccountIds; hrcheck(get_activation_factory<MobileBroadbandAccount, IMobileBroadbandAccountStatics>()->_get_AvailableNetworkAccountIds(&ppAccountIds)); return from_abi(ppAccountIds); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
	} AvailableNetworkAccountIds;
	static ptr<MobileBroadbandAccount> CreateFromNetworkAccountId(hstring_ref networkAccountId) { MobileBroadbandAccount* ppAccount; hrcheck(get_activation_factory<MobileBroadbandAccount, IMobileBroadbandAccountStatics>()->_CreateFromNetworkAccountId(networkAccountId, &ppAccount)); return from_abi(ppAccount); }
};
template<typename X> typename MobileBroadbandAccount_statics<X>::_AvailableNetworkAccountIds MobileBroadbandAccount_statics<X>::AvailableNetworkAccountIds;

template<typename X> struct statics<MobileBroadbandAccount, X> : X, Windows::Networking::NetworkOperators::MobileBroadbandAccount_statics<void> {
	typedef typename X::root_type MobileBroadbandAccount;
};
struct MobileBroadbandAccount : generate<MobileBroadbandAccount> {};

// IMobileBroadbandNetwork3
struct IMobileBroadbandNetwork3_raw : IInspectable {
	virtual STDMETHODIMP _GetCellsInfoAsync(Foundation::IAsyncOperation<MobileBroadbandCellsInfo*>* *asyncOperation);
};
template<typename X> struct IMobileBroadbandNetwork3_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandCellsInfo>>> GetCellsInfoAsync() { Foundation::IAsyncOperation<MobileBroadbandCellsInfo*>* asyncOperation; hrcheck(X::get()->_GetCellsInfoAsync(&asyncOperation)); return from_abi(asyncOperation); }
};
template<typename X> struct adapt<IMobileBroadbandNetwork3, X> : Windows::Networking::NetworkOperators::IMobileBroadbandNetwork3_adaptor<X> { typedef adapt IMobileBroadbandNetwork3; };
struct IMobileBroadbandNetwork3 : IMobileBroadbandNetwork3_raw, generate<IMobileBroadbandNetwork3> {};

// IMobileBroadbandNetwork2
struct IMobileBroadbandNetwork2_raw : IInspectable {
	virtual STDMETHODIMP _GetVoiceCallSupportAsync(Foundation::IAsyncOperation<bool>* *asyncInfo);
	virtual STDMETHODIMP _get_RegistrationUiccApps(Foundation::Collections::IVectorView<MobileBroadbandUiccApp*>* *value);
};
template<typename X> struct IMobileBroadbandNetwork2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> get() { Foundation::Collections::IVectorView<MobileBroadbandUiccApp*>* value; hrcheck(enc(&IMobileBroadbandNetwork2_adaptor::RegistrationUiccApps)->_get_RegistrationUiccApps(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> operator->() { return get(); }
		} RegistrationUiccApps;
	};
	ptr<Foundation::IAsyncOperation<bool>> GetVoiceCallSupportAsync() { Foundation::IAsyncOperation<bool>* asyncInfo; hrcheck(X::get()->_GetVoiceCallSupportAsync(&asyncInfo)); return from_abi(asyncInfo); }
	IMobileBroadbandNetwork2_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandNetwork2, X> : Windows::Networking::NetworkOperators::IMobileBroadbandNetwork2_adaptor<X> { typedef adapt IMobileBroadbandNetwork2; };
struct IMobileBroadbandNetwork2 : IMobileBroadbandNetwork2_raw, generate<IMobileBroadbandNetwork2> {};

// IMobileBroadbandNetwork
struct IMobileBroadbandNetwork_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAdapter(Connectivity::NetworkAdapter* *value);
	virtual STDMETHODIMP _get_NetworkRegistrationState(NetworkOperators::NetworkRegistrationState *registrationState);
	virtual STDMETHODIMP _get_RegistrationNetworkError(unsigned *networkError);
	virtual STDMETHODIMP _get_PacketAttachNetworkError(unsigned *networkError);
	virtual STDMETHODIMP _get_ActivationNetworkError(unsigned *networkError);
	virtual STDMETHODIMP _get_AccessPointName(HSTRING *apn);
	virtual STDMETHODIMP _get_RegisteredDataClass(DataClasses *value);
	virtual STDMETHODIMP _get_RegisteredProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_RegisteredProviderName(HSTRING *value);
	virtual STDMETHODIMP _ShowConnectionUI();
};
template<typename X> struct IMobileBroadbandNetwork_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING apn; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::AccessPointName)->_get_AccessPointName(&apn)); return from_abi(apn); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccessPointName;
		struct : property {
			unsigned get() { unsigned networkError; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::ActivationNetworkError)->_get_ActivationNetworkError(&networkError)); return networkError; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ActivationNetworkError;
		struct : property {
			ptr<Connectivity::NetworkAdapter> get() { Connectivity::NetworkAdapter* value; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::NetworkAdapter)->_get_NetworkAdapter(&value)); return from_abi(value); }
			ptr<Connectivity::NetworkAdapter> operator()() { return get(); }
			operator ptr<Connectivity::NetworkAdapter> () { return get(); }
			ptr<Connectivity::NetworkAdapter> operator->() { return get(); }
		} NetworkAdapter;
		struct : property {
			NetworkOperators::NetworkRegistrationState get() { NetworkOperators::NetworkRegistrationState registrationState; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::NetworkRegistrationState)->_get_NetworkRegistrationState(&registrationState)); return registrationState; }
			NetworkOperators::NetworkRegistrationState operator()() { return get(); }
			operator NetworkOperators::NetworkRegistrationState () { return get(); }
		} NetworkRegistrationState;
		struct : property {
			unsigned get() { unsigned networkError; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::PacketAttachNetworkError)->_get_PacketAttachNetworkError(&networkError)); return networkError; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} PacketAttachNetworkError;
		struct : property {
			DataClasses get() { DataClasses value; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::RegisteredDataClass)->_get_RegisteredDataClass(&value)); return value; }
			DataClasses operator()() { return get(); }
			operator DataClasses () { return get(); }
		} RegisteredDataClass;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::RegisteredProviderId)->_get_RegisteredProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RegisteredProviderId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::RegisteredProviderName)->_get_RegisteredProviderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RegisteredProviderName;
		struct : property {
			unsigned get() { unsigned networkError; hrcheck(enc(&IMobileBroadbandNetwork_adaptor::RegistrationNetworkError)->_get_RegistrationNetworkError(&networkError)); return networkError; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} RegistrationNetworkError;
	};
	void ShowConnectionUI() { hrcheck(X::get()->_ShowConnectionUI()); }
	IMobileBroadbandNetwork_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandNetwork, X> : Windows::Networking::NetworkOperators::IMobileBroadbandNetwork_adaptor<X> { typedef adapt IMobileBroadbandNetwork; };
struct IMobileBroadbandNetwork : IMobileBroadbandNetwork_raw, generate<IMobileBroadbandNetwork> {};

// MobileBroadbandNetwork
template<typename X> struct statics<MobileBroadbandNetwork, X> : X {
	typedef typename X::root_type MobileBroadbandNetwork;
};
struct MobileBroadbandNetwork : generate<MobileBroadbandNetwork> {};

// IMobileBroadbandDeviceInformation3
struct IMobileBroadbandDeviceInformation3_raw : IInspectable {
	virtual STDMETHODIMP _get_SimSpn(HSTRING *value);
	virtual STDMETHODIMP _get_SimPnn(HSTRING *value);
	virtual STDMETHODIMP _get_SimGid1(HSTRING *value);
};
template<typename X> struct IMobileBroadbandDeviceInformation3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation3_adaptor::SimGid1)->_get_SimGid1(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SimGid1;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation3_adaptor::SimPnn)->_get_SimPnn(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SimPnn;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation3_adaptor::SimSpn)->_get_SimSpn(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SimSpn;
	};
	IMobileBroadbandDeviceInformation3_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceInformation3, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation3_adaptor<X> { typedef adapt IMobileBroadbandDeviceInformation3; };
struct IMobileBroadbandDeviceInformation3 : IMobileBroadbandDeviceInformation3_raw, generate<IMobileBroadbandDeviceInformation3> {};

// IMobileBroadbandDeviceInformation2
struct IMobileBroadbandDeviceInformation2_raw : IInspectable {
	virtual STDMETHODIMP _get_PinManager(MobileBroadbandPinManager* *value);
	virtual STDMETHODIMP _get_Revision(HSTRING *value);
	virtual STDMETHODIMP _get_SerialNumber(HSTRING *value);
};
template<typename X> struct IMobileBroadbandDeviceInformation2_adaptor : X {
	union {
		struct : property {
			ptr<MobileBroadbandPinManager> get() { MobileBroadbandPinManager* value; hrcheck(enc(&IMobileBroadbandDeviceInformation2_adaptor::PinManager)->_get_PinManager(&value)); return from_abi(value); }
			ptr<MobileBroadbandPinManager> operator()() { return get(); }
			operator ptr<MobileBroadbandPinManager> () { return get(); }
			ptr<MobileBroadbandPinManager> operator->() { return get(); }
		} PinManager;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation2_adaptor::Revision)->_get_Revision(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Revision;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation2_adaptor::SerialNumber)->_get_SerialNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SerialNumber;
	};
	IMobileBroadbandDeviceInformation2_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceInformation2, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation2_adaptor<X> { typedef adapt IMobileBroadbandDeviceInformation2; };
struct IMobileBroadbandDeviceInformation2 : IMobileBroadbandDeviceInformation2_raw, generate<IMobileBroadbandDeviceInformation2> {};

// IMobileBroadbandDeviceInformation
struct IMobileBroadbandDeviceInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkDeviceStatus(NetworkOperators::NetworkDeviceStatus *value);
	virtual STDMETHODIMP _get_Manufacturer(HSTRING *value);
	virtual STDMETHODIMP _get_Model(HSTRING *value);
	virtual STDMETHODIMP _get_FirmwareInformation(HSTRING *value);
	virtual STDMETHODIMP _get_CellularClass(Devices::Sms::CellularClass *value);
	virtual STDMETHODIMP _get_DataClasses(NetworkOperators::DataClasses *value);
	virtual STDMETHODIMP _get_CustomDataClass(HSTRING *value);
	virtual STDMETHODIMP _get_MobileEquipmentId(HSTRING *value);
	virtual STDMETHODIMP _get_TelephoneNumbers(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_SubscriberId(HSTRING *value);
	virtual STDMETHODIMP _get_SimIccId(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceType(MobileBroadbandDeviceType *pDeviceType);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_CurrentRadioState(MobileBroadbandRadioState *pCurrentState);
};
template<typename X> struct IMobileBroadbandDeviceInformation_adaptor : X {
	union {
		struct : property {
			Devices::Sms::CellularClass get() { Devices::Sms::CellularClass value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::CellularClass)->_get_CellularClass(&value)); return value; }
			Devices::Sms::CellularClass operator()() { return get(); }
			operator Devices::Sms::CellularClass () { return get(); }
		} CellularClass;
		struct : property {
			MobileBroadbandRadioState get() { MobileBroadbandRadioState pCurrentState; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::CurrentRadioState)->_get_CurrentRadioState(&pCurrentState)); return pCurrentState; }
			MobileBroadbandRadioState operator()() { return get(); }
			operator MobileBroadbandRadioState () { return get(); }
		} CurrentRadioState;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::CustomDataClass)->_get_CustomDataClass(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CustomDataClass;
		struct : property {
			NetworkOperators::DataClasses get() { NetworkOperators::DataClasses value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::DataClasses)->_get_DataClasses(&value)); return value; }
			NetworkOperators::DataClasses operator()() { return get(); }
			operator NetworkOperators::DataClasses () { return get(); }
		} DataClasses;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			MobileBroadbandDeviceType get() { MobileBroadbandDeviceType pDeviceType; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::DeviceType)->_get_DeviceType(&pDeviceType)); return pDeviceType; }
			MobileBroadbandDeviceType operator()() { return get(); }
			operator MobileBroadbandDeviceType () { return get(); }
		} DeviceType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::FirmwareInformation)->_get_FirmwareInformation(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FirmwareInformation;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::Manufacturer)->_get_Manufacturer(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Manufacturer;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::MobileEquipmentId)->_get_MobileEquipmentId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MobileEquipmentId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::Model)->_get_Model(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Model;
		struct : property {
			NetworkOperators::NetworkDeviceStatus get() { NetworkOperators::NetworkDeviceStatus value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::NetworkDeviceStatus)->_get_NetworkDeviceStatus(&value)); return value; }
			NetworkOperators::NetworkDeviceStatus operator()() { return get(); }
			operator NetworkOperators::NetworkDeviceStatus () { return get(); }
		} NetworkDeviceStatus;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::SimIccId)->_get_SimIccId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SimIccId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::SubscriberId)->_get_SubscriberId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SubscriberId;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IMobileBroadbandDeviceInformation_adaptor::TelephoneNumbers)->_get_TelephoneNumbers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} TelephoneNumbers;
	};
	IMobileBroadbandDeviceInformation_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceInformation, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation_adaptor<X> { typedef adapt IMobileBroadbandDeviceInformation; };
struct IMobileBroadbandDeviceInformation : IMobileBroadbandDeviceInformation_raw, generate<IMobileBroadbandDeviceInformation> {};

// MobileBroadbandDeviceInformation
template<typename X> struct statics<MobileBroadbandDeviceInformation, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceInformation;
};
struct MobileBroadbandDeviceInformation : generate<MobileBroadbandDeviceInformation> {};

// IMobileBroadbandPinManager
struct IMobileBroadbandPinManager_raw : IInspectable {
	virtual STDMETHODIMP _get_SupportedPins(Foundation::Collections::IVectorView<MobileBroadbandPinType>* *value);
	virtual STDMETHODIMP _GetPin(MobileBroadbandPinType pinType, MobileBroadbandPin* *value);
};
template<typename X> struct IMobileBroadbandPinManager_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<MobileBroadbandPinType>> get() { Foundation::Collections::IVectorView<MobileBroadbandPinType>* value; hrcheck(enc(&IMobileBroadbandPinManager_adaptor::SupportedPins)->_get_SupportedPins(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<MobileBroadbandPinType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<MobileBroadbandPinType>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<MobileBroadbandPinType>> operator->() { return get(); }
		} SupportedPins;
	};
	ptr<MobileBroadbandPin> GetPin(MobileBroadbandPinType pinType) { MobileBroadbandPin* value; hrcheck(X::get()->_GetPin(pinType, &value)); return from_abi(value); }
	IMobileBroadbandPinManager_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandPinManager, X> : Windows::Networking::NetworkOperators::IMobileBroadbandPinManager_adaptor<X> { typedef adapt IMobileBroadbandPinManager; };
struct IMobileBroadbandPinManager : IMobileBroadbandPinManager_raw, generate<IMobileBroadbandPinManager> {};

// MobileBroadbandPinManager
template<typename X> struct statics<MobileBroadbandPinManager, X> : X {
	typedef typename X::root_type MobileBroadbandPinManager;
};
struct MobileBroadbandPinManager : generate<MobileBroadbandPinManager> {};

// IMobileBroadbandUiccApp
struct IMobileBroadbandUiccApp_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_Kind(UiccAppKind *value);
	virtual STDMETHODIMP _GetRecordDetailsAsync(Foundation::Collections::IIterable<unsigned>* uiccFilePath, Foundation::IAsyncOperation<MobileBroadbandUiccAppRecordDetailsResult*>* *asyncInfo);
	virtual STDMETHODIMP _ReadRecordAsync(Foundation::Collections::IIterable<unsigned>* uiccFilePath, int recordIndex, Foundation::IAsyncOperation<MobileBroadbandUiccAppReadRecordResult*>* *asyncInfo);
};
template<typename X> struct IMobileBroadbandUiccApp_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMobileBroadbandUiccApp_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Id;
		struct : property {
			UiccAppKind get() { UiccAppKind value; hrcheck(enc(&IMobileBroadbandUiccApp_adaptor::Kind)->_get_Kind(&value)); return value; }
			UiccAppKind operator()() { return get(); }
			operator UiccAppKind () { return get(); }
		} Kind;
	};
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandUiccAppRecordDetailsResult>>> GetRecordDetailsAsync(pptr<Foundation::Collections::IIterable<unsigned>> uiccFilePath) { Foundation::IAsyncOperation<MobileBroadbandUiccAppRecordDetailsResult*>* asyncInfo; hrcheck(X::get()->_GetRecordDetailsAsync(to_abi(uiccFilePath), &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandUiccAppReadRecordResult>>> ReadRecordAsync(pptr<Foundation::Collections::IIterable<unsigned>> uiccFilePath, int recordIndex) { Foundation::IAsyncOperation<MobileBroadbandUiccAppReadRecordResult*>* asyncInfo; hrcheck(X::get()->_ReadRecordAsync(to_abi(uiccFilePath), recordIndex, &asyncInfo)); return from_abi(asyncInfo); }
	IMobileBroadbandUiccApp_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandUiccApp, X> : Windows::Networking::NetworkOperators::IMobileBroadbandUiccApp_adaptor<X> { typedef adapt IMobileBroadbandUiccApp; };
struct IMobileBroadbandUiccApp : IMobileBroadbandUiccApp_raw, generate<IMobileBroadbandUiccApp> {};

// MobileBroadbandUiccApp
template<typename X> struct statics<MobileBroadbandUiccApp, X> : X {
	typedef typename X::root_type MobileBroadbandUiccApp;
};
struct MobileBroadbandUiccApp : generate<MobileBroadbandUiccApp> {};

// IMobileBroadbandCellsInfo
struct IMobileBroadbandCellsInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_NeighboringCellsCdma(Foundation::Collections::IVectorView<MobileBroadbandCellCdma*>* *value);
	virtual STDMETHODIMP _get_NeighboringCellsGsm(Foundation::Collections::IVectorView<MobileBroadbandCellGsm*>* *value);
	virtual STDMETHODIMP _get_NeighboringCellsLte(Foundation::Collections::IVectorView<MobileBroadbandCellLte*>* *value);
	virtual STDMETHODIMP _get_NeighboringCellsTdscdma(Foundation::Collections::IVectorView<MobileBroadbandCellTdscdma*>* *value);
	virtual STDMETHODIMP _get_NeighboringCellsUmts(Foundation::Collections::IVectorView<MobileBroadbandCellUmts*>* *value);
	virtual STDMETHODIMP _get_ServingCellsCdma(Foundation::Collections::IVectorView<MobileBroadbandCellCdma*>* *value);
	virtual STDMETHODIMP _get_ServingCellsGsm(Foundation::Collections::IVectorView<MobileBroadbandCellGsm*>* *value);
	virtual STDMETHODIMP _get_ServingCellsLte(Foundation::Collections::IVectorView<MobileBroadbandCellLte*>* *value);
	virtual STDMETHODIMP _get_ServingCellsTdscdma(Foundation::Collections::IVectorView<MobileBroadbandCellTdscdma*>* *value);
	virtual STDMETHODIMP _get_ServingCellsUmts(Foundation::Collections::IVectorView<MobileBroadbandCellUmts*>* *value);
};
template<typename X> struct IMobileBroadbandCellsInfo_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellCdma*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::NeighboringCellsCdma)->_get_NeighboringCellsCdma(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> operator->() { return get(); }
		} NeighboringCellsCdma;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellGsm*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::NeighboringCellsGsm)->_get_NeighboringCellsGsm(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> operator->() { return get(); }
		} NeighboringCellsGsm;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellLte*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::NeighboringCellsLte)->_get_NeighboringCellsLte(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> operator->() { return get(); }
		} NeighboringCellsLte;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellTdscdma*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::NeighboringCellsTdscdma)->_get_NeighboringCellsTdscdma(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> operator->() { return get(); }
		} NeighboringCellsTdscdma;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellUmts*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::NeighboringCellsUmts)->_get_NeighboringCellsUmts(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> operator->() { return get(); }
		} NeighboringCellsUmts;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellCdma*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::ServingCellsCdma)->_get_ServingCellsCdma(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellCdma>>> operator->() { return get(); }
		} ServingCellsCdma;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellGsm*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::ServingCellsGsm)->_get_ServingCellsGsm(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellGsm>>> operator->() { return get(); }
		} ServingCellsGsm;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellLte*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::ServingCellsLte)->_get_ServingCellsLte(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellLte>>> operator->() { return get(); }
		} ServingCellsLte;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellTdscdma*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::ServingCellsTdscdma)->_get_ServingCellsTdscdma(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellTdscdma>>> operator->() { return get(); }
		} ServingCellsTdscdma;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> get() { Foundation::Collections::IVectorView<MobileBroadbandCellUmts*>* value; hrcheck(enc(&IMobileBroadbandCellsInfo_adaptor::ServingCellsUmts)->_get_ServingCellsUmts(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandCellUmts>>> operator->() { return get(); }
		} ServingCellsUmts;
	};
	IMobileBroadbandCellsInfo_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandCellsInfo, X> : Windows::Networking::NetworkOperators::IMobileBroadbandCellsInfo_adaptor<X> { typedef adapt IMobileBroadbandCellsInfo; };
struct IMobileBroadbandCellsInfo : IMobileBroadbandCellsInfo_raw, generate<IMobileBroadbandCellsInfo> {};

// MobileBroadbandCellsInfo
template<typename X> struct statics<MobileBroadbandCellsInfo, X> : X {
	typedef typename X::root_type MobileBroadbandCellsInfo;
};
struct MobileBroadbandCellsInfo : generate<MobileBroadbandCellsInfo> {};

// INetworkOperatorDataUsageTriggerDetails
struct INetworkOperatorDataUsageTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_NotificationKind(NetworkOperatorDataUsageNotificationKind *value);
};
template<typename X> struct INetworkOperatorDataUsageTriggerDetails_adaptor : X {
	union {
		struct : property {
			NetworkOperatorDataUsageNotificationKind get() { NetworkOperatorDataUsageNotificationKind value; hrcheck(enc(&INetworkOperatorDataUsageTriggerDetails_adaptor::NotificationKind)->_get_NotificationKind(&value)); return value; }
			NetworkOperatorDataUsageNotificationKind operator()() { return get(); }
			operator NetworkOperatorDataUsageNotificationKind () { return get(); }
		} NotificationKind;
	};
	INetworkOperatorDataUsageTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<INetworkOperatorDataUsageTriggerDetails, X> : Windows::Networking::NetworkOperators::INetworkOperatorDataUsageTriggerDetails_adaptor<X> { typedef adapt INetworkOperatorDataUsageTriggerDetails; };
struct INetworkOperatorDataUsageTriggerDetails : INetworkOperatorDataUsageTriggerDetails_raw, generate<INetworkOperatorDataUsageTriggerDetails> {};

// NetworkOperatorDataUsageTriggerDetails
template<typename X> struct statics<NetworkOperatorDataUsageTriggerDetails, X> : X {
	typedef typename X::root_type NetworkOperatorDataUsageTriggerDetails;
};
struct NetworkOperatorDataUsageTriggerDetails : generate<NetworkOperatorDataUsageTriggerDetails> {};

// ITetheringEntitlementCheckTriggerDetails
struct ITetheringEntitlementCheckTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAccountId(HSTRING *value);
	virtual STDMETHODIMP _AllowTethering();
	virtual STDMETHODIMP _DenyTethering(HSTRING entitlementFailureReason);
};
template<typename X> struct ITetheringEntitlementCheckTriggerDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITetheringEntitlementCheckTriggerDetails_adaptor::NetworkAccountId)->_get_NetworkAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkAccountId;
	};
	void AllowTethering() { hrcheck(X::get()->_AllowTethering()); }
	void DenyTethering(hstring_ref entitlementFailureReason) { hrcheck(X::get()->_DenyTethering(entitlementFailureReason)); }
	ITetheringEntitlementCheckTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<ITetheringEntitlementCheckTriggerDetails, X> : Windows::Networking::NetworkOperators::ITetheringEntitlementCheckTriggerDetails_adaptor<X> { typedef adapt ITetheringEntitlementCheckTriggerDetails; };
struct ITetheringEntitlementCheckTriggerDetails : ITetheringEntitlementCheckTriggerDetails_raw, generate<ITetheringEntitlementCheckTriggerDetails> {};

// TetheringEntitlementCheckTriggerDetails
template<typename X> struct statics<TetheringEntitlementCheckTriggerDetails, X> : X {
	typedef typename X::root_type TetheringEntitlementCheckTriggerDetails;
};
struct TetheringEntitlementCheckTriggerDetails : generate<TetheringEntitlementCheckTriggerDetails> {};

// INetworkOperatorTetheringAccessPointConfiguration
struct INetworkOperatorTetheringAccessPointConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_Ssid(HSTRING *value);
	virtual STDMETHODIMP _put_Ssid(HSTRING value);
	virtual STDMETHODIMP _get_Passphrase(HSTRING *value);
	virtual STDMETHODIMP _put_Passphrase(HSTRING value);
};
template<typename X> struct INetworkOperatorTetheringAccessPointConfiguration_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorTetheringAccessPointConfiguration_adaptor::Passphrase)->_get_Passphrase(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&INetworkOperatorTetheringAccessPointConfiguration_adaptor::Passphrase)->_put_Passphrase(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Passphrase;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorTetheringAccessPointConfiguration_adaptor::Ssid)->_get_Ssid(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&INetworkOperatorTetheringAccessPointConfiguration_adaptor::Ssid)->_put_Ssid(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Ssid;
	};
	INetworkOperatorTetheringAccessPointConfiguration_adaptor() {}
};
template<typename X> struct adapt<INetworkOperatorTetheringAccessPointConfiguration, X> : Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration_adaptor<X> { typedef adapt INetworkOperatorTetheringAccessPointConfiguration; };
struct INetworkOperatorTetheringAccessPointConfiguration : INetworkOperatorTetheringAccessPointConfiguration_raw, generate<INetworkOperatorTetheringAccessPointConfiguration> {};

// NetworkOperatorTetheringAccessPointConfiguration
template<typename X> struct statics<NetworkOperatorTetheringAccessPointConfiguration, X> : X {
	typedef typename X::root_type NetworkOperatorTetheringAccessPointConfiguration;
};
struct NetworkOperatorTetheringAccessPointConfiguration : generate<NetworkOperatorTetheringAccessPointConfiguration> {};

// INetworkOperatorTetheringOperationResult
struct INetworkOperatorTetheringOperationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(TetheringOperationStatus *value);
	virtual STDMETHODIMP _get_AdditionalErrorMessage(HSTRING *value);
};
template<typename X> struct INetworkOperatorTetheringOperationResult_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorTetheringOperationResult_adaptor::AdditionalErrorMessage)->_get_AdditionalErrorMessage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AdditionalErrorMessage;
		struct : property {
			TetheringOperationStatus get() { TetheringOperationStatus value; hrcheck(enc(&INetworkOperatorTetheringOperationResult_adaptor::Status)->_get_Status(&value)); return value; }
			TetheringOperationStatus operator()() { return get(); }
			operator TetheringOperationStatus () { return get(); }
		} Status;
	};
	INetworkOperatorTetheringOperationResult_adaptor() {}
};
template<typename X> struct adapt<INetworkOperatorTetheringOperationResult, X> : Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult_adaptor<X> { typedef adapt INetworkOperatorTetheringOperationResult; };
struct INetworkOperatorTetheringOperationResult : INetworkOperatorTetheringOperationResult_raw, generate<INetworkOperatorTetheringOperationResult> {};

// NetworkOperatorTetheringOperationResult
template<typename X> struct statics<NetworkOperatorTetheringOperationResult, X> : X {
	typedef typename X::root_type NetworkOperatorTetheringOperationResult;
};
struct NetworkOperatorTetheringOperationResult : generate<NetworkOperatorTetheringOperationResult> {};

// INetworkOperatorTetheringManagerStatics
struct INetworkOperatorTetheringManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetTetheringCapability(HSTRING networkAccountId, TetheringCapability *value);
	virtual STDMETHODIMP _CreateFromNetworkAccountId(HSTRING networkAccountId, NetworkOperatorTetheringManager* *ppManager);
};

// INetworkOperatorTetheringManagerStatics3
struct INetworkOperatorTetheringManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _CreateFromConnectionProfileWithTargetAdapter(Connectivity::ConnectionProfile* profile, Connectivity::NetworkAdapter* adapter, NetworkOperatorTetheringManager* *ppManager);
};

// INetworkOperatorTetheringManagerStatics2
struct INetworkOperatorTetheringManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetTetheringCapabilityFromConnectionProfile(Connectivity::ConnectionProfile* profile, TetheringCapability *result);
	virtual STDMETHODIMP _CreateFromConnectionProfile(Connectivity::ConnectionProfile* profile, NetworkOperatorTetheringManager* *ppManager);
};

// INetworkOperatorTetheringClientManager
struct INetworkOperatorTetheringClientManager_raw : IInspectable {
	virtual STDMETHODIMP _GetTetheringClients(Foundation::Collections::IVectorView<NetworkOperatorTetheringClient*>* *value);
};
template<typename X> struct INetworkOperatorTetheringClientManager_adaptor : X {
	ptr<Foundation::Collections::IVectorView<ptr<NetworkOperatorTetheringClient>>> GetTetheringClients() { Foundation::Collections::IVectorView<NetworkOperatorTetheringClient*>* value; hrcheck(X::get()->_GetTetheringClients(&value)); return from_abi(value); }
};
template<typename X> struct adapt<INetworkOperatorTetheringClientManager, X> : Windows::Networking::NetworkOperators::INetworkOperatorTetheringClientManager_adaptor<X> { typedef adapt INetworkOperatorTetheringClientManager; };
struct INetworkOperatorTetheringClientManager : INetworkOperatorTetheringClientManager_raw, generate<INetworkOperatorTetheringClientManager> {};

// INetworkOperatorTetheringManager
struct INetworkOperatorTetheringManager_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxClientCount(unsigned *value);
	virtual STDMETHODIMP _get_ClientCount(unsigned *value);
	virtual STDMETHODIMP _get_TetheringOperationalState(NetworkOperators::TetheringOperationalState *value);
	virtual STDMETHODIMP _GetCurrentAccessPointConfiguration(NetworkOperatorTetheringAccessPointConfiguration* *configuration);
	virtual STDMETHODIMP _ConfigureAccessPointAsync(NetworkOperatorTetheringAccessPointConfiguration* configuration, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _StartTetheringAsync(Foundation::IAsyncOperation<NetworkOperatorTetheringOperationResult*>* *asyncInfo);
	virtual STDMETHODIMP _StopTetheringAsync(Foundation::IAsyncOperation<NetworkOperatorTetheringOperationResult*>* *asyncInfo);
};
template<typename X> struct INetworkOperatorTetheringManager_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&INetworkOperatorTetheringManager_adaptor::ClientCount)->_get_ClientCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ClientCount;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&INetworkOperatorTetheringManager_adaptor::MaxClientCount)->_get_MaxClientCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxClientCount;
		struct : property {
			NetworkOperators::TetheringOperationalState get() { NetworkOperators::TetheringOperationalState value; hrcheck(enc(&INetworkOperatorTetheringManager_adaptor::TetheringOperationalState)->_get_TetheringOperationalState(&value)); return value; }
			NetworkOperators::TetheringOperationalState operator()() { return get(); }
			operator NetworkOperators::TetheringOperationalState () { return get(); }
		} TetheringOperationalState;
	};
	ptr<NetworkOperatorTetheringAccessPointConfiguration> GetCurrentAccessPointConfiguration() { NetworkOperatorTetheringAccessPointConfiguration* configuration; hrcheck(X::get()->_GetCurrentAccessPointConfiguration(&configuration)); return from_abi(configuration); }
	ptr<Foundation::IAsyncAction> ConfigureAccessPointAsync(pptr<NetworkOperatorTetheringAccessPointConfiguration> configuration) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_ConfigureAccessPointAsync(configuration, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<NetworkOperatorTetheringOperationResult>>> StartTetheringAsync() { Foundation::IAsyncOperation<NetworkOperatorTetheringOperationResult*>* asyncInfo; hrcheck(X::get()->_StartTetheringAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<NetworkOperatorTetheringOperationResult>>> StopTetheringAsync() { Foundation::IAsyncOperation<NetworkOperatorTetheringOperationResult*>* asyncInfo; hrcheck(X::get()->_StopTetheringAsync(&asyncInfo)); return from_abi(asyncInfo); }
	INetworkOperatorTetheringManager_adaptor() {}
};
template<typename X> struct adapt<INetworkOperatorTetheringManager, X> : Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager_adaptor<X> { typedef adapt INetworkOperatorTetheringManager; };
struct INetworkOperatorTetheringManager : INetworkOperatorTetheringManager_raw, generate<INetworkOperatorTetheringManager> {};

// NetworkOperatorTetheringManager
template<typename> struct NetworkOperatorTetheringManager_statics {
	static ptr<NetworkOperatorTetheringManager> CreateFromConnectionProfile(pptr<Connectivity::ConnectionProfile> profile, pptr<Connectivity::NetworkAdapter> adapter) { NetworkOperatorTetheringManager* ppManager; hrcheck(get_activation_factory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics3>()->_CreateFromConnectionProfileWithTargetAdapter(profile, adapter, &ppManager)); return from_abi(ppManager); }
	static TetheringCapability GetTetheringCapabilityFromConnectionProfile(pptr<Connectivity::ConnectionProfile> profile) { TetheringCapability result; hrcheck(get_activation_factory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics2>()->_GetTetheringCapabilityFromConnectionProfile(profile, &result)); return result; }
	static ptr<NetworkOperatorTetheringManager> CreateFromConnectionProfile(pptr<Connectivity::ConnectionProfile> profile) { NetworkOperatorTetheringManager* ppManager; hrcheck(get_activation_factory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics2>()->_CreateFromConnectionProfile(profile, &ppManager)); return from_abi(ppManager); }
	static TetheringCapability GetTetheringCapability(hstring_ref networkAccountId) { TetheringCapability value; hrcheck(get_activation_factory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>()->_GetTetheringCapability(networkAccountId, &value)); return value; }
	static ptr<NetworkOperatorTetheringManager> CreateFromNetworkAccountId(hstring_ref networkAccountId) { NetworkOperatorTetheringManager* ppManager; hrcheck(get_activation_factory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>()->_CreateFromNetworkAccountId(networkAccountId, &ppManager)); return from_abi(ppManager); }
};

template<typename X> struct statics<NetworkOperatorTetheringManager, X> : X, Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager_statics<void> {
	typedef typename X::root_type NetworkOperatorTetheringManager;
};
struct NetworkOperatorTetheringManager : generate<NetworkOperatorTetheringManager> {};

// INetworkOperatorTetheringClient
struct INetworkOperatorTetheringClient_raw : IInspectable {
	virtual STDMETHODIMP _get_MacAddress(HSTRING *value);
	virtual STDMETHODIMP _get_HostNames(Foundation::Collections::IVectorView<HostName*>* *value);
};
template<typename X> struct INetworkOperatorTetheringClient_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HostName>>> get() { Foundation::Collections::IVectorView<HostName*>* value; hrcheck(enc(&INetworkOperatorTetheringClient_adaptor::HostNames)->_get_HostNames(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HostName>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HostName>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HostName>>> operator->() { return get(); }
		} HostNames;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorTetheringClient_adaptor::MacAddress)->_get_MacAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MacAddress;
	};
	INetworkOperatorTetheringClient_adaptor() {}
};
template<typename X> struct adapt<INetworkOperatorTetheringClient, X> : Windows::Networking::NetworkOperators::INetworkOperatorTetheringClient_adaptor<X> { typedef adapt INetworkOperatorTetheringClient; };
struct INetworkOperatorTetheringClient : INetworkOperatorTetheringClient_raw, generate<INetworkOperatorTetheringClient> {};

// NetworkOperatorTetheringClient
template<typename X> struct statics<NetworkOperatorTetheringClient, X> : X {
	typedef typename X::root_type NetworkOperatorTetheringClient;
};
struct NetworkOperatorTetheringClient : generate<NetworkOperatorTetheringClient> {};

// IMobileBroadbandAccountEventArgs
struct IMobileBroadbandAccountEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAccountId(HSTRING *value);
};
template<typename X> struct IMobileBroadbandAccountEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandAccountEventArgs_adaptor::NetworkAccountId)->_get_NetworkAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkAccountId;
	};
	IMobileBroadbandAccountEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandAccountEventArgs, X> : Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs_adaptor<X> { typedef adapt IMobileBroadbandAccountEventArgs; };
struct IMobileBroadbandAccountEventArgs : IMobileBroadbandAccountEventArgs_raw, generate<IMobileBroadbandAccountEventArgs> {};

// MobileBroadbandAccountEventArgs
template<typename X> struct statics<MobileBroadbandAccountEventArgs, X> : X {
	typedef typename X::root_type MobileBroadbandAccountEventArgs;
};
struct MobileBroadbandAccountEventArgs : generate<MobileBroadbandAccountEventArgs> {};

// IMobileBroadbandAccountUpdatedEventArgs
struct IMobileBroadbandAccountUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAccountId(HSTRING *value);
	virtual STDMETHODIMP _get_HasDeviceInformationChanged(bool *value);
	virtual STDMETHODIMP _get_HasNetworkChanged(bool *value);
};
template<typename X> struct IMobileBroadbandAccountUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandAccountUpdatedEventArgs_adaptor::HasDeviceInformationChanged)->_get_HasDeviceInformationChanged(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasDeviceInformationChanged;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandAccountUpdatedEventArgs_adaptor::HasNetworkChanged)->_get_HasNetworkChanged(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNetworkChanged;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandAccountUpdatedEventArgs_adaptor::NetworkAccountId)->_get_NetworkAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkAccountId;
	};
	IMobileBroadbandAccountUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandAccountUpdatedEventArgs, X> : Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs_adaptor<X> { typedef adapt IMobileBroadbandAccountUpdatedEventArgs; };
struct IMobileBroadbandAccountUpdatedEventArgs : IMobileBroadbandAccountUpdatedEventArgs_raw, generate<IMobileBroadbandAccountUpdatedEventArgs> {};

// MobileBroadbandAccountUpdatedEventArgs
template<typename X> struct statics<MobileBroadbandAccountUpdatedEventArgs, X> : X {
	typedef typename X::root_type MobileBroadbandAccountUpdatedEventArgs;
};
struct MobileBroadbandAccountUpdatedEventArgs : generate<MobileBroadbandAccountUpdatedEventArgs> {};

// IMobileBroadbandAccountWatcher
struct IMobileBroadbandAccountWatcher_raw : IInspectable {
	virtual STDMETHODIMP _add_AccountAdded(Foundation::TypedEventHandler<MobileBroadbandAccountWatcher*, MobileBroadbandAccountEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_AccountAdded(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_AccountUpdated(Foundation::TypedEventHandler<MobileBroadbandAccountWatcher*, MobileBroadbandAccountUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_AccountUpdated(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_AccountRemoved(Foundation::TypedEventHandler<MobileBroadbandAccountWatcher*, MobileBroadbandAccountEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_AccountRemoved(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<MobileBroadbandAccountWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<MobileBroadbandAccountWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _get_Status(MobileBroadbandAccountWatcherStatus *status);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
};
template<typename X> struct IMobileBroadbandAccountWatcher_adaptor : X {
	union {
		struct : property {
			MobileBroadbandAccountWatcherStatus get() { MobileBroadbandAccountWatcherStatus status; hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::Status)->_get_Status(&status)); return status; }
			MobileBroadbandAccountWatcherStatus operator()() { return get(); }
			operator MobileBroadbandAccountWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandAccountWatcher>, ptr<MobileBroadbandAccountEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::AccountAdded)->_add_AccountAdded(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::AccountAdded)->_remove_AccountAdded(cookie)); }
		} AccountAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandAccountWatcher>, ptr<MobileBroadbandAccountEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::AccountRemoved)->_add_AccountRemoved(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::AccountRemoved)->_remove_AccountRemoved(cookie)); }
		} AccountRemoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandAccountWatcher>, ptr<MobileBroadbandAccountUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::AccountUpdated)->_add_AccountUpdated(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::AccountUpdated)->_remove_AccountUpdated(cookie)); }
		} AccountUpdated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandAccountWatcher>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(cookie)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandAccountWatcher>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IMobileBroadbandAccountWatcher_adaptor::Stopped)->_remove_Stopped(cookie)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IMobileBroadbandAccountWatcher_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandAccountWatcher, X> : Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher_adaptor<X> { typedef adapt IMobileBroadbandAccountWatcher; };
struct IMobileBroadbandAccountWatcher : IMobileBroadbandAccountWatcher_raw, generate<IMobileBroadbandAccountWatcher> {};

// MobileBroadbandAccountWatcher
template<typename X> struct statics<MobileBroadbandAccountWatcher, X> : X {
	typedef typename X::root_type MobileBroadbandAccountWatcher;
};
struct MobileBroadbandAccountWatcher : generate<MobileBroadbandAccountWatcher> {};

// IMobileBroadbandModemStatics
struct IMobileBroadbandModemStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
	virtual STDMETHODIMP _FromId(HSTRING deviceId, MobileBroadbandModem* *value);
	virtual STDMETHODIMP _GetDefault(MobileBroadbandModem* *value);
};

// IMobileBroadbandModem3
struct IMobileBroadbandModem3_raw : IInspectable {
	virtual STDMETHODIMP _TryGetPcoAsync(Foundation::IAsyncOperation<MobileBroadbandPco*>* *operation);
	virtual STDMETHODIMP _get_IsInEmergencyCallMode(bool *value);
	virtual STDMETHODIMP _add_IsInEmergencyCallModeChanged(Foundation::TypedEventHandler<MobileBroadbandModem*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsInEmergencyCallModeChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMobileBroadbandModem3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandModem3_adaptor::IsInEmergencyCallMode)->_get_IsInEmergencyCallMode(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsInEmergencyCallMode;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandModem>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMobileBroadbandModem3_adaptor::IsInEmergencyCallModeChanged)->_add_IsInEmergencyCallModeChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMobileBroadbandModem3_adaptor::IsInEmergencyCallModeChanged)->_remove_IsInEmergencyCallModeChanged(token)); }
		} IsInEmergencyCallModeChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandPco>>> TryGetPcoAsync() { Foundation::IAsyncOperation<MobileBroadbandPco*>* operation; hrcheck(X::get()->_TryGetPcoAsync(&operation)); return from_abi(operation); }
	IMobileBroadbandModem3_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandModem3, X> : Windows::Networking::NetworkOperators::IMobileBroadbandModem3_adaptor<X> { typedef adapt IMobileBroadbandModem3; };
struct IMobileBroadbandModem3 : IMobileBroadbandModem3_raw, generate<IMobileBroadbandModem3> {};

// IMobileBroadbandModem2
struct IMobileBroadbandModem2_raw : IInspectable {
	virtual STDMETHODIMP _GetIsPassthroughEnabledAsync(Foundation::IAsyncOperation<bool>* *asyncInfo);
	virtual STDMETHODIMP _SetIsPassthroughEnabledAsync(bool value, Foundation::IAsyncOperation<MobileBroadbandModemStatus>* *asyncInfo);
};
template<typename X> struct IMobileBroadbandModem2_adaptor : X {
	ptr<Foundation::IAsyncOperation<bool>> GetIsPassthroughEnabledAsync() { Foundation::IAsyncOperation<bool>* asyncInfo; hrcheck(X::get()->_GetIsPassthroughEnabledAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<MobileBroadbandModemStatus>> SetIsPassthroughEnabledAsync(bool value) { Foundation::IAsyncOperation<MobileBroadbandModemStatus>* asyncInfo; hrcheck(X::get()->_SetIsPassthroughEnabledAsync(value, &asyncInfo)); return from_abi(asyncInfo); }
};
template<typename X> struct adapt<IMobileBroadbandModem2, X> : Windows::Networking::NetworkOperators::IMobileBroadbandModem2_adaptor<X> { typedef adapt IMobileBroadbandModem2; };
struct IMobileBroadbandModem2 : IMobileBroadbandModem2_raw, generate<IMobileBroadbandModem2> {};

// IMobileBroadbandModem
struct IMobileBroadbandModem_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentAccount(MobileBroadbandAccount* *value);
	virtual STDMETHODIMP _get_DeviceInformation(MobileBroadbandDeviceInformation* *value);
	virtual STDMETHODIMP _get_MaxDeviceServiceCommandSizeInBytes(unsigned *value);
	virtual STDMETHODIMP _get_MaxDeviceServiceDataSizeInBytes(unsigned *value);
	virtual STDMETHODIMP _get_DeviceServices(Foundation::Collections::IVectorView<MobileBroadbandDeviceServiceInformation*>* *value);
	virtual STDMETHODIMP _GetDeviceService(Platform::Guid deviceServiceId, MobileBroadbandDeviceService* *value);
	virtual STDMETHODIMP _get_IsResetSupported(bool *value);
	virtual STDMETHODIMP _ResetAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _GetCurrentConfigurationAsync(Foundation::IAsyncOperation<MobileBroadbandModemConfiguration*>* *asyncInfo);
	virtual STDMETHODIMP _get_CurrentNetwork(MobileBroadbandNetwork* *value);
};
template<typename X> struct IMobileBroadbandModem_adaptor : X {
	union {
		struct : property {
			ptr<MobileBroadbandAccount> get() { MobileBroadbandAccount* value; hrcheck(enc(&IMobileBroadbandModem_adaptor::CurrentAccount)->_get_CurrentAccount(&value)); return from_abi(value); }
			ptr<MobileBroadbandAccount> operator()() { return get(); }
			operator ptr<MobileBroadbandAccount> () { return get(); }
			ptr<MobileBroadbandAccount> operator->() { return get(); }
		} CurrentAccount;
		struct : property {
			ptr<MobileBroadbandNetwork> get() { MobileBroadbandNetwork* value; hrcheck(enc(&IMobileBroadbandModem_adaptor::CurrentNetwork)->_get_CurrentNetwork(&value)); return from_abi(value); }
			ptr<MobileBroadbandNetwork> operator()() { return get(); }
			operator ptr<MobileBroadbandNetwork> () { return get(); }
			ptr<MobileBroadbandNetwork> operator->() { return get(); }
		} CurrentNetwork;
		struct : property {
			ptr<MobileBroadbandDeviceInformation> get() { MobileBroadbandDeviceInformation* value; hrcheck(enc(&IMobileBroadbandModem_adaptor::DeviceInformation)->_get_DeviceInformation(&value)); return from_abi(value); }
			ptr<MobileBroadbandDeviceInformation> operator()() { return get(); }
			operator ptr<MobileBroadbandDeviceInformation> () { return get(); }
			ptr<MobileBroadbandDeviceInformation> operator->() { return get(); }
		} DeviceInformation;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandDeviceServiceInformation>>> get() { Foundation::Collections::IVectorView<MobileBroadbandDeviceServiceInformation*>* value; hrcheck(enc(&IMobileBroadbandModem_adaptor::DeviceServices)->_get_DeviceServices(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandDeviceServiceInformation>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandDeviceServiceInformation>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandDeviceServiceInformation>>> operator->() { return get(); }
		} DeviceServices;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandModem_adaptor::IsResetSupported)->_get_IsResetSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsResetSupported;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMobileBroadbandModem_adaptor::MaxDeviceServiceCommandSizeInBytes)->_get_MaxDeviceServiceCommandSizeInBytes(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxDeviceServiceCommandSizeInBytes;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMobileBroadbandModem_adaptor::MaxDeviceServiceDataSizeInBytes)->_get_MaxDeviceServiceDataSizeInBytes(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxDeviceServiceDataSizeInBytes;
	};
	ptr<MobileBroadbandDeviceService> GetDeviceService(const Platform::Guid& deviceServiceId) { MobileBroadbandDeviceService* value; hrcheck(X::get()->_GetDeviceService(deviceServiceId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> ResetAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_ResetAsync(&asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandModemConfiguration>>> GetCurrentConfigurationAsync() { Foundation::IAsyncOperation<MobileBroadbandModemConfiguration*>* asyncInfo; hrcheck(X::get()->_GetCurrentConfigurationAsync(&asyncInfo)); return from_abi(asyncInfo); }
	IMobileBroadbandModem_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandModem, X> : Windows::Networking::NetworkOperators::IMobileBroadbandModem_adaptor<X> { typedef adapt IMobileBroadbandModem; };
struct IMobileBroadbandModem : IMobileBroadbandModem_raw, generate<IMobileBroadbandModem> {};

// MobileBroadbandModem
template<typename> struct MobileBroadbandModem_statics {
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<MobileBroadbandModem, IMobileBroadbandModemStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
	static ptr<MobileBroadbandModem> FromId(hstring_ref deviceId) { MobileBroadbandModem* value; hrcheck(get_activation_factory<MobileBroadbandModem, IMobileBroadbandModemStatics>()->_FromId(deviceId, &value)); return from_abi(value); }
	static ptr<MobileBroadbandModem> GetDefault() { MobileBroadbandModem* value; hrcheck(get_activation_factory<MobileBroadbandModem, IMobileBroadbandModemStatics>()->_GetDefault(&value)); return from_abi(value); }
};

template<typename X> struct statics<MobileBroadbandModem, X> : X, Windows::Networking::NetworkOperators::MobileBroadbandModem_statics<void> {
	typedef typename X::root_type MobileBroadbandModem;
};
struct MobileBroadbandModem : generate<MobileBroadbandModem> {};

// IMobileBroadbandModemConfiguration
struct IMobileBroadbandModemConfiguration_raw : IInspectable {
	virtual STDMETHODIMP _get_Uicc(MobileBroadbandUicc* *value);
	virtual STDMETHODIMP _get_HomeProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_HomeProviderName(HSTRING *value);
};
template<typename X> struct IMobileBroadbandModemConfiguration_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandModemConfiguration_adaptor::HomeProviderId)->_get_HomeProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} HomeProviderId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandModemConfiguration_adaptor::HomeProviderName)->_get_HomeProviderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} HomeProviderName;
		struct : property {
			ptr<MobileBroadbandUicc> get() { MobileBroadbandUicc* value; hrcheck(enc(&IMobileBroadbandModemConfiguration_adaptor::Uicc)->_get_Uicc(&value)); return from_abi(value); }
			ptr<MobileBroadbandUicc> operator()() { return get(); }
			operator ptr<MobileBroadbandUicc> () { return get(); }
			ptr<MobileBroadbandUicc> operator->() { return get(); }
		} Uicc;
	};
	IMobileBroadbandModemConfiguration_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandModemConfiguration, X> : Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration_adaptor<X> { typedef adapt IMobileBroadbandModemConfiguration; };
struct IMobileBroadbandModemConfiguration : IMobileBroadbandModemConfiguration_raw, generate<IMobileBroadbandModemConfiguration> {};

// IMobileBroadbandUicc
struct IMobileBroadbandUicc_raw : IInspectable {
	virtual STDMETHODIMP _get_SimIccId(HSTRING *value);
	virtual STDMETHODIMP _GetUiccAppsAsync(Foundation::IAsyncOperation<MobileBroadbandUiccAppsResult*>* *asyncInfo);
};
template<typename X> struct IMobileBroadbandUicc_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandUicc_adaptor::SimIccId)->_get_SimIccId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SimIccId;
	};
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandUiccAppsResult>>> GetUiccAppsAsync() { Foundation::IAsyncOperation<MobileBroadbandUiccAppsResult*>* asyncInfo; hrcheck(X::get()->_GetUiccAppsAsync(&asyncInfo)); return from_abi(asyncInfo); }
	IMobileBroadbandUicc_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandUicc, X> : Windows::Networking::NetworkOperators::IMobileBroadbandUicc_adaptor<X> { typedef adapt IMobileBroadbandUicc; };
struct IMobileBroadbandUicc : IMobileBroadbandUicc_raw, generate<IMobileBroadbandUicc> {};

// MobileBroadbandUicc
template<typename X> struct statics<MobileBroadbandUicc, X> : X {
	typedef typename X::root_type MobileBroadbandUicc;
};
struct MobileBroadbandUicc : generate<MobileBroadbandUicc> {};

// IMobileBroadbandModemConfiguration2
struct IMobileBroadbandModemConfiguration2_raw : IInspectable {
	virtual STDMETHODIMP _get_SarManager(MobileBroadbandSarManager* *value);
};
template<typename X> struct IMobileBroadbandModemConfiguration2_adaptor : X {
	union {
		struct : property {
			ptr<MobileBroadbandSarManager> get() { MobileBroadbandSarManager* value; hrcheck(enc(&IMobileBroadbandModemConfiguration2_adaptor::SarManager)->_get_SarManager(&value)); return from_abi(value); }
			ptr<MobileBroadbandSarManager> operator()() { return get(); }
			operator ptr<MobileBroadbandSarManager> () { return get(); }
			ptr<MobileBroadbandSarManager> operator->() { return get(); }
		} SarManager;
	};
	IMobileBroadbandModemConfiguration2_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandModemConfiguration2, X> : Windows::Networking::NetworkOperators::IMobileBroadbandModemConfiguration2_adaptor<X> { typedef adapt IMobileBroadbandModemConfiguration2; };
struct IMobileBroadbandModemConfiguration2 : IMobileBroadbandModemConfiguration2_raw, generate<IMobileBroadbandModemConfiguration2> {};

// IMobileBroadbandSarManager
struct IMobileBroadbandSarManager_raw : IInspectable {
	virtual STDMETHODIMP _get_IsBackoffEnabled(bool *value);
	virtual STDMETHODIMP _get_IsWiFiHardwareIntegrated(bool *value);
	virtual STDMETHODIMP _get_IsSarControlledByHardware(bool *value);
	virtual STDMETHODIMP _get_Antennas(Foundation::Collections::IVectorView<MobileBroadbandAntennaSar*>* *value);
	virtual STDMETHODIMP _get_HysteresisTimerPeriod(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _add_TransmissionStateChanged(Foundation::TypedEventHandler<MobileBroadbandSarManager*, MobileBroadbandTransmissionStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TransmissionStateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _EnableBackoffAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _DisableBackoffAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _SetConfigurationAsync(Foundation::Collections::IIterable<MobileBroadbandAntennaSar*>* antennas, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _RevertSarToHardwareControlAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _SetTransmissionStateChangedHysteresisAsync(Foundation::TimeSpan timerPeriod, Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _GetIsTransmittingAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _StartTransmissionStateMonitoring();
	virtual STDMETHODIMP _StopTransmissionStateMonitoring();
};
template<typename X> struct IMobileBroadbandSarManager_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandAntennaSar>>> get() { Foundation::Collections::IVectorView<MobileBroadbandAntennaSar*>* value; hrcheck(enc(&IMobileBroadbandSarManager_adaptor::Antennas)->_get_Antennas(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandAntennaSar>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandAntennaSar>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandAntennaSar>>> operator->() { return get(); }
		} Antennas;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMobileBroadbandSarManager_adaptor::HysteresisTimerPeriod)->_get_HysteresisTimerPeriod(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} HysteresisTimerPeriod;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandSarManager_adaptor::IsBackoffEnabled)->_get_IsBackoffEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBackoffEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandSarManager_adaptor::IsSarControlledByHardware)->_get_IsSarControlledByHardware(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSarControlledByHardware;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandSarManager_adaptor::IsWiFiHardwareIntegrated)->_get_IsWiFiHardwareIntegrated(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsWiFiHardwareIntegrated;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandSarManager>, ptr<MobileBroadbandTransmissionStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMobileBroadbandSarManager_adaptor::TransmissionStateChanged)->_add_TransmissionStateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMobileBroadbandSarManager_adaptor::TransmissionStateChanged)->_remove_TransmissionStateChanged(token)); }
		} TransmissionStateChanged;
	};
	ptr<Foundation::IAsyncAction> EnableBackoffAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_EnableBackoffAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> DisableBackoffAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_DisableBackoffAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SetConfigurationAsync(pptr<Foundation::Collections::IIterable<ptr<MobileBroadbandAntennaSar>>> antennas) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SetConfigurationAsync(to_abi(antennas), &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> RevertSarToHardwareControlAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_RevertSarToHardwareControlAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SetTransmissionStateChangedHysteresisAsync(const Foundation::TimeSpan& timerPeriod) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SetTransmissionStateChangedHysteresisAsync(timerPeriod, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> GetIsTransmittingAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_GetIsTransmittingAsync(&operation)); return from_abi(operation); }
	void StartTransmissionStateMonitoring() { hrcheck(X::get()->_StartTransmissionStateMonitoring()); }
	void StopTransmissionStateMonitoring() { hrcheck(X::get()->_StopTransmissionStateMonitoring()); }
	IMobileBroadbandSarManager_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandSarManager, X> : Windows::Networking::NetworkOperators::IMobileBroadbandSarManager_adaptor<X> { typedef adapt IMobileBroadbandSarManager; };
struct IMobileBroadbandSarManager : IMobileBroadbandSarManager_raw, generate<IMobileBroadbandSarManager> {};

// MobileBroadbandSarManager
template<typename X> struct statics<MobileBroadbandSarManager, X> : X {
	typedef typename X::root_type MobileBroadbandSarManager;
};
struct MobileBroadbandSarManager : generate<MobileBroadbandSarManager> {};

// MobileBroadbandModemConfiguration
template<typename X> struct statics<MobileBroadbandModemConfiguration, X> : X {
	typedef typename X::root_type MobileBroadbandModemConfiguration;
};
struct MobileBroadbandModemConfiguration : generate<MobileBroadbandModemConfiguration> {};

// IMobileBroadbandDeviceServiceInformation
struct IMobileBroadbandDeviceServiceInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceServiceId(Platform::Guid *value);
	virtual STDMETHODIMP _get_IsDataReadSupported(bool *value);
	virtual STDMETHODIMP _get_IsDataWriteSupported(bool *value);
};
template<typename X> struct IMobileBroadbandDeviceServiceInformation_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IMobileBroadbandDeviceServiceInformation_adaptor::DeviceServiceId)->_get_DeviceServiceId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} DeviceServiceId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandDeviceServiceInformation_adaptor::IsDataReadSupported)->_get_IsDataReadSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDataReadSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandDeviceServiceInformation_adaptor::IsDataWriteSupported)->_get_IsDataWriteSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDataWriteSupported;
	};
	IMobileBroadbandDeviceServiceInformation_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceServiceInformation, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceInformation_adaptor<X> { typedef adapt IMobileBroadbandDeviceServiceInformation; };
struct IMobileBroadbandDeviceServiceInformation : IMobileBroadbandDeviceServiceInformation_raw, generate<IMobileBroadbandDeviceServiceInformation> {};

// MobileBroadbandDeviceServiceInformation
template<typename X> struct statics<MobileBroadbandDeviceServiceInformation, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceServiceInformation;
};
struct MobileBroadbandDeviceServiceInformation : generate<MobileBroadbandDeviceServiceInformation> {};

// IMobileBroadbandDeviceService
struct IMobileBroadbandDeviceService_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceServiceId(Platform::Guid *value);
	virtual STDMETHODIMP _get_SupportedCommands(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _OpenDataSession(MobileBroadbandDeviceServiceDataSession* *value);
	virtual STDMETHODIMP _OpenCommandSession(MobileBroadbandDeviceServiceCommandSession* *value);
};
template<typename X> struct IMobileBroadbandDeviceService_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IMobileBroadbandDeviceService_adaptor::DeviceServiceId)->_get_DeviceServiceId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} DeviceServiceId;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(enc(&IMobileBroadbandDeviceService_adaptor::SupportedCommands)->_get_SupportedCommands(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
		} SupportedCommands;
	};
	ptr<MobileBroadbandDeviceServiceDataSession> OpenDataSession() { MobileBroadbandDeviceServiceDataSession* value; hrcheck(X::get()->_OpenDataSession(&value)); return from_abi(value); }
	ptr<MobileBroadbandDeviceServiceCommandSession> OpenCommandSession() { MobileBroadbandDeviceServiceCommandSession* value; hrcheck(X::get()->_OpenCommandSession(&value)); return from_abi(value); }
	IMobileBroadbandDeviceService_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceService, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceService_adaptor<X> { typedef adapt IMobileBroadbandDeviceService; };
struct IMobileBroadbandDeviceService : IMobileBroadbandDeviceService_raw, generate<IMobileBroadbandDeviceService> {};

// MobileBroadbandDeviceService
template<typename X> struct statics<MobileBroadbandDeviceService, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceService;
};
struct MobileBroadbandDeviceService : generate<MobileBroadbandDeviceService> {};

// IMobileBroadbandPco
struct IMobileBroadbandPco_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *result);
	virtual STDMETHODIMP _get_IsComplete(bool *result);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *result);
};
template<typename X> struct IMobileBroadbandPco_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* result; hrcheck(enc(&IMobileBroadbandPco_adaptor::Data)->_get_Data(&result)); return from_abi(result); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Data;
		struct : property {
			hstring get() { HSTRING result; hrcheck(enc(&IMobileBroadbandPco_adaptor::DeviceId)->_get_DeviceId(&result)); return from_abi(result); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			bool get() { bool result; hrcheck(enc(&IMobileBroadbandPco_adaptor::IsComplete)->_get_IsComplete(&result)); return result; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsComplete;
	};
	IMobileBroadbandPco_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandPco, X> : Windows::Networking::NetworkOperators::IMobileBroadbandPco_adaptor<X> { typedef adapt IMobileBroadbandPco; };
struct IMobileBroadbandPco : IMobileBroadbandPco_raw, generate<IMobileBroadbandPco> {};

// MobileBroadbandPco
template<typename X> struct statics<MobileBroadbandPco, X> : X {
	typedef typename X::root_type MobileBroadbandPco;
};
struct MobileBroadbandPco : generate<MobileBroadbandPco> {};

// IMobileBroadbandPin
struct IMobileBroadbandPin_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(MobileBroadbandPinType *value);
	virtual STDMETHODIMP _get_LockState(MobileBroadbandPinLockState *value);
	virtual STDMETHODIMP _get_Format(MobileBroadbandPinFormat *value);
	virtual STDMETHODIMP _get_Enabled(bool *value);
	virtual STDMETHODIMP _get_MaxLength(unsigned *value);
	virtual STDMETHODIMP _get_MinLength(unsigned *value);
	virtual STDMETHODIMP _get_AttemptsRemaining(unsigned *value);
	virtual STDMETHODIMP _EnableAsync(HSTRING currentPin, Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* *asyncInfo);
	virtual STDMETHODIMP _DisableAsync(HSTRING currentPin, Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* *asyncInfo);
	virtual STDMETHODIMP _EnterAsync(HSTRING currentPin, Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* *asyncInfo);
	virtual STDMETHODIMP _ChangeAsync(HSTRING currentPin, HSTRING newPin, Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* *asyncInfo);
	virtual STDMETHODIMP _UnblockAsync(HSTRING pinUnblockKey, HSTRING newPin, Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* *asyncInfo);
};
template<typename X> struct IMobileBroadbandPin_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMobileBroadbandPin_adaptor::AttemptsRemaining)->_get_AttemptsRemaining(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} AttemptsRemaining;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandPin_adaptor::Enabled)->_get_Enabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Enabled;
		struct : property {
			MobileBroadbandPinFormat get() { MobileBroadbandPinFormat value; hrcheck(enc(&IMobileBroadbandPin_adaptor::Format)->_get_Format(&value)); return value; }
			MobileBroadbandPinFormat operator()() { return get(); }
			operator MobileBroadbandPinFormat () { return get(); }
		} Format;
		struct : property {
			MobileBroadbandPinLockState get() { MobileBroadbandPinLockState value; hrcheck(enc(&IMobileBroadbandPin_adaptor::LockState)->_get_LockState(&value)); return value; }
			MobileBroadbandPinLockState operator()() { return get(); }
			operator MobileBroadbandPinLockState () { return get(); }
		} LockState;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMobileBroadbandPin_adaptor::MaxLength)->_get_MaxLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxLength;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMobileBroadbandPin_adaptor::MinLength)->_get_MinLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinLength;
		struct : property {
			MobileBroadbandPinType get() { MobileBroadbandPinType value; hrcheck(enc(&IMobileBroadbandPin_adaptor::Type)->_get_Type(&value)); return value; }
			MobileBroadbandPinType operator()() { return get(); }
			operator MobileBroadbandPinType () { return get(); }
		} Type;
	};
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandPinOperationResult>>> EnableAsync(hstring_ref currentPin) { Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* asyncInfo; hrcheck(X::get()->_EnableAsync(currentPin, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandPinOperationResult>>> DisableAsync(hstring_ref currentPin) { Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* asyncInfo; hrcheck(X::get()->_DisableAsync(currentPin, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandPinOperationResult>>> EnterAsync(hstring_ref currentPin) { Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* asyncInfo; hrcheck(X::get()->_EnterAsync(currentPin, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandPinOperationResult>>> ChangeAsync(hstring_ref currentPin, hstring_ref newPin) { Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* asyncInfo; hrcheck(X::get()->_ChangeAsync(currentPin, newPin, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandPinOperationResult>>> UnblockAsync(hstring_ref pinUnblockKey, hstring_ref newPin) { Foundation::IAsyncOperation<MobileBroadbandPinOperationResult*>* asyncInfo; hrcheck(X::get()->_UnblockAsync(pinUnblockKey, newPin, &asyncInfo)); return from_abi(asyncInfo); }
	IMobileBroadbandPin_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandPin, X> : Windows::Networking::NetworkOperators::IMobileBroadbandPin_adaptor<X> { typedef adapt IMobileBroadbandPin; };
struct IMobileBroadbandPin : IMobileBroadbandPin_raw, generate<IMobileBroadbandPin> {};

// MobileBroadbandPin
template<typename X> struct statics<MobileBroadbandPin, X> : X {
	typedef typename X::root_type MobileBroadbandPin;
};
struct MobileBroadbandPin : generate<MobileBroadbandPin> {};

// IMobileBroadbandPinOperationResult
struct IMobileBroadbandPinOperationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSuccessful(bool *value);
	virtual STDMETHODIMP _get_AttemptsRemaining(unsigned *value);
};
template<typename X> struct IMobileBroadbandPinOperationResult_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMobileBroadbandPinOperationResult_adaptor::AttemptsRemaining)->_get_AttemptsRemaining(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} AttemptsRemaining;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandPinOperationResult_adaptor::IsSuccessful)->_get_IsSuccessful(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSuccessful;
	};
	IMobileBroadbandPinOperationResult_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandPinOperationResult, X> : Windows::Networking::NetworkOperators::IMobileBroadbandPinOperationResult_adaptor<X> { typedef adapt IMobileBroadbandPinOperationResult; };
struct IMobileBroadbandPinOperationResult : IMobileBroadbandPinOperationResult_raw, generate<IMobileBroadbandPinOperationResult> {};

// MobileBroadbandPinOperationResult
template<typename X> struct statics<MobileBroadbandPinOperationResult, X> : X {
	typedef typename X::root_type MobileBroadbandPinOperationResult;
};
struct MobileBroadbandPinOperationResult : generate<MobileBroadbandPinOperationResult> {};

// IMobileBroadbandDeviceServiceDataSession
struct IMobileBroadbandDeviceServiceDataSession_raw : IInspectable {
	virtual STDMETHODIMP _WriteDataAsync(Storage::Streams::IBuffer* value, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _CloseSession();
	virtual STDMETHODIMP _add_DataReceived(Foundation::TypedEventHandler<MobileBroadbandDeviceServiceDataSession*, MobileBroadbandDeviceServiceDataReceivedEventArgs*>* eventHandler, Foundation::EventRegistrationToken *eventCookie);
	virtual STDMETHODIMP _remove_DataReceived(Foundation::EventRegistrationToken eventCookie);
};
template<typename X> struct IMobileBroadbandDeviceServiceDataSession_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MobileBroadbandDeviceServiceDataSession>, ptr<MobileBroadbandDeviceServiceDataReceivedEventArgs>>> eventHandler) { Foundation::EventRegistrationToken eventCookie; hrcheck(enc(&IMobileBroadbandDeviceServiceDataSession_adaptor::DataReceived)->_add_DataReceived(to_abi(eventHandler), &eventCookie)); return eventCookie; }
			void operator-=(const Foundation::EventRegistrationToken& eventCookie) { hrcheck(enc(&IMobileBroadbandDeviceServiceDataSession_adaptor::DataReceived)->_remove_DataReceived(eventCookie)); }
		} DataReceived;
	};
	ptr<Foundation::IAsyncAction> WriteDataAsync(pptr<Storage::Streams::IBuffer> value) { Foundation::IAsyncAction* asyncInfo; hrcheck(X::get()->_WriteDataAsync(value, &asyncInfo)); return from_abi(asyncInfo); }
	void CloseSession() { hrcheck(X::get()->_CloseSession()); }
	IMobileBroadbandDeviceServiceDataSession_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceServiceDataSession, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataSession_adaptor<X> { typedef adapt IMobileBroadbandDeviceServiceDataSession; };
struct IMobileBroadbandDeviceServiceDataSession : IMobileBroadbandDeviceServiceDataSession_raw, generate<IMobileBroadbandDeviceServiceDataSession> {};

// MobileBroadbandDeviceServiceDataSession
template<typename X> struct statics<MobileBroadbandDeviceServiceDataSession, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceServiceDataSession;
};
struct MobileBroadbandDeviceServiceDataSession : generate<MobileBroadbandDeviceServiceDataSession> {};

// IMobileBroadbandDeviceServiceCommandSession
struct IMobileBroadbandDeviceServiceCommandSession_raw : IInspectable {
	virtual STDMETHODIMP _SendQueryCommandAsync(unsigned commandId, Storage::Streams::IBuffer* data, Foundation::IAsyncOperation<MobileBroadbandDeviceServiceCommandResult*>* *asyncInfo);
	virtual STDMETHODIMP _SendSetCommandAsync(unsigned commandId, Storage::Streams::IBuffer* data, Foundation::IAsyncOperation<MobileBroadbandDeviceServiceCommandResult*>* *asyncInfo);
	virtual STDMETHODIMP _CloseSession();
};
template<typename X> struct IMobileBroadbandDeviceServiceCommandSession_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandDeviceServiceCommandResult>>> SendQueryCommandAsync(unsigned commandId, pptr<Storage::Streams::IBuffer> data) { Foundation::IAsyncOperation<MobileBroadbandDeviceServiceCommandResult*>* asyncInfo; hrcheck(X::get()->_SendQueryCommandAsync(commandId, data, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<Foundation::IAsyncOperation<ptr<MobileBroadbandDeviceServiceCommandResult>>> SendSetCommandAsync(unsigned commandId, pptr<Storage::Streams::IBuffer> data) { Foundation::IAsyncOperation<MobileBroadbandDeviceServiceCommandResult*>* asyncInfo; hrcheck(X::get()->_SendSetCommandAsync(commandId, data, &asyncInfo)); return from_abi(asyncInfo); }
	void CloseSession() { hrcheck(X::get()->_CloseSession()); }
};
template<typename X> struct adapt<IMobileBroadbandDeviceServiceCommandSession, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandSession_adaptor<X> { typedef adapt IMobileBroadbandDeviceServiceCommandSession; };
struct IMobileBroadbandDeviceServiceCommandSession : IMobileBroadbandDeviceServiceCommandSession_raw, generate<IMobileBroadbandDeviceServiceCommandSession> {};

// MobileBroadbandDeviceServiceCommandSession
template<typename X> struct statics<MobileBroadbandDeviceServiceCommandSession, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceServiceCommandSession;
};
struct MobileBroadbandDeviceServiceCommandSession : generate<MobileBroadbandDeviceServiceCommandSession> {};

// IMobileBroadbandDeviceServiceDataReceivedEventArgs
struct IMobileBroadbandDeviceServiceDataReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ReceivedData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IMobileBroadbandDeviceServiceDataReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMobileBroadbandDeviceServiceDataReceivedEventArgs_adaptor::ReceivedData)->_get_ReceivedData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} ReceivedData;
	};
	IMobileBroadbandDeviceServiceDataReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceServiceDataReceivedEventArgs, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceDataReceivedEventArgs_adaptor<X> { typedef adapt IMobileBroadbandDeviceServiceDataReceivedEventArgs; };
struct IMobileBroadbandDeviceServiceDataReceivedEventArgs : IMobileBroadbandDeviceServiceDataReceivedEventArgs_raw, generate<IMobileBroadbandDeviceServiceDataReceivedEventArgs> {};

// MobileBroadbandDeviceServiceDataReceivedEventArgs
template<typename X> struct statics<MobileBroadbandDeviceServiceDataReceivedEventArgs, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceServiceDataReceivedEventArgs;
};
struct MobileBroadbandDeviceServiceDataReceivedEventArgs : generate<MobileBroadbandDeviceServiceDataReceivedEventArgs> {};

// IMobileBroadbandDeviceServiceCommandResult
struct IMobileBroadbandDeviceServiceCommandResult_raw : IInspectable {
	virtual STDMETHODIMP _get_StatusCode(unsigned *value);
	virtual STDMETHODIMP _get_ResponseData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IMobileBroadbandDeviceServiceCommandResult_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMobileBroadbandDeviceServiceCommandResult_adaptor::ResponseData)->_get_ResponseData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} ResponseData;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMobileBroadbandDeviceServiceCommandResult_adaptor::StatusCode)->_get_StatusCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} StatusCode;
	};
	IMobileBroadbandDeviceServiceCommandResult_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceServiceCommandResult, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceCommandResult_adaptor<X> { typedef adapt IMobileBroadbandDeviceServiceCommandResult; };
struct IMobileBroadbandDeviceServiceCommandResult : IMobileBroadbandDeviceServiceCommandResult_raw, generate<IMobileBroadbandDeviceServiceCommandResult> {};

// MobileBroadbandDeviceServiceCommandResult
template<typename X> struct statics<MobileBroadbandDeviceServiceCommandResult, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceServiceCommandResult;
};
struct MobileBroadbandDeviceServiceCommandResult : generate<MobileBroadbandDeviceServiceCommandResult> {};

// IMobileBroadbandUiccAppsResult
struct IMobileBroadbandUiccAppsResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(MobileBroadbandUiccAppOperationStatus *value);
	virtual STDMETHODIMP _get_UiccApps(Foundation::Collections::IVectorView<MobileBroadbandUiccApp*>* *value);
};
template<typename X> struct IMobileBroadbandUiccAppsResult_adaptor : X {
	union {
		struct : property {
			MobileBroadbandUiccAppOperationStatus get() { MobileBroadbandUiccAppOperationStatus value; hrcheck(enc(&IMobileBroadbandUiccAppsResult_adaptor::Status)->_get_Status(&value)); return value; }
			MobileBroadbandUiccAppOperationStatus operator()() { return get(); }
			operator MobileBroadbandUiccAppOperationStatus () { return get(); }
		} Status;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> get() { Foundation::Collections::IVectorView<MobileBroadbandUiccApp*>* value; hrcheck(enc(&IMobileBroadbandUiccAppsResult_adaptor::UiccApps)->_get_UiccApps(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandUiccApp>>> operator->() { return get(); }
		} UiccApps;
	};
	IMobileBroadbandUiccAppsResult_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandUiccAppsResult, X> : Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppsResult_adaptor<X> { typedef adapt IMobileBroadbandUiccAppsResult; };
struct IMobileBroadbandUiccAppsResult : IMobileBroadbandUiccAppsResult_raw, generate<IMobileBroadbandUiccAppsResult> {};

// MobileBroadbandUiccAppsResult
template<typename X> struct statics<MobileBroadbandUiccAppsResult, X> : X {
	typedef typename X::root_type MobileBroadbandUiccAppsResult;
};
struct MobileBroadbandUiccAppsResult : generate<MobileBroadbandUiccAppsResult> {};

// IMobileBroadbandUiccAppRecordDetailsResult
struct IMobileBroadbandUiccAppRecordDetailsResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(MobileBroadbandUiccAppOperationStatus *value);
	virtual STDMETHODIMP _get_Kind(UiccAppRecordKind *value);
	virtual STDMETHODIMP _get_RecordCount(int *value);
	virtual STDMETHODIMP _get_RecordSize(int *value);
	virtual STDMETHODIMP _get_ReadAccessCondition(UiccAccessCondition *value);
	virtual STDMETHODIMP _get_WriteAccessCondition(UiccAccessCondition *value);
};
template<typename X> struct IMobileBroadbandUiccAppRecordDetailsResult_adaptor : X {
	union {
		struct : property {
			UiccAppRecordKind get() { UiccAppRecordKind value; hrcheck(enc(&IMobileBroadbandUiccAppRecordDetailsResult_adaptor::Kind)->_get_Kind(&value)); return value; }
			UiccAppRecordKind operator()() { return get(); }
			operator UiccAppRecordKind () { return get(); }
		} Kind;
		struct : property {
			UiccAccessCondition get() { UiccAccessCondition value; hrcheck(enc(&IMobileBroadbandUiccAppRecordDetailsResult_adaptor::ReadAccessCondition)->_get_ReadAccessCondition(&value)); return value; }
			UiccAccessCondition operator()() { return get(); }
			operator UiccAccessCondition () { return get(); }
		} ReadAccessCondition;
		struct : property {
			int get() { int value; hrcheck(enc(&IMobileBroadbandUiccAppRecordDetailsResult_adaptor::RecordCount)->_get_RecordCount(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RecordCount;
		struct : property {
			int get() { int value; hrcheck(enc(&IMobileBroadbandUiccAppRecordDetailsResult_adaptor::RecordSize)->_get_RecordSize(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RecordSize;
		struct : property {
			MobileBroadbandUiccAppOperationStatus get() { MobileBroadbandUiccAppOperationStatus value; hrcheck(enc(&IMobileBroadbandUiccAppRecordDetailsResult_adaptor::Status)->_get_Status(&value)); return value; }
			MobileBroadbandUiccAppOperationStatus operator()() { return get(); }
			operator MobileBroadbandUiccAppOperationStatus () { return get(); }
		} Status;
		struct : property {
			UiccAccessCondition get() { UiccAccessCondition value; hrcheck(enc(&IMobileBroadbandUiccAppRecordDetailsResult_adaptor::WriteAccessCondition)->_get_WriteAccessCondition(&value)); return value; }
			UiccAccessCondition operator()() { return get(); }
			operator UiccAccessCondition () { return get(); }
		} WriteAccessCondition;
	};
	IMobileBroadbandUiccAppRecordDetailsResult_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandUiccAppRecordDetailsResult, X> : Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppRecordDetailsResult_adaptor<X> { typedef adapt IMobileBroadbandUiccAppRecordDetailsResult; };
struct IMobileBroadbandUiccAppRecordDetailsResult : IMobileBroadbandUiccAppRecordDetailsResult_raw, generate<IMobileBroadbandUiccAppRecordDetailsResult> {};

// MobileBroadbandUiccAppRecordDetailsResult
template<typename X> struct statics<MobileBroadbandUiccAppRecordDetailsResult, X> : X {
	typedef typename X::root_type MobileBroadbandUiccAppRecordDetailsResult;
};
struct MobileBroadbandUiccAppRecordDetailsResult : generate<MobileBroadbandUiccAppRecordDetailsResult> {};

// IMobileBroadbandUiccAppReadRecordResult
struct IMobileBroadbandUiccAppReadRecordResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(MobileBroadbandUiccAppOperationStatus *value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IMobileBroadbandUiccAppReadRecordResult_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMobileBroadbandUiccAppReadRecordResult_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Data;
		struct : property {
			MobileBroadbandUiccAppOperationStatus get() { MobileBroadbandUiccAppOperationStatus value; hrcheck(enc(&IMobileBroadbandUiccAppReadRecordResult_adaptor::Status)->_get_Status(&value)); return value; }
			MobileBroadbandUiccAppOperationStatus operator()() { return get(); }
			operator MobileBroadbandUiccAppOperationStatus () { return get(); }
		} Status;
	};
	IMobileBroadbandUiccAppReadRecordResult_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandUiccAppReadRecordResult, X> : Windows::Networking::NetworkOperators::IMobileBroadbandUiccAppReadRecordResult_adaptor<X> { typedef adapt IMobileBroadbandUiccAppReadRecordResult; };
struct IMobileBroadbandUiccAppReadRecordResult : IMobileBroadbandUiccAppReadRecordResult_raw, generate<IMobileBroadbandUiccAppReadRecordResult> {};

// MobileBroadbandUiccAppReadRecordResult
template<typename X> struct statics<MobileBroadbandUiccAppReadRecordResult, X> : X {
	typedef typename X::root_type MobileBroadbandUiccAppReadRecordResult;
};
struct MobileBroadbandUiccAppReadRecordResult : generate<MobileBroadbandUiccAppReadRecordResult> {};

// IMobileBroadbandNetworkRegistrationStateChange
struct IMobileBroadbandNetworkRegistrationStateChange_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Network(MobileBroadbandNetwork* *value);
};
template<typename X> struct IMobileBroadbandNetworkRegistrationStateChange_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandNetworkRegistrationStateChange_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			ptr<MobileBroadbandNetwork> get() { MobileBroadbandNetwork* value; hrcheck(enc(&IMobileBroadbandNetworkRegistrationStateChange_adaptor::Network)->_get_Network(&value)); return from_abi(value); }
			ptr<MobileBroadbandNetwork> operator()() { return get(); }
			operator ptr<MobileBroadbandNetwork> () { return get(); }
			ptr<MobileBroadbandNetwork> operator->() { return get(); }
		} Network;
	};
	IMobileBroadbandNetworkRegistrationStateChange_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandNetworkRegistrationStateChange, X> : Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChange_adaptor<X> { typedef adapt IMobileBroadbandNetworkRegistrationStateChange; };
struct IMobileBroadbandNetworkRegistrationStateChange : IMobileBroadbandNetworkRegistrationStateChange_raw, generate<IMobileBroadbandNetworkRegistrationStateChange> {};

// MobileBroadbandNetworkRegistrationStateChange
template<typename X> struct statics<MobileBroadbandNetworkRegistrationStateChange, X> : X {
	typedef typename X::root_type MobileBroadbandNetworkRegistrationStateChange;
};
struct MobileBroadbandNetworkRegistrationStateChange : generate<MobileBroadbandNetworkRegistrationStateChange> {};

// IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails
struct IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkRegistrationStateChanges(Foundation::Collections::IVectorView<MobileBroadbandNetworkRegistrationStateChange*>* *value);
};
template<typename X> struct IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandNetworkRegistrationStateChange>>> get() { Foundation::Collections::IVectorView<MobileBroadbandNetworkRegistrationStateChange*>* value; hrcheck(enc(&IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails_adaptor::NetworkRegistrationStateChanges)->_get_NetworkRegistrationStateChanges(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandNetworkRegistrationStateChange>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandNetworkRegistrationStateChange>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandNetworkRegistrationStateChange>>> operator->() { return get(); }
		} NetworkRegistrationStateChanges;
	};
	IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails, X> : Windows::Networking::NetworkOperators::IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails_adaptor<X> { typedef adapt IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails; };
struct IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails : IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails_raw, generate<IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails> {};

// MobileBroadbandNetworkRegistrationStateChangeTriggerDetails
template<typename X> struct statics<MobileBroadbandNetworkRegistrationStateChangeTriggerDetails, X> : X {
	typedef typename X::root_type MobileBroadbandNetworkRegistrationStateChangeTriggerDetails;
};
struct MobileBroadbandNetworkRegistrationStateChangeTriggerDetails : generate<MobileBroadbandNetworkRegistrationStateChangeTriggerDetails> {};

// IMobileBroadbandRadioStateChange
struct IMobileBroadbandRadioStateChange_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_RadioState(MobileBroadbandRadioState *value);
};
template<typename X> struct IMobileBroadbandRadioStateChange_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandRadioStateChange_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			MobileBroadbandRadioState get() { MobileBroadbandRadioState value; hrcheck(enc(&IMobileBroadbandRadioStateChange_adaptor::RadioState)->_get_RadioState(&value)); return value; }
			MobileBroadbandRadioState operator()() { return get(); }
			operator MobileBroadbandRadioState () { return get(); }
		} RadioState;
	};
	IMobileBroadbandRadioStateChange_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandRadioStateChange, X> : Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChange_adaptor<X> { typedef adapt IMobileBroadbandRadioStateChange; };
struct IMobileBroadbandRadioStateChange : IMobileBroadbandRadioStateChange_raw, generate<IMobileBroadbandRadioStateChange> {};

// MobileBroadbandRadioStateChange
template<typename X> struct statics<MobileBroadbandRadioStateChange, X> : X {
	typedef typename X::root_type MobileBroadbandRadioStateChange;
};
struct MobileBroadbandRadioStateChange : generate<MobileBroadbandRadioStateChange> {};

// IMobileBroadbandRadioStateChangeTriggerDetails
struct IMobileBroadbandRadioStateChangeTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_RadioStateChanges(Foundation::Collections::IVectorView<MobileBroadbandRadioStateChange*>* *value);
};
template<typename X> struct IMobileBroadbandRadioStateChangeTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandRadioStateChange>>> get() { Foundation::Collections::IVectorView<MobileBroadbandRadioStateChange*>* value; hrcheck(enc(&IMobileBroadbandRadioStateChangeTriggerDetails_adaptor::RadioStateChanges)->_get_RadioStateChanges(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandRadioStateChange>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandRadioStateChange>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandRadioStateChange>>> operator->() { return get(); }
		} RadioStateChanges;
	};
	IMobileBroadbandRadioStateChangeTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandRadioStateChangeTriggerDetails, X> : Windows::Networking::NetworkOperators::IMobileBroadbandRadioStateChangeTriggerDetails_adaptor<X> { typedef adapt IMobileBroadbandRadioStateChangeTriggerDetails; };
struct IMobileBroadbandRadioStateChangeTriggerDetails : IMobileBroadbandRadioStateChangeTriggerDetails_raw, generate<IMobileBroadbandRadioStateChangeTriggerDetails> {};

// MobileBroadbandRadioStateChangeTriggerDetails
template<typename X> struct statics<MobileBroadbandRadioStateChangeTriggerDetails, X> : X {
	typedef typename X::root_type MobileBroadbandRadioStateChangeTriggerDetails;
};
struct MobileBroadbandRadioStateChangeTriggerDetails : generate<MobileBroadbandRadioStateChangeTriggerDetails> {};

// IMobileBroadbandPinLockStateChange
struct IMobileBroadbandPinLockStateChange_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_PinType(MobileBroadbandPinType *value);
	virtual STDMETHODIMP _get_PinLockState(MobileBroadbandPinLockState *value);
};
template<typename X> struct IMobileBroadbandPinLockStateChange_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandPinLockStateChange_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			MobileBroadbandPinLockState get() { MobileBroadbandPinLockState value; hrcheck(enc(&IMobileBroadbandPinLockStateChange_adaptor::PinLockState)->_get_PinLockState(&value)); return value; }
			MobileBroadbandPinLockState operator()() { return get(); }
			operator MobileBroadbandPinLockState () { return get(); }
		} PinLockState;
		struct : property {
			MobileBroadbandPinType get() { MobileBroadbandPinType value; hrcheck(enc(&IMobileBroadbandPinLockStateChange_adaptor::PinType)->_get_PinType(&value)); return value; }
			MobileBroadbandPinType operator()() { return get(); }
			operator MobileBroadbandPinType () { return get(); }
		} PinType;
	};
	IMobileBroadbandPinLockStateChange_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandPinLockStateChange, X> : Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChange_adaptor<X> { typedef adapt IMobileBroadbandPinLockStateChange; };
struct IMobileBroadbandPinLockStateChange : IMobileBroadbandPinLockStateChange_raw, generate<IMobileBroadbandPinLockStateChange> {};

// MobileBroadbandPinLockStateChange
template<typename X> struct statics<MobileBroadbandPinLockStateChange, X> : X {
	typedef typename X::root_type MobileBroadbandPinLockStateChange;
};
struct MobileBroadbandPinLockStateChange : generate<MobileBroadbandPinLockStateChange> {};

// IMobileBroadbandPinLockStateChangeTriggerDetails
struct IMobileBroadbandPinLockStateChangeTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_PinLockStateChanges(Foundation::Collections::IVectorView<MobileBroadbandPinLockStateChange*>* *value);
};
template<typename X> struct IMobileBroadbandPinLockStateChangeTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandPinLockStateChange>>> get() { Foundation::Collections::IVectorView<MobileBroadbandPinLockStateChange*>* value; hrcheck(enc(&IMobileBroadbandPinLockStateChangeTriggerDetails_adaptor::PinLockStateChanges)->_get_PinLockStateChanges(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandPinLockStateChange>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandPinLockStateChange>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MobileBroadbandPinLockStateChange>>> operator->() { return get(); }
		} PinLockStateChanges;
	};
	IMobileBroadbandPinLockStateChangeTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandPinLockStateChangeTriggerDetails, X> : Windows::Networking::NetworkOperators::IMobileBroadbandPinLockStateChangeTriggerDetails_adaptor<X> { typedef adapt IMobileBroadbandPinLockStateChangeTriggerDetails; };
struct IMobileBroadbandPinLockStateChangeTriggerDetails : IMobileBroadbandPinLockStateChangeTriggerDetails_raw, generate<IMobileBroadbandPinLockStateChangeTriggerDetails> {};

// MobileBroadbandPinLockStateChangeTriggerDetails
template<typename X> struct statics<MobileBroadbandPinLockStateChangeTriggerDetails, X> : X {
	typedef typename X::root_type MobileBroadbandPinLockStateChangeTriggerDetails;
};
struct MobileBroadbandPinLockStateChangeTriggerDetails : generate<MobileBroadbandPinLockStateChangeTriggerDetails> {};

// IMobileBroadbandDeviceServiceTriggerDetails
struct IMobileBroadbandDeviceServiceTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceServiceId(Platform::Guid *value);
	virtual STDMETHODIMP _get_ReceivedData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IMobileBroadbandDeviceServiceTriggerDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandDeviceServiceTriggerDetails_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IMobileBroadbandDeviceServiceTriggerDetails_adaptor::DeviceServiceId)->_get_DeviceServiceId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} DeviceServiceId;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMobileBroadbandDeviceServiceTriggerDetails_adaptor::ReceivedData)->_get_ReceivedData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} ReceivedData;
	};
	IMobileBroadbandDeviceServiceTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandDeviceServiceTriggerDetails, X> : Windows::Networking::NetworkOperators::IMobileBroadbandDeviceServiceTriggerDetails_adaptor<X> { typedef adapt IMobileBroadbandDeviceServiceTriggerDetails; };
struct IMobileBroadbandDeviceServiceTriggerDetails : IMobileBroadbandDeviceServiceTriggerDetails_raw, generate<IMobileBroadbandDeviceServiceTriggerDetails> {};

// MobileBroadbandDeviceServiceTriggerDetails
template<typename X> struct statics<MobileBroadbandDeviceServiceTriggerDetails, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceServiceTriggerDetails;
};
struct MobileBroadbandDeviceServiceTriggerDetails : generate<MobileBroadbandDeviceServiceTriggerDetails> {};

// IKnownCSimFilePathsStatics
struct IKnownCSimFilePathsStatics : IInspectable {
	virtual STDMETHODIMP _get_EFSpn(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid1(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid2(Foundation::Collections::IVectorView<unsigned>* *value);
};

// KnownCSimFilePaths
template<typename> struct KnownCSimFilePaths_statics {
	static struct _EFSpn : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownCSimFilePaths, IKnownCSimFilePathsStatics>()->_get_EFSpn(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} EFSpn;
	static struct _Gid1 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownCSimFilePaths, IKnownCSimFilePathsStatics>()->_get_Gid1(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid1;
	static struct _Gid2 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownCSimFilePaths, IKnownCSimFilePathsStatics>()->_get_Gid2(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid2;
};
template<typename X> typename KnownCSimFilePaths_statics<X>::_EFSpn KnownCSimFilePaths_statics<X>::EFSpn;
template<typename X> typename KnownCSimFilePaths_statics<X>::_Gid1 KnownCSimFilePaths_statics<X>::Gid1;
template<typename X> typename KnownCSimFilePaths_statics<X>::_Gid2 KnownCSimFilePaths_statics<X>::Gid2;

template<typename X> struct statics<KnownCSimFilePaths, X> : X, Windows::Networking::NetworkOperators::KnownCSimFilePaths_statics<void> {
	typedef typename X::root_type KnownCSimFilePaths;
};
struct KnownCSimFilePaths : generate<KnownCSimFilePaths> {};

// IKnownRuimFilePathsStatics
struct IKnownRuimFilePathsStatics : IInspectable {
	virtual STDMETHODIMP _get_EFSpn(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid1(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid2(Foundation::Collections::IVectorView<unsigned>* *value);
};

// KnownRuimFilePaths
template<typename> struct KnownRuimFilePaths_statics {
	static struct _EFSpn : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownRuimFilePaths, IKnownRuimFilePathsStatics>()->_get_EFSpn(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} EFSpn;
	static struct _Gid1 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownRuimFilePaths, IKnownRuimFilePathsStatics>()->_get_Gid1(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid1;
	static struct _Gid2 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownRuimFilePaths, IKnownRuimFilePathsStatics>()->_get_Gid2(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid2;
};
template<typename X> typename KnownRuimFilePaths_statics<X>::_EFSpn KnownRuimFilePaths_statics<X>::EFSpn;
template<typename X> typename KnownRuimFilePaths_statics<X>::_Gid1 KnownRuimFilePaths_statics<X>::Gid1;
template<typename X> typename KnownRuimFilePaths_statics<X>::_Gid2 KnownRuimFilePaths_statics<X>::Gid2;

template<typename X> struct statics<KnownRuimFilePaths, X> : X, Windows::Networking::NetworkOperators::KnownRuimFilePaths_statics<void> {
	typedef typename X::root_type KnownRuimFilePaths;
};
struct KnownRuimFilePaths : generate<KnownRuimFilePaths> {};

// IKnownSimFilePathsStatics
struct IKnownSimFilePathsStatics : IInspectable {
	virtual STDMETHODIMP _get_EFOns(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_EFSpn(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid1(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid2(Foundation::Collections::IVectorView<unsigned>* *value);
};

// KnownSimFilePaths
template<typename> struct KnownSimFilePaths_statics {
	static struct _EFOns : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownSimFilePaths, IKnownSimFilePathsStatics>()->_get_EFOns(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} EFOns;
	static struct _EFSpn : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownSimFilePaths, IKnownSimFilePathsStatics>()->_get_EFSpn(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} EFSpn;
	static struct _Gid1 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownSimFilePaths, IKnownSimFilePathsStatics>()->_get_Gid1(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid1;
	static struct _Gid2 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownSimFilePaths, IKnownSimFilePathsStatics>()->_get_Gid2(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid2;
};
template<typename X> typename KnownSimFilePaths_statics<X>::_EFOns KnownSimFilePaths_statics<X>::EFOns;
template<typename X> typename KnownSimFilePaths_statics<X>::_EFSpn KnownSimFilePaths_statics<X>::EFSpn;
template<typename X> typename KnownSimFilePaths_statics<X>::_Gid1 KnownSimFilePaths_statics<X>::Gid1;
template<typename X> typename KnownSimFilePaths_statics<X>::_Gid2 KnownSimFilePaths_statics<X>::Gid2;

template<typename X> struct statics<KnownSimFilePaths, X> : X, Windows::Networking::NetworkOperators::KnownSimFilePaths_statics<void> {
	typedef typename X::root_type KnownSimFilePaths;
};
struct KnownSimFilePaths : generate<KnownSimFilePaths> {};

// IKnownUSimFilePathsStatics
struct IKnownUSimFilePathsStatics : IInspectable {
	virtual STDMETHODIMP _get_EFSpn(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_EFOpl(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_EFPnn(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid1(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_Gid2(Foundation::Collections::IVectorView<unsigned>* *value);
};

// KnownUSimFilePaths
template<typename> struct KnownUSimFilePaths_statics {
	static struct _EFOpl : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>()->_get_EFOpl(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} EFOpl;
	static struct _EFPnn : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>()->_get_EFPnn(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} EFPnn;
	static struct _EFSpn : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>()->_get_EFSpn(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} EFSpn;
	static struct _Gid1 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>()->_get_Gid1(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid1;
	static struct _Gid2 : property {
		ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(get_activation_factory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>()->_get_Gid2(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
	} Gid2;
};
template<typename X> typename KnownUSimFilePaths_statics<X>::_EFOpl KnownUSimFilePaths_statics<X>::EFOpl;
template<typename X> typename KnownUSimFilePaths_statics<X>::_EFPnn KnownUSimFilePaths_statics<X>::EFPnn;
template<typename X> typename KnownUSimFilePaths_statics<X>::_EFSpn KnownUSimFilePaths_statics<X>::EFSpn;
template<typename X> typename KnownUSimFilePaths_statics<X>::_Gid1 KnownUSimFilePaths_statics<X>::Gid1;
template<typename X> typename KnownUSimFilePaths_statics<X>::_Gid2 KnownUSimFilePaths_statics<X>::Gid2;

template<typename X> struct statics<KnownUSimFilePaths, X> : X, Windows::Networking::NetworkOperators::KnownUSimFilePaths_statics<void> {
	typedef typename X::root_type KnownUSimFilePaths;
};
struct KnownUSimFilePaths : generate<KnownUSimFilePaths> {};

// IMobileBroadbandCellCdma
struct IMobileBroadbandCellCdma_raw : IInspectable {
	virtual STDMETHODIMP _get_BaseStationId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_BaseStationPNCode(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_BaseStationLatitude(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_BaseStationLongitude(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_BaseStationLastBroadcastGpsTime(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_NetworkId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_PilotSignalStrengthInDB(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_SystemId(Foundation::IReference<int>* *value);
};
template<typename X> struct IMobileBroadbandCellCdma_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::BaseStationId)->_get_BaseStationId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} BaseStationId;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::BaseStationLastBroadcastGpsTime)->_get_BaseStationLastBroadcastGpsTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} BaseStationLastBroadcastGpsTime;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::BaseStationLatitude)->_get_BaseStationLatitude(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} BaseStationLatitude;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::BaseStationLongitude)->_get_BaseStationLongitude(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} BaseStationLongitude;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::BaseStationPNCode)->_get_BaseStationPNCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} BaseStationPNCode;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::NetworkId)->_get_NetworkId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} NetworkId;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::PilotSignalStrengthInDB)->_get_PilotSignalStrengthInDB(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} PilotSignalStrengthInDB;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellCdma_adaptor::SystemId)->_get_SystemId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} SystemId;
	};
	IMobileBroadbandCellCdma_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandCellCdma, X> : Windows::Networking::NetworkOperators::IMobileBroadbandCellCdma_adaptor<X> { typedef adapt IMobileBroadbandCellCdma; };
struct IMobileBroadbandCellCdma : IMobileBroadbandCellCdma_raw, generate<IMobileBroadbandCellCdma> {};

// MobileBroadbandCellCdma
template<typename X> struct statics<MobileBroadbandCellCdma, X> : X {
	typedef typename X::root_type MobileBroadbandCellCdma;
};
struct MobileBroadbandCellCdma : generate<MobileBroadbandCellCdma> {};

// IMobileBroadbandCellGsm
struct IMobileBroadbandCellGsm_raw : IInspectable {
	virtual STDMETHODIMP _get_BaseStationId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_CellId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ChannelNumber(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_LocationAreaCode(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_ReceivedSignalStrengthInDBm(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_TimingAdvanceInBitPeriods(Foundation::IReference<int>* *value);
};
template<typename X> struct IMobileBroadbandCellGsm_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellGsm_adaptor::BaseStationId)->_get_BaseStationId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} BaseStationId;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellGsm_adaptor::CellId)->_get_CellId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} CellId;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellGsm_adaptor::ChannelNumber)->_get_ChannelNumber(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} ChannelNumber;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellGsm_adaptor::LocationAreaCode)->_get_LocationAreaCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} LocationAreaCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandCellGsm_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderId;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellGsm_adaptor::ReceivedSignalStrengthInDBm)->_get_ReceivedSignalStrengthInDBm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} ReceivedSignalStrengthInDBm;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellGsm_adaptor::TimingAdvanceInBitPeriods)->_get_TimingAdvanceInBitPeriods(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} TimingAdvanceInBitPeriods;
	};
	IMobileBroadbandCellGsm_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandCellGsm, X> : Windows::Networking::NetworkOperators::IMobileBroadbandCellGsm_adaptor<X> { typedef adapt IMobileBroadbandCellGsm; };
struct IMobileBroadbandCellGsm : IMobileBroadbandCellGsm_raw, generate<IMobileBroadbandCellGsm> {};

// MobileBroadbandCellGsm
template<typename X> struct statics<MobileBroadbandCellGsm, X> : X {
	typedef typename X::root_type MobileBroadbandCellGsm;
};
struct MobileBroadbandCellGsm : generate<MobileBroadbandCellGsm> {};

// IMobileBroadbandCellLte
struct IMobileBroadbandCellLte_raw : IInspectable {
	virtual STDMETHODIMP _get_CellId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ChannelNumber(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_PhysicalCellId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_ReferenceSignalReceivedPowerInDBm(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_ReferenceSignalReceivedQualityInDBm(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_TimingAdvanceInBitPeriods(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_TrackingAreaCode(Foundation::IReference<int>* *value);
};
template<typename X> struct IMobileBroadbandCellLte_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::CellId)->_get_CellId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} CellId;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::ChannelNumber)->_get_ChannelNumber(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} ChannelNumber;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::PhysicalCellId)->_get_PhysicalCellId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} PhysicalCellId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderId;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::ReferenceSignalReceivedPowerInDBm)->_get_ReferenceSignalReceivedPowerInDBm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} ReferenceSignalReceivedPowerInDBm;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::ReferenceSignalReceivedQualityInDBm)->_get_ReferenceSignalReceivedQualityInDBm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} ReferenceSignalReceivedQualityInDBm;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::TimingAdvanceInBitPeriods)->_get_TimingAdvanceInBitPeriods(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} TimingAdvanceInBitPeriods;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellLte_adaptor::TrackingAreaCode)->_get_TrackingAreaCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} TrackingAreaCode;
	};
	IMobileBroadbandCellLte_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandCellLte, X> : Windows::Networking::NetworkOperators::IMobileBroadbandCellLte_adaptor<X> { typedef adapt IMobileBroadbandCellLte; };
struct IMobileBroadbandCellLte : IMobileBroadbandCellLte_raw, generate<IMobileBroadbandCellLte> {};

// MobileBroadbandCellLte
template<typename X> struct statics<MobileBroadbandCellLte, X> : X {
	typedef typename X::root_type MobileBroadbandCellLte;
};
struct MobileBroadbandCellLte : generate<MobileBroadbandCellLte> {};

// IMobileBroadbandCellTdscdma
struct IMobileBroadbandCellTdscdma_raw : IInspectable {
	virtual STDMETHODIMP _get_CellId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_CellParameterId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ChannelNumber(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_LocationAreaCode(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_PathLossInDB(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_ReceivedSignalCodePowerInDBm(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_TimingAdvanceInBitPeriods(Foundation::IReference<int>* *value);
};
template<typename X> struct IMobileBroadbandCellTdscdma_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::CellId)->_get_CellId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} CellId;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::CellParameterId)->_get_CellParameterId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} CellParameterId;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::ChannelNumber)->_get_ChannelNumber(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} ChannelNumber;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::LocationAreaCode)->_get_LocationAreaCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} LocationAreaCode;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::PathLossInDB)->_get_PathLossInDB(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} PathLossInDB;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderId;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::ReceivedSignalCodePowerInDBm)->_get_ReceivedSignalCodePowerInDBm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} ReceivedSignalCodePowerInDBm;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellTdscdma_adaptor::TimingAdvanceInBitPeriods)->_get_TimingAdvanceInBitPeriods(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} TimingAdvanceInBitPeriods;
	};
	IMobileBroadbandCellTdscdma_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandCellTdscdma, X> : Windows::Networking::NetworkOperators::IMobileBroadbandCellTdscdma_adaptor<X> { typedef adapt IMobileBroadbandCellTdscdma; };
struct IMobileBroadbandCellTdscdma : IMobileBroadbandCellTdscdma_raw, generate<IMobileBroadbandCellTdscdma> {};

// MobileBroadbandCellTdscdma
template<typename X> struct statics<MobileBroadbandCellTdscdma, X> : X {
	typedef typename X::root_type MobileBroadbandCellTdscdma;
};
struct MobileBroadbandCellTdscdma : generate<MobileBroadbandCellTdscdma> {};

// IMobileBroadbandCellUmts
struct IMobileBroadbandCellUmts_raw : IInspectable {
	virtual STDMETHODIMP _get_CellId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ChannelNumber(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_LocationAreaCode(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_PathLossInDB(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_PrimaryScramblingCode(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_ReceivedSignalCodePowerInDBm(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _get_SignalToNoiseRatioInDB(Foundation::IReference<double>* *value);
};
template<typename X> struct IMobileBroadbandCellUmts_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::CellId)->_get_CellId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} CellId;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::ChannelNumber)->_get_ChannelNumber(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} ChannelNumber;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::LocationAreaCode)->_get_LocationAreaCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} LocationAreaCode;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::PathLossInDB)->_get_PathLossInDB(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} PathLossInDB;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::PrimaryScramblingCode)->_get_PrimaryScramblingCode(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} PrimaryScramblingCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderId;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::ReceivedSignalCodePowerInDBm)->_get_ReceivedSignalCodePowerInDBm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} ReceivedSignalCodePowerInDBm;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IMobileBroadbandCellUmts_adaptor::SignalToNoiseRatioInDB)->_get_SignalToNoiseRatioInDB(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} SignalToNoiseRatioInDB;
	};
	IMobileBroadbandCellUmts_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandCellUmts, X> : Windows::Networking::NetworkOperators::IMobileBroadbandCellUmts_adaptor<X> { typedef adapt IMobileBroadbandCellUmts; };
struct IMobileBroadbandCellUmts : IMobileBroadbandCellUmts_raw, generate<IMobileBroadbandCellUmts> {};

// MobileBroadbandCellUmts
template<typename X> struct statics<MobileBroadbandCellUmts, X> : X {
	typedef typename X::root_type MobileBroadbandCellUmts;
};
struct MobileBroadbandCellUmts : generate<MobileBroadbandCellUmts> {};

// IMobileBroadbandModemIsolationFactory
struct IMobileBroadbandModemIsolationFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING modemDeviceId, HSTRING ruleGroupId, MobileBroadbandModemIsolation* *result);
};

// IMobileBroadbandModemIsolation
struct IMobileBroadbandModemIsolation_raw : IInspectable {
	virtual STDMETHODIMP _AddAllowedHost(HostName* host);
	virtual STDMETHODIMP _AddAllowedHostRange(HostName* first, HostName* last);
	virtual STDMETHODIMP _ApplyConfigurationAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _ClearConfigurationAsync(Foundation::IAsyncAction* *operation);
};
template<typename X> struct IMobileBroadbandModemIsolation_adaptor : X {
	void AddAllowedHost(pptr<HostName> host) { hrcheck(X::get()->_AddAllowedHost(host)); }
	void AddAllowedHostRange(pptr<HostName> first, pptr<HostName> last) { hrcheck(X::get()->_AddAllowedHostRange(first, last)); }
	ptr<Foundation::IAsyncAction> ApplyConfigurationAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ApplyConfigurationAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ClearConfigurationAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_ClearConfigurationAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IMobileBroadbandModemIsolation, X> : Windows::Networking::NetworkOperators::IMobileBroadbandModemIsolation_adaptor<X> { typedef adapt IMobileBroadbandModemIsolation; };
struct IMobileBroadbandModemIsolation : IMobileBroadbandModemIsolation_raw, generate<IMobileBroadbandModemIsolation> {};

// MobileBroadbandModemIsolation
template<typename> struct MobileBroadbandModemIsolation_statics {
	static MobileBroadbandModemIsolation *activate(hstring_ref modemDeviceId, hstring_ref ruleGroupId) { MobileBroadbandModemIsolation *result; hrcheck(get_activation_factory<MobileBroadbandModemIsolation, IMobileBroadbandModemIsolationFactory>()->_Create(modemDeviceId, ruleGroupId, &result)); return result; }
};

template<typename X> struct statics<MobileBroadbandModemIsolation, X> : X, Windows::Networking::NetworkOperators::MobileBroadbandModemIsolation_statics<void> {
	using Windows::Networking::NetworkOperators::MobileBroadbandModemIsolation_statics<void>::activate;
	typedef typename X::root_type MobileBroadbandModemIsolation;
};
struct MobileBroadbandModemIsolation : generate<MobileBroadbandModemIsolation> {};

// IMobileBroadbandPcoDataChangeTriggerDetails
struct IMobileBroadbandPcoDataChangeTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_UpdatedData(MobileBroadbandPco* *result);
};
template<typename X> struct IMobileBroadbandPcoDataChangeTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<MobileBroadbandPco> get() { MobileBroadbandPco* result; hrcheck(enc(&IMobileBroadbandPcoDataChangeTriggerDetails_adaptor::UpdatedData)->_get_UpdatedData(&result)); return from_abi(result); }
			ptr<MobileBroadbandPco> operator()() { return get(); }
			operator ptr<MobileBroadbandPco> () { return get(); }
			ptr<MobileBroadbandPco> operator->() { return get(); }
		} UpdatedData;
	};
	IMobileBroadbandPcoDataChangeTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandPcoDataChangeTriggerDetails, X> : Windows::Networking::NetworkOperators::IMobileBroadbandPcoDataChangeTriggerDetails_adaptor<X> { typedef adapt IMobileBroadbandPcoDataChangeTriggerDetails; };
struct IMobileBroadbandPcoDataChangeTriggerDetails : IMobileBroadbandPcoDataChangeTriggerDetails_raw, generate<IMobileBroadbandPcoDataChangeTriggerDetails> {};

// MobileBroadbandPcoDataChangeTriggerDetails
template<typename X> struct statics<MobileBroadbandPcoDataChangeTriggerDetails, X> : X {
	typedef typename X::root_type MobileBroadbandPcoDataChangeTriggerDetails;
};
struct MobileBroadbandPcoDataChangeTriggerDetails : generate<MobileBroadbandPcoDataChangeTriggerDetails> {};

// IMobileBroadbandAntennaSarFactory
struct IMobileBroadbandAntennaSarFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithIndex(int antennaIndex, int sarBackoffIndex, MobileBroadbandAntennaSar* *antennaSar);
};

// IMobileBroadbandAntennaSar
struct IMobileBroadbandAntennaSar_raw : IInspectable {
	virtual STDMETHODIMP _get_AntennaIndex(int *value);
	virtual STDMETHODIMP _get_SarBackoffIndex(int *value);
};
template<typename X> struct IMobileBroadbandAntennaSar_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IMobileBroadbandAntennaSar_adaptor::AntennaIndex)->_get_AntennaIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} AntennaIndex;
		struct : property {
			int get() { int value; hrcheck(enc(&IMobileBroadbandAntennaSar_adaptor::SarBackoffIndex)->_get_SarBackoffIndex(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} SarBackoffIndex;
	};
	IMobileBroadbandAntennaSar_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandAntennaSar, X> : Windows::Networking::NetworkOperators::IMobileBroadbandAntennaSar_adaptor<X> { typedef adapt IMobileBroadbandAntennaSar; };
struct IMobileBroadbandAntennaSar : IMobileBroadbandAntennaSar_raw, generate<IMobileBroadbandAntennaSar> {};

// MobileBroadbandAntennaSar
template<typename> struct MobileBroadbandAntennaSar_statics {
	static MobileBroadbandAntennaSar *activate(int antennaIndex, int sarBackoffIndex) { MobileBroadbandAntennaSar *antennaSar; hrcheck(get_activation_factory<MobileBroadbandAntennaSar, IMobileBroadbandAntennaSarFactory>()->_CreateWithIndex(antennaIndex, sarBackoffIndex, &antennaSar)); return antennaSar; }
};

template<typename X> struct statics<MobileBroadbandAntennaSar, X> : X, Windows::Networking::NetworkOperators::MobileBroadbandAntennaSar_statics<void> {
	using Windows::Networking::NetworkOperators::MobileBroadbandAntennaSar_statics<void>::activate;
	typedef typename X::root_type MobileBroadbandAntennaSar;
};
struct MobileBroadbandAntennaSar : generate<MobileBroadbandAntennaSar> {};

// IMobileBroadbandTransmissionStateChangedEventArgs
struct IMobileBroadbandTransmissionStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTransmitting(bool *value);
};
template<typename X> struct IMobileBroadbandTransmissionStateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMobileBroadbandTransmissionStateChangedEventArgs_adaptor::IsTransmitting)->_get_IsTransmitting(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTransmitting;
	};
	IMobileBroadbandTransmissionStateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMobileBroadbandTransmissionStateChangedEventArgs, X> : Windows::Networking::NetworkOperators::IMobileBroadbandTransmissionStateChangedEventArgs_adaptor<X> { typedef adapt IMobileBroadbandTransmissionStateChangedEventArgs; };
struct IMobileBroadbandTransmissionStateChangedEventArgs : IMobileBroadbandTransmissionStateChangedEventArgs_raw, generate<IMobileBroadbandTransmissionStateChangedEventArgs> {};

// MobileBroadbandTransmissionStateChangedEventArgs
template<typename X> struct statics<MobileBroadbandTransmissionStateChangedEventArgs, X> : X {
	typedef typename X::root_type MobileBroadbandTransmissionStateChangedEventArgs;
};
struct MobileBroadbandTransmissionStateChangedEventArgs : generate<MobileBroadbandTransmissionStateChangedEventArgs> {};

// IESim
struct IESim_raw : IInspectable {
	virtual STDMETHODIMP _get_AvailableMemoryInBytes(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_Eid(HSTRING *value);
	virtual STDMETHODIMP _get_FirmwareVersion(HSTRING *value);
	virtual STDMETHODIMP _get_MobileBroadbandModemDeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Policy(ESimPolicy* *value);
	virtual STDMETHODIMP _get_State(ESimState *value);
	virtual STDMETHODIMP _GetProfiles(Foundation::Collections::IVectorView<ESimProfile*>* *value);
	virtual STDMETHODIMP _DeleteProfileAsync(HSTRING profileId, Foundation::IAsyncOperation<ESimOperationResult*>* *operation);
	virtual STDMETHODIMP _DownloadProfileMetadataAsync(HSTRING activationCode, Foundation::IAsyncOperation<ESimDownloadProfileMetadataResult*>* *operation);
	virtual STDMETHODIMP _ResetAsync(Foundation::IAsyncOperation<ESimOperationResult*>* *operation);
	virtual STDMETHODIMP _add_ProfileChanged(Foundation::TypedEventHandler<ESim*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ProfileChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IESim_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IESim_adaptor::AvailableMemoryInBytes)->_get_AvailableMemoryInBytes(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} AvailableMemoryInBytes;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESim_adaptor::Eid)->_get_Eid(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Eid;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESim_adaptor::FirmwareVersion)->_get_FirmwareVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FirmwareVersion;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESim_adaptor::MobileBroadbandModemDeviceId)->_get_MobileBroadbandModemDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MobileBroadbandModemDeviceId;
		struct : property {
			ptr<ESimPolicy> get() { ESimPolicy* value; hrcheck(enc(&IESim_adaptor::Policy)->_get_Policy(&value)); return from_abi(value); }
			ptr<ESimPolicy> operator()() { return get(); }
			operator ptr<ESimPolicy> () { return get(); }
			ptr<ESimPolicy> operator->() { return get(); }
		} Policy;
		struct : property {
			ESimState get() { ESimState value; hrcheck(enc(&IESim_adaptor::State)->_get_State(&value)); return value; }
			ESimState operator()() { return get(); }
			operator ESimState () { return get(); }
		} State;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ESim>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IESim_adaptor::ProfileChanged)->_add_ProfileChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IESim_adaptor::ProfileChanged)->_remove_ProfileChanged(token)); }
		} ProfileChanged;
	};
	ptr<Foundation::Collections::IVectorView<ptr<ESimProfile>>> GetProfiles() { Foundation::Collections::IVectorView<ESimProfile*>* value; hrcheck(X::get()->_GetProfiles(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<ESimOperationResult>>> DeleteProfileAsync(hstring_ref profileId) { Foundation::IAsyncOperation<ESimOperationResult*>* operation; hrcheck(X::get()->_DeleteProfileAsync(profileId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ESimDownloadProfileMetadataResult>>> DownloadProfileMetadataAsync(hstring_ref activationCode) { Foundation::IAsyncOperation<ESimDownloadProfileMetadataResult*>* operation; hrcheck(X::get()->_DownloadProfileMetadataAsync(activationCode, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ESimOperationResult>>> ResetAsync() { Foundation::IAsyncOperation<ESimOperationResult*>* operation; hrcheck(X::get()->_ResetAsync(&operation)); return from_abi(operation); }
	IESim_adaptor() {}
};
template<typename X> struct adapt<IESim, X> : Windows::Networking::NetworkOperators::IESim_adaptor<X> { typedef adapt IESim; };
struct IESim : IESim_raw, generate<IESim> {};

// IESimPolicy
struct IESimPolicy_raw : IInspectable {
	virtual STDMETHODIMP _get_ShouldEnableManagingUi(bool *value);
};
template<typename X> struct IESimPolicy_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IESimPolicy_adaptor::ShouldEnableManagingUi)->_get_ShouldEnableManagingUi(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ShouldEnableManagingUi;
	};
	IESimPolicy_adaptor() {}
};
template<typename X> struct adapt<IESimPolicy, X> : Windows::Networking::NetworkOperators::IESimPolicy_adaptor<X> { typedef adapt IESimPolicy; };
struct IESimPolicy : IESimPolicy_raw, generate<IESimPolicy> {};

// ESimPolicy
template<typename X> struct statics<ESimPolicy, X> : X {
	typedef typename X::root_type ESimPolicy;
};
struct ESimPolicy : generate<ESimPolicy> {};

// IESimProfile
struct IESimProfile_raw : IInspectable {
	virtual STDMETHODIMP _get_Class(ESimProfileClass *value);
	virtual STDMETHODIMP _get_Nickname(HSTRING *value);
	virtual STDMETHODIMP _get_Policy(ESimProfilePolicy* *value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_ProviderIcon(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_ProviderName(HSTRING *value);
	virtual STDMETHODIMP _get_State(ESimProfileState *value);
	virtual STDMETHODIMP _DisableAsync(Foundation::IAsyncOperation<ESimOperationResult*>* *operation);
	virtual STDMETHODIMP _EnableAsync(Foundation::IAsyncOperation<ESimOperationResult*>* *operation);
	virtual STDMETHODIMP _SetNicknameAsync(HSTRING newNickname, Foundation::IAsyncOperation<ESimOperationResult*>* *operation);
};
template<typename X> struct IESimProfile_adaptor : X {
	union {
		struct : property {
			ESimProfileClass get() { ESimProfileClass value; hrcheck(enc(&IESimProfile_adaptor::Class)->_get_Class(&value)); return value; }
			ESimProfileClass operator()() { return get(); }
			operator ESimProfileClass () { return get(); }
		} Class;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESimProfile_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESimProfile_adaptor::Nickname)->_get_Nickname(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Nickname;
		struct : property {
			ptr<ESimProfilePolicy> get() { ESimProfilePolicy* value; hrcheck(enc(&IESimProfile_adaptor::Policy)->_get_Policy(&value)); return from_abi(value); }
			ptr<ESimProfilePolicy> operator()() { return get(); }
			operator ptr<ESimProfilePolicy> () { return get(); }
			ptr<ESimProfilePolicy> operator->() { return get(); }
		} Policy;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IESimProfile_adaptor::ProviderIcon)->_get_ProviderIcon(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} ProviderIcon;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESimProfile_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESimProfile_adaptor::ProviderName)->_get_ProviderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderName;
		struct : property {
			ESimProfileState get() { ESimProfileState value; hrcheck(enc(&IESimProfile_adaptor::State)->_get_State(&value)); return value; }
			ESimProfileState operator()() { return get(); }
			operator ESimProfileState () { return get(); }
		} State;
	};
	ptr<Foundation::IAsyncOperation<ptr<ESimOperationResult>>> DisableAsync() { Foundation::IAsyncOperation<ESimOperationResult*>* operation; hrcheck(X::get()->_DisableAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ESimOperationResult>>> EnableAsync() { Foundation::IAsyncOperation<ESimOperationResult*>* operation; hrcheck(X::get()->_EnableAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ESimOperationResult>>> SetNicknameAsync(hstring_ref newNickname) { Foundation::IAsyncOperation<ESimOperationResult*>* operation; hrcheck(X::get()->_SetNicknameAsync(newNickname, &operation)); return from_abi(operation); }
	IESimProfile_adaptor() {}
};
template<typename X> struct adapt<IESimProfile, X> : Windows::Networking::NetworkOperators::IESimProfile_adaptor<X> { typedef adapt IESimProfile; };
struct IESimProfile : IESimProfile_raw, generate<IESimProfile> {};

// ESimProfile
template<typename X> struct statics<ESimProfile, X> : X {
	typedef typename X::root_type ESimProfile;
};
struct ESimProfile : generate<ESimProfile> {};

// IESimOperationResult
struct IESimOperationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(ESimOperationStatus *value);
};
template<typename X> struct IESimOperationResult_adaptor : X {
	union {
		struct : property {
			ESimOperationStatus get() { ESimOperationStatus value; hrcheck(enc(&IESimOperationResult_adaptor::Status)->_get_Status(&value)); return value; }
			ESimOperationStatus operator()() { return get(); }
			operator ESimOperationStatus () { return get(); }
		} Status;
	};
	IESimOperationResult_adaptor() {}
};
template<typename X> struct adapt<IESimOperationResult, X> : Windows::Networking::NetworkOperators::IESimOperationResult_adaptor<X> { typedef adapt IESimOperationResult; };
struct IESimOperationResult : IESimOperationResult_raw, generate<IESimOperationResult> {};

// ESimOperationResult
template<typename X> struct statics<ESimOperationResult, X> : X {
	typedef typename X::root_type ESimOperationResult;
};
struct ESimOperationResult : generate<ESimOperationResult> {};

// IESimDownloadProfileMetadataResult
struct IESimDownloadProfileMetadataResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Result(ESimOperationResult* *value);
	virtual STDMETHODIMP _get_ProfileMetadata(ESimProfileMetadata* *value);
};
template<typename X> struct IESimDownloadProfileMetadataResult_adaptor : X {
	union {
		struct : property {
			ptr<ESimProfileMetadata> get() { ESimProfileMetadata* value; hrcheck(enc(&IESimDownloadProfileMetadataResult_adaptor::ProfileMetadata)->_get_ProfileMetadata(&value)); return from_abi(value); }
			ptr<ESimProfileMetadata> operator()() { return get(); }
			operator ptr<ESimProfileMetadata> () { return get(); }
			ptr<ESimProfileMetadata> operator->() { return get(); }
		} ProfileMetadata;
		struct : property {
			ptr<ESimOperationResult> get() { ESimOperationResult* value; hrcheck(enc(&IESimDownloadProfileMetadataResult_adaptor::Result)->_get_Result(&value)); return from_abi(value); }
			ptr<ESimOperationResult> operator()() { return get(); }
			operator ptr<ESimOperationResult> () { return get(); }
			ptr<ESimOperationResult> operator->() { return get(); }
		} Result;
	};
	IESimDownloadProfileMetadataResult_adaptor() {}
};
template<typename X> struct adapt<IESimDownloadProfileMetadataResult, X> : Windows::Networking::NetworkOperators::IESimDownloadProfileMetadataResult_adaptor<X> { typedef adapt IESimDownloadProfileMetadataResult; };
struct IESimDownloadProfileMetadataResult : IESimDownloadProfileMetadataResult_raw, generate<IESimDownloadProfileMetadataResult> {};

// ESimDownloadProfileMetadataResult
template<typename X> struct statics<ESimDownloadProfileMetadataResult, X> : X {
	typedef typename X::root_type ESimDownloadProfileMetadataResult;
};
struct ESimDownloadProfileMetadataResult : generate<ESimDownloadProfileMetadataResult> {};

// ESim
template<typename X> struct statics<ESim, X> : X {
	typedef typename X::root_type ESim;
};
struct ESim : generate<ESim> {};

// IESimAddedEventArgs
struct IESimAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ESim(NetworkOperators::ESim* *value);
};
template<typename X> struct IESimAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<NetworkOperators::ESim> get() { NetworkOperators::ESim* value; hrcheck(enc(&IESimAddedEventArgs_adaptor::ESim)->_get_ESim(&value)); return from_abi(value); }
			ptr<NetworkOperators::ESim> operator()() { return get(); }
			operator ptr<NetworkOperators::ESim> () { return get(); }
			ptr<NetworkOperators::ESim> operator->() { return get(); }
		} ESim;
	};
	IESimAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IESimAddedEventArgs, X> : Windows::Networking::NetworkOperators::IESimAddedEventArgs_adaptor<X> { typedef adapt IESimAddedEventArgs; };
struct IESimAddedEventArgs : IESimAddedEventArgs_raw, generate<IESimAddedEventArgs> {};

// ESimAddedEventArgs
template<typename X> struct statics<ESimAddedEventArgs, X> : X {
	typedef typename X::root_type ESimAddedEventArgs;
};
struct ESimAddedEventArgs : generate<ESimAddedEventArgs> {};

// IESimProfileMetadata
struct IESimProfileMetadata_raw : IInspectable {
	virtual STDMETHODIMP _get_IsConfirmationCodeRequired(bool *value);
	virtual STDMETHODIMP _get_Policy(ESimProfilePolicy* *value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_ProviderIcon(Storage::Streams::IRandomAccessStreamReference* *value);
	virtual STDMETHODIMP _get_ProviderId(HSTRING *value);
	virtual STDMETHODIMP _get_ProviderName(HSTRING *value);
	virtual STDMETHODIMP _get_State(ESimProfileMetadataState *value);
	virtual STDMETHODIMP _DenyInstallAsync(Foundation::IAsyncOperation<ESimOperationResult*>* *operation);
	virtual STDMETHODIMP _ConfirmInstallAsync(Foundation::IAsyncOperationWithProgress<ESimOperationResult*, ESimProfileInstallProgress>* *operation);
	virtual STDMETHODIMP _ConfirmInstallWithConfirmationCodeAsync(HSTRING confirmationCode, Foundation::IAsyncOperationWithProgress<ESimOperationResult*, ESimProfileInstallProgress>* *operation);
	virtual STDMETHODIMP _PostponeInstallAsync(Foundation::IAsyncOperation<ESimOperationResult*>* *operation);
	virtual STDMETHODIMP _add_StateChanged(Foundation::TypedEventHandler<ESimProfileMetadata*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StateChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IESimProfileMetadata_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESimProfileMetadata_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IESimProfileMetadata_adaptor::IsConfirmationCodeRequired)->_get_IsConfirmationCodeRequired(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsConfirmationCodeRequired;
		struct : property {
			ptr<ESimProfilePolicy> get() { ESimProfilePolicy* value; hrcheck(enc(&IESimProfileMetadata_adaptor::Policy)->_get_Policy(&value)); return from_abi(value); }
			ptr<ESimProfilePolicy> operator()() { return get(); }
			operator ptr<ESimProfilePolicy> () { return get(); }
			ptr<ESimProfilePolicy> operator->() { return get(); }
		} Policy;
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamReference> get() { Storage::Streams::IRandomAccessStreamReference* value; hrcheck(enc(&IESimProfileMetadata_adaptor::ProviderIcon)->_get_ProviderIcon(&value)); return from_abi(value); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamReference> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamReference> operator->() { return get(); }
		} ProviderIcon;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESimProfileMetadata_adaptor::ProviderId)->_get_ProviderId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IESimProfileMetadata_adaptor::ProviderName)->_get_ProviderName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProviderName;
		struct : property {
			ESimProfileMetadataState get() { ESimProfileMetadataState value; hrcheck(enc(&IESimProfileMetadata_adaptor::State)->_get_State(&value)); return value; }
			ESimProfileMetadataState operator()() { return get(); }
			operator ESimProfileMetadataState () { return get(); }
		} State;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ESimProfileMetadata>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IESimProfileMetadata_adaptor::StateChanged)->_add_StateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IESimProfileMetadata_adaptor::StateChanged)->_remove_StateChanged(token)); }
		} StateChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<ESimOperationResult>>> DenyInstallAsync() { Foundation::IAsyncOperation<ESimOperationResult*>* operation; hrcheck(X::get()->_DenyInstallAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperationWithProgress<ptr<ESimOperationResult>, ESimProfileInstallProgress>> ConfirmInstallAsync() { Foundation::IAsyncOperationWithProgress<ESimOperationResult*, ESimProfileInstallProgress>* operation; hrcheck(X::get()->_ConfirmInstallAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperationWithProgress<ptr<ESimOperationResult>, ESimProfileInstallProgress>> ConfirmInstallAsync(hstring_ref confirmationCode) { Foundation::IAsyncOperationWithProgress<ESimOperationResult*, ESimProfileInstallProgress>* operation; hrcheck(X::get()->_ConfirmInstallWithConfirmationCodeAsync(confirmationCode, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ESimOperationResult>>> PostponeInstallAsync() { Foundation::IAsyncOperation<ESimOperationResult*>* operation; hrcheck(X::get()->_PostponeInstallAsync(&operation)); return from_abi(operation); }
	IESimProfileMetadata_adaptor() {}
};
template<typename X> struct adapt<IESimProfileMetadata, X> : Windows::Networking::NetworkOperators::IESimProfileMetadata_adaptor<X> { typedef adapt IESimProfileMetadata; };
struct IESimProfileMetadata : IESimProfileMetadata_raw, generate<IESimProfileMetadata> {};

// ESimProfileMetadata
template<typename X> struct statics<ESimProfileMetadata, X> : X {
	typedef typename X::root_type ESimProfileMetadata;
};
struct ESimProfileMetadata : generate<ESimProfileMetadata> {
	using IESimProfileMetadata::ConfirmInstallAsync;
};

// IESimManagerStatics
struct IESimManagerStatics : IInspectable {
	virtual STDMETHODIMP _get_ServiceInfo(ESimServiceInfo* *value);
	virtual STDMETHODIMP _TryCreateESimWatcher(ESimWatcher* *value);
	virtual STDMETHODIMP _add_ServiceInfoChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ServiceInfoChanged(Foundation::EventRegistrationToken token);
};

// IESimServiceInfo
struct IESimServiceInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_AuthenticationPreference(ESimAuthenticationPreference *value);
	virtual STDMETHODIMP _get_IsESimUiEnabled(bool *value);
};
template<typename X> struct IESimServiceInfo_adaptor : X {
	union {
		struct : property {
			ESimAuthenticationPreference get() { ESimAuthenticationPreference value; hrcheck(enc(&IESimServiceInfo_adaptor::AuthenticationPreference)->_get_AuthenticationPreference(&value)); return value; }
			ESimAuthenticationPreference operator()() { return get(); }
			operator ESimAuthenticationPreference () { return get(); }
		} AuthenticationPreference;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IESimServiceInfo_adaptor::IsESimUiEnabled)->_get_IsESimUiEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsESimUiEnabled;
	};
	IESimServiceInfo_adaptor() {}
};
template<typename X> struct adapt<IESimServiceInfo, X> : Windows::Networking::NetworkOperators::IESimServiceInfo_adaptor<X> { typedef adapt IESimServiceInfo; };
struct IESimServiceInfo : IESimServiceInfo_raw, generate<IESimServiceInfo> {};

// ESimServiceInfo
template<typename X> struct statics<ESimServiceInfo, X> : X {
	typedef typename X::root_type ESimServiceInfo;
};
struct ESimServiceInfo : generate<ESimServiceInfo> {};

// IESimWatcher
struct IESimWatcher_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(ESimWatcherStatus *status);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _add_Added(Foundation::TypedEventHandler<ESimWatcher*, ESimAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Added(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<ESimWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Removed(Foundation::TypedEventHandler<ESimWatcher*, ESimRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Removed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<ESimWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Updated(Foundation::TypedEventHandler<ESimWatcher*, ESimUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Updated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IESimWatcher_adaptor : X {
	union {
		struct : property {
			ESimWatcherStatus get() { ESimWatcherStatus status; hrcheck(enc(&IESimWatcher_adaptor::Status)->_get_Status(&status)); return status; }
			ESimWatcherStatus operator()() { return get(); }
			operator ESimWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ESimWatcher>, ptr<ESimAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IESimWatcher_adaptor::Added)->_add_Added(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IESimWatcher_adaptor::Added)->_remove_Added(token)); }
		} Added;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ESimWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IESimWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IESimWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ESimWatcher>, ptr<ESimRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IESimWatcher_adaptor::Removed)->_add_Removed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IESimWatcher_adaptor::Removed)->_remove_Removed(token)); }
		} Removed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ESimWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IESimWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IESimWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ESimWatcher>, ptr<ESimUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IESimWatcher_adaptor::Updated)->_add_Updated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IESimWatcher_adaptor::Updated)->_remove_Updated(token)); }
		} Updated;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IESimWatcher_adaptor() {}
};
template<typename X> struct adapt<IESimWatcher, X> : Windows::Networking::NetworkOperators::IESimWatcher_adaptor<X> { typedef adapt IESimWatcher; };
struct IESimWatcher : IESimWatcher_raw, generate<IESimWatcher> {};

// ESimWatcher
template<typename X> struct statics<ESimWatcher, X> : X {
	typedef typename X::root_type ESimWatcher;
};
struct ESimWatcher : generate<ESimWatcher> {};

// ESimManager
template<typename> struct ESimManager_statics {
	static struct _ServiceInfo : property {
		ptr<ESimServiceInfo> get() { ESimServiceInfo* value; hrcheck(get_activation_factory<ESimManager, IESimManagerStatics>()->_get_ServiceInfo(&value)); return from_abi(value); }
		ptr<ESimServiceInfo> operator()() { return get(); }
		operator ptr<ESimServiceInfo> () { return get(); }
		ptr<ESimServiceInfo> operator->() { return get(); }
	} ServiceInfo;
	static struct _ServiceInfoChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<ESimManager, IESimManagerStatics>()->_add_ServiceInfoChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<ESimManager, IESimManagerStatics>()->_remove_ServiceInfoChanged(token)); }
	} ServiceInfoChanged;
	static ptr<ESimWatcher> TryCreateESimWatcher() { ESimWatcher* value; hrcheck(get_activation_factory<ESimManager, IESimManagerStatics>()->_TryCreateESimWatcher(&value)); return from_abi(value); }
};
template<typename X> typename ESimManager_statics<X>::_ServiceInfo ESimManager_statics<X>::ServiceInfo;
template<typename X> typename ESimManager_statics<X>::_ServiceInfoChanged ESimManager_statics<X>::ServiceInfoChanged;

template<typename X> struct statics<ESimManager, X> : X, Windows::Networking::NetworkOperators::ESimManager_statics<void> {
	typedef typename X::root_type ESimManager;
};
struct ESimManager : generate<ESimManager> {};

// IESimProfilePolicy
struct IESimProfilePolicy_raw : IInspectable {
	virtual STDMETHODIMP _get_CanDelete(bool *value);
	virtual STDMETHODIMP _get_CanDisable(bool *value);
	virtual STDMETHODIMP _get_IsManagedByEnterprise(bool *value);
};
template<typename X> struct IESimProfilePolicy_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IESimProfilePolicy_adaptor::CanDelete)->_get_CanDelete(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanDelete;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IESimProfilePolicy_adaptor::CanDisable)->_get_CanDisable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanDisable;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IESimProfilePolicy_adaptor::IsManagedByEnterprise)->_get_IsManagedByEnterprise(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsManagedByEnterprise;
	};
	IESimProfilePolicy_adaptor() {}
};
template<typename X> struct adapt<IESimProfilePolicy, X> : Windows::Networking::NetworkOperators::IESimProfilePolicy_adaptor<X> { typedef adapt IESimProfilePolicy; };
struct IESimProfilePolicy : IESimProfilePolicy_raw, generate<IESimProfilePolicy> {};

// ESimProfilePolicy
template<typename X> struct statics<ESimProfilePolicy, X> : X {
	typedef typename X::root_type ESimProfilePolicy;
};
struct ESimProfilePolicy : generate<ESimProfilePolicy> {};

// IESimRemovedEventArgs
struct IESimRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ESim(NetworkOperators::ESim* *value);
};
template<typename X> struct IESimRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<NetworkOperators::ESim> get() { NetworkOperators::ESim* value; hrcheck(enc(&IESimRemovedEventArgs_adaptor::ESim)->_get_ESim(&value)); return from_abi(value); }
			ptr<NetworkOperators::ESim> operator()() { return get(); }
			operator ptr<NetworkOperators::ESim> () { return get(); }
			ptr<NetworkOperators::ESim> operator->() { return get(); }
		} ESim;
	};
	IESimRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IESimRemovedEventArgs, X> : Windows::Networking::NetworkOperators::IESimRemovedEventArgs_adaptor<X> { typedef adapt IESimRemovedEventArgs; };
struct IESimRemovedEventArgs : IESimRemovedEventArgs_raw, generate<IESimRemovedEventArgs> {};

// ESimRemovedEventArgs
template<typename X> struct statics<ESimRemovedEventArgs, X> : X {
	typedef typename X::root_type ESimRemovedEventArgs;
};
struct ESimRemovedEventArgs : generate<ESimRemovedEventArgs> {};

// IESimUpdatedEventArgs
struct IESimUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ESim(NetworkOperators::ESim* *value);
};
template<typename X> struct IESimUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<NetworkOperators::ESim> get() { NetworkOperators::ESim* value; hrcheck(enc(&IESimUpdatedEventArgs_adaptor::ESim)->_get_ESim(&value)); return from_abi(value); }
			ptr<NetworkOperators::ESim> operator()() { return get(); }
			operator ptr<NetworkOperators::ESim> () { return get(); }
			ptr<NetworkOperators::ESim> operator->() { return get(); }
		} ESim;
	};
	IESimUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IESimUpdatedEventArgs, X> : Windows::Networking::NetworkOperators::IESimUpdatedEventArgs_adaptor<X> { typedef adapt IESimUpdatedEventArgs; };
struct IESimUpdatedEventArgs : IESimUpdatedEventArgs_raw, generate<IESimUpdatedEventArgs> {};

// ESimUpdatedEventArgs
template<typename X> struct statics<ESimUpdatedEventArgs, X> : X {
	typedef typename X::root_type ESimUpdatedEventArgs;
};
struct ESimUpdatedEventArgs : generate<ESimUpdatedEventArgs> {};

// IHotspotAuthenticationEventDetails
struct IHotspotAuthenticationEventDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_EventToken(HSTRING *value);
};
template<typename X> struct IHotspotAuthenticationEventDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IHotspotAuthenticationEventDetails_adaptor::EventToken)->_get_EventToken(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} EventToken;
	};
	IHotspotAuthenticationEventDetails_adaptor() {}
};
template<typename X> struct adapt<IHotspotAuthenticationEventDetails, X> : Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails_adaptor<X> { typedef adapt IHotspotAuthenticationEventDetails; };
struct IHotspotAuthenticationEventDetails : IHotspotAuthenticationEventDetails_raw, generate<IHotspotAuthenticationEventDetails> {};

// HotspotAuthenticationEventDetails
template<typename X> struct statics<HotspotAuthenticationEventDetails, X> : X {
	typedef typename X::root_type HotspotAuthenticationEventDetails;
};
struct HotspotAuthenticationEventDetails : generate<HotspotAuthenticationEventDetails> {};

// IHotspotAuthenticationContextStatics
struct IHotspotAuthenticationContextStatics : IInspectable {
	virtual STDMETHODIMP _TryGetAuthenticationContext(HSTRING evenToken, HotspotAuthenticationContext* *context, bool *isValid);
};

// IHotspotAuthenticationContext2
struct IHotspotAuthenticationContext2_raw : IInspectable {
	virtual STDMETHODIMP _IssueCredentialsAsync(HSTRING userName, HSTRING password, HSTRING extraParameters, bool markAsManualConnectOnFailure, Foundation::IAsyncOperation<HotspotCredentialsAuthenticationResult*>* *asyncInfo);
};
template<typename X> struct IHotspotAuthenticationContext2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<HotspotCredentialsAuthenticationResult>>> IssueCredentialsAsync(hstring_ref userName, hstring_ref password, hstring_ref extraParameters, bool markAsManualConnectOnFailure) { Foundation::IAsyncOperation<HotspotCredentialsAuthenticationResult*>* asyncInfo; hrcheck(X::get()->_IssueCredentialsAsync(userName, password, extraParameters, markAsManualConnectOnFailure, &asyncInfo)); return from_abi(asyncInfo); }
};
template<typename X> struct adapt<IHotspotAuthenticationContext2, X> : Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2_adaptor<X> { typedef adapt IHotspotAuthenticationContext2; };
struct IHotspotAuthenticationContext2 : IHotspotAuthenticationContext2_raw, generate<IHotspotAuthenticationContext2> {};

// IHotspotAuthenticationContext
struct IHotspotAuthenticationContext_raw : IInspectable {
	virtual STDMETHODIMP _get_WirelessNetworkId(unsigned *valueSize, unsigned char **value);
	virtual STDMETHODIMP _get_NetworkAdapter(Connectivity::NetworkAdapter* *value);
	virtual STDMETHODIMP _get_RedirectMessageUrl(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_RedirectMessageXml(Data::Xml::Dom::XmlDocument* *value);
	virtual STDMETHODIMP _get_AuthenticationUrl(Foundation::Uri* *value);
	virtual STDMETHODIMP _IssueCredentials(HSTRING userName, HSTRING password, HSTRING extraParameters, bool markAsManualConnectOnFailure);
	virtual STDMETHODIMP _AbortAuthentication(bool markAsManual);
	virtual STDMETHODIMP _SkipAuthentication();
	virtual STDMETHODIMP _TriggerAttentionRequired(HSTRING packageRelativeApplicationId, HSTRING applicationParameters);
};
template<typename X> struct IHotspotAuthenticationContext_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IHotspotAuthenticationContext_adaptor::AuthenticationUrl)->_get_AuthenticationUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} AuthenticationUrl;
		struct : property {
			ptr<Connectivity::NetworkAdapter> get() { Connectivity::NetworkAdapter* value; hrcheck(enc(&IHotspotAuthenticationContext_adaptor::NetworkAdapter)->_get_NetworkAdapter(&value)); return from_abi(value); }
			ptr<Connectivity::NetworkAdapter> operator()() { return get(); }
			operator ptr<Connectivity::NetworkAdapter> () { return get(); }
			ptr<Connectivity::NetworkAdapter> operator->() { return get(); }
		} NetworkAdapter;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IHotspotAuthenticationContext_adaptor::RedirectMessageUrl)->_get_RedirectMessageUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} RedirectMessageUrl;
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&IHotspotAuthenticationContext_adaptor::RedirectMessageXml)->_get_RedirectMessageXml(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} RedirectMessageXml;
		struct : property {
			szarray<unsigned char> get() { szarray<unsigned char> value; hrcheck(enc(&IHotspotAuthenticationContext_adaptor::WirelessNetworkId)->_get_WirelessNetworkId(&value.size, &value.p)); return value; }
			szarray<unsigned char> operator()() { return get(); }
			operator szarray<unsigned char> () { return get(); }
		} WirelessNetworkId;
	};
	void IssueCredentials(hstring_ref userName, hstring_ref password, hstring_ref extraParameters, bool markAsManualConnectOnFailure) { hrcheck(X::get()->_IssueCredentials(userName, password, extraParameters, markAsManualConnectOnFailure)); }
	void AbortAuthentication(bool markAsManual) { hrcheck(X::get()->_AbortAuthentication(markAsManual)); }
	void SkipAuthentication() { hrcheck(X::get()->_SkipAuthentication()); }
	void TriggerAttentionRequired(hstring_ref packageRelativeApplicationId, hstring_ref applicationParameters) { hrcheck(X::get()->_TriggerAttentionRequired(packageRelativeApplicationId, applicationParameters)); }
	IHotspotAuthenticationContext_adaptor() {}
};
template<typename X> struct adapt<IHotspotAuthenticationContext, X> : Windows::Networking::NetworkOperators::IHotspotAuthenticationContext_adaptor<X> { typedef adapt IHotspotAuthenticationContext; };
struct IHotspotAuthenticationContext : IHotspotAuthenticationContext_raw, generate<IHotspotAuthenticationContext> {};

// HotspotAuthenticationContext
template<typename> struct HotspotAuthenticationContext_statics {
	static bool TryGetAuthenticationContext(hstring_ref evenToken, pptr<HotspotAuthenticationContext> *context) { bool isValid; hrcheck(get_activation_factory<HotspotAuthenticationContext, IHotspotAuthenticationContextStatics>()->_TryGetAuthenticationContext(evenToken, context, &isValid)); return isValid; }
};

template<typename X> struct statics<HotspotAuthenticationContext, X> : X, Windows::Networking::NetworkOperators::HotspotAuthenticationContext_statics<void> {
	typedef typename X::root_type HotspotAuthenticationContext;
};
struct HotspotAuthenticationContext : generate<HotspotAuthenticationContext> {};

// IHotspotCredentialsAuthenticationResult
struct IHotspotCredentialsAuthenticationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_HasNetworkErrorOccurred(bool *value);
	virtual STDMETHODIMP _get_ResponseCode(HotspotAuthenticationResponseCode *value);
	virtual STDMETHODIMP _get_LogoffUrl(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_AuthenticationReplyXml(Data::Xml::Dom::XmlDocument* *value);
};
template<typename X> struct IHotspotCredentialsAuthenticationResult_adaptor : X {
	union {
		struct : property {
			ptr<Data::Xml::Dom::XmlDocument> get() { Data::Xml::Dom::XmlDocument* value; hrcheck(enc(&IHotspotCredentialsAuthenticationResult_adaptor::AuthenticationReplyXml)->_get_AuthenticationReplyXml(&value)); return from_abi(value); }
			ptr<Data::Xml::Dom::XmlDocument> operator()() { return get(); }
			operator ptr<Data::Xml::Dom::XmlDocument> () { return get(); }
			ptr<Data::Xml::Dom::XmlDocument> operator->() { return get(); }
		} AuthenticationReplyXml;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHotspotCredentialsAuthenticationResult_adaptor::HasNetworkErrorOccurred)->_get_HasNetworkErrorOccurred(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNetworkErrorOccurred;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IHotspotCredentialsAuthenticationResult_adaptor::LogoffUrl)->_get_LogoffUrl(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} LogoffUrl;
		struct : property {
			HotspotAuthenticationResponseCode get() { HotspotAuthenticationResponseCode value; hrcheck(enc(&IHotspotCredentialsAuthenticationResult_adaptor::ResponseCode)->_get_ResponseCode(&value)); return value; }
			HotspotAuthenticationResponseCode operator()() { return get(); }
			operator HotspotAuthenticationResponseCode () { return get(); }
		} ResponseCode;
	};
	IHotspotCredentialsAuthenticationResult_adaptor() {}
};
template<typename X> struct adapt<IHotspotCredentialsAuthenticationResult, X> : Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult_adaptor<X> { typedef adapt IHotspotCredentialsAuthenticationResult; };
struct IHotspotCredentialsAuthenticationResult : IHotspotCredentialsAuthenticationResult_raw, generate<IHotspotCredentialsAuthenticationResult> {};

// HotspotCredentialsAuthenticationResult
template<typename X> struct statics<HotspotCredentialsAuthenticationResult, X> : X {
	typedef typename X::root_type HotspotCredentialsAuthenticationResult;
};
struct HotspotCredentialsAuthenticationResult : generate<HotspotCredentialsAuthenticationResult> {};

// IProvisionFromXmlDocumentResults
struct IProvisionFromXmlDocumentResults_raw : IInspectable {
	virtual STDMETHODIMP _get_AllElementsProvisioned(bool *value);
	virtual STDMETHODIMP _get_ProvisionResultsXml(HSTRING *value);
};
template<typename X> struct IProvisionFromXmlDocumentResults_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IProvisionFromXmlDocumentResults_adaptor::AllElementsProvisioned)->_get_AllElementsProvisioned(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AllElementsProvisioned;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProvisionFromXmlDocumentResults_adaptor::ProvisionResultsXml)->_get_ProvisionResultsXml(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProvisionResultsXml;
	};
	IProvisionFromXmlDocumentResults_adaptor() {}
};
template<typename X> struct adapt<IProvisionFromXmlDocumentResults, X> : Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults_adaptor<X> { typedef adapt IProvisionFromXmlDocumentResults; };
struct IProvisionFromXmlDocumentResults : IProvisionFromXmlDocumentResults_raw, generate<IProvisionFromXmlDocumentResults> {};

// ProvisionFromXmlDocumentResults
template<typename X> struct statics<ProvisionFromXmlDocumentResults, X> : X {
	typedef typename X::root_type ProvisionFromXmlDocumentResults;
};
struct ProvisionFromXmlDocumentResults : generate<ProvisionFromXmlDocumentResults> {};

// IProvisionedProfile
struct IProvisionedProfile_raw : IInspectable {
	virtual STDMETHODIMP _UpdateCost(Connectivity::NetworkCostType value);
	virtual STDMETHODIMP _UpdateUsage(ProfileUsage value);
};
template<typename X> struct IProvisionedProfile_adaptor : X {
	void UpdateCost(Connectivity::NetworkCostType value) { hrcheck(X::get()->_UpdateCost(value)); }
	void UpdateUsage(const ProfileUsage& value) { hrcheck(X::get()->_UpdateUsage(value)); }
};
template<typename X> struct adapt<IProvisionedProfile, X> : Windows::Networking::NetworkOperators::IProvisionedProfile_adaptor<X> { typedef adapt IProvisionedProfile; };
struct IProvisionedProfile : IProvisionedProfile_raw, generate<IProvisionedProfile> {};

// ProvisionedProfile
template<typename X> struct statics<ProvisionedProfile, X> : X {
	typedef typename X::root_type ProvisionedProfile;
};
struct ProvisionedProfile : generate<ProvisionedProfile> {};

// IProvisioningAgent
struct IProvisioningAgent_raw : IInspectable {
	virtual STDMETHODIMP _ProvisionFromXmlDocumentAsync(HSTRING provisioningXmlDocument, Foundation::IAsyncOperation<ProvisionFromXmlDocumentResults*>* *asyncInfo);
	virtual STDMETHODIMP _GetProvisionedProfile(ProfileMediaType mediaType, HSTRING profileName, ProvisionedProfile* *provisionedProfile);
};
template<typename X> struct IProvisioningAgent_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<ProvisionFromXmlDocumentResults>>> ProvisionFromXmlDocumentAsync(hstring_ref provisioningXmlDocument) { Foundation::IAsyncOperation<ProvisionFromXmlDocumentResults*>* asyncInfo; hrcheck(X::get()->_ProvisionFromXmlDocumentAsync(provisioningXmlDocument, &asyncInfo)); return from_abi(asyncInfo); }
	ptr<ProvisionedProfile> GetProvisionedProfile(ProfileMediaType mediaType, hstring_ref profileName) { ProvisionedProfile* provisionedProfile; hrcheck(X::get()->_GetProvisionedProfile(mediaType, profileName, &provisionedProfile)); return from_abi(provisionedProfile); }
};
template<typename X> struct adapt<IProvisioningAgent, X> : Windows::Networking::NetworkOperators::IProvisioningAgent_adaptor<X> { typedef adapt IProvisioningAgent; };
struct IProvisioningAgent : IProvisioningAgent_raw, generate<IProvisioningAgent> {};

// IProvisioningAgentStaticMethods
struct IProvisioningAgentStaticMethods : IInspectable {
	virtual STDMETHODIMP _CreateFromNetworkAccountId(HSTRING networkAccountId, ProvisioningAgent* *provisioningAgent);
};

// ProvisioningAgent
template<typename> struct ProvisioningAgent_statics {
	static ptr<ProvisioningAgent> CreateFromNetworkAccountId(hstring_ref networkAccountId) { ProvisioningAgent* provisioningAgent; hrcheck(get_activation_factory<ProvisioningAgent, IProvisioningAgentStaticMethods>()->_CreateFromNetworkAccountId(networkAccountId, &provisioningAgent)); return from_abi(provisioningAgent); }
};

template<typename X> struct statics<ProvisioningAgent, X> : X, Windows::Networking::NetworkOperators::ProvisioningAgent_statics<void> {
	typedef typename X::root_type ProvisioningAgent;
};
struct ProvisioningAgent : generate<ProvisioningAgent> {};

// IUssdMessage
struct IUssdMessage_raw : IInspectable {
	virtual STDMETHODIMP _get_DataCodingScheme(unsigned char *value);
	virtual STDMETHODIMP _put_DataCodingScheme(unsigned char value);
	virtual STDMETHODIMP _GetPayload(unsigned *valueSize, unsigned char **value);
	virtual STDMETHODIMP _SetPayload(unsigned valueSize, unsigned char *value);
	virtual STDMETHODIMP _get_PayloadAsText(HSTRING *value);
	virtual STDMETHODIMP _put_PayloadAsText(HSTRING value);
};
template<typename X> struct IUssdMessage_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&IUssdMessage_adaptor::DataCodingScheme)->_get_DataCodingScheme(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
			void put(unsigned char value) { hrcheck(enc(&IUssdMessage_adaptor::DataCodingScheme)->_put_DataCodingScheme(value)); }
			void operator=(unsigned char value) { put(value); }
			void operator()(unsigned char value) { put(value); }
		} DataCodingScheme;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUssdMessage_adaptor::PayloadAsText)->_get_PayloadAsText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUssdMessage_adaptor::PayloadAsText)->_put_PayloadAsText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PayloadAsText;
	};
	szarray<unsigned char> GetPayload() { szarray<unsigned char> value; hrcheck(X::get()->_GetPayload(&value.size, &value.p)); return value; }
	void SetPayload(const szarray<unsigned char>& value) { hrcheck(X::get()->_SetPayload(value.size, to_abi(value.p))); }
	IUssdMessage_adaptor() {}
};
template<typename X> struct adapt<IUssdMessage, X> : Windows::Networking::NetworkOperators::IUssdMessage_adaptor<X> { typedef adapt IUssdMessage; };
struct IUssdMessage : IUssdMessage_raw, generate<IUssdMessage> {};

// IUssdMessageFactory
struct IUssdMessageFactory : IInspectable {
	virtual STDMETHODIMP _CreateMessage(HSTRING messageText, UssdMessage* *ussdMessage);
};

// UssdMessage
template<typename> struct UssdMessage_statics {
	static UssdMessage *activate(hstring_ref messageText) { UssdMessage *ussdMessage; hrcheck(get_activation_factory<UssdMessage, IUssdMessageFactory>()->_CreateMessage(messageText, &ussdMessage)); return ussdMessage; }
};

template<typename X> struct statics<UssdMessage, X> : X, Windows::Networking::NetworkOperators::UssdMessage_statics<void> {
	using Windows::Networking::NetworkOperators::UssdMessage_statics<void>::activate;
	typedef typename X::root_type UssdMessage;
};
struct UssdMessage : generate<UssdMessage> {};

// IUssdReply
struct IUssdReply_raw : IInspectable {
	virtual STDMETHODIMP _get_ResultCode(UssdResultCode *value);
	virtual STDMETHODIMP _get_Message(UssdMessage* *value);
};
template<typename X> struct IUssdReply_adaptor : X {
	union {
		struct : property {
			ptr<UssdMessage> get() { UssdMessage* value; hrcheck(enc(&IUssdReply_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<UssdMessage> operator()() { return get(); }
			operator ptr<UssdMessage> () { return get(); }
			ptr<UssdMessage> operator->() { return get(); }
		} Message;
		struct : property {
			UssdResultCode get() { UssdResultCode value; hrcheck(enc(&IUssdReply_adaptor::ResultCode)->_get_ResultCode(&value)); return value; }
			UssdResultCode operator()() { return get(); }
			operator UssdResultCode () { return get(); }
		} ResultCode;
	};
	IUssdReply_adaptor() {}
};
template<typename X> struct adapt<IUssdReply, X> : Windows::Networking::NetworkOperators::IUssdReply_adaptor<X> { typedef adapt IUssdReply; };
struct IUssdReply : IUssdReply_raw, generate<IUssdReply> {};

// UssdReply
template<typename X> struct statics<UssdReply, X> : X {
	typedef typename X::root_type UssdReply;
};
struct UssdReply : generate<UssdReply> {};

// IUssdSession
struct IUssdSession_raw : IInspectable {
	virtual STDMETHODIMP _SendMessageAndGetReplyAsync(UssdMessage* message, Foundation::IAsyncOperation<UssdReply*>* *asyncInfo);
	virtual STDMETHODIMP _Close();
};
template<typename X> struct IUssdSession_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<UssdReply>>> SendMessageAndGetReplyAsync(pptr<UssdMessage> message) { Foundation::IAsyncOperation<UssdReply*>* asyncInfo; hrcheck(X::get()->_SendMessageAndGetReplyAsync(message, &asyncInfo)); return from_abi(asyncInfo); }
	void Close() { hrcheck(X::get()->_Close()); }
};
template<typename X> struct adapt<IUssdSession, X> : Windows::Networking::NetworkOperators::IUssdSession_adaptor<X> { typedef adapt IUssdSession; };
struct IUssdSession : IUssdSession_raw, generate<IUssdSession> {};

// IUssdSessionStatics
struct IUssdSessionStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromNetworkAccountId(HSTRING networkAccountId, UssdSession* *ussdSession);
	virtual STDMETHODIMP _CreateFromNetworkInterfaceId(HSTRING networkInterfaceId, UssdSession* *ussdSession);
};

// UssdSession
template<typename> struct UssdSession_statics {
	static ptr<UssdSession> CreateFromNetworkAccountId(hstring_ref networkAccountId) { UssdSession* ussdSession; hrcheck(get_activation_factory<UssdSession, IUssdSessionStatics>()->_CreateFromNetworkAccountId(networkAccountId, &ussdSession)); return from_abi(ussdSession); }
	static ptr<UssdSession> CreateFromNetworkInterfaceId(hstring_ref networkInterfaceId) { UssdSession* ussdSession; hrcheck(get_activation_factory<UssdSession, IUssdSessionStatics>()->_CreateFromNetworkInterfaceId(networkInterfaceId, &ussdSession)); return from_abi(ussdSession); }
};

template<typename X> struct statics<UssdSession, X> : X, Windows::Networking::NetworkOperators::UssdSession_statics<void> {
	typedef typename X::root_type UssdSession;
};
struct UssdSession : generate<UssdSession> {};

// INetworkOperatorNotificationEventDetails
struct INetworkOperatorNotificationEventDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_NotificationType(NetworkOperatorEventMessageType *value);
	virtual STDMETHODIMP _get_NetworkAccountId(HSTRING *value);
	virtual STDMETHODIMP _get_EncodingType(unsigned char *value);
	virtual STDMETHODIMP _get_Message(HSTRING *value);
	virtual STDMETHODIMP _get_RuleId(HSTRING *value);
	virtual STDMETHODIMP _get_SmsMessage(Devices::Sms::ISmsMessage* *value);
};
template<typename X> struct INetworkOperatorNotificationEventDetails_adaptor : X {
	union {
		struct : property {
			unsigned char get() { unsigned char value; hrcheck(enc(&INetworkOperatorNotificationEventDetails_adaptor::EncodingType)->_get_EncodingType(&value)); return value; }
			unsigned char operator()() { return get(); }
			operator unsigned char () { return get(); }
		} EncodingType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorNotificationEventDetails_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Message;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorNotificationEventDetails_adaptor::NetworkAccountId)->_get_NetworkAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkAccountId;
		struct : property {
			NetworkOperatorEventMessageType get() { NetworkOperatorEventMessageType value; hrcheck(enc(&INetworkOperatorNotificationEventDetails_adaptor::NotificationType)->_get_NotificationType(&value)); return value; }
			NetworkOperatorEventMessageType operator()() { return get(); }
			operator NetworkOperatorEventMessageType () { return get(); }
		} NotificationType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorNotificationEventDetails_adaptor::RuleId)->_get_RuleId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RuleId;
		struct : property {
			ptr<Devices::Sms::ISmsMessage> get() { Devices::Sms::ISmsMessage* value; hrcheck(enc(&INetworkOperatorNotificationEventDetails_adaptor::SmsMessage)->_get_SmsMessage(&value)); return from_abi(value); }
			ptr<Devices::Sms::ISmsMessage> operator()() { return get(); }
			operator ptr<Devices::Sms::ISmsMessage> () { return get(); }
			ptr<Devices::Sms::ISmsMessage> operator->() { return get(); }
		} SmsMessage;
	};
	INetworkOperatorNotificationEventDetails_adaptor() {}
};
template<typename X> struct adapt<INetworkOperatorNotificationEventDetails, X> : Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails_adaptor<X> { typedef adapt INetworkOperatorNotificationEventDetails; };
struct INetworkOperatorNotificationEventDetails : INetworkOperatorNotificationEventDetails_raw, generate<INetworkOperatorNotificationEventDetails> {};

// INetworkOperatorTetheringEntitlementCheck
struct INetworkOperatorTetheringEntitlementCheck_raw : IInspectable {
	virtual STDMETHODIMP _AuthorizeTethering(bool allow, HSTRING entitlementFailureReason);
};
template<typename X> struct INetworkOperatorTetheringEntitlementCheck_adaptor : X {
	void AuthorizeTethering(bool allow, hstring_ref entitlementFailureReason) { hrcheck(X::get()->_AuthorizeTethering(allow, entitlementFailureReason)); }
};
template<typename X> struct adapt<INetworkOperatorTetheringEntitlementCheck, X> : Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck_adaptor<X> { typedef adapt INetworkOperatorTetheringEntitlementCheck; };
struct INetworkOperatorTetheringEntitlementCheck : INetworkOperatorTetheringEntitlementCheck_raw, generate<INetworkOperatorTetheringEntitlementCheck> {};

// NetworkOperatorNotificationEventDetails
template<typename X> struct statics<NetworkOperatorNotificationEventDetails, X> : X {
	typedef typename X::root_type NetworkOperatorNotificationEventDetails;
};
struct NetworkOperatorNotificationEventDetails : generate<NetworkOperatorNotificationEventDetails> {};

// IFdnAccessManagerStatics
struct IFdnAccessManagerStatics : IInspectable {
	virtual STDMETHODIMP _RequestUnlockAsync(HSTRING contactListId, Foundation::IAsyncOperation<bool>* *returnValue);
};

// FdnAccessManager
template<typename> struct FdnAccessManager_statics {
	static ptr<Foundation::IAsyncOperation<bool>> RequestUnlockAsync(hstring_ref contactListId) { Foundation::IAsyncOperation<bool>* returnValue; hrcheck(get_activation_factory<FdnAccessManager, IFdnAccessManagerStatics>()->_RequestUnlockAsync(contactListId, &returnValue)); return from_abi(returnValue); }
};

template<typename X> struct statics<FdnAccessManager, X> : X, Windows::Networking::NetworkOperators::FdnAccessManager_statics<void> {
	typedef typename X::root_type FdnAccessManager;
};
struct FdnAccessManager : generate<FdnAccessManager> {};
}}}
} // namespace iso_winrt
