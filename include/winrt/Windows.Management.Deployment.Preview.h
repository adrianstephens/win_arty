#pragma once
// generated by isopod tools
// namespaces:
// Windows.Management.Deployment.Preview

#include "Windows.Management.Deployment.Preview.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Management::Deployment::Preview::IInstalledClassicAppInfo> : interface_type<> {};
template<> struct def<Windows::Management::Deployment::Preview::InstalledClassicAppInfo> : class_type<Platform::Object, Windows::Management::Deployment::Preview::IInstalledClassicAppInfo> {};
template<> struct def<Windows::Management::Deployment::Preview::IClassicAppManagerStatics> : interface_type<> {};
template<> struct def<Windows::Management::Deployment::Preview::ClassicAppManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Management::Deployment::Preview::DeploymentPreviewContract> : value_type<> {};

// uuids

template<> struct uuid<Windows::Management::Deployment::Preview::IInstalledClassicAppInfo> { define_guid(0xA7D3DA3, 0x65D0, 0x4086, 0x80, 0xD6, 0x6, 0x10, 0xD7, 0x60, 0x20, 0x7D);};
template<> struct uuid<Windows::Management::Deployment::Preview::IClassicAppManagerStatics> { define_guid(0xE2FAD668, 0x882C, 0x4F33, 0xB0, 0x35, 0xD, 0xF7, 0xB9, 0xD, 0x67, 0xE6);};

// types

namespace Windows { namespace Management { namespace Deployment { namespace Preview {

// IInstalledClassicAppInfo
struct IInstalledClassicAppInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayVersion(HSTRING *value);
};
template<typename X> struct IInstalledClassicAppInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IInstalledClassicAppInfo_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IInstalledClassicAppInfo_adaptor::DisplayVersion)->_get_DisplayVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayVersion;
	};
	IInstalledClassicAppInfo_adaptor() {}
};
template<typename X> struct adapt<IInstalledClassicAppInfo, X> : Windows::Management::Deployment::Preview::IInstalledClassicAppInfo_adaptor<X> { typedef adapt IInstalledClassicAppInfo; };
struct IInstalledClassicAppInfo : IInstalledClassicAppInfo_raw, generate<IInstalledClassicAppInfo> {};

// InstalledClassicAppInfo
template<typename X> struct statics<InstalledClassicAppInfo, X> : X {
	typedef typename X::root_type InstalledClassicAppInfo;
};
struct InstalledClassicAppInfo : generate<InstalledClassicAppInfo> {};

// IClassicAppManagerStatics
struct IClassicAppManagerStatics : IInspectable {
	virtual STDMETHODIMP _FindInstalledApp(HSTRING appUninstallKey, InstalledClassicAppInfo* *result);
};

// ClassicAppManager
template<typename> struct ClassicAppManager_statics {
	static ptr<InstalledClassicAppInfo> FindInstalledApp(hstring_ref appUninstallKey) { InstalledClassicAppInfo* result; hrcheck(get_activation_factory<ClassicAppManager, IClassicAppManagerStatics>()->_FindInstalledApp(appUninstallKey, &result)); return from_abi(result); }
};

template<typename X> struct statics<ClassicAppManager, X> : X, Windows::Management::Deployment::Preview::ClassicAppManager_statics<void> {
	typedef typename X::root_type ClassicAppManager;
};
struct ClassicAppManager : generate<ClassicAppManager> {};
}}}}
} // namespace iso_winrt
