#pragma once
// generated by isopod tools
// namespaces:
// Windows.Globalization

#include "Windows.Globalization.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::Globalization::DayOfWeek> : enum_type<int> {};
template<> struct def<Windows::Globalization::ICalendarIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::ICalendarIdentifiersStatics2> : interface_type<> {};
template<> struct def<Windows::Globalization::ICalendarIdentifiersStatics3> : interface_type<> {};
template<> struct def<Windows::Globalization::CalendarIdentifiers> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Globalization::IClockIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::ClockIdentifiers> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Globalization::INumeralSystemIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::INumeralSystemIdentifiersStatics2> : interface_type<> {};
template<> struct def<Windows::Globalization::NumeralSystemIdentifiers> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Globalization::ICurrencyIdentifiersStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::ICurrencyIdentifiersStatics2> : interface_type<> {};
template<> struct def<Windows::Globalization::CurrencyIdentifiers> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Globalization::IGeographicRegion> : interface_type<> {};
template<> struct def<Windows::Globalization::IGeographicRegionFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::IGeographicRegionStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::GeographicRegion> : class_type<Platform::Object, Windows::Globalization::IGeographicRegion>, custom_activators {};
template<> struct def<Windows::Globalization::LanguageLayoutDirection> : enum_type<int> {};
template<> struct def<Windows::Globalization::ILanguage> : interface_type<> {};
template<> struct def<Windows::Globalization::ILanguage2> : interface_type<> {};
template<> struct def<Windows::Globalization::ILanguageExtensionSubtags> : interface_type<> {};
template<> struct def<Windows::Globalization::ILanguageFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::ILanguageStatics2> : interface_type<> {};
template<> struct def<Windows::Globalization::ILanguageStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::Language> : class_type<Platform::Object, Windows::Globalization::ILanguage, Windows::Globalization::ILanguageExtensionSubtags, Windows::Globalization::ILanguage2>, custom_activators {};
template<> struct def<Windows::Globalization::ICalendar> : interface_type<> {};
template<> struct def<Windows::Globalization::ICalendarFactory2> : interface_type<> {};
template<> struct def<Windows::Globalization::ICalendarFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::ITimeZoneOnCalendar> : interface_type<> {};
template<> struct def<Windows::Globalization::Calendar> : class_type<Platform::Object, Windows::Globalization::ICalendar, Windows::Globalization::ITimeZoneOnCalendar>, custom_activators {};
template<> struct def<Windows::Globalization::IApplicationLanguagesStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::IApplicationLanguagesStatics2> : interface_type<> {};
template<> struct def<Windows::Globalization::ApplicationLanguages> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Globalization::GlobalizationJapanesePhoneticAnalyzerContract> : value_type<> {};
template<> struct def<Windows::Globalization::IJapanesePhoneticAnalyzerStatics> : interface_type<> {};
template<> struct def<Windows::Globalization::IJapanesePhoneme> : interface_type<> {};
template<> struct def<Windows::Globalization::JapanesePhoneme> : class_type<Platform::Object, Windows::Globalization::IJapanesePhoneme> {};
template<> struct def<Windows::Globalization::JapanesePhoneticAnalyzer> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Globalization::ICalendarIdentifiersStatics> { define_guid(0x80653F68, 0x2CB2, 0x4C1F, 0xB5, 0x90, 0xF0, 0xF5, 0x2B, 0xF4, 0xFD, 0x1A);};
template<> struct uuid<Windows::Globalization::ICalendarIdentifiersStatics2> { define_guid(0x7DF4D488, 0x5FD0, 0x42A7, 0x95, 0xB5, 0x7D, 0x98, 0xD8, 0x23, 0x7, 0x5F);};
template<> struct uuid<Windows::Globalization::ICalendarIdentifiersStatics3> { define_guid(0x2C225423, 0x1FAD, 0x40C0, 0x93, 0x34, 0xA8, 0xEB, 0x90, 0xDB, 0x4, 0xF5);};
template<> struct uuid<Windows::Globalization::IClockIdentifiersStatics> { define_guid(0x523805BB, 0x12EC, 0x4F83, 0xBC, 0x31, 0xB1, 0xB4, 0x37, 0x6B, 0x8, 0x8);};
template<> struct uuid<Windows::Globalization::INumeralSystemIdentifiersStatics> { define_guid(0xA5C662C3, 0x68C9, 0x4D3D, 0xB7, 0x65, 0x97, 0x20, 0x29, 0xE2, 0x1D, 0xEC);};
template<> struct uuid<Windows::Globalization::INumeralSystemIdentifiersStatics2> { define_guid(0x7F003228, 0x9DDB, 0x4A34, 0x91, 0x4, 0x2, 0x60, 0xC0, 0x91, 0xA7, 0xC7);};
template<> struct uuid<Windows::Globalization::ICurrencyIdentifiersStatics> { define_guid(0x9F1D091B, 0xD586, 0x4913, 0x9B, 0x6A, 0xA9, 0xBD, 0x2D, 0xC1, 0x28, 0x74);};
template<> struct uuid<Windows::Globalization::ICurrencyIdentifiersStatics2> { define_guid(0x1814797F, 0xC3B2, 0x4C33, 0x95, 0x91, 0x98, 0x0, 0x11, 0x95, 0xD, 0x37);};
template<> struct uuid<Windows::Globalization::IGeographicRegion> { define_guid(0x1E9A621, 0x4A64, 0x4ED9, 0x95, 0x4F, 0x9E, 0xDE, 0xB0, 0x7B, 0xD9, 0x3);};
template<> struct uuid<Windows::Globalization::IGeographicRegionFactory> { define_guid(0x53425270, 0x77B4, 0x426B, 0x85, 0x9F, 0x81, 0xE1, 0x9D, 0x51, 0x25, 0x46);};
template<> struct uuid<Windows::Globalization::IGeographicRegionStatics> { define_guid(0x29E28974, 0x7AD9, 0x4EF4, 0x87, 0x99, 0xB3, 0xB4, 0x4F, 0xAD, 0xEC, 0x8);};
template<> struct uuid<Windows::Globalization::ILanguage> { define_guid(0xEA79A752, 0xF7C2, 0x4265, 0xB1, 0xBD, 0xC4, 0xDE, 0xC4, 0xE4, 0xF0, 0x80);};
template<> struct uuid<Windows::Globalization::ILanguage2> { define_guid(0x6A47E5B5, 0xD94D, 0x4886, 0xA4, 0x4, 0xA5, 0xA5, 0xB9, 0xD5, 0xB4, 0x94);};
template<> struct uuid<Windows::Globalization::ILanguageExtensionSubtags> { define_guid(0x7D7DAF45, 0x368D, 0x4364, 0x85, 0x2B, 0xDE, 0xC9, 0x27, 0x3, 0x7B, 0x85);};
template<> struct uuid<Windows::Globalization::ILanguageFactory> { define_guid(0x9B0252AC, 0xC27, 0x44F8, 0xB7, 0x92, 0x97, 0x93, 0xFB, 0x66, 0xC6, 0x3E);};
template<> struct uuid<Windows::Globalization::ILanguageStatics2> { define_guid(0x30199F6E, 0x914B, 0x4B2A, 0x9D, 0x6E, 0xE3, 0xB0, 0xE2, 0x7D, 0xBE, 0x4F);};
template<> struct uuid<Windows::Globalization::ILanguageStatics> { define_guid(0xB23CD557, 0x865, 0x46D4, 0x89, 0xB8, 0xD5, 0x9B, 0xE8, 0x99, 0xF, 0xD);};
template<> struct uuid<Windows::Globalization::ICalendar> { define_guid(0xCA30221D, 0x86D9, 0x40FB, 0xA2, 0x6B, 0xD4, 0x4E, 0xB7, 0xCF, 0x8, 0xEA);};
template<> struct uuid<Windows::Globalization::ICalendarFactory2> { define_guid(0xB44B378C, 0xCA7E, 0x4590, 0x9E, 0x72, 0xEA, 0x2B, 0xEC, 0x1A, 0x51, 0x15);};
template<> struct uuid<Windows::Globalization::ICalendarFactory> { define_guid(0x83F58412, 0xE56B, 0x4C75, 0xA6, 0x6E, 0xF, 0x63, 0xD5, 0x77, 0x58, 0xA6);};
template<> struct uuid<Windows::Globalization::ITimeZoneOnCalendar> { define_guid(0xBB3C25E5, 0x46CF, 0x4317, 0xA3, 0xF5, 0x2, 0x62, 0x1A, 0xD5, 0x44, 0x78);};
template<> struct uuid<Windows::Globalization::IApplicationLanguagesStatics> { define_guid(0x75B40847, 0xA4C, 0x4A92, 0x95, 0x65, 0xFD, 0x63, 0xC9, 0x5F, 0x7A, 0xED);};
template<> struct uuid<Windows::Globalization::IApplicationLanguagesStatics2> { define_guid(0x1DF0DE4F, 0x72B, 0x4D7B, 0x8F, 0x6, 0xCB, 0x2D, 0xB4, 0xF, 0x2B, 0xB5);};
template<> struct uuid<Windows::Globalization::IJapanesePhoneticAnalyzerStatics> { define_guid(0x88AB9E90, 0x93DE, 0x41B2, 0xB4, 0xD5, 0x8E, 0xDB, 0x22, 0x7F, 0xD1, 0xC2);};
template<> struct uuid<Windows::Globalization::IJapanesePhoneme> { define_guid(0x2F6A9300, 0xE85B, 0x43E6, 0x89, 0x7D, 0x5D, 0x82, 0xF8, 0x62, 0xDF, 0x21);};

// types

namespace Windows { namespace Globalization {

// ICalendarIdentifiersStatics
struct ICalendarIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_Gregorian(HSTRING *value);
	virtual STDMETHODIMP _get_Hebrew(HSTRING *value);
	virtual STDMETHODIMP _get_Hijri(HSTRING *value);
	virtual STDMETHODIMP _get_Japanese(HSTRING *value);
	virtual STDMETHODIMP _get_Julian(HSTRING *value);
	virtual STDMETHODIMP _get_Korean(HSTRING *value);
	virtual STDMETHODIMP _get_Taiwan(HSTRING *value);
	virtual STDMETHODIMP _get_Thai(HSTRING *value);
	virtual STDMETHODIMP _get_UmAlQura(HSTRING *value);
};

// ICalendarIdentifiersStatics2
struct ICalendarIdentifiersStatics2 : IInspectable {
	virtual STDMETHODIMP _get_Persian(HSTRING *value);
};

// ICalendarIdentifiersStatics3
struct ICalendarIdentifiersStatics3 : IInspectable {
	virtual STDMETHODIMP _get_ChineseLunar(HSTRING *value);
	virtual STDMETHODIMP _get_JapaneseLunar(HSTRING *value);
	virtual STDMETHODIMP _get_KoreanLunar(HSTRING *value);
	virtual STDMETHODIMP _get_TaiwanLunar(HSTRING *value);
	virtual STDMETHODIMP _get_VietnameseLunar(HSTRING *value);
};

// CalendarIdentifiers
template<typename> struct CalendarIdentifiers_statics {
	static struct _Gregorian : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Gregorian(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Gregorian;
	static struct _Hebrew : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Hebrew(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Hebrew;
	static struct _Hijri : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Hijri(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Hijri;
	static struct _Japanese : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Japanese(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Japanese;
	static struct _Julian : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Julian(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Julian;
	static struct _Korean : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Korean(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Korean;
	static struct _Taiwan : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Taiwan(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Taiwan;
	static struct _Thai : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_Thai(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Thai;
	static struct _UmAlQura : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics>()->_get_UmAlQura(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UmAlQura;
	static struct _Persian : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics2>()->_get_Persian(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Persian;
	static struct _ChineseLunar : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics3>()->_get_ChineseLunar(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ChineseLunar;
	static struct _JapaneseLunar : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics3>()->_get_JapaneseLunar(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} JapaneseLunar;
	static struct _KoreanLunar : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics3>()->_get_KoreanLunar(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KoreanLunar;
	static struct _TaiwanLunar : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics3>()->_get_TaiwanLunar(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TaiwanLunar;
	static struct _VietnameseLunar : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CalendarIdentifiers, ICalendarIdentifiersStatics3>()->_get_VietnameseLunar(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} VietnameseLunar;
};
template<typename X> typename CalendarIdentifiers_statics<X>::_Gregorian CalendarIdentifiers_statics<X>::Gregorian;
template<typename X> typename CalendarIdentifiers_statics<X>::_Hebrew CalendarIdentifiers_statics<X>::Hebrew;
template<typename X> typename CalendarIdentifiers_statics<X>::_Hijri CalendarIdentifiers_statics<X>::Hijri;
template<typename X> typename CalendarIdentifiers_statics<X>::_Japanese CalendarIdentifiers_statics<X>::Japanese;
template<typename X> typename CalendarIdentifiers_statics<X>::_Julian CalendarIdentifiers_statics<X>::Julian;
template<typename X> typename CalendarIdentifiers_statics<X>::_Korean CalendarIdentifiers_statics<X>::Korean;
template<typename X> typename CalendarIdentifiers_statics<X>::_Taiwan CalendarIdentifiers_statics<X>::Taiwan;
template<typename X> typename CalendarIdentifiers_statics<X>::_Thai CalendarIdentifiers_statics<X>::Thai;
template<typename X> typename CalendarIdentifiers_statics<X>::_UmAlQura CalendarIdentifiers_statics<X>::UmAlQura;
template<typename X> typename CalendarIdentifiers_statics<X>::_Persian CalendarIdentifiers_statics<X>::Persian;
template<typename X> typename CalendarIdentifiers_statics<X>::_ChineseLunar CalendarIdentifiers_statics<X>::ChineseLunar;
template<typename X> typename CalendarIdentifiers_statics<X>::_JapaneseLunar CalendarIdentifiers_statics<X>::JapaneseLunar;
template<typename X> typename CalendarIdentifiers_statics<X>::_KoreanLunar CalendarIdentifiers_statics<X>::KoreanLunar;
template<typename X> typename CalendarIdentifiers_statics<X>::_TaiwanLunar CalendarIdentifiers_statics<X>::TaiwanLunar;
template<typename X> typename CalendarIdentifiers_statics<X>::_VietnameseLunar CalendarIdentifiers_statics<X>::VietnameseLunar;

template<typename X> struct statics<CalendarIdentifiers, X> : X, Windows::Globalization::CalendarIdentifiers_statics<void> {
	typedef typename X::root_type CalendarIdentifiers;
};
struct CalendarIdentifiers : generate<CalendarIdentifiers> {};

// IClockIdentifiersStatics
struct IClockIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_TwelveHour(HSTRING *value);
	virtual STDMETHODIMP _get_TwentyFourHour(HSTRING *value);
};

// ClockIdentifiers
template<typename> struct ClockIdentifiers_statics {
	static struct _TwelveHour : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ClockIdentifiers, IClockIdentifiersStatics>()->_get_TwelveHour(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TwelveHour;
	static struct _TwentyFourHour : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ClockIdentifiers, IClockIdentifiersStatics>()->_get_TwentyFourHour(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TwentyFourHour;
};
template<typename X> typename ClockIdentifiers_statics<X>::_TwelveHour ClockIdentifiers_statics<X>::TwelveHour;
template<typename X> typename ClockIdentifiers_statics<X>::_TwentyFourHour ClockIdentifiers_statics<X>::TwentyFourHour;

template<typename X> struct statics<ClockIdentifiers, X> : X, Windows::Globalization::ClockIdentifiers_statics<void> {
	typedef typename X::root_type ClockIdentifiers;
};
struct ClockIdentifiers : generate<ClockIdentifiers> {};

// INumeralSystemIdentifiersStatics
struct INumeralSystemIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_Arab(HSTRING *value);
	virtual STDMETHODIMP _get_ArabExt(HSTRING *value);
	virtual STDMETHODIMP _get_Bali(HSTRING *value);
	virtual STDMETHODIMP _get_Beng(HSTRING *value);
	virtual STDMETHODIMP _get_Cham(HSTRING *value);
	virtual STDMETHODIMP _get_Deva(HSTRING *value);
	virtual STDMETHODIMP _get_FullWide(HSTRING *value);
	virtual STDMETHODIMP _get_Gujr(HSTRING *value);
	virtual STDMETHODIMP _get_Guru(HSTRING *value);
	virtual STDMETHODIMP _get_HaniDec(HSTRING *value);
	virtual STDMETHODIMP _get_Java(HSTRING *value);
	virtual STDMETHODIMP _get_Kali(HSTRING *value);
	virtual STDMETHODIMP _get_Khmr(HSTRING *value);
	virtual STDMETHODIMP _get_Knda(HSTRING *value);
	virtual STDMETHODIMP _get_Lana(HSTRING *value);
	virtual STDMETHODIMP _get_LanaTham(HSTRING *value);
	virtual STDMETHODIMP _get_Laoo(HSTRING *value);
	virtual STDMETHODIMP _get_Latn(HSTRING *value);
	virtual STDMETHODIMP _get_Lepc(HSTRING *value);
	virtual STDMETHODIMP _get_Limb(HSTRING *value);
	virtual STDMETHODIMP _get_Mlym(HSTRING *value);
	virtual STDMETHODIMP _get_Mong(HSTRING *value);
	virtual STDMETHODIMP _get_Mtei(HSTRING *value);
	virtual STDMETHODIMP _get_Mymr(HSTRING *value);
	virtual STDMETHODIMP _get_MymrShan(HSTRING *value);
	virtual STDMETHODIMP _get_Nkoo(HSTRING *value);
	virtual STDMETHODIMP _get_Olck(HSTRING *value);
	virtual STDMETHODIMP _get_Orya(HSTRING *value);
	virtual STDMETHODIMP _get_Saur(HSTRING *value);
	virtual STDMETHODIMP _get_Sund(HSTRING *value);
	virtual STDMETHODIMP _get_Talu(HSTRING *value);
	virtual STDMETHODIMP _get_TamlDec(HSTRING *value);
	virtual STDMETHODIMP _get_Telu(HSTRING *value);
	virtual STDMETHODIMP _get_Thai(HSTRING *value);
	virtual STDMETHODIMP _get_Tibt(HSTRING *value);
	virtual STDMETHODIMP _get_Vaii(HSTRING *value);
};

// INumeralSystemIdentifiersStatics2
struct INumeralSystemIdentifiersStatics2 : IInspectable {
	virtual STDMETHODIMP _get_Brah(HSTRING *value);
	virtual STDMETHODIMP _get_Osma(HSTRING *value);
	virtual STDMETHODIMP _get_MathBold(HSTRING *value);
	virtual STDMETHODIMP _get_MathDbl(HSTRING *value);
	virtual STDMETHODIMP _get_MathSans(HSTRING *value);
	virtual STDMETHODIMP _get_MathSanb(HSTRING *value);
	virtual STDMETHODIMP _get_MathMono(HSTRING *value);
	virtual STDMETHODIMP _get_ZmthBold(HSTRING *value);
	virtual STDMETHODIMP _get_ZmthDbl(HSTRING *value);
	virtual STDMETHODIMP _get_ZmthSans(HSTRING *value);
	virtual STDMETHODIMP _get_ZmthSanb(HSTRING *value);
	virtual STDMETHODIMP _get_ZmthMono(HSTRING *value);
};

// NumeralSystemIdentifiers
template<typename> struct NumeralSystemIdentifiers_statics {
	static struct _Arab : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Arab(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Arab;
	static struct _ArabExt : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_ArabExt(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ArabExt;
	static struct _Bali : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Bali(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Bali;
	static struct _Beng : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Beng(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Beng;
	static struct _Cham : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Cham(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Cham;
	static struct _Deva : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Deva(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Deva;
	static struct _FullWide : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_FullWide(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FullWide;
	static struct _Gujr : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Gujr(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Gujr;
	static struct _Guru : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Guru(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Guru;
	static struct _HaniDec : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_HaniDec(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HaniDec;
	static struct _Java : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Java(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Java;
	static struct _Kali : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Kali(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Kali;
	static struct _Khmr : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Khmr(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Khmr;
	static struct _Knda : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Knda(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Knda;
	static struct _Lana : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Lana(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Lana;
	static struct _LanaTham : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_LanaTham(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LanaTham;
	static struct _Laoo : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Laoo(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Laoo;
	static struct _Latn : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Latn(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Latn;
	static struct _Lepc : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Lepc(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Lepc;
	static struct _Limb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Limb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Limb;
	static struct _Mlym : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Mlym(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mlym;
	static struct _Mong : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Mong(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mong;
	static struct _Mtei : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Mtei(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mtei;
	static struct _Mymr : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Mymr(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Mymr;
	static struct _MymrShan : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_MymrShan(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MymrShan;
	static struct _Nkoo : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Nkoo(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Nkoo;
	static struct _Olck : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Olck(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Olck;
	static struct _Orya : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Orya(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Orya;
	static struct _Saur : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Saur(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Saur;
	static struct _Sund : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Sund(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sund;
	static struct _Talu : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Talu(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Talu;
	static struct _TamlDec : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_TamlDec(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TamlDec;
	static struct _Telu : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Telu(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Telu;
	static struct _Thai : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Thai(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Thai;
	static struct _Tibt : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Tibt(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Tibt;
	static struct _Vaii : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>()->_get_Vaii(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Vaii;
	static struct _Brah : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_Brah(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Brah;
	static struct _MathBold : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_MathBold(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MathBold;
	static struct _MathDbl : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_MathDbl(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MathDbl;
	static struct _MathMono : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_MathMono(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MathMono;
	static struct _MathSanb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_MathSanb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MathSanb;
	static struct _MathSans : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_MathSans(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MathSans;
	static struct _Osma : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_Osma(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Osma;
	static struct _ZmthBold : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_ZmthBold(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZmthBold;
	static struct _ZmthDbl : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_ZmthDbl(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZmthDbl;
	static struct _ZmthMono : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_ZmthMono(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZmthMono;
	static struct _ZmthSanb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_ZmthSanb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZmthSanb;
	static struct _ZmthSans : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>()->_get_ZmthSans(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZmthSans;
};
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Arab NumeralSystemIdentifiers_statics<X>::Arab;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_ArabExt NumeralSystemIdentifiers_statics<X>::ArabExt;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Bali NumeralSystemIdentifiers_statics<X>::Bali;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Beng NumeralSystemIdentifiers_statics<X>::Beng;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Cham NumeralSystemIdentifiers_statics<X>::Cham;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Deva NumeralSystemIdentifiers_statics<X>::Deva;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_FullWide NumeralSystemIdentifiers_statics<X>::FullWide;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Gujr NumeralSystemIdentifiers_statics<X>::Gujr;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Guru NumeralSystemIdentifiers_statics<X>::Guru;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_HaniDec NumeralSystemIdentifiers_statics<X>::HaniDec;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Java NumeralSystemIdentifiers_statics<X>::Java;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Kali NumeralSystemIdentifiers_statics<X>::Kali;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Khmr NumeralSystemIdentifiers_statics<X>::Khmr;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Knda NumeralSystemIdentifiers_statics<X>::Knda;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Lana NumeralSystemIdentifiers_statics<X>::Lana;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_LanaTham NumeralSystemIdentifiers_statics<X>::LanaTham;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Laoo NumeralSystemIdentifiers_statics<X>::Laoo;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Latn NumeralSystemIdentifiers_statics<X>::Latn;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Lepc NumeralSystemIdentifiers_statics<X>::Lepc;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Limb NumeralSystemIdentifiers_statics<X>::Limb;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Mlym NumeralSystemIdentifiers_statics<X>::Mlym;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Mong NumeralSystemIdentifiers_statics<X>::Mong;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Mtei NumeralSystemIdentifiers_statics<X>::Mtei;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Mymr NumeralSystemIdentifiers_statics<X>::Mymr;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_MymrShan NumeralSystemIdentifiers_statics<X>::MymrShan;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Nkoo NumeralSystemIdentifiers_statics<X>::Nkoo;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Olck NumeralSystemIdentifiers_statics<X>::Olck;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Orya NumeralSystemIdentifiers_statics<X>::Orya;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Saur NumeralSystemIdentifiers_statics<X>::Saur;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Sund NumeralSystemIdentifiers_statics<X>::Sund;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Talu NumeralSystemIdentifiers_statics<X>::Talu;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_TamlDec NumeralSystemIdentifiers_statics<X>::TamlDec;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Telu NumeralSystemIdentifiers_statics<X>::Telu;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Thai NumeralSystemIdentifiers_statics<X>::Thai;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Tibt NumeralSystemIdentifiers_statics<X>::Tibt;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Vaii NumeralSystemIdentifiers_statics<X>::Vaii;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Brah NumeralSystemIdentifiers_statics<X>::Brah;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_MathBold NumeralSystemIdentifiers_statics<X>::MathBold;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_MathDbl NumeralSystemIdentifiers_statics<X>::MathDbl;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_MathMono NumeralSystemIdentifiers_statics<X>::MathMono;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_MathSanb NumeralSystemIdentifiers_statics<X>::MathSanb;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_MathSans NumeralSystemIdentifiers_statics<X>::MathSans;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_Osma NumeralSystemIdentifiers_statics<X>::Osma;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_ZmthBold NumeralSystemIdentifiers_statics<X>::ZmthBold;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_ZmthDbl NumeralSystemIdentifiers_statics<X>::ZmthDbl;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_ZmthMono NumeralSystemIdentifiers_statics<X>::ZmthMono;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_ZmthSanb NumeralSystemIdentifiers_statics<X>::ZmthSanb;
template<typename X> typename NumeralSystemIdentifiers_statics<X>::_ZmthSans NumeralSystemIdentifiers_statics<X>::ZmthSans;

template<typename X> struct statics<NumeralSystemIdentifiers, X> : X, Windows::Globalization::NumeralSystemIdentifiers_statics<void> {
	typedef typename X::root_type NumeralSystemIdentifiers;
};
struct NumeralSystemIdentifiers : generate<NumeralSystemIdentifiers> {};

// ICurrencyIdentifiersStatics
struct ICurrencyIdentifiersStatics : IInspectable {
	virtual STDMETHODIMP _get_AED(HSTRING *value);
	virtual STDMETHODIMP _get_AFN(HSTRING *value);
	virtual STDMETHODIMP _get_ALL(HSTRING *value);
	virtual STDMETHODIMP _get_AMD(HSTRING *value);
	virtual STDMETHODIMP _get_ANG(HSTRING *value);
	virtual STDMETHODIMP _get_AOA(HSTRING *value);
	virtual STDMETHODIMP _get_ARS(HSTRING *value);
	virtual STDMETHODIMP _get_AUD(HSTRING *value);
	virtual STDMETHODIMP _get_AWG(HSTRING *value);
	virtual STDMETHODIMP _get_AZN(HSTRING *value);
	virtual STDMETHODIMP _get_BAM(HSTRING *value);
	virtual STDMETHODIMP _get_BBD(HSTRING *value);
	virtual STDMETHODIMP _get_BDT(HSTRING *value);
	virtual STDMETHODIMP _get_BGN(HSTRING *value);
	virtual STDMETHODIMP _get_BHD(HSTRING *value);
	virtual STDMETHODIMP _get_BIF(HSTRING *value);
	virtual STDMETHODIMP _get_BMD(HSTRING *value);
	virtual STDMETHODIMP _get_BND(HSTRING *value);
	virtual STDMETHODIMP _get_BOB(HSTRING *value);
	virtual STDMETHODIMP _get_BRL(HSTRING *value);
	virtual STDMETHODIMP _get_BSD(HSTRING *value);
	virtual STDMETHODIMP _get_BTN(HSTRING *value);
	virtual STDMETHODIMP _get_BWP(HSTRING *value);
	virtual STDMETHODIMP _get_BYR(HSTRING *value);
	virtual STDMETHODIMP _get_BZD(HSTRING *value);
	virtual STDMETHODIMP _get_CAD(HSTRING *value);
	virtual STDMETHODIMP _get_CDF(HSTRING *value);
	virtual STDMETHODIMP _get_CHF(HSTRING *value);
	virtual STDMETHODIMP _get_CLP(HSTRING *value);
	virtual STDMETHODIMP _get_CNY(HSTRING *value);
	virtual STDMETHODIMP _get_COP(HSTRING *value);
	virtual STDMETHODIMP _get_CRC(HSTRING *value);
	virtual STDMETHODIMP _get_CUP(HSTRING *value);
	virtual STDMETHODIMP _get_CVE(HSTRING *value);
	virtual STDMETHODIMP _get_CZK(HSTRING *value);
	virtual STDMETHODIMP _get_DJF(HSTRING *value);
	virtual STDMETHODIMP _get_DKK(HSTRING *value);
	virtual STDMETHODIMP _get_DOP(HSTRING *value);
	virtual STDMETHODIMP _get_DZD(HSTRING *value);
	virtual STDMETHODIMP _get_EGP(HSTRING *value);
	virtual STDMETHODIMP _get_ERN(HSTRING *value);
	virtual STDMETHODIMP _get_ETB(HSTRING *value);
	virtual STDMETHODIMP _get_EUR(HSTRING *value);
	virtual STDMETHODIMP _get_FJD(HSTRING *value);
	virtual STDMETHODIMP _get_FKP(HSTRING *value);
	virtual STDMETHODIMP _get_GBP(HSTRING *value);
	virtual STDMETHODIMP _get_GEL(HSTRING *value);
	virtual STDMETHODIMP _get_GHS(HSTRING *value);
	virtual STDMETHODIMP _get_GIP(HSTRING *value);
	virtual STDMETHODIMP _get_GMD(HSTRING *value);
	virtual STDMETHODIMP _get_GNF(HSTRING *value);
	virtual STDMETHODIMP _get_GTQ(HSTRING *value);
	virtual STDMETHODIMP _get_GYD(HSTRING *value);
	virtual STDMETHODIMP _get_HKD(HSTRING *value);
	virtual STDMETHODIMP _get_HNL(HSTRING *value);
	virtual STDMETHODIMP _get_HRK(HSTRING *value);
	virtual STDMETHODIMP _get_HTG(HSTRING *value);
	virtual STDMETHODIMP _get_HUF(HSTRING *value);
	virtual STDMETHODIMP _get_IDR(HSTRING *value);
	virtual STDMETHODIMP _get_ILS(HSTRING *value);
	virtual STDMETHODIMP _get_INR(HSTRING *value);
	virtual STDMETHODIMP _get_IQD(HSTRING *value);
	virtual STDMETHODIMP _get_IRR(HSTRING *value);
	virtual STDMETHODIMP _get_ISK(HSTRING *value);
	virtual STDMETHODIMP _get_JMD(HSTRING *value);
	virtual STDMETHODIMP _get_JOD(HSTRING *value);
	virtual STDMETHODIMP _get_JPY(HSTRING *value);
	virtual STDMETHODIMP _get_KES(HSTRING *value);
	virtual STDMETHODIMP _get_KGS(HSTRING *value);
	virtual STDMETHODIMP _get_KHR(HSTRING *value);
	virtual STDMETHODIMP _get_KMF(HSTRING *value);
	virtual STDMETHODIMP _get_KPW(HSTRING *value);
	virtual STDMETHODIMP _get_KRW(HSTRING *value);
	virtual STDMETHODIMP _get_KWD(HSTRING *value);
	virtual STDMETHODIMP _get_KYD(HSTRING *value);
	virtual STDMETHODIMP _get_KZT(HSTRING *value);
	virtual STDMETHODIMP _get_LAK(HSTRING *value);
	virtual STDMETHODIMP _get_LBP(HSTRING *value);
	virtual STDMETHODIMP _get_LKR(HSTRING *value);
	virtual STDMETHODIMP _get_LRD(HSTRING *value);
	virtual STDMETHODIMP _get_LSL(HSTRING *value);
	virtual STDMETHODIMP _get_LTL(HSTRING *value);
	virtual STDMETHODIMP _get_LVL(HSTRING *value);
	virtual STDMETHODIMP _get_LYD(HSTRING *value);
	virtual STDMETHODIMP _get_MAD(HSTRING *value);
	virtual STDMETHODIMP _get_MDL(HSTRING *value);
	virtual STDMETHODIMP _get_MGA(HSTRING *value);
	virtual STDMETHODIMP _get_MKD(HSTRING *value);
	virtual STDMETHODIMP _get_MMK(HSTRING *value);
	virtual STDMETHODIMP _get_MNT(HSTRING *value);
	virtual STDMETHODIMP _get_MOP(HSTRING *value);
	virtual STDMETHODIMP _get_MRO(HSTRING *value);
	virtual STDMETHODIMP _get_MUR(HSTRING *value);
	virtual STDMETHODIMP _get_MVR(HSTRING *value);
	virtual STDMETHODIMP _get_MWK(HSTRING *value);
	virtual STDMETHODIMP _get_MXN(HSTRING *value);
	virtual STDMETHODIMP _get_MYR(HSTRING *value);
	virtual STDMETHODIMP _get_MZN(HSTRING *value);
	virtual STDMETHODIMP _get_NAD(HSTRING *value);
	virtual STDMETHODIMP _get_NGN(HSTRING *value);
	virtual STDMETHODIMP _get_NIO(HSTRING *value);
	virtual STDMETHODIMP _get_NOK(HSTRING *value);
	virtual STDMETHODIMP _get_NPR(HSTRING *value);
	virtual STDMETHODIMP _get_NZD(HSTRING *value);
	virtual STDMETHODIMP _get_OMR(HSTRING *value);
	virtual STDMETHODIMP _get_PAB(HSTRING *value);
	virtual STDMETHODIMP _get_PEN(HSTRING *value);
	virtual STDMETHODIMP _get_PGK(HSTRING *value);
	virtual STDMETHODIMP _get_PHP(HSTRING *value);
	virtual STDMETHODIMP _get_PKR(HSTRING *value);
	virtual STDMETHODIMP _get_PLN(HSTRING *value);
	virtual STDMETHODIMP _get_PYG(HSTRING *value);
	virtual STDMETHODIMP _get_QAR(HSTRING *value);
	virtual STDMETHODIMP _get_RON(HSTRING *value);
	virtual STDMETHODIMP _get_RSD(HSTRING *value);
	virtual STDMETHODIMP _get_RUB(HSTRING *value);
	virtual STDMETHODIMP _get_RWF(HSTRING *value);
	virtual STDMETHODIMP _get_SAR(HSTRING *value);
	virtual STDMETHODIMP _get_SBD(HSTRING *value);
	virtual STDMETHODIMP _get_SCR(HSTRING *value);
	virtual STDMETHODIMP _get_SDG(HSTRING *value);
	virtual STDMETHODIMP _get_SEK(HSTRING *value);
	virtual STDMETHODIMP _get_SGD(HSTRING *value);
	virtual STDMETHODIMP _get_SHP(HSTRING *value);
	virtual STDMETHODIMP _get_SLL(HSTRING *value);
	virtual STDMETHODIMP _get_SOS(HSTRING *value);
	virtual STDMETHODIMP _get_SRD(HSTRING *value);
	virtual STDMETHODIMP _get_STD(HSTRING *value);
	virtual STDMETHODIMP _get_SYP(HSTRING *value);
	virtual STDMETHODIMP _get_SZL(HSTRING *value);
	virtual STDMETHODIMP _get_THB(HSTRING *value);
	virtual STDMETHODIMP _get_TJS(HSTRING *value);
	virtual STDMETHODIMP _get_TMT(HSTRING *value);
	virtual STDMETHODIMP _get_TND(HSTRING *value);
	virtual STDMETHODIMP _get_TOP(HSTRING *value);
	virtual STDMETHODIMP _get_TRY(HSTRING *value);
	virtual STDMETHODIMP _get_TTD(HSTRING *value);
	virtual STDMETHODIMP _get_TWD(HSTRING *value);
	virtual STDMETHODIMP _get_TZS(HSTRING *value);
	virtual STDMETHODIMP _get_UAH(HSTRING *value);
	virtual STDMETHODIMP _get_UGX(HSTRING *value);
	virtual STDMETHODIMP _get_USD(HSTRING *value);
	virtual STDMETHODIMP _get_UYU(HSTRING *value);
	virtual STDMETHODIMP _get_UZS(HSTRING *value);
	virtual STDMETHODIMP _get_VEF(HSTRING *value);
	virtual STDMETHODIMP _get_VND(HSTRING *value);
	virtual STDMETHODIMP _get_VUV(HSTRING *value);
	virtual STDMETHODIMP _get_WST(HSTRING *value);
	virtual STDMETHODIMP _get_XAF(HSTRING *value);
	virtual STDMETHODIMP _get_XCD(HSTRING *value);
	virtual STDMETHODIMP _get_XOF(HSTRING *value);
	virtual STDMETHODIMP _get_XPF(HSTRING *value);
	virtual STDMETHODIMP _get_XXX(HSTRING *value);
	virtual STDMETHODIMP _get_YER(HSTRING *value);
	virtual STDMETHODIMP _get_ZAR(HSTRING *value);
	virtual STDMETHODIMP _get_ZMW(HSTRING *value);
	virtual STDMETHODIMP _get_ZWL(HSTRING *value);
};

// ICurrencyIdentifiersStatics2
struct ICurrencyIdentifiersStatics2 : IInspectable {
	virtual STDMETHODIMP _get_BYN(HSTRING *value);
};

// CurrencyIdentifiers
template<typename> struct CurrencyIdentifiers_statics {
	static struct _AED : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_AED(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AED;
	static struct _AFN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_AFN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AFN;
	static struct _ALL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ALL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ALL;
	static struct _AMD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_AMD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AMD;
	static struct _ANG : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ANG(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ANG;
	static struct _AOA : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_AOA(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AOA;
	static struct _ARS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ARS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ARS;
	static struct _AUD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_AUD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AUD;
	static struct _AWG : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_AWG(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AWG;
	static struct _AZN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_AZN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AZN;
	static struct _BAM : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BAM(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BAM;
	static struct _BBD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BBD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BBD;
	static struct _BDT : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BDT(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BDT;
	static struct _BGN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BGN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BGN;
	static struct _BHD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BHD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BHD;
	static struct _BIF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BIF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BIF;
	static struct _BMD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BMD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BMD;
	static struct _BND : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BND(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BND;
	static struct _BOB : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BOB(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BOB;
	static struct _BRL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BRL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BRL;
	static struct _BSD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BSD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BSD;
	static struct _BTN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BTN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BTN;
	static struct _BWP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BWP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BWP;
	static struct _BYR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BYR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BYR;
	static struct _BZD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_BZD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BZD;
	static struct _CAD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CAD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CAD;
	static struct _CDF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CDF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CDF;
	static struct _CHF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CHF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CHF;
	static struct _CLP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CLP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CLP;
	static struct _CNY : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CNY(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CNY;
	static struct _COP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_COP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} COP;
	static struct _CRC : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CRC(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CRC;
	static struct _CUP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CUP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CUP;
	static struct _CVE : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CVE(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CVE;
	static struct _CZK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_CZK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CZK;
	static struct _DJF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_DJF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DJF;
	static struct _DKK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_DKK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DKK;
	static struct _DOP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_DOP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DOP;
	static struct _DZD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_DZD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DZD;
	static struct _EGP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_EGP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EGP;
	static struct _ERN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ERN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ERN;
	static struct _ETB : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ETB(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ETB;
	static struct _EUR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_EUR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EUR;
	static struct _FJD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_FJD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FJD;
	static struct _FKP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_FKP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FKP;
	static struct _GBP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GBP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GBP;
	static struct _GEL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GEL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GEL;
	static struct _GHS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GHS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GHS;
	static struct _GIP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GIP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GIP;
	static struct _GMD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GMD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GMD;
	static struct _GNF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GNF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GNF;
	static struct _GTQ : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GTQ(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GTQ;
	static struct _GYD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_GYD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} GYD;
	static struct _HKD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_HKD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HKD;
	static struct _HNL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_HNL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HNL;
	static struct _HRK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_HRK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HRK;
	static struct _HTG : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_HTG(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HTG;
	static struct _HUF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_HUF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HUF;
	static struct _IDR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_IDR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IDR;
	static struct _ILS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ILS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ILS;
	static struct _INR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_INR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} INR;
	static struct _IQD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_IQD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IQD;
	static struct _IRR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_IRR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IRR;
	static struct _ISK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ISK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ISK;
	static struct _JMD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_JMD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} JMD;
	static struct _JOD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_JOD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} JOD;
	static struct _JPY : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_JPY(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} JPY;
	static struct _KES : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KES(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KES;
	static struct _KGS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KGS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KGS;
	static struct _KHR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KHR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KHR;
	static struct _KMF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KMF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KMF;
	static struct _KPW : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KPW(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KPW;
	static struct _KRW : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KRW(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KRW;
	static struct _KWD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KWD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KWD;
	static struct _KYD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KYD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KYD;
	static struct _KZT : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_KZT(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} KZT;
	static struct _LAK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LAK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LAK;
	static struct _LBP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LBP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LBP;
	static struct _LKR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LKR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LKR;
	static struct _LRD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LRD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LRD;
	static struct _LSL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LSL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LSL;
	static struct _LTL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LTL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LTL;
	static struct _LVL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LVL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LVL;
	static struct _LYD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_LYD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LYD;
	static struct _MAD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MAD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MAD;
	static struct _MDL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MDL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MDL;
	static struct _MGA : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MGA(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MGA;
	static struct _MKD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MKD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MKD;
	static struct _MMK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MMK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MMK;
	static struct _MNT : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MNT(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MNT;
	static struct _MOP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MOP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MOP;
	static struct _MRO : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MRO(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MRO;
	static struct _MUR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MUR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MUR;
	static struct _MVR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MVR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MVR;
	static struct _MWK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MWK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MWK;
	static struct _MXN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MXN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MXN;
	static struct _MYR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MYR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MYR;
	static struct _MZN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_MZN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MZN;
	static struct _NAD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_NAD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NAD;
	static struct _NGN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_NGN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NGN;
	static struct _NIO : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_NIO(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NIO;
	static struct _NOK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_NOK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NOK;
	static struct _NPR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_NPR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NPR;
	static struct _NZD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_NZD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NZD;
	static struct _OMR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_OMR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} OMR;
	static struct _PAB : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_PAB(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PAB;
	static struct _PEN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_PEN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PEN;
	static struct _PGK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_PGK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PGK;
	static struct _PHP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_PHP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PHP;
	static struct _PKR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_PKR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PKR;
	static struct _PLN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_PLN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PLN;
	static struct _PYG : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_PYG(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PYG;
	static struct _QAR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_QAR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} QAR;
	static struct _RON : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_RON(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RON;
	static struct _RSD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_RSD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RSD;
	static struct _RUB : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_RUB(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RUB;
	static struct _RWF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_RWF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RWF;
	static struct _SAR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SAR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SAR;
	static struct _SBD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SBD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SBD;
	static struct _SCR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SCR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SCR;
	static struct _SDG : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SDG(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SDG;
	static struct _SEK : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SEK(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SEK;
	static struct _SGD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SGD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SGD;
	static struct _SHP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SHP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SHP;
	static struct _SLL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SLL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SLL;
	static struct _SOS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SOS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SOS;
	static struct _SRD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SRD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SRD;
	static struct _STD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_STD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} STD;
	static struct _SYP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SYP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SYP;
	static struct _SZL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_SZL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SZL;
	static struct _THB : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_THB(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} THB;
	static struct _TJS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TJS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TJS;
	static struct _TMT : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TMT(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TMT;
	static struct _TND : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TND(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TND;
	static struct _TOP : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TOP(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TOP;
	static struct _TRY : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TRY(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TRY;
	static struct _TTD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TTD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TTD;
	static struct _TWD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TWD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TWD;
	static struct _TZS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_TZS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TZS;
	static struct _UAH : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_UAH(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UAH;
	static struct _UGX : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_UGX(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UGX;
	static struct _USD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_USD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} USD;
	static struct _UYU : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_UYU(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UYU;
	static struct _UZS : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_UZS(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UZS;
	static struct _VEF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_VEF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} VEF;
	static struct _VND : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_VND(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} VND;
	static struct _VUV : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_VUV(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} VUV;
	static struct _WST : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_WST(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} WST;
	static struct _XAF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_XAF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} XAF;
	static struct _XCD : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_XCD(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} XCD;
	static struct _XOF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_XOF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} XOF;
	static struct _XPF : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_XPF(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} XPF;
	static struct _XXX : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_XXX(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} XXX;
	static struct _YER : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_YER(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} YER;
	static struct _ZAR : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ZAR(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZAR;
	static struct _ZMW : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ZMW(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZMW;
	static struct _ZWL : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>()->_get_ZWL(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ZWL;
	static struct _BYN : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<CurrencyIdentifiers, ICurrencyIdentifiersStatics2>()->_get_BYN(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BYN;
};
template<typename X> typename CurrencyIdentifiers_statics<X>::_AED CurrencyIdentifiers_statics<X>::AED;
template<typename X> typename CurrencyIdentifiers_statics<X>::_AFN CurrencyIdentifiers_statics<X>::AFN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ALL CurrencyIdentifiers_statics<X>::ALL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_AMD CurrencyIdentifiers_statics<X>::AMD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ANG CurrencyIdentifiers_statics<X>::ANG;
template<typename X> typename CurrencyIdentifiers_statics<X>::_AOA CurrencyIdentifiers_statics<X>::AOA;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ARS CurrencyIdentifiers_statics<X>::ARS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_AUD CurrencyIdentifiers_statics<X>::AUD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_AWG CurrencyIdentifiers_statics<X>::AWG;
template<typename X> typename CurrencyIdentifiers_statics<X>::_AZN CurrencyIdentifiers_statics<X>::AZN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BAM CurrencyIdentifiers_statics<X>::BAM;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BBD CurrencyIdentifiers_statics<X>::BBD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BDT CurrencyIdentifiers_statics<X>::BDT;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BGN CurrencyIdentifiers_statics<X>::BGN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BHD CurrencyIdentifiers_statics<X>::BHD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BIF CurrencyIdentifiers_statics<X>::BIF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BMD CurrencyIdentifiers_statics<X>::BMD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BND CurrencyIdentifiers_statics<X>::BND;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BOB CurrencyIdentifiers_statics<X>::BOB;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BRL CurrencyIdentifiers_statics<X>::BRL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BSD CurrencyIdentifiers_statics<X>::BSD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BTN CurrencyIdentifiers_statics<X>::BTN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BWP CurrencyIdentifiers_statics<X>::BWP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BYR CurrencyIdentifiers_statics<X>::BYR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BZD CurrencyIdentifiers_statics<X>::BZD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CAD CurrencyIdentifiers_statics<X>::CAD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CDF CurrencyIdentifiers_statics<X>::CDF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CHF CurrencyIdentifiers_statics<X>::CHF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CLP CurrencyIdentifiers_statics<X>::CLP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CNY CurrencyIdentifiers_statics<X>::CNY;
template<typename X> typename CurrencyIdentifiers_statics<X>::_COP CurrencyIdentifiers_statics<X>::COP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CRC CurrencyIdentifiers_statics<X>::CRC;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CUP CurrencyIdentifiers_statics<X>::CUP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CVE CurrencyIdentifiers_statics<X>::CVE;
template<typename X> typename CurrencyIdentifiers_statics<X>::_CZK CurrencyIdentifiers_statics<X>::CZK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_DJF CurrencyIdentifiers_statics<X>::DJF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_DKK CurrencyIdentifiers_statics<X>::DKK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_DOP CurrencyIdentifiers_statics<X>::DOP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_DZD CurrencyIdentifiers_statics<X>::DZD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_EGP CurrencyIdentifiers_statics<X>::EGP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ERN CurrencyIdentifiers_statics<X>::ERN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ETB CurrencyIdentifiers_statics<X>::ETB;
template<typename X> typename CurrencyIdentifiers_statics<X>::_EUR CurrencyIdentifiers_statics<X>::EUR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_FJD CurrencyIdentifiers_statics<X>::FJD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_FKP CurrencyIdentifiers_statics<X>::FKP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GBP CurrencyIdentifiers_statics<X>::GBP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GEL CurrencyIdentifiers_statics<X>::GEL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GHS CurrencyIdentifiers_statics<X>::GHS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GIP CurrencyIdentifiers_statics<X>::GIP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GMD CurrencyIdentifiers_statics<X>::GMD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GNF CurrencyIdentifiers_statics<X>::GNF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GTQ CurrencyIdentifiers_statics<X>::GTQ;
template<typename X> typename CurrencyIdentifiers_statics<X>::_GYD CurrencyIdentifiers_statics<X>::GYD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_HKD CurrencyIdentifiers_statics<X>::HKD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_HNL CurrencyIdentifiers_statics<X>::HNL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_HRK CurrencyIdentifiers_statics<X>::HRK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_HTG CurrencyIdentifiers_statics<X>::HTG;
template<typename X> typename CurrencyIdentifiers_statics<X>::_HUF CurrencyIdentifiers_statics<X>::HUF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_IDR CurrencyIdentifiers_statics<X>::IDR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ILS CurrencyIdentifiers_statics<X>::ILS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_INR CurrencyIdentifiers_statics<X>::INR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_IQD CurrencyIdentifiers_statics<X>::IQD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_IRR CurrencyIdentifiers_statics<X>::IRR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ISK CurrencyIdentifiers_statics<X>::ISK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_JMD CurrencyIdentifiers_statics<X>::JMD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_JOD CurrencyIdentifiers_statics<X>::JOD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_JPY CurrencyIdentifiers_statics<X>::JPY;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KES CurrencyIdentifiers_statics<X>::KES;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KGS CurrencyIdentifiers_statics<X>::KGS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KHR CurrencyIdentifiers_statics<X>::KHR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KMF CurrencyIdentifiers_statics<X>::KMF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KPW CurrencyIdentifiers_statics<X>::KPW;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KRW CurrencyIdentifiers_statics<X>::KRW;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KWD CurrencyIdentifiers_statics<X>::KWD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KYD CurrencyIdentifiers_statics<X>::KYD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_KZT CurrencyIdentifiers_statics<X>::KZT;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LAK CurrencyIdentifiers_statics<X>::LAK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LBP CurrencyIdentifiers_statics<X>::LBP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LKR CurrencyIdentifiers_statics<X>::LKR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LRD CurrencyIdentifiers_statics<X>::LRD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LSL CurrencyIdentifiers_statics<X>::LSL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LTL CurrencyIdentifiers_statics<X>::LTL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LVL CurrencyIdentifiers_statics<X>::LVL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_LYD CurrencyIdentifiers_statics<X>::LYD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MAD CurrencyIdentifiers_statics<X>::MAD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MDL CurrencyIdentifiers_statics<X>::MDL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MGA CurrencyIdentifiers_statics<X>::MGA;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MKD CurrencyIdentifiers_statics<X>::MKD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MMK CurrencyIdentifiers_statics<X>::MMK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MNT CurrencyIdentifiers_statics<X>::MNT;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MOP CurrencyIdentifiers_statics<X>::MOP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MRO CurrencyIdentifiers_statics<X>::MRO;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MUR CurrencyIdentifiers_statics<X>::MUR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MVR CurrencyIdentifiers_statics<X>::MVR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MWK CurrencyIdentifiers_statics<X>::MWK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MXN CurrencyIdentifiers_statics<X>::MXN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MYR CurrencyIdentifiers_statics<X>::MYR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_MZN CurrencyIdentifiers_statics<X>::MZN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_NAD CurrencyIdentifiers_statics<X>::NAD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_NGN CurrencyIdentifiers_statics<X>::NGN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_NIO CurrencyIdentifiers_statics<X>::NIO;
template<typename X> typename CurrencyIdentifiers_statics<X>::_NOK CurrencyIdentifiers_statics<X>::NOK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_NPR CurrencyIdentifiers_statics<X>::NPR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_NZD CurrencyIdentifiers_statics<X>::NZD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_OMR CurrencyIdentifiers_statics<X>::OMR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_PAB CurrencyIdentifiers_statics<X>::PAB;
template<typename X> typename CurrencyIdentifiers_statics<X>::_PEN CurrencyIdentifiers_statics<X>::PEN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_PGK CurrencyIdentifiers_statics<X>::PGK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_PHP CurrencyIdentifiers_statics<X>::PHP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_PKR CurrencyIdentifiers_statics<X>::PKR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_PLN CurrencyIdentifiers_statics<X>::PLN;
template<typename X> typename CurrencyIdentifiers_statics<X>::_PYG CurrencyIdentifiers_statics<X>::PYG;
template<typename X> typename CurrencyIdentifiers_statics<X>::_QAR CurrencyIdentifiers_statics<X>::QAR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_RON CurrencyIdentifiers_statics<X>::RON;
template<typename X> typename CurrencyIdentifiers_statics<X>::_RSD CurrencyIdentifiers_statics<X>::RSD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_RUB CurrencyIdentifiers_statics<X>::RUB;
template<typename X> typename CurrencyIdentifiers_statics<X>::_RWF CurrencyIdentifiers_statics<X>::RWF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SAR CurrencyIdentifiers_statics<X>::SAR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SBD CurrencyIdentifiers_statics<X>::SBD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SCR CurrencyIdentifiers_statics<X>::SCR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SDG CurrencyIdentifiers_statics<X>::SDG;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SEK CurrencyIdentifiers_statics<X>::SEK;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SGD CurrencyIdentifiers_statics<X>::SGD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SHP CurrencyIdentifiers_statics<X>::SHP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SLL CurrencyIdentifiers_statics<X>::SLL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SOS CurrencyIdentifiers_statics<X>::SOS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SRD CurrencyIdentifiers_statics<X>::SRD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_STD CurrencyIdentifiers_statics<X>::STD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SYP CurrencyIdentifiers_statics<X>::SYP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_SZL CurrencyIdentifiers_statics<X>::SZL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_THB CurrencyIdentifiers_statics<X>::THB;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TJS CurrencyIdentifiers_statics<X>::TJS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TMT CurrencyIdentifiers_statics<X>::TMT;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TND CurrencyIdentifiers_statics<X>::TND;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TOP CurrencyIdentifiers_statics<X>::TOP;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TRY CurrencyIdentifiers_statics<X>::TRY;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TTD CurrencyIdentifiers_statics<X>::TTD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TWD CurrencyIdentifiers_statics<X>::TWD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_TZS CurrencyIdentifiers_statics<X>::TZS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_UAH CurrencyIdentifiers_statics<X>::UAH;
template<typename X> typename CurrencyIdentifiers_statics<X>::_UGX CurrencyIdentifiers_statics<X>::UGX;
template<typename X> typename CurrencyIdentifiers_statics<X>::_USD CurrencyIdentifiers_statics<X>::USD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_UYU CurrencyIdentifiers_statics<X>::UYU;
template<typename X> typename CurrencyIdentifiers_statics<X>::_UZS CurrencyIdentifiers_statics<X>::UZS;
template<typename X> typename CurrencyIdentifiers_statics<X>::_VEF CurrencyIdentifiers_statics<X>::VEF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_VND CurrencyIdentifiers_statics<X>::VND;
template<typename X> typename CurrencyIdentifiers_statics<X>::_VUV CurrencyIdentifiers_statics<X>::VUV;
template<typename X> typename CurrencyIdentifiers_statics<X>::_WST CurrencyIdentifiers_statics<X>::WST;
template<typename X> typename CurrencyIdentifiers_statics<X>::_XAF CurrencyIdentifiers_statics<X>::XAF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_XCD CurrencyIdentifiers_statics<X>::XCD;
template<typename X> typename CurrencyIdentifiers_statics<X>::_XOF CurrencyIdentifiers_statics<X>::XOF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_XPF CurrencyIdentifiers_statics<X>::XPF;
template<typename X> typename CurrencyIdentifiers_statics<X>::_XXX CurrencyIdentifiers_statics<X>::XXX;
template<typename X> typename CurrencyIdentifiers_statics<X>::_YER CurrencyIdentifiers_statics<X>::YER;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ZAR CurrencyIdentifiers_statics<X>::ZAR;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ZMW CurrencyIdentifiers_statics<X>::ZMW;
template<typename X> typename CurrencyIdentifiers_statics<X>::_ZWL CurrencyIdentifiers_statics<X>::ZWL;
template<typename X> typename CurrencyIdentifiers_statics<X>::_BYN CurrencyIdentifiers_statics<X>::BYN;

template<typename X> struct statics<CurrencyIdentifiers, X> : X, Windows::Globalization::CurrencyIdentifiers_statics<void> {
	typedef typename X::root_type CurrencyIdentifiers;
};
struct CurrencyIdentifiers : generate<CurrencyIdentifiers> {};

// IGeographicRegion
struct IGeographicRegion_raw : IInspectable {
	virtual STDMETHODIMP _get_Code(HSTRING *value);
	virtual STDMETHODIMP _get_CodeTwoLetter(HSTRING *value);
	virtual STDMETHODIMP _get_CodeThreeLetter(HSTRING *value);
	virtual STDMETHODIMP _get_CodeThreeDigit(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_NativeName(HSTRING *value);
	virtual STDMETHODIMP _get_CurrenciesInUse(Foundation::Collections::IVectorView<HSTRING>* *value);
};
template<typename X> struct IGeographicRegion_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGeographicRegion_adaptor::Code)->_get_Code(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Code;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGeographicRegion_adaptor::CodeThreeDigit)->_get_CodeThreeDigit(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CodeThreeDigit;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGeographicRegion_adaptor::CodeThreeLetter)->_get_CodeThreeLetter(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CodeThreeLetter;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGeographicRegion_adaptor::CodeTwoLetter)->_get_CodeTwoLetter(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CodeTwoLetter;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IGeographicRegion_adaptor::CurrenciesInUse)->_get_CurrenciesInUse(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} CurrenciesInUse;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGeographicRegion_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGeographicRegion_adaptor::NativeName)->_get_NativeName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NativeName;
	};
	IGeographicRegion_adaptor() {}
};
template<typename X> struct adapt<IGeographicRegion, X> : Windows::Globalization::IGeographicRegion_adaptor<X> { typedef adapt IGeographicRegion; };
struct IGeographicRegion : IGeographicRegion_raw, generate<IGeographicRegion> {};

// IGeographicRegionFactory
struct IGeographicRegionFactory : IInspectable {
	virtual STDMETHODIMP _CreateGeographicRegion(HSTRING geographicRegionCode, GeographicRegion* *result);
};

// IGeographicRegionStatics
struct IGeographicRegionStatics : IInspectable {
	virtual STDMETHODIMP _IsSupported(HSTRING geographicRegionCode, bool *result);
};

// GeographicRegion
template<typename> struct GeographicRegion_statics {
	static bool IsSupported(hstring_ref geographicRegionCode) { bool result; hrcheck(get_activation_factory<GeographicRegion, IGeographicRegionStatics>()->_IsSupported(geographicRegionCode, &result)); return result; }
	static GeographicRegion *activate(hstring_ref geographicRegionCode) { GeographicRegion *result; hrcheck(get_activation_factory<GeographicRegion, IGeographicRegionFactory>()->_CreateGeographicRegion(geographicRegionCode, &result)); return result; }
	static GeographicRegion *activate() { GeographicRegion *t; get_activation_factory<GeographicRegion>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<GeographicRegion, X> : X, Windows::Globalization::GeographicRegion_statics<void> {
	using Windows::Globalization::GeographicRegion_statics<void>::activate;
	typedef typename X::root_type GeographicRegion;
};
struct GeographicRegion : generate<GeographicRegion> {};

// ILanguage
struct ILanguage_raw : IInspectable {
	virtual STDMETHODIMP _get_LanguageTag(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_NativeName(HSTRING *value);
	virtual STDMETHODIMP _get_Script(HSTRING *value);
};
template<typename X> struct ILanguage_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILanguage_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILanguage_adaptor::LanguageTag)->_get_LanguageTag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LanguageTag;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILanguage_adaptor::NativeName)->_get_NativeName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NativeName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILanguage_adaptor::Script)->_get_Script(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Script;
	};
	ILanguage_adaptor() {}
};
template<typename X> struct adapt<ILanguage, X> : Windows::Globalization::ILanguage_adaptor<X> { typedef adapt ILanguage; };
struct ILanguage : ILanguage_raw, generate<ILanguage> {};

// ILanguage2
struct ILanguage2_raw : IInspectable {
	virtual STDMETHODIMP _get_LayoutDirection(LanguageLayoutDirection *value);
};
template<typename X> struct ILanguage2_adaptor : X {
	union {
		struct : property {
			LanguageLayoutDirection get() { LanguageLayoutDirection value; hrcheck(enc(&ILanguage2_adaptor::LayoutDirection)->_get_LayoutDirection(&value)); return value; }
			LanguageLayoutDirection operator()() { return get(); }
			operator LanguageLayoutDirection () { return get(); }
		} LayoutDirection;
	};
	ILanguage2_adaptor() {}
};
template<typename X> struct adapt<ILanguage2, X> : Windows::Globalization::ILanguage2_adaptor<X> { typedef adapt ILanguage2; };
struct ILanguage2 : ILanguage2_raw, generate<ILanguage2> {};

// ILanguageExtensionSubtags
struct ILanguageExtensionSubtags_raw : IInspectable {
	virtual STDMETHODIMP _GetExtensionSubtags(HSTRING singleton, Foundation::Collections::IVectorView<HSTRING>* *value);
};
template<typename X> struct ILanguageExtensionSubtags_adaptor : X {
	ptr<Foundation::Collections::IVectorView<hstring>> GetExtensionSubtags(hstring_ref singleton) { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(X::get()->_GetExtensionSubtags(singleton, &value)); return from_abi(value); }
};
template<typename X> struct adapt<ILanguageExtensionSubtags, X> : Windows::Globalization::ILanguageExtensionSubtags_adaptor<X> { typedef adapt ILanguageExtensionSubtags; };
struct ILanguageExtensionSubtags : ILanguageExtensionSubtags_raw, generate<ILanguageExtensionSubtags> {};

// ILanguageFactory
struct ILanguageFactory : IInspectable {
	virtual STDMETHODIMP _CreateLanguage(HSTRING languageTag, Language* *result);
};

// ILanguageStatics2
struct ILanguageStatics2 : IInspectable {
	virtual STDMETHODIMP _TrySetInputMethodLanguageTag(HSTRING languageTag, bool *result);
};

// ILanguageStatics
struct ILanguageStatics : IInspectable {
	virtual STDMETHODIMP _IsWellFormed(HSTRING languageTag, bool *result);
	virtual STDMETHODIMP _get_CurrentInputMethodLanguageTag(HSTRING *value);
};

// Language
template<typename> struct Language_statics {
	static struct _CurrentInputMethodLanguageTag : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<Language, ILanguageStatics>()->_get_CurrentInputMethodLanguageTag(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CurrentInputMethodLanguageTag;
	static bool TrySetInputMethodLanguageTag(hstring_ref languageTag) { bool result; hrcheck(get_activation_factory<Language, ILanguageStatics2>()->_TrySetInputMethodLanguageTag(languageTag, &result)); return result; }
	static bool IsWellFormed(hstring_ref languageTag) { bool result; hrcheck(get_activation_factory<Language, ILanguageStatics>()->_IsWellFormed(languageTag, &result)); return result; }
	static Language *activate(hstring_ref languageTag) { Language *result; hrcheck(get_activation_factory<Language, ILanguageFactory>()->_CreateLanguage(languageTag, &result)); return result; }
};
template<typename X> typename Language_statics<X>::_CurrentInputMethodLanguageTag Language_statics<X>::CurrentInputMethodLanguageTag;

template<typename X> struct statics<Language, X> : X, Windows::Globalization::Language_statics<void> {
	using Windows::Globalization::Language_statics<void>::activate;
	typedef typename X::root_type Language;
};
struct Language : generate<Language> {};

// ICalendar
struct ICalendar_raw : IInspectable {
	virtual STDMETHODIMP _Clone(Calendar* *value);
	virtual STDMETHODIMP _SetToMin();
	virtual STDMETHODIMP _SetToMax();
	virtual STDMETHODIMP _get_Languages(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_NumeralSystem(HSTRING *value);
	virtual STDMETHODIMP _put_NumeralSystem(HSTRING value);
	virtual STDMETHODIMP _GetCalendarSystem(HSTRING *value);
	virtual STDMETHODIMP _ChangeCalendarSystem(HSTRING value);
	virtual STDMETHODIMP _GetClock(HSTRING *value);
	virtual STDMETHODIMP _ChangeClock(HSTRING value);
	virtual STDMETHODIMP _GetDateTime(Foundation::DateTime *result);
	virtual STDMETHODIMP _SetDateTime(Foundation::DateTime value);
	virtual STDMETHODIMP _SetToNow();
	virtual STDMETHODIMP _get_FirstEra(int *value);
	virtual STDMETHODIMP _get_LastEra(int *value);
	virtual STDMETHODIMP _get_NumberOfEras(int *value);
	virtual STDMETHODIMP _get_Era(int *value);
	virtual STDMETHODIMP _put_Era(int value);
	virtual STDMETHODIMP _AddEras(int eras);
	virtual STDMETHODIMP _EraAsFullString(HSTRING *result);
	virtual STDMETHODIMP _EraAsString(int idealLength, HSTRING *result);
	virtual STDMETHODIMP _get_FirstYearInThisEra(int *value);
	virtual STDMETHODIMP _get_LastYearInThisEra(int *value);
	virtual STDMETHODIMP _get_NumberOfYearsInThisEra(int *value);
	virtual STDMETHODIMP _get_Year(int *value);
	virtual STDMETHODIMP _put_Year(int value);
	virtual STDMETHODIMP _AddYears(int years);
	virtual STDMETHODIMP _YearAsString(HSTRING *result);
	virtual STDMETHODIMP _YearAsTruncatedString(int remainingDigits, HSTRING *result);
	virtual STDMETHODIMP _YearAsPaddedString(int minDigits, HSTRING *result);
	virtual STDMETHODIMP _get_FirstMonthInThisYear(int *value);
	virtual STDMETHODIMP _get_LastMonthInThisYear(int *value);
	virtual STDMETHODIMP _get_NumberOfMonthsInThisYear(int *value);
	virtual STDMETHODIMP _get_Month(int *value);
	virtual STDMETHODIMP _put_Month(int value);
	virtual STDMETHODIMP _AddMonths(int months);
	virtual STDMETHODIMP _MonthAsFullString(HSTRING *result);
	virtual STDMETHODIMP _MonthAsString(int idealLength, HSTRING *result);
	virtual STDMETHODIMP _MonthAsFullSoloString(HSTRING *result);
	virtual STDMETHODIMP _MonthAsSoloString(int idealLength, HSTRING *result);
	virtual STDMETHODIMP _MonthAsNumericString(HSTRING *result);
	virtual STDMETHODIMP _MonthAsPaddedNumericString(int minDigits, HSTRING *result);
	virtual STDMETHODIMP _AddWeeks(int weeks);
	virtual STDMETHODIMP _get_FirstDayInThisMonth(int *value);
	virtual STDMETHODIMP _get_LastDayInThisMonth(int *value);
	virtual STDMETHODIMP _get_NumberOfDaysInThisMonth(int *value);
	virtual STDMETHODIMP _get_Day(int *value);
	virtual STDMETHODIMP _put_Day(int value);
	virtual STDMETHODIMP _AddDays(int days);
	virtual STDMETHODIMP _DayAsString(HSTRING *result);
	virtual STDMETHODIMP _DayAsPaddedString(int minDigits, HSTRING *result);
	virtual STDMETHODIMP _get_DayOfWeek(Globalization::DayOfWeek *value);
	virtual STDMETHODIMP _DayOfWeekAsFullString(HSTRING *result);
	virtual STDMETHODIMP _DayOfWeekAsString(int idealLength, HSTRING *result);
	virtual STDMETHODIMP _DayOfWeekAsFullSoloString(HSTRING *result);
	virtual STDMETHODIMP _DayOfWeekAsSoloString(int idealLength, HSTRING *result);
	virtual STDMETHODIMP _get_FirstPeriodInThisDay(int *value);
	virtual STDMETHODIMP _get_LastPeriodInThisDay(int *value);
	virtual STDMETHODIMP _get_NumberOfPeriodsInThisDay(int *value);
	virtual STDMETHODIMP _get_Period(int *value);
	virtual STDMETHODIMP _put_Period(int value);
	virtual STDMETHODIMP _AddPeriods(int periods);
	virtual STDMETHODIMP _PeriodAsFullString(HSTRING *result);
	virtual STDMETHODIMP _PeriodAsString(int idealLength, HSTRING *result);
	virtual STDMETHODIMP _get_FirstHourInThisPeriod(int *value);
	virtual STDMETHODIMP _get_LastHourInThisPeriod(int *value);
	virtual STDMETHODIMP _get_NumberOfHoursInThisPeriod(int *value);
	virtual STDMETHODIMP _get_Hour(int *value);
	virtual STDMETHODIMP _put_Hour(int value);
	virtual STDMETHODIMP _AddHours(int hours);
	virtual STDMETHODIMP _HourAsString(HSTRING *result);
	virtual STDMETHODIMP _HourAsPaddedString(int minDigits, HSTRING *result);
	virtual STDMETHODIMP _get_Minute(int *value);
	virtual STDMETHODIMP _put_Minute(int value);
	virtual STDMETHODIMP _AddMinutes(int minutes);
	virtual STDMETHODIMP _MinuteAsString(HSTRING *result);
	virtual STDMETHODIMP _MinuteAsPaddedString(int minDigits, HSTRING *result);
	virtual STDMETHODIMP _get_Second(int *value);
	virtual STDMETHODIMP _put_Second(int value);
	virtual STDMETHODIMP _AddSeconds(int seconds);
	virtual STDMETHODIMP _SecondAsString(HSTRING *result);
	virtual STDMETHODIMP _SecondAsPaddedString(int minDigits, HSTRING *result);
	virtual STDMETHODIMP _get_Nanosecond(int *value);
	virtual STDMETHODIMP _put_Nanosecond(int value);
	virtual STDMETHODIMP _AddNanoseconds(int nanoseconds);
	virtual STDMETHODIMP _NanosecondAsString(HSTRING *result);
	virtual STDMETHODIMP _NanosecondAsPaddedString(int minDigits, HSTRING *result);
	virtual STDMETHODIMP _Compare(Calendar* other, int *result);
	virtual STDMETHODIMP _CompareDateTime(Foundation::DateTime other, int *result);
	virtual STDMETHODIMP _CopyTo(Calendar* other);
	virtual STDMETHODIMP _get_FirstMinuteInThisHour(int *value);
	virtual STDMETHODIMP _get_LastMinuteInThisHour(int *value);
	virtual STDMETHODIMP _get_NumberOfMinutesInThisHour(int *value);
	virtual STDMETHODIMP _get_FirstSecondInThisMinute(int *value);
	virtual STDMETHODIMP _get_LastSecondInThisMinute(int *value);
	virtual STDMETHODIMP _get_NumberOfSecondsInThisMinute(int *value);
	virtual STDMETHODIMP _get_ResolvedLanguage(HSTRING *value);
	virtual STDMETHODIMP _get_IsDaylightSavingTime(bool *value);
};
template<typename X> struct ICalendar_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Day)->_get_Day(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Day)->_put_Day(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Day;
		struct : property {
			Globalization::DayOfWeek get() { Globalization::DayOfWeek value; hrcheck(enc(&ICalendar_adaptor::DayOfWeek)->_get_DayOfWeek(&value)); return value; }
			Globalization::DayOfWeek operator()() { return get(); }
			operator Globalization::DayOfWeek () { return get(); }
		} DayOfWeek;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Era)->_get_Era(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Era)->_put_Era(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Era;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstDayInThisMonth)->_get_FirstDayInThisMonth(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstDayInThisMonth;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstEra)->_get_FirstEra(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstEra;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstHourInThisPeriod)->_get_FirstHourInThisPeriod(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstHourInThisPeriod;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstMinuteInThisHour)->_get_FirstMinuteInThisHour(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstMinuteInThisHour;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstMonthInThisYear)->_get_FirstMonthInThisYear(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstMonthInThisYear;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstPeriodInThisDay)->_get_FirstPeriodInThisDay(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstPeriodInThisDay;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstSecondInThisMinute)->_get_FirstSecondInThisMinute(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstSecondInThisMinute;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::FirstYearInThisEra)->_get_FirstYearInThisEra(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} FirstYearInThisEra;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Hour)->_get_Hour(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Hour)->_put_Hour(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Hour;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICalendar_adaptor::IsDaylightSavingTime)->_get_IsDaylightSavingTime(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDaylightSavingTime;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&ICalendar_adaptor::Languages)->_get_Languages(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} Languages;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastDayInThisMonth)->_get_LastDayInThisMonth(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastDayInThisMonth;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastEra)->_get_LastEra(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastEra;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastHourInThisPeriod)->_get_LastHourInThisPeriod(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastHourInThisPeriod;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastMinuteInThisHour)->_get_LastMinuteInThisHour(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastMinuteInThisHour;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastMonthInThisYear)->_get_LastMonthInThisYear(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastMonthInThisYear;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastPeriodInThisDay)->_get_LastPeriodInThisDay(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastPeriodInThisDay;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastSecondInThisMinute)->_get_LastSecondInThisMinute(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastSecondInThisMinute;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::LastYearInThisEra)->_get_LastYearInThisEra(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LastYearInThisEra;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Minute)->_get_Minute(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Minute)->_put_Minute(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Minute;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Month)->_get_Month(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Month)->_put_Month(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Month;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Nanosecond)->_get_Nanosecond(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Nanosecond)->_put_Nanosecond(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Nanosecond;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfDaysInThisMonth)->_get_NumberOfDaysInThisMonth(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfDaysInThisMonth;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfEras)->_get_NumberOfEras(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfEras;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfHoursInThisPeriod)->_get_NumberOfHoursInThisPeriod(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfHoursInThisPeriod;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfMinutesInThisHour)->_get_NumberOfMinutesInThisHour(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfMinutesInThisHour;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfMonthsInThisYear)->_get_NumberOfMonthsInThisYear(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfMonthsInThisYear;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfPeriodsInThisDay)->_get_NumberOfPeriodsInThisDay(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfPeriodsInThisDay;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfSecondsInThisMinute)->_get_NumberOfSecondsInThisMinute(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfSecondsInThisMinute;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::NumberOfYearsInThisEra)->_get_NumberOfYearsInThisEra(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} NumberOfYearsInThisEra;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICalendar_adaptor::NumeralSystem)->_get_NumeralSystem(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICalendar_adaptor::NumeralSystem)->_put_NumeralSystem(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} NumeralSystem;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Period)->_get_Period(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Period)->_put_Period(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Period;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICalendar_adaptor::ResolvedLanguage)->_get_ResolvedLanguage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResolvedLanguage;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Second)->_get_Second(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Second)->_put_Second(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Second;
		struct : property {
			int get() { int value; hrcheck(enc(&ICalendar_adaptor::Year)->_get_Year(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICalendar_adaptor::Year)->_put_Year(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Year;
	};
	ptr<Calendar> Clone() { Calendar* value; hrcheck(X::get()->_Clone(&value)); return from_abi(value); }
	void SetToMin() { hrcheck(X::get()->_SetToMin()); }
	void SetToMax() { hrcheck(X::get()->_SetToMax()); }
	hstring GetCalendarSystem() { HSTRING value; hrcheck(X::get()->_GetCalendarSystem(&value)); return from_abi(value); }
	void ChangeCalendarSystem(hstring_ref value) { hrcheck(X::get()->_ChangeCalendarSystem(value)); }
	hstring GetClock() { HSTRING value; hrcheck(X::get()->_GetClock(&value)); return from_abi(value); }
	void ChangeClock(hstring_ref value) { hrcheck(X::get()->_ChangeClock(value)); }
	Foundation::DateTime GetDateTime() { Foundation::DateTime result; hrcheck(X::get()->_GetDateTime(&result)); return result; }
	void SetDateTime(const Foundation::DateTime& value) { hrcheck(X::get()->_SetDateTime(value)); }
	void SetToNow() { hrcheck(X::get()->_SetToNow()); }
	void AddEras(int eras) { hrcheck(X::get()->_AddEras(eras)); }
	hstring EraAsString() { HSTRING result; hrcheck(X::get()->_EraAsFullString(&result)); return from_abi(result); }
	hstring EraAsString(int idealLength) { HSTRING result; hrcheck(X::get()->_EraAsString(idealLength, &result)); return from_abi(result); }
	void AddYears(int years) { hrcheck(X::get()->_AddYears(years)); }
	hstring YearAsString() { HSTRING result; hrcheck(X::get()->_YearAsString(&result)); return from_abi(result); }
	hstring YearAsTruncatedString(int remainingDigits) { HSTRING result; hrcheck(X::get()->_YearAsTruncatedString(remainingDigits, &result)); return from_abi(result); }
	hstring YearAsPaddedString(int minDigits) { HSTRING result; hrcheck(X::get()->_YearAsPaddedString(minDigits, &result)); return from_abi(result); }
	void AddMonths(int months) { hrcheck(X::get()->_AddMonths(months)); }
	hstring MonthAsString() { HSTRING result; hrcheck(X::get()->_MonthAsFullString(&result)); return from_abi(result); }
	hstring MonthAsString(int idealLength) { HSTRING result; hrcheck(X::get()->_MonthAsString(idealLength, &result)); return from_abi(result); }
	hstring MonthAsSoloString() { HSTRING result; hrcheck(X::get()->_MonthAsFullSoloString(&result)); return from_abi(result); }
	hstring MonthAsSoloString(int idealLength) { HSTRING result; hrcheck(X::get()->_MonthAsSoloString(idealLength, &result)); return from_abi(result); }
	hstring MonthAsNumericString() { HSTRING result; hrcheck(X::get()->_MonthAsNumericString(&result)); return from_abi(result); }
	hstring MonthAsPaddedNumericString(int minDigits) { HSTRING result; hrcheck(X::get()->_MonthAsPaddedNumericString(minDigits, &result)); return from_abi(result); }
	void AddWeeks(int weeks) { hrcheck(X::get()->_AddWeeks(weeks)); }
	void AddDays(int days) { hrcheck(X::get()->_AddDays(days)); }
	hstring DayAsString() { HSTRING result; hrcheck(X::get()->_DayAsString(&result)); return from_abi(result); }
	hstring DayAsPaddedString(int minDigits) { HSTRING result; hrcheck(X::get()->_DayAsPaddedString(minDigits, &result)); return from_abi(result); }
	hstring DayOfWeekAsString() { HSTRING result; hrcheck(X::get()->_DayOfWeekAsFullString(&result)); return from_abi(result); }
	hstring DayOfWeekAsString(int idealLength) { HSTRING result; hrcheck(X::get()->_DayOfWeekAsString(idealLength, &result)); return from_abi(result); }
	hstring DayOfWeekAsSoloString() { HSTRING result; hrcheck(X::get()->_DayOfWeekAsFullSoloString(&result)); return from_abi(result); }
	hstring DayOfWeekAsSoloString(int idealLength) { HSTRING result; hrcheck(X::get()->_DayOfWeekAsSoloString(idealLength, &result)); return from_abi(result); }
	void AddPeriods(int periods) { hrcheck(X::get()->_AddPeriods(periods)); }
	hstring PeriodAsString() { HSTRING result; hrcheck(X::get()->_PeriodAsFullString(&result)); return from_abi(result); }
	hstring PeriodAsString(int idealLength) { HSTRING result; hrcheck(X::get()->_PeriodAsString(idealLength, &result)); return from_abi(result); }
	void AddHours(int hours) { hrcheck(X::get()->_AddHours(hours)); }
	hstring HourAsString() { HSTRING result; hrcheck(X::get()->_HourAsString(&result)); return from_abi(result); }
	hstring HourAsPaddedString(int minDigits) { HSTRING result; hrcheck(X::get()->_HourAsPaddedString(minDigits, &result)); return from_abi(result); }
	void AddMinutes(int minutes) { hrcheck(X::get()->_AddMinutes(minutes)); }
	hstring MinuteAsString() { HSTRING result; hrcheck(X::get()->_MinuteAsString(&result)); return from_abi(result); }
	hstring MinuteAsPaddedString(int minDigits) { HSTRING result; hrcheck(X::get()->_MinuteAsPaddedString(minDigits, &result)); return from_abi(result); }
	void AddSeconds(int seconds) { hrcheck(X::get()->_AddSeconds(seconds)); }
	hstring SecondAsString() { HSTRING result; hrcheck(X::get()->_SecondAsString(&result)); return from_abi(result); }
	hstring SecondAsPaddedString(int minDigits) { HSTRING result; hrcheck(X::get()->_SecondAsPaddedString(minDigits, &result)); return from_abi(result); }
	void AddNanoseconds(int nanoseconds) { hrcheck(X::get()->_AddNanoseconds(nanoseconds)); }
	hstring NanosecondAsString() { HSTRING result; hrcheck(X::get()->_NanosecondAsString(&result)); return from_abi(result); }
	hstring NanosecondAsPaddedString(int minDigits) { HSTRING result; hrcheck(X::get()->_NanosecondAsPaddedString(minDigits, &result)); return from_abi(result); }
	int Compare(pptr<Calendar> other) { int result; hrcheck(X::get()->_Compare(other, &result)); return result; }
	int CompareDateTime(const Foundation::DateTime& other) { int result; hrcheck(X::get()->_CompareDateTime(other, &result)); return result; }
	void CopyTo(pptr<Calendar> other) { hrcheck(X::get()->_CopyTo(other)); }
	ICalendar_adaptor() {}
};
template<typename X> struct adapt<ICalendar, X> : Windows::Globalization::ICalendar_adaptor<X> { typedef adapt ICalendar; };
struct ICalendar : ICalendar_raw, generate<ICalendar> {};

// ICalendarFactory2
struct ICalendarFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateCalendarWithTimeZone(Foundation::Collections::IIterable<HSTRING>* languages, HSTRING calendar, HSTRING clock, HSTRING timeZoneId, Calendar* *result);
};

// ICalendarFactory
struct ICalendarFactory : IInspectable {
	virtual STDMETHODIMP _CreateCalendarDefaultCalendarAndClock(Foundation::Collections::IIterable<HSTRING>* languages, Calendar* *result);
	virtual STDMETHODIMP _CreateCalendar(Foundation::Collections::IIterable<HSTRING>* languages, HSTRING calendar, HSTRING clock, Calendar* *result);
};

// ITimeZoneOnCalendar
struct ITimeZoneOnCalendar_raw : IInspectable {
	virtual STDMETHODIMP _GetTimeZone(HSTRING *value);
	virtual STDMETHODIMP _ChangeTimeZone(HSTRING timeZoneId);
	virtual STDMETHODIMP _TimeZoneAsFullString(HSTRING *result);
	virtual STDMETHODIMP _TimeZoneAsString(int idealLength, HSTRING *result);
};
template<typename X> struct ITimeZoneOnCalendar_adaptor : X {
	hstring GetTimeZone() { HSTRING value; hrcheck(X::get()->_GetTimeZone(&value)); return from_abi(value); }
	void ChangeTimeZone(hstring_ref timeZoneId) { hrcheck(X::get()->_ChangeTimeZone(timeZoneId)); }
	hstring TimeZoneAsString() { HSTRING result; hrcheck(X::get()->_TimeZoneAsFullString(&result)); return from_abi(result); }
	hstring TimeZoneAsString(int idealLength) { HSTRING result; hrcheck(X::get()->_TimeZoneAsString(idealLength, &result)); return from_abi(result); }
};
template<typename X> struct adapt<ITimeZoneOnCalendar, X> : Windows::Globalization::ITimeZoneOnCalendar_adaptor<X> { typedef adapt ITimeZoneOnCalendar; };
struct ITimeZoneOnCalendar : ITimeZoneOnCalendar_raw, generate<ITimeZoneOnCalendar> {};

// Calendar
template<typename> struct Calendar_statics {
	static Calendar *activate() { Calendar *t; get_activation_factory<Calendar>()->ActivateInstance((IInspectable**)&t); return t; }
	static Calendar *activate(pptr<Foundation::Collections::IIterable<hstring>> languages) { Calendar *result; hrcheck(get_activation_factory<Calendar, ICalendarFactory>()->_CreateCalendarDefaultCalendarAndClock(to_abi(languages), &result)); return result; }
	static Calendar *activate(pptr<Foundation::Collections::IIterable<hstring>> languages, hstring_ref calendar, hstring_ref clock) { Calendar *result; hrcheck(get_activation_factory<Calendar, ICalendarFactory>()->_CreateCalendar(to_abi(languages), calendar, clock, &result)); return result; }
	static Calendar *activate(pptr<Foundation::Collections::IIterable<hstring>> languages, hstring_ref calendar, hstring_ref clock, hstring_ref timeZoneId) { Calendar *result; hrcheck(get_activation_factory<Calendar, ICalendarFactory2>()->_CreateCalendarWithTimeZone(to_abi(languages), calendar, clock, timeZoneId, &result)); return result; }
};

template<typename X> struct statics<Calendar, X> : X, Windows::Globalization::Calendar_statics<void> {
	using Windows::Globalization::Calendar_statics<void>::activate;
	typedef typename X::root_type Calendar;
};
struct Calendar : generate<Calendar> {
	using ICalendar::PeriodAsString;
	using ICalendar::MonthAsSoloString;
	using ICalendar::DayOfWeekAsString;
	using ICalendar::EraAsString;
	using ITimeZoneOnCalendar::TimeZoneAsString;
	using ICalendar::MonthAsString;
	using ICalendar::DayOfWeekAsSoloString;
};

// IApplicationLanguagesStatics
struct IApplicationLanguagesStatics : IInspectable {
	virtual STDMETHODIMP _get_PrimaryLanguageOverride(HSTRING *value);
	virtual STDMETHODIMP _put_PrimaryLanguageOverride(HSTRING value);
	virtual STDMETHODIMP _get_Languages(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_ManifestLanguages(Foundation::Collections::IVectorView<HSTRING>* *value);
};

// IApplicationLanguagesStatics2
struct IApplicationLanguagesStatics2 : IInspectable {
	virtual STDMETHODIMP _GetLanguagesForUser(System::User* user, Foundation::Collections::IVectorView<HSTRING>* *value);
};

// ApplicationLanguages
template<typename> struct ApplicationLanguages_statics {
	static struct _Languages : property {
		ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(get_activation_factory<ApplicationLanguages, IApplicationLanguagesStatics>()->_get_Languages(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
	} Languages;
	static struct _ManifestLanguages : property {
		ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(get_activation_factory<ApplicationLanguages, IApplicationLanguagesStatics>()->_get_ManifestLanguages(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
	} ManifestLanguages;
	static struct _PrimaryLanguageOverride : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<ApplicationLanguages, IApplicationLanguagesStatics>()->_get_PrimaryLanguageOverride(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
		void put(hstring_ref value) { hrcheck(get_activation_factory<ApplicationLanguages, IApplicationLanguagesStatics>()->_put_PrimaryLanguageOverride(value)); }
		void operator=(hstring_ref value) { put(value); }
		void operator()(hstring_ref value) { put(value); }
	} PrimaryLanguageOverride;
	static ptr<Foundation::Collections::IVectorView<hstring>> GetLanguagesForUser(pptr<System::User> user) { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(get_activation_factory<ApplicationLanguages, IApplicationLanguagesStatics2>()->_GetLanguagesForUser(user, &value)); return from_abi(value); }
};
template<typename X> typename ApplicationLanguages_statics<X>::_Languages ApplicationLanguages_statics<X>::Languages;
template<typename X> typename ApplicationLanguages_statics<X>::_ManifestLanguages ApplicationLanguages_statics<X>::ManifestLanguages;
template<typename X> typename ApplicationLanguages_statics<X>::_PrimaryLanguageOverride ApplicationLanguages_statics<X>::PrimaryLanguageOverride;

template<typename X> struct statics<ApplicationLanguages, X> : X, Windows::Globalization::ApplicationLanguages_statics<void> {
	typedef typename X::root_type ApplicationLanguages;
};
struct ApplicationLanguages : generate<ApplicationLanguages> {};

// IJapanesePhoneticAnalyzerStatics
struct IJapanesePhoneticAnalyzerStatics : IInspectable {
	virtual STDMETHODIMP _GetWords(HSTRING input, Foundation::Collections::IVectorView<JapanesePhoneme*>* *result);
	virtual STDMETHODIMP _GetWordsWithMonoRubyOption(HSTRING input, bool monoRuby, Foundation::Collections::IVectorView<JapanesePhoneme*>* *result);
};

// IJapanesePhoneme
struct IJapanesePhoneme_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayText(HSTRING *value);
	virtual STDMETHODIMP _get_YomiText(HSTRING *value);
	virtual STDMETHODIMP _get_IsPhraseStart(bool *value);
};
template<typename X> struct IJapanesePhoneme_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IJapanesePhoneme_adaptor::DisplayText)->_get_DisplayText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayText;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IJapanesePhoneme_adaptor::IsPhraseStart)->_get_IsPhraseStart(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPhraseStart;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IJapanesePhoneme_adaptor::YomiText)->_get_YomiText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} YomiText;
	};
	IJapanesePhoneme_adaptor() {}
};
template<typename X> struct adapt<IJapanesePhoneme, X> : Windows::Globalization::IJapanesePhoneme_adaptor<X> { typedef adapt IJapanesePhoneme; };
struct IJapanesePhoneme : IJapanesePhoneme_raw, generate<IJapanesePhoneme> {};

// JapanesePhoneme
template<typename X> struct statics<JapanesePhoneme, X> : X {
	typedef typename X::root_type JapanesePhoneme;
};
struct JapanesePhoneme : generate<JapanesePhoneme> {};

// JapanesePhoneticAnalyzer
template<typename> struct JapanesePhoneticAnalyzer_statics {
	static ptr<Foundation::Collections::IVectorView<ptr<JapanesePhoneme>>> GetWords(hstring_ref input) { Foundation::Collections::IVectorView<JapanesePhoneme*>* result; hrcheck(get_activation_factory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>()->_GetWords(input, &result)); return from_abi(result); }
	static ptr<Foundation::Collections::IVectorView<ptr<JapanesePhoneme>>> GetWords(hstring_ref input, bool monoRuby) { Foundation::Collections::IVectorView<JapanesePhoneme*>* result; hrcheck(get_activation_factory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>()->_GetWordsWithMonoRubyOption(input, monoRuby, &result)); return from_abi(result); }
};

template<typename X> struct statics<JapanesePhoneticAnalyzer, X> : X, Windows::Globalization::JapanesePhoneticAnalyzer_statics<void> {
	typedef typename X::root_type JapanesePhoneticAnalyzer;
};
struct JapanesePhoneticAnalyzer : generate<JapanesePhoneticAnalyzer> {};
}}
} // namespace iso_winrt
