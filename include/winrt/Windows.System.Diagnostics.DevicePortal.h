#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.Diagnostics.DevicePortal

#include "Windows.System.Diagnostics.DevicePortal.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.Networking.Sockets.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace AppService {
struct AppServiceConnection;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Web { namespace Http {
struct HttpResponseMessage;
struct HttpRequestMessage;
}}}

// defs

template<> struct def<Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedReason> : enum_type<int> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionClosedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionClosedEventArgs> : class_type<Platform::Object, Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionClosedEventArgs> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionRequestReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnectionRequestReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::DevicePortalConnectionRequestReceivedEventArgs> : class_type<Platform::Object, Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionRequestReceivedEventArgs, Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnectionRequestReceivedEventArgs> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionStatics> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnection> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnection> : interface_type<> {};
template<> struct def<Windows::System::Diagnostics::DevicePortal::DevicePortalConnection> : class_type<Platform::Object, Windows::System::Diagnostics::DevicePortal::IDevicePortalConnection, Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnection> {};

// uuids

template<> struct uuid<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionClosedEventArgs> { define_guid(0xFCF70E38, 0x7032, 0x428C, 0x9F, 0x50, 0x94, 0x5C, 0x15, 0xA9, 0xF0, 0xCB);};
template<> struct uuid<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionRequestReceivedEventArgs> { define_guid(0x64DAE045, 0x6FDA, 0x4459, 0x9E, 0xBD, 0xEC, 0xCE, 0x22, 0xE3, 0x85, 0x59);};
template<> struct uuid<Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnectionRequestReceivedEventArgs> { define_guid(0x79FDCABA, 0x175C, 0x4739, 0x9F, 0x74, 0xDD, 0xA7, 0x97, 0xC3, 0x5B, 0x3F);};
template<> struct uuid<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionStatics> { define_guid(0x4BBE31E7, 0xE9B9, 0x4645, 0x8F, 0xED, 0xA5, 0x3E, 0xEA, 0xE, 0xDB, 0xD6);};
template<> struct uuid<Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnection> { define_guid(0x67657920, 0xD65A, 0x42F0, 0xAE, 0xF4, 0x78, 0x78, 0x8, 0x9, 0x8B, 0x7B);};
template<> struct uuid<Windows::System::Diagnostics::DevicePortal::IDevicePortalConnection> { define_guid(0xF447F51, 0x1198, 0x4DA1, 0x8D, 0x54, 0xBD, 0xEF, 0x39, 0x3E, 0x9, 0xB6);};

// types

namespace Windows { namespace System { namespace Diagnostics { namespace DevicePortal {

// IDevicePortalConnectionClosedEventArgs
struct IDevicePortalConnectionClosedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(DevicePortalConnectionClosedReason *value);
};
template<typename X> struct IDevicePortalConnectionClosedEventArgs_adaptor : X {
	union {
		struct : property {
			DevicePortalConnectionClosedReason get() { DevicePortalConnectionClosedReason value; hrcheck(enc(&IDevicePortalConnectionClosedEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			DevicePortalConnectionClosedReason operator()() { return get(); }
			operator DevicePortalConnectionClosedReason () { return get(); }
		} Reason;
	};
	IDevicePortalConnectionClosedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDevicePortalConnectionClosedEventArgs, X> : Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionClosedEventArgs_adaptor<X> { typedef adapt IDevicePortalConnectionClosedEventArgs; };
struct IDevicePortalConnectionClosedEventArgs : IDevicePortalConnectionClosedEventArgs_raw, generate<IDevicePortalConnectionClosedEventArgs> {};

// DevicePortalConnectionClosedEventArgs
template<typename X> struct statics<DevicePortalConnectionClosedEventArgs, X> : X {
	typedef typename X::root_type DevicePortalConnectionClosedEventArgs;
};
struct DevicePortalConnectionClosedEventArgs : generate<DevicePortalConnectionClosedEventArgs> {};

// IDevicePortalConnectionRequestReceivedEventArgs
struct IDevicePortalConnectionRequestReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RequestMessage(Web::Http::HttpRequestMessage* *value);
	virtual STDMETHODIMP _get_ResponseMessage(Web::Http::HttpResponseMessage* *value);
};
template<typename X> struct IDevicePortalConnectionRequestReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Web::Http::HttpRequestMessage> get() { Web::Http::HttpRequestMessage* value; hrcheck(enc(&IDevicePortalConnectionRequestReceivedEventArgs_adaptor::RequestMessage)->_get_RequestMessage(&value)); return from_abi(value); }
			ptr<Web::Http::HttpRequestMessage> operator()() { return get(); }
			operator ptr<Web::Http::HttpRequestMessage> () { return get(); }
			ptr<Web::Http::HttpRequestMessage> operator->() { return get(); }
		} RequestMessage;
		struct : property {
			ptr<Web::Http::HttpResponseMessage> get() { Web::Http::HttpResponseMessage* value; hrcheck(enc(&IDevicePortalConnectionRequestReceivedEventArgs_adaptor::ResponseMessage)->_get_ResponseMessage(&value)); return from_abi(value); }
			ptr<Web::Http::HttpResponseMessage> operator()() { return get(); }
			operator ptr<Web::Http::HttpResponseMessage> () { return get(); }
			ptr<Web::Http::HttpResponseMessage> operator->() { return get(); }
		} ResponseMessage;
	};
	IDevicePortalConnectionRequestReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDevicePortalConnectionRequestReceivedEventArgs, X> : Windows::System::Diagnostics::DevicePortal::IDevicePortalConnectionRequestReceivedEventArgs_adaptor<X> { typedef adapt IDevicePortalConnectionRequestReceivedEventArgs; };
struct IDevicePortalConnectionRequestReceivedEventArgs : IDevicePortalConnectionRequestReceivedEventArgs_raw, generate<IDevicePortalConnectionRequestReceivedEventArgs> {};

// IDevicePortalWebSocketConnectionRequestReceivedEventArgs
struct IDevicePortalWebSocketConnectionRequestReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_IsWebSocketUpgradeRequest(bool *value);
	virtual STDMETHODIMP _get_WebSocketProtocolsRequested(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IDevicePortalWebSocketConnectionRequestReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDevicePortalWebSocketConnectionRequestReceivedEventArgs_adaptor::IsWebSocketUpgradeRequest)->_get_IsWebSocketUpgradeRequest(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsWebSocketUpgradeRequest;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IDevicePortalWebSocketConnectionRequestReceivedEventArgs_adaptor::WebSocketProtocolsRequested)->_get_WebSocketProtocolsRequested(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} WebSocketProtocolsRequested;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IDevicePortalWebSocketConnectionRequestReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDevicePortalWebSocketConnectionRequestReceivedEventArgs, X> : Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnectionRequestReceivedEventArgs_adaptor<X> { typedef adapt IDevicePortalWebSocketConnectionRequestReceivedEventArgs; };
struct IDevicePortalWebSocketConnectionRequestReceivedEventArgs : IDevicePortalWebSocketConnectionRequestReceivedEventArgs_raw, generate<IDevicePortalWebSocketConnectionRequestReceivedEventArgs> {};

// DevicePortalConnectionRequestReceivedEventArgs
template<typename X> struct statics<DevicePortalConnectionRequestReceivedEventArgs, X> : X {
	typedef typename X::root_type DevicePortalConnectionRequestReceivedEventArgs;
};
struct DevicePortalConnectionRequestReceivedEventArgs : generate<DevicePortalConnectionRequestReceivedEventArgs> {};

// IDevicePortalConnectionStatics
struct IDevicePortalConnectionStatics : IInspectable {
	virtual STDMETHODIMP _GetForAppServiceConnection(ApplicationModel::AppService::AppServiceConnection* appServiceConnection, DevicePortalConnection* *value);
};

// IDevicePortalWebSocketConnection
struct IDevicePortalWebSocketConnection_raw : IInspectable {
	virtual STDMETHODIMP _GetServerMessageWebSocketForRequest(Web::Http::HttpRequestMessage* request, Networking::Sockets::ServerMessageWebSocket* *result);
	virtual STDMETHODIMP _GetServerMessageWebSocketForRequest2(Web::Http::HttpRequestMessage* request, Networking::Sockets::SocketMessageType messageType, HSTRING protocol, Networking::Sockets::ServerMessageWebSocket* *result);
	virtual STDMETHODIMP _GetServerMessageWebSocketForRequest3(Web::Http::HttpRequestMessage* request, Networking::Sockets::SocketMessageType messageType, HSTRING protocol, unsigned outboundBufferSizeInBytes, unsigned maxMessageSize, Networking::Sockets::MessageWebSocketReceiveMode receiveMode, Networking::Sockets::ServerMessageWebSocket* *result);
	virtual STDMETHODIMP _GetServerStreamWebSocketForRequest(Web::Http::HttpRequestMessage* request, Networking::Sockets::ServerStreamWebSocket* *result);
	virtual STDMETHODIMP _GetServerStreamWebSocketForRequest2(Web::Http::HttpRequestMessage* request, HSTRING protocol, unsigned outboundBufferSizeInBytes, bool noDelay, Networking::Sockets::ServerStreamWebSocket* *result);
};
template<typename X> struct IDevicePortalWebSocketConnection_adaptor : X {
	ptr<Networking::Sockets::ServerMessageWebSocket> GetServerMessageWebSocketForRequest(pptr<Web::Http::HttpRequestMessage> request) { Networking::Sockets::ServerMessageWebSocket* result; hrcheck(X::get()->_GetServerMessageWebSocketForRequest(request, &result)); return from_abi(result); }
	ptr<Networking::Sockets::ServerMessageWebSocket> GetServerMessageWebSocketForRequest(pptr<Web::Http::HttpRequestMessage> request, Networking::Sockets::SocketMessageType messageType, hstring_ref protocol) { Networking::Sockets::ServerMessageWebSocket* result; hrcheck(X::get()->_GetServerMessageWebSocketForRequest2(request, messageType, protocol, &result)); return from_abi(result); }
	ptr<Networking::Sockets::ServerMessageWebSocket> GetServerMessageWebSocketForRequest(pptr<Web::Http::HttpRequestMessage> request, Networking::Sockets::SocketMessageType messageType, hstring_ref protocol, unsigned outboundBufferSizeInBytes, unsigned maxMessageSize, Networking::Sockets::MessageWebSocketReceiveMode receiveMode) { Networking::Sockets::ServerMessageWebSocket* result; hrcheck(X::get()->_GetServerMessageWebSocketForRequest3(request, messageType, protocol, outboundBufferSizeInBytes, maxMessageSize, receiveMode, &result)); return from_abi(result); }
	ptr<Networking::Sockets::ServerStreamWebSocket> GetServerStreamWebSocketForRequest(pptr<Web::Http::HttpRequestMessage> request) { Networking::Sockets::ServerStreamWebSocket* result; hrcheck(X::get()->_GetServerStreamWebSocketForRequest(request, &result)); return from_abi(result); }
	ptr<Networking::Sockets::ServerStreamWebSocket> GetServerStreamWebSocketForRequest(pptr<Web::Http::HttpRequestMessage> request, hstring_ref protocol, unsigned outboundBufferSizeInBytes, bool noDelay) { Networking::Sockets::ServerStreamWebSocket* result; hrcheck(X::get()->_GetServerStreamWebSocketForRequest2(request, protocol, outboundBufferSizeInBytes, noDelay, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IDevicePortalWebSocketConnection, X> : Windows::System::Diagnostics::DevicePortal::IDevicePortalWebSocketConnection_adaptor<X> { typedef adapt IDevicePortalWebSocketConnection; };
struct IDevicePortalWebSocketConnection : IDevicePortalWebSocketConnection_raw, generate<IDevicePortalWebSocketConnection> {};

// IDevicePortalConnection
struct IDevicePortalConnection_raw : IInspectable {
	virtual STDMETHODIMP _add_Closed(Foundation::TypedEventHandler<DevicePortalConnection*, DevicePortalConnectionClosedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Closed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RequestReceived(Foundation::TypedEventHandler<DevicePortalConnection*, DevicePortalConnectionRequestReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RequestReceived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IDevicePortalConnection_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DevicePortalConnection>, ptr<DevicePortalConnectionClosedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDevicePortalConnection_adaptor::Closed)->_add_Closed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDevicePortalConnection_adaptor::Closed)->_remove_Closed(token)); }
		} Closed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DevicePortalConnection>, ptr<DevicePortalConnectionRequestReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDevicePortalConnection_adaptor::RequestReceived)->_add_RequestReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDevicePortalConnection_adaptor::RequestReceived)->_remove_RequestReceived(token)); }
		} RequestReceived;
	};
	IDevicePortalConnection_adaptor() {}
};
template<typename X> struct adapt<IDevicePortalConnection, X> : Windows::System::Diagnostics::DevicePortal::IDevicePortalConnection_adaptor<X> { typedef adapt IDevicePortalConnection; };
struct IDevicePortalConnection : IDevicePortalConnection_raw, generate<IDevicePortalConnection> {};

// DevicePortalConnection
template<typename> struct DevicePortalConnection_statics {
	static ptr<DevicePortalConnection> GetForAppServiceConnection(pptr<ApplicationModel::AppService::AppServiceConnection> appServiceConnection) { DevicePortalConnection* value; hrcheck(get_activation_factory<DevicePortalConnection, IDevicePortalConnectionStatics>()->_GetForAppServiceConnection(appServiceConnection, &value)); return from_abi(value); }
};

template<typename X> struct statics<DevicePortalConnection, X> : X, Windows::System::Diagnostics::DevicePortal::DevicePortalConnection_statics<void> {
	typedef typename X::root_type DevicePortalConnection;
};
struct DevicePortalConnection : generate<DevicePortalConnection> {
	using IDevicePortalWebSocketConnection::GetServerMessageWebSocketForRequest;
	using IDevicePortalWebSocketConnection::GetServerStreamWebSocketForRequest;
};
}}}}
} // namespace iso_winrt
