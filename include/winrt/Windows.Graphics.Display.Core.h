#pragma once
// generated by isopod tools
// namespaces:
// Windows.Graphics.Display.Core

#include "Windows.Graphics.Display.Core.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::Graphics::Display::Core::HdmiDisplayColorSpace> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::Core::HdmiDisplayPixelEncoding> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::Core::HdmiDisplayHdrOption> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::Core::HdmiDisplayHdr2086Metadata> : value_type<unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short> {};
template<> struct def<Windows::Graphics::Display::Core::IHdmiDisplayMode> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::Core::HdmiDisplayMode> : class_type<Platform::Object, Windows::Graphics::Display::Core::IHdmiDisplayMode> {};
template<> struct def<Windows::Graphics::Display::Core::IHdmiDisplayInformationStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::Core::IHdmiDisplayInformation> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::Core::HdmiDisplayInformation> : class_type<Platform::Object, Windows::Graphics::Display::Core::IHdmiDisplayInformation> {};

// uuids

template<> struct uuid<Windows::Graphics::Display::Core::IHdmiDisplayMode> { define_guid(0xC06D5AD, 0x1B90, 0x4F51, 0x99, 0x81, 0xEF, 0x5A, 0x1C, 0xD, 0xDF, 0x66);};
template<> struct uuid<Windows::Graphics::Display::Core::IHdmiDisplayInformationStatics> { define_guid(0x6CE6B260, 0xF42A, 0x4A15, 0x91, 0x4C, 0x7B, 0x8E, 0x2A, 0x5A, 0x65, 0xDF);};
template<> struct uuid<Windows::Graphics::Display::Core::IHdmiDisplayInformation> { define_guid(0x130B3C0A, 0xF565, 0x476E, 0xAB, 0xD5, 0xEA, 0x5, 0xAE, 0xE7, 0x4C, 0x69);};

// types

namespace Windows { namespace Graphics { namespace Display { namespace Core {

// IHdmiDisplayMode
struct IHdmiDisplayMode_raw : IInspectable {
	virtual STDMETHODIMP _get_ResolutionWidthInRawPixels(unsigned *value);
	virtual STDMETHODIMP _get_ResolutionHeightInRawPixels(unsigned *value);
	virtual STDMETHODIMP _get_RefreshRate(double *value);
	virtual STDMETHODIMP _get_StereoEnabled(bool *value);
	virtual STDMETHODIMP _get_BitsPerPixel(unsigned short *value);
	virtual STDMETHODIMP _IsEqual(HdmiDisplayMode* mode, bool *result);
	virtual STDMETHODIMP _get_ColorSpace(HdmiDisplayColorSpace *value);
	virtual STDMETHODIMP _get_PixelEncoding(HdmiDisplayPixelEncoding *value);
	virtual STDMETHODIMP _get_IsSdrLuminanceSupported(bool *value);
	virtual STDMETHODIMP _get_IsSmpte2084Supported(bool *value);
	virtual STDMETHODIMP _get_Is2086MetadataSupported(bool *value);
};
template<typename X> struct IHdmiDisplayMode_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHdmiDisplayMode_adaptor::BitsPerPixel)->_get_BitsPerPixel(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} BitsPerPixel;
		struct : property {
			HdmiDisplayColorSpace get() { HdmiDisplayColorSpace value; hrcheck(enc(&IHdmiDisplayMode_adaptor::ColorSpace)->_get_ColorSpace(&value)); return value; }
			HdmiDisplayColorSpace operator()() { return get(); }
			operator HdmiDisplayColorSpace () { return get(); }
		} ColorSpace;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHdmiDisplayMode_adaptor::Is2086MetadataSupported)->_get_Is2086MetadataSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Is2086MetadataSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHdmiDisplayMode_adaptor::IsSdrLuminanceSupported)->_get_IsSdrLuminanceSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSdrLuminanceSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHdmiDisplayMode_adaptor::IsSmpte2084Supported)->_get_IsSmpte2084Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSmpte2084Supported;
		struct : property {
			HdmiDisplayPixelEncoding get() { HdmiDisplayPixelEncoding value; hrcheck(enc(&IHdmiDisplayMode_adaptor::PixelEncoding)->_get_PixelEncoding(&value)); return value; }
			HdmiDisplayPixelEncoding operator()() { return get(); }
			operator HdmiDisplayPixelEncoding () { return get(); }
		} PixelEncoding;
		struct : property {
			double get() { double value; hrcheck(enc(&IHdmiDisplayMode_adaptor::RefreshRate)->_get_RefreshRate(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} RefreshRate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHdmiDisplayMode_adaptor::ResolutionHeightInRawPixels)->_get_ResolutionHeightInRawPixels(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ResolutionHeightInRawPixels;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHdmiDisplayMode_adaptor::ResolutionWidthInRawPixels)->_get_ResolutionWidthInRawPixels(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ResolutionWidthInRawPixels;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHdmiDisplayMode_adaptor::StereoEnabled)->_get_StereoEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} StereoEnabled;
	};
	bool IsEqual(pptr<HdmiDisplayMode> mode) { bool result; hrcheck(X::get()->_IsEqual(mode, &result)); return result; }
	IHdmiDisplayMode_adaptor() {}
};
template<typename X> struct adapt<IHdmiDisplayMode, X> : Windows::Graphics::Display::Core::IHdmiDisplayMode_adaptor<X> { typedef adapt IHdmiDisplayMode; };
struct IHdmiDisplayMode : IHdmiDisplayMode_raw, generate<IHdmiDisplayMode> {};

// HdmiDisplayMode
template<typename X> struct statics<HdmiDisplayMode, X> : X {
	typedef typename X::root_type HdmiDisplayMode;
};
struct HdmiDisplayMode : generate<HdmiDisplayMode> {};

// IHdmiDisplayInformationStatics
struct IHdmiDisplayInformationStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(HdmiDisplayInformation* *result);
};

// IHdmiDisplayInformation
struct IHdmiDisplayInformation_raw : IInspectable {
	virtual STDMETHODIMP _GetSupportedDisplayModes(Foundation::Collections::IVectorView<HdmiDisplayMode*>* *result);
	virtual STDMETHODIMP _GetCurrentDisplayMode(HdmiDisplayMode* *result);
	virtual STDMETHODIMP _SetDefaultDisplayModeAsync(Foundation::IAsyncAction* *operation);
	virtual STDMETHODIMP _RequestSetCurrentDisplayModeAsync(HdmiDisplayMode* mode, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestSetCurrentDisplayModeWithHdrAsync(HdmiDisplayMode* mode, HdmiDisplayHdrOption hdrOption, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RequestSetCurrentDisplayModeWithHdrAndMetadataAsync(HdmiDisplayMode* mode, HdmiDisplayHdrOption hdrOption, HdmiDisplayHdr2086Metadata hdrMetadata, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _add_DisplayModesChanged(Foundation::TypedEventHandler<HdmiDisplayInformation*, IInspectable*>* value, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DisplayModesChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IHdmiDisplayInformation_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HdmiDisplayInformation>, object>> value) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHdmiDisplayInformation_adaptor::DisplayModesChanged)->_add_DisplayModesChanged(to_abi(value), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHdmiDisplayInformation_adaptor::DisplayModesChanged)->_remove_DisplayModesChanged(token)); }
		} DisplayModesChanged;
	};
	ptr<Foundation::Collections::IVectorView<ptr<HdmiDisplayMode>>> GetSupportedDisplayModes() { Foundation::Collections::IVectorView<HdmiDisplayMode*>* result; hrcheck(X::get()->_GetSupportedDisplayModes(&result)); return from_abi(result); }
	ptr<HdmiDisplayMode> GetCurrentDisplayMode() { HdmiDisplayMode* result; hrcheck(X::get()->_GetCurrentDisplayMode(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SetDefaultDisplayModeAsync() { Foundation::IAsyncAction* operation; hrcheck(X::get()->_SetDefaultDisplayModeAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestSetCurrentDisplayModeAsync(pptr<HdmiDisplayMode> mode) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestSetCurrentDisplayModeAsync(mode, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestSetCurrentDisplayModeAsync(pptr<HdmiDisplayMode> mode, HdmiDisplayHdrOption hdrOption) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestSetCurrentDisplayModeWithHdrAsync(mode, hdrOption, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> RequestSetCurrentDisplayModeAsync(pptr<HdmiDisplayMode> mode, HdmiDisplayHdrOption hdrOption, const HdmiDisplayHdr2086Metadata& hdrMetadata) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RequestSetCurrentDisplayModeWithHdrAndMetadataAsync(mode, hdrOption, hdrMetadata, &operation)); return from_abi(operation); }
	IHdmiDisplayInformation_adaptor() {}
};
template<typename X> struct adapt<IHdmiDisplayInformation, X> : Windows::Graphics::Display::Core::IHdmiDisplayInformation_adaptor<X> { typedef adapt IHdmiDisplayInformation; };
struct IHdmiDisplayInformation : IHdmiDisplayInformation_raw, generate<IHdmiDisplayInformation> {};

// HdmiDisplayInformation
template<typename> struct HdmiDisplayInformation_statics {
	static ptr<HdmiDisplayInformation> GetForCurrentView() { HdmiDisplayInformation* result; hrcheck(get_activation_factory<HdmiDisplayInformation, IHdmiDisplayInformationStatics>()->_GetForCurrentView(&result)); return from_abi(result); }
};

template<typename X> struct statics<HdmiDisplayInformation, X> : X, Windows::Graphics::Display::Core::HdmiDisplayInformation_statics<void> {
	typedef typename X::root_type HdmiDisplayInformation;
};
struct HdmiDisplayInformation : generate<HdmiDisplayInformation> {
	using IHdmiDisplayInformation::RequestSetCurrentDisplayModeAsync;
};
}}}}
} // namespace iso_winrt
