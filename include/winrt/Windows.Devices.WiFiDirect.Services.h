#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.WiFiDirect.Services

#include "Windows.Devices.WiFiDirect.Services.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Enumeration {
struct DeviceInformation;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}
namespace Networking { namespace Sockets {
struct StreamSocketListener;
struct DatagramSocket;
}
struct EndpointPair;
}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionErrorStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertisementStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceError> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceIPProtocol> : enum_type<int> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceProvisioningInfo> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceProvisioningInfo> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceProvisioningInfo> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSession> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSession> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAutoAcceptSessionConnectedEventArgs> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceRemotePortAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceRemotePortAddedEventArgs> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceRemotePortAddedEventArgs> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionDeferredEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionDeferredEventArgs> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionDeferredEventArgs> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequest> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionRequest> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequest> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionRequestedEventArgs> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequestedEventArgs> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAdvertiserFactory> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAdvertiser> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAdvertiser>, custom_activators {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::IWiFiDirectService> : interface_type<> {};
template<> struct def<Windows::Devices::WiFiDirect::Services::WiFiDirectService> : class_type<Platform::Object, Windows::Devices::WiFiDirect::Services::IWiFiDirectService> {};

// uuids

template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceProvisioningInfo> { define_guid(0x8BDB7CFE, 0x97D9, 0x45A2, 0x8E, 0x99, 0xDB, 0x50, 0x91, 0xF, 0xB6, 0xA6);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs> { define_guid(0xDCD9E01E, 0x83DF, 0x43E5, 0x8F, 0x43, 0xCB, 0xE8, 0x47, 0x9E, 0x84, 0xEB);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSession> { define_guid(0x81142163, 0xE426, 0x47CB, 0x86, 0x40, 0xE1, 0xB3, 0x58, 0x8B, 0xF2, 0x6F);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceRemotePortAddedEventArgs> { define_guid(0xD4CEBAC1, 0x3FD3, 0x4F0E, 0xB7, 0xBD, 0x78, 0x29, 0x6, 0xF4, 0x44, 0x11);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionDeferredEventArgs> { define_guid(0x8DFC197F, 0x1201, 0x4F1F, 0xB6, 0xF4, 0x5D, 0xF1, 0xB7, 0xB9, 0xFB, 0x2E);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequestedEventArgs> { define_guid(0x74BDCC11, 0x53D6, 0x4999, 0xB4, 0xF8, 0x6C, 0x8E, 0xCC, 0x17, 0x71, 0xE7);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequest> { define_guid(0xA0E27C8B, 0x50CB, 0x4A58, 0x9B, 0xCF, 0xE4, 0x72, 0xB9, 0x9F, 0xBA, 0x4);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAdvertiserFactory> { define_guid(0x3106AC0D, 0xB446, 0x4F13, 0x9F, 0x9A, 0x8A, 0xE9, 0x25, 0xFE, 0xBA, 0x2B);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAdvertiser> { define_guid(0xA4AA1EE1, 0x9D8F, 0x4F4F, 0x93, 0xEE, 0x7D, 0xDE, 0xA2, 0xE3, 0x7F, 0x46);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceStatics> { define_guid(0x7DB40045, 0xFD74, 0x4688, 0xB7, 0x25, 0x5D, 0xCE, 0x86, 0xAC, 0xF2, 0x33);};
template<> struct uuid<Windows::Devices::WiFiDirect::Services::IWiFiDirectService> { define_guid(0x50AABBB8, 0x5F71, 0x45EC, 0x84, 0xF1, 0xA1, 0xE4, 0xFC, 0x78, 0x79, 0xA3);};

// types

namespace Windows { namespace Devices { namespace WiFiDirect { namespace Services {

// IWiFiDirectServiceProvisioningInfo
struct IWiFiDirectServiceProvisioningInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_SelectedConfigurationMethod(WiFiDirectServiceConfigurationMethod *value);
	virtual STDMETHODIMP _get_IsGroupFormationNeeded(bool *value);
};
template<typename X> struct IWiFiDirectServiceProvisioningInfo_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWiFiDirectServiceProvisioningInfo_adaptor::IsGroupFormationNeeded)->_get_IsGroupFormationNeeded(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsGroupFormationNeeded;
		struct : property {
			WiFiDirectServiceConfigurationMethod get() { WiFiDirectServiceConfigurationMethod value; hrcheck(enc(&IWiFiDirectServiceProvisioningInfo_adaptor::SelectedConfigurationMethod)->_get_SelectedConfigurationMethod(&value)); return value; }
			WiFiDirectServiceConfigurationMethod operator()() { return get(); }
			operator WiFiDirectServiceConfigurationMethod () { return get(); }
		} SelectedConfigurationMethod;
	};
	IWiFiDirectServiceProvisioningInfo_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectServiceProvisioningInfo, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceProvisioningInfo_adaptor<X> { typedef adapt IWiFiDirectServiceProvisioningInfo; };
struct IWiFiDirectServiceProvisioningInfo : IWiFiDirectServiceProvisioningInfo_raw, generate<IWiFiDirectServiceProvisioningInfo> {};

// WiFiDirectServiceProvisioningInfo
template<typename X> struct statics<WiFiDirectServiceProvisioningInfo, X> : X {
	typedef typename X::root_type WiFiDirectServiceProvisioningInfo;
};
struct WiFiDirectServiceProvisioningInfo : generate<WiFiDirectServiceProvisioningInfo> {};

// IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs
struct IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Session(WiFiDirectServiceSession* *value);
	virtual STDMETHODIMP _get_SessionInfo(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<WiFiDirectServiceSession> get() { WiFiDirectServiceSession* value; hrcheck(enc(&IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<WiFiDirectServiceSession> operator()() { return get(); }
			operator ptr<WiFiDirectServiceSession> () { return get(); }
			ptr<WiFiDirectServiceSession> operator->() { return get(); }
		} Session;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_adaptor::SessionInfo)->_get_SessionInfo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} SessionInfo;
	};
	IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_adaptor<X> { typedef adapt IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs; };
struct IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs : IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs_raw, generate<IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs> {};

// IWiFiDirectServiceSession
struct IWiFiDirectServiceSession_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceName(HSTRING *value);
	virtual STDMETHODIMP _get_Status(WiFiDirectServiceSessionStatus *value);
	virtual STDMETHODIMP _get_ErrorStatus(WiFiDirectServiceSessionErrorStatus *value);
	virtual STDMETHODIMP _get_SessionId(unsigned *value);
	virtual STDMETHODIMP _get_AdvertisementId(unsigned *value);
	virtual STDMETHODIMP _get_ServiceAddress(HSTRING *value);
	virtual STDMETHODIMP _get_SessionAddress(HSTRING *value);
	virtual STDMETHODIMP _GetConnectionEndpointPairs(Foundation::Collections::IVectorView<Networking::EndpointPair*>* *value);
	virtual STDMETHODIMP _add_SessionStatusChanged(Foundation::TypedEventHandler<WiFiDirectServiceSession*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SessionStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _AddStreamSocketListenerAsync(Networking::Sockets::StreamSocketListener* value, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _AddDatagramSocketAsync(Networking::Sockets::DatagramSocket* value, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _add_RemotePortAdded(Foundation::TypedEventHandler<WiFiDirectServiceSession*, WiFiDirectServiceRemotePortAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemotePortAdded(Foundation::EventRegistrationToken token);
};
template<typename X> struct IWiFiDirectServiceSession_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::AdvertisementId)->_get_AdvertisementId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} AdvertisementId;
		struct : property {
			WiFiDirectServiceSessionErrorStatus get() { WiFiDirectServiceSessionErrorStatus value; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::ErrorStatus)->_get_ErrorStatus(&value)); return value; }
			WiFiDirectServiceSessionErrorStatus operator()() { return get(); }
			operator WiFiDirectServiceSessionErrorStatus () { return get(); }
		} ErrorStatus;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::ServiceAddress)->_get_ServiceAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceAddress;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::ServiceName)->_get_ServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::SessionAddress)->_get_SessionAddress(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SessionAddress;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::SessionId)->_get_SessionId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SessionId;
		struct : property {
			WiFiDirectServiceSessionStatus get() { WiFiDirectServiceSessionStatus value; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::Status)->_get_Status(&value)); return value; }
			WiFiDirectServiceSessionStatus operator()() { return get(); }
			operator WiFiDirectServiceSessionStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WiFiDirectServiceSession>, ptr<WiFiDirectServiceRemotePortAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::RemotePortAdded)->_add_RemotePortAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWiFiDirectServiceSession_adaptor::RemotePortAdded)->_remove_RemotePortAdded(token)); }
		} RemotePortAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WiFiDirectServiceSession>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWiFiDirectServiceSession_adaptor::SessionStatusChanged)->_add_SessionStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWiFiDirectServiceSession_adaptor::SessionStatusChanged)->_remove_SessionStatusChanged(token)); }
		} SessionStatusChanged;
	};
	ptr<Foundation::Collections::IVectorView<ptr<Networking::EndpointPair>>> GetConnectionEndpointPairs() { Foundation::Collections::IVectorView<Networking::EndpointPair*>* value; hrcheck(X::get()->_GetConnectionEndpointPairs(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> AddStreamSocketListenerAsync(pptr<Networking::Sockets::StreamSocketListener> value) { Foundation::IAsyncAction* result; hrcheck(X::get()->_AddStreamSocketListenerAsync(value, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> AddDatagramSocketAsync(pptr<Networking::Sockets::DatagramSocket> value) { Foundation::IAsyncAction* result; hrcheck(X::get()->_AddDatagramSocketAsync(value, &result)); return from_abi(result); }
	IWiFiDirectServiceSession_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectServiceSession, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSession_adaptor<X> { typedef adapt IWiFiDirectServiceSession; };
struct IWiFiDirectServiceSession : IWiFiDirectServiceSession_raw, generate<IWiFiDirectServiceSession> {};

// WiFiDirectServiceSession
template<typename X> struct statics<WiFiDirectServiceSession, X> : X {
	typedef typename X::root_type WiFiDirectServiceSession;
};
struct WiFiDirectServiceSession : generate<WiFiDirectServiceSession> {};

// WiFiDirectServiceAutoAcceptSessionConnectedEventArgs
template<typename X> struct statics<WiFiDirectServiceAutoAcceptSessionConnectedEventArgs, X> : X {
	typedef typename X::root_type WiFiDirectServiceAutoAcceptSessionConnectedEventArgs;
};
struct WiFiDirectServiceAutoAcceptSessionConnectedEventArgs : generate<WiFiDirectServiceAutoAcceptSessionConnectedEventArgs> {};

// IWiFiDirectServiceRemotePortAddedEventArgs
struct IWiFiDirectServiceRemotePortAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_EndpointPairs(Foundation::Collections::IVectorView<Networking::EndpointPair*>* *value);
	virtual STDMETHODIMP _get_Protocol(WiFiDirectServiceIPProtocol *value);
};
template<typename X> struct IWiFiDirectServiceRemotePortAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Networking::EndpointPair>>> get() { Foundation::Collections::IVectorView<Networking::EndpointPair*>* value; hrcheck(enc(&IWiFiDirectServiceRemotePortAddedEventArgs_adaptor::EndpointPairs)->_get_EndpointPairs(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Networking::EndpointPair>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Networking::EndpointPair>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Networking::EndpointPair>>> operator->() { return get(); }
		} EndpointPairs;
		struct : property {
			WiFiDirectServiceIPProtocol get() { WiFiDirectServiceIPProtocol value; hrcheck(enc(&IWiFiDirectServiceRemotePortAddedEventArgs_adaptor::Protocol)->_get_Protocol(&value)); return value; }
			WiFiDirectServiceIPProtocol operator()() { return get(); }
			operator WiFiDirectServiceIPProtocol () { return get(); }
		} Protocol;
	};
	IWiFiDirectServiceRemotePortAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectServiceRemotePortAddedEventArgs, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceRemotePortAddedEventArgs_adaptor<X> { typedef adapt IWiFiDirectServiceRemotePortAddedEventArgs; };
struct IWiFiDirectServiceRemotePortAddedEventArgs : IWiFiDirectServiceRemotePortAddedEventArgs_raw, generate<IWiFiDirectServiceRemotePortAddedEventArgs> {};

// WiFiDirectServiceRemotePortAddedEventArgs
template<typename X> struct statics<WiFiDirectServiceRemotePortAddedEventArgs, X> : X {
	typedef typename X::root_type WiFiDirectServiceRemotePortAddedEventArgs;
};
struct WiFiDirectServiceRemotePortAddedEventArgs : generate<WiFiDirectServiceRemotePortAddedEventArgs> {};

// IWiFiDirectServiceSessionDeferredEventArgs
struct IWiFiDirectServiceSessionDeferredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DeferredSessionInfo(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IWiFiDirectServiceSessionDeferredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IWiFiDirectServiceSessionDeferredEventArgs_adaptor::DeferredSessionInfo)->_get_DeferredSessionInfo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} DeferredSessionInfo;
	};
	IWiFiDirectServiceSessionDeferredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectServiceSessionDeferredEventArgs, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionDeferredEventArgs_adaptor<X> { typedef adapt IWiFiDirectServiceSessionDeferredEventArgs; };
struct IWiFiDirectServiceSessionDeferredEventArgs : IWiFiDirectServiceSessionDeferredEventArgs_raw, generate<IWiFiDirectServiceSessionDeferredEventArgs> {};

// WiFiDirectServiceSessionDeferredEventArgs
template<typename X> struct statics<WiFiDirectServiceSessionDeferredEventArgs, X> : X {
	typedef typename X::root_type WiFiDirectServiceSessionDeferredEventArgs;
};
struct WiFiDirectServiceSessionDeferredEventArgs : generate<WiFiDirectServiceSessionDeferredEventArgs> {};

// IWiFiDirectServiceSessionRequestedEventArgs
struct IWiFiDirectServiceSessionRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetSessionRequest(WiFiDirectServiceSessionRequest* *value);
};
template<typename X> struct IWiFiDirectServiceSessionRequestedEventArgs_adaptor : X {
	ptr<WiFiDirectServiceSessionRequest> GetSessionRequest() { WiFiDirectServiceSessionRequest* value; hrcheck(X::get()->_GetSessionRequest(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IWiFiDirectServiceSessionRequestedEventArgs, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequestedEventArgs_adaptor<X> { typedef adapt IWiFiDirectServiceSessionRequestedEventArgs; };
struct IWiFiDirectServiceSessionRequestedEventArgs : IWiFiDirectServiceSessionRequestedEventArgs_raw, generate<IWiFiDirectServiceSessionRequestedEventArgs> {};

// IWiFiDirectServiceSessionRequest
struct IWiFiDirectServiceSessionRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceInformation(Enumeration::DeviceInformation* *value);
	virtual STDMETHODIMP _get_ProvisioningInfo(WiFiDirectServiceProvisioningInfo* *value);
	virtual STDMETHODIMP _get_SessionInfo(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IWiFiDirectServiceSessionRequest_adaptor : X {
	union {
		struct : property {
			ptr<Enumeration::DeviceInformation> get() { Enumeration::DeviceInformation* value; hrcheck(enc(&IWiFiDirectServiceSessionRequest_adaptor::DeviceInformation)->_get_DeviceInformation(&value)); return from_abi(value); }
			ptr<Enumeration::DeviceInformation> operator()() { return get(); }
			operator ptr<Enumeration::DeviceInformation> () { return get(); }
			ptr<Enumeration::DeviceInformation> operator->() { return get(); }
		} DeviceInformation;
		struct : property {
			ptr<WiFiDirectServiceProvisioningInfo> get() { WiFiDirectServiceProvisioningInfo* value; hrcheck(enc(&IWiFiDirectServiceSessionRequest_adaptor::ProvisioningInfo)->_get_ProvisioningInfo(&value)); return from_abi(value); }
			ptr<WiFiDirectServiceProvisioningInfo> operator()() { return get(); }
			operator ptr<WiFiDirectServiceProvisioningInfo> () { return get(); }
			ptr<WiFiDirectServiceProvisioningInfo> operator->() { return get(); }
		} ProvisioningInfo;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IWiFiDirectServiceSessionRequest_adaptor::SessionInfo)->_get_SessionInfo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} SessionInfo;
	};
	IWiFiDirectServiceSessionRequest_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectServiceSessionRequest, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceSessionRequest_adaptor<X> { typedef adapt IWiFiDirectServiceSessionRequest; };
struct IWiFiDirectServiceSessionRequest : IWiFiDirectServiceSessionRequest_raw, generate<IWiFiDirectServiceSessionRequest> {};

// WiFiDirectServiceSessionRequest
template<typename X> struct statics<WiFiDirectServiceSessionRequest, X> : X {
	typedef typename X::root_type WiFiDirectServiceSessionRequest;
};
struct WiFiDirectServiceSessionRequest : generate<WiFiDirectServiceSessionRequest> {};

// WiFiDirectServiceSessionRequestedEventArgs
template<typename X> struct statics<WiFiDirectServiceSessionRequestedEventArgs, X> : X {
	typedef typename X::root_type WiFiDirectServiceSessionRequestedEventArgs;
};
struct WiFiDirectServiceSessionRequestedEventArgs : generate<WiFiDirectServiceSessionRequestedEventArgs> {};

// IWiFiDirectServiceAdvertiserFactory
struct IWiFiDirectServiceAdvertiserFactory : IInspectable {
	virtual STDMETHODIMP _CreateWiFiDirectServiceAdvertiser(HSTRING serviceName, WiFiDirectServiceAdvertiser* *result);
};

// IWiFiDirectServiceAdvertiser
struct IWiFiDirectServiceAdvertiser_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceName(HSTRING *value);
	virtual STDMETHODIMP _get_ServiceNamePrefixes(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_ServiceInfo(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_ServiceInfo(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_AutoAcceptSession(bool *value);
	virtual STDMETHODIMP _put_AutoAcceptSession(bool value);
	virtual STDMETHODIMP _get_PreferGroupOwnerMode(bool *value);
	virtual STDMETHODIMP _put_PreferGroupOwnerMode(bool value);
	virtual STDMETHODIMP _get_PreferredConfigurationMethods(Foundation::Collections::IVector<WiFiDirectServiceConfigurationMethod>* *value);
	virtual STDMETHODIMP _get_ServiceStatus(WiFiDirectServiceStatus *value);
	virtual STDMETHODIMP _put_ServiceStatus(WiFiDirectServiceStatus value);
	virtual STDMETHODIMP _get_CustomServiceStatusCode(unsigned *value);
	virtual STDMETHODIMP _put_CustomServiceStatusCode(unsigned value);
	virtual STDMETHODIMP _get_DeferredSessionInfo(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_DeferredSessionInfo(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_AdvertisementStatus(WiFiDirectServiceAdvertisementStatus *value);
	virtual STDMETHODIMP _get_ServiceError(WiFiDirectServiceError *value);
	virtual STDMETHODIMP _add_SessionRequested(Foundation::TypedEventHandler<WiFiDirectServiceAdvertiser*, WiFiDirectServiceSessionRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SessionRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AutoAcceptSessionConnected(Foundation::TypedEventHandler<WiFiDirectServiceAdvertiser*, WiFiDirectServiceAutoAcceptSessionConnectedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AutoAcceptSessionConnected(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AdvertisementStatusChanged(Foundation::TypedEventHandler<WiFiDirectServiceAdvertiser*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AdvertisementStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _ConnectAsync(Enumeration::DeviceInformation* deviceInfo, Foundation::IAsyncOperation<WiFiDirectServiceSession*>* *result);
	virtual STDMETHODIMP _ConnectAsyncWithPin(Enumeration::DeviceInformation* deviceInfo, HSTRING pin, Foundation::IAsyncOperation<WiFiDirectServiceSession*>* *result);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
};
template<typename X> struct IWiFiDirectServiceAdvertiser_adaptor : X {
	union {
		struct : property {
			WiFiDirectServiceAdvertisementStatus get() { WiFiDirectServiceAdvertisementStatus value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::AdvertisementStatus)->_get_AdvertisementStatus(&value)); return value; }
			WiFiDirectServiceAdvertisementStatus operator()() { return get(); }
			operator WiFiDirectServiceAdvertisementStatus () { return get(); }
		} AdvertisementStatus;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::AutoAcceptSession)->_get_AutoAcceptSession(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::AutoAcceptSession)->_put_AutoAcceptSession(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AutoAcceptSession;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::CustomServiceStatusCode)->_get_CustomServiceStatusCode(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::CustomServiceStatusCode)->_put_CustomServiceStatusCode(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CustomServiceStatusCode;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::DeferredSessionInfo)->_get_DeferredSessionInfo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::DeferredSessionInfo)->_put_DeferredSessionInfo(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} DeferredSessionInfo;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::PreferGroupOwnerMode)->_get_PreferGroupOwnerMode(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::PreferGroupOwnerMode)->_put_PreferGroupOwnerMode(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} PreferGroupOwnerMode;
		struct : property {
			ptr<Foundation::Collections::IVector<WiFiDirectServiceConfigurationMethod>> get() { Foundation::Collections::IVector<WiFiDirectServiceConfigurationMethod>* value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::PreferredConfigurationMethods)->_get_PreferredConfigurationMethods(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<WiFiDirectServiceConfigurationMethod>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<WiFiDirectServiceConfigurationMethod>> () { return get(); }
			ptr<Foundation::Collections::IVector<WiFiDirectServiceConfigurationMethod>> operator->() { return get(); }
		} PreferredConfigurationMethods;
		struct : property {
			WiFiDirectServiceError get() { WiFiDirectServiceError value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::ServiceError)->_get_ServiceError(&value)); return value; }
			WiFiDirectServiceError operator()() { return get(); }
			operator WiFiDirectServiceError () { return get(); }
		} ServiceError;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::ServiceInfo)->_get_ServiceInfo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::ServiceInfo)->_put_ServiceInfo(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} ServiceInfo;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::ServiceName)->_get_ServiceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceName;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::ServiceNamePrefixes)->_get_ServiceNamePrefixes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} ServiceNamePrefixes;
		struct : property {
			WiFiDirectServiceStatus get() { WiFiDirectServiceStatus value; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::ServiceStatus)->_get_ServiceStatus(&value)); return value; }
			WiFiDirectServiceStatus operator()() { return get(); }
			operator WiFiDirectServiceStatus () { return get(); }
			void put(WiFiDirectServiceStatus value) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::ServiceStatus)->_put_ServiceStatus(value)); }
			void operator=(WiFiDirectServiceStatus value) { put(value); }
			void operator()(WiFiDirectServiceStatus value) { put(value); }
		} ServiceStatus;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WiFiDirectServiceAdvertiser>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::AdvertisementStatusChanged)->_add_AdvertisementStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::AdvertisementStatusChanged)->_remove_AdvertisementStatusChanged(token)); }
		} AdvertisementStatusChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WiFiDirectServiceAdvertiser>, ptr<WiFiDirectServiceAutoAcceptSessionConnectedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::AutoAcceptSessionConnected)->_add_AutoAcceptSessionConnected(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::AutoAcceptSessionConnected)->_remove_AutoAcceptSessionConnected(token)); }
		} AutoAcceptSessionConnected;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WiFiDirectServiceAdvertiser>, ptr<WiFiDirectServiceSessionRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::SessionRequested)->_add_SessionRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWiFiDirectServiceAdvertiser_adaptor::SessionRequested)->_remove_SessionRequested(token)); }
		} SessionRequested;
	};
	ptr<Foundation::IAsyncOperation<ptr<WiFiDirectServiceSession>>> ConnectAsync(pptr<Enumeration::DeviceInformation> deviceInfo) { Foundation::IAsyncOperation<WiFiDirectServiceSession*>* result; hrcheck(X::get()->_ConnectAsync(deviceInfo, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<WiFiDirectServiceSession>>> ConnectAsync(pptr<Enumeration::DeviceInformation> deviceInfo, hstring_ref pin) { Foundation::IAsyncOperation<WiFiDirectServiceSession*>* result; hrcheck(X::get()->_ConnectAsyncWithPin(deviceInfo, pin, &result)); return from_abi(result); }
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IWiFiDirectServiceAdvertiser_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectServiceAdvertiser, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectServiceAdvertiser_adaptor<X> { typedef adapt IWiFiDirectServiceAdvertiser; };
struct IWiFiDirectServiceAdvertiser : IWiFiDirectServiceAdvertiser_raw, generate<IWiFiDirectServiceAdvertiser> {};

// WiFiDirectServiceAdvertiser
template<typename> struct WiFiDirectServiceAdvertiser_statics {
	static WiFiDirectServiceAdvertiser *activate(hstring_ref serviceName) { WiFiDirectServiceAdvertiser *result; hrcheck(get_activation_factory<WiFiDirectServiceAdvertiser, IWiFiDirectServiceAdvertiserFactory>()->_CreateWiFiDirectServiceAdvertiser(serviceName, &result)); return result; }
};

template<typename X> struct statics<WiFiDirectServiceAdvertiser, X> : X, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser_statics<void> {
	using Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser_statics<void>::activate;
	typedef typename X::root_type WiFiDirectServiceAdvertiser;
};
struct WiFiDirectServiceAdvertiser : generate<WiFiDirectServiceAdvertiser> {
	using IWiFiDirectServiceAdvertiser::ConnectAsync;
};

// IWiFiDirectServiceStatics
struct IWiFiDirectServiceStatics : IInspectable {
	virtual STDMETHODIMP _GetSelector(HSTRING serviceName, HSTRING *serviceSelector);
	virtual STDMETHODIMP _GetSelectorWithFilter(HSTRING serviceName, Storage::Streams::IBuffer* serviceInfoFilter, HSTRING *serviceSelector);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<WiFiDirectService*>* *asyncOp);
};

// IWiFiDirectService
struct IWiFiDirectService_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteServiceInfo(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_SupportedConfigurationMethods(Foundation::Collections::IVectorView<WiFiDirectServiceConfigurationMethod>* *value);
	virtual STDMETHODIMP _get_PreferGroupOwnerMode(bool *value);
	virtual STDMETHODIMP _put_PreferGroupOwnerMode(bool value);
	virtual STDMETHODIMP _get_SessionInfo(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_SessionInfo(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_ServiceError(WiFiDirectServiceError *value);
	virtual STDMETHODIMP _add_SessionDeferred(Foundation::TypedEventHandler<WiFiDirectService*, WiFiDirectServiceSessionDeferredEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SessionDeferred(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetProvisioningInfoAsync(WiFiDirectServiceConfigurationMethod selectedConfigurationMethod, Foundation::IAsyncOperation<WiFiDirectServiceProvisioningInfo*>* *result);
	virtual STDMETHODIMP _ConnectAsync(Foundation::IAsyncOperation<WiFiDirectServiceSession*>* *result);
	virtual STDMETHODIMP _ConnectAsyncWithPin(HSTRING pin, Foundation::IAsyncOperation<WiFiDirectServiceSession*>* *result);
};
template<typename X> struct IWiFiDirectService_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWiFiDirectService_adaptor::PreferGroupOwnerMode)->_get_PreferGroupOwnerMode(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWiFiDirectService_adaptor::PreferGroupOwnerMode)->_put_PreferGroupOwnerMode(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} PreferGroupOwnerMode;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IWiFiDirectService_adaptor::RemoteServiceInfo)->_get_RemoteServiceInfo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} RemoteServiceInfo;
		struct : property {
			WiFiDirectServiceError get() { WiFiDirectServiceError value; hrcheck(enc(&IWiFiDirectService_adaptor::ServiceError)->_get_ServiceError(&value)); return value; }
			WiFiDirectServiceError operator()() { return get(); }
			operator WiFiDirectServiceError () { return get(); }
		} ServiceError;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IWiFiDirectService_adaptor::SessionInfo)->_get_SessionInfo(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IWiFiDirectService_adaptor::SessionInfo)->_put_SessionInfo(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} SessionInfo;
		struct : property {
			ptr<Foundation::Collections::IVectorView<WiFiDirectServiceConfigurationMethod>> get() { Foundation::Collections::IVectorView<WiFiDirectServiceConfigurationMethod>* value; hrcheck(enc(&IWiFiDirectService_adaptor::SupportedConfigurationMethods)->_get_SupportedConfigurationMethods(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<WiFiDirectServiceConfigurationMethod>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<WiFiDirectServiceConfigurationMethod>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<WiFiDirectServiceConfigurationMethod>> operator->() { return get(); }
		} SupportedConfigurationMethods;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<WiFiDirectService>, ptr<WiFiDirectServiceSessionDeferredEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWiFiDirectService_adaptor::SessionDeferred)->_add_SessionDeferred(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWiFiDirectService_adaptor::SessionDeferred)->_remove_SessionDeferred(token)); }
		} SessionDeferred;
	};
	ptr<Foundation::IAsyncOperation<ptr<WiFiDirectServiceProvisioningInfo>>> GetProvisioningInfoAsync(WiFiDirectServiceConfigurationMethod selectedConfigurationMethod) { Foundation::IAsyncOperation<WiFiDirectServiceProvisioningInfo*>* result; hrcheck(X::get()->_GetProvisioningInfoAsync(selectedConfigurationMethod, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<WiFiDirectServiceSession>>> ConnectAsync() { Foundation::IAsyncOperation<WiFiDirectServiceSession*>* result; hrcheck(X::get()->_ConnectAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<WiFiDirectServiceSession>>> ConnectAsync(hstring_ref pin) { Foundation::IAsyncOperation<WiFiDirectServiceSession*>* result; hrcheck(X::get()->_ConnectAsyncWithPin(pin, &result)); return from_abi(result); }
	IWiFiDirectService_adaptor() {}
};
template<typename X> struct adapt<IWiFiDirectService, X> : Windows::Devices::WiFiDirect::Services::IWiFiDirectService_adaptor<X> { typedef adapt IWiFiDirectService; };
struct IWiFiDirectService : IWiFiDirectService_raw, generate<IWiFiDirectService> {};

// WiFiDirectService
template<typename> struct WiFiDirectService_statics {
	static hstring GetSelector(hstring_ref serviceName) { HSTRING serviceSelector; hrcheck(get_activation_factory<WiFiDirectService, IWiFiDirectServiceStatics>()->_GetSelector(serviceName, &serviceSelector)); return from_abi(serviceSelector); }
	static hstring GetSelector(hstring_ref serviceName, pptr<Storage::Streams::IBuffer> serviceInfoFilter) { HSTRING serviceSelector; hrcheck(get_activation_factory<WiFiDirectService, IWiFiDirectServiceStatics>()->_GetSelectorWithFilter(serviceName, serviceInfoFilter, &serviceSelector)); return from_abi(serviceSelector); }
	static ptr<Foundation::IAsyncOperation<ptr<WiFiDirectService>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<WiFiDirectService*>* asyncOp; hrcheck(get_activation_factory<WiFiDirectService, IWiFiDirectServiceStatics>()->_FromIdAsync(deviceId, &asyncOp)); return from_abi(asyncOp); }
};

template<typename X> struct statics<WiFiDirectService, X> : X, Windows::Devices::WiFiDirect::Services::WiFiDirectService_statics<void> {
	typedef typename X::root_type WiFiDirectService;
};
struct WiFiDirectService : generate<WiFiDirectService> {
	using IWiFiDirectService::ConnectAsync;
};
}}}}
} // namespace iso_winrt
