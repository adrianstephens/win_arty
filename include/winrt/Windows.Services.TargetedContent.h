#pragma once
// generated by isopod tools
// namespaces:
// Windows.Services.TargetedContent

#include "Windows.Services.TargetedContent.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.Storage.Streams.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename K, typename V> struct IMap;
template<typename K, typename V> struct IMapView;
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::Services::TargetedContent::TargetedContentContract> : value_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentInteraction> : enum_type<int> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentValueKind> : enum_type<int> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentObjectKind> : enum_type<int> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentAvailability> : enum_type<int> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentAppInstallationState> : enum_type<int> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentSubscriptionOptions> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentSubscriptionStatics> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentSubscription> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentSubscription> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentSubscription> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentSubscriptionOptions> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentSubscriptionOptions> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentContainerStatics> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentContainer> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentContainer> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentContainer> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentChangedEventArgs> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentChangedEventArgs> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentAvailabilityChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentAvailabilityChangedEventArgs> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentAvailabilityChangedEventArgs> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentStateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentStateChangedEventArgs> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentStateChangedEventArgs> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentImage> : interface_type<Windows::Storage::Streams::IRandomAccessStreamReference> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentAction> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentCollection> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentCollection> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentCollection> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentObject> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentObject> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentObject> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentItem> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentItem> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentItem> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentValue> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentValue> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentValue> {};
template<> struct def<Windows::Services::TargetedContent::ITargetedContentItemState> : interface_type<> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentItemState> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentItemState> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentFile> : class_type<Platform::Object, Windows::Storage::Streams::IRandomAccessStreamReference> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentImage> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentImage> {};
template<> struct def<Windows::Services::TargetedContent::TargetedContentAction> : class_type<Platform::Object, Windows::Services::TargetedContent::ITargetedContentAction> {};

// uuids

template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentSubscriptionOptions> { define_guid(0x61EE6AD0, 0x2C83, 0x421B, 0x84, 0x67, 0x41, 0x3E, 0xAF, 0x1A, 0xEB, 0x97);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentSubscriptionStatics> { define_guid(0xFADDFE80, 0x360D, 0x4916, 0xB5, 0x3C, 0x7E, 0xA2, 0x70, 0x90, 0xD0, 0x2A);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentSubscription> { define_guid(0x882C2C49, 0xC652, 0x4C7A, 0xAC, 0xAD, 0x1F, 0x7F, 0xA2, 0x98, 0x6C, 0x73);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentContainerStatics> { define_guid(0x5B47E7FB, 0x2140, 0x4C1F, 0xA7, 0x36, 0xC5, 0x95, 0x83, 0xF2, 0x27, 0xD8);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentContainer> { define_guid(0xBC2494C9, 0x8837, 0x47C2, 0x85, 0xF, 0xD7, 0x9D, 0x64, 0x59, 0x59, 0x26);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentChangedEventArgs> { define_guid(0x99D488C9, 0x587E, 0x4586, 0x8E, 0xF7, 0xB5, 0x4C, 0xA9, 0x45, 0x3A, 0x16);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentAvailabilityChangedEventArgs> { define_guid(0xE0F59D26, 0x5927, 0x4450, 0x96, 0x5C, 0x1C, 0xEB, 0x7B, 0xEC, 0xDE, 0x65);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentStateChangedEventArgs> { define_guid(0x9A1CEF3D, 0x8073, 0x4416, 0x8D, 0xF2, 0x54, 0x68, 0x35, 0xA6, 0x41, 0x4F);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentImage> { define_guid(0xA7A585D9, 0x779F, 0x4B1E, 0xBB, 0xB1, 0x8E, 0xAF, 0x53, 0xFB, 0xEA, 0xB2);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentAction> { define_guid(0xD75B691E, 0x6CD6, 0x4CA0, 0x9D, 0x8F, 0x47, 0x28, 0xB0, 0xB7, 0xE6, 0xB6);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentCollection> { define_guid(0x2D4B66C5, 0xF163, 0x44BA, 0x9F, 0x6E, 0xE1, 0xA4, 0xC2, 0xBB, 0x55, 0x9D);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentObject> { define_guid(0x41D7969, 0x2212, 0x42D1, 0x9D, 0xFA, 0x88, 0xA8, 0xE3, 0x3, 0x3A, 0xA3);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentItem> { define_guid(0x38168DC4, 0x276C, 0x4C32, 0x96, 0xBA, 0x56, 0x5C, 0x6E, 0x40, 0x6E, 0x74);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentValue> { define_guid(0xAAFDE4B3, 0x4215, 0x4BF8, 0x86, 0x7F, 0x43, 0xF0, 0x48, 0x65, 0xF9, 0xBF);};
template<> struct uuid<Windows::Services::TargetedContent::ITargetedContentItemState> { define_guid(0x73935454, 0x4C65, 0x4B47, 0xA4, 0x41, 0x47, 0x2D, 0xE5, 0x3C, 0x79, 0xB6);};

// types

namespace Windows { namespace Services { namespace TargetedContent {

// ITargetedContentSubscriptionOptions
struct ITargetedContentSubscriptionOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_SubscriptionId(HSTRING *value);
	virtual STDMETHODIMP _get_AllowPartialContentAvailability(bool *value);
	virtual STDMETHODIMP _put_AllowPartialContentAvailability(bool value);
	virtual STDMETHODIMP _get_CloudQueryParameters(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_LocalFilters(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _Update();
};
template<typename X> struct ITargetedContentSubscriptionOptions_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITargetedContentSubscriptionOptions_adaptor::AllowPartialContentAvailability)->_get_AllowPartialContentAvailability(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ITargetedContentSubscriptionOptions_adaptor::AllowPartialContentAvailability)->_put_AllowPartialContentAvailability(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowPartialContentAvailability;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&ITargetedContentSubscriptionOptions_adaptor::CloudQueryParameters)->_get_CloudQueryParameters(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} CloudQueryParameters;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ITargetedContentSubscriptionOptions_adaptor::LocalFilters)->_get_LocalFilters(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} LocalFilters;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentSubscriptionOptions_adaptor::SubscriptionId)->_get_SubscriptionId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SubscriptionId;
	};
	void Update() { hrcheck(X::get()->_Update()); }
	ITargetedContentSubscriptionOptions_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentSubscriptionOptions, X> : Windows::Services::TargetedContent::ITargetedContentSubscriptionOptions_adaptor<X> { typedef adapt ITargetedContentSubscriptionOptions; };
struct ITargetedContentSubscriptionOptions : ITargetedContentSubscriptionOptions_raw, generate<ITargetedContentSubscriptionOptions> {};

// ITargetedContentSubscriptionStatics
struct ITargetedContentSubscriptionStatics : IInspectable {
	virtual STDMETHODIMP _GetAsync(HSTRING subscriptionId, Foundation::IAsyncOperation<TargetedContentSubscription*>* *asyncOperation);
	virtual STDMETHODIMP _GetOptions(HSTRING subscriptionId, TargetedContentSubscriptionOptions* *value);
};

// ITargetedContentSubscription
struct ITargetedContentSubscription_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _GetContentContainerAsync(Foundation::IAsyncOperation<TargetedContentContainer*>* *asyncOperation);
	virtual STDMETHODIMP _add_ContentChanged(Foundation::TypedEventHandler<TargetedContentSubscription*, TargetedContentChangedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_ContentChanged(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_AvailabilityChanged(Foundation::TypedEventHandler<TargetedContentSubscription*, TargetedContentAvailabilityChangedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_AvailabilityChanged(Foundation::EventRegistrationToken cookie);
	virtual STDMETHODIMP _add_StateChanged(Foundation::TypedEventHandler<TargetedContentSubscription*, TargetedContentStateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_StateChanged(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ITargetedContentSubscription_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentSubscription_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<TargetedContentSubscription>, ptr<TargetedContentAvailabilityChangedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ITargetedContentSubscription_adaptor::AvailabilityChanged)->_add_AvailabilityChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ITargetedContentSubscription_adaptor::AvailabilityChanged)->_remove_AvailabilityChanged(cookie)); }
		} AvailabilityChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<TargetedContentSubscription>, ptr<TargetedContentChangedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ITargetedContentSubscription_adaptor::ContentChanged)->_add_ContentChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ITargetedContentSubscription_adaptor::ContentChanged)->_remove_ContentChanged(cookie)); }
		} ContentChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<TargetedContentSubscription>, ptr<TargetedContentStateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ITargetedContentSubscription_adaptor::StateChanged)->_add_StateChanged(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ITargetedContentSubscription_adaptor::StateChanged)->_remove_StateChanged(cookie)); }
		} StateChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<TargetedContentContainer>>> GetContentContainerAsync() { Foundation::IAsyncOperation<TargetedContentContainer*>* asyncOperation; hrcheck(X::get()->_GetContentContainerAsync(&asyncOperation)); return from_abi(asyncOperation); }
	ITargetedContentSubscription_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentSubscription, X> : Windows::Services::TargetedContent::ITargetedContentSubscription_adaptor<X> { typedef adapt ITargetedContentSubscription; };
struct ITargetedContentSubscription : ITargetedContentSubscription_raw, generate<ITargetedContentSubscription> {};

// TargetedContentSubscription
template<typename> struct TargetedContentSubscription_statics {
	static ptr<Foundation::IAsyncOperation<ptr<TargetedContentSubscription>>> GetAsync(hstring_ref subscriptionId) { Foundation::IAsyncOperation<TargetedContentSubscription*>* asyncOperation; hrcheck(get_activation_factory<TargetedContentSubscription, ITargetedContentSubscriptionStatics>()->_GetAsync(subscriptionId, &asyncOperation)); return from_abi(asyncOperation); }
	static ptr<TargetedContentSubscriptionOptions> GetOptions(hstring_ref subscriptionId) { TargetedContentSubscriptionOptions* value; hrcheck(get_activation_factory<TargetedContentSubscription, ITargetedContentSubscriptionStatics>()->_GetOptions(subscriptionId, &value)); return from_abi(value); }
};

template<typename X> struct statics<TargetedContentSubscription, X> : X, Windows::Services::TargetedContent::TargetedContentSubscription_statics<void> {
	typedef typename X::root_type TargetedContentSubscription;
};
struct TargetedContentSubscription : generate<TargetedContentSubscription> {};

// TargetedContentSubscriptionOptions
template<typename X> struct statics<TargetedContentSubscriptionOptions, X> : X {
	typedef typename X::root_type TargetedContentSubscriptionOptions;
};
struct TargetedContentSubscriptionOptions : generate<TargetedContentSubscriptionOptions> {};

// ITargetedContentContainerStatics
struct ITargetedContentContainerStatics : IInspectable {
	virtual STDMETHODIMP _GetAsync(HSTRING contentId, Foundation::IAsyncOperation<TargetedContentContainer*>* *asyncOperation);
};

// ITargetedContentContainer
struct ITargetedContentContainer_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Availability(TargetedContentAvailability *value);
	virtual STDMETHODIMP _get_Content(TargetedContentCollection* *value);
	virtual STDMETHODIMP _SelectSingleObject(HSTRING path, TargetedContentObject* *value);
};
template<typename X> struct ITargetedContentContainer_adaptor : X {
	union {
		struct : property {
			TargetedContentAvailability get() { TargetedContentAvailability value; hrcheck(enc(&ITargetedContentContainer_adaptor::Availability)->_get_Availability(&value)); return value; }
			TargetedContentAvailability operator()() { return get(); }
			operator TargetedContentAvailability () { return get(); }
		} Availability;
		struct : property {
			ptr<TargetedContentCollection> get() { TargetedContentCollection* value; hrcheck(enc(&ITargetedContentContainer_adaptor::Content)->_get_Content(&value)); return from_abi(value); }
			ptr<TargetedContentCollection> operator()() { return get(); }
			operator ptr<TargetedContentCollection> () { return get(); }
			ptr<TargetedContentCollection> operator->() { return get(); }
		} Content;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentContainer_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ITargetedContentContainer_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	ptr<TargetedContentObject> SelectSingleObject(hstring_ref path) { TargetedContentObject* value; hrcheck(X::get()->_SelectSingleObject(path, &value)); return from_abi(value); }
	ITargetedContentContainer_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentContainer, X> : Windows::Services::TargetedContent::ITargetedContentContainer_adaptor<X> { typedef adapt ITargetedContentContainer; };
struct ITargetedContentContainer : ITargetedContentContainer_raw, generate<ITargetedContentContainer> {};

// TargetedContentContainer
template<typename> struct TargetedContentContainer_statics {
	static ptr<Foundation::IAsyncOperation<ptr<TargetedContentContainer>>> GetAsync(hstring_ref contentId) { Foundation::IAsyncOperation<TargetedContentContainer*>* asyncOperation; hrcheck(get_activation_factory<TargetedContentContainer, ITargetedContentContainerStatics>()->_GetAsync(contentId, &asyncOperation)); return from_abi(asyncOperation); }
};

template<typename X> struct statics<TargetedContentContainer, X> : X, Windows::Services::TargetedContent::TargetedContentContainer_statics<void> {
	typedef typename X::root_type TargetedContentContainer;
};
struct TargetedContentContainer : generate<TargetedContentContainer> {};

// ITargetedContentChangedEventArgs
struct ITargetedContentChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
	virtual STDMETHODIMP _get_HasPreviousContentExpired(bool *value);
};
template<typename X> struct ITargetedContentChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITargetedContentChangedEventArgs_adaptor::HasPreviousContentExpired)->_get_HasPreviousContentExpired(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasPreviousContentExpired;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ITargetedContentChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentChangedEventArgs, X> : Windows::Services::TargetedContent::ITargetedContentChangedEventArgs_adaptor<X> { typedef adapt ITargetedContentChangedEventArgs; };
struct ITargetedContentChangedEventArgs : ITargetedContentChangedEventArgs_raw, generate<ITargetedContentChangedEventArgs> {};

// TargetedContentChangedEventArgs
template<typename X> struct statics<TargetedContentChangedEventArgs, X> : X {
	typedef typename X::root_type TargetedContentChangedEventArgs;
};
struct TargetedContentChangedEventArgs : generate<TargetedContentChangedEventArgs> {};

// ITargetedContentAvailabilityChangedEventArgs
struct ITargetedContentAvailabilityChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ITargetedContentAvailabilityChangedEventArgs_adaptor : X {
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
};
template<typename X> struct adapt<ITargetedContentAvailabilityChangedEventArgs, X> : Windows::Services::TargetedContent::ITargetedContentAvailabilityChangedEventArgs_adaptor<X> { typedef adapt ITargetedContentAvailabilityChangedEventArgs; };
struct ITargetedContentAvailabilityChangedEventArgs : ITargetedContentAvailabilityChangedEventArgs_raw, generate<ITargetedContentAvailabilityChangedEventArgs> {};

// TargetedContentAvailabilityChangedEventArgs
template<typename X> struct statics<TargetedContentAvailabilityChangedEventArgs, X> : X {
	typedef typename X::root_type TargetedContentAvailabilityChangedEventArgs;
};
struct TargetedContentAvailabilityChangedEventArgs : generate<TargetedContentAvailabilityChangedEventArgs> {};

// ITargetedContentStateChangedEventArgs
struct ITargetedContentStateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ITargetedContentStateChangedEventArgs_adaptor : X {
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
};
template<typename X> struct adapt<ITargetedContentStateChangedEventArgs, X> : Windows::Services::TargetedContent::ITargetedContentStateChangedEventArgs_adaptor<X> { typedef adapt ITargetedContentStateChangedEventArgs; };
struct ITargetedContentStateChangedEventArgs : ITargetedContentStateChangedEventArgs_raw, generate<ITargetedContentStateChangedEventArgs> {};

// TargetedContentStateChangedEventArgs
template<typename X> struct statics<TargetedContentStateChangedEventArgs, X> : X {
	typedef typename X::root_type TargetedContentStateChangedEventArgs;
};
struct TargetedContentStateChangedEventArgs : generate<TargetedContentStateChangedEventArgs> {};

// ITargetedContentImage
struct ITargetedContentImage_raw : IInspectable {
	virtual STDMETHODIMP _get_Height(unsigned *value);
	virtual STDMETHODIMP _get_Width(unsigned *value);
};
template<typename X> struct ITargetedContentImage_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ITargetedContentImage_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Height;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ITargetedContentImage_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Width;
	};
	ITargetedContentImage_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentImage, X> : Windows::Services::TargetedContent::ITargetedContentImage_adaptor<X> { typedef adapt ITargetedContentImage; };
struct ITargetedContentImage : ITargetedContentImage_raw, generate<ITargetedContentImage> {};

// ITargetedContentAction
struct ITargetedContentAction_raw : IInspectable {
	virtual STDMETHODIMP _InvokeAsync(Foundation::IAsyncAction* *asyncAction);
};
template<typename X> struct ITargetedContentAction_adaptor : X {
	ptr<Foundation::IAsyncAction> InvokeAsync() { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_InvokeAsync(&asyncAction)); return from_abi(asyncAction); }
};
template<typename X> struct adapt<ITargetedContentAction, X> : Windows::Services::TargetedContent::ITargetedContentAction_adaptor<X> { typedef adapt ITargetedContentAction; };
struct ITargetedContentAction : ITargetedContentAction_raw, generate<ITargetedContentAction> {};

// ITargetedContentCollection
struct ITargetedContentCollection_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _ReportInteraction(TargetedContentInteraction interaction);
	virtual STDMETHODIMP _ReportCustomInteraction(HSTRING customInteractionName);
	virtual STDMETHODIMP _get_Path(HSTRING *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, TargetedContentValue*>* *value);
	virtual STDMETHODIMP _get_Collections(Foundation::Collections::IVectorView<TargetedContentCollection*>* *value);
	virtual STDMETHODIMP _get_Items(Foundation::Collections::IVectorView<TargetedContentItem*>* *value);
};
template<typename X> struct ITargetedContentCollection_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> get() { Foundation::Collections::IVectorView<TargetedContentCollection*>* value; hrcheck(enc(&ITargetedContentCollection_adaptor::Collections)->_get_Collections(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> operator->() { return get(); }
		} Collections;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentCollection_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentItem>>> get() { Foundation::Collections::IVectorView<TargetedContentItem*>* value; hrcheck(enc(&ITargetedContentCollection_adaptor::Items)->_get_Items(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<TargetedContentItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentItem>>> operator->() { return get(); }
		} Items;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentCollection_adaptor::Path)->_get_Path(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Path;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> get() { Foundation::Collections::IMapView<HSTRING, TargetedContentValue*>* value; hrcheck(enc(&ITargetedContentCollection_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> operator->() { return get(); }
		} Properties;
	};
	void ReportInteraction(TargetedContentInteraction interaction) { hrcheck(X::get()->_ReportInteraction(interaction)); }
	void ReportCustomInteraction(hstring_ref customInteractionName) { hrcheck(X::get()->_ReportCustomInteraction(customInteractionName)); }
	ITargetedContentCollection_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentCollection, X> : Windows::Services::TargetedContent::ITargetedContentCollection_adaptor<X> { typedef adapt ITargetedContentCollection; };
struct ITargetedContentCollection : ITargetedContentCollection_raw, generate<ITargetedContentCollection> {};

// TargetedContentCollection
template<typename X> struct statics<TargetedContentCollection, X> : X {
	typedef typename X::root_type TargetedContentCollection;
};
struct TargetedContentCollection : generate<TargetedContentCollection> {};

// ITargetedContentObject
struct ITargetedContentObject_raw : IInspectable {
	virtual STDMETHODIMP _get_ObjectKind(TargetedContentObjectKind *value);
	virtual STDMETHODIMP _get_Collection(TargetedContentCollection* *value);
	virtual STDMETHODIMP _get_Item(TargetedContentItem* *value);
	virtual STDMETHODIMP _get_Value(TargetedContentValue* *value);
};
template<typename X> struct ITargetedContentObject_adaptor : X {
	union {
		struct : property {
			ptr<TargetedContentCollection> get() { TargetedContentCollection* value; hrcheck(enc(&ITargetedContentObject_adaptor::Collection)->_get_Collection(&value)); return from_abi(value); }
			ptr<TargetedContentCollection> operator()() { return get(); }
			operator ptr<TargetedContentCollection> () { return get(); }
			ptr<TargetedContentCollection> operator->() { return get(); }
		} Collection;
		struct : property {
			ptr<TargetedContentItem> get() { TargetedContentItem* value; hrcheck(enc(&ITargetedContentObject_adaptor::Item)->_get_Item(&value)); return from_abi(value); }
			ptr<TargetedContentItem> operator()() { return get(); }
			operator ptr<TargetedContentItem> () { return get(); }
			ptr<TargetedContentItem> operator->() { return get(); }
		} Item;
		struct : property {
			TargetedContentObjectKind get() { TargetedContentObjectKind value; hrcheck(enc(&ITargetedContentObject_adaptor::ObjectKind)->_get_ObjectKind(&value)); return value; }
			TargetedContentObjectKind operator()() { return get(); }
			operator TargetedContentObjectKind () { return get(); }
		} ObjectKind;
		struct : property {
			ptr<TargetedContentValue> get() { TargetedContentValue* value; hrcheck(enc(&ITargetedContentObject_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<TargetedContentValue> operator()() { return get(); }
			operator ptr<TargetedContentValue> () { return get(); }
			ptr<TargetedContentValue> operator->() { return get(); }
		} Value;
	};
	ITargetedContentObject_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentObject, X> : Windows::Services::TargetedContent::ITargetedContentObject_adaptor<X> { typedef adapt ITargetedContentObject; };
struct ITargetedContentObject : ITargetedContentObject_raw, generate<ITargetedContentObject> {};

// TargetedContentObject
template<typename X> struct statics<TargetedContentObject, X> : X {
	typedef typename X::root_type TargetedContentObject;
};
struct TargetedContentObject : generate<TargetedContentObject> {};

// ITargetedContentItem
struct ITargetedContentItem_raw : IInspectable {
	virtual STDMETHODIMP _get_Path(HSTRING *value);
	virtual STDMETHODIMP _ReportInteraction(TargetedContentInteraction interaction);
	virtual STDMETHODIMP _ReportCustomInteraction(HSTRING customInteractionName);
	virtual STDMETHODIMP _get_State(TargetedContentItemState* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, TargetedContentValue*>* *value);
	virtual STDMETHODIMP _get_Collections(Foundation::Collections::IVectorView<TargetedContentCollection*>* *value);
};
template<typename X> struct ITargetedContentItem_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> get() { Foundation::Collections::IVectorView<TargetedContentCollection*>* value; hrcheck(enc(&ITargetedContentItem_adaptor::Collections)->_get_Collections(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentCollection>>> operator->() { return get(); }
		} Collections;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentItem_adaptor::Path)->_get_Path(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Path;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> get() { Foundation::Collections::IMapView<HSTRING, TargetedContentValue*>* value; hrcheck(enc(&ITargetedContentItem_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, ptr<TargetedContentValue>>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<TargetedContentItemState> get() { TargetedContentItemState* value; hrcheck(enc(&ITargetedContentItem_adaptor::State)->_get_State(&value)); return from_abi(value); }
			ptr<TargetedContentItemState> operator()() { return get(); }
			operator ptr<TargetedContentItemState> () { return get(); }
			ptr<TargetedContentItemState> operator->() { return get(); }
		} State;
	};
	void ReportInteraction(TargetedContentInteraction interaction) { hrcheck(X::get()->_ReportInteraction(interaction)); }
	void ReportCustomInteraction(hstring_ref customInteractionName) { hrcheck(X::get()->_ReportCustomInteraction(customInteractionName)); }
	ITargetedContentItem_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentItem, X> : Windows::Services::TargetedContent::ITargetedContentItem_adaptor<X> { typedef adapt ITargetedContentItem; };
struct ITargetedContentItem : ITargetedContentItem_raw, generate<ITargetedContentItem> {};

// TargetedContentItem
template<typename X> struct statics<TargetedContentItem, X> : X {
	typedef typename X::root_type TargetedContentItem;
};
struct TargetedContentItem : generate<TargetedContentItem> {};

// ITargetedContentValue
struct ITargetedContentValue_raw : IInspectable {
	virtual STDMETHODIMP _get_ValueKind(TargetedContentValueKind *value);
	virtual STDMETHODIMP _get_Path(HSTRING *value);
	virtual STDMETHODIMP _get_String(HSTRING *value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Number(double *value);
	virtual STDMETHODIMP _get_Boolean(bool *value);
	virtual STDMETHODIMP _get_File(TargetedContentFile* *value);
	virtual STDMETHODIMP _get_ImageFile(TargetedContentImage* *value);
	virtual STDMETHODIMP _get_Action(TargetedContentAction* *value);
	virtual STDMETHODIMP _get_Strings(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_Uris(Foundation::Collections::IVectorView<Foundation::Uri*>* *value);
	virtual STDMETHODIMP _get_Numbers(Foundation::Collections::IVectorView<double>* *value);
	virtual STDMETHODIMP _get_Booleans(Foundation::Collections::IVectorView<bool>* *value);
	virtual STDMETHODIMP _get_Files(Foundation::Collections::IVectorView<TargetedContentFile*>* *value);
	virtual STDMETHODIMP _get_ImageFiles(Foundation::Collections::IVectorView<TargetedContentImage*>* *value);
	virtual STDMETHODIMP _get_Actions(Foundation::Collections::IVectorView<TargetedContentAction*>* *value);
};
template<typename X> struct ITargetedContentValue_adaptor : X {
	union {
		struct : property {
			ptr<TargetedContentAction> get() { TargetedContentAction* value; hrcheck(enc(&ITargetedContentValue_adaptor::Action)->_get_Action(&value)); return from_abi(value); }
			ptr<TargetedContentAction> operator()() { return get(); }
			operator ptr<TargetedContentAction> () { return get(); }
			ptr<TargetedContentAction> operator->() { return get(); }
		} Action;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentAction>>> get() { Foundation::Collections::IVectorView<TargetedContentAction*>* value; hrcheck(enc(&ITargetedContentValue_adaptor::Actions)->_get_Actions(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentAction>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<TargetedContentAction>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentAction>>> operator->() { return get(); }
		} Actions;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITargetedContentValue_adaptor::Boolean)->_get_Boolean(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Boolean;
		struct : property {
			ptr<Foundation::Collections::IVectorView<bool>> get() { Foundation::Collections::IVectorView<bool>* value; hrcheck(enc(&ITargetedContentValue_adaptor::Booleans)->_get_Booleans(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<bool>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<bool>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<bool>> operator->() { return get(); }
		} Booleans;
		struct : property {
			ptr<TargetedContentFile> get() { TargetedContentFile* value; hrcheck(enc(&ITargetedContentValue_adaptor::File)->_get_File(&value)); return from_abi(value); }
			ptr<TargetedContentFile> operator()() { return get(); }
			operator ptr<TargetedContentFile> () { return get(); }
			ptr<TargetedContentFile> operator->() { return get(); }
		} File;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentFile>>> get() { Foundation::Collections::IVectorView<TargetedContentFile*>* value; hrcheck(enc(&ITargetedContentValue_adaptor::Files)->_get_Files(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentFile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<TargetedContentFile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentFile>>> operator->() { return get(); }
		} Files;
		struct : property {
			ptr<TargetedContentImage> get() { TargetedContentImage* value; hrcheck(enc(&ITargetedContentValue_adaptor::ImageFile)->_get_ImageFile(&value)); return from_abi(value); }
			ptr<TargetedContentImage> operator()() { return get(); }
			operator ptr<TargetedContentImage> () { return get(); }
			ptr<TargetedContentImage> operator->() { return get(); }
		} ImageFile;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentImage>>> get() { Foundation::Collections::IVectorView<TargetedContentImage*>* value; hrcheck(enc(&ITargetedContentValue_adaptor::ImageFiles)->_get_ImageFiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentImage>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<TargetedContentImage>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<TargetedContentImage>>> operator->() { return get(); }
		} ImageFiles;
		struct : property {
			double get() { double value; hrcheck(enc(&ITargetedContentValue_adaptor::Number)->_get_Number(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} Number;
		struct : property {
			ptr<Foundation::Collections::IVectorView<double>> get() { Foundation::Collections::IVectorView<double>* value; hrcheck(enc(&ITargetedContentValue_adaptor::Numbers)->_get_Numbers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<double>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<double>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<double>> operator->() { return get(); }
		} Numbers;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentValue_adaptor::Path)->_get_Path(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Path;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ITargetedContentValue_adaptor::String)->_get_String(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} String;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&ITargetedContentValue_adaptor::Strings)->_get_Strings(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} Strings;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&ITargetedContentValue_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> get() { Foundation::Collections::IVectorView<Foundation::Uri*>* value; hrcheck(enc(&ITargetedContentValue_adaptor::Uris)->_get_Uris(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Foundation::Uri>>> operator->() { return get(); }
		} Uris;
		struct : property {
			TargetedContentValueKind get() { TargetedContentValueKind value; hrcheck(enc(&ITargetedContentValue_adaptor::ValueKind)->_get_ValueKind(&value)); return value; }
			TargetedContentValueKind operator()() { return get(); }
			operator TargetedContentValueKind () { return get(); }
		} ValueKind;
	};
	ITargetedContentValue_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentValue, X> : Windows::Services::TargetedContent::ITargetedContentValue_adaptor<X> { typedef adapt ITargetedContentValue; };
struct ITargetedContentValue : ITargetedContentValue_raw, generate<ITargetedContentValue> {};

// TargetedContentValue
template<typename X> struct statics<TargetedContentValue, X> : X {
	typedef typename X::root_type TargetedContentValue;
};
struct TargetedContentValue : generate<TargetedContentValue> {};

// ITargetedContentItemState
struct ITargetedContentItemState_raw : IInspectable {
	virtual STDMETHODIMP _get_ShouldDisplay(bool *value);
	virtual STDMETHODIMP _get_AppInstallationState(TargetedContentAppInstallationState *value);
};
template<typename X> struct ITargetedContentItemState_adaptor : X {
	union {
		struct : property {
			TargetedContentAppInstallationState get() { TargetedContentAppInstallationState value; hrcheck(enc(&ITargetedContentItemState_adaptor::AppInstallationState)->_get_AppInstallationState(&value)); return value; }
			TargetedContentAppInstallationState operator()() { return get(); }
			operator TargetedContentAppInstallationState () { return get(); }
		} AppInstallationState;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ITargetedContentItemState_adaptor::ShouldDisplay)->_get_ShouldDisplay(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ShouldDisplay;
	};
	ITargetedContentItemState_adaptor() {}
};
template<typename X> struct adapt<ITargetedContentItemState, X> : Windows::Services::TargetedContent::ITargetedContentItemState_adaptor<X> { typedef adapt ITargetedContentItemState; };
struct ITargetedContentItemState : ITargetedContentItemState_raw, generate<ITargetedContentItemState> {};

// TargetedContentItemState
template<typename X> struct statics<TargetedContentItemState, X> : X {
	typedef typename X::root_type TargetedContentItemState;
};
struct TargetedContentItemState : generate<TargetedContentItemState> {};

// TargetedContentFile
template<typename X> struct statics<TargetedContentFile, X> : X {
	typedef typename X::root_type TargetedContentFile;
};
struct TargetedContentFile : generate<TargetedContentFile> {};

// TargetedContentImage
template<typename X> struct statics<TargetedContentImage, X> : X {
	typedef typename X::root_type TargetedContentImage;
};
struct TargetedContentImage : generate<TargetedContentImage> {};

// TargetedContentAction
template<typename X> struct statics<TargetedContentAction, X> : X {
	typedef typename X::root_type TargetedContentAction;
};
struct TargetedContentAction : generate<TargetedContentAction> {};
}}}
} // namespace iso_winrt
