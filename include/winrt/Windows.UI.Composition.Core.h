#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Composition.Core

#include "Windows.UI.Composition.Core.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace UI { namespace Composition {
struct Compositor;
}}}

// defs

template<> struct def<Windows::UI::Composition::Core::ICompositorController> : interface_type<> {};
template<> struct def<Windows::UI::Composition::Core::CompositorController> : class_type<Platform::Object, Windows::UI::Composition::Core::ICompositorController, Windows::Foundation::IClosable> {};

// uuids

template<> struct uuid<Windows::UI::Composition::Core::ICompositorController> { define_guid(0x2D75F35A, 0x70A7, 0x4395, 0xBA, 0x2D, 0xCE, 0xF0, 0xB1, 0x83, 0x99, 0xF9);};

// types

namespace Windows { namespace UI { namespace Composition { namespace Core {

// ICompositorController
struct ICompositorController_raw : IInspectable {
	virtual STDMETHODIMP _get_Compositor(Composition::Compositor* *value);
	virtual STDMETHODIMP _Commit();
	virtual STDMETHODIMP _EnsurePreviousCommitCompletedAsync(Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _add_CommitNeeded(Foundation::TypedEventHandler<CompositorController*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CommitNeeded(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICompositorController_adaptor : X {
	union {
		struct : property {
			ptr<Composition::Compositor> get() { Composition::Compositor* value; hrcheck(enc(&ICompositorController_adaptor::Compositor)->_get_Compositor(&value)); return from_abi(value); }
			ptr<Composition::Compositor> operator()() { return get(); }
			operator ptr<Composition::Compositor> () { return get(); }
			ptr<Composition::Compositor> operator->() { return get(); }
		} Compositor;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CompositorController>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICompositorController_adaptor::CommitNeeded)->_add_CommitNeeded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICompositorController_adaptor::CommitNeeded)->_remove_CommitNeeded(token)); }
		} CommitNeeded;
	};
	void Commit() { hrcheck(X::get()->_Commit()); }
	ptr<Foundation::IAsyncAction> EnsurePreviousCommitCompletedAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_EnsurePreviousCommitCompletedAsync(&action)); return from_abi(action); }
	ICompositorController_adaptor() {}
};
template<typename X> struct adapt<ICompositorController, X> : Windows::UI::Composition::Core::ICompositorController_adaptor<X> { typedef adapt ICompositorController; };
struct ICompositorController : ICompositorController_raw, generate<ICompositorController> {};

// CompositorController
template<typename X> struct statics<CompositorController, X> : X {
	typedef typename X::root_type CompositorController;
};
struct CompositorController : generate<CompositorController> {};
}}}}
} // namespace iso_winrt
