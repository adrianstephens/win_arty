#pragma once
// generated by isopod tools
// namespaces:
// Windows.Security.Cryptography.DataProtection

#include "Windows.Security.Cryptography.DataProtection.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
struct IAsyncAction;
template<typename TResult> struct IAsyncOperation;
}
namespace Storage { namespace Streams {
struct IInputStream;
struct IOutputStream;
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Security::Cryptography::DataProtection::IDataProtectionProviderFactory> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::DataProtection::IDataProtectionProvider> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::DataProtection::DataProtectionProvider> : class_type<Platform::Object, Windows::Security::Cryptography::DataProtection::IDataProtectionProvider>, custom_activators {};

// uuids

template<> struct uuid<Windows::Security::Cryptography::DataProtection::IDataProtectionProviderFactory> { define_guid(0xADF33DAC, 0x4932, 0x4CDF, 0xAC, 0x41, 0x72, 0x14, 0x33, 0x35, 0x14, 0xCA);};
template<> struct uuid<Windows::Security::Cryptography::DataProtection::IDataProtectionProvider> { define_guid(0x9639948, 0xED22, 0x4270, 0xBD, 0x1C, 0x6D, 0x72, 0xC0, 0xF, 0x87, 0x87);};

// types

namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

// IDataProtectionProviderFactory
struct IDataProtectionProviderFactory : IInspectable {
	virtual STDMETHODIMP _CreateOverloadExplicit(HSTRING protectionDescriptor, DataProtectionProvider* *value);
};

// IDataProtectionProvider
struct IDataProtectionProvider_raw : IInspectable {
	virtual STDMETHODIMP _ProtectAsync(Storage::Streams::IBuffer* data, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *value);
	virtual STDMETHODIMP _UnprotectAsync(Storage::Streams::IBuffer* data, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *value);
	virtual STDMETHODIMP _ProtectStreamAsync(Storage::Streams::IInputStream* src, Storage::Streams::IOutputStream* dest, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _UnprotectStreamAsync(Storage::Streams::IInputStream* src, Storage::Streams::IOutputStream* dest, Foundation::IAsyncAction* *value);
};
template<typename X> struct IDataProtectionProvider_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> ProtectAsync(pptr<Storage::Streams::IBuffer> data) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* value; hrcheck(X::get()->_ProtectAsync(data, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> UnprotectAsync(pptr<Storage::Streams::IBuffer> data) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* value; hrcheck(X::get()->_UnprotectAsync(data, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> ProtectStreamAsync(pptr<Storage::Streams::IInputStream> src, pptr<Storage::Streams::IOutputStream> dest) { Foundation::IAsyncAction* value; hrcheck(X::get()->_ProtectStreamAsync(src, dest, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncAction> UnprotectStreamAsync(pptr<Storage::Streams::IInputStream> src, pptr<Storage::Streams::IOutputStream> dest) { Foundation::IAsyncAction* value; hrcheck(X::get()->_UnprotectStreamAsync(src, dest, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IDataProtectionProvider, X> : Windows::Security::Cryptography::DataProtection::IDataProtectionProvider_adaptor<X> { typedef adapt IDataProtectionProvider; };
struct IDataProtectionProvider : IDataProtectionProvider_raw, generate<IDataProtectionProvider> {};

// DataProtectionProvider
template<typename> struct DataProtectionProvider_statics {
	static DataProtectionProvider *activate() { DataProtectionProvider *t; get_activation_factory<DataProtectionProvider>()->ActivateInstance((IInspectable**)&t); return t; }
	static DataProtectionProvider *activate(hstring_ref protectionDescriptor) { DataProtectionProvider *value; hrcheck(get_activation_factory<DataProtectionProvider, IDataProtectionProviderFactory>()->_CreateOverloadExplicit(protectionDescriptor, &value)); return value; }
};

template<typename X> struct statics<DataProtectionProvider, X> : X, Windows::Security::Cryptography::DataProtection::DataProtectionProvider_statics<void> {
	using Windows::Security::Cryptography::DataProtection::DataProtectionProvider_statics<void>::activate;
	typedef typename X::root_type DataProtectionProvider;
};
struct DataProtectionProvider : generate<DataProtectionProvider> {};
}}}}
} // namespace iso_winrt
