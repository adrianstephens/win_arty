#pragma once
// generated by isopod tools
// namespaces:
// Windows.Web.UI

#include "Windows.Web.UI.0.h"
#include "Windows.Web.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace DataTransfer {
struct DataPackage;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStream;
}}
namespace Web { namespace Http {
struct HttpRequestMessage;
struct HttpResponseMessage;
}}}

// defs

template<> struct def<Windows::Web::UI::IWebViewControl> : overridable_type<> {};
template<> struct def<Windows::Web::UI::IWebViewControlSettings> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlSettings> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlSettings> {};
template<> struct def<Windows::Web::UI::WebViewControlPermissionType> : enum_type<int> {};
template<> struct def<Windows::Web::UI::IWebViewControlDeferredPermissionRequest> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlDeferredPermissionRequest> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlDeferredPermissionRequest> {};
template<> struct def<Windows::Web::UI::IWebViewControlNavigationStartingEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlNavigationStartingEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlNavigationStartingEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlContentLoadingEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlContentLoadingEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlContentLoadingEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlDOMContentLoadedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlDOMContentLoadedEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlNavigationCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlNavigationCompletedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlNavigationCompletedEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlScriptNotifyEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlScriptNotifyEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlScriptNotifyEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlLongRunningScriptDetectedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlLongRunningScriptDetectedEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlUnviewableContentIdentifiedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlUnviewableContentIdentifiedEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlPermissionRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlPermissionRequestedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlPermissionRequestedEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlNewWindowRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlNewWindowRequestedEventArgs> {};
template<> struct def<Windows::Web::UI::IWebViewControlWebResourceRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlWebResourceRequestedEventArgs> {};
template<> struct def<Windows::Web::UI::WebViewControlPermissionState> : enum_type<int> {};
template<> struct def<Windows::Web::UI::IWebViewControlPermissionRequest> : interface_type<> {};
template<> struct def<Windows::Web::UI::WebViewControlPermissionRequest> : class_type<Platform::Object, Windows::Web::UI::IWebViewControlPermissionRequest> {};

// uuids

template<> struct uuid<Windows::Web::UI::IWebViewControl> { define_guid(0x3F921316, 0xBC70, 0x4BDA, 0x91, 0x36, 0xC9, 0x43, 0x70, 0x89, 0x9F, 0xAB);};
template<> struct uuid<Windows::Web::UI::IWebViewControlSettings> { define_guid(0xC9967FBF, 0x5E98, 0x4CFD, 0x8C, 0xCE, 0x27, 0xB0, 0x91, 0x1E, 0x3D, 0xE8);};
template<> struct uuid<Windows::Web::UI::IWebViewControlDeferredPermissionRequest> { define_guid(0x2CE349E0, 0xD759, 0x445C, 0x99, 0x26, 0x89, 0x95, 0x29, 0x8F, 0x15, 0x2B);};
template<> struct uuid<Windows::Web::UI::IWebViewControlNavigationStartingEventArgs> { define_guid(0xC9057C5, 0xA08, 0x41C7, 0x86, 0x3B, 0x71, 0xE3, 0xA9, 0x54, 0x91, 0x37);};
template<> struct uuid<Windows::Web::UI::IWebViewControlContentLoadingEventArgs> { define_guid(0x9A3FCCB2, 0xB9BB, 0x404B, 0xA2, 0x2B, 0x66, 0xDC, 0xCD, 0x12, 0x50, 0xC6);};
template<> struct uuid<Windows::Web::UI::IWebViewControlDOMContentLoadedEventArgs> { define_guid(0xBE8BC008, 0x9541, 0x4545, 0x9F, 0xF2, 0x2D, 0xF5, 0x85, 0xB2, 0x9F, 0x7D);};
template<> struct uuid<Windows::Web::UI::IWebViewControlNavigationCompletedEventArgs> { define_guid(0x20409918, 0x4A15, 0x4C46, 0xA5, 0x5D, 0xF7, 0x9E, 0xDB, 0xB, 0xDE, 0x8B);};
template<> struct uuid<Windows::Web::UI::IWebViewControlScriptNotifyEventArgs> { define_guid(0x491DE57B, 0x6F49, 0x41BB, 0xB5, 0x91, 0x51, 0xB8, 0x5B, 0x81, 0x70, 0x37);};
template<> struct uuid<Windows::Web::UI::IWebViewControlLongRunningScriptDetectedEventArgs> { define_guid(0x2A6E5BBA, 0x98B4, 0x45BC, 0xBB, 0xEB, 0xF, 0x69, 0xCE, 0x49, 0xC5, 0x99);};
template<> struct uuid<Windows::Web::UI::IWebViewControlUnviewableContentIdentifiedEventArgs> { define_guid(0x4A9680DB, 0x88F2, 0x4E20, 0xB6, 0x93, 0xB4, 0xE2, 0xDF, 0x4A, 0xA5, 0x81);};
template<> struct uuid<Windows::Web::UI::IWebViewControlPermissionRequestedEventArgs> { define_guid(0x27204D51, 0x2488, 0x4CC5, 0x96, 0x8E, 0xA, 0x77, 0x1E, 0x59, 0xC1, 0x47);};
template<> struct uuid<Windows::Web::UI::IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs> { define_guid(0xE3B81944, 0xE4FC, 0x43DC, 0x94, 0xCA, 0xF9, 0x80, 0xF3, 0xB, 0xC5, 0x1D);};
template<> struct uuid<Windows::Web::UI::IWebViewControlNewWindowRequestedEventArgs> { define_guid(0x3DF44BBB, 0xA124, 0x46D5, 0xA0, 0x83, 0xD0, 0x2C, 0xAC, 0xDF, 0xF5, 0xAD);};
template<> struct uuid<Windows::Web::UI::IWebViewControlWebResourceRequestedEventArgs> { define_guid(0x44D6524D, 0x55A4, 0x4D8B, 0x89, 0x1C, 0x93, 0x1D, 0x8E, 0x25, 0xD4, 0x2E);};
template<> struct uuid<Windows::Web::UI::IWebViewControlPermissionRequest> { define_guid(0xE5BC836C, 0xF22F, 0x40E2, 0x95, 0xB2, 0x77, 0x29, 0xF8, 0x40, 0xEB, 0x7F);};

// types

namespace Windows { namespace Web { namespace UI {

// IWebViewControl
struct IWebViewControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Source(Foundation::Uri* *value) = 0;
	virtual STDMETHODIMP _put_Source(Foundation::Uri* source) = 0;
	virtual STDMETHODIMP _get_DocumentTitle(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_CanGoBack(bool *value) = 0;
	virtual STDMETHODIMP _get_CanGoForward(bool *value) = 0;
	virtual STDMETHODIMP _put_DefaultBackgroundColor(Windows::UI::Color value) = 0;
	virtual STDMETHODIMP _get_DefaultBackgroundColor(Windows::UI::Color *value) = 0;
	virtual STDMETHODIMP _get_ContainsFullScreenElement(bool *value) = 0;
	virtual STDMETHODIMP _get_Settings(WebViewControlSettings* *value) = 0;
	virtual STDMETHODIMP _get_DeferredPermissionRequests(Foundation::Collections::IVectorView<WebViewControlDeferredPermissionRequest*>* *value) = 0;
	virtual STDMETHODIMP _GoForward() = 0;
	virtual STDMETHODIMP _GoBack() = 0;
	virtual STDMETHODIMP _Refresh() = 0;
	virtual STDMETHODIMP _Stop() = 0;
	virtual STDMETHODIMP _Navigate(Foundation::Uri* source) = 0;
	virtual STDMETHODIMP _NavigateToString(HSTRING text) = 0;
	virtual STDMETHODIMP _NavigateToLocalStreamUri(Foundation::Uri* source, IUriToStreamResolver* streamResolver) = 0;
	virtual STDMETHODIMP _NavigateWithHttpRequestMessage(Http::HttpRequestMessage* requestMessage) = 0;
	virtual STDMETHODIMP _InvokeScriptAsync(HSTRING scriptName, Foundation::Collections::IIterable<HSTRING>* arguments, Foundation::IAsyncOperation<HSTRING>* *operation) = 0;
	virtual STDMETHODIMP _CapturePreviewToStreamAsync(Storage::Streams::IRandomAccessStream* stream, Foundation::IAsyncAction* *operation) = 0;
	virtual STDMETHODIMP _CaptureSelectedContentToDataPackageAsync(Foundation::IAsyncOperation<ApplicationModel::DataTransfer::DataPackage*>* *operation) = 0;
	virtual STDMETHODIMP _BuildLocalStreamUri(HSTRING contentIdentifier, HSTRING relativePath, Foundation::Uri* *result) = 0;
	virtual STDMETHODIMP _GetDeferredPermissionRequestById(unsigned id, WebViewControlDeferredPermissionRequest* *result) = 0;
	virtual STDMETHODIMP _add_NavigationStarting(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationStartingEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_NavigationStarting(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_ContentLoading(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlContentLoadingEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_ContentLoading(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_DOMContentLoaded(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlDOMContentLoadedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_DOMContentLoaded(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_NavigationCompleted(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_NavigationCompleted(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_FrameNavigationStarting(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationStartingEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_FrameNavigationStarting(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_FrameContentLoading(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlContentLoadingEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_FrameContentLoading(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_FrameDOMContentLoaded(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlDOMContentLoadedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_FrameDOMContentLoaded(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_FrameNavigationCompleted(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_FrameNavigationCompleted(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_ScriptNotify(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlScriptNotifyEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_ScriptNotify(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_LongRunningScriptDetected(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlLongRunningScriptDetectedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_LongRunningScriptDetected(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_UnsafeContentWarningDisplaying(Foundation::TypedEventHandler<IWebViewControl*, IInspectable*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_UnsafeContentWarningDisplaying(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_UnviewableContentIdentified(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlUnviewableContentIdentifiedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_UnviewableContentIdentified(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_PermissionRequested(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlPermissionRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_PermissionRequested(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_UnsupportedUriSchemeIdentified(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlUnsupportedUriSchemeIdentifiedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_UnsupportedUriSchemeIdentified(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_NewWindowRequested(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNewWindowRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_NewWindowRequested(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_ContainsFullScreenElementChanged(Foundation::TypedEventHandler<IWebViewControl*, IInspectable*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_ContainsFullScreenElementChanged(Foundation::EventRegistrationToken token) = 0;
	virtual STDMETHODIMP _add_WebResourceRequested(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlWebResourceRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_WebResourceRequested(Foundation::EventRegistrationToken token) = 0;
};
template<typename X> struct IWebViewControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControl_adaptor::CanGoBack)->_get_CanGoBack(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanGoBack;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControl_adaptor::CanGoForward)->_get_CanGoForward(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanGoForward;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControl_adaptor::ContainsFullScreenElement)->_get_ContainsFullScreenElement(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} ContainsFullScreenElement;
		struct : property {
			Windows::UI::Color get() { Windows::UI::Color value; hrcheck(enc(&IWebViewControl_adaptor::DefaultBackgroundColor)->_get_DefaultBackgroundColor(&value)); return value; }
			Windows::UI::Color operator()() { return get(); }
			operator Windows::UI::Color () { return get(); }
			void put(const Windows::UI::Color& value) { hrcheck(enc(&IWebViewControl_adaptor::DefaultBackgroundColor)->_put_DefaultBackgroundColor(value)); }
			void operator=(const Windows::UI::Color& value) { put(value); }
			void operator()(const Windows::UI::Color& value) { put(value); }
		} DefaultBackgroundColor;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<WebViewControlDeferredPermissionRequest>>> get() { Foundation::Collections::IVectorView<WebViewControlDeferredPermissionRequest*>* value; hrcheck(enc(&IWebViewControl_adaptor::DeferredPermissionRequests)->_get_DeferredPermissionRequests(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<WebViewControlDeferredPermissionRequest>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<WebViewControlDeferredPermissionRequest>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<WebViewControlDeferredPermissionRequest>>> operator->() { return get(); }
		} DeferredPermissionRequests;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebViewControl_adaptor::DocumentTitle)->_get_DocumentTitle(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DocumentTitle;
		struct : property {
			ptr<WebViewControlSettings> get() { WebViewControlSettings* value; hrcheck(enc(&IWebViewControl_adaptor::Settings)->_get_Settings(&value)); return from_abi(value); }
			ptr<WebViewControlSettings> operator()() { return get(); }
			operator ptr<WebViewControlSettings> () { return get(); }
			ptr<WebViewControlSettings> operator->() { return get(); }
		} Settings;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControl_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> source) { hrcheck(enc(&IWebViewControl_adaptor::Source)->_put_Source(source)); }
			void operator=(pptr<Foundation::Uri> source) { put(source); }
			void operator()(pptr<Foundation::Uri> source) { put(source); }
		} Source;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::ContainsFullScreenElementChanged)->_add_ContainsFullScreenElementChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::ContainsFullScreenElementChanged)->_remove_ContainsFullScreenElementChanged(token)); }
		} ContainsFullScreenElementChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlContentLoadingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::ContentLoading)->_add_ContentLoading(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::ContentLoading)->_remove_ContentLoading(token)); }
		} ContentLoading;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlDOMContentLoadedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::DOMContentLoaded)->_add_DOMContentLoaded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::DOMContentLoaded)->_remove_DOMContentLoaded(token)); }
		} DOMContentLoaded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlContentLoadingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::FrameContentLoading)->_add_FrameContentLoading(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::FrameContentLoading)->_remove_FrameContentLoading(token)); }
		} FrameContentLoading;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlDOMContentLoadedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::FrameDOMContentLoaded)->_add_FrameDOMContentLoaded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::FrameDOMContentLoaded)->_remove_FrameDOMContentLoaded(token)); }
		} FrameDOMContentLoaded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlNavigationCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::FrameNavigationCompleted)->_add_FrameNavigationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::FrameNavigationCompleted)->_remove_FrameNavigationCompleted(token)); }
		} FrameNavigationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlNavigationStartingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::FrameNavigationStarting)->_add_FrameNavigationStarting(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::FrameNavigationStarting)->_remove_FrameNavigationStarting(token)); }
		} FrameNavigationStarting;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlLongRunningScriptDetectedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::LongRunningScriptDetected)->_add_LongRunningScriptDetected(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::LongRunningScriptDetected)->_remove_LongRunningScriptDetected(token)); }
		} LongRunningScriptDetected;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlNavigationCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::NavigationCompleted)->_add_NavigationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::NavigationCompleted)->_remove_NavigationCompleted(token)); }
		} NavigationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlNavigationStartingEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::NavigationStarting)->_add_NavigationStarting(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::NavigationStarting)->_remove_NavigationStarting(token)); }
		} NavigationStarting;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlNewWindowRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::NewWindowRequested)->_add_NewWindowRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::NewWindowRequested)->_remove_NewWindowRequested(token)); }
		} NewWindowRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlPermissionRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::PermissionRequested)->_add_PermissionRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::PermissionRequested)->_remove_PermissionRequested(token)); }
		} PermissionRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlScriptNotifyEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::ScriptNotify)->_add_ScriptNotify(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::ScriptNotify)->_remove_ScriptNotify(token)); }
		} ScriptNotify;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::UnsafeContentWarningDisplaying)->_add_UnsafeContentWarningDisplaying(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::UnsafeContentWarningDisplaying)->_remove_UnsafeContentWarningDisplaying(token)); }
		} UnsafeContentWarningDisplaying;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::UnsupportedUriSchemeIdentified)->_add_UnsupportedUriSchemeIdentified(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::UnsupportedUriSchemeIdentified)->_remove_UnsupportedUriSchemeIdentified(token)); }
		} UnsupportedUriSchemeIdentified;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlUnviewableContentIdentifiedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::UnviewableContentIdentified)->_add_UnviewableContentIdentified(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::UnviewableContentIdentified)->_remove_UnviewableContentIdentified(token)); }
		} UnviewableContentIdentified;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<IWebViewControl>, ptr<WebViewControlWebResourceRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IWebViewControl_adaptor::WebResourceRequested)->_add_WebResourceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IWebViewControl_adaptor::WebResourceRequested)->_remove_WebResourceRequested(token)); }
		} WebResourceRequested;
	};
	void GoForward() { hrcheck(X::get()->_GoForward()); }
	void GoBack() { hrcheck(X::get()->_GoBack()); }
	void Refresh() { hrcheck(X::get()->_Refresh()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	void Navigate(pptr<Foundation::Uri> source) { hrcheck(X::get()->_Navigate(source)); }
	void NavigateToString(hstring_ref text) { hrcheck(X::get()->_NavigateToString(text)); }
	void NavigateToLocalStreamUri(pptr<Foundation::Uri> source, pptr<IUriToStreamResolver> streamResolver) { hrcheck(X::get()->_NavigateToLocalStreamUri(source, streamResolver)); }
	void NavigateWithHttpRequestMessage(pptr<Http::HttpRequestMessage> requestMessage) { hrcheck(X::get()->_NavigateWithHttpRequestMessage(requestMessage)); }
	ptr<Foundation::IAsyncOperation<hstring>> InvokeScriptAsync(hstring_ref scriptName, pptr<Foundation::Collections::IIterable<hstring>> arguments) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_InvokeScriptAsync(scriptName, to_abi(arguments), &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> CapturePreviewToStreamAsync(pptr<Storage::Streams::IRandomAccessStream> stream) { Foundation::IAsyncAction* operation; hrcheck(X::get()->_CapturePreviewToStreamAsync(stream, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ApplicationModel::DataTransfer::DataPackage>>> CaptureSelectedContentToDataPackageAsync() { Foundation::IAsyncOperation<ApplicationModel::DataTransfer::DataPackage*>* operation; hrcheck(X::get()->_CaptureSelectedContentToDataPackageAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::Uri> BuildLocalStreamUri(hstring_ref contentIdentifier, hstring_ref relativePath) { Foundation::Uri* result; hrcheck(X::get()->_BuildLocalStreamUri(contentIdentifier, relativePath, &result)); return from_abi(result); }
	ptr<WebViewControlDeferredPermissionRequest> GetDeferredPermissionRequestById(unsigned id) { WebViewControlDeferredPermissionRequest* result; hrcheck(X::get()->_GetDeferredPermissionRequestById(id, &result)); return from_abi(result); }
	IWebViewControl_adaptor() {}
};
template<typename X> struct adapt<IWebViewControl, X> : Windows::Web::UI::IWebViewControl_adaptor<X> { typedef adapt IWebViewControl; };
template<typename X> struct IWebViewControl_unadaptor : X {
	STDMETHODIMP _get_Source(Foundation::Uri* *value) { return hrtry([&, this] { get_prop(value, Source); }); }
	STDMETHODIMP _put_Source(Foundation::Uri* source) { return hrtry([&, this] { put_prop(source, Source); }); }
	STDMETHODIMP _get_DocumentTitle(HSTRING *value) { return hrtry([&, this] { get_prop(value, DocumentTitle); }); }
	STDMETHODIMP _get_CanGoBack(bool *value) { return hrtry([&, this] { get_prop(value, CanGoBack); }); }
	STDMETHODIMP _get_CanGoForward(bool *value) { return hrtry([&, this] { get_prop(value, CanGoForward); }); }
	STDMETHODIMP _put_DefaultBackgroundColor(Windows::UI::Color value) { return hrtry([&, this] { put_prop(value, DefaultBackgroundColor); }); }
	STDMETHODIMP _get_DefaultBackgroundColor(Windows::UI::Color *value) { return hrtry([&, this] { get_prop(value, DefaultBackgroundColor); }); }
	STDMETHODIMP _get_ContainsFullScreenElement(bool *value) { return hrtry([&, this] { get_prop(value, ContainsFullScreenElement); }); }
	STDMETHODIMP _get_Settings(WebViewControlSettings* *value) { return hrtry([&, this] { get_prop(value, Settings); }); }
	STDMETHODIMP _get_DeferredPermissionRequests(Foundation::Collections::IVectorView<WebViewControlDeferredPermissionRequest*>* *value) { return hrtry([&, this] { get_prop(value, DeferredPermissionRequests); }); }
	STDMETHODIMP _GoForward() { return hrtry([&, this] { X::get()->GoForward(); }); }
	STDMETHODIMP _GoBack() { return hrtry([&, this] { X::get()->GoBack(); }); }
	STDMETHODIMP _Refresh() { return hrtry([&, this] { X::get()->Refresh(); }); }
	STDMETHODIMP _Stop() { return hrtry([&, this] { X::get()->Stop(); }); }
	STDMETHODIMP _Navigate(Foundation::Uri* source) { return hrtry([&, this] { X::get()->Navigate(source); }); }
	STDMETHODIMP _NavigateToString(HSTRING text) { return hrtry([&, this] { X::get()->NavigateToString(text); }); }
	STDMETHODIMP _NavigateToLocalStreamUri(Foundation::Uri* source, IUriToStreamResolver* streamResolver) { return hrtry([&, this] { X::get()->NavigateToLocalStreamUri(source, streamResolver); }); }
	STDMETHODIMP _NavigateWithHttpRequestMessage(Http::HttpRequestMessage* requestMessage) { return hrtry([&, this] { X::get()->NavigateWithHttpRequestMessage(requestMessage); }); }
	STDMETHODIMP _InvokeScriptAsync(HSTRING scriptName, Foundation::Collections::IIterable<HSTRING>* arguments, Foundation::IAsyncOperation<HSTRING>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->InvokeScriptAsync(scriptName, arguments)); }); }
	STDMETHODIMP _CapturePreviewToStreamAsync(Storage::Streams::IRandomAccessStream* stream, Foundation::IAsyncAction* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->CapturePreviewToStreamAsync(stream)); }); }
	STDMETHODIMP _CaptureSelectedContentToDataPackageAsync(Foundation::IAsyncOperation<ApplicationModel::DataTransfer::DataPackage*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->CaptureSelectedContentToDataPackageAsync()); }); }
	STDMETHODIMP _BuildLocalStreamUri(HSTRING contentIdentifier, HSTRING relativePath, Foundation::Uri* *result) { return hrtry([&, this] { *result = to_abi(X::get()->BuildLocalStreamUri(contentIdentifier, relativePath)); }); }
	STDMETHODIMP _GetDeferredPermissionRequestById(unsigned id, WebViewControlDeferredPermissionRequest* *result) { return hrtry([&, this] { *result = to_abi(X::get()->GetDeferredPermissionRequestById(id, )); }); }
	STDMETHODIMP _add_NavigationStarting(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationStartingEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->NavigationStarting+=handler; }); }
	STDMETHODIMP _remove_NavigationStarting(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->NavigationStarting-=token; }); }
	STDMETHODIMP _add_ContentLoading(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlContentLoadingEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->ContentLoading+=handler; }); }
	STDMETHODIMP _remove_ContentLoading(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->ContentLoading-=token; }); }
	STDMETHODIMP _add_DOMContentLoaded(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlDOMContentLoadedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->DOMContentLoaded+=handler; }); }
	STDMETHODIMP _remove_DOMContentLoaded(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->DOMContentLoaded-=token; }); }
	STDMETHODIMP _add_NavigationCompleted(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->NavigationCompleted+=handler; }); }
	STDMETHODIMP _remove_NavigationCompleted(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->NavigationCompleted-=token; }); }
	STDMETHODIMP _add_FrameNavigationStarting(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationStartingEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->FrameNavigationStarting+=handler; }); }
	STDMETHODIMP _remove_FrameNavigationStarting(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->FrameNavigationStarting-=token; }); }
	STDMETHODIMP _add_FrameContentLoading(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlContentLoadingEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->FrameContentLoading+=handler; }); }
	STDMETHODIMP _remove_FrameContentLoading(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->FrameContentLoading-=token; }); }
	STDMETHODIMP _add_FrameDOMContentLoaded(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlDOMContentLoadedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->FrameDOMContentLoaded+=handler; }); }
	STDMETHODIMP _remove_FrameDOMContentLoaded(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->FrameDOMContentLoaded-=token; }); }
	STDMETHODIMP _add_FrameNavigationCompleted(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNavigationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->FrameNavigationCompleted+=handler; }); }
	STDMETHODIMP _remove_FrameNavigationCompleted(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->FrameNavigationCompleted-=token; }); }
	STDMETHODIMP _add_ScriptNotify(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlScriptNotifyEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->ScriptNotify+=handler; }); }
	STDMETHODIMP _remove_ScriptNotify(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->ScriptNotify-=token; }); }
	STDMETHODIMP _add_LongRunningScriptDetected(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlLongRunningScriptDetectedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->LongRunningScriptDetected+=handler; }); }
	STDMETHODIMP _remove_LongRunningScriptDetected(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->LongRunningScriptDetected-=token; }); }
	STDMETHODIMP _add_UnsafeContentWarningDisplaying(Foundation::TypedEventHandler<IWebViewControl*, IInspectable*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->UnsafeContentWarningDisplaying+=handler; }); }
	STDMETHODIMP _remove_UnsafeContentWarningDisplaying(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->UnsafeContentWarningDisplaying-=token; }); }
	STDMETHODIMP _add_UnviewableContentIdentified(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlUnviewableContentIdentifiedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->UnviewableContentIdentified+=handler; }); }
	STDMETHODIMP _remove_UnviewableContentIdentified(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->UnviewableContentIdentified-=token; }); }
	STDMETHODIMP _add_PermissionRequested(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlPermissionRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->PermissionRequested+=handler; }); }
	STDMETHODIMP _remove_PermissionRequested(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->PermissionRequested-=token; }); }
	STDMETHODIMP _add_UnsupportedUriSchemeIdentified(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlUnsupportedUriSchemeIdentifiedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->UnsupportedUriSchemeIdentified+=handler; }); }
	STDMETHODIMP _remove_UnsupportedUriSchemeIdentified(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->UnsupportedUriSchemeIdentified-=token; }); }
	STDMETHODIMP _add_NewWindowRequested(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlNewWindowRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->NewWindowRequested+=handler; }); }
	STDMETHODIMP _remove_NewWindowRequested(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->NewWindowRequested-=token; }); }
	STDMETHODIMP _add_ContainsFullScreenElementChanged(Foundation::TypedEventHandler<IWebViewControl*, IInspectable*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->ContainsFullScreenElementChanged+=handler; }); }
	STDMETHODIMP _remove_ContainsFullScreenElementChanged(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->ContainsFullScreenElementChanged-=token; }); }
	STDMETHODIMP _add_WebResourceRequested(Foundation::TypedEventHandler<IWebViewControl*, WebViewControlWebResourceRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->WebResourceRequested+=handler; }); }
	STDMETHODIMP _remove_WebResourceRequested(Foundation::EventRegistrationToken token) { return hrtry([&, this] { X::get()->WebResourceRequested-=token; }); }
};
template<typename X> struct unadapt<IWebViewControl, X> : Windows::Web::UI::IWebViewControl_unadaptor<X> {};
struct IWebViewControl : IWebViewControl_raw, generate<IWebViewControl> {};

// IWebViewControlSettings
struct IWebViewControlSettings_raw : IInspectable {
	virtual STDMETHODIMP _put_IsJavaScriptEnabled(bool value);
	virtual STDMETHODIMP _get_IsJavaScriptEnabled(bool *value);
	virtual STDMETHODIMP _put_IsIndexedDBEnabled(bool value);
	virtual STDMETHODIMP _get_IsIndexedDBEnabled(bool *value);
	virtual STDMETHODIMP _put_IsScriptNotifyAllowed(bool value);
	virtual STDMETHODIMP _get_IsScriptNotifyAllowed(bool *value);
};
template<typename X> struct IWebViewControlSettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlSettings_adaptor::IsIndexedDBEnabled)->_get_IsIndexedDBEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlSettings_adaptor::IsIndexedDBEnabled)->_put_IsIndexedDBEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsIndexedDBEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlSettings_adaptor::IsJavaScriptEnabled)->_get_IsJavaScriptEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlSettings_adaptor::IsJavaScriptEnabled)->_put_IsJavaScriptEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsJavaScriptEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlSettings_adaptor::IsScriptNotifyAllowed)->_get_IsScriptNotifyAllowed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlSettings_adaptor::IsScriptNotifyAllowed)->_put_IsScriptNotifyAllowed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsScriptNotifyAllowed;
	};
	IWebViewControlSettings_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlSettings, X> : Windows::Web::UI::IWebViewControlSettings_adaptor<X> { typedef adapt IWebViewControlSettings; };
struct IWebViewControlSettings : IWebViewControlSettings_raw, generate<IWebViewControlSettings> {};

// WebViewControlSettings
template<typename X> struct statics<WebViewControlSettings, X> : X {
	typedef typename X::root_type WebViewControlSettings;
};
struct WebViewControlSettings : generate<WebViewControlSettings> {};

// IWebViewControlDeferredPermissionRequest
struct IWebViewControlDeferredPermissionRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_PermissionType(WebViewControlPermissionType *value);
	virtual STDMETHODIMP _Allow();
	virtual STDMETHODIMP _Deny();
};
template<typename X> struct IWebViewControlDeferredPermissionRequest_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWebViewControlDeferredPermissionRequest_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			WebViewControlPermissionType get() { WebViewControlPermissionType value; hrcheck(enc(&IWebViewControlDeferredPermissionRequest_adaptor::PermissionType)->_get_PermissionType(&value)); return value; }
			WebViewControlPermissionType operator()() { return get(); }
			operator WebViewControlPermissionType () { return get(); }
		} PermissionType;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlDeferredPermissionRequest_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	void Allow() { hrcheck(X::get()->_Allow()); }
	void Deny() { hrcheck(X::get()->_Deny()); }
	IWebViewControlDeferredPermissionRequest_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlDeferredPermissionRequest, X> : Windows::Web::UI::IWebViewControlDeferredPermissionRequest_adaptor<X> { typedef adapt IWebViewControlDeferredPermissionRequest; };
struct IWebViewControlDeferredPermissionRequest : IWebViewControlDeferredPermissionRequest_raw, generate<IWebViewControlDeferredPermissionRequest> {};

// WebViewControlDeferredPermissionRequest
template<typename X> struct statics<WebViewControlDeferredPermissionRequest, X> : X {
	typedef typename X::root_type WebViewControlDeferredPermissionRequest;
};
struct WebViewControlDeferredPermissionRequest : generate<WebViewControlDeferredPermissionRequest> {};

// IWebViewControlNavigationStartingEventArgs
struct IWebViewControlNavigationStartingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Cancel(bool *value);
	virtual STDMETHODIMP _put_Cancel(bool value);
};
template<typename X> struct IWebViewControlNavigationStartingEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlNavigationStartingEventArgs_adaptor::Cancel)->_get_Cancel(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlNavigationStartingEventArgs_adaptor::Cancel)->_put_Cancel(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Cancel;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlNavigationStartingEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IWebViewControlNavigationStartingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlNavigationStartingEventArgs, X> : Windows::Web::UI::IWebViewControlNavigationStartingEventArgs_adaptor<X> { typedef adapt IWebViewControlNavigationStartingEventArgs; };
struct IWebViewControlNavigationStartingEventArgs : IWebViewControlNavigationStartingEventArgs_raw, generate<IWebViewControlNavigationStartingEventArgs> {};

// WebViewControlNavigationStartingEventArgs
template<typename X> struct statics<WebViewControlNavigationStartingEventArgs, X> : X {
	typedef typename X::root_type WebViewControlNavigationStartingEventArgs;
};
struct WebViewControlNavigationStartingEventArgs : generate<WebViewControlNavigationStartingEventArgs> {};

// IWebViewControlContentLoadingEventArgs
struct IWebViewControlContentLoadingEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
};
template<typename X> struct IWebViewControlContentLoadingEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlContentLoadingEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IWebViewControlContentLoadingEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlContentLoadingEventArgs, X> : Windows::Web::UI::IWebViewControlContentLoadingEventArgs_adaptor<X> { typedef adapt IWebViewControlContentLoadingEventArgs; };
struct IWebViewControlContentLoadingEventArgs : IWebViewControlContentLoadingEventArgs_raw, generate<IWebViewControlContentLoadingEventArgs> {};

// WebViewControlContentLoadingEventArgs
template<typename X> struct statics<WebViewControlContentLoadingEventArgs, X> : X {
	typedef typename X::root_type WebViewControlContentLoadingEventArgs;
};
struct WebViewControlContentLoadingEventArgs : generate<WebViewControlContentLoadingEventArgs> {};

// IWebViewControlDOMContentLoadedEventArgs
struct IWebViewControlDOMContentLoadedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
};
template<typename X> struct IWebViewControlDOMContentLoadedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlDOMContentLoadedEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IWebViewControlDOMContentLoadedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlDOMContentLoadedEventArgs, X> : Windows::Web::UI::IWebViewControlDOMContentLoadedEventArgs_adaptor<X> { typedef adapt IWebViewControlDOMContentLoadedEventArgs; };
struct IWebViewControlDOMContentLoadedEventArgs : IWebViewControlDOMContentLoadedEventArgs_raw, generate<IWebViewControlDOMContentLoadedEventArgs> {};

// WebViewControlDOMContentLoadedEventArgs
template<typename X> struct statics<WebViewControlDOMContentLoadedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlDOMContentLoadedEventArgs;
};
struct WebViewControlDOMContentLoadedEventArgs : generate<WebViewControlDOMContentLoadedEventArgs> {};

// IWebViewControlNavigationCompletedEventArgs
struct IWebViewControlNavigationCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_IsSuccess(bool *value);
	virtual STDMETHODIMP _get_WebErrorStatus(Web::WebErrorStatus *value);
};
template<typename X> struct IWebViewControlNavigationCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlNavigationCompletedEventArgs_adaptor::IsSuccess)->_get_IsSuccess(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSuccess;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlNavigationCompletedEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
		struct : property {
			Web::WebErrorStatus get() { Web::WebErrorStatus value; hrcheck(enc(&IWebViewControlNavigationCompletedEventArgs_adaptor::WebErrorStatus)->_get_WebErrorStatus(&value)); return value; }
			Web::WebErrorStatus operator()() { return get(); }
			operator Web::WebErrorStatus () { return get(); }
		} WebErrorStatus;
	};
	IWebViewControlNavigationCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlNavigationCompletedEventArgs, X> : Windows::Web::UI::IWebViewControlNavigationCompletedEventArgs_adaptor<X> { typedef adapt IWebViewControlNavigationCompletedEventArgs; };
struct IWebViewControlNavigationCompletedEventArgs : IWebViewControlNavigationCompletedEventArgs_raw, generate<IWebViewControlNavigationCompletedEventArgs> {};

// WebViewControlNavigationCompletedEventArgs
template<typename X> struct statics<WebViewControlNavigationCompletedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlNavigationCompletedEventArgs;
};
struct WebViewControlNavigationCompletedEventArgs : generate<WebViewControlNavigationCompletedEventArgs> {};

// IWebViewControlScriptNotifyEventArgs
struct IWebViewControlScriptNotifyEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Value(HSTRING *value);
};
template<typename X> struct IWebViewControlScriptNotifyEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlScriptNotifyEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebViewControlScriptNotifyEventArgs_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Value;
	};
	IWebViewControlScriptNotifyEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlScriptNotifyEventArgs, X> : Windows::Web::UI::IWebViewControlScriptNotifyEventArgs_adaptor<X> { typedef adapt IWebViewControlScriptNotifyEventArgs; };
struct IWebViewControlScriptNotifyEventArgs : IWebViewControlScriptNotifyEventArgs_raw, generate<IWebViewControlScriptNotifyEventArgs> {};

// WebViewControlScriptNotifyEventArgs
template<typename X> struct statics<WebViewControlScriptNotifyEventArgs, X> : X {
	typedef typename X::root_type WebViewControlScriptNotifyEventArgs;
};
struct WebViewControlScriptNotifyEventArgs : generate<WebViewControlScriptNotifyEventArgs> {};

// IWebViewControlLongRunningScriptDetectedEventArgs
struct IWebViewControlLongRunningScriptDetectedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ExecutionTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_StopPageScriptExecution(bool *value);
	virtual STDMETHODIMP _put_StopPageScriptExecution(bool value);
};
template<typename X> struct IWebViewControlLongRunningScriptDetectedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IWebViewControlLongRunningScriptDetectedEventArgs_adaptor::ExecutionTime)->_get_ExecutionTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} ExecutionTime;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlLongRunningScriptDetectedEventArgs_adaptor::StopPageScriptExecution)->_get_StopPageScriptExecution(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlLongRunningScriptDetectedEventArgs_adaptor::StopPageScriptExecution)->_put_StopPageScriptExecution(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} StopPageScriptExecution;
	};
	IWebViewControlLongRunningScriptDetectedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlLongRunningScriptDetectedEventArgs, X> : Windows::Web::UI::IWebViewControlLongRunningScriptDetectedEventArgs_adaptor<X> { typedef adapt IWebViewControlLongRunningScriptDetectedEventArgs; };
struct IWebViewControlLongRunningScriptDetectedEventArgs : IWebViewControlLongRunningScriptDetectedEventArgs_raw, generate<IWebViewControlLongRunningScriptDetectedEventArgs> {};

// WebViewControlLongRunningScriptDetectedEventArgs
template<typename X> struct statics<WebViewControlLongRunningScriptDetectedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlLongRunningScriptDetectedEventArgs;
};
struct WebViewControlLongRunningScriptDetectedEventArgs : generate<WebViewControlLongRunningScriptDetectedEventArgs> {};

// IWebViewControlUnviewableContentIdentifiedEventArgs
struct IWebViewControlUnviewableContentIdentifiedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Referrer(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_MediaType(HSTRING *value);
};
template<typename X> struct IWebViewControlUnviewableContentIdentifiedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebViewControlUnviewableContentIdentifiedEventArgs_adaptor::MediaType)->_get_MediaType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MediaType;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlUnviewableContentIdentifiedEventArgs_adaptor::Referrer)->_get_Referrer(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Referrer;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlUnviewableContentIdentifiedEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IWebViewControlUnviewableContentIdentifiedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlUnviewableContentIdentifiedEventArgs, X> : Windows::Web::UI::IWebViewControlUnviewableContentIdentifiedEventArgs_adaptor<X> { typedef adapt IWebViewControlUnviewableContentIdentifiedEventArgs; };
struct IWebViewControlUnviewableContentIdentifiedEventArgs : IWebViewControlUnviewableContentIdentifiedEventArgs_raw, generate<IWebViewControlUnviewableContentIdentifiedEventArgs> {};

// WebViewControlUnviewableContentIdentifiedEventArgs
template<typename X> struct statics<WebViewControlUnviewableContentIdentifiedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlUnviewableContentIdentifiedEventArgs;
};
struct WebViewControlUnviewableContentIdentifiedEventArgs : generate<WebViewControlUnviewableContentIdentifiedEventArgs> {};

// IWebViewControlPermissionRequestedEventArgs
struct IWebViewControlPermissionRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PermissionRequest(WebViewControlPermissionRequest* *value);
};
template<typename X> struct IWebViewControlPermissionRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<WebViewControlPermissionRequest> get() { WebViewControlPermissionRequest* value; hrcheck(enc(&IWebViewControlPermissionRequestedEventArgs_adaptor::PermissionRequest)->_get_PermissionRequest(&value)); return from_abi(value); }
			ptr<WebViewControlPermissionRequest> operator()() { return get(); }
			operator ptr<WebViewControlPermissionRequest> () { return get(); }
			ptr<WebViewControlPermissionRequest> operator->() { return get(); }
		} PermissionRequest;
	};
	IWebViewControlPermissionRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlPermissionRequestedEventArgs, X> : Windows::Web::UI::IWebViewControlPermissionRequestedEventArgs_adaptor<X> { typedef adapt IWebViewControlPermissionRequestedEventArgs; };
struct IWebViewControlPermissionRequestedEventArgs : IWebViewControlPermissionRequestedEventArgs_raw, generate<IWebViewControlPermissionRequestedEventArgs> {};

// WebViewControlPermissionRequestedEventArgs
template<typename X> struct statics<WebViewControlPermissionRequestedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlPermissionRequestedEventArgs;
};
struct WebViewControlPermissionRequestedEventArgs : generate<WebViewControlPermissionRequestedEventArgs> {};

// IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs
struct IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs, X> : Windows::Web::UI::IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_adaptor<X> { typedef adapt IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs; };
struct IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs : IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs_raw, generate<IWebViewControlUnsupportedUriSchemeIdentifiedEventArgs> {};

// WebViewControlUnsupportedUriSchemeIdentifiedEventArgs
template<typename X> struct statics<WebViewControlUnsupportedUriSchemeIdentifiedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlUnsupportedUriSchemeIdentifiedEventArgs;
};
struct WebViewControlUnsupportedUriSchemeIdentifiedEventArgs : generate<WebViewControlUnsupportedUriSchemeIdentifiedEventArgs> {};

// IWebViewControlNewWindowRequestedEventArgs
struct IWebViewControlNewWindowRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Referrer(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Handled(bool *value);
	virtual STDMETHODIMP _put_Handled(bool value);
};
template<typename X> struct IWebViewControlNewWindowRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IWebViewControlNewWindowRequestedEventArgs_adaptor::Handled)->_get_Handled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IWebViewControlNewWindowRequestedEventArgs_adaptor::Handled)->_put_Handled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Handled;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlNewWindowRequestedEventArgs_adaptor::Referrer)->_get_Referrer(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Referrer;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlNewWindowRequestedEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IWebViewControlNewWindowRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlNewWindowRequestedEventArgs, X> : Windows::Web::UI::IWebViewControlNewWindowRequestedEventArgs_adaptor<X> { typedef adapt IWebViewControlNewWindowRequestedEventArgs; };
struct IWebViewControlNewWindowRequestedEventArgs : IWebViewControlNewWindowRequestedEventArgs_raw, generate<IWebViewControlNewWindowRequestedEventArgs> {};

// WebViewControlNewWindowRequestedEventArgs
template<typename X> struct statics<WebViewControlNewWindowRequestedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlNewWindowRequestedEventArgs;
};
struct WebViewControlNewWindowRequestedEventArgs : generate<WebViewControlNewWindowRequestedEventArgs> {};

// IWebViewControlWebResourceRequestedEventArgs
struct IWebViewControlWebResourceRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *deferral);
	virtual STDMETHODIMP _get_Request(Http::HttpRequestMessage* *value);
	virtual STDMETHODIMP _put_Response(Http::HttpResponseMessage* value);
	virtual STDMETHODIMP _get_Response(Http::HttpResponseMessage* *value);
};
template<typename X> struct IWebViewControlWebResourceRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Http::HttpRequestMessage> get() { Http::HttpRequestMessage* value; hrcheck(enc(&IWebViewControlWebResourceRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<Http::HttpRequestMessage> operator()() { return get(); }
			operator ptr<Http::HttpRequestMessage> () { return get(); }
			ptr<Http::HttpRequestMessage> operator->() { return get(); }
		} Request;
		struct : property {
			ptr<Http::HttpResponseMessage> get() { Http::HttpResponseMessage* value; hrcheck(enc(&IWebViewControlWebResourceRequestedEventArgs_adaptor::Response)->_get_Response(&value)); return from_abi(value); }
			ptr<Http::HttpResponseMessage> operator()() { return get(); }
			operator ptr<Http::HttpResponseMessage> () { return get(); }
			ptr<Http::HttpResponseMessage> operator->() { return get(); }
			void put(pptr<Http::HttpResponseMessage> value) { hrcheck(enc(&IWebViewControlWebResourceRequestedEventArgs_adaptor::Response)->_put_Response(value)); }
			void operator=(pptr<Http::HttpResponseMessage> value) { put(value); }
			void operator()(pptr<Http::HttpResponseMessage> value) { put(value); }
		} Response;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	IWebViewControlWebResourceRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlWebResourceRequestedEventArgs, X> : Windows::Web::UI::IWebViewControlWebResourceRequestedEventArgs_adaptor<X> { typedef adapt IWebViewControlWebResourceRequestedEventArgs; };
struct IWebViewControlWebResourceRequestedEventArgs : IWebViewControlWebResourceRequestedEventArgs_raw, generate<IWebViewControlWebResourceRequestedEventArgs> {};

// WebViewControlWebResourceRequestedEventArgs
template<typename X> struct statics<WebViewControlWebResourceRequestedEventArgs, X> : X {
	typedef typename X::root_type WebViewControlWebResourceRequestedEventArgs;
};
struct WebViewControlWebResourceRequestedEventArgs : generate<WebViewControlWebResourceRequestedEventArgs> {};

// IWebViewControlPermissionRequest
struct IWebViewControlPermissionRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_PermissionType(WebViewControlPermissionType *value);
	virtual STDMETHODIMP _get_State(WebViewControlPermissionState *value);
	virtual STDMETHODIMP _Defer();
	virtual STDMETHODIMP _Allow();
	virtual STDMETHODIMP _Deny();
};
template<typename X> struct IWebViewControlPermissionRequest_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IWebViewControlPermissionRequest_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			WebViewControlPermissionType get() { WebViewControlPermissionType value; hrcheck(enc(&IWebViewControlPermissionRequest_adaptor::PermissionType)->_get_PermissionType(&value)); return value; }
			WebViewControlPermissionType operator()() { return get(); }
			operator WebViewControlPermissionType () { return get(); }
		} PermissionType;
		struct : property {
			WebViewControlPermissionState get() { WebViewControlPermissionState value; hrcheck(enc(&IWebViewControlPermissionRequest_adaptor::State)->_get_State(&value)); return value; }
			WebViewControlPermissionState operator()() { return get(); }
			operator WebViewControlPermissionState () { return get(); }
		} State;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebViewControlPermissionRequest_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	void Defer() { hrcheck(X::get()->_Defer()); }
	void Allow() { hrcheck(X::get()->_Allow()); }
	void Deny() { hrcheck(X::get()->_Deny()); }
	IWebViewControlPermissionRequest_adaptor() {}
};
template<typename X> struct adapt<IWebViewControlPermissionRequest, X> : Windows::Web::UI::IWebViewControlPermissionRequest_adaptor<X> { typedef adapt IWebViewControlPermissionRequest; };
struct IWebViewControlPermissionRequest : IWebViewControlPermissionRequest_raw, generate<IWebViewControlPermissionRequest> {};

// WebViewControlPermissionRequest
template<typename X> struct statics<WebViewControlPermissionRequest, X> : X {
	typedef typename X::root_type WebViewControlPermissionRequest;
};
struct WebViewControlPermissionRequest : generate<WebViewControlPermissionRequest> {};
}}}
} // namespace iso_winrt
