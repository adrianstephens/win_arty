#pragma once
// generated by isopod tools
// namespaces:
// Windows.Management.Update

#include "Windows.Management.Update.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
struct ValueSet;
}
template<typename TResult> struct IAsyncOperation;
}}

// defs

template<> struct def<Windows::Management::Update::IPreviewBuildsState> : interface_type<> {};
template<> struct def<Windows::Management::Update::PreviewBuildsState> : class_type<Platform::Object, Windows::Management::Update::IPreviewBuildsState> {};
template<> struct def<Windows::Management::Update::IPreviewBuildsManagerStatics> : interface_type<> {};
template<> struct def<Windows::Management::Update::IPreviewBuildsManager> : interface_type<> {};
template<> struct def<Windows::Management::Update::PreviewBuildsManager> : class_type<Platform::Object, Windows::Management::Update::IPreviewBuildsManager> {};

// uuids

template<> struct uuid<Windows::Management::Update::IPreviewBuildsState> { define_guid(0xA2F2903E, 0xB223, 0x5F63, 0x75, 0x46, 0x3E, 0x8E, 0xAC, 0x7, 0xA, 0x2E);};
template<> struct uuid<Windows::Management::Update::IPreviewBuildsManagerStatics> { define_guid(0x3E422887, 0xB112, 0x5A70, 0x7D, 0xA1, 0x97, 0xD7, 0x8D, 0x32, 0xAA, 0x29);};
template<> struct uuid<Windows::Management::Update::IPreviewBuildsManager> { define_guid(0xFA07DD61, 0x7E4F, 0x59F7, 0x7C, 0x9F, 0xDE, 0xF9, 0x5, 0x1C, 0x5F, 0x62);};

// types

namespace Windows { namespace Management { namespace Update {

// IPreviewBuildsState
struct IPreviewBuildsState_raw : IInspectable {
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::ValueSet* *value);
};
template<typename X> struct IPreviewBuildsState_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IPreviewBuildsState_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Properties;
	};
	IPreviewBuildsState_adaptor() {}
};
template<typename X> struct adapt<IPreviewBuildsState, X> : Windows::Management::Update::IPreviewBuildsState_adaptor<X> { typedef adapt IPreviewBuildsState; };
struct IPreviewBuildsState : IPreviewBuildsState_raw, generate<IPreviewBuildsState> {};

// PreviewBuildsState
template<typename X> struct statics<PreviewBuildsState, X> : X {
	typedef typename X::root_type PreviewBuildsState;
};
struct PreviewBuildsState : generate<PreviewBuildsState> {};

// IPreviewBuildsManagerStatics
struct IPreviewBuildsManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(PreviewBuildsManager* *value);
	virtual STDMETHODIMP _IsSupported(bool *result);
};

// IPreviewBuildsManager
struct IPreviewBuildsManager_raw : IInspectable {
	virtual STDMETHODIMP _get_ArePreviewBuildsAllowed(bool *value);
	virtual STDMETHODIMP _put_ArePreviewBuildsAllowed(bool value);
	virtual STDMETHODIMP _GetCurrentState(PreviewBuildsState* *result);
	virtual STDMETHODIMP _SyncAsync(Foundation::IAsyncOperation<bool>* *result);
};
template<typename X> struct IPreviewBuildsManager_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPreviewBuildsManager_adaptor::ArePreviewBuildsAllowed)->_get_ArePreviewBuildsAllowed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPreviewBuildsManager_adaptor::ArePreviewBuildsAllowed)->_put_ArePreviewBuildsAllowed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ArePreviewBuildsAllowed;
	};
	ptr<PreviewBuildsState> GetCurrentState() { PreviewBuildsState* result; hrcheck(X::get()->_GetCurrentState(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> SyncAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_SyncAsync(&result)); return from_abi(result); }
	IPreviewBuildsManager_adaptor() {}
};
template<typename X> struct adapt<IPreviewBuildsManager, X> : Windows::Management::Update::IPreviewBuildsManager_adaptor<X> { typedef adapt IPreviewBuildsManager; };
struct IPreviewBuildsManager : IPreviewBuildsManager_raw, generate<IPreviewBuildsManager> {};

// PreviewBuildsManager
template<typename> struct PreviewBuildsManager_statics {
	static ptr<PreviewBuildsManager> GetDefault() { PreviewBuildsManager* value; hrcheck(get_activation_factory<PreviewBuildsManager, IPreviewBuildsManagerStatics>()->_GetDefault(&value)); return from_abi(value); }
	static bool IsSupported() { bool result; hrcheck(get_activation_factory<PreviewBuildsManager, IPreviewBuildsManagerStatics>()->_IsSupported(&result)); return result; }
};

template<typename X> struct statics<PreviewBuildsManager, X> : X, Windows::Management::Update::PreviewBuildsManager_statics<void> {
	typedef typename X::root_type PreviewBuildsManager;
};
struct PreviewBuildsManager : generate<PreviewBuildsManager> {};
}}}
} // namespace iso_winrt
