#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Contacts.Provider

#include "Windows.ApplicationModel.Contacts.Provider.0.h"
#include "Windows.ApplicationModel.Contacts.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Contacts::Provider::AddContactResult> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI> : class_type<Platform::Object, Windows::ApplicationModel::Contacts::Provider::IContactPickerUI, Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs> { define_guid(0x6F354338, 0x3302, 0x4D13, 0xAD, 0x8D, 0xAD, 0xCC, 0xF, 0xF9, 0xE4, 0x7C);};
template<> struct uuid<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI> { define_guid(0xE2CC1366, 0xCF66, 0x43C4, 0xA9, 0x6A, 0xA5, 0xA1, 0x12, 0xDB, 0x47, 0x46);};
template<> struct uuid<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2> { define_guid(0x6E449E28, 0x7B25, 0x4999, 0x9B, 0xB, 0x87, 0x54, 0x0, 0xA1, 0xE8, 0xC8);};

// types

namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

// IContactRemovedEventArgs
struct IContactRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
};
template<typename X> struct IContactRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactRemovedEventArgs_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
	};
	IContactRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactRemovedEventArgs, X> : Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs_adaptor<X> { typedef adapt IContactRemovedEventArgs; };
struct IContactRemovedEventArgs : IContactRemovedEventArgs_raw, generate<IContactRemovedEventArgs> {};

// ContactRemovedEventArgs
template<typename X> struct statics<ContactRemovedEventArgs, X> : X {
	typedef typename X::root_type ContactRemovedEventArgs;
};
struct ContactRemovedEventArgs : generate<ContactRemovedEventArgs> {};

// IContactPickerUI
struct IContactPickerUI_raw : IInspectable {
	virtual STDMETHODIMP _AddContact(HSTRING id, Contact* contact, AddContactResult *result);
	virtual STDMETHODIMP _RemoveContact(HSTRING id);
	virtual STDMETHODIMP _ContainsContact(HSTRING id, bool *isContained);
	virtual STDMETHODIMP _get_DesiredFields(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_SelectionMode(ContactSelectionMode *value);
	virtual STDMETHODIMP _add_ContactRemoved(Foundation::TypedEventHandler<ContactPickerUI*, ContactRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ContactRemoved(Foundation::EventRegistrationToken token);
};
template<typename X> struct IContactPickerUI_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IContactPickerUI_adaptor::DesiredFields)->_get_DesiredFields(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} DesiredFields;
		struct : property {
			ContactSelectionMode get() { ContactSelectionMode value; hrcheck(enc(&IContactPickerUI_adaptor::SelectionMode)->_get_SelectionMode(&value)); return value; }
			ContactSelectionMode operator()() { return get(); }
			operator ContactSelectionMode () { return get(); }
		} SelectionMode;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ContactPickerUI>, ptr<ContactRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IContactPickerUI_adaptor::ContactRemoved)->_add_ContactRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IContactPickerUI_adaptor::ContactRemoved)->_remove_ContactRemoved(token)); }
		} ContactRemoved;
	};
	AddContactResult AddContact(hstring_ref id, pptr<Contact> contact) { AddContactResult result; hrcheck(X::get()->_AddContact(id, contact, &result)); return result; }
	void RemoveContact(hstring_ref id) { hrcheck(X::get()->_RemoveContact(id)); }
	bool ContainsContact(hstring_ref id) { bool isContained; hrcheck(X::get()->_ContainsContact(id, &isContained)); return isContained; }
	IContactPickerUI_adaptor() {}
};
template<typename X> struct adapt<IContactPickerUI, X> : Windows::ApplicationModel::Contacts::Provider::IContactPickerUI_adaptor<X> { typedef adapt IContactPickerUI; };
struct IContactPickerUI : IContactPickerUI_raw, generate<IContactPickerUI> {};

// IContactPickerUI2
struct IContactPickerUI2_raw : IInspectable {
	virtual STDMETHODIMP _AddContact(Contact* contact, AddContactResult *result);
	virtual STDMETHODIMP _get_DesiredFieldsWithContactFieldType(Foundation::Collections::IVector<ContactFieldType>* *value);
};
template<typename X> struct IContactPickerUI2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ContactFieldType>> get() { Foundation::Collections::IVector<ContactFieldType>* value; hrcheck(enc(&IContactPickerUI2_adaptor::DesiredFieldsWithContactFieldType)->_get_DesiredFieldsWithContactFieldType(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ContactFieldType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ContactFieldType>> () { return get(); }
			ptr<Foundation::Collections::IVector<ContactFieldType>> operator->() { return get(); }
		} DesiredFieldsWithContactFieldType;
	};
	AddContactResult AddContact(pptr<Contact> contact) { AddContactResult result; hrcheck(X::get()->_AddContact(contact, &result)); return result; }
	IContactPickerUI2_adaptor() {}
};
template<typename X> struct adapt<IContactPickerUI2, X> : Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2_adaptor<X> { typedef adapt IContactPickerUI2; };
struct IContactPickerUI2 : IContactPickerUI2_raw, generate<IContactPickerUI2> {};

// ContactPickerUI
template<typename X> struct statics<ContactPickerUI, X> : X {
	typedef typename X::root_type ContactPickerUI;
};
struct ContactPickerUI : generate<ContactPickerUI> {
	using IContactPickerUI::AddContact;
	using IContactPickerUI2::AddContact;
};
}}}}
} // namespace iso_winrt
