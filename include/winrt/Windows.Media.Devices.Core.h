#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Devices.Core

#include "Windows.Media.Devices.Core.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
}}
namespace Media { namespace MediaProperties {
struct IMediaEncodingProperties;
struct MediaRatio;
}}
namespace Perception { namespace Spatial {
struct SpatialCoordinateSystem;
}}}

// defs

template<> struct def<Windows::Media::Devices::Core::IVariablePhotoSequenceController> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::VariablePhotoSequenceController> : class_type<Platform::Object, Windows::Media::Devices::Core::IVariablePhotoSequenceController> {};
template<> struct def<Windows::Media::Devices::Core::IFrameExposureCapabilities> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameExposureCapabilities> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameExposureCapabilities> {};
template<> struct def<Windows::Media::Devices::Core::IFrameExposureCompensationCapabilities> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameExposureCompensationCapabilities> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameExposureCompensationCapabilities> {};
template<> struct def<Windows::Media::Devices::Core::IFrameIsoSpeedCapabilities> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameIsoSpeedCapabilities> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameIsoSpeedCapabilities> {};
template<> struct def<Windows::Media::Devices::Core::IFrameFocusCapabilities> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameFocusCapabilities> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameFocusCapabilities> {};
template<> struct def<Windows::Media::Devices::Core::FrameFlashMode> : enum_type<int> {};
template<> struct def<Windows::Media::Devices::Core::IFrameFlashCapabilities> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameFlashCapabilities> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameFlashCapabilities> {};
template<> struct def<Windows::Media::Devices::Core::IFrameControlCapabilities> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::IFrameControlCapabilities2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameControlCapabilities> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameControlCapabilities, Windows::Media::Devices::Core::IFrameControlCapabilities2> {};
template<> struct def<Windows::Media::Devices::Core::IFrameExposureControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameExposureControl> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameExposureControl> {};
template<> struct def<Windows::Media::Devices::Core::IFrameExposureCompensationControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameExposureCompensationControl> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameExposureCompensationControl> {};
template<> struct def<Windows::Media::Devices::Core::IFrameIsoSpeedControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameIsoSpeedControl> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameIsoSpeedControl> {};
template<> struct def<Windows::Media::Devices::Core::IFrameFocusControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameFocusControl> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameFocusControl> {};
template<> struct def<Windows::Media::Devices::Core::IFrameFlashControl> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameFlashControl> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameFlashControl> {};
template<> struct def<Windows::Media::Devices::Core::IFrameController> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::IFrameController2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::FrameController> : class_type<Platform::Object, Windows::Media::Devices::Core::IFrameController, Windows::Media::Devices::Core::IFrameController2> {};
template<> struct def<Windows::Media::Devices::Core::ICameraIntrinsicsFactory> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::ICameraIntrinsics2> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::ICameraIntrinsics> : interface_type<> {};
template<> struct def<Windows::Media::Devices::Core::CameraIntrinsics> : class_type<Platform::Object, Windows::Media::Devices::Core::ICameraIntrinsics, Windows::Media::Devices::Core::ICameraIntrinsics2> {};
template<> struct def<Windows::Media::Devices::Core::IDepthCorrelatedCoordinateMapper> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Devices::Core::DepthCorrelatedCoordinateMapper> : class_type<Platform::Object, Windows::Media::Devices::Core::IDepthCorrelatedCoordinateMapper> {};

// uuids

template<> struct uuid<Windows::Media::Devices::Core::IVariablePhotoSequenceController> { define_guid(0x7FBFF880, 0xED8C, 0x43FD, 0xA7, 0xC3, 0xB3, 0x58, 0x9, 0xE4, 0x22, 0x9A);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameExposureCapabilities> { define_guid(0xBDBE9CE3, 0x3985, 0x4E72, 0x97, 0xC2, 0x5, 0x90, 0xD6, 0x13, 0x7, 0xA1);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameExposureCompensationCapabilities> { define_guid(0xB988A823, 0x8065, 0x41EE, 0xB0, 0x4F, 0x72, 0x22, 0x65, 0x95, 0x45, 0x0);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameIsoSpeedCapabilities> { define_guid(0x16BDFF61, 0x6DF6, 0x4AC9, 0xB9, 0x2A, 0x9F, 0x6E, 0xCD, 0x1A, 0xD2, 0xFA);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameFocusCapabilities> { define_guid(0x7B25CD58, 0x1C0, 0x4065, 0x9C, 0x40, 0xC1, 0xA7, 0x21, 0x42, 0x5C, 0x1A);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameFlashCapabilities> { define_guid(0xBB9341A2, 0x5EBE, 0x4F62, 0x82, 0x23, 0xE, 0x2B, 0x5, 0xBF, 0xBB, 0xD0);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameControlCapabilities> { define_guid(0xA8FFAE60, 0x4E9E, 0x4377, 0xA7, 0x89, 0xE2, 0x4C, 0x4A, 0xE7, 0xE5, 0x44);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameControlCapabilities2> { define_guid(0xCE9B0464, 0x4730, 0x440F, 0xBD, 0x3E, 0xEF, 0xE8, 0xA8, 0xF2, 0x30, 0xA8);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameExposureControl> { define_guid(0xB1605A61, 0xFFAF, 0x4752, 0xB6, 0x21, 0xF5, 0xB6, 0xF1, 0x17, 0xF4, 0x32);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameExposureCompensationControl> { define_guid(0xE95896C9, 0xF7F9, 0x48CA, 0x85, 0x91, 0xA2, 0x65, 0x31, 0xCB, 0x15, 0x78);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameIsoSpeedControl> { define_guid(0x1A03EFED, 0x786A, 0x4C75, 0xA5, 0x57, 0x7A, 0xB9, 0xA8, 0x5F, 0x58, 0x8C);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameFocusControl> { define_guid(0x272DF1D0, 0xD912, 0x4214, 0xA6, 0x7B, 0xE3, 0x8A, 0x8D, 0x48, 0xD8, 0xC6);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameFlashControl> { define_guid(0x75D5F6C7, 0xBD45, 0x4FAB, 0x93, 0x75, 0x45, 0xAC, 0x4, 0xB3, 0x32, 0xC2);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameController> { define_guid(0xC16459D9, 0xBAEF, 0x4052, 0x91, 0x77, 0x48, 0xAF, 0xF2, 0xAF, 0x75, 0x22);};
template<> struct uuid<Windows::Media::Devices::Core::IFrameController2> { define_guid(0xD3BC75, 0xD87C, 0x485B, 0x8A, 0x9, 0x5C, 0x35, 0x85, 0x68, 0xB4, 0x27);};
template<> struct uuid<Windows::Media::Devices::Core::ICameraIntrinsicsFactory> { define_guid(0xC0DDC486, 0x2132, 0x4A34, 0xA6, 0x59, 0x9B, 0xFE, 0x2A, 0x5, 0x57, 0x12);};
template<> struct uuid<Windows::Media::Devices::Core::ICameraIntrinsics2> { define_guid(0xCDAA447, 0x798, 0x4B4D, 0x83, 0x9F, 0xC5, 0xEC, 0x41, 0x4D, 0xB2, 0x7A);};
template<> struct uuid<Windows::Media::Devices::Core::ICameraIntrinsics> { define_guid(0xAA6ED32, 0x6589, 0x49DA, 0xAF, 0xDE, 0x59, 0x42, 0x70, 0xCA, 0xA, 0xAC);};
template<> struct uuid<Windows::Media::Devices::Core::IDepthCorrelatedCoordinateMapper> { define_guid(0xF95D89FB, 0x8AF0, 0x4CB0, 0x92, 0x6D, 0x69, 0x68, 0x66, 0xE5, 0x4, 0x6A);};

// types

namespace Windows { namespace Media { namespace Devices { namespace Core {

// IVariablePhotoSequenceController
struct IVariablePhotoSequenceController_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_MaxPhotosPerSecond(float *value);
	virtual STDMETHODIMP _get_PhotosPerSecondLimit(float *value);
	virtual STDMETHODIMP _put_PhotosPerSecondLimit(float value);
	virtual STDMETHODIMP _GetHighestConcurrentFrameRate(MediaProperties::IMediaEncodingProperties* captureProperties, MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _GetCurrentFrameRate(MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _get_FrameCapabilities(FrameControlCapabilities* *value);
	virtual STDMETHODIMP _get_DesiredFrameControllers(Foundation::Collections::IVector<FrameController*>* *items);
};
template<typename X> struct IVariablePhotoSequenceController_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<FrameController>>> get() { Foundation::Collections::IVector<FrameController*>* items; hrcheck(enc(&IVariablePhotoSequenceController_adaptor::DesiredFrameControllers)->_get_DesiredFrameControllers(&items)); return from_abi(items); }
			ptr<Foundation::Collections::IVector<ptr<FrameController>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<FrameController>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<FrameController>>> operator->() { return get(); }
		} DesiredFrameControllers;
		struct : property {
			ptr<FrameControlCapabilities> get() { FrameControlCapabilities* value; hrcheck(enc(&IVariablePhotoSequenceController_adaptor::FrameCapabilities)->_get_FrameCapabilities(&value)); return from_abi(value); }
			ptr<FrameControlCapabilities> operator()() { return get(); }
			operator ptr<FrameControlCapabilities> () { return get(); }
			ptr<FrameControlCapabilities> operator->() { return get(); }
		} FrameCapabilities;
		struct : property {
			float get() { float value; hrcheck(enc(&IVariablePhotoSequenceController_adaptor::MaxPhotosPerSecond)->_get_MaxPhotosPerSecond(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MaxPhotosPerSecond;
		struct : property {
			float get() { float value; hrcheck(enc(&IVariablePhotoSequenceController_adaptor::PhotosPerSecondLimit)->_get_PhotosPerSecondLimit(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IVariablePhotoSequenceController_adaptor::PhotosPerSecondLimit)->_put_PhotosPerSecondLimit(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} PhotosPerSecondLimit;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IVariablePhotoSequenceController_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	ptr<MediaProperties::MediaRatio> GetHighestConcurrentFrameRate(pptr<MediaProperties::IMediaEncodingProperties> captureProperties) { MediaProperties::MediaRatio* value; hrcheck(X::get()->_GetHighestConcurrentFrameRate(captureProperties, &value)); return from_abi(value); }
	ptr<MediaProperties::MediaRatio> GetCurrentFrameRate() { MediaProperties::MediaRatio* value; hrcheck(X::get()->_GetCurrentFrameRate(&value)); return from_abi(value); }
	IVariablePhotoSequenceController_adaptor() {}
};
template<typename X> struct adapt<IVariablePhotoSequenceController, X> : Windows::Media::Devices::Core::IVariablePhotoSequenceController_adaptor<X> { typedef adapt IVariablePhotoSequenceController; };
struct IVariablePhotoSequenceController : IVariablePhotoSequenceController_raw, generate<IVariablePhotoSequenceController> {};

// VariablePhotoSequenceController
template<typename X> struct statics<VariablePhotoSequenceController, X> : X {
	typedef typename X::root_type VariablePhotoSequenceController;
};
struct VariablePhotoSequenceController : generate<VariablePhotoSequenceController> {};

// IFrameExposureCapabilities
struct IFrameExposureCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Min(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Max(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Step(Foundation::TimeSpan *value);
};
template<typename X> struct IFrameExposureCapabilities_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IFrameExposureCapabilities_adaptor::Max)->_get_Max(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Max;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IFrameExposureCapabilities_adaptor::Min)->_get_Min(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Min;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IFrameExposureCapabilities_adaptor::Step)->_get_Step(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameExposureCapabilities_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IFrameExposureCapabilities_adaptor() {}
};
template<typename X> struct adapt<IFrameExposureCapabilities, X> : Windows::Media::Devices::Core::IFrameExposureCapabilities_adaptor<X> { typedef adapt IFrameExposureCapabilities; };
struct IFrameExposureCapabilities : IFrameExposureCapabilities_raw, generate<IFrameExposureCapabilities> {};

// FrameExposureCapabilities
template<typename X> struct statics<FrameExposureCapabilities, X> : X {
	typedef typename X::root_type FrameExposureCapabilities;
};
struct FrameExposureCapabilities : generate<FrameExposureCapabilities> {};

// IFrameExposureCompensationCapabilities
struct IFrameExposureCompensationCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Min(float *value);
	virtual STDMETHODIMP _get_Max(float *value);
	virtual STDMETHODIMP _get_Step(float *value);
};
template<typename X> struct IFrameExposureCompensationCapabilities_adaptor : X {
	union {
		struct : property {
			float get() { float value; hrcheck(enc(&IFrameExposureCompensationCapabilities_adaptor::Max)->_get_Max(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Max;
		struct : property {
			float get() { float value; hrcheck(enc(&IFrameExposureCompensationCapabilities_adaptor::Min)->_get_Min(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Min;
		struct : property {
			float get() { float value; hrcheck(enc(&IFrameExposureCompensationCapabilities_adaptor::Step)->_get_Step(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameExposureCompensationCapabilities_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IFrameExposureCompensationCapabilities_adaptor() {}
};
template<typename X> struct adapt<IFrameExposureCompensationCapabilities, X> : Windows::Media::Devices::Core::IFrameExposureCompensationCapabilities_adaptor<X> { typedef adapt IFrameExposureCompensationCapabilities; };
struct IFrameExposureCompensationCapabilities : IFrameExposureCompensationCapabilities_raw, generate<IFrameExposureCompensationCapabilities> {};

// FrameExposureCompensationCapabilities
template<typename X> struct statics<FrameExposureCompensationCapabilities, X> : X {
	typedef typename X::root_type FrameExposureCompensationCapabilities;
};
struct FrameExposureCompensationCapabilities : generate<FrameExposureCompensationCapabilities> {};

// IFrameIsoSpeedCapabilities
struct IFrameIsoSpeedCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Min(unsigned *value);
	virtual STDMETHODIMP _get_Max(unsigned *value);
	virtual STDMETHODIMP _get_Step(unsigned *value);
};
template<typename X> struct IFrameIsoSpeedCapabilities_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFrameIsoSpeedCapabilities_adaptor::Max)->_get_Max(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Max;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFrameIsoSpeedCapabilities_adaptor::Min)->_get_Min(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Min;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFrameIsoSpeedCapabilities_adaptor::Step)->_get_Step(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameIsoSpeedCapabilities_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IFrameIsoSpeedCapabilities_adaptor() {}
};
template<typename X> struct adapt<IFrameIsoSpeedCapabilities, X> : Windows::Media::Devices::Core::IFrameIsoSpeedCapabilities_adaptor<X> { typedef adapt IFrameIsoSpeedCapabilities; };
struct IFrameIsoSpeedCapabilities : IFrameIsoSpeedCapabilities_raw, generate<IFrameIsoSpeedCapabilities> {};

// FrameIsoSpeedCapabilities
template<typename X> struct statics<FrameIsoSpeedCapabilities, X> : X {
	typedef typename X::root_type FrameIsoSpeedCapabilities;
};
struct FrameIsoSpeedCapabilities : generate<FrameIsoSpeedCapabilities> {};

// IFrameFocusCapabilities
struct IFrameFocusCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_Min(unsigned *value);
	virtual STDMETHODIMP _get_Max(unsigned *value);
	virtual STDMETHODIMP _get_Step(unsigned *value);
};
template<typename X> struct IFrameFocusCapabilities_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFrameFocusCapabilities_adaptor::Max)->_get_Max(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Max;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFrameFocusCapabilities_adaptor::Min)->_get_Min(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Min;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFrameFocusCapabilities_adaptor::Step)->_get_Step(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Step;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameFocusCapabilities_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IFrameFocusCapabilities_adaptor() {}
};
template<typename X> struct adapt<IFrameFocusCapabilities, X> : Windows::Media::Devices::Core::IFrameFocusCapabilities_adaptor<X> { typedef adapt IFrameFocusCapabilities; };
struct IFrameFocusCapabilities : IFrameFocusCapabilities_raw, generate<IFrameFocusCapabilities> {};

// FrameFocusCapabilities
template<typename X> struct statics<FrameFocusCapabilities, X> : X {
	typedef typename X::root_type FrameFocusCapabilities;
};
struct FrameFocusCapabilities : generate<FrameFocusCapabilities> {};

// IFrameFlashCapabilities
struct IFrameFlashCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Supported(bool *value);
	virtual STDMETHODIMP _get_RedEyeReductionSupported(bool *value);
	virtual STDMETHODIMP _get_PowerSupported(bool *value);
};
template<typename X> struct IFrameFlashCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameFlashCapabilities_adaptor::PowerSupported)->_get_PowerSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} PowerSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameFlashCapabilities_adaptor::RedEyeReductionSupported)->_get_RedEyeReductionSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} RedEyeReductionSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameFlashCapabilities_adaptor::Supported)->_get_Supported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Supported;
	};
	IFrameFlashCapabilities_adaptor() {}
};
template<typename X> struct adapt<IFrameFlashCapabilities, X> : Windows::Media::Devices::Core::IFrameFlashCapabilities_adaptor<X> { typedef adapt IFrameFlashCapabilities; };
struct IFrameFlashCapabilities : IFrameFlashCapabilities_raw, generate<IFrameFlashCapabilities> {};

// FrameFlashCapabilities
template<typename X> struct statics<FrameFlashCapabilities, X> : X {
	typedef typename X::root_type FrameFlashCapabilities;
};
struct FrameFlashCapabilities : generate<FrameFlashCapabilities> {};

// IFrameControlCapabilities
struct IFrameControlCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_Exposure(FrameExposureCapabilities* *value);
	virtual STDMETHODIMP _get_ExposureCompensation(FrameExposureCompensationCapabilities* *value);
	virtual STDMETHODIMP _get_IsoSpeed(FrameIsoSpeedCapabilities* *value);
	virtual STDMETHODIMP _get_Focus(FrameFocusCapabilities* *value);
	virtual STDMETHODIMP _get_PhotoConfirmationSupported(bool *value);
};
template<typename X> struct IFrameControlCapabilities_adaptor : X {
	union {
		struct : property {
			ptr<FrameExposureCapabilities> get() { FrameExposureCapabilities* value; hrcheck(enc(&IFrameControlCapabilities_adaptor::Exposure)->_get_Exposure(&value)); return from_abi(value); }
			ptr<FrameExposureCapabilities> operator()() { return get(); }
			operator ptr<FrameExposureCapabilities> () { return get(); }
			ptr<FrameExposureCapabilities> operator->() { return get(); }
		} Exposure;
		struct : property {
			ptr<FrameExposureCompensationCapabilities> get() { FrameExposureCompensationCapabilities* value; hrcheck(enc(&IFrameControlCapabilities_adaptor::ExposureCompensation)->_get_ExposureCompensation(&value)); return from_abi(value); }
			ptr<FrameExposureCompensationCapabilities> operator()() { return get(); }
			operator ptr<FrameExposureCompensationCapabilities> () { return get(); }
			ptr<FrameExposureCompensationCapabilities> operator->() { return get(); }
		} ExposureCompensation;
		struct : property {
			ptr<FrameFocusCapabilities> get() { FrameFocusCapabilities* value; hrcheck(enc(&IFrameControlCapabilities_adaptor::Focus)->_get_Focus(&value)); return from_abi(value); }
			ptr<FrameFocusCapabilities> operator()() { return get(); }
			operator ptr<FrameFocusCapabilities> () { return get(); }
			ptr<FrameFocusCapabilities> operator->() { return get(); }
		} Focus;
		struct : property {
			ptr<FrameIsoSpeedCapabilities> get() { FrameIsoSpeedCapabilities* value; hrcheck(enc(&IFrameControlCapabilities_adaptor::IsoSpeed)->_get_IsoSpeed(&value)); return from_abi(value); }
			ptr<FrameIsoSpeedCapabilities> operator()() { return get(); }
			operator ptr<FrameIsoSpeedCapabilities> () { return get(); }
			ptr<FrameIsoSpeedCapabilities> operator->() { return get(); }
		} IsoSpeed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameControlCapabilities_adaptor::PhotoConfirmationSupported)->_get_PhotoConfirmationSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} PhotoConfirmationSupported;
	};
	IFrameControlCapabilities_adaptor() {}
};
template<typename X> struct adapt<IFrameControlCapabilities, X> : Windows::Media::Devices::Core::IFrameControlCapabilities_adaptor<X> { typedef adapt IFrameControlCapabilities; };
struct IFrameControlCapabilities : IFrameControlCapabilities_raw, generate<IFrameControlCapabilities> {};

// IFrameControlCapabilities2
struct IFrameControlCapabilities2_raw : IInspectable {
	virtual STDMETHODIMP _get_Flash(FrameFlashCapabilities* *value);
};
template<typename X> struct IFrameControlCapabilities2_adaptor : X {
	union {
		struct : property {
			ptr<FrameFlashCapabilities> get() { FrameFlashCapabilities* value; hrcheck(enc(&IFrameControlCapabilities2_adaptor::Flash)->_get_Flash(&value)); return from_abi(value); }
			ptr<FrameFlashCapabilities> operator()() { return get(); }
			operator ptr<FrameFlashCapabilities> () { return get(); }
			ptr<FrameFlashCapabilities> operator->() { return get(); }
		} Flash;
	};
	IFrameControlCapabilities2_adaptor() {}
};
template<typename X> struct adapt<IFrameControlCapabilities2, X> : Windows::Media::Devices::Core::IFrameControlCapabilities2_adaptor<X> { typedef adapt IFrameControlCapabilities2; };
struct IFrameControlCapabilities2 : IFrameControlCapabilities2_raw, generate<IFrameControlCapabilities2> {};

// FrameControlCapabilities
template<typename X> struct statics<FrameControlCapabilities, X> : X {
	typedef typename X::root_type FrameControlCapabilities;
};
struct FrameControlCapabilities : generate<FrameControlCapabilities> {};

// IFrameExposureControl
struct IFrameExposureControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Auto(bool *value);
	virtual STDMETHODIMP _put_Auto(bool value);
	virtual STDMETHODIMP _get_Value(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_Value(Foundation::IReference<Foundation::TimeSpan>* value);
};
template<typename X> struct IFrameExposureControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameExposureControl_adaptor::Auto)->_get_Auto(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFrameExposureControl_adaptor::Auto)->_put_Auto(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Auto;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IFrameExposureControl_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IFrameExposureControl_adaptor::Value)->_put_Value(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} Value;
	};
	IFrameExposureControl_adaptor() {}
};
template<typename X> struct adapt<IFrameExposureControl, X> : Windows::Media::Devices::Core::IFrameExposureControl_adaptor<X> { typedef adapt IFrameExposureControl; };
struct IFrameExposureControl : IFrameExposureControl_raw, generate<IFrameExposureControl> {};

// FrameExposureControl
template<typename X> struct statics<FrameExposureControl, X> : X {
	typedef typename X::root_type FrameExposureControl;
};
struct FrameExposureControl : generate<FrameExposureControl> {};

// IFrameExposureCompensationControl
struct IFrameExposureCompensationControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Value(Foundation::IReference<float>* *value);
	virtual STDMETHODIMP _put_Value(Foundation::IReference<float>* value);
};
template<typename X> struct IFrameExposureCompensationControl_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<float>> get() { Foundation::IReference<float>* value; hrcheck(enc(&IFrameExposureCompensationControl_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<Foundation::IReference<float>> operator()() { return get(); }
			operator ptr<Foundation::IReference<float>> () { return get(); }
			ptr<Foundation::IReference<float>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<float>> value) { hrcheck(enc(&IFrameExposureCompensationControl_adaptor::Value)->_put_Value(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<float>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<float>> value) { put(to_abi(value)); }
		} Value;
	};
	IFrameExposureCompensationControl_adaptor() {}
};
template<typename X> struct adapt<IFrameExposureCompensationControl, X> : Windows::Media::Devices::Core::IFrameExposureCompensationControl_adaptor<X> { typedef adapt IFrameExposureCompensationControl; };
struct IFrameExposureCompensationControl : IFrameExposureCompensationControl_raw, generate<IFrameExposureCompensationControl> {};

// FrameExposureCompensationControl
template<typename X> struct statics<FrameExposureCompensationControl, X> : X {
	typedef typename X::root_type FrameExposureCompensationControl;
};
struct FrameExposureCompensationControl : generate<FrameExposureCompensationControl> {};

// IFrameIsoSpeedControl
struct IFrameIsoSpeedControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Auto(bool *value);
	virtual STDMETHODIMP _put_Auto(bool value);
	virtual STDMETHODIMP _get_Value(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_Value(Foundation::IReference<unsigned>* value);
};
template<typename X> struct IFrameIsoSpeedControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameIsoSpeedControl_adaptor::Auto)->_get_Auto(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFrameIsoSpeedControl_adaptor::Auto)->_put_Auto(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Auto;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IFrameIsoSpeedControl_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IFrameIsoSpeedControl_adaptor::Value)->_put_Value(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} Value;
	};
	IFrameIsoSpeedControl_adaptor() {}
};
template<typename X> struct adapt<IFrameIsoSpeedControl, X> : Windows::Media::Devices::Core::IFrameIsoSpeedControl_adaptor<X> { typedef adapt IFrameIsoSpeedControl; };
struct IFrameIsoSpeedControl : IFrameIsoSpeedControl_raw, generate<IFrameIsoSpeedControl> {};

// FrameIsoSpeedControl
template<typename X> struct statics<FrameIsoSpeedControl, X> : X {
	typedef typename X::root_type FrameIsoSpeedControl;
};
struct FrameIsoSpeedControl : generate<FrameIsoSpeedControl> {};

// IFrameFocusControl
struct IFrameFocusControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Value(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_Value(Foundation::IReference<unsigned>* value);
};
template<typename X> struct IFrameFocusControl_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IFrameFocusControl_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IFrameFocusControl_adaptor::Value)->_put_Value(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} Value;
	};
	IFrameFocusControl_adaptor() {}
};
template<typename X> struct adapt<IFrameFocusControl, X> : Windows::Media::Devices::Core::IFrameFocusControl_adaptor<X> { typedef adapt IFrameFocusControl; };
struct IFrameFocusControl : IFrameFocusControl_raw, generate<IFrameFocusControl> {};

// FrameFocusControl
template<typename X> struct statics<FrameFocusControl, X> : X {
	typedef typename X::root_type FrameFocusControl;
};
struct FrameFocusControl : generate<FrameFocusControl> {};

// IFrameFlashControl
struct IFrameFlashControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Mode(FrameFlashMode *value);
	virtual STDMETHODIMP _put_Mode(FrameFlashMode value);
	virtual STDMETHODIMP _get_Auto(bool *value);
	virtual STDMETHODIMP _put_Auto(bool value);
	virtual STDMETHODIMP _get_RedEyeReduction(bool *value);
	virtual STDMETHODIMP _put_RedEyeReduction(bool value);
	virtual STDMETHODIMP _get_PowerPercent(float *value);
	virtual STDMETHODIMP _put_PowerPercent(float value);
};
template<typename X> struct IFrameFlashControl_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameFlashControl_adaptor::Auto)->_get_Auto(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFrameFlashControl_adaptor::Auto)->_put_Auto(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Auto;
		struct : property {
			FrameFlashMode get() { FrameFlashMode value; hrcheck(enc(&IFrameFlashControl_adaptor::Mode)->_get_Mode(&value)); return value; }
			FrameFlashMode operator()() { return get(); }
			operator FrameFlashMode () { return get(); }
			void put(FrameFlashMode value) { hrcheck(enc(&IFrameFlashControl_adaptor::Mode)->_put_Mode(value)); }
			void operator=(FrameFlashMode value) { put(value); }
			void operator()(FrameFlashMode value) { put(value); }
		} Mode;
		struct : property {
			float get() { float value; hrcheck(enc(&IFrameFlashControl_adaptor::PowerPercent)->_get_PowerPercent(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
			void put(float value) { hrcheck(enc(&IFrameFlashControl_adaptor::PowerPercent)->_put_PowerPercent(value)); }
			void operator=(float value) { put(value); }
			void operator()(float value) { put(value); }
		} PowerPercent;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFrameFlashControl_adaptor::RedEyeReduction)->_get_RedEyeReduction(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFrameFlashControl_adaptor::RedEyeReduction)->_put_RedEyeReduction(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} RedEyeReduction;
	};
	IFrameFlashControl_adaptor() {}
};
template<typename X> struct adapt<IFrameFlashControl, X> : Windows::Media::Devices::Core::IFrameFlashControl_adaptor<X> { typedef adapt IFrameFlashControl; };
struct IFrameFlashControl : IFrameFlashControl_raw, generate<IFrameFlashControl> {};

// FrameFlashControl
template<typename X> struct statics<FrameFlashControl, X> : X {
	typedef typename X::root_type FrameFlashControl;
};
struct FrameFlashControl : generate<FrameFlashControl> {};

// IFrameController
struct IFrameController_raw : IInspectable {
	virtual STDMETHODIMP _get_ExposureControl(FrameExposureControl* *value);
	virtual STDMETHODIMP _get_ExposureCompensationControl(FrameExposureCompensationControl* *value);
	virtual STDMETHODIMP _get_IsoSpeedControl(FrameIsoSpeedControl* *value);
	virtual STDMETHODIMP _get_FocusControl(FrameFocusControl* *value);
	virtual STDMETHODIMP _get_PhotoConfirmationEnabled(Foundation::IReference<bool>* *value);
	virtual STDMETHODIMP _put_PhotoConfirmationEnabled(Foundation::IReference<bool>* value);
};
template<typename X> struct IFrameController_adaptor : X {
	union {
		struct : property {
			ptr<FrameExposureCompensationControl> get() { FrameExposureCompensationControl* value; hrcheck(enc(&IFrameController_adaptor::ExposureCompensationControl)->_get_ExposureCompensationControl(&value)); return from_abi(value); }
			ptr<FrameExposureCompensationControl> operator()() { return get(); }
			operator ptr<FrameExposureCompensationControl> () { return get(); }
			ptr<FrameExposureCompensationControl> operator->() { return get(); }
		} ExposureCompensationControl;
		struct : property {
			ptr<FrameExposureControl> get() { FrameExposureControl* value; hrcheck(enc(&IFrameController_adaptor::ExposureControl)->_get_ExposureControl(&value)); return from_abi(value); }
			ptr<FrameExposureControl> operator()() { return get(); }
			operator ptr<FrameExposureControl> () { return get(); }
			ptr<FrameExposureControl> operator->() { return get(); }
		} ExposureControl;
		struct : property {
			ptr<FrameFocusControl> get() { FrameFocusControl* value; hrcheck(enc(&IFrameController_adaptor::FocusControl)->_get_FocusControl(&value)); return from_abi(value); }
			ptr<FrameFocusControl> operator()() { return get(); }
			operator ptr<FrameFocusControl> () { return get(); }
			ptr<FrameFocusControl> operator->() { return get(); }
		} FocusControl;
		struct : property {
			ptr<FrameIsoSpeedControl> get() { FrameIsoSpeedControl* value; hrcheck(enc(&IFrameController_adaptor::IsoSpeedControl)->_get_IsoSpeedControl(&value)); return from_abi(value); }
			ptr<FrameIsoSpeedControl> operator()() { return get(); }
			operator ptr<FrameIsoSpeedControl> () { return get(); }
			ptr<FrameIsoSpeedControl> operator->() { return get(); }
		} IsoSpeedControl;
		struct : property {
			ptr<Foundation::IReference<bool>> get() { Foundation::IReference<bool>* value; hrcheck(enc(&IFrameController_adaptor::PhotoConfirmationEnabled)->_get_PhotoConfirmationEnabled(&value)); return from_abi(value); }
			ptr<Foundation::IReference<bool>> operator()() { return get(); }
			operator ptr<Foundation::IReference<bool>> () { return get(); }
			ptr<Foundation::IReference<bool>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<bool>> value) { hrcheck(enc(&IFrameController_adaptor::PhotoConfirmationEnabled)->_put_PhotoConfirmationEnabled(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<bool>> value) { put(to_abi(value)); }
		} PhotoConfirmationEnabled;
	};
	IFrameController_adaptor() {}
};
template<typename X> struct adapt<IFrameController, X> : Windows::Media::Devices::Core::IFrameController_adaptor<X> { typedef adapt IFrameController; };
struct IFrameController : IFrameController_raw, generate<IFrameController> {};

// IFrameController2
struct IFrameController2_raw : IInspectable {
	virtual STDMETHODIMP _get_FlashControl(FrameFlashControl* *value);
};
template<typename X> struct IFrameController2_adaptor : X {
	union {
		struct : property {
			ptr<FrameFlashControl> get() { FrameFlashControl* value; hrcheck(enc(&IFrameController2_adaptor::FlashControl)->_get_FlashControl(&value)); return from_abi(value); }
			ptr<FrameFlashControl> operator()() { return get(); }
			operator ptr<FrameFlashControl> () { return get(); }
			ptr<FrameFlashControl> operator->() { return get(); }
		} FlashControl;
	};
	IFrameController2_adaptor() {}
};
template<typename X> struct adapt<IFrameController2, X> : Windows::Media::Devices::Core::IFrameController2_adaptor<X> { typedef adapt IFrameController2; };
struct IFrameController2 : IFrameController2_raw, generate<IFrameController2> {};

// FrameController
template<typename X> struct statics<FrameController, X> : X {
	typedef typename X::root_type FrameController;
};
struct FrameController : generate<FrameController> {};

// ICameraIntrinsicsFactory
struct ICameraIntrinsicsFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Numerics::Vector2 focalLength, Foundation::Numerics::Vector2 principalPoint, Foundation::Numerics::Vector3 radialDistortion, Foundation::Numerics::Vector2 tangentialDistortion, unsigned imageWidth, unsigned imageHeight, CameraIntrinsics* *result);
};

// ICameraIntrinsics2
struct ICameraIntrinsics2_raw : IInspectable {
	virtual STDMETHODIMP _get_UndistortedProjectionTransform(Foundation::Numerics::Matrix4x4 *value);
	virtual STDMETHODIMP _DistortPoint(Foundation::Point input, Foundation::Point *result);
	virtual STDMETHODIMP _DistortPoints(unsigned inputsSize, Foundation::Point *inputs, unsigned resultsSize, Foundation::Point *results);
	virtual STDMETHODIMP _UndistortPoint(Foundation::Point input, Foundation::Point *result);
	virtual STDMETHODIMP _UndistortPoints(unsigned inputsSize, Foundation::Point *inputs, unsigned resultsSize, Foundation::Point *results);
};
template<typename X> struct ICameraIntrinsics2_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Matrix4x4 get() { Foundation::Numerics::Matrix4x4 value; hrcheck(enc(&ICameraIntrinsics2_adaptor::UndistortedProjectionTransform)->_get_UndistortedProjectionTransform(&value)); return value; }
			Foundation::Numerics::Matrix4x4 operator()() { return get(); }
			operator Foundation::Numerics::Matrix4x4 () { return get(); }
		} UndistortedProjectionTransform;
	};
	Foundation::Point DistortPoint(const Foundation::Point& input) { Foundation::Point result; hrcheck(X::get()->_DistortPoint(input, &result)); return result; }
	void DistortPoints(const szarray<Foundation::Point>& inputs, const szarray<Foundation::Point>& results) { hrcheck(X::get()->_DistortPoints(inputs.size, to_abi(inputs.p), results.size, to_abi(results.p))); }
	Foundation::Point UndistortPoint(const Foundation::Point& input) { Foundation::Point result; hrcheck(X::get()->_UndistortPoint(input, &result)); return result; }
	void UndistortPoints(const szarray<Foundation::Point>& inputs, const szarray<Foundation::Point>& results) { hrcheck(X::get()->_UndistortPoints(inputs.size, to_abi(inputs.p), results.size, to_abi(results.p))); }
	ICameraIntrinsics2_adaptor() {}
};
template<typename X> struct adapt<ICameraIntrinsics2, X> : Windows::Media::Devices::Core::ICameraIntrinsics2_adaptor<X> { typedef adapt ICameraIntrinsics2; };
struct ICameraIntrinsics2 : ICameraIntrinsics2_raw, generate<ICameraIntrinsics2> {};

// ICameraIntrinsics
struct ICameraIntrinsics_raw : IInspectable {
	virtual STDMETHODIMP _get_FocalLength(Foundation::Numerics::Vector2 *value);
	virtual STDMETHODIMP _get_PrincipalPoint(Foundation::Numerics::Vector2 *value);
	virtual STDMETHODIMP _get_RadialDistortion(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _get_TangentialDistortion(Foundation::Numerics::Vector2 *value);
	virtual STDMETHODIMP _get_ImageWidth(unsigned *value);
	virtual STDMETHODIMP _get_ImageHeight(unsigned *value);
	virtual STDMETHODIMP _ProjectOntoFrame(Foundation::Numerics::Vector3 coordinate, Foundation::Point *result);
	virtual STDMETHODIMP _UnprojectAtUnitDepth(Foundation::Point pixelCoordinate, Foundation::Numerics::Vector2 *result);
	virtual STDMETHODIMP _ProjectManyOntoFrame(unsigned coordinatesSize, Foundation::Numerics::Vector3 *coordinates, unsigned resultsSize, Foundation::Point *results);
	virtual STDMETHODIMP _UnprojectPixelsAtUnitDepth(unsigned pixelCoordinatesSize, Foundation::Point *pixelCoordinates, unsigned resultsSize, Foundation::Numerics::Vector2 *results);
};
template<typename X> struct ICameraIntrinsics_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Vector2 get() { Foundation::Numerics::Vector2 value; hrcheck(enc(&ICameraIntrinsics_adaptor::FocalLength)->_get_FocalLength(&value)); return value; }
			Foundation::Numerics::Vector2 operator()() { return get(); }
			operator Foundation::Numerics::Vector2 () { return get(); }
		} FocalLength;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICameraIntrinsics_adaptor::ImageHeight)->_get_ImageHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ImageHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICameraIntrinsics_adaptor::ImageWidth)->_get_ImageWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ImageWidth;
		struct : property {
			Foundation::Numerics::Vector2 get() { Foundation::Numerics::Vector2 value; hrcheck(enc(&ICameraIntrinsics_adaptor::PrincipalPoint)->_get_PrincipalPoint(&value)); return value; }
			Foundation::Numerics::Vector2 operator()() { return get(); }
			operator Foundation::Numerics::Vector2 () { return get(); }
		} PrincipalPoint;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&ICameraIntrinsics_adaptor::RadialDistortion)->_get_RadialDistortion(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} RadialDistortion;
		struct : property {
			Foundation::Numerics::Vector2 get() { Foundation::Numerics::Vector2 value; hrcheck(enc(&ICameraIntrinsics_adaptor::TangentialDistortion)->_get_TangentialDistortion(&value)); return value; }
			Foundation::Numerics::Vector2 operator()() { return get(); }
			operator Foundation::Numerics::Vector2 () { return get(); }
		} TangentialDistortion;
	};
	Foundation::Point ProjectOntoFrame(const Foundation::Numerics::Vector3& coordinate) { Foundation::Point result; hrcheck(X::get()->_ProjectOntoFrame(coordinate, &result)); return result; }
	Foundation::Numerics::Vector2 UnprojectAtUnitDepth(const Foundation::Point& pixelCoordinate) { Foundation::Numerics::Vector2 result; hrcheck(X::get()->_UnprojectAtUnitDepth(pixelCoordinate, &result)); return result; }
	void ProjectManyOntoFrame(const szarray<Foundation::Numerics::Vector3>& coordinates, const szarray<Foundation::Point>& results) { hrcheck(X::get()->_ProjectManyOntoFrame(coordinates.size, to_abi(coordinates.p), results.size, to_abi(results.p))); }
	void UnprojectPixelsAtUnitDepth(const szarray<Foundation::Point>& pixelCoordinates, const szarray<Foundation::Numerics::Vector2>& results) { hrcheck(X::get()->_UnprojectPixelsAtUnitDepth(pixelCoordinates.size, to_abi(pixelCoordinates.p), results.size, to_abi(results.p))); }
	ICameraIntrinsics_adaptor() {}
};
template<typename X> struct adapt<ICameraIntrinsics, X> : Windows::Media::Devices::Core::ICameraIntrinsics_adaptor<X> { typedef adapt ICameraIntrinsics; };
struct ICameraIntrinsics : ICameraIntrinsics_raw, generate<ICameraIntrinsics> {};

// CameraIntrinsics
template<typename X> struct statics<CameraIntrinsics, X> : X {
	typedef typename X::root_type CameraIntrinsics;
};
struct CameraIntrinsics : generate<CameraIntrinsics> {};

// IDepthCorrelatedCoordinateMapper
struct IDepthCorrelatedCoordinateMapper_raw : IInspectable {
	virtual STDMETHODIMP _UnprojectPoint(Foundation::Point sourcePoint, Perception::Spatial::SpatialCoordinateSystem* targetCoordinateSystem, Foundation::Numerics::Vector3 *result);
	virtual STDMETHODIMP _UnprojectPoints(unsigned sourcePointsSize, Foundation::Point *sourcePoints, Perception::Spatial::SpatialCoordinateSystem* targetCoordinateSystem, unsigned resultsSize, Foundation::Numerics::Vector3 *results);
	virtual STDMETHODIMP _MapPoint(Foundation::Point sourcePoint, Perception::Spatial::SpatialCoordinateSystem* targetCoordinateSystem, CameraIntrinsics* targetCameraIntrinsics, Foundation::Point *result);
	virtual STDMETHODIMP _MapPoints(unsigned sourcePointsSize, Foundation::Point *sourcePoints, Perception::Spatial::SpatialCoordinateSystem* targetCoordinateSystem, CameraIntrinsics* targetCameraIntrinsics, unsigned resultsSize, Foundation::Point *results);
};
template<typename X> struct IDepthCorrelatedCoordinateMapper_adaptor : X {
	Foundation::Numerics::Vector3 UnprojectPoint(const Foundation::Point& sourcePoint, pptr<Perception::Spatial::SpatialCoordinateSystem> targetCoordinateSystem) { Foundation::Numerics::Vector3 result; hrcheck(X::get()->_UnprojectPoint(sourcePoint, targetCoordinateSystem, &result)); return result; }
	void UnprojectPoints(const szarray<Foundation::Point>& sourcePoints, pptr<Perception::Spatial::SpatialCoordinateSystem> targetCoordinateSystem, const szarray<Foundation::Numerics::Vector3>& results) { hrcheck(X::get()->_UnprojectPoints(sourcePoints.size, to_abi(sourcePoints.p), targetCoordinateSystem, results.size, to_abi(results.p))); }
	Foundation::Point MapPoint(const Foundation::Point& sourcePoint, pptr<Perception::Spatial::SpatialCoordinateSystem> targetCoordinateSystem, pptr<CameraIntrinsics> targetCameraIntrinsics) { Foundation::Point result; hrcheck(X::get()->_MapPoint(sourcePoint, targetCoordinateSystem, targetCameraIntrinsics, &result)); return result; }
	void MapPoints(const szarray<Foundation::Point>& sourcePoints, pptr<Perception::Spatial::SpatialCoordinateSystem> targetCoordinateSystem, pptr<CameraIntrinsics> targetCameraIntrinsics, const szarray<Foundation::Point>& results) { hrcheck(X::get()->_MapPoints(sourcePoints.size, to_abi(sourcePoints.p), targetCoordinateSystem, targetCameraIntrinsics, results.size, to_abi(results.p))); }
};
template<typename X> struct adapt<IDepthCorrelatedCoordinateMapper, X> : Windows::Media::Devices::Core::IDepthCorrelatedCoordinateMapper_adaptor<X> { typedef adapt IDepthCorrelatedCoordinateMapper; };
struct IDepthCorrelatedCoordinateMapper : IDepthCorrelatedCoordinateMapper_raw, generate<IDepthCorrelatedCoordinateMapper> {};

// DepthCorrelatedCoordinateMapper
template<typename X> struct statics<DepthCorrelatedCoordinateMapper, X> : X {
	typedef typename X::root_type DepthCorrelatedCoordinateMapper;
};
struct DepthCorrelatedCoordinateMapper : generate<DepthCorrelatedCoordinateMapper> {};
}}}}
} // namespace iso_winrt
