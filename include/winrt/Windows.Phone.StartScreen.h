#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.StartScreen

#include "Windows.Phone.StartScreen.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
template<typename TResult> struct IAsyncOperation;
}
namespace UI { namespace Notifications {
struct ToastNotifier;
struct BadgeUpdater;
struct TileUpdater;
}}}

// defs

template<> struct def<Windows::Phone::StartScreen::IToastNotificationManagerStatics3> : overridable_type<> {};
template<> struct def<Windows::Phone::StartScreen::IDualSimTile> : interface_type<> {};
template<> struct def<Windows::Phone::StartScreen::IDualSimTileStatics> : interface_type<> {};
template<> struct def<Windows::Phone::StartScreen::DualSimTile> : class_type<Platform::Object, Windows::Phone::StartScreen::IDualSimTile> {};
template<> struct def<Windows::Phone::StartScreen::DualSimTileContract> : value_type<> {};

// uuids

template<> struct uuid<Windows::Phone::StartScreen::IToastNotificationManagerStatics3> { define_guid(0x2717F54B, 0x50DF, 0x4455, 0x8E, 0x6E, 0x41, 0xE0, 0xFC, 0x8E, 0x13, 0xCE);};
template<> struct uuid<Windows::Phone::StartScreen::IDualSimTile> { define_guid(0x143AB213, 0xD05F, 0x4041, 0xA1, 0x8C, 0x3E, 0x3F, 0xCB, 0x75, 0xB4, 0x1E);};
template<> struct uuid<Windows::Phone::StartScreen::IDualSimTileStatics> { define_guid(0x50567C9E, 0xC58F, 0x4DC9, 0xB6, 0xE8, 0xFA, 0x67, 0x77, 0xEE, 0xEB, 0x37);};

// types

namespace Windows { namespace Phone { namespace StartScreen {

// IToastNotificationManagerStatics3
struct IToastNotificationManagerStatics3_raw : IInspectable {
	virtual STDMETHODIMP _CreateToastNotifierForSecondaryTile(HSTRING tileId, Windows::UI::Notifications::ToastNotifier* *notifier) = 0;
};
template<typename X> struct IToastNotificationManagerStatics3_adaptor : X {
	ptr<Windows::UI::Notifications::ToastNotifier> CreateToastNotifierForSecondaryTile(hstring_ref tileId) { Windows::UI::Notifications::ToastNotifier* notifier; hrcheck(X::get()->_CreateToastNotifierForSecondaryTile(tileId, &notifier)); return from_abi(notifier); }
};
template<typename X> struct adapt<IToastNotificationManagerStatics3, X> : Windows::Phone::StartScreen::IToastNotificationManagerStatics3_adaptor<X> { typedef adapt IToastNotificationManagerStatics3; };
template<typename X> struct IToastNotificationManagerStatics3_unadaptor : X {
	STDMETHODIMP _CreateToastNotifierForSecondaryTile(HSTRING tileId, Windows::UI::Notifications::ToastNotifier* *notifier) { return hrtry([&, this] { *notifier = to_abi(X::get()->CreateToastNotifierForSecondaryTile(tileId)); }); }
};
template<typename X> struct unadapt<IToastNotificationManagerStatics3, X> : Windows::Phone::StartScreen::IToastNotificationManagerStatics3_unadaptor<X> {};
struct IToastNotificationManagerStatics3 : IToastNotificationManagerStatics3_raw, generate<IToastNotificationManagerStatics3> {};

// IDualSimTile
struct IDualSimTile_raw : IInspectable {
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_IsPinnedToStart(bool *value);
	virtual STDMETHODIMP _CreateAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _UpdateAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IDualSimTile_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDualSimTile_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDualSimTile_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDualSimTile_adaptor::IsPinnedToStart)->_get_IsPinnedToStart(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPinnedToStart;
	};
	ptr<Foundation::IAsyncOperation<bool>> CreateAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_CreateAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> UpdateAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_UpdateAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> DeleteAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_DeleteAsync(&operation)); return from_abi(operation); }
	IDualSimTile_adaptor() {}
};
template<typename X> struct adapt<IDualSimTile, X> : Windows::Phone::StartScreen::IDualSimTile_adaptor<X> { typedef adapt IDualSimTile; };
struct IDualSimTile : IDualSimTile_raw, generate<IDualSimTile> {};

// IDualSimTileStatics
struct IDualSimTileStatics : IInspectable {
	virtual STDMETHODIMP _GetTileForSim2(DualSimTile* *result);
	virtual STDMETHODIMP _UpdateDisplayNameForSim1Async(HSTRING name, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _CreateTileUpdaterForSim1(Windows::UI::Notifications::TileUpdater* *updater);
	virtual STDMETHODIMP _CreateTileUpdaterForSim2(Windows::UI::Notifications::TileUpdater* *updater);
	virtual STDMETHODIMP _CreateBadgeUpdaterForSim1(Windows::UI::Notifications::BadgeUpdater* *updater);
	virtual STDMETHODIMP _CreateBadgeUpdaterForSim2(Windows::UI::Notifications::BadgeUpdater* *updater);
	virtual STDMETHODIMP _CreateToastNotifierForSim1(Windows::UI::Notifications::ToastNotifier* *notifier);
	virtual STDMETHODIMP _CreateToastNotifierForSim2(Windows::UI::Notifications::ToastNotifier* *notifier);
};

// DualSimTile
template<typename> struct DualSimTile_statics {
	static ptr<DualSimTile> GetTileForSim2() { DualSimTile* result; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_GetTileForSim2(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<bool>> UpdateDisplayNameForSim1Async(hstring_ref name) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_UpdateDisplayNameForSim1Async(name, &operation)); return from_abi(operation); }
	static ptr<Windows::UI::Notifications::TileUpdater> CreateTileUpdaterForSim1() { Windows::UI::Notifications::TileUpdater* updater; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_CreateTileUpdaterForSim1(&updater)); return from_abi(updater); }
	static ptr<Windows::UI::Notifications::TileUpdater> CreateTileUpdaterForSim2() { Windows::UI::Notifications::TileUpdater* updater; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_CreateTileUpdaterForSim2(&updater)); return from_abi(updater); }
	static ptr<Windows::UI::Notifications::BadgeUpdater> CreateBadgeUpdaterForSim1() { Windows::UI::Notifications::BadgeUpdater* updater; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_CreateBadgeUpdaterForSim1(&updater)); return from_abi(updater); }
	static ptr<Windows::UI::Notifications::BadgeUpdater> CreateBadgeUpdaterForSim2() { Windows::UI::Notifications::BadgeUpdater* updater; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_CreateBadgeUpdaterForSim2(&updater)); return from_abi(updater); }
	static ptr<Windows::UI::Notifications::ToastNotifier> CreateToastNotifierForSim1() { Windows::UI::Notifications::ToastNotifier* notifier; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_CreateToastNotifierForSim1(&notifier)); return from_abi(notifier); }
	static ptr<Windows::UI::Notifications::ToastNotifier> CreateToastNotifierForSim2() { Windows::UI::Notifications::ToastNotifier* notifier; hrcheck(get_activation_factory<DualSimTile, IDualSimTileStatics>()->_CreateToastNotifierForSim2(&notifier)); return from_abi(notifier); }
};

template<typename X> struct statics<DualSimTile, X> : X, Windows::Phone::StartScreen::DualSimTile_statics<void> {
	typedef typename X::root_type DualSimTile;
};
struct DualSimTile : generate<DualSimTile> {};
}}}
} // namespace iso_winrt
