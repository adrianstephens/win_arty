#pragma once
// generated by isopod tools
// namespaces:
// Windows.Security.Cryptography.Core

#include "Windows.Security.Cryptography.Core.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}
template<typename TResult> struct IAsyncOperation;
}
namespace Security { namespace Cryptography { namespace Certificates {
struct Certificate;
}}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType> : enum_type<int> {};
template<> struct def<Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType> : enum_type<int> {};
template<> struct def<Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm> : enum_type<int> {};
template<> struct def<Windows::Security::Cryptography::Core::CryptographicPadding> : enum_type<int> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationParameters> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationParameters2> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics2> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::KeyDerivationParameters> : class_type<Platform::Object, Windows::Security::Cryptography::Core::IKeyDerivationParameters, Windows::Security::Cryptography::Core::IKeyDerivationParameters2> {};
template<> struct def<Windows::Security::Cryptography::Core::ICryptographicKey> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::CryptographicKey> : class_type<Platform::Object, Windows::Security::Cryptography::Core::ICryptographicKey> {};
template<> struct def<Windows::Security::Cryptography::Core::IHashComputation> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::CryptographicHash> : class_type<Platform::Object, Windows::Security::Cryptography::Core::IHashComputation> {};
template<> struct def<Windows::Security::Cryptography::Core::IHashAlgorithmProvider> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IMacAlgorithmProvider> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IMacAlgorithmProvider2> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider2> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::PersistedKeyProvider> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData> : class_type<Platform::Object, Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData> {};
template<> struct def<Windows::Security::Cryptography::Core::ICryptographicEngineStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::ICryptographicEngineStatics2> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::CryptographicEngine> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::HashAlgorithmProvider> : class_type<Platform::Object, Windows::Security::Cryptography::Core::IHashAlgorithmProvider> {};
template<> struct def<Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::MacAlgorithmProvider> : class_type<Platform::Object, Windows::Security::Cryptography::Core::IMacAlgorithmProvider, Windows::Security::Cryptography::Core::IMacAlgorithmProvider2> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider> : class_type<Platform::Object, Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider> {};
template<> struct def<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider> : class_type<Platform::Object, Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider> {};
template<> struct def<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider> : class_type<Platform::Object, Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider, Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider2> {};
template<> struct def<Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::HashAlgorithmNames> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::MacAlgorithmNames> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::SymmetricAlgorithmNames> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics2> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Cryptography::Core::IEccCurveNamesStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::EccCurveNames> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics2> : interface_type<> {};
template<> struct def<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationParameters> { define_guid(0x7BF05967, 0x47B, 0x4A8C, 0x96, 0x4A, 0x46, 0x9F, 0xFD, 0x55, 0x22, 0xE2);};
template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationParameters2> { define_guid(0xCD4166D1, 0x417E, 0x4F4C, 0xB6, 0x66, 0xC0, 0xD8, 0x79, 0xF3, 0xF8, 0xE0);};
template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics> { define_guid(0xEA961FBE, 0xF37F, 0x4146, 0x9D, 0xFE, 0xA4, 0x56, 0xF1, 0x73, 0x5F, 0x4B);};
template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics2> { define_guid(0xA5783DD5, 0x58E3, 0x4EFB, 0xB2, 0x83, 0xA1, 0x65, 0x31, 0x26, 0xE1, 0xBE);};
template<> struct uuid<Windows::Security::Cryptography::Core::ICryptographicKey> { define_guid(0xED2A3B70, 0x8E7B, 0x4009, 0x84, 0x1, 0xFF, 0xD1, 0xA6, 0x2E, 0xEB, 0x27);};
template<> struct uuid<Windows::Security::Cryptography::Core::IHashComputation> { define_guid(0x5904D1B6, 0xAD31, 0x4603, 0xA3, 0xA4, 0xB1, 0xBD, 0xA9, 0x8E, 0x25, 0x62);};
template<> struct uuid<Windows::Security::Cryptography::Core::IHashAlgorithmProvider> { define_guid(0xBE9B3080, 0xB2C3, 0x422B, 0xBC, 0xE1, 0xEC, 0x90, 0xEF, 0xB5, 0xD7, 0xB5);};
template<> struct uuid<Windows::Security::Cryptography::Core::IMacAlgorithmProvider> { define_guid(0x4A3FC5C3, 0x1CBD, 0x41CE, 0xA0, 0x92, 0xAA, 0xB, 0xC5, 0xD2, 0xD2, 0xF5);};
template<> struct uuid<Windows::Security::Cryptography::Core::IMacAlgorithmProvider2> { define_guid(0x6DA32A15, 0xD931, 0x42ED, 0x8E, 0x7E, 0xC3, 0x1, 0xCA, 0xEE, 0x11, 0x9C);};
template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider> { define_guid(0xE1FBA83B, 0x4671, 0x43B7, 0x91, 0x58, 0x76, 0x3A, 0xAA, 0x98, 0xB6, 0xBF);};
template<> struct uuid<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider> { define_guid(0x3D7E4A33, 0x3BD0, 0x4902, 0x8A, 0xC8, 0x47, 0xD, 0x50, 0xD2, 0x13, 0x76);};
template<> struct uuid<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider> { define_guid(0xE8D2FF37, 0x6259, 0x4E88, 0xB7, 0xE0, 0x94, 0x19, 0x1F, 0xDE, 0x69, 0x9E);};
template<> struct uuid<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider2> { define_guid(0x4E322A7E, 0x7C4D, 0x4997, 0xAC, 0x4F, 0x1B, 0x84, 0x8B, 0x36, 0x30, 0x6E);};
template<> struct uuid<Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics> { define_guid(0x77274814, 0xD9D4, 0x4CF5, 0xB6, 0x68, 0xE0, 0x45, 0x7D, 0xF3, 0x8, 0x94);};
template<> struct uuid<Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData> { define_guid(0x6FA42FE7, 0x1ECB, 0x4B00, 0xBE, 0xA5, 0x60, 0xB8, 0x3F, 0x86, 0x2F, 0x17);};
template<> struct uuid<Windows::Security::Cryptography::Core::ICryptographicEngineStatics> { define_guid(0x9FEA0639, 0x6FF7, 0x4C85, 0xA0, 0x95, 0x95, 0xEB, 0x31, 0x71, 0x5E, 0xB9);};
template<> struct uuid<Windows::Security::Cryptography::Core::ICryptographicEngineStatics2> { define_guid(0x675948FE, 0xDF9F, 0x4191, 0x92, 0xC7, 0x6C, 0xE6, 0xF5, 0x84, 0x20, 0xE0);};
template<> struct uuid<Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics> { define_guid(0x9FAC9741, 0x5CC4, 0x4336, 0xAE, 0x38, 0x62, 0x12, 0xB7, 0x5A, 0x91, 0x5A);};
template<> struct uuid<Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics> { define_guid(0xC9BDC147, 0xCC77, 0x4DF0, 0x9E, 0x4E, 0xB9, 0x21, 0xE0, 0x80, 0x64, 0x4C);};
template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics> { define_guid(0xA22097A, 0xA1C, 0x443B, 0x94, 0x18, 0xB9, 0x49, 0x8A, 0xEB, 0x16, 0x3);};
template<> struct uuid<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics> { define_guid(0x8D3B2326, 0x1F37, 0x491F, 0xB6, 0xE, 0xF5, 0x43, 0x1B, 0x26, 0xB4, 0x83);};
template<> struct uuid<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics> { define_guid(0x425BDE18, 0xA7F3, 0x47A6, 0xA8, 0xD2, 0xC4, 0x8D, 0x60, 0x33, 0xA6, 0x5C);};
template<> struct uuid<Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics> { define_guid(0x6B5E0516, 0xDE96, 0x4F0A, 0x8D, 0x57, 0xDC, 0xC9, 0xDA, 0xE3, 0x6C, 0x76);};
template<> struct uuid<Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics> { define_guid(0x41412678, 0xFB1E, 0x43A4, 0x89, 0x5E, 0xA9, 0x2, 0x6E, 0x43, 0x90, 0xA3);};
template<> struct uuid<Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics> { define_guid(0x6870727B, 0xC996, 0x4EAE, 0x84, 0xD7, 0x79, 0xB2, 0xAE, 0xB7, 0x3B, 0x9C);};
template<> struct uuid<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics> { define_guid(0xCAF6FCE4, 0x67C0, 0x46AA, 0x84, 0xF9, 0x75, 0x2E, 0x77, 0x44, 0x9F, 0x9B);};
template<> struct uuid<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics2> { define_guid(0xF141C0D6, 0x4BFF, 0x4F23, 0xBA, 0x66, 0x60, 0x45, 0xB1, 0x37, 0xD5, 0xDF);};
template<> struct uuid<Windows::Security::Cryptography::Core::IEccCurveNamesStatics> { define_guid(0xB3FF930C, 0xAEEB, 0x409E, 0xB7, 0xD4, 0x9B, 0x95, 0x29, 0x5A, 0xAE, 0xCF);};
template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics> { define_guid(0x7B6E363E, 0x94D2, 0x4739, 0xA5, 0x7B, 0x2, 0x2E, 0xC, 0x3A, 0x40, 0x2A);};
template<> struct uuid<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics2> { define_guid(0x57953FAB, 0x6044, 0x466F, 0x97, 0xF4, 0x33, 0x7B, 0x78, 0x8, 0x38, 0x4D);};

// types

namespace Windows { namespace Security { namespace Cryptography { namespace Core {

// IKeyDerivationParameters
struct IKeyDerivationParameters_raw : IInspectable {
	virtual STDMETHODIMP _get_KdfGenericBinary(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_KdfGenericBinary(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_IterationCount(unsigned *value);
};
template<typename X> struct IKeyDerivationParameters_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IKeyDerivationParameters_adaptor::IterationCount)->_get_IterationCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} IterationCount;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IKeyDerivationParameters_adaptor::KdfGenericBinary)->_get_KdfGenericBinary(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IKeyDerivationParameters_adaptor::KdfGenericBinary)->_put_KdfGenericBinary(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} KdfGenericBinary;
	};
	IKeyDerivationParameters_adaptor() {}
};
template<typename X> struct adapt<IKeyDerivationParameters, X> : Windows::Security::Cryptography::Core::IKeyDerivationParameters_adaptor<X> { typedef adapt IKeyDerivationParameters; };
struct IKeyDerivationParameters : IKeyDerivationParameters_raw, generate<IKeyDerivationParameters> {};

// IKeyDerivationParameters2
struct IKeyDerivationParameters2_raw : IInspectable {
	virtual STDMETHODIMP _get_Capi1KdfTargetAlgorithm(Core::Capi1KdfTargetAlgorithm *value);
	virtual STDMETHODIMP _put_Capi1KdfTargetAlgorithm(Core::Capi1KdfTargetAlgorithm value);
};
template<typename X> struct IKeyDerivationParameters2_adaptor : X {
	union {
		struct : property {
			Core::Capi1KdfTargetAlgorithm get() { Core::Capi1KdfTargetAlgorithm value; hrcheck(enc(&IKeyDerivationParameters2_adaptor::Capi1KdfTargetAlgorithm)->_get_Capi1KdfTargetAlgorithm(&value)); return value; }
			Core::Capi1KdfTargetAlgorithm operator()() { return get(); }
			operator Core::Capi1KdfTargetAlgorithm () { return get(); }
			void put(Core::Capi1KdfTargetAlgorithm value) { hrcheck(enc(&IKeyDerivationParameters2_adaptor::Capi1KdfTargetAlgorithm)->_put_Capi1KdfTargetAlgorithm(value)); }
			void operator=(Core::Capi1KdfTargetAlgorithm value) { put(value); }
			void operator()(Core::Capi1KdfTargetAlgorithm value) { put(value); }
		} Capi1KdfTargetAlgorithm;
	};
	IKeyDerivationParameters2_adaptor() {}
};
template<typename X> struct adapt<IKeyDerivationParameters2, X> : Windows::Security::Cryptography::Core::IKeyDerivationParameters2_adaptor<X> { typedef adapt IKeyDerivationParameters2; };
struct IKeyDerivationParameters2 : IKeyDerivationParameters2_raw, generate<IKeyDerivationParameters2> {};

// IKeyDerivationParametersStatics
struct IKeyDerivationParametersStatics : IInspectable {
	virtual STDMETHODIMP _BuildForPbkdf2(Storage::Streams::IBuffer* pbkdf2Salt, unsigned iterationCount, KeyDerivationParameters* *value);
	virtual STDMETHODIMP _BuildForSP800108(Storage::Streams::IBuffer* label, Storage::Streams::IBuffer* context, KeyDerivationParameters* *value);
	virtual STDMETHODIMP _BuildForSP80056a(Storage::Streams::IBuffer* algorithmId, Storage::Streams::IBuffer* partyUInfo, Storage::Streams::IBuffer* partyVInfo, Storage::Streams::IBuffer* suppPubInfo, Storage::Streams::IBuffer* suppPrivInfo, KeyDerivationParameters* *value);
};

// IKeyDerivationParametersStatics2
struct IKeyDerivationParametersStatics2 : IInspectable {
	virtual STDMETHODIMP _BuildForCapi1Kdf(Capi1KdfTargetAlgorithm capi1KdfTargetAlgorithm, KeyDerivationParameters* *value);
};

// KeyDerivationParameters
template<typename> struct KeyDerivationParameters_statics {
	static ptr<KeyDerivationParameters> BuildForCapi1Kdf(Core::Capi1KdfTargetAlgorithm capi1KdfTargetAlgorithm) { KeyDerivationParameters* value; hrcheck(get_activation_factory<KeyDerivationParameters, IKeyDerivationParametersStatics2>()->_BuildForCapi1Kdf(capi1KdfTargetAlgorithm, &value)); return from_abi(value); }
	static ptr<KeyDerivationParameters> BuildForPbkdf2(pptr<Storage::Streams::IBuffer> pbkdf2Salt, unsigned iterationCount) { KeyDerivationParameters* value; hrcheck(get_activation_factory<KeyDerivationParameters, IKeyDerivationParametersStatics>()->_BuildForPbkdf2(pbkdf2Salt, iterationCount, &value)); return from_abi(value); }
	static ptr<KeyDerivationParameters> BuildForSP800108(pptr<Storage::Streams::IBuffer> label, pptr<Storage::Streams::IBuffer> context) { KeyDerivationParameters* value; hrcheck(get_activation_factory<KeyDerivationParameters, IKeyDerivationParametersStatics>()->_BuildForSP800108(label, context, &value)); return from_abi(value); }
	static ptr<KeyDerivationParameters> BuildForSP80056a(pptr<Storage::Streams::IBuffer> algorithmId, pptr<Storage::Streams::IBuffer> partyUInfo, pptr<Storage::Streams::IBuffer> partyVInfo, pptr<Storage::Streams::IBuffer> suppPubInfo, pptr<Storage::Streams::IBuffer> suppPrivInfo) { KeyDerivationParameters* value; hrcheck(get_activation_factory<KeyDerivationParameters, IKeyDerivationParametersStatics>()->_BuildForSP80056a(algorithmId, partyUInfo, partyVInfo, suppPubInfo, suppPrivInfo, &value)); return from_abi(value); }
};

template<typename X> struct statics<KeyDerivationParameters, X> : X, Windows::Security::Cryptography::Core::KeyDerivationParameters_statics<void> {
	typedef typename X::root_type KeyDerivationParameters;
};
struct KeyDerivationParameters : generate<KeyDerivationParameters> {};

// ICryptographicKey
struct ICryptographicKey_raw : IInspectable {
	virtual STDMETHODIMP _get_KeySize(unsigned *value);
	virtual STDMETHODIMP _ExportDefaultPrivateKeyBlobType(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _ExportPrivateKeyWithBlobType(CryptographicPrivateKeyBlobType BlobType, Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _ExportDefaultPublicKeyBlobType(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _ExportPublicKeyWithBlobType(CryptographicPublicKeyBlobType BlobType, Storage::Streams::IBuffer* *value);
};
template<typename X> struct ICryptographicKey_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICryptographicKey_adaptor::KeySize)->_get_KeySize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} KeySize;
	};
	ptr<Storage::Streams::IBuffer> Export() { Storage::Streams::IBuffer* value; hrcheck(X::get()->_ExportDefaultPrivateKeyBlobType(&value)); return from_abi(value); }
	ptr<Storage::Streams::IBuffer> Export(CryptographicPrivateKeyBlobType BlobType) { Storage::Streams::IBuffer* value; hrcheck(X::get()->_ExportPrivateKeyWithBlobType(BlobType, &value)); return from_abi(value); }
	ptr<Storage::Streams::IBuffer> ExportPublicKey() { Storage::Streams::IBuffer* value; hrcheck(X::get()->_ExportDefaultPublicKeyBlobType(&value)); return from_abi(value); }
	ptr<Storage::Streams::IBuffer> ExportPublicKey(CryptographicPublicKeyBlobType BlobType) { Storage::Streams::IBuffer* value; hrcheck(X::get()->_ExportPublicKeyWithBlobType(BlobType, &value)); return from_abi(value); }
	ICryptographicKey_adaptor() {}
};
template<typename X> struct adapt<ICryptographicKey, X> : Windows::Security::Cryptography::Core::ICryptographicKey_adaptor<X> { typedef adapt ICryptographicKey; };
struct ICryptographicKey : ICryptographicKey_raw, generate<ICryptographicKey> {};

// CryptographicKey
template<typename X> struct statics<CryptographicKey, X> : X {
	typedef typename X::root_type CryptographicKey;
};
struct CryptographicKey : generate<CryptographicKey> {
	using ICryptographicKey::ExportPublicKey;
	using ICryptographicKey::Export;
};

// IHashComputation
struct IHashComputation_raw : IInspectable {
	virtual STDMETHODIMP _Append(Storage::Streams::IBuffer* data);
	virtual STDMETHODIMP _GetValueAndReset(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IHashComputation_adaptor : X {
	void Append(pptr<Storage::Streams::IBuffer> data) { hrcheck(X::get()->_Append(data)); }
	ptr<Storage::Streams::IBuffer> GetValueAndReset() { Storage::Streams::IBuffer* value; hrcheck(X::get()->_GetValueAndReset(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IHashComputation, X> : Windows::Security::Cryptography::Core::IHashComputation_adaptor<X> { typedef adapt IHashComputation; };
struct IHashComputation : IHashComputation_raw, generate<IHashComputation> {};

// CryptographicHash
template<typename X> struct statics<CryptographicHash, X> : X {
	typedef typename X::root_type CryptographicHash;
};
struct CryptographicHash : generate<CryptographicHash> {};

// IHashAlgorithmProvider
struct IHashAlgorithmProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_AlgorithmName(HSTRING *value);
	virtual STDMETHODIMP _get_HashLength(unsigned *value);
	virtual STDMETHODIMP _HashData(Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _CreateHash(CryptographicHash* *Value);
};
template<typename X> struct IHashAlgorithmProvider_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IHashAlgorithmProvider_adaptor::AlgorithmName)->_get_AlgorithmName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AlgorithmName;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHashAlgorithmProvider_adaptor::HashLength)->_get_HashLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} HashLength;
	};
	ptr<Storage::Streams::IBuffer> HashData(pptr<Storage::Streams::IBuffer> data) { Storage::Streams::IBuffer* value; hrcheck(X::get()->_HashData(data, &value)); return from_abi(value); }
	ptr<CryptographicHash> CreateHash() { CryptographicHash* Value; hrcheck(X::get()->_CreateHash(&Value)); return from_abi(Value); }
	IHashAlgorithmProvider_adaptor() {}
};
template<typename X> struct adapt<IHashAlgorithmProvider, X> : Windows::Security::Cryptography::Core::IHashAlgorithmProvider_adaptor<X> { typedef adapt IHashAlgorithmProvider; };
struct IHashAlgorithmProvider : IHashAlgorithmProvider_raw, generate<IHashAlgorithmProvider> {};

// IMacAlgorithmProvider
struct IMacAlgorithmProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_AlgorithmName(HSTRING *value);
	virtual STDMETHODIMP _get_MacLength(unsigned *value);
	virtual STDMETHODIMP _CreateKey(Storage::Streams::IBuffer* keyMaterial, CryptographicKey* *macKey);
};
template<typename X> struct IMacAlgorithmProvider_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMacAlgorithmProvider_adaptor::AlgorithmName)->_get_AlgorithmName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AlgorithmName;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMacAlgorithmProvider_adaptor::MacLength)->_get_MacLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MacLength;
	};
	ptr<CryptographicKey> CreateKey(pptr<Storage::Streams::IBuffer> keyMaterial) { CryptographicKey* macKey; hrcheck(X::get()->_CreateKey(keyMaterial, &macKey)); return from_abi(macKey); }
	IMacAlgorithmProvider_adaptor() {}
};
template<typename X> struct adapt<IMacAlgorithmProvider, X> : Windows::Security::Cryptography::Core::IMacAlgorithmProvider_adaptor<X> { typedef adapt IMacAlgorithmProvider; };
struct IMacAlgorithmProvider : IMacAlgorithmProvider_raw, generate<IMacAlgorithmProvider> {};

// IMacAlgorithmProvider2
struct IMacAlgorithmProvider2_raw : IInspectable {
	virtual STDMETHODIMP _CreateHash(Storage::Streams::IBuffer* keyMaterial, CryptographicHash* *value);
};
template<typename X> struct IMacAlgorithmProvider2_adaptor : X {
	ptr<CryptographicHash> CreateHash(pptr<Storage::Streams::IBuffer> keyMaterial) { CryptographicHash* value; hrcheck(X::get()->_CreateHash(keyMaterial, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IMacAlgorithmProvider2, X> : Windows::Security::Cryptography::Core::IMacAlgorithmProvider2_adaptor<X> { typedef adapt IMacAlgorithmProvider2; };
struct IMacAlgorithmProvider2 : IMacAlgorithmProvider2_raw, generate<IMacAlgorithmProvider2> {};

// IKeyDerivationAlgorithmProvider
struct IKeyDerivationAlgorithmProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_AlgorithmName(HSTRING *value);
	virtual STDMETHODIMP _CreateKey(Storage::Streams::IBuffer* keyMaterial, CryptographicKey* *key);
};
template<typename X> struct IKeyDerivationAlgorithmProvider_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IKeyDerivationAlgorithmProvider_adaptor::AlgorithmName)->_get_AlgorithmName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AlgorithmName;
	};
	ptr<CryptographicKey> CreateKey(pptr<Storage::Streams::IBuffer> keyMaterial) { CryptographicKey* key; hrcheck(X::get()->_CreateKey(keyMaterial, &key)); return from_abi(key); }
	IKeyDerivationAlgorithmProvider_adaptor() {}
};
template<typename X> struct adapt<IKeyDerivationAlgorithmProvider, X> : Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider_adaptor<X> { typedef adapt IKeyDerivationAlgorithmProvider; };
struct IKeyDerivationAlgorithmProvider : IKeyDerivationAlgorithmProvider_raw, generate<IKeyDerivationAlgorithmProvider> {};

// ISymmetricKeyAlgorithmProvider
struct ISymmetricKeyAlgorithmProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_AlgorithmName(HSTRING *value);
	virtual STDMETHODIMP _get_BlockLength(unsigned *value);
	virtual STDMETHODIMP _CreateSymmetricKey(Storage::Streams::IBuffer* keyMaterial, CryptographicKey* *key);
};
template<typename X> struct ISymmetricKeyAlgorithmProvider_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISymmetricKeyAlgorithmProvider_adaptor::AlgorithmName)->_get_AlgorithmName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AlgorithmName;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISymmetricKeyAlgorithmProvider_adaptor::BlockLength)->_get_BlockLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} BlockLength;
	};
	ptr<CryptographicKey> CreateSymmetricKey(pptr<Storage::Streams::IBuffer> keyMaterial) { CryptographicKey* key; hrcheck(X::get()->_CreateSymmetricKey(keyMaterial, &key)); return from_abi(key); }
	ISymmetricKeyAlgorithmProvider_adaptor() {}
};
template<typename X> struct adapt<ISymmetricKeyAlgorithmProvider, X> : Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider_adaptor<X> { typedef adapt ISymmetricKeyAlgorithmProvider; };
struct ISymmetricKeyAlgorithmProvider : ISymmetricKeyAlgorithmProvider_raw, generate<ISymmetricKeyAlgorithmProvider> {};

// IAsymmetricKeyAlgorithmProvider
struct IAsymmetricKeyAlgorithmProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_AlgorithmName(HSTRING *value);
	virtual STDMETHODIMP _CreateKeyPair(unsigned keySize, CryptographicKey* *key);
	virtual STDMETHODIMP _ImportDefaultPrivateKeyBlob(Storage::Streams::IBuffer* keyBlob, CryptographicKey* *key);
	virtual STDMETHODIMP _ImportKeyPairWithBlobType(Storage::Streams::IBuffer* keyBlob, CryptographicPrivateKeyBlobType BlobType, CryptographicKey* *key);
	virtual STDMETHODIMP _ImportDefaultPublicKeyBlob(Storage::Streams::IBuffer* keyBlob, CryptographicKey* *key);
	virtual STDMETHODIMP _ImportPublicKeyWithBlobType(Storage::Streams::IBuffer* keyBlob, CryptographicPublicKeyBlobType BlobType, CryptographicKey* *key);
};
template<typename X> struct IAsymmetricKeyAlgorithmProvider_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAsymmetricKeyAlgorithmProvider_adaptor::AlgorithmName)->_get_AlgorithmName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AlgorithmName;
	};
	ptr<CryptographicKey> CreateKeyPair(unsigned keySize) { CryptographicKey* key; hrcheck(X::get()->_CreateKeyPair(keySize, &key)); return from_abi(key); }
	ptr<CryptographicKey> ImportKeyPair(pptr<Storage::Streams::IBuffer> keyBlob) { CryptographicKey* key; hrcheck(X::get()->_ImportDefaultPrivateKeyBlob(keyBlob, &key)); return from_abi(key); }
	ptr<CryptographicKey> ImportKeyPair(pptr<Storage::Streams::IBuffer> keyBlob, CryptographicPrivateKeyBlobType BlobType) { CryptographicKey* key; hrcheck(X::get()->_ImportKeyPairWithBlobType(keyBlob, BlobType, &key)); return from_abi(key); }
	ptr<CryptographicKey> ImportPublicKey(pptr<Storage::Streams::IBuffer> keyBlob) { CryptographicKey* key; hrcheck(X::get()->_ImportDefaultPublicKeyBlob(keyBlob, &key)); return from_abi(key); }
	ptr<CryptographicKey> ImportPublicKey(pptr<Storage::Streams::IBuffer> keyBlob, CryptographicPublicKeyBlobType BlobType) { CryptographicKey* key; hrcheck(X::get()->_ImportPublicKeyWithBlobType(keyBlob, BlobType, &key)); return from_abi(key); }
	IAsymmetricKeyAlgorithmProvider_adaptor() {}
};
template<typename X> struct adapt<IAsymmetricKeyAlgorithmProvider, X> : Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider_adaptor<X> { typedef adapt IAsymmetricKeyAlgorithmProvider; };
struct IAsymmetricKeyAlgorithmProvider : IAsymmetricKeyAlgorithmProvider_raw, generate<IAsymmetricKeyAlgorithmProvider> {};

// IAsymmetricKeyAlgorithmProvider2
struct IAsymmetricKeyAlgorithmProvider2_raw : IInspectable {
	virtual STDMETHODIMP _CreateKeyPairWithCurveName(HSTRING curveName, CryptographicKey* *key);
	virtual STDMETHODIMP _CreateKeyPairWithCurveParameters(unsigned parametersSize, unsigned char *parameters, CryptographicKey* *key);
};
template<typename X> struct IAsymmetricKeyAlgorithmProvider2_adaptor : X {
	ptr<CryptographicKey> CreateKeyPairWithCurveName(hstring_ref curveName) { CryptographicKey* key; hrcheck(X::get()->_CreateKeyPairWithCurveName(curveName, &key)); return from_abi(key); }
	ptr<CryptographicKey> CreateKeyPairWithCurveParameters(const szarray<unsigned char>& parameters) { CryptographicKey* key; hrcheck(X::get()->_CreateKeyPairWithCurveParameters(parameters.size, to_abi(parameters.p), &key)); return from_abi(key); }
};
template<typename X> struct adapt<IAsymmetricKeyAlgorithmProvider2, X> : Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider2_adaptor<X> { typedef adapt IAsymmetricKeyAlgorithmProvider2; };
struct IAsymmetricKeyAlgorithmProvider2 : IAsymmetricKeyAlgorithmProvider2_raw, generate<IAsymmetricKeyAlgorithmProvider2> {};

// IPersistedKeyProviderStatics
struct IPersistedKeyProviderStatics : IInspectable {
	virtual STDMETHODIMP _OpenKeyPairFromCertificateAsync(Certificates::Certificate* certificate, HSTRING hashAlgorithmName, CryptographicPadding padding, Foundation::IAsyncOperation<CryptographicKey*>* *operation);
	virtual STDMETHODIMP _OpenPublicKeyFromCertificate(Certificates::Certificate* certificate, HSTRING hashAlgorithmName, CryptographicPadding padding, CryptographicKey* *key);
};

// PersistedKeyProvider
template<typename> struct PersistedKeyProvider_statics {
	static ptr<Foundation::IAsyncOperation<ptr<CryptographicKey>>> OpenKeyPairFromCertificateAsync(pptr<Certificates::Certificate> certificate, hstring_ref hashAlgorithmName, CryptographicPadding padding) { Foundation::IAsyncOperation<CryptographicKey*>* operation; hrcheck(get_activation_factory<PersistedKeyProvider, IPersistedKeyProviderStatics>()->_OpenKeyPairFromCertificateAsync(certificate, hashAlgorithmName, padding, &operation)); return from_abi(operation); }
	static ptr<CryptographicKey> OpenPublicKeyFromCertificate(pptr<Certificates::Certificate> certificate, hstring_ref hashAlgorithmName, CryptographicPadding padding) { CryptographicKey* key; hrcheck(get_activation_factory<PersistedKeyProvider, IPersistedKeyProviderStatics>()->_OpenPublicKeyFromCertificate(certificate, hashAlgorithmName, padding, &key)); return from_abi(key); }
};

template<typename X> struct statics<PersistedKeyProvider, X> : X, Windows::Security::Cryptography::Core::PersistedKeyProvider_statics<void> {
	typedef typename X::root_type PersistedKeyProvider;
};
struct PersistedKeyProvider : generate<PersistedKeyProvider> {};

// IEncryptedAndAuthenticatedData
struct IEncryptedAndAuthenticatedData_raw : IInspectable {
	virtual STDMETHODIMP _get_EncryptedData(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_AuthenticationTag(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IEncryptedAndAuthenticatedData_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IEncryptedAndAuthenticatedData_adaptor::AuthenticationTag)->_get_AuthenticationTag(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} AuthenticationTag;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IEncryptedAndAuthenticatedData_adaptor::EncryptedData)->_get_EncryptedData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} EncryptedData;
	};
	IEncryptedAndAuthenticatedData_adaptor() {}
};
template<typename X> struct adapt<IEncryptedAndAuthenticatedData, X> : Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData_adaptor<X> { typedef adapt IEncryptedAndAuthenticatedData; };
struct IEncryptedAndAuthenticatedData : IEncryptedAndAuthenticatedData_raw, generate<IEncryptedAndAuthenticatedData> {};

// EncryptedAndAuthenticatedData
template<typename X> struct statics<EncryptedAndAuthenticatedData, X> : X {
	typedef typename X::root_type EncryptedAndAuthenticatedData;
};
struct EncryptedAndAuthenticatedData : generate<EncryptedAndAuthenticatedData> {};

// ICryptographicEngineStatics
struct ICryptographicEngineStatics : IInspectable {
	virtual STDMETHODIMP _Encrypt(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* iv, Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _Decrypt(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* iv, Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _EncryptAndAuthenticate(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* nonce, Storage::Streams::IBuffer* authenticatedData, EncryptedAndAuthenticatedData* *value);
	virtual STDMETHODIMP _DecryptAndAuthenticate(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* nonce, Storage::Streams::IBuffer* authenticationTag, Storage::Streams::IBuffer* authenticatedData, Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _Sign(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _VerifySignature(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* signature, bool *isAuthenticated);
	virtual STDMETHODIMP _DeriveKeyMaterial(CryptographicKey* key, KeyDerivationParameters* parameters, unsigned desiredKeySize, Storage::Streams::IBuffer* *keyMaterial);
};

// ICryptographicEngineStatics2
struct ICryptographicEngineStatics2 : IInspectable {
	virtual STDMETHODIMP _SignHashedData(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _VerifySignatureWithHashInput(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* signature, bool *isAuthenticated);
	virtual STDMETHODIMP _DecryptAsync(CryptographicKey* key, Storage::Streams::IBuffer* data, Storage::Streams::IBuffer* iv, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *value);
	virtual STDMETHODIMP _SignAsync(CryptographicKey* key, Storage::Streams::IBuffer* data, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *value);
	virtual STDMETHODIMP _SignHashedDataAsync(CryptographicKey* key, Storage::Streams::IBuffer* data, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *value);
};

// CryptographicEngine
template<typename> struct CryptographicEngine_statics {
	static ptr<Storage::Streams::IBuffer> SignHashedData(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data) { Storage::Streams::IBuffer* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics2>()->_SignHashedData(key, data, &value)); return from_abi(value); }
	static bool VerifySignatureWithHashInput(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data, pptr<Storage::Streams::IBuffer> signature) { bool isAuthenticated; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics2>()->_VerifySignatureWithHashInput(key, data, signature, &isAuthenticated)); return isAuthenticated; }
	static ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> DecryptAsync(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data, pptr<Storage::Streams::IBuffer> iv) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics2>()->_DecryptAsync(key, data, iv, &value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> SignAsync(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics2>()->_SignAsync(key, data, &value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> SignHashedDataAsync(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics2>()->_SignHashedDataAsync(key, data, &value)); return from_abi(value); }
	static ptr<Storage::Streams::IBuffer> Encrypt(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data, pptr<Storage::Streams::IBuffer> iv) { Storage::Streams::IBuffer* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics>()->_Encrypt(key, data, iv, &value)); return from_abi(value); }
	static ptr<Storage::Streams::IBuffer> Decrypt(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data, pptr<Storage::Streams::IBuffer> iv) { Storage::Streams::IBuffer* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics>()->_Decrypt(key, data, iv, &value)); return from_abi(value); }
	static ptr<EncryptedAndAuthenticatedData> EncryptAndAuthenticate(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data, pptr<Storage::Streams::IBuffer> nonce, pptr<Storage::Streams::IBuffer> authenticatedData) { EncryptedAndAuthenticatedData* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics>()->_EncryptAndAuthenticate(key, data, nonce, authenticatedData, &value)); return from_abi(value); }
	static ptr<Storage::Streams::IBuffer> DecryptAndAuthenticate(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data, pptr<Storage::Streams::IBuffer> nonce, pptr<Storage::Streams::IBuffer> authenticationTag, pptr<Storage::Streams::IBuffer> authenticatedData) { Storage::Streams::IBuffer* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics>()->_DecryptAndAuthenticate(key, data, nonce, authenticationTag, authenticatedData, &value)); return from_abi(value); }
	static ptr<Storage::Streams::IBuffer> Sign(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data) { Storage::Streams::IBuffer* value; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics>()->_Sign(key, data, &value)); return from_abi(value); }
	static bool VerifySignature(pptr<CryptographicKey> key, pptr<Storage::Streams::IBuffer> data, pptr<Storage::Streams::IBuffer> signature) { bool isAuthenticated; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics>()->_VerifySignature(key, data, signature, &isAuthenticated)); return isAuthenticated; }
	static ptr<Storage::Streams::IBuffer> DeriveKeyMaterial(pptr<CryptographicKey> key, pptr<KeyDerivationParameters> parameters, unsigned desiredKeySize) { Storage::Streams::IBuffer* keyMaterial; hrcheck(get_activation_factory<CryptographicEngine, ICryptographicEngineStatics>()->_DeriveKeyMaterial(key, parameters, desiredKeySize, &keyMaterial)); return from_abi(keyMaterial); }
};

template<typename X> struct statics<CryptographicEngine, X> : X, Windows::Security::Cryptography::Core::CryptographicEngine_statics<void> {
	typedef typename X::root_type CryptographicEngine;
};
struct CryptographicEngine : generate<CryptographicEngine> {};

// IHashAlgorithmProviderStatics
struct IHashAlgorithmProviderStatics : IInspectable {
	virtual STDMETHODIMP _OpenAlgorithm(HSTRING algorithm, HashAlgorithmProvider* *provider);
};

// HashAlgorithmProvider
template<typename> struct HashAlgorithmProvider_statics {
	static ptr<HashAlgorithmProvider> OpenAlgorithm(hstring_ref algorithm) { HashAlgorithmProvider* provider; hrcheck(get_activation_factory<HashAlgorithmProvider, IHashAlgorithmProviderStatics>()->_OpenAlgorithm(algorithm, &provider)); return from_abi(provider); }
};

template<typename X> struct statics<HashAlgorithmProvider, X> : X, Windows::Security::Cryptography::Core::HashAlgorithmProvider_statics<void> {
	typedef typename X::root_type HashAlgorithmProvider;
};
struct HashAlgorithmProvider : generate<HashAlgorithmProvider> {};

// IMacAlgorithmProviderStatics
struct IMacAlgorithmProviderStatics : IInspectable {
	virtual STDMETHODIMP _OpenAlgorithm(HSTRING algorithm, MacAlgorithmProvider* *provider);
};

// MacAlgorithmProvider
template<typename> struct MacAlgorithmProvider_statics {
	static ptr<MacAlgorithmProvider> OpenAlgorithm(hstring_ref algorithm) { MacAlgorithmProvider* provider; hrcheck(get_activation_factory<MacAlgorithmProvider, IMacAlgorithmProviderStatics>()->_OpenAlgorithm(algorithm, &provider)); return from_abi(provider); }
};

template<typename X> struct statics<MacAlgorithmProvider, X> : X, Windows::Security::Cryptography::Core::MacAlgorithmProvider_statics<void> {
	typedef typename X::root_type MacAlgorithmProvider;
};
struct MacAlgorithmProvider : generate<MacAlgorithmProvider> {};

// IKeyDerivationAlgorithmProviderStatics
struct IKeyDerivationAlgorithmProviderStatics : IInspectable {
	virtual STDMETHODIMP _OpenAlgorithm(HSTRING algorithm, KeyDerivationAlgorithmProvider* *provider);
};

// KeyDerivationAlgorithmProvider
template<typename> struct KeyDerivationAlgorithmProvider_statics {
	static ptr<KeyDerivationAlgorithmProvider> OpenAlgorithm(hstring_ref algorithm) { KeyDerivationAlgorithmProvider* provider; hrcheck(get_activation_factory<KeyDerivationAlgorithmProvider, IKeyDerivationAlgorithmProviderStatics>()->_OpenAlgorithm(algorithm, &provider)); return from_abi(provider); }
};

template<typename X> struct statics<KeyDerivationAlgorithmProvider, X> : X, Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider_statics<void> {
	typedef typename X::root_type KeyDerivationAlgorithmProvider;
};
struct KeyDerivationAlgorithmProvider : generate<KeyDerivationAlgorithmProvider> {};

// ISymmetricKeyAlgorithmProviderStatics
struct ISymmetricKeyAlgorithmProviderStatics : IInspectable {
	virtual STDMETHODIMP _OpenAlgorithm(HSTRING algorithm, SymmetricKeyAlgorithmProvider* *provider);
};

// SymmetricKeyAlgorithmProvider
template<typename> struct SymmetricKeyAlgorithmProvider_statics {
	static ptr<SymmetricKeyAlgorithmProvider> OpenAlgorithm(hstring_ref algorithm) { SymmetricKeyAlgorithmProvider* provider; hrcheck(get_activation_factory<SymmetricKeyAlgorithmProvider, ISymmetricKeyAlgorithmProviderStatics>()->_OpenAlgorithm(algorithm, &provider)); return from_abi(provider); }
};

template<typename X> struct statics<SymmetricKeyAlgorithmProvider, X> : X, Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider_statics<void> {
	typedef typename X::root_type SymmetricKeyAlgorithmProvider;
};
struct SymmetricKeyAlgorithmProvider : generate<SymmetricKeyAlgorithmProvider> {};

// IAsymmetricKeyAlgorithmProviderStatics
struct IAsymmetricKeyAlgorithmProviderStatics : IInspectable {
	virtual STDMETHODIMP _OpenAlgorithm(HSTRING algorithm, AsymmetricKeyAlgorithmProvider* *provider);
};

// AsymmetricKeyAlgorithmProvider
template<typename> struct AsymmetricKeyAlgorithmProvider_statics {
	static ptr<AsymmetricKeyAlgorithmProvider> OpenAlgorithm(hstring_ref algorithm) { AsymmetricKeyAlgorithmProvider* provider; hrcheck(get_activation_factory<AsymmetricKeyAlgorithmProvider, IAsymmetricKeyAlgorithmProviderStatics>()->_OpenAlgorithm(algorithm, &provider)); return from_abi(provider); }
};

template<typename X> struct statics<AsymmetricKeyAlgorithmProvider, X> : X, Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider_statics<void> {
	typedef typename X::root_type AsymmetricKeyAlgorithmProvider;
};
struct AsymmetricKeyAlgorithmProvider : generate<AsymmetricKeyAlgorithmProvider> {
	using IAsymmetricKeyAlgorithmProvider::ImportKeyPair;
	using IAsymmetricKeyAlgorithmProvider::ImportPublicKey;
};

// IHashAlgorithmNamesStatics
struct IHashAlgorithmNamesStatics : IInspectable {
	virtual STDMETHODIMP _get_Md5(HSTRING *value);
	virtual STDMETHODIMP _get_Sha1(HSTRING *value);
	virtual STDMETHODIMP _get_Sha256(HSTRING *value);
	virtual STDMETHODIMP _get_Sha384(HSTRING *value);
	virtual STDMETHODIMP _get_Sha512(HSTRING *value);
};

// HashAlgorithmNames
template<typename> struct HashAlgorithmNames_statics {
	static struct _Md5 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<HashAlgorithmNames, IHashAlgorithmNamesStatics>()->_get_Md5(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Md5;
	static struct _Sha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<HashAlgorithmNames, IHashAlgorithmNamesStatics>()->_get_Sha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sha1;
	static struct _Sha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<HashAlgorithmNames, IHashAlgorithmNamesStatics>()->_get_Sha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sha256;
	static struct _Sha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<HashAlgorithmNames, IHashAlgorithmNamesStatics>()->_get_Sha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sha384;
	static struct _Sha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<HashAlgorithmNames, IHashAlgorithmNamesStatics>()->_get_Sha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sha512;
};
template<typename X> typename HashAlgorithmNames_statics<X>::_Md5 HashAlgorithmNames_statics<X>::Md5;
template<typename X> typename HashAlgorithmNames_statics<X>::_Sha1 HashAlgorithmNames_statics<X>::Sha1;
template<typename X> typename HashAlgorithmNames_statics<X>::_Sha256 HashAlgorithmNames_statics<X>::Sha256;
template<typename X> typename HashAlgorithmNames_statics<X>::_Sha384 HashAlgorithmNames_statics<X>::Sha384;
template<typename X> typename HashAlgorithmNames_statics<X>::_Sha512 HashAlgorithmNames_statics<X>::Sha512;

template<typename X> struct statics<HashAlgorithmNames, X> : X, Windows::Security::Cryptography::Core::HashAlgorithmNames_statics<void> {
	typedef typename X::root_type HashAlgorithmNames;
};
struct HashAlgorithmNames : generate<HashAlgorithmNames> {};

// IMacAlgorithmNamesStatics
struct IMacAlgorithmNamesStatics : IInspectable {
	virtual STDMETHODIMP _get_HmacMd5(HSTRING *value);
	virtual STDMETHODIMP _get_HmacSha1(HSTRING *value);
	virtual STDMETHODIMP _get_HmacSha256(HSTRING *value);
	virtual STDMETHODIMP _get_HmacSha384(HSTRING *value);
	virtual STDMETHODIMP _get_HmacSha512(HSTRING *value);
	virtual STDMETHODIMP _get_AesCmac(HSTRING *value);
};

// MacAlgorithmNames
template<typename> struct MacAlgorithmNames_statics {
	static struct _AesCmac : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MacAlgorithmNames, IMacAlgorithmNamesStatics>()->_get_AesCmac(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AesCmac;
	static struct _HmacMd5 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MacAlgorithmNames, IMacAlgorithmNamesStatics>()->_get_HmacMd5(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HmacMd5;
	static struct _HmacSha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MacAlgorithmNames, IMacAlgorithmNamesStatics>()->_get_HmacSha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HmacSha1;
	static struct _HmacSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MacAlgorithmNames, IMacAlgorithmNamesStatics>()->_get_HmacSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HmacSha256;
	static struct _HmacSha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MacAlgorithmNames, IMacAlgorithmNamesStatics>()->_get_HmacSha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HmacSha384;
	static struct _HmacSha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<MacAlgorithmNames, IMacAlgorithmNamesStatics>()->_get_HmacSha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HmacSha512;
};
template<typename X> typename MacAlgorithmNames_statics<X>::_AesCmac MacAlgorithmNames_statics<X>::AesCmac;
template<typename X> typename MacAlgorithmNames_statics<X>::_HmacMd5 MacAlgorithmNames_statics<X>::HmacMd5;
template<typename X> typename MacAlgorithmNames_statics<X>::_HmacSha1 MacAlgorithmNames_statics<X>::HmacSha1;
template<typename X> typename MacAlgorithmNames_statics<X>::_HmacSha256 MacAlgorithmNames_statics<X>::HmacSha256;
template<typename X> typename MacAlgorithmNames_statics<X>::_HmacSha384 MacAlgorithmNames_statics<X>::HmacSha384;
template<typename X> typename MacAlgorithmNames_statics<X>::_HmacSha512 MacAlgorithmNames_statics<X>::HmacSha512;

template<typename X> struct statics<MacAlgorithmNames, X> : X, Windows::Security::Cryptography::Core::MacAlgorithmNames_statics<void> {
	typedef typename X::root_type MacAlgorithmNames;
};
struct MacAlgorithmNames : generate<MacAlgorithmNames> {};

// ISymmetricAlgorithmNamesStatics
struct ISymmetricAlgorithmNamesStatics : IInspectable {
	virtual STDMETHODIMP _get_DesCbc(HSTRING *value);
	virtual STDMETHODIMP _get_DesEcb(HSTRING *value);
	virtual STDMETHODIMP _get_TripleDesCbc(HSTRING *value);
	virtual STDMETHODIMP _get_TripleDesEcb(HSTRING *value);
	virtual STDMETHODIMP _get_Rc2Cbc(HSTRING *value);
	virtual STDMETHODIMP _get_Rc2Ecb(HSTRING *value);
	virtual STDMETHODIMP _get_AesCbc(HSTRING *value);
	virtual STDMETHODIMP _get_AesEcb(HSTRING *value);
	virtual STDMETHODIMP _get_AesGcm(HSTRING *value);
	virtual STDMETHODIMP _get_AesCcm(HSTRING *value);
	virtual STDMETHODIMP _get_AesCbcPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_AesEcbPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_DesCbcPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_DesEcbPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_TripleDesCbcPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_TripleDesEcbPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_Rc2CbcPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_Rc2EcbPkcs7(HSTRING *value);
	virtual STDMETHODIMP _get_Rc4(HSTRING *value);
};

// SymmetricAlgorithmNames
template<typename> struct SymmetricAlgorithmNames_statics {
	static struct _AesCbc : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_AesCbc(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AesCbc;
	static struct _AesCbcPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_AesCbcPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AesCbcPkcs7;
	static struct _AesCcm : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_AesCcm(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AesCcm;
	static struct _AesEcb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_AesEcb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AesEcb;
	static struct _AesEcbPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_AesEcbPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AesEcbPkcs7;
	static struct _AesGcm : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_AesGcm(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AesGcm;
	static struct _DesCbc : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_DesCbc(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DesCbc;
	static struct _DesCbcPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_DesCbcPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DesCbcPkcs7;
	static struct _DesEcb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_DesEcb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DesEcb;
	static struct _DesEcbPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_DesEcbPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DesEcbPkcs7;
	static struct _Rc2Cbc : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_Rc2Cbc(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rc2Cbc;
	static struct _Rc2CbcPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_Rc2CbcPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rc2CbcPkcs7;
	static struct _Rc2Ecb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_Rc2Ecb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rc2Ecb;
	static struct _Rc2EcbPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_Rc2EcbPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rc2EcbPkcs7;
	static struct _Rc4 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_Rc4(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Rc4;
	static struct _TripleDesCbc : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_TripleDesCbc(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TripleDesCbc;
	static struct _TripleDesCbcPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_TripleDesCbcPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TripleDesCbcPkcs7;
	static struct _TripleDesEcb : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_TripleDesEcb(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TripleDesEcb;
	static struct _TripleDesEcbPkcs7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>()->_get_TripleDesEcbPkcs7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TripleDesEcbPkcs7;
};
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_AesCbc SymmetricAlgorithmNames_statics<X>::AesCbc;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_AesCbcPkcs7 SymmetricAlgorithmNames_statics<X>::AesCbcPkcs7;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_AesCcm SymmetricAlgorithmNames_statics<X>::AesCcm;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_AesEcb SymmetricAlgorithmNames_statics<X>::AesEcb;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_AesEcbPkcs7 SymmetricAlgorithmNames_statics<X>::AesEcbPkcs7;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_AesGcm SymmetricAlgorithmNames_statics<X>::AesGcm;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_DesCbc SymmetricAlgorithmNames_statics<X>::DesCbc;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_DesCbcPkcs7 SymmetricAlgorithmNames_statics<X>::DesCbcPkcs7;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_DesEcb SymmetricAlgorithmNames_statics<X>::DesEcb;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_DesEcbPkcs7 SymmetricAlgorithmNames_statics<X>::DesEcbPkcs7;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_Rc2Cbc SymmetricAlgorithmNames_statics<X>::Rc2Cbc;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_Rc2CbcPkcs7 SymmetricAlgorithmNames_statics<X>::Rc2CbcPkcs7;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_Rc2Ecb SymmetricAlgorithmNames_statics<X>::Rc2Ecb;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_Rc2EcbPkcs7 SymmetricAlgorithmNames_statics<X>::Rc2EcbPkcs7;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_Rc4 SymmetricAlgorithmNames_statics<X>::Rc4;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_TripleDesCbc SymmetricAlgorithmNames_statics<X>::TripleDesCbc;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_TripleDesCbcPkcs7 SymmetricAlgorithmNames_statics<X>::TripleDesCbcPkcs7;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_TripleDesEcb SymmetricAlgorithmNames_statics<X>::TripleDesEcb;
template<typename X> typename SymmetricAlgorithmNames_statics<X>::_TripleDesEcbPkcs7 SymmetricAlgorithmNames_statics<X>::TripleDesEcbPkcs7;

template<typename X> struct statics<SymmetricAlgorithmNames, X> : X, Windows::Security::Cryptography::Core::SymmetricAlgorithmNames_statics<void> {
	typedef typename X::root_type SymmetricAlgorithmNames;
};
struct SymmetricAlgorithmNames : generate<SymmetricAlgorithmNames> {};

// IAsymmetricAlgorithmNamesStatics
struct IAsymmetricAlgorithmNamesStatics : IInspectable {
	virtual STDMETHODIMP _get_RsaPkcs1(HSTRING *value);
	virtual STDMETHODIMP _get_RsaOaepSha1(HSTRING *value);
	virtual STDMETHODIMP _get_RsaOaepSha256(HSTRING *value);
	virtual STDMETHODIMP _get_RsaOaepSha384(HSTRING *value);
	virtual STDMETHODIMP _get_RsaOaepSha512(HSTRING *value);
	virtual STDMETHODIMP _get_EcdsaP256Sha256(HSTRING *value);
	virtual STDMETHODIMP _get_EcdsaP384Sha384(HSTRING *value);
	virtual STDMETHODIMP _get_EcdsaP521Sha512(HSTRING *value);
	virtual STDMETHODIMP _get_DsaSha1(HSTRING *value);
	virtual STDMETHODIMP _get_DsaSha256(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPkcs1Sha1(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPkcs1Sha256(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPkcs1Sha384(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPkcs1Sha512(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPssSha1(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPssSha256(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPssSha384(HSTRING *value);
	virtual STDMETHODIMP _get_RsaSignPssSha512(HSTRING *value);
};

// IAsymmetricAlgorithmNamesStatics2
struct IAsymmetricAlgorithmNamesStatics2 : IInspectable {
	virtual STDMETHODIMP _get_EcdsaSha256(HSTRING *value);
	virtual STDMETHODIMP _get_EcdsaSha384(HSTRING *value);
	virtual STDMETHODIMP _get_EcdsaSha512(HSTRING *value);
};

// AsymmetricAlgorithmNames
template<typename> struct AsymmetricAlgorithmNames_statics {
	static struct _DsaSha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_DsaSha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DsaSha1;
	static struct _DsaSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_DsaSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DsaSha256;
	static struct _EcdsaP256Sha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_EcdsaP256Sha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EcdsaP256Sha256;
	static struct _EcdsaP384Sha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_EcdsaP384Sha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EcdsaP384Sha384;
	static struct _EcdsaP521Sha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_EcdsaP521Sha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EcdsaP521Sha512;
	static struct _RsaOaepSha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaOaepSha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaOaepSha1;
	static struct _RsaOaepSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaOaepSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaOaepSha256;
	static struct _RsaOaepSha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaOaepSha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaOaepSha384;
	static struct _RsaOaepSha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaOaepSha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaOaepSha512;
	static struct _RsaPkcs1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaPkcs1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaPkcs1;
	static struct _RsaSignPkcs1Sha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPkcs1Sha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPkcs1Sha1;
	static struct _RsaSignPkcs1Sha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPkcs1Sha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPkcs1Sha256;
	static struct _RsaSignPkcs1Sha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPkcs1Sha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPkcs1Sha384;
	static struct _RsaSignPkcs1Sha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPkcs1Sha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPkcs1Sha512;
	static struct _RsaSignPssSha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPssSha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPssSha1;
	static struct _RsaSignPssSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPssSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPssSha256;
	static struct _RsaSignPssSha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPssSha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPssSha384;
	static struct _RsaSignPssSha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>()->_get_RsaSignPssSha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RsaSignPssSha512;
	static struct _EcdsaSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>()->_get_EcdsaSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EcdsaSha256;
	static struct _EcdsaSha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>()->_get_EcdsaSha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EcdsaSha384;
	static struct _EcdsaSha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>()->_get_EcdsaSha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EcdsaSha512;
};
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_DsaSha1 AsymmetricAlgorithmNames_statics<X>::DsaSha1;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_DsaSha256 AsymmetricAlgorithmNames_statics<X>::DsaSha256;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_EcdsaP256Sha256 AsymmetricAlgorithmNames_statics<X>::EcdsaP256Sha256;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_EcdsaP384Sha384 AsymmetricAlgorithmNames_statics<X>::EcdsaP384Sha384;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_EcdsaP521Sha512 AsymmetricAlgorithmNames_statics<X>::EcdsaP521Sha512;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaOaepSha1 AsymmetricAlgorithmNames_statics<X>::RsaOaepSha1;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaOaepSha256 AsymmetricAlgorithmNames_statics<X>::RsaOaepSha256;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaOaepSha384 AsymmetricAlgorithmNames_statics<X>::RsaOaepSha384;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaOaepSha512 AsymmetricAlgorithmNames_statics<X>::RsaOaepSha512;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaPkcs1 AsymmetricAlgorithmNames_statics<X>::RsaPkcs1;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPkcs1Sha1 AsymmetricAlgorithmNames_statics<X>::RsaSignPkcs1Sha1;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPkcs1Sha256 AsymmetricAlgorithmNames_statics<X>::RsaSignPkcs1Sha256;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPkcs1Sha384 AsymmetricAlgorithmNames_statics<X>::RsaSignPkcs1Sha384;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPkcs1Sha512 AsymmetricAlgorithmNames_statics<X>::RsaSignPkcs1Sha512;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPssSha1 AsymmetricAlgorithmNames_statics<X>::RsaSignPssSha1;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPssSha256 AsymmetricAlgorithmNames_statics<X>::RsaSignPssSha256;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPssSha384 AsymmetricAlgorithmNames_statics<X>::RsaSignPssSha384;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_RsaSignPssSha512 AsymmetricAlgorithmNames_statics<X>::RsaSignPssSha512;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_EcdsaSha256 AsymmetricAlgorithmNames_statics<X>::EcdsaSha256;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_EcdsaSha384 AsymmetricAlgorithmNames_statics<X>::EcdsaSha384;
template<typename X> typename AsymmetricAlgorithmNames_statics<X>::_EcdsaSha512 AsymmetricAlgorithmNames_statics<X>::EcdsaSha512;

template<typename X> struct statics<AsymmetricAlgorithmNames, X> : X, Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames_statics<void> {
	typedef typename X::root_type AsymmetricAlgorithmNames;
};
struct AsymmetricAlgorithmNames : generate<AsymmetricAlgorithmNames> {};

// IEccCurveNamesStatics
struct IEccCurveNamesStatics : IInspectable {
	virtual STDMETHODIMP _get_BrainpoolP160r1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP160t1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP192r1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP192t1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP224r1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP224t1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP256r1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP256t1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP320r1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP320t1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP384r1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP384t1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP512r1(HSTRING *value);
	virtual STDMETHODIMP _get_BrainpoolP512t1(HSTRING *value);
	virtual STDMETHODIMP _get_Curve25519(HSTRING *value);
	virtual STDMETHODIMP _get_Ec192wapi(HSTRING *value);
	virtual STDMETHODIMP _get_NistP192(HSTRING *value);
	virtual STDMETHODIMP _get_NistP224(HSTRING *value);
	virtual STDMETHODIMP _get_NistP256(HSTRING *value);
	virtual STDMETHODIMP _get_NistP384(HSTRING *value);
	virtual STDMETHODIMP _get_NistP521(HSTRING *value);
	virtual STDMETHODIMP _get_NumsP256t1(HSTRING *value);
	virtual STDMETHODIMP _get_NumsP384t1(HSTRING *value);
	virtual STDMETHODIMP _get_NumsP512t1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP160k1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP160r1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP160r2(HSTRING *value);
	virtual STDMETHODIMP _get_SecP192k1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP192r1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP224k1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP224r1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP256k1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP256r1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP384r1(HSTRING *value);
	virtual STDMETHODIMP _get_SecP521r1(HSTRING *value);
	virtual STDMETHODIMP _get_Wtls7(HSTRING *value);
	virtual STDMETHODIMP _get_Wtls9(HSTRING *value);
	virtual STDMETHODIMP _get_Wtls12(HSTRING *value);
	virtual STDMETHODIMP _get_X962P192v1(HSTRING *value);
	virtual STDMETHODIMP _get_X962P192v2(HSTRING *value);
	virtual STDMETHODIMP _get_X962P192v3(HSTRING *value);
	virtual STDMETHODIMP _get_X962P239v1(HSTRING *value);
	virtual STDMETHODIMP _get_X962P239v2(HSTRING *value);
	virtual STDMETHODIMP _get_X962P239v3(HSTRING *value);
	virtual STDMETHODIMP _get_X962P256v1(HSTRING *value);
	virtual STDMETHODIMP _get_AllEccCurveNames(Foundation::Collections::IVectorView<HSTRING>* *value);
};

// EccCurveNames
template<typename> struct EccCurveNames_statics {
	static struct _AllEccCurveNames : property {
		ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_AllEccCurveNames(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
		ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
	} AllEccCurveNames;
	static struct _BrainpoolP160r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP160r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP160r1;
	static struct _BrainpoolP160t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP160t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP160t1;
	static struct _BrainpoolP192r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP192r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP192r1;
	static struct _BrainpoolP192t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP192t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP192t1;
	static struct _BrainpoolP224r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP224r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP224r1;
	static struct _BrainpoolP224t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP224t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP224t1;
	static struct _BrainpoolP256r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP256r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP256r1;
	static struct _BrainpoolP256t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP256t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP256t1;
	static struct _BrainpoolP320r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP320r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP320r1;
	static struct _BrainpoolP320t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP320t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP320t1;
	static struct _BrainpoolP384r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP384r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP384r1;
	static struct _BrainpoolP384t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP384t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP384t1;
	static struct _BrainpoolP512r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP512r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP512r1;
	static struct _BrainpoolP512t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_BrainpoolP512t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BrainpoolP512t1;
	static struct _Curve25519 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_Curve25519(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Curve25519;
	static struct _Ec192wapi : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_Ec192wapi(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Ec192wapi;
	static struct _NistP192 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NistP192(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NistP192;
	static struct _NistP224 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NistP224(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NistP224;
	static struct _NistP256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NistP256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NistP256;
	static struct _NistP384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NistP384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NistP384;
	static struct _NistP521 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NistP521(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NistP521;
	static struct _NumsP256t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NumsP256t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NumsP256t1;
	static struct _NumsP384t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NumsP384t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NumsP384t1;
	static struct _NumsP512t1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_NumsP512t1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} NumsP512t1;
	static struct _SecP160k1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP160k1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP160k1;
	static struct _SecP160r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP160r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP160r1;
	static struct _SecP160r2 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP160r2(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP160r2;
	static struct _SecP192k1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP192k1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP192k1;
	static struct _SecP192r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP192r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP192r1;
	static struct _SecP224k1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP224k1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP224k1;
	static struct _SecP224r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP224r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP224r1;
	static struct _SecP256k1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP256k1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP256k1;
	static struct _SecP256r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP256r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP256r1;
	static struct _SecP384r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP384r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP384r1;
	static struct _SecP521r1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_SecP521r1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SecP521r1;
	static struct _Wtls12 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_Wtls12(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wtls12;
	static struct _Wtls7 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_Wtls7(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wtls7;
	static struct _Wtls9 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_Wtls9(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Wtls9;
	static struct _X962P192v1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_X962P192v1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} X962P192v1;
	static struct _X962P192v2 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_X962P192v2(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} X962P192v2;
	static struct _X962P192v3 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_X962P192v3(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} X962P192v3;
	static struct _X962P239v1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_X962P239v1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} X962P239v1;
	static struct _X962P239v2 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_X962P239v2(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} X962P239v2;
	static struct _X962P239v3 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_X962P239v3(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} X962P239v3;
	static struct _X962P256v1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<EccCurveNames, IEccCurveNamesStatics>()->_get_X962P256v1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} X962P256v1;
};
template<typename X> typename EccCurveNames_statics<X>::_AllEccCurveNames EccCurveNames_statics<X>::AllEccCurveNames;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP160r1 EccCurveNames_statics<X>::BrainpoolP160r1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP160t1 EccCurveNames_statics<X>::BrainpoolP160t1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP192r1 EccCurveNames_statics<X>::BrainpoolP192r1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP192t1 EccCurveNames_statics<X>::BrainpoolP192t1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP224r1 EccCurveNames_statics<X>::BrainpoolP224r1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP224t1 EccCurveNames_statics<X>::BrainpoolP224t1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP256r1 EccCurveNames_statics<X>::BrainpoolP256r1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP256t1 EccCurveNames_statics<X>::BrainpoolP256t1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP320r1 EccCurveNames_statics<X>::BrainpoolP320r1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP320t1 EccCurveNames_statics<X>::BrainpoolP320t1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP384r1 EccCurveNames_statics<X>::BrainpoolP384r1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP384t1 EccCurveNames_statics<X>::BrainpoolP384t1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP512r1 EccCurveNames_statics<X>::BrainpoolP512r1;
template<typename X> typename EccCurveNames_statics<X>::_BrainpoolP512t1 EccCurveNames_statics<X>::BrainpoolP512t1;
template<typename X> typename EccCurveNames_statics<X>::_Curve25519 EccCurveNames_statics<X>::Curve25519;
template<typename X> typename EccCurveNames_statics<X>::_Ec192wapi EccCurveNames_statics<X>::Ec192wapi;
template<typename X> typename EccCurveNames_statics<X>::_NistP192 EccCurveNames_statics<X>::NistP192;
template<typename X> typename EccCurveNames_statics<X>::_NistP224 EccCurveNames_statics<X>::NistP224;
template<typename X> typename EccCurveNames_statics<X>::_NistP256 EccCurveNames_statics<X>::NistP256;
template<typename X> typename EccCurveNames_statics<X>::_NistP384 EccCurveNames_statics<X>::NistP384;
template<typename X> typename EccCurveNames_statics<X>::_NistP521 EccCurveNames_statics<X>::NistP521;
template<typename X> typename EccCurveNames_statics<X>::_NumsP256t1 EccCurveNames_statics<X>::NumsP256t1;
template<typename X> typename EccCurveNames_statics<X>::_NumsP384t1 EccCurveNames_statics<X>::NumsP384t1;
template<typename X> typename EccCurveNames_statics<X>::_NumsP512t1 EccCurveNames_statics<X>::NumsP512t1;
template<typename X> typename EccCurveNames_statics<X>::_SecP160k1 EccCurveNames_statics<X>::SecP160k1;
template<typename X> typename EccCurveNames_statics<X>::_SecP160r1 EccCurveNames_statics<X>::SecP160r1;
template<typename X> typename EccCurveNames_statics<X>::_SecP160r2 EccCurveNames_statics<X>::SecP160r2;
template<typename X> typename EccCurveNames_statics<X>::_SecP192k1 EccCurveNames_statics<X>::SecP192k1;
template<typename X> typename EccCurveNames_statics<X>::_SecP192r1 EccCurveNames_statics<X>::SecP192r1;
template<typename X> typename EccCurveNames_statics<X>::_SecP224k1 EccCurveNames_statics<X>::SecP224k1;
template<typename X> typename EccCurveNames_statics<X>::_SecP224r1 EccCurveNames_statics<X>::SecP224r1;
template<typename X> typename EccCurveNames_statics<X>::_SecP256k1 EccCurveNames_statics<X>::SecP256k1;
template<typename X> typename EccCurveNames_statics<X>::_SecP256r1 EccCurveNames_statics<X>::SecP256r1;
template<typename X> typename EccCurveNames_statics<X>::_SecP384r1 EccCurveNames_statics<X>::SecP384r1;
template<typename X> typename EccCurveNames_statics<X>::_SecP521r1 EccCurveNames_statics<X>::SecP521r1;
template<typename X> typename EccCurveNames_statics<X>::_Wtls12 EccCurveNames_statics<X>::Wtls12;
template<typename X> typename EccCurveNames_statics<X>::_Wtls7 EccCurveNames_statics<X>::Wtls7;
template<typename X> typename EccCurveNames_statics<X>::_Wtls9 EccCurveNames_statics<X>::Wtls9;
template<typename X> typename EccCurveNames_statics<X>::_X962P192v1 EccCurveNames_statics<X>::X962P192v1;
template<typename X> typename EccCurveNames_statics<X>::_X962P192v2 EccCurveNames_statics<X>::X962P192v2;
template<typename X> typename EccCurveNames_statics<X>::_X962P192v3 EccCurveNames_statics<X>::X962P192v3;
template<typename X> typename EccCurveNames_statics<X>::_X962P239v1 EccCurveNames_statics<X>::X962P239v1;
template<typename X> typename EccCurveNames_statics<X>::_X962P239v2 EccCurveNames_statics<X>::X962P239v2;
template<typename X> typename EccCurveNames_statics<X>::_X962P239v3 EccCurveNames_statics<X>::X962P239v3;
template<typename X> typename EccCurveNames_statics<X>::_X962P256v1 EccCurveNames_statics<X>::X962P256v1;

template<typename X> struct statics<EccCurveNames, X> : X, Windows::Security::Cryptography::Core::EccCurveNames_statics<void> {
	typedef typename X::root_type EccCurveNames;
};
struct EccCurveNames : generate<EccCurveNames> {};

// IKeyDerivationAlgorithmNamesStatics
struct IKeyDerivationAlgorithmNamesStatics : IInspectable {
	virtual STDMETHODIMP _get_Pbkdf2Md5(HSTRING *value);
	virtual STDMETHODIMP _get_Pbkdf2Sha1(HSTRING *value);
	virtual STDMETHODIMP _get_Pbkdf2Sha256(HSTRING *value);
	virtual STDMETHODIMP _get_Pbkdf2Sha384(HSTRING *value);
	virtual STDMETHODIMP _get_Pbkdf2Sha512(HSTRING *value);
	virtual STDMETHODIMP _get_Sp800108CtrHmacMd5(HSTRING *value);
	virtual STDMETHODIMP _get_Sp800108CtrHmacSha1(HSTRING *value);
	virtual STDMETHODIMP _get_Sp800108CtrHmacSha256(HSTRING *value);
	virtual STDMETHODIMP _get_Sp800108CtrHmacSha384(HSTRING *value);
	virtual STDMETHODIMP _get_Sp800108CtrHmacSha512(HSTRING *value);
	virtual STDMETHODIMP _get_Sp80056aConcatMd5(HSTRING *value);
	virtual STDMETHODIMP _get_Sp80056aConcatSha1(HSTRING *value);
	virtual STDMETHODIMP _get_Sp80056aConcatSha256(HSTRING *value);
	virtual STDMETHODIMP _get_Sp80056aConcatSha384(HSTRING *value);
	virtual STDMETHODIMP _get_Sp80056aConcatSha512(HSTRING *value);
};

// IKeyDerivationAlgorithmNamesStatics2
struct IKeyDerivationAlgorithmNamesStatics2 : IInspectable {
	virtual STDMETHODIMP _get_CapiKdfMd5(HSTRING *value);
	virtual STDMETHODIMP _get_CapiKdfSha1(HSTRING *value);
	virtual STDMETHODIMP _get_CapiKdfSha256(HSTRING *value);
	virtual STDMETHODIMP _get_CapiKdfSha384(HSTRING *value);
	virtual STDMETHODIMP _get_CapiKdfSha512(HSTRING *value);
};

// KeyDerivationAlgorithmNames
template<typename> struct KeyDerivationAlgorithmNames_statics {
	static struct _Pbkdf2Md5 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Pbkdf2Md5(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Pbkdf2Md5;
	static struct _Pbkdf2Sha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Pbkdf2Sha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Pbkdf2Sha1;
	static struct _Pbkdf2Sha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Pbkdf2Sha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Pbkdf2Sha256;
	static struct _Pbkdf2Sha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Pbkdf2Sha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Pbkdf2Sha384;
	static struct _Pbkdf2Sha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Pbkdf2Sha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Pbkdf2Sha512;
	static struct _Sp800108CtrHmacMd5 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp800108CtrHmacMd5(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp800108CtrHmacMd5;
	static struct _Sp800108CtrHmacSha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp800108CtrHmacSha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp800108CtrHmacSha1;
	static struct _Sp800108CtrHmacSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp800108CtrHmacSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp800108CtrHmacSha256;
	static struct _Sp800108CtrHmacSha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp800108CtrHmacSha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp800108CtrHmacSha384;
	static struct _Sp800108CtrHmacSha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp800108CtrHmacSha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp800108CtrHmacSha512;
	static struct _Sp80056aConcatMd5 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp80056aConcatMd5(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp80056aConcatMd5;
	static struct _Sp80056aConcatSha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp80056aConcatSha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp80056aConcatSha1;
	static struct _Sp80056aConcatSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp80056aConcatSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp80056aConcatSha256;
	static struct _Sp80056aConcatSha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp80056aConcatSha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp80056aConcatSha384;
	static struct _Sp80056aConcatSha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>()->_get_Sp80056aConcatSha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sp80056aConcatSha512;
	static struct _CapiKdfMd5 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>()->_get_CapiKdfMd5(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CapiKdfMd5;
	static struct _CapiKdfSha1 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>()->_get_CapiKdfSha1(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CapiKdfSha1;
	static struct _CapiKdfSha256 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>()->_get_CapiKdfSha256(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CapiKdfSha256;
	static struct _CapiKdfSha384 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>()->_get_CapiKdfSha384(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CapiKdfSha384;
	static struct _CapiKdfSha512 : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>()->_get_CapiKdfSha512(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CapiKdfSha512;
};
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Pbkdf2Md5 KeyDerivationAlgorithmNames_statics<X>::Pbkdf2Md5;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Pbkdf2Sha1 KeyDerivationAlgorithmNames_statics<X>::Pbkdf2Sha1;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Pbkdf2Sha256 KeyDerivationAlgorithmNames_statics<X>::Pbkdf2Sha256;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Pbkdf2Sha384 KeyDerivationAlgorithmNames_statics<X>::Pbkdf2Sha384;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Pbkdf2Sha512 KeyDerivationAlgorithmNames_statics<X>::Pbkdf2Sha512;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp800108CtrHmacMd5 KeyDerivationAlgorithmNames_statics<X>::Sp800108CtrHmacMd5;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp800108CtrHmacSha1 KeyDerivationAlgorithmNames_statics<X>::Sp800108CtrHmacSha1;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp800108CtrHmacSha256 KeyDerivationAlgorithmNames_statics<X>::Sp800108CtrHmacSha256;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp800108CtrHmacSha384 KeyDerivationAlgorithmNames_statics<X>::Sp800108CtrHmacSha384;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp800108CtrHmacSha512 KeyDerivationAlgorithmNames_statics<X>::Sp800108CtrHmacSha512;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp80056aConcatMd5 KeyDerivationAlgorithmNames_statics<X>::Sp80056aConcatMd5;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp80056aConcatSha1 KeyDerivationAlgorithmNames_statics<X>::Sp80056aConcatSha1;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp80056aConcatSha256 KeyDerivationAlgorithmNames_statics<X>::Sp80056aConcatSha256;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp80056aConcatSha384 KeyDerivationAlgorithmNames_statics<X>::Sp80056aConcatSha384;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_Sp80056aConcatSha512 KeyDerivationAlgorithmNames_statics<X>::Sp80056aConcatSha512;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_CapiKdfMd5 KeyDerivationAlgorithmNames_statics<X>::CapiKdfMd5;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_CapiKdfSha1 KeyDerivationAlgorithmNames_statics<X>::CapiKdfSha1;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_CapiKdfSha256 KeyDerivationAlgorithmNames_statics<X>::CapiKdfSha256;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_CapiKdfSha384 KeyDerivationAlgorithmNames_statics<X>::CapiKdfSha384;
template<typename X> typename KeyDerivationAlgorithmNames_statics<X>::_CapiKdfSha512 KeyDerivationAlgorithmNames_statics<X>::CapiKdfSha512;

template<typename X> struct statics<KeyDerivationAlgorithmNames, X> : X, Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames_statics<void> {
	typedef typename X::root_type KeyDerivationAlgorithmNames;
};
struct KeyDerivationAlgorithmNames : generate<KeyDerivationAlgorithmNames> {};
}}}}
} // namespace iso_winrt
