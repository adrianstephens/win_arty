#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Appointments

#include "Windows.ApplicationModel.Appointments.0.h"
#include "Windows.UI.Popups.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentDetailsKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentParticipantResponse> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentSensitivity> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentBusyStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointment> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointment2> : interface_type<Windows::ApplicationModel::Appointments::IAppointment> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointment3> : interface_type<Windows::ApplicationModel::Appointments::IAppointment2> {};
template<> struct def<Windows::ApplicationModel::Appointments::Appointment> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointment, Windows::ApplicationModel::Appointments::IAppointment3> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreAccessType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::FindAppointmentCalendarsOptions> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStore3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStore2> : interface_type<Windows::ApplicationModel::Appointments::IAppointmentStore> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStore> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentStore, Windows::ApplicationModel::Appointments::IAppointmentStore2, Windows::ApplicationModel::Appointments::IAppointmentStore3> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentManagerForUser> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentManagerForUser> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentManagerForUser> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentParticipantRole> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentParticipant> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentOrganizer> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentParticipant> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentInvitee> : interface_type<Windows::ApplicationModel::Appointments::IAppointmentParticipant> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentInvitee> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentInvitee> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentRecurrence> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::RecurrenceType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentRecurrence2> : interface_type<Windows::ApplicationModel::Appointments::IAppointmentRecurrence> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentRecurrence3> : interface_type<Windows::ApplicationModel::Appointments::IAppointmentRecurrence2> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentRecurrence> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentRecurrence, Windows::ApplicationModel::Appointments::IAppointmentRecurrence3> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Appointments::IFindAppointmentsOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentSummaryCardView> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentCalendar> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::FindAppointmentsOptions> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IFindAppointmentsOptions> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentException> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentException> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentException> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentCalendar2> : interface_type<Windows::ApplicationModel::Appointments::IAppointmentCalendar> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager, Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager2> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentCalendar3> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics2> : interface_type<Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentConflictType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentConflictResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreChangeType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreChange> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreChange2> : interface_type<Windows::ApplicationModel::Appointments::IAppointmentStoreChange> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentCalendar> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentCalendar, Windows::ApplicationModel::Appointments::IAppointmentCalendar2, Windows::ApplicationModel::Appointments::IAppointmentCalendar3> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreChange> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentStoreChange, Windows::ApplicationModel::Appointments::IAppointmentStoreChange2> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral> {};
template<> struct def<Windows::ApplicationModel::Appointments::IAppointmentStoreNotificationTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker, Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker2> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentConflictResult> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentConflictResult> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Appointments::AppointmentStoreNotificationTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::IAppointmentStoreNotificationTriggerDetails> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics> { define_guid(0x3A30FA01, 0x5C40, 0x499D, 0xB3, 0x3F, 0xA4, 0x30, 0x50, 0xF7, 0x4F, 0xC4);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointment> { define_guid(0xDD002F2F, 0x2BDD, 0x4076, 0x90, 0xA3, 0x22, 0xC2, 0x75, 0x31, 0x29, 0x65);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointment2> { define_guid(0x5E85983C, 0x540F, 0x3452, 0x9B, 0x5C, 0xD, 0xD7, 0xAD, 0x4C, 0x65, 0xA2);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointment3> { define_guid(0xBFCC45A9, 0x8961, 0x4991, 0x93, 0x4B, 0xC4, 0x87, 0x68, 0xE5, 0xA9, 0x6C);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics2> { define_guid(0xA81F60D, 0xD04F, 0x4034, 0xAF, 0x72, 0xA3, 0x65, 0x73, 0xB4, 0x5F, 0xF0);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStore3> { define_guid(0x4251940B, 0xB078, 0x470A, 0x9A, 0x40, 0xC2, 0xE0, 0x17, 0x61, 0xF7, 0x2F);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStore> { define_guid(0xA461918C, 0x7A47, 0x4D96, 0x96, 0xC9, 0x15, 0xCD, 0x8A, 0x5, 0xA7, 0x35);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStore2> { define_guid(0x25C48C20, 0x1C41, 0x424F, 0x80, 0x84, 0x67, 0xC1, 0xCF, 0xE0, 0xA8, 0x54);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics3> { define_guid(0x2F9AE09C, 0xB34C, 0x4DC7, 0xA3, 0x5D, 0xCA, 0xFD, 0x88, 0xAE, 0x3E, 0xC6);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentManagerForUser> { define_guid(0x70261423, 0x73CC, 0x4660, 0xB3, 0x18, 0xB0, 0x13, 0x65, 0x30, 0x2A, 0x3);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentParticipant> { define_guid(0x615E2902, 0x9718, 0x467B, 0x83, 0xFB, 0xB2, 0x93, 0xA1, 0x91, 0x21, 0xDE);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentInvitee> { define_guid(0x13BF0796, 0x9842, 0x495B, 0xB0, 0xE7, 0xEF, 0x8F, 0x79, 0xC0, 0x70, 0x1D);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentRecurrence> { define_guid(0xD87B3E83, 0x15A6, 0x487B, 0xB9, 0x59, 0xC, 0x36, 0x1E, 0x60, 0xE9, 0x54);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentRecurrence2> { define_guid(0x3DF3A2E0, 0x5A7, 0x4F50, 0x9F, 0x86, 0xB0, 0x3F, 0x94, 0x36, 0x25, 0x4D);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentRecurrence3> { define_guid(0x89FF96D9, 0xDA4D, 0x4A17, 0x8D, 0xD2, 0x1C, 0xEB, 0xC2, 0xB5, 0xFF, 0x9D);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IFindAppointmentsOptions> { define_guid(0x55F7DC55, 0x9942, 0x3086, 0x82, 0xB5, 0x2C, 0xB2, 0x9F, 0x64, 0xD5, 0xF5);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentCalendar> { define_guid(0x5273819D, 0x8339, 0x3D4F, 0xA0, 0x2F, 0x64, 0x8, 0x44, 0x52, 0xBB, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentException> { define_guid(0xA2076767, 0x16F6, 0x4BCE, 0x9F, 0x5A, 0x86, 0x0, 0xB8, 0x1, 0x9F, 0xCB);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentCalendar2> { define_guid(0x18E7E422, 0x2467, 0x4E1C, 0xA4, 0x59, 0xD8, 0xA2, 0x93, 0x3, 0xD0, 0x92);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager2> { define_guid(0x647528AD, 0xD29, 0x4C7C, 0xAA, 0xA7, 0xBF, 0x99, 0x68, 0x5, 0x53, 0x7C);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager> { define_guid(0x2B21B3A0, 0x4AFF, 0x4392, 0xBC, 0x5F, 0x56, 0x45, 0xFF, 0xCF, 0xFB, 0x17);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentCalendar3> { define_guid(0xEB23D22B, 0xA685, 0x42AE, 0x84, 0x95, 0xB3, 0x11, 0x9A, 0xDB, 0x41, 0x67);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics> { define_guid(0x25141FE9, 0x68AE, 0x3AAE, 0x85, 0x5F, 0xBC, 0x44, 0x41, 0xCA, 0xA2, 0x34);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics2> { define_guid(0xDFFC434B, 0xB017, 0x45DD, 0x8A, 0xF5, 0xD1, 0x63, 0xD1, 0x8, 0x1, 0xBB);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentConflictResult> { define_guid(0xD5CDF0BE, 0x2F2F, 0x3B7D, 0xAF, 0xA, 0xA7, 0xE2, 0xF, 0x3A, 0x46, 0xE3);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreChange> { define_guid(0xA5A6E035, 0xA33, 0x3654, 0x84, 0x63, 0xB5, 0x43, 0xE9, 0xC, 0x3B, 0x79);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreChange2> { define_guid(0xB37D0DCE, 0x5211, 0x4402, 0xA6, 0x8, 0xA9, 0x6F, 0xE7, 0xB, 0x8E, 0xE2);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader> { define_guid(0x8B2409F1, 0x65F3, 0x42A0, 0x96, 0x1D, 0x4C, 0x20, 0x9B, 0xF3, 0x3, 0x70);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker> { define_guid(0x1B25F4B1, 0x8ECE, 0x4F17, 0x93, 0xC8, 0xE6, 0x41, 0x24, 0x58, 0xFD, 0x5C);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker2> { define_guid(0xB66AAF45, 0x9542, 0x4CF7, 0x85, 0x50, 0xEB, 0x37, 0xE, 0xC, 0x8, 0xD3);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs> { define_guid(0x2285F8B9, 0x791, 0x417E, 0xBF, 0xEA, 0xCC, 0x6D, 0x41, 0x63, 0x6C, 0x8C);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral> { define_guid(0x4CB82026, 0xFEDB, 0x4BC3, 0x96, 0x62, 0x95, 0xA9, 0xBE, 0xFD, 0xF4, 0xDF);};
template<> struct uuid<Windows::ApplicationModel::Appointments::IAppointmentStoreNotificationTriggerDetails> { define_guid(0x9B33CB11, 0xC301, 0x421E, 0xAF, 0xEF, 0x4, 0x7E, 0xCF, 0xA7, 0x6A, 0xDB);};

// types

namespace Windows { namespace ApplicationModel { namespace Appointments {

// IAppointmentManagerStatics
struct IAppointmentManagerStatics : IInspectable {
	virtual STDMETHODIMP _ShowAddAppointmentAsync(Appointment* appointment, Foundation::Rect selection, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowAddAppointmentWithPlacementAsync(Appointment* appointment, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowReplaceAppointmentAsync(HSTRING appointmentId, Appointment* appointment, Foundation::Rect selection, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowReplaceAppointmentWithPlacementAsync(HSTRING appointmentId, Appointment* appointment, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowReplaceAppointmentWithPlacementAndDateAsync(HSTRING appointmentId, Appointment* appointment, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::DateTime instanceStartDate, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowRemoveAppointmentAsync(HSTRING appointmentId, Foundation::Rect selection, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _ShowRemoveAppointmentWithPlacementAsync(HSTRING appointmentId, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _ShowRemoveAppointmentWithPlacementAndDateAsync(HSTRING appointmentId, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::DateTime instanceStartDate, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _ShowTimeFrameAsync(Foundation::DateTime timeToShow, Foundation::TimeSpan duration, Foundation::IAsyncAction* *asyncAction);
};

// IAppointment
struct IAppointment_raw : IInspectable {
	virtual STDMETHODIMP _get_StartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_StartTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_Duration(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_Location(HSTRING *value);
	virtual STDMETHODIMP _put_Location(HSTRING value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _put_Subject(HSTRING value);
	virtual STDMETHODIMP _get_Details(HSTRING *value);
	virtual STDMETHODIMP _put_Details(HSTRING value);
	virtual STDMETHODIMP _get_Reminder(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_Reminder(Foundation::IReference<Foundation::TimeSpan>* value);
	virtual STDMETHODIMP _get_Organizer(AppointmentOrganizer* *value);
	virtual STDMETHODIMP _put_Organizer(AppointmentOrganizer* value);
	virtual STDMETHODIMP _get_Invitees(Foundation::Collections::IVector<AppointmentInvitee*>* *value);
	virtual STDMETHODIMP _get_Recurrence(AppointmentRecurrence* *value);
	virtual STDMETHODIMP _put_Recurrence(AppointmentRecurrence* value);
	virtual STDMETHODIMP _get_BusyStatus(AppointmentBusyStatus *value);
	virtual STDMETHODIMP _put_BusyStatus(AppointmentBusyStatus value);
	virtual STDMETHODIMP _get_AllDay(bool *value);
	virtual STDMETHODIMP _put_AllDay(bool value);
	virtual STDMETHODIMP _get_Sensitivity(AppointmentSensitivity *value);
	virtual STDMETHODIMP _put_Sensitivity(AppointmentSensitivity value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* value);
};
template<typename X> struct IAppointment_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointment_adaptor::AllDay)->_get_AllDay(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointment_adaptor::AllDay)->_put_AllDay(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllDay;
		struct : property {
			AppointmentBusyStatus get() { AppointmentBusyStatus value; hrcheck(enc(&IAppointment_adaptor::BusyStatus)->_get_BusyStatus(&value)); return value; }
			AppointmentBusyStatus operator()() { return get(); }
			operator AppointmentBusyStatus () { return get(); }
			void put(AppointmentBusyStatus value) { hrcheck(enc(&IAppointment_adaptor::BusyStatus)->_put_BusyStatus(value)); }
			void operator=(AppointmentBusyStatus value) { put(value); }
			void operator()(AppointmentBusyStatus value) { put(value); }
		} BusyStatus;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointment_adaptor::Details)->_get_Details(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointment_adaptor::Details)->_put_Details(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Details;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppointment_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IAppointment_adaptor::Duration)->_put_Duration(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} Duration;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<AppointmentInvitee>>> get() { Foundation::Collections::IVector<AppointmentInvitee*>* value; hrcheck(enc(&IAppointment_adaptor::Invitees)->_get_Invitees(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<AppointmentInvitee>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<AppointmentInvitee>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<AppointmentInvitee>>> operator->() { return get(); }
		} Invitees;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointment_adaptor::Location)->_get_Location(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointment_adaptor::Location)->_put_Location(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Location;
		struct : property {
			ptr<AppointmentOrganizer> get() { AppointmentOrganizer* value; hrcheck(enc(&IAppointment_adaptor::Organizer)->_get_Organizer(&value)); return from_abi(value); }
			ptr<AppointmentOrganizer> operator()() { return get(); }
			operator ptr<AppointmentOrganizer> () { return get(); }
			ptr<AppointmentOrganizer> operator->() { return get(); }
			void put(pptr<AppointmentOrganizer> value) { hrcheck(enc(&IAppointment_adaptor::Organizer)->_put_Organizer(value)); }
			void operator=(pptr<AppointmentOrganizer> value) { put(value); }
			void operator()(pptr<AppointmentOrganizer> value) { put(value); }
		} Organizer;
		struct : property {
			ptr<AppointmentRecurrence> get() { AppointmentRecurrence* value; hrcheck(enc(&IAppointment_adaptor::Recurrence)->_get_Recurrence(&value)); return from_abi(value); }
			ptr<AppointmentRecurrence> operator()() { return get(); }
			operator ptr<AppointmentRecurrence> () { return get(); }
			ptr<AppointmentRecurrence> operator->() { return get(); }
			void put(pptr<AppointmentRecurrence> value) { hrcheck(enc(&IAppointment_adaptor::Recurrence)->_put_Recurrence(value)); }
			void operator=(pptr<AppointmentRecurrence> value) { put(value); }
			void operator()(pptr<AppointmentRecurrence> value) { put(value); }
		} Recurrence;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAppointment_adaptor::Reminder)->_get_Reminder(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IAppointment_adaptor::Reminder)->_put_Reminder(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} Reminder;
		struct : property {
			AppointmentSensitivity get() { AppointmentSensitivity value; hrcheck(enc(&IAppointment_adaptor::Sensitivity)->_get_Sensitivity(&value)); return value; }
			AppointmentSensitivity operator()() { return get(); }
			operator AppointmentSensitivity () { return get(); }
			void put(AppointmentSensitivity value) { hrcheck(enc(&IAppointment_adaptor::Sensitivity)->_put_Sensitivity(value)); }
			void operator=(AppointmentSensitivity value) { put(value); }
			void operator()(AppointmentSensitivity value) { put(value); }
		} Sensitivity;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppointment_adaptor::StartTime)->_get_StartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IAppointment_adaptor::StartTime)->_put_StartTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} StartTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointment_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointment_adaptor::Subject)->_put_Subject(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subject;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAppointment_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IAppointment_adaptor::Uri)->_put_Uri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} Uri;
	};
	IAppointment_adaptor() {}
};
template<typename X> struct adapt<IAppointment, X> : Windows::ApplicationModel::Appointments::IAppointment_adaptor<X> { typedef adapt IAppointment; };
struct IAppointment : IAppointment_raw, generate<IAppointment> {};

// IAppointment2
struct IAppointment2_raw : IInspectable {
	virtual STDMETHODIMP _get_LocalId(HSTRING *value);
	virtual STDMETHODIMP _get_CalendarId(HSTRING *value);
	virtual STDMETHODIMP _get_RoamingId(HSTRING *value);
	virtual STDMETHODIMP _put_RoamingId(HSTRING value);
	virtual STDMETHODIMP _get_OriginalStartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_IsResponseRequested(bool *value);
	virtual STDMETHODIMP _put_IsResponseRequested(bool value);
	virtual STDMETHODIMP _get_AllowNewTimeProposal(bool *value);
	virtual STDMETHODIMP _put_AllowNewTimeProposal(bool value);
	virtual STDMETHODIMP _get_OnlineMeetingLink(HSTRING *value);
	virtual STDMETHODIMP _put_OnlineMeetingLink(HSTRING value);
	virtual STDMETHODIMP _get_ReplyTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_ReplyTime(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_UserResponse(AppointmentParticipantResponse *value);
	virtual STDMETHODIMP _put_UserResponse(AppointmentParticipantResponse value);
	virtual STDMETHODIMP _get_HasInvitees(bool *value);
	virtual STDMETHODIMP _get_IsCanceledMeeting(bool *value);
	virtual STDMETHODIMP _put_IsCanceledMeeting(bool value);
	virtual STDMETHODIMP _get_IsOrganizedByUser(bool *value);
	virtual STDMETHODIMP _put_IsOrganizedByUser(bool value);
};
template<typename X> struct IAppointment2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointment2_adaptor::AllowNewTimeProposal)->_get_AllowNewTimeProposal(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointment2_adaptor::AllowNewTimeProposal)->_put_AllowNewTimeProposal(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowNewTimeProposal;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointment2_adaptor::CalendarId)->_get_CalendarId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CalendarId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointment2_adaptor::HasInvitees)->_get_HasInvitees(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasInvitees;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointment2_adaptor::IsCanceledMeeting)->_get_IsCanceledMeeting(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointment2_adaptor::IsCanceledMeeting)->_put_IsCanceledMeeting(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCanceledMeeting;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointment2_adaptor::IsOrganizedByUser)->_get_IsOrganizedByUser(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointment2_adaptor::IsOrganizedByUser)->_put_IsOrganizedByUser(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsOrganizedByUser;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointment2_adaptor::IsResponseRequested)->_get_IsResponseRequested(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointment2_adaptor::IsResponseRequested)->_put_IsResponseRequested(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsResponseRequested;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointment2_adaptor::LocalId)->_get_LocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LocalId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointment2_adaptor::OnlineMeetingLink)->_get_OnlineMeetingLink(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointment2_adaptor::OnlineMeetingLink)->_put_OnlineMeetingLink(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} OnlineMeetingLink;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointment2_adaptor::OriginalStartTime)->_get_OriginalStartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} OriginalStartTime;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointment2_adaptor::ReplyTime)->_get_ReplyTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IAppointment2_adaptor::ReplyTime)->_put_ReplyTime(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} ReplyTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointment2_adaptor::RoamingId)->_get_RoamingId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointment2_adaptor::RoamingId)->_put_RoamingId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RoamingId;
		struct : property {
			AppointmentParticipantResponse get() { AppointmentParticipantResponse value; hrcheck(enc(&IAppointment2_adaptor::UserResponse)->_get_UserResponse(&value)); return value; }
			AppointmentParticipantResponse operator()() { return get(); }
			operator AppointmentParticipantResponse () { return get(); }
			void put(AppointmentParticipantResponse value) { hrcheck(enc(&IAppointment2_adaptor::UserResponse)->_put_UserResponse(value)); }
			void operator=(AppointmentParticipantResponse value) { put(value); }
			void operator()(AppointmentParticipantResponse value) { put(value); }
		} UserResponse;
	};
	IAppointment2_adaptor() {}
};
template<typename X> struct adapt<IAppointment2, X> : Windows::ApplicationModel::Appointments::IAppointment2_adaptor<X> { typedef adapt IAppointment2; };
struct IAppointment2 : IAppointment2_raw, generate<IAppointment2> {};

// IAppointment3
struct IAppointment3_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeNumber(unsigned __int64 *value);
	virtual STDMETHODIMP _get_RemoteChangeNumber(unsigned __int64 *value);
	virtual STDMETHODIMP _put_RemoteChangeNumber(unsigned __int64 value);
	virtual STDMETHODIMP _get_DetailsKind(AppointmentDetailsKind *value);
	virtual STDMETHODIMP _put_DetailsKind(AppointmentDetailsKind value);
};
template<typename X> struct IAppointment3_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppointment3_adaptor::ChangeNumber)->_get_ChangeNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} ChangeNumber;
		struct : property {
			AppointmentDetailsKind get() { AppointmentDetailsKind value; hrcheck(enc(&IAppointment3_adaptor::DetailsKind)->_get_DetailsKind(&value)); return value; }
			AppointmentDetailsKind operator()() { return get(); }
			operator AppointmentDetailsKind () { return get(); }
			void put(AppointmentDetailsKind value) { hrcheck(enc(&IAppointment3_adaptor::DetailsKind)->_put_DetailsKind(value)); }
			void operator=(AppointmentDetailsKind value) { put(value); }
			void operator()(AppointmentDetailsKind value) { put(value); }
		} DetailsKind;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAppointment3_adaptor::RemoteChangeNumber)->_get_RemoteChangeNumber(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
			void put(unsigned __int64 value) { hrcheck(enc(&IAppointment3_adaptor::RemoteChangeNumber)->_put_RemoteChangeNumber(value)); }
			void operator=(unsigned __int64 value) { put(value); }
			void operator()(unsigned __int64 value) { put(value); }
		} RemoteChangeNumber;
	};
	IAppointment3_adaptor() {}
};
template<typename X> struct adapt<IAppointment3, X> : Windows::ApplicationModel::Appointments::IAppointment3_adaptor<X> { typedef adapt IAppointment3; };
struct IAppointment3 : IAppointment3_raw, generate<IAppointment3> {};

// Appointment
template<typename X> struct statics<Appointment, X> : X {
	typedef typename X::root_type Appointment;
};
struct Appointment : generate<Appointment> {};

// IAppointmentManagerStatics2
struct IAppointmentManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _ShowAppointmentDetailsAsync(HSTRING appointmentId, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _ShowAppointmentDetailsWithDateAsync(HSTRING appointmentId, Foundation::DateTime instanceStartDate, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _ShowEditNewAppointmentAsync(Appointment* appointment, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _RequestStoreAsync(AppointmentStoreAccessType options, Foundation::IAsyncOperation<AppointmentStore*>* *operation);
};

// IAppointmentStore3
struct IAppointmentStore3_raw : IInspectable {
	virtual STDMETHODIMP _GetChangeTracker(HSTRING identity, AppointmentStoreChangeTracker* *result);
};
template<typename X> struct IAppointmentStore3_adaptor : X {
	ptr<AppointmentStoreChangeTracker> GetChangeTracker(hstring_ref identity) { AppointmentStoreChangeTracker* result; hrcheck(X::get()->_GetChangeTracker(identity, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IAppointmentStore3, X> : Windows::ApplicationModel::Appointments::IAppointmentStore3_adaptor<X> { typedef adapt IAppointmentStore3; };
struct IAppointmentStore3 : IAppointmentStore3_raw, generate<IAppointmentStore3> {};

// IAppointmentStore
struct IAppointmentStore_raw : IInspectable {
	virtual STDMETHODIMP _get_ChangeTracker(AppointmentStoreChangeTracker* *value);
	virtual STDMETHODIMP _CreateAppointmentCalendarAsync(HSTRING name, Foundation::IAsyncOperation<AppointmentCalendar*>* *operation);
	virtual STDMETHODIMP _GetAppointmentCalendarAsync(HSTRING calendarId, Foundation::IAsyncOperation<AppointmentCalendar*>* *result);
	virtual STDMETHODIMP _GetAppointmentAsync(HSTRING localId, Foundation::IAsyncOperation<Appointment*>* *result);
	virtual STDMETHODIMP _GetAppointmentInstanceAsync(HSTRING localId, Foundation::DateTime instanceStartTime, Foundation::IAsyncOperation<Appointment*>* *result);
	virtual STDMETHODIMP _FindAppointmentCalendarsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentCalendar*>*>* *result);
	virtual STDMETHODIMP _FindAppointmentCalendarsAsyncWithOptions(FindAppointmentCalendarsOptions options, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentCalendar*>*>* *result);
	virtual STDMETHODIMP _FindAppointmentsAsync(Foundation::DateTime rangeStart, Foundation::TimeSpan rangeLength, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *result);
	virtual STDMETHODIMP _FindAppointmentsAsyncWithOptions(Foundation::DateTime rangeStart, Foundation::TimeSpan rangeLength, FindAppointmentsOptions* options, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *result);
	virtual STDMETHODIMP _FindConflictAsync(Appointment* appointment, Foundation::IAsyncOperation<AppointmentConflictResult*>* *result);
	virtual STDMETHODIMP _FindConflictAsyncWithInstanceStart(Appointment* appointment, Foundation::DateTime instanceStartTime, Foundation::IAsyncOperation<AppointmentConflictResult*>* *result);
	virtual STDMETHODIMP _MoveAppointmentAsync(Appointment* appointment, AppointmentCalendar* destinationCalendar, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _ShowAddAppointmentAsync(Appointment* appointment, Foundation::Rect selection, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowReplaceAppointmentAsync(HSTRING localId, Appointment* appointment, Foundation::Rect selection, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowReplaceAppointmentWithPlacementAndDateAsync(HSTRING localId, Appointment* appointment, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::DateTime instanceStartDate, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ShowRemoveAppointmentAsync(HSTRING localId, Foundation::Rect selection, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _ShowRemoveAppointmentWithPlacementAndDateAsync(HSTRING localId, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::DateTime instanceStartDate, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _ShowAppointmentDetailsAsync(HSTRING localId, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _ShowAppointmentDetailsWithDateAsync(HSTRING localId, Foundation::DateTime instanceStartDate, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _ShowEditNewAppointmentAsync(Appointment* appointment, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _FindLocalIdsFromRoamingIdAsync(HSTRING roamingId, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* *operation);
};
template<typename X> struct IAppointmentStore_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentStoreChangeTracker> get() { AppointmentStoreChangeTracker* value; hrcheck(enc(&IAppointmentStore_adaptor::ChangeTracker)->_get_ChangeTracker(&value)); return from_abi(value); }
			ptr<AppointmentStoreChangeTracker> operator()() { return get(); }
			operator ptr<AppointmentStoreChangeTracker> () { return get(); }
			ptr<AppointmentStoreChangeTracker> operator->() { return get(); }
		} ChangeTracker;
	};
	ptr<Foundation::IAsyncOperation<ptr<AppointmentCalendar>>> CreateAppointmentCalendarAsync(hstring_ref name) { Foundation::IAsyncOperation<AppointmentCalendar*>* operation; hrcheck(X::get()->_CreateAppointmentCalendarAsync(name, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<AppointmentCalendar>>> GetAppointmentCalendarAsync(hstring_ref calendarId) { Foundation::IAsyncOperation<AppointmentCalendar*>* result; hrcheck(X::get()->_GetAppointmentCalendarAsync(calendarId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Appointment>>> GetAppointmentAsync(hstring_ref localId) { Foundation::IAsyncOperation<Appointment*>* result; hrcheck(X::get()->_GetAppointmentAsync(localId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Appointment>>> GetAppointmentInstanceAsync(hstring_ref localId, const Foundation::DateTime& instanceStartTime) { Foundation::IAsyncOperation<Appointment*>* result; hrcheck(X::get()->_GetAppointmentInstanceAsync(localId, instanceStartTime, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<AppointmentCalendar>>>>> FindAppointmentCalendarsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentCalendar*>*>* result; hrcheck(X::get()->_FindAppointmentCalendarsAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<AppointmentCalendar>>>>> FindAppointmentCalendarsAsync(FindAppointmentCalendarsOptions options) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentCalendar*>*>* result; hrcheck(X::get()->_FindAppointmentCalendarsAsyncWithOptions(options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindAppointmentsAsync(const Foundation::DateTime& rangeStart, const Foundation::TimeSpan& rangeLength) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* result; hrcheck(X::get()->_FindAppointmentsAsync(rangeStart, rangeLength, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindAppointmentsAsync(const Foundation::DateTime& rangeStart, const Foundation::TimeSpan& rangeLength, pptr<FindAppointmentsOptions> options) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* result; hrcheck(X::get()->_FindAppointmentsAsyncWithOptions(rangeStart, rangeLength, options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<AppointmentConflictResult>>> FindConflictAsync(pptr<Appointment> appointment) { Foundation::IAsyncOperation<AppointmentConflictResult*>* result; hrcheck(X::get()->_FindConflictAsync(appointment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<AppointmentConflictResult>>> FindConflictAsync(pptr<Appointment> appointment, const Foundation::DateTime& instanceStartTime) { Foundation::IAsyncOperation<AppointmentConflictResult*>* result; hrcheck(X::get()->_FindConflictAsyncWithInstanceStart(appointment, instanceStartTime, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MoveAppointmentAsync(pptr<Appointment> appointment, pptr<AppointmentCalendar> destinationCalendar) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_MoveAppointmentAsync(appointment, destinationCalendar, &asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowAddAppointmentAsync(pptr<Appointment> appointment, const Foundation::Rect& selection) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_ShowAddAppointmentAsync(appointment, selection, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref localId, pptr<Appointment> appointment, const Foundation::Rect& selection) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_ShowReplaceAppointmentAsync(localId, appointment, selection, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref localId, pptr<Appointment> appointment, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_ShowReplaceAppointmentWithPlacementAndDateAsync(localId, appointment, selection, preferredPlacement, instanceStartDate, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref localId, const Foundation::Rect& selection) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_ShowRemoveAppointmentAsync(localId, selection, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref localId, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_ShowRemoveAppointmentWithPlacementAndDateAsync(localId, selection, preferredPlacement, instanceStartDate, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> ShowAppointmentDetailsAsync(hstring_ref localId) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_ShowAppointmentDetailsAsync(localId, &asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncAction> ShowAppointmentDetailsAsync(hstring_ref localId, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_ShowAppointmentDetailsWithDateAsync(localId, instanceStartDate, &asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowEditNewAppointmentAsync(pptr<Appointment> appointment) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_ShowEditNewAppointmentAsync(appointment, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<hstring>>>> FindLocalIdsFromRoamingIdAsync(hstring_ref roamingId) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<HSTRING>*>* operation; hrcheck(X::get()->_FindLocalIdsFromRoamingIdAsync(roamingId, &operation)); return from_abi(operation); }
	IAppointmentStore_adaptor() {}
};
template<typename X> struct adapt<IAppointmentStore, X> : Windows::ApplicationModel::Appointments::IAppointmentStore_adaptor<X> { typedef adapt IAppointmentStore; };
struct IAppointmentStore : IAppointmentStore_raw, generate<IAppointmentStore> {};

// IAppointmentStore2
struct IAppointmentStore2_raw : IInspectable {
	virtual STDMETHODIMP _add_StoreChanged(Foundation::TypedEventHandler<AppointmentStore*, AppointmentStoreChangedEventArgs*>* pHandler, Foundation::EventRegistrationToken *pToken);
	virtual STDMETHODIMP _remove_StoreChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CreateAppointmentCalendarInAccountAsync(HSTRING name, HSTRING userDataAccountId, Foundation::IAsyncOperation<AppointmentCalendar*>* *operation);
};
template<typename X> struct IAppointmentStore2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentStore>, ptr<AppointmentStoreChangedEventArgs>>> pHandler) { Foundation::EventRegistrationToken pToken; hrcheck(enc(&IAppointmentStore2_adaptor::StoreChanged)->_add_StoreChanged(to_abi(pHandler), &pToken)); return pToken; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentStore2_adaptor::StoreChanged)->_remove_StoreChanged(token)); }
		} StoreChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<AppointmentCalendar>>> CreateAppointmentCalendarAsync(hstring_ref name, hstring_ref userDataAccountId) { Foundation::IAsyncOperation<AppointmentCalendar*>* operation; hrcheck(X::get()->_CreateAppointmentCalendarInAccountAsync(name, userDataAccountId, &operation)); return from_abi(operation); }
	IAppointmentStore2_adaptor() {}
};
template<typename X> struct adapt<IAppointmentStore2, X> : Windows::ApplicationModel::Appointments::IAppointmentStore2_adaptor<X> { typedef adapt IAppointmentStore2; };
struct IAppointmentStore2 : IAppointmentStore2_raw, generate<IAppointmentStore2> {};

// AppointmentStore
template<typename X> struct statics<AppointmentStore, X> : X {
	typedef typename X::root_type AppointmentStore;
};
struct AppointmentStore : generate<AppointmentStore> {
	using IAppointmentStore::FindConflictAsync;
	using IAppointmentStore::ShowRemoveAppointmentAsync;
	using IAppointmentStore::FindAppointmentCalendarsAsync;
	using IAppointmentStore::CreateAppointmentCalendarAsync;
	using IAppointmentStore2::CreateAppointmentCalendarAsync;
	using IAppointmentStore::ShowReplaceAppointmentAsync;
	using IAppointmentStore::ShowAppointmentDetailsAsync;
	using IAppointmentStore::FindAppointmentsAsync;
};

// IAppointmentManagerStatics3
struct IAppointmentManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _GetForUser(System::User* user, AppointmentManagerForUser* *result);
};

// IAppointmentManagerForUser
struct IAppointmentManagerForUser_raw : IInspectable {
	virtual STDMETHODIMP _ShowAddAppointmentAsync(Appointment* appointment, Foundation::Rect selection, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _ShowAddAppointmentWithPlacementAsync(Appointment* appointment, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _ShowReplaceAppointmentAsync(HSTRING appointmentId, Appointment* appointment, Foundation::Rect selection, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _ShowReplaceAppointmentWithPlacementAsync(HSTRING appointmentId, Appointment* appointment, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _ShowReplaceAppointmentWithPlacementAndDateAsync(HSTRING appointmentId, Appointment* appointment, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::DateTime instanceStartDate, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _ShowRemoveAppointmentAsync(HSTRING appointmentId, Foundation::Rect selection, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _ShowRemoveAppointmentWithPlacementAsync(HSTRING appointmentId, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _ShowRemoveAppointmentWithPlacementAndDateAsync(HSTRING appointmentId, Foundation::Rect selection, UI::Popups::Placement preferredPlacement, Foundation::DateTime instanceStartDate, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _ShowTimeFrameAsync(Foundation::DateTime timeToShow, Foundation::TimeSpan duration, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ShowAppointmentDetailsAsync(HSTRING appointmentId, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ShowAppointmentDetailsWithDateAsync(HSTRING appointmentId, Foundation::DateTime instanceStartDate, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ShowEditNewAppointmentAsync(Appointment* appointment, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _RequestStoreAsync(AppointmentStoreAccessType options, Foundation::IAsyncOperation<AppointmentStore*>* *result);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IAppointmentManagerForUser_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IAppointmentManagerForUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<Foundation::IAsyncOperation<hstring>> ShowAddAppointmentAsync(pptr<Appointment> appointment, const Foundation::Rect& selection) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_ShowAddAppointmentAsync(appointment, selection, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowAddAppointmentAsync(pptr<Appointment> appointment, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_ShowAddAppointmentWithPlacementAsync(appointment, selection, preferredPlacement, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref appointmentId, pptr<Appointment> appointment, const Foundation::Rect& selection) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_ShowReplaceAppointmentAsync(appointmentId, appointment, selection, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref appointmentId, pptr<Appointment> appointment, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_ShowReplaceAppointmentWithPlacementAsync(appointmentId, appointment, selection, preferredPlacement, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref appointmentId, pptr<Appointment> appointment, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_ShowReplaceAppointmentWithPlacementAndDateAsync(appointmentId, appointment, selection, preferredPlacement, instanceStartDate, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref appointmentId, const Foundation::Rect& selection) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_ShowRemoveAppointmentAsync(appointmentId, selection, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref appointmentId, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_ShowRemoveAppointmentWithPlacementAsync(appointmentId, selection, preferredPlacement, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref appointmentId, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_ShowRemoveAppointmentWithPlacementAndDateAsync(appointmentId, selection, preferredPlacement, instanceStartDate, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ShowTimeFrameAsync(const Foundation::DateTime& timeToShow, const Foundation::TimeSpan& duration) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ShowTimeFrameAsync(timeToShow, duration, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ShowAppointmentDetailsAsync(hstring_ref appointmentId) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ShowAppointmentDetailsAsync(appointmentId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ShowAppointmentDetailsAsync(hstring_ref appointmentId, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ShowAppointmentDetailsWithDateAsync(appointmentId, instanceStartDate, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<hstring>> ShowEditNewAppointmentAsync(pptr<Appointment> appointment) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_ShowEditNewAppointmentAsync(appointment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<AppointmentStore>>> RequestStoreAsync(AppointmentStoreAccessType options) { Foundation::IAsyncOperation<AppointmentStore*>* result; hrcheck(X::get()->_RequestStoreAsync(options, &result)); return from_abi(result); }
	IAppointmentManagerForUser_adaptor() {}
};
template<typename X> struct adapt<IAppointmentManagerForUser, X> : Windows::ApplicationModel::Appointments::IAppointmentManagerForUser_adaptor<X> { typedef adapt IAppointmentManagerForUser; };
struct IAppointmentManagerForUser : IAppointmentManagerForUser_raw, generate<IAppointmentManagerForUser> {};

// AppointmentManagerForUser
template<typename X> struct statics<AppointmentManagerForUser, X> : X {
	typedef typename X::root_type AppointmentManagerForUser;
};
struct AppointmentManagerForUser : generate<AppointmentManagerForUser> {
	using IAppointmentManagerForUser::ShowAddAppointmentAsync;
	using IAppointmentManagerForUser::ShowReplaceAppointmentAsync;
	using IAppointmentManagerForUser::ShowAppointmentDetailsAsync;
	using IAppointmentManagerForUser::ShowRemoveAppointmentAsync;
};

// IAppointmentParticipant
struct IAppointmentParticipant_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_DisplayName(HSTRING value) = 0;
	virtual STDMETHODIMP _get_Address(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_Address(HSTRING value) = 0;
};
template<typename X> struct IAppointmentParticipant_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentParticipant_adaptor::Address)->_get_Address(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointmentParticipant_adaptor::Address)->_put_Address(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Address;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentParticipant_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointmentParticipant_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
	};
	IAppointmentParticipant_adaptor() {}
};
template<typename X> struct adapt<IAppointmentParticipant, X> : Windows::ApplicationModel::Appointments::IAppointmentParticipant_adaptor<X> { typedef adapt IAppointmentParticipant; };
template<typename X> struct IAppointmentParticipant_unadaptor : X {
	STDMETHODIMP _get_DisplayName(HSTRING *value) { return hrtry([&, this] { get_prop(value, DisplayName); }); }
	STDMETHODIMP _put_DisplayName(HSTRING value) { return hrtry([&, this] { put_prop(value, DisplayName); }); }
	STDMETHODIMP _get_Address(HSTRING *value) { return hrtry([&, this] { get_prop(value, Address); }); }
	STDMETHODIMP _put_Address(HSTRING value) { return hrtry([&, this] { put_prop(value, Address); }); }
};
template<typename X> struct unadapt<IAppointmentParticipant, X> : Windows::ApplicationModel::Appointments::IAppointmentParticipant_unadaptor<X> {};
struct IAppointmentParticipant : IAppointmentParticipant_raw, generate<IAppointmentParticipant> {};

// AppointmentOrganizer
template<typename X> struct statics<AppointmentOrganizer, X> : X {
	typedef typename X::root_type AppointmentOrganizer;
};
struct AppointmentOrganizer : generate<AppointmentOrganizer> {};

// IAppointmentInvitee
struct IAppointmentInvitee_raw : IInspectable {
	virtual STDMETHODIMP _get_Role(AppointmentParticipantRole *value);
	virtual STDMETHODIMP _put_Role(AppointmentParticipantRole value);
	virtual STDMETHODIMP _get_Response(AppointmentParticipantResponse *value);
	virtual STDMETHODIMP _put_Response(AppointmentParticipantResponse value);
};
template<typename X> struct IAppointmentInvitee_adaptor : X {
	union {
		struct : property {
			AppointmentParticipantResponse get() { AppointmentParticipantResponse value; hrcheck(enc(&IAppointmentInvitee_adaptor::Response)->_get_Response(&value)); return value; }
			AppointmentParticipantResponse operator()() { return get(); }
			operator AppointmentParticipantResponse () { return get(); }
			void put(AppointmentParticipantResponse value) { hrcheck(enc(&IAppointmentInvitee_adaptor::Response)->_put_Response(value)); }
			void operator=(AppointmentParticipantResponse value) { put(value); }
			void operator()(AppointmentParticipantResponse value) { put(value); }
		} Response;
		struct : property {
			AppointmentParticipantRole get() { AppointmentParticipantRole value; hrcheck(enc(&IAppointmentInvitee_adaptor::Role)->_get_Role(&value)); return value; }
			AppointmentParticipantRole operator()() { return get(); }
			operator AppointmentParticipantRole () { return get(); }
			void put(AppointmentParticipantRole value) { hrcheck(enc(&IAppointmentInvitee_adaptor::Role)->_put_Role(value)); }
			void operator=(AppointmentParticipantRole value) { put(value); }
			void operator()(AppointmentParticipantRole value) { put(value); }
		} Role;
	};
	IAppointmentInvitee_adaptor() {}
};
template<typename X> struct adapt<IAppointmentInvitee, X> : Windows::ApplicationModel::Appointments::IAppointmentInvitee_adaptor<X> { typedef adapt IAppointmentInvitee; };
struct IAppointmentInvitee : IAppointmentInvitee_raw, generate<IAppointmentInvitee> {};

// AppointmentInvitee
template<typename X> struct statics<AppointmentInvitee, X> : X {
	typedef typename X::root_type AppointmentInvitee;
};
struct AppointmentInvitee : generate<AppointmentInvitee> {};

// IAppointmentRecurrence
struct IAppointmentRecurrence_raw : IInspectable {
	virtual STDMETHODIMP _get_Unit(AppointmentRecurrenceUnit *value);
	virtual STDMETHODIMP _put_Unit(AppointmentRecurrenceUnit value);
	virtual STDMETHODIMP _get_Occurrences(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_Occurrences(Foundation::IReference<unsigned>* value);
	virtual STDMETHODIMP _get_Until(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_Until(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Interval(unsigned *value);
	virtual STDMETHODIMP _put_Interval(unsigned value);
	virtual STDMETHODIMP _get_DaysOfWeek(AppointmentDaysOfWeek *value);
	virtual STDMETHODIMP _put_DaysOfWeek(AppointmentDaysOfWeek value);
	virtual STDMETHODIMP _get_WeekOfMonth(AppointmentWeekOfMonth *value);
	virtual STDMETHODIMP _put_WeekOfMonth(AppointmentWeekOfMonth value);
	virtual STDMETHODIMP _get_Month(unsigned *value);
	virtual STDMETHODIMP _put_Month(unsigned value);
	virtual STDMETHODIMP _get_Day(unsigned *value);
	virtual STDMETHODIMP _put_Day(unsigned value);
};
template<typename X> struct IAppointmentRecurrence_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppointmentRecurrence_adaptor::Day)->_get_Day(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::Day)->_put_Day(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Day;
		struct : property {
			AppointmentDaysOfWeek get() { AppointmentDaysOfWeek value; hrcheck(enc(&IAppointmentRecurrence_adaptor::DaysOfWeek)->_get_DaysOfWeek(&value)); return value; }
			AppointmentDaysOfWeek operator()() { return get(); }
			operator AppointmentDaysOfWeek () { return get(); }
			void put(AppointmentDaysOfWeek value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::DaysOfWeek)->_put_DaysOfWeek(value)); }
			void operator=(AppointmentDaysOfWeek value) { put(value); }
			void operator()(AppointmentDaysOfWeek value) { put(value); }
		} DaysOfWeek;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppointmentRecurrence_adaptor::Interval)->_get_Interval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::Interval)->_put_Interval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Interval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppointmentRecurrence_adaptor::Month)->_get_Month(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::Month)->_put_Month(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Month;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IAppointmentRecurrence_adaptor::Occurrences)->_get_Occurrences(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::Occurrences)->_put_Occurrences(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} Occurrences;
		struct : property {
			AppointmentRecurrenceUnit get() { AppointmentRecurrenceUnit value; hrcheck(enc(&IAppointmentRecurrence_adaptor::Unit)->_get_Unit(&value)); return value; }
			AppointmentRecurrenceUnit operator()() { return get(); }
			operator AppointmentRecurrenceUnit () { return get(); }
			void put(AppointmentRecurrenceUnit value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::Unit)->_put_Unit(value)); }
			void operator=(AppointmentRecurrenceUnit value) { put(value); }
			void operator()(AppointmentRecurrenceUnit value) { put(value); }
		} Unit;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointmentRecurrence_adaptor::Until)->_get_Until(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::Until)->_put_Until(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} Until;
		struct : property {
			AppointmentWeekOfMonth get() { AppointmentWeekOfMonth value; hrcheck(enc(&IAppointmentRecurrence_adaptor::WeekOfMonth)->_get_WeekOfMonth(&value)); return value; }
			AppointmentWeekOfMonth operator()() { return get(); }
			operator AppointmentWeekOfMonth () { return get(); }
			void put(AppointmentWeekOfMonth value) { hrcheck(enc(&IAppointmentRecurrence_adaptor::WeekOfMonth)->_put_WeekOfMonth(value)); }
			void operator=(AppointmentWeekOfMonth value) { put(value); }
			void operator()(AppointmentWeekOfMonth value) { put(value); }
		} WeekOfMonth;
	};
	IAppointmentRecurrence_adaptor() {}
};
template<typename X> struct adapt<IAppointmentRecurrence, X> : Windows::ApplicationModel::Appointments::IAppointmentRecurrence_adaptor<X> { typedef adapt IAppointmentRecurrence; };
struct IAppointmentRecurrence : IAppointmentRecurrence_raw, generate<IAppointmentRecurrence> {};

// IAppointmentRecurrence2
struct IAppointmentRecurrence2_raw : IInspectable {
	virtual STDMETHODIMP _get_RecurrenceType(Appointments::RecurrenceType *value);
	virtual STDMETHODIMP _get_TimeZone(HSTRING *value);
	virtual STDMETHODIMP _put_TimeZone(HSTRING value);
};
template<typename X> struct IAppointmentRecurrence2_adaptor : X {
	union {
		struct : property {
			Appointments::RecurrenceType get() { Appointments::RecurrenceType value; hrcheck(enc(&IAppointmentRecurrence2_adaptor::RecurrenceType)->_get_RecurrenceType(&value)); return value; }
			Appointments::RecurrenceType operator()() { return get(); }
			operator Appointments::RecurrenceType () { return get(); }
		} RecurrenceType;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentRecurrence2_adaptor::TimeZone)->_get_TimeZone(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointmentRecurrence2_adaptor::TimeZone)->_put_TimeZone(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TimeZone;
	};
	IAppointmentRecurrence2_adaptor() {}
};
template<typename X> struct adapt<IAppointmentRecurrence2, X> : Windows::ApplicationModel::Appointments::IAppointmentRecurrence2_adaptor<X> { typedef adapt IAppointmentRecurrence2; };
struct IAppointmentRecurrence2 : IAppointmentRecurrence2_raw, generate<IAppointmentRecurrence2> {};

// IAppointmentRecurrence3
struct IAppointmentRecurrence3_raw : IInspectable {
	virtual STDMETHODIMP _get_CalendarIdentifier(HSTRING *value);
};
template<typename X> struct IAppointmentRecurrence3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentRecurrence3_adaptor::CalendarIdentifier)->_get_CalendarIdentifier(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CalendarIdentifier;
	};
	IAppointmentRecurrence3_adaptor() {}
};
template<typename X> struct adapt<IAppointmentRecurrence3, X> : Windows::ApplicationModel::Appointments::IAppointmentRecurrence3_adaptor<X> { typedef adapt IAppointmentRecurrence3; };
struct IAppointmentRecurrence3 : IAppointmentRecurrence3_raw, generate<IAppointmentRecurrence3> {};

// AppointmentRecurrence
template<typename X> struct statics<AppointmentRecurrence, X> : X {
	typedef typename X::root_type AppointmentRecurrence;
};
struct AppointmentRecurrence : generate<AppointmentRecurrence> {};

// AppointmentManager
template<typename> struct AppointmentManager_statics {
	static ptr<AppointmentManagerForUser> GetForUser(pptr<System::User> user) { AppointmentManagerForUser* result; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics3>()->_GetForUser(user, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncAction> ShowAppointmentDetailsAsync(hstring_ref appointmentId) { Foundation::IAsyncAction* asyncAction; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics2>()->_ShowAppointmentDetailsAsync(appointmentId, &asyncAction)); return from_abi(asyncAction); }
	static ptr<Foundation::IAsyncAction> ShowAppointmentDetailsAsync(hstring_ref appointmentId, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncAction* asyncAction; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics2>()->_ShowAppointmentDetailsWithDateAsync(appointmentId, instanceStartDate, &asyncAction)); return from_abi(asyncAction); }
	static ptr<Foundation::IAsyncOperation<hstring>> ShowEditNewAppointmentAsync(pptr<Appointment> appointment) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics2>()->_ShowEditNewAppointmentAsync(appointment, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<AppointmentStore>>> RequestStoreAsync(AppointmentStoreAccessType options) { Foundation::IAsyncOperation<AppointmentStore*>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics2>()->_RequestStoreAsync(options, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> ShowAddAppointmentAsync(pptr<Appointment> appointment, const Foundation::Rect& selection) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowAddAppointmentAsync(appointment, selection, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> ShowAddAppointmentAsync(pptr<Appointment> appointment, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowAddAppointmentWithPlacementAsync(appointment, selection, preferredPlacement, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref appointmentId, pptr<Appointment> appointment, const Foundation::Rect& selection) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowReplaceAppointmentAsync(appointmentId, appointment, selection, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref appointmentId, pptr<Appointment> appointment, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowReplaceAppointmentWithPlacementAsync(appointmentId, appointment, selection, preferredPlacement, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> ShowReplaceAppointmentAsync(hstring_ref appointmentId, pptr<Appointment> appointment, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowReplaceAppointmentWithPlacementAndDateAsync(appointmentId, appointment, selection, preferredPlacement, instanceStartDate, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref appointmentId, const Foundation::Rect& selection) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowRemoveAppointmentAsync(appointmentId, selection, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref appointmentId, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowRemoveAppointmentWithPlacementAsync(appointmentId, selection, preferredPlacement, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<bool>> ShowRemoveAppointmentAsync(hstring_ref appointmentId, const Foundation::Rect& selection, UI::Popups::Placement preferredPlacement, const Foundation::DateTime& instanceStartDate) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowRemoveAppointmentWithPlacementAndDateAsync(appointmentId, selection, preferredPlacement, instanceStartDate, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncAction> ShowTimeFrameAsync(const Foundation::DateTime& timeToShow, const Foundation::TimeSpan& duration) { Foundation::IAsyncAction* asyncAction; hrcheck(get_activation_factory<AppointmentManager, IAppointmentManagerStatics>()->_ShowTimeFrameAsync(timeToShow, duration, &asyncAction)); return from_abi(asyncAction); }
};

template<typename X> struct statics<AppointmentManager, X> : X, Windows::ApplicationModel::Appointments::AppointmentManager_statics<void> {
	typedef typename X::root_type AppointmentManager;
};
struct AppointmentManager : generate<AppointmentManager> {};

// IFindAppointmentsOptions
struct IFindAppointmentsOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_CalendarIds(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_FetchProperties(Foundation::Collections::IVector<HSTRING>* *value);
	virtual STDMETHODIMP _get_IncludeHidden(bool *value);
	virtual STDMETHODIMP _put_IncludeHidden(bool value);
	virtual STDMETHODIMP _get_MaxCount(unsigned *value);
	virtual STDMETHODIMP _put_MaxCount(unsigned value);
};
template<typename X> struct IFindAppointmentsOptions_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IFindAppointmentsOptions_adaptor::CalendarIds)->_get_CalendarIds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} CalendarIds;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&IFindAppointmentsOptions_adaptor::FetchProperties)->_get_FetchProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} FetchProperties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IFindAppointmentsOptions_adaptor::IncludeHidden)->_get_IncludeHidden(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IFindAppointmentsOptions_adaptor::IncludeHidden)->_put_IncludeHidden(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IncludeHidden;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IFindAppointmentsOptions_adaptor::MaxCount)->_get_MaxCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IFindAppointmentsOptions_adaptor::MaxCount)->_put_MaxCount(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MaxCount;
	};
	IFindAppointmentsOptions_adaptor() {}
};
template<typename X> struct adapt<IFindAppointmentsOptions, X> : Windows::ApplicationModel::Appointments::IFindAppointmentsOptions_adaptor<X> { typedef adapt IFindAppointmentsOptions; };
struct IFindAppointmentsOptions : IFindAppointmentsOptions_raw, generate<IFindAppointmentsOptions> {};

// IAppointmentCalendar
struct IAppointmentCalendar_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayColor(UI::Color *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_LocalId(HSTRING *value);
	virtual STDMETHODIMP _get_IsHidden(bool *value);
	virtual STDMETHODIMP _get_OtherAppReadAccess(AppointmentCalendarOtherAppReadAccess *value);
	virtual STDMETHODIMP _put_OtherAppReadAccess(AppointmentCalendarOtherAppReadAccess value);
	virtual STDMETHODIMP _get_OtherAppWriteAccess(AppointmentCalendarOtherAppWriteAccess *value);
	virtual STDMETHODIMP _put_OtherAppWriteAccess(AppointmentCalendarOtherAppWriteAccess value);
	virtual STDMETHODIMP _get_SourceDisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_SummaryCardView(AppointmentSummaryCardView *value);
	virtual STDMETHODIMP _put_SummaryCardView(AppointmentSummaryCardView value);
	virtual STDMETHODIMP _FindAppointmentsAsync(Foundation::DateTime rangeStart, Foundation::TimeSpan rangeLength, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *result);
	virtual STDMETHODIMP _FindAppointmentsAsyncWithOptions(Foundation::DateTime rangeStart, Foundation::TimeSpan rangeLength, FindAppointmentsOptions* options, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *result);
	virtual STDMETHODIMP _FindExceptionsFromMasterAsync(HSTRING masterLocalId, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentException*>*>* *value);
	virtual STDMETHODIMP _FindAllInstancesAsync(HSTRING masterLocalId, Foundation::DateTime rangeStart, Foundation::TimeSpan rangeLength, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *value);
	virtual STDMETHODIMP _FindAllInstancesAsyncWithOptions(HSTRING masterLocalId, Foundation::DateTime rangeStart, Foundation::TimeSpan rangeLength, FindAppointmentsOptions* pOptions, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *value);
	virtual STDMETHODIMP _GetAppointmentAsync(HSTRING localId, Foundation::IAsyncOperation<Appointment*>* *result);
	virtual STDMETHODIMP _GetAppointmentInstanceAsync(HSTRING localId, Foundation::DateTime instanceStartTime, Foundation::IAsyncOperation<Appointment*>* *result);
	virtual STDMETHODIMP _FindUnexpandedAppointmentsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *result);
	virtual STDMETHODIMP _FindUnexpandedAppointmentsAsyncWithOptions(FindAppointmentsOptions* options, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* *result);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _DeleteAppointmentAsync(HSTRING localId, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _DeleteAppointmentInstanceAsync(HSTRING localId, Foundation::DateTime instanceStartTime, Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _SaveAppointmentAsync(Appointment* pAppointment, Foundation::IAsyncAction* *asyncAction);
};
template<typename X> struct IAppointmentCalendar_adaptor : X {
	union {
		struct : property {
			UI::Color get() { UI::Color value; hrcheck(enc(&IAppointmentCalendar_adaptor::DisplayColor)->_get_DisplayColor(&value)); return value; }
			UI::Color operator()() { return get(); }
			operator UI::Color () { return get(); }
		} DisplayColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendar_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointmentCalendar_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar_adaptor::IsHidden)->_get_IsHidden(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHidden;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendar_adaptor::LocalId)->_get_LocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LocalId;
		struct : property {
			AppointmentCalendarOtherAppReadAccess get() { AppointmentCalendarOtherAppReadAccess value; hrcheck(enc(&IAppointmentCalendar_adaptor::OtherAppReadAccess)->_get_OtherAppReadAccess(&value)); return value; }
			AppointmentCalendarOtherAppReadAccess operator()() { return get(); }
			operator AppointmentCalendarOtherAppReadAccess () { return get(); }
			void put(AppointmentCalendarOtherAppReadAccess value) { hrcheck(enc(&IAppointmentCalendar_adaptor::OtherAppReadAccess)->_put_OtherAppReadAccess(value)); }
			void operator=(AppointmentCalendarOtherAppReadAccess value) { put(value); }
			void operator()(AppointmentCalendarOtherAppReadAccess value) { put(value); }
		} OtherAppReadAccess;
		struct : property {
			AppointmentCalendarOtherAppWriteAccess get() { AppointmentCalendarOtherAppWriteAccess value; hrcheck(enc(&IAppointmentCalendar_adaptor::OtherAppWriteAccess)->_get_OtherAppWriteAccess(&value)); return value; }
			AppointmentCalendarOtherAppWriteAccess operator()() { return get(); }
			operator AppointmentCalendarOtherAppWriteAccess () { return get(); }
			void put(AppointmentCalendarOtherAppWriteAccess value) { hrcheck(enc(&IAppointmentCalendar_adaptor::OtherAppWriteAccess)->_put_OtherAppWriteAccess(value)); }
			void operator=(AppointmentCalendarOtherAppWriteAccess value) { put(value); }
			void operator()(AppointmentCalendarOtherAppWriteAccess value) { put(value); }
		} OtherAppWriteAccess;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendar_adaptor::SourceDisplayName)->_get_SourceDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourceDisplayName;
		struct : property {
			AppointmentSummaryCardView get() { AppointmentSummaryCardView value; hrcheck(enc(&IAppointmentCalendar_adaptor::SummaryCardView)->_get_SummaryCardView(&value)); return value; }
			AppointmentSummaryCardView operator()() { return get(); }
			operator AppointmentSummaryCardView () { return get(); }
			void put(AppointmentSummaryCardView value) { hrcheck(enc(&IAppointmentCalendar_adaptor::SummaryCardView)->_put_SummaryCardView(value)); }
			void operator=(AppointmentSummaryCardView value) { put(value); }
			void operator()(AppointmentSummaryCardView value) { put(value); }
		} SummaryCardView;
	};
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindAppointmentsAsync(const Foundation::DateTime& rangeStart, const Foundation::TimeSpan& rangeLength) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* result; hrcheck(X::get()->_FindAppointmentsAsync(rangeStart, rangeLength, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindAppointmentsAsync(const Foundation::DateTime& rangeStart, const Foundation::TimeSpan& rangeLength, pptr<FindAppointmentsOptions> options) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* result; hrcheck(X::get()->_FindAppointmentsAsyncWithOptions(rangeStart, rangeLength, options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<AppointmentException>>>>> FindExceptionsFromMasterAsync(hstring_ref masterLocalId) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentException*>*>* value; hrcheck(X::get()->_FindExceptionsFromMasterAsync(masterLocalId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindAllInstancesAsync(hstring_ref masterLocalId, const Foundation::DateTime& rangeStart, const Foundation::TimeSpan& rangeLength) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* value; hrcheck(X::get()->_FindAllInstancesAsync(masterLocalId, rangeStart, rangeLength, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindAllInstancesAsync(hstring_ref masterLocalId, const Foundation::DateTime& rangeStart, const Foundation::TimeSpan& rangeLength, pptr<FindAppointmentsOptions> pOptions) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* value; hrcheck(X::get()->_FindAllInstancesAsyncWithOptions(masterLocalId, rangeStart, rangeLength, pOptions, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Appointment>>> GetAppointmentAsync(hstring_ref localId) { Foundation::IAsyncOperation<Appointment*>* result; hrcheck(X::get()->_GetAppointmentAsync(localId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Appointment>>> GetAppointmentInstanceAsync(hstring_ref localId, const Foundation::DateTime& instanceStartTime) { Foundation::IAsyncOperation<Appointment*>* result; hrcheck(X::get()->_GetAppointmentInstanceAsync(localId, instanceStartTime, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindUnexpandedAppointmentsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* result; hrcheck(X::get()->_FindUnexpandedAppointmentsAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Appointment>>>>> FindUnexpandedAppointmentsAsync(pptr<FindAppointmentsOptions> options) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Appointment*>*>* result; hrcheck(X::get()->_FindUnexpandedAppointmentsAsyncWithOptions(options, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_DeleteAsync(&asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_SaveAsync(&asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncAction> DeleteAppointmentAsync(hstring_ref localId) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_DeleteAppointmentAsync(localId, &asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncAction> DeleteAppointmentInstanceAsync(hstring_ref localId, const Foundation::DateTime& instanceStartTime) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_DeleteAppointmentInstanceAsync(localId, instanceStartTime, &asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncAction> SaveAppointmentAsync(pptr<Appointment> pAppointment) { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_SaveAppointmentAsync(pAppointment, &asyncAction)); return from_abi(asyncAction); }
	IAppointmentCalendar_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendar, X> : Windows::ApplicationModel::Appointments::IAppointmentCalendar_adaptor<X> { typedef adapt IAppointmentCalendar; };
struct IAppointmentCalendar : IAppointmentCalendar_raw, generate<IAppointmentCalendar> {};

// FindAppointmentsOptions
template<typename X> struct statics<FindAppointmentsOptions, X> : X {
	typedef typename X::root_type FindAppointmentsOptions;
};
struct FindAppointmentsOptions : generate<FindAppointmentsOptions> {};

// IAppointmentException
struct IAppointmentException_raw : IInspectable {
	virtual STDMETHODIMP _get_Appointment(Appointments::Appointment* *value);
	virtual STDMETHODIMP _get_ExceptionProperties(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_IsDeleted(bool *value);
};
template<typename X> struct IAppointmentException_adaptor : X {
	union {
		struct : property {
			ptr<Appointments::Appointment> get() { Appointments::Appointment* value; hrcheck(enc(&IAppointmentException_adaptor::Appointment)->_get_Appointment(&value)); return from_abi(value); }
			ptr<Appointments::Appointment> operator()() { return get(); }
			operator ptr<Appointments::Appointment> () { return get(); }
			ptr<Appointments::Appointment> operator->() { return get(); }
		} Appointment;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IAppointmentException_adaptor::ExceptionProperties)->_get_ExceptionProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} ExceptionProperties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentException_adaptor::IsDeleted)->_get_IsDeleted(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDeleted;
	};
	IAppointmentException_adaptor() {}
};
template<typename X> struct adapt<IAppointmentException, X> : Windows::ApplicationModel::Appointments::IAppointmentException_adaptor<X> { typedef adapt IAppointmentException; };
struct IAppointmentException : IAppointmentException_raw, generate<IAppointmentException> {};

// AppointmentException
template<typename X> struct statics<AppointmentException, X> : X {
	typedef typename X::root_type AppointmentException;
};
struct AppointmentException : generate<AppointmentException> {};

// IAppointmentCalendar2
struct IAppointmentCalendar2_raw : IInspectable {
	virtual STDMETHODIMP _get_SyncManager(AppointmentCalendarSyncManager* *value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _put_DisplayColor(UI::Color value);
	virtual STDMETHODIMP _put_IsHidden(bool value);
	virtual STDMETHODIMP _get_UserDataAccountId(HSTRING *value);
	virtual STDMETHODIMP _get_CanCreateOrUpdateAppointments(bool *value);
	virtual STDMETHODIMP _put_CanCreateOrUpdateAppointments(bool value);
	virtual STDMETHODIMP _get_CanCancelMeetings(bool *value);
	virtual STDMETHODIMP _put_CanCancelMeetings(bool value);
	virtual STDMETHODIMP _get_CanForwardMeetings(bool *value);
	virtual STDMETHODIMP _put_CanForwardMeetings(bool value);
	virtual STDMETHODIMP _get_CanProposeNewTimeForMeetings(bool *value);
	virtual STDMETHODIMP _put_CanProposeNewTimeForMeetings(bool value);
	virtual STDMETHODIMP _get_CanUpdateMeetingResponses(bool *value);
	virtual STDMETHODIMP _put_CanUpdateMeetingResponses(bool value);
	virtual STDMETHODIMP _get_CanNotifyInvitees(bool *value);
	virtual STDMETHODIMP _put_CanNotifyInvitees(bool value);
	virtual STDMETHODIMP _get_MustNofityInvitees(bool *value);
	virtual STDMETHODIMP _put_MustNofityInvitees(bool value);
	virtual STDMETHODIMP _TryCreateOrUpdateAppointmentAsync(Appointment* appointment, bool notifyInvitees, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryCancelMeetingAsync(Appointment* meeting, HSTRING subject, HSTRING comment, bool notifyInvitees, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryForwardMeetingAsync(Appointment* meeting, Foundation::Collections::IIterable<AppointmentInvitee*>* invitees, HSTRING subject, HSTRING forwardHeader, HSTRING comment, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryProposeNewTimeForMeetingAsync(Appointment* meeting, Foundation::DateTime newStartTime, Foundation::TimeSpan newDuration, HSTRING subject, HSTRING comment, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _TryUpdateMeetingResponseAsync(Appointment* meeting, AppointmentParticipantResponse response, HSTRING subject, HSTRING comment, bool sendUpdate, Foundation::IAsyncOperation<bool>* *result);
};
template<typename X> struct IAppointmentCalendar2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar2_adaptor::CanCancelMeetings)->_get_CanCancelMeetings(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::CanCancelMeetings)->_put_CanCancelMeetings(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanCancelMeetings;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar2_adaptor::CanCreateOrUpdateAppointments)->_get_CanCreateOrUpdateAppointments(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::CanCreateOrUpdateAppointments)->_put_CanCreateOrUpdateAppointments(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanCreateOrUpdateAppointments;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar2_adaptor::CanForwardMeetings)->_get_CanForwardMeetings(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::CanForwardMeetings)->_put_CanForwardMeetings(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanForwardMeetings;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar2_adaptor::CanNotifyInvitees)->_get_CanNotifyInvitees(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::CanNotifyInvitees)->_put_CanNotifyInvitees(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanNotifyInvitees;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar2_adaptor::CanProposeNewTimeForMeetings)->_get_CanProposeNewTimeForMeetings(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::CanProposeNewTimeForMeetings)->_put_CanProposeNewTimeForMeetings(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanProposeNewTimeForMeetings;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar2_adaptor::CanUpdateMeetingResponses)->_get_CanUpdateMeetingResponses(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::CanUpdateMeetingResponses)->_put_CanUpdateMeetingResponses(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CanUpdateMeetingResponses;
		struct : property {
			void put(const UI::Color& value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::DisplayColor)->_put_DisplayColor(value)); }
			void operator=(const UI::Color& value) { put(value); }
			void operator()(const UI::Color& value) { put(value); }
		} DisplayColor;
		struct : property {
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::IsHidden)->_put_IsHidden(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsHidden;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendar2_adaptor::MustNofityInvitees)->_get_MustNofityInvitees(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::MustNofityInvitees)->_put_MustNofityInvitees(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} MustNofityInvitees;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendar2_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppointmentCalendar2_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			ptr<AppointmentCalendarSyncManager> get() { AppointmentCalendarSyncManager* value; hrcheck(enc(&IAppointmentCalendar2_adaptor::SyncManager)->_get_SyncManager(&value)); return from_abi(value); }
			ptr<AppointmentCalendarSyncManager> operator()() { return get(); }
			operator ptr<AppointmentCalendarSyncManager> () { return get(); }
			ptr<AppointmentCalendarSyncManager> operator->() { return get(); }
		} SyncManager;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendar2_adaptor::UserDataAccountId)->_get_UserDataAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserDataAccountId;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryCreateOrUpdateAppointmentAsync(pptr<Appointment> appointment, bool notifyInvitees) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryCreateOrUpdateAppointmentAsync(appointment, notifyInvitees, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryCancelMeetingAsync(pptr<Appointment> meeting, hstring_ref subject, hstring_ref comment, bool notifyInvitees) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryCancelMeetingAsync(meeting, subject, comment, notifyInvitees, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryForwardMeetingAsync(pptr<Appointment> meeting, pptr<Foundation::Collections::IIterable<ptr<AppointmentInvitee>>> invitees, hstring_ref subject, hstring_ref forwardHeader, hstring_ref comment) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryForwardMeetingAsync(meeting, to_abi(invitees), subject, forwardHeader, comment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryProposeNewTimeForMeetingAsync(pptr<Appointment> meeting, const Foundation::DateTime& newStartTime, const Foundation::TimeSpan& newDuration, hstring_ref subject, hstring_ref comment) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryProposeNewTimeForMeetingAsync(meeting, newStartTime, newDuration, subject, comment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryUpdateMeetingResponseAsync(pptr<Appointment> meeting, AppointmentParticipantResponse response, hstring_ref subject, hstring_ref comment, bool sendUpdate) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_TryUpdateMeetingResponseAsync(meeting, response, subject, comment, sendUpdate, &result)); return from_abi(result); }
	IAppointmentCalendar2_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendar2, X> : Windows::ApplicationModel::Appointments::IAppointmentCalendar2_adaptor<X> { typedef adapt IAppointmentCalendar2; };
struct IAppointmentCalendar2 : IAppointmentCalendar2_raw, generate<IAppointmentCalendar2> {};

// IAppointmentCalendarSyncManager2
struct IAppointmentCalendarSyncManager2_raw : IInspectable {
	virtual STDMETHODIMP _put_Status(AppointmentCalendarSyncStatus value);
	virtual STDMETHODIMP _put_LastSuccessfulSyncTime(Foundation::DateTime value);
	virtual STDMETHODIMP _put_LastAttemptedSyncTime(Foundation::DateTime value);
};
template<typename X> struct IAppointmentCalendarSyncManager2_adaptor : X {
	union {
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IAppointmentCalendarSyncManager2_adaptor::LastAttemptedSyncTime)->_put_LastAttemptedSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastAttemptedSyncTime;
		struct : property {
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IAppointmentCalendarSyncManager2_adaptor::LastSuccessfulSyncTime)->_put_LastSuccessfulSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastSuccessfulSyncTime;
		struct : property {
			void put(AppointmentCalendarSyncStatus value) { hrcheck(enc(&IAppointmentCalendarSyncManager2_adaptor::Status)->_put_Status(value)); }
			void operator=(AppointmentCalendarSyncStatus value) { put(value); }
			void operator()(AppointmentCalendarSyncStatus value) { put(value); }
		} Status;
	};
	IAppointmentCalendarSyncManager2_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarSyncManager2, X> : Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager2_adaptor<X> { typedef adapt IAppointmentCalendarSyncManager2; };
struct IAppointmentCalendarSyncManager2 : IAppointmentCalendarSyncManager2_raw, generate<IAppointmentCalendarSyncManager2> {};

// IAppointmentCalendarSyncManager
struct IAppointmentCalendarSyncManager_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(AppointmentCalendarSyncStatus *value);
	virtual STDMETHODIMP _get_LastSuccessfulSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_LastAttemptedSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _SyncAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_SyncStatusChanged(Foundation::TypedEventHandler<AppointmentCalendarSyncManager*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SyncStatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAppointmentCalendarSyncManager_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppointmentCalendarSyncManager_adaptor::LastAttemptedSyncTime)->_get_LastAttemptedSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LastAttemptedSyncTime;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppointmentCalendarSyncManager_adaptor::LastSuccessfulSyncTime)->_get_LastSuccessfulSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} LastSuccessfulSyncTime;
		struct : property {
			AppointmentCalendarSyncStatus get() { AppointmentCalendarSyncStatus value; hrcheck(enc(&IAppointmentCalendarSyncManager_adaptor::Status)->_get_Status(&value)); return value; }
			AppointmentCalendarSyncStatus operator()() { return get(); }
			operator AppointmentCalendarSyncStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentCalendarSyncManager>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppointmentCalendarSyncManager_adaptor::SyncStatusChanged)->_add_SyncStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentCalendarSyncManager_adaptor::SyncStatusChanged)->_remove_SyncStatusChanged(token)); }
		} SyncStatusChanged;
	};
	ptr<Foundation::IAsyncOperation<bool>> SyncAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_SyncAsync(&result)); return from_abi(result); }
	IAppointmentCalendarSyncManager_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarSyncManager, X> : Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager_adaptor<X> { typedef adapt IAppointmentCalendarSyncManager; };
struct IAppointmentCalendarSyncManager : IAppointmentCalendarSyncManager_raw, generate<IAppointmentCalendarSyncManager> {};

// AppointmentCalendarSyncManager
template<typename X> struct statics<AppointmentCalendarSyncManager, X> : X {
	typedef typename X::root_type AppointmentCalendarSyncManager;
};
struct AppointmentCalendarSyncManager : generate<AppointmentCalendarSyncManager> {
	using IAppointmentCalendarSyncManager::LastAttemptedSyncTime;
	using IAppointmentCalendarSyncManager::Status;
	using IAppointmentCalendarSyncManager::LastSuccessfulSyncTime;
};

// IAppointmentCalendar3
struct IAppointmentCalendar3_raw : IInspectable {
	virtual STDMETHODIMP _RegisterSyncManagerAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IAppointmentCalendar3_adaptor : X {
	ptr<Foundation::IAsyncAction> RegisterSyncManagerAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_RegisterSyncManagerAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IAppointmentCalendar3, X> : Windows::ApplicationModel::Appointments::IAppointmentCalendar3_adaptor<X> { typedef adapt IAppointmentCalendar3; };
struct IAppointmentCalendar3 : IAppointmentCalendar3_raw, generate<IAppointmentCalendar3> {};

// IAppointmentPropertiesStatics
struct IAppointmentPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_Location(HSTRING *value);
	virtual STDMETHODIMP _get_StartTime(HSTRING *value);
	virtual STDMETHODIMP _get_Duration(HSTRING *value);
	virtual STDMETHODIMP _get_Reminder(HSTRING *value);
	virtual STDMETHODIMP _get_BusyStatus(HSTRING *value);
	virtual STDMETHODIMP _get_Sensitivity(HSTRING *value);
	virtual STDMETHODIMP _get_OriginalStartTime(HSTRING *value);
	virtual STDMETHODIMP _get_IsResponseRequested(HSTRING *value);
	virtual STDMETHODIMP _get_AllowNewTimeProposal(HSTRING *value);
	virtual STDMETHODIMP _get_AllDay(HSTRING *value);
	virtual STDMETHODIMP _get_Details(HSTRING *value);
	virtual STDMETHODIMP _get_OnlineMeetingLink(HSTRING *value);
	virtual STDMETHODIMP _get_ReplyTime(HSTRING *value);
	virtual STDMETHODIMP _get_Organizer(HSTRING *value);
	virtual STDMETHODIMP _get_UserResponse(HSTRING *value);
	virtual STDMETHODIMP _get_HasInvitees(HSTRING *value);
	virtual STDMETHODIMP _get_IsCanceledMeeting(HSTRING *value);
	virtual STDMETHODIMP _get_IsOrganizedByUser(HSTRING *value);
	virtual STDMETHODIMP _get_Recurrence(HSTRING *value);
	virtual STDMETHODIMP _get_Uri(HSTRING *value);
	virtual STDMETHODIMP _get_Invitees(HSTRING *value);
	virtual STDMETHODIMP _get_DefaultProperties(Foundation::Collections::IVector<HSTRING>* *value);
};

// IAppointmentPropertiesStatics2
struct IAppointmentPropertiesStatics2 : IInspectable {
	virtual STDMETHODIMP _get_ChangeNumber(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteChangeNumber(HSTRING *value);
	virtual STDMETHODIMP _get_DetailsKind(HSTRING *value);
};

// IAppointmentConflictResult
struct IAppointmentConflictResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(AppointmentConflictType *value);
	virtual STDMETHODIMP _get_Date(Foundation::DateTime *value);
};
template<typename X> struct IAppointmentConflictResult_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppointmentConflictResult_adaptor::Date)->_get_Date(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Date;
		struct : property {
			AppointmentConflictType get() { AppointmentConflictType value; hrcheck(enc(&IAppointmentConflictResult_adaptor::Type)->_get_Type(&value)); return value; }
			AppointmentConflictType operator()() { return get(); }
			operator AppointmentConflictType () { return get(); }
		} Type;
	};
	IAppointmentConflictResult_adaptor() {}
};
template<typename X> struct adapt<IAppointmentConflictResult, X> : Windows::ApplicationModel::Appointments::IAppointmentConflictResult_adaptor<X> { typedef adapt IAppointmentConflictResult; };
struct IAppointmentConflictResult : IAppointmentConflictResult_raw, generate<IAppointmentConflictResult> {};

// IAppointmentStoreChange
struct IAppointmentStoreChange_raw : IInspectable {
	virtual STDMETHODIMP _get_Appointment(Appointments::Appointment* *value);
	virtual STDMETHODIMP _get_ChangeType(AppointmentStoreChangeType *value);
};
template<typename X> struct IAppointmentStoreChange_adaptor : X {
	union {
		struct : property {
			ptr<Appointments::Appointment> get() { Appointments::Appointment* value; hrcheck(enc(&IAppointmentStoreChange_adaptor::Appointment)->_get_Appointment(&value)); return from_abi(value); }
			ptr<Appointments::Appointment> operator()() { return get(); }
			operator ptr<Appointments::Appointment> () { return get(); }
			ptr<Appointments::Appointment> operator->() { return get(); }
		} Appointment;
		struct : property {
			AppointmentStoreChangeType get() { AppointmentStoreChangeType value; hrcheck(enc(&IAppointmentStoreChange_adaptor::ChangeType)->_get_ChangeType(&value)); return value; }
			AppointmentStoreChangeType operator()() { return get(); }
			operator AppointmentStoreChangeType () { return get(); }
		} ChangeType;
	};
	IAppointmentStoreChange_adaptor() {}
};
template<typename X> struct adapt<IAppointmentStoreChange, X> : Windows::ApplicationModel::Appointments::IAppointmentStoreChange_adaptor<X> { typedef adapt IAppointmentStoreChange; };
struct IAppointmentStoreChange : IAppointmentStoreChange_raw, generate<IAppointmentStoreChange> {};

// IAppointmentStoreChange2
struct IAppointmentStoreChange2_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentCalendar(Appointments::AppointmentCalendar* *value);
};
template<typename X> struct IAppointmentStoreChange2_adaptor : X {
	union {
		struct : property {
			ptr<Appointments::AppointmentCalendar> get() { Appointments::AppointmentCalendar* value; hrcheck(enc(&IAppointmentStoreChange2_adaptor::AppointmentCalendar)->_get_AppointmentCalendar(&value)); return from_abi(value); }
			ptr<Appointments::AppointmentCalendar> operator()() { return get(); }
			operator ptr<Appointments::AppointmentCalendar> () { return get(); }
			ptr<Appointments::AppointmentCalendar> operator->() { return get(); }
		} AppointmentCalendar;
	};
	IAppointmentStoreChange2_adaptor() {}
};
template<typename X> struct adapt<IAppointmentStoreChange2, X> : Windows::ApplicationModel::Appointments::IAppointmentStoreChange2_adaptor<X> { typedef adapt IAppointmentStoreChange2; };
struct IAppointmentStoreChange2 : IAppointmentStoreChange2_raw, generate<IAppointmentStoreChange2> {};

// AppointmentCalendar
template<typename X> struct statics<AppointmentCalendar, X> : X {
	typedef typename X::root_type AppointmentCalendar;
};
struct AppointmentCalendar : generate<AppointmentCalendar> {
	using IAppointmentCalendar::FindAllInstancesAsync;
	using IAppointmentCalendar2::IsHidden;
	using IAppointmentCalendar::FindUnexpandedAppointmentsAsync;
	using IAppointmentCalendar2::DisplayColor;
	using IAppointmentCalendar::FindAppointmentsAsync;
};

// IAppointmentStoreChangeReader
struct IAppointmentStoreChangeReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentStoreChange*>*>* *result);
	virtual STDMETHODIMP _AcceptChanges();
	virtual STDMETHODIMP _AcceptChangesThrough(AppointmentStoreChange* lastChangeToAccept);
};
template<typename X> struct IAppointmentStoreChangeReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<AppointmentStoreChange>>>>> ReadBatchAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<AppointmentStoreChange*>*>* result; hrcheck(X::get()->_ReadBatchAsync(&result)); return from_abi(result); }
	void AcceptChanges() { hrcheck(X::get()->_AcceptChanges()); }
	void AcceptChangesThrough(pptr<AppointmentStoreChange> lastChangeToAccept) { hrcheck(X::get()->_AcceptChangesThrough(lastChangeToAccept)); }
};
template<typename X> struct adapt<IAppointmentStoreChangeReader, X> : Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader_adaptor<X> { typedef adapt IAppointmentStoreChangeReader; };
struct IAppointmentStoreChangeReader : IAppointmentStoreChangeReader_raw, generate<IAppointmentStoreChangeReader> {};

// AppointmentStoreChange
template<typename X> struct statics<AppointmentStoreChange, X> : X {
	typedef typename X::root_type AppointmentStoreChange;
};
struct AppointmentStoreChange : generate<AppointmentStoreChange> {};

// IAppointmentStoreChangeTracker
struct IAppointmentStoreChangeTracker_raw : IInspectable {
	virtual STDMETHODIMP _GetChangeReader(AppointmentStoreChangeReader* *value);
	virtual STDMETHODIMP _Enable();
	virtual STDMETHODIMP _Reset();
};
template<typename X> struct IAppointmentStoreChangeTracker_adaptor : X {
	ptr<AppointmentStoreChangeReader> GetChangeReader() { AppointmentStoreChangeReader* value; hrcheck(X::get()->_GetChangeReader(&value)); return from_abi(value); }
	void Enable() { hrcheck(X::get()->_Enable()); }
	void Reset() { hrcheck(X::get()->_Reset()); }
};
template<typename X> struct adapt<IAppointmentStoreChangeTracker, X> : Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker_adaptor<X> { typedef adapt IAppointmentStoreChangeTracker; };
struct IAppointmentStoreChangeTracker : IAppointmentStoreChangeTracker_raw, generate<IAppointmentStoreChangeTracker> {};

// AppointmentStoreChangeReader
template<typename X> struct statics<AppointmentStoreChangeReader, X> : X {
	typedef typename X::root_type AppointmentStoreChangeReader;
};
struct AppointmentStoreChangeReader : generate<AppointmentStoreChangeReader> {};

// IAppointmentStoreChangeTracker2
struct IAppointmentStoreChangeTracker2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsTracking(bool *value);
};
template<typename X> struct IAppointmentStoreChangeTracker2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentStoreChangeTracker2_adaptor::IsTracking)->_get_IsTracking(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTracking;
	};
	IAppointmentStoreChangeTracker2_adaptor() {}
};
template<typename X> struct adapt<IAppointmentStoreChangeTracker2, X> : Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker2_adaptor<X> { typedef adapt IAppointmentStoreChangeTracker2; };
struct IAppointmentStoreChangeTracker2 : IAppointmentStoreChangeTracker2_raw, generate<IAppointmentStoreChangeTracker2> {};

// IAppointmentStoreChangedEventArgs
struct IAppointmentStoreChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _GetDeferral(AppointmentStoreChangedDeferral* *result);
};
template<typename X> struct IAppointmentStoreChangedEventArgs_adaptor : X {
	ptr<AppointmentStoreChangedDeferral> GetDeferral() { AppointmentStoreChangedDeferral* result; hrcheck(X::get()->_GetDeferral(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IAppointmentStoreChangedEventArgs, X> : Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs_adaptor<X> { typedef adapt IAppointmentStoreChangedEventArgs; };
struct IAppointmentStoreChangedEventArgs : IAppointmentStoreChangedEventArgs_raw, generate<IAppointmentStoreChangedEventArgs> {};

// IAppointmentStoreChangedDeferral
struct IAppointmentStoreChangedDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IAppointmentStoreChangedDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IAppointmentStoreChangedDeferral, X> : Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral_adaptor<X> { typedef adapt IAppointmentStoreChangedDeferral; };
struct IAppointmentStoreChangedDeferral : IAppointmentStoreChangedDeferral_raw, generate<IAppointmentStoreChangedDeferral> {};

// AppointmentStoreChangedDeferral
template<typename X> struct statics<AppointmentStoreChangedDeferral, X> : X {
	typedef typename X::root_type AppointmentStoreChangedDeferral;
};
struct AppointmentStoreChangedDeferral : generate<AppointmentStoreChangedDeferral> {};

// IAppointmentStoreNotificationTriggerDetails
struct IAppointmentStoreNotificationTriggerDetails : IInspectable, generate<IAppointmentStoreNotificationTriggerDetails> {};

// AppointmentStoreChangeTracker
template<typename X> struct statics<AppointmentStoreChangeTracker, X> : X {
	typedef typename X::root_type AppointmentStoreChangeTracker;
};
struct AppointmentStoreChangeTracker : generate<AppointmentStoreChangeTracker> {};

// AppointmentConflictResult
template<typename X> struct statics<AppointmentConflictResult, X> : X {
	typedef typename X::root_type AppointmentConflictResult;
};
struct AppointmentConflictResult : generate<AppointmentConflictResult> {};

// AppointmentStoreChangedEventArgs
template<typename X> struct statics<AppointmentStoreChangedEventArgs, X> : X {
	typedef typename X::root_type AppointmentStoreChangedEventArgs;
};
struct AppointmentStoreChangedEventArgs : generate<AppointmentStoreChangedEventArgs> {};

// AppointmentProperties
template<typename> struct AppointmentProperties_statics {
	static struct _AllDay : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_AllDay(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AllDay;
	static struct _AllowNewTimeProposal : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_AllowNewTimeProposal(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AllowNewTimeProposal;
	static struct _BusyStatus : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_BusyStatus(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BusyStatus;
	static struct _DefaultProperties : property {
		ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_DefaultProperties(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
		ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
	} DefaultProperties;
	static struct _Details : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Details(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Details;
	static struct _Duration : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Duration(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Duration;
	static struct _HasInvitees : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_HasInvitees(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} HasInvitees;
	static struct _Invitees : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Invitees(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Invitees;
	static struct _IsCanceledMeeting : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_IsCanceledMeeting(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IsCanceledMeeting;
	static struct _IsOrganizedByUser : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_IsOrganizedByUser(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IsOrganizedByUser;
	static struct _IsResponseRequested : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_IsResponseRequested(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IsResponseRequested;
	static struct _Location : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Location(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Location;
	static struct _OnlineMeetingLink : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_OnlineMeetingLink(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} OnlineMeetingLink;
	static struct _Organizer : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Organizer(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Organizer;
	static struct _OriginalStartTime : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_OriginalStartTime(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} OriginalStartTime;
	static struct _Recurrence : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Recurrence(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Recurrence;
	static struct _Reminder : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Reminder(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Reminder;
	static struct _ReplyTime : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_ReplyTime(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ReplyTime;
	static struct _Sensitivity : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Sensitivity(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Sensitivity;
	static struct _StartTime : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_StartTime(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} StartTime;
	static struct _Subject : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Subject(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Subject;
	static struct _Uri : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_Uri(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Uri;
	static struct _UserResponse : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics>()->_get_UserResponse(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} UserResponse;
	static struct _ChangeNumber : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics2>()->_get_ChangeNumber(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ChangeNumber;
	static struct _DetailsKind : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics2>()->_get_DetailsKind(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DetailsKind;
	static struct _RemoteChangeNumber : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<AppointmentProperties, IAppointmentPropertiesStatics2>()->_get_RemoteChangeNumber(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RemoteChangeNumber;
};
template<typename X> typename AppointmentProperties_statics<X>::_AllDay AppointmentProperties_statics<X>::AllDay;
template<typename X> typename AppointmentProperties_statics<X>::_AllowNewTimeProposal AppointmentProperties_statics<X>::AllowNewTimeProposal;
template<typename X> typename AppointmentProperties_statics<X>::_BusyStatus AppointmentProperties_statics<X>::BusyStatus;
template<typename X> typename AppointmentProperties_statics<X>::_DefaultProperties AppointmentProperties_statics<X>::DefaultProperties;
template<typename X> typename AppointmentProperties_statics<X>::_Details AppointmentProperties_statics<X>::Details;
template<typename X> typename AppointmentProperties_statics<X>::_Duration AppointmentProperties_statics<X>::Duration;
template<typename X> typename AppointmentProperties_statics<X>::_HasInvitees AppointmentProperties_statics<X>::HasInvitees;
template<typename X> typename AppointmentProperties_statics<X>::_Invitees AppointmentProperties_statics<X>::Invitees;
template<typename X> typename AppointmentProperties_statics<X>::_IsCanceledMeeting AppointmentProperties_statics<X>::IsCanceledMeeting;
template<typename X> typename AppointmentProperties_statics<X>::_IsOrganizedByUser AppointmentProperties_statics<X>::IsOrganizedByUser;
template<typename X> typename AppointmentProperties_statics<X>::_IsResponseRequested AppointmentProperties_statics<X>::IsResponseRequested;
template<typename X> typename AppointmentProperties_statics<X>::_Location AppointmentProperties_statics<X>::Location;
template<typename X> typename AppointmentProperties_statics<X>::_OnlineMeetingLink AppointmentProperties_statics<X>::OnlineMeetingLink;
template<typename X> typename AppointmentProperties_statics<X>::_Organizer AppointmentProperties_statics<X>::Organizer;
template<typename X> typename AppointmentProperties_statics<X>::_OriginalStartTime AppointmentProperties_statics<X>::OriginalStartTime;
template<typename X> typename AppointmentProperties_statics<X>::_Recurrence AppointmentProperties_statics<X>::Recurrence;
template<typename X> typename AppointmentProperties_statics<X>::_Reminder AppointmentProperties_statics<X>::Reminder;
template<typename X> typename AppointmentProperties_statics<X>::_ReplyTime AppointmentProperties_statics<X>::ReplyTime;
template<typename X> typename AppointmentProperties_statics<X>::_Sensitivity AppointmentProperties_statics<X>::Sensitivity;
template<typename X> typename AppointmentProperties_statics<X>::_StartTime AppointmentProperties_statics<X>::StartTime;
template<typename X> typename AppointmentProperties_statics<X>::_Subject AppointmentProperties_statics<X>::Subject;
template<typename X> typename AppointmentProperties_statics<X>::_Uri AppointmentProperties_statics<X>::Uri;
template<typename X> typename AppointmentProperties_statics<X>::_UserResponse AppointmentProperties_statics<X>::UserResponse;
template<typename X> typename AppointmentProperties_statics<X>::_ChangeNumber AppointmentProperties_statics<X>::ChangeNumber;
template<typename X> typename AppointmentProperties_statics<X>::_DetailsKind AppointmentProperties_statics<X>::DetailsKind;
template<typename X> typename AppointmentProperties_statics<X>::_RemoteChangeNumber AppointmentProperties_statics<X>::RemoteChangeNumber;

template<typename X> struct statics<AppointmentProperties, X> : X, Windows::ApplicationModel::Appointments::AppointmentProperties_statics<void> {
	typedef typename X::root_type AppointmentProperties;
};
struct AppointmentProperties : generate<AppointmentProperties> {};

// AppointmentStoreNotificationTriggerDetails
template<typename X> struct statics<AppointmentStoreNotificationTriggerDetails, X> : X {
	typedef typename X::root_type AppointmentStoreNotificationTriggerDetails;
};
struct AppointmentStoreNotificationTriggerDetails : generate<AppointmentStoreNotificationTriggerDetails> {};
}}}
} // namespace iso_winrt
