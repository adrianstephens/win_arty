#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Background

#include "Windows.ApplicationModel.Background.0.h"
#include "Windows.Devices.Sensors.0.h"
#include "Windows.Networking.Sockets.0.h"
#include "Windows.Devices.SmartCards.0.h"
#include "Windows.Storage.Provider.0.h"
#include "Windows.Devices.Bluetooth.Background.0.h"
#include "Windows.Devices.Bluetooth.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.UI.Notifications.0.h"
#include "Windows.ApplicationModel.Calls.Background.0.h"
#include "Windows.Devices.Geolocation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Activation {
struct BackgroundActivatedEventArgs;
}}
namespace Devices { namespace Bluetooth { namespace Advertisement {
struct BluetoothLEAdvertisement;
struct BluetoothLEAdvertisementFilter;
}
namespace GenericAttributeProfile {
struct GattCharacteristic;
struct GattServiceProviderAdvertisingParameters;
struct GattLocalService;
}}
namespace Sms {
struct SmsFilterRules;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
template<typename T> struct IVector;
template<typename K, typename V> struct IMapView;
struct ValueSet;
}}
namespace Networking {
struct HostName;
}
namespace Storage {
struct StorageLibraryChangeTracker;
struct StorageLibrary;
}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::ApplicationModel::Background::BackgroundAlarmApplicationContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Background::AlarmAccessStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::AlarmApplicationManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Background::IPhoneTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTrigger> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IPhoneTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::PhoneTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IPhoneTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::ICommunicationBlockingAppSetAsActiveTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::CommunicationBlockingAppSetAsActiveTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ICommunicationBlockingAppSetAsActiveTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ISmartCardTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ISmartCardTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::SmartCardTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ISmartCardTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::ApplicationTriggerResult> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::IApplicationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ApplicationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IApplicationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IApplicationTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ApplicationTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Background::IApplicationTriggerDetails> {};
template<> struct def<Windows::ApplicationModel::Background::MediaProcessingTriggerResult> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::IMediaProcessingTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::MediaProcessingTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IMediaProcessingTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IContentPrefetchTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IContentPrefetchTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ContentPrefetchTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IContentPrefetchTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::ISecondaryAuthenticationFactorAuthenticationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::SecondaryAuthenticationFactorAuthenticationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ISecondaryAuthenticationFactorAuthenticationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::SystemTriggerType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::SystemConditionType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::ISystemTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ISystemTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::SystemTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ISystemTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::ISystemConditionFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundCondition> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ISystemCondition> : interface_type<Windows::ApplicationModel::Background::IBackgroundCondition> {};
template<> struct def<Windows::ApplicationModel::Background::SystemCondition> : class_type<Platform::Object, Windows::ApplicationModel::Background::ISystemCondition>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::DeviceManufacturerNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::CustomSystemEventTriggerRecurrence> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::ICustomSystemEventTrigger> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ICustomSystemEventTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::CustomSystemEventTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ICustomSystemEventTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::CachedFileUpdaterTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails> {};
template<> struct def<Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::CachedFileUpdaterTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ITimeTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ITimeTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::TimeTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ITimeTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IMaintenanceTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IMaintenanceTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::MaintenanceTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IMaintenanceTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::AppointmentStoreNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundAccessStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundAccessRequestKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundExecutionManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskInstance> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskRegistration3> : overridable_type<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskRegistration2> : overridable_type<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskRegistration> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTaskRegistration, Windows::ApplicationModel::Background::IBackgroundTaskRegistration2, Windows::ApplicationModel::Background::IBackgroundTaskRegistration3> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskCancellationReason> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskCanceledEventHandler> : delegate_type {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTaskDeferral> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundWorkCostValue> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskThrottleCounter> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskProgressEventHandler> : delegate_type {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventHandler> : delegate_type {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundWorkCostStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskInstance2> : overridable_type<Windows::ApplicationModel::Background::IBackgroundTaskInstance> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskInstance4> : overridable_type<Windows::ApplicationModel::Background::IBackgroundTaskInstance> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTask> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroupFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroup> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskRegistrationGroup> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroup>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskBuilder> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskBuilder2> : interface_type<Windows::ApplicationModel::Background::IBackgroundTaskBuilder> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskBuilder3> : interface_type<Windows::ApplicationModel::Background::IBackgroundTaskBuilder> {};
template<> struct def<Windows::ApplicationModel::Background::IBackgroundTaskBuilder4> : interface_type<Windows::ApplicationModel::Background::IBackgroundTaskBuilder> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundTaskBuilder> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTaskBuilder, Windows::ApplicationModel::Background::IBackgroundTaskBuilder2, Windows::ApplicationModel::Background::IBackgroundTaskBuilder3, Windows::ApplicationModel::Background::IBackgroundTaskBuilder4> {};
template<> struct def<Windows::ApplicationModel::Background::BackgroundWorkCost> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::ApplicationModel::Background::IChatMessageNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ChatMessageNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IChatMessageNotificationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ChatMessageReceivedNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::RcsEndUserMessageAvailableTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IContactStoreNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ContactStoreNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IContactStoreNotificationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::EmailStoreNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::MobileBroadbandRegistrationStateChangeTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::MobileBroadbandRadioStateChangeTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::MobileBroadbandPinLockStateChangeTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::MobileBroadbandDeviceServiceNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::NetworkOperatorDataUsageTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::TetheringEntitlementCheckTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::MobileBroadbandPcoDataChangeTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ISmsMessageReceivedTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::SmsMessageReceivedTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IStorageLibraryContentChangedTriggerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IStorageLibraryChangeTrackerTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::StorageLibraryChangeTrackerTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::PaymentAppCanMakePaymentTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::DeviceTriggerResult> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::IDeviceUseTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IDeviceServicingTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::DeviceUseTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IDeviceUseTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::DeviceServicingTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IDeviceServicingTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IRfcommConnectionTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::RfcommConnectionTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IRfcommConnectionTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IDeviceConnectionChangeTriggerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTriggerFactory2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger, Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger2>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IGattServiceProviderTriggerResult> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IGattServiceProviderTriggerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IGattServiceProviderTrigger> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::GattServiceProviderTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IGattServiceProviderTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::GattServiceProviderTriggerResult> : class_type<Platform::Object, Windows::ApplicationModel::Background::IGattServiceProviderTriggerResult> {};
template<> struct def<Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::BluetoothLEAdvertisementWatcherTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::BluetoothLEAdvertisementPublisherTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IDeviceWatcherTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::DeviceWatcherTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IDeviceWatcherTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::LocationTriggerType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Background::ILocationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ILocationTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::LocationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ILocationTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IGeovisitTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::GeovisitTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IGeovisitTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IActivitySensorTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IActivitySensorTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ActivitySensorTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IActivitySensorTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::ISensorDataThresholdTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ISensorDataThresholdTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::SensorDataThresholdTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::ISensorDataThresholdTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::NetworkOperatorHotspotAuthenticationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::ISocketActivityTrigger> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::SocketActivityTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger, Windows::ApplicationModel::Background::ISocketActivityTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::IPushNotificationTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::PushNotificationTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IToastNotificationHistoryChangedTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IToastNotificationActionTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::ToastNotificationActionTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IUserNotificationChangedTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::UserNotificationChangedTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IBackgroundTrigger>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Background::IAppBroadcastTriggerProviderInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::AppBroadcastTriggerProviderInfo> : class_type<Platform::Object, Windows::ApplicationModel::Background::IAppBroadcastTriggerProviderInfo> {};
template<> struct def<Windows::ApplicationModel::Background::IAppBroadcastTriggerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Background::IAppBroadcastTrigger> : interface_type<Windows::ApplicationModel::Background::IBackgroundTrigger> {};
template<> struct def<Windows::ApplicationModel::Background::AppBroadcastTrigger> : class_type<Platform::Object, Windows::ApplicationModel::Background::IAppBroadcastTrigger>, custom_activators {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics> { define_guid(0xCA03FA3B, 0xCCE6, 0x4DE2, 0xB0, 0x9B, 0x96, 0x28, 0xBD, 0x33, 0xBB, 0xBE);};
template<> struct uuid<Windows::ApplicationModel::Background::IPhoneTriggerFactory> { define_guid(0xA0D93CDA, 0x5FC1, 0x48FB, 0xA5, 0x46, 0x32, 0x26, 0x20, 0x40, 0x15, 0x7B);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTrigger> { define_guid(0x84B3A058, 0x6027, 0x4B87, 0x97, 0x90, 0xBD, 0xF3, 0xF7, 0x57, 0xDB, 0xD7);};
template<> struct uuid<Windows::ApplicationModel::Background::IPhoneTrigger> { define_guid(0x8DCFE99B, 0xD4C5, 0x49F1, 0xB7, 0xD3, 0x82, 0xE8, 0x7A, 0xE, 0x9D, 0xDE);};
template<> struct uuid<Windows::ApplicationModel::Background::ICommunicationBlockingAppSetAsActiveTrigger> { define_guid(0xFB91F28A, 0x16A5, 0x486D, 0x97, 0x4C, 0x78, 0x35, 0xA8, 0x47, 0x7B, 0xE2);};
template<> struct uuid<Windows::ApplicationModel::Background::ISmartCardTriggerFactory> { define_guid(0x63BF54C3, 0x89C1, 0x4E00, 0xA9, 0xD3, 0x97, 0xC6, 0x29, 0x26, 0x9D, 0xAD);};
template<> struct uuid<Windows::ApplicationModel::Background::ISmartCardTrigger> { define_guid(0xF53BC5AC, 0x84CA, 0x4972, 0x8C, 0xE9, 0xE5, 0x8F, 0x97, 0xB3, 0x7A, 0x50);};
template<> struct uuid<Windows::ApplicationModel::Background::IApplicationTrigger> { define_guid(0xB468630, 0x9574, 0x492C, 0x9E, 0x93, 0x1A, 0x3A, 0xE6, 0x33, 0x5F, 0xE9);};
template<> struct uuid<Windows::ApplicationModel::Background::IApplicationTriggerDetails> { define_guid(0x97DC6AB2, 0x2219, 0x4A9E, 0x9C, 0x5E, 0x41, 0xD0, 0x47, 0xF7, 0x6E, 0x82);};
template<> struct uuid<Windows::ApplicationModel::Background::IMediaProcessingTrigger> { define_guid(0x9A95BE65, 0x8A52, 0x4B30, 0x90, 0x11, 0xCF, 0x38, 0x4, 0xE, 0xA8, 0xB0);};
template<> struct uuid<Windows::ApplicationModel::Background::IContentPrefetchTriggerFactory> { define_guid(0xC2643EDA, 0x8A03, 0x409E, 0xB8, 0xC4, 0x88, 0x81, 0x4C, 0x28, 0xCC, 0xB6);};
template<> struct uuid<Windows::ApplicationModel::Background::IContentPrefetchTrigger> { define_guid(0x710627EE, 0x4FA, 0x440B, 0x80, 0xC0, 0x17, 0x32, 0x2, 0x19, 0x9E, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::Background::ISecondaryAuthenticationFactorAuthenticationTrigger> { define_guid(0xF237F327, 0x5181, 0x4F24, 0x96, 0xA7, 0x70, 0xA, 0x4E, 0x5F, 0xAC, 0x62);};
template<> struct uuid<Windows::ApplicationModel::Background::ISystemTriggerFactory> { define_guid(0xE80423D4, 0x8791, 0x4579, 0x81, 0x26, 0x87, 0xEC, 0x8A, 0xAA, 0x40, 0x7A);};
template<> struct uuid<Windows::ApplicationModel::Background::ISystemTrigger> { define_guid(0x1D80C776, 0x3748, 0x4463, 0x8D, 0x7E, 0x27, 0x6D, 0xC1, 0x39, 0xAC, 0x1C);};
template<> struct uuid<Windows::ApplicationModel::Background::ISystemConditionFactory> { define_guid(0xD269D1F1, 0x5A7, 0x49AE, 0x87, 0xD7, 0x16, 0xB2, 0xB8, 0xB9, 0xA5, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundCondition> { define_guid(0xAE48A1EE, 0x8951, 0x400A, 0x83, 0x2, 0x9C, 0x9C, 0x9A, 0x2A, 0x3A, 0x3B);};
template<> struct uuid<Windows::ApplicationModel::Background::ISystemCondition> { define_guid(0xC15FB476, 0x89C5, 0x420B, 0xAB, 0xD3, 0xFB, 0x30, 0x30, 0x47, 0x21, 0x28);};
template<> struct uuid<Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory> { define_guid(0xA223E00, 0x27D7, 0x4353, 0xAD, 0xB9, 0x92, 0x65, 0xAA, 0xEA, 0x57, 0x9D);};
template<> struct uuid<Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger> { define_guid(0x90089CC6, 0x63CD, 0x480C, 0x95, 0xD1, 0x6E, 0x6A, 0xEF, 0x80, 0x1E, 0x4A);};
template<> struct uuid<Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTriggerFactory> { define_guid(0x7955DE75, 0x25BB, 0x4153, 0xA1, 0xA2, 0x30, 0x29, 0xFC, 0xAB, 0xB6, 0x52);};
template<> struct uuid<Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTrigger> { define_guid(0x81278AB5, 0x41AB, 0x16DA, 0x86, 0xC2, 0x7F, 0x7B, 0xF0, 0x91, 0x2F, 0x5B);};
template<> struct uuid<Windows::ApplicationModel::Background::ICustomSystemEventTrigger> { define_guid(0xF3596798, 0xCF6B, 0x4EF4, 0xA0, 0xCA, 0x29, 0xCF, 0x4A, 0x27, 0x8C, 0x87);};
template<> struct uuid<Windows::ApplicationModel::Background::ICustomSystemEventTriggerFactory> { define_guid(0x6BCB16C5, 0xF2DC, 0x41B2, 0x9E, 0xFD, 0xB9, 0x6B, 0xDC, 0xD1, 0x3C, 0xED);};
template<> struct uuid<Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails> { define_guid(0x71838C13, 0x1314, 0x47B4, 0x95, 0x97, 0xDC, 0x7E, 0x24, 0x8C, 0x17, 0xCC);};
template<> struct uuid<Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger> { define_guid(0xE21CAEEB, 0x32F2, 0x4D31, 0xB5, 0x53, 0xB9, 0xE0, 0x1B, 0xDE, 0x37, 0xE0);};
template<> struct uuid<Windows::ApplicationModel::Background::ITimeTriggerFactory> { define_guid(0x38C682FE, 0x9B54, 0x45E6, 0xB2, 0xF3, 0x26, 0x9B, 0x87, 0xA6, 0xF7, 0x34);};
template<> struct uuid<Windows::ApplicationModel::Background::ITimeTrigger> { define_guid(0x656E5556, 0xB2A, 0x4377, 0xBA, 0x70, 0x3B, 0x45, 0xA9, 0x35, 0x54, 0x7F);};
template<> struct uuid<Windows::ApplicationModel::Background::IMaintenanceTriggerFactory> { define_guid(0x4B3DDB2E, 0x97DD, 0x4629, 0x88, 0xB0, 0xB0, 0x6C, 0xF9, 0x48, 0x2A, 0xE5);};
template<> struct uuid<Windows::ApplicationModel::Background::IMaintenanceTrigger> { define_guid(0x68184C83, 0xFC22, 0x4CE5, 0x84, 0x1A, 0x72, 0x39, 0xA9, 0x81, 0x0, 0x47);};
template<> struct uuid<Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger> { define_guid(0x64D4040C, 0xC201, 0x42AD, 0xAA, 0x2A, 0xE2, 0x1B, 0xA3, 0x42, 0x5B, 0x6D);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics> { define_guid(0xE826EA58, 0x66A9, 0x4D41, 0x83, 0xD4, 0xB4, 0xC1, 0x8C, 0x87, 0xB8, 0x46);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics2> { define_guid(0x469B24EF, 0x9BBB, 0x4E18, 0x99, 0x9A, 0xFD, 0x65, 0x12, 0x93, 0x1B, 0xE9);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskInstance> { define_guid(0x865BDA7A, 0x21D8, 0x4573, 0x8F, 0x32, 0x92, 0x8A, 0x1B, 0x6, 0x41, 0xF6);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics2> { define_guid(0x174B671E, 0xB20D, 0x4FA9, 0xAD, 0x9A, 0xE9, 0x3A, 0xD6, 0xC7, 0x1E, 0x1);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics> { define_guid(0x4C542F69, 0xB000, 0x42BA, 0xA0, 0x93, 0x6A, 0x56, 0x3C, 0x65, 0xE3, 0xF8);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> { define_guid(0x10654CC2, 0xA26E, 0x43BF, 0x8C, 0x12, 0x1F, 0xB4, 0xD, 0xBF, 0xBF, 0xA0);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskRegistration3> { define_guid(0xFE338195, 0x9423, 0x4D8B, 0x83, 0xD, 0xB1, 0xDD, 0x2C, 0x7B, 0xAD, 0xD5);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskRegistration2> { define_guid(0x6138C703, 0xBB86, 0x4112, 0xAF, 0xC3, 0x7F, 0x93, 0x9B, 0x16, 0x6E, 0x3B);};
template<> struct uuid<Windows::ApplicationModel::Background::BackgroundTaskCanceledEventHandler> { define_guid(0xA6C4BAC0, 0x51F8, 0x4C57, 0xAC, 0x3F, 0x15, 0x6D, 0xD1, 0x68, 0xC, 0x4F);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskDeferral> { define_guid(0x93CC156D, 0xAF27, 0x4DD3, 0x84, 0x6E, 0x24, 0xEE, 0x40, 0xCA, 0xDD, 0x25);};
template<> struct uuid<Windows::ApplicationModel::Background::BackgroundTaskProgressEventHandler> { define_guid(0x46E0683C, 0x8A88, 0x4C99, 0x80, 0x4C, 0x76, 0x89, 0x7F, 0x62, 0x77, 0xA6);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs> { define_guid(0xFB1468AC, 0x8332, 0x4D0A, 0x95, 0x32, 0x3, 0xEA, 0xE6, 0x84, 0xDA, 0x31);};
template<> struct uuid<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventHandler> { define_guid(0x5B38E929, 0xA086, 0x46A7, 0xA6, 0x78, 0x43, 0x91, 0x35, 0x82, 0x2B, 0xCF);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs> { define_guid(0x565D25CF, 0xF209, 0x48F4, 0x99, 0x67, 0x2B, 0x18, 0x4F, 0x7B, 0xFB, 0xF0);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundWorkCostStatics> { define_guid(0xC740A662, 0xC310, 0x4B82, 0xB3, 0xE3, 0x3B, 0xCF, 0xB9, 0xE4, 0xC7, 0x7D);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskInstance2> { define_guid(0x4F7D0176, 0xC76, 0x4FB4, 0x89, 0x6D, 0x5D, 0xE1, 0x86, 0x41, 0x22, 0xF6);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskInstance4> { define_guid(0x7F29F23C, 0xAA04, 0x4B08, 0x97, 0xB0, 0x6, 0xD8, 0x74, 0xCD, 0xAB, 0xF5);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTask> { define_guid(0x7D13D534, 0xFD12, 0x43CE, 0x8C, 0x22, 0xEA, 0x1F, 0xF1, 0x3C, 0x6, 0xDF);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroupFactory> { define_guid(0x83D92B69, 0x44CF, 0x4631, 0x97, 0x40, 0x3, 0xC7, 0xD8, 0x74, 0x1B, 0xC5);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroup> { define_guid(0x2AB1919A, 0x871B, 0x4167, 0x8A, 0x76, 0x5, 0x5C, 0xD6, 0x7B, 0x5B, 0x23);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskBuilder> { define_guid(0x351550E, 0x3E64, 0x4572, 0xA9, 0x3A, 0x84, 0x7, 0x5A, 0x37, 0xC9, 0x17);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskBuilder2> { define_guid(0x6AE7CFB1, 0x104F, 0x406D, 0x8D, 0xB6, 0x84, 0x4A, 0x57, 0xF, 0x42, 0xBB);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskBuilder3> { define_guid(0x28C74F4A, 0x8BA9, 0x4C09, 0xA2, 0x4F, 0x19, 0x68, 0x3E, 0x2C, 0x92, 0x4C);};
template<> struct uuid<Windows::ApplicationModel::Background::IBackgroundTaskBuilder4> { define_guid(0x4755E522, 0xCBA2, 0x4E35, 0xBD, 0x16, 0xA6, 0xDA, 0x7F, 0x1C, 0x19, 0xAA);};
template<> struct uuid<Windows::ApplicationModel::Background::IChatMessageNotificationTrigger> { define_guid(0x513B43BF, 0x1D40, 0x5C5D, 0x78, 0xF5, 0xC9, 0x23, 0xFE, 0xE3, 0x73, 0x9E);};
template<> struct uuid<Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger> { define_guid(0x3EA3760E, 0xBAF5, 0x4077, 0x88, 0xE9, 0x6, 0xC, 0xF6, 0xF0, 0xC6, 0xD5);};
template<> struct uuid<Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger> { define_guid(0x986D0D6A, 0xB2F6, 0x467F, 0xA9, 0x78, 0xA4, 0x40, 0x91, 0xC1, 0x1A, 0x66);};
template<> struct uuid<Windows::ApplicationModel::Background::IContactStoreNotificationTrigger> { define_guid(0xC833419B, 0x4705, 0x4571, 0x9A, 0x16, 0x6, 0xB9, 0x97, 0xBF, 0x9C, 0x96);};
template<> struct uuid<Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger> { define_guid(0x986D06DA, 0x47EB, 0x4268, 0xA4, 0xF2, 0xF3, 0xF7, 0x71, 0x88, 0x38, 0x8A);};
template<> struct uuid<Windows::ApplicationModel::Background::ISmsMessageReceivedTriggerFactory> { define_guid(0xEA3AD8C8, 0x6BA4, 0x4AB2, 0x8D, 0x21, 0xBC, 0x6B, 0x9, 0xC7, 0x75, 0x64);};
template<> struct uuid<Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger> { define_guid(0x1637E0A7, 0x829C, 0x45BC, 0x92, 0x9B, 0xA1, 0xE7, 0xEA, 0x78, 0xD8, 0x9B);};
template<> struct uuid<Windows::ApplicationModel::Background::IStorageLibraryContentChangedTriggerStatics> { define_guid(0x7F9F1B39, 0x5F90, 0x4E12, 0x91, 0x4E, 0xA7, 0xD8, 0xE0, 0xBB, 0xFB, 0x18);};
template<> struct uuid<Windows::ApplicationModel::Background::IStorageLibraryChangeTrackerTriggerFactory> { define_guid(0x1EB0FFD0, 0x5A85, 0x499E, 0xA8, 0x88, 0x82, 0x46, 0x7, 0x12, 0x4F, 0x50);};
template<> struct uuid<Windows::ApplicationModel::Background::IDeviceUseTrigger> { define_guid(0xDA68011, 0x334F, 0x4D57, 0xB6, 0xEC, 0x6D, 0xCA, 0x64, 0xB4, 0x12, 0xE4);};
template<> struct uuid<Windows::ApplicationModel::Background::IDeviceServicingTrigger> { define_guid(0x1AB217AD, 0x6E34, 0x49D3, 0x9E, 0x6F, 0x17, 0xF1, 0xB6, 0xDF, 0xA8, 0x81);};
template<> struct uuid<Windows::ApplicationModel::Background::IRfcommConnectionTrigger> { define_guid(0xE8C4CAE2, 0xB53, 0x4464, 0x93, 0x94, 0xFD, 0x87, 0x56, 0x54, 0xDE, 0x64);};
template<> struct uuid<Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger> { define_guid(0x90875E64, 0x3CDD, 0x4EFB, 0xAB, 0x1C, 0x5B, 0x3B, 0x6A, 0x60, 0xCE, 0x34);};
template<> struct uuid<Windows::ApplicationModel::Background::IDeviceConnectionChangeTriggerStatics> { define_guid(0xC3EA246A, 0x4EFD, 0x4498, 0xAA, 0x60, 0xA4, 0xE4, 0xE3, 0xB1, 0x7A, 0xB9);};
template<> struct uuid<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTriggerFactory> { define_guid(0x57BA1995, 0xB143, 0x4575, 0x9F, 0x6B, 0xFD, 0x59, 0xD9, 0x3A, 0xCE, 0x1A);};
template<> struct uuid<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTriggerFactory2> { define_guid(0x5998E91F, 0x8A53, 0x4E9F, 0xA3, 0x2C, 0x23, 0xCD, 0x33, 0x66, 0x4C, 0xEE);};
template<> struct uuid<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger2> { define_guid(0x9322A2C4, 0xAE0E, 0x42F2, 0xB2, 0x8C, 0xF5, 0x13, 0x72, 0xE6, 0x92, 0x45);};
template<> struct uuid<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger> { define_guid(0xE25F8FC8, 0x696, 0x474F, 0xA7, 0x32, 0xF2, 0x92, 0xB0, 0xCE, 0xBC, 0x5D);};
template<> struct uuid<Windows::ApplicationModel::Background::IGattServiceProviderTriggerResult> { define_guid(0x3C4691B1, 0xB198, 0x4E84, 0xBA, 0xD4, 0xCF, 0x4A, 0xD2, 0x99, 0xED, 0x3A);};
template<> struct uuid<Windows::ApplicationModel::Background::IGattServiceProviderTriggerStatics> { define_guid(0xB413A36A, 0xE294, 0x4591, 0xA5, 0xA6, 0x64, 0x89, 0x1A, 0x82, 0x81, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Background::IGattServiceProviderTrigger> { define_guid(0xDDC6A3E9, 0x1557, 0x4BD8, 0x85, 0x42, 0x46, 0x8A, 0xA0, 0xC6, 0x96, 0xF6);};
template<> struct uuid<Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger> { define_guid(0x1AAB1819, 0xBCE1, 0x48EB, 0xA8, 0x27, 0x59, 0xFB, 0x7C, 0xEE, 0x52, 0xA6);};
template<> struct uuid<Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger> { define_guid(0xAB3E2612, 0x25D3, 0x48AE, 0x87, 0x24, 0xD8, 0x18, 0x77, 0xAE, 0x61, 0x29);};
template<> struct uuid<Windows::ApplicationModel::Background::IDeviceWatcherTrigger> { define_guid(0xA4617FDD, 0x8573, 0x4260, 0xBE, 0xFC, 0x5B, 0xEC, 0x89, 0xCB, 0x69, 0x3D);};
template<> struct uuid<Windows::ApplicationModel::Background::ILocationTrigger> { define_guid(0x47666A1C, 0x6877, 0x481E, 0x80, 0x26, 0xFF, 0x7E, 0x14, 0xA8, 0x11, 0xA0);};
template<> struct uuid<Windows::ApplicationModel::Background::ILocationTriggerFactory> { define_guid(0x1106BB07, 0xFF69, 0x4E09, 0xAA, 0x8B, 0x13, 0x84, 0xEA, 0x47, 0x5E, 0x98);};
template<> struct uuid<Windows::ApplicationModel::Background::IGeovisitTrigger> { define_guid(0x4818EDAA, 0x4E1, 0x4127, 0x9A, 0x4C, 0x19, 0x35, 0x1B, 0x8A, 0x80, 0xA4);};
template<> struct uuid<Windows::ApplicationModel::Background::IActivitySensorTrigger> { define_guid(0xD0DD4342, 0xE37B, 0x4823, 0xA5, 0xFE, 0x6B, 0x31, 0xDF, 0xEF, 0xDE, 0xB0);};
template<> struct uuid<Windows::ApplicationModel::Background::IActivitySensorTriggerFactory> { define_guid(0xA72691C3, 0x3837, 0x44F7, 0x83, 0x1B, 0x1, 0x32, 0xCC, 0x87, 0x2B, 0xC3);};
template<> struct uuid<Windows::ApplicationModel::Background::ISensorDataThresholdTrigger> { define_guid(0x5BC0F372, 0xD48B, 0x4B7F, 0xAB, 0xEC, 0x15, 0xF9, 0xBA, 0xCC, 0x12, 0xE2);};
template<> struct uuid<Windows::ApplicationModel::Background::ISensorDataThresholdTriggerFactory> { define_guid(0x921FE675, 0x7DF0, 0x4DA3, 0x97, 0xB3, 0xE5, 0x44, 0xEE, 0x85, 0x7F, 0xE6);};
template<> struct uuid<Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger> { define_guid(0xE756C791, 0x3001, 0x4DE5, 0x83, 0xC7, 0xDE, 0x61, 0xD8, 0x88, 0x31, 0xD0);};
template<> struct uuid<Windows::ApplicationModel::Background::ISocketActivityTrigger> { define_guid(0xA9BBF810, 0x9DDE, 0x4F8A, 0x83, 0xE3, 0xB0, 0xE0, 0xE7, 0xA5, 0xD, 0x70);};
template<> struct uuid<Windows::ApplicationModel::Background::IPushNotificationTriggerFactory> { define_guid(0x6DD8ED1B, 0x458E, 0x4FC2, 0xBC, 0x2E, 0xD5, 0x66, 0x4F, 0x77, 0xED, 0x19);};
template<> struct uuid<Windows::ApplicationModel::Background::IToastNotificationHistoryChangedTriggerFactory> { define_guid(0x81C6FAAD, 0x8797, 0x4785, 0x81, 0xB4, 0xB0, 0xCC, 0xCB, 0x73, 0xD1, 0xD9);};
template<> struct uuid<Windows::ApplicationModel::Background::IToastNotificationActionTriggerFactory> { define_guid(0xB09DFC27, 0x6480, 0x4349, 0x81, 0x25, 0x97, 0xB3, 0xEF, 0xAA, 0xA, 0x3A);};
template<> struct uuid<Windows::ApplicationModel::Background::IUserNotificationChangedTriggerFactory> { define_guid(0xCAD4436C, 0x69AB, 0x4E18, 0xA4, 0x8A, 0x5E, 0xD2, 0xAC, 0x43, 0x59, 0x57);};
template<> struct uuid<Windows::ApplicationModel::Background::IAppBroadcastTriggerProviderInfo> { define_guid(0xF219352D, 0x9DE8, 0x4420, 0x9C, 0xE2, 0x5E, 0xFF, 0x8F, 0x17, 0x37, 0x6B);};
template<> struct uuid<Windows::ApplicationModel::Background::IAppBroadcastTriggerFactory> { define_guid(0x280B9F44, 0x22F4, 0x4618, 0xA0, 0x2E, 0xE7, 0xE4, 0x11, 0xEB, 0x72, 0x38);};
template<> struct uuid<Windows::ApplicationModel::Background::IAppBroadcastTrigger> { define_guid(0x74D4F496, 0x8D37, 0x44EC, 0x94, 0x81, 0x2A, 0xB, 0x98, 0x54, 0xEB, 0x48);};

// types

namespace Windows { namespace ApplicationModel { namespace Background {

// IAlarmApplicationManagerStatics
struct IAlarmApplicationManagerStatics : IInspectable {
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<AlarmAccessStatus>* *operation);
	virtual STDMETHODIMP _GetAccessStatus(AlarmAccessStatus *status);
};

// AlarmApplicationManager
template<typename> struct AlarmApplicationManager_statics {
	static ptr<Foundation::IAsyncOperation<AlarmAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<AlarmAccessStatus>* operation; hrcheck(get_activation_factory<AlarmApplicationManager, IAlarmApplicationManagerStatics>()->_RequestAccessAsync(&operation)); return from_abi(operation); }
	static AlarmAccessStatus GetAccessStatus() { AlarmAccessStatus status; hrcheck(get_activation_factory<AlarmApplicationManager, IAlarmApplicationManagerStatics>()->_GetAccessStatus(&status)); return status; }
};

template<typename X> struct statics<AlarmApplicationManager, X> : X, Windows::ApplicationModel::Background::AlarmApplicationManager_statics<void> {
	typedef typename X::root_type AlarmApplicationManager;
};
struct AlarmApplicationManager : generate<AlarmApplicationManager> {};

// IPhoneTriggerFactory
struct IPhoneTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Calls::Background::PhoneTriggerType type, bool oneShot, PhoneTrigger* *result);
};

// IBackgroundTrigger
struct IBackgroundTrigger : IInspectable, generate<IBackgroundTrigger> {};

// IPhoneTrigger
struct IPhoneTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_OneShot(bool *value);
	virtual STDMETHODIMP _get_TriggerType(Calls::Background::PhoneTriggerType *result);
};
template<typename X> struct IPhoneTrigger_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPhoneTrigger_adaptor::OneShot)->_get_OneShot(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} OneShot;
		struct : property {
			Calls::Background::PhoneTriggerType get() { Calls::Background::PhoneTriggerType result; hrcheck(enc(&IPhoneTrigger_adaptor::TriggerType)->_get_TriggerType(&result)); return result; }
			Calls::Background::PhoneTriggerType operator()() { return get(); }
			operator Calls::Background::PhoneTriggerType () { return get(); }
		} TriggerType;
	};
	IPhoneTrigger_adaptor() {}
};
template<typename X> struct adapt<IPhoneTrigger, X> : Windows::ApplicationModel::Background::IPhoneTrigger_adaptor<X> { typedef adapt IPhoneTrigger; };
struct IPhoneTrigger : IPhoneTrigger_raw, generate<IPhoneTrigger> {};

// PhoneTrigger
template<typename> struct PhoneTrigger_statics {
	static PhoneTrigger *activate(Calls::Background::PhoneTriggerType type, bool oneShot) { PhoneTrigger *result; hrcheck(get_activation_factory<PhoneTrigger, IPhoneTriggerFactory>()->_Create(type, oneShot, &result)); return result; }
};

template<typename X> struct statics<PhoneTrigger, X> : X, Windows::ApplicationModel::Background::PhoneTrigger_statics<void> {
	using Windows::ApplicationModel::Background::PhoneTrigger_statics<void>::activate;
	typedef typename X::root_type PhoneTrigger;
};
struct PhoneTrigger : generate<PhoneTrigger> {};

// ICommunicationBlockingAppSetAsActiveTrigger
struct ICommunicationBlockingAppSetAsActiveTrigger : IInspectable, generate<ICommunicationBlockingAppSetAsActiveTrigger> {};

// CommunicationBlockingAppSetAsActiveTrigger
template<typename X> struct statics<CommunicationBlockingAppSetAsActiveTrigger, X> : X {
	typedef typename X::root_type CommunicationBlockingAppSetAsActiveTrigger;
};
struct CommunicationBlockingAppSetAsActiveTrigger : generate<CommunicationBlockingAppSetAsActiveTrigger> {};

// ISmartCardTriggerFactory
struct ISmartCardTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Devices::SmartCards::SmartCardTriggerType triggerType, SmartCardTrigger* *trigger);
};

// ISmartCardTrigger
struct ISmartCardTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_TriggerType(Devices::SmartCards::SmartCardTriggerType *triggerType);
};
template<typename X> struct ISmartCardTrigger_adaptor : X {
	union {
		struct : property {
			Devices::SmartCards::SmartCardTriggerType get() { Devices::SmartCards::SmartCardTriggerType triggerType; hrcheck(enc(&ISmartCardTrigger_adaptor::TriggerType)->_get_TriggerType(&triggerType)); return triggerType; }
			Devices::SmartCards::SmartCardTriggerType operator()() { return get(); }
			operator Devices::SmartCards::SmartCardTriggerType () { return get(); }
		} TriggerType;
	};
	ISmartCardTrigger_adaptor() {}
};
template<typename X> struct adapt<ISmartCardTrigger, X> : Windows::ApplicationModel::Background::ISmartCardTrigger_adaptor<X> { typedef adapt ISmartCardTrigger; };
struct ISmartCardTrigger : ISmartCardTrigger_raw, generate<ISmartCardTrigger> {};

// SmartCardTrigger
template<typename> struct SmartCardTrigger_statics {
	static SmartCardTrigger *activate(Devices::SmartCards::SmartCardTriggerType triggerType) { SmartCardTrigger *trigger; hrcheck(get_activation_factory<SmartCardTrigger, ISmartCardTriggerFactory>()->_Create(triggerType, &trigger)); return trigger; }
};

template<typename X> struct statics<SmartCardTrigger, X> : X, Windows::ApplicationModel::Background::SmartCardTrigger_statics<void> {
	using Windows::ApplicationModel::Background::SmartCardTrigger_statics<void>::activate;
	typedef typename X::root_type SmartCardTrigger;
};
struct SmartCardTrigger : generate<SmartCardTrigger> {};

// IApplicationTrigger
struct IApplicationTrigger_raw : IInspectable {
	virtual STDMETHODIMP _RequestAsync(Foundation::IAsyncOperation<ApplicationTriggerResult>* *result);
	virtual STDMETHODIMP _RequestAsyncWithArguments(Foundation::Collections::ValueSet* arguments, Foundation::IAsyncOperation<ApplicationTriggerResult>* *result);
};
template<typename X> struct IApplicationTrigger_adaptor : X {
	ptr<Foundation::IAsyncOperation<ApplicationTriggerResult>> RequestAsync() { Foundation::IAsyncOperation<ApplicationTriggerResult>* result; hrcheck(X::get()->_RequestAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ApplicationTriggerResult>> RequestAsync(pptr<Foundation::Collections::ValueSet> arguments) { Foundation::IAsyncOperation<ApplicationTriggerResult>* result; hrcheck(X::get()->_RequestAsyncWithArguments(arguments, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IApplicationTrigger, X> : Windows::ApplicationModel::Background::IApplicationTrigger_adaptor<X> { typedef adapt IApplicationTrigger; };
struct IApplicationTrigger : IApplicationTrigger_raw, generate<IApplicationTrigger> {};

// ApplicationTrigger
template<typename X> struct statics<ApplicationTrigger, X> : X {
	typedef typename X::root_type ApplicationTrigger;
};
struct ApplicationTrigger : generate<ApplicationTrigger> {
	using IApplicationTrigger::RequestAsync;
};

// IApplicationTriggerDetails
struct IApplicationTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Arguments(Foundation::Collections::ValueSet* *value);
};
template<typename X> struct IApplicationTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IApplicationTriggerDetails_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Arguments;
	};
	IApplicationTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IApplicationTriggerDetails, X> : Windows::ApplicationModel::Background::IApplicationTriggerDetails_adaptor<X> { typedef adapt IApplicationTriggerDetails; };
struct IApplicationTriggerDetails : IApplicationTriggerDetails_raw, generate<IApplicationTriggerDetails> {};

// ApplicationTriggerDetails
template<typename X> struct statics<ApplicationTriggerDetails, X> : X {
	typedef typename X::root_type ApplicationTriggerDetails;
};
struct ApplicationTriggerDetails : generate<ApplicationTriggerDetails> {};

// IMediaProcessingTrigger
struct IMediaProcessingTrigger_raw : IInspectable {
	virtual STDMETHODIMP _RequestAsync(Foundation::IAsyncOperation<MediaProcessingTriggerResult>* *result);
	virtual STDMETHODIMP _RequestAsyncWithArguments(Foundation::Collections::ValueSet* arguments, Foundation::IAsyncOperation<MediaProcessingTriggerResult>* *result);
};
template<typename X> struct IMediaProcessingTrigger_adaptor : X {
	ptr<Foundation::IAsyncOperation<MediaProcessingTriggerResult>> RequestAsync() { Foundation::IAsyncOperation<MediaProcessingTriggerResult>* result; hrcheck(X::get()->_RequestAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<MediaProcessingTriggerResult>> RequestAsync(pptr<Foundation::Collections::ValueSet> arguments) { Foundation::IAsyncOperation<MediaProcessingTriggerResult>* result; hrcheck(X::get()->_RequestAsyncWithArguments(arguments, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IMediaProcessingTrigger, X> : Windows::ApplicationModel::Background::IMediaProcessingTrigger_adaptor<X> { typedef adapt IMediaProcessingTrigger; };
struct IMediaProcessingTrigger : IMediaProcessingTrigger_raw, generate<IMediaProcessingTrigger> {};

// MediaProcessingTrigger
template<typename X> struct statics<MediaProcessingTrigger, X> : X {
	typedef typename X::root_type MediaProcessingTrigger;
};
struct MediaProcessingTrigger : generate<MediaProcessingTrigger> {
	using IMediaProcessingTrigger::RequestAsync;
};

// IContentPrefetchTriggerFactory
struct IContentPrefetchTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::TimeSpan waitInterval, ContentPrefetchTrigger* *trigger);
};

// IContentPrefetchTrigger
struct IContentPrefetchTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_WaitInterval(Foundation::TimeSpan *waitInterval);
};
template<typename X> struct IContentPrefetchTrigger_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan waitInterval; hrcheck(enc(&IContentPrefetchTrigger_adaptor::WaitInterval)->_get_WaitInterval(&waitInterval)); return waitInterval; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} WaitInterval;
	};
	IContentPrefetchTrigger_adaptor() {}
};
template<typename X> struct adapt<IContentPrefetchTrigger, X> : Windows::ApplicationModel::Background::IContentPrefetchTrigger_adaptor<X> { typedef adapt IContentPrefetchTrigger; };
struct IContentPrefetchTrigger : IContentPrefetchTrigger_raw, generate<IContentPrefetchTrigger> {};

// ContentPrefetchTrigger
template<typename> struct ContentPrefetchTrigger_statics {
	static ContentPrefetchTrigger *activate() { ContentPrefetchTrigger *t; get_activation_factory<ContentPrefetchTrigger>()->ActivateInstance((IInspectable**)&t); return t; }
	static ContentPrefetchTrigger *activate(const Foundation::TimeSpan& waitInterval) { ContentPrefetchTrigger *trigger; hrcheck(get_activation_factory<ContentPrefetchTrigger, IContentPrefetchTriggerFactory>()->_Create(waitInterval, &trigger)); return trigger; }
};

template<typename X> struct statics<ContentPrefetchTrigger, X> : X, Windows::ApplicationModel::Background::ContentPrefetchTrigger_statics<void> {
	using Windows::ApplicationModel::Background::ContentPrefetchTrigger_statics<void>::activate;
	typedef typename X::root_type ContentPrefetchTrigger;
};
struct ContentPrefetchTrigger : generate<ContentPrefetchTrigger> {};

// ISecondaryAuthenticationFactorAuthenticationTrigger
struct ISecondaryAuthenticationFactorAuthenticationTrigger : IInspectable, generate<ISecondaryAuthenticationFactorAuthenticationTrigger> {};

// SecondaryAuthenticationFactorAuthenticationTrigger
template<typename X> struct statics<SecondaryAuthenticationFactorAuthenticationTrigger, X> : X {
	typedef typename X::root_type SecondaryAuthenticationFactorAuthenticationTrigger;
};
struct SecondaryAuthenticationFactorAuthenticationTrigger : generate<SecondaryAuthenticationFactorAuthenticationTrigger> {};

// ISystemTriggerFactory
struct ISystemTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(SystemTriggerType triggerType, bool oneShot, SystemTrigger* *trigger);
};

// ISystemTrigger
struct ISystemTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_OneShot(bool *oneShot);
	virtual STDMETHODIMP _get_TriggerType(SystemTriggerType *triggerType);
};
template<typename X> struct ISystemTrigger_adaptor : X {
	union {
		struct : property {
			bool get() { bool oneShot; hrcheck(enc(&ISystemTrigger_adaptor::OneShot)->_get_OneShot(&oneShot)); return oneShot; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} OneShot;
		struct : property {
			SystemTriggerType get() { SystemTriggerType triggerType; hrcheck(enc(&ISystemTrigger_adaptor::TriggerType)->_get_TriggerType(&triggerType)); return triggerType; }
			SystemTriggerType operator()() { return get(); }
			operator SystemTriggerType () { return get(); }
		} TriggerType;
	};
	ISystemTrigger_adaptor() {}
};
template<typename X> struct adapt<ISystemTrigger, X> : Windows::ApplicationModel::Background::ISystemTrigger_adaptor<X> { typedef adapt ISystemTrigger; };
struct ISystemTrigger : ISystemTrigger_raw, generate<ISystemTrigger> {};

// SystemTrigger
template<typename> struct SystemTrigger_statics {
	static SystemTrigger *activate(SystemTriggerType triggerType, bool oneShot) { SystemTrigger *trigger; hrcheck(get_activation_factory<SystemTrigger, ISystemTriggerFactory>()->_Create(triggerType, oneShot, &trigger)); return trigger; }
};

template<typename X> struct statics<SystemTrigger, X> : X, Windows::ApplicationModel::Background::SystemTrigger_statics<void> {
	using Windows::ApplicationModel::Background::SystemTrigger_statics<void>::activate;
	typedef typename X::root_type SystemTrigger;
};
struct SystemTrigger : generate<SystemTrigger> {};

// ISystemConditionFactory
struct ISystemConditionFactory : IInspectable {
	virtual STDMETHODIMP _Create(SystemConditionType conditionType, SystemCondition* *condition);
};

// IBackgroundCondition
struct IBackgroundCondition : IInspectable, generate<IBackgroundCondition> {};

// ISystemCondition
struct ISystemCondition_raw : IInspectable {
	virtual STDMETHODIMP _get_ConditionType(SystemConditionType *conditionType);
};
template<typename X> struct ISystemCondition_adaptor : X {
	union {
		struct : property {
			SystemConditionType get() { SystemConditionType conditionType; hrcheck(enc(&ISystemCondition_adaptor::ConditionType)->_get_ConditionType(&conditionType)); return conditionType; }
			SystemConditionType operator()() { return get(); }
			operator SystemConditionType () { return get(); }
		} ConditionType;
	};
	ISystemCondition_adaptor() {}
};
template<typename X> struct adapt<ISystemCondition, X> : Windows::ApplicationModel::Background::ISystemCondition_adaptor<X> { typedef adapt ISystemCondition; };
struct ISystemCondition : ISystemCondition_raw, generate<ISystemCondition> {};

// SystemCondition
template<typename> struct SystemCondition_statics {
	static SystemCondition *activate(SystemConditionType conditionType) { SystemCondition *condition; hrcheck(get_activation_factory<SystemCondition, ISystemConditionFactory>()->_Create(conditionType, &condition)); return condition; }
};

template<typename X> struct statics<SystemCondition, X> : X, Windows::ApplicationModel::Background::SystemCondition_statics<void> {
	using Windows::ApplicationModel::Background::SystemCondition_statics<void>::activate;
	typedef typename X::root_type SystemCondition;
};
struct SystemCondition : generate<SystemCondition> {};

// INetworkOperatorNotificationTriggerFactory
struct INetworkOperatorNotificationTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING networkAccountId, NetworkOperatorNotificationTrigger* *trigger);
};

// INetworkOperatorNotificationTrigger
struct INetworkOperatorNotificationTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_NetworkAccountId(HSTRING *value);
};
template<typename X> struct INetworkOperatorNotificationTrigger_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INetworkOperatorNotificationTrigger_adaptor::NetworkAccountId)->_get_NetworkAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} NetworkAccountId;
	};
	INetworkOperatorNotificationTrigger_adaptor() {}
};
template<typename X> struct adapt<INetworkOperatorNotificationTrigger, X> : Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger_adaptor<X> { typedef adapt INetworkOperatorNotificationTrigger; };
struct INetworkOperatorNotificationTrigger : INetworkOperatorNotificationTrigger_raw, generate<INetworkOperatorNotificationTrigger> {};

// NetworkOperatorNotificationTrigger
template<typename> struct NetworkOperatorNotificationTrigger_statics {
	static NetworkOperatorNotificationTrigger *activate(hstring_ref networkAccountId) { NetworkOperatorNotificationTrigger *trigger; hrcheck(get_activation_factory<NetworkOperatorNotificationTrigger, INetworkOperatorNotificationTriggerFactory>()->_Create(networkAccountId, &trigger)); return trigger; }
};

template<typename X> struct statics<NetworkOperatorNotificationTrigger, X> : X, Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger_statics<void> {
	using Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger_statics<void>::activate;
	typedef typename X::root_type NetworkOperatorNotificationTrigger;
};
struct NetworkOperatorNotificationTrigger : generate<NetworkOperatorNotificationTrigger> {};

// IDeviceManufacturerNotificationTriggerFactory
struct IDeviceManufacturerNotificationTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING triggerQualifier, bool oneShot, DeviceManufacturerNotificationTrigger* *trigger);
};

// IDeviceManufacturerNotificationTrigger
struct IDeviceManufacturerNotificationTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_TriggerQualifier(HSTRING *value);
	virtual STDMETHODIMP _get_OneShot(bool *oneShot);
};
template<typename X> struct IDeviceManufacturerNotificationTrigger_adaptor : X {
	union {
		struct : property {
			bool get() { bool oneShot; hrcheck(enc(&IDeviceManufacturerNotificationTrigger_adaptor::OneShot)->_get_OneShot(&oneShot)); return oneShot; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} OneShot;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceManufacturerNotificationTrigger_adaptor::TriggerQualifier)->_get_TriggerQualifier(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TriggerQualifier;
	};
	IDeviceManufacturerNotificationTrigger_adaptor() {}
};
template<typename X> struct adapt<IDeviceManufacturerNotificationTrigger, X> : Windows::ApplicationModel::Background::IDeviceManufacturerNotificationTrigger_adaptor<X> { typedef adapt IDeviceManufacturerNotificationTrigger; };
struct IDeviceManufacturerNotificationTrigger : IDeviceManufacturerNotificationTrigger_raw, generate<IDeviceManufacturerNotificationTrigger> {};

// DeviceManufacturerNotificationTrigger
template<typename> struct DeviceManufacturerNotificationTrigger_statics {
	static DeviceManufacturerNotificationTrigger *activate(hstring_ref triggerQualifier, bool oneShot) { DeviceManufacturerNotificationTrigger *trigger; hrcheck(get_activation_factory<DeviceManufacturerNotificationTrigger, IDeviceManufacturerNotificationTriggerFactory>()->_Create(triggerQualifier, oneShot, &trigger)); return trigger; }
};

template<typename X> struct statics<DeviceManufacturerNotificationTrigger, X> : X, Windows::ApplicationModel::Background::DeviceManufacturerNotificationTrigger_statics<void> {
	using Windows::ApplicationModel::Background::DeviceManufacturerNotificationTrigger_statics<void>::activate;
	typedef typename X::root_type DeviceManufacturerNotificationTrigger;
};
struct DeviceManufacturerNotificationTrigger : generate<DeviceManufacturerNotificationTrigger> {};

// ICustomSystemEventTrigger
struct ICustomSystemEventTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_TriggerId(HSTRING *value);
	virtual STDMETHODIMP _get_Recurrence(CustomSystemEventTriggerRecurrence *value);
};
template<typename X> struct ICustomSystemEventTrigger_adaptor : X {
	union {
		struct : property {
			CustomSystemEventTriggerRecurrence get() { CustomSystemEventTriggerRecurrence value; hrcheck(enc(&ICustomSystemEventTrigger_adaptor::Recurrence)->_get_Recurrence(&value)); return value; }
			CustomSystemEventTriggerRecurrence operator()() { return get(); }
			operator CustomSystemEventTriggerRecurrence () { return get(); }
		} Recurrence;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICustomSystemEventTrigger_adaptor::TriggerId)->_get_TriggerId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TriggerId;
	};
	ICustomSystemEventTrigger_adaptor() {}
};
template<typename X> struct adapt<ICustomSystemEventTrigger, X> : Windows::ApplicationModel::Background::ICustomSystemEventTrigger_adaptor<X> { typedef adapt ICustomSystemEventTrigger; };
struct ICustomSystemEventTrigger : ICustomSystemEventTrigger_raw, generate<ICustomSystemEventTrigger> {};

// ICustomSystemEventTriggerFactory
struct ICustomSystemEventTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING triggerId, CustomSystemEventTriggerRecurrence recurrence, CustomSystemEventTrigger* *trigger);
};

// CustomSystemEventTrigger
template<typename> struct CustomSystemEventTrigger_statics {
	static CustomSystemEventTrigger *activate(hstring_ref triggerId, CustomSystemEventTriggerRecurrence recurrence) { CustomSystemEventTrigger *trigger; hrcheck(get_activation_factory<CustomSystemEventTrigger, ICustomSystemEventTriggerFactory>()->_Create(triggerId, recurrence, &trigger)); return trigger; }
};

template<typename X> struct statics<CustomSystemEventTrigger, X> : X, Windows::ApplicationModel::Background::CustomSystemEventTrigger_statics<void> {
	using Windows::ApplicationModel::Background::CustomSystemEventTrigger_statics<void>::activate;
	typedef typename X::root_type CustomSystemEventTrigger;
};
struct CustomSystemEventTrigger : generate<CustomSystemEventTrigger> {};

// ICachedFileUpdaterTriggerDetails
struct ICachedFileUpdaterTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_UpdateTarget(Storage::Provider::CachedFileTarget *value);
	virtual STDMETHODIMP _get_UpdateRequest(Storage::Provider::FileUpdateRequest* *value);
	virtual STDMETHODIMP _get_CanRequestUserInput(bool *value);
};
template<typename X> struct ICachedFileUpdaterTriggerDetails_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICachedFileUpdaterTriggerDetails_adaptor::CanRequestUserInput)->_get_CanRequestUserInput(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanRequestUserInput;
		struct : property {
			ptr<Storage::Provider::FileUpdateRequest> get() { Storage::Provider::FileUpdateRequest* value; hrcheck(enc(&ICachedFileUpdaterTriggerDetails_adaptor::UpdateRequest)->_get_UpdateRequest(&value)); return from_abi(value); }
			ptr<Storage::Provider::FileUpdateRequest> operator()() { return get(); }
			operator ptr<Storage::Provider::FileUpdateRequest> () { return get(); }
			ptr<Storage::Provider::FileUpdateRequest> operator->() { return get(); }
		} UpdateRequest;
		struct : property {
			Storage::Provider::CachedFileTarget get() { Storage::Provider::CachedFileTarget value; hrcheck(enc(&ICachedFileUpdaterTriggerDetails_adaptor::UpdateTarget)->_get_UpdateTarget(&value)); return value; }
			Storage::Provider::CachedFileTarget operator()() { return get(); }
			operator Storage::Provider::CachedFileTarget () { return get(); }
		} UpdateTarget;
	};
	ICachedFileUpdaterTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<ICachedFileUpdaterTriggerDetails, X> : Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails_adaptor<X> { typedef adapt ICachedFileUpdaterTriggerDetails; };
struct ICachedFileUpdaterTriggerDetails : ICachedFileUpdaterTriggerDetails_raw, generate<ICachedFileUpdaterTriggerDetails> {};

// CachedFileUpdaterTriggerDetails
template<typename X> struct statics<CachedFileUpdaterTriggerDetails, X> : X {
	typedef typename X::root_type CachedFileUpdaterTriggerDetails;
};
struct CachedFileUpdaterTriggerDetails : generate<CachedFileUpdaterTriggerDetails> {};

// ICachedFileUpdaterTrigger
struct ICachedFileUpdaterTrigger : IInspectable, generate<ICachedFileUpdaterTrigger> {};

// CachedFileUpdaterTrigger
template<typename X> struct statics<CachedFileUpdaterTrigger, X> : X {
	typedef typename X::root_type CachedFileUpdaterTrigger;
};
struct CachedFileUpdaterTrigger : generate<CachedFileUpdaterTrigger> {};

// ITimeTriggerFactory
struct ITimeTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned freshnessTime, bool oneShot, TimeTrigger* *trigger);
};

// ITimeTrigger
struct ITimeTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_FreshnessTime(unsigned *freshnessTime);
	virtual STDMETHODIMP _get_OneShot(bool *oneShot);
};
template<typename X> struct ITimeTrigger_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned freshnessTime; hrcheck(enc(&ITimeTrigger_adaptor::FreshnessTime)->_get_FreshnessTime(&freshnessTime)); return freshnessTime; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} FreshnessTime;
		struct : property {
			bool get() { bool oneShot; hrcheck(enc(&ITimeTrigger_adaptor::OneShot)->_get_OneShot(&oneShot)); return oneShot; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} OneShot;
	};
	ITimeTrigger_adaptor() {}
};
template<typename X> struct adapt<ITimeTrigger, X> : Windows::ApplicationModel::Background::ITimeTrigger_adaptor<X> { typedef adapt ITimeTrigger; };
struct ITimeTrigger : ITimeTrigger_raw, generate<ITimeTrigger> {};

// TimeTrigger
template<typename> struct TimeTrigger_statics {
	static TimeTrigger *activate(unsigned freshnessTime, bool oneShot) { TimeTrigger *trigger; hrcheck(get_activation_factory<TimeTrigger, ITimeTriggerFactory>()->_Create(freshnessTime, oneShot, &trigger)); return trigger; }
};

template<typename X> struct statics<TimeTrigger, X> : X, Windows::ApplicationModel::Background::TimeTrigger_statics<void> {
	using Windows::ApplicationModel::Background::TimeTrigger_statics<void>::activate;
	typedef typename X::root_type TimeTrigger;
};
struct TimeTrigger : generate<TimeTrigger> {};

// IMaintenanceTriggerFactory
struct IMaintenanceTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned freshnessTime, bool oneShot, MaintenanceTrigger* *trigger);
};

// IMaintenanceTrigger
struct IMaintenanceTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_FreshnessTime(unsigned *freshnessTime);
	virtual STDMETHODIMP _get_OneShot(bool *oneShot);
};
template<typename X> struct IMaintenanceTrigger_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned freshnessTime; hrcheck(enc(&IMaintenanceTrigger_adaptor::FreshnessTime)->_get_FreshnessTime(&freshnessTime)); return freshnessTime; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} FreshnessTime;
		struct : property {
			bool get() { bool oneShot; hrcheck(enc(&IMaintenanceTrigger_adaptor::OneShot)->_get_OneShot(&oneShot)); return oneShot; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} OneShot;
	};
	IMaintenanceTrigger_adaptor() {}
};
template<typename X> struct adapt<IMaintenanceTrigger, X> : Windows::ApplicationModel::Background::IMaintenanceTrigger_adaptor<X> { typedef adapt IMaintenanceTrigger; };
struct IMaintenanceTrigger : IMaintenanceTrigger_raw, generate<IMaintenanceTrigger> {};

// MaintenanceTrigger
template<typename> struct MaintenanceTrigger_statics {
	static MaintenanceTrigger *activate(unsigned freshnessTime, bool oneShot) { MaintenanceTrigger *trigger; hrcheck(get_activation_factory<MaintenanceTrigger, IMaintenanceTriggerFactory>()->_Create(freshnessTime, oneShot, &trigger)); return trigger; }
};

template<typename X> struct statics<MaintenanceTrigger, X> : X, Windows::ApplicationModel::Background::MaintenanceTrigger_statics<void> {
	using Windows::ApplicationModel::Background::MaintenanceTrigger_statics<void>::activate;
	typedef typename X::root_type MaintenanceTrigger;
};
struct MaintenanceTrigger : generate<MaintenanceTrigger> {};

// IAppointmentStoreNotificationTrigger
struct IAppointmentStoreNotificationTrigger : IInspectable, generate<IAppointmentStoreNotificationTrigger> {};

// AppointmentStoreNotificationTrigger
template<typename X> struct statics<AppointmentStoreNotificationTrigger, X> : X {
	typedef typename X::root_type AppointmentStoreNotificationTrigger;
};
struct AppointmentStoreNotificationTrigger : generate<AppointmentStoreNotificationTrigger> {};

// IBackgroundExecutionManagerStatics
struct IBackgroundExecutionManagerStatics : IInspectable {
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<BackgroundAccessStatus>* *operation);
	virtual STDMETHODIMP _RequestAccessForApplicationAsync(HSTRING applicationId, Foundation::IAsyncOperation<BackgroundAccessStatus>* *operation);
	virtual STDMETHODIMP _RemoveAccess();
	virtual STDMETHODIMP _RemoveAccessForApplication(HSTRING applicationId);
	virtual STDMETHODIMP _GetAccessStatus(BackgroundAccessStatus *status);
	virtual STDMETHODIMP _GetAccessStatusForApplication(HSTRING applicationId, BackgroundAccessStatus *status);
};

// IBackgroundExecutionManagerStatics2
struct IBackgroundExecutionManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _RequestAccessKindAsync(BackgroundAccessRequestKind requestedAccess, HSTRING reason, Foundation::IAsyncOperation<bool>* *operation);
};

// BackgroundExecutionManager
template<typename> struct BackgroundExecutionManager_statics {
	static ptr<Foundation::IAsyncOperation<bool>> RequestAccessKindAsync(BackgroundAccessRequestKind requestedAccess, hstring_ref reason) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics2>()->_RequestAccessKindAsync(requestedAccess, reason, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<BackgroundAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<BackgroundAccessStatus>* operation; hrcheck(get_activation_factory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>()->_RequestAccessAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<BackgroundAccessStatus>> RequestAccessAsync(hstring_ref applicationId) { Foundation::IAsyncOperation<BackgroundAccessStatus>* operation; hrcheck(get_activation_factory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>()->_RequestAccessForApplicationAsync(applicationId, &operation)); return from_abi(operation); }
	static void RemoveAccess() { hrcheck(get_activation_factory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>()->_RemoveAccess()); }
	static void RemoveAccess(hstring_ref applicationId) { hrcheck(get_activation_factory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>()->_RemoveAccessForApplication(applicationId)); }
	static BackgroundAccessStatus GetAccessStatus() { BackgroundAccessStatus status; hrcheck(get_activation_factory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>()->_GetAccessStatus(&status)); return status; }
	static BackgroundAccessStatus GetAccessStatus(hstring_ref applicationId) { BackgroundAccessStatus status; hrcheck(get_activation_factory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>()->_GetAccessStatusForApplication(applicationId, &status)); return status; }
};

template<typename X> struct statics<BackgroundExecutionManager, X> : X, Windows::ApplicationModel::Background::BackgroundExecutionManager_statics<void> {
	typedef typename X::root_type BackgroundExecutionManager;
};
struct BackgroundExecutionManager : generate<BackgroundExecutionManager> {};

// IBackgroundTaskInstance
struct IBackgroundTaskInstance_raw : IInspectable {
	virtual STDMETHODIMP _get_InstanceId(Platform::Guid *value) = 0;
	virtual STDMETHODIMP _get_Task(BackgroundTaskRegistration* *task) = 0;
	virtual STDMETHODIMP _get_Progress(unsigned *value) = 0;
	virtual STDMETHODIMP _put_Progress(unsigned value) = 0;
	virtual STDMETHODIMP _get_TriggerDetails(IInspectable* *triggerDetails) = 0;
	virtual STDMETHODIMP _add_Canceled(BackgroundTaskCanceledEventHandler* cancelHandler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_Canceled(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _get_SuspendedCount(unsigned *value) = 0;
	virtual STDMETHODIMP _GetDeferral(BackgroundTaskDeferral* *deferral) = 0;
};
template<typename X> struct IBackgroundTaskInstance_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IBackgroundTaskInstance_adaptor::InstanceId)->_get_InstanceId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} InstanceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBackgroundTaskInstance_adaptor::Progress)->_get_Progress(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IBackgroundTaskInstance_adaptor::Progress)->_put_Progress(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} Progress;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBackgroundTaskInstance_adaptor::SuspendedCount)->_get_SuspendedCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SuspendedCount;
		struct : property {
			ptr<BackgroundTaskRegistration> get() { BackgroundTaskRegistration* task; hrcheck(enc(&IBackgroundTaskInstance_adaptor::Task)->_get_Task(&task)); return from_abi(task); }
			ptr<BackgroundTaskRegistration> operator()() { return get(); }
			operator ptr<BackgroundTaskRegistration> () { return get(); }
			ptr<BackgroundTaskRegistration> operator->() { return get(); }
		} Task;
		struct : property {
			object get() { IInspectable* triggerDetails; hrcheck(enc(&IBackgroundTaskInstance_adaptor::TriggerDetails)->_get_TriggerDetails(&triggerDetails)); return from_abi(triggerDetails); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} TriggerDetails;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<BackgroundTaskCanceledEventHandler> cancelHandler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IBackgroundTaskInstance_adaptor::Canceled)->_add_Canceled(cancelHandler, &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IBackgroundTaskInstance_adaptor::Canceled)->_remove_Canceled(cookie)); }
		} Canceled;
	};
	ptr<BackgroundTaskDeferral> GetDeferral() { BackgroundTaskDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	IBackgroundTaskInstance_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskInstance, X> : Windows::ApplicationModel::Background::IBackgroundTaskInstance_adaptor<X> { typedef adapt IBackgroundTaskInstance; };
template<typename X> struct IBackgroundTaskInstance_unadaptor : X {
	STDMETHODIMP _get_InstanceId(Platform::Guid *value) { return hrtry([&, this] { get_prop(value, InstanceId); }); }
	STDMETHODIMP _get_Task(BackgroundTaskRegistration* *task) { return hrtry([&, this] { get_prop(task, Task); }); }
	STDMETHODIMP _get_Progress(unsigned *value) { return hrtry([&, this] { get_prop(value, Progress); }); }
	STDMETHODIMP _put_Progress(unsigned value) { return hrtry([&, this] { put_prop(value, Progress); }); }
	STDMETHODIMP _get_TriggerDetails(IInspectable* *triggerDetails) { return hrtry([&, this] { get_prop(triggerDetails, TriggerDetails); }); }
	STDMETHODIMP _add_Canceled(BackgroundTaskCanceledEventHandler* cancelHandler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->Canceled+=cancelHandler; }); }
	STDMETHODIMP _remove_Canceled(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->Canceled-=cookie; }); }
	STDMETHODIMP _get_SuspendedCount(unsigned *value) { return hrtry([&, this] { get_prop(value, SuspendedCount); }); }
	STDMETHODIMP _GetDeferral(BackgroundTaskDeferral* *deferral) { return hrtry([&, this] { *deferral = to_abi(X::get()->GetDeferral()); }); }
};
template<typename X> struct unadapt<IBackgroundTaskInstance, X> : Windows::ApplicationModel::Background::IBackgroundTaskInstance_unadaptor<X> {};
struct IBackgroundTaskInstance : IBackgroundTaskInstance_raw, generate<IBackgroundTaskInstance> {};

// IBackgroundTaskRegistrationStatics2
struct IBackgroundTaskRegistrationStatics2 : IInspectable {
	virtual STDMETHODIMP _get_AllTaskGroups(Foundation::Collections::IMapView<HSTRING, BackgroundTaskRegistrationGroup*>* *value);
	virtual STDMETHODIMP _GetTaskGroup(HSTRING groupId, BackgroundTaskRegistrationGroup* *value);
};

// IBackgroundTaskRegistrationStatics
struct IBackgroundTaskRegistrationStatics : IInspectable {
	virtual STDMETHODIMP _get_AllTasks(Foundation::Collections::IMapView<Platform::Guid, IBackgroundTaskRegistration*>* *tasks);
};

// IBackgroundTaskRegistration
struct IBackgroundTaskRegistration_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskId(Platform::Guid *value) = 0;
	virtual STDMETHODIMP _get_Name(HSTRING *value) = 0;
	virtual STDMETHODIMP _add_Progress(BackgroundTaskProgressEventHandler* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_Progress(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _add_Completed(BackgroundTaskCompletedEventHandler* handler, Foundation::EventRegistrationToken *cookie) = 0;
	virtual STDMETHODIMP _remove_Completed(Foundation::EventRegistrationToken cookie) = 0;
	virtual STDMETHODIMP _Unregister(bool cancelTask) = 0;
};
template<typename X> struct IBackgroundTaskRegistration_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBackgroundTaskRegistration_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IBackgroundTaskRegistration_adaptor::TaskId)->_get_TaskId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} TaskId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<BackgroundTaskCompletedEventHandler> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IBackgroundTaskRegistration_adaptor::Completed)->_add_Completed(handler, &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IBackgroundTaskRegistration_adaptor::Completed)->_remove_Completed(cookie)); }
		} Completed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<BackgroundTaskProgressEventHandler> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&IBackgroundTaskRegistration_adaptor::Progress)->_add_Progress(handler, &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&IBackgroundTaskRegistration_adaptor::Progress)->_remove_Progress(cookie)); }
		} Progress;
	};
	void Unregister(bool cancelTask) { hrcheck(X::get()->_Unregister(cancelTask)); }
	IBackgroundTaskRegistration_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskRegistration, X> : Windows::ApplicationModel::Background::IBackgroundTaskRegistration_adaptor<X> { typedef adapt IBackgroundTaskRegistration; };
template<typename X> struct IBackgroundTaskRegistration_unadaptor : X {
	STDMETHODIMP _get_TaskId(Platform::Guid *value) { return hrtry([&, this] { get_prop(value, TaskId); }); }
	STDMETHODIMP _get_Name(HSTRING *value) { return hrtry([&, this] { get_prop(value, Name); }); }
	STDMETHODIMP _add_Progress(BackgroundTaskProgressEventHandler* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->Progress+=handler; }); }
	STDMETHODIMP _remove_Progress(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->Progress-=cookie; }); }
	STDMETHODIMP _add_Completed(BackgroundTaskCompletedEventHandler* handler, Foundation::EventRegistrationToken *cookie) { return hrtry([&, this] { *cookie = X::get()->Completed+=handler; }); }
	STDMETHODIMP _remove_Completed(Foundation::EventRegistrationToken cookie) { return hrtry([&, this] { X::get()->Completed-=cookie; }); }
	STDMETHODIMP _Unregister(bool cancelTask) { return hrtry([&, this] { X::get()->Unregister(cancelTask); }); }
};
template<typename X> struct unadapt<IBackgroundTaskRegistration, X> : Windows::ApplicationModel::Background::IBackgroundTaskRegistration_unadaptor<X> {};
struct IBackgroundTaskRegistration : IBackgroundTaskRegistration_raw, generate<IBackgroundTaskRegistration> {};

// IBackgroundTaskRegistration3
struct IBackgroundTaskRegistration3_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskGroup(BackgroundTaskRegistrationGroup* *value) = 0;
};
template<typename X> struct IBackgroundTaskRegistration3_adaptor : X {
	union {
		struct : property {
			ptr<BackgroundTaskRegistrationGroup> get() { BackgroundTaskRegistrationGroup* value; hrcheck(enc(&IBackgroundTaskRegistration3_adaptor::TaskGroup)->_get_TaskGroup(&value)); return from_abi(value); }
			ptr<BackgroundTaskRegistrationGroup> operator()() { return get(); }
			operator ptr<BackgroundTaskRegistrationGroup> () { return get(); }
			ptr<BackgroundTaskRegistrationGroup> operator->() { return get(); }
		} TaskGroup;
	};
	IBackgroundTaskRegistration3_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskRegistration3, X> : Windows::ApplicationModel::Background::IBackgroundTaskRegistration3_adaptor<X> { typedef adapt IBackgroundTaskRegistration3; };
template<typename X> struct IBackgroundTaskRegistration3_unadaptor : X {
	STDMETHODIMP _get_TaskGroup(BackgroundTaskRegistrationGroup* *value) { return hrtry([&, this] { get_prop(value, TaskGroup); }); }
};
template<typename X> struct unadapt<IBackgroundTaskRegistration3, X> : Windows::ApplicationModel::Background::IBackgroundTaskRegistration3_unadaptor<X> {};
struct IBackgroundTaskRegistration3 : IBackgroundTaskRegistration3_raw, generate<IBackgroundTaskRegistration3> {};

// IBackgroundTaskRegistration2
struct IBackgroundTaskRegistration2_raw : IInspectable {
	virtual STDMETHODIMP _get_Trigger(IBackgroundTrigger* *value) = 0;
};
template<typename X> struct IBackgroundTaskRegistration2_adaptor : X {
	union {
		struct : property {
			ptr<IBackgroundTrigger> get() { IBackgroundTrigger* value; hrcheck(enc(&IBackgroundTaskRegistration2_adaptor::Trigger)->_get_Trigger(&value)); return from_abi(value); }
			ptr<IBackgroundTrigger> operator()() { return get(); }
			operator ptr<IBackgroundTrigger> () { return get(); }
			ptr<IBackgroundTrigger> operator->() { return get(); }
		} Trigger;
	};
	IBackgroundTaskRegistration2_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskRegistration2, X> : Windows::ApplicationModel::Background::IBackgroundTaskRegistration2_adaptor<X> { typedef adapt IBackgroundTaskRegistration2; };
template<typename X> struct IBackgroundTaskRegistration2_unadaptor : X {
	STDMETHODIMP _get_Trigger(IBackgroundTrigger* *value) { return hrtry([&, this] { get_prop(value, Trigger); }); }
};
template<typename X> struct unadapt<IBackgroundTaskRegistration2, X> : Windows::ApplicationModel::Background::IBackgroundTaskRegistration2_unadaptor<X> {};
struct IBackgroundTaskRegistration2 : IBackgroundTaskRegistration2_raw, generate<IBackgroundTaskRegistration2> {};

// BackgroundTaskRegistration
template<typename> struct BackgroundTaskRegistration_statics {
	static struct _AllTasks : property {
		ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<IBackgroundTaskRegistration>>> get() { Foundation::Collections::IMapView<Platform::Guid, IBackgroundTaskRegistration*>* tasks; hrcheck(get_activation_factory<BackgroundTaskRegistration, IBackgroundTaskRegistrationStatics>()->_get_AllTasks(&tasks)); return from_abi(tasks); }
		ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<IBackgroundTaskRegistration>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<IBackgroundTaskRegistration>>> () { return get(); }
		ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<IBackgroundTaskRegistration>>> operator->() { return get(); }
	} AllTasks;
	static struct _AllTaskGroups : property {
		ptr<Foundation::Collections::IMapView<hstring, ptr<BackgroundTaskRegistrationGroup>>> get() { Foundation::Collections::IMapView<HSTRING, BackgroundTaskRegistrationGroup*>* value; hrcheck(get_activation_factory<BackgroundTaskRegistration, IBackgroundTaskRegistrationStatics2>()->_get_AllTaskGroups(&value)); return from_abi(value); }
		ptr<Foundation::Collections::IMapView<hstring, ptr<BackgroundTaskRegistrationGroup>>> operator()() { return get(); }
		operator ptr<Foundation::Collections::IMapView<hstring, ptr<BackgroundTaskRegistrationGroup>>> () { return get(); }
		ptr<Foundation::Collections::IMapView<hstring, ptr<BackgroundTaskRegistrationGroup>>> operator->() { return get(); }
	} AllTaskGroups;
	static ptr<BackgroundTaskRegistrationGroup> GetTaskGroup(hstring_ref groupId) { BackgroundTaskRegistrationGroup* value; hrcheck(get_activation_factory<BackgroundTaskRegistration, IBackgroundTaskRegistrationStatics2>()->_GetTaskGroup(groupId, &value)); return from_abi(value); }
};
template<typename X> typename BackgroundTaskRegistration_statics<X>::_AllTasks BackgroundTaskRegistration_statics<X>::AllTasks;
template<typename X> typename BackgroundTaskRegistration_statics<X>::_AllTaskGroups BackgroundTaskRegistration_statics<X>::AllTaskGroups;

template<typename X> struct statics<BackgroundTaskRegistration, X> : X, Windows::ApplicationModel::Background::BackgroundTaskRegistration_statics<void> {
	typedef typename X::root_type BackgroundTaskRegistration;
};
struct BackgroundTaskRegistration : generate<BackgroundTaskRegistration> {};

// BackgroundTaskCanceledEventHandler
struct BackgroundTaskCanceledEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IBackgroundTaskInstance* sender, BackgroundTaskCancellationReason reason) = 0;
};

// IBackgroundTaskDeferral
struct IBackgroundTaskDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IBackgroundTaskDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IBackgroundTaskDeferral, X> : Windows::ApplicationModel::Background::IBackgroundTaskDeferral_adaptor<X> { typedef adapt IBackgroundTaskDeferral; };
struct IBackgroundTaskDeferral : IBackgroundTaskDeferral_raw, generate<IBackgroundTaskDeferral> {};

// BackgroundTaskDeferral
template<typename X> struct statics<BackgroundTaskDeferral, X> : X {
	typedef typename X::root_type BackgroundTaskDeferral;
};
struct BackgroundTaskDeferral : generate<BackgroundTaskDeferral> {};

// BackgroundTaskProgressEventHandler
struct BackgroundTaskProgressEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(BackgroundTaskRegistration* sender, BackgroundTaskProgressEventArgs* args) = 0;
};

// IBackgroundTaskProgressEventArgs
struct IBackgroundTaskProgressEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InstanceId(Platform::Guid *value);
	virtual STDMETHODIMP _get_Progress(unsigned *value);
};
template<typename X> struct IBackgroundTaskProgressEventArgs_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IBackgroundTaskProgressEventArgs_adaptor::InstanceId)->_get_InstanceId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} InstanceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBackgroundTaskProgressEventArgs_adaptor::Progress)->_get_Progress(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Progress;
	};
	IBackgroundTaskProgressEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskProgressEventArgs, X> : Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs_adaptor<X> { typedef adapt IBackgroundTaskProgressEventArgs; };
struct IBackgroundTaskProgressEventArgs : IBackgroundTaskProgressEventArgs_raw, generate<IBackgroundTaskProgressEventArgs> {};

// BackgroundTaskProgressEventArgs
template<typename X> struct statics<BackgroundTaskProgressEventArgs, X> : X {
	typedef typename X::root_type BackgroundTaskProgressEventArgs;
};
struct BackgroundTaskProgressEventArgs : generate<BackgroundTaskProgressEventArgs> {};

// BackgroundTaskCompletedEventHandler
struct BackgroundTaskCompletedEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(BackgroundTaskRegistration* sender, BackgroundTaskCompletedEventArgs* args) = 0;
};

// IBackgroundTaskCompletedEventArgs
struct IBackgroundTaskCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InstanceId(Platform::Guid *value);
	virtual STDMETHODIMP _CheckResult();
};
template<typename X> struct IBackgroundTaskCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&IBackgroundTaskCompletedEventArgs_adaptor::InstanceId)->_get_InstanceId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} InstanceId;
	};
	void CheckResult() { hrcheck(X::get()->_CheckResult()); }
	IBackgroundTaskCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskCompletedEventArgs, X> : Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs_adaptor<X> { typedef adapt IBackgroundTaskCompletedEventArgs; };
struct IBackgroundTaskCompletedEventArgs : IBackgroundTaskCompletedEventArgs_raw, generate<IBackgroundTaskCompletedEventArgs> {};

// BackgroundTaskCompletedEventArgs
template<typename X> struct statics<BackgroundTaskCompletedEventArgs, X> : X {
	typedef typename X::root_type BackgroundTaskCompletedEventArgs;
};
struct BackgroundTaskCompletedEventArgs : generate<BackgroundTaskCompletedEventArgs> {};

// IBackgroundWorkCostStatics
struct IBackgroundWorkCostStatics : IInspectable {
	virtual STDMETHODIMP _get_CurrentBackgroundWorkCost(BackgroundWorkCostValue *value);
};

// IBackgroundTaskInstance2
struct IBackgroundTaskInstance2_raw : IInspectable {
	virtual STDMETHODIMP _GetThrottleCount(BackgroundTaskThrottleCounter counter, unsigned *value) = 0;
};
template<typename X> struct IBackgroundTaskInstance2_adaptor : X {
	unsigned GetThrottleCount(BackgroundTaskThrottleCounter counter) { unsigned value; hrcheck(X::get()->_GetThrottleCount(counter, &value)); return value; }
};
template<typename X> struct adapt<IBackgroundTaskInstance2, X> : Windows::ApplicationModel::Background::IBackgroundTaskInstance2_adaptor<X> { typedef adapt IBackgroundTaskInstance2; };
template<typename X> struct IBackgroundTaskInstance2_unadaptor : X {
	STDMETHODIMP _GetThrottleCount(BackgroundTaskThrottleCounter counter, unsigned *value) { return hrtry([&, this] { *value = X::get()->GetThrottleCount(counter); }); }
};
template<typename X> struct unadapt<IBackgroundTaskInstance2, X> : Windows::ApplicationModel::Background::IBackgroundTaskInstance2_unadaptor<X> {};
struct IBackgroundTaskInstance2 : IBackgroundTaskInstance2_raw, generate<IBackgroundTaskInstance2> {};

// IBackgroundTaskInstance4
struct IBackgroundTaskInstance4_raw : IInspectable {
	virtual STDMETHODIMP _get_User(System::User* *value) = 0;
};
template<typename X> struct IBackgroundTaskInstance4_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IBackgroundTaskInstance4_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	IBackgroundTaskInstance4_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskInstance4, X> : Windows::ApplicationModel::Background::IBackgroundTaskInstance4_adaptor<X> { typedef adapt IBackgroundTaskInstance4; };
template<typename X> struct IBackgroundTaskInstance4_unadaptor : X {
	STDMETHODIMP _get_User(System::User* *value) { return hrtry([&, this] { get_prop(value, User); }); }
};
template<typename X> struct unadapt<IBackgroundTaskInstance4, X> : Windows::ApplicationModel::Background::IBackgroundTaskInstance4_unadaptor<X> {};
struct IBackgroundTaskInstance4 : IBackgroundTaskInstance4_raw, generate<IBackgroundTaskInstance4> {};

// IBackgroundTask
struct IBackgroundTask_raw : IInspectable {
	virtual STDMETHODIMP _Run(IBackgroundTaskInstance* taskInstance) = 0;
};
template<typename X> struct IBackgroundTask_adaptor : X {
	void Run(pptr<IBackgroundTaskInstance> taskInstance) { hrcheck(X::get()->_Run(taskInstance)); }
};
template<typename X> struct adapt<IBackgroundTask, X> : Windows::ApplicationModel::Background::IBackgroundTask_adaptor<X> { typedef adapt IBackgroundTask; };
template<typename X> struct IBackgroundTask_unadaptor : X {
	STDMETHODIMP _Run(IBackgroundTaskInstance* taskInstance) { return hrtry([&, this] { X::get()->Run(taskInstance); }); }
};
template<typename X> struct unadapt<IBackgroundTask, X> : Windows::ApplicationModel::Background::IBackgroundTask_unadaptor<X> {};
struct IBackgroundTask : IBackgroundTask_raw, generate<IBackgroundTask> {};

// IBackgroundTaskRegistrationGroupFactory
struct IBackgroundTaskRegistrationGroupFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING id, BackgroundTaskRegistrationGroup* *group);
	virtual STDMETHODIMP _CreateWithName(HSTRING id, HSTRING name, BackgroundTaskRegistrationGroup* *group);
};

// IBackgroundTaskRegistrationGroup
struct IBackgroundTaskRegistrationGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _add_BackgroundActivated(Foundation::TypedEventHandler<BackgroundTaskRegistrationGroup*, Activation::BackgroundActivatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BackgroundActivated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_AllTasks(Foundation::Collections::IMapView<Platform::Guid, BackgroundTaskRegistration*>* *value);
};
template<typename X> struct IBackgroundTaskRegistrationGroup_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<BackgroundTaskRegistration>>> get() { Foundation::Collections::IMapView<Platform::Guid, BackgroundTaskRegistration*>* value; hrcheck(enc(&IBackgroundTaskRegistrationGroup_adaptor::AllTasks)->_get_AllTasks(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<BackgroundTaskRegistration>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<BackgroundTaskRegistration>>> () { return get(); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, ptr<BackgroundTaskRegistration>>> operator->() { return get(); }
		} AllTasks;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBackgroundTaskRegistrationGroup_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBackgroundTaskRegistrationGroup_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BackgroundTaskRegistrationGroup>, ptr<Activation::BackgroundActivatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBackgroundTaskRegistrationGroup_adaptor::BackgroundActivated)->_add_BackgroundActivated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBackgroundTaskRegistrationGroup_adaptor::BackgroundActivated)->_remove_BackgroundActivated(token)); }
		} BackgroundActivated;
	};
	IBackgroundTaskRegistrationGroup_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskRegistrationGroup, X> : Windows::ApplicationModel::Background::IBackgroundTaskRegistrationGroup_adaptor<X> { typedef adapt IBackgroundTaskRegistrationGroup; };
struct IBackgroundTaskRegistrationGroup : IBackgroundTaskRegistrationGroup_raw, generate<IBackgroundTaskRegistrationGroup> {};

// BackgroundTaskRegistrationGroup
template<typename> struct BackgroundTaskRegistrationGroup_statics {
	static BackgroundTaskRegistrationGroup *activate(hstring_ref id) { BackgroundTaskRegistrationGroup *group; hrcheck(get_activation_factory<BackgroundTaskRegistrationGroup, IBackgroundTaskRegistrationGroupFactory>()->_Create(id, &group)); return group; }
	static BackgroundTaskRegistrationGroup *activate(hstring_ref id, hstring_ref name) { BackgroundTaskRegistrationGroup *group; hrcheck(get_activation_factory<BackgroundTaskRegistrationGroup, IBackgroundTaskRegistrationGroupFactory>()->_CreateWithName(id, name, &group)); return group; }
};

template<typename X> struct statics<BackgroundTaskRegistrationGroup, X> : X, Windows::ApplicationModel::Background::BackgroundTaskRegistrationGroup_statics<void> {
	using Windows::ApplicationModel::Background::BackgroundTaskRegistrationGroup_statics<void>::activate;
	typedef typename X::root_type BackgroundTaskRegistrationGroup;
};
struct BackgroundTaskRegistrationGroup : generate<BackgroundTaskRegistrationGroup> {};

// IBackgroundTaskBuilder
struct IBackgroundTaskBuilder_raw : IInspectable {
	virtual STDMETHODIMP _put_TaskEntryPoint(HSTRING value);
	virtual STDMETHODIMP _get_TaskEntryPoint(HSTRING *value);
	virtual STDMETHODIMP _SetTrigger(IBackgroundTrigger* trigger);
	virtual STDMETHODIMP _AddCondition(IBackgroundCondition* condition);
	virtual STDMETHODIMP _put_Name(HSTRING value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _Register(BackgroundTaskRegistration* *task);
};
template<typename X> struct IBackgroundTaskBuilder_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBackgroundTaskBuilder_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IBackgroundTaskBuilder_adaptor::Name)->_put_Name(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Name;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBackgroundTaskBuilder_adaptor::TaskEntryPoint)->_get_TaskEntryPoint(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IBackgroundTaskBuilder_adaptor::TaskEntryPoint)->_put_TaskEntryPoint(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} TaskEntryPoint;
	};
	void SetTrigger(pptr<IBackgroundTrigger> trigger) { hrcheck(X::get()->_SetTrigger(trigger)); }
	void AddCondition(pptr<IBackgroundCondition> condition) { hrcheck(X::get()->_AddCondition(condition)); }
	ptr<BackgroundTaskRegistration> Register() { BackgroundTaskRegistration* task; hrcheck(X::get()->_Register(&task)); return from_abi(task); }
	IBackgroundTaskBuilder_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskBuilder, X> : Windows::ApplicationModel::Background::IBackgroundTaskBuilder_adaptor<X> { typedef adapt IBackgroundTaskBuilder; };
struct IBackgroundTaskBuilder : IBackgroundTaskBuilder_raw, generate<IBackgroundTaskBuilder> {};

// IBackgroundTaskBuilder2
struct IBackgroundTaskBuilder2_raw : IInspectable {
	virtual STDMETHODIMP _put_CancelOnConditionLoss(bool value);
	virtual STDMETHODIMP _get_CancelOnConditionLoss(bool *value);
};
template<typename X> struct IBackgroundTaskBuilder2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBackgroundTaskBuilder2_adaptor::CancelOnConditionLoss)->_get_CancelOnConditionLoss(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IBackgroundTaskBuilder2_adaptor::CancelOnConditionLoss)->_put_CancelOnConditionLoss(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} CancelOnConditionLoss;
	};
	IBackgroundTaskBuilder2_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskBuilder2, X> : Windows::ApplicationModel::Background::IBackgroundTaskBuilder2_adaptor<X> { typedef adapt IBackgroundTaskBuilder2; };
struct IBackgroundTaskBuilder2 : IBackgroundTaskBuilder2_raw, generate<IBackgroundTaskBuilder2> {};

// IBackgroundTaskBuilder3
struct IBackgroundTaskBuilder3_raw : IInspectable {
	virtual STDMETHODIMP _put_IsNetworkRequested(bool value);
	virtual STDMETHODIMP _get_IsNetworkRequested(bool *value);
};
template<typename X> struct IBackgroundTaskBuilder3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBackgroundTaskBuilder3_adaptor::IsNetworkRequested)->_get_IsNetworkRequested(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IBackgroundTaskBuilder3_adaptor::IsNetworkRequested)->_put_IsNetworkRequested(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsNetworkRequested;
	};
	IBackgroundTaskBuilder3_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskBuilder3, X> : Windows::ApplicationModel::Background::IBackgroundTaskBuilder3_adaptor<X> { typedef adapt IBackgroundTaskBuilder3; };
struct IBackgroundTaskBuilder3 : IBackgroundTaskBuilder3_raw, generate<IBackgroundTaskBuilder3> {};

// IBackgroundTaskBuilder4
struct IBackgroundTaskBuilder4_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskGroup(BackgroundTaskRegistrationGroup* *value);
	virtual STDMETHODIMP _put_TaskGroup(BackgroundTaskRegistrationGroup* value);
};
template<typename X> struct IBackgroundTaskBuilder4_adaptor : X {
	union {
		struct : property {
			ptr<BackgroundTaskRegistrationGroup> get() { BackgroundTaskRegistrationGroup* value; hrcheck(enc(&IBackgroundTaskBuilder4_adaptor::TaskGroup)->_get_TaskGroup(&value)); return from_abi(value); }
			ptr<BackgroundTaskRegistrationGroup> operator()() { return get(); }
			operator ptr<BackgroundTaskRegistrationGroup> () { return get(); }
			ptr<BackgroundTaskRegistrationGroup> operator->() { return get(); }
			void put(pptr<BackgroundTaskRegistrationGroup> value) { hrcheck(enc(&IBackgroundTaskBuilder4_adaptor::TaskGroup)->_put_TaskGroup(value)); }
			void operator=(pptr<BackgroundTaskRegistrationGroup> value) { put(value); }
			void operator()(pptr<BackgroundTaskRegistrationGroup> value) { put(value); }
		} TaskGroup;
	};
	IBackgroundTaskBuilder4_adaptor() {}
};
template<typename X> struct adapt<IBackgroundTaskBuilder4, X> : Windows::ApplicationModel::Background::IBackgroundTaskBuilder4_adaptor<X> { typedef adapt IBackgroundTaskBuilder4; };
struct IBackgroundTaskBuilder4 : IBackgroundTaskBuilder4_raw, generate<IBackgroundTaskBuilder4> {};

// BackgroundTaskBuilder
template<typename X> struct statics<BackgroundTaskBuilder, X> : X {
	typedef typename X::root_type BackgroundTaskBuilder;
};
struct BackgroundTaskBuilder : generate<BackgroundTaskBuilder> {};

// BackgroundWorkCost
template<typename> struct BackgroundWorkCost_statics {
	static struct _CurrentBackgroundWorkCost : property {
		BackgroundWorkCostValue get() { BackgroundWorkCostValue value; hrcheck(get_activation_factory<BackgroundWorkCost, IBackgroundWorkCostStatics>()->_get_CurrentBackgroundWorkCost(&value)); return value; }
		BackgroundWorkCostValue operator()() { return get(); }
		operator BackgroundWorkCostValue () { return get(); }
	} CurrentBackgroundWorkCost;
};
template<typename X> typename BackgroundWorkCost_statics<X>::_CurrentBackgroundWorkCost BackgroundWorkCost_statics<X>::CurrentBackgroundWorkCost;

template<typename X> struct statics<BackgroundWorkCost, X> : X, Windows::ApplicationModel::Background::BackgroundWorkCost_statics<void> {
	typedef typename X::root_type BackgroundWorkCost;
};
struct BackgroundWorkCost : generate<BackgroundWorkCost> {};

// IChatMessageNotificationTrigger
struct IChatMessageNotificationTrigger : IInspectable, generate<IChatMessageNotificationTrigger> {};

// IChatMessageReceivedNotificationTrigger
struct IChatMessageReceivedNotificationTrigger : IInspectable, generate<IChatMessageReceivedNotificationTrigger> {};

// IRcsEndUserMessageAvailableTrigger
struct IRcsEndUserMessageAvailableTrigger : IInspectable, generate<IRcsEndUserMessageAvailableTrigger> {};

// ChatMessageNotificationTrigger
template<typename X> struct statics<ChatMessageNotificationTrigger, X> : X {
	typedef typename X::root_type ChatMessageNotificationTrigger;
};
struct ChatMessageNotificationTrigger : generate<ChatMessageNotificationTrigger> {};

// ChatMessageReceivedNotificationTrigger
template<typename X> struct statics<ChatMessageReceivedNotificationTrigger, X> : X {
	typedef typename X::root_type ChatMessageReceivedNotificationTrigger;
};
struct ChatMessageReceivedNotificationTrigger : generate<ChatMessageReceivedNotificationTrigger> {};

// RcsEndUserMessageAvailableTrigger
template<typename X> struct statics<RcsEndUserMessageAvailableTrigger, X> : X {
	typedef typename X::root_type RcsEndUserMessageAvailableTrigger;
};
struct RcsEndUserMessageAvailableTrigger : generate<RcsEndUserMessageAvailableTrigger> {};

// IContactStoreNotificationTrigger
struct IContactStoreNotificationTrigger : IInspectable, generate<IContactStoreNotificationTrigger> {};

// ContactStoreNotificationTrigger
template<typename X> struct statics<ContactStoreNotificationTrigger, X> : X {
	typedef typename X::root_type ContactStoreNotificationTrigger;
};
struct ContactStoreNotificationTrigger : generate<ContactStoreNotificationTrigger> {};

// IEmailStoreNotificationTrigger
struct IEmailStoreNotificationTrigger : IInspectable, generate<IEmailStoreNotificationTrigger> {};

// EmailStoreNotificationTrigger
template<typename X> struct statics<EmailStoreNotificationTrigger, X> : X {
	typedef typename X::root_type EmailStoreNotificationTrigger;
};
struct EmailStoreNotificationTrigger : generate<EmailStoreNotificationTrigger> {};

// MobileBroadbandRegistrationStateChangeTrigger
template<typename X> struct statics<MobileBroadbandRegistrationStateChangeTrigger, X> : X {
	typedef typename X::root_type MobileBroadbandRegistrationStateChangeTrigger;
};
struct MobileBroadbandRegistrationStateChangeTrigger : generate<MobileBroadbandRegistrationStateChangeTrigger> {};

// MobileBroadbandRadioStateChangeTrigger
template<typename X> struct statics<MobileBroadbandRadioStateChangeTrigger, X> : X {
	typedef typename X::root_type MobileBroadbandRadioStateChangeTrigger;
};
struct MobileBroadbandRadioStateChangeTrigger : generate<MobileBroadbandRadioStateChangeTrigger> {};

// MobileBroadbandPinLockStateChangeTrigger
template<typename X> struct statics<MobileBroadbandPinLockStateChangeTrigger, X> : X {
	typedef typename X::root_type MobileBroadbandPinLockStateChangeTrigger;
};
struct MobileBroadbandPinLockStateChangeTrigger : generate<MobileBroadbandPinLockStateChangeTrigger> {};

// MobileBroadbandDeviceServiceNotificationTrigger
template<typename X> struct statics<MobileBroadbandDeviceServiceNotificationTrigger, X> : X {
	typedef typename X::root_type MobileBroadbandDeviceServiceNotificationTrigger;
};
struct MobileBroadbandDeviceServiceNotificationTrigger : generate<MobileBroadbandDeviceServiceNotificationTrigger> {};

// NetworkOperatorDataUsageTrigger
template<typename X> struct statics<NetworkOperatorDataUsageTrigger, X> : X {
	typedef typename X::root_type NetworkOperatorDataUsageTrigger;
};
struct NetworkOperatorDataUsageTrigger : generate<NetworkOperatorDataUsageTrigger> {};

// TetheringEntitlementCheckTrigger
template<typename X> struct statics<TetheringEntitlementCheckTrigger, X> : X {
	typedef typename X::root_type TetheringEntitlementCheckTrigger;
};
struct TetheringEntitlementCheckTrigger : generate<TetheringEntitlementCheckTrigger> {};

// MobileBroadbandPcoDataChangeTrigger
template<typename X> struct statics<MobileBroadbandPcoDataChangeTrigger, X> : X {
	typedef typename X::root_type MobileBroadbandPcoDataChangeTrigger;
};
struct MobileBroadbandPcoDataChangeTrigger : generate<MobileBroadbandPcoDataChangeTrigger> {};

// ISmsMessageReceivedTriggerFactory
struct ISmsMessageReceivedTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Devices::Sms::SmsFilterRules* filterRules, SmsMessageReceivedTrigger* *value);
};

// SmsMessageReceivedTrigger
template<typename> struct SmsMessageReceivedTrigger_statics {
	static SmsMessageReceivedTrigger *activate(pptr<Devices::Sms::SmsFilterRules> filterRules) { SmsMessageReceivedTrigger *value; hrcheck(get_activation_factory<SmsMessageReceivedTrigger, ISmsMessageReceivedTriggerFactory>()->_Create(filterRules, &value)); return value; }
};

template<typename X> struct statics<SmsMessageReceivedTrigger, X> : X, Windows::ApplicationModel::Background::SmsMessageReceivedTrigger_statics<void> {
	using Windows::ApplicationModel::Background::SmsMessageReceivedTrigger_statics<void>::activate;
	typedef typename X::root_type SmsMessageReceivedTrigger;
};
struct SmsMessageReceivedTrigger : generate<SmsMessageReceivedTrigger> {};

// IStorageLibraryContentChangedTrigger
struct IStorageLibraryContentChangedTrigger : IInspectable, generate<IStorageLibraryContentChangedTrigger> {};

// IStorageLibraryContentChangedTriggerStatics
struct IStorageLibraryContentChangedTriggerStatics : IInspectable {
	virtual STDMETHODIMP _Create(Storage::StorageLibrary* storageLibrary, StorageLibraryContentChangedTrigger* *result);
	virtual STDMETHODIMP _CreateFromLibraries(Foundation::Collections::IIterable<Storage::StorageLibrary*>* storageLibraries, StorageLibraryContentChangedTrigger* *result);
};

// StorageLibraryContentChangedTrigger
template<typename> struct StorageLibraryContentChangedTrigger_statics {
	static ptr<StorageLibraryContentChangedTrigger> Create(pptr<Storage::StorageLibrary> storageLibrary) { StorageLibraryContentChangedTrigger* result; hrcheck(get_activation_factory<StorageLibraryContentChangedTrigger, IStorageLibraryContentChangedTriggerStatics>()->_Create(storageLibrary, &result)); return from_abi(result); }
	static ptr<StorageLibraryContentChangedTrigger> CreateFromLibraries(pptr<Foundation::Collections::IIterable<ptr<Storage::StorageLibrary>>> storageLibraries) { StorageLibraryContentChangedTrigger* result; hrcheck(get_activation_factory<StorageLibraryContentChangedTrigger, IStorageLibraryContentChangedTriggerStatics>()->_CreateFromLibraries(to_abi(storageLibraries), &result)); return from_abi(result); }
};

template<typename X> struct statics<StorageLibraryContentChangedTrigger, X> : X, Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger_statics<void> {
	typedef typename X::root_type StorageLibraryContentChangedTrigger;
};
struct StorageLibraryContentChangedTrigger : generate<StorageLibraryContentChangedTrigger> {};

// IStorageLibraryChangeTrackerTriggerFactory
struct IStorageLibraryChangeTrackerTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Storage::StorageLibraryChangeTracker* tracker, StorageLibraryChangeTrackerTrigger* *result);
};

// StorageLibraryChangeTrackerTrigger
template<typename> struct StorageLibraryChangeTrackerTrigger_statics {
	static StorageLibraryChangeTrackerTrigger *activate(pptr<Storage::StorageLibraryChangeTracker> tracker) { StorageLibraryChangeTrackerTrigger *result; hrcheck(get_activation_factory<StorageLibraryChangeTrackerTrigger, IStorageLibraryChangeTrackerTriggerFactory>()->_Create(tracker, &result)); return result; }
};

template<typename X> struct statics<StorageLibraryChangeTrackerTrigger, X> : X, Windows::ApplicationModel::Background::StorageLibraryChangeTrackerTrigger_statics<void> {
	using Windows::ApplicationModel::Background::StorageLibraryChangeTrackerTrigger_statics<void>::activate;
	typedef typename X::root_type StorageLibraryChangeTrackerTrigger;
};
struct StorageLibraryChangeTrackerTrigger : generate<StorageLibraryChangeTrackerTrigger> {};

// PaymentAppCanMakePaymentTrigger
template<typename X> struct statics<PaymentAppCanMakePaymentTrigger, X> : X {
	typedef typename X::root_type PaymentAppCanMakePaymentTrigger;
};
struct PaymentAppCanMakePaymentTrigger : generate<PaymentAppCanMakePaymentTrigger> {};

// IDeviceUseTrigger
struct IDeviceUseTrigger_raw : IInspectable {
	virtual STDMETHODIMP _RequestAsyncSimple(HSTRING deviceId, Foundation::IAsyncOperation<DeviceTriggerResult>* *result);
	virtual STDMETHODIMP _RequestAsyncWithArguments(HSTRING deviceId, HSTRING arguments, Foundation::IAsyncOperation<DeviceTriggerResult>* *result);
};
template<typename X> struct IDeviceUseTrigger_adaptor : X {
	ptr<Foundation::IAsyncOperation<DeviceTriggerResult>> RequestAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<DeviceTriggerResult>* result; hrcheck(X::get()->_RequestAsyncSimple(deviceId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<DeviceTriggerResult>> RequestAsync(hstring_ref deviceId, hstring_ref arguments) { Foundation::IAsyncOperation<DeviceTriggerResult>* result; hrcheck(X::get()->_RequestAsyncWithArguments(deviceId, arguments, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IDeviceUseTrigger, X> : Windows::ApplicationModel::Background::IDeviceUseTrigger_adaptor<X> { typedef adapt IDeviceUseTrigger; };
struct IDeviceUseTrigger : IDeviceUseTrigger_raw, generate<IDeviceUseTrigger> {};

// IDeviceServicingTrigger
struct IDeviceServicingTrigger_raw : IInspectable {
	virtual STDMETHODIMP _RequestAsyncSimple(HSTRING deviceId, Foundation::TimeSpan expectedDuration, Foundation::IAsyncOperation<DeviceTriggerResult>* *result);
	virtual STDMETHODIMP _RequestAsyncWithArguments(HSTRING deviceId, Foundation::TimeSpan expectedDuration, HSTRING arguments, Foundation::IAsyncOperation<DeviceTriggerResult>* *result);
};
template<typename X> struct IDeviceServicingTrigger_adaptor : X {
	ptr<Foundation::IAsyncOperation<DeviceTriggerResult>> RequestAsync(hstring_ref deviceId, const Foundation::TimeSpan& expectedDuration) { Foundation::IAsyncOperation<DeviceTriggerResult>* result; hrcheck(X::get()->_RequestAsyncSimple(deviceId, expectedDuration, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<DeviceTriggerResult>> RequestAsync(hstring_ref deviceId, const Foundation::TimeSpan& expectedDuration, hstring_ref arguments) { Foundation::IAsyncOperation<DeviceTriggerResult>* result; hrcheck(X::get()->_RequestAsyncWithArguments(deviceId, expectedDuration, arguments, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IDeviceServicingTrigger, X> : Windows::ApplicationModel::Background::IDeviceServicingTrigger_adaptor<X> { typedef adapt IDeviceServicingTrigger; };
struct IDeviceServicingTrigger : IDeviceServicingTrigger_raw, generate<IDeviceServicingTrigger> {};

// DeviceUseTrigger
template<typename X> struct statics<DeviceUseTrigger, X> : X {
	typedef typename X::root_type DeviceUseTrigger;
};
struct DeviceUseTrigger : generate<DeviceUseTrigger> {
	using IDeviceUseTrigger::RequestAsync;
};

// DeviceServicingTrigger
template<typename X> struct statics<DeviceServicingTrigger, X> : X {
	typedef typename X::root_type DeviceServicingTrigger;
};
struct DeviceServicingTrigger : generate<DeviceServicingTrigger> {
	using IDeviceServicingTrigger::RequestAsync;
};

// IRfcommConnectionTrigger
struct IRfcommConnectionTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_InboundConnection(Devices::Bluetooth::Background::RfcommInboundConnectionInformation* *value);
	virtual STDMETHODIMP _get_OutboundConnection(Devices::Bluetooth::Background::RfcommOutboundConnectionInformation* *value);
	virtual STDMETHODIMP _get_AllowMultipleConnections(bool *value);
	virtual STDMETHODIMP _put_AllowMultipleConnections(bool value);
	virtual STDMETHODIMP _get_ProtectionLevel(Networking::Sockets::SocketProtectionLevel *value);
	virtual STDMETHODIMP _put_ProtectionLevel(Networking::Sockets::SocketProtectionLevel value);
	virtual STDMETHODIMP _get_RemoteHostName(Networking::HostName* *value);
	virtual STDMETHODIMP _put_RemoteHostName(Networking::HostName* value);
};
template<typename X> struct IRfcommConnectionTrigger_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRfcommConnectionTrigger_adaptor::AllowMultipleConnections)->_get_AllowMultipleConnections(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRfcommConnectionTrigger_adaptor::AllowMultipleConnections)->_put_AllowMultipleConnections(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllowMultipleConnections;
		struct : property {
			ptr<Devices::Bluetooth::Background::RfcommInboundConnectionInformation> get() { Devices::Bluetooth::Background::RfcommInboundConnectionInformation* value; hrcheck(enc(&IRfcommConnectionTrigger_adaptor::InboundConnection)->_get_InboundConnection(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::Background::RfcommInboundConnectionInformation> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::Background::RfcommInboundConnectionInformation> () { return get(); }
			ptr<Devices::Bluetooth::Background::RfcommInboundConnectionInformation> operator->() { return get(); }
		} InboundConnection;
		struct : property {
			ptr<Devices::Bluetooth::Background::RfcommOutboundConnectionInformation> get() { Devices::Bluetooth::Background::RfcommOutboundConnectionInformation* value; hrcheck(enc(&IRfcommConnectionTrigger_adaptor::OutboundConnection)->_get_OutboundConnection(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::Background::RfcommOutboundConnectionInformation> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::Background::RfcommOutboundConnectionInformation> () { return get(); }
			ptr<Devices::Bluetooth::Background::RfcommOutboundConnectionInformation> operator->() { return get(); }
		} OutboundConnection;
		struct : property {
			Networking::Sockets::SocketProtectionLevel get() { Networking::Sockets::SocketProtectionLevel value; hrcheck(enc(&IRfcommConnectionTrigger_adaptor::ProtectionLevel)->_get_ProtectionLevel(&value)); return value; }
			Networking::Sockets::SocketProtectionLevel operator()() { return get(); }
			operator Networking::Sockets::SocketProtectionLevel () { return get(); }
			void put(Networking::Sockets::SocketProtectionLevel value) { hrcheck(enc(&IRfcommConnectionTrigger_adaptor::ProtectionLevel)->_put_ProtectionLevel(value)); }
			void operator=(Networking::Sockets::SocketProtectionLevel value) { put(value); }
			void operator()(Networking::Sockets::SocketProtectionLevel value) { put(value); }
		} ProtectionLevel;
		struct : property {
			ptr<Networking::HostName> get() { Networking::HostName* value; hrcheck(enc(&IRfcommConnectionTrigger_adaptor::RemoteHostName)->_get_RemoteHostName(&value)); return from_abi(value); }
			ptr<Networking::HostName> operator()() { return get(); }
			operator ptr<Networking::HostName> () { return get(); }
			ptr<Networking::HostName> operator->() { return get(); }
			void put(pptr<Networking::HostName> value) { hrcheck(enc(&IRfcommConnectionTrigger_adaptor::RemoteHostName)->_put_RemoteHostName(value)); }
			void operator=(pptr<Networking::HostName> value) { put(value); }
			void operator()(pptr<Networking::HostName> value) { put(value); }
		} RemoteHostName;
	};
	IRfcommConnectionTrigger_adaptor() {}
};
template<typename X> struct adapt<IRfcommConnectionTrigger, X> : Windows::ApplicationModel::Background::IRfcommConnectionTrigger_adaptor<X> { typedef adapt IRfcommConnectionTrigger; };
struct IRfcommConnectionTrigger : IRfcommConnectionTrigger_raw, generate<IRfcommConnectionTrigger> {};

// RfcommConnectionTrigger
template<typename X> struct statics<RfcommConnectionTrigger, X> : X {
	typedef typename X::root_type RfcommConnectionTrigger;
};
struct RfcommConnectionTrigger : generate<RfcommConnectionTrigger> {};

// IDeviceConnectionChangeTrigger
struct IDeviceConnectionChangeTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_CanMaintainConnection(bool *value);
	virtual STDMETHODIMP _get_MaintainConnection(bool *value);
	virtual STDMETHODIMP _put_MaintainConnection(bool value);
};
template<typename X> struct IDeviceConnectionChangeTrigger_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceConnectionChangeTrigger_adaptor::CanMaintainConnection)->_get_CanMaintainConnection(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanMaintainConnection;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceConnectionChangeTrigger_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDeviceConnectionChangeTrigger_adaptor::MaintainConnection)->_get_MaintainConnection(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IDeviceConnectionChangeTrigger_adaptor::MaintainConnection)->_put_MaintainConnection(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} MaintainConnection;
	};
	IDeviceConnectionChangeTrigger_adaptor() {}
};
template<typename X> struct adapt<IDeviceConnectionChangeTrigger, X> : Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger_adaptor<X> { typedef adapt IDeviceConnectionChangeTrigger; };
struct IDeviceConnectionChangeTrigger : IDeviceConnectionChangeTrigger_raw, generate<IDeviceConnectionChangeTrigger> {};

// IDeviceConnectionChangeTriggerStatics
struct IDeviceConnectionChangeTriggerStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<DeviceConnectionChangeTrigger*>* *deviceChangeTrigger);
};

// DeviceConnectionChangeTrigger
template<typename> struct DeviceConnectionChangeTrigger_statics {
	static ptr<Foundation::IAsyncOperation<ptr<DeviceConnectionChangeTrigger>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<DeviceConnectionChangeTrigger*>* deviceChangeTrigger; hrcheck(get_activation_factory<DeviceConnectionChangeTrigger, IDeviceConnectionChangeTriggerStatics>()->_FromIdAsync(deviceId, &deviceChangeTrigger)); return from_abi(deviceChangeTrigger); }
};

template<typename X> struct statics<DeviceConnectionChangeTrigger, X> : X, Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger_statics<void> {
	typedef typename X::root_type DeviceConnectionChangeTrigger;
};
struct DeviceConnectionChangeTrigger : generate<DeviceConnectionChangeTrigger> {};

// IGattCharacteristicNotificationTriggerFactory
struct IGattCharacteristicNotificationTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic* characteristic, GattCharacteristicNotificationTrigger* *gattCharacteristicNotificationTrigger);
};

// IGattCharacteristicNotificationTriggerFactory2
struct IGattCharacteristicNotificationTriggerFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateWithEventTriggeringMode(Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic* characteristic, Devices::Bluetooth::Background::BluetoothEventTriggeringMode eventTriggeringMode, GattCharacteristicNotificationTrigger* *result);
};

// IGattCharacteristicNotificationTrigger2
struct IGattCharacteristicNotificationTrigger2_raw : IInspectable {
	virtual STDMETHODIMP _get_EventTriggeringMode(Devices::Bluetooth::Background::BluetoothEventTriggeringMode *value);
};
template<typename X> struct IGattCharacteristicNotificationTrigger2_adaptor : X {
	union {
		struct : property {
			Devices::Bluetooth::Background::BluetoothEventTriggeringMode get() { Devices::Bluetooth::Background::BluetoothEventTriggeringMode value; hrcheck(enc(&IGattCharacteristicNotificationTrigger2_adaptor::EventTriggeringMode)->_get_EventTriggeringMode(&value)); return value; }
			Devices::Bluetooth::Background::BluetoothEventTriggeringMode operator()() { return get(); }
			operator Devices::Bluetooth::Background::BluetoothEventTriggeringMode () { return get(); }
		} EventTriggeringMode;
	};
	IGattCharacteristicNotificationTrigger2_adaptor() {}
};
template<typename X> struct adapt<IGattCharacteristicNotificationTrigger2, X> : Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger2_adaptor<X> { typedef adapt IGattCharacteristicNotificationTrigger2; };
struct IGattCharacteristicNotificationTrigger2 : IGattCharacteristicNotificationTrigger2_raw, generate<IGattCharacteristicNotificationTrigger2> {};

// IGattCharacteristicNotificationTrigger
struct IGattCharacteristicNotificationTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_Characteristic(Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic* *value);
};
template<typename X> struct IGattCharacteristicNotificationTrigger_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> get() { Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic* value; hrcheck(enc(&IGattCharacteristicNotificationTrigger_adaptor::Characteristic)->_get_Characteristic(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> () { return get(); }
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> operator->() { return get(); }
		} Characteristic;
	};
	IGattCharacteristicNotificationTrigger_adaptor() {}
};
template<typename X> struct adapt<IGattCharacteristicNotificationTrigger, X> : Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger_adaptor<X> { typedef adapt IGattCharacteristicNotificationTrigger; };
struct IGattCharacteristicNotificationTrigger : IGattCharacteristicNotificationTrigger_raw, generate<IGattCharacteristicNotificationTrigger> {};

// GattCharacteristicNotificationTrigger
template<typename> struct GattCharacteristicNotificationTrigger_statics {
	static GattCharacteristicNotificationTrigger *activate(pptr<Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> characteristic, Devices::Bluetooth::Background::BluetoothEventTriggeringMode eventTriggeringMode) { GattCharacteristicNotificationTrigger *result; hrcheck(get_activation_factory<GattCharacteristicNotificationTrigger, IGattCharacteristicNotificationTriggerFactory2>()->_Create(characteristic, eventTriggeringMode, &result)); return result; }
	static GattCharacteristicNotificationTrigger *activate(pptr<Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> characteristic) { GattCharacteristicNotificationTrigger *gattCharacteristicNotificationTrigger; hrcheck(get_activation_factory<GattCharacteristicNotificationTrigger, IGattCharacteristicNotificationTriggerFactory>()->_Create(characteristic, &gattCharacteristicNotificationTrigger)); return gattCharacteristicNotificationTrigger; }
};

template<typename X> struct statics<GattCharacteristicNotificationTrigger, X> : X, Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger_statics<void> {
	using Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger_statics<void>::activate;
	typedef typename X::root_type GattCharacteristicNotificationTrigger;
};
struct GattCharacteristicNotificationTrigger : generate<GattCharacteristicNotificationTrigger> {};

// IGattServiceProviderTriggerResult
struct IGattServiceProviderTriggerResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Trigger(GattServiceProviderTrigger* *value);
	virtual STDMETHODIMP _get_Error(Devices::Bluetooth::BluetoothError *value);
};
template<typename X> struct IGattServiceProviderTriggerResult_adaptor : X {
	union {
		struct : property {
			Devices::Bluetooth::BluetoothError get() { Devices::Bluetooth::BluetoothError value; hrcheck(enc(&IGattServiceProviderTriggerResult_adaptor::Error)->_get_Error(&value)); return value; }
			Devices::Bluetooth::BluetoothError operator()() { return get(); }
			operator Devices::Bluetooth::BluetoothError () { return get(); }
		} Error;
		struct : property {
			ptr<GattServiceProviderTrigger> get() { GattServiceProviderTrigger* value; hrcheck(enc(&IGattServiceProviderTriggerResult_adaptor::Trigger)->_get_Trigger(&value)); return from_abi(value); }
			ptr<GattServiceProviderTrigger> operator()() { return get(); }
			operator ptr<GattServiceProviderTrigger> () { return get(); }
			ptr<GattServiceProviderTrigger> operator->() { return get(); }
		} Trigger;
	};
	IGattServiceProviderTriggerResult_adaptor() {}
};
template<typename X> struct adapt<IGattServiceProviderTriggerResult, X> : Windows::ApplicationModel::Background::IGattServiceProviderTriggerResult_adaptor<X> { typedef adapt IGattServiceProviderTriggerResult; };
struct IGattServiceProviderTriggerResult : IGattServiceProviderTriggerResult_raw, generate<IGattServiceProviderTriggerResult> {};

// IGattServiceProviderTriggerStatics
struct IGattServiceProviderTriggerStatics : IInspectable {
	virtual STDMETHODIMP _CreateAsync(HSTRING triggerId, Platform::Guid serviceUuid, Foundation::IAsyncOperation<GattServiceProviderTriggerResult*>* *operation);
};

// IGattServiceProviderTrigger
struct IGattServiceProviderTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_TriggerId(HSTRING *value);
	virtual STDMETHODIMP _get_Service(Devices::Bluetooth::GenericAttributeProfile::GattLocalService* *value);
	virtual STDMETHODIMP _put_AdvertisingParameters(Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters* value);
	virtual STDMETHODIMP _get_AdvertisingParameters(Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters* *value);
};
template<typename X> struct IGattServiceProviderTrigger_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters> get() { Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters* value; hrcheck(enc(&IGattServiceProviderTrigger_adaptor::AdvertisingParameters)->_get_AdvertisingParameters(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters> () { return get(); }
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters> operator->() { return get(); }
			void put(pptr<Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters> value) { hrcheck(enc(&IGattServiceProviderTrigger_adaptor::AdvertisingParameters)->_put_AdvertisingParameters(value)); }
			void operator=(pptr<Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters> value) { put(value); }
			void operator()(pptr<Devices::Bluetooth::GenericAttributeProfile::GattServiceProviderAdvertisingParameters> value) { put(value); }
		} AdvertisingParameters;
		struct : property {
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattLocalService> get() { Devices::Bluetooth::GenericAttributeProfile::GattLocalService* value; hrcheck(enc(&IGattServiceProviderTrigger_adaptor::Service)->_get_Service(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattLocalService> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::GenericAttributeProfile::GattLocalService> () { return get(); }
			ptr<Devices::Bluetooth::GenericAttributeProfile::GattLocalService> operator->() { return get(); }
		} Service;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IGattServiceProviderTrigger_adaptor::TriggerId)->_get_TriggerId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TriggerId;
	};
	IGattServiceProviderTrigger_adaptor() {}
};
template<typename X> struct adapt<IGattServiceProviderTrigger, X> : Windows::ApplicationModel::Background::IGattServiceProviderTrigger_adaptor<X> { typedef adapt IGattServiceProviderTrigger; };
struct IGattServiceProviderTrigger : IGattServiceProviderTrigger_raw, generate<IGattServiceProviderTrigger> {};

// GattServiceProviderTrigger
template<typename> struct GattServiceProviderTrigger_statics {
	static ptr<Foundation::IAsyncOperation<ptr<GattServiceProviderTriggerResult>>> CreateAsync(hstring_ref triggerId, const Platform::Guid& serviceUuid) { Foundation::IAsyncOperation<GattServiceProviderTriggerResult*>* operation; hrcheck(get_activation_factory<GattServiceProviderTrigger, IGattServiceProviderTriggerStatics>()->_CreateAsync(triggerId, serviceUuid, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<GattServiceProviderTrigger, X> : X, Windows::ApplicationModel::Background::GattServiceProviderTrigger_statics<void> {
	typedef typename X::root_type GattServiceProviderTrigger;
};
struct GattServiceProviderTrigger : generate<GattServiceProviderTrigger> {};

// GattServiceProviderTriggerResult
template<typename X> struct statics<GattServiceProviderTriggerResult, X> : X {
	typedef typename X::root_type GattServiceProviderTriggerResult;
};
struct GattServiceProviderTriggerResult : generate<GattServiceProviderTriggerResult> {};

// IBluetoothLEAdvertisementWatcherTrigger
struct IBluetoothLEAdvertisementWatcherTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_MinSamplingInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MaxSamplingInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MinOutOfRangeTimeout(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_MaxOutOfRangeTimeout(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_SignalStrengthFilter(Devices::Bluetooth::BluetoothSignalStrengthFilter* *value);
	virtual STDMETHODIMP _put_SignalStrengthFilter(Devices::Bluetooth::BluetoothSignalStrengthFilter* value);
	virtual STDMETHODIMP _get_AdvertisementFilter(Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter* *value);
	virtual STDMETHODIMP _put_AdvertisementFilter(Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter* value);
};
template<typename X> struct IBluetoothLEAdvertisementWatcherTrigger_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> get() { Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter* value; hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::AdvertisementFilter)->_get_AdvertisementFilter(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> () { return get(); }
			ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> operator->() { return get(); }
			void put(pptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> value) { hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::AdvertisementFilter)->_put_AdvertisementFilter(value)); }
			void operator=(pptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> value) { put(value); }
			void operator()(pptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter> value) { put(value); }
		} AdvertisementFilter;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::MaxOutOfRangeTimeout)->_get_MaxOutOfRangeTimeout(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MaxOutOfRangeTimeout;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::MaxSamplingInterval)->_get_MaxSamplingInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MaxSamplingInterval;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::MinOutOfRangeTimeout)->_get_MinOutOfRangeTimeout(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MinOutOfRangeTimeout;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::MinSamplingInterval)->_get_MinSamplingInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} MinSamplingInterval;
		struct : property {
			ptr<Devices::Bluetooth::BluetoothSignalStrengthFilter> get() { Devices::Bluetooth::BluetoothSignalStrengthFilter* value; hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::SignalStrengthFilter)->_get_SignalStrengthFilter(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::BluetoothSignalStrengthFilter> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::BluetoothSignalStrengthFilter> () { return get(); }
			ptr<Devices::Bluetooth::BluetoothSignalStrengthFilter> operator->() { return get(); }
			void put(pptr<Devices::Bluetooth::BluetoothSignalStrengthFilter> value) { hrcheck(enc(&IBluetoothLEAdvertisementWatcherTrigger_adaptor::SignalStrengthFilter)->_put_SignalStrengthFilter(value)); }
			void operator=(pptr<Devices::Bluetooth::BluetoothSignalStrengthFilter> value) { put(value); }
			void operator()(pptr<Devices::Bluetooth::BluetoothSignalStrengthFilter> value) { put(value); }
		} SignalStrengthFilter;
	};
	IBluetoothLEAdvertisementWatcherTrigger_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementWatcherTrigger, X> : Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger_adaptor<X> { typedef adapt IBluetoothLEAdvertisementWatcherTrigger; };
struct IBluetoothLEAdvertisementWatcherTrigger : IBluetoothLEAdvertisementWatcherTrigger_raw, generate<IBluetoothLEAdvertisementWatcherTrigger> {};

// BluetoothLEAdvertisementWatcherTrigger
template<typename X> struct statics<BluetoothLEAdvertisementWatcherTrigger, X> : X {
	typedef typename X::root_type BluetoothLEAdvertisementWatcherTrigger;
};
struct BluetoothLEAdvertisementWatcherTrigger : generate<BluetoothLEAdvertisementWatcherTrigger> {};

// IBluetoothLEAdvertisementPublisherTrigger
struct IBluetoothLEAdvertisementPublisherTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_Advertisement(Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement* *value);
};
template<typename X> struct IBluetoothLEAdvertisementPublisherTrigger_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement> get() { Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement* value; hrcheck(enc(&IBluetoothLEAdvertisementPublisherTrigger_adaptor::Advertisement)->_get_Advertisement(&value)); return from_abi(value); }
			ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement> operator()() { return get(); }
			operator ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement> () { return get(); }
			ptr<Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement> operator->() { return get(); }
		} Advertisement;
	};
	IBluetoothLEAdvertisementPublisherTrigger_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAdvertisementPublisherTrigger, X> : Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger_adaptor<X> { typedef adapt IBluetoothLEAdvertisementPublisherTrigger; };
struct IBluetoothLEAdvertisementPublisherTrigger : IBluetoothLEAdvertisementPublisherTrigger_raw, generate<IBluetoothLEAdvertisementPublisherTrigger> {};

// BluetoothLEAdvertisementPublisherTrigger
template<typename X> struct statics<BluetoothLEAdvertisementPublisherTrigger, X> : X {
	typedef typename X::root_type BluetoothLEAdvertisementPublisherTrigger;
};
struct BluetoothLEAdvertisementPublisherTrigger : generate<BluetoothLEAdvertisementPublisherTrigger> {};

// IDeviceWatcherTrigger
struct IDeviceWatcherTrigger : IInspectable, generate<IDeviceWatcherTrigger> {};

// DeviceWatcherTrigger
template<typename X> struct statics<DeviceWatcherTrigger, X> : X {
	typedef typename X::root_type DeviceWatcherTrigger;
};
struct DeviceWatcherTrigger : generate<DeviceWatcherTrigger> {};

// ILocationTrigger
struct ILocationTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_TriggerType(LocationTriggerType *triggerType);
};
template<typename X> struct ILocationTrigger_adaptor : X {
	union {
		struct : property {
			LocationTriggerType get() { LocationTriggerType triggerType; hrcheck(enc(&ILocationTrigger_adaptor::TriggerType)->_get_TriggerType(&triggerType)); return triggerType; }
			LocationTriggerType operator()() { return get(); }
			operator LocationTriggerType () { return get(); }
		} TriggerType;
	};
	ILocationTrigger_adaptor() {}
};
template<typename X> struct adapt<ILocationTrigger, X> : Windows::ApplicationModel::Background::ILocationTrigger_adaptor<X> { typedef adapt ILocationTrigger; };
struct ILocationTrigger : ILocationTrigger_raw, generate<ILocationTrigger> {};

// ILocationTriggerFactory
struct ILocationTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(LocationTriggerType triggerType, LocationTrigger* *locationTrigger);
};

// LocationTrigger
template<typename> struct LocationTrigger_statics {
	static LocationTrigger *activate(LocationTriggerType triggerType) { LocationTrigger *locationTrigger; hrcheck(get_activation_factory<LocationTrigger, ILocationTriggerFactory>()->_Create(triggerType, &locationTrigger)); return locationTrigger; }
};

template<typename X> struct statics<LocationTrigger, X> : X, Windows::ApplicationModel::Background::LocationTrigger_statics<void> {
	using Windows::ApplicationModel::Background::LocationTrigger_statics<void>::activate;
	typedef typename X::root_type LocationTrigger;
};
struct LocationTrigger : generate<LocationTrigger> {};

// IGeovisitTrigger
struct IGeovisitTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_MonitoringScope(Devices::Geolocation::VisitMonitoringScope *value);
	virtual STDMETHODIMP _put_MonitoringScope(Devices::Geolocation::VisitMonitoringScope value);
};
template<typename X> struct IGeovisitTrigger_adaptor : X {
	union {
		struct : property {
			Devices::Geolocation::VisitMonitoringScope get() { Devices::Geolocation::VisitMonitoringScope value; hrcheck(enc(&IGeovisitTrigger_adaptor::MonitoringScope)->_get_MonitoringScope(&value)); return value; }
			Devices::Geolocation::VisitMonitoringScope operator()() { return get(); }
			operator Devices::Geolocation::VisitMonitoringScope () { return get(); }
			void put(Devices::Geolocation::VisitMonitoringScope value) { hrcheck(enc(&IGeovisitTrigger_adaptor::MonitoringScope)->_put_MonitoringScope(value)); }
			void operator=(Devices::Geolocation::VisitMonitoringScope value) { put(value); }
			void operator()(Devices::Geolocation::VisitMonitoringScope value) { put(value); }
		} MonitoringScope;
	};
	IGeovisitTrigger_adaptor() {}
};
template<typename X> struct adapt<IGeovisitTrigger, X> : Windows::ApplicationModel::Background::IGeovisitTrigger_adaptor<X> { typedef adapt IGeovisitTrigger; };
struct IGeovisitTrigger : IGeovisitTrigger_raw, generate<IGeovisitTrigger> {};

// GeovisitTrigger
template<typename X> struct statics<GeovisitTrigger, X> : X {
	typedef typename X::root_type GeovisitTrigger;
};
struct GeovisitTrigger : generate<GeovisitTrigger> {};

// IActivitySensorTrigger
struct IActivitySensorTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_SubscribedActivities(Foundation::Collections::IVector<Devices::Sensors::ActivityType>* *value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _get_SupportedActivities(Foundation::Collections::IVectorView<Devices::Sensors::ActivityType>* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
};
template<typename X> struct IActivitySensorTrigger_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IActivitySensorTrigger_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IActivitySensorTrigger_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ReportInterval;
		struct : property {
			ptr<Foundation::Collections::IVector<Devices::Sensors::ActivityType>> get() { Foundation::Collections::IVector<Devices::Sensors::ActivityType>* value; hrcheck(enc(&IActivitySensorTrigger_adaptor::SubscribedActivities)->_get_SubscribedActivities(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<Devices::Sensors::ActivityType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<Devices::Sensors::ActivityType>> () { return get(); }
			ptr<Foundation::Collections::IVector<Devices::Sensors::ActivityType>> operator->() { return get(); }
		} SubscribedActivities;
		struct : property {
			ptr<Foundation::Collections::IVectorView<Devices::Sensors::ActivityType>> get() { Foundation::Collections::IVectorView<Devices::Sensors::ActivityType>* value; hrcheck(enc(&IActivitySensorTrigger_adaptor::SupportedActivities)->_get_SupportedActivities(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<Devices::Sensors::ActivityType>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<Devices::Sensors::ActivityType>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<Devices::Sensors::ActivityType>> operator->() { return get(); }
		} SupportedActivities;
	};
	IActivitySensorTrigger_adaptor() {}
};
template<typename X> struct adapt<IActivitySensorTrigger, X> : Windows::ApplicationModel::Background::IActivitySensorTrigger_adaptor<X> { typedef adapt IActivitySensorTrigger; };
struct IActivitySensorTrigger : IActivitySensorTrigger_raw, generate<IActivitySensorTrigger> {};

// IActivitySensorTriggerFactory
struct IActivitySensorTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(unsigned reportIntervalInMilliseconds, ActivitySensorTrigger* *activityTrigger);
};

// ActivitySensorTrigger
template<typename> struct ActivitySensorTrigger_statics {
	static ActivitySensorTrigger *activate(unsigned reportIntervalInMilliseconds) { ActivitySensorTrigger *activityTrigger; hrcheck(get_activation_factory<ActivitySensorTrigger, IActivitySensorTriggerFactory>()->_Create(reportIntervalInMilliseconds, &activityTrigger)); return activityTrigger; }
};

template<typename X> struct statics<ActivitySensorTrigger, X> : X, Windows::ApplicationModel::Background::ActivitySensorTrigger_statics<void> {
	using Windows::ApplicationModel::Background::ActivitySensorTrigger_statics<void>::activate;
	typedef typename X::root_type ActivitySensorTrigger;
};
struct ActivitySensorTrigger : generate<ActivitySensorTrigger> {};

// ISensorDataThresholdTrigger
struct ISensorDataThresholdTrigger : IInspectable, generate<ISensorDataThresholdTrigger> {};

// ISensorDataThresholdTriggerFactory
struct ISensorDataThresholdTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(Devices::Sensors::ISensorDataThreshold* threshold, SensorDataThresholdTrigger* *trigger);
};

// SensorDataThresholdTrigger
template<typename> struct SensorDataThresholdTrigger_statics {
	static SensorDataThresholdTrigger *activate(pptr<Devices::Sensors::ISensorDataThreshold> threshold) { SensorDataThresholdTrigger *trigger; hrcheck(get_activation_factory<SensorDataThresholdTrigger, ISensorDataThresholdTriggerFactory>()->_Create(threshold, &trigger)); return trigger; }
};

template<typename X> struct statics<SensorDataThresholdTrigger, X> : X, Windows::ApplicationModel::Background::SensorDataThresholdTrigger_statics<void> {
	using Windows::ApplicationModel::Background::SensorDataThresholdTrigger_statics<void>::activate;
	typedef typename X::root_type SensorDataThresholdTrigger;
};
struct SensorDataThresholdTrigger : generate<SensorDataThresholdTrigger> {};

// INetworkOperatorHotspotAuthenticationTrigger
struct INetworkOperatorHotspotAuthenticationTrigger : IInspectable, generate<INetworkOperatorHotspotAuthenticationTrigger> {};

// NetworkOperatorHotspotAuthenticationTrigger
template<typename X> struct statics<NetworkOperatorHotspotAuthenticationTrigger, X> : X {
	typedef typename X::root_type NetworkOperatorHotspotAuthenticationTrigger;
};
struct NetworkOperatorHotspotAuthenticationTrigger : generate<NetworkOperatorHotspotAuthenticationTrigger> {};

// ISocketActivityTrigger
struct ISocketActivityTrigger_raw : IInspectable {
	virtual STDMETHODIMP _get_IsWakeFromLowPowerSupported(bool *value);
};
template<typename X> struct ISocketActivityTrigger_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISocketActivityTrigger_adaptor::IsWakeFromLowPowerSupported)->_get_IsWakeFromLowPowerSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsWakeFromLowPowerSupported;
	};
	ISocketActivityTrigger_adaptor() {}
};
template<typename X> struct adapt<ISocketActivityTrigger, X> : Windows::ApplicationModel::Background::ISocketActivityTrigger_adaptor<X> { typedef adapt ISocketActivityTrigger; };
struct ISocketActivityTrigger : ISocketActivityTrigger_raw, generate<ISocketActivityTrigger> {};

// SocketActivityTrigger
template<typename X> struct statics<SocketActivityTrigger, X> : X {
	typedef typename X::root_type SocketActivityTrigger;
};
struct SocketActivityTrigger : generate<SocketActivityTrigger> {};

// IPushNotificationTriggerFactory
struct IPushNotificationTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING applicationId, PushNotificationTrigger* *trigger);
};

// PushNotificationTrigger
template<typename> struct PushNotificationTrigger_statics {
	static PushNotificationTrigger *activate(hstring_ref applicationId) { PushNotificationTrigger *trigger; hrcheck(get_activation_factory<PushNotificationTrigger, IPushNotificationTriggerFactory>()->_Create(applicationId, &trigger)); return trigger; }
	static PushNotificationTrigger *activate() { PushNotificationTrigger *t; get_activation_factory<PushNotificationTrigger>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<PushNotificationTrigger, X> : X, Windows::ApplicationModel::Background::PushNotificationTrigger_statics<void> {
	using Windows::ApplicationModel::Background::PushNotificationTrigger_statics<void>::activate;
	typedef typename X::root_type PushNotificationTrigger;
};
struct PushNotificationTrigger : generate<PushNotificationTrigger> {};

// IToastNotificationHistoryChangedTriggerFactory
struct IToastNotificationHistoryChangedTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING applicationId, ToastNotificationHistoryChangedTrigger* *trigger);
};

// ToastNotificationHistoryChangedTrigger
template<typename> struct ToastNotificationHistoryChangedTrigger_statics {
	static ToastNotificationHistoryChangedTrigger *activate(hstring_ref applicationId) { ToastNotificationHistoryChangedTrigger *trigger; hrcheck(get_activation_factory<ToastNotificationHistoryChangedTrigger, IToastNotificationHistoryChangedTriggerFactory>()->_Create(applicationId, &trigger)); return trigger; }
	static ToastNotificationHistoryChangedTrigger *activate() { ToastNotificationHistoryChangedTrigger *t; get_activation_factory<ToastNotificationHistoryChangedTrigger>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<ToastNotificationHistoryChangedTrigger, X> : X, Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger_statics<void> {
	using Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger_statics<void>::activate;
	typedef typename X::root_type ToastNotificationHistoryChangedTrigger;
};
struct ToastNotificationHistoryChangedTrigger : generate<ToastNotificationHistoryChangedTrigger> {};

// IToastNotificationActionTriggerFactory
struct IToastNotificationActionTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING applicationId, ToastNotificationActionTrigger* *trigger);
};

// ToastNotificationActionTrigger
template<typename> struct ToastNotificationActionTrigger_statics {
	static ToastNotificationActionTrigger *activate(hstring_ref applicationId) { ToastNotificationActionTrigger *trigger; hrcheck(get_activation_factory<ToastNotificationActionTrigger, IToastNotificationActionTriggerFactory>()->_Create(applicationId, &trigger)); return trigger; }
	static ToastNotificationActionTrigger *activate() { ToastNotificationActionTrigger *t; get_activation_factory<ToastNotificationActionTrigger>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<ToastNotificationActionTrigger, X> : X, Windows::ApplicationModel::Background::ToastNotificationActionTrigger_statics<void> {
	using Windows::ApplicationModel::Background::ToastNotificationActionTrigger_statics<void>::activate;
	typedef typename X::root_type ToastNotificationActionTrigger;
};
struct ToastNotificationActionTrigger : generate<ToastNotificationActionTrigger> {};

// IUserNotificationChangedTriggerFactory
struct IUserNotificationChangedTriggerFactory : IInspectable {
	virtual STDMETHODIMP _Create(UI::Notifications::NotificationKinds notificationKinds, UserNotificationChangedTrigger* *trigger);
};

// UserNotificationChangedTrigger
template<typename> struct UserNotificationChangedTrigger_statics {
	static UserNotificationChangedTrigger *activate(UI::Notifications::NotificationKinds notificationKinds) { UserNotificationChangedTrigger *trigger; hrcheck(get_activation_factory<UserNotificationChangedTrigger, IUserNotificationChangedTriggerFactory>()->_Create(notificationKinds, &trigger)); return trigger; }
};

template<typename X> struct statics<UserNotificationChangedTrigger, X> : X, Windows::ApplicationModel::Background::UserNotificationChangedTrigger_statics<void> {
	using Windows::ApplicationModel::Background::UserNotificationChangedTrigger_statics<void>::activate;
	typedef typename X::root_type UserNotificationChangedTrigger;
};
struct UserNotificationChangedTrigger : generate<UserNotificationChangedTrigger> {};

// IAppBroadcastTriggerProviderInfo
struct IAppBroadcastTriggerProviderInfo_raw : IInspectable {
	virtual STDMETHODIMP _put_DisplayNameResource(HSTRING value);
	virtual STDMETHODIMP _get_DisplayNameResource(HSTRING *value);
	virtual STDMETHODIMP _put_LogoResource(HSTRING value);
	virtual STDMETHODIMP _get_LogoResource(HSTRING *value);
	virtual STDMETHODIMP _put_VideoKeyFrameInterval(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_VideoKeyFrameInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_MaxVideoBitrate(unsigned value);
	virtual STDMETHODIMP _get_MaxVideoBitrate(unsigned *value);
	virtual STDMETHODIMP _put_MaxVideoWidth(unsigned value);
	virtual STDMETHODIMP _get_MaxVideoWidth(unsigned *value);
	virtual STDMETHODIMP _put_MaxVideoHeight(unsigned value);
	virtual STDMETHODIMP _get_MaxVideoHeight(unsigned *value);
};
template<typename X> struct IAppBroadcastTriggerProviderInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::DisplayNameResource)->_get_DisplayNameResource(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::DisplayNameResource)->_put_DisplayNameResource(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayNameResource;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::LogoResource)->_get_LogoResource(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::LogoResource)->_put_LogoResource(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} LogoResource;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::MaxVideoBitrate)->_get_MaxVideoBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::MaxVideoBitrate)->_put_MaxVideoBitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MaxVideoBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::MaxVideoHeight)->_get_MaxVideoHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::MaxVideoHeight)->_put_MaxVideoHeight(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MaxVideoHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::MaxVideoWidth)->_get_MaxVideoWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::MaxVideoWidth)->_put_MaxVideoWidth(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} MaxVideoWidth;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::VideoKeyFrameInterval)->_get_VideoKeyFrameInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IAppBroadcastTriggerProviderInfo_adaptor::VideoKeyFrameInterval)->_put_VideoKeyFrameInterval(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} VideoKeyFrameInterval;
	};
	IAppBroadcastTriggerProviderInfo_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastTriggerProviderInfo, X> : Windows::ApplicationModel::Background::IAppBroadcastTriggerProviderInfo_adaptor<X> { typedef adapt IAppBroadcastTriggerProviderInfo; };
struct IAppBroadcastTriggerProviderInfo : IAppBroadcastTriggerProviderInfo_raw, generate<IAppBroadcastTriggerProviderInfo> {};

// AppBroadcastTriggerProviderInfo
template<typename X> struct statics<AppBroadcastTriggerProviderInfo, X> : X {
	typedef typename X::root_type AppBroadcastTriggerProviderInfo;
};
struct AppBroadcastTriggerProviderInfo : generate<AppBroadcastTriggerProviderInfo> {};

// IAppBroadcastTriggerFactory
struct IAppBroadcastTriggerFactory : IInspectable {
	virtual STDMETHODIMP _CreateAppBroadcastTrigger(HSTRING providerKey, AppBroadcastTrigger* *broadcastTrigger);
};

// IAppBroadcastTrigger
struct IAppBroadcastTrigger_raw : IInspectable {
	virtual STDMETHODIMP _put_ProviderInfo(AppBroadcastTriggerProviderInfo* value);
	virtual STDMETHODIMP _get_ProviderInfo(AppBroadcastTriggerProviderInfo* *value);
};
template<typename X> struct IAppBroadcastTrigger_adaptor : X {
	union {
		struct : property {
			ptr<AppBroadcastTriggerProviderInfo> get() { AppBroadcastTriggerProviderInfo* value; hrcheck(enc(&IAppBroadcastTrigger_adaptor::ProviderInfo)->_get_ProviderInfo(&value)); return from_abi(value); }
			ptr<AppBroadcastTriggerProviderInfo> operator()() { return get(); }
			operator ptr<AppBroadcastTriggerProviderInfo> () { return get(); }
			ptr<AppBroadcastTriggerProviderInfo> operator->() { return get(); }
			void put(pptr<AppBroadcastTriggerProviderInfo> value) { hrcheck(enc(&IAppBroadcastTrigger_adaptor::ProviderInfo)->_put_ProviderInfo(value)); }
			void operator=(pptr<AppBroadcastTriggerProviderInfo> value) { put(value); }
			void operator()(pptr<AppBroadcastTriggerProviderInfo> value) { put(value); }
		} ProviderInfo;
	};
	IAppBroadcastTrigger_adaptor() {}
};
template<typename X> struct adapt<IAppBroadcastTrigger, X> : Windows::ApplicationModel::Background::IAppBroadcastTrigger_adaptor<X> { typedef adapt IAppBroadcastTrigger; };
struct IAppBroadcastTrigger : IAppBroadcastTrigger_raw, generate<IAppBroadcastTrigger> {};

// AppBroadcastTrigger
template<typename> struct AppBroadcastTrigger_statics {
	static AppBroadcastTrigger *activate(hstring_ref providerKey) { AppBroadcastTrigger *broadcastTrigger; hrcheck(get_activation_factory<AppBroadcastTrigger, IAppBroadcastTriggerFactory>()->_CreateAppBroadcastTrigger(providerKey, &broadcastTrigger)); return broadcastTrigger; }
};

template<typename X> struct statics<AppBroadcastTrigger, X> : X, Windows::ApplicationModel::Background::AppBroadcastTrigger_statics<void> {
	using Windows::ApplicationModel::Background::AppBroadcastTrigger_statics<void>::activate;
	typedef typename X::root_type AppBroadcastTrigger;
};
struct AppBroadcastTrigger : generate<AppBroadcastTrigger> {};
}}}
} // namespace iso_winrt
