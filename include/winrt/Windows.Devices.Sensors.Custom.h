#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Sensors.Custom

#include "Windows.Devices.Sensors.Custom.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
}}}

// defs

template<> struct def<Windows::Devices::Sensors::Custom::ICustomSensorStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Custom::ICustomSensor2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Custom::ICustomSensor> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Custom::CustomSensor> : class_type<Platform::Object, Windows::Devices::Sensors::Custom::ICustomSensor, Windows::Devices::Sensors::Custom::ICustomSensor2> {};
template<> struct def<Windows::Devices::Sensors::Custom::ICustomSensorReading2> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Custom::ICustomSensorReading> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Custom::CustomSensorReading> : class_type<Platform::Object, Windows::Devices::Sensors::Custom::ICustomSensorReading, Windows::Devices::Sensors::Custom::ICustomSensorReading2> {};
template<> struct def<Windows::Devices::Sensors::Custom::ICustomSensorReadingChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Sensors::Custom::CustomSensorReadingChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Sensors::Custom::ICustomSensorReadingChangedEventArgs> {};

// uuids

template<> struct uuid<Windows::Devices::Sensors::Custom::ICustomSensorStatics> { define_guid(0x992052CF, 0xF422, 0x4C7D, 0x83, 0x6B, 0xE7, 0xDC, 0x74, 0xA7, 0x12, 0x4B);};
template<> struct uuid<Windows::Devices::Sensors::Custom::ICustomSensor2> { define_guid(0x20DB3111, 0xEC58, 0x4D9F, 0xBF, 0xBD, 0xE7, 0x78, 0x25, 0x8, 0x85, 0x10);};
template<> struct uuid<Windows::Devices::Sensors::Custom::ICustomSensor> { define_guid(0xA136F9AD, 0x4034, 0x4B4D, 0x99, 0xDD, 0x53, 0x1A, 0xAC, 0x64, 0x9C, 0x9);};
template<> struct uuid<Windows::Devices::Sensors::Custom::ICustomSensorReading2> { define_guid(0x223C98EA, 0xBF73, 0x4992, 0x9A, 0x48, 0xD3, 0xC8, 0x97, 0x59, 0x4C, 0xCB);};
template<> struct uuid<Windows::Devices::Sensors::Custom::ICustomSensorReading> { define_guid(0x64004F4D, 0x446A, 0x4366, 0xA8, 0x7A, 0x5F, 0x96, 0x32, 0x68, 0xEC, 0x53);};
template<> struct uuid<Windows::Devices::Sensors::Custom::ICustomSensorReadingChangedEventArgs> { define_guid(0x6B202023, 0xCFFD, 0x4CC1, 0x8F, 0xF0, 0xE2, 0x18, 0x23, 0xD7, 0x6F, 0xCC);};

// types

namespace Windows { namespace Devices { namespace Sensors { namespace Custom {

// ICustomSensorStatics
struct ICustomSensorStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(Platform::Guid interfaceId, HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING sensorId, Foundation::IAsyncOperation<CustomSensor*>* *result);
};

// ICustomSensor2
struct ICustomSensor2_raw : IInspectable {
	virtual STDMETHODIMP _put_ReportLatency(unsigned value);
	virtual STDMETHODIMP _get_ReportLatency(unsigned *value);
	virtual STDMETHODIMP _get_MaxBatchSize(unsigned *value);
};
template<typename X> struct ICustomSensor2_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICustomSensor2_adaptor::MaxBatchSize)->_get_MaxBatchSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxBatchSize;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICustomSensor2_adaptor::ReportLatency)->_get_ReportLatency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICustomSensor2_adaptor::ReportLatency)->_put_ReportLatency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportLatency;
	};
	ICustomSensor2_adaptor() {}
};
template<typename X> struct adapt<ICustomSensor2, X> : Windows::Devices::Sensors::Custom::ICustomSensor2_adaptor<X> { typedef adapt ICustomSensor2; };
struct ICustomSensor2 : ICustomSensor2_raw, generate<ICustomSensor2> {};

// ICustomSensor
struct ICustomSensor_raw : IInspectable {
	virtual STDMETHODIMP _GetCurrentReading(CustomSensorReading* *value);
	virtual STDMETHODIMP _get_MinimumReportInterval(unsigned *value);
	virtual STDMETHODIMP _put_ReportInterval(unsigned value);
	virtual STDMETHODIMP _get_ReportInterval(unsigned *value);
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _add_ReadingChanged(Foundation::TypedEventHandler<CustomSensor*, CustomSensorReadingChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReadingChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICustomSensor_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICustomSensor_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICustomSensor_adaptor::MinimumReportInterval)->_get_MinimumReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinimumReportInterval;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICustomSensor_adaptor::ReportInterval)->_get_ReportInterval(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICustomSensor_adaptor::ReportInterval)->_put_ReportInterval(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ReportInterval;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CustomSensor>, ptr<CustomSensorReadingChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICustomSensor_adaptor::ReadingChanged)->_add_ReadingChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICustomSensor_adaptor::ReadingChanged)->_remove_ReadingChanged(token)); }
		} ReadingChanged;
	};
	ptr<CustomSensorReading> GetCurrentReading() { CustomSensorReading* value; hrcheck(X::get()->_GetCurrentReading(&value)); return from_abi(value); }
	ICustomSensor_adaptor() {}
};
template<typename X> struct adapt<ICustomSensor, X> : Windows::Devices::Sensors::Custom::ICustomSensor_adaptor<X> { typedef adapt ICustomSensor; };
struct ICustomSensor : ICustomSensor_raw, generate<ICustomSensor> {};

// CustomSensor
template<typename> struct CustomSensor_statics {
	static hstring GetDeviceSelector(const Platform::Guid& interfaceId) { HSTRING result; hrcheck(get_activation_factory<CustomSensor, ICustomSensorStatics>()->_GetDeviceSelector(interfaceId, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<CustomSensor>>> FromIdAsync(hstring_ref sensorId) { Foundation::IAsyncOperation<CustomSensor*>* result; hrcheck(get_activation_factory<CustomSensor, ICustomSensorStatics>()->_FromIdAsync(sensorId, &result)); return from_abi(result); }
};

template<typename X> struct statics<CustomSensor, X> : X, Windows::Devices::Sensors::Custom::CustomSensor_statics<void> {
	typedef typename X::root_type CustomSensor;
};
struct CustomSensor : generate<CustomSensor> {};

// ICustomSensorReading2
struct ICustomSensorReading2_raw : IInspectable {
	virtual STDMETHODIMP _get_PerformanceCount(Foundation::IReference<Foundation::TimeSpan>* *value);
};
template<typename X> struct ICustomSensorReading2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&ICustomSensorReading2_adaptor::PerformanceCount)->_get_PerformanceCount(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PerformanceCount;
	};
	ICustomSensorReading2_adaptor() {}
};
template<typename X> struct adapt<ICustomSensorReading2, X> : Windows::Devices::Sensors::Custom::ICustomSensorReading2_adaptor<X> { typedef adapt ICustomSensorReading2; };
struct ICustomSensorReading2 : ICustomSensorReading2_raw, generate<ICustomSensorReading2> {};

// ICustomSensorReading
struct ICustomSensorReading_raw : IInspectable {
	virtual STDMETHODIMP _get_Timestamp(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
};
template<typename X> struct ICustomSensorReading_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&ICustomSensorReading_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&ICustomSensorReading_adaptor::Timestamp)->_get_Timestamp(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} Timestamp;
	};
	ICustomSensorReading_adaptor() {}
};
template<typename X> struct adapt<ICustomSensorReading, X> : Windows::Devices::Sensors::Custom::ICustomSensorReading_adaptor<X> { typedef adapt ICustomSensorReading; };
struct ICustomSensorReading : ICustomSensorReading_raw, generate<ICustomSensorReading> {};

// CustomSensorReading
template<typename X> struct statics<CustomSensorReading, X> : X {
	typedef typename X::root_type CustomSensorReading;
};
struct CustomSensorReading : generate<CustomSensorReading> {};

// ICustomSensorReadingChangedEventArgs
struct ICustomSensorReadingChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reading(CustomSensorReading* *value);
};
template<typename X> struct ICustomSensorReadingChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<CustomSensorReading> get() { CustomSensorReading* value; hrcheck(enc(&ICustomSensorReadingChangedEventArgs_adaptor::Reading)->_get_Reading(&value)); return from_abi(value); }
			ptr<CustomSensorReading> operator()() { return get(); }
			operator ptr<CustomSensorReading> () { return get(); }
			ptr<CustomSensorReading> operator->() { return get(); }
		} Reading;
	};
	ICustomSensorReadingChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICustomSensorReadingChangedEventArgs, X> : Windows::Devices::Sensors::Custom::ICustomSensorReadingChangedEventArgs_adaptor<X> { typedef adapt ICustomSensorReadingChangedEventArgs; };
struct ICustomSensorReadingChangedEventArgs : ICustomSensorReadingChangedEventArgs_raw, generate<ICustomSensorReadingChangedEventArgs> {};

// CustomSensorReadingChangedEventArgs
template<typename X> struct statics<CustomSensorReadingChangedEventArgs, X> : X {
	typedef typename X::root_type CustomSensorReadingChangedEventArgs;
};
struct CustomSensorReadingChangedEventArgs : generate<CustomSensorReadingChangedEventArgs> {};
}}}}
} // namespace iso_winrt
