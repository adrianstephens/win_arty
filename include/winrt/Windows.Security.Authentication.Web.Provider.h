#pragma once
// generated by isopod tools
// namespaces:
// Windows.Security.Authentication.Web.Provider

#include "Windows.Security.Authentication.Web.Provider.0.h"
#include "Windows.Security.Authentication.Web.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
template<typename T> struct IVectorView;
template<typename T> struct IVector;
}}
namespace Security { namespace Authentication { namespace Web { namespace Core {
struct WebProviderError;
struct WebTokenResponse;
struct WebTokenRequest;
}}}
namespace Credentials {
struct WebAccount;
}
namespace Cryptography { namespace Core {
struct CryptographicKey;
}}}
namespace Storage { namespace Streams {
struct IRandomAccessStream;
struct IBuffer;
}}
namespace System {
struct User;
}
namespace Web { namespace Http {
struct HttpCookie;
}}}

// defs

template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> : overridable_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest2> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest3> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest, Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest2, Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest3> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponseFactory> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse>, custom_activators {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountClientViewType> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountClientView> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountClientViewFactory> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountClientView> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountClientView>, custom_activators {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountScope> : enum_type<int> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics2> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountScopeManagerStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountMapManagerStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics3> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics4> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation> : overridable_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation> : overridable_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation> : overridable_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation> : overridable_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation> : interface_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation> : interface_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation> : interface_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation> : interface_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation> : interface_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects> : overridable_type<> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2> : overridable_type<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects> {};
template<> struct def<Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails> : class_type<Platform::Object, Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects, Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2> {};

// uuids

template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation> { define_guid(0x6D5D2426, 0x10B1, 0x419A, 0xA4, 0x4E, 0xF9, 0xC5, 0x16, 0x15, 0x74, 0xE6);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest> { define_guid(0x1E18778B, 0x8805, 0x454B, 0x9F, 0x11, 0x46, 0x8D, 0x2A, 0xF1, 0x9, 0x5A);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest2> { define_guid(0xB5D72E4C, 0x10B1, 0x4AA6, 0x88, 0xB1, 0xB, 0x6C, 0x9E, 0xC, 0x1E, 0x46);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest3> { define_guid(0x1B2716AA, 0x4289, 0x446E, 0x92, 0x56, 0xDA, 0xFB, 0x6F, 0x66, 0xA5, 0x1E);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse> { define_guid(0xEF213793, 0xEF55, 0x4186, 0xB7, 0xCE, 0x8C, 0xB2, 0xE7, 0xF9, 0x84, 0x9E);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponseFactory> { define_guid(0xFA49D99A, 0x25BA, 0x4077, 0x9C, 0xFA, 0x9D, 0xB4, 0xDE, 0xA7, 0xB7, 0x1A);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountClientView> { define_guid(0xE7BD66BA, 0xBC7, 0x4C66, 0xBF, 0xD4, 0x65, 0xD3, 0x8, 0x2C, 0xBC, 0xA8);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountClientViewFactory> { define_guid(0x616D16A4, 0xDE22, 0x4855, 0xA3, 0x26, 0x6, 0xCE, 0xBF, 0x2A, 0x3F, 0x23);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics> { define_guid(0xB2E8E1A6, 0xD49A, 0x4032, 0x84, 0xBF, 0x1A, 0x28, 0x47, 0x74, 0x7B, 0xF1);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics2> { define_guid(0x68A7A829, 0x2D5F, 0x4653, 0x8B, 0xB0, 0xBD, 0x2F, 0xA6, 0xBD, 0x2D, 0x87);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountScopeManagerStatics> { define_guid(0x5C6CE37C, 0x12B2, 0x423A, 0xBF, 0x3D, 0x85, 0xB8, 0xD7, 0xE5, 0x36, 0x56);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountMapManagerStatics> { define_guid(0xE8FA446F, 0x3A1B, 0x48A4, 0x8E, 0x90, 0x1E, 0x59, 0xCA, 0x6F, 0x54, 0xDB);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics3> { define_guid(0xDD4523A6, 0x8A4F, 0x4AA2, 0xB1, 0x5E, 0x3, 0xF5, 0x50, 0xAF, 0x13, 0x59);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics4> { define_guid(0x59EBC2D2, 0xF7DB, 0x412F, 0xBC, 0x3F, 0xF2, 0xFE, 0xA0, 0x44, 0x30, 0xB4);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation> { define_guid(0xBBA4ACBB, 0x993B, 0x4D57, 0xBB, 0xE4, 0x14, 0x21, 0xE3, 0x66, 0x8B, 0x4C);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation> { define_guid(0x28FF92D3, 0x8F80, 0x42FB, 0x94, 0x4F, 0xB2, 0x10, 0x7B, 0xBD, 0x42, 0xE6);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation> { define_guid(0xE0B545F8, 0x3B0F, 0x44DA, 0x92, 0x4C, 0x7B, 0x18, 0xBA, 0xAA, 0x62, 0xA9);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation> { define_guid(0x95C613BE, 0x2034, 0x4C38, 0x94, 0x34, 0xD2, 0x6C, 0x14, 0xB2, 0xB4, 0xB2);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation> { define_guid(0x73EBDCCF, 0x4378, 0x4C79, 0x93, 0x35, 0xA5, 0xD7, 0xAB, 0x81, 0x59, 0x4E);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation> { define_guid(0xED20DC5C, 0xD21B, 0x463E, 0xA9, 0xB7, 0xC1, 0xFD, 0xE, 0xDA, 0xE9, 0x78);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation> { define_guid(0xABB48B8, 0x9E01, 0x49C9, 0xA3, 0x55, 0x7D, 0x48, 0xCA, 0xF7, 0xD6, 0xCA);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation> { define_guid(0xB890E21D, 0xC55, 0x47BC, 0x8C, 0x72, 0x4, 0xA6, 0xFC, 0x7C, 0xAC, 0x7);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation> { define_guid(0x5A040441, 0xFA3, 0x4AB1, 0xA0, 0x1C, 0x20, 0xB1, 0x10, 0x35, 0x85, 0x94);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects> { define_guid(0x408F284B, 0x1328, 0x42DB, 0x89, 0xA4, 0xB, 0xCE, 0x7A, 0x71, 0x7D, 0x8E);};
template<> struct uuid<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2> { define_guid(0x1020B893, 0x5CA5, 0x4FFF, 0x95, 0xFB, 0xB8, 0x20, 0x27, 0x3F, 0xC3, 0x95);};

// types

namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

// IWebAccountProviderOperation
struct IWebAccountProviderOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(WebAccountProviderOperationKind *value) = 0;
};
template<typename X> struct IWebAccountProviderOperation_adaptor : X {
	union {
		struct : property {
			WebAccountProviderOperationKind get() { WebAccountProviderOperationKind value; hrcheck(enc(&IWebAccountProviderOperation_adaptor::Kind)->_get_Kind(&value)); return value; }
			WebAccountProviderOperationKind operator()() { return get(); }
			operator WebAccountProviderOperationKind () { return get(); }
		} Kind;
	};
	IWebAccountProviderOperation_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation_adaptor<X> { typedef adapt IWebAccountProviderOperation; };
template<typename X> struct IWebAccountProviderOperation_unadaptor : X {
	STDMETHODIMP _get_Kind(WebAccountProviderOperationKind *value) { return hrtry([&, this] { get_prop(value, Kind); }); }
};
template<typename X> struct unadapt<IWebAccountProviderOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation_unadaptor<X> {};
struct IWebAccountProviderOperation : IWebAccountProviderOperation_raw, generate<IWebAccountProviderOperation> {};

// IWebProviderTokenRequest
struct IWebProviderTokenRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_ClientRequest(Core::WebTokenRequest* *value);
	virtual STDMETHODIMP _get_WebAccounts(Foundation::Collections::IVectorView<Credentials::WebAccount*>* *value);
	virtual STDMETHODIMP _get_WebAccountSelectionOptions(Provider::WebAccountSelectionOptions *value);
	virtual STDMETHODIMP _get_ApplicationCallbackUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _GetApplicationTokenBindingKeyAsync(TokenBindingKeyType keyType, Foundation::Uri* target, Foundation::IAsyncOperation<Cryptography::Core::CryptographicKey*>* *asyncInfo);
};
template<typename X> struct IWebProviderTokenRequest_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebProviderTokenRequest_adaptor::ApplicationCallbackUri)->_get_ApplicationCallbackUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ApplicationCallbackUri;
		struct : property {
			ptr<Core::WebTokenRequest> get() { Core::WebTokenRequest* value; hrcheck(enc(&IWebProviderTokenRequest_adaptor::ClientRequest)->_get_ClientRequest(&value)); return from_abi(value); }
			ptr<Core::WebTokenRequest> operator()() { return get(); }
			operator ptr<Core::WebTokenRequest> () { return get(); }
			ptr<Core::WebTokenRequest> operator->() { return get(); }
		} ClientRequest;
		struct : property {
			Provider::WebAccountSelectionOptions get() { Provider::WebAccountSelectionOptions value; hrcheck(enc(&IWebProviderTokenRequest_adaptor::WebAccountSelectionOptions)->_get_WebAccountSelectionOptions(&value)); return value; }
			Provider::WebAccountSelectionOptions operator()() { return get(); }
			operator Provider::WebAccountSelectionOptions () { return get(); }
		} WebAccountSelectionOptions;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Credentials::WebAccount>>> get() { Foundation::Collections::IVectorView<Credentials::WebAccount*>* value; hrcheck(enc(&IWebProviderTokenRequest_adaptor::WebAccounts)->_get_WebAccounts(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Credentials::WebAccount>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Credentials::WebAccount>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Credentials::WebAccount>>> operator->() { return get(); }
		} WebAccounts;
	};
	ptr<Foundation::IAsyncOperation<ptr<Cryptography::Core::CryptographicKey>>> GetApplicationTokenBindingKeyAsync(TokenBindingKeyType keyType, pptr<Foundation::Uri> target) { Foundation::IAsyncOperation<Cryptography::Core::CryptographicKey*>* asyncInfo; hrcheck(X::get()->_GetApplicationTokenBindingKeyAsync(keyType, target, &asyncInfo)); return from_abi(asyncInfo); }
	IWebProviderTokenRequest_adaptor() {}
};
template<typename X> struct adapt<IWebProviderTokenRequest, X> : Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest_adaptor<X> { typedef adapt IWebProviderTokenRequest; };
struct IWebProviderTokenRequest : IWebProviderTokenRequest_raw, generate<IWebProviderTokenRequest> {};

// IWebProviderTokenRequest2
struct IWebProviderTokenRequest2_raw : IInspectable {
	virtual STDMETHODIMP _GetApplicationTokenBindingKeyIdAsync(TokenBindingKeyType keyType, Foundation::Uri* target, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *asyncInfo);
};
template<typename X> struct IWebProviderTokenRequest2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> GetApplicationTokenBindingKeyIdAsync(TokenBindingKeyType keyType, pptr<Foundation::Uri> target) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* asyncInfo; hrcheck(X::get()->_GetApplicationTokenBindingKeyIdAsync(keyType, target, &asyncInfo)); return from_abi(asyncInfo); }
};
template<typename X> struct adapt<IWebProviderTokenRequest2, X> : Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest2_adaptor<X> { typedef adapt IWebProviderTokenRequest2; };
struct IWebProviderTokenRequest2 : IWebProviderTokenRequest2_raw, generate<IWebProviderTokenRequest2> {};

// IWebProviderTokenRequest3
struct IWebProviderTokenRequest3_raw : IInspectable {
	virtual STDMETHODIMP _get_ApplicationPackageFamilyName(HSTRING *value);
	virtual STDMETHODIMP _get_ApplicationProcessName(HSTRING *value);
	virtual STDMETHODIMP _CheckApplicationForCapabilityAsync(HSTRING capabilityName, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IWebProviderTokenRequest3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebProviderTokenRequest3_adaptor::ApplicationPackageFamilyName)->_get_ApplicationPackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ApplicationPackageFamilyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebProviderTokenRequest3_adaptor::ApplicationProcessName)->_get_ApplicationProcessName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ApplicationProcessName;
	};
	ptr<Foundation::IAsyncOperation<bool>> CheckApplicationForCapabilityAsync(hstring_ref capabilityName) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_CheckApplicationForCapabilityAsync(capabilityName, &operation)); return from_abi(operation); }
	IWebProviderTokenRequest3_adaptor() {}
};
template<typename X> struct adapt<IWebProviderTokenRequest3, X> : Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest3_adaptor<X> { typedef adapt IWebProviderTokenRequest3; };
struct IWebProviderTokenRequest3 : IWebProviderTokenRequest3_raw, generate<IWebProviderTokenRequest3> {};

// WebProviderTokenRequest
template<typename X> struct statics<WebProviderTokenRequest, X> : X {
	typedef typename X::root_type WebProviderTokenRequest;
};
struct WebProviderTokenRequest : generate<WebProviderTokenRequest> {};

// IWebProviderTokenResponse
struct IWebProviderTokenResponse_raw : IInspectable {
	virtual STDMETHODIMP _get_ClientResponse(Core::WebTokenResponse* *value);
};
template<typename X> struct IWebProviderTokenResponse_adaptor : X {
	union {
		struct : property {
			ptr<Core::WebTokenResponse> get() { Core::WebTokenResponse* value; hrcheck(enc(&IWebProviderTokenResponse_adaptor::ClientResponse)->_get_ClientResponse(&value)); return from_abi(value); }
			ptr<Core::WebTokenResponse> operator()() { return get(); }
			operator ptr<Core::WebTokenResponse> () { return get(); }
			ptr<Core::WebTokenResponse> operator->() { return get(); }
		} ClientResponse;
	};
	IWebProviderTokenResponse_adaptor() {}
};
template<typename X> struct adapt<IWebProviderTokenResponse, X> : Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse_adaptor<X> { typedef adapt IWebProviderTokenResponse; };
struct IWebProviderTokenResponse : IWebProviderTokenResponse_raw, generate<IWebProviderTokenResponse> {};

// IWebProviderTokenResponseFactory
struct IWebProviderTokenResponseFactory : IInspectable {
	virtual STDMETHODIMP _Create(Core::WebTokenResponse* webTokenResponse, WebProviderTokenResponse* *webProviderTokenResponse);
};

// WebProviderTokenResponse
template<typename> struct WebProviderTokenResponse_statics {
	static WebProviderTokenResponse *activate(pptr<Core::WebTokenResponse> webTokenResponse) { WebProviderTokenResponse *webProviderTokenResponse; hrcheck(get_activation_factory<WebProviderTokenResponse, IWebProviderTokenResponseFactory>()->_Create(webTokenResponse, &webProviderTokenResponse)); return webProviderTokenResponse; }
};

template<typename X> struct statics<WebProviderTokenResponse, X> : X, Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse_statics<void> {
	using Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse_statics<void>::activate;
	typedef typename X::root_type WebProviderTokenResponse;
};
struct WebProviderTokenResponse : generate<WebProviderTokenResponse> {};

// IWebAccountClientView
struct IWebAccountClientView_raw : IInspectable {
	virtual STDMETHODIMP _get_ApplicationCallbackUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Type(WebAccountClientViewType *value);
	virtual STDMETHODIMP _get_AccountPairwiseId(HSTRING *value);
};
template<typename X> struct IWebAccountClientView_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebAccountClientView_adaptor::AccountPairwiseId)->_get_AccountPairwiseId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccountPairwiseId;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebAccountClientView_adaptor::ApplicationCallbackUri)->_get_ApplicationCallbackUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ApplicationCallbackUri;
		struct : property {
			WebAccountClientViewType get() { WebAccountClientViewType value; hrcheck(enc(&IWebAccountClientView_adaptor::Type)->_get_Type(&value)); return value; }
			WebAccountClientViewType operator()() { return get(); }
			operator WebAccountClientViewType () { return get(); }
		} Type;
	};
	IWebAccountClientView_adaptor() {}
};
template<typename X> struct adapt<IWebAccountClientView, X> : Windows::Security::Authentication::Web::Provider::IWebAccountClientView_adaptor<X> { typedef adapt IWebAccountClientView; };
struct IWebAccountClientView : IWebAccountClientView_raw, generate<IWebAccountClientView> {};

// IWebAccountClientViewFactory
struct IWebAccountClientViewFactory : IInspectable {
	virtual STDMETHODIMP _Create(WebAccountClientViewType viewType, Foundation::Uri* applicationCallbackUri, WebAccountClientView* *view);
	virtual STDMETHODIMP _CreateWithPairwiseId(WebAccountClientViewType viewType, Foundation::Uri* applicationCallbackUri, HSTRING accountPairwiseId, WebAccountClientView* *view);
};

// WebAccountClientView
template<typename> struct WebAccountClientView_statics {
	static WebAccountClientView *activate(WebAccountClientViewType viewType, pptr<Foundation::Uri> applicationCallbackUri) { WebAccountClientView *view; hrcheck(get_activation_factory<WebAccountClientView, IWebAccountClientViewFactory>()->_Create(viewType, applicationCallbackUri, &view)); return view; }
	static WebAccountClientView *activate(WebAccountClientViewType viewType, pptr<Foundation::Uri> applicationCallbackUri, hstring_ref accountPairwiseId) { WebAccountClientView *view; hrcheck(get_activation_factory<WebAccountClientView, IWebAccountClientViewFactory>()->_CreateWithPairwiseId(viewType, applicationCallbackUri, accountPairwiseId, &view)); return view; }
};

template<typename X> struct statics<WebAccountClientView, X> : X, Windows::Security::Authentication::Web::Provider::WebAccountClientView_statics<void> {
	using Windows::Security::Authentication::Web::Provider::WebAccountClientView_statics<void>::activate;
	typedef typename X::root_type WebAccountClientView;
};
struct WebAccountClientView : generate<WebAccountClientView> {};

// IWebAccountManagerStatics
struct IWebAccountManagerStatics : IInspectable {
	virtual STDMETHODIMP _UpdateWebAccountPropertiesAsync(Credentials::WebAccount* webAccount, HSTRING webAccountUserName, Foundation::Collections::IMapView<HSTRING, HSTRING>* additionalProperties, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _AddWebAccountAsync(HSTRING webAccountId, HSTRING webAccountUserName, Foundation::Collections::IMapView<HSTRING, HSTRING>* props, Foundation::IAsyncOperation<Credentials::WebAccount*>* *asyncInfo);
	virtual STDMETHODIMP _DeleteWebAccountAsync(Credentials::WebAccount* webAccount, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _FindAllProviderWebAccountsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Credentials::WebAccount*>*>* *asyncInfo);
	virtual STDMETHODIMP _PushCookiesAsync(Foundation::Uri* uri, Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie*>* cookies, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _SetViewAsync(Credentials::WebAccount* webAccount, WebAccountClientView* view, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _ClearViewAsync(Credentials::WebAccount* webAccount, Foundation::Uri* applicationCallbackUri, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _GetViewsAsync(Credentials::WebAccount* webAccount, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WebAccountClientView*>*>* *asyncInfo);
	virtual STDMETHODIMP _SetWebAccountPictureAsync(Credentials::WebAccount* webAccount, Storage::Streams::IRandomAccessStream* webAccountPicture, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _ClearWebAccountPictureAsync(Credentials::WebAccount* webAccount, Foundation::IAsyncAction* *asyncInfo);
};

// IWebAccountManagerStatics2
struct IWebAccountManagerStatics2 : IInspectable {
	virtual STDMETHODIMP _PullCookiesAsync(HSTRING uriString, HSTRING callerPFN, Foundation::IAsyncAction* *asyncInfo);
};

// IWebAccountScopeManagerStatics
struct IWebAccountScopeManagerStatics : IInspectable {
	virtual STDMETHODIMP _AddWebAccountWithScopeAsync(HSTRING webAccountId, HSTRING webAccountUserName, Foundation::Collections::IMapView<HSTRING, HSTRING>* props, WebAccountScope scope, Foundation::IAsyncOperation<Credentials::WebAccount*>* *asyncInfo);
	virtual STDMETHODIMP _SetScopeAsync(Credentials::WebAccount* webAccount, WebAccountScope scope, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _GetScope(Credentials::WebAccount* webAccount, WebAccountScope *scope);
};

// IWebAccountMapManagerStatics
struct IWebAccountMapManagerStatics : IInspectable {
	virtual STDMETHODIMP _AddWebAccountWithScopeAndMapAsync(HSTRING webAccountId, HSTRING webAccountUserName, Foundation::Collections::IMapView<HSTRING, HSTRING>* props, WebAccountScope scope, HSTRING perUserWebAccountId, Foundation::IAsyncOperation<Credentials::WebAccount*>* *asyncInfo);
	virtual STDMETHODIMP _SetPerAppToPerUserAccountAsync(Credentials::WebAccount* perAppAccount, HSTRING perUserWebAccountId, Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _GetPerUserFromPerAppAccountAsync(Credentials::WebAccount* perAppAccount, Foundation::IAsyncOperation<Credentials::WebAccount*>* *asyncInfo);
	virtual STDMETHODIMP _ClearPerUserFromPerAppAccountAsync(Credentials::WebAccount* perAppAccount, Foundation::IAsyncAction* *asyncInfo);
};

// IWebAccountManagerStatics3
struct IWebAccountManagerStatics3 : IInspectable {
	virtual STDMETHODIMP _FindAllProviderWebAccountsForUserAsync(System::User* user, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Credentials::WebAccount*>*>* *operation);
	virtual STDMETHODIMP _AddWebAccountForUserAsync(System::User* user, HSTRING webAccountId, HSTRING webAccountUserName, Foundation::Collections::IMapView<HSTRING, HSTRING>* props, Foundation::IAsyncOperation<Credentials::WebAccount*>* *operation);
	virtual STDMETHODIMP _AddWebAccountWithScopeForUserAsync(System::User* user, HSTRING webAccountId, HSTRING webAccountUserName, Foundation::Collections::IMapView<HSTRING, HSTRING>* props, WebAccountScope scope, Foundation::IAsyncOperation<Credentials::WebAccount*>* *operation);
	virtual STDMETHODIMP _AddWebAccountWithScopeAndMapForUserAsync(System::User* user, HSTRING webAccountId, HSTRING webAccountUserName, Foundation::Collections::IMapView<HSTRING, HSTRING>* props, WebAccountScope scope, HSTRING perUserWebAccountId, Foundation::IAsyncOperation<Credentials::WebAccount*>* *operation);
};

// IWebAccountManagerStatics4
struct IWebAccountManagerStatics4 : IInspectable {
	virtual STDMETHODIMP _InvalidateAppCacheForAllAccountsAsync(Foundation::IAsyncAction* *asyncInfo);
	virtual STDMETHODIMP _InvalidateAppCacheForAccountAsync(Credentials::WebAccount* webAccount, Foundation::IAsyncAction* *asyncInfo);
};

// WebAccountManager
template<typename> struct WebAccountManager_statics {
	static ptr<Foundation::IAsyncAction> InvalidateAppCacheForAllAccountsAsync() { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics4>()->_InvalidateAppCacheForAllAccountsAsync(&asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> InvalidateAppCacheForAccountAsync(pptr<Credentials::WebAccount> webAccount) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics4>()->_InvalidateAppCacheForAccountAsync(webAccount, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Credentials::WebAccount>>>>> FindAllProviderWebAccountsForUserAsync(pptr<System::User> user) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Credentials::WebAccount*>*>* operation; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics3>()->_FindAllProviderWebAccountsForUserAsync(user, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Credentials::WebAccount>>> AddWebAccountForUserAsync(pptr<System::User> user, hstring_ref webAccountId, hstring_ref webAccountUserName, pptr<Foundation::Collections::IMapView<hstring, hstring>> props) { Foundation::IAsyncOperation<Credentials::WebAccount*>* operation; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics3>()->_AddWebAccountForUserAsync(user, webAccountId, webAccountUserName, to_abi(props), &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Credentials::WebAccount>>> AddWebAccountForUserAsync(pptr<System::User> user, hstring_ref webAccountId, hstring_ref webAccountUserName, pptr<Foundation::Collections::IMapView<hstring, hstring>> props, WebAccountScope scope) { Foundation::IAsyncOperation<Credentials::WebAccount*>* operation; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics3>()->_AddWebAccountWithScopeForUserAsync(user, webAccountId, webAccountUserName, to_abi(props), scope, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Credentials::WebAccount>>> AddWebAccountForUserAsync(pptr<System::User> user, hstring_ref webAccountId, hstring_ref webAccountUserName, pptr<Foundation::Collections::IMapView<hstring, hstring>> props, WebAccountScope scope, hstring_ref perUserWebAccountId) { Foundation::IAsyncOperation<Credentials::WebAccount*>* operation; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics3>()->_AddWebAccountWithScopeAndMapForUserAsync(user, webAccountId, webAccountUserName, to_abi(props), scope, perUserWebAccountId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<Credentials::WebAccount>>> AddWebAccountAsync(hstring_ref webAccountId, hstring_ref webAccountUserName, pptr<Foundation::Collections::IMapView<hstring, hstring>> props, WebAccountScope scope, hstring_ref perUserWebAccountId) { Foundation::IAsyncOperation<Credentials::WebAccount*>* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountMapManagerStatics>()->_AddWebAccountWithScopeAndMapAsync(webAccountId, webAccountUserName, to_abi(props), scope, perUserWebAccountId, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> SetPerAppToPerUserAccountAsync(pptr<Credentials::WebAccount> perAppAccount, hstring_ref perUserWebAccountId) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountMapManagerStatics>()->_SetPerAppToPerUserAccountAsync(perAppAccount, perUserWebAccountId, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<Credentials::WebAccount>>> GetPerUserFromPerAppAccountAsync(pptr<Credentials::WebAccount> perAppAccount) { Foundation::IAsyncOperation<Credentials::WebAccount*>* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountMapManagerStatics>()->_GetPerUserFromPerAppAccountAsync(perAppAccount, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> ClearPerUserFromPerAppAccountAsync(pptr<Credentials::WebAccount> perAppAccount) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountMapManagerStatics>()->_ClearPerUserFromPerAppAccountAsync(perAppAccount, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<Credentials::WebAccount>>> AddWebAccountAsync(hstring_ref webAccountId, hstring_ref webAccountUserName, pptr<Foundation::Collections::IMapView<hstring, hstring>> props, WebAccountScope scope) { Foundation::IAsyncOperation<Credentials::WebAccount*>* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountScopeManagerStatics>()->_AddWebAccountWithScopeAsync(webAccountId, webAccountUserName, to_abi(props), scope, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> SetScopeAsync(pptr<Credentials::WebAccount> webAccount, WebAccountScope scope) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountScopeManagerStatics>()->_SetScopeAsync(webAccount, scope, &asyncInfo)); return from_abi(asyncInfo); }
	static WebAccountScope GetScope(pptr<Credentials::WebAccount> webAccount) { WebAccountScope scope; hrcheck(get_activation_factory<WebAccountManager, IWebAccountScopeManagerStatics>()->_GetScope(webAccount, &scope)); return scope; }
	static ptr<Foundation::IAsyncAction> PullCookiesAsync(hstring_ref uriString, hstring_ref callerPFN) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics2>()->_PullCookiesAsync(uriString, callerPFN, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> UpdateWebAccountPropertiesAsync(pptr<Credentials::WebAccount> webAccount, hstring_ref webAccountUserName, pptr<Foundation::Collections::IMapView<hstring, hstring>> additionalProperties) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_UpdateWebAccountPropertiesAsync(webAccount, webAccountUserName, to_abi(additionalProperties), &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<Credentials::WebAccount>>> AddWebAccountAsync(hstring_ref webAccountId, hstring_ref webAccountUserName, pptr<Foundation::Collections::IMapView<hstring, hstring>> props) { Foundation::IAsyncOperation<Credentials::WebAccount*>* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_AddWebAccountAsync(webAccountId, webAccountUserName, to_abi(props), &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> DeleteWebAccountAsync(pptr<Credentials::WebAccount> webAccount) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_DeleteWebAccountAsync(webAccount, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<Credentials::WebAccount>>>>> FindAllProviderWebAccountsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<Credentials::WebAccount*>*>* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_FindAllProviderWebAccountsAsync(&asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> PushCookiesAsync(pptr<Foundation::Uri> uri, pptr<Foundation::Collections::IVectorView<ptr<Windows::Web::Http::HttpCookie>>> cookies) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_PushCookiesAsync(uri, to_abi(cookies), &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> SetViewAsync(pptr<Credentials::WebAccount> webAccount, pptr<WebAccountClientView> view) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_SetViewAsync(webAccount, view, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> ClearViewAsync(pptr<Credentials::WebAccount> webAccount, pptr<Foundation::Uri> applicationCallbackUri) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_ClearViewAsync(webAccount, applicationCallbackUri, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<WebAccountClientView>>>>> GetViewsAsync(pptr<Credentials::WebAccount> webAccount) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<WebAccountClientView*>*>* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_GetViewsAsync(webAccount, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> SetWebAccountPictureAsync(pptr<Credentials::WebAccount> webAccount, pptr<Storage::Streams::IRandomAccessStream> webAccountPicture) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_SetWebAccountPictureAsync(webAccount, webAccountPicture, &asyncInfo)); return from_abi(asyncInfo); }
	static ptr<Foundation::IAsyncAction> ClearWebAccountPictureAsync(pptr<Credentials::WebAccount> webAccount) { Foundation::IAsyncAction* asyncInfo; hrcheck(get_activation_factory<WebAccountManager, IWebAccountManagerStatics>()->_ClearWebAccountPictureAsync(webAccount, &asyncInfo)); return from_abi(asyncInfo); }
};

template<typename X> struct statics<WebAccountManager, X> : X, Windows::Security::Authentication::Web::Provider::WebAccountManager_statics<void> {
	typedef typename X::root_type WebAccountManager;
};
struct WebAccountManager : generate<WebAccountManager> {};

// IWebAccountProviderBaseReportOperation
struct IWebAccountProviderBaseReportOperation_raw : IInspectable {
	virtual STDMETHODIMP _ReportCompleted() = 0;
	virtual STDMETHODIMP _ReportError(Core::WebProviderError* value) = 0;
};
template<typename X> struct IWebAccountProviderBaseReportOperation_adaptor : X {
	void ReportCompleted() { hrcheck(X::get()->_ReportCompleted()); }
	void ReportError(pptr<Core::WebProviderError> value) { hrcheck(X::get()->_ReportError(value)); }
};
template<typename X> struct adapt<IWebAccountProviderBaseReportOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation_adaptor<X> { typedef adapt IWebAccountProviderBaseReportOperation; };
template<typename X> struct IWebAccountProviderBaseReportOperation_unadaptor : X {
	STDMETHODIMP _ReportCompleted() { return hrtry([&, this] { X::get()->ReportCompleted(); }); }
	STDMETHODIMP _ReportError(Core::WebProviderError* value) { return hrtry([&, this] { X::get()->ReportError(value); }); }
};
template<typename X> struct unadapt<IWebAccountProviderBaseReportOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation_unadaptor<X> {};
struct IWebAccountProviderBaseReportOperation : IWebAccountProviderBaseReportOperation_raw, generate<IWebAccountProviderBaseReportOperation> {};

// IWebAccountProviderUIReportOperation
struct IWebAccountProviderUIReportOperation_raw : IInspectable {
	virtual STDMETHODIMP _ReportUserCanceled() = 0;
};
template<typename X> struct IWebAccountProviderUIReportOperation_adaptor : X {
	void ReportUserCanceled() { hrcheck(X::get()->_ReportUserCanceled()); }
};
template<typename X> struct adapt<IWebAccountProviderUIReportOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation_adaptor<X> { typedef adapt IWebAccountProviderUIReportOperation; };
template<typename X> struct IWebAccountProviderUIReportOperation_unadaptor : X {
	STDMETHODIMP _ReportUserCanceled() { return hrtry([&, this] { X::get()->ReportUserCanceled(); }); }
};
template<typename X> struct unadapt<IWebAccountProviderUIReportOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation_unadaptor<X> {};
struct IWebAccountProviderUIReportOperation : IWebAccountProviderUIReportOperation_raw, generate<IWebAccountProviderUIReportOperation> {};

// IWebAccountProviderSilentReportOperation
struct IWebAccountProviderSilentReportOperation_raw : IInspectable {
	virtual STDMETHODIMP _ReportUserInteractionRequired() = 0;
	virtual STDMETHODIMP _ReportUserInteractionRequiredWithError(Core::WebProviderError* value) = 0;
};
template<typename X> struct IWebAccountProviderSilentReportOperation_adaptor : X {
	void ReportUserInteractionRequired() { hrcheck(X::get()->_ReportUserInteractionRequired()); }
	void ReportUserInteractionRequired(pptr<Core::WebProviderError> value) { hrcheck(X::get()->_ReportUserInteractionRequiredWithError(value)); }
};
template<typename X> struct adapt<IWebAccountProviderSilentReportOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation_adaptor<X> { typedef adapt IWebAccountProviderSilentReportOperation; };
template<typename X> struct IWebAccountProviderSilentReportOperation_unadaptor : X {
	STDMETHODIMP _ReportUserInteractionRequired() { return hrtry([&, this] { X::get()->ReportUserInteractionRequired(); }); }
	STDMETHODIMP _ReportUserInteractionRequiredWithError(Core::WebProviderError* value) { return hrtry([&, this] { X::get()->ReportUserInteractionRequired(value); }); }
};
template<typename X> struct unadapt<IWebAccountProviderSilentReportOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation_unadaptor<X> {};
struct IWebAccountProviderSilentReportOperation : IWebAccountProviderSilentReportOperation_raw, generate<IWebAccountProviderSilentReportOperation> {};

// IWebAccountProviderTokenOperation
struct IWebAccountProviderTokenOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_ProviderRequest(WebProviderTokenRequest* *webTokenRequest) = 0;
	virtual STDMETHODIMP _get_ProviderResponses(Foundation::Collections::IVector<WebProviderTokenResponse*>* *value) = 0;
	virtual STDMETHODIMP _put_CacheExpirationTime(Foundation::DateTime value) = 0;
	virtual STDMETHODIMP _get_CacheExpirationTime(Foundation::DateTime *value) = 0;
};
template<typename X> struct IWebAccountProviderTokenOperation_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IWebAccountProviderTokenOperation_adaptor::CacheExpirationTime)->_get_CacheExpirationTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IWebAccountProviderTokenOperation_adaptor::CacheExpirationTime)->_put_CacheExpirationTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} CacheExpirationTime;
		struct : property {
			ptr<WebProviderTokenRequest> get() { WebProviderTokenRequest* webTokenRequest; hrcheck(enc(&IWebAccountProviderTokenOperation_adaptor::ProviderRequest)->_get_ProviderRequest(&webTokenRequest)); return from_abi(webTokenRequest); }
			ptr<WebProviderTokenRequest> operator()() { return get(); }
			operator ptr<WebProviderTokenRequest> () { return get(); }
			ptr<WebProviderTokenRequest> operator->() { return get(); }
		} ProviderRequest;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<WebProviderTokenResponse>>> get() { Foundation::Collections::IVector<WebProviderTokenResponse*>* value; hrcheck(enc(&IWebAccountProviderTokenOperation_adaptor::ProviderResponses)->_get_ProviderResponses(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<WebProviderTokenResponse>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<WebProviderTokenResponse>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<WebProviderTokenResponse>>> operator->() { return get(); }
		} ProviderResponses;
	};
	IWebAccountProviderTokenOperation_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderTokenOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation_adaptor<X> { typedef adapt IWebAccountProviderTokenOperation; };
template<typename X> struct IWebAccountProviderTokenOperation_unadaptor : X {
	STDMETHODIMP _get_ProviderRequest(WebProviderTokenRequest* *webTokenRequest) { return hrtry([&, this] { get_prop(webTokenRequest, ProviderRequest); }); }
	STDMETHODIMP _get_ProviderResponses(Foundation::Collections::IVector<WebProviderTokenResponse*>* *value) { return hrtry([&, this] { get_prop(value, ProviderResponses); }); }
	STDMETHODIMP _put_CacheExpirationTime(Foundation::DateTime value) { return hrtry([&, this] { put_prop(value, CacheExpirationTime); }); }
	STDMETHODIMP _get_CacheExpirationTime(Foundation::DateTime *value) { return hrtry([&, this] { get_prop(value, CacheExpirationTime); }); }
};
template<typename X> struct unadapt<IWebAccountProviderTokenOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation_unadaptor<X> {};
struct IWebAccountProviderTokenOperation : IWebAccountProviderTokenOperation_raw, generate<IWebAccountProviderTokenOperation> {};

// IWebAccountProviderAddAccountOperation
struct IWebAccountProviderAddAccountOperation_raw : IInspectable {
	virtual STDMETHODIMP _ReportCompleted();
};
template<typename X> struct IWebAccountProviderAddAccountOperation_adaptor : X {
	void ReportCompleted() { hrcheck(X::get()->_ReportCompleted()); }
};
template<typename X> struct adapt<IWebAccountProviderAddAccountOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation_adaptor<X> { typedef adapt IWebAccountProviderAddAccountOperation; };
struct IWebAccountProviderAddAccountOperation : IWebAccountProviderAddAccountOperation_raw, generate<IWebAccountProviderAddAccountOperation> {};

// IWebAccountProviderManageAccountOperation
struct IWebAccountProviderManageAccountOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_WebAccount(Credentials::WebAccount* *value);
	virtual STDMETHODIMP _ReportCompleted();
};
template<typename X> struct IWebAccountProviderManageAccountOperation_adaptor : X {
	union {
		struct : property {
			ptr<Credentials::WebAccount> get() { Credentials::WebAccount* value; hrcheck(enc(&IWebAccountProviderManageAccountOperation_adaptor::WebAccount)->_get_WebAccount(&value)); return from_abi(value); }
			ptr<Credentials::WebAccount> operator()() { return get(); }
			operator ptr<Credentials::WebAccount> () { return get(); }
			ptr<Credentials::WebAccount> operator->() { return get(); }
		} WebAccount;
	};
	void ReportCompleted() { hrcheck(X::get()->_ReportCompleted()); }
	IWebAccountProviderManageAccountOperation_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderManageAccountOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation_adaptor<X> { typedef adapt IWebAccountProviderManageAccountOperation; };
struct IWebAccountProviderManageAccountOperation : IWebAccountProviderManageAccountOperation_raw, generate<IWebAccountProviderManageAccountOperation> {};

// IWebAccountProviderDeleteAccountOperation
struct IWebAccountProviderDeleteAccountOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_WebAccount(Credentials::WebAccount* *value);
};
template<typename X> struct IWebAccountProviderDeleteAccountOperation_adaptor : X {
	union {
		struct : property {
			ptr<Credentials::WebAccount> get() { Credentials::WebAccount* value; hrcheck(enc(&IWebAccountProviderDeleteAccountOperation_adaptor::WebAccount)->_get_WebAccount(&value)); return from_abi(value); }
			ptr<Credentials::WebAccount> operator()() { return get(); }
			operator ptr<Credentials::WebAccount> () { return get(); }
			ptr<Credentials::WebAccount> operator->() { return get(); }
		} WebAccount;
	};
	IWebAccountProviderDeleteAccountOperation_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderDeleteAccountOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation_adaptor<X> { typedef adapt IWebAccountProviderDeleteAccountOperation; };
struct IWebAccountProviderDeleteAccountOperation : IWebAccountProviderDeleteAccountOperation_raw, generate<IWebAccountProviderDeleteAccountOperation> {};

// IWebAccountProviderSignOutAccountOperation
struct IWebAccountProviderSignOutAccountOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_WebAccount(Credentials::WebAccount* *value);
	virtual STDMETHODIMP _get_ApplicationCallbackUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ClientId(HSTRING *value);
};
template<typename X> struct IWebAccountProviderSignOutAccountOperation_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebAccountProviderSignOutAccountOperation_adaptor::ApplicationCallbackUri)->_get_ApplicationCallbackUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ApplicationCallbackUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWebAccountProviderSignOutAccountOperation_adaptor::ClientId)->_get_ClientId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ClientId;
		struct : property {
			ptr<Credentials::WebAccount> get() { Credentials::WebAccount* value; hrcheck(enc(&IWebAccountProviderSignOutAccountOperation_adaptor::WebAccount)->_get_WebAccount(&value)); return from_abi(value); }
			ptr<Credentials::WebAccount> operator()() { return get(); }
			operator ptr<Credentials::WebAccount> () { return get(); }
			ptr<Credentials::WebAccount> operator->() { return get(); }
		} WebAccount;
	};
	IWebAccountProviderSignOutAccountOperation_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderSignOutAccountOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation_adaptor<X> { typedef adapt IWebAccountProviderSignOutAccountOperation; };
struct IWebAccountProviderSignOutAccountOperation : IWebAccountProviderSignOutAccountOperation_raw, generate<IWebAccountProviderSignOutAccountOperation> {};

// IWebAccountProviderRetrieveCookiesOperation
struct IWebAccountProviderRetrieveCookiesOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_Context(Foundation::Uri* *webCookieRequestContext);
	virtual STDMETHODIMP _get_Cookies(Foundation::Collections::IVector<Windows::Web::Http::HttpCookie*>* *cookies);
	virtual STDMETHODIMP _put_Uri(Foundation::Uri* uri);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *uri);
	virtual STDMETHODIMP _get_ApplicationCallbackUri(Foundation::Uri* *value);
};
template<typename X> struct IWebAccountProviderRetrieveCookiesOperation_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IWebAccountProviderRetrieveCookiesOperation_adaptor::ApplicationCallbackUri)->_get_ApplicationCallbackUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ApplicationCallbackUri;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* webCookieRequestContext; hrcheck(enc(&IWebAccountProviderRetrieveCookiesOperation_adaptor::Context)->_get_Context(&webCookieRequestContext)); return from_abi(webCookieRequestContext); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Context;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Windows::Web::Http::HttpCookie>>> get() { Foundation::Collections::IVector<Windows::Web::Http::HttpCookie*>* cookies; hrcheck(enc(&IWebAccountProviderRetrieveCookiesOperation_adaptor::Cookies)->_get_Cookies(&cookies)); return from_abi(cookies); }
			ptr<Foundation::Collections::IVector<ptr<Windows::Web::Http::HttpCookie>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Windows::Web::Http::HttpCookie>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Windows::Web::Http::HttpCookie>>> operator->() { return get(); }
		} Cookies;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* uri; hrcheck(enc(&IWebAccountProviderRetrieveCookiesOperation_adaptor::Uri)->_get_Uri(&uri)); return from_abi(uri); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> uri) { hrcheck(enc(&IWebAccountProviderRetrieveCookiesOperation_adaptor::Uri)->_put_Uri(uri)); }
			void operator=(pptr<Foundation::Uri> uri) { put(uri); }
			void operator()(pptr<Foundation::Uri> uri) { put(uri); }
		} Uri;
	};
	IWebAccountProviderRetrieveCookiesOperation_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderRetrieveCookiesOperation, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation_adaptor<X> { typedef adapt IWebAccountProviderRetrieveCookiesOperation; };
struct IWebAccountProviderRetrieveCookiesOperation : IWebAccountProviderRetrieveCookiesOperation_raw, generate<IWebAccountProviderRetrieveCookiesOperation> {};

// WebAccountProviderRequestTokenOperation
template<typename X> struct statics<WebAccountProviderRequestTokenOperation, X> : X {
	typedef typename X::root_type WebAccountProviderRequestTokenOperation;
};
struct WebAccountProviderRequestTokenOperation : generate<WebAccountProviderRequestTokenOperation> {};

// WebAccountProviderGetTokenSilentOperation
template<typename X> struct statics<WebAccountProviderGetTokenSilentOperation, X> : X {
	typedef typename X::root_type WebAccountProviderGetTokenSilentOperation;
};
struct WebAccountProviderGetTokenSilentOperation : generate<WebAccountProviderGetTokenSilentOperation> {
	using IWebAccountProviderSilentReportOperation::ReportUserInteractionRequired;
};

// WebAccountProviderAddAccountOperation
template<typename X> struct statics<WebAccountProviderAddAccountOperation, X> : X {
	typedef typename X::root_type WebAccountProviderAddAccountOperation;
};
struct WebAccountProviderAddAccountOperation : generate<WebAccountProviderAddAccountOperation> {};

// WebAccountProviderManageAccountOperation
template<typename X> struct statics<WebAccountProviderManageAccountOperation, X> : X {
	typedef typename X::root_type WebAccountProviderManageAccountOperation;
};
struct WebAccountProviderManageAccountOperation : generate<WebAccountProviderManageAccountOperation> {};

// WebAccountProviderDeleteAccountOperation
template<typename X> struct statics<WebAccountProviderDeleteAccountOperation, X> : X {
	typedef typename X::root_type WebAccountProviderDeleteAccountOperation;
};
struct WebAccountProviderDeleteAccountOperation : generate<WebAccountProviderDeleteAccountOperation> {};

// WebAccountProviderSignOutAccountOperation
template<typename X> struct statics<WebAccountProviderSignOutAccountOperation, X> : X {
	typedef typename X::root_type WebAccountProviderSignOutAccountOperation;
};
struct WebAccountProviderSignOutAccountOperation : generate<WebAccountProviderSignOutAccountOperation> {};

// WebAccountProviderRetrieveCookiesOperation
template<typename X> struct statics<WebAccountProviderRetrieveCookiesOperation, X> : X {
	typedef typename X::root_type WebAccountProviderRetrieveCookiesOperation;
};
struct WebAccountProviderRetrieveCookiesOperation : generate<WebAccountProviderRetrieveCookiesOperation> {};

// IWebAccountProviderTokenObjects
struct IWebAccountProviderTokenObjects_raw : IInspectable {
	virtual STDMETHODIMP _get_Operation(IWebAccountProviderOperation* *value) = 0;
};
template<typename X> struct IWebAccountProviderTokenObjects_adaptor : X {
	union {
		struct : property {
			ptr<IWebAccountProviderOperation> get() { IWebAccountProviderOperation* value; hrcheck(enc(&IWebAccountProviderTokenObjects_adaptor::Operation)->_get_Operation(&value)); return from_abi(value); }
			ptr<IWebAccountProviderOperation> operator()() { return get(); }
			operator ptr<IWebAccountProviderOperation> () { return get(); }
			ptr<IWebAccountProviderOperation> operator->() { return get(); }
		} Operation;
	};
	IWebAccountProviderTokenObjects_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderTokenObjects, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects_adaptor<X> { typedef adapt IWebAccountProviderTokenObjects; };
template<typename X> struct IWebAccountProviderTokenObjects_unadaptor : X {
	STDMETHODIMP _get_Operation(IWebAccountProviderOperation* *value) { return hrtry([&, this] { get_prop(value, Operation); }); }
};
template<typename X> struct unadapt<IWebAccountProviderTokenObjects, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects_unadaptor<X> {};
struct IWebAccountProviderTokenObjects : IWebAccountProviderTokenObjects_raw, generate<IWebAccountProviderTokenObjects> {};

// IWebAccountProviderTokenObjects2
struct IWebAccountProviderTokenObjects2_raw : IInspectable {
	virtual STDMETHODIMP _get_User(System::User* *value) = 0;
};
template<typename X> struct IWebAccountProviderTokenObjects2_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IWebAccountProviderTokenObjects2_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	IWebAccountProviderTokenObjects2_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderTokenObjects2, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2_adaptor<X> { typedef adapt IWebAccountProviderTokenObjects2; };
template<typename X> struct IWebAccountProviderTokenObjects2_unadaptor : X {
	STDMETHODIMP _get_User(System::User* *value) { return hrtry([&, this] { get_prop(value, User); }); }
};
template<typename X> struct unadapt<IWebAccountProviderTokenObjects2, X> : Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects2_unadaptor<X> {};
struct IWebAccountProviderTokenObjects2 : IWebAccountProviderTokenObjects2_raw, generate<IWebAccountProviderTokenObjects2> {};

// WebAccountProviderTriggerDetails
template<typename X> struct statics<WebAccountProviderTriggerDetails, X> : X {
	typedef typename X::root_type WebAccountProviderTriggerDetails;
};
struct WebAccountProviderTriggerDetails : generate<WebAccountProviderTriggerDetails> {};
}}}}}
} // namespace iso_winrt
