#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Streaming.Adaptive

#include "Windows.Media.Streaming.Adaptive.0.h"
#include "Windows.Media.Core.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IInputStream;
struct IBuffer;
}}
namespace Web { namespace Http {
struct HttpClient;
struct HttpResponseMessage;
}}}

// defs

template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceStatics> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource3> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource> : interface_type<Windows::Media::Core::IMediaSource> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource, Windows::Foundation::IClosable, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource2, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource3> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult2> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadBitrateChangedReason> : enum_type<int> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadBitrateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourcePlaybackBitrateChangedEventArgs> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceResourceType> : enum_type<int> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs3> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadRequestedEventArgs> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs2, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs3> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs3> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadCompletedEventArgs> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs2, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs3> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs3> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadFailedEventArgs> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs2, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs3> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceAdvancedSettings> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceAdvancedSettings> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceAdvancedSettings> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnostics> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDiagnostics> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnostics> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCorrelatedTimes> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCorrelatedTimes> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCorrelatedTimes> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadResult> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult2> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedDeferral> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadRequestedDeferral> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedDeferral> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadStatistics> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadStatistics> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadStatistics> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDiagnosticType> : enum_type<int> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs2> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs3> : interface_type<> {};
template<> struct def<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDiagnosticAvailableEventArgs> : class_type<Platform::Object, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs2, Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs3> {};

// uuids

template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult> { define_guid(0x4686B6B2, 0x800F, 0x4E31, 0x90, 0x93, 0x76, 0xD4, 0x78, 0x20, 0x13, 0xE7);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceStatics> { define_guid(0x50A6BD5D, 0x66EF, 0x4CD3, 0x95, 0x79, 0x9E, 0x66, 0x5, 0x7, 0xDC, 0x3F);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource3> { define_guid(0xBA7023FD, 0xC334, 0x461B, 0xA3, 0x6E, 0xC9, 0x9F, 0x54, 0xF7, 0x17, 0x4A);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource2> { define_guid(0x17890342, 0x6760, 0x4BB9, 0xA5, 0x8A, 0xF7, 0xAA, 0x98, 0xB0, 0x8C, 0xE);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource> { define_guid(0x4C7332EF, 0xD39F, 0x4396, 0xB4, 0xD9, 0x4, 0x39, 0x57, 0xA7, 0xC9, 0x64);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult2> { define_guid(0x1C3243BF, 0x1C44, 0x404B, 0xA2, 0x1, 0xDF, 0x45, 0xAC, 0x78, 0x98, 0xE8);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2> { define_guid(0xF3F1F444, 0x96AE, 0x4DE0, 0xB5, 0x40, 0x2B, 0x32, 0x46, 0xE6, 0x96, 0x8C);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs> { define_guid(0x670C0A44, 0xE04E, 0x4EFF, 0x81, 0x6A, 0x17, 0x39, 0x9F, 0x78, 0xF4, 0xBA);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs> { define_guid(0x23A29F6D, 0x7DDA, 0x4A51, 0x87, 0xA9, 0x6F, 0xA8, 0xC5, 0xB2, 0x92, 0xBE);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs3> { define_guid(0x333C50FD, 0x4F62, 0x4481, 0xAB, 0x44, 0x1E, 0x47, 0xB0, 0x57, 0x42, 0x25);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs2> { define_guid(0xB37D8BFE, 0xAA44, 0x4D82, 0x82, 0x5B, 0x61, 0x1D, 0xE3, 0xBC, 0xFE, 0xCB);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs> { define_guid(0xC83FDFFD, 0x44A9, 0x47A2, 0xBF, 0x96, 0x3, 0x39, 0x8B, 0x4B, 0xFA, 0xAF);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs3> { define_guid(0xF8A8BD1, 0x93B2, 0x47C6, 0xBA, 0xDC, 0x8B, 0xE2, 0xC8, 0xF7, 0xF6, 0xE8);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs2> { define_guid(0x704744C4, 0x964A, 0x40E4, 0xAF, 0x95, 0x91, 0x77, 0xDD, 0x6D, 0xFA, 0x0);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs> { define_guid(0x19240DC3, 0x5B37, 0x4A1A, 0x89, 0x70, 0xD6, 0x21, 0xCB, 0x6C, 0xA8, 0x3B);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs3> { define_guid(0xD0354549, 0x1132, 0x4A10, 0x91, 0x5A, 0xC2, 0x21, 0x1B, 0x5B, 0x94, 0x9);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs2> { define_guid(0x70919568, 0x967C, 0x4986, 0x90, 0xC5, 0xC6, 0xFC, 0x4B, 0x31, 0xE2, 0xD8);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs> { define_guid(0x37739048, 0xF4AB, 0x40A4, 0xB1, 0x35, 0xC6, 0xDF, 0xD8, 0xBD, 0x7F, 0xF1);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceAdvancedSettings> { define_guid(0x55DB1680, 0x1AEB, 0x47DC, 0xAA, 0x8, 0x9A, 0x11, 0x61, 0xB, 0xA4, 0x5A);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnostics> { define_guid(0x9B24EE68, 0x962E, 0x448C, 0xAE, 0xBF, 0xB2, 0x9B, 0x56, 0x9, 0x8E, 0x23);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCorrelatedTimes> { define_guid(0x5108787, 0xE032, 0x48E1, 0xAB, 0x8D, 0x0, 0x2B, 0xB, 0x30, 0x51, 0xDF);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult2> { define_guid(0x15552CB7, 0x7B80, 0x4AC4, 0x86, 0x60, 0xA4, 0xB9, 0x7F, 0x7C, 0x70, 0xF0);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult> { define_guid(0xF4AFDC73, 0xBCEE, 0x4A6A, 0x9F, 0xA, 0xFE, 0xC4, 0x1E, 0x23, 0x39, 0xB0);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedDeferral> { define_guid(0x5C68F64, 0xFA20, 0x4DBD, 0x98, 0x21, 0x4B, 0xF4, 0xC9, 0xBF, 0x77, 0xAB);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadStatistics> { define_guid(0xA306CEFB, 0xE96A, 0x4DFF, 0xA9, 0xB8, 0x1A, 0xE0, 0x8C, 0x1, 0xAE, 0x98);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs> { define_guid(0x3AF64F06, 0x6D9C, 0x494A, 0xB7, 0xA9, 0xB3, 0xA5, 0xDE, 0xE6, 0xAD, 0x68);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs2> { define_guid(0x8C6DD857, 0x16A5, 0x4D9F, 0x81, 0xE, 0x0, 0xBD, 0x90, 0x1B, 0x3E, 0xF9);};
template<> struct uuid<Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs3> { define_guid(0xC3650CD5, 0xDAEB, 0x4103, 0x84, 0xDA, 0x68, 0x76, 0x9A, 0xD5, 0x13, 0xFF);};

// types

namespace Windows { namespace Media { namespace Streaming { namespace Adaptive {

// IAdaptiveMediaSourceCreationResult
struct IAdaptiveMediaSourceCreationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(AdaptiveMediaSourceCreationStatus *value);
	virtual STDMETHODIMP _get_MediaSource(AdaptiveMediaSource* *value);
	virtual STDMETHODIMP _get_HttpResponseMessage(Web::Http::HttpResponseMessage* *value);
};
template<typename X> struct IAdaptiveMediaSourceCreationResult_adaptor : X {
	union {
		struct : property {
			ptr<Web::Http::HttpResponseMessage> get() { Web::Http::HttpResponseMessage* value; hrcheck(enc(&IAdaptiveMediaSourceCreationResult_adaptor::HttpResponseMessage)->_get_HttpResponseMessage(&value)); return from_abi(value); }
			ptr<Web::Http::HttpResponseMessage> operator()() { return get(); }
			operator ptr<Web::Http::HttpResponseMessage> () { return get(); }
			ptr<Web::Http::HttpResponseMessage> operator->() { return get(); }
		} HttpResponseMessage;
		struct : property {
			ptr<AdaptiveMediaSource> get() { AdaptiveMediaSource* value; hrcheck(enc(&IAdaptiveMediaSourceCreationResult_adaptor::MediaSource)->_get_MediaSource(&value)); return from_abi(value); }
			ptr<AdaptiveMediaSource> operator()() { return get(); }
			operator ptr<AdaptiveMediaSource> () { return get(); }
			ptr<AdaptiveMediaSource> operator->() { return get(); }
		} MediaSource;
		struct : property {
			AdaptiveMediaSourceCreationStatus get() { AdaptiveMediaSourceCreationStatus value; hrcheck(enc(&IAdaptiveMediaSourceCreationResult_adaptor::Status)->_get_Status(&value)); return value; }
			AdaptiveMediaSourceCreationStatus operator()() { return get(); }
			operator AdaptiveMediaSourceCreationStatus () { return get(); }
		} Status;
	};
	IAdaptiveMediaSourceCreationResult_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceCreationResult, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult_adaptor<X> { typedef adapt IAdaptiveMediaSourceCreationResult; };
struct IAdaptiveMediaSourceCreationResult : IAdaptiveMediaSourceCreationResult_raw, generate<IAdaptiveMediaSourceCreationResult> {};

// IAdaptiveMediaSourceStatics
struct IAdaptiveMediaSourceStatics : IInspectable {
	virtual STDMETHODIMP _IsContentTypeSupported(HSTRING contentType, bool *result);
	virtual STDMETHODIMP _CreateFromUriAsync(Foundation::Uri* uri, Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* *result);
	virtual STDMETHODIMP _CreateFromUriWithDownloaderAsync(Foundation::Uri* uri, Web::Http::HttpClient* httpClient, Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* *result);
	virtual STDMETHODIMP _CreateFromStreamAsync(Storage::Streams::IInputStream* stream, Foundation::Uri* uri, HSTRING contentType, Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* *result);
	virtual STDMETHODIMP _CreateFromStreamWithDownloaderAsync(Storage::Streams::IInputStream* stream, Foundation::Uri* uri, HSTRING contentType, Web::Http::HttpClient* httpClient, Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* *result);
};

// IAdaptiveMediaSource3
struct IAdaptiveMediaSource3_raw : IInspectable {
	virtual STDMETHODIMP _get_MinLiveOffset(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_MaxSeekableWindowSize(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_DesiredSeekableWindowSize(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_DesiredSeekableWindowSize(Foundation::IReference<Foundation::TimeSpan>* value);
	virtual STDMETHODIMP _get_Diagnostics(AdaptiveMediaSourceDiagnostics* *value);
	virtual STDMETHODIMP _GetCorrelatedTimes(AdaptiveMediaSourceCorrelatedTimes* *value);
};
template<typename X> struct IAdaptiveMediaSource3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSource3_adaptor::DesiredSeekableWindowSize)->_get_DesiredSeekableWindowSize(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IAdaptiveMediaSource3_adaptor::DesiredSeekableWindowSize)->_put_DesiredSeekableWindowSize(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} DesiredSeekableWindowSize;
		struct : property {
			ptr<AdaptiveMediaSourceDiagnostics> get() { AdaptiveMediaSourceDiagnostics* value; hrcheck(enc(&IAdaptiveMediaSource3_adaptor::Diagnostics)->_get_Diagnostics(&value)); return from_abi(value); }
			ptr<AdaptiveMediaSourceDiagnostics> operator()() { return get(); }
			operator ptr<AdaptiveMediaSourceDiagnostics> () { return get(); }
			ptr<AdaptiveMediaSourceDiagnostics> operator->() { return get(); }
		} Diagnostics;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSource3_adaptor::MaxSeekableWindowSize)->_get_MaxSeekableWindowSize(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} MaxSeekableWindowSize;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSource3_adaptor::MinLiveOffset)->_get_MinLiveOffset(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} MinLiveOffset;
	};
	ptr<AdaptiveMediaSourceCorrelatedTimes> GetCorrelatedTimes() { AdaptiveMediaSourceCorrelatedTimes* value; hrcheck(X::get()->_GetCorrelatedTimes(&value)); return from_abi(value); }
	IAdaptiveMediaSource3_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSource3, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource3_adaptor<X> { typedef adapt IAdaptiveMediaSource3; };
struct IAdaptiveMediaSource3 : IAdaptiveMediaSource3_raw, generate<IAdaptiveMediaSource3> {};

// IAdaptiveMediaSource2
struct IAdaptiveMediaSource2_raw : IInspectable {
	virtual STDMETHODIMP _get_AdvancedSettings(AdaptiveMediaSourceAdvancedSettings* *value);
};
template<typename X> struct IAdaptiveMediaSource2_adaptor : X {
	union {
		struct : property {
			ptr<AdaptiveMediaSourceAdvancedSettings> get() { AdaptiveMediaSourceAdvancedSettings* value; hrcheck(enc(&IAdaptiveMediaSource2_adaptor::AdvancedSettings)->_get_AdvancedSettings(&value)); return from_abi(value); }
			ptr<AdaptiveMediaSourceAdvancedSettings> operator()() { return get(); }
			operator ptr<AdaptiveMediaSourceAdvancedSettings> () { return get(); }
			ptr<AdaptiveMediaSourceAdvancedSettings> operator->() { return get(); }
		} AdvancedSettings;
	};
	IAdaptiveMediaSource2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSource2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource2_adaptor<X> { typedef adapt IAdaptiveMediaSource2; };
struct IAdaptiveMediaSource2 : IAdaptiveMediaSource2_raw, generate<IAdaptiveMediaSource2> {};

// IAdaptiveMediaSource
struct IAdaptiveMediaSource_raw : IInspectable {
	virtual STDMETHODIMP _get_IsLive(bool *value);
	virtual STDMETHODIMP _get_DesiredLiveOffset(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_DesiredLiveOffset(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_InitialBitrate(unsigned *value);
	virtual STDMETHODIMP _put_InitialBitrate(unsigned value);
	virtual STDMETHODIMP _get_CurrentDownloadBitrate(unsigned *value);
	virtual STDMETHODIMP _get_CurrentPlaybackBitrate(unsigned *value);
	virtual STDMETHODIMP _get_AvailableBitrates(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_DesiredMinBitrate(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_DesiredMinBitrate(Foundation::IReference<unsigned>* value);
	virtual STDMETHODIMP _get_DesiredMaxBitrate(Foundation::IReference<unsigned>* *value);
	virtual STDMETHODIMP _put_DesiredMaxBitrate(Foundation::IReference<unsigned>* value);
	virtual STDMETHODIMP _get_AudioOnlyPlayback(bool *value);
	virtual STDMETHODIMP _get_InboundBitsPerSecond(unsigned __int64 *value);
	virtual STDMETHODIMP _get_InboundBitsPerSecondWindow(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_InboundBitsPerSecondWindow(Foundation::TimeSpan value);
	virtual STDMETHODIMP _add_DownloadBitrateChanged(Foundation::TypedEventHandler<AdaptiveMediaSource*, AdaptiveMediaSourceDownloadBitrateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DownloadBitrateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PlaybackBitrateChanged(Foundation::TypedEventHandler<AdaptiveMediaSource*, AdaptiveMediaSourcePlaybackBitrateChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PlaybackBitrateChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DownloadRequested(Foundation::TypedEventHandler<AdaptiveMediaSource*, AdaptiveMediaSourceDownloadRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DownloadRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DownloadCompleted(Foundation::TypedEventHandler<AdaptiveMediaSource*, AdaptiveMediaSourceDownloadCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DownloadCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DownloadFailed(Foundation::TypedEventHandler<AdaptiveMediaSource*, AdaptiveMediaSourceDownloadFailedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DownloadFailed(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAdaptiveMediaSource_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::AudioOnlyPlayback)->_get_AudioOnlyPlayback(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AudioOnlyPlayback;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::AvailableBitrates)->_get_AvailableBitrates(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
		} AvailableBitrates;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::CurrentDownloadBitrate)->_get_CurrentDownloadBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CurrentDownloadBitrate;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::CurrentPlaybackBitrate)->_get_CurrentPlaybackBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CurrentPlaybackBitrate;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::DesiredLiveOffset)->_get_DesiredLiveOffset(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::DesiredLiveOffset)->_put_DesiredLiveOffset(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} DesiredLiveOffset;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::DesiredMaxBitrate)->_get_DesiredMaxBitrate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::DesiredMaxBitrate)->_put_DesiredMaxBitrate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} DesiredMaxBitrate;
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::DesiredMinBitrate)->_get_DesiredMinBitrate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned>> value) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::DesiredMinBitrate)->_put_DesiredMinBitrate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned>> value) { put(to_abi(value)); }
		} DesiredMinBitrate;
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::InboundBitsPerSecond)->_get_InboundBitsPerSecond(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} InboundBitsPerSecond;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::InboundBitsPerSecondWindow)->_get_InboundBitsPerSecondWindow(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::InboundBitsPerSecondWindow)->_put_InboundBitsPerSecondWindow(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} InboundBitsPerSecondWindow;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::InitialBitrate)->_get_InitialBitrate(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::InitialBitrate)->_put_InitialBitrate(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} InitialBitrate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAdaptiveMediaSource_adaptor::IsLive)->_get_IsLive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsLive;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdaptiveMediaSource>, ptr<AdaptiveMediaSourceDownloadBitrateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadBitrateChanged)->_add_DownloadBitrateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadBitrateChanged)->_remove_DownloadBitrateChanged(token)); }
		} DownloadBitrateChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdaptiveMediaSource>, ptr<AdaptiveMediaSourceDownloadCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadCompleted)->_add_DownloadCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadCompleted)->_remove_DownloadCompleted(token)); }
		} DownloadCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdaptiveMediaSource>, ptr<AdaptiveMediaSourceDownloadFailedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadFailed)->_add_DownloadFailed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadFailed)->_remove_DownloadFailed(token)); }
		} DownloadFailed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdaptiveMediaSource>, ptr<AdaptiveMediaSourceDownloadRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadRequested)->_add_DownloadRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::DownloadRequested)->_remove_DownloadRequested(token)); }
		} DownloadRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdaptiveMediaSource>, ptr<AdaptiveMediaSourcePlaybackBitrateChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdaptiveMediaSource_adaptor::PlaybackBitrateChanged)->_add_PlaybackBitrateChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdaptiveMediaSource_adaptor::PlaybackBitrateChanged)->_remove_PlaybackBitrateChanged(token)); }
		} PlaybackBitrateChanged;
	};
	IAdaptiveMediaSource_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSource, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSource_adaptor<X> { typedef adapt IAdaptiveMediaSource; };
struct IAdaptiveMediaSource : IAdaptiveMediaSource_raw, generate<IAdaptiveMediaSource> {};

// AdaptiveMediaSource
template<typename> struct AdaptiveMediaSource_statics {
	static bool IsContentTypeSupported(hstring_ref contentType) { bool result; hrcheck(get_activation_factory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>()->_IsContentTypeSupported(contentType, &result)); return result; }
	static ptr<Foundation::IAsyncOperation<ptr<AdaptiveMediaSourceCreationResult>>> CreateFromUriAsync(pptr<Foundation::Uri> uri) { Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* result; hrcheck(get_activation_factory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>()->_CreateFromUriAsync(uri, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<AdaptiveMediaSourceCreationResult>>> CreateFromUriAsync(pptr<Foundation::Uri> uri, pptr<Web::Http::HttpClient> httpClient) { Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* result; hrcheck(get_activation_factory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>()->_CreateFromUriWithDownloaderAsync(uri, httpClient, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<AdaptiveMediaSourceCreationResult>>> CreateFromStreamAsync(pptr<Storage::Streams::IInputStream> stream, pptr<Foundation::Uri> uri, hstring_ref contentType) { Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* result; hrcheck(get_activation_factory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>()->_CreateFromStreamAsync(stream, uri, contentType, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<AdaptiveMediaSourceCreationResult>>> CreateFromStreamAsync(pptr<Storage::Streams::IInputStream> stream, pptr<Foundation::Uri> uri, hstring_ref contentType, pptr<Web::Http::HttpClient> httpClient) { Foundation::IAsyncOperation<AdaptiveMediaSourceCreationResult*>* result; hrcheck(get_activation_factory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>()->_CreateFromStreamWithDownloaderAsync(stream, uri, contentType, httpClient, &result)); return from_abi(result); }
};

template<typename X> struct statics<AdaptiveMediaSource, X> : X, Windows::Media::Streaming::Adaptive::AdaptiveMediaSource_statics<void> {
	typedef typename X::root_type AdaptiveMediaSource;
};
struct AdaptiveMediaSource : generate<AdaptiveMediaSource> {};

// IAdaptiveMediaSourceCreationResult2
struct IAdaptiveMediaSourceCreationResult2_raw : IInspectable {
	virtual STDMETHODIMP _get_ExtendedError(Foundation::HResult *value);
};
template<typename X> struct IAdaptiveMediaSourceCreationResult2_adaptor : X {
	union {
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IAdaptiveMediaSourceCreationResult2_adaptor::ExtendedError)->_get_ExtendedError(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ExtendedError;
	};
	IAdaptiveMediaSourceCreationResult2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceCreationResult2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCreationResult2_adaptor<X> { typedef adapt IAdaptiveMediaSourceCreationResult2; };
struct IAdaptiveMediaSourceCreationResult2 : IAdaptiveMediaSourceCreationResult2_raw, generate<IAdaptiveMediaSourceCreationResult2> {};

// AdaptiveMediaSourceCreationResult
template<typename X> struct statics<AdaptiveMediaSourceCreationResult, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceCreationResult;
};
struct AdaptiveMediaSourceCreationResult : generate<AdaptiveMediaSourceCreationResult> {};

// IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2
struct IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(AdaptiveMediaSourceDownloadBitrateChangedReason *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2_adaptor : X {
	union {
		struct : property {
			AdaptiveMediaSourceDownloadBitrateChangedReason get() { AdaptiveMediaSourceDownloadBitrateChangedReason value; hrcheck(enc(&IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2_adaptor::Reason)->_get_Reason(&value)); return value; }
			AdaptiveMediaSourceDownloadBitrateChangedReason operator()() { return get(); }
			operator AdaptiveMediaSourceDownloadBitrateChangedReason () { return get(); }
		} Reason;
	};
	IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2; };
struct IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2 : IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2_raw, generate<IAdaptiveMediaSourceDownloadBitrateChangedEventArgs2> {};

// IAdaptiveMediaSourceDownloadBitrateChangedEventArgs
struct IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_OldValue(unsigned *value);
	virtual STDMETHODIMP _get_NewValue(unsigned *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_adaptor::NewValue)->_get_NewValue(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} NewValue;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_adaptor::OldValue)->_get_OldValue(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} OldValue;
	};
	IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadBitrateChangedEventArgs, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadBitrateChangedEventArgs; };
struct IAdaptiveMediaSourceDownloadBitrateChangedEventArgs : IAdaptiveMediaSourceDownloadBitrateChangedEventArgs_raw, generate<IAdaptiveMediaSourceDownloadBitrateChangedEventArgs> {};

// AdaptiveMediaSourceDownloadBitrateChangedEventArgs
template<typename X> struct statics<AdaptiveMediaSourceDownloadBitrateChangedEventArgs, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDownloadBitrateChangedEventArgs;
};
struct AdaptiveMediaSourceDownloadBitrateChangedEventArgs : generate<AdaptiveMediaSourceDownloadBitrateChangedEventArgs> {};

// IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs
struct IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_OldValue(unsigned *value);
	virtual STDMETHODIMP _get_NewValue(unsigned *value);
	virtual STDMETHODIMP _get_AudioOnly(bool *value);
};
template<typename X> struct IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_adaptor::AudioOnly)->_get_AudioOnly(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AudioOnly;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_adaptor::NewValue)->_get_NewValue(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} NewValue;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_adaptor::OldValue)->_get_OldValue(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} OldValue;
	};
	IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_adaptor<X> { typedef adapt IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs; };
struct IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs : IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs_raw, generate<IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs> {};

// AdaptiveMediaSourcePlaybackBitrateChangedEventArgs
template<typename X> struct statics<AdaptiveMediaSourcePlaybackBitrateChangedEventArgs, X> : X {
	typedef typename X::root_type AdaptiveMediaSourcePlaybackBitrateChangedEventArgs;
};
struct AdaptiveMediaSourcePlaybackBitrateChangedEventArgs : generate<AdaptiveMediaSourcePlaybackBitrateChangedEventArgs> {};

// IAdaptiveMediaSourceDownloadRequestedEventArgs3
struct IAdaptiveMediaSourceDownloadRequestedEventArgs3_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceDuration(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_ResourceContentType(HSTRING *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadRequestedEventArgs3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs3_adaptor::ResourceContentType)->_get_ResourceContentType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResourceContentType;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs3_adaptor::ResourceDuration)->_get_ResourceDuration(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} ResourceDuration;
	};
	IAdaptiveMediaSourceDownloadRequestedEventArgs3_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadRequestedEventArgs3, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs3_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadRequestedEventArgs3; };
struct IAdaptiveMediaSourceDownloadRequestedEventArgs3 : IAdaptiveMediaSourceDownloadRequestedEventArgs3_raw, generate<IAdaptiveMediaSourceDownloadRequestedEventArgs3> {};

// IAdaptiveMediaSourceDownloadRequestedEventArgs2
struct IAdaptiveMediaSourceDownloadRequestedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_RequestId(int *value);
	virtual STDMETHODIMP _get_Position(Foundation::IReference<Foundation::TimeSpan>* *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadRequestedEventArgs2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs2_adaptor::Position)->_get_Position(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} Position;
		struct : property {
			int get() { int value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs2_adaptor::RequestId)->_get_RequestId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RequestId;
	};
	IAdaptiveMediaSourceDownloadRequestedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadRequestedEventArgs2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs2_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadRequestedEventArgs2; };
struct IAdaptiveMediaSourceDownloadRequestedEventArgs2 : IAdaptiveMediaSourceDownloadRequestedEventArgs2_raw, generate<IAdaptiveMediaSourceDownloadRequestedEventArgs2> {};

// IAdaptiveMediaSourceDownloadRequestedEventArgs
struct IAdaptiveMediaSourceDownloadRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceType(AdaptiveMediaSourceResourceType *value);
	virtual STDMETHODIMP _get_ResourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeOffset(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeLength(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_Result(AdaptiveMediaSourceDownloadResult* *value);
	virtual STDMETHODIMP _GetDeferral(AdaptiveMediaSourceDownloadRequestedDeferral* *deferral);
};
template<typename X> struct IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor::ResourceByteRangeLength)->_get_ResourceByteRangeLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeLength;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor::ResourceByteRangeOffset)->_get_ResourceByteRangeOffset(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeOffset;
		struct : property {
			AdaptiveMediaSourceResourceType get() { AdaptiveMediaSourceResourceType value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor::ResourceType)->_get_ResourceType(&value)); return value; }
			AdaptiveMediaSourceResourceType operator()() { return get(); }
			operator AdaptiveMediaSourceResourceType () { return get(); }
		} ResourceType;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor::ResourceUri)->_get_ResourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ResourceUri;
		struct : property {
			ptr<AdaptiveMediaSourceDownloadResult> get() { AdaptiveMediaSourceDownloadResult* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor::Result)->_get_Result(&value)); return from_abi(value); }
			ptr<AdaptiveMediaSourceDownloadResult> operator()() { return get(); }
			operator ptr<AdaptiveMediaSourceDownloadResult> () { return get(); }
			ptr<AdaptiveMediaSourceDownloadResult> operator->() { return get(); }
		} Result;
	};
	ptr<AdaptiveMediaSourceDownloadRequestedDeferral> GetDeferral() { AdaptiveMediaSourceDownloadRequestedDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadRequestedEventArgs, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedEventArgs_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadRequestedEventArgs; };
struct IAdaptiveMediaSourceDownloadRequestedEventArgs : IAdaptiveMediaSourceDownloadRequestedEventArgs_raw, generate<IAdaptiveMediaSourceDownloadRequestedEventArgs> {};

// AdaptiveMediaSourceDownloadRequestedEventArgs
template<typename X> struct statics<AdaptiveMediaSourceDownloadRequestedEventArgs, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDownloadRequestedEventArgs;
};
struct AdaptiveMediaSourceDownloadRequestedEventArgs : generate<AdaptiveMediaSourceDownloadRequestedEventArgs> {};

// IAdaptiveMediaSourceDownloadCompletedEventArgs3
struct IAdaptiveMediaSourceDownloadCompletedEventArgs3_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceDuration(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_ResourceContentType(HSTRING *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadCompletedEventArgs3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs3_adaptor::ResourceContentType)->_get_ResourceContentType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResourceContentType;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs3_adaptor::ResourceDuration)->_get_ResourceDuration(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} ResourceDuration;
	};
	IAdaptiveMediaSourceDownloadCompletedEventArgs3_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadCompletedEventArgs3, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs3_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadCompletedEventArgs3; };
struct IAdaptiveMediaSourceDownloadCompletedEventArgs3 : IAdaptiveMediaSourceDownloadCompletedEventArgs3_raw, generate<IAdaptiveMediaSourceDownloadCompletedEventArgs3> {};

// IAdaptiveMediaSourceDownloadCompletedEventArgs2
struct IAdaptiveMediaSourceDownloadCompletedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_RequestId(int *value);
	virtual STDMETHODIMP _get_Statistics(AdaptiveMediaSourceDownloadStatistics* *value);
	virtual STDMETHODIMP _get_Position(Foundation::IReference<Foundation::TimeSpan>* *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadCompletedEventArgs2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs2_adaptor::Position)->_get_Position(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} Position;
		struct : property {
			int get() { int value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs2_adaptor::RequestId)->_get_RequestId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RequestId;
		struct : property {
			ptr<AdaptiveMediaSourceDownloadStatistics> get() { AdaptiveMediaSourceDownloadStatistics* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs2_adaptor::Statistics)->_get_Statistics(&value)); return from_abi(value); }
			ptr<AdaptiveMediaSourceDownloadStatistics> operator()() { return get(); }
			operator ptr<AdaptiveMediaSourceDownloadStatistics> () { return get(); }
			ptr<AdaptiveMediaSourceDownloadStatistics> operator->() { return get(); }
		} Statistics;
	};
	IAdaptiveMediaSourceDownloadCompletedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadCompletedEventArgs2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs2_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadCompletedEventArgs2; };
struct IAdaptiveMediaSourceDownloadCompletedEventArgs2 : IAdaptiveMediaSourceDownloadCompletedEventArgs2_raw, generate<IAdaptiveMediaSourceDownloadCompletedEventArgs2> {};

// IAdaptiveMediaSourceDownloadCompletedEventArgs
struct IAdaptiveMediaSourceDownloadCompletedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceType(AdaptiveMediaSourceResourceType *value);
	virtual STDMETHODIMP _get_ResourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeOffset(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeLength(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_HttpResponseMessage(Web::Http::HttpResponseMessage* *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Web::Http::HttpResponseMessage> get() { Web::Http::HttpResponseMessage* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor::HttpResponseMessage)->_get_HttpResponseMessage(&value)); return from_abi(value); }
			ptr<Web::Http::HttpResponseMessage> operator()() { return get(); }
			operator ptr<Web::Http::HttpResponseMessage> () { return get(); }
			ptr<Web::Http::HttpResponseMessage> operator->() { return get(); }
		} HttpResponseMessage;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor::ResourceByteRangeLength)->_get_ResourceByteRangeLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeLength;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor::ResourceByteRangeOffset)->_get_ResourceByteRangeOffset(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeOffset;
		struct : property {
			AdaptiveMediaSourceResourceType get() { AdaptiveMediaSourceResourceType value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor::ResourceType)->_get_ResourceType(&value)); return value; }
			AdaptiveMediaSourceResourceType operator()() { return get(); }
			operator AdaptiveMediaSourceResourceType () { return get(); }
		} ResourceType;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor::ResourceUri)->_get_ResourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ResourceUri;
	};
	IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadCompletedEventArgs, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadCompletedEventArgs_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadCompletedEventArgs; };
struct IAdaptiveMediaSourceDownloadCompletedEventArgs : IAdaptiveMediaSourceDownloadCompletedEventArgs_raw, generate<IAdaptiveMediaSourceDownloadCompletedEventArgs> {};

// AdaptiveMediaSourceDownloadCompletedEventArgs
template<typename X> struct statics<AdaptiveMediaSourceDownloadCompletedEventArgs, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDownloadCompletedEventArgs;
};
struct AdaptiveMediaSourceDownloadCompletedEventArgs : generate<AdaptiveMediaSourceDownloadCompletedEventArgs> {};

// IAdaptiveMediaSourceDownloadFailedEventArgs3
struct IAdaptiveMediaSourceDownloadFailedEventArgs3_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceDuration(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_ResourceContentType(HSTRING *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadFailedEventArgs3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs3_adaptor::ResourceContentType)->_get_ResourceContentType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResourceContentType;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs3_adaptor::ResourceDuration)->_get_ResourceDuration(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} ResourceDuration;
	};
	IAdaptiveMediaSourceDownloadFailedEventArgs3_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadFailedEventArgs3, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs3_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadFailedEventArgs3; };
struct IAdaptiveMediaSourceDownloadFailedEventArgs3 : IAdaptiveMediaSourceDownloadFailedEventArgs3_raw, generate<IAdaptiveMediaSourceDownloadFailedEventArgs3> {};

// IAdaptiveMediaSourceDownloadFailedEventArgs2
struct IAdaptiveMediaSourceDownloadFailedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_RequestId(int *value);
	virtual STDMETHODIMP _get_ExtendedError(Foundation::HResult *value);
	virtual STDMETHODIMP _get_Statistics(AdaptiveMediaSourceDownloadStatistics* *value);
	virtual STDMETHODIMP _get_Position(Foundation::IReference<Foundation::TimeSpan>* *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadFailedEventArgs2_adaptor : X {
	union {
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs2_adaptor::ExtendedError)->_get_ExtendedError(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ExtendedError;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs2_adaptor::Position)->_get_Position(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} Position;
		struct : property {
			int get() { int value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs2_adaptor::RequestId)->_get_RequestId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} RequestId;
		struct : property {
			ptr<AdaptiveMediaSourceDownloadStatistics> get() { AdaptiveMediaSourceDownloadStatistics* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs2_adaptor::Statistics)->_get_Statistics(&value)); return from_abi(value); }
			ptr<AdaptiveMediaSourceDownloadStatistics> operator()() { return get(); }
			operator ptr<AdaptiveMediaSourceDownloadStatistics> () { return get(); }
			ptr<AdaptiveMediaSourceDownloadStatistics> operator->() { return get(); }
		} Statistics;
	};
	IAdaptiveMediaSourceDownloadFailedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadFailedEventArgs2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs2_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadFailedEventArgs2; };
struct IAdaptiveMediaSourceDownloadFailedEventArgs2 : IAdaptiveMediaSourceDownloadFailedEventArgs2_raw, generate<IAdaptiveMediaSourceDownloadFailedEventArgs2> {};

// IAdaptiveMediaSourceDownloadFailedEventArgs
struct IAdaptiveMediaSourceDownloadFailedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceType(AdaptiveMediaSourceResourceType *value);
	virtual STDMETHODIMP _get_ResourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeOffset(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeLength(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_HttpResponseMessage(Web::Http::HttpResponseMessage* *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Web::Http::HttpResponseMessage> get() { Web::Http::HttpResponseMessage* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor::HttpResponseMessage)->_get_HttpResponseMessage(&value)); return from_abi(value); }
			ptr<Web::Http::HttpResponseMessage> operator()() { return get(); }
			operator ptr<Web::Http::HttpResponseMessage> () { return get(); }
			ptr<Web::Http::HttpResponseMessage> operator->() { return get(); }
		} HttpResponseMessage;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor::ResourceByteRangeLength)->_get_ResourceByteRangeLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeLength;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor::ResourceByteRangeOffset)->_get_ResourceByteRangeOffset(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeOffset;
		struct : property {
			AdaptiveMediaSourceResourceType get() { AdaptiveMediaSourceResourceType value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor::ResourceType)->_get_ResourceType(&value)); return value; }
			AdaptiveMediaSourceResourceType operator()() { return get(); }
			operator AdaptiveMediaSourceResourceType () { return get(); }
		} ResourceType;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor::ResourceUri)->_get_ResourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ResourceUri;
	};
	IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadFailedEventArgs, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadFailedEventArgs_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadFailedEventArgs; };
struct IAdaptiveMediaSourceDownloadFailedEventArgs : IAdaptiveMediaSourceDownloadFailedEventArgs_raw, generate<IAdaptiveMediaSourceDownloadFailedEventArgs> {};

// AdaptiveMediaSourceDownloadFailedEventArgs
template<typename X> struct statics<AdaptiveMediaSourceDownloadFailedEventArgs, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDownloadFailedEventArgs;
};
struct AdaptiveMediaSourceDownloadFailedEventArgs : generate<AdaptiveMediaSourceDownloadFailedEventArgs> {};

// IAdaptiveMediaSourceAdvancedSettings
struct IAdaptiveMediaSourceAdvancedSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_AllSegmentsIndependent(bool *value);
	virtual STDMETHODIMP _put_AllSegmentsIndependent(bool value);
	virtual STDMETHODIMP _get_DesiredBitrateHeadroomRatio(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _put_DesiredBitrateHeadroomRatio(Foundation::IReference<double>* value);
	virtual STDMETHODIMP _get_BitrateDowngradeTriggerRatio(Foundation::IReference<double>* *value);
	virtual STDMETHODIMP _put_BitrateDowngradeTriggerRatio(Foundation::IReference<double>* value);
};
template<typename X> struct IAdaptiveMediaSourceAdvancedSettings_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAdaptiveMediaSourceAdvancedSettings_adaptor::AllSegmentsIndependent)->_get_AllSegmentsIndependent(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IAdaptiveMediaSourceAdvancedSettings_adaptor::AllSegmentsIndependent)->_put_AllSegmentsIndependent(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} AllSegmentsIndependent;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IAdaptiveMediaSourceAdvancedSettings_adaptor::BitrateDowngradeTriggerRatio)->_get_BitrateDowngradeTriggerRatio(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<double>> value) { hrcheck(enc(&IAdaptiveMediaSourceAdvancedSettings_adaptor::BitrateDowngradeTriggerRatio)->_put_BitrateDowngradeTriggerRatio(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<double>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<double>> value) { put(to_abi(value)); }
		} BitrateDowngradeTriggerRatio;
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IAdaptiveMediaSourceAdvancedSettings_adaptor::DesiredBitrateHeadroomRatio)->_get_DesiredBitrateHeadroomRatio(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<double>> value) { hrcheck(enc(&IAdaptiveMediaSourceAdvancedSettings_adaptor::DesiredBitrateHeadroomRatio)->_put_DesiredBitrateHeadroomRatio(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<double>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<double>> value) { put(to_abi(value)); }
		} DesiredBitrateHeadroomRatio;
	};
	IAdaptiveMediaSourceAdvancedSettings_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceAdvancedSettings, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceAdvancedSettings_adaptor<X> { typedef adapt IAdaptiveMediaSourceAdvancedSettings; };
struct IAdaptiveMediaSourceAdvancedSettings : IAdaptiveMediaSourceAdvancedSettings_raw, generate<IAdaptiveMediaSourceAdvancedSettings> {};

// AdaptiveMediaSourceAdvancedSettings
template<typename X> struct statics<AdaptiveMediaSourceAdvancedSettings, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceAdvancedSettings;
};
struct AdaptiveMediaSourceAdvancedSettings : generate<AdaptiveMediaSourceAdvancedSettings> {};

// IAdaptiveMediaSourceDiagnostics
struct IAdaptiveMediaSourceDiagnostics_raw : IInspectable {
	virtual STDMETHODIMP _add_DiagnosticAvailable(Foundation::TypedEventHandler<AdaptiveMediaSourceDiagnostics*, AdaptiveMediaSourceDiagnosticAvailableEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DiagnosticAvailable(Foundation::EventRegistrationToken token);
};
template<typename X> struct IAdaptiveMediaSourceDiagnostics_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AdaptiveMediaSourceDiagnostics>, ptr<AdaptiveMediaSourceDiagnosticAvailableEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAdaptiveMediaSourceDiagnostics_adaptor::DiagnosticAvailable)->_add_DiagnosticAvailable(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAdaptiveMediaSourceDiagnostics_adaptor::DiagnosticAvailable)->_remove_DiagnosticAvailable(token)); }
		} DiagnosticAvailable;
	};
	IAdaptiveMediaSourceDiagnostics_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDiagnostics, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnostics_adaptor<X> { typedef adapt IAdaptiveMediaSourceDiagnostics; };
struct IAdaptiveMediaSourceDiagnostics : IAdaptiveMediaSourceDiagnostics_raw, generate<IAdaptiveMediaSourceDiagnostics> {};

// AdaptiveMediaSourceDiagnostics
template<typename X> struct statics<AdaptiveMediaSourceDiagnostics, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDiagnostics;
};
struct AdaptiveMediaSourceDiagnostics : generate<AdaptiveMediaSourceDiagnostics> {};

// IAdaptiveMediaSourceCorrelatedTimes
struct IAdaptiveMediaSourceCorrelatedTimes_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_PresentationTimeStamp(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_ProgramDateTime(Foundation::IReference<Foundation::DateTime>* *value);
};
template<typename X> struct IAdaptiveMediaSourceCorrelatedTimes_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceCorrelatedTimes_adaptor::Position)->_get_Position(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} Position;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceCorrelatedTimes_adaptor::PresentationTimeStamp)->_get_PresentationTimeStamp(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} PresentationTimeStamp;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAdaptiveMediaSourceCorrelatedTimes_adaptor::ProgramDateTime)->_get_ProgramDateTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} ProgramDateTime;
	};
	IAdaptiveMediaSourceCorrelatedTimes_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceCorrelatedTimes, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceCorrelatedTimes_adaptor<X> { typedef adapt IAdaptiveMediaSourceCorrelatedTimes; };
struct IAdaptiveMediaSourceCorrelatedTimes : IAdaptiveMediaSourceCorrelatedTimes_raw, generate<IAdaptiveMediaSourceCorrelatedTimes> {};

// AdaptiveMediaSourceCorrelatedTimes
template<typename X> struct statics<AdaptiveMediaSourceCorrelatedTimes, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceCorrelatedTimes;
};
struct AdaptiveMediaSourceCorrelatedTimes : generate<AdaptiveMediaSourceCorrelatedTimes> {};

// IAdaptiveMediaSourceDownloadResult2
struct IAdaptiveMediaSourceDownloadResult2_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceByteRangeOffset(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _put_ResourceByteRangeOffset(Foundation::IReference<unsigned __int64>* value);
	virtual STDMETHODIMP _get_ResourceByteRangeLength(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _put_ResourceByteRangeLength(Foundation::IReference<unsigned __int64>* value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadResult2_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadResult2_adaptor::ResourceByteRangeLength)->_get_ResourceByteRangeLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned __int64>> value) { hrcheck(enc(&IAdaptiveMediaSourceDownloadResult2_adaptor::ResourceByteRangeLength)->_put_ResourceByteRangeLength(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned __int64>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned __int64>> value) { put(to_abi(value)); }
		} ResourceByteRangeLength;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadResult2_adaptor::ResourceByteRangeOffset)->_get_ResourceByteRangeOffset(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<unsigned __int64>> value) { hrcheck(enc(&IAdaptiveMediaSourceDownloadResult2_adaptor::ResourceByteRangeOffset)->_put_ResourceByteRangeOffset(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<unsigned __int64>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<unsigned __int64>> value) { put(to_abi(value)); }
		} ResourceByteRangeOffset;
	};
	IAdaptiveMediaSourceDownloadResult2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadResult2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult2_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadResult2; };
struct IAdaptiveMediaSourceDownloadResult2 : IAdaptiveMediaSourceDownloadResult2_raw, generate<IAdaptiveMediaSourceDownloadResult2> {};

// IAdaptiveMediaSourceDownloadResult
struct IAdaptiveMediaSourceDownloadResult_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _put_ResourceUri(Foundation::Uri* value);
	virtual STDMETHODIMP _get_InputStream(Storage::Streams::IInputStream* *value);
	virtual STDMETHODIMP _put_InputStream(Storage::Streams::IInputStream* value);
	virtual STDMETHODIMP _get_Buffer(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_Buffer(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _get_ContentType(HSTRING *value);
	virtual STDMETHODIMP _put_ContentType(HSTRING value);
	virtual STDMETHODIMP _get_ExtendedStatus(unsigned *value);
	virtual STDMETHODIMP _put_ExtendedStatus(unsigned value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadResult_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::Buffer)->_get_Buffer(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::Buffer)->_put_Buffer(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} Buffer;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::ContentType)->_get_ContentType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::ContentType)->_put_ContentType(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} ContentType;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::ExtendedStatus)->_get_ExtendedStatus(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::ExtendedStatus)->_put_ExtendedStatus(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} ExtendedStatus;
		struct : property {
			ptr<Storage::Streams::IInputStream> get() { Storage::Streams::IInputStream* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::InputStream)->_get_InputStream(&value)); return from_abi(value); }
			ptr<Storage::Streams::IInputStream> operator()() { return get(); }
			operator ptr<Storage::Streams::IInputStream> () { return get(); }
			ptr<Storage::Streams::IInputStream> operator->() { return get(); }
			void put(pptr<Storage::Streams::IInputStream> value) { hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::InputStream)->_put_InputStream(value)); }
			void operator=(pptr<Storage::Streams::IInputStream> value) { put(value); }
			void operator()(pptr<Storage::Streams::IInputStream> value) { put(value); }
		} InputStream;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::ResourceUri)->_get_ResourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
			void put(pptr<Foundation::Uri> value) { hrcheck(enc(&IAdaptiveMediaSourceDownloadResult_adaptor::ResourceUri)->_put_ResourceUri(value)); }
			void operator=(pptr<Foundation::Uri> value) { put(value); }
			void operator()(pptr<Foundation::Uri> value) { put(value); }
		} ResourceUri;
	};
	IAdaptiveMediaSourceDownloadResult_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadResult, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadResult_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadResult; };
struct IAdaptiveMediaSourceDownloadResult : IAdaptiveMediaSourceDownloadResult_raw, generate<IAdaptiveMediaSourceDownloadResult> {};

// AdaptiveMediaSourceDownloadResult
template<typename X> struct statics<AdaptiveMediaSourceDownloadResult, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDownloadResult;
};
struct AdaptiveMediaSourceDownloadResult : generate<AdaptiveMediaSourceDownloadResult> {};

// IAdaptiveMediaSourceDownloadRequestedDeferral
struct IAdaptiveMediaSourceDownloadRequestedDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct IAdaptiveMediaSourceDownloadRequestedDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadRequestedDeferral, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadRequestedDeferral_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadRequestedDeferral; };
struct IAdaptiveMediaSourceDownloadRequestedDeferral : IAdaptiveMediaSourceDownloadRequestedDeferral_raw, generate<IAdaptiveMediaSourceDownloadRequestedDeferral> {};

// AdaptiveMediaSourceDownloadRequestedDeferral
template<typename X> struct statics<AdaptiveMediaSourceDownloadRequestedDeferral, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDownloadRequestedDeferral;
};
struct AdaptiveMediaSourceDownloadRequestedDeferral : generate<AdaptiveMediaSourceDownloadRequestedDeferral> {};

// IAdaptiveMediaSourceDownloadStatistics
struct IAdaptiveMediaSourceDownloadStatistics_raw : IInspectable {
	virtual STDMETHODIMP _get_ContentBytesReceivedCount(unsigned __int64 *value);
	virtual STDMETHODIMP _get_TimeToHeadersReceived(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_TimeToFirstByteReceived(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_TimeToLastByteReceived(Foundation::IReference<Foundation::TimeSpan>* *value);
};
template<typename X> struct IAdaptiveMediaSourceDownloadStatistics_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IAdaptiveMediaSourceDownloadStatistics_adaptor::ContentBytesReceivedCount)->_get_ContentBytesReceivedCount(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} ContentBytesReceivedCount;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadStatistics_adaptor::TimeToFirstByteReceived)->_get_TimeToFirstByteReceived(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} TimeToFirstByteReceived;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadStatistics_adaptor::TimeToHeadersReceived)->_get_TimeToHeadersReceived(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} TimeToHeadersReceived;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDownloadStatistics_adaptor::TimeToLastByteReceived)->_get_TimeToLastByteReceived(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} TimeToLastByteReceived;
	};
	IAdaptiveMediaSourceDownloadStatistics_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDownloadStatistics, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDownloadStatistics_adaptor<X> { typedef adapt IAdaptiveMediaSourceDownloadStatistics; };
struct IAdaptiveMediaSourceDownloadStatistics : IAdaptiveMediaSourceDownloadStatistics_raw, generate<IAdaptiveMediaSourceDownloadStatistics> {};

// AdaptiveMediaSourceDownloadStatistics
template<typename X> struct statics<AdaptiveMediaSourceDownloadStatistics, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDownloadStatistics;
};
struct AdaptiveMediaSourceDownloadStatistics : generate<AdaptiveMediaSourceDownloadStatistics> {};

// IAdaptiveMediaSourceDiagnosticAvailableEventArgs
struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DiagnosticType(AdaptiveMediaSourceDiagnosticType *value);
	virtual STDMETHODIMP _get_RequestId(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _get_Position(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_SegmentId(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_ResourceType(Foundation::IReference<AdaptiveMediaSourceResourceType>* *value);
	virtual STDMETHODIMP _get_ResourceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeOffset(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_ResourceByteRangeLength(Foundation::IReference<unsigned __int64>* *value);
	virtual STDMETHODIMP _get_Bitrate(Foundation::IReference<unsigned>* *value);
};
template<typename X> struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<unsigned>> get() { Foundation::IReference<unsigned>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::Bitrate)->_get_Bitrate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned>> () { return get(); }
			ptr<Foundation::IReference<unsigned>> operator->() { return get(); }
		} Bitrate;
		struct : property {
			AdaptiveMediaSourceDiagnosticType get() { AdaptiveMediaSourceDiagnosticType value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::DiagnosticType)->_get_DiagnosticType(&value)); return value; }
			AdaptiveMediaSourceDiagnosticType operator()() { return get(); }
			operator AdaptiveMediaSourceDiagnosticType () { return get(); }
		} DiagnosticType;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::Position)->_get_Position(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} Position;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::RequestId)->_get_RequestId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
		} RequestId;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::ResourceByteRangeLength)->_get_ResourceByteRangeLength(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeLength;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::ResourceByteRangeOffset)->_get_ResourceByteRangeOffset(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} ResourceByteRangeOffset;
		struct : property {
			ptr<Foundation::IReference<AdaptiveMediaSourceResourceType>> get() { Foundation::IReference<AdaptiveMediaSourceResourceType>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::ResourceType)->_get_ResourceType(&value)); return from_abi(value); }
			ptr<Foundation::IReference<AdaptiveMediaSourceResourceType>> operator()() { return get(); }
			operator ptr<Foundation::IReference<AdaptiveMediaSourceResourceType>> () { return get(); }
			ptr<Foundation::IReference<AdaptiveMediaSourceResourceType>> operator->() { return get(); }
		} ResourceType;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::ResourceUri)->_get_ResourceUri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} ResourceUri;
		struct : property {
			ptr<Foundation::IReference<unsigned __int64>> get() { Foundation::IReference<unsigned __int64>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor::SegmentId)->_get_SegmentId(&value)); return from_abi(value); }
			ptr<Foundation::IReference<unsigned __int64>> operator()() { return get(); }
			operator ptr<Foundation::IReference<unsigned __int64>> () { return get(); }
			ptr<Foundation::IReference<unsigned __int64>> operator->() { return get(); }
		} SegmentId;
	};
	IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDiagnosticAvailableEventArgs, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs_adaptor<X> { typedef adapt IAdaptiveMediaSourceDiagnosticAvailableEventArgs; };
struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs : IAdaptiveMediaSourceDiagnosticAvailableEventArgs_raw, generate<IAdaptiveMediaSourceDiagnosticAvailableEventArgs> {};

// IAdaptiveMediaSourceDiagnosticAvailableEventArgs2
struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_ExtendedError(Foundation::HResult *value);
};
template<typename X> struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs2_adaptor : X {
	union {
		struct : property {
			Foundation::HResult get() { Foundation::HResult value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs2_adaptor::ExtendedError)->_get_ExtendedError(&value)); return value; }
			Foundation::HResult operator()() { return get(); }
			operator Foundation::HResult () { return get(); }
		} ExtendedError;
	};
	IAdaptiveMediaSourceDiagnosticAvailableEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDiagnosticAvailableEventArgs2, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs2_adaptor<X> { typedef adapt IAdaptiveMediaSourceDiagnosticAvailableEventArgs2; };
struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs2 : IAdaptiveMediaSourceDiagnosticAvailableEventArgs2_raw, generate<IAdaptiveMediaSourceDiagnosticAvailableEventArgs2> {};

// IAdaptiveMediaSourceDiagnosticAvailableEventArgs3
struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs3_raw : IInspectable {
	virtual STDMETHODIMP _get_ResourceDuration(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_ResourceContentType(HSTRING *value);
};
template<typename X> struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs3_adaptor::ResourceContentType)->_get_ResourceContentType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResourceContentType;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IAdaptiveMediaSourceDiagnosticAvailableEventArgs3_adaptor::ResourceDuration)->_get_ResourceDuration(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} ResourceDuration;
	};
	IAdaptiveMediaSourceDiagnosticAvailableEventArgs3_adaptor() {}
};
template<typename X> struct adapt<IAdaptiveMediaSourceDiagnosticAvailableEventArgs3, X> : Windows::Media::Streaming::Adaptive::IAdaptiveMediaSourceDiagnosticAvailableEventArgs3_adaptor<X> { typedef adapt IAdaptiveMediaSourceDiagnosticAvailableEventArgs3; };
struct IAdaptiveMediaSourceDiagnosticAvailableEventArgs3 : IAdaptiveMediaSourceDiagnosticAvailableEventArgs3_raw, generate<IAdaptiveMediaSourceDiagnosticAvailableEventArgs3> {};

// AdaptiveMediaSourceDiagnosticAvailableEventArgs
template<typename X> struct statics<AdaptiveMediaSourceDiagnosticAvailableEventArgs, X> : X {
	typedef typename X::root_type AdaptiveMediaSourceDiagnosticAvailableEventArgs;
};
struct AdaptiveMediaSourceDiagnosticAvailableEventArgs : generate<AdaptiveMediaSourceDiagnosticAvailableEventArgs> {};
}}}}
} // namespace iso_winrt
