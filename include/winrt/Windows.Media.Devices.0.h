#pragma once
// generated by isopod tools

#include "pre_include.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Media { namespace Devices {
enum class AudioDeviceRole : int {
	Default = 0,
	Communications = 1,
};
struct IDefaultAudioDeviceChangedEventArgs;
struct IMediaDeviceStatics;
struct DefaultAudioCaptureDeviceChangedEventArgs;
struct DefaultAudioRenderDeviceChangedEventArgs;
enum class SendCommandStatus : int {
	Success = 0,
	DeviceNotAvailable = 1,
};
struct IModuleCommandResult;
struct ModuleCommandResult;
struct IAudioDeviceModule;
struct IAudioDeviceModulesManager;
struct IAudioDeviceModulesManagerFactory;
struct AudioDeviceModulesManager;
struct IAudioDeviceModuleNotificationEventArgs;
struct AudioDeviceModuleNotificationEventArgs;
struct AudioDeviceModule;
struct MediaDevice;
enum class IsoSpeedPreset : int {
	Auto = 0,
	Iso50 = 1,
	Iso80 = 2,
	Iso100 = 3,
	Iso200 = 4,
	Iso400 = 5,
	Iso800 = 6,
	Iso1600 = 7,
	Iso3200 = 8,
	Iso6400 = 9,
	Iso12800 = 10,
	Iso25600 = 11,
};
enum class CaptureSceneMode : int {
	Auto = 0,
	Manual = 1,
	Macro = 2,
	Portrait = 3,
	Sport = 4,
	Snow = 5,
	Night = 6,
	Beach = 7,
	Sunset = 8,
	Candlelight = 9,
	Landscape = 10,
	NightPortrait = 11,
	Backlit = 12,
};
enum class MediaCaptureFocusState : int {
	Uninitialized = 0,
	Lost = 1,
	Searching = 2,
	Focused = 3,
	Failed = 4,
};
enum class CameraStreamState : int {
	NotStreaming = 0,
	Streaming = 1,
	BlockedForPrivacy = 2,
	Shutdown = 3,
};
enum class MediaCapturePauseBehavior : int {
	RetainHardwareResources = 0,
	ReleaseHardwareResources = 1,
};
enum class AdvancedPhotoMode : int {
	Auto = 0,
	Standard = 1,
	Hdr = 2,
	LowLight = 3,
};
struct ISceneModeControl;
struct SceneModeControl;
struct ITorchControl;
struct TorchControl;
struct IFlashControl;
struct IFlashControl2;
struct FlashControl;
struct IExposureCompensationControl;
struct ExposureCompensationControl;
struct IIsoSpeedControl;
struct IIsoSpeedControl2;
struct IsoSpeedControl;
enum class ColorTemperaturePreset : int {
	Auto = 0,
	Manual = 1,
	Cloudy = 2,
	Daylight = 3,
	Flash = 4,
	Fluorescent = 5,
	Tungsten = 6,
	Candlelight = 7,
};
struct IWhiteBalanceControl;
struct WhiteBalanceControl;
struct IExposureControl;
struct ExposureControl;
enum class ZoomTransitionMode : int {
	Auto = 0,
	Direct = 1,
	Smooth = 2,
};
struct IZoomSettings;
struct ZoomSettings;
struct IZoomControl;
struct IZoomControl2;
struct ZoomControl;
enum class FocusPreset : int {
	Auto = 0,
	Manual = 1,
	AutoMacro = 2,
	AutoNormal = 3,
	AutoInfinity = 4,
	AutoHyperfocal = 5,
};
enum class FocusMode : int {
	Auto = 0,
	Single = 1,
	Continuous = 2,
	Manual = 3,
};
enum class ManualFocusDistance : int {
	Infinity = 0,
	Hyperfocal = 1,
	Nearest = 2,
};
enum class AutoFocusRange : int {
	FullRange = 0,
	Macro = 1,
	Normal = 2,
};
struct IFocusSettings;
struct FocusSettings;
struct IFocusControl;
struct IFocusControl2;
struct FocusControl;
struct IRegionOfInterest;
enum class RegionOfInterestType : int {
	Unknown = 0,
	Face = 1,
};
struct IRegionOfInterest2;
struct RegionOfInterest;
struct IRegionsOfInterestControl;
struct RegionsOfInterestControl;
struct IExposurePriorityVideoControl;
struct ExposurePriorityVideoControl;
enum class HdrVideoMode : int {
	Off = 0,
	On = 1,
	Auto = 2,
};
struct IHdrVideoControl;
struct HdrVideoControl;
struct IAdvancedPhotoCaptureSettings;
struct AdvancedPhotoCaptureSettings;
struct IAdvancedPhotoControl;
struct AdvancedPhotoControl;
enum class OpticalImageStabilizationMode : int {
	Off = 0,
	On = 1,
	Auto = 2,
};
struct IOpticalImageStabilizationControl;
struct OpticalImageStabilizationControl;
enum class VideoTemporalDenoisingMode : int {
	Off = 0,
	On = 1,
	Auto = 2,
};
struct IVideoTemporalDenoisingControl;
struct VideoTemporalDenoisingControl;
struct IMediaDeviceController;
struct IAudioDeviceController;
struct IVideoDeviceController;
struct IMediaDeviceControl;
struct MediaDeviceControl;
enum class CaptureUse : int {
	None = 0,
	Photo = 1,
	Video = 2,
};
enum class MediaCaptureOptimization : int {
	Default = 0,
	Quality = 1,
	Latency = 2,
	Power = 3,
	LatencyThenQuality = 4,
	LatencyThenPower = 5,
	PowerAndQuality = 6,
};
struct IAdvancedVideoCaptureDeviceController2;
struct ILowLagPhotoSequenceControl;
struct LowLagPhotoSequenceControl;
struct ILowLagPhotoControl;
struct LowLagPhotoControl;
struct IAdvancedVideoCaptureDeviceController3;
struct IPhotoConfirmationControl;
struct PhotoConfirmationControl;
struct IAdvancedVideoCaptureDeviceController4;
enum class VideoDeviceControllerSetDevicePropertyStatus : int {
	Success = 0,
	UnknownFailure = 1,
	NotSupported = 2,
	InvalidValue = 3,
	DeviceNotAvailable = 4,
	NotInControl = 5,
};
enum class VideoDeviceControllerGetDevicePropertyStatus : int {
	Success = 0,
	UnknownFailure = 1,
	BufferTooSmall = 2,
	NotSupported = 3,
	DeviceNotAvailable = 4,
	MaxPropertyValueSizeTooSmall = 5,
	MaxPropertyValueSizeRequired = 6,
};
struct IVideoDeviceControllerGetDevicePropertyResult;
struct VideoDeviceControllerGetDevicePropertyResult;
struct IAdvancedVideoCaptureDeviceController5;
struct IAdvancedVideoCaptureDeviceController6;
struct IMediaDeviceControlCapabilities;
struct MediaDeviceControlCapabilities;
struct IAdvancedVideoCaptureDeviceController;
struct VideoDeviceController;
struct AudioDeviceController;
struct CallControlContract {};
enum class TelephonyKey : int {
	D0 = 0,
	D1 = 1,
	D2 = 2,
	D3 = 3,
	D4 = 4,
	D5 = 5,
	D6 = 6,
	D7 = 7,
	D8 = 8,
	D9 = 9,
	Star = 10,
	Pound = 11,
	A = 12,
	B = 13,
	C = 14,
	D = 15,
};
struct IDialRequestedEventArgs;
struct DialRequestedEventArgs;
struct IRedialRequestedEventArgs;
struct RedialRequestedEventArgs;
struct IKeypadPressedEventArgs;
struct KeypadPressedEventArgs;
struct CallControlEventHandler;
struct ICallControlStatics;
struct ICallControl;
struct CallControl;
struct DialRequestedEventHandler;
struct RedialRequestedEventHandler;
struct KeypadPressedEventHandler;
}}}
} // namespace iso_winrt
