#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Activation

#include "Windows.ApplicationModel.Activation.0.h"
#include "Windows.ApplicationModel.Wallet.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {
struct AddAppointmentOperation;
struct ReplaceAppointmentOperation;
struct RemoveAppointmentOperation;
}}
namespace Background {
struct IBackgroundTaskInstance;
}
namespace Calls {
struct LockScreenCallUI;
}
namespace Contacts { namespace Provider {
struct ContactPickerUI;
}
struct Contact;
struct ContactPanel;
struct ContactAddress;
}
namespace DataTransfer { namespace ShareTarget {
struct ShareOperation;
}}
namespace Search {
struct SearchPaneQueryLinguisticDetails;
}
namespace UserDataAccounts { namespace Provider {
struct IUserDataAccountProviderOperation;
}}}
namespace Devices { namespace Enumeration {
struct DeviceInformation;
}
namespace Printers { namespace Extensions {
struct PrintTaskConfiguration;
struct Print3DWorkflow;
}}}
namespace Foundation { namespace Collections {
struct ValueSet;
template<typename T> struct IVectorView;
}}
namespace Media { namespace SpeechRecognition {
struct SpeechRecognitionResult;
}}
namespace Security { namespace Authentication { namespace Web { namespace Provider {
struct IWebAccountProviderOperation;
}
struct WebAuthenticationResult;
}}}
namespace Storage { namespace Pickers { namespace Provider {
struct FileSavePickerUI;
struct FileOpenPickerUI;
}}
namespace Provider {
struct CachedFileUpdaterUI;
}
namespace Search {
struct StorageFileQueryResult;
}
struct IStorageItem;
struct StorageFolder;
struct StorageFile;
}
namespace System {
struct ProtocolForResultsOperation;
struct User;
}
namespace UI { namespace Notifications {
struct ShownTileNotification;
}
namespace ViewManagement {
struct ActivationViewSwitcher;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Activation::ActivatedEventsContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::ApplicationExecutionState> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Activation::ActivationKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Activation::IActivatedEventArgs> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::PrintTaskSettingsActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::Print3DWorkflowActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IViewSwitcherProvider> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::LockScreenCallActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ActivationCameraSettingsContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::CameraSettingsActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactActivatedEventsContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactPickerActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContactActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactCallActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContactActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactMessageActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContactActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactMapActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContactActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactPostActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContactActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactVideoCallActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::WebUISearchActivatedEventsContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::IWalletActionActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::WalletActionActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IWalletActionActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::AppointmentsProviderAddAppointmentActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::AppointmentsProviderReplaceAppointmentActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::AppointmentsProviderRemoveAppointmentActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::AppointmentsProviderShowAppointmentDetailsActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::AppointmentsProviderShowTimeFrameActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IBackgroundActivatedEventArgs> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::BackgroundActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IBackgroundActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactPanelActivatedEventArgs> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::ContactPanelActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IContactPanelActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IUserDataAccountProviderActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::UserDataAccountProviderActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IUserDataAccountProviderActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ISplashScreen> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::SplashScreen> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ISplashScreen> {};
template<> struct def<Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2> : overridable_type<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ITileActivatedInfo> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::TileActivatedInfo> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ITileActivatedInfo> {};
template<> struct def<Windows::ApplicationModel::Activation::LaunchActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider, Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2> {};
template<> struct def<Windows::ApplicationModel::Activation::ISearchActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::SearchActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ISearchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails, Windows::ApplicationModel::Activation::IViewSwitcherProvider> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles> : overridable_type<Windows::ApplicationModel::Activation::IFileActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::FileActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IFileActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider> {};
template<> struct def<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ProtocolActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider> {};
template<> struct def<Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ProtocolForResultsActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2> {};
template<> struct def<Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::DeviceActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider> {};
template<> struct def<Windows::ApplicationModel::Activation::IPickerReturnedActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::PickerReturnedActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IPickerReturnedActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::RestrictedLaunchActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::LockScreenActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::FileOpenPickerContinuationEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::FileSavePickerContinuationEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::FolderPickerContinuationEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IWebAuthenticationBrokerContinuationEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::WebAuthenticationBrokerContinuationEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IWebAuthenticationBrokerContinuationEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::WebAccountProviderActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ToastNotificationActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::DialReceiverActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser, Windows::ApplicationModel::Activation::IViewSwitcherProvider, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::LockScreenComponentActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::ICommandLineActivationOperation> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Activation::CommandLineActivationOperation> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ICommandLineActivationOperation> {};
template<> struct def<Windows::ApplicationModel::Activation::ICommandLineActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::CommandLineActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::ICommandLineActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IStartupTaskActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::StartupTaskActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IStartupTaskActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IBarcodeScannerPreviewActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::BarcodeScannerPreviewActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IBarcodeScannerPreviewActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::DevicePairingActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};
template<> struct def<Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs> : overridable_type<Windows::ApplicationModel::Activation::IActivatedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Activation::VoiceCommandActivatedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Activation::IActivatedEventArgs> { define_guid(0xCF651713, 0xCD08, 0x4FD8, 0xB6, 0x97, 0xA2, 0x81, 0xB6, 0x54, 0x4E, 0x2E);};
template<> struct uuid<Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs> { define_guid(0xEE30A0C9, 0xCE56, 0x4865, 0xBA, 0x8E, 0x89, 0x54, 0xAC, 0x27, 0x11, 0x7);};
template<> struct uuid<Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs> { define_guid(0x3F57E78B, 0xF2AC, 0x4619, 0x83, 0x2, 0xEF, 0x85, 0x5E, 0x1C, 0x9B, 0x90);};
template<> struct uuid<Windows::ApplicationModel::Activation::IViewSwitcherProvider> { define_guid(0x33F288A6, 0x5C2C, 0x4D27, 0xBA, 0xC7, 0x75, 0x36, 0x8, 0x8F, 0x12, 0x19);};
template<> struct uuid<Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs> { define_guid(0x930CEF4B, 0xB829, 0x40FC, 0x88, 0xF4, 0x85, 0x13, 0xE8, 0xA6, 0x47, 0x38);};
template<> struct uuid<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs> { define_guid(0xFBC93E26, 0xA14A, 0x4B4F, 0x82, 0xB0, 0x33, 0xBE, 0xD9, 0x20, 0xAF, 0x52);};
template<> struct uuid<Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs> { define_guid(0x6F37FBE, 0xB5F2, 0x448B, 0xB1, 0x3E, 0xE3, 0x28, 0xAC, 0x1C, 0x51, 0x6A);};
template<> struct uuid<Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs> { define_guid(0xFB67A508, 0x2DAD, 0x490A, 0x91, 0x70, 0xDC, 0xA0, 0x36, 0xEB, 0x11, 0x4B);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs> { define_guid(0xCE57AAE7, 0x6449, 0x45A7, 0x97, 0x1F, 0xD1, 0x13, 0xBE, 0x7A, 0x89, 0x36);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactActivatedEventArgs> { define_guid(0xD627A1C4, 0xC025, 0x4C41, 0x9D, 0xEF, 0xF1, 0xEA, 0xFA, 0xD0, 0x75, 0xE7);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs> { define_guid(0xC2DF14C7, 0x30EB, 0x41C6, 0xB3, 0xBC, 0x5B, 0x16, 0x94, 0xF9, 0xDA, 0xB3);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs> { define_guid(0xDE598DB2, 0xE03, 0x43B0, 0xBF, 0x56, 0xBC, 0xC4, 0xB, 0x31, 0x62, 0xDF);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs> { define_guid(0xB32BF870, 0xEEE7, 0x4AD2, 0xAA, 0xF1, 0xA8, 0x7E, 0xFF, 0xCF, 0x0, 0xA4);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs> { define_guid(0xB35A3C67, 0xF1E7, 0x4655, 0xAD, 0x6E, 0x48, 0x57, 0x58, 0x8F, 0x55, 0x2F);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs> { define_guid(0x61079DB8, 0xE3E7, 0x4B4F, 0x85, 0x8D, 0x5C, 0x63, 0xA9, 0x6E, 0xF6, 0x84);};
template<> struct uuid<Windows::ApplicationModel::Activation::IWalletActionActivatedEventArgs> { define_guid(0xFCFC027B, 0x1A1A, 0x4D22, 0x92, 0x3F, 0xAE, 0x6F, 0x45, 0xFA, 0x52, 0xD9);};
template<> struct uuid<Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser> { define_guid(0x1CF09B9E, 0x9962, 0x4936, 0x80, 0xFF, 0xAF, 0xC8, 0xE8, 0xAE, 0x5C, 0x8C);};
template<> struct uuid<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs> { define_guid(0x3364C405, 0x933C, 0x4E7D, 0xA0, 0x34, 0x50, 0xF, 0xB8, 0xDC, 0xD9, 0xF3);};
template<> struct uuid<Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs> { define_guid(0xA2861367, 0xCEE5, 0x4E4D, 0x9E, 0xD7, 0x41, 0xC3, 0x4E, 0xC1, 0x8B, 0x2);};
template<> struct uuid<Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs> { define_guid(0x1551B7D4, 0xA981, 0x4067, 0x8A, 0x62, 0x5, 0x24, 0xE4, 0xAD, 0xE1, 0x21);};
template<> struct uuid<Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs> { define_guid(0x751F3AB8, 0xB8E, 0x451C, 0x9F, 0x15, 0x96, 0x6E, 0x69, 0x9B, 0xAC, 0x25);};
template<> struct uuid<Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs> { define_guid(0x3958F065, 0x9841, 0x4CA5, 0x99, 0x9B, 0x88, 0x51, 0x98, 0xB9, 0xEF, 0x2A);};
template<> struct uuid<Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs> { define_guid(0x9BAEABA6, 0xE0B, 0x49AA, 0xBA, 0xBC, 0x12, 0xB1, 0xDC, 0x77, 0x49, 0x86);};
template<> struct uuid<Windows::ApplicationModel::Activation::IBackgroundActivatedEventArgs> { define_guid(0xAB14BEE0, 0xE760, 0x440E, 0xA9, 0x1C, 0x44, 0x79, 0x6D, 0xE3, 0xA9, 0x2D);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactPanelActivatedEventArgs> { define_guid(0x52BB63E4, 0xD3D4, 0x4B63, 0x80, 0x51, 0x4A, 0xF2, 0x8, 0x2C, 0xAB, 0x80);};
template<> struct uuid<Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs> { define_guid(0x4BDAF9C8, 0xCDB2, 0x4ACB, 0xBF, 0xC3, 0x66, 0x48, 0x56, 0x33, 0x78, 0xEC);};
template<> struct uuid<Windows::ApplicationModel::Activation::IUserDataAccountProviderActivatedEventArgs> { define_guid(0x1BC9F723, 0x8EF1, 0x4A51, 0xA6, 0x3A, 0xFE, 0x71, 0x1E, 0xEA, 0xB6, 0x7);};
template<> struct uuid<Windows::ApplicationModel::Activation::ISplashScreen> { define_guid(0xCA4D975C, 0xD4D6, 0x43F0, 0x97, 0xC0, 0x8, 0x33, 0xC6, 0x39, 0x1C, 0x24);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs> { define_guid(0x4580DCA8, 0x5750, 0x4916, 0xAA, 0x52, 0xC0, 0x82, 0x95, 0x21, 0xEB, 0x94);};
template<> struct uuid<Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs> { define_guid(0xC44717B, 0x19F7, 0x48D6, 0xB0, 0x46, 0xCF, 0x22, 0x82, 0x6E, 0xAA, 0x74);};
template<> struct uuid<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2> { define_guid(0xFD37EBC, 0x9DC9, 0x46B5, 0x9A, 0xCE, 0xBD, 0x95, 0xD4, 0x56, 0x53, 0x45);};
template<> struct uuid<Windows::ApplicationModel::Activation::ITileActivatedInfo> { define_guid(0x80E4A3B1, 0x3980, 0x4F17, 0xB7, 0x38, 0x89, 0x19, 0x4E, 0xB, 0x8F, 0x65);};
template<> struct uuid<Windows::ApplicationModel::Activation::ISearchActivatedEventArgs> { define_guid(0x8CB36951, 0x58C8, 0x43E3, 0x94, 0xBC, 0x41, 0xD3, 0x3F, 0x8B, 0x63, 0xE);};
template<> struct uuid<Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails> { define_guid(0xC09F33DA, 0x8AB, 0x4931, 0x9B, 0x7C, 0x45, 0x10, 0x25, 0xF2, 0x1F, 0x81);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileActivatedEventArgs> { define_guid(0xBB2AFC33, 0x93B1, 0x42ED, 0x8B, 0x26, 0x23, 0x6D, 0xD9, 0xC7, 0x84, 0x96);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles> { define_guid(0x433BA1A4, 0xE1E2, 0x48FD, 0xB7, 0xFC, 0xB5, 0xD6, 0xEE, 0xE6, 0x50, 0x33);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName> { define_guid(0x2D60F06B, 0xD25F, 0x4D25, 0x86, 0x53, 0xE1, 0xC5, 0xE1, 0x10, 0x83, 0x9);};
template<> struct uuid<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs> { define_guid(0x6095F4DD, 0xB7C0, 0x46AB, 0x81, 0xFE, 0xD9, 0xF, 0x36, 0xD0, 0xD, 0x24);};
template<> struct uuid<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData> { define_guid(0xD84A0C12, 0x5C8F, 0x438C, 0x83, 0xCB, 0xC2, 0x8F, 0xCC, 0xB, 0x2F, 0xDB);};
template<> struct uuid<Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs> { define_guid(0xE75132C2, 0x7AE7, 0x4517, 0x80, 0xAC, 0xDB, 0xE8, 0xD7, 0xCC, 0x5B, 0x9C);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs> { define_guid(0x72827082, 0x5525, 0x4BF2, 0xBC, 0x9, 0x1F, 0x50, 0x95, 0xD4, 0x96, 0x4D);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2> { define_guid(0x5E731F66, 0x8D1F, 0x45FB, 0xAF, 0x1D, 0x73, 0x20, 0x5C, 0x8F, 0xC7, 0xA1);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs> { define_guid(0x81C19CF1, 0x74E6, 0x4387, 0x82, 0xEB, 0xBB, 0x8F, 0xD6, 0x4B, 0x43, 0x46);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2> { define_guid(0x6B73FE13, 0x2CF2, 0x4D48, 0x8C, 0xBC, 0xAF, 0x67, 0xD2, 0x3F, 0x1C, 0xE7);};
template<> struct uuid<Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs> { define_guid(0xD06EB1C7, 0x3805, 0x4ECB, 0xB7, 0x57, 0x6C, 0xF1, 0x5E, 0x26, 0xFE, 0xF3);};
template<> struct uuid<Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs> { define_guid(0xCD50B9A9, 0xCE10, 0x44D2, 0x82, 0x34, 0xC3, 0x55, 0xA0, 0x73, 0xEF, 0x33);};
template<> struct uuid<Windows::ApplicationModel::Activation::IPickerReturnedActivatedEventArgs> { define_guid(0x360DEFB9, 0xA9D3, 0x4984, 0xA4, 0xED, 0x9E, 0xC7, 0x34, 0x60, 0x49, 0x21);};
template<> struct uuid<Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs> { define_guid(0xE0B7AC81, 0xBFC3, 0x4344, 0xA5, 0xDA, 0x19, 0xFD, 0x5A, 0x27, 0xBA, 0xAE);};
template<> struct uuid<Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs> { define_guid(0x3CA77966, 0x6108, 0x4A41, 0x82, 0x20, 0xEE, 0x7D, 0x13, 0x3C, 0x85, 0x32);};
template<> struct uuid<Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs> { define_guid(0xE58106B5, 0x155F, 0x4A94, 0xA7, 0x42, 0xC7, 0xE0, 0x8F, 0x4E, 0x18, 0x8C);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs> { define_guid(0xF0FA3F3A, 0xD4E8, 0x4AD3, 0x9C, 0x34, 0x23, 0x8, 0xF3, 0x2F, 0xCE, 0xC9);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs> { define_guid(0x2C846FE1, 0x3BAD, 0x4F33, 0x8C, 0x8B, 0xE4, 0x6F, 0xAE, 0x82, 0x4B, 0x4B);};
template<> struct uuid<Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs> { define_guid(0x51882366, 0x9F4B, 0x498F, 0xBE, 0xB0, 0x42, 0x68, 0x4F, 0x6E, 0x1C, 0x29);};
template<> struct uuid<Windows::ApplicationModel::Activation::IWebAuthenticationBrokerContinuationEventArgs> { define_guid(0x75DDA3D4, 0x7714, 0x453D, 0xB7, 0xFF, 0xB9, 0x5E, 0x3A, 0x17, 0x9, 0xDA);};
template<> struct uuid<Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs> { define_guid(0x72B71774, 0x98EA, 0x4CCF, 0x97, 0x52, 0x46, 0xD9, 0x5, 0x10, 0x4, 0xF1);};
template<> struct uuid<Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs> { define_guid(0x92A86F82, 0x5290, 0x431D, 0xBE, 0x85, 0xC4, 0xAA, 0xEE, 0xB8, 0x68, 0x5F);};
template<> struct uuid<Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs> { define_guid(0xFB777ED7, 0x85EE, 0x456E, 0xA4, 0x4D, 0x85, 0xD7, 0x30, 0xE7, 0xA, 0xED);};
template<> struct uuid<Windows::ApplicationModel::Activation::ICommandLineActivationOperation> { define_guid(0x994B2841, 0xC59E, 0x4F69, 0xBC, 0xFD, 0xB6, 0x1E, 0xD4, 0xE6, 0x22, 0xEB);};
template<> struct uuid<Windows::ApplicationModel::Activation::ICommandLineActivatedEventArgs> { define_guid(0x4506472C, 0x6A, 0x48EB, 0x8A, 0xFB, 0xD0, 0x7A, 0xB2, 0x5E, 0x33, 0x66);};
template<> struct uuid<Windows::ApplicationModel::Activation::IStartupTaskActivatedEventArgs> { define_guid(0x3B11A58, 0x5276, 0x4D91, 0x86, 0x21, 0x54, 0x61, 0x18, 0x64, 0xD5, 0xFA);};
template<> struct uuid<Windows::ApplicationModel::Activation::IBarcodeScannerPreviewActivatedEventArgs> { define_guid(0x6772797C, 0x99BF, 0x4349, 0xAF, 0x22, 0xE4, 0x12, 0x35, 0x60, 0x37, 0x1C);};
template<> struct uuid<Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs> { define_guid(0xEBA0D1E4, 0xECC6, 0x4148, 0x94, 0xED, 0xF4, 0xB3, 0x7E, 0xC0, 0x5B, 0x3E);};
template<> struct uuid<Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs> { define_guid(0xAB92DCFD, 0x8D43, 0x4DE6, 0x97, 0x75, 0x20, 0x70, 0x4B, 0x58, 0x1B, 0x0);};

// types

namespace Windows { namespace ApplicationModel { namespace Activation {

// IActivatedEventArgs
struct IActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Kind(ActivationKind *value) = 0;
	virtual STDMETHODIMP _get_PreviousExecutionState(ApplicationExecutionState *value) = 0;
	virtual STDMETHODIMP _get_SplashScreen(Activation::SplashScreen* *value) = 0;
};
template<typename X> struct IActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ActivationKind get() { ActivationKind value; hrcheck(enc(&IActivatedEventArgs_adaptor::Kind)->_get_Kind(&value)); return value; }
			ActivationKind operator()() { return get(); }
			operator ActivationKind () { return get(); }
		} Kind;
		struct : property {
			ApplicationExecutionState get() { ApplicationExecutionState value; hrcheck(enc(&IActivatedEventArgs_adaptor::PreviousExecutionState)->_get_PreviousExecutionState(&value)); return value; }
			ApplicationExecutionState operator()() { return get(); }
			operator ApplicationExecutionState () { return get(); }
		} PreviousExecutionState;
		struct : property {
			ptr<Activation::SplashScreen> get() { Activation::SplashScreen* value; hrcheck(enc(&IActivatedEventArgs_adaptor::SplashScreen)->_get_SplashScreen(&value)); return from_abi(value); }
			ptr<Activation::SplashScreen> operator()() { return get(); }
			operator ptr<Activation::SplashScreen> () { return get(); }
			ptr<Activation::SplashScreen> operator->() { return get(); }
		} SplashScreen;
	};
	IActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IActivatedEventArgs_adaptor<X> { typedef adapt IActivatedEventArgs; };
template<typename X> struct IActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Kind(ActivationKind *value) { return hrtry([&, this] { get_prop(value, Kind); }); }
	STDMETHODIMP _get_PreviousExecutionState(ApplicationExecutionState *value) { return hrtry([&, this] { get_prop(value, PreviousExecutionState); }); }
	STDMETHODIMP _get_SplashScreen(Activation::SplashScreen* *value) { return hrtry([&, this] { get_prop(value, SplashScreen); }); }
};
template<typename X> struct unadapt<IActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IActivatedEventArgs_unadaptor<X> {};
struct IActivatedEventArgs : IActivatedEventArgs_raw, generate<IActivatedEventArgs> {};

// IPrintTaskSettingsActivatedEventArgs
struct IPrintTaskSettingsActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Configuration(Devices::Printers::Extensions::PrintTaskConfiguration* *value) = 0;
};
template<typename X> struct IPrintTaskSettingsActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Printers::Extensions::PrintTaskConfiguration> get() { Devices::Printers::Extensions::PrintTaskConfiguration* value; hrcheck(enc(&IPrintTaskSettingsActivatedEventArgs_adaptor::Configuration)->_get_Configuration(&value)); return from_abi(value); }
			ptr<Devices::Printers::Extensions::PrintTaskConfiguration> operator()() { return get(); }
			operator ptr<Devices::Printers::Extensions::PrintTaskConfiguration> () { return get(); }
			ptr<Devices::Printers::Extensions::PrintTaskConfiguration> operator->() { return get(); }
		} Configuration;
	};
	IPrintTaskSettingsActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrintTaskSettingsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs_adaptor<X> { typedef adapt IPrintTaskSettingsActivatedEventArgs; };
template<typename X> struct IPrintTaskSettingsActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Configuration(Devices::Printers::Extensions::PrintTaskConfiguration* *value) { return hrtry([&, this] { get_prop(value, Configuration); }); }
};
template<typename X> struct unadapt<IPrintTaskSettingsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs_unadaptor<X> {};
struct IPrintTaskSettingsActivatedEventArgs : IPrintTaskSettingsActivatedEventArgs_raw, generate<IPrintTaskSettingsActivatedEventArgs> {};

// PrintTaskSettingsActivatedEventArgs
template<typename X> struct statics<PrintTaskSettingsActivatedEventArgs, X> : X {
	typedef typename X::root_type PrintTaskSettingsActivatedEventArgs;
};
struct PrintTaskSettingsActivatedEventArgs : generate<PrintTaskSettingsActivatedEventArgs> {};

// IPrint3DWorkflowActivatedEventArgs
struct IPrint3DWorkflowActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Workflow(Devices::Printers::Extensions::Print3DWorkflow* *value) = 0;
};
template<typename X> struct IPrint3DWorkflowActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Printers::Extensions::Print3DWorkflow> get() { Devices::Printers::Extensions::Print3DWorkflow* value; hrcheck(enc(&IPrint3DWorkflowActivatedEventArgs_adaptor::Workflow)->_get_Workflow(&value)); return from_abi(value); }
			ptr<Devices::Printers::Extensions::Print3DWorkflow> operator()() { return get(); }
			operator ptr<Devices::Printers::Extensions::Print3DWorkflow> () { return get(); }
			ptr<Devices::Printers::Extensions::Print3DWorkflow> operator->() { return get(); }
		} Workflow;
	};
	IPrint3DWorkflowActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrint3DWorkflowActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs_adaptor<X> { typedef adapt IPrint3DWorkflowActivatedEventArgs; };
template<typename X> struct IPrint3DWorkflowActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Workflow(Devices::Printers::Extensions::Print3DWorkflow* *value) { return hrtry([&, this] { get_prop(value, Workflow); }); }
};
template<typename X> struct unadapt<IPrint3DWorkflowActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs_unadaptor<X> {};
struct IPrint3DWorkflowActivatedEventArgs : IPrint3DWorkflowActivatedEventArgs_raw, generate<IPrint3DWorkflowActivatedEventArgs> {};

// Print3DWorkflowActivatedEventArgs
template<typename X> struct statics<Print3DWorkflowActivatedEventArgs, X> : X {
	typedef typename X::root_type Print3DWorkflowActivatedEventArgs;
};
struct Print3DWorkflowActivatedEventArgs : generate<Print3DWorkflowActivatedEventArgs> {};

// IViewSwitcherProvider
struct IViewSwitcherProvider_raw : IInspectable {
	virtual STDMETHODIMP _get_ViewSwitcher(UI::ViewManagement::ActivationViewSwitcher* *value) = 0;
};
template<typename X> struct IViewSwitcherProvider_adaptor : X {
	union {
		struct : property {
			ptr<UI::ViewManagement::ActivationViewSwitcher> get() { UI::ViewManagement::ActivationViewSwitcher* value; hrcheck(enc(&IViewSwitcherProvider_adaptor::ViewSwitcher)->_get_ViewSwitcher(&value)); return from_abi(value); }
			ptr<UI::ViewManagement::ActivationViewSwitcher> operator()() { return get(); }
			operator ptr<UI::ViewManagement::ActivationViewSwitcher> () { return get(); }
			ptr<UI::ViewManagement::ActivationViewSwitcher> operator->() { return get(); }
		} ViewSwitcher;
	};
	IViewSwitcherProvider_adaptor() {}
};
template<typename X> struct adapt<IViewSwitcherProvider, X> : Windows::ApplicationModel::Activation::IViewSwitcherProvider_adaptor<X> { typedef adapt IViewSwitcherProvider; };
template<typename X> struct IViewSwitcherProvider_unadaptor : X {
	STDMETHODIMP _get_ViewSwitcher(UI::ViewManagement::ActivationViewSwitcher* *value) { return hrtry([&, this] { get_prop(value, ViewSwitcher); }); }
};
template<typename X> struct unadapt<IViewSwitcherProvider, X> : Windows::ApplicationModel::Activation::IViewSwitcherProvider_unadaptor<X> {};
struct IViewSwitcherProvider : IViewSwitcherProvider_raw, generate<IViewSwitcherProvider> {};

// IApplicationViewActivatedEventArgs
struct IApplicationViewActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentlyShownApplicationViewId(int *value) = 0;
};
template<typename X> struct IApplicationViewActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IApplicationViewActivatedEventArgs_adaptor::CurrentlyShownApplicationViewId)->_get_CurrentlyShownApplicationViewId(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} CurrentlyShownApplicationViewId;
	};
	IApplicationViewActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IApplicationViewActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs_adaptor<X> { typedef adapt IApplicationViewActivatedEventArgs; };
template<typename X> struct IApplicationViewActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_CurrentlyShownApplicationViewId(int *value) { return hrtry([&, this] { get_prop(value, CurrentlyShownApplicationViewId); }); }
};
template<typename X> struct unadapt<IApplicationViewActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs_unadaptor<X> {};
struct IApplicationViewActivatedEventArgs : IApplicationViewActivatedEventArgs_raw, generate<IApplicationViewActivatedEventArgs> {};

// ILaunchActivatedEventArgs
struct ILaunchActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Arguments(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_TileId(HSTRING *value) = 0;
};
template<typename X> struct ILaunchActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILaunchActivatedEventArgs_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Arguments;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILaunchActivatedEventArgs_adaptor::TileId)->_get_TileId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TileId;
	};
	ILaunchActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILaunchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs_adaptor<X> { typedef adapt ILaunchActivatedEventArgs; };
template<typename X> struct ILaunchActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Arguments(HSTRING *value) { return hrtry([&, this] { get_prop(value, Arguments); }); }
	STDMETHODIMP _get_TileId(HSTRING *value) { return hrtry([&, this] { get_prop(value, TileId); }); }
};
template<typename X> struct unadapt<ILaunchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs_unadaptor<X> {};
struct ILaunchActivatedEventArgs : ILaunchActivatedEventArgs_raw, generate<ILaunchActivatedEventArgs> {};

// ILockScreenCallActivatedEventArgs
struct ILockScreenCallActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_CallUI(Calls::LockScreenCallUI* *value) = 0;
};
template<typename X> struct ILockScreenCallActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Calls::LockScreenCallUI> get() { Calls::LockScreenCallUI* value; hrcheck(enc(&ILockScreenCallActivatedEventArgs_adaptor::CallUI)->_get_CallUI(&value)); return from_abi(value); }
			ptr<Calls::LockScreenCallUI> operator()() { return get(); }
			operator ptr<Calls::LockScreenCallUI> () { return get(); }
			ptr<Calls::LockScreenCallUI> operator->() { return get(); }
		} CallUI;
	};
	ILockScreenCallActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILockScreenCallActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs_adaptor<X> { typedef adapt ILockScreenCallActivatedEventArgs; };
template<typename X> struct ILockScreenCallActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_CallUI(Calls::LockScreenCallUI* *value) { return hrtry([&, this] { get_prop(value, CallUI); }); }
};
template<typename X> struct unadapt<ILockScreenCallActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs_unadaptor<X> {};
struct ILockScreenCallActivatedEventArgs : ILockScreenCallActivatedEventArgs_raw, generate<ILockScreenCallActivatedEventArgs> {};

// LockScreenCallActivatedEventArgs
template<typename X> struct statics<LockScreenCallActivatedEventArgs, X> : X {
	typedef typename X::root_type LockScreenCallActivatedEventArgs;
};
struct LockScreenCallActivatedEventArgs : generate<LockScreenCallActivatedEventArgs> {};

// ICameraSettingsActivatedEventArgs
struct ICameraSettingsActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoDeviceController(IInspectable* *value) = 0;
	virtual STDMETHODIMP _get_VideoDeviceExtension(IInspectable* *value) = 0;
};
template<typename X> struct ICameraSettingsActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&ICameraSettingsActivatedEventArgs_adaptor::VideoDeviceController)->_get_VideoDeviceController(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} VideoDeviceController;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&ICameraSettingsActivatedEventArgs_adaptor::VideoDeviceExtension)->_get_VideoDeviceExtension(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} VideoDeviceExtension;
	};
	ICameraSettingsActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICameraSettingsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs_adaptor<X> { typedef adapt ICameraSettingsActivatedEventArgs; };
template<typename X> struct ICameraSettingsActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_VideoDeviceController(IInspectable* *value) { return hrtry([&, this] { get_prop(value, VideoDeviceController); }); }
	STDMETHODIMP _get_VideoDeviceExtension(IInspectable* *value) { return hrtry([&, this] { get_prop(value, VideoDeviceExtension); }); }
};
template<typename X> struct unadapt<ICameraSettingsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs_unadaptor<X> {};
struct ICameraSettingsActivatedEventArgs : ICameraSettingsActivatedEventArgs_raw, generate<ICameraSettingsActivatedEventArgs> {};

// CameraSettingsActivatedEventArgs
template<typename X> struct statics<CameraSettingsActivatedEventArgs, X> : X {
	typedef typename X::root_type CameraSettingsActivatedEventArgs;
};
struct CameraSettingsActivatedEventArgs : generate<CameraSettingsActivatedEventArgs> {};

// IContactPickerActivatedEventArgs
struct IContactPickerActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ContactPickerUI(Contacts::Provider::ContactPickerUI* *value) = 0;
};
template<typename X> struct IContactPickerActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::Provider::ContactPickerUI> get() { Contacts::Provider::ContactPickerUI* value; hrcheck(enc(&IContactPickerActivatedEventArgs_adaptor::ContactPickerUI)->_get_ContactPickerUI(&value)); return from_abi(value); }
			ptr<Contacts::Provider::ContactPickerUI> operator()() { return get(); }
			operator ptr<Contacts::Provider::ContactPickerUI> () { return get(); }
			ptr<Contacts::Provider::ContactPickerUI> operator->() { return get(); }
		} ContactPickerUI;
	};
	IContactPickerActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactPickerActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs_adaptor<X> { typedef adapt IContactPickerActivatedEventArgs; };
template<typename X> struct IContactPickerActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ContactPickerUI(Contacts::Provider::ContactPickerUI* *value) { return hrtry([&, this] { get_prop(value, ContactPickerUI); }); }
};
template<typename X> struct unadapt<IContactPickerActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs_unadaptor<X> {};
struct IContactPickerActivatedEventArgs : IContactPickerActivatedEventArgs_raw, generate<IContactPickerActivatedEventArgs> {};

// ContactPickerActivatedEventArgs
template<typename X> struct statics<ContactPickerActivatedEventArgs, X> : X {
	typedef typename X::root_type ContactPickerActivatedEventArgs;
};
struct ContactPickerActivatedEventArgs : generate<ContactPickerActivatedEventArgs> {};

// IContactActivatedEventArgs
struct IContactActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Verb(HSTRING *value) = 0;
};
template<typename X> struct IContactActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactActivatedEventArgs_adaptor::Verb)->_get_Verb(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Verb;
	};
	IContactActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactActivatedEventArgs_adaptor<X> { typedef adapt IContactActivatedEventArgs; };
template<typename X> struct IContactActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Verb(HSTRING *value) { return hrtry([&, this] { get_prop(value, Verb); }); }
};
template<typename X> struct unadapt<IContactActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactActivatedEventArgs_unadaptor<X> {};
struct IContactActivatedEventArgs : IContactActivatedEventArgs_raw, generate<IContactActivatedEventArgs> {};

// IContactCallActivatedEventArgs
struct IContactCallActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_ServiceUserId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value) = 0;
};
template<typename X> struct IContactCallActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IContactCallActivatedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
		} Contact;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactCallActivatedEventArgs_adaptor::ServiceId)->_get_ServiceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactCallActivatedEventArgs_adaptor::ServiceUserId)->_get_ServiceUserId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceUserId;
	};
	IContactCallActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactCallActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs_adaptor<X> { typedef adapt IContactCallActivatedEventArgs; };
template<typename X> struct IContactCallActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ServiceId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceId); }); }
	STDMETHODIMP _get_ServiceUserId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceUserId); }); }
	STDMETHODIMP _get_Contact(Contacts::Contact* *value) { return hrtry([&, this] { get_prop(value, Contact); }); }
};
template<typename X> struct unadapt<IContactCallActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs_unadaptor<X> {};
struct IContactCallActivatedEventArgs : IContactCallActivatedEventArgs_raw, generate<IContactCallActivatedEventArgs> {};

// ContactCallActivatedEventArgs
template<typename X> struct statics<ContactCallActivatedEventArgs, X> : X {
	typedef typename X::root_type ContactCallActivatedEventArgs;
};
struct ContactCallActivatedEventArgs : generate<ContactCallActivatedEventArgs> {};

// IContactMessageActivatedEventArgs
struct IContactMessageActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_ServiceUserId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value) = 0;
};
template<typename X> struct IContactMessageActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IContactMessageActivatedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
		} Contact;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactMessageActivatedEventArgs_adaptor::ServiceId)->_get_ServiceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactMessageActivatedEventArgs_adaptor::ServiceUserId)->_get_ServiceUserId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceUserId;
	};
	IContactMessageActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactMessageActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs_adaptor<X> { typedef adapt IContactMessageActivatedEventArgs; };
template<typename X> struct IContactMessageActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ServiceId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceId); }); }
	STDMETHODIMP _get_ServiceUserId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceUserId); }); }
	STDMETHODIMP _get_Contact(Contacts::Contact* *value) { return hrtry([&, this] { get_prop(value, Contact); }); }
};
template<typename X> struct unadapt<IContactMessageActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs_unadaptor<X> {};
struct IContactMessageActivatedEventArgs : IContactMessageActivatedEventArgs_raw, generate<IContactMessageActivatedEventArgs> {};

// ContactMessageActivatedEventArgs
template<typename X> struct statics<ContactMessageActivatedEventArgs, X> : X {
	typedef typename X::root_type ContactMessageActivatedEventArgs;
};
struct ContactMessageActivatedEventArgs : generate<ContactMessageActivatedEventArgs> {};

// IContactMapActivatedEventArgs
struct IContactMapActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Address(Contacts::ContactAddress* *value) = 0;
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value) = 0;
};
template<typename X> struct IContactMapActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::ContactAddress> get() { Contacts::ContactAddress* value; hrcheck(enc(&IContactMapActivatedEventArgs_adaptor::Address)->_get_Address(&value)); return from_abi(value); }
			ptr<Contacts::ContactAddress> operator()() { return get(); }
			operator ptr<Contacts::ContactAddress> () { return get(); }
			ptr<Contacts::ContactAddress> operator->() { return get(); }
		} Address;
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IContactMapActivatedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
		} Contact;
	};
	IContactMapActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactMapActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs_adaptor<X> { typedef adapt IContactMapActivatedEventArgs; };
template<typename X> struct IContactMapActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Address(Contacts::ContactAddress* *value) { return hrtry([&, this] { get_prop(value, Address); }); }
	STDMETHODIMP _get_Contact(Contacts::Contact* *value) { return hrtry([&, this] { get_prop(value, Contact); }); }
};
template<typename X> struct unadapt<IContactMapActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs_unadaptor<X> {};
struct IContactMapActivatedEventArgs : IContactMapActivatedEventArgs_raw, generate<IContactMapActivatedEventArgs> {};

// ContactMapActivatedEventArgs
template<typename X> struct statics<ContactMapActivatedEventArgs, X> : X {
	typedef typename X::root_type ContactMapActivatedEventArgs;
};
struct ContactMapActivatedEventArgs : generate<ContactMapActivatedEventArgs> {};

// IContactPostActivatedEventArgs
struct IContactPostActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_ServiceUserId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value) = 0;
};
template<typename X> struct IContactPostActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IContactPostActivatedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
		} Contact;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactPostActivatedEventArgs_adaptor::ServiceId)->_get_ServiceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactPostActivatedEventArgs_adaptor::ServiceUserId)->_get_ServiceUserId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceUserId;
	};
	IContactPostActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactPostActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs_adaptor<X> { typedef adapt IContactPostActivatedEventArgs; };
template<typename X> struct IContactPostActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ServiceId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceId); }); }
	STDMETHODIMP _get_ServiceUserId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceUserId); }); }
	STDMETHODIMP _get_Contact(Contacts::Contact* *value) { return hrtry([&, this] { get_prop(value, Contact); }); }
};
template<typename X> struct unadapt<IContactPostActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs_unadaptor<X> {};
struct IContactPostActivatedEventArgs : IContactPostActivatedEventArgs_raw, generate<IContactPostActivatedEventArgs> {};

// ContactPostActivatedEventArgs
template<typename X> struct statics<ContactPostActivatedEventArgs, X> : X {
	typedef typename X::root_type ContactPostActivatedEventArgs;
};
struct ContactPostActivatedEventArgs : generate<ContactPostActivatedEventArgs> {};

// IContactVideoCallActivatedEventArgs
struct IContactVideoCallActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ServiceId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_ServiceUserId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value) = 0;
};
template<typename X> struct IContactVideoCallActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IContactVideoCallActivatedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
		} Contact;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactVideoCallActivatedEventArgs_adaptor::ServiceId)->_get_ServiceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactVideoCallActivatedEventArgs_adaptor::ServiceUserId)->_get_ServiceUserId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceUserId;
	};
	IContactVideoCallActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactVideoCallActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs_adaptor<X> { typedef adapt IContactVideoCallActivatedEventArgs; };
template<typename X> struct IContactVideoCallActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ServiceId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceId); }); }
	STDMETHODIMP _get_ServiceUserId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ServiceUserId); }); }
	STDMETHODIMP _get_Contact(Contacts::Contact* *value) { return hrtry([&, this] { get_prop(value, Contact); }); }
};
template<typename X> struct unadapt<IContactVideoCallActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs_unadaptor<X> {};
struct IContactVideoCallActivatedEventArgs : IContactVideoCallActivatedEventArgs_raw, generate<IContactVideoCallActivatedEventArgs> {};

// ContactVideoCallActivatedEventArgs
template<typename X> struct statics<ContactVideoCallActivatedEventArgs, X> : X {
	typedef typename X::root_type ContactVideoCallActivatedEventArgs;
};
struct ContactVideoCallActivatedEventArgs : generate<ContactVideoCallActivatedEventArgs> {};

// IWalletActionActivatedEventArgs
struct IWalletActionActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ItemId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_ActionKind(Wallet::WalletActionKind *value) = 0;
	virtual STDMETHODIMP _get_ActionId(HSTRING *value) = 0;
};
template<typename X> struct IWalletActionActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletActionActivatedEventArgs_adaptor::ActionId)->_get_ActionId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ActionId;
		struct : property {
			Wallet::WalletActionKind get() { Wallet::WalletActionKind value; hrcheck(enc(&IWalletActionActivatedEventArgs_adaptor::ActionKind)->_get_ActionKind(&value)); return value; }
			Wallet::WalletActionKind operator()() { return get(); }
			operator Wallet::WalletActionKind () { return get(); }
		} ActionKind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IWalletActionActivatedEventArgs_adaptor::ItemId)->_get_ItemId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ItemId;
	};
	IWalletActionActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWalletActionActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IWalletActionActivatedEventArgs_adaptor<X> { typedef adapt IWalletActionActivatedEventArgs; };
template<typename X> struct IWalletActionActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ItemId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ItemId); }); }
	STDMETHODIMP _get_ActionKind(Wallet::WalletActionKind *value) { return hrtry([&, this] { get_prop(value, ActionKind); }); }
	STDMETHODIMP _get_ActionId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ActionId); }); }
};
template<typename X> struct unadapt<IWalletActionActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IWalletActionActivatedEventArgs_unadaptor<X> {};
struct IWalletActionActivatedEventArgs : IWalletActionActivatedEventArgs_raw, generate<IWalletActionActivatedEventArgs> {};

// WalletActionActivatedEventArgs
template<typename X> struct statics<WalletActionActivatedEventArgs, X> : X {
	typedef typename X::root_type WalletActionActivatedEventArgs;
};
struct WalletActionActivatedEventArgs : generate<WalletActionActivatedEventArgs> {};

// IActivatedEventArgsWithUser
struct IActivatedEventArgsWithUser_raw : IInspectable {
	virtual STDMETHODIMP _get_User(System::User* *value) = 0;
};
template<typename X> struct IActivatedEventArgsWithUser_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IActivatedEventArgsWithUser_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	IActivatedEventArgsWithUser_adaptor() {}
};
template<typename X> struct adapt<IActivatedEventArgsWithUser, X> : Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser_adaptor<X> { typedef adapt IActivatedEventArgsWithUser; };
template<typename X> struct IActivatedEventArgsWithUser_unadaptor : X {
	STDMETHODIMP _get_User(System::User* *value) { return hrtry([&, this] { get_prop(value, User); }); }
};
template<typename X> struct unadapt<IActivatedEventArgsWithUser, X> : Windows::ApplicationModel::Activation::IActivatedEventArgsWithUser_unadaptor<X> {};
struct IActivatedEventArgsWithUser : IActivatedEventArgsWithUser_raw, generate<IActivatedEventArgsWithUser> {};

// IAppointmentsProviderActivatedEventArgs
struct IAppointmentsProviderActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Verb(HSTRING *value) = 0;
};
template<typename X> struct IAppointmentsProviderActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentsProviderActivatedEventArgs_adaptor::Verb)->_get_Verb(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Verb;
	};
	IAppointmentsProviderActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentsProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs_adaptor<X> { typedef adapt IAppointmentsProviderActivatedEventArgs; };
template<typename X> struct IAppointmentsProviderActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Verb(HSTRING *value) { return hrtry([&, this] { get_prop(value, Verb); }); }
};
template<typename X> struct unadapt<IAppointmentsProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs_unadaptor<X> {};
struct IAppointmentsProviderActivatedEventArgs : IAppointmentsProviderActivatedEventArgs_raw, generate<IAppointmentsProviderActivatedEventArgs> {};

// IAppointmentsProviderAddAppointmentActivatedEventArgs
struct IAppointmentsProviderAddAppointmentActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AddAppointmentOperation(Appointments::AppointmentsProvider::AddAppointmentOperation* *value) = 0;
};
template<typename X> struct IAppointmentsProviderAddAppointmentActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Appointments::AppointmentsProvider::AddAppointmentOperation> get() { Appointments::AppointmentsProvider::AddAppointmentOperation* value; hrcheck(enc(&IAppointmentsProviderAddAppointmentActivatedEventArgs_adaptor::AddAppointmentOperation)->_get_AddAppointmentOperation(&value)); return from_abi(value); }
			ptr<Appointments::AppointmentsProvider::AddAppointmentOperation> operator()() { return get(); }
			operator ptr<Appointments::AppointmentsProvider::AddAppointmentOperation> () { return get(); }
			ptr<Appointments::AppointmentsProvider::AddAppointmentOperation> operator->() { return get(); }
		} AddAppointmentOperation;
	};
	IAppointmentsProviderAddAppointmentActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentsProviderAddAppointmentActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs_adaptor<X> { typedef adapt IAppointmentsProviderAddAppointmentActivatedEventArgs; };
template<typename X> struct IAppointmentsProviderAddAppointmentActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_AddAppointmentOperation(Appointments::AppointmentsProvider::AddAppointmentOperation* *value) { return hrtry([&, this] { get_prop(value, AddAppointmentOperation); }); }
};
template<typename X> struct unadapt<IAppointmentsProviderAddAppointmentActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs_unadaptor<X> {};
struct IAppointmentsProviderAddAppointmentActivatedEventArgs : IAppointmentsProviderAddAppointmentActivatedEventArgs_raw, generate<IAppointmentsProviderAddAppointmentActivatedEventArgs> {};

// AppointmentsProviderAddAppointmentActivatedEventArgs
template<typename X> struct statics<AppointmentsProviderAddAppointmentActivatedEventArgs, X> : X {
	typedef typename X::root_type AppointmentsProviderAddAppointmentActivatedEventArgs;
};
struct AppointmentsProviderAddAppointmentActivatedEventArgs : generate<AppointmentsProviderAddAppointmentActivatedEventArgs> {};

// IAppointmentsProviderReplaceAppointmentActivatedEventArgs
struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ReplaceAppointmentOperation(Appointments::AppointmentsProvider::ReplaceAppointmentOperation* *value) = 0;
};
template<typename X> struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Appointments::AppointmentsProvider::ReplaceAppointmentOperation> get() { Appointments::AppointmentsProvider::ReplaceAppointmentOperation* value; hrcheck(enc(&IAppointmentsProviderReplaceAppointmentActivatedEventArgs_adaptor::ReplaceAppointmentOperation)->_get_ReplaceAppointmentOperation(&value)); return from_abi(value); }
			ptr<Appointments::AppointmentsProvider::ReplaceAppointmentOperation> operator()() { return get(); }
			operator ptr<Appointments::AppointmentsProvider::ReplaceAppointmentOperation> () { return get(); }
			ptr<Appointments::AppointmentsProvider::ReplaceAppointmentOperation> operator->() { return get(); }
		} ReplaceAppointmentOperation;
	};
	IAppointmentsProviderReplaceAppointmentActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentsProviderReplaceAppointmentActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs_adaptor<X> { typedef adapt IAppointmentsProviderReplaceAppointmentActivatedEventArgs; };
template<typename X> struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ReplaceAppointmentOperation(Appointments::AppointmentsProvider::ReplaceAppointmentOperation* *value) { return hrtry([&, this] { get_prop(value, ReplaceAppointmentOperation); }); }
};
template<typename X> struct unadapt<IAppointmentsProviderReplaceAppointmentActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs_unadaptor<X> {};
struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs : IAppointmentsProviderReplaceAppointmentActivatedEventArgs_raw, generate<IAppointmentsProviderReplaceAppointmentActivatedEventArgs> {};

// AppointmentsProviderReplaceAppointmentActivatedEventArgs
template<typename X> struct statics<AppointmentsProviderReplaceAppointmentActivatedEventArgs, X> : X {
	typedef typename X::root_type AppointmentsProviderReplaceAppointmentActivatedEventArgs;
};
struct AppointmentsProviderReplaceAppointmentActivatedEventArgs : generate<AppointmentsProviderReplaceAppointmentActivatedEventArgs> {};

// IAppointmentsProviderRemoveAppointmentActivatedEventArgs
struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoveAppointmentOperation(Appointments::AppointmentsProvider::RemoveAppointmentOperation* *value) = 0;
};
template<typename X> struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Appointments::AppointmentsProvider::RemoveAppointmentOperation> get() { Appointments::AppointmentsProvider::RemoveAppointmentOperation* value; hrcheck(enc(&IAppointmentsProviderRemoveAppointmentActivatedEventArgs_adaptor::RemoveAppointmentOperation)->_get_RemoveAppointmentOperation(&value)); return from_abi(value); }
			ptr<Appointments::AppointmentsProvider::RemoveAppointmentOperation> operator()() { return get(); }
			operator ptr<Appointments::AppointmentsProvider::RemoveAppointmentOperation> () { return get(); }
			ptr<Appointments::AppointmentsProvider::RemoveAppointmentOperation> operator->() { return get(); }
		} RemoveAppointmentOperation;
	};
	IAppointmentsProviderRemoveAppointmentActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentsProviderRemoveAppointmentActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs_adaptor<X> { typedef adapt IAppointmentsProviderRemoveAppointmentActivatedEventArgs; };
template<typename X> struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_RemoveAppointmentOperation(Appointments::AppointmentsProvider::RemoveAppointmentOperation* *value) { return hrtry([&, this] { get_prop(value, RemoveAppointmentOperation); }); }
};
template<typename X> struct unadapt<IAppointmentsProviderRemoveAppointmentActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs_unadaptor<X> {};
struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs : IAppointmentsProviderRemoveAppointmentActivatedEventArgs_raw, generate<IAppointmentsProviderRemoveAppointmentActivatedEventArgs> {};

// AppointmentsProviderRemoveAppointmentActivatedEventArgs
template<typename X> struct statics<AppointmentsProviderRemoveAppointmentActivatedEventArgs, X> : X {
	typedef typename X::root_type AppointmentsProviderRemoveAppointmentActivatedEventArgs;
};
struct AppointmentsProviderRemoveAppointmentActivatedEventArgs : generate<AppointmentsProviderRemoveAppointmentActivatedEventArgs> {};

// IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_InstanceStartDate(Foundation::IReference<Foundation::DateTime>* *value) = 0;
	virtual STDMETHODIMP _get_LocalId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_RoamingId(HSTRING *value) = 0;
};
template<typename X> struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_adaptor::InstanceStartDate)->_get_InstanceStartDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} InstanceStartDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_adaptor::LocalId)->_get_LocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LocalId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_adaptor::RoamingId)->_get_RoamingId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RoamingId;
	};
	IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_adaptor<X> { typedef adapt IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs; };
template<typename X> struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_InstanceStartDate(Foundation::IReference<Foundation::DateTime>* *value) { return hrtry([&, this] { get_prop(value, InstanceStartDate); }); }
	STDMETHODIMP _get_LocalId(HSTRING *value) { return hrtry([&, this] { get_prop(value, LocalId); }); }
	STDMETHODIMP _get_RoamingId(HSTRING *value) { return hrtry([&, this] { get_prop(value, RoamingId); }); }
};
template<typename X> struct unadapt<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_unadaptor<X> {};
struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs : IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_raw, generate<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs> {};

// AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
template<typename X> struct statics<AppointmentsProviderShowAppointmentDetailsActivatedEventArgs, X> : X {
	typedef typename X::root_type AppointmentsProviderShowAppointmentDetailsActivatedEventArgs;
};
struct AppointmentsProviderShowAppointmentDetailsActivatedEventArgs : generate<AppointmentsProviderShowAppointmentDetailsActivatedEventArgs> {};

// IAppointmentsProviderShowTimeFrameActivatedEventArgs
struct IAppointmentsProviderShowTimeFrameActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_TimeToShow(Foundation::DateTime *value) = 0;
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value) = 0;
};
template<typename X> struct IAppointmentsProviderShowTimeFrameActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppointmentsProviderShowTimeFrameActivatedEventArgs_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppointmentsProviderShowTimeFrameActivatedEventArgs_adaptor::TimeToShow)->_get_TimeToShow(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} TimeToShow;
	};
	IAppointmentsProviderShowTimeFrameActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentsProviderShowTimeFrameActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs_adaptor<X> { typedef adapt IAppointmentsProviderShowTimeFrameActivatedEventArgs; };
template<typename X> struct IAppointmentsProviderShowTimeFrameActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_TimeToShow(Foundation::DateTime *value) { return hrtry([&, this] { get_prop(value, TimeToShow); }); }
	STDMETHODIMP _get_Duration(Foundation::TimeSpan *value) { return hrtry([&, this] { get_prop(value, Duration); }); }
};
template<typename X> struct unadapt<IAppointmentsProviderShowTimeFrameActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs_unadaptor<X> {};
struct IAppointmentsProviderShowTimeFrameActivatedEventArgs : IAppointmentsProviderShowTimeFrameActivatedEventArgs_raw, generate<IAppointmentsProviderShowTimeFrameActivatedEventArgs> {};

// AppointmentsProviderShowTimeFrameActivatedEventArgs
template<typename X> struct statics<AppointmentsProviderShowTimeFrameActivatedEventArgs, X> : X {
	typedef typename X::root_type AppointmentsProviderShowTimeFrameActivatedEventArgs;
};
struct AppointmentsProviderShowTimeFrameActivatedEventArgs : generate<AppointmentsProviderShowTimeFrameActivatedEventArgs> {};

// IBackgroundActivatedEventArgs
struct IBackgroundActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskInstance(Background::IBackgroundTaskInstance* *value) = 0;
};
template<typename X> struct IBackgroundActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Background::IBackgroundTaskInstance> get() { Background::IBackgroundTaskInstance* value; hrcheck(enc(&IBackgroundActivatedEventArgs_adaptor::TaskInstance)->_get_TaskInstance(&value)); return from_abi(value); }
			ptr<Background::IBackgroundTaskInstance> operator()() { return get(); }
			operator ptr<Background::IBackgroundTaskInstance> () { return get(); }
			ptr<Background::IBackgroundTaskInstance> operator->() { return get(); }
		} TaskInstance;
	};
	IBackgroundActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBackgroundActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IBackgroundActivatedEventArgs_adaptor<X> { typedef adapt IBackgroundActivatedEventArgs; };
template<typename X> struct IBackgroundActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_TaskInstance(Background::IBackgroundTaskInstance* *value) { return hrtry([&, this] { get_prop(value, TaskInstance); }); }
};
template<typename X> struct unadapt<IBackgroundActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IBackgroundActivatedEventArgs_unadaptor<X> {};
struct IBackgroundActivatedEventArgs : IBackgroundActivatedEventArgs_raw, generate<IBackgroundActivatedEventArgs> {};

// BackgroundActivatedEventArgs
template<typename X> struct statics<BackgroundActivatedEventArgs, X> : X {
	typedef typename X::root_type BackgroundActivatedEventArgs;
};
struct BackgroundActivatedEventArgs : generate<BackgroundActivatedEventArgs> {};

// IContactPanelActivatedEventArgs
struct IContactPanelActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ContactPanel(Contacts::ContactPanel* *value) = 0;
	virtual STDMETHODIMP _get_Contact(Contacts::Contact* *value) = 0;
};
template<typename X> struct IContactPanelActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Contacts::Contact> get() { Contacts::Contact* value; hrcheck(enc(&IContactPanelActivatedEventArgs_adaptor::Contact)->_get_Contact(&value)); return from_abi(value); }
			ptr<Contacts::Contact> operator()() { return get(); }
			operator ptr<Contacts::Contact> () { return get(); }
			ptr<Contacts::Contact> operator->() { return get(); }
		} Contact;
		struct : property {
			ptr<Contacts::ContactPanel> get() { Contacts::ContactPanel* value; hrcheck(enc(&IContactPanelActivatedEventArgs_adaptor::ContactPanel)->_get_ContactPanel(&value)); return from_abi(value); }
			ptr<Contacts::ContactPanel> operator()() { return get(); }
			operator ptr<Contacts::ContactPanel> () { return get(); }
			ptr<Contacts::ContactPanel> operator->() { return get(); }
		} ContactPanel;
	};
	IContactPanelActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactPanelActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactPanelActivatedEventArgs_adaptor<X> { typedef adapt IContactPanelActivatedEventArgs; };
template<typename X> struct IContactPanelActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ContactPanel(Contacts::ContactPanel* *value) { return hrtry([&, this] { get_prop(value, ContactPanel); }); }
	STDMETHODIMP _get_Contact(Contacts::Contact* *value) { return hrtry([&, this] { get_prop(value, Contact); }); }
};
template<typename X> struct unadapt<IContactPanelActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactPanelActivatedEventArgs_unadaptor<X> {};
struct IContactPanelActivatedEventArgs : IContactPanelActivatedEventArgs_raw, generate<IContactPanelActivatedEventArgs> {};

// ContactPanelActivatedEventArgs
template<typename X> struct statics<ContactPanelActivatedEventArgs, X> : X {
	typedef typename X::root_type ContactPanelActivatedEventArgs;
};
struct ContactPanelActivatedEventArgs : generate<ContactPanelActivatedEventArgs> {};

// IShareTargetActivatedEventArgs
struct IShareTargetActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ShareOperation(DataTransfer::ShareTarget::ShareOperation* *value) = 0;
};
template<typename X> struct IShareTargetActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<DataTransfer::ShareTarget::ShareOperation> get() { DataTransfer::ShareTarget::ShareOperation* value; hrcheck(enc(&IShareTargetActivatedEventArgs_adaptor::ShareOperation)->_get_ShareOperation(&value)); return from_abi(value); }
			ptr<DataTransfer::ShareTarget::ShareOperation> operator()() { return get(); }
			operator ptr<DataTransfer::ShareTarget::ShareOperation> () { return get(); }
			ptr<DataTransfer::ShareTarget::ShareOperation> operator->() { return get(); }
		} ShareOperation;
	};
	IShareTargetActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IShareTargetActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs_adaptor<X> { typedef adapt IShareTargetActivatedEventArgs; };
template<typename X> struct IShareTargetActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ShareOperation(DataTransfer::ShareTarget::ShareOperation* *value) { return hrtry([&, this] { get_prop(value, ShareOperation); }); }
};
template<typename X> struct unadapt<IShareTargetActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs_unadaptor<X> {};
struct IShareTargetActivatedEventArgs : IShareTargetActivatedEventArgs_raw, generate<IShareTargetActivatedEventArgs> {};

// ShareTargetActivatedEventArgs
template<typename X> struct statics<ShareTargetActivatedEventArgs, X> : X {
	typedef typename X::root_type ShareTargetActivatedEventArgs;
};
struct ShareTargetActivatedEventArgs : generate<ShareTargetActivatedEventArgs> {};

// IUserDataAccountProviderActivatedEventArgs
struct IUserDataAccountProviderActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Operation(UserDataAccounts::Provider::IUserDataAccountProviderOperation* *value) = 0;
};
template<typename X> struct IUserDataAccountProviderActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UserDataAccounts::Provider::IUserDataAccountProviderOperation> get() { UserDataAccounts::Provider::IUserDataAccountProviderOperation* value; hrcheck(enc(&IUserDataAccountProviderActivatedEventArgs_adaptor::Operation)->_get_Operation(&value)); return from_abi(value); }
			ptr<UserDataAccounts::Provider::IUserDataAccountProviderOperation> operator()() { return get(); }
			operator ptr<UserDataAccounts::Provider::IUserDataAccountProviderOperation> () { return get(); }
			ptr<UserDataAccounts::Provider::IUserDataAccountProviderOperation> operator->() { return get(); }
		} Operation;
	};
	IUserDataAccountProviderActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IUserDataAccountProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IUserDataAccountProviderActivatedEventArgs_adaptor<X> { typedef adapt IUserDataAccountProviderActivatedEventArgs; };
template<typename X> struct IUserDataAccountProviderActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Operation(UserDataAccounts::Provider::IUserDataAccountProviderOperation* *value) { return hrtry([&, this] { get_prop(value, Operation); }); }
};
template<typename X> struct unadapt<IUserDataAccountProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IUserDataAccountProviderActivatedEventArgs_unadaptor<X> {};
struct IUserDataAccountProviderActivatedEventArgs : IUserDataAccountProviderActivatedEventArgs_raw, generate<IUserDataAccountProviderActivatedEventArgs> {};

// UserDataAccountProviderActivatedEventArgs
template<typename X> struct statics<UserDataAccountProviderActivatedEventArgs, X> : X {
	typedef typename X::root_type UserDataAccountProviderActivatedEventArgs;
};
struct UserDataAccountProviderActivatedEventArgs : generate<UserDataAccountProviderActivatedEventArgs> {};

// ISplashScreen
struct ISplashScreen_raw : IInspectable {
	virtual STDMETHODIMP _get_ImageLocation(Foundation::Rect *value);
	virtual STDMETHODIMP _add_Dismissed(Foundation::TypedEventHandler<SplashScreen*, IInspectable*>* handler, Foundation::EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_Dismissed(Foundation::EventRegistrationToken cookie);
};
template<typename X> struct ISplashScreen_adaptor : X {
	union {
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&ISplashScreen_adaptor::ImageLocation)->_get_ImageLocation(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} ImageLocation;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SplashScreen>, object>> handler) { Foundation::EventRegistrationToken cookie; hrcheck(enc(&ISplashScreen_adaptor::Dismissed)->_add_Dismissed(to_abi(handler), &cookie)); return cookie; }
			void operator-=(const Foundation::EventRegistrationToken& cookie) { hrcheck(enc(&ISplashScreen_adaptor::Dismissed)->_remove_Dismissed(cookie)); }
		} Dismissed;
	};
	ISplashScreen_adaptor() {}
};
template<typename X> struct adapt<ISplashScreen, X> : Windows::ApplicationModel::Activation::ISplashScreen_adaptor<X> { typedef adapt ISplashScreen; };
struct ISplashScreen : ISplashScreen_raw, generate<ISplashScreen> {};

// SplashScreen
template<typename X> struct statics<SplashScreen, X> : X {
	typedef typename X::root_type SplashScreen;
};
struct SplashScreen : generate<SplashScreen> {};

// IContactsProviderActivatedEventArgs
struct IContactsProviderActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Verb(HSTRING *value) = 0;
};
template<typename X> struct IContactsProviderActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IContactsProviderActivatedEventArgs_adaptor::Verb)->_get_Verb(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Verb;
	};
	IContactsProviderActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContactsProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs_adaptor<X> { typedef adapt IContactsProviderActivatedEventArgs; };
template<typename X> struct IContactsProviderActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Verb(HSTRING *value) { return hrtry([&, this] { get_prop(value, Verb); }); }
};
template<typename X> struct unadapt<IContactsProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs_unadaptor<X> {};
struct IContactsProviderActivatedEventArgs : IContactsProviderActivatedEventArgs_raw, generate<IContactsProviderActivatedEventArgs> {};

// IPrelaunchActivatedEventArgs
struct IPrelaunchActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PrelaunchActivated(bool *value) = 0;
};
template<typename X> struct IPrelaunchActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPrelaunchActivatedEventArgs_adaptor::PrelaunchActivated)->_get_PrelaunchActivated(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} PrelaunchActivated;
	};
	IPrelaunchActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPrelaunchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs_adaptor<X> { typedef adapt IPrelaunchActivatedEventArgs; };
template<typename X> struct IPrelaunchActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_PrelaunchActivated(bool *value) { return hrtry([&, this] { get_prop(value, PrelaunchActivated); }); }
};
template<typename X> struct unadapt<IPrelaunchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs_unadaptor<X> {};
struct IPrelaunchActivatedEventArgs : IPrelaunchActivatedEventArgs_raw, generate<IPrelaunchActivatedEventArgs> {};

// ILaunchActivatedEventArgs2
struct ILaunchActivatedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_TileActivatedInfo(Activation::TileActivatedInfo* *value) = 0;
};
template<typename X> struct ILaunchActivatedEventArgs2_adaptor : X {
	union {
		struct : property {
			ptr<Activation::TileActivatedInfo> get() { Activation::TileActivatedInfo* value; hrcheck(enc(&ILaunchActivatedEventArgs2_adaptor::TileActivatedInfo)->_get_TileActivatedInfo(&value)); return from_abi(value); }
			ptr<Activation::TileActivatedInfo> operator()() { return get(); }
			operator ptr<Activation::TileActivatedInfo> () { return get(); }
			ptr<Activation::TileActivatedInfo> operator->() { return get(); }
		} TileActivatedInfo;
	};
	ILaunchActivatedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<ILaunchActivatedEventArgs2, X> : Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2_adaptor<X> { typedef adapt ILaunchActivatedEventArgs2; };
template<typename X> struct ILaunchActivatedEventArgs2_unadaptor : X {
	STDMETHODIMP _get_TileActivatedInfo(Activation::TileActivatedInfo* *value) { return hrtry([&, this] { get_prop(value, TileActivatedInfo); }); }
};
template<typename X> struct unadapt<ILaunchActivatedEventArgs2, X> : Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs2_unadaptor<X> {};
struct ILaunchActivatedEventArgs2 : ILaunchActivatedEventArgs2_raw, generate<ILaunchActivatedEventArgs2> {};

// ITileActivatedInfo
struct ITileActivatedInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_RecentlyShownNotifications(Foundation::Collections::IVectorView<UI::Notifications::ShownTileNotification*>* *value);
};
template<typename X> struct ITileActivatedInfo_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<UI::Notifications::ShownTileNotification>>> get() { Foundation::Collections::IVectorView<UI::Notifications::ShownTileNotification*>* value; hrcheck(enc(&ITileActivatedInfo_adaptor::RecentlyShownNotifications)->_get_RecentlyShownNotifications(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<UI::Notifications::ShownTileNotification>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<UI::Notifications::ShownTileNotification>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<UI::Notifications::ShownTileNotification>>> operator->() { return get(); }
		} RecentlyShownNotifications;
	};
	ITileActivatedInfo_adaptor() {}
};
template<typename X> struct adapt<ITileActivatedInfo, X> : Windows::ApplicationModel::Activation::ITileActivatedInfo_adaptor<X> { typedef adapt ITileActivatedInfo; };
struct ITileActivatedInfo : ITileActivatedInfo_raw, generate<ITileActivatedInfo> {};

// TileActivatedInfo
template<typename X> struct statics<TileActivatedInfo, X> : X {
	typedef typename X::root_type TileActivatedInfo;
};
struct TileActivatedInfo : generate<TileActivatedInfo> {};

// LaunchActivatedEventArgs
template<typename X> struct statics<LaunchActivatedEventArgs, X> : X {
	typedef typename X::root_type LaunchActivatedEventArgs;
};
struct LaunchActivatedEventArgs : generate<LaunchActivatedEventArgs> {};

// ISearchActivatedEventArgs
struct ISearchActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_QueryText(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Language(HSTRING *value) = 0;
};
template<typename X> struct ISearchActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchActivatedEventArgs_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchActivatedEventArgs_adaptor::QueryText)->_get_QueryText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QueryText;
	};
	ISearchActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISearchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ISearchActivatedEventArgs_adaptor<X> { typedef adapt ISearchActivatedEventArgs; };
template<typename X> struct ISearchActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_QueryText(HSTRING *value) { return hrtry([&, this] { get_prop(value, QueryText); }); }
	STDMETHODIMP _get_Language(HSTRING *value) { return hrtry([&, this] { get_prop(value, Language); }); }
};
template<typename X> struct unadapt<ISearchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ISearchActivatedEventArgs_unadaptor<X> {};
struct ISearchActivatedEventArgs : ISearchActivatedEventArgs_raw, generate<ISearchActivatedEventArgs> {};

// ISearchActivatedEventArgsWithLinguisticDetails
struct ISearchActivatedEventArgsWithLinguisticDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_LinguisticDetails(Search::SearchPaneQueryLinguisticDetails* *value) = 0;
};
template<typename X> struct ISearchActivatedEventArgsWithLinguisticDetails_adaptor : X {
	union {
		struct : property {
			ptr<Search::SearchPaneQueryLinguisticDetails> get() { Search::SearchPaneQueryLinguisticDetails* value; hrcheck(enc(&ISearchActivatedEventArgsWithLinguisticDetails_adaptor::LinguisticDetails)->_get_LinguisticDetails(&value)); return from_abi(value); }
			ptr<Search::SearchPaneQueryLinguisticDetails> operator()() { return get(); }
			operator ptr<Search::SearchPaneQueryLinguisticDetails> () { return get(); }
			ptr<Search::SearchPaneQueryLinguisticDetails> operator->() { return get(); }
		} LinguisticDetails;
	};
	ISearchActivatedEventArgsWithLinguisticDetails_adaptor() {}
};
template<typename X> struct adapt<ISearchActivatedEventArgsWithLinguisticDetails, X> : Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails_adaptor<X> { typedef adapt ISearchActivatedEventArgsWithLinguisticDetails; };
template<typename X> struct ISearchActivatedEventArgsWithLinguisticDetails_unadaptor : X {
	STDMETHODIMP _get_LinguisticDetails(Search::SearchPaneQueryLinguisticDetails* *value) { return hrtry([&, this] { get_prop(value, LinguisticDetails); }); }
};
template<typename X> struct unadapt<ISearchActivatedEventArgsWithLinguisticDetails, X> : Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails_unadaptor<X> {};
struct ISearchActivatedEventArgsWithLinguisticDetails : ISearchActivatedEventArgsWithLinguisticDetails_raw, generate<ISearchActivatedEventArgsWithLinguisticDetails> {};

// SearchActivatedEventArgs
template<typename X> struct statics<SearchActivatedEventArgs, X> : X {
	typedef typename X::root_type SearchActivatedEventArgs;
};
struct SearchActivatedEventArgs : generate<SearchActivatedEventArgs> {};

// IFileActivatedEventArgs
struct IFileActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Files(Foundation::Collections::IVectorView<Storage::IStorageItem*>* *value) = 0;
	virtual STDMETHODIMP _get_Verb(HSTRING *value) = 0;
};
template<typename X> struct IFileActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Storage::IStorageItem>>> get() { Foundation::Collections::IVectorView<Storage::IStorageItem*>* value; hrcheck(enc(&IFileActivatedEventArgs_adaptor::Files)->_get_Files(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Storage::IStorageItem>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Storage::IStorageItem>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Storage::IStorageItem>>> operator->() { return get(); }
		} Files;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileActivatedEventArgs_adaptor::Verb)->_get_Verb(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Verb;
	};
	IFileActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFileActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IFileActivatedEventArgs_adaptor<X> { typedef adapt IFileActivatedEventArgs; };
template<typename X> struct IFileActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Files(Foundation::Collections::IVectorView<Storage::IStorageItem*>* *value) { return hrtry([&, this] { get_prop(value, Files); }); }
	STDMETHODIMP _get_Verb(HSTRING *value) { return hrtry([&, this] { get_prop(value, Verb); }); }
};
template<typename X> struct unadapt<IFileActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IFileActivatedEventArgs_unadaptor<X> {};
struct IFileActivatedEventArgs : IFileActivatedEventArgs_raw, generate<IFileActivatedEventArgs> {};

// IFileActivatedEventArgsWithNeighboringFiles
struct IFileActivatedEventArgsWithNeighboringFiles_raw : IInspectable {
	virtual STDMETHODIMP _get_NeighboringFilesQuery(Storage::Search::StorageFileQueryResult* *value) = 0;
};
template<typename X> struct IFileActivatedEventArgsWithNeighboringFiles_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Search::StorageFileQueryResult> get() { Storage::Search::StorageFileQueryResult* value; hrcheck(enc(&IFileActivatedEventArgsWithNeighboringFiles_adaptor::NeighboringFilesQuery)->_get_NeighboringFilesQuery(&value)); return from_abi(value); }
			ptr<Storage::Search::StorageFileQueryResult> operator()() { return get(); }
			operator ptr<Storage::Search::StorageFileQueryResult> () { return get(); }
			ptr<Storage::Search::StorageFileQueryResult> operator->() { return get(); }
		} NeighboringFilesQuery;
	};
	IFileActivatedEventArgsWithNeighboringFiles_adaptor() {}
};
template<typename X> struct adapt<IFileActivatedEventArgsWithNeighboringFiles, X> : Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles_adaptor<X> { typedef adapt IFileActivatedEventArgsWithNeighboringFiles; };
template<typename X> struct IFileActivatedEventArgsWithNeighboringFiles_unadaptor : X {
	STDMETHODIMP _get_NeighboringFilesQuery(Storage::Search::StorageFileQueryResult* *value) { return hrtry([&, this] { get_prop(value, NeighboringFilesQuery); }); }
};
template<typename X> struct unadapt<IFileActivatedEventArgsWithNeighboringFiles, X> : Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles_unadaptor<X> {};
struct IFileActivatedEventArgsWithNeighboringFiles : IFileActivatedEventArgsWithNeighboringFiles_raw, generate<IFileActivatedEventArgsWithNeighboringFiles> {};

// IFileActivatedEventArgsWithCallerPackageFamilyName
struct IFileActivatedEventArgsWithCallerPackageFamilyName_raw : IInspectable {
	virtual STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) = 0;
};
template<typename X> struct IFileActivatedEventArgsWithCallerPackageFamilyName_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileActivatedEventArgsWithCallerPackageFamilyName_adaptor::CallerPackageFamilyName)->_get_CallerPackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CallerPackageFamilyName;
	};
	IFileActivatedEventArgsWithCallerPackageFamilyName_adaptor() {}
};
template<typename X> struct adapt<IFileActivatedEventArgsWithCallerPackageFamilyName, X> : Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName_adaptor<X> { typedef adapt IFileActivatedEventArgsWithCallerPackageFamilyName; };
template<typename X> struct IFileActivatedEventArgsWithCallerPackageFamilyName_unadaptor : X {
	STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) { return hrtry([&, this] { get_prop(value, CallerPackageFamilyName); }); }
};
template<typename X> struct unadapt<IFileActivatedEventArgsWithCallerPackageFamilyName, X> : Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName_unadaptor<X> {};
struct IFileActivatedEventArgsWithCallerPackageFamilyName : IFileActivatedEventArgsWithCallerPackageFamilyName_raw, generate<IFileActivatedEventArgsWithCallerPackageFamilyName> {};

// FileActivatedEventArgs
template<typename X> struct statics<FileActivatedEventArgs, X> : X {
	typedef typename X::root_type FileActivatedEventArgs;
};
struct FileActivatedEventArgs : generate<FileActivatedEventArgs> {};

// IProtocolActivatedEventArgs
struct IProtocolActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value) = 0;
};
template<typename X> struct IProtocolActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IProtocolActivatedEventArgs_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
	};
	IProtocolActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IProtocolActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs_adaptor<X> { typedef adapt IProtocolActivatedEventArgs; };
template<typename X> struct IProtocolActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Uri(Foundation::Uri* *value) { return hrtry([&, this] { get_prop(value, Uri); }); }
};
template<typename X> struct unadapt<IProtocolActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs_unadaptor<X> {};
struct IProtocolActivatedEventArgs : IProtocolActivatedEventArgs_raw, generate<IProtocolActivatedEventArgs> {};

// IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_raw : IInspectable {
	virtual STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Data(Foundation::Collections::ValueSet* *value) = 0;
};
template<typename X> struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_adaptor::CallerPackageFamilyName)->_get_CallerPackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CallerPackageFamilyName;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Data;
	};
	IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_adaptor() {}
};
template<typename X> struct adapt<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, X> : Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_adaptor<X> { typedef adapt IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData; };
template<typename X> struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_unadaptor : X {
	STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) { return hrtry([&, this] { get_prop(value, CallerPackageFamilyName); }); }
	STDMETHODIMP _get_Data(Foundation::Collections::ValueSet* *value) { return hrtry([&, this] { get_prop(value, Data); }); }
};
template<typename X> struct unadapt<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, X> : Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_unadaptor<X> {};
struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData : IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_raw, generate<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData> {};

// ProtocolActivatedEventArgs
template<typename X> struct statics<ProtocolActivatedEventArgs, X> : X {
	typedef typename X::root_type ProtocolActivatedEventArgs;
};
struct ProtocolActivatedEventArgs : generate<ProtocolActivatedEventArgs> {};

// IProtocolForResultsActivatedEventArgs
struct IProtocolForResultsActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ProtocolForResultsOperation(System::ProtocolForResultsOperation* *value) = 0;
};
template<typename X> struct IProtocolForResultsActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<System::ProtocolForResultsOperation> get() { System::ProtocolForResultsOperation* value; hrcheck(enc(&IProtocolForResultsActivatedEventArgs_adaptor::ProtocolForResultsOperation)->_get_ProtocolForResultsOperation(&value)); return from_abi(value); }
			ptr<System::ProtocolForResultsOperation> operator()() { return get(); }
			operator ptr<System::ProtocolForResultsOperation> () { return get(); }
			ptr<System::ProtocolForResultsOperation> operator->() { return get(); }
		} ProtocolForResultsOperation;
	};
	IProtocolForResultsActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IProtocolForResultsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs_adaptor<X> { typedef adapt IProtocolForResultsActivatedEventArgs; };
template<typename X> struct IProtocolForResultsActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ProtocolForResultsOperation(System::ProtocolForResultsOperation* *value) { return hrtry([&, this] { get_prop(value, ProtocolForResultsOperation); }); }
};
template<typename X> struct unadapt<IProtocolForResultsActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs_unadaptor<X> {};
struct IProtocolForResultsActivatedEventArgs : IProtocolForResultsActivatedEventArgs_raw, generate<IProtocolForResultsActivatedEventArgs> {};

// ProtocolForResultsActivatedEventArgs
template<typename X> struct statics<ProtocolForResultsActivatedEventArgs, X> : X {
	typedef typename X::root_type ProtocolForResultsActivatedEventArgs;
};
struct ProtocolForResultsActivatedEventArgs : generate<ProtocolForResultsActivatedEventArgs> {};

// IFileOpenPickerActivatedEventArgs
struct IFileOpenPickerActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FileOpenPickerUI(Storage::Pickers::Provider::FileOpenPickerUI* *value) = 0;
};
template<typename X> struct IFileOpenPickerActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Pickers::Provider::FileOpenPickerUI> get() { Storage::Pickers::Provider::FileOpenPickerUI* value; hrcheck(enc(&IFileOpenPickerActivatedEventArgs_adaptor::FileOpenPickerUI)->_get_FileOpenPickerUI(&value)); return from_abi(value); }
			ptr<Storage::Pickers::Provider::FileOpenPickerUI> operator()() { return get(); }
			operator ptr<Storage::Pickers::Provider::FileOpenPickerUI> () { return get(); }
			ptr<Storage::Pickers::Provider::FileOpenPickerUI> operator->() { return get(); }
		} FileOpenPickerUI;
	};
	IFileOpenPickerActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFileOpenPickerActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs_adaptor<X> { typedef adapt IFileOpenPickerActivatedEventArgs; };
template<typename X> struct IFileOpenPickerActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_FileOpenPickerUI(Storage::Pickers::Provider::FileOpenPickerUI* *value) { return hrtry([&, this] { get_prop(value, FileOpenPickerUI); }); }
};
template<typename X> struct unadapt<IFileOpenPickerActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs_unadaptor<X> {};
struct IFileOpenPickerActivatedEventArgs : IFileOpenPickerActivatedEventArgs_raw, generate<IFileOpenPickerActivatedEventArgs> {};

// IFileOpenPickerActivatedEventArgs2
struct IFileOpenPickerActivatedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) = 0;
};
template<typename X> struct IFileOpenPickerActivatedEventArgs2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileOpenPickerActivatedEventArgs2_adaptor::CallerPackageFamilyName)->_get_CallerPackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CallerPackageFamilyName;
	};
	IFileOpenPickerActivatedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IFileOpenPickerActivatedEventArgs2, X> : Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2_adaptor<X> { typedef adapt IFileOpenPickerActivatedEventArgs2; };
template<typename X> struct IFileOpenPickerActivatedEventArgs2_unadaptor : X {
	STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) { return hrtry([&, this] { get_prop(value, CallerPackageFamilyName); }); }
};
template<typename X> struct unadapt<IFileOpenPickerActivatedEventArgs2, X> : Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2_unadaptor<X> {};
struct IFileOpenPickerActivatedEventArgs2 : IFileOpenPickerActivatedEventArgs2_raw, generate<IFileOpenPickerActivatedEventArgs2> {};

// FileOpenPickerActivatedEventArgs
template<typename X> struct statics<FileOpenPickerActivatedEventArgs, X> : X {
	typedef typename X::root_type FileOpenPickerActivatedEventArgs;
};
struct FileOpenPickerActivatedEventArgs : generate<FileOpenPickerActivatedEventArgs> {};

// IFileSavePickerActivatedEventArgs
struct IFileSavePickerActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FileSavePickerUI(Storage::Pickers::Provider::FileSavePickerUI* *value) = 0;
};
template<typename X> struct IFileSavePickerActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Pickers::Provider::FileSavePickerUI> get() { Storage::Pickers::Provider::FileSavePickerUI* value; hrcheck(enc(&IFileSavePickerActivatedEventArgs_adaptor::FileSavePickerUI)->_get_FileSavePickerUI(&value)); return from_abi(value); }
			ptr<Storage::Pickers::Provider::FileSavePickerUI> operator()() { return get(); }
			operator ptr<Storage::Pickers::Provider::FileSavePickerUI> () { return get(); }
			ptr<Storage::Pickers::Provider::FileSavePickerUI> operator->() { return get(); }
		} FileSavePickerUI;
	};
	IFileSavePickerActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFileSavePickerActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs_adaptor<X> { typedef adapt IFileSavePickerActivatedEventArgs; };
template<typename X> struct IFileSavePickerActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_FileSavePickerUI(Storage::Pickers::Provider::FileSavePickerUI* *value) { return hrtry([&, this] { get_prop(value, FileSavePickerUI); }); }
};
template<typename X> struct unadapt<IFileSavePickerActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs_unadaptor<X> {};
struct IFileSavePickerActivatedEventArgs : IFileSavePickerActivatedEventArgs_raw, generate<IFileSavePickerActivatedEventArgs> {};

// IFileSavePickerActivatedEventArgs2
struct IFileSavePickerActivatedEventArgs2_raw : IInspectable {
	virtual STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_EnterpriseId(HSTRING *value) = 0;
};
template<typename X> struct IFileSavePickerActivatedEventArgs2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileSavePickerActivatedEventArgs2_adaptor::CallerPackageFamilyName)->_get_CallerPackageFamilyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CallerPackageFamilyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileSavePickerActivatedEventArgs2_adaptor::EnterpriseId)->_get_EnterpriseId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} EnterpriseId;
	};
	IFileSavePickerActivatedEventArgs2_adaptor() {}
};
template<typename X> struct adapt<IFileSavePickerActivatedEventArgs2, X> : Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2_adaptor<X> { typedef adapt IFileSavePickerActivatedEventArgs2; };
template<typename X> struct IFileSavePickerActivatedEventArgs2_unadaptor : X {
	STDMETHODIMP _get_CallerPackageFamilyName(HSTRING *value) { return hrtry([&, this] { get_prop(value, CallerPackageFamilyName); }); }
	STDMETHODIMP _get_EnterpriseId(HSTRING *value) { return hrtry([&, this] { get_prop(value, EnterpriseId); }); }
};
template<typename X> struct unadapt<IFileSavePickerActivatedEventArgs2, X> : Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2_unadaptor<X> {};
struct IFileSavePickerActivatedEventArgs2 : IFileSavePickerActivatedEventArgs2_raw, generate<IFileSavePickerActivatedEventArgs2> {};

// FileSavePickerActivatedEventArgs
template<typename X> struct statics<FileSavePickerActivatedEventArgs, X> : X {
	typedef typename X::root_type FileSavePickerActivatedEventArgs;
};
struct FileSavePickerActivatedEventArgs : generate<FileSavePickerActivatedEventArgs> {};

// ICachedFileUpdaterActivatedEventArgs
struct ICachedFileUpdaterActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_CachedFileUpdaterUI(Storage::Provider::CachedFileUpdaterUI* *value) = 0;
};
template<typename X> struct ICachedFileUpdaterActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Provider::CachedFileUpdaterUI> get() { Storage::Provider::CachedFileUpdaterUI* value; hrcheck(enc(&ICachedFileUpdaterActivatedEventArgs_adaptor::CachedFileUpdaterUI)->_get_CachedFileUpdaterUI(&value)); return from_abi(value); }
			ptr<Storage::Provider::CachedFileUpdaterUI> operator()() { return get(); }
			operator ptr<Storage::Provider::CachedFileUpdaterUI> () { return get(); }
			ptr<Storage::Provider::CachedFileUpdaterUI> operator->() { return get(); }
		} CachedFileUpdaterUI;
	};
	ICachedFileUpdaterActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICachedFileUpdaterActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs_adaptor<X> { typedef adapt ICachedFileUpdaterActivatedEventArgs; };
template<typename X> struct ICachedFileUpdaterActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_CachedFileUpdaterUI(Storage::Provider::CachedFileUpdaterUI* *value) { return hrtry([&, this] { get_prop(value, CachedFileUpdaterUI); }); }
};
template<typename X> struct unadapt<ICachedFileUpdaterActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs_unadaptor<X> {};
struct ICachedFileUpdaterActivatedEventArgs : ICachedFileUpdaterActivatedEventArgs_raw, generate<ICachedFileUpdaterActivatedEventArgs> {};

// CachedFileUpdaterActivatedEventArgs
template<typename X> struct statics<CachedFileUpdaterActivatedEventArgs, X> : X {
	typedef typename X::root_type CachedFileUpdaterActivatedEventArgs;
};
struct CachedFileUpdaterActivatedEventArgs : generate<CachedFileUpdaterActivatedEventArgs> {};

// IDeviceActivatedEventArgs
struct IDeviceActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceInformationId(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Verb(HSTRING *value) = 0;
};
template<typename X> struct IDeviceActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceActivatedEventArgs_adaptor::DeviceInformationId)->_get_DeviceInformationId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceInformationId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDeviceActivatedEventArgs_adaptor::Verb)->_get_Verb(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Verb;
	};
	IDeviceActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDeviceActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs_adaptor<X> { typedef adapt IDeviceActivatedEventArgs; };
template<typename X> struct IDeviceActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_DeviceInformationId(HSTRING *value) { return hrtry([&, this] { get_prop(value, DeviceInformationId); }); }
	STDMETHODIMP _get_Verb(HSTRING *value) { return hrtry([&, this] { get_prop(value, Verb); }); }
};
template<typename X> struct unadapt<IDeviceActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs_unadaptor<X> {};
struct IDeviceActivatedEventArgs : IDeviceActivatedEventArgs_raw, generate<IDeviceActivatedEventArgs> {};

// DeviceActivatedEventArgs
template<typename X> struct statics<DeviceActivatedEventArgs, X> : X {
	typedef typename X::root_type DeviceActivatedEventArgs;
};
struct DeviceActivatedEventArgs : generate<DeviceActivatedEventArgs> {};

// IPickerReturnedActivatedEventArgs
struct IPickerReturnedActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PickerOperationId(HSTRING *value) = 0;
};
template<typename X> struct IPickerReturnedActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPickerReturnedActivatedEventArgs_adaptor::PickerOperationId)->_get_PickerOperationId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PickerOperationId;
	};
	IPickerReturnedActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPickerReturnedActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPickerReturnedActivatedEventArgs_adaptor<X> { typedef adapt IPickerReturnedActivatedEventArgs; };
template<typename X> struct IPickerReturnedActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_PickerOperationId(HSTRING *value) { return hrtry([&, this] { get_prop(value, PickerOperationId); }); }
};
template<typename X> struct unadapt<IPickerReturnedActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IPickerReturnedActivatedEventArgs_unadaptor<X> {};
struct IPickerReturnedActivatedEventArgs : IPickerReturnedActivatedEventArgs_raw, generate<IPickerReturnedActivatedEventArgs> {};

// PickerReturnedActivatedEventArgs
template<typename X> struct statics<PickerReturnedActivatedEventArgs, X> : X {
	typedef typename X::root_type PickerReturnedActivatedEventArgs;
};
struct PickerReturnedActivatedEventArgs : generate<PickerReturnedActivatedEventArgs> {};

// IRestrictedLaunchActivatedEventArgs
struct IRestrictedLaunchActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SharedContext(IInspectable* *value) = 0;
};
template<typename X> struct IRestrictedLaunchActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IRestrictedLaunchActivatedEventArgs_adaptor::SharedContext)->_get_SharedContext(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} SharedContext;
	};
	IRestrictedLaunchActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRestrictedLaunchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs_adaptor<X> { typedef adapt IRestrictedLaunchActivatedEventArgs; };
template<typename X> struct IRestrictedLaunchActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_SharedContext(IInspectable* *value) { return hrtry([&, this] { get_prop(value, SharedContext); }); }
};
template<typename X> struct unadapt<IRestrictedLaunchActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs_unadaptor<X> {};
struct IRestrictedLaunchActivatedEventArgs : IRestrictedLaunchActivatedEventArgs_raw, generate<IRestrictedLaunchActivatedEventArgs> {};

// RestrictedLaunchActivatedEventArgs
template<typename X> struct statics<RestrictedLaunchActivatedEventArgs, X> : X {
	typedef typename X::root_type RestrictedLaunchActivatedEventArgs;
};
struct RestrictedLaunchActivatedEventArgs : generate<RestrictedLaunchActivatedEventArgs> {};

// ILockScreenActivatedEventArgs
struct ILockScreenActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Info(IInspectable* *value) = 0;
};
template<typename X> struct ILockScreenActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&ILockScreenActivatedEventArgs_adaptor::Info)->_get_Info(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Info;
	};
	ILockScreenActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILockScreenActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs_adaptor<X> { typedef adapt ILockScreenActivatedEventArgs; };
template<typename X> struct ILockScreenActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Info(IInspectable* *value) { return hrtry([&, this] { get_prop(value, Info); }); }
};
template<typename X> struct unadapt<ILockScreenActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs_unadaptor<X> {};
struct ILockScreenActivatedEventArgs : ILockScreenActivatedEventArgs_raw, generate<ILockScreenActivatedEventArgs> {};

// LockScreenActivatedEventArgs
template<typename X> struct statics<LockScreenActivatedEventArgs, X> : X {
	typedef typename X::root_type LockScreenActivatedEventArgs;
};
struct LockScreenActivatedEventArgs : generate<LockScreenActivatedEventArgs> {};

// IContinuationActivatedEventArgs
struct IContinuationActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ContinuationData(Foundation::Collections::ValueSet* *value) = 0;
};
template<typename X> struct IContinuationActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IContinuationActivatedEventArgs_adaptor::ContinuationData)->_get_ContinuationData(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} ContinuationData;
	};
	IContinuationActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IContinuationActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs_adaptor<X> { typedef adapt IContinuationActivatedEventArgs; };
template<typename X> struct IContinuationActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ContinuationData(Foundation::Collections::ValueSet* *value) { return hrtry([&, this] { get_prop(value, ContinuationData); }); }
};
template<typename X> struct unadapt<IContinuationActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs_unadaptor<X> {};
struct IContinuationActivatedEventArgs : IContinuationActivatedEventArgs_raw, generate<IContinuationActivatedEventArgs> {};

// IFileOpenPickerContinuationEventArgs
struct IFileOpenPickerContinuationEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Files(Foundation::Collections::IVectorView<Storage::StorageFile*>* *value) = 0;
};
template<typename X> struct IFileOpenPickerContinuationEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Storage::StorageFile>>> get() { Foundation::Collections::IVectorView<Storage::StorageFile*>* value; hrcheck(enc(&IFileOpenPickerContinuationEventArgs_adaptor::Files)->_get_Files(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Storage::StorageFile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Storage::StorageFile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Storage::StorageFile>>> operator->() { return get(); }
		} Files;
	};
	IFileOpenPickerContinuationEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFileOpenPickerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs_adaptor<X> { typedef adapt IFileOpenPickerContinuationEventArgs; };
template<typename X> struct IFileOpenPickerContinuationEventArgs_unadaptor : X {
	STDMETHODIMP _get_Files(Foundation::Collections::IVectorView<Storage::StorageFile*>* *value) { return hrtry([&, this] { get_prop(value, Files); }); }
};
template<typename X> struct unadapt<IFileOpenPickerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs_unadaptor<X> {};
struct IFileOpenPickerContinuationEventArgs : IFileOpenPickerContinuationEventArgs_raw, generate<IFileOpenPickerContinuationEventArgs> {};

// FileOpenPickerContinuationEventArgs
template<typename X> struct statics<FileOpenPickerContinuationEventArgs, X> : X {
	typedef typename X::root_type FileOpenPickerContinuationEventArgs;
};
struct FileOpenPickerContinuationEventArgs : generate<FileOpenPickerContinuationEventArgs> {};

// IFileSavePickerContinuationEventArgs
struct IFileSavePickerContinuationEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_File(Storage::StorageFile* *value) = 0;
};
template<typename X> struct IFileSavePickerContinuationEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::StorageFile> get() { Storage::StorageFile* value; hrcheck(enc(&IFileSavePickerContinuationEventArgs_adaptor::File)->_get_File(&value)); return from_abi(value); }
			ptr<Storage::StorageFile> operator()() { return get(); }
			operator ptr<Storage::StorageFile> () { return get(); }
			ptr<Storage::StorageFile> operator->() { return get(); }
		} File;
	};
	IFileSavePickerContinuationEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFileSavePickerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs_adaptor<X> { typedef adapt IFileSavePickerContinuationEventArgs; };
template<typename X> struct IFileSavePickerContinuationEventArgs_unadaptor : X {
	STDMETHODIMP _get_File(Storage::StorageFile* *value) { return hrtry([&, this] { get_prop(value, File); }); }
};
template<typename X> struct unadapt<IFileSavePickerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs_unadaptor<X> {};
struct IFileSavePickerContinuationEventArgs : IFileSavePickerContinuationEventArgs_raw, generate<IFileSavePickerContinuationEventArgs> {};

// FileSavePickerContinuationEventArgs
template<typename X> struct statics<FileSavePickerContinuationEventArgs, X> : X {
	typedef typename X::root_type FileSavePickerContinuationEventArgs;
};
struct FileSavePickerContinuationEventArgs : generate<FileSavePickerContinuationEventArgs> {};

// IFolderPickerContinuationEventArgs
struct IFolderPickerContinuationEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Folder(Storage::StorageFolder* *value) = 0;
};
template<typename X> struct IFolderPickerContinuationEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::StorageFolder> get() { Storage::StorageFolder* value; hrcheck(enc(&IFolderPickerContinuationEventArgs_adaptor::Folder)->_get_Folder(&value)); return from_abi(value); }
			ptr<Storage::StorageFolder> operator()() { return get(); }
			operator ptr<Storage::StorageFolder> () { return get(); }
			ptr<Storage::StorageFolder> operator->() { return get(); }
		} Folder;
	};
	IFolderPickerContinuationEventArgs_adaptor() {}
};
template<typename X> struct adapt<IFolderPickerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs_adaptor<X> { typedef adapt IFolderPickerContinuationEventArgs; };
template<typename X> struct IFolderPickerContinuationEventArgs_unadaptor : X {
	STDMETHODIMP _get_Folder(Storage::StorageFolder* *value) { return hrtry([&, this] { get_prop(value, Folder); }); }
};
template<typename X> struct unadapt<IFolderPickerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs_unadaptor<X> {};
struct IFolderPickerContinuationEventArgs : IFolderPickerContinuationEventArgs_raw, generate<IFolderPickerContinuationEventArgs> {};

// FolderPickerContinuationEventArgs
template<typename X> struct statics<FolderPickerContinuationEventArgs, X> : X {
	typedef typename X::root_type FolderPickerContinuationEventArgs;
};
struct FolderPickerContinuationEventArgs : generate<FolderPickerContinuationEventArgs> {};

// IWebAuthenticationBrokerContinuationEventArgs
struct IWebAuthenticationBrokerContinuationEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_WebAuthenticationResult(Security::Authentication::Web::WebAuthenticationResult* *result) = 0;
};
template<typename X> struct IWebAuthenticationBrokerContinuationEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Security::Authentication::Web::WebAuthenticationResult> get() { Security::Authentication::Web::WebAuthenticationResult* result; hrcheck(enc(&IWebAuthenticationBrokerContinuationEventArgs_adaptor::WebAuthenticationResult)->_get_WebAuthenticationResult(&result)); return from_abi(result); }
			ptr<Security::Authentication::Web::WebAuthenticationResult> operator()() { return get(); }
			operator ptr<Security::Authentication::Web::WebAuthenticationResult> () { return get(); }
			ptr<Security::Authentication::Web::WebAuthenticationResult> operator->() { return get(); }
		} WebAuthenticationResult;
	};
	IWebAuthenticationBrokerContinuationEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebAuthenticationBrokerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IWebAuthenticationBrokerContinuationEventArgs_adaptor<X> { typedef adapt IWebAuthenticationBrokerContinuationEventArgs; };
template<typename X> struct IWebAuthenticationBrokerContinuationEventArgs_unadaptor : X {
	STDMETHODIMP _get_WebAuthenticationResult(Security::Authentication::Web::WebAuthenticationResult* *result) { return hrtry([&, this] { get_prop(result, WebAuthenticationResult); }); }
};
template<typename X> struct unadapt<IWebAuthenticationBrokerContinuationEventArgs, X> : Windows::ApplicationModel::Activation::IWebAuthenticationBrokerContinuationEventArgs_unadaptor<X> {};
struct IWebAuthenticationBrokerContinuationEventArgs : IWebAuthenticationBrokerContinuationEventArgs_raw, generate<IWebAuthenticationBrokerContinuationEventArgs> {};

// WebAuthenticationBrokerContinuationEventArgs
template<typename X> struct statics<WebAuthenticationBrokerContinuationEventArgs, X> : X {
	typedef typename X::root_type WebAuthenticationBrokerContinuationEventArgs;
};
struct WebAuthenticationBrokerContinuationEventArgs : generate<WebAuthenticationBrokerContinuationEventArgs> {};

// IWebAccountProviderActivatedEventArgs
struct IWebAccountProviderActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Operation(Security::Authentication::Web::Provider::IWebAccountProviderOperation* *value) = 0;
};
template<typename X> struct IWebAccountProviderActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Security::Authentication::Web::Provider::IWebAccountProviderOperation> get() { Security::Authentication::Web::Provider::IWebAccountProviderOperation* value; hrcheck(enc(&IWebAccountProviderActivatedEventArgs_adaptor::Operation)->_get_Operation(&value)); return from_abi(value); }
			ptr<Security::Authentication::Web::Provider::IWebAccountProviderOperation> operator()() { return get(); }
			operator ptr<Security::Authentication::Web::Provider::IWebAccountProviderOperation> () { return get(); }
			ptr<Security::Authentication::Web::Provider::IWebAccountProviderOperation> operator->() { return get(); }
		} Operation;
	};
	IWebAccountProviderActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IWebAccountProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs_adaptor<X> { typedef adapt IWebAccountProviderActivatedEventArgs; };
template<typename X> struct IWebAccountProviderActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Operation(Security::Authentication::Web::Provider::IWebAccountProviderOperation* *value) { return hrtry([&, this] { get_prop(value, Operation); }); }
};
template<typename X> struct unadapt<IWebAccountProviderActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs_unadaptor<X> {};
struct IWebAccountProviderActivatedEventArgs : IWebAccountProviderActivatedEventArgs_raw, generate<IWebAccountProviderActivatedEventArgs> {};

// WebAccountProviderActivatedEventArgs
template<typename X> struct statics<WebAccountProviderActivatedEventArgs, X> : X {
	typedef typename X::root_type WebAccountProviderActivatedEventArgs;
};
struct WebAccountProviderActivatedEventArgs : generate<WebAccountProviderActivatedEventArgs> {};

// IToastNotificationActivatedEventArgs
struct IToastNotificationActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Argument(HSTRING *argument) = 0;
	virtual STDMETHODIMP _get_UserInput(Foundation::Collections::ValueSet* *value) = 0;
};
template<typename X> struct IToastNotificationActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING argument; hrcheck(enc(&IToastNotificationActivatedEventArgs_adaptor::Argument)->_get_Argument(&argument)); return from_abi(argument); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Argument;
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IToastNotificationActivatedEventArgs_adaptor::UserInput)->_get_UserInput(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} UserInput;
	};
	IToastNotificationActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IToastNotificationActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs_adaptor<X> { typedef adapt IToastNotificationActivatedEventArgs; };
template<typename X> struct IToastNotificationActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Argument(HSTRING *argument) { return hrtry([&, this] { get_prop(argument, Argument); }); }
	STDMETHODIMP _get_UserInput(Foundation::Collections::ValueSet* *value) { return hrtry([&, this] { get_prop(value, UserInput); }); }
};
template<typename X> struct unadapt<IToastNotificationActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs_unadaptor<X> {};
struct IToastNotificationActivatedEventArgs : IToastNotificationActivatedEventArgs_raw, generate<IToastNotificationActivatedEventArgs> {};

// ToastNotificationActivatedEventArgs
template<typename X> struct statics<ToastNotificationActivatedEventArgs, X> : X {
	typedef typename X::root_type ToastNotificationActivatedEventArgs;
};
struct ToastNotificationActivatedEventArgs : generate<ToastNotificationActivatedEventArgs> {};

// IDialReceiverActivatedEventArgs
struct IDialReceiverActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_AppName(HSTRING *value) = 0;
};
template<typename X> struct IDialReceiverActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDialReceiverActivatedEventArgs_adaptor::AppName)->_get_AppName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppName;
	};
	IDialReceiverActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDialReceiverActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs_adaptor<X> { typedef adapt IDialReceiverActivatedEventArgs; };
template<typename X> struct IDialReceiverActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_AppName(HSTRING *value) { return hrtry([&, this] { get_prop(value, AppName); }); }
};
template<typename X> struct unadapt<IDialReceiverActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs_unadaptor<X> {};
struct IDialReceiverActivatedEventArgs : IDialReceiverActivatedEventArgs_raw, generate<IDialReceiverActivatedEventArgs> {};

// DialReceiverActivatedEventArgs
template<typename X> struct statics<DialReceiverActivatedEventArgs, X> : X {
	typedef typename X::root_type DialReceiverActivatedEventArgs;
};
struct DialReceiverActivatedEventArgs : generate<DialReceiverActivatedEventArgs> {};

// LockScreenComponentActivatedEventArgs
template<typename X> struct statics<LockScreenComponentActivatedEventArgs, X> : X {
	typedef typename X::root_type LockScreenComponentActivatedEventArgs;
};
struct LockScreenComponentActivatedEventArgs : generate<LockScreenComponentActivatedEventArgs> {};

// ICommandLineActivationOperation
struct ICommandLineActivationOperation_raw : IInspectable {
	virtual STDMETHODIMP _get_Arguments(HSTRING *value);
	virtual STDMETHODIMP _get_CurrentDirectoryPath(HSTRING *value);
	virtual STDMETHODIMP _put_ExitCode(int value);
	virtual STDMETHODIMP _get_ExitCode(int *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct ICommandLineActivationOperation_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICommandLineActivationOperation_adaptor::Arguments)->_get_Arguments(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Arguments;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICommandLineActivationOperation_adaptor::CurrentDirectoryPath)->_get_CurrentDirectoryPath(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CurrentDirectoryPath;
		struct : property {
			int get() { int value; hrcheck(enc(&ICommandLineActivationOperation_adaptor::ExitCode)->_get_ExitCode(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ICommandLineActivationOperation_adaptor::ExitCode)->_put_ExitCode(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} ExitCode;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	ICommandLineActivationOperation_adaptor() {}
};
template<typename X> struct adapt<ICommandLineActivationOperation, X> : Windows::ApplicationModel::Activation::ICommandLineActivationOperation_adaptor<X> { typedef adapt ICommandLineActivationOperation; };
struct ICommandLineActivationOperation : ICommandLineActivationOperation_raw, generate<ICommandLineActivationOperation> {};

// CommandLineActivationOperation
template<typename X> struct statics<CommandLineActivationOperation, X> : X {
	typedef typename X::root_type CommandLineActivationOperation;
};
struct CommandLineActivationOperation : generate<CommandLineActivationOperation> {};

// ICommandLineActivatedEventArgs
struct ICommandLineActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Operation(CommandLineActivationOperation* *value) = 0;
};
template<typename X> struct ICommandLineActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<CommandLineActivationOperation> get() { CommandLineActivationOperation* value; hrcheck(enc(&ICommandLineActivatedEventArgs_adaptor::Operation)->_get_Operation(&value)); return from_abi(value); }
			ptr<CommandLineActivationOperation> operator()() { return get(); }
			operator ptr<CommandLineActivationOperation> () { return get(); }
			ptr<CommandLineActivationOperation> operator->() { return get(); }
		} Operation;
	};
	ICommandLineActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICommandLineActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ICommandLineActivatedEventArgs_adaptor<X> { typedef adapt ICommandLineActivatedEventArgs; };
template<typename X> struct ICommandLineActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Operation(CommandLineActivationOperation* *value) { return hrtry([&, this] { get_prop(value, Operation); }); }
};
template<typename X> struct unadapt<ICommandLineActivatedEventArgs, X> : Windows::ApplicationModel::Activation::ICommandLineActivatedEventArgs_unadaptor<X> {};
struct ICommandLineActivatedEventArgs : ICommandLineActivatedEventArgs_raw, generate<ICommandLineActivatedEventArgs> {};

// CommandLineActivatedEventArgs
template<typename X> struct statics<CommandLineActivatedEventArgs, X> : X {
	typedef typename X::root_type CommandLineActivatedEventArgs;
};
struct CommandLineActivatedEventArgs : generate<CommandLineActivatedEventArgs> {};

// IStartupTaskActivatedEventArgs
struct IStartupTaskActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_TaskId(HSTRING *value) = 0;
};
template<typename X> struct IStartupTaskActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IStartupTaskActivatedEventArgs_adaptor::TaskId)->_get_TaskId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TaskId;
	};
	IStartupTaskActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IStartupTaskActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IStartupTaskActivatedEventArgs_adaptor<X> { typedef adapt IStartupTaskActivatedEventArgs; };
template<typename X> struct IStartupTaskActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_TaskId(HSTRING *value) { return hrtry([&, this] { get_prop(value, TaskId); }); }
};
template<typename X> struct unadapt<IStartupTaskActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IStartupTaskActivatedEventArgs_unadaptor<X> {};
struct IStartupTaskActivatedEventArgs : IStartupTaskActivatedEventArgs_raw, generate<IStartupTaskActivatedEventArgs> {};

// StartupTaskActivatedEventArgs
template<typename X> struct statics<StartupTaskActivatedEventArgs, X> : X {
	typedef typename X::root_type StartupTaskActivatedEventArgs;
};
struct StartupTaskActivatedEventArgs : generate<StartupTaskActivatedEventArgs> {};

// IBarcodeScannerPreviewActivatedEventArgs
struct IBarcodeScannerPreviewActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_ConnectionId(HSTRING *value) = 0;
};
template<typename X> struct IBarcodeScannerPreviewActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBarcodeScannerPreviewActivatedEventArgs_adaptor::ConnectionId)->_get_ConnectionId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ConnectionId;
	};
	IBarcodeScannerPreviewActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerPreviewActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IBarcodeScannerPreviewActivatedEventArgs_adaptor<X> { typedef adapt IBarcodeScannerPreviewActivatedEventArgs; };
template<typename X> struct IBarcodeScannerPreviewActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_ConnectionId(HSTRING *value) { return hrtry([&, this] { get_prop(value, ConnectionId); }); }
};
template<typename X> struct unadapt<IBarcodeScannerPreviewActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IBarcodeScannerPreviewActivatedEventArgs_unadaptor<X> {};
struct IBarcodeScannerPreviewActivatedEventArgs : IBarcodeScannerPreviewActivatedEventArgs_raw, generate<IBarcodeScannerPreviewActivatedEventArgs> {};

// BarcodeScannerPreviewActivatedEventArgs
template<typename X> struct statics<BarcodeScannerPreviewActivatedEventArgs, X> : X {
	typedef typename X::root_type BarcodeScannerPreviewActivatedEventArgs;
};
struct BarcodeScannerPreviewActivatedEventArgs : generate<BarcodeScannerPreviewActivatedEventArgs> {};

// IDevicePairingActivatedEventArgs
struct IDevicePairingActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceInformation(Devices::Enumeration::DeviceInformation* *value) = 0;
};
template<typename X> struct IDevicePairingActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Enumeration::DeviceInformation> get() { Devices::Enumeration::DeviceInformation* value; hrcheck(enc(&IDevicePairingActivatedEventArgs_adaptor::DeviceInformation)->_get_DeviceInformation(&value)); return from_abi(value); }
			ptr<Devices::Enumeration::DeviceInformation> operator()() { return get(); }
			operator ptr<Devices::Enumeration::DeviceInformation> () { return get(); }
			ptr<Devices::Enumeration::DeviceInformation> operator->() { return get(); }
		} DeviceInformation;
	};
	IDevicePairingActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDevicePairingActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs_adaptor<X> { typedef adapt IDevicePairingActivatedEventArgs; };
template<typename X> struct IDevicePairingActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_DeviceInformation(Devices::Enumeration::DeviceInformation* *value) { return hrtry([&, this] { get_prop(value, DeviceInformation); }); }
};
template<typename X> struct unadapt<IDevicePairingActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs_unadaptor<X> {};
struct IDevicePairingActivatedEventArgs : IDevicePairingActivatedEventArgs_raw, generate<IDevicePairingActivatedEventArgs> {};

// DevicePairingActivatedEventArgs
template<typename X> struct statics<DevicePairingActivatedEventArgs, X> : X {
	typedef typename X::root_type DevicePairingActivatedEventArgs;
};
struct DevicePairingActivatedEventArgs : generate<DevicePairingActivatedEventArgs> {};

// IVoiceCommandActivatedEventArgs
struct IVoiceCommandActivatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Result(Media::SpeechRecognition::SpeechRecognitionResult* *value) = 0;
};
template<typename X> struct IVoiceCommandActivatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Media::SpeechRecognition::SpeechRecognitionResult> get() { Media::SpeechRecognition::SpeechRecognitionResult* value; hrcheck(enc(&IVoiceCommandActivatedEventArgs_adaptor::Result)->_get_Result(&value)); return from_abi(value); }
			ptr<Media::SpeechRecognition::SpeechRecognitionResult> operator()() { return get(); }
			operator ptr<Media::SpeechRecognition::SpeechRecognitionResult> () { return get(); }
			ptr<Media::SpeechRecognition::SpeechRecognitionResult> operator->() { return get(); }
		} Result;
	};
	IVoiceCommandActivatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IVoiceCommandActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs_adaptor<X> { typedef adapt IVoiceCommandActivatedEventArgs; };
template<typename X> struct IVoiceCommandActivatedEventArgs_unadaptor : X {
	STDMETHODIMP _get_Result(Media::SpeechRecognition::SpeechRecognitionResult* *value) { return hrtry([&, this] { get_prop(value, Result); }); }
};
template<typename X> struct unadapt<IVoiceCommandActivatedEventArgs, X> : Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs_unadaptor<X> {};
struct IVoiceCommandActivatedEventArgs : IVoiceCommandActivatedEventArgs_raw, generate<IVoiceCommandActivatedEventArgs> {};

// VoiceCommandActivatedEventArgs
template<typename X> struct statics<VoiceCommandActivatedEventArgs, X> : X {
	typedef typename X::root_type VoiceCommandActivatedEventArgs;
};
struct VoiceCommandActivatedEventArgs : generate<VoiceCommandActivatedEventArgs> {};
}}}
} // namespace iso_winrt
