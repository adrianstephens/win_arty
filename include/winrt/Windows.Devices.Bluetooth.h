#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Bluetooth

#include "Windows.Devices.Bluetooth.0.h"
#include "Windows.Devices.Enumeration.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {
struct GattDeviceServicesResult;
struct GattDeviceService;
}
namespace Rfcomm {
struct RfcommDeviceServicesResult;
struct RfcommDeviceService;
struct RfcommServiceId;
}}
namespace Radios {
struct Radio;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Networking {
struct HostName;
}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::Bluetooth::BluetoothCacheMode> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothMajorClass> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothMinorClass> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothServiceCapabilities> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothConnectionStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothError> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothAddressType> : enum_type<int> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothAdapterStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothAdapter2> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothAdapter> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothAdapter> : class_type<Platform::Object, Windows::Devices::Bluetooth::IBluetoothAdapter, Windows::Devices::Bluetooth::IBluetoothAdapter2> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDeviceIdStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDeviceId> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothDeviceId> : class_type<Platform::Object, Windows::Devices::Bluetooth::IBluetoothDeviceId> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothUuidHelperStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothUuidHelper> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDeviceStatics2> : interface_type<Windows::Devices::Bluetooth::IBluetoothDeviceStatics> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDevice5> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDevice4> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDevice> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDevice2> : interface_type<Windows::Devices::Bluetooth::IBluetoothDevice> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothDevice3> : interface_type<Windows::Devices::Bluetooth::IBluetoothDevice2> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothDevice> : class_type<Platform::Object, Windows::Devices::Bluetooth::IBluetoothDevice, Windows::Foundation::IClosable, Windows::Devices::Bluetooth::IBluetoothDevice5, Windows::Devices::Bluetooth::IBluetoothDevice3, Windows::Devices::Bluetooth::IBluetoothDevice4> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothClassOfDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothClassOfDevice> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothClassOfDevice> : class_type<Platform::Object, Windows::Devices::Bluetooth::IBluetoothClassOfDevice> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEAppearanceCategoriesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothLEAppearanceCategories> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEAppearanceSubcategoriesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothLEAppearanceSubcategories> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEAppearance> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEAppearanceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothLEAppearance> : class_type<Platform::Object, Windows::Devices::Bluetooth::IBluetoothLEAppearance> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEDevice5> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEDevice4> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEDevice3> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEDevice> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothLEDevice2> : interface_type<Windows::Devices::Bluetooth::IBluetoothLEDevice> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothLEDevice> : class_type<Platform::Object, Windows::Devices::Bluetooth::IBluetoothLEDevice, Windows::Foundation::IClosable, Windows::Devices::Bluetooth::IBluetoothLEDevice2, Windows::Devices::Bluetooth::IBluetoothLEDevice3, Windows::Devices::Bluetooth::IBluetoothLEDevice4, Windows::Devices::Bluetooth::IBluetoothLEDevice5> {};
template<> struct def<Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter> : interface_type<> {};
template<> struct def<Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter> : class_type<Platform::Object, Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter> {};

// uuids

template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothAdapterStatics> { define_guid(0x8B02FB6A, 0xAC4C, 0x4741, 0x86, 0x61, 0x8E, 0xAB, 0x7D, 0x17, 0xEA, 0x9F);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothAdapter2> { define_guid(0xAC94CECC, 0x24D5, 0x41B3, 0x91, 0x6D, 0x10, 0x97, 0xC5, 0xB, 0x10, 0x2B);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothAdapter> { define_guid(0x7974F04C, 0x5F7A, 0x4A34, 0x92, 0x25, 0xA8, 0x55, 0xF8, 0x4B, 0x1A, 0x8B);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDeviceIdStatics> { define_guid(0xA7884E67, 0x3EFB, 0x4F31, 0xBB, 0xC2, 0x81, 0xE, 0x9, 0x97, 0x74, 0x4);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDeviceId> { define_guid(0xC17949AF, 0x57C1, 0x4642, 0xBC, 0xCE, 0xE6, 0xC0, 0x6B, 0x20, 0xAE, 0x76);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothUuidHelperStatics> { define_guid(0x17DF0CD8, 0xCF74, 0x4B21, 0xAF, 0xE6, 0xF5, 0x7A, 0x11, 0xBC, 0xDE, 0xA0);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDeviceStatics> { define_guid(0x991DF51, 0x57DB, 0x4725, 0xBB, 0xD7, 0x84, 0xF6, 0x43, 0x27, 0xEC, 0x2C);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDeviceStatics2> { define_guid(0xC29E8E2F, 0x4E14, 0x4477, 0xAA, 0x1B, 0xB8, 0xB4, 0x7E, 0x5B, 0x7E, 0xCE);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDevice5> { define_guid(0xB5E0B385, 0x5E85, 0x4559, 0xA1, 0xD, 0x1C, 0x72, 0x81, 0x37, 0x9F, 0x96);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDevice4> { define_guid(0x817C34AD, 0xE9C, 0x42B2, 0xA8, 0xDC, 0x3E, 0x80, 0x94, 0x94, 0xD, 0x12);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDevice> { define_guid(0x2335B156, 0x90D2, 0x4A04, 0xAE, 0xF5, 0xE, 0x20, 0xB9, 0xE6, 0xB7, 0x7);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDevice2> { define_guid(0x133F954, 0xB156, 0x4DD0, 0xB1, 0xF5, 0xC1, 0x1B, 0xC3, 0x1A, 0x51, 0x63);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothDevice3> { define_guid(0x57FFF78B, 0x651A, 0x4454, 0xB9, 0xF, 0xEB, 0x21, 0xEF, 0xB, 0xD, 0x71);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothClassOfDeviceStatics> { define_guid(0xE46135BD, 0xFA2, 0x416C, 0x91, 0xB4, 0xC1, 0xE4, 0x8C, 0xA0, 0x61, 0xC1);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothClassOfDevice> { define_guid(0xD640227E, 0xD7D7, 0x4661, 0x94, 0x54, 0x65, 0x3, 0x9C, 0xA1, 0x7A, 0x2B);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEAppearanceCategoriesStatics> { define_guid(0x6D4D54FE, 0x46A, 0x4185, 0xAA, 0xB6, 0x82, 0x4C, 0xF0, 0x61, 0x8, 0x61);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEAppearanceSubcategoriesStatics> { define_guid(0xE57BA606, 0x2144, 0x415A, 0x83, 0x12, 0x71, 0xCC, 0xF2, 0x91, 0xF8, 0xD1);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEAppearance> { define_guid(0x5D2079F2, 0x66A8, 0x4258, 0x98, 0x5E, 0x2, 0xB4, 0xD9, 0x50, 0x9F, 0x18);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEAppearanceStatics> { define_guid(0xA193C0C7, 0x4504, 0x4F4A, 0x9B, 0xA5, 0xCD, 0x10, 0x54, 0xE5, 0xE0, 0x65);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics> { define_guid(0xC8CF1A19, 0xF0B6, 0x4BF0, 0x86, 0x89, 0x41, 0x30, 0x3D, 0xE2, 0xD9, 0xF4);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics2> { define_guid(0x5F12C06B, 0x3BAC, 0x43E8, 0xAD, 0x16, 0x56, 0x32, 0x71, 0xBD, 0x41, 0xC2);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEDevice5> { define_guid(0x9D6A1260, 0x5287, 0x458E, 0x95, 0xBA, 0x17, 0xC8, 0xB7, 0xBB, 0x32, 0x6E);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEDevice4> { define_guid(0x2B605031, 0x2248, 0x4B2F, 0xAC, 0xF0, 0x7C, 0xEE, 0x36, 0xFC, 0x58, 0x70);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEDevice3> { define_guid(0xAEE9E493, 0x44AC, 0x40DC, 0xAF, 0x33, 0xB2, 0xC1, 0x3C, 0x1, 0xCA, 0x46);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEDevice> { define_guid(0xB5EE2F7B, 0x4AD8, 0x4642, 0xAC, 0x48, 0x80, 0xA0, 0xB5, 0x0, 0xE8, 0x87);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothLEDevice2> { define_guid(0x26F062B3, 0x7AEE, 0x4D31, 0xBA, 0xBA, 0xB1, 0xB9, 0x77, 0x5F, 0x59, 0x16);};
template<> struct uuid<Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter> { define_guid(0xDF7B7391, 0x6BB5, 0x4CFE, 0x90, 0xB1, 0x5D, 0x73, 0x24, 0xED, 0xCF, 0x7F);};

// types

namespace Windows { namespace Devices { namespace Bluetooth {

// IBluetoothAdapterStatics
struct IBluetoothAdapterStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<BluetoothAdapter*>* *operation);
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<BluetoothAdapter*>* *operation);
};

// IBluetoothAdapter2
struct IBluetoothAdapter2_raw : IInspectable {
	virtual STDMETHODIMP _get_AreClassicSecureConnectionsSupported(bool *value);
	virtual STDMETHODIMP _get_AreLowEnergySecureConnectionsSupported(bool *value);
};
template<typename X> struct IBluetoothAdapter2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothAdapter2_adaptor::AreClassicSecureConnectionsSupported)->_get_AreClassicSecureConnectionsSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AreClassicSecureConnectionsSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothAdapter2_adaptor::AreLowEnergySecureConnectionsSupported)->_get_AreLowEnergySecureConnectionsSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} AreLowEnergySecureConnectionsSupported;
	};
	IBluetoothAdapter2_adaptor() {}
};
template<typename X> struct adapt<IBluetoothAdapter2, X> : Windows::Devices::Bluetooth::IBluetoothAdapter2_adaptor<X> { typedef adapt IBluetoothAdapter2; };
struct IBluetoothAdapter2 : IBluetoothAdapter2_raw, generate<IBluetoothAdapter2> {};

// IBluetoothAdapter
struct IBluetoothAdapter_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_BluetoothAddress(unsigned __int64 *value);
	virtual STDMETHODIMP _get_IsClassicSupported(bool *value);
	virtual STDMETHODIMP _get_IsLowEnergySupported(bool *value);
	virtual STDMETHODIMP _get_IsPeripheralRoleSupported(bool *value);
	virtual STDMETHODIMP _get_IsCentralRoleSupported(bool *value);
	virtual STDMETHODIMP _get_IsAdvertisementOffloadSupported(bool *value);
	virtual STDMETHODIMP _GetRadioAsync(Foundation::IAsyncOperation<Radios::Radio*>* *operation);
};
template<typename X> struct IBluetoothAdapter_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IBluetoothAdapter_adaptor::BluetoothAddress)->_get_BluetoothAddress(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BluetoothAddress;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBluetoothAdapter_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothAdapter_adaptor::IsAdvertisementOffloadSupported)->_get_IsAdvertisementOffloadSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAdvertisementOffloadSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothAdapter_adaptor::IsCentralRoleSupported)->_get_IsCentralRoleSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCentralRoleSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothAdapter_adaptor::IsClassicSupported)->_get_IsClassicSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsClassicSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothAdapter_adaptor::IsLowEnergySupported)->_get_IsLowEnergySupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsLowEnergySupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothAdapter_adaptor::IsPeripheralRoleSupported)->_get_IsPeripheralRoleSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPeripheralRoleSupported;
	};
	ptr<Foundation::IAsyncOperation<ptr<Radios::Radio>>> GetRadioAsync() { Foundation::IAsyncOperation<Radios::Radio*>* operation; hrcheck(X::get()->_GetRadioAsync(&operation)); return from_abi(operation); }
	IBluetoothAdapter_adaptor() {}
};
template<typename X> struct adapt<IBluetoothAdapter, X> : Windows::Devices::Bluetooth::IBluetoothAdapter_adaptor<X> { typedef adapt IBluetoothAdapter; };
struct IBluetoothAdapter : IBluetoothAdapter_raw, generate<IBluetoothAdapter> {};

// BluetoothAdapter
template<typename> struct BluetoothAdapter_statics {
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<BluetoothAdapter, IBluetoothAdapterStatics>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothAdapter>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<BluetoothAdapter*>* operation; hrcheck(get_activation_factory<BluetoothAdapter, IBluetoothAdapterStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothAdapter>>> GetDefaultAsync() { Foundation::IAsyncOperation<BluetoothAdapter*>* operation; hrcheck(get_activation_factory<BluetoothAdapter, IBluetoothAdapterStatics>()->_GetDefaultAsync(&operation)); return from_abi(operation); }
};

template<typename X> struct statics<BluetoothAdapter, X> : X, Windows::Devices::Bluetooth::BluetoothAdapter_statics<void> {
	typedef typename X::root_type BluetoothAdapter;
};
struct BluetoothAdapter : generate<BluetoothAdapter> {};

// IBluetoothDeviceIdStatics
struct IBluetoothDeviceIdStatics : IInspectable {
	virtual STDMETHODIMP _FromId(HSTRING deviceId, BluetoothDeviceId* *result);
};

// IBluetoothDeviceId
struct IBluetoothDeviceId_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_IsClassicDevice(bool *value);
	virtual STDMETHODIMP _get_IsLowEnergyDevice(bool *value);
};
template<typename X> struct IBluetoothDeviceId_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBluetoothDeviceId_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothDeviceId_adaptor::IsClassicDevice)->_get_IsClassicDevice(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsClassicDevice;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothDeviceId_adaptor::IsLowEnergyDevice)->_get_IsLowEnergyDevice(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsLowEnergyDevice;
	};
	IBluetoothDeviceId_adaptor() {}
};
template<typename X> struct adapt<IBluetoothDeviceId, X> : Windows::Devices::Bluetooth::IBluetoothDeviceId_adaptor<X> { typedef adapt IBluetoothDeviceId; };
struct IBluetoothDeviceId : IBluetoothDeviceId_raw, generate<IBluetoothDeviceId> {};

// BluetoothDeviceId
template<typename> struct BluetoothDeviceId_statics {
	static ptr<BluetoothDeviceId> FromId(hstring_ref deviceId) { BluetoothDeviceId* result; hrcheck(get_activation_factory<BluetoothDeviceId, IBluetoothDeviceIdStatics>()->_FromId(deviceId, &result)); return from_abi(result); }
};

template<typename X> struct statics<BluetoothDeviceId, X> : X, Windows::Devices::Bluetooth::BluetoothDeviceId_statics<void> {
	typedef typename X::root_type BluetoothDeviceId;
};
struct BluetoothDeviceId : generate<BluetoothDeviceId> {};

// IBluetoothUuidHelperStatics
struct IBluetoothUuidHelperStatics : IInspectable {
	virtual STDMETHODIMP _FromShortId(unsigned shortId, Platform::Guid *result);
	virtual STDMETHODIMP _TryGetShortId(Platform::Guid uuid, Foundation::IReference<unsigned>* *result);
};

// BluetoothUuidHelper
template<typename> struct BluetoothUuidHelper_statics {
	static Platform::Guid FromShortId(unsigned shortId) { Platform::Guid result; hrcheck(get_activation_factory<BluetoothUuidHelper, IBluetoothUuidHelperStatics>()->_FromShortId(shortId, &result)); return result; }
	static ptr<Foundation::IReference<unsigned>> TryGetShortId(const Platform::Guid& uuid) { Foundation::IReference<unsigned>* result; hrcheck(get_activation_factory<BluetoothUuidHelper, IBluetoothUuidHelperStatics>()->_TryGetShortId(uuid, &result)); return from_abi(result); }
};

template<typename X> struct statics<BluetoothUuidHelper, X> : X, Windows::Devices::Bluetooth::BluetoothUuidHelper_statics<void> {
	typedef typename X::root_type BluetoothUuidHelper;
};
struct BluetoothUuidHelper : generate<BluetoothUuidHelper> {};

// IBluetoothDeviceStatics
struct IBluetoothDeviceStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<BluetoothDevice*>* *operation);
	virtual STDMETHODIMP _FromHostNameAsync(Networking::HostName* hostName, Foundation::IAsyncOperation<BluetoothDevice*>* *operation);
	virtual STDMETHODIMP _FromBluetoothAddressAsync(unsigned __int64 address, Foundation::IAsyncOperation<BluetoothDevice*>* *operation);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *deviceSelector);
};

// IBluetoothDeviceStatics2
struct IBluetoothDeviceStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelectorFromPairingState(bool pairingState, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromConnectionStatus(BluetoothConnectionStatus connectionStatus, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromDeviceName(HSTRING deviceName, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromBluetoothAddress(unsigned __int64 bluetoothAddress, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromClassOfDevice(BluetoothClassOfDevice* classOfDevice, HSTRING *deviceSelector);
};

// IBluetoothDevice5
struct IBluetoothDevice5_raw : IInspectable {
	virtual STDMETHODIMP _get_WasSecureConnectionUsedForPairing(bool *value);
};
template<typename X> struct IBluetoothDevice5_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothDevice5_adaptor::WasSecureConnectionUsedForPairing)->_get_WasSecureConnectionUsedForPairing(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} WasSecureConnectionUsedForPairing;
	};
	IBluetoothDevice5_adaptor() {}
};
template<typename X> struct adapt<IBluetoothDevice5, X> : Windows::Devices::Bluetooth::IBluetoothDevice5_adaptor<X> { typedef adapt IBluetoothDevice5; };
struct IBluetoothDevice5 : IBluetoothDevice5_raw, generate<IBluetoothDevice5> {};

// IBluetoothDevice4
struct IBluetoothDevice4_raw : IInspectable {
	virtual STDMETHODIMP _get_BluetoothDeviceId(Bluetooth::BluetoothDeviceId* *value);
};
template<typename X> struct IBluetoothDevice4_adaptor : X {
	union {
		struct : property {
			ptr<Bluetooth::BluetoothDeviceId> get() { Bluetooth::BluetoothDeviceId* value; hrcheck(enc(&IBluetoothDevice4_adaptor::BluetoothDeviceId)->_get_BluetoothDeviceId(&value)); return from_abi(value); }
			ptr<Bluetooth::BluetoothDeviceId> operator()() { return get(); }
			operator ptr<Bluetooth::BluetoothDeviceId> () { return get(); }
			ptr<Bluetooth::BluetoothDeviceId> operator->() { return get(); }
		} BluetoothDeviceId;
	};
	IBluetoothDevice4_adaptor() {}
};
template<typename X> struct adapt<IBluetoothDevice4, X> : Windows::Devices::Bluetooth::IBluetoothDevice4_adaptor<X> { typedef adapt IBluetoothDevice4; };
struct IBluetoothDevice4 : IBluetoothDevice4_raw, generate<IBluetoothDevice4> {};

// IBluetoothDevice
struct IBluetoothDevice_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_HostName(Networking::HostName* *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_ClassOfDevice(BluetoothClassOfDevice* *value);
	virtual STDMETHODIMP _get_SdpRecords(Foundation::Collections::IVectorView<Storage::Streams::IBuffer*>* *value);
	virtual STDMETHODIMP _get_RfcommServices(Foundation::Collections::IVectorView<Rfcomm::RfcommDeviceService*>* *value);
	virtual STDMETHODIMP _get_ConnectionStatus(BluetoothConnectionStatus *value);
	virtual STDMETHODIMP _get_BluetoothAddress(unsigned __int64 *value);
	virtual STDMETHODIMP _add_NameChanged(Foundation::TypedEventHandler<BluetoothDevice*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NameChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SdpRecordsChanged(Foundation::TypedEventHandler<BluetoothDevice*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SdpRecordsChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ConnectionStatusChanged(Foundation::TypedEventHandler<BluetoothDevice*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ConnectionStatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBluetoothDevice_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IBluetoothDevice_adaptor::BluetoothAddress)->_get_BluetoothAddress(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BluetoothAddress;
		struct : property {
			ptr<BluetoothClassOfDevice> get() { BluetoothClassOfDevice* value; hrcheck(enc(&IBluetoothDevice_adaptor::ClassOfDevice)->_get_ClassOfDevice(&value)); return from_abi(value); }
			ptr<BluetoothClassOfDevice> operator()() { return get(); }
			operator ptr<BluetoothClassOfDevice> () { return get(); }
			ptr<BluetoothClassOfDevice> operator->() { return get(); }
		} ClassOfDevice;
		struct : property {
			BluetoothConnectionStatus get() { BluetoothConnectionStatus value; hrcheck(enc(&IBluetoothDevice_adaptor::ConnectionStatus)->_get_ConnectionStatus(&value)); return value; }
			BluetoothConnectionStatus operator()() { return get(); }
			operator BluetoothConnectionStatus () { return get(); }
		} ConnectionStatus;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBluetoothDevice_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			ptr<Networking::HostName> get() { Networking::HostName* value; hrcheck(enc(&IBluetoothDevice_adaptor::HostName)->_get_HostName(&value)); return from_abi(value); }
			ptr<Networking::HostName> operator()() { return get(); }
			operator ptr<Networking::HostName> () { return get(); }
			ptr<Networking::HostName> operator->() { return get(); }
		} HostName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBluetoothDevice_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Rfcomm::RfcommDeviceService>>> get() { Foundation::Collections::IVectorView<Rfcomm::RfcommDeviceService*>* value; hrcheck(enc(&IBluetoothDevice_adaptor::RfcommServices)->_get_RfcommServices(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Rfcomm::RfcommDeviceService>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Rfcomm::RfcommDeviceService>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Rfcomm::RfcommDeviceService>>> operator->() { return get(); }
		} RfcommServices;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<Storage::Streams::IBuffer>>> get() { Foundation::Collections::IVectorView<Storage::Streams::IBuffer*>* value; hrcheck(enc(&IBluetoothDevice_adaptor::SdpRecords)->_get_SdpRecords(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<Storage::Streams::IBuffer>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<Storage::Streams::IBuffer>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<Storage::Streams::IBuffer>>> operator->() { return get(); }
		} SdpRecords;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothDevice>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothDevice_adaptor::ConnectionStatusChanged)->_add_ConnectionStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothDevice_adaptor::ConnectionStatusChanged)->_remove_ConnectionStatusChanged(token)); }
		} ConnectionStatusChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothDevice>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothDevice_adaptor::NameChanged)->_add_NameChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothDevice_adaptor::NameChanged)->_remove_NameChanged(token)); }
		} NameChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothDevice>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothDevice_adaptor::SdpRecordsChanged)->_add_SdpRecordsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothDevice_adaptor::SdpRecordsChanged)->_remove_SdpRecordsChanged(token)); }
		} SdpRecordsChanged;
	};
	IBluetoothDevice_adaptor() {}
};
template<typename X> struct adapt<IBluetoothDevice, X> : Windows::Devices::Bluetooth::IBluetoothDevice_adaptor<X> { typedef adapt IBluetoothDevice; };
struct IBluetoothDevice : IBluetoothDevice_raw, generate<IBluetoothDevice> {};

// IBluetoothDevice2
struct IBluetoothDevice2_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceInformation(Enumeration::DeviceInformation* *value);
};
template<typename X> struct IBluetoothDevice2_adaptor : X {
	union {
		struct : property {
			ptr<Enumeration::DeviceInformation> get() { Enumeration::DeviceInformation* value; hrcheck(enc(&IBluetoothDevice2_adaptor::DeviceInformation)->_get_DeviceInformation(&value)); return from_abi(value); }
			ptr<Enumeration::DeviceInformation> operator()() { return get(); }
			operator ptr<Enumeration::DeviceInformation> () { return get(); }
			ptr<Enumeration::DeviceInformation> operator->() { return get(); }
		} DeviceInformation;
	};
	IBluetoothDevice2_adaptor() {}
};
template<typename X> struct adapt<IBluetoothDevice2, X> : Windows::Devices::Bluetooth::IBluetoothDevice2_adaptor<X> { typedef adapt IBluetoothDevice2; };
struct IBluetoothDevice2 : IBluetoothDevice2_raw, generate<IBluetoothDevice2> {};

// IBluetoothDevice3
struct IBluetoothDevice3_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceAccessInformation(Enumeration::DeviceAccessInformation* *value);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>* *value);
	virtual STDMETHODIMP _GetRfcommServicesAsync(Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* *operation);
	virtual STDMETHODIMP _GetRfcommServicesWithCacheModeAsync(BluetoothCacheMode cacheMode, Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* *operation);
	virtual STDMETHODIMP _GetRfcommServicesForIdAsync(Rfcomm::RfcommServiceId* serviceId, Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* *operation);
	virtual STDMETHODIMP _GetRfcommServicesForIdWithCacheModeAsync(Rfcomm::RfcommServiceId* serviceId, BluetoothCacheMode cacheMode, Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* *operation);
};
template<typename X> struct IBluetoothDevice3_adaptor : X {
	union {
		struct : property {
			ptr<Enumeration::DeviceAccessInformation> get() { Enumeration::DeviceAccessInformation* value; hrcheck(enc(&IBluetoothDevice3_adaptor::DeviceAccessInformation)->_get_DeviceAccessInformation(&value)); return from_abi(value); }
			ptr<Enumeration::DeviceAccessInformation> operator()() { return get(); }
			operator ptr<Enumeration::DeviceAccessInformation> () { return get(); }
			ptr<Enumeration::DeviceAccessInformation> operator->() { return get(); }
		} DeviceAccessInformation;
	};
	ptr<Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>* value; hrcheck(X::get()->_RequestAccessAsync(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<Rfcomm::RfcommDeviceServicesResult>>> GetRfcommServicesAsync() { Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* operation; hrcheck(X::get()->_GetRfcommServicesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Rfcomm::RfcommDeviceServicesResult>>> GetRfcommServicesAsync(BluetoothCacheMode cacheMode) { Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* operation; hrcheck(X::get()->_GetRfcommServicesWithCacheModeAsync(cacheMode, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Rfcomm::RfcommDeviceServicesResult>>> GetRfcommServicesForIdAsync(pptr<Rfcomm::RfcommServiceId> serviceId) { Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* operation; hrcheck(X::get()->_GetRfcommServicesForIdAsync(serviceId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Rfcomm::RfcommDeviceServicesResult>>> GetRfcommServicesForIdAsync(pptr<Rfcomm::RfcommServiceId> serviceId, BluetoothCacheMode cacheMode) { Foundation::IAsyncOperation<Rfcomm::RfcommDeviceServicesResult*>* operation; hrcheck(X::get()->_GetRfcommServicesForIdWithCacheModeAsync(serviceId, cacheMode, &operation)); return from_abi(operation); }
	IBluetoothDevice3_adaptor() {}
};
template<typename X> struct adapt<IBluetoothDevice3, X> : Windows::Devices::Bluetooth::IBluetoothDevice3_adaptor<X> { typedef adapt IBluetoothDevice3; };
struct IBluetoothDevice3 : IBluetoothDevice3_raw, generate<IBluetoothDevice3> {};

// BluetoothDevice
template<typename> struct BluetoothDevice_statics {
	static hstring GetDeviceSelectorFromPairingState(bool pairingState) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics2>()->_GetDeviceSelectorFromPairingState(pairingState, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromConnectionStatus(BluetoothConnectionStatus connectionStatus) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics2>()->_GetDeviceSelectorFromConnectionStatus(connectionStatus, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromDeviceName(hstring_ref deviceName) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics2>()->_GetDeviceSelectorFromDeviceName(deviceName, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromBluetoothAddress(unsigned __int64 bluetoothAddress) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics2>()->_GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromClassOfDevice(pptr<BluetoothClassOfDevice> classOfDevice) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics2>()->_GetDeviceSelectorFromClassOfDevice(classOfDevice, &deviceSelector)); return from_abi(deviceSelector); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothDevice>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<BluetoothDevice*>* operation; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothDevice>>> FromHostNameAsync(pptr<Networking::HostName> hostName) { Foundation::IAsyncOperation<BluetoothDevice*>* operation; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics>()->_FromHostNameAsync(hostName, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothDevice>>> FromBluetoothAddressAsync(unsigned __int64 address) { Foundation::IAsyncOperation<BluetoothDevice*>* operation; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics>()->_FromBluetoothAddressAsync(address, &operation)); return from_abi(operation); }
	static hstring GetDeviceSelector() { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothDevice, IBluetoothDeviceStatics>()->_GetDeviceSelector(&deviceSelector)); return from_abi(deviceSelector); }
};

template<typename X> struct statics<BluetoothDevice, X> : X, Windows::Devices::Bluetooth::BluetoothDevice_statics<void> {
	typedef typename X::root_type BluetoothDevice;
};
struct BluetoothDevice : generate<BluetoothDevice> {
	using IBluetoothDevice3::GetRfcommServicesAsync;
	using IBluetoothDevice3::GetRfcommServicesForIdAsync;
};

// IBluetoothClassOfDeviceStatics
struct IBluetoothClassOfDeviceStatics : IInspectable {
	virtual STDMETHODIMP _FromRawValue(unsigned rawValue, BluetoothClassOfDevice* *classOfDevice);
	virtual STDMETHODIMP _FromParts(BluetoothMajorClass majorClass, BluetoothMinorClass minorClass, BluetoothServiceCapabilities serviceCapabilities, BluetoothClassOfDevice* *classOfDevice);
};

// IBluetoothClassOfDevice
struct IBluetoothClassOfDevice_raw : IInspectable {
	virtual STDMETHODIMP _get_RawValue(unsigned *value);
	virtual STDMETHODIMP _get_MajorClass(BluetoothMajorClass *value);
	virtual STDMETHODIMP _get_MinorClass(BluetoothMinorClass *value);
	virtual STDMETHODIMP _get_ServiceCapabilities(BluetoothServiceCapabilities *value);
};
template<typename X> struct IBluetoothClassOfDevice_adaptor : X {
	union {
		struct : property {
			BluetoothMajorClass get() { BluetoothMajorClass value; hrcheck(enc(&IBluetoothClassOfDevice_adaptor::MajorClass)->_get_MajorClass(&value)); return value; }
			BluetoothMajorClass operator()() { return get(); }
			operator BluetoothMajorClass () { return get(); }
		} MajorClass;
		struct : property {
			BluetoothMinorClass get() { BluetoothMinorClass value; hrcheck(enc(&IBluetoothClassOfDevice_adaptor::MinorClass)->_get_MinorClass(&value)); return value; }
			BluetoothMinorClass operator()() { return get(); }
			operator BluetoothMinorClass () { return get(); }
		} MinorClass;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBluetoothClassOfDevice_adaptor::RawValue)->_get_RawValue(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} RawValue;
		struct : property {
			BluetoothServiceCapabilities get() { BluetoothServiceCapabilities value; hrcheck(enc(&IBluetoothClassOfDevice_adaptor::ServiceCapabilities)->_get_ServiceCapabilities(&value)); return value; }
			BluetoothServiceCapabilities operator()() { return get(); }
			operator BluetoothServiceCapabilities () { return get(); }
		} ServiceCapabilities;
	};
	IBluetoothClassOfDevice_adaptor() {}
};
template<typename X> struct adapt<IBluetoothClassOfDevice, X> : Windows::Devices::Bluetooth::IBluetoothClassOfDevice_adaptor<X> { typedef adapt IBluetoothClassOfDevice; };
struct IBluetoothClassOfDevice : IBluetoothClassOfDevice_raw, generate<IBluetoothClassOfDevice> {};

// BluetoothClassOfDevice
template<typename> struct BluetoothClassOfDevice_statics {
	static ptr<BluetoothClassOfDevice> FromRawValue(unsigned rawValue) { BluetoothClassOfDevice* classOfDevice; hrcheck(get_activation_factory<BluetoothClassOfDevice, IBluetoothClassOfDeviceStatics>()->_FromRawValue(rawValue, &classOfDevice)); return from_abi(classOfDevice); }
	static ptr<BluetoothClassOfDevice> FromParts(BluetoothMajorClass majorClass, BluetoothMinorClass minorClass, BluetoothServiceCapabilities serviceCapabilities) { BluetoothClassOfDevice* classOfDevice; hrcheck(get_activation_factory<BluetoothClassOfDevice, IBluetoothClassOfDeviceStatics>()->_FromParts(majorClass, minorClass, serviceCapabilities, &classOfDevice)); return from_abi(classOfDevice); }
};

template<typename X> struct statics<BluetoothClassOfDevice, X> : X, Windows::Devices::Bluetooth::BluetoothClassOfDevice_statics<void> {
	typedef typename X::root_type BluetoothClassOfDevice;
};
struct BluetoothClassOfDevice : generate<BluetoothClassOfDevice> {};

// IBluetoothLEAppearanceCategoriesStatics
struct IBluetoothLEAppearanceCategoriesStatics : IInspectable {
	virtual STDMETHODIMP _get_Uncategorized(unsigned short *value);
	virtual STDMETHODIMP _get_Phone(unsigned short *value);
	virtual STDMETHODIMP _get_Computer(unsigned short *value);
	virtual STDMETHODIMP _get_Watch(unsigned short *value);
	virtual STDMETHODIMP _get_Clock(unsigned short *value);
	virtual STDMETHODIMP _get_Display(unsigned short *value);
	virtual STDMETHODIMP _get_RemoteControl(unsigned short *value);
	virtual STDMETHODIMP _get_EyeGlasses(unsigned short *value);
	virtual STDMETHODIMP _get_Tag(unsigned short *value);
	virtual STDMETHODIMP _get_Keyring(unsigned short *value);
	virtual STDMETHODIMP _get_MediaPlayer(unsigned short *value);
	virtual STDMETHODIMP _get_BarcodeScanner(unsigned short *value);
	virtual STDMETHODIMP _get_Thermometer(unsigned short *value);
	virtual STDMETHODIMP _get_HeartRate(unsigned short *value);
	virtual STDMETHODIMP _get_BloodPressure(unsigned short *value);
	virtual STDMETHODIMP _get_HumanInterfaceDevice(unsigned short *value);
	virtual STDMETHODIMP _get_GlucoseMeter(unsigned short *value);
	virtual STDMETHODIMP _get_RunningWalking(unsigned short *value);
	virtual STDMETHODIMP _get_Cycling(unsigned short *value);
	virtual STDMETHODIMP _get_PulseOximeter(unsigned short *value);
	virtual STDMETHODIMP _get_WeightScale(unsigned short *value);
	virtual STDMETHODIMP _get_OutdoorSportActivity(unsigned short *value);
};

// BluetoothLEAppearanceCategories
template<typename> struct BluetoothLEAppearanceCategories_statics {
	static struct _BarcodeScanner : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_BarcodeScanner(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} BarcodeScanner;
	static struct _BloodPressure : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_BloodPressure(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} BloodPressure;
	static struct _Clock : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Clock(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Clock;
	static struct _Computer : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Computer(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Computer;
	static struct _Cycling : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Cycling(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Cycling;
	static struct _Display : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Display(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Display;
	static struct _EyeGlasses : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_EyeGlasses(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} EyeGlasses;
	static struct _GlucoseMeter : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_GlucoseMeter(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} GlucoseMeter;
	static struct _HeartRate : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_HeartRate(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} HeartRate;
	static struct _HumanInterfaceDevice : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_HumanInterfaceDevice(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} HumanInterfaceDevice;
	static struct _Keyring : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Keyring(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Keyring;
	static struct _MediaPlayer : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_MediaPlayer(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} MediaPlayer;
	static struct _OutdoorSportActivity : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_OutdoorSportActivity(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} OutdoorSportActivity;
	static struct _Phone : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Phone(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Phone;
	static struct _PulseOximeter : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_PulseOximeter(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} PulseOximeter;
	static struct _RemoteControl : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_RemoteControl(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} RemoteControl;
	static struct _RunningWalking : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_RunningWalking(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} RunningWalking;
	static struct _Tag : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Tag(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Tag;
	static struct _Thermometer : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Thermometer(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Thermometer;
	static struct _Uncategorized : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Uncategorized(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Uncategorized;
	static struct _Watch : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_Watch(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Watch;
	static struct _WeightScale : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>()->_get_WeightScale(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} WeightScale;
};
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_BarcodeScanner BluetoothLEAppearanceCategories_statics<X>::BarcodeScanner;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_BloodPressure BluetoothLEAppearanceCategories_statics<X>::BloodPressure;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Clock BluetoothLEAppearanceCategories_statics<X>::Clock;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Computer BluetoothLEAppearanceCategories_statics<X>::Computer;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Cycling BluetoothLEAppearanceCategories_statics<X>::Cycling;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Display BluetoothLEAppearanceCategories_statics<X>::Display;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_EyeGlasses BluetoothLEAppearanceCategories_statics<X>::EyeGlasses;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_GlucoseMeter BluetoothLEAppearanceCategories_statics<X>::GlucoseMeter;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_HeartRate BluetoothLEAppearanceCategories_statics<X>::HeartRate;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_HumanInterfaceDevice BluetoothLEAppearanceCategories_statics<X>::HumanInterfaceDevice;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Keyring BluetoothLEAppearanceCategories_statics<X>::Keyring;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_MediaPlayer BluetoothLEAppearanceCategories_statics<X>::MediaPlayer;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_OutdoorSportActivity BluetoothLEAppearanceCategories_statics<X>::OutdoorSportActivity;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Phone BluetoothLEAppearanceCategories_statics<X>::Phone;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_PulseOximeter BluetoothLEAppearanceCategories_statics<X>::PulseOximeter;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_RemoteControl BluetoothLEAppearanceCategories_statics<X>::RemoteControl;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_RunningWalking BluetoothLEAppearanceCategories_statics<X>::RunningWalking;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Tag BluetoothLEAppearanceCategories_statics<X>::Tag;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Thermometer BluetoothLEAppearanceCategories_statics<X>::Thermometer;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Uncategorized BluetoothLEAppearanceCategories_statics<X>::Uncategorized;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_Watch BluetoothLEAppearanceCategories_statics<X>::Watch;
template<typename X> typename BluetoothLEAppearanceCategories_statics<X>::_WeightScale BluetoothLEAppearanceCategories_statics<X>::WeightScale;

template<typename X> struct statics<BluetoothLEAppearanceCategories, X> : X, Windows::Devices::Bluetooth::BluetoothLEAppearanceCategories_statics<void> {
	typedef typename X::root_type BluetoothLEAppearanceCategories;
};
struct BluetoothLEAppearanceCategories : generate<BluetoothLEAppearanceCategories> {};

// IBluetoothLEAppearanceSubcategoriesStatics
struct IBluetoothLEAppearanceSubcategoriesStatics : IInspectable {
	virtual STDMETHODIMP _get_Generic(unsigned short *value);
	virtual STDMETHODIMP _get_SportsWatch(unsigned short *value);
	virtual STDMETHODIMP _get_ThermometerEar(unsigned short *value);
	virtual STDMETHODIMP _get_HeartRateBelt(unsigned short *value);
	virtual STDMETHODIMP _get_BloodPressureArm(unsigned short *value);
	virtual STDMETHODIMP _get_BloodPressureWrist(unsigned short *value);
	virtual STDMETHODIMP _get_Keyboard(unsigned short *value);
	virtual STDMETHODIMP _get_Mouse(unsigned short *value);
	virtual STDMETHODIMP _get_Joystick(unsigned short *value);
	virtual STDMETHODIMP _get_Gamepad(unsigned short *value);
	virtual STDMETHODIMP _get_DigitizerTablet(unsigned short *value);
	virtual STDMETHODIMP _get_CardReader(unsigned short *value);
	virtual STDMETHODIMP _get_DigitalPen(unsigned short *value);
	virtual STDMETHODIMP _get_BarcodeScanner(unsigned short *value);
	virtual STDMETHODIMP _get_RunningWalkingInShoe(unsigned short *value);
	virtual STDMETHODIMP _get_RunningWalkingOnShoe(unsigned short *value);
	virtual STDMETHODIMP _get_RunningWalkingOnHip(unsigned short *value);
	virtual STDMETHODIMP _get_CyclingComputer(unsigned short *value);
	virtual STDMETHODIMP _get_CyclingSpeedSensor(unsigned short *value);
	virtual STDMETHODIMP _get_CyclingCadenceSensor(unsigned short *value);
	virtual STDMETHODIMP _get_CyclingPowerSensor(unsigned short *value);
	virtual STDMETHODIMP _get_CyclingSpeedCadenceSensor(unsigned short *value);
	virtual STDMETHODIMP _get_OximeterFingertip(unsigned short *value);
	virtual STDMETHODIMP _get_OximeterWristWorn(unsigned short *value);
	virtual STDMETHODIMP _get_LocationDisplay(unsigned short *value);
	virtual STDMETHODIMP _get_LocationNavigationDisplay(unsigned short *value);
	virtual STDMETHODIMP _get_LocationPod(unsigned short *value);
	virtual STDMETHODIMP _get_LocationNavigationPod(unsigned short *value);
};

// BluetoothLEAppearanceSubcategories
template<typename> struct BluetoothLEAppearanceSubcategories_statics {
	static struct _BarcodeScanner : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_BarcodeScanner(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} BarcodeScanner;
	static struct _BloodPressureArm : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_BloodPressureArm(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} BloodPressureArm;
	static struct _BloodPressureWrist : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_BloodPressureWrist(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} BloodPressureWrist;
	static struct _CardReader : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_CardReader(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} CardReader;
	static struct _CyclingCadenceSensor : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_CyclingCadenceSensor(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} CyclingCadenceSensor;
	static struct _CyclingComputer : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_CyclingComputer(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} CyclingComputer;
	static struct _CyclingPowerSensor : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_CyclingPowerSensor(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} CyclingPowerSensor;
	static struct _CyclingSpeedCadenceSensor : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_CyclingSpeedCadenceSensor(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} CyclingSpeedCadenceSensor;
	static struct _CyclingSpeedSensor : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_CyclingSpeedSensor(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} CyclingSpeedSensor;
	static struct _DigitalPen : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_DigitalPen(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} DigitalPen;
	static struct _DigitizerTablet : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_DigitizerTablet(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} DigitizerTablet;
	static struct _Gamepad : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_Gamepad(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Gamepad;
	static struct _Generic : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_Generic(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Generic;
	static struct _HeartRateBelt : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_HeartRateBelt(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} HeartRateBelt;
	static struct _Joystick : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_Joystick(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Joystick;
	static struct _Keyboard : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_Keyboard(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Keyboard;
	static struct _LocationDisplay : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_LocationDisplay(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} LocationDisplay;
	static struct _LocationNavigationDisplay : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_LocationNavigationDisplay(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} LocationNavigationDisplay;
	static struct _LocationNavigationPod : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_LocationNavigationPod(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} LocationNavigationPod;
	static struct _LocationPod : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_LocationPod(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} LocationPod;
	static struct _Mouse : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_Mouse(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} Mouse;
	static struct _OximeterFingertip : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_OximeterFingertip(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} OximeterFingertip;
	static struct _OximeterWristWorn : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_OximeterWristWorn(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} OximeterWristWorn;
	static struct _RunningWalkingInShoe : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_RunningWalkingInShoe(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} RunningWalkingInShoe;
	static struct _RunningWalkingOnHip : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_RunningWalkingOnHip(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} RunningWalkingOnHip;
	static struct _RunningWalkingOnShoe : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_RunningWalkingOnShoe(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} RunningWalkingOnShoe;
	static struct _SportsWatch : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_SportsWatch(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} SportsWatch;
	static struct _ThermometerEar : property {
		unsigned short get() { unsigned short value; hrcheck(get_activation_factory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>()->_get_ThermometerEar(&value)); return value; }
		unsigned short operator()() { return get(); }
		operator unsigned short () { return get(); }
	} ThermometerEar;
};
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_BarcodeScanner BluetoothLEAppearanceSubcategories_statics<X>::BarcodeScanner;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_BloodPressureArm BluetoothLEAppearanceSubcategories_statics<X>::BloodPressureArm;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_BloodPressureWrist BluetoothLEAppearanceSubcategories_statics<X>::BloodPressureWrist;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_CardReader BluetoothLEAppearanceSubcategories_statics<X>::CardReader;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_CyclingCadenceSensor BluetoothLEAppearanceSubcategories_statics<X>::CyclingCadenceSensor;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_CyclingComputer BluetoothLEAppearanceSubcategories_statics<X>::CyclingComputer;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_CyclingPowerSensor BluetoothLEAppearanceSubcategories_statics<X>::CyclingPowerSensor;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_CyclingSpeedCadenceSensor BluetoothLEAppearanceSubcategories_statics<X>::CyclingSpeedCadenceSensor;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_CyclingSpeedSensor BluetoothLEAppearanceSubcategories_statics<X>::CyclingSpeedSensor;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_DigitalPen BluetoothLEAppearanceSubcategories_statics<X>::DigitalPen;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_DigitizerTablet BluetoothLEAppearanceSubcategories_statics<X>::DigitizerTablet;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_Gamepad BluetoothLEAppearanceSubcategories_statics<X>::Gamepad;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_Generic BluetoothLEAppearanceSubcategories_statics<X>::Generic;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_HeartRateBelt BluetoothLEAppearanceSubcategories_statics<X>::HeartRateBelt;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_Joystick BluetoothLEAppearanceSubcategories_statics<X>::Joystick;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_Keyboard BluetoothLEAppearanceSubcategories_statics<X>::Keyboard;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_LocationDisplay BluetoothLEAppearanceSubcategories_statics<X>::LocationDisplay;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_LocationNavigationDisplay BluetoothLEAppearanceSubcategories_statics<X>::LocationNavigationDisplay;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_LocationNavigationPod BluetoothLEAppearanceSubcategories_statics<X>::LocationNavigationPod;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_LocationPod BluetoothLEAppearanceSubcategories_statics<X>::LocationPod;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_Mouse BluetoothLEAppearanceSubcategories_statics<X>::Mouse;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_OximeterFingertip BluetoothLEAppearanceSubcategories_statics<X>::OximeterFingertip;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_OximeterWristWorn BluetoothLEAppearanceSubcategories_statics<X>::OximeterWristWorn;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_RunningWalkingInShoe BluetoothLEAppearanceSubcategories_statics<X>::RunningWalkingInShoe;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_RunningWalkingOnHip BluetoothLEAppearanceSubcategories_statics<X>::RunningWalkingOnHip;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_RunningWalkingOnShoe BluetoothLEAppearanceSubcategories_statics<X>::RunningWalkingOnShoe;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_SportsWatch BluetoothLEAppearanceSubcategories_statics<X>::SportsWatch;
template<typename X> typename BluetoothLEAppearanceSubcategories_statics<X>::_ThermometerEar BluetoothLEAppearanceSubcategories_statics<X>::ThermometerEar;

template<typename X> struct statics<BluetoothLEAppearanceSubcategories, X> : X, Windows::Devices::Bluetooth::BluetoothLEAppearanceSubcategories_statics<void> {
	typedef typename X::root_type BluetoothLEAppearanceSubcategories;
};
struct BluetoothLEAppearanceSubcategories : generate<BluetoothLEAppearanceSubcategories> {};

// IBluetoothLEAppearance
struct IBluetoothLEAppearance_raw : IInspectable {
	virtual STDMETHODIMP _get_RawValue(unsigned short *value);
	virtual STDMETHODIMP _get_Category(unsigned short *value);
	virtual STDMETHODIMP _get_SubCategory(unsigned short *value);
};
template<typename X> struct IBluetoothLEAppearance_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IBluetoothLEAppearance_adaptor::Category)->_get_Category(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Category;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IBluetoothLEAppearance_adaptor::RawValue)->_get_RawValue(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} RawValue;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IBluetoothLEAppearance_adaptor::SubCategory)->_get_SubCategory(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} SubCategory;
	};
	IBluetoothLEAppearance_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEAppearance, X> : Windows::Devices::Bluetooth::IBluetoothLEAppearance_adaptor<X> { typedef adapt IBluetoothLEAppearance; };
struct IBluetoothLEAppearance : IBluetoothLEAppearance_raw, generate<IBluetoothLEAppearance> {};

// IBluetoothLEAppearanceStatics
struct IBluetoothLEAppearanceStatics : IInspectable {
	virtual STDMETHODIMP _FromRawValue(unsigned short rawValue, BluetoothLEAppearance* *appearance);
	virtual STDMETHODIMP _FromParts(unsigned short appearanceCategory, unsigned short appearanceSubCategory, BluetoothLEAppearance* *appearance);
};

// BluetoothLEAppearance
template<typename> struct BluetoothLEAppearance_statics {
	static ptr<BluetoothLEAppearance> FromRawValue(unsigned short rawValue) { BluetoothLEAppearance* appearance; hrcheck(get_activation_factory<BluetoothLEAppearance, IBluetoothLEAppearanceStatics>()->_FromRawValue(rawValue, &appearance)); return from_abi(appearance); }
	static ptr<BluetoothLEAppearance> FromParts(unsigned short appearanceCategory, unsigned short appearanceSubCategory) { BluetoothLEAppearance* appearance; hrcheck(get_activation_factory<BluetoothLEAppearance, IBluetoothLEAppearanceStatics>()->_FromParts(appearanceCategory, appearanceSubCategory, &appearance)); return from_abi(appearance); }
};

template<typename X> struct statics<BluetoothLEAppearance, X> : X, Windows::Devices::Bluetooth::BluetoothLEAppearance_statics<void> {
	typedef typename X::root_type BluetoothLEAppearance;
};
struct BluetoothLEAppearance : generate<BluetoothLEAppearance> {};

// IBluetoothLEDeviceStatics
struct IBluetoothLEDeviceStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<BluetoothLEDevice*>* *operation);
	virtual STDMETHODIMP _FromBluetoothAddressAsync(unsigned __int64 bluetoothAddress, Foundation::IAsyncOperation<BluetoothLEDevice*>* *operation);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *deviceSelector);
};

// IBluetoothLEDeviceStatics2
struct IBluetoothLEDeviceStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelectorFromPairingState(bool pairingState, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromConnectionStatus(BluetoothConnectionStatus connectionStatus, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromDeviceName(HSTRING deviceName, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromBluetoothAddress(unsigned __int64 bluetoothAddress, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromBluetoothAddressWithBluetoothAddressType(unsigned __int64 bluetoothAddress, BluetoothAddressType bluetoothAddressType, HSTRING *deviceSelector);
	virtual STDMETHODIMP _GetDeviceSelectorFromAppearance(BluetoothLEAppearance* appearance, HSTRING *deviceSelector);
	virtual STDMETHODIMP _FromBluetoothAddressWithBluetoothAddressTypeAsync(unsigned __int64 bluetoothAddress, BluetoothAddressType bluetoothAddressType, Foundation::IAsyncOperation<BluetoothLEDevice*>* *operation);
};

// IBluetoothLEDevice5
struct IBluetoothLEDevice5_raw : IInspectable {
	virtual STDMETHODIMP _get_WasSecureConnectionUsedForPairing(bool *value);
};
template<typename X> struct IBluetoothLEDevice5_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBluetoothLEDevice5_adaptor::WasSecureConnectionUsedForPairing)->_get_WasSecureConnectionUsedForPairing(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} WasSecureConnectionUsedForPairing;
	};
	IBluetoothLEDevice5_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEDevice5, X> : Windows::Devices::Bluetooth::IBluetoothLEDevice5_adaptor<X> { typedef adapt IBluetoothLEDevice5; };
struct IBluetoothLEDevice5 : IBluetoothLEDevice5_raw, generate<IBluetoothLEDevice5> {};

// IBluetoothLEDevice4
struct IBluetoothLEDevice4_raw : IInspectable {
	virtual STDMETHODIMP _get_BluetoothDeviceId(Bluetooth::BluetoothDeviceId* *value);
};
template<typename X> struct IBluetoothLEDevice4_adaptor : X {
	union {
		struct : property {
			ptr<Bluetooth::BluetoothDeviceId> get() { Bluetooth::BluetoothDeviceId* value; hrcheck(enc(&IBluetoothLEDevice4_adaptor::BluetoothDeviceId)->_get_BluetoothDeviceId(&value)); return from_abi(value); }
			ptr<Bluetooth::BluetoothDeviceId> operator()() { return get(); }
			operator ptr<Bluetooth::BluetoothDeviceId> () { return get(); }
			ptr<Bluetooth::BluetoothDeviceId> operator->() { return get(); }
		} BluetoothDeviceId;
	};
	IBluetoothLEDevice4_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEDevice4, X> : Windows::Devices::Bluetooth::IBluetoothLEDevice4_adaptor<X> { typedef adapt IBluetoothLEDevice4; };
struct IBluetoothLEDevice4 : IBluetoothLEDevice4_raw, generate<IBluetoothLEDevice4> {};

// IBluetoothLEDevice3
struct IBluetoothLEDevice3_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceAccessInformation(Enumeration::DeviceAccessInformation* *value);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>* *operation);
	virtual STDMETHODIMP _GetGattServicesAsync(Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* *operation);
	virtual STDMETHODIMP _GetGattServicesWithCacheModeAsync(BluetoothCacheMode cacheMode, Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* *operation);
	virtual STDMETHODIMP _GetGattServicesForUuidAsync(Platform::Guid serviceUuid, Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* *operation);
	virtual STDMETHODIMP _GetGattServicesForUuidWithCacheModeAsync(Platform::Guid serviceUuid, BluetoothCacheMode cacheMode, Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* *operation);
};
template<typename X> struct IBluetoothLEDevice3_adaptor : X {
	union {
		struct : property {
			ptr<Enumeration::DeviceAccessInformation> get() { Enumeration::DeviceAccessInformation* value; hrcheck(enc(&IBluetoothLEDevice3_adaptor::DeviceAccessInformation)->_get_DeviceAccessInformation(&value)); return from_abi(value); }
			ptr<Enumeration::DeviceAccessInformation> operator()() { return get(); }
			operator ptr<Enumeration::DeviceAccessInformation> () { return get(); }
			ptr<Enumeration::DeviceAccessInformation> operator->() { return get(); }
		} DeviceAccessInformation;
	};
	ptr<Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<Enumeration::DeviceAccessStatus>* operation; hrcheck(X::get()->_RequestAccessAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<GenericAttributeProfile::GattDeviceServicesResult>>> GetGattServicesAsync() { Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* operation; hrcheck(X::get()->_GetGattServicesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<GenericAttributeProfile::GattDeviceServicesResult>>> GetGattServicesAsync(BluetoothCacheMode cacheMode) { Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* operation; hrcheck(X::get()->_GetGattServicesWithCacheModeAsync(cacheMode, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<GenericAttributeProfile::GattDeviceServicesResult>>> GetGattServicesForUuidAsync(const Platform::Guid& serviceUuid) { Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* operation; hrcheck(X::get()->_GetGattServicesForUuidAsync(serviceUuid, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<GenericAttributeProfile::GattDeviceServicesResult>>> GetGattServicesForUuidAsync(const Platform::Guid& serviceUuid, BluetoothCacheMode cacheMode) { Foundation::IAsyncOperation<GenericAttributeProfile::GattDeviceServicesResult*>* operation; hrcheck(X::get()->_GetGattServicesForUuidWithCacheModeAsync(serviceUuid, cacheMode, &operation)); return from_abi(operation); }
	IBluetoothLEDevice3_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEDevice3, X> : Windows::Devices::Bluetooth::IBluetoothLEDevice3_adaptor<X> { typedef adapt IBluetoothLEDevice3; };
struct IBluetoothLEDevice3 : IBluetoothLEDevice3_raw, generate<IBluetoothLEDevice3> {};

// IBluetoothLEDevice
struct IBluetoothLEDevice_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_GattServices(Foundation::Collections::IVectorView<GenericAttributeProfile::GattDeviceService*>* *value);
	virtual STDMETHODIMP _get_ConnectionStatus(BluetoothConnectionStatus *value);
	virtual STDMETHODIMP _get_BluetoothAddress(unsigned __int64 *value);
	virtual STDMETHODIMP _GetGattService(Platform::Guid serviceUuid, GenericAttributeProfile::GattDeviceService* *service);
	virtual STDMETHODIMP _add_NameChanged(Foundation::TypedEventHandler<BluetoothLEDevice*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_NameChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_GattServicesChanged(Foundation::TypedEventHandler<BluetoothLEDevice*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_GattServicesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ConnectionStatusChanged(Foundation::TypedEventHandler<BluetoothLEDevice*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ConnectionStatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBluetoothLEDevice_adaptor : X {
	union {
		struct : property {
			unsigned __int64 get() { unsigned __int64 value; hrcheck(enc(&IBluetoothLEDevice_adaptor::BluetoothAddress)->_get_BluetoothAddress(&value)); return value; }
			unsigned __int64 operator()() { return get(); }
			operator unsigned __int64 () { return get(); }
		} BluetoothAddress;
		struct : property {
			BluetoothConnectionStatus get() { BluetoothConnectionStatus value; hrcheck(enc(&IBluetoothLEDevice_adaptor::ConnectionStatus)->_get_ConnectionStatus(&value)); return value; }
			BluetoothConnectionStatus operator()() { return get(); }
			operator BluetoothConnectionStatus () { return get(); }
		} ConnectionStatus;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBluetoothLEDevice_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<GenericAttributeProfile::GattDeviceService>>> get() { Foundation::Collections::IVectorView<GenericAttributeProfile::GattDeviceService*>* value; hrcheck(enc(&IBluetoothLEDevice_adaptor::GattServices)->_get_GattServices(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<GenericAttributeProfile::GattDeviceService>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<GenericAttributeProfile::GattDeviceService>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<GenericAttributeProfile::GattDeviceService>>> operator->() { return get(); }
		} GattServices;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBluetoothLEDevice_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothLEDevice>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothLEDevice_adaptor::ConnectionStatusChanged)->_add_ConnectionStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothLEDevice_adaptor::ConnectionStatusChanged)->_remove_ConnectionStatusChanged(token)); }
		} ConnectionStatusChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothLEDevice>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothLEDevice_adaptor::GattServicesChanged)->_add_GattServicesChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothLEDevice_adaptor::GattServicesChanged)->_remove_GattServicesChanged(token)); }
		} GattServicesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BluetoothLEDevice>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBluetoothLEDevice_adaptor::NameChanged)->_add_NameChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBluetoothLEDevice_adaptor::NameChanged)->_remove_NameChanged(token)); }
		} NameChanged;
	};
	ptr<GenericAttributeProfile::GattDeviceService> GetGattService(const Platform::Guid& serviceUuid) { GenericAttributeProfile::GattDeviceService* service; hrcheck(X::get()->_GetGattService(serviceUuid, &service)); return from_abi(service); }
	IBluetoothLEDevice_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEDevice, X> : Windows::Devices::Bluetooth::IBluetoothLEDevice_adaptor<X> { typedef adapt IBluetoothLEDevice; };
struct IBluetoothLEDevice : IBluetoothLEDevice_raw, generate<IBluetoothLEDevice> {};

// IBluetoothLEDevice2
struct IBluetoothLEDevice2_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceInformation(Enumeration::DeviceInformation* *value);
	virtual STDMETHODIMP _get_Appearance(BluetoothLEAppearance* *value);
	virtual STDMETHODIMP _get_BluetoothAddressType(Bluetooth::BluetoothAddressType *value);
};
template<typename X> struct IBluetoothLEDevice2_adaptor : X {
	union {
		struct : property {
			ptr<BluetoothLEAppearance> get() { BluetoothLEAppearance* value; hrcheck(enc(&IBluetoothLEDevice2_adaptor::Appearance)->_get_Appearance(&value)); return from_abi(value); }
			ptr<BluetoothLEAppearance> operator()() { return get(); }
			operator ptr<BluetoothLEAppearance> () { return get(); }
			ptr<BluetoothLEAppearance> operator->() { return get(); }
		} Appearance;
		struct : property {
			Bluetooth::BluetoothAddressType get() { Bluetooth::BluetoothAddressType value; hrcheck(enc(&IBluetoothLEDevice2_adaptor::BluetoothAddressType)->_get_BluetoothAddressType(&value)); return value; }
			Bluetooth::BluetoothAddressType operator()() { return get(); }
			operator Bluetooth::BluetoothAddressType () { return get(); }
		} BluetoothAddressType;
		struct : property {
			ptr<Enumeration::DeviceInformation> get() { Enumeration::DeviceInformation* value; hrcheck(enc(&IBluetoothLEDevice2_adaptor::DeviceInformation)->_get_DeviceInformation(&value)); return from_abi(value); }
			ptr<Enumeration::DeviceInformation> operator()() { return get(); }
			operator ptr<Enumeration::DeviceInformation> () { return get(); }
			ptr<Enumeration::DeviceInformation> operator->() { return get(); }
		} DeviceInformation;
	};
	IBluetoothLEDevice2_adaptor() {}
};
template<typename X> struct adapt<IBluetoothLEDevice2, X> : Windows::Devices::Bluetooth::IBluetoothLEDevice2_adaptor<X> { typedef adapt IBluetoothLEDevice2; };
struct IBluetoothLEDevice2 : IBluetoothLEDevice2_raw, generate<IBluetoothLEDevice2> {};

// BluetoothLEDevice
template<typename> struct BluetoothLEDevice_statics {
	static hstring GetDeviceSelectorFromPairingState(bool pairingState) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>()->_GetDeviceSelectorFromPairingState(pairingState, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromConnectionStatus(BluetoothConnectionStatus connectionStatus) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>()->_GetDeviceSelectorFromConnectionStatus(connectionStatus, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromDeviceName(hstring_ref deviceName) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>()->_GetDeviceSelectorFromDeviceName(deviceName, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromBluetoothAddress(unsigned __int64 bluetoothAddress) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>()->_GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromBluetoothAddress(unsigned __int64 bluetoothAddress, Bluetooth::BluetoothAddressType bluetoothAddressType) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>()->_GetDeviceSelectorFromBluetoothAddressWithBluetoothAddressType(bluetoothAddress, bluetoothAddressType, &deviceSelector)); return from_abi(deviceSelector); }
	static hstring GetDeviceSelectorFromAppearance(pptr<BluetoothLEAppearance> appearance) { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>()->_GetDeviceSelectorFromAppearance(appearance, &deviceSelector)); return from_abi(deviceSelector); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothLEDevice>>> FromBluetoothAddressAsync(unsigned __int64 bluetoothAddress, Bluetooth::BluetoothAddressType bluetoothAddressType) { Foundation::IAsyncOperation<BluetoothLEDevice*>* operation; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>()->_FromBluetoothAddressWithBluetoothAddressTypeAsync(bluetoothAddress, bluetoothAddressType, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothLEDevice>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<BluetoothLEDevice*>* operation; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<BluetoothLEDevice>>> FromBluetoothAddressAsync(unsigned __int64 bluetoothAddress) { Foundation::IAsyncOperation<BluetoothLEDevice*>* operation; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics>()->_FromBluetoothAddressAsync(bluetoothAddress, &operation)); return from_abi(operation); }
	static hstring GetDeviceSelector() { HSTRING deviceSelector; hrcheck(get_activation_factory<BluetoothLEDevice, IBluetoothLEDeviceStatics>()->_GetDeviceSelector(&deviceSelector)); return from_abi(deviceSelector); }
};

template<typename X> struct statics<BluetoothLEDevice, X> : X, Windows::Devices::Bluetooth::BluetoothLEDevice_statics<void> {
	typedef typename X::root_type BluetoothLEDevice;
};
struct BluetoothLEDevice : generate<BluetoothLEDevice> {
	using IBluetoothLEDevice3::GetGattServicesForUuidAsync;
	using IBluetoothLEDevice3::GetGattServicesAsync;
};

// IBluetoothSignalStrengthFilter
struct IBluetoothSignalStrengthFilter_raw : IInspectable {
	virtual STDMETHODIMP _get_InRangeThresholdInDBm(Foundation::IReference<short>* *value);
	virtual STDMETHODIMP _put_InRangeThresholdInDBm(Foundation::IReference<short>* value);
	virtual STDMETHODIMP _get_OutOfRangeThresholdInDBm(Foundation::IReference<short>* *value);
	virtual STDMETHODIMP _put_OutOfRangeThresholdInDBm(Foundation::IReference<short>* value);
	virtual STDMETHODIMP _get_OutOfRangeTimeout(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_OutOfRangeTimeout(Foundation::IReference<Foundation::TimeSpan>* value);
	virtual STDMETHODIMP _get_SamplingInterval(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _put_SamplingInterval(Foundation::IReference<Foundation::TimeSpan>* value);
};
template<typename X> struct IBluetoothSignalStrengthFilter_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<short>> get() { Foundation::IReference<short>* value; hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::InRangeThresholdInDBm)->_get_InRangeThresholdInDBm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<short>> operator()() { return get(); }
			operator ptr<Foundation::IReference<short>> () { return get(); }
			ptr<Foundation::IReference<short>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<short>> value) { hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::InRangeThresholdInDBm)->_put_InRangeThresholdInDBm(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<short>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<short>> value) { put(to_abi(value)); }
		} InRangeThresholdInDBm;
		struct : property {
			ptr<Foundation::IReference<short>> get() { Foundation::IReference<short>* value; hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::OutOfRangeThresholdInDBm)->_get_OutOfRangeThresholdInDBm(&value)); return from_abi(value); }
			ptr<Foundation::IReference<short>> operator()() { return get(); }
			operator ptr<Foundation::IReference<short>> () { return get(); }
			ptr<Foundation::IReference<short>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<short>> value) { hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::OutOfRangeThresholdInDBm)->_put_OutOfRangeThresholdInDBm(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<short>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<short>> value) { put(to_abi(value)); }
		} OutOfRangeThresholdInDBm;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::OutOfRangeTimeout)->_get_OutOfRangeTimeout(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::OutOfRangeTimeout)->_put_OutOfRangeTimeout(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} OutOfRangeTimeout;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::SamplingInterval)->_get_SamplingInterval(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { hrcheck(enc(&IBluetoothSignalStrengthFilter_adaptor::SamplingInterval)->_put_SamplingInterval(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::TimeSpan>> value) { put(to_abi(value)); }
		} SamplingInterval;
	};
	IBluetoothSignalStrengthFilter_adaptor() {}
};
template<typename X> struct adapt<IBluetoothSignalStrengthFilter, X> : Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter_adaptor<X> { typedef adapt IBluetoothSignalStrengthFilter; };
struct IBluetoothSignalStrengthFilter : IBluetoothSignalStrengthFilter_raw, generate<IBluetoothSignalStrengthFilter> {};

// BluetoothSignalStrengthFilter
template<typename X> struct statics<BluetoothSignalStrengthFilter, X> : X {
	typedef typename X::root_type BluetoothSignalStrengthFilter;
};
struct BluetoothSignalStrengthFilter : generate<BluetoothSignalStrengthFilter> {};
}}}
} // namespace iso_winrt
