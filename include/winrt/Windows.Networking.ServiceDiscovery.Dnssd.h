#pragma once
// generated by isopod tools
// namespaces:
// Windows.Networking.ServiceDiscovery.Dnssd

#include "Windows.Networking.ServiceDiscovery.Dnssd.0.h"
#include "Windows.Foundation.Collections.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Networking { namespace Connectivity {
struct NetworkAdapter;
}
namespace Sockets {
struct StreamSocketListener;
struct DatagramSocket;
}
struct HostName;
}}

// defs

template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceWatcher> : interface_type<> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcher> : class_type<Platform::Object, Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceWatcher> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceInstanceFactory> : interface_type<> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceInstance> : interface_type<> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance> : class_type<Platform::Object, Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceInstance, Windows::Foundation::IStringable>, custom_activators {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdRegistrationResult> : interface_type<> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> : class_type<Platform::Object, Windows::Networking::ServiceDiscovery::Dnssd::IDnssdRegistrationResult, Windows::Foundation::IStringable> {};
template<> struct def<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstanceCollection> : class_type<Platform::Object, Windows::Foundation::Collections::IVectorView<ptr<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance>>, Windows::Foundation::Collections::IIterable<ptr<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance>>> {};

// uuids

template<> struct uuid<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceWatcher> { define_guid(0xCC34D9C1, 0xDB7D, 0x4B69, 0x98, 0x3D, 0xC6, 0xF8, 0x3F, 0x20, 0x56, 0x82);};
template<> struct uuid<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceInstanceFactory> { define_guid(0x6CB061A1, 0xC478, 0x4331, 0x96, 0x84, 0x4A, 0xF2, 0x18, 0x6C, 0xA, 0x2B);};
template<> struct uuid<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceInstance> { define_guid(0xE246DB7E, 0x98A5, 0x4CA1, 0xB9, 0xE4, 0xC2, 0x53, 0xD3, 0x3C, 0x35, 0xFF);};
template<> struct uuid<Windows::Networking::ServiceDiscovery::Dnssd::IDnssdRegistrationResult> { define_guid(0x3D786AD2, 0xE606, 0x5350, 0x73, 0xEA, 0x7E, 0x97, 0xF0, 0x66, 0x16, 0x2F);};

// types

namespace Windows { namespace Networking { namespace ServiceDiscovery { namespace Dnssd {

// IDnssdServiceWatcher
struct IDnssdServiceWatcher_raw : IInspectable {
	virtual STDMETHODIMP _add_Added(Foundation::TypedEventHandler<DnssdServiceWatcher*, DnssdServiceInstance*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Added(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<DnssdServiceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<DnssdServiceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Status(DnssdServiceWatcherStatus *status);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
};
template<typename X> struct IDnssdServiceWatcher_adaptor : X {
	union {
		struct : property {
			DnssdServiceWatcherStatus get() { DnssdServiceWatcherStatus status; hrcheck(enc(&IDnssdServiceWatcher_adaptor::Status)->_get_Status(&status)); return status; }
			DnssdServiceWatcherStatus operator()() { return get(); }
			operator DnssdServiceWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DnssdServiceWatcher>, ptr<DnssdServiceInstance>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDnssdServiceWatcher_adaptor::Added)->_add_Added(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDnssdServiceWatcher_adaptor::Added)->_remove_Added(token)); }
		} Added;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DnssdServiceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDnssdServiceWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDnssdServiceWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DnssdServiceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDnssdServiceWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDnssdServiceWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IDnssdServiceWatcher_adaptor() {}
};
template<typename X> struct adapt<IDnssdServiceWatcher, X> : Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceWatcher_adaptor<X> { typedef adapt IDnssdServiceWatcher; };
struct IDnssdServiceWatcher : IDnssdServiceWatcher_raw, generate<IDnssdServiceWatcher> {};

// DnssdServiceWatcher
template<typename X> struct statics<DnssdServiceWatcher, X> : X {
	typedef typename X::root_type DnssdServiceWatcher;
};
struct DnssdServiceWatcher : generate<DnssdServiceWatcher> {};

// IDnssdServiceInstanceFactory
struct IDnssdServiceInstanceFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING dnssdServiceInstanceName, HostName* hostName, unsigned short port, DnssdServiceInstance* *result);
};

// IDnssdServiceInstance
struct IDnssdServiceInstance_raw : IInspectable {
	virtual STDMETHODIMP _get_DnssdServiceInstanceName(HSTRING *value);
	virtual STDMETHODIMP _put_DnssdServiceInstanceName(HSTRING value);
	virtual STDMETHODIMP _get_HostName(Networking::HostName* *value);
	virtual STDMETHODIMP _put_HostName(Networking::HostName* value);
	virtual STDMETHODIMP _get_Port(unsigned short *value);
	virtual STDMETHODIMP _put_Port(unsigned short value);
	virtual STDMETHODIMP _get_Priority(unsigned short *value);
	virtual STDMETHODIMP _put_Priority(unsigned short value);
	virtual STDMETHODIMP _get_Weight(unsigned short *value);
	virtual STDMETHODIMP _put_Weight(unsigned short value);
	virtual STDMETHODIMP _get_TextAttributes(Foundation::Collections::IMap<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _RegisterStreamSocketListenerAsync1(Sockets::StreamSocketListener* socket, Foundation::IAsyncOperation<DnssdRegistrationResult*>* *result);
	virtual STDMETHODIMP _RegisterStreamSocketListenerAsync2(Sockets::StreamSocketListener* socket, Connectivity::NetworkAdapter* adapter, Foundation::IAsyncOperation<DnssdRegistrationResult*>* *result);
	virtual STDMETHODIMP _RegisterDatagramSocketAsync1(Sockets::DatagramSocket* socket, Foundation::IAsyncOperation<DnssdRegistrationResult*>* *result);
	virtual STDMETHODIMP _RegisterDatagramSocketAsync2(Sockets::DatagramSocket* socket, Connectivity::NetworkAdapter* adapter, Foundation::IAsyncOperation<DnssdRegistrationResult*>* *result);
};
template<typename X> struct IDnssdServiceInstance_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IDnssdServiceInstance_adaptor::DnssdServiceInstanceName)->_get_DnssdServiceInstanceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IDnssdServiceInstance_adaptor::DnssdServiceInstanceName)->_put_DnssdServiceInstanceName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DnssdServiceInstanceName;
		struct : property {
			ptr<Networking::HostName> get() { Networking::HostName* value; hrcheck(enc(&IDnssdServiceInstance_adaptor::HostName)->_get_HostName(&value)); return from_abi(value); }
			ptr<Networking::HostName> operator()() { return get(); }
			operator ptr<Networking::HostName> () { return get(); }
			ptr<Networking::HostName> operator->() { return get(); }
			void put(pptr<Networking::HostName> value) { hrcheck(enc(&IDnssdServiceInstance_adaptor::HostName)->_put_HostName(value)); }
			void operator=(pptr<Networking::HostName> value) { put(value); }
			void operator()(pptr<Networking::HostName> value) { put(value); }
		} HostName;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IDnssdServiceInstance_adaptor::Port)->_get_Port(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
			void put(unsigned short value) { hrcheck(enc(&IDnssdServiceInstance_adaptor::Port)->_put_Port(value)); }
			void operator=(unsigned short value) { put(value); }
			void operator()(unsigned short value) { put(value); }
		} Port;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IDnssdServiceInstance_adaptor::Priority)->_get_Priority(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
			void put(unsigned short value) { hrcheck(enc(&IDnssdServiceInstance_adaptor::Priority)->_put_Priority(value)); }
			void operator=(unsigned short value) { put(value); }
			void operator()(unsigned short value) { put(value); }
		} Priority;
		struct : property {
			ptr<Foundation::Collections::IMap<hstring, hstring>> get() { Foundation::Collections::IMap<HSTRING, HSTRING>* value; hrcheck(enc(&IDnssdServiceInstance_adaptor::TextAttributes)->_get_TextAttributes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMap<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMap<hstring, hstring>> operator->() { return get(); }
		} TextAttributes;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IDnssdServiceInstance_adaptor::Weight)->_get_Weight(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
			void put(unsigned short value) { hrcheck(enc(&IDnssdServiceInstance_adaptor::Weight)->_put_Weight(value)); }
			void operator=(unsigned short value) { put(value); }
			void operator()(unsigned short value) { put(value); }
		} Weight;
	};
	ptr<Foundation::IAsyncOperation<ptr<DnssdRegistrationResult>>> RegisterStreamSocketListenerAsync(pptr<Sockets::StreamSocketListener> socket) { Foundation::IAsyncOperation<DnssdRegistrationResult*>* result; hrcheck(X::get()->_RegisterStreamSocketListenerAsync1(socket, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<DnssdRegistrationResult>>> RegisterStreamSocketListenerAsync(pptr<Sockets::StreamSocketListener> socket, pptr<Connectivity::NetworkAdapter> adapter) { Foundation::IAsyncOperation<DnssdRegistrationResult*>* result; hrcheck(X::get()->_RegisterStreamSocketListenerAsync2(socket, adapter, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<DnssdRegistrationResult>>> RegisterDatagramSocketAsync(pptr<Sockets::DatagramSocket> socket) { Foundation::IAsyncOperation<DnssdRegistrationResult*>* result; hrcheck(X::get()->_RegisterDatagramSocketAsync1(socket, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<DnssdRegistrationResult>>> RegisterDatagramSocketAsync(pptr<Sockets::DatagramSocket> socket, pptr<Connectivity::NetworkAdapter> adapter) { Foundation::IAsyncOperation<DnssdRegistrationResult*>* result; hrcheck(X::get()->_RegisterDatagramSocketAsync2(socket, adapter, &result)); return from_abi(result); }
	IDnssdServiceInstance_adaptor() {}
};
template<typename X> struct adapt<IDnssdServiceInstance, X> : Windows::Networking::ServiceDiscovery::Dnssd::IDnssdServiceInstance_adaptor<X> { typedef adapt IDnssdServiceInstance; };
struct IDnssdServiceInstance : IDnssdServiceInstance_raw, generate<IDnssdServiceInstance> {};

// DnssdServiceInstance
template<typename> struct DnssdServiceInstance_statics {
	static DnssdServiceInstance *activate(hstring_ref dnssdServiceInstanceName, pptr<Networking::HostName> hostName, unsigned short port) { DnssdServiceInstance *result; hrcheck(get_activation_factory<DnssdServiceInstance, IDnssdServiceInstanceFactory>()->_Create(dnssdServiceInstanceName, hostName, port, &result)); return result; }
};

template<typename X> struct statics<DnssdServiceInstance, X> : X, Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance_statics<void> {
	using Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance_statics<void>::activate;
	typedef typename X::root_type DnssdServiceInstance;
};
struct DnssdServiceInstance : generate<DnssdServiceInstance> {
	using IDnssdServiceInstance::RegisterDatagramSocketAsync;
	using IDnssdServiceInstance::RegisterStreamSocketListenerAsync;
};

// IDnssdRegistrationResult
struct IDnssdRegistrationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(DnssdRegistrationStatus *value);
	virtual STDMETHODIMP _get_IPAddress(HostName* *value);
	virtual STDMETHODIMP _get_HasInstanceNameChanged(bool *value);
};
template<typename X> struct IDnssdRegistrationResult_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDnssdRegistrationResult_adaptor::HasInstanceNameChanged)->_get_HasInstanceNameChanged(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasInstanceNameChanged;
		struct : property {
			ptr<HostName> get() { HostName* value; hrcheck(enc(&IDnssdRegistrationResult_adaptor::IPAddress)->_get_IPAddress(&value)); return from_abi(value); }
			ptr<HostName> operator()() { return get(); }
			operator ptr<HostName> () { return get(); }
			ptr<HostName> operator->() { return get(); }
		} IPAddress;
		struct : property {
			DnssdRegistrationStatus get() { DnssdRegistrationStatus value; hrcheck(enc(&IDnssdRegistrationResult_adaptor::Status)->_get_Status(&value)); return value; }
			DnssdRegistrationStatus operator()() { return get(); }
			operator DnssdRegistrationStatus () { return get(); }
		} Status;
	};
	IDnssdRegistrationResult_adaptor() {}
};
template<typename X> struct adapt<IDnssdRegistrationResult, X> : Windows::Networking::ServiceDiscovery::Dnssd::IDnssdRegistrationResult_adaptor<X> { typedef adapt IDnssdRegistrationResult; };
struct IDnssdRegistrationResult : IDnssdRegistrationResult_raw, generate<IDnssdRegistrationResult> {};

// DnssdRegistrationResult
template<typename X> struct statics<DnssdRegistrationResult, X> : X {
	typedef typename X::root_type DnssdRegistrationResult;
};
struct DnssdRegistrationResult : generate<DnssdRegistrationResult> {};

// DnssdServiceInstanceCollection
template<typename X> struct statics<DnssdServiceInstanceCollection, X> : X {
	typedef typename X::root_type DnssdServiceInstanceCollection;
};
struct DnssdServiceInstanceCollection : generate<DnssdServiceInstanceCollection> {};
}}}}
} // namespace iso_winrt
