#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.Perception

#include "Windows.Devices.Perception.0.h"
#include "Windows.Graphics.Imaging.0.h"
#include "Windows.Foundation.Numerics.0.h"
#include "Windows.Foundation.Collections.0.h"
#include "Windows.Devices.Enumeration.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Media { namespace Devices { namespace Core {
struct CameraIntrinsics;
}}
struct VideoFrame;
}}

// defs

template<> struct def<Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameSourceWatcher> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionColorFrameSourceWatcher> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameSourceAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionColorFrameSourceAddedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameSourceRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionColorFrameSourceRemovedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameSourceWatcher> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthFrameSourceWatcher> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameSourceAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthFrameSourceAddedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameSourceRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthFrameSourceRemovedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameSourceWatcher> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionInfraredFrameSourceWatcher> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameSourceAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionInfraredFrameSourceAddedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameSourceRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionInfraredFrameSourceRemovedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameSourceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameSource2> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameSource> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionColorFrameSource> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionColorFrameSource, Windows::Devices::Perception::IPerceptionColorFrameSource2> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameSourceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameSource2> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameSource> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthFrameSource> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthFrameSource, Windows::Devices::Perception::IPerceptionDepthFrameSource2> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameSourceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameSource2> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameSource> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionInfraredFrameSource> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionInfraredFrameSource, Windows::Devices::Perception::IPerceptionInfraredFrameSource2> {};
template<> struct def<Windows::Devices::Perception::IKnownPerceptionFrameSourcePropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IKnownPerceptionFrameSourcePropertiesStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IKnownPerceptionVideoFrameSourcePropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IKnownPerceptionInfraredFrameSourcePropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IKnownPerceptionDepthFrameSourcePropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IKnownPerceptionColorFrameSourcePropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IKnownPerceptionVideoProfilePropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IKnownCameraIntrinsicsPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionFrameSourcePropertyChangeResult> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::IPerceptionControlSession> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::PerceptionControlSession> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionControlSession> {};
template<> struct def<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionFrameSourcePropertyChangeResult> {};
template<> struct def<Windows::Devices::Perception::IPerceptionFrameSourcePropertiesChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionFrameSourcePropertiesChangedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionVideoProfile> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionVideoProfile> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionVideoProfile> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthCorrelatedCameraIntrinsics> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthCorrelatedCameraIntrinsics> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthCorrelatedCoordinateMapper> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthCorrelatedCoordinateMapper> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameReader> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::PerceptionColorFrameReader> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionColorFrameReader> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameReader> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthFrameReader> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthFrameReader> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameReader> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::PerceptionInfraredFrameReader> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionInfraredFrameReader> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrameArrivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionColorFrameArrivedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionColorFrame> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::PerceptionColorFrame> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionColorFrame> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrameArrivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthFrameArrivedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionDepthFrame> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::PerceptionDepthFrame> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionDepthFrame> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrameArrivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionInfraredFrameArrivedEventArgs> {};
template<> struct def<Windows::Devices::Perception::IPerceptionInfraredFrame> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::Perception::PerceptionInfraredFrame> : class_type<Platform::Object, Windows::Devices::Perception::IPerceptionInfraredFrame> {};
template<> struct def<Windows::Devices::Perception::KnownPerceptionFrameSourceProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Perception::KnownPerceptionDepthFrameSourceProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Perception::KnownPerceptionColorFrameSourceProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Perception::KnownPerceptionVideoProfileProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::Perception::KnownCameraIntrinsicsProperties> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameSourceWatcher> { define_guid(0x96BD1392, 0xE667, 0x40C4, 0x89, 0xF9, 0x14, 0x62, 0xDE, 0xA6, 0xA9, 0xCC);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameSourceAddedEventArgs> { define_guid(0xD16BF4E6, 0xDA24, 0x442C, 0xBB, 0xD5, 0x55, 0x54, 0x9B, 0x5B, 0x94, 0xF3);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameSourceRemovedEventArgs> { define_guid(0xD277FA69, 0xEB4C, 0x42EF, 0xBA, 0x4F, 0x28, 0x8F, 0x61, 0x5C, 0x93, 0xC1);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameSourceWatcher> { define_guid(0x780E96D1, 0x8D02, 0x4D2B, 0xAD, 0xA4, 0x5B, 0xA6, 0x24, 0xA0, 0xEB, 0x10);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameSourceAddedEventArgs> { define_guid(0x93A48168, 0x8BF8, 0x45D2, 0xA2, 0xF8, 0x4A, 0xC0, 0x93, 0x1C, 0xC7, 0xA6);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameSourceRemovedEventArgs> { define_guid(0xA0C0CC4D, 0xE96C, 0x4D81, 0x86, 0xDD, 0x38, 0xB9, 0x5E, 0x49, 0xC6, 0xDF);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameSourceWatcher> { define_guid(0x383CFF99, 0xD70C, 0x444D, 0xA8, 0xB0, 0x72, 0xC, 0x2E, 0x66, 0xFE, 0x3B);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameSourceAddedEventArgs> { define_guid(0x6D334120, 0x95CE, 0x4660, 0x90, 0x7A, 0xD9, 0x80, 0x35, 0xAA, 0x2B, 0x7C);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameSourceRemovedEventArgs> { define_guid(0xEA1A8071, 0x7A70, 0x4A61, 0xAF, 0x94, 0x7, 0x30, 0x38, 0x53, 0xF6, 0x95);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameSourceStatics> { define_guid(0x5DF3CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x49);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameSource2> { define_guid(0xF88008E5, 0x5631, 0x45ED, 0xAD, 0x98, 0x8C, 0x6A, 0xA0, 0x4C, 0xFB, 0x91);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameSource> { define_guid(0xDC6DBA7C, 0xB58, 0x468D, 0x9C, 0xA1, 0x6D, 0xB0, 0x4C, 0xC0, 0x47, 0x7C);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameSourceStatics> { define_guid(0x5DF3CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x48);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameSource2> { define_guid(0xE3D23D2E, 0x6E2C, 0x4E6D, 0x91, 0xD9, 0x70, 0x4C, 0xD8, 0xDF, 0xF7, 0x9D);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameSource> { define_guid(0x79D433D6, 0x47FB, 0x4DF1, 0xBF, 0xC9, 0xF0, 0x1D, 0x40, 0xBD, 0x99, 0x42);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameSourceStatics> { define_guid(0x5DF3CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x47);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameSource2> { define_guid(0xDCD4D798, 0x4B0B, 0x4300, 0x8D, 0x85, 0x41, 0x8, 0x17, 0xFA, 0xA0, 0x32);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameSource> { define_guid(0x55B08742, 0x1808, 0x494E, 0x9E, 0x30, 0x9D, 0x2A, 0x7B, 0xE8, 0xF7, 0x0);};
template<> struct uuid<Windows::Devices::Perception::IKnownPerceptionFrameSourcePropertiesStatics> { define_guid(0x5DF1CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x47);};
template<> struct uuid<Windows::Devices::Perception::IKnownPerceptionFrameSourcePropertiesStatics2> { define_guid(0xA9C86871, 0x5DC, 0x4A4D, 0x8A, 0x5C, 0xA4, 0xEC, 0xF2, 0x6B, 0xBC, 0x46);};
template<> struct uuid<Windows::Devices::Perception::IKnownPerceptionVideoFrameSourcePropertiesStatics> { define_guid(0x5DF1CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x48);};
template<> struct uuid<Windows::Devices::Perception::IKnownPerceptionInfraredFrameSourcePropertiesStatics> { define_guid(0x5DF1CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x49);};
template<> struct uuid<Windows::Devices::Perception::IKnownPerceptionDepthFrameSourcePropertiesStatics> { define_guid(0x5DF1CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x4A);};
template<> struct uuid<Windows::Devices::Perception::IKnownPerceptionColorFrameSourcePropertiesStatics> { define_guid(0x5DF1CCA2, 0x1F8, 0x4A87, 0xB8, 0x59, 0xD5, 0xE5, 0xB7, 0xE1, 0xDE, 0x4B);};
template<> struct uuid<Windows::Devices::Perception::IKnownPerceptionVideoProfilePropertiesStatics> { define_guid(0x8F08E2E7, 0x5A76, 0x43E3, 0xA1, 0x3A, 0xDA, 0x3D, 0x91, 0xA9, 0xEF, 0x98);};
template<> struct uuid<Windows::Devices::Perception::IKnownCameraIntrinsicsPropertiesStatics> { define_guid(0x8C03978, 0x437A, 0x4D97, 0xA6, 0x63, 0xFD, 0x31, 0x95, 0x60, 0x2, 0x49);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionFrameSourcePropertyChangeResult> { define_guid(0x1E33390A, 0x3C90, 0x4D22, 0xB8, 0x98, 0xF4, 0x2B, 0xBA, 0x64, 0x18, 0xFF);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionControlSession> { define_guid(0x99998653, 0x5A3D, 0x417F, 0x92, 0x39, 0xF1, 0x88, 0x9E, 0x54, 0x8B, 0x48);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionFrameSourcePropertiesChangedEventArgs> { define_guid(0x6C68E068, 0xBCF1, 0x4ECC, 0xB8, 0x91, 0x76, 0x25, 0xD1, 0x24, 0x4B, 0x6B);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionVideoProfile> { define_guid(0x75763EA3, 0x11A, 0x470E, 0x82, 0x25, 0x6F, 0x5, 0xAD, 0xE2, 0x56, 0x48);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthCorrelatedCameraIntrinsics> { define_guid(0x6548CA01, 0x86DE, 0x5BE1, 0x65, 0x82, 0x80, 0x7F, 0xCF, 0x4C, 0x95, 0xCF);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthCorrelatedCoordinateMapper> { define_guid(0x5B4D9D1D, 0xB5F6, 0x469C, 0xB8, 0xC2, 0xB9, 0x7A, 0x45, 0xE6, 0x86, 0x3B);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameReader> { define_guid(0x7650F56E, 0xB9F5, 0x461B, 0x83, 0xAD, 0xF2, 0x22, 0xAF, 0x2A, 0xAA, 0xDC);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameReader> { define_guid(0xB1A3C09F, 0x299B, 0x4612, 0xA4, 0xF7, 0x27, 0xF, 0x25, 0xA0, 0x96, 0xEC);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameReader> { define_guid(0x7960CE18, 0xD39B, 0x4FC8, 0xA0, 0x4A, 0x92, 0x97, 0x34, 0xC6, 0x75, 0x6C);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrameArrivedEventArgs> { define_guid(0x8FAD02D5, 0x86F7, 0x4D8D, 0xB9, 0x66, 0x5A, 0x37, 0x61, 0xBA, 0x9F, 0x59);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionColorFrame> { define_guid(0xFE621549, 0x2CBF, 0x4F94, 0x98, 0x61, 0xF8, 0x17, 0xEA, 0x31, 0x77, 0x47);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrameArrivedEventArgs> { define_guid(0x443D25B2, 0xB282, 0x4637, 0x91, 0x73, 0xAC, 0x97, 0x84, 0x35, 0xC9, 0x85);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionDepthFrame> { define_guid(0xA37B81FC, 0x9906, 0x4FFD, 0x91, 0x61, 0x0, 0x24, 0xB3, 0x60, 0xB6, 0x57);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrameArrivedEventArgs> { define_guid(0x9F77FAC7, 0xB4BD, 0x4857, 0x9D, 0x50, 0xBE, 0x8E, 0xF0, 0x75, 0xDA, 0xEF);};
template<> struct uuid<Windows::Devices::Perception::IPerceptionInfraredFrame> { define_guid(0xB0886276, 0x849E, 0x4C7A, 0x8A, 0xE6, 0xB5, 0x60, 0x64, 0x53, 0x21, 0x53);};

// types

namespace Windows { namespace Devices { namespace Perception {

// IPerceptionColorFrameSourceWatcher
struct IPerceptionColorFrameSourceWatcher_raw : IInspectable {
	virtual STDMETHODIMP _add_SourceAdded(Foundation::TypedEventHandler<PerceptionColorFrameSourceWatcher*, PerceptionColorFrameSourceAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceAdded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceRemoved(Foundation::TypedEventHandler<PerceptionColorFrameSourceWatcher*, PerceptionColorFrameSourceRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceRemoved(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<PerceptionColorFrameSourceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<PerceptionColorFrameSourceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Status(Enumeration::DeviceWatcherStatus *value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
};
template<typename X> struct IPerceptionColorFrameSourceWatcher_adaptor : X {
	union {
		struct : property {
			Enumeration::DeviceWatcherStatus get() { Enumeration::DeviceWatcherStatus value; hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::Status)->_get_Status(&value)); return value; }
			Enumeration::DeviceWatcherStatus operator()() { return get(); }
			operator Enumeration::DeviceWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSourceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSourceWatcher>, ptr<PerceptionColorFrameSourceAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::SourceAdded)->_add_SourceAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::SourceAdded)->_remove_SourceAdded(token)); }
		} SourceAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSourceWatcher>, ptr<PerceptionColorFrameSourceRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::SourceRemoved)->_add_SourceRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::SourceRemoved)->_remove_SourceRemoved(token)); }
		} SourceRemoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSourceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSourceWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IPerceptionColorFrameSourceWatcher_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrameSourceWatcher, X> : Windows::Devices::Perception::IPerceptionColorFrameSourceWatcher_adaptor<X> { typedef adapt IPerceptionColorFrameSourceWatcher; };
struct IPerceptionColorFrameSourceWatcher : IPerceptionColorFrameSourceWatcher_raw, generate<IPerceptionColorFrameSourceWatcher> {};

// PerceptionColorFrameSourceWatcher
template<typename X> struct statics<PerceptionColorFrameSourceWatcher, X> : X {
	typedef typename X::root_type PerceptionColorFrameSourceWatcher;
};
struct PerceptionColorFrameSourceWatcher : generate<PerceptionColorFrameSourceWatcher> {};

// IPerceptionColorFrameSourceAddedEventArgs
struct IPerceptionColorFrameSourceAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameSource(PerceptionColorFrameSource* *value);
};
template<typename X> struct IPerceptionColorFrameSourceAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PerceptionColorFrameSource> get() { PerceptionColorFrameSource* value; hrcheck(enc(&IPerceptionColorFrameSourceAddedEventArgs_adaptor::FrameSource)->_get_FrameSource(&value)); return from_abi(value); }
			ptr<PerceptionColorFrameSource> operator()() { return get(); }
			operator ptr<PerceptionColorFrameSource> () { return get(); }
			ptr<PerceptionColorFrameSource> operator->() { return get(); }
		} FrameSource;
	};
	IPerceptionColorFrameSourceAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrameSourceAddedEventArgs, X> : Windows::Devices::Perception::IPerceptionColorFrameSourceAddedEventArgs_adaptor<X> { typedef adapt IPerceptionColorFrameSourceAddedEventArgs; };
struct IPerceptionColorFrameSourceAddedEventArgs : IPerceptionColorFrameSourceAddedEventArgs_raw, generate<IPerceptionColorFrameSourceAddedEventArgs> {};

// PerceptionColorFrameSourceAddedEventArgs
template<typename X> struct statics<PerceptionColorFrameSourceAddedEventArgs, X> : X {
	typedef typename X::root_type PerceptionColorFrameSourceAddedEventArgs;
};
struct PerceptionColorFrameSourceAddedEventArgs : generate<PerceptionColorFrameSourceAddedEventArgs> {};

// IPerceptionColorFrameSourceRemovedEventArgs
struct IPerceptionColorFrameSourceRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameSource(PerceptionColorFrameSource* *value);
};
template<typename X> struct IPerceptionColorFrameSourceRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PerceptionColorFrameSource> get() { PerceptionColorFrameSource* value; hrcheck(enc(&IPerceptionColorFrameSourceRemovedEventArgs_adaptor::FrameSource)->_get_FrameSource(&value)); return from_abi(value); }
			ptr<PerceptionColorFrameSource> operator()() { return get(); }
			operator ptr<PerceptionColorFrameSource> () { return get(); }
			ptr<PerceptionColorFrameSource> operator->() { return get(); }
		} FrameSource;
	};
	IPerceptionColorFrameSourceRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrameSourceRemovedEventArgs, X> : Windows::Devices::Perception::IPerceptionColorFrameSourceRemovedEventArgs_adaptor<X> { typedef adapt IPerceptionColorFrameSourceRemovedEventArgs; };
struct IPerceptionColorFrameSourceRemovedEventArgs : IPerceptionColorFrameSourceRemovedEventArgs_raw, generate<IPerceptionColorFrameSourceRemovedEventArgs> {};

// PerceptionColorFrameSourceRemovedEventArgs
template<typename X> struct statics<PerceptionColorFrameSourceRemovedEventArgs, X> : X {
	typedef typename X::root_type PerceptionColorFrameSourceRemovedEventArgs;
};
struct PerceptionColorFrameSourceRemovedEventArgs : generate<PerceptionColorFrameSourceRemovedEventArgs> {};

// IPerceptionDepthFrameSourceWatcher
struct IPerceptionDepthFrameSourceWatcher_raw : IInspectable {
	virtual STDMETHODIMP _add_SourceAdded(Foundation::TypedEventHandler<PerceptionDepthFrameSourceWatcher*, PerceptionDepthFrameSourceAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceAdded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceRemoved(Foundation::TypedEventHandler<PerceptionDepthFrameSourceWatcher*, PerceptionDepthFrameSourceRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceRemoved(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<PerceptionDepthFrameSourceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<PerceptionDepthFrameSourceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Status(Enumeration::DeviceWatcherStatus *value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
};
template<typename X> struct IPerceptionDepthFrameSourceWatcher_adaptor : X {
	union {
		struct : property {
			Enumeration::DeviceWatcherStatus get() { Enumeration::DeviceWatcherStatus value; hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::Status)->_get_Status(&value)); return value; }
			Enumeration::DeviceWatcherStatus operator()() { return get(); }
			operator Enumeration::DeviceWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSourceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSourceWatcher>, ptr<PerceptionDepthFrameSourceAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::SourceAdded)->_add_SourceAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::SourceAdded)->_remove_SourceAdded(token)); }
		} SourceAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSourceWatcher>, ptr<PerceptionDepthFrameSourceRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::SourceRemoved)->_add_SourceRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::SourceRemoved)->_remove_SourceRemoved(token)); }
		} SourceRemoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSourceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSourceWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IPerceptionDepthFrameSourceWatcher_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrameSourceWatcher, X> : Windows::Devices::Perception::IPerceptionDepthFrameSourceWatcher_adaptor<X> { typedef adapt IPerceptionDepthFrameSourceWatcher; };
struct IPerceptionDepthFrameSourceWatcher : IPerceptionDepthFrameSourceWatcher_raw, generate<IPerceptionDepthFrameSourceWatcher> {};

// PerceptionDepthFrameSourceWatcher
template<typename X> struct statics<PerceptionDepthFrameSourceWatcher, X> : X {
	typedef typename X::root_type PerceptionDepthFrameSourceWatcher;
};
struct PerceptionDepthFrameSourceWatcher : generate<PerceptionDepthFrameSourceWatcher> {};

// IPerceptionDepthFrameSourceAddedEventArgs
struct IPerceptionDepthFrameSourceAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameSource(PerceptionDepthFrameSource* *value);
};
template<typename X> struct IPerceptionDepthFrameSourceAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PerceptionDepthFrameSource> get() { PerceptionDepthFrameSource* value; hrcheck(enc(&IPerceptionDepthFrameSourceAddedEventArgs_adaptor::FrameSource)->_get_FrameSource(&value)); return from_abi(value); }
			ptr<PerceptionDepthFrameSource> operator()() { return get(); }
			operator ptr<PerceptionDepthFrameSource> () { return get(); }
			ptr<PerceptionDepthFrameSource> operator->() { return get(); }
		} FrameSource;
	};
	IPerceptionDepthFrameSourceAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrameSourceAddedEventArgs, X> : Windows::Devices::Perception::IPerceptionDepthFrameSourceAddedEventArgs_adaptor<X> { typedef adapt IPerceptionDepthFrameSourceAddedEventArgs; };
struct IPerceptionDepthFrameSourceAddedEventArgs : IPerceptionDepthFrameSourceAddedEventArgs_raw, generate<IPerceptionDepthFrameSourceAddedEventArgs> {};

// PerceptionDepthFrameSourceAddedEventArgs
template<typename X> struct statics<PerceptionDepthFrameSourceAddedEventArgs, X> : X {
	typedef typename X::root_type PerceptionDepthFrameSourceAddedEventArgs;
};
struct PerceptionDepthFrameSourceAddedEventArgs : generate<PerceptionDepthFrameSourceAddedEventArgs> {};

// IPerceptionDepthFrameSourceRemovedEventArgs
struct IPerceptionDepthFrameSourceRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameSource(PerceptionDepthFrameSource* *value);
};
template<typename X> struct IPerceptionDepthFrameSourceRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PerceptionDepthFrameSource> get() { PerceptionDepthFrameSource* value; hrcheck(enc(&IPerceptionDepthFrameSourceRemovedEventArgs_adaptor::FrameSource)->_get_FrameSource(&value)); return from_abi(value); }
			ptr<PerceptionDepthFrameSource> operator()() { return get(); }
			operator ptr<PerceptionDepthFrameSource> () { return get(); }
			ptr<PerceptionDepthFrameSource> operator->() { return get(); }
		} FrameSource;
	};
	IPerceptionDepthFrameSourceRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrameSourceRemovedEventArgs, X> : Windows::Devices::Perception::IPerceptionDepthFrameSourceRemovedEventArgs_adaptor<X> { typedef adapt IPerceptionDepthFrameSourceRemovedEventArgs; };
struct IPerceptionDepthFrameSourceRemovedEventArgs : IPerceptionDepthFrameSourceRemovedEventArgs_raw, generate<IPerceptionDepthFrameSourceRemovedEventArgs> {};

// PerceptionDepthFrameSourceRemovedEventArgs
template<typename X> struct statics<PerceptionDepthFrameSourceRemovedEventArgs, X> : X {
	typedef typename X::root_type PerceptionDepthFrameSourceRemovedEventArgs;
};
struct PerceptionDepthFrameSourceRemovedEventArgs : generate<PerceptionDepthFrameSourceRemovedEventArgs> {};

// IPerceptionInfraredFrameSourceWatcher
struct IPerceptionInfraredFrameSourceWatcher_raw : IInspectable {
	virtual STDMETHODIMP _add_SourceAdded(Foundation::TypedEventHandler<PerceptionInfraredFrameSourceWatcher*, PerceptionInfraredFrameSourceAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceAdded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SourceRemoved(Foundation::TypedEventHandler<PerceptionInfraredFrameSourceWatcher*, PerceptionInfraredFrameSourceRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SourceRemoved(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Stopped(Foundation::TypedEventHandler<PerceptionInfraredFrameSourceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Stopped(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<PerceptionInfraredFrameSourceWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Status(Enumeration::DeviceWatcherStatus *value);
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
};
template<typename X> struct IPerceptionInfraredFrameSourceWatcher_adaptor : X {
	union {
		struct : property {
			Enumeration::DeviceWatcherStatus get() { Enumeration::DeviceWatcherStatus value; hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::Status)->_get_Status(&value)); return value; }
			Enumeration::DeviceWatcherStatus operator()() { return get(); }
			operator Enumeration::DeviceWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSourceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSourceWatcher>, ptr<PerceptionInfraredFrameSourceAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::SourceAdded)->_add_SourceAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::SourceAdded)->_remove_SourceAdded(token)); }
		} SourceAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSourceWatcher>, ptr<PerceptionInfraredFrameSourceRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::SourceRemoved)->_add_SourceRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::SourceRemoved)->_remove_SourceRemoved(token)); }
		} SourceRemoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSourceWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::Stopped)->_add_Stopped(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSourceWatcher_adaptor::Stopped)->_remove_Stopped(token)); }
		} Stopped;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IPerceptionInfraredFrameSourceWatcher_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrameSourceWatcher, X> : Windows::Devices::Perception::IPerceptionInfraredFrameSourceWatcher_adaptor<X> { typedef adapt IPerceptionInfraredFrameSourceWatcher; };
struct IPerceptionInfraredFrameSourceWatcher : IPerceptionInfraredFrameSourceWatcher_raw, generate<IPerceptionInfraredFrameSourceWatcher> {};

// PerceptionInfraredFrameSourceWatcher
template<typename X> struct statics<PerceptionInfraredFrameSourceWatcher, X> : X {
	typedef typename X::root_type PerceptionInfraredFrameSourceWatcher;
};
struct PerceptionInfraredFrameSourceWatcher : generate<PerceptionInfraredFrameSourceWatcher> {};

// IPerceptionInfraredFrameSourceAddedEventArgs
struct IPerceptionInfraredFrameSourceAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameSource(PerceptionInfraredFrameSource* *value);
};
template<typename X> struct IPerceptionInfraredFrameSourceAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PerceptionInfraredFrameSource> get() { PerceptionInfraredFrameSource* value; hrcheck(enc(&IPerceptionInfraredFrameSourceAddedEventArgs_adaptor::FrameSource)->_get_FrameSource(&value)); return from_abi(value); }
			ptr<PerceptionInfraredFrameSource> operator()() { return get(); }
			operator ptr<PerceptionInfraredFrameSource> () { return get(); }
			ptr<PerceptionInfraredFrameSource> operator->() { return get(); }
		} FrameSource;
	};
	IPerceptionInfraredFrameSourceAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrameSourceAddedEventArgs, X> : Windows::Devices::Perception::IPerceptionInfraredFrameSourceAddedEventArgs_adaptor<X> { typedef adapt IPerceptionInfraredFrameSourceAddedEventArgs; };
struct IPerceptionInfraredFrameSourceAddedEventArgs : IPerceptionInfraredFrameSourceAddedEventArgs_raw, generate<IPerceptionInfraredFrameSourceAddedEventArgs> {};

// PerceptionInfraredFrameSourceAddedEventArgs
template<typename X> struct statics<PerceptionInfraredFrameSourceAddedEventArgs, X> : X {
	typedef typename X::root_type PerceptionInfraredFrameSourceAddedEventArgs;
};
struct PerceptionInfraredFrameSourceAddedEventArgs : generate<PerceptionInfraredFrameSourceAddedEventArgs> {};

// IPerceptionInfraredFrameSourceRemovedEventArgs
struct IPerceptionInfraredFrameSourceRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameSource(PerceptionInfraredFrameSource* *value);
};
template<typename X> struct IPerceptionInfraredFrameSourceRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PerceptionInfraredFrameSource> get() { PerceptionInfraredFrameSource* value; hrcheck(enc(&IPerceptionInfraredFrameSourceRemovedEventArgs_adaptor::FrameSource)->_get_FrameSource(&value)); return from_abi(value); }
			ptr<PerceptionInfraredFrameSource> operator()() { return get(); }
			operator ptr<PerceptionInfraredFrameSource> () { return get(); }
			ptr<PerceptionInfraredFrameSource> operator->() { return get(); }
		} FrameSource;
	};
	IPerceptionInfraredFrameSourceRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrameSourceRemovedEventArgs, X> : Windows::Devices::Perception::IPerceptionInfraredFrameSourceRemovedEventArgs_adaptor<X> { typedef adapt IPerceptionInfraredFrameSourceRemovedEventArgs; };
struct IPerceptionInfraredFrameSourceRemovedEventArgs : IPerceptionInfraredFrameSourceRemovedEventArgs_raw, generate<IPerceptionInfraredFrameSourceRemovedEventArgs> {};

// PerceptionInfraredFrameSourceRemovedEventArgs
template<typename X> struct statics<PerceptionInfraredFrameSourceRemovedEventArgs, X> : X {
	typedef typename X::root_type PerceptionInfraredFrameSourceRemovedEventArgs;
};
struct PerceptionInfraredFrameSourceRemovedEventArgs : generate<PerceptionInfraredFrameSourceRemovedEventArgs> {};

// IPerceptionColorFrameSourceStatics
struct IPerceptionColorFrameSourceStatics : IInspectable {
	virtual STDMETHODIMP _CreateWatcher(PerceptionColorFrameSourceWatcher* *watcher);
	virtual STDMETHODIMP _FindAllAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PerceptionColorFrameSource*>*>* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING id, Foundation::IAsyncOperation<PerceptionColorFrameSource*>* *result);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>* *result);
};

// IPerceptionColorFrameSource2
struct IPerceptionColorFrameSource2_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IPerceptionColorFrameSource2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionColorFrameSource2_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IPerceptionColorFrameSource2_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrameSource2, X> : Windows::Devices::Perception::IPerceptionColorFrameSource2_adaptor<X> { typedef adapt IPerceptionColorFrameSource2; };
struct IPerceptionColorFrameSource2 : IPerceptionColorFrameSource2_raw, generate<IPerceptionColorFrameSource2> {};

// IPerceptionColorFrameSource
struct IPerceptionColorFrameSource_raw : IInspectable {
	virtual STDMETHODIMP _add_AvailableChanged(Foundation::TypedEventHandler<PerceptionColorFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AvailableChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ActiveChanged(Foundation::TypedEventHandler<PerceptionColorFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ActiveChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PropertiesChanged(Foundation::TypedEventHandler<PerceptionColorFrameSource*, PerceptionFrameSourcePropertiesChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PropertiesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VideoProfileChanged(Foundation::TypedEventHandler<PerceptionColorFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoProfileChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CameraIntrinsicsChanged(Foundation::TypedEventHandler<PerceptionColorFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraIntrinsicsChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceKind(HSTRING *value);
	virtual STDMETHODIMP _get_Available(bool *value);
	virtual STDMETHODIMP _get_Active(bool *value);
	virtual STDMETHODIMP _get_IsControlled(bool *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
	virtual STDMETHODIMP _get_SupportedVideoProfiles(Foundation::Collections::IVectorView<PerceptionVideoProfile*>* *value);
	virtual STDMETHODIMP _get_AvailableVideoProfiles(Foundation::Collections::IVectorView<PerceptionVideoProfile*>* *value);
	virtual STDMETHODIMP _get_VideoProfile(PerceptionVideoProfile* *value);
	virtual STDMETHODIMP _get_CameraIntrinsics(Media::Devices::Core::CameraIntrinsics* *value);
	virtual STDMETHODIMP _AcquireControlSession(PerceptionControlSession* *value);
	virtual STDMETHODIMP _CanControlIndependentlyFrom(HSTRING targetId, bool *result);
	virtual STDMETHODIMP _IsCorrelatedWith(HSTRING targetId, bool *result);
	virtual STDMETHODIMP _TryGetTransformTo(HSTRING targetId, Foundation::Numerics::Matrix4x4 *result, bool *hasResult);
	virtual STDMETHODIMP _TryGetDepthCorrelatedCameraIntrinsicsAsync(PerceptionDepthFrameSource* correlatedDepthFrameSource, Foundation::IAsyncOperation<PerceptionDepthCorrelatedCameraIntrinsics*>* *result);
	virtual STDMETHODIMP _TryGetDepthCorrelatedCoordinateMapperAsync(HSTRING targetSourceId, PerceptionDepthFrameSource* correlatedDepthFrameSource, Foundation::IAsyncOperation<PerceptionDepthCorrelatedCoordinateMapper*>* *result);
	virtual STDMETHODIMP _TrySetVideoProfileAsync(PerceptionControlSession* controlSession, PerceptionVideoProfile* profile, Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* *result);
	virtual STDMETHODIMP _OpenReader(PerceptionColorFrameReader* *result);
};
template<typename X> struct IPerceptionColorFrameSource_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::Active)->_get_Active(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Active;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::Available)->_get_Available(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Available;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> get() { Foundation::Collections::IVectorView<PerceptionVideoProfile*>* value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::AvailableVideoProfiles)->_get_AvailableVideoProfiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator->() { return get(); }
		} AvailableVideoProfiles;
		struct : property {
			ptr<Media::Devices::Core::CameraIntrinsics> get() { Media::Devices::Core::CameraIntrinsics* value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::CameraIntrinsics)->_get_CameraIntrinsics(&value)); return from_abi(value); }
			ptr<Media::Devices::Core::CameraIntrinsics> operator()() { return get(); }
			operator ptr<Media::Devices::Core::CameraIntrinsics> () { return get(); }
			ptr<Media::Devices::Core::CameraIntrinsics> operator->() { return get(); }
		} CameraIntrinsics;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::DeviceKind)->_get_DeviceKind(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceKind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::IsControlled)->_get_IsControlled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsControlled;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> get() { Foundation::Collections::IVectorView<PerceptionVideoProfile*>* value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::SupportedVideoProfiles)->_get_SupportedVideoProfiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator->() { return get(); }
		} SupportedVideoProfiles;
		struct : property {
			ptr<PerceptionVideoProfile> get() { PerceptionVideoProfile* value; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::VideoProfile)->_get_VideoProfile(&value)); return from_abi(value); }
			ptr<PerceptionVideoProfile> operator()() { return get(); }
			operator ptr<PerceptionVideoProfile> () { return get(); }
			ptr<PerceptionVideoProfile> operator->() { return get(); }
		} VideoProfile;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::ActiveChanged)->_add_ActiveChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSource_adaptor::ActiveChanged)->_remove_ActiveChanged(token)); }
		} ActiveChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::AvailableChanged)->_add_AvailableChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSource_adaptor::AvailableChanged)->_remove_AvailableChanged(token)); }
		} AvailableChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::CameraIntrinsicsChanged)->_add_CameraIntrinsicsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSource_adaptor::CameraIntrinsicsChanged)->_remove_CameraIntrinsicsChanged(token)); }
		} CameraIntrinsicsChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSource>, ptr<PerceptionFrameSourcePropertiesChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::PropertiesChanged)->_add_PropertiesChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSource_adaptor::PropertiesChanged)->_remove_PropertiesChanged(token)); }
		} PropertiesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameSource_adaptor::VideoProfileChanged)->_add_VideoProfileChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameSource_adaptor::VideoProfileChanged)->_remove_VideoProfileChanged(token)); }
		} VideoProfileChanged;
	};
	ptr<PerceptionControlSession> AcquireControlSession() { PerceptionControlSession* value; hrcheck(X::get()->_AcquireControlSession(&value)); return from_abi(value); }
	bool CanControlIndependentlyFrom(hstring_ref targetId) { bool result; hrcheck(X::get()->_CanControlIndependentlyFrom(targetId, &result)); return result; }
	bool IsCorrelatedWith(hstring_ref targetId) { bool result; hrcheck(X::get()->_IsCorrelatedWith(targetId, &result)); return result; }
	bool TryGetTransformTo(hstring_ref targetId, Foundation::Numerics::Matrix4x4 *result) { bool hasResult; hrcheck(X::get()->_TryGetTransformTo(targetId, result, &hasResult)); return hasResult; }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionDepthCorrelatedCameraIntrinsics>>> TryGetDepthCorrelatedCameraIntrinsicsAsync(pptr<PerceptionDepthFrameSource> correlatedDepthFrameSource) { Foundation::IAsyncOperation<PerceptionDepthCorrelatedCameraIntrinsics*>* result; hrcheck(X::get()->_TryGetDepthCorrelatedCameraIntrinsicsAsync(correlatedDepthFrameSource, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionDepthCorrelatedCoordinateMapper>>> TryGetDepthCorrelatedCoordinateMapperAsync(hstring_ref targetSourceId, pptr<PerceptionDepthFrameSource> correlatedDepthFrameSource) { Foundation::IAsyncOperation<PerceptionDepthCorrelatedCoordinateMapper*>* result; hrcheck(X::get()->_TryGetDepthCorrelatedCoordinateMapperAsync(targetSourceId, correlatedDepthFrameSource, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionFrameSourcePropertyChangeResult>>> TrySetVideoProfileAsync(pptr<PerceptionControlSession> controlSession, pptr<PerceptionVideoProfile> profile) { Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* result; hrcheck(X::get()->_TrySetVideoProfileAsync(controlSession, profile, &result)); return from_abi(result); }
	ptr<PerceptionColorFrameReader> OpenReader() { PerceptionColorFrameReader* result; hrcheck(X::get()->_OpenReader(&result)); return from_abi(result); }
	IPerceptionColorFrameSource_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrameSource, X> : Windows::Devices::Perception::IPerceptionColorFrameSource_adaptor<X> { typedef adapt IPerceptionColorFrameSource; };
struct IPerceptionColorFrameSource : IPerceptionColorFrameSource_raw, generate<IPerceptionColorFrameSource> {};

// PerceptionColorFrameSource
template<typename> struct PerceptionColorFrameSource_statics {
	static ptr<PerceptionColorFrameSourceWatcher> CreateWatcher() { PerceptionColorFrameSourceWatcher* watcher; hrcheck(get_activation_factory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>()->_CreateWatcher(&watcher)); return from_abi(watcher); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PerceptionColorFrameSource>>>>> FindAllAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PerceptionColorFrameSource*>*>* result; hrcheck(get_activation_factory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>()->_FindAllAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<PerceptionColorFrameSource>>> FromIdAsync(hstring_ref id) { Foundation::IAsyncOperation<PerceptionColorFrameSource*>* result; hrcheck(get_activation_factory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>()->_FromIdAsync(id, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>* result; hrcheck(get_activation_factory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>()->_RequestAccessAsync(&result)); return from_abi(result); }
};

template<typename X> struct statics<PerceptionColorFrameSource, X> : X, Windows::Devices::Perception::PerceptionColorFrameSource_statics<void> {
	typedef typename X::root_type PerceptionColorFrameSource;
};
struct PerceptionColorFrameSource : generate<PerceptionColorFrameSource> {};

// IPerceptionDepthFrameSourceStatics
struct IPerceptionDepthFrameSourceStatics : IInspectable {
	virtual STDMETHODIMP _CreateWatcher(PerceptionDepthFrameSourceWatcher* *watcher);
	virtual STDMETHODIMP _FindAllAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PerceptionDepthFrameSource*>*>* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING id, Foundation::IAsyncOperation<PerceptionDepthFrameSource*>* *result);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>* *result);
};

// IPerceptionDepthFrameSource2
struct IPerceptionDepthFrameSource2_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IPerceptionDepthFrameSource2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionDepthFrameSource2_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IPerceptionDepthFrameSource2_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrameSource2, X> : Windows::Devices::Perception::IPerceptionDepthFrameSource2_adaptor<X> { typedef adapt IPerceptionDepthFrameSource2; };
struct IPerceptionDepthFrameSource2 : IPerceptionDepthFrameSource2_raw, generate<IPerceptionDepthFrameSource2> {};

// IPerceptionDepthFrameSource
struct IPerceptionDepthFrameSource_raw : IInspectable {
	virtual STDMETHODIMP _add_AvailableChanged(Foundation::TypedEventHandler<PerceptionDepthFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AvailableChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ActiveChanged(Foundation::TypedEventHandler<PerceptionDepthFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ActiveChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PropertiesChanged(Foundation::TypedEventHandler<PerceptionDepthFrameSource*, PerceptionFrameSourcePropertiesChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PropertiesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VideoProfileChanged(Foundation::TypedEventHandler<PerceptionDepthFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoProfileChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CameraIntrinsicsChanged(Foundation::TypedEventHandler<PerceptionDepthFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraIntrinsicsChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceKind(HSTRING *value);
	virtual STDMETHODIMP _get_Available(bool *value);
	virtual STDMETHODIMP _get_Active(bool *value);
	virtual STDMETHODIMP _get_IsControlled(bool *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
	virtual STDMETHODIMP _get_SupportedVideoProfiles(Foundation::Collections::IVectorView<PerceptionVideoProfile*>* *value);
	virtual STDMETHODIMP _get_AvailableVideoProfiles(Foundation::Collections::IVectorView<PerceptionVideoProfile*>* *value);
	virtual STDMETHODIMP _get_VideoProfile(PerceptionVideoProfile* *value);
	virtual STDMETHODIMP _get_CameraIntrinsics(Media::Devices::Core::CameraIntrinsics* *value);
	virtual STDMETHODIMP _AcquireControlSession(PerceptionControlSession* *result);
	virtual STDMETHODIMP _CanControlIndependentlyFrom(HSTRING targetId, bool *result);
	virtual STDMETHODIMP _IsCorrelatedWith(HSTRING targetId, bool *result);
	virtual STDMETHODIMP _TryGetTransformTo(HSTRING targetId, Foundation::Numerics::Matrix4x4 *result, bool *hasResult);
	virtual STDMETHODIMP _TryGetDepthCorrelatedCameraIntrinsicsAsync(PerceptionDepthFrameSource* target, Foundation::IAsyncOperation<PerceptionDepthCorrelatedCameraIntrinsics*>* *result);
	virtual STDMETHODIMP _TryGetDepthCorrelatedCoordinateMapperAsync(HSTRING targetId, PerceptionDepthFrameSource* depthFrameSourceToMapWith, Foundation::IAsyncOperation<PerceptionDepthCorrelatedCoordinateMapper*>* *result);
	virtual STDMETHODIMP _TrySetVideoProfileAsync(PerceptionControlSession* controlSession, PerceptionVideoProfile* profile, Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* *result);
	virtual STDMETHODIMP _OpenReader(PerceptionDepthFrameReader* *result);
};
template<typename X> struct IPerceptionDepthFrameSource_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::Active)->_get_Active(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Active;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::Available)->_get_Available(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Available;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> get() { Foundation::Collections::IVectorView<PerceptionVideoProfile*>* value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::AvailableVideoProfiles)->_get_AvailableVideoProfiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator->() { return get(); }
		} AvailableVideoProfiles;
		struct : property {
			ptr<Media::Devices::Core::CameraIntrinsics> get() { Media::Devices::Core::CameraIntrinsics* value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::CameraIntrinsics)->_get_CameraIntrinsics(&value)); return from_abi(value); }
			ptr<Media::Devices::Core::CameraIntrinsics> operator()() { return get(); }
			operator ptr<Media::Devices::Core::CameraIntrinsics> () { return get(); }
			ptr<Media::Devices::Core::CameraIntrinsics> operator->() { return get(); }
		} CameraIntrinsics;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::DeviceKind)->_get_DeviceKind(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceKind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::IsControlled)->_get_IsControlled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsControlled;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> get() { Foundation::Collections::IVectorView<PerceptionVideoProfile*>* value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::SupportedVideoProfiles)->_get_SupportedVideoProfiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator->() { return get(); }
		} SupportedVideoProfiles;
		struct : property {
			ptr<PerceptionVideoProfile> get() { PerceptionVideoProfile* value; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::VideoProfile)->_get_VideoProfile(&value)); return from_abi(value); }
			ptr<PerceptionVideoProfile> operator()() { return get(); }
			operator ptr<PerceptionVideoProfile> () { return get(); }
			ptr<PerceptionVideoProfile> operator->() { return get(); }
		} VideoProfile;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::ActiveChanged)->_add_ActiveChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::ActiveChanged)->_remove_ActiveChanged(token)); }
		} ActiveChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::AvailableChanged)->_add_AvailableChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::AvailableChanged)->_remove_AvailableChanged(token)); }
		} AvailableChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::CameraIntrinsicsChanged)->_add_CameraIntrinsicsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::CameraIntrinsicsChanged)->_remove_CameraIntrinsicsChanged(token)); }
		} CameraIntrinsicsChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSource>, ptr<PerceptionFrameSourcePropertiesChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::PropertiesChanged)->_add_PropertiesChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::PropertiesChanged)->_remove_PropertiesChanged(token)); }
		} PropertiesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::VideoProfileChanged)->_add_VideoProfileChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameSource_adaptor::VideoProfileChanged)->_remove_VideoProfileChanged(token)); }
		} VideoProfileChanged;
	};
	ptr<PerceptionControlSession> AcquireControlSession() { PerceptionControlSession* result; hrcheck(X::get()->_AcquireControlSession(&result)); return from_abi(result); }
	bool CanControlIndependentlyFrom(hstring_ref targetId) { bool result; hrcheck(X::get()->_CanControlIndependentlyFrom(targetId, &result)); return result; }
	bool IsCorrelatedWith(hstring_ref targetId) { bool result; hrcheck(X::get()->_IsCorrelatedWith(targetId, &result)); return result; }
	bool TryGetTransformTo(hstring_ref targetId, Foundation::Numerics::Matrix4x4 *result) { bool hasResult; hrcheck(X::get()->_TryGetTransformTo(targetId, result, &hasResult)); return hasResult; }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionDepthCorrelatedCameraIntrinsics>>> TryGetDepthCorrelatedCameraIntrinsicsAsync(pptr<PerceptionDepthFrameSource> target) { Foundation::IAsyncOperation<PerceptionDepthCorrelatedCameraIntrinsics*>* result; hrcheck(X::get()->_TryGetDepthCorrelatedCameraIntrinsicsAsync(target, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionDepthCorrelatedCoordinateMapper>>> TryGetDepthCorrelatedCoordinateMapperAsync(hstring_ref targetId, pptr<PerceptionDepthFrameSource> depthFrameSourceToMapWith) { Foundation::IAsyncOperation<PerceptionDepthCorrelatedCoordinateMapper*>* result; hrcheck(X::get()->_TryGetDepthCorrelatedCoordinateMapperAsync(targetId, depthFrameSourceToMapWith, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionFrameSourcePropertyChangeResult>>> TrySetVideoProfileAsync(pptr<PerceptionControlSession> controlSession, pptr<PerceptionVideoProfile> profile) { Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* result; hrcheck(X::get()->_TrySetVideoProfileAsync(controlSession, profile, &result)); return from_abi(result); }
	ptr<PerceptionDepthFrameReader> OpenReader() { PerceptionDepthFrameReader* result; hrcheck(X::get()->_OpenReader(&result)); return from_abi(result); }
	IPerceptionDepthFrameSource_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrameSource, X> : Windows::Devices::Perception::IPerceptionDepthFrameSource_adaptor<X> { typedef adapt IPerceptionDepthFrameSource; };
struct IPerceptionDepthFrameSource : IPerceptionDepthFrameSource_raw, generate<IPerceptionDepthFrameSource> {};

// PerceptionDepthFrameSource
template<typename> struct PerceptionDepthFrameSource_statics {
	static ptr<PerceptionDepthFrameSourceWatcher> CreateWatcher() { PerceptionDepthFrameSourceWatcher* watcher; hrcheck(get_activation_factory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>()->_CreateWatcher(&watcher)); return from_abi(watcher); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PerceptionDepthFrameSource>>>>> FindAllAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PerceptionDepthFrameSource*>*>* result; hrcheck(get_activation_factory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>()->_FindAllAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<PerceptionDepthFrameSource>>> FromIdAsync(hstring_ref id) { Foundation::IAsyncOperation<PerceptionDepthFrameSource*>* result; hrcheck(get_activation_factory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>()->_FromIdAsync(id, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>* result; hrcheck(get_activation_factory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>()->_RequestAccessAsync(&result)); return from_abi(result); }
};

template<typename X> struct statics<PerceptionDepthFrameSource, X> : X, Windows::Devices::Perception::PerceptionDepthFrameSource_statics<void> {
	typedef typename X::root_type PerceptionDepthFrameSource;
};
struct PerceptionDepthFrameSource : generate<PerceptionDepthFrameSource> {};

// IPerceptionInfraredFrameSourceStatics
struct IPerceptionInfraredFrameSourceStatics : IInspectable {
	virtual STDMETHODIMP _CreateWatcher(PerceptionInfraredFrameSourceWatcher* *watcher);
	virtual STDMETHODIMP _FindAllAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PerceptionInfraredFrameSource*>*>* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING id, Foundation::IAsyncOperation<PerceptionInfraredFrameSource*>* *result);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>* *result);
};

// IPerceptionInfraredFrameSource2
struct IPerceptionInfraredFrameSource2_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};
template<typename X> struct IPerceptionInfraredFrameSource2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionInfraredFrameSource2_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
	};
	IPerceptionInfraredFrameSource2_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrameSource2, X> : Windows::Devices::Perception::IPerceptionInfraredFrameSource2_adaptor<X> { typedef adapt IPerceptionInfraredFrameSource2; };
struct IPerceptionInfraredFrameSource2 : IPerceptionInfraredFrameSource2_raw, generate<IPerceptionInfraredFrameSource2> {};

// IPerceptionInfraredFrameSource
struct IPerceptionInfraredFrameSource_raw : IInspectable {
	virtual STDMETHODIMP _add_AvailableChanged(Foundation::TypedEventHandler<PerceptionInfraredFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AvailableChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ActiveChanged(Foundation::TypedEventHandler<PerceptionInfraredFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ActiveChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_PropertiesChanged(Foundation::TypedEventHandler<PerceptionInfraredFrameSource*, PerceptionFrameSourcePropertiesChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PropertiesChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VideoProfileChanged(Foundation::TypedEventHandler<PerceptionInfraredFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VideoProfileChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CameraIntrinsicsChanged(Foundation::TypedEventHandler<PerceptionInfraredFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CameraIntrinsicsChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceKind(HSTRING *value);
	virtual STDMETHODIMP _get_Available(bool *value);
	virtual STDMETHODIMP _get_Active(bool *value);
	virtual STDMETHODIMP _get_IsControlled(bool *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, IInspectable*>* *value);
	virtual STDMETHODIMP _get_SupportedVideoProfiles(Foundation::Collections::IVectorView<PerceptionVideoProfile*>* *value);
	virtual STDMETHODIMP _get_AvailableVideoProfiles(Foundation::Collections::IVectorView<PerceptionVideoProfile*>* *value);
	virtual STDMETHODIMP _get_VideoProfile(PerceptionVideoProfile* *value);
	virtual STDMETHODIMP _get_CameraIntrinsics(Media::Devices::Core::CameraIntrinsics* *value);
	virtual STDMETHODIMP _AcquireControlSession(PerceptionControlSession* *result);
	virtual STDMETHODIMP _CanControlIndependentlyFrom(HSTRING targetId, bool *result);
	virtual STDMETHODIMP _IsCorrelatedWith(HSTRING targetId, bool *result);
	virtual STDMETHODIMP _TryGetTransformTo(HSTRING targetId, Foundation::Numerics::Matrix4x4 *result, bool *hasResult);
	virtual STDMETHODIMP _TryGetDepthCorrelatedCameraIntrinsicsAsync(PerceptionDepthFrameSource* target, Foundation::IAsyncOperation<PerceptionDepthCorrelatedCameraIntrinsics*>* *result);
	virtual STDMETHODIMP _TryGetDepthCorrelatedCoordinateMapperAsync(HSTRING targetId, PerceptionDepthFrameSource* depthFrameSourceToMapWith, Foundation::IAsyncOperation<PerceptionDepthCorrelatedCoordinateMapper*>* *result);
	virtual STDMETHODIMP _TrySetVideoProfileAsync(PerceptionControlSession* controlSession, PerceptionVideoProfile* profile, Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* *result);
	virtual STDMETHODIMP _OpenReader(PerceptionInfraredFrameReader* *result);
};
template<typename X> struct IPerceptionInfraredFrameSource_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::Active)->_get_Active(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Active;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::Available)->_get_Available(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Available;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> get() { Foundation::Collections::IVectorView<PerceptionVideoProfile*>* value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::AvailableVideoProfiles)->_get_AvailableVideoProfiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator->() { return get(); }
		} AvailableVideoProfiles;
		struct : property {
			ptr<Media::Devices::Core::CameraIntrinsics> get() { Media::Devices::Core::CameraIntrinsics* value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::CameraIntrinsics)->_get_CameraIntrinsics(&value)); return from_abi(value); }
			ptr<Media::Devices::Core::CameraIntrinsics> operator()() { return get(); }
			operator ptr<Media::Devices::Core::CameraIntrinsics> () { return get(); }
			ptr<Media::Devices::Core::CameraIntrinsics> operator->() { return get(); }
		} CameraIntrinsics;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::DeviceKind)->_get_DeviceKind(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceKind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::IsControlled)->_get_IsControlled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsControlled;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, object>> get() { Foundation::Collections::IMapView<HSTRING, IInspectable*>* value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> get() { Foundation::Collections::IVectorView<PerceptionVideoProfile*>* value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::SupportedVideoProfiles)->_get_SupportedVideoProfiles(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<PerceptionVideoProfile>>> operator->() { return get(); }
		} SupportedVideoProfiles;
		struct : property {
			ptr<PerceptionVideoProfile> get() { PerceptionVideoProfile* value; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::VideoProfile)->_get_VideoProfile(&value)); return from_abi(value); }
			ptr<PerceptionVideoProfile> operator()() { return get(); }
			operator ptr<PerceptionVideoProfile> () { return get(); }
			ptr<PerceptionVideoProfile> operator->() { return get(); }
		} VideoProfile;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::ActiveChanged)->_add_ActiveChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::ActiveChanged)->_remove_ActiveChanged(token)); }
		} ActiveChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::AvailableChanged)->_add_AvailableChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::AvailableChanged)->_remove_AvailableChanged(token)); }
		} AvailableChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::CameraIntrinsicsChanged)->_add_CameraIntrinsicsChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::CameraIntrinsicsChanged)->_remove_CameraIntrinsicsChanged(token)); }
		} CameraIntrinsicsChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSource>, ptr<PerceptionFrameSourcePropertiesChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::PropertiesChanged)->_add_PropertiesChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::PropertiesChanged)->_remove_PropertiesChanged(token)); }
		} PropertiesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::VideoProfileChanged)->_add_VideoProfileChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameSource_adaptor::VideoProfileChanged)->_remove_VideoProfileChanged(token)); }
		} VideoProfileChanged;
	};
	ptr<PerceptionControlSession> AcquireControlSession() { PerceptionControlSession* result; hrcheck(X::get()->_AcquireControlSession(&result)); return from_abi(result); }
	bool CanControlIndependentlyFrom(hstring_ref targetId) { bool result; hrcheck(X::get()->_CanControlIndependentlyFrom(targetId, &result)); return result; }
	bool IsCorrelatedWith(hstring_ref targetId) { bool result; hrcheck(X::get()->_IsCorrelatedWith(targetId, &result)); return result; }
	bool TryGetTransformTo(hstring_ref targetId, Foundation::Numerics::Matrix4x4 *result) { bool hasResult; hrcheck(X::get()->_TryGetTransformTo(targetId, result, &hasResult)); return hasResult; }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionDepthCorrelatedCameraIntrinsics>>> TryGetDepthCorrelatedCameraIntrinsicsAsync(pptr<PerceptionDepthFrameSource> target) { Foundation::IAsyncOperation<PerceptionDepthCorrelatedCameraIntrinsics*>* result; hrcheck(X::get()->_TryGetDepthCorrelatedCameraIntrinsicsAsync(target, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionDepthCorrelatedCoordinateMapper>>> TryGetDepthCorrelatedCoordinateMapperAsync(hstring_ref targetId, pptr<PerceptionDepthFrameSource> depthFrameSourceToMapWith) { Foundation::IAsyncOperation<PerceptionDepthCorrelatedCoordinateMapper*>* result; hrcheck(X::get()->_TryGetDepthCorrelatedCoordinateMapperAsync(targetId, depthFrameSourceToMapWith, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<PerceptionFrameSourcePropertyChangeResult>>> TrySetVideoProfileAsync(pptr<PerceptionControlSession> controlSession, pptr<PerceptionVideoProfile> profile) { Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* result; hrcheck(X::get()->_TrySetVideoProfileAsync(controlSession, profile, &result)); return from_abi(result); }
	ptr<PerceptionInfraredFrameReader> OpenReader() { PerceptionInfraredFrameReader* result; hrcheck(X::get()->_OpenReader(&result)); return from_abi(result); }
	IPerceptionInfraredFrameSource_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrameSource, X> : Windows::Devices::Perception::IPerceptionInfraredFrameSource_adaptor<X> { typedef adapt IPerceptionInfraredFrameSource; };
struct IPerceptionInfraredFrameSource : IPerceptionInfraredFrameSource_raw, generate<IPerceptionInfraredFrameSource> {};

// PerceptionInfraredFrameSource
template<typename> struct PerceptionInfraredFrameSource_statics {
	static ptr<PerceptionInfraredFrameSourceWatcher> CreateWatcher() { PerceptionInfraredFrameSourceWatcher* watcher; hrcheck(get_activation_factory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>()->_CreateWatcher(&watcher)); return from_abi(watcher); }
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<PerceptionInfraredFrameSource>>>>> FindAllAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<PerceptionInfraredFrameSource*>*>* result; hrcheck(get_activation_factory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>()->_FindAllAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<PerceptionInfraredFrameSource>>> FromIdAsync(hstring_ref id) { Foundation::IAsyncOperation<PerceptionInfraredFrameSource*>* result; hrcheck(get_activation_factory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>()->_FromIdAsync(id, &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<PerceptionFrameSourceAccessStatus>* result; hrcheck(get_activation_factory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>()->_RequestAccessAsync(&result)); return from_abi(result); }
};

template<typename X> struct statics<PerceptionInfraredFrameSource, X> : X, Windows::Devices::Perception::PerceptionInfraredFrameSource_statics<void> {
	typedef typename X::root_type PerceptionInfraredFrameSource;
};
struct PerceptionInfraredFrameSource : generate<PerceptionInfraredFrameSource> {};

// IKnownPerceptionFrameSourcePropertiesStatics
struct IKnownPerceptionFrameSourcePropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_PhysicalDeviceIds(HSTRING *value);
	virtual STDMETHODIMP _get_FrameKind(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceModelVersion(HSTRING *value);
	virtual STDMETHODIMP _get_EnclosureLocation(HSTRING *value);
};

// IKnownPerceptionFrameSourcePropertiesStatics2
struct IKnownPerceptionFrameSourcePropertiesStatics2 : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
};

// IKnownPerceptionVideoFrameSourcePropertiesStatics
struct IKnownPerceptionVideoFrameSourcePropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_VideoProfile(HSTRING *value);
	virtual STDMETHODIMP _get_SupportedVideoProfiles(HSTRING *value);
	virtual STDMETHODIMP _get_AvailableVideoProfiles(HSTRING *value);
	virtual STDMETHODIMP _get_IsMirrored(HSTRING *value);
	virtual STDMETHODIMP _get_CameraIntrinsics(HSTRING *value);
};

// IKnownPerceptionInfraredFrameSourcePropertiesStatics
struct IKnownPerceptionInfraredFrameSourcePropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_Exposure(HSTRING *value);
	virtual STDMETHODIMP _get_AutoExposureEnabled(HSTRING *value);
	virtual STDMETHODIMP _get_ExposureCompensation(HSTRING *value);
	virtual STDMETHODIMP _get_ActiveIlluminationEnabled(HSTRING *value);
	virtual STDMETHODIMP _get_AmbientSubtractionEnabled(HSTRING *value);
	virtual STDMETHODIMP _get_StructureLightPatternEnabled(HSTRING *value);
	virtual STDMETHODIMP _get_InterleavedIlluminationEnabled(HSTRING *value);
};

// IKnownPerceptionDepthFrameSourcePropertiesStatics
struct IKnownPerceptionDepthFrameSourcePropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_MinDepth(HSTRING *value);
	virtual STDMETHODIMP _get_MaxDepth(HSTRING *value);
};

// IKnownPerceptionColorFrameSourcePropertiesStatics
struct IKnownPerceptionColorFrameSourcePropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_Exposure(HSTRING *value);
	virtual STDMETHODIMP _get_AutoExposureEnabled(HSTRING *value);
	virtual STDMETHODIMP _get_ExposureCompensation(HSTRING *value);
};

// IKnownPerceptionVideoProfilePropertiesStatics
struct IKnownPerceptionVideoProfilePropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_BitmapPixelFormat(HSTRING *value);
	virtual STDMETHODIMP _get_BitmapAlphaMode(HSTRING *value);
	virtual STDMETHODIMP _get_Width(HSTRING *value);
	virtual STDMETHODIMP _get_Height(HSTRING *value);
	virtual STDMETHODIMP _get_FrameDuration(HSTRING *value);
};

// IKnownCameraIntrinsicsPropertiesStatics
struct IKnownCameraIntrinsicsPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_FocalLength(HSTRING *value);
	virtual STDMETHODIMP _get_PrincipalPoint(HSTRING *value);
	virtual STDMETHODIMP _get_RadialDistortion(HSTRING *value);
	virtual STDMETHODIMP _get_TangentialDistortion(HSTRING *value);
};

// IPerceptionFrameSourcePropertyChangeResult
struct IPerceptionFrameSourcePropertyChangeResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(PerceptionFrameSourcePropertyChangeStatus *value);
	virtual STDMETHODIMP _get_NewValue(IInspectable* *value);
};
template<typename X> struct IPerceptionFrameSourcePropertyChangeResult_adaptor : X {
	union {
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IPerceptionFrameSourcePropertyChangeResult_adaptor::NewValue)->_get_NewValue(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} NewValue;
		struct : property {
			PerceptionFrameSourcePropertyChangeStatus get() { PerceptionFrameSourcePropertyChangeStatus value; hrcheck(enc(&IPerceptionFrameSourcePropertyChangeResult_adaptor::Status)->_get_Status(&value)); return value; }
			PerceptionFrameSourcePropertyChangeStatus operator()() { return get(); }
			operator PerceptionFrameSourcePropertyChangeStatus () { return get(); }
		} Status;
	};
	IPerceptionFrameSourcePropertyChangeResult_adaptor() {}
};
template<typename X> struct adapt<IPerceptionFrameSourcePropertyChangeResult, X> : Windows::Devices::Perception::IPerceptionFrameSourcePropertyChangeResult_adaptor<X> { typedef adapt IPerceptionFrameSourcePropertyChangeResult; };
struct IPerceptionFrameSourcePropertyChangeResult : IPerceptionFrameSourcePropertyChangeResult_raw, generate<IPerceptionFrameSourcePropertyChangeResult> {};

// IPerceptionControlSession
struct IPerceptionControlSession_raw : IInspectable {
	virtual STDMETHODIMP _add_ControlLost(Foundation::TypedEventHandler<PerceptionControlSession*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ControlLost(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _TrySetPropertyAsync(HSTRING name, IInspectable* value, Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* *result);
};
template<typename X> struct IPerceptionControlSession_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionControlSession>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionControlSession_adaptor::ControlLost)->_add_ControlLost(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionControlSession_adaptor::ControlLost)->_remove_ControlLost(token)); }
		} ControlLost;
	};
	ptr<Foundation::IAsyncOperation<ptr<PerceptionFrameSourcePropertyChangeResult>>> TrySetPropertyAsync(hstring_ref name, object_ref value) { Foundation::IAsyncOperation<PerceptionFrameSourcePropertyChangeResult*>* result; hrcheck(X::get()->_TrySetPropertyAsync(name, value, &result)); return from_abi(result); }
	IPerceptionControlSession_adaptor() {}
};
template<typename X> struct adapt<IPerceptionControlSession, X> : Windows::Devices::Perception::IPerceptionControlSession_adaptor<X> { typedef adapt IPerceptionControlSession; };
struct IPerceptionControlSession : IPerceptionControlSession_raw, generate<IPerceptionControlSession> {};

// PerceptionControlSession
template<typename X> struct statics<PerceptionControlSession, X> : X {
	typedef typename X::root_type PerceptionControlSession;
};
struct PerceptionControlSession : generate<PerceptionControlSession> {};

// PerceptionFrameSourcePropertyChangeResult
template<typename X> struct statics<PerceptionFrameSourcePropertyChangeResult, X> : X {
	typedef typename X::root_type PerceptionFrameSourcePropertyChangeResult;
};
struct PerceptionFrameSourcePropertyChangeResult : generate<PerceptionFrameSourcePropertyChangeResult> {};

// IPerceptionFrameSourcePropertiesChangedEventArgs
struct IPerceptionFrameSourcePropertiesChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_CollectionChange(Foundation::Collections::CollectionChange *value);
	virtual STDMETHODIMP _get_Key(HSTRING *value);
};
template<typename X> struct IPerceptionFrameSourcePropertiesChangedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::Collections::CollectionChange get() { Foundation::Collections::CollectionChange value; hrcheck(enc(&IPerceptionFrameSourcePropertiesChangedEventArgs_adaptor::CollectionChange)->_get_CollectionChange(&value)); return value; }
			Foundation::Collections::CollectionChange operator()() { return get(); }
			operator Foundation::Collections::CollectionChange () { return get(); }
		} CollectionChange;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPerceptionFrameSourcePropertiesChangedEventArgs_adaptor::Key)->_get_Key(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Key;
	};
	IPerceptionFrameSourcePropertiesChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionFrameSourcePropertiesChangedEventArgs, X> : Windows::Devices::Perception::IPerceptionFrameSourcePropertiesChangedEventArgs_adaptor<X> { typedef adapt IPerceptionFrameSourcePropertiesChangedEventArgs; };
struct IPerceptionFrameSourcePropertiesChangedEventArgs : IPerceptionFrameSourcePropertiesChangedEventArgs_raw, generate<IPerceptionFrameSourcePropertiesChangedEventArgs> {};

// PerceptionFrameSourcePropertiesChangedEventArgs
template<typename X> struct statics<PerceptionFrameSourcePropertiesChangedEventArgs, X> : X {
	typedef typename X::root_type PerceptionFrameSourcePropertiesChangedEventArgs;
};
struct PerceptionFrameSourcePropertiesChangedEventArgs : generate<PerceptionFrameSourcePropertiesChangedEventArgs> {};

// IPerceptionVideoProfile
struct IPerceptionVideoProfile_raw : IInspectable {
	virtual STDMETHODIMP _get_BitmapPixelFormat(Graphics::Imaging::BitmapPixelFormat *value);
	virtual STDMETHODIMP _get_BitmapAlphaMode(Graphics::Imaging::BitmapAlphaMode *value);
	virtual STDMETHODIMP _get_Width(int *value);
	virtual STDMETHODIMP _get_Height(int *value);
	virtual STDMETHODIMP _get_FrameDuration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _IsEqual(PerceptionVideoProfile* other, bool *result);
};
template<typename X> struct IPerceptionVideoProfile_adaptor : X {
	union {
		struct : property {
			Graphics::Imaging::BitmapAlphaMode get() { Graphics::Imaging::BitmapAlphaMode value; hrcheck(enc(&IPerceptionVideoProfile_adaptor::BitmapAlphaMode)->_get_BitmapAlphaMode(&value)); return value; }
			Graphics::Imaging::BitmapAlphaMode operator()() { return get(); }
			operator Graphics::Imaging::BitmapAlphaMode () { return get(); }
		} BitmapAlphaMode;
		struct : property {
			Graphics::Imaging::BitmapPixelFormat get() { Graphics::Imaging::BitmapPixelFormat value; hrcheck(enc(&IPerceptionVideoProfile_adaptor::BitmapPixelFormat)->_get_BitmapPixelFormat(&value)); return value; }
			Graphics::Imaging::BitmapPixelFormat operator()() { return get(); }
			operator Graphics::Imaging::BitmapPixelFormat () { return get(); }
		} BitmapPixelFormat;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPerceptionVideoProfile_adaptor::FrameDuration)->_get_FrameDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} FrameDuration;
		struct : property {
			int get() { int value; hrcheck(enc(&IPerceptionVideoProfile_adaptor::Height)->_get_Height(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Height;
		struct : property {
			int get() { int value; hrcheck(enc(&IPerceptionVideoProfile_adaptor::Width)->_get_Width(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} Width;
	};
	bool IsEqual(pptr<PerceptionVideoProfile> other) { bool result; hrcheck(X::get()->_IsEqual(other, &result)); return result; }
	IPerceptionVideoProfile_adaptor() {}
};
template<typename X> struct adapt<IPerceptionVideoProfile, X> : Windows::Devices::Perception::IPerceptionVideoProfile_adaptor<X> { typedef adapt IPerceptionVideoProfile; };
struct IPerceptionVideoProfile : IPerceptionVideoProfile_raw, generate<IPerceptionVideoProfile> {};

// PerceptionVideoProfile
template<typename X> struct statics<PerceptionVideoProfile, X> : X {
	typedef typename X::root_type PerceptionVideoProfile;
};
struct PerceptionVideoProfile : generate<PerceptionVideoProfile> {};

// IPerceptionDepthCorrelatedCameraIntrinsics
struct IPerceptionDepthCorrelatedCameraIntrinsics_raw : IInspectable {
	virtual STDMETHODIMP _UnprojectPixelAtCorrelatedDepth(Foundation::Point pixelCoordinate, PerceptionDepthFrame* depthFrame, Foundation::Numerics::Vector3 *result);
	virtual STDMETHODIMP _UnprojectPixelsAtCorrelatedDepth(unsigned sourceCoordinatesSize, Foundation::Point *sourceCoordinates, PerceptionDepthFrame* depthFrame, unsigned resultsSize, Foundation::Numerics::Vector3 *results);
	virtual STDMETHODIMP _UnprojectRegionPixelsAtCorrelatedDepthAsync(Foundation::Rect region, PerceptionDepthFrame* depthFrame, unsigned resultsSize, Foundation::Numerics::Vector3 *results, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _UnprojectAllPixelsAtCorrelatedDepthAsync(PerceptionDepthFrame* depthFrame, unsigned resultsSize, Foundation::Numerics::Vector3 *results, Foundation::IAsyncAction* *result);
};
template<typename X> struct IPerceptionDepthCorrelatedCameraIntrinsics_adaptor : X {
	Foundation::Numerics::Vector3 UnprojectPixelAtCorrelatedDepth(const Foundation::Point& pixelCoordinate, pptr<PerceptionDepthFrame> depthFrame) { Foundation::Numerics::Vector3 result; hrcheck(X::get()->_UnprojectPixelAtCorrelatedDepth(pixelCoordinate, depthFrame, &result)); return result; }
	void UnprojectPixelsAtCorrelatedDepth(const szarray<Foundation::Point>& sourceCoordinates, pptr<PerceptionDepthFrame> depthFrame, const szarray<Foundation::Numerics::Vector3>& results) { hrcheck(X::get()->_UnprojectPixelsAtCorrelatedDepth(sourceCoordinates.size, to_abi(sourceCoordinates.p), depthFrame, results.size, to_abi(results.p))); }
	ptr<Foundation::IAsyncAction> UnprojectRegionPixelsAtCorrelatedDepthAsync(const Foundation::Rect& region, pptr<PerceptionDepthFrame> depthFrame, const szarray<Foundation::Numerics::Vector3>& results) { Foundation::IAsyncAction* result; hrcheck(X::get()->_UnprojectRegionPixelsAtCorrelatedDepthAsync(region, depthFrame, results.size, to_abi(results.p), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> UnprojectAllPixelsAtCorrelatedDepthAsync(pptr<PerceptionDepthFrame> depthFrame, const szarray<Foundation::Numerics::Vector3>& results) { Foundation::IAsyncAction* result; hrcheck(X::get()->_UnprojectAllPixelsAtCorrelatedDepthAsync(depthFrame, results.size, to_abi(results.p), &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPerceptionDepthCorrelatedCameraIntrinsics, X> : Windows::Devices::Perception::IPerceptionDepthCorrelatedCameraIntrinsics_adaptor<X> { typedef adapt IPerceptionDepthCorrelatedCameraIntrinsics; };
struct IPerceptionDepthCorrelatedCameraIntrinsics : IPerceptionDepthCorrelatedCameraIntrinsics_raw, generate<IPerceptionDepthCorrelatedCameraIntrinsics> {};

// PerceptionDepthCorrelatedCameraIntrinsics
template<typename X> struct statics<PerceptionDepthCorrelatedCameraIntrinsics, X> : X {
	typedef typename X::root_type PerceptionDepthCorrelatedCameraIntrinsics;
};
struct PerceptionDepthCorrelatedCameraIntrinsics : generate<PerceptionDepthCorrelatedCameraIntrinsics> {};

// IPerceptionDepthCorrelatedCoordinateMapper
struct IPerceptionDepthCorrelatedCoordinateMapper_raw : IInspectable {
	virtual STDMETHODIMP _MapPixelToTarget(Foundation::Point sourcePixelCoordinate, PerceptionDepthFrame* depthFrame, Foundation::Point *result);
	virtual STDMETHODIMP _MapPixelsToTarget(unsigned sourceCoordinatesSize, Foundation::Point *sourceCoordinates, PerceptionDepthFrame* depthFrame, unsigned resultsSize, Foundation::Point *results);
	virtual STDMETHODIMP _MapRegionOfPixelsToTargetAsync(Foundation::Rect region, PerceptionDepthFrame* depthFrame, unsigned targetCoordinatesSize, Foundation::Point *targetCoordinates, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _MapAllPixelsToTargetAsync(PerceptionDepthFrame* depthFrame, unsigned targetCoordinatesSize, Foundation::Point *targetCoordinates, Foundation::IAsyncAction* *result);
};
template<typename X> struct IPerceptionDepthCorrelatedCoordinateMapper_adaptor : X {
	Foundation::Point MapPixelToTarget(const Foundation::Point& sourcePixelCoordinate, pptr<PerceptionDepthFrame> depthFrame) { Foundation::Point result; hrcheck(X::get()->_MapPixelToTarget(sourcePixelCoordinate, depthFrame, &result)); return result; }
	void MapPixelsToTarget(const szarray<Foundation::Point>& sourceCoordinates, pptr<PerceptionDepthFrame> depthFrame, const szarray<Foundation::Point>& results) { hrcheck(X::get()->_MapPixelsToTarget(sourceCoordinates.size, to_abi(sourceCoordinates.p), depthFrame, results.size, to_abi(results.p))); }
	ptr<Foundation::IAsyncAction> MapRegionOfPixelsToTargetAsync(const Foundation::Rect& region, pptr<PerceptionDepthFrame> depthFrame, const szarray<Foundation::Point>& targetCoordinates) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MapRegionOfPixelsToTargetAsync(region, depthFrame, targetCoordinates.size, to_abi(targetCoordinates.p), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> MapAllPixelsToTargetAsync(pptr<PerceptionDepthFrame> depthFrame, const szarray<Foundation::Point>& targetCoordinates) { Foundation::IAsyncAction* result; hrcheck(X::get()->_MapAllPixelsToTargetAsync(depthFrame, targetCoordinates.size, to_abi(targetCoordinates.p), &result)); return from_abi(result); }
};
template<typename X> struct adapt<IPerceptionDepthCorrelatedCoordinateMapper, X> : Windows::Devices::Perception::IPerceptionDepthCorrelatedCoordinateMapper_adaptor<X> { typedef adapt IPerceptionDepthCorrelatedCoordinateMapper; };
struct IPerceptionDepthCorrelatedCoordinateMapper : IPerceptionDepthCorrelatedCoordinateMapper_raw, generate<IPerceptionDepthCorrelatedCoordinateMapper> {};

// PerceptionDepthCorrelatedCoordinateMapper
template<typename X> struct statics<PerceptionDepthCorrelatedCoordinateMapper, X> : X {
	typedef typename X::root_type PerceptionDepthCorrelatedCoordinateMapper;
};
struct PerceptionDepthCorrelatedCoordinateMapper : generate<PerceptionDepthCorrelatedCoordinateMapper> {};

// IPerceptionColorFrameReader
struct IPerceptionColorFrameReader_raw : IInspectable {
	virtual STDMETHODIMP _add_FrameArrived(Foundation::TypedEventHandler<PerceptionColorFrameReader*, PerceptionColorFrameArrivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FrameArrived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Source(PerceptionColorFrameSource* *value);
	virtual STDMETHODIMP _get_IsPaused(bool *value);
	virtual STDMETHODIMP _put_IsPaused(bool value);
	virtual STDMETHODIMP _TryReadLatestFrame(PerceptionColorFrame* *result);
};
template<typename X> struct IPerceptionColorFrameReader_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionColorFrameReader_adaptor::IsPaused)->_get_IsPaused(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPerceptionColorFrameReader_adaptor::IsPaused)->_put_IsPaused(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPaused;
		struct : property {
			ptr<PerceptionColorFrameSource> get() { PerceptionColorFrameSource* value; hrcheck(enc(&IPerceptionColorFrameReader_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<PerceptionColorFrameSource> operator()() { return get(); }
			operator ptr<PerceptionColorFrameSource> () { return get(); }
			ptr<PerceptionColorFrameSource> operator->() { return get(); }
		} Source;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionColorFrameReader>, ptr<PerceptionColorFrameArrivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionColorFrameReader_adaptor::FrameArrived)->_add_FrameArrived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionColorFrameReader_adaptor::FrameArrived)->_remove_FrameArrived(token)); }
		} FrameArrived;
	};
	ptr<PerceptionColorFrame> TryReadLatestFrame() { PerceptionColorFrame* result; hrcheck(X::get()->_TryReadLatestFrame(&result)); return from_abi(result); }
	IPerceptionColorFrameReader_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrameReader, X> : Windows::Devices::Perception::IPerceptionColorFrameReader_adaptor<X> { typedef adapt IPerceptionColorFrameReader; };
struct IPerceptionColorFrameReader : IPerceptionColorFrameReader_raw, generate<IPerceptionColorFrameReader> {};

// PerceptionColorFrameReader
template<typename X> struct statics<PerceptionColorFrameReader, X> : X {
	typedef typename X::root_type PerceptionColorFrameReader;
};
struct PerceptionColorFrameReader : generate<PerceptionColorFrameReader> {};

// IPerceptionDepthFrameReader
struct IPerceptionDepthFrameReader_raw : IInspectable {
	virtual STDMETHODIMP _add_FrameArrived(Foundation::TypedEventHandler<PerceptionDepthFrameReader*, PerceptionDepthFrameArrivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FrameArrived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Source(PerceptionDepthFrameSource* *value);
	virtual STDMETHODIMP _get_IsPaused(bool *value);
	virtual STDMETHODIMP _put_IsPaused(bool value);
	virtual STDMETHODIMP _TryReadLatestFrame(PerceptionDepthFrame* *result);
};
template<typename X> struct IPerceptionDepthFrameReader_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionDepthFrameReader_adaptor::IsPaused)->_get_IsPaused(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPerceptionDepthFrameReader_adaptor::IsPaused)->_put_IsPaused(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPaused;
		struct : property {
			ptr<PerceptionDepthFrameSource> get() { PerceptionDepthFrameSource* value; hrcheck(enc(&IPerceptionDepthFrameReader_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<PerceptionDepthFrameSource> operator()() { return get(); }
			operator ptr<PerceptionDepthFrameSource> () { return get(); }
			ptr<PerceptionDepthFrameSource> operator->() { return get(); }
		} Source;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionDepthFrameReader>, ptr<PerceptionDepthFrameArrivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionDepthFrameReader_adaptor::FrameArrived)->_add_FrameArrived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionDepthFrameReader_adaptor::FrameArrived)->_remove_FrameArrived(token)); }
		} FrameArrived;
	};
	ptr<PerceptionDepthFrame> TryReadLatestFrame() { PerceptionDepthFrame* result; hrcheck(X::get()->_TryReadLatestFrame(&result)); return from_abi(result); }
	IPerceptionDepthFrameReader_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrameReader, X> : Windows::Devices::Perception::IPerceptionDepthFrameReader_adaptor<X> { typedef adapt IPerceptionDepthFrameReader; };
struct IPerceptionDepthFrameReader : IPerceptionDepthFrameReader_raw, generate<IPerceptionDepthFrameReader> {};

// PerceptionDepthFrameReader
template<typename X> struct statics<PerceptionDepthFrameReader, X> : X {
	typedef typename X::root_type PerceptionDepthFrameReader;
};
struct PerceptionDepthFrameReader : generate<PerceptionDepthFrameReader> {};

// IPerceptionInfraredFrameReader
struct IPerceptionInfraredFrameReader_raw : IInspectable {
	virtual STDMETHODIMP _add_FrameArrived(Foundation::TypedEventHandler<PerceptionInfraredFrameReader*, PerceptionInfraredFrameArrivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FrameArrived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_Source(PerceptionInfraredFrameSource* *value);
	virtual STDMETHODIMP _get_IsPaused(bool *value);
	virtual STDMETHODIMP _put_IsPaused(bool value);
	virtual STDMETHODIMP _TryReadLatestFrame(PerceptionInfraredFrame* *result);
};
template<typename X> struct IPerceptionInfraredFrameReader_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPerceptionInfraredFrameReader_adaptor::IsPaused)->_get_IsPaused(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IPerceptionInfraredFrameReader_adaptor::IsPaused)->_put_IsPaused(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPaused;
		struct : property {
			ptr<PerceptionInfraredFrameSource> get() { PerceptionInfraredFrameSource* value; hrcheck(enc(&IPerceptionInfraredFrameReader_adaptor::Source)->_get_Source(&value)); return from_abi(value); }
			ptr<PerceptionInfraredFrameSource> operator()() { return get(); }
			operator ptr<PerceptionInfraredFrameSource> () { return get(); }
			ptr<PerceptionInfraredFrameSource> operator->() { return get(); }
		} Source;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PerceptionInfraredFrameReader>, ptr<PerceptionInfraredFrameArrivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPerceptionInfraredFrameReader_adaptor::FrameArrived)->_add_FrameArrived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPerceptionInfraredFrameReader_adaptor::FrameArrived)->_remove_FrameArrived(token)); }
		} FrameArrived;
	};
	ptr<PerceptionInfraredFrame> TryReadLatestFrame() { PerceptionInfraredFrame* result; hrcheck(X::get()->_TryReadLatestFrame(&result)); return from_abi(result); }
	IPerceptionInfraredFrameReader_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrameReader, X> : Windows::Devices::Perception::IPerceptionInfraredFrameReader_adaptor<X> { typedef adapt IPerceptionInfraredFrameReader; };
struct IPerceptionInfraredFrameReader : IPerceptionInfraredFrameReader_raw, generate<IPerceptionInfraredFrameReader> {};

// PerceptionInfraredFrameReader
template<typename X> struct statics<PerceptionInfraredFrameReader, X> : X {
	typedef typename X::root_type PerceptionInfraredFrameReader;
};
struct PerceptionInfraredFrameReader : generate<PerceptionInfraredFrameReader> {};

// IPerceptionColorFrameArrivedEventArgs
struct IPerceptionColorFrameArrivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RelativeTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _TryOpenFrame(PerceptionColorFrame* *result);
};
template<typename X> struct IPerceptionColorFrameArrivedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPerceptionColorFrameArrivedEventArgs_adaptor::RelativeTime)->_get_RelativeTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RelativeTime;
	};
	ptr<PerceptionColorFrame> TryOpenFrame() { PerceptionColorFrame* result; hrcheck(X::get()->_TryOpenFrame(&result)); return from_abi(result); }
	IPerceptionColorFrameArrivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrameArrivedEventArgs, X> : Windows::Devices::Perception::IPerceptionColorFrameArrivedEventArgs_adaptor<X> { typedef adapt IPerceptionColorFrameArrivedEventArgs; };
struct IPerceptionColorFrameArrivedEventArgs : IPerceptionColorFrameArrivedEventArgs_raw, generate<IPerceptionColorFrameArrivedEventArgs> {};

// PerceptionColorFrameArrivedEventArgs
template<typename X> struct statics<PerceptionColorFrameArrivedEventArgs, X> : X {
	typedef typename X::root_type PerceptionColorFrameArrivedEventArgs;
};
struct PerceptionColorFrameArrivedEventArgs : generate<PerceptionColorFrameArrivedEventArgs> {};

// IPerceptionColorFrame
struct IPerceptionColorFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoFrame(Media::VideoFrame* *value);
};
template<typename X> struct IPerceptionColorFrame_adaptor : X {
	union {
		struct : property {
			ptr<Media::VideoFrame> get() { Media::VideoFrame* value; hrcheck(enc(&IPerceptionColorFrame_adaptor::VideoFrame)->_get_VideoFrame(&value)); return from_abi(value); }
			ptr<Media::VideoFrame> operator()() { return get(); }
			operator ptr<Media::VideoFrame> () { return get(); }
			ptr<Media::VideoFrame> operator->() { return get(); }
		} VideoFrame;
	};
	IPerceptionColorFrame_adaptor() {}
};
template<typename X> struct adapt<IPerceptionColorFrame, X> : Windows::Devices::Perception::IPerceptionColorFrame_adaptor<X> { typedef adapt IPerceptionColorFrame; };
struct IPerceptionColorFrame : IPerceptionColorFrame_raw, generate<IPerceptionColorFrame> {};

// PerceptionColorFrame
template<typename X> struct statics<PerceptionColorFrame, X> : X {
	typedef typename X::root_type PerceptionColorFrame;
};
struct PerceptionColorFrame : generate<PerceptionColorFrame> {};

// IPerceptionDepthFrameArrivedEventArgs
struct IPerceptionDepthFrameArrivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RelativeTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _TryOpenFrame(PerceptionDepthFrame* *result);
};
template<typename X> struct IPerceptionDepthFrameArrivedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPerceptionDepthFrameArrivedEventArgs_adaptor::RelativeTime)->_get_RelativeTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RelativeTime;
	};
	ptr<PerceptionDepthFrame> TryOpenFrame() { PerceptionDepthFrame* result; hrcheck(X::get()->_TryOpenFrame(&result)); return from_abi(result); }
	IPerceptionDepthFrameArrivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrameArrivedEventArgs, X> : Windows::Devices::Perception::IPerceptionDepthFrameArrivedEventArgs_adaptor<X> { typedef adapt IPerceptionDepthFrameArrivedEventArgs; };
struct IPerceptionDepthFrameArrivedEventArgs : IPerceptionDepthFrameArrivedEventArgs_raw, generate<IPerceptionDepthFrameArrivedEventArgs> {};

// PerceptionDepthFrameArrivedEventArgs
template<typename X> struct statics<PerceptionDepthFrameArrivedEventArgs, X> : X {
	typedef typename X::root_type PerceptionDepthFrameArrivedEventArgs;
};
struct PerceptionDepthFrameArrivedEventArgs : generate<PerceptionDepthFrameArrivedEventArgs> {};

// IPerceptionDepthFrame
struct IPerceptionDepthFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoFrame(Media::VideoFrame* *value);
};
template<typename X> struct IPerceptionDepthFrame_adaptor : X {
	union {
		struct : property {
			ptr<Media::VideoFrame> get() { Media::VideoFrame* value; hrcheck(enc(&IPerceptionDepthFrame_adaptor::VideoFrame)->_get_VideoFrame(&value)); return from_abi(value); }
			ptr<Media::VideoFrame> operator()() { return get(); }
			operator ptr<Media::VideoFrame> () { return get(); }
			ptr<Media::VideoFrame> operator->() { return get(); }
		} VideoFrame;
	};
	IPerceptionDepthFrame_adaptor() {}
};
template<typename X> struct adapt<IPerceptionDepthFrame, X> : Windows::Devices::Perception::IPerceptionDepthFrame_adaptor<X> { typedef adapt IPerceptionDepthFrame; };
struct IPerceptionDepthFrame : IPerceptionDepthFrame_raw, generate<IPerceptionDepthFrame> {};

// PerceptionDepthFrame
template<typename X> struct statics<PerceptionDepthFrame, X> : X {
	typedef typename X::root_type PerceptionDepthFrame;
};
struct PerceptionDepthFrame : generate<PerceptionDepthFrame> {};

// IPerceptionInfraredFrameArrivedEventArgs
struct IPerceptionInfraredFrameArrivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RelativeTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _TryOpenFrame(PerceptionInfraredFrame* *result);
};
template<typename X> struct IPerceptionInfraredFrameArrivedEventArgs_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IPerceptionInfraredFrameArrivedEventArgs_adaptor::RelativeTime)->_get_RelativeTime(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} RelativeTime;
	};
	ptr<PerceptionInfraredFrame> TryOpenFrame() { PerceptionInfraredFrame* result; hrcheck(X::get()->_TryOpenFrame(&result)); return from_abi(result); }
	IPerceptionInfraredFrameArrivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrameArrivedEventArgs, X> : Windows::Devices::Perception::IPerceptionInfraredFrameArrivedEventArgs_adaptor<X> { typedef adapt IPerceptionInfraredFrameArrivedEventArgs; };
struct IPerceptionInfraredFrameArrivedEventArgs : IPerceptionInfraredFrameArrivedEventArgs_raw, generate<IPerceptionInfraredFrameArrivedEventArgs> {};

// PerceptionInfraredFrameArrivedEventArgs
template<typename X> struct statics<PerceptionInfraredFrameArrivedEventArgs, X> : X {
	typedef typename X::root_type PerceptionInfraredFrameArrivedEventArgs;
};
struct PerceptionInfraredFrameArrivedEventArgs : generate<PerceptionInfraredFrameArrivedEventArgs> {};

// IPerceptionInfraredFrame
struct IPerceptionInfraredFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoFrame(Media::VideoFrame* *value);
};
template<typename X> struct IPerceptionInfraredFrame_adaptor : X {
	union {
		struct : property {
			ptr<Media::VideoFrame> get() { Media::VideoFrame* value; hrcheck(enc(&IPerceptionInfraredFrame_adaptor::VideoFrame)->_get_VideoFrame(&value)); return from_abi(value); }
			ptr<Media::VideoFrame> operator()() { return get(); }
			operator ptr<Media::VideoFrame> () { return get(); }
			ptr<Media::VideoFrame> operator->() { return get(); }
		} VideoFrame;
	};
	IPerceptionInfraredFrame_adaptor() {}
};
template<typename X> struct adapt<IPerceptionInfraredFrame, X> : Windows::Devices::Perception::IPerceptionInfraredFrame_adaptor<X> { typedef adapt IPerceptionInfraredFrame; };
struct IPerceptionInfraredFrame : IPerceptionInfraredFrame_raw, generate<IPerceptionInfraredFrame> {};

// PerceptionInfraredFrame
template<typename X> struct statics<PerceptionInfraredFrame, X> : X {
	typedef typename X::root_type PerceptionInfraredFrame;
};
struct PerceptionInfraredFrame : generate<PerceptionInfraredFrame> {};

// KnownPerceptionFrameSourceProperties
template<typename> struct KnownPerceptionFrameSourceProperties_statics {
	static struct _DeviceModelVersion : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>()->_get_DeviceModelVersion(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DeviceModelVersion;
	static struct _EnclosureLocation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>()->_get_EnclosureLocation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} EnclosureLocation;
	static struct _FrameKind : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>()->_get_FrameKind(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FrameKind;
	static struct _Id : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>()->_get_Id(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Id;
	static struct _PhysicalDeviceIds : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>()->_get_PhysicalDeviceIds(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PhysicalDeviceIds;
	static struct _DeviceId : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics2>()->_get_DeviceId(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} DeviceId;
};
template<typename X> typename KnownPerceptionFrameSourceProperties_statics<X>::_DeviceModelVersion KnownPerceptionFrameSourceProperties_statics<X>::DeviceModelVersion;
template<typename X> typename KnownPerceptionFrameSourceProperties_statics<X>::_EnclosureLocation KnownPerceptionFrameSourceProperties_statics<X>::EnclosureLocation;
template<typename X> typename KnownPerceptionFrameSourceProperties_statics<X>::_FrameKind KnownPerceptionFrameSourceProperties_statics<X>::FrameKind;
template<typename X> typename KnownPerceptionFrameSourceProperties_statics<X>::_Id KnownPerceptionFrameSourceProperties_statics<X>::Id;
template<typename X> typename KnownPerceptionFrameSourceProperties_statics<X>::_PhysicalDeviceIds KnownPerceptionFrameSourceProperties_statics<X>::PhysicalDeviceIds;
template<typename X> typename KnownPerceptionFrameSourceProperties_statics<X>::_DeviceId KnownPerceptionFrameSourceProperties_statics<X>::DeviceId;

template<typename X> struct statics<KnownPerceptionFrameSourceProperties, X> : X, Windows::Devices::Perception::KnownPerceptionFrameSourceProperties_statics<void> {
	typedef typename X::root_type KnownPerceptionFrameSourceProperties;
};
struct KnownPerceptionFrameSourceProperties : generate<KnownPerceptionFrameSourceProperties> {};

// KnownPerceptionVideoFrameSourceProperties
template<typename> struct KnownPerceptionVideoFrameSourceProperties_statics {
	static struct _AvailableVideoProfiles : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>()->_get_AvailableVideoProfiles(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AvailableVideoProfiles;
	static struct _CameraIntrinsics : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>()->_get_CameraIntrinsics(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} CameraIntrinsics;
	static struct _IsMirrored : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>()->_get_IsMirrored(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} IsMirrored;
	static struct _SupportedVideoProfiles : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>()->_get_SupportedVideoProfiles(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SupportedVideoProfiles;
	static struct _VideoProfile : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>()->_get_VideoProfile(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} VideoProfile;
};
template<typename X> typename KnownPerceptionVideoFrameSourceProperties_statics<X>::_AvailableVideoProfiles KnownPerceptionVideoFrameSourceProperties_statics<X>::AvailableVideoProfiles;
template<typename X> typename KnownPerceptionVideoFrameSourceProperties_statics<X>::_CameraIntrinsics KnownPerceptionVideoFrameSourceProperties_statics<X>::CameraIntrinsics;
template<typename X> typename KnownPerceptionVideoFrameSourceProperties_statics<X>::_IsMirrored KnownPerceptionVideoFrameSourceProperties_statics<X>::IsMirrored;
template<typename X> typename KnownPerceptionVideoFrameSourceProperties_statics<X>::_SupportedVideoProfiles KnownPerceptionVideoFrameSourceProperties_statics<X>::SupportedVideoProfiles;
template<typename X> typename KnownPerceptionVideoFrameSourceProperties_statics<X>::_VideoProfile KnownPerceptionVideoFrameSourceProperties_statics<X>::VideoProfile;

template<typename X> struct statics<KnownPerceptionVideoFrameSourceProperties, X> : X, Windows::Devices::Perception::KnownPerceptionVideoFrameSourceProperties_statics<void> {
	typedef typename X::root_type KnownPerceptionVideoFrameSourceProperties;
};
struct KnownPerceptionVideoFrameSourceProperties : generate<KnownPerceptionVideoFrameSourceProperties> {};

// KnownPerceptionInfraredFrameSourceProperties
template<typename> struct KnownPerceptionInfraredFrameSourceProperties_statics {
	static struct _ActiveIlluminationEnabled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>()->_get_ActiveIlluminationEnabled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ActiveIlluminationEnabled;
	static struct _AmbientSubtractionEnabled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>()->_get_AmbientSubtractionEnabled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AmbientSubtractionEnabled;
	static struct _AutoExposureEnabled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>()->_get_AutoExposureEnabled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AutoExposureEnabled;
	static struct _Exposure : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>()->_get_Exposure(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Exposure;
	static struct _ExposureCompensation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>()->_get_ExposureCompensation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ExposureCompensation;
	static struct _InterleavedIlluminationEnabled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>()->_get_InterleavedIlluminationEnabled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} InterleavedIlluminationEnabled;
	static struct _StructureLightPatternEnabled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>()->_get_StructureLightPatternEnabled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} StructureLightPatternEnabled;
};
template<typename X> typename KnownPerceptionInfraredFrameSourceProperties_statics<X>::_ActiveIlluminationEnabled KnownPerceptionInfraredFrameSourceProperties_statics<X>::ActiveIlluminationEnabled;
template<typename X> typename KnownPerceptionInfraredFrameSourceProperties_statics<X>::_AmbientSubtractionEnabled KnownPerceptionInfraredFrameSourceProperties_statics<X>::AmbientSubtractionEnabled;
template<typename X> typename KnownPerceptionInfraredFrameSourceProperties_statics<X>::_AutoExposureEnabled KnownPerceptionInfraredFrameSourceProperties_statics<X>::AutoExposureEnabled;
template<typename X> typename KnownPerceptionInfraredFrameSourceProperties_statics<X>::_Exposure KnownPerceptionInfraredFrameSourceProperties_statics<X>::Exposure;
template<typename X> typename KnownPerceptionInfraredFrameSourceProperties_statics<X>::_ExposureCompensation KnownPerceptionInfraredFrameSourceProperties_statics<X>::ExposureCompensation;
template<typename X> typename KnownPerceptionInfraredFrameSourceProperties_statics<X>::_InterleavedIlluminationEnabled KnownPerceptionInfraredFrameSourceProperties_statics<X>::InterleavedIlluminationEnabled;
template<typename X> typename KnownPerceptionInfraredFrameSourceProperties_statics<X>::_StructureLightPatternEnabled KnownPerceptionInfraredFrameSourceProperties_statics<X>::StructureLightPatternEnabled;

template<typename X> struct statics<KnownPerceptionInfraredFrameSourceProperties, X> : X, Windows::Devices::Perception::KnownPerceptionInfraredFrameSourceProperties_statics<void> {
	typedef typename X::root_type KnownPerceptionInfraredFrameSourceProperties;
};
struct KnownPerceptionInfraredFrameSourceProperties : generate<KnownPerceptionInfraredFrameSourceProperties> {};

// KnownPerceptionDepthFrameSourceProperties
template<typename> struct KnownPerceptionDepthFrameSourceProperties_statics {
	static struct _MaxDepth : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionDepthFrameSourceProperties, IKnownPerceptionDepthFrameSourcePropertiesStatics>()->_get_MaxDepth(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MaxDepth;
	static struct _MinDepth : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionDepthFrameSourceProperties, IKnownPerceptionDepthFrameSourcePropertiesStatics>()->_get_MinDepth(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} MinDepth;
};
template<typename X> typename KnownPerceptionDepthFrameSourceProperties_statics<X>::_MaxDepth KnownPerceptionDepthFrameSourceProperties_statics<X>::MaxDepth;
template<typename X> typename KnownPerceptionDepthFrameSourceProperties_statics<X>::_MinDepth KnownPerceptionDepthFrameSourceProperties_statics<X>::MinDepth;

template<typename X> struct statics<KnownPerceptionDepthFrameSourceProperties, X> : X, Windows::Devices::Perception::KnownPerceptionDepthFrameSourceProperties_statics<void> {
	typedef typename X::root_type KnownPerceptionDepthFrameSourceProperties;
};
struct KnownPerceptionDepthFrameSourceProperties : generate<KnownPerceptionDepthFrameSourceProperties> {};

// KnownPerceptionColorFrameSourceProperties
template<typename> struct KnownPerceptionColorFrameSourceProperties_statics {
	static struct _AutoExposureEnabled : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionColorFrameSourceProperties, IKnownPerceptionColorFrameSourcePropertiesStatics>()->_get_AutoExposureEnabled(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AutoExposureEnabled;
	static struct _Exposure : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionColorFrameSourceProperties, IKnownPerceptionColorFrameSourcePropertiesStatics>()->_get_Exposure(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Exposure;
	static struct _ExposureCompensation : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionColorFrameSourceProperties, IKnownPerceptionColorFrameSourcePropertiesStatics>()->_get_ExposureCompensation(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} ExposureCompensation;
};
template<typename X> typename KnownPerceptionColorFrameSourceProperties_statics<X>::_AutoExposureEnabled KnownPerceptionColorFrameSourceProperties_statics<X>::AutoExposureEnabled;
template<typename X> typename KnownPerceptionColorFrameSourceProperties_statics<X>::_Exposure KnownPerceptionColorFrameSourceProperties_statics<X>::Exposure;
template<typename X> typename KnownPerceptionColorFrameSourceProperties_statics<X>::_ExposureCompensation KnownPerceptionColorFrameSourceProperties_statics<X>::ExposureCompensation;

template<typename X> struct statics<KnownPerceptionColorFrameSourceProperties, X> : X, Windows::Devices::Perception::KnownPerceptionColorFrameSourceProperties_statics<void> {
	typedef typename X::root_type KnownPerceptionColorFrameSourceProperties;
};
struct KnownPerceptionColorFrameSourceProperties : generate<KnownPerceptionColorFrameSourceProperties> {};

// KnownPerceptionVideoProfileProperties
template<typename> struct KnownPerceptionVideoProfileProperties_statics {
	static struct _BitmapAlphaMode : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>()->_get_BitmapAlphaMode(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BitmapAlphaMode;
	static struct _BitmapPixelFormat : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>()->_get_BitmapPixelFormat(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} BitmapPixelFormat;
	static struct _FrameDuration : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>()->_get_FrameDuration(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FrameDuration;
	static struct _Height : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>()->_get_Height(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Height;
	static struct _Width : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>()->_get_Width(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Width;
};
template<typename X> typename KnownPerceptionVideoProfileProperties_statics<X>::_BitmapAlphaMode KnownPerceptionVideoProfileProperties_statics<X>::BitmapAlphaMode;
template<typename X> typename KnownPerceptionVideoProfileProperties_statics<X>::_BitmapPixelFormat KnownPerceptionVideoProfileProperties_statics<X>::BitmapPixelFormat;
template<typename X> typename KnownPerceptionVideoProfileProperties_statics<X>::_FrameDuration KnownPerceptionVideoProfileProperties_statics<X>::FrameDuration;
template<typename X> typename KnownPerceptionVideoProfileProperties_statics<X>::_Height KnownPerceptionVideoProfileProperties_statics<X>::Height;
template<typename X> typename KnownPerceptionVideoProfileProperties_statics<X>::_Width KnownPerceptionVideoProfileProperties_statics<X>::Width;

template<typename X> struct statics<KnownPerceptionVideoProfileProperties, X> : X, Windows::Devices::Perception::KnownPerceptionVideoProfileProperties_statics<void> {
	typedef typename X::root_type KnownPerceptionVideoProfileProperties;
};
struct KnownPerceptionVideoProfileProperties : generate<KnownPerceptionVideoProfileProperties> {};

// KnownCameraIntrinsicsProperties
template<typename> struct KnownCameraIntrinsicsProperties_statics {
	static struct _FocalLength : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>()->_get_FocalLength(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} FocalLength;
	static struct _PrincipalPoint : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>()->_get_PrincipalPoint(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} PrincipalPoint;
	static struct _RadialDistortion : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>()->_get_RadialDistortion(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RadialDistortion;
	static struct _TangentialDistortion : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>()->_get_TangentialDistortion(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} TangentialDistortion;
};
template<typename X> typename KnownCameraIntrinsicsProperties_statics<X>::_FocalLength KnownCameraIntrinsicsProperties_statics<X>::FocalLength;
template<typename X> typename KnownCameraIntrinsicsProperties_statics<X>::_PrincipalPoint KnownCameraIntrinsicsProperties_statics<X>::PrincipalPoint;
template<typename X> typename KnownCameraIntrinsicsProperties_statics<X>::_RadialDistortion KnownCameraIntrinsicsProperties_statics<X>::RadialDistortion;
template<typename X> typename KnownCameraIntrinsicsProperties_statics<X>::_TangentialDistortion KnownCameraIntrinsicsProperties_statics<X>::TangentialDistortion;

template<typename X> struct statics<KnownCameraIntrinsicsProperties, X> : X, Windows::Devices::Perception::KnownCameraIntrinsicsProperties_statics<void> {
	typedef typename X::root_type KnownCameraIntrinsicsProperties;
};
struct KnownCameraIntrinsicsProperties : generate<KnownCameraIntrinsicsProperties> {};
}}}
} // namespace iso_winrt
