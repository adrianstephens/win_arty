#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Resources.Management

#include "Windows.ApplicationModel.Resources.Management.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename K, typename V> struct IMapView;
template<typename T> struct IVectorView;
}
template<typename TResult> struct IAsyncOperation;
struct Uri;
}}

// defs

template<> struct def<Windows::ApplicationModel::Resources::Management::ResourceIndexerContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IndexedResourceType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IResourceIndexer> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate> : class_type<Platform::Object, Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory2> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::ResourceIndexer> : class_type<Platform::Object, Windows::ApplicationModel::Resources::Management::IResourceIndexer>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier> : class_type<Platform::Object, Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Resources::Management::IResourceIndexer> { define_guid(0x2D4CF9A5, 0xE32F, 0x4AB2, 0x87, 0x48, 0x96, 0x35, 0xA, 0x1, 0x6D, 0xA3);};
template<> struct uuid<Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate> { define_guid(0xE619EF3, 0xFAEC, 0x4414, 0xA9, 0xD7, 0x54, 0xAC, 0xD5, 0x95, 0x3F, 0x29);};
template<> struct uuid<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory> { define_guid(0xB8DE3F09, 0x31CD, 0x4D97, 0xBD, 0x30, 0x8D, 0x39, 0xF7, 0x42, 0xBC, 0x61);};
template<> struct uuid<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory2> { define_guid(0x6040F18D, 0xD5E5, 0x4B60, 0x92, 0x1, 0xCD, 0x27, 0x9C, 0xBC, 0xFE, 0xD9);};
template<> struct uuid<Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier> { define_guid(0xDAE3BB9B, 0xD304, 0x497F, 0xA1, 0x68, 0xA3, 0x40, 0x4, 0x2C, 0x8A, 0xDB);};

// types

namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

// IResourceIndexer
struct IResourceIndexer_raw : IInspectable {
	virtual STDMETHODIMP _IndexFilePath(Foundation::Uri* filePath, IndexedResourceCandidate* *candidate);
	virtual STDMETHODIMP _IndexFileContentsAsync(Foundation::Uri* file, Foundation::IAsyncOperation<Foundation::Collections::IVectorView<IndexedResourceCandidate*>*>* *operation);
};
template<typename X> struct IResourceIndexer_adaptor : X {
	ptr<IndexedResourceCandidate> IndexFilePath(pptr<Foundation::Uri> filePath) { IndexedResourceCandidate* candidate; hrcheck(X::get()->_IndexFilePath(filePath, &candidate)); return from_abi(candidate); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<IndexedResourceCandidate>>>>> IndexFileContentsAsync(pptr<Foundation::Uri> file) { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<IndexedResourceCandidate*>*>* operation; hrcheck(X::get()->_IndexFileContentsAsync(file, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IResourceIndexer, X> : Windows::ApplicationModel::Resources::Management::IResourceIndexer_adaptor<X> { typedef adapt IResourceIndexer; };
struct IResourceIndexer : IResourceIndexer_raw, generate<IResourceIndexer> {};

// IIndexedResourceCandidate
struct IIndexedResourceCandidate_raw : IInspectable {
	virtual STDMETHODIMP _get_Type(IndexedResourceType *value);
	virtual STDMETHODIMP _get_Uri(Foundation::Uri* *value);
	virtual STDMETHODIMP _get_Metadata(Foundation::Collections::IMapView<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_Qualifiers(Foundation::Collections::IVectorView<IndexedResourceQualifier*>* *value);
	virtual STDMETHODIMP _get_ValueAsString(HSTRING *value);
	virtual STDMETHODIMP _GetQualifierValue(HSTRING qualifierName, HSTRING *qualifierValue);
};
template<typename X> struct IIndexedResourceCandidate_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, hstring>> get() { Foundation::Collections::IMapView<HSTRING, HSTRING>* value; hrcheck(enc(&IIndexedResourceCandidate_adaptor::Metadata)->_get_Metadata(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, hstring>> operator->() { return get(); }
		} Metadata;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<IndexedResourceQualifier>>> get() { Foundation::Collections::IVectorView<IndexedResourceQualifier*>* value; hrcheck(enc(&IIndexedResourceCandidate_adaptor::Qualifiers)->_get_Qualifiers(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<IndexedResourceQualifier>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<IndexedResourceQualifier>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<IndexedResourceQualifier>>> operator->() { return get(); }
		} Qualifiers;
		struct : property {
			IndexedResourceType get() { IndexedResourceType value; hrcheck(enc(&IIndexedResourceCandidate_adaptor::Type)->_get_Type(&value)); return value; }
			IndexedResourceType operator()() { return get(); }
			operator IndexedResourceType () { return get(); }
		} Type;
		struct : property {
			ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(enc(&IIndexedResourceCandidate_adaptor::Uri)->_get_Uri(&value)); return from_abi(value); }
			ptr<Foundation::Uri> operator()() { return get(); }
			operator ptr<Foundation::Uri> () { return get(); }
			ptr<Foundation::Uri> operator->() { return get(); }
		} Uri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IIndexedResourceCandidate_adaptor::ValueAsString)->_get_ValueAsString(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ValueAsString;
	};
	hstring GetQualifierValue(hstring_ref qualifierName) { HSTRING qualifierValue; hrcheck(X::get()->_GetQualifierValue(qualifierName, &qualifierValue)); return from_abi(qualifierValue); }
	IIndexedResourceCandidate_adaptor() {}
};
template<typename X> struct adapt<IIndexedResourceCandidate, X> : Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate_adaptor<X> { typedef adapt IIndexedResourceCandidate; };
struct IIndexedResourceCandidate : IIndexedResourceCandidate_raw, generate<IIndexedResourceCandidate> {};

// IndexedResourceCandidate
template<typename X> struct statics<IndexedResourceCandidate, X> : X {
	typedef typename X::root_type IndexedResourceCandidate;
};
struct IndexedResourceCandidate : generate<IndexedResourceCandidate> {};

// IResourceIndexerFactory
struct IResourceIndexerFactory : IInspectable {
	virtual STDMETHODIMP _CreateResourceIndexer(Foundation::Uri* projectRoot, ResourceIndexer* *indexer);
};

// IResourceIndexerFactory2
struct IResourceIndexerFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateResourceIndexerWithExtension(Foundation::Uri* projectRoot, Foundation::Uri* extensionDllPath, ResourceIndexer* *indexer);
};

// ResourceIndexer
template<typename> struct ResourceIndexer_statics {
	static ResourceIndexer *activate(pptr<Foundation::Uri> projectRoot, pptr<Foundation::Uri> extensionDllPath) { ResourceIndexer *indexer; hrcheck(get_activation_factory<ResourceIndexer, IResourceIndexerFactory2>()->_CreateResourceIndexerWithExtension(projectRoot, extensionDllPath, &indexer)); return indexer; }
	static ResourceIndexer *activate(pptr<Foundation::Uri> projectRoot) { ResourceIndexer *indexer; hrcheck(get_activation_factory<ResourceIndexer, IResourceIndexerFactory>()->_CreateResourceIndexer(projectRoot, &indexer)); return indexer; }
};

template<typename X> struct statics<ResourceIndexer, X> : X, Windows::ApplicationModel::Resources::Management::ResourceIndexer_statics<void> {
	using Windows::ApplicationModel::Resources::Management::ResourceIndexer_statics<void>::activate;
	typedef typename X::root_type ResourceIndexer;
};
struct ResourceIndexer : generate<ResourceIndexer> {};

// IIndexedResourceQualifier
struct IIndexedResourceQualifier_raw : IInspectable {
	virtual STDMETHODIMP _get_QualifierName(HSTRING *value);
	virtual STDMETHODIMP _get_QualifierValue(HSTRING *value);
};
template<typename X> struct IIndexedResourceQualifier_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IIndexedResourceQualifier_adaptor::QualifierName)->_get_QualifierName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QualifierName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IIndexedResourceQualifier_adaptor::QualifierValue)->_get_QualifierValue(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QualifierValue;
	};
	IIndexedResourceQualifier_adaptor() {}
};
template<typename X> struct adapt<IIndexedResourceQualifier, X> : Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier_adaptor<X> { typedef adapt IIndexedResourceQualifier; };
struct IIndexedResourceQualifier : IIndexedResourceQualifier_raw, generate<IIndexedResourceQualifier> {};

// IndexedResourceQualifier
template<typename X> struct statics<IndexedResourceQualifier, X> : X {
	typedef typename X::root_type IndexedResourceQualifier;
};
struct IndexedResourceQualifier : generate<IndexedResourceQualifier> {};
}}}}
} // namespace iso_winrt
