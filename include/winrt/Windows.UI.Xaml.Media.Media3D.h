#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Xaml.Media.Media3D

#include "Windows.UI.Xaml.Media.Media3D.0.h"
#include "Windows.UI.Xaml.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::UI::Xaml::Media::Media3D::Matrix3D> : value_type<double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::IMatrix3DHelper> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::IMatrix3DHelperStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::Matrix3DHelper> : class_type<Platform::Object, Windows::UI::Xaml::Media::Media3D::IMatrix3DHelper> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::ITransform3D> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::ITransform3DFactory> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::Transform3D> : class_type<Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Media3D::ITransform3D> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::ICompositeTransform3D> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::ICompositeTransform3DStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::CompositeTransform3D> : class_type<Windows::UI::Xaml::Media::Media3D::Transform3D, Windows::UI::Xaml::Media::Media3D::ICompositeTransform3D> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::IPerspectiveTransform3D> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::IPerspectiveTransform3DStatics> : interface_type<> {};
template<> struct def<Windows::UI::Xaml::Media::Media3D::PerspectiveTransform3D> : class_type<Windows::UI::Xaml::Media::Media3D::Transform3D, Windows::UI::Xaml::Media::Media3D::IPerspectiveTransform3D> {};

// uuids

template<> struct uuid<Windows::UI::Xaml::Media::Media3D::IMatrix3DHelper> { define_guid(0xE48C10EF, 0x9927, 0x4C9B, 0x82, 0x13, 0x7, 0x77, 0x55, 0x12, 0xBA, 0x4);};
template<> struct uuid<Windows::UI::Xaml::Media::Media3D::IMatrix3DHelperStatics> { define_guid(0x9264545E, 0xE158, 0x4E74, 0x88, 0x99, 0x68, 0x91, 0x60, 0xBD, 0x2F, 0x8C);};
template<> struct uuid<Windows::UI::Xaml::Media::Media3D::ITransform3D> { define_guid(0xAE3ED43A, 0xA9FC, 0x4C31, 0x86, 0xCD, 0x56, 0xD9, 0xCA, 0x25, 0x1A, 0x69);};
template<> struct uuid<Windows::UI::Xaml::Media::Media3D::ITransform3DFactory> { define_guid(0x52C1F7A, 0x8D73, 0x48CD, 0xBB, 0xB8, 0xD0, 0x4, 0x34, 0xCA, 0xAE, 0x5D);};
template<> struct uuid<Windows::UI::Xaml::Media::Media3D::ICompositeTransform3D> { define_guid(0x8977CB01, 0xAF8D, 0x4AF5, 0xB0, 0x84, 0xC0, 0x8E, 0xB9, 0x70, 0x4A, 0xBE);};
template<> struct uuid<Windows::UI::Xaml::Media::Media3D::ICompositeTransform3DStatics> { define_guid(0xDDBF4D67, 0x2A25, 0x48F3, 0x98, 0x8, 0xC5, 0x1E, 0xC3, 0xD5, 0x5B, 0xEC);};
template<> struct uuid<Windows::UI::Xaml::Media::Media3D::IPerspectiveTransform3D> { define_guid(0x9A7B532A, 0x30F9, 0x40A1, 0x96, 0xC9, 0xC5, 0x9D, 0x87, 0xF9, 0x5A, 0xC3);};
template<> struct uuid<Windows::UI::Xaml::Media::Media3D::IPerspectiveTransform3DStatics> { define_guid(0x8E6F6400, 0x620C, 0x48C7, 0x84, 0x4D, 0x3F, 0x9, 0x84, 0xDA, 0x5B, 0x17);};

// types

namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Media3D {

// IMatrix3DHelper
struct IMatrix3DHelper : IInspectable, generate<IMatrix3DHelper> {};

// IMatrix3DHelperStatics
struct IMatrix3DHelperStatics : IInspectable {
	virtual STDMETHODIMP _get_Identity(Matrix3D *value);
	virtual STDMETHODIMP _Multiply(Matrix3D matrix1, Matrix3D matrix2, Matrix3D *returnValue);
	virtual STDMETHODIMP _FromElements(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44, Matrix3D *returnValue);
	virtual STDMETHODIMP _GetHasInverse(Matrix3D target, bool *value);
	virtual STDMETHODIMP _GetIsIdentity(Matrix3D target, bool *value);
	virtual STDMETHODIMP _Invert(Matrix3D target, Matrix3D *returnValue);
};

// Matrix3DHelper
template<typename> struct Matrix3DHelper_statics {
	static struct _Identity : property {
		Matrix3D get() { Matrix3D value; hrcheck(get_activation_factory<Matrix3DHelper, IMatrix3DHelperStatics>()->_get_Identity(&value)); return value; }
		Matrix3D operator()() { return get(); }
		operator Matrix3D () { return get(); }
	} Identity;
	static Matrix3D Multiply(const Matrix3D& matrix1, const Matrix3D& matrix2) { Matrix3D returnValue; hrcheck(get_activation_factory<Matrix3DHelper, IMatrix3DHelperStatics>()->_Multiply(matrix1, matrix2, &returnValue)); return returnValue; }
	static Matrix3D FromElements(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44) { Matrix3D returnValue; hrcheck(get_activation_factory<Matrix3DHelper, IMatrix3DHelperStatics>()->_FromElements(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetX, offsetY, offsetZ, m44, &returnValue)); return returnValue; }
	static bool GetHasInverse(const Matrix3D& target) { bool value; hrcheck(get_activation_factory<Matrix3DHelper, IMatrix3DHelperStatics>()->_GetHasInverse(target, &value)); return value; }
	static bool GetIsIdentity(const Matrix3D& target) { bool value; hrcheck(get_activation_factory<Matrix3DHelper, IMatrix3DHelperStatics>()->_GetIsIdentity(target, &value)); return value; }
	static Matrix3D Invert(const Matrix3D& target) { Matrix3D returnValue; hrcheck(get_activation_factory<Matrix3DHelper, IMatrix3DHelperStatics>()->_Invert(target, &returnValue)); return returnValue; }
};
template<typename X> typename Matrix3DHelper_statics<X>::_Identity Matrix3DHelper_statics<X>::Identity;

template<typename X> struct statics<Matrix3DHelper, X> : X, Windows::UI::Xaml::Media::Media3D::Matrix3DHelper_statics<void> {
	typedef typename X::root_type Matrix3DHelper;
};
struct Matrix3DHelper : generate<Matrix3DHelper> {};

// ITransform3D
struct ITransform3D : IInspectable, generate<ITransform3D> {};

// ITransform3DFactory
struct ITransform3DFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(IInspectable* outer, IInspectable* *inner, Transform3D* *instance);
};

// Transform3D
template<typename X> struct statics<Transform3D, X> : X {
	typedef typename X::root_type Transform3D;
};
struct Transform3D : generate<Transform3D> {};

// ICompositeTransform3D
struct ICompositeTransform3D_raw : IInspectable {
	virtual STDMETHODIMP _get_CenterX(double *value);
	virtual STDMETHODIMP _put_CenterX(double value);
	virtual STDMETHODIMP _get_CenterY(double *value);
	virtual STDMETHODIMP _put_CenterY(double value);
	virtual STDMETHODIMP _get_CenterZ(double *value);
	virtual STDMETHODIMP _put_CenterZ(double value);
	virtual STDMETHODIMP _get_RotationX(double *value);
	virtual STDMETHODIMP _put_RotationX(double value);
	virtual STDMETHODIMP _get_RotationY(double *value);
	virtual STDMETHODIMP _put_RotationY(double value);
	virtual STDMETHODIMP _get_RotationZ(double *value);
	virtual STDMETHODIMP _put_RotationZ(double value);
	virtual STDMETHODIMP _get_ScaleX(double *value);
	virtual STDMETHODIMP _put_ScaleX(double value);
	virtual STDMETHODIMP _get_ScaleY(double *value);
	virtual STDMETHODIMP _put_ScaleY(double value);
	virtual STDMETHODIMP _get_ScaleZ(double *value);
	virtual STDMETHODIMP _put_ScaleZ(double value);
	virtual STDMETHODIMP _get_TranslateX(double *value);
	virtual STDMETHODIMP _put_TranslateX(double value);
	virtual STDMETHODIMP _get_TranslateY(double *value);
	virtual STDMETHODIMP _put_TranslateY(double value);
	virtual STDMETHODIMP _get_TranslateZ(double *value);
	virtual STDMETHODIMP _put_TranslateZ(double value);
};
template<typename X> struct ICompositeTransform3D_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::CenterX)->_get_CenterX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::CenterX)->_put_CenterX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} CenterX;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::CenterY)->_get_CenterY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::CenterY)->_put_CenterY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} CenterY;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::CenterZ)->_get_CenterZ(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::CenterZ)->_put_CenterZ(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} CenterZ;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::RotationX)->_get_RotationX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::RotationX)->_put_RotationX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} RotationX;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::RotationY)->_get_RotationY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::RotationY)->_put_RotationY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} RotationY;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::RotationZ)->_get_RotationZ(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::RotationZ)->_put_RotationZ(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} RotationZ;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::ScaleX)->_get_ScaleX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::ScaleX)->_put_ScaleX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} ScaleX;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::ScaleY)->_get_ScaleY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::ScaleY)->_put_ScaleY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} ScaleY;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::ScaleZ)->_get_ScaleZ(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::ScaleZ)->_put_ScaleZ(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} ScaleZ;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::TranslateX)->_get_TranslateX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::TranslateX)->_put_TranslateX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} TranslateX;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::TranslateY)->_get_TranslateY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::TranslateY)->_put_TranslateY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} TranslateY;
		struct : property {
			double get() { double value; hrcheck(enc(&ICompositeTransform3D_adaptor::TranslateZ)->_get_TranslateZ(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&ICompositeTransform3D_adaptor::TranslateZ)->_put_TranslateZ(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} TranslateZ;
	};
	ICompositeTransform3D_adaptor() {}
};
template<typename X> struct adapt<ICompositeTransform3D, X> : Windows::UI::Xaml::Media::Media3D::ICompositeTransform3D_adaptor<X> { typedef adapt ICompositeTransform3D; };
struct ICompositeTransform3D : ICompositeTransform3D_raw, generate<ICompositeTransform3D> {};

// ICompositeTransform3DStatics
struct ICompositeTransform3DStatics : IInspectable {
	virtual STDMETHODIMP _get_CenterXProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_CenterYProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_CenterZProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_RotationXProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_RotationYProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_RotationZProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ScaleXProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ScaleYProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_ScaleZProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TranslateXProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TranslateYProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_TranslateZProperty(DependencyProperty* *value);
};

// CompositeTransform3D
template<typename> struct CompositeTransform3D_statics {
	static struct _CenterXProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_CenterXProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CenterXProperty;
	static struct _CenterYProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_CenterYProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CenterYProperty;
	static struct _CenterZProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_CenterZProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} CenterZProperty;
	static struct _RotationXProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_RotationXProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} RotationXProperty;
	static struct _RotationYProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_RotationYProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} RotationYProperty;
	static struct _RotationZProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_RotationZProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} RotationZProperty;
	static struct _ScaleXProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_ScaleXProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ScaleXProperty;
	static struct _ScaleYProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_ScaleYProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ScaleYProperty;
	static struct _ScaleZProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_ScaleZProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} ScaleZProperty;
	static struct _TranslateXProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_TranslateXProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TranslateXProperty;
	static struct _TranslateYProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_TranslateYProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TranslateYProperty;
	static struct _TranslateZProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<CompositeTransform3D, ICompositeTransform3DStatics>()->_get_TranslateZProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} TranslateZProperty;
};
template<typename X> typename CompositeTransform3D_statics<X>::_CenterXProperty CompositeTransform3D_statics<X>::CenterXProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_CenterYProperty CompositeTransform3D_statics<X>::CenterYProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_CenterZProperty CompositeTransform3D_statics<X>::CenterZProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_RotationXProperty CompositeTransform3D_statics<X>::RotationXProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_RotationYProperty CompositeTransform3D_statics<X>::RotationYProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_RotationZProperty CompositeTransform3D_statics<X>::RotationZProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_ScaleXProperty CompositeTransform3D_statics<X>::ScaleXProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_ScaleYProperty CompositeTransform3D_statics<X>::ScaleYProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_ScaleZProperty CompositeTransform3D_statics<X>::ScaleZProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_TranslateXProperty CompositeTransform3D_statics<X>::TranslateXProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_TranslateYProperty CompositeTransform3D_statics<X>::TranslateYProperty;
template<typename X> typename CompositeTransform3D_statics<X>::_TranslateZProperty CompositeTransform3D_statics<X>::TranslateZProperty;

template<typename X> struct statics<CompositeTransform3D, X> : X, Windows::UI::Xaml::Media::Media3D::CompositeTransform3D_statics<void> {
	typedef typename X::root_type CompositeTransform3D;
};
struct CompositeTransform3D : generate<CompositeTransform3D> {};

// IPerspectiveTransform3D
struct IPerspectiveTransform3D_raw : IInspectable {
	virtual STDMETHODIMP _get_Depth(double *value);
	virtual STDMETHODIMP _put_Depth(double value);
	virtual STDMETHODIMP _get_OffsetX(double *value);
	virtual STDMETHODIMP _put_OffsetX(double value);
	virtual STDMETHODIMP _get_OffsetY(double *value);
	virtual STDMETHODIMP _put_OffsetY(double value);
};
template<typename X> struct IPerspectiveTransform3D_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IPerspectiveTransform3D_adaptor::Depth)->_get_Depth(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IPerspectiveTransform3D_adaptor::Depth)->_put_Depth(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Depth;
		struct : property {
			double get() { double value; hrcheck(enc(&IPerspectiveTransform3D_adaptor::OffsetX)->_get_OffsetX(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IPerspectiveTransform3D_adaptor::OffsetX)->_put_OffsetX(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} OffsetX;
		struct : property {
			double get() { double value; hrcheck(enc(&IPerspectiveTransform3D_adaptor::OffsetY)->_get_OffsetY(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IPerspectiveTransform3D_adaptor::OffsetY)->_put_OffsetY(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} OffsetY;
	};
	IPerspectiveTransform3D_adaptor() {}
};
template<typename X> struct adapt<IPerspectiveTransform3D, X> : Windows::UI::Xaml::Media::Media3D::IPerspectiveTransform3D_adaptor<X> { typedef adapt IPerspectiveTransform3D; };
struct IPerspectiveTransform3D : IPerspectiveTransform3D_raw, generate<IPerspectiveTransform3D> {};

// IPerspectiveTransform3DStatics
struct IPerspectiveTransform3DStatics : IInspectable {
	virtual STDMETHODIMP _get_DepthProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_OffsetXProperty(DependencyProperty* *value);
	virtual STDMETHODIMP _get_OffsetYProperty(DependencyProperty* *value);
};

// PerspectiveTransform3D
template<typename> struct PerspectiveTransform3D_statics {
	static struct _DepthProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<PerspectiveTransform3D, IPerspectiveTransform3DStatics>()->_get_DepthProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} DepthProperty;
	static struct _OffsetXProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<PerspectiveTransform3D, IPerspectiveTransform3DStatics>()->_get_OffsetXProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} OffsetXProperty;
	static struct _OffsetYProperty : property {
		ptr<DependencyProperty> get() { DependencyProperty* value; hrcheck(get_activation_factory<PerspectiveTransform3D, IPerspectiveTransform3DStatics>()->_get_OffsetYProperty(&value)); return from_abi(value); }
		ptr<DependencyProperty> operator()() { return get(); }
		operator ptr<DependencyProperty> () { return get(); }
		ptr<DependencyProperty> operator->() { return get(); }
	} OffsetYProperty;
};
template<typename X> typename PerspectiveTransform3D_statics<X>::_DepthProperty PerspectiveTransform3D_statics<X>::DepthProperty;
template<typename X> typename PerspectiveTransform3D_statics<X>::_OffsetXProperty PerspectiveTransform3D_statics<X>::OffsetXProperty;
template<typename X> typename PerspectiveTransform3D_statics<X>::_OffsetYProperty PerspectiveTransform3D_statics<X>::OffsetYProperty;

template<typename X> struct statics<PerspectiveTransform3D, X> : X, Windows::UI::Xaml::Media::Media3D::PerspectiveTransform3D_statics<void> {
	typedef typename X::root_type PerspectiveTransform3D;
};
struct PerspectiveTransform3D : generate<PerspectiveTransform3D> {};
}}}}}
} // namespace iso_winrt
