#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Search

#include "Windows.ApplicationModel.Search.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVector;
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStreamReference;
}
struct StorageFolder;
}}

// defs

template<> struct def<Windows::ApplicationModel::Search::SearchContract> : value_type<> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs> : overridable_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs, Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs> : interface_type<Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPane> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPane> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPane> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchSuggestionCollection> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchSuggestionCollection> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchSuggestionCollection> {};
template<> struct def<Windows::ApplicationModel::Search::ILocalContentSuggestionSettings> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::LocalContentSuggestionSettings> : class_type<Platform::Object, Windows::ApplicationModel::Search::ILocalContentSuggestionSettings> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchQueryLinguisticDetails> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails>, custom_activators {};
template<> struct def<Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::ISearchSuggestionsRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral> {};
template<> struct def<Windows::ApplicationModel::Search::SearchSuggestionsRequest> : class_type<Platform::Object, Windows::ApplicationModel::Search::ISearchSuggestionsRequest> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs> { define_guid(0x3C4D3046, 0xAC4B, 0x49F2, 0x97, 0xD6, 0x2, 0xE, 0x61, 0x82, 0xCB, 0x9C);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs> { define_guid(0x3C064FE9, 0x2351, 0x4248, 0xA5, 0x29, 0x71, 0x10, 0xF4, 0x64, 0xA7, 0x85);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs> { define_guid(0x143BA4FC, 0xE9C5, 0x4736, 0x91, 0xB2, 0xE8, 0xEB, 0x9C, 0xB8, 0x83, 0x56);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails> { define_guid(0x460C92E5, 0x4C32, 0x4538, 0xA4, 0xD4, 0xB6, 0xB4, 0x40, 0xD, 0x14, 0xF);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs> { define_guid(0xC8316CC0, 0xAED2, 0x41E0, 0xBC, 0xE0, 0xC2, 0x6C, 0xA7, 0x4F, 0x85, 0xEC);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral> { define_guid(0xA0D009F7, 0x8748, 0x4EE2, 0xAD, 0x44, 0xAF, 0xA6, 0xBE, 0x99, 0x7C, 0x51);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest> { define_guid(0x81B10B1C, 0xE561, 0x4093, 0x9B, 0x4D, 0x2A, 0xD4, 0x82, 0x79, 0x4A, 0x53);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs> { define_guid(0xC89B8A2F, 0xAC56, 0x4460, 0x8D, 0x2F, 0x80, 0x2, 0x3B, 0xEC, 0x4F, 0xC5);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneStatics> { define_guid(0x9572ADF1, 0x8F1D, 0x481F, 0xA1, 0x5B, 0xC6, 0x16, 0x55, 0xF1, 0x6A, 0xE);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication> { define_guid(0x732830, 0x50F1, 0x4D03, 0x99, 0xAC, 0xC6, 0x64, 0x4C, 0x8E, 0xD8, 0xB5);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPane> { define_guid(0xFDACEC38, 0x3700, 0x4D73, 0x91, 0xA1, 0x2F, 0x99, 0x86, 0x74, 0x23, 0x8A);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails> { define_guid(0x82FB460E, 0x940, 0x4B6D, 0xB8, 0xD0, 0x64, 0x2B, 0x30, 0x98, 0x9E, 0x15);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchSuggestionCollection> { define_guid(0x323A8A4B, 0xFBEA, 0x4446, 0xAB, 0xBC, 0x3D, 0xA7, 0x91, 0x5F, 0xDD, 0x3A);};
template<> struct uuid<Windows::ApplicationModel::Search::ILocalContentSuggestionSettings> { define_guid(0xEEAEB062, 0x743D, 0x456E, 0x84, 0xA3, 0x23, 0xF0, 0x6F, 0x2D, 0x15, 0xD7);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory> { define_guid(0xCAC6C3B8, 0x3C64, 0x4DFD, 0xAD, 0x9F, 0x47, 0x9E, 0x4D, 0x40, 0x65, 0xA4);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> { define_guid(0x46A1205B, 0x69C9, 0x4745, 0xB7, 0x2F, 0xA8, 0xA4, 0xFC, 0x8F, 0x24, 0xAE);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral> { define_guid(0xB71598A9, 0xC065, 0x456D, 0xA8, 0x45, 0x1E, 0xCC, 0xEC, 0x5D, 0xC2, 0x8B);};
template<> struct uuid<Windows::ApplicationModel::Search::ISearchSuggestionsRequest> { define_guid(0x4E4E26A7, 0x44E5, 0x4039, 0x90, 0x99, 0x60, 0x0, 0xEA, 0xD1, 0xF0, 0xC6);};

// types

namespace Windows { namespace ApplicationModel { namespace Search {

// ISearchPaneVisibilityChangedEventArgs
struct ISearchPaneVisibilityChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Visible(bool *value);
};
template<typename X> struct ISearchPaneVisibilityChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISearchPaneVisibilityChangedEventArgs_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Visible;
	};
	ISearchPaneVisibilityChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneVisibilityChangedEventArgs, X> : Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs_adaptor<X> { typedef adapt ISearchPaneVisibilityChangedEventArgs; };
struct ISearchPaneVisibilityChangedEventArgs : ISearchPaneVisibilityChangedEventArgs_raw, generate<ISearchPaneVisibilityChangedEventArgs> {};

// SearchPaneVisibilityChangedEventArgs
template<typename X> struct statics<SearchPaneVisibilityChangedEventArgs, X> : X {
	typedef typename X::root_type SearchPaneVisibilityChangedEventArgs;
};
struct SearchPaneVisibilityChangedEventArgs : generate<SearchPaneVisibilityChangedEventArgs> {};

// ISearchPaneQueryChangedEventArgs
struct ISearchPaneQueryChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_QueryText(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Language(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_LinguisticDetails(SearchPaneQueryLinguisticDetails* *value) = 0;
};
template<typename X> struct ISearchPaneQueryChangedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPaneQueryChangedEventArgs_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Language;
		struct : property {
			ptr<SearchPaneQueryLinguisticDetails> get() { SearchPaneQueryLinguisticDetails* value; hrcheck(enc(&ISearchPaneQueryChangedEventArgs_adaptor::LinguisticDetails)->_get_LinguisticDetails(&value)); return from_abi(value); }
			ptr<SearchPaneQueryLinguisticDetails> operator()() { return get(); }
			operator ptr<SearchPaneQueryLinguisticDetails> () { return get(); }
			ptr<SearchPaneQueryLinguisticDetails> operator->() { return get(); }
		} LinguisticDetails;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPaneQueryChangedEventArgs_adaptor::QueryText)->_get_QueryText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QueryText;
	};
	ISearchPaneQueryChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneQueryChangedEventArgs, X> : Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs_adaptor<X> { typedef adapt ISearchPaneQueryChangedEventArgs; };
template<typename X> struct ISearchPaneQueryChangedEventArgs_unadaptor : X {
	STDMETHODIMP _get_QueryText(HSTRING *value) { return hrtry([&, this] { get_prop(value, QueryText); }); }
	STDMETHODIMP _get_Language(HSTRING *value) { return hrtry([&, this] { get_prop(value, Language); }); }
	STDMETHODIMP _get_LinguisticDetails(SearchPaneQueryLinguisticDetails* *value) { return hrtry([&, this] { get_prop(value, LinguisticDetails); }); }
};
template<typename X> struct unadapt<ISearchPaneQueryChangedEventArgs, X> : Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs_unadaptor<X> {};
struct ISearchPaneQueryChangedEventArgs : ISearchPaneQueryChangedEventArgs_raw, generate<ISearchPaneQueryChangedEventArgs> {};

// SearchPaneQueryChangedEventArgs
template<typename X> struct statics<SearchPaneQueryChangedEventArgs, X> : X {
	typedef typename X::root_type SearchPaneQueryChangedEventArgs;
};
struct SearchPaneQueryChangedEventArgs : generate<SearchPaneQueryChangedEventArgs> {};

// ISearchPaneQuerySubmittedEventArgs
struct ISearchPaneQuerySubmittedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_QueryText(HSTRING *value);
	virtual STDMETHODIMP _get_Language(HSTRING *value);
};
template<typename X> struct ISearchPaneQuerySubmittedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPaneQuerySubmittedEventArgs_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPaneQuerySubmittedEventArgs_adaptor::QueryText)->_get_QueryText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QueryText;
	};
	ISearchPaneQuerySubmittedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneQuerySubmittedEventArgs, X> : Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs_adaptor<X> { typedef adapt ISearchPaneQuerySubmittedEventArgs; };
struct ISearchPaneQuerySubmittedEventArgs : ISearchPaneQuerySubmittedEventArgs_raw, generate<ISearchPaneQuerySubmittedEventArgs> {};

// ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails
struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_LinguisticDetails(SearchPaneQueryLinguisticDetails* *value);
};
template<typename X> struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails_adaptor : X {
	union {
		struct : property {
			ptr<SearchPaneQueryLinguisticDetails> get() { SearchPaneQueryLinguisticDetails* value; hrcheck(enc(&ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails_adaptor::LinguisticDetails)->_get_LinguisticDetails(&value)); return from_abi(value); }
			ptr<SearchPaneQueryLinguisticDetails> operator()() { return get(); }
			operator ptr<SearchPaneQueryLinguisticDetails> () { return get(); }
			ptr<SearchPaneQueryLinguisticDetails> operator->() { return get(); }
		} LinguisticDetails;
	};
	ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails, X> : Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails_adaptor<X> { typedef adapt ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails; };
struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails : ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails_raw, generate<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails> {};

// SearchPaneQuerySubmittedEventArgs
template<typename X> struct statics<SearchPaneQuerySubmittedEventArgs, X> : X {
	typedef typename X::root_type SearchPaneQuerySubmittedEventArgs;
};
struct SearchPaneQuerySubmittedEventArgs : generate<SearchPaneQuerySubmittedEventArgs> {};

// ISearchPaneResultSuggestionChosenEventArgs
struct ISearchPaneResultSuggestionChosenEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Tag(HSTRING *value);
};
template<typename X> struct ISearchPaneResultSuggestionChosenEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPaneResultSuggestionChosenEventArgs_adaptor::Tag)->_get_Tag(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Tag;
	};
	ISearchPaneResultSuggestionChosenEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneResultSuggestionChosenEventArgs, X> : Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs_adaptor<X> { typedef adapt ISearchPaneResultSuggestionChosenEventArgs; };
struct ISearchPaneResultSuggestionChosenEventArgs : ISearchPaneResultSuggestionChosenEventArgs_raw, generate<ISearchPaneResultSuggestionChosenEventArgs> {};

// SearchPaneResultSuggestionChosenEventArgs
template<typename X> struct statics<SearchPaneResultSuggestionChosenEventArgs, X> : X {
	typedef typename X::root_type SearchPaneResultSuggestionChosenEventArgs;
};
struct SearchPaneResultSuggestionChosenEventArgs : generate<SearchPaneResultSuggestionChosenEventArgs> {};

// ISearchPaneSuggestionsRequestDeferral
struct ISearchPaneSuggestionsRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct ISearchPaneSuggestionsRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<ISearchPaneSuggestionsRequestDeferral, X> : Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral_adaptor<X> { typedef adapt ISearchPaneSuggestionsRequestDeferral; };
struct ISearchPaneSuggestionsRequestDeferral : ISearchPaneSuggestionsRequestDeferral_raw, generate<ISearchPaneSuggestionsRequestDeferral> {};

// ISearchPaneSuggestionsRequest
struct ISearchPaneSuggestionsRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _get_SearchSuggestionCollection(Search::SearchSuggestionCollection* *collection);
	virtual STDMETHODIMP _GetDeferral(SearchPaneSuggestionsRequestDeferral* *deferral);
};
template<typename X> struct ISearchPaneSuggestionsRequest_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISearchPaneSuggestionsRequest_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			ptr<Search::SearchSuggestionCollection> get() { Search::SearchSuggestionCollection* collection; hrcheck(enc(&ISearchPaneSuggestionsRequest_adaptor::SearchSuggestionCollection)->_get_SearchSuggestionCollection(&collection)); return from_abi(collection); }
			ptr<Search::SearchSuggestionCollection> operator()() { return get(); }
			operator ptr<Search::SearchSuggestionCollection> () { return get(); }
			ptr<Search::SearchSuggestionCollection> operator->() { return get(); }
		} SearchSuggestionCollection;
	};
	ptr<SearchPaneSuggestionsRequestDeferral> GetDeferral() { SearchPaneSuggestionsRequestDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	ISearchPaneSuggestionsRequest_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneSuggestionsRequest, X> : Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest_adaptor<X> { typedef adapt ISearchPaneSuggestionsRequest; };
struct ISearchPaneSuggestionsRequest : ISearchPaneSuggestionsRequest_raw, generate<ISearchPaneSuggestionsRequest> {};

// SearchPaneSuggestionsRequestDeferral
template<typename X> struct statics<SearchPaneSuggestionsRequestDeferral, X> : X {
	typedef typename X::root_type SearchPaneSuggestionsRequestDeferral;
};
struct SearchPaneSuggestionsRequestDeferral : generate<SearchPaneSuggestionsRequestDeferral> {};

// SearchPaneSuggestionsRequest
template<typename X> struct statics<SearchPaneSuggestionsRequest, X> : X {
	typedef typename X::root_type SearchPaneSuggestionsRequest;
};
struct SearchPaneSuggestionsRequest : generate<SearchPaneSuggestionsRequest> {};

// ISearchPaneSuggestionsRequestedEventArgs
struct ISearchPaneSuggestionsRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(SearchPaneSuggestionsRequest* *value);
};
template<typename X> struct ISearchPaneSuggestionsRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<SearchPaneSuggestionsRequest> get() { SearchPaneSuggestionsRequest* value; hrcheck(enc(&ISearchPaneSuggestionsRequestedEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<SearchPaneSuggestionsRequest> operator()() { return get(); }
			operator ptr<SearchPaneSuggestionsRequest> () { return get(); }
			ptr<SearchPaneSuggestionsRequest> operator->() { return get(); }
		} Request;
	};
	ISearchPaneSuggestionsRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneSuggestionsRequestedEventArgs, X> : Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs_adaptor<X> { typedef adapt ISearchPaneSuggestionsRequestedEventArgs; };
struct ISearchPaneSuggestionsRequestedEventArgs : ISearchPaneSuggestionsRequestedEventArgs_raw, generate<ISearchPaneSuggestionsRequestedEventArgs> {};

// SearchPaneSuggestionsRequestedEventArgs
template<typename X> struct statics<SearchPaneSuggestionsRequestedEventArgs, X> : X {
	typedef typename X::root_type SearchPaneSuggestionsRequestedEventArgs;
};
struct SearchPaneSuggestionsRequestedEventArgs : generate<SearchPaneSuggestionsRequestedEventArgs> {};

// ISearchPaneStatics
struct ISearchPaneStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(SearchPane* *searchPane);
};

// ISearchPaneStaticsWithHideThisApplication
struct ISearchPaneStaticsWithHideThisApplication : IInspectable {
	virtual STDMETHODIMP _HideThisApplication();
};

// ISearchPane
struct ISearchPane_raw : IInspectable {
	virtual STDMETHODIMP _put_SearchHistoryEnabled(bool value);
	virtual STDMETHODIMP _get_SearchHistoryEnabled(bool *value);
	virtual STDMETHODIMP _put_SearchHistoryContext(HSTRING value);
	virtual STDMETHODIMP _get_SearchHistoryContext(HSTRING *value);
	virtual STDMETHODIMP _put_PlaceholderText(HSTRING value);
	virtual STDMETHODIMP _get_PlaceholderText(HSTRING *value);
	virtual STDMETHODIMP _get_QueryText(HSTRING *value);
	virtual STDMETHODIMP _get_Language(HSTRING *value);
	virtual STDMETHODIMP _get_Visible(bool *value);
	virtual STDMETHODIMP _add_VisibilityChanged(Foundation::TypedEventHandler<SearchPane*, SearchPaneVisibilityChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VisibilityChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_QueryChanged(Foundation::TypedEventHandler<SearchPane*, SearchPaneQueryChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_QueryChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_SuggestionsRequested(Foundation::TypedEventHandler<SearchPane*, SearchPaneSuggestionsRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SuggestionsRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_QuerySubmitted(Foundation::TypedEventHandler<SearchPane*, SearchPaneQuerySubmittedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_QuerySubmitted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ResultSuggestionChosen(Foundation::TypedEventHandler<SearchPane*, SearchPaneResultSuggestionChosenEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ResultSuggestionChosen(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _SetLocalContentSuggestionSettings(LocalContentSuggestionSettings* settings);
	virtual STDMETHODIMP _ShowOverloadDefault();
	virtual STDMETHODIMP _ShowOverloadWithQuery(HSTRING query);
	virtual STDMETHODIMP _put_ShowOnKeyboardInput(bool value);
	virtual STDMETHODIMP _get_ShowOnKeyboardInput(bool *value);
	virtual STDMETHODIMP _TrySetQueryText(HSTRING query, bool *succeeded);
};
template<typename X> struct ISearchPane_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPane_adaptor::Language)->_get_Language(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Language;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPane_adaptor::PlaceholderText)->_get_PlaceholderText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISearchPane_adaptor::PlaceholderText)->_put_PlaceholderText(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} PlaceholderText;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPane_adaptor::QueryText)->_get_QueryText(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} QueryText;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ISearchPane_adaptor::SearchHistoryContext)->_get_SearchHistoryContext(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ISearchPane_adaptor::SearchHistoryContext)->_put_SearchHistoryContext(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} SearchHistoryContext;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISearchPane_adaptor::SearchHistoryEnabled)->_get_SearchHistoryEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISearchPane_adaptor::SearchHistoryEnabled)->_put_SearchHistoryEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} SearchHistoryEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISearchPane_adaptor::ShowOnKeyboardInput)->_get_ShowOnKeyboardInput(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISearchPane_adaptor::ShowOnKeyboardInput)->_put_ShowOnKeyboardInput(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} ShowOnKeyboardInput;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISearchPane_adaptor::Visible)->_get_Visible(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Visible;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SearchPane>, ptr<SearchPaneQueryChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISearchPane_adaptor::QueryChanged)->_add_QueryChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISearchPane_adaptor::QueryChanged)->_remove_QueryChanged(token)); }
		} QueryChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SearchPane>, ptr<SearchPaneQuerySubmittedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISearchPane_adaptor::QuerySubmitted)->_add_QuerySubmitted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISearchPane_adaptor::QuerySubmitted)->_remove_QuerySubmitted(token)); }
		} QuerySubmitted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SearchPane>, ptr<SearchPaneResultSuggestionChosenEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISearchPane_adaptor::ResultSuggestionChosen)->_add_ResultSuggestionChosen(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISearchPane_adaptor::ResultSuggestionChosen)->_remove_ResultSuggestionChosen(token)); }
		} ResultSuggestionChosen;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SearchPane>, ptr<SearchPaneSuggestionsRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISearchPane_adaptor::SuggestionsRequested)->_add_SuggestionsRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISearchPane_adaptor::SuggestionsRequested)->_remove_SuggestionsRequested(token)); }
		} SuggestionsRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<SearchPane>, ptr<SearchPaneVisibilityChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ISearchPane_adaptor::VisibilityChanged)->_add_VisibilityChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ISearchPane_adaptor::VisibilityChanged)->_remove_VisibilityChanged(token)); }
		} VisibilityChanged;
	};
	void SetLocalContentSuggestionSettings(pptr<LocalContentSuggestionSettings> settings) { hrcheck(X::get()->_SetLocalContentSuggestionSettings(settings)); }
	void Show() { hrcheck(X::get()->_ShowOverloadDefault()); }
	void Show(hstring_ref query) { hrcheck(X::get()->_ShowOverloadWithQuery(query)); }
	bool TrySetQueryText(hstring_ref query) { bool succeeded; hrcheck(X::get()->_TrySetQueryText(query, &succeeded)); return succeeded; }
	ISearchPane_adaptor() {}
};
template<typename X> struct adapt<ISearchPane, X> : Windows::ApplicationModel::Search::ISearchPane_adaptor<X> { typedef adapt ISearchPane; };
struct ISearchPane : ISearchPane_raw, generate<ISearchPane> {};

// SearchPane
template<typename> struct SearchPane_statics {
	static void HideThisApplication() { hrcheck(get_activation_factory<SearchPane, ISearchPaneStaticsWithHideThisApplication>()->_HideThisApplication()); }
	static ptr<SearchPane> GetForCurrentView() { SearchPane* searchPane; hrcheck(get_activation_factory<SearchPane, ISearchPaneStatics>()->_GetForCurrentView(&searchPane)); return from_abi(searchPane); }
};

template<typename X> struct statics<SearchPane, X> : X, Windows::ApplicationModel::Search::SearchPane_statics<void> {
	typedef typename X::root_type SearchPane;
};
struct SearchPane : generate<SearchPane> {
	using ISearchPane::Show;
};

// ISearchPaneQueryLinguisticDetails
struct ISearchPaneQueryLinguisticDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_QueryTextAlternatives(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_QueryTextCompositionStart(unsigned *value);
	virtual STDMETHODIMP _get_QueryTextCompositionLength(unsigned *value);
};
template<typename X> struct ISearchPaneQueryLinguisticDetails_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&ISearchPaneQueryLinguisticDetails_adaptor::QueryTextAlternatives)->_get_QueryTextAlternatives(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} QueryTextAlternatives;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISearchPaneQueryLinguisticDetails_adaptor::QueryTextCompositionLength)->_get_QueryTextCompositionLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} QueryTextCompositionLength;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISearchPaneQueryLinguisticDetails_adaptor::QueryTextCompositionStart)->_get_QueryTextCompositionStart(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} QueryTextCompositionStart;
	};
	ISearchPaneQueryLinguisticDetails_adaptor() {}
};
template<typename X> struct adapt<ISearchPaneQueryLinguisticDetails, X> : Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails_adaptor<X> { typedef adapt ISearchPaneQueryLinguisticDetails; };
struct ISearchPaneQueryLinguisticDetails : ISearchPaneQueryLinguisticDetails_raw, generate<ISearchPaneQueryLinguisticDetails> {};

// SearchPaneQueryLinguisticDetails
template<typename X> struct statics<SearchPaneQueryLinguisticDetails, X> : X {
	typedef typename X::root_type SearchPaneQueryLinguisticDetails;
};
struct SearchPaneQueryLinguisticDetails : generate<SearchPaneQueryLinguisticDetails> {};

// ISearchSuggestionCollection
struct ISearchSuggestionCollection_raw : IInspectable {
	virtual STDMETHODIMP _get_Size(unsigned *value);
	virtual STDMETHODIMP _AppendQuerySuggestion(HSTRING text);
	virtual STDMETHODIMP _AppendQuerySuggestions(Foundation::Collections::IIterable<HSTRING>* suggestions);
	virtual STDMETHODIMP _AppendResultSuggestion(HSTRING text, HSTRING detailText, HSTRING tag, Storage::Streams::IRandomAccessStreamReference* image, HSTRING imageAlternateText);
	virtual STDMETHODIMP _AppendSearchSeparator(HSTRING label);
};
template<typename X> struct ISearchSuggestionCollection_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISearchSuggestionCollection_adaptor::Size)->_get_Size(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Size;
	};
	void AppendQuerySuggestion(hstring_ref text) { hrcheck(X::get()->_AppendQuerySuggestion(text)); }
	void AppendQuerySuggestions(pptr<Foundation::Collections::IIterable<hstring>> suggestions) { hrcheck(X::get()->_AppendQuerySuggestions(to_abi(suggestions))); }
	void AppendResultSuggestion(hstring_ref text, hstring_ref detailText, hstring_ref tag, pptr<Storage::Streams::IRandomAccessStreamReference> image, hstring_ref imageAlternateText) { hrcheck(X::get()->_AppendResultSuggestion(text, detailText, tag, image, imageAlternateText)); }
	void AppendSearchSeparator(hstring_ref label) { hrcheck(X::get()->_AppendSearchSeparator(label)); }
	ISearchSuggestionCollection_adaptor() {}
};
template<typename X> struct adapt<ISearchSuggestionCollection, X> : Windows::ApplicationModel::Search::ISearchSuggestionCollection_adaptor<X> { typedef adapt ISearchSuggestionCollection; };
struct ISearchSuggestionCollection : ISearchSuggestionCollection_raw, generate<ISearchSuggestionCollection> {};

// SearchSuggestionCollection
template<typename X> struct statics<SearchSuggestionCollection, X> : X {
	typedef typename X::root_type SearchSuggestionCollection;
};
struct SearchSuggestionCollection : generate<SearchSuggestionCollection> {};

// ILocalContentSuggestionSettings
struct ILocalContentSuggestionSettings_raw : IInspectable {
	virtual STDMETHODIMP _put_Enabled(bool value);
	virtual STDMETHODIMP _get_Enabled(bool *value);
	virtual STDMETHODIMP _get_Locations(Foundation::Collections::IVector<Storage::StorageFolder*>* *value);
	virtual STDMETHODIMP _put_AqsFilter(HSTRING value);
	virtual STDMETHODIMP _get_AqsFilter(HSTRING *value);
	virtual STDMETHODIMP _get_PropertiesToMatch(Foundation::Collections::IVector<HSTRING>* *value);
};
template<typename X> struct ILocalContentSuggestionSettings_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILocalContentSuggestionSettings_adaptor::AqsFilter)->_get_AqsFilter(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ILocalContentSuggestionSettings_adaptor::AqsFilter)->_put_AqsFilter(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} AqsFilter;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILocalContentSuggestionSettings_adaptor::Enabled)->_get_Enabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ILocalContentSuggestionSettings_adaptor::Enabled)->_put_Enabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} Enabled;
		struct : property {
			ptr<Foundation::Collections::IVector<ptr<Storage::StorageFolder>>> get() { Foundation::Collections::IVector<Storage::StorageFolder*>* value; hrcheck(enc(&ILocalContentSuggestionSettings_adaptor::Locations)->_get_Locations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<ptr<Storage::StorageFolder>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<ptr<Storage::StorageFolder>>> () { return get(); }
			ptr<Foundation::Collections::IVector<ptr<Storage::StorageFolder>>> operator->() { return get(); }
		} Locations;
		struct : property {
			ptr<Foundation::Collections::IVector<hstring>> get() { Foundation::Collections::IVector<HSTRING>* value; hrcheck(enc(&ILocalContentSuggestionSettings_adaptor::PropertiesToMatch)->_get_PropertiesToMatch(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVector<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVector<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVector<hstring>> operator->() { return get(); }
		} PropertiesToMatch;
	};
	ILocalContentSuggestionSettings_adaptor() {}
};
template<typename X> struct adapt<ILocalContentSuggestionSettings, X> : Windows::ApplicationModel::Search::ILocalContentSuggestionSettings_adaptor<X> { typedef adapt ILocalContentSuggestionSettings; };
struct ILocalContentSuggestionSettings : ILocalContentSuggestionSettings_raw, generate<ILocalContentSuggestionSettings> {};

// LocalContentSuggestionSettings
template<typename X> struct statics<LocalContentSuggestionSettings, X> : X {
	typedef typename X::root_type LocalContentSuggestionSettings;
};
struct LocalContentSuggestionSettings : generate<LocalContentSuggestionSettings> {};

// ISearchQueryLinguisticDetailsFactory
struct ISearchQueryLinguisticDetailsFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(Foundation::Collections::IIterable<HSTRING>* queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength, SearchQueryLinguisticDetails* *value);
};

// ISearchQueryLinguisticDetails
struct ISearchQueryLinguisticDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_QueryTextAlternatives(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_QueryTextCompositionStart(unsigned *value);
	virtual STDMETHODIMP _get_QueryTextCompositionLength(unsigned *value);
};
template<typename X> struct ISearchQueryLinguisticDetails_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&ISearchQueryLinguisticDetails_adaptor::QueryTextAlternatives)->_get_QueryTextAlternatives(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} QueryTextAlternatives;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISearchQueryLinguisticDetails_adaptor::QueryTextCompositionLength)->_get_QueryTextCompositionLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} QueryTextCompositionLength;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISearchQueryLinguisticDetails_adaptor::QueryTextCompositionStart)->_get_QueryTextCompositionStart(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} QueryTextCompositionStart;
	};
	ISearchQueryLinguisticDetails_adaptor() {}
};
template<typename X> struct adapt<ISearchQueryLinguisticDetails, X> : Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails_adaptor<X> { typedef adapt ISearchQueryLinguisticDetails; };
struct ISearchQueryLinguisticDetails : ISearchQueryLinguisticDetails_raw, generate<ISearchQueryLinguisticDetails> {};

// SearchQueryLinguisticDetails
template<typename> struct SearchQueryLinguisticDetails_statics {
	static SearchQueryLinguisticDetails *activate(pptr<Foundation::Collections::IIterable<hstring>> queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength) { SearchQueryLinguisticDetails *value; hrcheck(get_activation_factory<SearchQueryLinguisticDetails, ISearchQueryLinguisticDetailsFactory>()->_CreateInstance(to_abi(queryTextAlternatives), queryTextCompositionStart, queryTextCompositionLength, &value)); return value; }
};

template<typename X> struct statics<SearchQueryLinguisticDetails, X> : X, Windows::ApplicationModel::Search::SearchQueryLinguisticDetails_statics<void> {
	using Windows::ApplicationModel::Search::SearchQueryLinguisticDetails_statics<void>::activate;
	typedef typename X::root_type SearchQueryLinguisticDetails;
};
struct SearchQueryLinguisticDetails : generate<SearchQueryLinguisticDetails> {};

// ISearchSuggestionsRequestDeferral
struct ISearchSuggestionsRequestDeferral_raw : IInspectable {
	virtual STDMETHODIMP _Complete();
};
template<typename X> struct ISearchSuggestionsRequestDeferral_adaptor : X {
	void Complete() { hrcheck(X::get()->_Complete()); }
};
template<typename X> struct adapt<ISearchSuggestionsRequestDeferral, X> : Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral_adaptor<X> { typedef adapt ISearchSuggestionsRequestDeferral; };
struct ISearchSuggestionsRequestDeferral : ISearchSuggestionsRequestDeferral_raw, generate<ISearchSuggestionsRequestDeferral> {};

// ISearchSuggestionsRequest
struct ISearchSuggestionsRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_IsCanceled(bool *value);
	virtual STDMETHODIMP _get_SearchSuggestionCollection(Search::SearchSuggestionCollection* *collection);
	virtual STDMETHODIMP _GetDeferral(SearchSuggestionsRequestDeferral* *deferral);
};
template<typename X> struct ISearchSuggestionsRequest_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISearchSuggestionsRequest_adaptor::IsCanceled)->_get_IsCanceled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCanceled;
		struct : property {
			ptr<Search::SearchSuggestionCollection> get() { Search::SearchSuggestionCollection* collection; hrcheck(enc(&ISearchSuggestionsRequest_adaptor::SearchSuggestionCollection)->_get_SearchSuggestionCollection(&collection)); return from_abi(collection); }
			ptr<Search::SearchSuggestionCollection> operator()() { return get(); }
			operator ptr<Search::SearchSuggestionCollection> () { return get(); }
			ptr<Search::SearchSuggestionCollection> operator->() { return get(); }
		} SearchSuggestionCollection;
	};
	ptr<SearchSuggestionsRequestDeferral> GetDeferral() { SearchSuggestionsRequestDeferral* deferral; hrcheck(X::get()->_GetDeferral(&deferral)); return from_abi(deferral); }
	ISearchSuggestionsRequest_adaptor() {}
};
template<typename X> struct adapt<ISearchSuggestionsRequest, X> : Windows::ApplicationModel::Search::ISearchSuggestionsRequest_adaptor<X> { typedef adapt ISearchSuggestionsRequest; };
struct ISearchSuggestionsRequest : ISearchSuggestionsRequest_raw, generate<ISearchSuggestionsRequest> {};

// SearchSuggestionsRequestDeferral
template<typename X> struct statics<SearchSuggestionsRequestDeferral, X> : X {
	typedef typename X::root_type SearchSuggestionsRequestDeferral;
};
struct SearchSuggestionsRequestDeferral : generate<SearchSuggestionsRequestDeferral> {};

// SearchSuggestionsRequest
template<typename X> struct statics<SearchSuggestionsRequest, X> : X {
	typedef typename X::root_type SearchSuggestionsRequest;
};
struct SearchSuggestionsRequest : generate<SearchSuggestionsRequest> {};
}}}
} // namespace iso_winrt
