#pragma once
// generated by isopod tools
// namespaces:
// Windows.Foundation.Diagnostics

#include "Windows.Foundation.Diagnostics.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Storage {
struct IStorageFolder;
struct StorageFile;
}}

// defs

template<> struct def<Windows::Foundation::Diagnostics::CausalityTraceLevel> : enum_type<int> {};
template<> struct def<Windows::Foundation::Diagnostics::CausalitySource> : enum_type<int> {};
template<> struct def<Windows::Foundation::Diagnostics::CausalityRelation> : enum_type<int> {};
template<> struct def<Windows::Foundation::Diagnostics::CausalitySynchronousWork> : enum_type<int> {};
template<> struct def<Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs> {};
template<> struct def<Windows::Foundation::Diagnostics::AsyncCausalityTracer> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Foundation::Diagnostics::ErrorOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Foundation::Diagnostics::IErrorReportingSettings> : overridable_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::RuntimeBrokerErrorSettings> : class_type<Platform::Object, Windows::Foundation::Diagnostics::IErrorReportingSettings> {};
template<> struct def<Windows::Foundation::Diagnostics::IErrorDetailsStatics> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::IErrorDetails> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::ErrorDetails> : class_type<Platform::Object, Windows::Foundation::Diagnostics::IErrorDetails> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingLevel> : enum_type<int> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingOpcode> : enum_type<int> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingFieldFormat> : enum_type<int> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingOptions> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingOptionsFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingOptions> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ILoggingOptions>, custom_activators {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingChannelOptions> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingChannelOptionsFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingChannelOptions> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ILoggingChannelOptions>, custom_activators {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingFields> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingFields> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ILoggingFields> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingTarget> : overridable_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingActivityFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingActivity> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingActivity2> : interface_type<Windows::Foundation::Diagnostics::ILoggingActivity, Windows::Foundation::Diagnostics::ILoggingTarget> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingActivity> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ILoggingActivity, Windows::Foundation::Diagnostics::ILoggingActivity2>, custom_activators {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingChannel> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingChannel2> : interface_type<Windows::Foundation::Diagnostics::ILoggingChannel, Windows::Foundation::Diagnostics::ILoggingTarget> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingChannelFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingChannelFactory2> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingChannel> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ILoggingChannel, Windows::Foundation::Diagnostics::ILoggingChannel2>, custom_activators {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingSession> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Foundation::Diagnostics::ILoggingSessionFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::LoggingSession> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ILoggingSession>, custom_activators {};
template<> struct def<Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs> : class_type<Platform::Object, Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs> {};
template<> struct def<Windows::Foundation::Diagnostics::IFileLoggingSession> : overridable_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Foundation::Diagnostics::IFileLoggingSessionFactory> : interface_type<> {};
template<> struct def<Windows::Foundation::Diagnostics::FileLoggingSession> : class_type<Platform::Object, Windows::Foundation::Diagnostics::IFileLoggingSession>, custom_activators {};

// uuids

template<> struct uuid<Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs> { define_guid(0x410B7711, 0xFF3B, 0x477F, 0x9C, 0x9A, 0xD2, 0xEF, 0xDA, 0x30, 0x2D, 0xC3);};
template<> struct uuid<Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics> { define_guid(0x50850B26, 0x267E, 0x451B, 0xA8, 0x90, 0xAB, 0x6A, 0x37, 0x2, 0x45, 0xEE);};
template<> struct uuid<Windows::Foundation::Diagnostics::IErrorReportingSettings> { define_guid(0x16369792, 0xB03E, 0x4BA1, 0x8B, 0xB8, 0xD2, 0x8F, 0x4A, 0xB4, 0xD2, 0xC0);};
template<> struct uuid<Windows::Foundation::Diagnostics::IErrorDetailsStatics> { define_guid(0xB7703750, 0xB1D, 0x46C8, 0xAA, 0xE, 0x4B, 0x81, 0x78, 0xE4, 0xFC, 0xE9);};
template<> struct uuid<Windows::Foundation::Diagnostics::IErrorDetails> { define_guid(0x378CBB01, 0x2CC9, 0x428F, 0x8C, 0x55, 0x2C, 0x99, 0xD, 0x46, 0x3E, 0x8F);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingOptions> { define_guid(0x90BC7850, 0x192, 0x4F5D, 0xAC, 0x26, 0x0, 0x6A, 0xDA, 0xCA, 0x12, 0xD8);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingOptionsFactory> { define_guid(0xD713C6CB, 0x98AB, 0x464B, 0x9F, 0x22, 0xA3, 0x26, 0x84, 0x78, 0x36, 0x8A);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingChannelOptions> { define_guid(0xC3E847FF, 0xEBB, 0x4A53, 0x8C, 0x54, 0xDE, 0xC2, 0x49, 0x26, 0xCB, 0x2C);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingChannelOptionsFactory> { define_guid(0xA93151DA, 0x7FAF, 0x4191, 0x87, 0x55, 0x5E, 0x86, 0xDC, 0x65, 0xD8, 0x96);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingFields> { define_guid(0xD7F6B7AF, 0x762D, 0x4579, 0x83, 0xBD, 0x52, 0xC2, 0x3B, 0xC3, 0x33, 0xBC);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingTarget> { define_guid(0x65F16C35, 0xE388, 0x4E26, 0xB1, 0x7A, 0xF5, 0x1C, 0xD3, 0xA8, 0x39, 0x16);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingActivityFactory> { define_guid(0x6B33B483, 0xE10A, 0x4C58, 0x97, 0xD5, 0x10, 0xFB, 0x45, 0x10, 0x74, 0xFB);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingActivity> { define_guid(0xBC032941, 0xB766, 0x4CB5, 0x98, 0x48, 0x97, 0xAC, 0x6B, 0xA6, 0xD6, 0xC);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingActivity2> { define_guid(0x26C29808, 0x6322, 0x456A, 0xAF, 0x82, 0x80, 0xC8, 0x64, 0x2F, 0x17, 0x8B);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingChannel> { define_guid(0xE9A50343, 0x11D7, 0x4F01, 0xB5, 0xCA, 0xCF, 0x49, 0x52, 0x78, 0xC0, 0xA8);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingChannel2> { define_guid(0x9F4C3CF3, 0xBAC, 0x45A5, 0x9E, 0x33, 0xBA, 0xF3, 0xF3, 0xA2, 0x46, 0xA5);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingChannelFactory> { define_guid(0x4EDC5B9C, 0xAF80, 0x4A9B, 0xB0, 0xDC, 0x39, 0x8F, 0x9A, 0xE5, 0x20, 0x7B);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingChannelFactory2> { define_guid(0x4C6EF5DD, 0x3B27, 0x4DC9, 0x99, 0xF0, 0x29, 0x9C, 0x6E, 0x46, 0x3, 0xA1);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingSession> { define_guid(0x6221F306, 0x9380, 0x4AD7, 0xBA, 0xF5, 0x41, 0xEA, 0x93, 0x10, 0xD7, 0x68);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILoggingSessionFactory> { define_guid(0x4E937EE5, 0x58FD, 0x45E0, 0x8C, 0x2F, 0xA1, 0x32, 0xEF, 0xF9, 0x5C, 0x1E);};
template<> struct uuid<Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs> { define_guid(0x269E976F, 0xD38, 0x4C1A, 0xB5, 0x3F, 0xB3, 0x95, 0xD8, 0x81, 0xDF, 0x84);};
template<> struct uuid<Windows::Foundation::Diagnostics::IFileLoggingSession> { define_guid(0x24C74216, 0xFED2, 0x404C, 0x89, 0x5F, 0x1F, 0x96, 0x99, 0xCB, 0x2, 0xF7);};
template<> struct uuid<Windows::Foundation::Diagnostics::IFileLoggingSessionFactory> { define_guid(0xEEA08DCE, 0x8447, 0x4DAA, 0x91, 0x33, 0x12, 0xEB, 0x46, 0xF6, 0x97, 0xD4);};

// types

namespace Windows { namespace Foundation { namespace Diagnostics {

// ITracingStatusChangedEventArgs
struct ITracingStatusChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Enabled(bool *enabled);
	virtual STDMETHODIMP _get_TraceLevel(CausalityTraceLevel *value);
};
template<typename X> struct ITracingStatusChangedEventArgs_adaptor : X {
	union {
		struct : property {
			bool get() { bool enabled; hrcheck(enc(&ITracingStatusChangedEventArgs_adaptor::Enabled)->_get_Enabled(&enabled)); return enabled; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Enabled;
		struct : property {
			CausalityTraceLevel get() { CausalityTraceLevel value; hrcheck(enc(&ITracingStatusChangedEventArgs_adaptor::TraceLevel)->_get_TraceLevel(&value)); return value; }
			CausalityTraceLevel operator()() { return get(); }
			operator CausalityTraceLevel () { return get(); }
		} TraceLevel;
	};
	ITracingStatusChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ITracingStatusChangedEventArgs, X> : Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs_adaptor<X> { typedef adapt ITracingStatusChangedEventArgs; };
struct ITracingStatusChangedEventArgs : ITracingStatusChangedEventArgs_raw, generate<ITracingStatusChangedEventArgs> {};

// IAsyncCausalityTracerStatics
struct IAsyncCausalityTracerStatics : IInspectable {
	virtual STDMETHODIMP _TraceOperationCreation(CausalityTraceLevel traceLevel, CausalitySource source, Platform::Guid platformId, unsigned __int64 operationId, HSTRING operationName, unsigned __int64 relatedContext);
	virtual STDMETHODIMP _TraceOperationCompletion(CausalityTraceLevel traceLevel, CausalitySource source, Platform::Guid platformId, unsigned __int64 operationId, AsyncStatus status);
	virtual STDMETHODIMP _TraceOperationRelation(CausalityTraceLevel traceLevel, CausalitySource source, Platform::Guid platformId, unsigned __int64 operationId, CausalityRelation relation);
	virtual STDMETHODIMP _TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, CausalitySource source, Platform::Guid platformId, unsigned __int64 operationId, CausalitySynchronousWork work);
	virtual STDMETHODIMP _TraceSynchronousWorkCompletion(CausalityTraceLevel traceLevel, CausalitySource source, CausalitySynchronousWork work);
	virtual STDMETHODIMP _add_TracingStatusChanged(EventHandler<TracingStatusChangedEventArgs*>* handler, EventRegistrationToken *cookie);
	virtual STDMETHODIMP _remove_TracingStatusChanged(EventRegistrationToken cookie);
};

// TracingStatusChangedEventArgs
template<typename X> struct statics<TracingStatusChangedEventArgs, X> : X {
	typedef typename X::root_type TracingStatusChangedEventArgs;
};
struct TracingStatusChangedEventArgs : generate<TracingStatusChangedEventArgs> {};

// AsyncCausalityTracer
template<typename> struct AsyncCausalityTracer_statics {
	static struct _TracingStatusChanged : property {
		EventRegistrationToken operator+=(handler_ref<EventHandler<ptr<TracingStatusChangedEventArgs>>> handler) { EventRegistrationToken cookie; hrcheck(get_activation_factory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>()->_add_TracingStatusChanged(to_abi(handler), &cookie)); return cookie; }
		void operator-=(const EventRegistrationToken& cookie) { hrcheck(get_activation_factory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>()->_remove_TracingStatusChanged(cookie)); }
	} TracingStatusChanged;
	static void TraceOperationCreation(CausalityTraceLevel traceLevel, CausalitySource source, const Platform::Guid& platformId, unsigned __int64 operationId, hstring_ref operationName, unsigned __int64 relatedContext) { hrcheck(get_activation_factory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>()->_TraceOperationCreation(traceLevel, source, platformId, operationId, operationName, relatedContext)); }
	static void TraceOperationCompletion(CausalityTraceLevel traceLevel, CausalitySource source, const Platform::Guid& platformId, unsigned __int64 operationId, AsyncStatus status) { hrcheck(get_activation_factory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>()->_TraceOperationCompletion(traceLevel, source, platformId, operationId, status)); }
	static void TraceOperationRelation(CausalityTraceLevel traceLevel, CausalitySource source, const Platform::Guid& platformId, unsigned __int64 operationId, CausalityRelation relation) { hrcheck(get_activation_factory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>()->_TraceOperationRelation(traceLevel, source, platformId, operationId, relation)); }
	static void TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, CausalitySource source, const Platform::Guid& platformId, unsigned __int64 operationId, CausalitySynchronousWork work) { hrcheck(get_activation_factory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>()->_TraceSynchronousWorkStart(traceLevel, source, platformId, operationId, work)); }
	static void TraceSynchronousWorkCompletion(CausalityTraceLevel traceLevel, CausalitySource source, CausalitySynchronousWork work) { hrcheck(get_activation_factory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>()->_TraceSynchronousWorkCompletion(traceLevel, source, work)); }
};
template<typename X> typename AsyncCausalityTracer_statics<X>::_TracingStatusChanged AsyncCausalityTracer_statics<X>::TracingStatusChanged;

template<typename X> struct statics<AsyncCausalityTracer, X> : X, Windows::Foundation::Diagnostics::AsyncCausalityTracer_statics<void> {
	typedef typename X::root_type AsyncCausalityTracer;
};
struct AsyncCausalityTracer : generate<AsyncCausalityTracer> {};

// IErrorReportingSettings
struct IErrorReportingSettings_raw : IInspectable {
	virtual STDMETHODIMP _SetErrorOptions(ErrorOptions value) = 0;
	virtual STDMETHODIMP _GetErrorOptions(ErrorOptions *value) = 0;
};
template<typename X> struct IErrorReportingSettings_adaptor : X {
	void SetErrorOptions(ErrorOptions value) { hrcheck(X::get()->_SetErrorOptions(value)); }
	ErrorOptions GetErrorOptions() { ErrorOptions value; hrcheck(X::get()->_GetErrorOptions(&value)); return value; }
};
template<typename X> struct adapt<IErrorReportingSettings, X> : Windows::Foundation::Diagnostics::IErrorReportingSettings_adaptor<X> { typedef adapt IErrorReportingSettings; };
template<typename X> struct IErrorReportingSettings_unadaptor : X {
	STDMETHODIMP _SetErrorOptions(ErrorOptions value) { return hrtry([&, this] { X::get()->SetErrorOptions(value); }); }
	STDMETHODIMP _GetErrorOptions(ErrorOptions *value) { return hrtry([&, this] { *value = X::get()->GetErrorOptions(); }); }
};
template<typename X> struct unadapt<IErrorReportingSettings, X> : Windows::Foundation::Diagnostics::IErrorReportingSettings_unadaptor<X> {};
struct IErrorReportingSettings : IErrorReportingSettings_raw, generate<IErrorReportingSettings> {};

// RuntimeBrokerErrorSettings
template<typename X> struct statics<RuntimeBrokerErrorSettings, X> : X {
	typedef typename X::root_type RuntimeBrokerErrorSettings;
};
struct RuntimeBrokerErrorSettings : generate<RuntimeBrokerErrorSettings> {};

// IErrorDetailsStatics
struct IErrorDetailsStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromHResultAsync(int errorCode, IAsyncOperation<ErrorDetails*>* *operation);
};

// IErrorDetails
struct IErrorDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Description(HSTRING *value);
	virtual STDMETHODIMP _get_LongDescription(HSTRING *value);
	virtual STDMETHODIMP _get_HelpUri(Uri* *value);
};
template<typename X> struct IErrorDetails_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IErrorDetails_adaptor::Description)->_get_Description(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Description;
		struct : property {
			ptr<Uri> get() { Uri* value; hrcheck(enc(&IErrorDetails_adaptor::HelpUri)->_get_HelpUri(&value)); return from_abi(value); }
			ptr<Uri> operator()() { return get(); }
			operator ptr<Uri> () { return get(); }
			ptr<Uri> operator->() { return get(); }
		} HelpUri;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IErrorDetails_adaptor::LongDescription)->_get_LongDescription(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LongDescription;
	};
	IErrorDetails_adaptor() {}
};
template<typename X> struct adapt<IErrorDetails, X> : Windows::Foundation::Diagnostics::IErrorDetails_adaptor<X> { typedef adapt IErrorDetails; };
struct IErrorDetails : IErrorDetails_raw, generate<IErrorDetails> {};

// ErrorDetails
template<typename> struct ErrorDetails_statics {
	static ptr<IAsyncOperation<ptr<ErrorDetails>>> CreateFromHResultAsync(int errorCode) { IAsyncOperation<ErrorDetails*>* operation; hrcheck(get_activation_factory<ErrorDetails, IErrorDetailsStatics>()->_CreateFromHResultAsync(errorCode, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<ErrorDetails, X> : X, Windows::Foundation::Diagnostics::ErrorDetails_statics<void> {
	typedef typename X::root_type ErrorDetails;
};
struct ErrorDetails : generate<ErrorDetails> {};

// ILoggingOptions
struct ILoggingOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_Keywords(__int64 *value);
	virtual STDMETHODIMP _put_Keywords(__int64 value);
	virtual STDMETHODIMP _get_Tags(int *value);
	virtual STDMETHODIMP _put_Tags(int value);
	virtual STDMETHODIMP _get_Task(short *value);
	virtual STDMETHODIMP _put_Task(short value);
	virtual STDMETHODIMP _get_Opcode(LoggingOpcode *value);
	virtual STDMETHODIMP _put_Opcode(LoggingOpcode value);
	virtual STDMETHODIMP _get_ActivityId(Platform::Guid *value);
	virtual STDMETHODIMP _put_ActivityId(Platform::Guid value);
	virtual STDMETHODIMP _get_RelatedActivityId(Platform::Guid *value);
	virtual STDMETHODIMP _put_RelatedActivityId(Platform::Guid value);
};
template<typename X> struct ILoggingOptions_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ILoggingOptions_adaptor::ActivityId)->_get_ActivityId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
			void put(const Platform::Guid& value) { hrcheck(enc(&ILoggingOptions_adaptor::ActivityId)->_put_ActivityId(value)); }
			void operator=(const Platform::Guid& value) { put(value); }
			void operator()(const Platform::Guid& value) { put(value); }
		} ActivityId;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&ILoggingOptions_adaptor::Keywords)->_get_Keywords(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
			void put(__int64 value) { hrcheck(enc(&ILoggingOptions_adaptor::Keywords)->_put_Keywords(value)); }
			void operator=(__int64 value) { put(value); }
			void operator()(__int64 value) { put(value); }
		} Keywords;
		struct : property {
			LoggingOpcode get() { LoggingOpcode value; hrcheck(enc(&ILoggingOptions_adaptor::Opcode)->_get_Opcode(&value)); return value; }
			LoggingOpcode operator()() { return get(); }
			operator LoggingOpcode () { return get(); }
			void put(LoggingOpcode value) { hrcheck(enc(&ILoggingOptions_adaptor::Opcode)->_put_Opcode(value)); }
			void operator=(LoggingOpcode value) { put(value); }
			void operator()(LoggingOpcode value) { put(value); }
		} Opcode;
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ILoggingOptions_adaptor::RelatedActivityId)->_get_RelatedActivityId(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
			void put(const Platform::Guid& value) { hrcheck(enc(&ILoggingOptions_adaptor::RelatedActivityId)->_put_RelatedActivityId(value)); }
			void operator=(const Platform::Guid& value) { put(value); }
			void operator()(const Platform::Guid& value) { put(value); }
		} RelatedActivityId;
		struct : property {
			int get() { int value; hrcheck(enc(&ILoggingOptions_adaptor::Tags)->_get_Tags(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ILoggingOptions_adaptor::Tags)->_put_Tags(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Tags;
		struct : property {
			short get() { short value; hrcheck(enc(&ILoggingOptions_adaptor::Task)->_get_Task(&value)); return value; }
			short operator()() { return get(); }
			operator short () { return get(); }
			void put(short value) { hrcheck(enc(&ILoggingOptions_adaptor::Task)->_put_Task(value)); }
			void operator=(short value) { put(value); }
			void operator()(short value) { put(value); }
		} Task;
	};
	ILoggingOptions_adaptor() {}
};
template<typename X> struct adapt<ILoggingOptions, X> : Windows::Foundation::Diagnostics::ILoggingOptions_adaptor<X> { typedef adapt ILoggingOptions; };
struct ILoggingOptions : ILoggingOptions_raw, generate<ILoggingOptions> {};

// ILoggingOptionsFactory
struct ILoggingOptionsFactory : IInspectable {
	virtual STDMETHODIMP _CreateWithKeywords(__int64 keywords, LoggingOptions* *result);
};

// LoggingOptions
template<typename> struct LoggingOptions_statics {
	static LoggingOptions *activate() { LoggingOptions *t; get_activation_factory<LoggingOptions>()->ActivateInstance((IInspectable**)&t); return t; }
	static LoggingOptions *activate(__int64 keywords) { LoggingOptions *result; hrcheck(get_activation_factory<LoggingOptions, ILoggingOptionsFactory>()->_CreateWithKeywords(keywords, &result)); return result; }
};

template<typename X> struct statics<LoggingOptions, X> : X, Windows::Foundation::Diagnostics::LoggingOptions_statics<void> {
	using Windows::Foundation::Diagnostics::LoggingOptions_statics<void>::activate;
	typedef typename X::root_type LoggingOptions;
};
struct LoggingOptions : generate<LoggingOptions> {};

// ILoggingChannelOptions
struct ILoggingChannelOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_Group(Platform::Guid *value);
	virtual STDMETHODIMP _put_Group(Platform::Guid value);
};
template<typename X> struct ILoggingChannelOptions_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ILoggingChannelOptions_adaptor::Group)->_get_Group(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
			void put(const Platform::Guid& value) { hrcheck(enc(&ILoggingChannelOptions_adaptor::Group)->_put_Group(value)); }
			void operator=(const Platform::Guid& value) { put(value); }
			void operator()(const Platform::Guid& value) { put(value); }
		} Group;
	};
	ILoggingChannelOptions_adaptor() {}
};
template<typename X> struct adapt<ILoggingChannelOptions, X> : Windows::Foundation::Diagnostics::ILoggingChannelOptions_adaptor<X> { typedef adapt ILoggingChannelOptions; };
struct ILoggingChannelOptions : ILoggingChannelOptions_raw, generate<ILoggingChannelOptions> {};

// ILoggingChannelOptionsFactory
struct ILoggingChannelOptionsFactory : IInspectable {
	virtual STDMETHODIMP _Create(Platform::Guid group, LoggingChannelOptions* *result);
};

// LoggingChannelOptions
template<typename> struct LoggingChannelOptions_statics {
	static LoggingChannelOptions *activate() { LoggingChannelOptions *t; get_activation_factory<LoggingChannelOptions>()->ActivateInstance((IInspectable**)&t); return t; }
	static LoggingChannelOptions *activate(const Platform::Guid& group) { LoggingChannelOptions *result; hrcheck(get_activation_factory<LoggingChannelOptions, ILoggingChannelOptionsFactory>()->_Create(group, &result)); return result; }
};

template<typename X> struct statics<LoggingChannelOptions, X> : X, Windows::Foundation::Diagnostics::LoggingChannelOptions_statics<void> {
	using Windows::Foundation::Diagnostics::LoggingChannelOptions_statics<void>::activate;
	typedef typename X::root_type LoggingChannelOptions;
};
struct LoggingChannelOptions : generate<LoggingChannelOptions> {};

// ILoggingFields
struct ILoggingFields_raw : IInspectable {
	virtual STDMETHODIMP _Clear();
	virtual STDMETHODIMP _BeginStruct(HSTRING name);
	virtual STDMETHODIMP _BeginStructWithTags(HSTRING name, int tags);
	virtual STDMETHODIMP _EndStruct();
	virtual STDMETHODIMP _AddEmpty(HSTRING name);
	virtual STDMETHODIMP _AddEmptyWithFormat(HSTRING name, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddEmptyWithFormatAndTags(HSTRING name, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt8(HSTRING name, unsigned char value);
	virtual STDMETHODIMP _AddUInt8WithFormat(HSTRING name, unsigned char value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt8WithFormatAndTags(HSTRING name, unsigned char value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt8Array(HSTRING name, unsigned valueSize, unsigned char *value);
	virtual STDMETHODIMP _AddUInt8ArrayWithFormat(HSTRING name, unsigned valueSize, unsigned char *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt8ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, unsigned char *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddInt16(HSTRING name, short value);
	virtual STDMETHODIMP _AddInt16WithFormat(HSTRING name, short value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddInt16WithFormatAndTags(HSTRING name, short value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddInt16Array(HSTRING name, unsigned valueSize, short *value);
	virtual STDMETHODIMP _AddInt16ArrayWithFormat(HSTRING name, unsigned valueSize, short *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddInt16ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, short *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt16(HSTRING name, unsigned short value);
	virtual STDMETHODIMP _AddUInt16WithFormat(HSTRING name, unsigned short value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt16WithFormatAndTags(HSTRING name, unsigned short value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt16Array(HSTRING name, unsigned valueSize, unsigned short *value);
	virtual STDMETHODIMP _AddUInt16ArrayWithFormat(HSTRING name, unsigned valueSize, unsigned short *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt16ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, unsigned short *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddInt32(HSTRING name, int value);
	virtual STDMETHODIMP _AddInt32WithFormat(HSTRING name, int value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddInt32WithFormatAndTags(HSTRING name, int value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddInt32Array(HSTRING name, unsigned valueSize, int *value);
	virtual STDMETHODIMP _AddInt32ArrayWithFormat(HSTRING name, unsigned valueSize, int *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddInt32ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, int *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt32(HSTRING name, unsigned value);
	virtual STDMETHODIMP _AddUInt32WithFormat(HSTRING name, unsigned value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt32WithFormatAndTags(HSTRING name, unsigned value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt32Array(HSTRING name, unsigned valueSize, unsigned *value);
	virtual STDMETHODIMP _AddUInt32ArrayWithFormat(HSTRING name, unsigned valueSize, unsigned *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt32ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, unsigned *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddInt64(HSTRING name, __int64 value);
	virtual STDMETHODIMP _AddInt64WithFormat(HSTRING name, __int64 value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddInt64WithFormatAndTags(HSTRING name, __int64 value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddInt64Array(HSTRING name, unsigned valueSize, __int64 *value);
	virtual STDMETHODIMP _AddInt64ArrayWithFormat(HSTRING name, unsigned valueSize, __int64 *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddInt64ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, __int64 *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt64(HSTRING name, unsigned __int64 value);
	virtual STDMETHODIMP _AddUInt64WithFormat(HSTRING name, unsigned __int64 value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt64WithFormatAndTags(HSTRING name, unsigned __int64 value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddUInt64Array(HSTRING name, unsigned valueSize, unsigned __int64 *value);
	virtual STDMETHODIMP _AddUInt64ArrayWithFormat(HSTRING name, unsigned valueSize, unsigned __int64 *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddUInt64ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, unsigned __int64 *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddSingle(HSTRING name, float value);
	virtual STDMETHODIMP _AddSingleWithFormat(HSTRING name, float value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddSingleWithFormatAndTags(HSTRING name, float value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddSingleArray(HSTRING name, unsigned valueSize, float *value);
	virtual STDMETHODIMP _AddSingleArrayWithFormat(HSTRING name, unsigned valueSize, float *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddSingleArrayWithFormatAndTags(HSTRING name, unsigned valueSize, float *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddDouble(HSTRING name, double value);
	virtual STDMETHODIMP _AddDoubleWithFormat(HSTRING name, double value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddDoubleWithFormatAndTags(HSTRING name, double value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddDoubleArray(HSTRING name, unsigned valueSize, double *value);
	virtual STDMETHODIMP _AddDoubleArrayWithFormat(HSTRING name, unsigned valueSize, double *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddDoubleArrayWithFormatAndTags(HSTRING name, unsigned valueSize, double *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddChar16(HSTRING name, char value);
	virtual STDMETHODIMP _AddChar16WithFormat(HSTRING name, char value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddChar16WithFormatAndTags(HSTRING name, char value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddChar16Array(HSTRING name, unsigned valueSize, char *value);
	virtual STDMETHODIMP _AddChar16ArrayWithFormat(HSTRING name, unsigned valueSize, char *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddChar16ArrayWithFormatAndTags(HSTRING name, unsigned valueSize, char *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddBoolean(HSTRING name, bool value);
	virtual STDMETHODIMP _AddBooleanWithFormat(HSTRING name, bool value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddBooleanWithFormatAndTags(HSTRING name, bool value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddBooleanArray(HSTRING name, unsigned valueSize, bool *value);
	virtual STDMETHODIMP _AddBooleanArrayWithFormat(HSTRING name, unsigned valueSize, bool *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddBooleanArrayWithFormatAndTags(HSTRING name, unsigned valueSize, bool *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddString(HSTRING name, HSTRING value);
	virtual STDMETHODIMP _AddStringWithFormat(HSTRING name, HSTRING value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddStringWithFormatAndTags(HSTRING name, HSTRING value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddStringArray(HSTRING name, unsigned valueSize, HSTRING *value);
	virtual STDMETHODIMP _AddStringArrayWithFormat(HSTRING name, unsigned valueSize, HSTRING *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddStringArrayWithFormatAndTags(HSTRING name, unsigned valueSize, HSTRING *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddGuid(HSTRING name, Platform::Guid value);
	virtual STDMETHODIMP _AddGuidWithFormat(HSTRING name, Platform::Guid value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddGuidWithFormatAndTags(HSTRING name, Platform::Guid value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddGuidArray(HSTRING name, unsigned valueSize, Platform::Guid *value);
	virtual STDMETHODIMP _AddGuidArrayWithFormat(HSTRING name, unsigned valueSize, Platform::Guid *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddGuidArrayWithFormatAndTags(HSTRING name, unsigned valueSize, Platform::Guid *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddDateTime(HSTRING name, DateTime value);
	virtual STDMETHODIMP _AddDateTimeWithFormat(HSTRING name, DateTime value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddDateTimeWithFormatAndTags(HSTRING name, DateTime value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddDateTimeArray(HSTRING name, unsigned valueSize, DateTime *value);
	virtual STDMETHODIMP _AddDateTimeArrayWithFormat(HSTRING name, unsigned valueSize, DateTime *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddDateTimeArrayWithFormatAndTags(HSTRING name, unsigned valueSize, DateTime *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddTimeSpan(HSTRING name, TimeSpan value);
	virtual STDMETHODIMP _AddTimeSpanWithFormat(HSTRING name, TimeSpan value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddTimeSpanWithFormatAndTags(HSTRING name, TimeSpan value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddTimeSpanArray(HSTRING name, unsigned valueSize, TimeSpan *value);
	virtual STDMETHODIMP _AddTimeSpanArrayWithFormat(HSTRING name, unsigned valueSize, TimeSpan *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddTimeSpanArrayWithFormatAndTags(HSTRING name, unsigned valueSize, TimeSpan *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddPoint(HSTRING name, Point value);
	virtual STDMETHODIMP _AddPointWithFormat(HSTRING name, Point value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddPointWithFormatAndTags(HSTRING name, Point value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddPointArray(HSTRING name, unsigned valueSize, Point *value);
	virtual STDMETHODIMP _AddPointArrayWithFormat(HSTRING name, unsigned valueSize, Point *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddPointArrayWithFormatAndTags(HSTRING name, unsigned valueSize, Point *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddSize(HSTRING name, Size value);
	virtual STDMETHODIMP _AddSizeWithFormat(HSTRING name, Size value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddSizeWithFormatAndTags(HSTRING name, Size value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddSizeArray(HSTRING name, unsigned valueSize, Size *value);
	virtual STDMETHODIMP _AddSizeArrayWithFormat(HSTRING name, unsigned valueSize, Size *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddSizeArrayWithFormatAndTags(HSTRING name, unsigned valueSize, Size *value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddRect(HSTRING name, Rect value);
	virtual STDMETHODIMP _AddRectWithFormat(HSTRING name, Rect value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddRectWithFormatAndTags(HSTRING name, Rect value, LoggingFieldFormat format, int tags);
	virtual STDMETHODIMP _AddRectArray(HSTRING name, unsigned valueSize, Rect *value);
	virtual STDMETHODIMP _AddRectArrayWithFormat(HSTRING name, unsigned valueSize, Rect *value, LoggingFieldFormat format);
	virtual STDMETHODIMP _AddRectArrayWithFormatAndTags(HSTRING name, unsigned valueSize, Rect *value, LoggingFieldFormat format, int tags);
};
template<typename X> struct ILoggingFields_adaptor : X {
	void Clear() { hrcheck(X::get()->_Clear()); }
	void BeginStruct(hstring_ref name) { hrcheck(X::get()->_BeginStruct(name)); }
	void BeginStruct(hstring_ref name, int tags) { hrcheck(X::get()->_BeginStructWithTags(name, tags)); }
	void EndStruct() { hrcheck(X::get()->_EndStruct()); }
	void AddEmpty(hstring_ref name) { hrcheck(X::get()->_AddEmpty(name)); }
	void AddEmpty(hstring_ref name, LoggingFieldFormat format) { hrcheck(X::get()->_AddEmptyWithFormat(name, format)); }
	void AddEmpty(hstring_ref name, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddEmptyWithFormatAndTags(name, format, tags)); }
	void AddUInt8(hstring_ref name, unsigned char value) { hrcheck(X::get()->_AddUInt8(name, value)); }
	void AddUInt8(hstring_ref name, unsigned char value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt8WithFormat(name, value, format)); }
	void AddUInt8(hstring_ref name, unsigned char value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt8WithFormatAndTags(name, value, format, tags)); }
	void AddUInt8Array(hstring_ref name, const szarray<unsigned char>& value) { hrcheck(X::get()->_AddUInt8Array(name, value.size, to_abi(value.p))); }
	void AddUInt8Array(hstring_ref name, const szarray<unsigned char>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt8ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddUInt8Array(hstring_ref name, const szarray<unsigned char>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt8ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddInt16(hstring_ref name, short value) { hrcheck(X::get()->_AddInt16(name, value)); }
	void AddInt16(hstring_ref name, short value, LoggingFieldFormat format) { hrcheck(X::get()->_AddInt16WithFormat(name, value, format)); }
	void AddInt16(hstring_ref name, short value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddInt16WithFormatAndTags(name, value, format, tags)); }
	void AddInt16Array(hstring_ref name, const szarray<short>& value) { hrcheck(X::get()->_AddInt16Array(name, value.size, to_abi(value.p))); }
	void AddInt16Array(hstring_ref name, const szarray<short>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddInt16ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddInt16Array(hstring_ref name, const szarray<short>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddInt16ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddUInt16(hstring_ref name, unsigned short value) { hrcheck(X::get()->_AddUInt16(name, value)); }
	void AddUInt16(hstring_ref name, unsigned short value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt16WithFormat(name, value, format)); }
	void AddUInt16(hstring_ref name, unsigned short value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt16WithFormatAndTags(name, value, format, tags)); }
	void AddUInt16Array(hstring_ref name, const szarray<unsigned short>& value) { hrcheck(X::get()->_AddUInt16Array(name, value.size, to_abi(value.p))); }
	void AddUInt16Array(hstring_ref name, const szarray<unsigned short>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt16ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddUInt16Array(hstring_ref name, const szarray<unsigned short>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt16ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddInt32(hstring_ref name, int value) { hrcheck(X::get()->_AddInt32(name, value)); }
	void AddInt32(hstring_ref name, int value, LoggingFieldFormat format) { hrcheck(X::get()->_AddInt32WithFormat(name, value, format)); }
	void AddInt32(hstring_ref name, int value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddInt32WithFormatAndTags(name, value, format, tags)); }
	void AddInt32Array(hstring_ref name, const szarray<int>& value) { hrcheck(X::get()->_AddInt32Array(name, value.size, to_abi(value.p))); }
	void AddInt32Array(hstring_ref name, const szarray<int>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddInt32ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddInt32Array(hstring_ref name, const szarray<int>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddInt32ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddUInt32(hstring_ref name, unsigned value) { hrcheck(X::get()->_AddUInt32(name, value)); }
	void AddUInt32(hstring_ref name, unsigned value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt32WithFormat(name, value, format)); }
	void AddUInt32(hstring_ref name, unsigned value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt32WithFormatAndTags(name, value, format, tags)); }
	void AddUInt32Array(hstring_ref name, const szarray<unsigned>& value) { hrcheck(X::get()->_AddUInt32Array(name, value.size, to_abi(value.p))); }
	void AddUInt32Array(hstring_ref name, const szarray<unsigned>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt32ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddUInt32Array(hstring_ref name, const szarray<unsigned>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt32ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddInt64(hstring_ref name, __int64 value) { hrcheck(X::get()->_AddInt64(name, value)); }
	void AddInt64(hstring_ref name, __int64 value, LoggingFieldFormat format) { hrcheck(X::get()->_AddInt64WithFormat(name, value, format)); }
	void AddInt64(hstring_ref name, __int64 value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddInt64WithFormatAndTags(name, value, format, tags)); }
	void AddInt64Array(hstring_ref name, const szarray<__int64>& value) { hrcheck(X::get()->_AddInt64Array(name, value.size, to_abi(value.p))); }
	void AddInt64Array(hstring_ref name, const szarray<__int64>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddInt64ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddInt64Array(hstring_ref name, const szarray<__int64>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddInt64ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddUInt64(hstring_ref name, unsigned __int64 value) { hrcheck(X::get()->_AddUInt64(name, value)); }
	void AddUInt64(hstring_ref name, unsigned __int64 value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt64WithFormat(name, value, format)); }
	void AddUInt64(hstring_ref name, unsigned __int64 value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt64WithFormatAndTags(name, value, format, tags)); }
	void AddUInt64Array(hstring_ref name, const szarray<unsigned __int64>& value) { hrcheck(X::get()->_AddUInt64Array(name, value.size, to_abi(value.p))); }
	void AddUInt64Array(hstring_ref name, const szarray<unsigned __int64>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddUInt64ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddUInt64Array(hstring_ref name, const szarray<unsigned __int64>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddUInt64ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddSingle(hstring_ref name, float value) { hrcheck(X::get()->_AddSingle(name, value)); }
	void AddSingle(hstring_ref name, float value, LoggingFieldFormat format) { hrcheck(X::get()->_AddSingleWithFormat(name, value, format)); }
	void AddSingle(hstring_ref name, float value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddSingleWithFormatAndTags(name, value, format, tags)); }
	void AddSingleArray(hstring_ref name, const szarray<float>& value) { hrcheck(X::get()->_AddSingleArray(name, value.size, to_abi(value.p))); }
	void AddSingleArray(hstring_ref name, const szarray<float>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddSingleArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddSingleArray(hstring_ref name, const szarray<float>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddSingleArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddDouble(hstring_ref name, double value) { hrcheck(X::get()->_AddDouble(name, value)); }
	void AddDouble(hstring_ref name, double value, LoggingFieldFormat format) { hrcheck(X::get()->_AddDoubleWithFormat(name, value, format)); }
	void AddDouble(hstring_ref name, double value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddDoubleWithFormatAndTags(name, value, format, tags)); }
	void AddDoubleArray(hstring_ref name, const szarray<double>& value) { hrcheck(X::get()->_AddDoubleArray(name, value.size, to_abi(value.p))); }
	void AddDoubleArray(hstring_ref name, const szarray<double>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddDoubleArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddDoubleArray(hstring_ref name, const szarray<double>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddDoubleArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddChar16(hstring_ref name, char value) { hrcheck(X::get()->_AddChar16(name, value)); }
	void AddChar16(hstring_ref name, char value, LoggingFieldFormat format) { hrcheck(X::get()->_AddChar16WithFormat(name, value, format)); }
	void AddChar16(hstring_ref name, char value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddChar16WithFormatAndTags(name, value, format, tags)); }
	void AddChar16Array(hstring_ref name, const szarray<char>& value) { hrcheck(X::get()->_AddChar16Array(name, value.size, to_abi(value.p))); }
	void AddChar16Array(hstring_ref name, const szarray<char>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddChar16ArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddChar16Array(hstring_ref name, const szarray<char>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddChar16ArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddBoolean(hstring_ref name, bool value) { hrcheck(X::get()->_AddBoolean(name, value)); }
	void AddBoolean(hstring_ref name, bool value, LoggingFieldFormat format) { hrcheck(X::get()->_AddBooleanWithFormat(name, value, format)); }
	void AddBoolean(hstring_ref name, bool value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddBooleanWithFormatAndTags(name, value, format, tags)); }
	void AddBooleanArray(hstring_ref name, const szarray<bool>& value) { hrcheck(X::get()->_AddBooleanArray(name, value.size, to_abi(value.p))); }
	void AddBooleanArray(hstring_ref name, const szarray<bool>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddBooleanArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddBooleanArray(hstring_ref name, const szarray<bool>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddBooleanArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddString(hstring_ref name, hstring_ref value) { hrcheck(X::get()->_AddString(name, value)); }
	void AddString(hstring_ref name, hstring_ref value, LoggingFieldFormat format) { hrcheck(X::get()->_AddStringWithFormat(name, value, format)); }
	void AddString(hstring_ref name, hstring_ref value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddStringWithFormatAndTags(name, value, format, tags)); }
	void AddStringArray(hstring_ref name, const szarray<hstring>& value) { hrcheck(X::get()->_AddStringArray(name, value.size, to_abi(value.p))); }
	void AddStringArray(hstring_ref name, const szarray<hstring>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddStringArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddStringArray(hstring_ref name, const szarray<hstring>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddStringArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddGuid(hstring_ref name, const Platform::Guid& value) { hrcheck(X::get()->_AddGuid(name, value)); }
	void AddGuid(hstring_ref name, const Platform::Guid& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddGuidWithFormat(name, value, format)); }
	void AddGuid(hstring_ref name, const Platform::Guid& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddGuidWithFormatAndTags(name, value, format, tags)); }
	void AddGuidArray(hstring_ref name, const szarray<Platform::Guid>& value) { hrcheck(X::get()->_AddGuidArray(name, value.size, to_abi(value.p))); }
	void AddGuidArray(hstring_ref name, const szarray<Platform::Guid>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddGuidArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddGuidArray(hstring_ref name, const szarray<Platform::Guid>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddGuidArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddDateTime(hstring_ref name, const DateTime& value) { hrcheck(X::get()->_AddDateTime(name, value)); }
	void AddDateTime(hstring_ref name, const DateTime& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddDateTimeWithFormat(name, value, format)); }
	void AddDateTime(hstring_ref name, const DateTime& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddDateTimeWithFormatAndTags(name, value, format, tags)); }
	void AddDateTimeArray(hstring_ref name, const szarray<DateTime>& value) { hrcheck(X::get()->_AddDateTimeArray(name, value.size, to_abi(value.p))); }
	void AddDateTimeArray(hstring_ref name, const szarray<DateTime>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddDateTimeArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddDateTimeArray(hstring_ref name, const szarray<DateTime>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddDateTimeArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddTimeSpan(hstring_ref name, const TimeSpan& value) { hrcheck(X::get()->_AddTimeSpan(name, value)); }
	void AddTimeSpan(hstring_ref name, const TimeSpan& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddTimeSpanWithFormat(name, value, format)); }
	void AddTimeSpan(hstring_ref name, const TimeSpan& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddTimeSpanWithFormatAndTags(name, value, format, tags)); }
	void AddTimeSpanArray(hstring_ref name, const szarray<TimeSpan>& value) { hrcheck(X::get()->_AddTimeSpanArray(name, value.size, to_abi(value.p))); }
	void AddTimeSpanArray(hstring_ref name, const szarray<TimeSpan>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddTimeSpanArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddTimeSpanArray(hstring_ref name, const szarray<TimeSpan>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddTimeSpanArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddPoint(hstring_ref name, const Point& value) { hrcheck(X::get()->_AddPoint(name, value)); }
	void AddPoint(hstring_ref name, const Point& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddPointWithFormat(name, value, format)); }
	void AddPoint(hstring_ref name, const Point& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddPointWithFormatAndTags(name, value, format, tags)); }
	void AddPointArray(hstring_ref name, const szarray<Point>& value) { hrcheck(X::get()->_AddPointArray(name, value.size, to_abi(value.p))); }
	void AddPointArray(hstring_ref name, const szarray<Point>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddPointArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddPointArray(hstring_ref name, const szarray<Point>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddPointArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddSize(hstring_ref name, const Size& value) { hrcheck(X::get()->_AddSize(name, value)); }
	void AddSize(hstring_ref name, const Size& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddSizeWithFormat(name, value, format)); }
	void AddSize(hstring_ref name, const Size& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddSizeWithFormatAndTags(name, value, format, tags)); }
	void AddSizeArray(hstring_ref name, const szarray<Size>& value) { hrcheck(X::get()->_AddSizeArray(name, value.size, to_abi(value.p))); }
	void AddSizeArray(hstring_ref name, const szarray<Size>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddSizeArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddSizeArray(hstring_ref name, const szarray<Size>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddSizeArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
	void AddRect(hstring_ref name, const Rect& value) { hrcheck(X::get()->_AddRect(name, value)); }
	void AddRect(hstring_ref name, const Rect& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddRectWithFormat(name, value, format)); }
	void AddRect(hstring_ref name, const Rect& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddRectWithFormatAndTags(name, value, format, tags)); }
	void AddRectArray(hstring_ref name, const szarray<Rect>& value) { hrcheck(X::get()->_AddRectArray(name, value.size, to_abi(value.p))); }
	void AddRectArray(hstring_ref name, const szarray<Rect>& value, LoggingFieldFormat format) { hrcheck(X::get()->_AddRectArrayWithFormat(name, value.size, to_abi(value.p), format)); }
	void AddRectArray(hstring_ref name, const szarray<Rect>& value, LoggingFieldFormat format, int tags) { hrcheck(X::get()->_AddRectArrayWithFormatAndTags(name, value.size, to_abi(value.p), format, tags)); }
};
template<typename X> struct adapt<ILoggingFields, X> : Windows::Foundation::Diagnostics::ILoggingFields_adaptor<X> { typedef adapt ILoggingFields; };
struct ILoggingFields : ILoggingFields_raw, generate<ILoggingFields> {};

// LoggingFields
template<typename X> struct statics<LoggingFields, X> : X {
	typedef typename X::root_type LoggingFields;
};
struct LoggingFields : generate<LoggingFields> {
	using ILoggingFields::AddGuidArray;
	using ILoggingFields::AddString;
	using ILoggingFields::AddTimeSpanArray;
	using ILoggingFields::AddPoint;
	using ILoggingFields::AddRectArray;
	using ILoggingFields::AddDoubleArray;
	using ILoggingFields::AddSize;
	using ILoggingFields::AddEmpty;
	using ILoggingFields::AddUInt16Array;
	using ILoggingFields::AddSingle;
	using ILoggingFields::AddInt64;
	using ILoggingFields::AddChar16Array;
	using ILoggingFields::AddGuid;
	using ILoggingFields::AddSingleArray;
	using ILoggingFields::AddInt32Array;
	using ILoggingFields::AddTimeSpan;
	using ILoggingFields::AddStringArray;
	using ILoggingFields::AddUInt64Array;
	using ILoggingFields::AddDouble;
	using ILoggingFields::AddInt16;
	using ILoggingFields::BeginStruct;
	using ILoggingFields::AddUInt16;
	using ILoggingFields::AddUInt64;
	using ILoggingFields::AddSizeArray;
	using ILoggingFields::AddChar16;
	using ILoggingFields::AddUInt32Array;
	using ILoggingFields::AddInt16Array;
	using ILoggingFields::AddBooleanArray;
	using ILoggingFields::AddUInt8Array;
	using ILoggingFields::AddUInt8;
	using ILoggingFields::AddInt32;
	using ILoggingFields::AddDateTime;
	using ILoggingFields::AddInt64Array;
	using ILoggingFields::AddBoolean;
	using ILoggingFields::AddRect;
	using ILoggingFields::AddPointArray;
	using ILoggingFields::AddDateTimeArray;
	using ILoggingFields::AddUInt32;
};

// ILoggingTarget
struct ILoggingTarget_raw : IInspectable {
	virtual STDMETHODIMP _IsEnabled(bool *result) = 0;
	virtual STDMETHODIMP _IsEnabledWithLevel(LoggingLevel level, bool *result) = 0;
	virtual STDMETHODIMP _IsEnabledWithLevelAndKeywords(LoggingLevel level, __int64 keywords, bool *result) = 0;
	virtual STDMETHODIMP _LogEvent(HSTRING eventName) = 0;
	virtual STDMETHODIMP _LogEventWithFields(HSTRING eventName, LoggingFields* fields) = 0;
	virtual STDMETHODIMP _LogEventWithFieldsAndLevel(HSTRING eventName, LoggingFields* fields, LoggingLevel level) = 0;
	virtual STDMETHODIMP _LogEventWithFieldsAndOptions(HSTRING eventName, LoggingFields* fields, LoggingLevel level, LoggingOptions* options) = 0;
	virtual STDMETHODIMP _StartActivity(HSTRING startEventName, LoggingActivity* *result) = 0;
	virtual STDMETHODIMP _StartActivityWithFields(HSTRING startEventName, LoggingFields* fields, LoggingActivity* *result) = 0;
	virtual STDMETHODIMP _StartActivityWithFieldsAndLevel(HSTRING startEventName, LoggingFields* fields, LoggingLevel level, LoggingActivity* *result) = 0;
	virtual STDMETHODIMP _StartActivityWithFieldsAndOptions(HSTRING startEventName, LoggingFields* fields, LoggingLevel level, LoggingOptions* options, LoggingActivity* *result) = 0;
};
template<typename X> struct ILoggingTarget_adaptor : X {
	bool IsEnabled() { bool result; hrcheck(X::get()->_IsEnabled(&result)); return result; }
	bool IsEnabled(LoggingLevel level) { bool result; hrcheck(X::get()->_IsEnabledWithLevel(level, &result)); return result; }
	bool IsEnabled(LoggingLevel level, __int64 keywords) { bool result; hrcheck(X::get()->_IsEnabledWithLevelAndKeywords(level, keywords, &result)); return result; }
	void LogEvent(hstring_ref eventName) { hrcheck(X::get()->_LogEvent(eventName)); }
	void LogEvent(hstring_ref eventName, pptr<LoggingFields> fields) { hrcheck(X::get()->_LogEventWithFields(eventName, fields)); }
	void LogEvent(hstring_ref eventName, pptr<LoggingFields> fields, LoggingLevel level) { hrcheck(X::get()->_LogEventWithFieldsAndLevel(eventName, fields, level)); }
	void LogEvent(hstring_ref eventName, pptr<LoggingFields> fields, LoggingLevel level, pptr<LoggingOptions> options) { hrcheck(X::get()->_LogEventWithFieldsAndOptions(eventName, fields, level, options)); }
	ptr<LoggingActivity> StartActivity(hstring_ref startEventName) { LoggingActivity* result; hrcheck(X::get()->_StartActivity(startEventName, &result)); return from_abi(result); }
	ptr<LoggingActivity> StartActivity(hstring_ref startEventName, pptr<LoggingFields> fields) { LoggingActivity* result; hrcheck(X::get()->_StartActivityWithFields(startEventName, fields, &result)); return from_abi(result); }
	ptr<LoggingActivity> StartActivity(hstring_ref startEventName, pptr<LoggingFields> fields, LoggingLevel level) { LoggingActivity* result; hrcheck(X::get()->_StartActivityWithFieldsAndLevel(startEventName, fields, level, &result)); return from_abi(result); }
	ptr<LoggingActivity> StartActivity(hstring_ref startEventName, pptr<LoggingFields> fields, LoggingLevel level, pptr<LoggingOptions> options) { LoggingActivity* result; hrcheck(X::get()->_StartActivityWithFieldsAndOptions(startEventName, fields, level, options, &result)); return from_abi(result); }
};
template<typename X> struct adapt<ILoggingTarget, X> : Windows::Foundation::Diagnostics::ILoggingTarget_adaptor<X> { typedef adapt ILoggingTarget; };
template<typename X> struct ILoggingTarget_unadaptor : X {
	STDMETHODIMP _IsEnabled(bool *result) { return hrtry([&, this] { *result = X::get()->IsEnabled(); }); }
	STDMETHODIMP _IsEnabledWithLevel(LoggingLevel level, bool *result) { return hrtry([&, this] { *result = X::get()->IsEnabled(level); }); }
	STDMETHODIMP _IsEnabledWithLevelAndKeywords(LoggingLevel level, __int64 keywords, bool *result) { return hrtry([&, this] { *result = X::get()->IsEnabled(level, keywords); }); }
	STDMETHODIMP _LogEvent(HSTRING eventName) { return hrtry([&, this] { X::get()->LogEvent(eventName); }); }
	STDMETHODIMP _LogEventWithFields(HSTRING eventName, LoggingFields* fields) { return hrtry([&, this] { X::get()->LogEvent(eventName, fields); }); }
	STDMETHODIMP _LogEventWithFieldsAndLevel(HSTRING eventName, LoggingFields* fields, LoggingLevel level) { return hrtry([&, this] { X::get()->LogEvent(eventName, fields, level); }); }
	STDMETHODIMP _LogEventWithFieldsAndOptions(HSTRING eventName, LoggingFields* fields, LoggingLevel level, LoggingOptions* options) { return hrtry([&, this] { X::get()->LogEvent(eventName, fields, level, options); }); }
	STDMETHODIMP _StartActivity(HSTRING startEventName, LoggingActivity* *result) { return hrtry([&, this] { *result = to_abi(X::get()->StartActivity(startEventName)); }); }
	STDMETHODIMP _StartActivityWithFields(HSTRING startEventName, LoggingFields* fields, LoggingActivity* *result) { return hrtry([&, this] { *result = to_abi(X::get()->StartActivity(startEventName, fields)); }); }
	STDMETHODIMP _StartActivityWithFieldsAndLevel(HSTRING startEventName, LoggingFields* fields, LoggingLevel level, LoggingActivity* *result) { return hrtry([&, this] { *result = to_abi(X::get()->StartActivity(startEventName, fields, level)); }); }
	STDMETHODIMP _StartActivityWithFieldsAndOptions(HSTRING startEventName, LoggingFields* fields, LoggingLevel level, LoggingOptions* options, LoggingActivity* *result) { return hrtry([&, this] { *result = to_abi(X::get()->StartActivity(startEventName, fields, level, options)); }); }
};
template<typename X> struct unadapt<ILoggingTarget, X> : Windows::Foundation::Diagnostics::ILoggingTarget_unadaptor<X> {};
struct ILoggingTarget : ILoggingTarget_raw, generate<ILoggingTarget> {};

// ILoggingActivityFactory
struct ILoggingActivityFactory : IInspectable {
	virtual STDMETHODIMP _CreateLoggingActivity(HSTRING activityName, ILoggingChannel* loggingChannel, LoggingActivity* *loggingActivity);
	virtual STDMETHODIMP _CreateLoggingActivityWithLevel(HSTRING activityName, ILoggingChannel* loggingChannel, LoggingLevel level, LoggingActivity* *loggingActivity);
};

// ILoggingActivity
struct ILoggingActivity_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value);
	virtual STDMETHODIMP _get_Id(Platform::Guid *value);
};
template<typename X> struct ILoggingActivity_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ILoggingActivity_adaptor::Id)->_get_Id(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} Id;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILoggingActivity_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	ILoggingActivity_adaptor() {}
};
template<typename X> struct adapt<ILoggingActivity, X> : Windows::Foundation::Diagnostics::ILoggingActivity_adaptor<X> { typedef adapt ILoggingActivity; };
struct ILoggingActivity : ILoggingActivity_raw, generate<ILoggingActivity> {};

// ILoggingActivity2
struct ILoggingActivity2_raw : IInspectable {
	virtual STDMETHODIMP _get_Channel(LoggingChannel* *value);
	virtual STDMETHODIMP _StopActivity(HSTRING stopEventName);
	virtual STDMETHODIMP _StopActivityWithFields(HSTRING stopEventName, LoggingFields* fields);
	virtual STDMETHODIMP _StopActivityWithFieldsAndOptions(HSTRING stopEventName, LoggingFields* fields, LoggingOptions* options);
};
template<typename X> struct ILoggingActivity2_adaptor : X {
	union {
		struct : property {
			ptr<LoggingChannel> get() { LoggingChannel* value; hrcheck(enc(&ILoggingActivity2_adaptor::Channel)->_get_Channel(&value)); return from_abi(value); }
			ptr<LoggingChannel> operator()() { return get(); }
			operator ptr<LoggingChannel> () { return get(); }
			ptr<LoggingChannel> operator->() { return get(); }
		} Channel;
	};
	void StopActivity(hstring_ref stopEventName) { hrcheck(X::get()->_StopActivity(stopEventName)); }
	void StopActivity(hstring_ref stopEventName, pptr<LoggingFields> fields) { hrcheck(X::get()->_StopActivityWithFields(stopEventName, fields)); }
	void StopActivity(hstring_ref stopEventName, pptr<LoggingFields> fields, pptr<LoggingOptions> options) { hrcheck(X::get()->_StopActivityWithFieldsAndOptions(stopEventName, fields, options)); }
	ILoggingActivity2_adaptor() {}
};
template<typename X> struct adapt<ILoggingActivity2, X> : Windows::Foundation::Diagnostics::ILoggingActivity2_adaptor<X> { typedef adapt ILoggingActivity2; };
struct ILoggingActivity2 : ILoggingActivity2_raw, generate<ILoggingActivity2> {};

// LoggingActivity
template<typename> struct LoggingActivity_statics {
	static LoggingActivity *activate(hstring_ref activityName, pptr<ILoggingChannel> loggingChannel) { LoggingActivity *loggingActivity; hrcheck(get_activation_factory<LoggingActivity, ILoggingActivityFactory>()->_CreateLoggingActivity(activityName, loggingChannel, &loggingActivity)); return loggingActivity; }
	static LoggingActivity *activate(hstring_ref activityName, pptr<ILoggingChannel> loggingChannel, LoggingLevel level) { LoggingActivity *loggingActivity; hrcheck(get_activation_factory<LoggingActivity, ILoggingActivityFactory>()->_CreateLoggingActivityWithLevel(activityName, loggingChannel, level, &loggingActivity)); return loggingActivity; }
};

template<typename X> struct statics<LoggingActivity, X> : X, Windows::Foundation::Diagnostics::LoggingActivity_statics<void> {
	using Windows::Foundation::Diagnostics::LoggingActivity_statics<void>::activate;
	typedef typename X::root_type LoggingActivity;
};
struct LoggingActivity : generate<LoggingActivity> {
	using ILoggingTarget::IsEnabled;
	using ILoggingActivity2::StopActivity;
	using ILoggingTarget::StartActivity;
	using ILoggingTarget::LogEvent;
};

// ILoggingChannel
struct ILoggingChannel_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_Enabled(bool *value) = 0;
	virtual STDMETHODIMP _get_Level(LoggingLevel *value) = 0;
	virtual STDMETHODIMP _LogMessage(HSTRING eventString) = 0;
	virtual STDMETHODIMP _LogMessageWithLevel(HSTRING eventString, LoggingLevel level) = 0;
	virtual STDMETHODIMP _LogValuePair(HSTRING value1, int value2) = 0;
	virtual STDMETHODIMP _LogValuePairWithLevel(HSTRING value1, int value2, LoggingLevel level) = 0;
	virtual STDMETHODIMP _add_LoggingEnabled(TypedEventHandler<ILoggingChannel*, IInspectable*>* handler, EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_LoggingEnabled(EventRegistrationToken token) = 0;
};
template<typename X> struct ILoggingChannel_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILoggingChannel_adaptor::Enabled)->_get_Enabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Enabled;
		struct : property {
			LoggingLevel get() { LoggingLevel value; hrcheck(enc(&ILoggingChannel_adaptor::Level)->_get_Level(&value)); return value; }
			LoggingLevel operator()() { return get(); }
			operator LoggingLevel () { return get(); }
		} Level;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILoggingChannel_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			EventRegistrationToken operator+=(handler_ref<TypedEventHandler<ptr<ILoggingChannel>, object>> handler) { EventRegistrationToken token; hrcheck(enc(&ILoggingChannel_adaptor::LoggingEnabled)->_add_LoggingEnabled(to_abi(handler), &token)); return token; }
			void operator-=(const EventRegistrationToken& token) { hrcheck(enc(&ILoggingChannel_adaptor::LoggingEnabled)->_remove_LoggingEnabled(token)); }
		} LoggingEnabled;
	};
	void LogMessage(hstring_ref eventString) { hrcheck(X::get()->_LogMessage(eventString)); }
	void LogMessage(hstring_ref eventString, LoggingLevel level) { hrcheck(X::get()->_LogMessageWithLevel(eventString, level)); }
	void LogValuePair(hstring_ref value1, int value2) { hrcheck(X::get()->_LogValuePair(value1, value2)); }
	void LogValuePair(hstring_ref value1, int value2, LoggingLevel level) { hrcheck(X::get()->_LogValuePairWithLevel(value1, value2, level)); }
	ILoggingChannel_adaptor() {}
};
template<typename X> struct adapt<ILoggingChannel, X> : Windows::Foundation::Diagnostics::ILoggingChannel_adaptor<X> { typedef adapt ILoggingChannel; };
template<typename X> struct ILoggingChannel_unadaptor : X {
	STDMETHODIMP _get_Name(HSTRING *value) { return hrtry([&, this] { get_prop(value, Name); }); }
	STDMETHODIMP _get_Enabled(bool *value) { return hrtry([&, this] { get_prop(value, Enabled); }); }
	STDMETHODIMP _get_Level(LoggingLevel *value) { return hrtry([&, this] { get_prop(value, Level); }); }
	STDMETHODIMP _LogMessage(HSTRING eventString) { return hrtry([&, this] { X::get()->LogMessage(eventString); }); }
	STDMETHODIMP _LogMessageWithLevel(HSTRING eventString, LoggingLevel level) { return hrtry([&, this] { X::get()->LogMessage(eventString, level); }); }
	STDMETHODIMP _LogValuePair(HSTRING value1, int value2) { return hrtry([&, this] { X::get()->LogValuePair(value1, value2); }); }
	STDMETHODIMP _LogValuePairWithLevel(HSTRING value1, int value2, LoggingLevel level) { return hrtry([&, this] { X::get()->LogValuePair(value1, value2, level); }); }
	STDMETHODIMP _add_LoggingEnabled(TypedEventHandler<ILoggingChannel*, IInspectable*>* handler, EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->LoggingEnabled+=handler; }); }
	STDMETHODIMP _remove_LoggingEnabled(EventRegistrationToken token) { return hrtry([&, this] { X::get()->LoggingEnabled-=token; }); }
};
template<typename X> struct unadapt<ILoggingChannel, X> : Windows::Foundation::Diagnostics::ILoggingChannel_unadaptor<X> {};
struct ILoggingChannel : ILoggingChannel_raw, generate<ILoggingChannel> {};

// ILoggingChannel2
struct ILoggingChannel2_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(Platform::Guid *value);
};
template<typename X> struct ILoggingChannel2_adaptor : X {
	union {
		struct : property {
			Platform::Guid get() { Platform::Guid value; hrcheck(enc(&ILoggingChannel2_adaptor::Id)->_get_Id(&value)); return value; }
			Platform::Guid operator()() { return get(); }
			operator Platform::Guid () { return get(); }
		} Id;
	};
	ILoggingChannel2_adaptor() {}
};
template<typename X> struct adapt<ILoggingChannel2, X> : Windows::Foundation::Diagnostics::ILoggingChannel2_adaptor<X> { typedef adapt ILoggingChannel2; };
struct ILoggingChannel2 : ILoggingChannel2_raw, generate<ILoggingChannel2> {};

// ILoggingChannelFactory
struct ILoggingChannelFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING name, LoggingChannel* *result);
};

// ILoggingChannelFactory2
struct ILoggingChannelFactory2 : IInspectable {
	virtual STDMETHODIMP _CreateWithOptions(HSTRING name, LoggingChannelOptions* options, LoggingChannel* *result);
	virtual STDMETHODIMP _CreateWithOptionsAndId(HSTRING name, LoggingChannelOptions* options, Platform::Guid id, LoggingChannel* *result);
};

// LoggingChannel
template<typename> struct LoggingChannel_statics {
	static LoggingChannel *activate(hstring_ref name) { LoggingChannel *result; hrcheck(get_activation_factory<LoggingChannel, ILoggingChannelFactory>()->_Create(name, &result)); return result; }
	static LoggingChannel *activate(hstring_ref name, pptr<LoggingChannelOptions> options) { LoggingChannel *result; hrcheck(get_activation_factory<LoggingChannel, ILoggingChannelFactory2>()->_CreateWithOptions(name, options, &result)); return result; }
	static LoggingChannel *activate(hstring_ref name, pptr<LoggingChannelOptions> options, const Platform::Guid& id) { LoggingChannel *result; hrcheck(get_activation_factory<LoggingChannel, ILoggingChannelFactory2>()->_CreateWithOptionsAndId(name, options, id, &result)); return result; }
};

template<typename X> struct statics<LoggingChannel, X> : X, Windows::Foundation::Diagnostics::LoggingChannel_statics<void> {
	using Windows::Foundation::Diagnostics::LoggingChannel_statics<void>::activate;
	typedef typename X::root_type LoggingChannel;
};
struct LoggingChannel : generate<LoggingChannel> {
	using ILoggingTarget::IsEnabled;
	using ILoggingTarget::StartActivity;
	using ILoggingChannel::LogValuePair;
	using ILoggingChannel::LogMessage;
	using ILoggingTarget::LogEvent;
};

// ILoggingSession
struct ILoggingSession_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value) = 0;
	virtual STDMETHODIMP _SaveToFileAsync(Storage::IStorageFolder* folder, HSTRING fileName, IAsyncOperation<Storage::StorageFile*>* *operation) = 0;
	virtual STDMETHODIMP _AddLoggingChannel(ILoggingChannel* loggingChannel) = 0;
	virtual STDMETHODIMP _AddLoggingChannelWithLevel(ILoggingChannel* loggingChannel, LoggingLevel maxLevel) = 0;
	virtual STDMETHODIMP _RemoveLoggingChannel(ILoggingChannel* loggingChannel) = 0;
};
template<typename X> struct ILoggingSession_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILoggingSession_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
	};
	ptr<IAsyncOperation<ptr<Storage::StorageFile>>> SaveToFileAsync(pptr<Storage::IStorageFolder> folder, hstring_ref fileName) { IAsyncOperation<Storage::StorageFile*>* operation; hrcheck(X::get()->_SaveToFileAsync(folder, fileName, &operation)); return from_abi(operation); }
	void AddLoggingChannel(pptr<ILoggingChannel> loggingChannel) { hrcheck(X::get()->_AddLoggingChannel(loggingChannel)); }
	void AddLoggingChannel(pptr<ILoggingChannel> loggingChannel, LoggingLevel maxLevel) { hrcheck(X::get()->_AddLoggingChannelWithLevel(loggingChannel, maxLevel)); }
	void RemoveLoggingChannel(pptr<ILoggingChannel> loggingChannel) { hrcheck(X::get()->_RemoveLoggingChannel(loggingChannel)); }
	ILoggingSession_adaptor() {}
};
template<typename X> struct adapt<ILoggingSession, X> : Windows::Foundation::Diagnostics::ILoggingSession_adaptor<X> { typedef adapt ILoggingSession; };
template<typename X> struct ILoggingSession_unadaptor : X {
	STDMETHODIMP _get_Name(HSTRING *value) { return hrtry([&, this] { get_prop(value, Name); }); }
	STDMETHODIMP _SaveToFileAsync(Storage::IStorageFolder* folder, HSTRING fileName, IAsyncOperation<Storage::StorageFile*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->SaveToFileAsync(folder, fileName)); }); }
	STDMETHODIMP _AddLoggingChannel(ILoggingChannel* loggingChannel) { return hrtry([&, this] { X::get()->AddLoggingChannel(loggingChannel); }); }
	STDMETHODIMP _AddLoggingChannelWithLevel(ILoggingChannel* loggingChannel, LoggingLevel maxLevel) { return hrtry([&, this] { X::get()->AddLoggingChannel(loggingChannel, maxLevel); }); }
	STDMETHODIMP _RemoveLoggingChannel(ILoggingChannel* loggingChannel) { return hrtry([&, this] { X::get()->RemoveLoggingChannel(loggingChannel); }); }
};
template<typename X> struct unadapt<ILoggingSession, X> : Windows::Foundation::Diagnostics::ILoggingSession_unadaptor<X> {};
struct ILoggingSession : ILoggingSession_raw, generate<ILoggingSession> {};

// ILoggingSessionFactory
struct ILoggingSessionFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING name, LoggingSession* *result);
};

// LoggingSession
template<typename> struct LoggingSession_statics {
	static LoggingSession *activate(hstring_ref name) { LoggingSession *result; hrcheck(get_activation_factory<LoggingSession, ILoggingSessionFactory>()->_Create(name, &result)); return result; }
};

template<typename X> struct statics<LoggingSession, X> : X, Windows::Foundation::Diagnostics::LoggingSession_statics<void> {
	using Windows::Foundation::Diagnostics::LoggingSession_statics<void>::activate;
	typedef typename X::root_type LoggingSession;
};
struct LoggingSession : generate<LoggingSession> {
	using ILoggingSession::AddLoggingChannel;
};

// ILogFileGeneratedEventArgs
struct ILogFileGeneratedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_File(Storage::StorageFile* *value);
};
template<typename X> struct ILogFileGeneratedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::StorageFile> get() { Storage::StorageFile* value; hrcheck(enc(&ILogFileGeneratedEventArgs_adaptor::File)->_get_File(&value)); return from_abi(value); }
			ptr<Storage::StorageFile> operator()() { return get(); }
			operator ptr<Storage::StorageFile> () { return get(); }
			ptr<Storage::StorageFile> operator->() { return get(); }
		} File;
	};
	ILogFileGeneratedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILogFileGeneratedEventArgs, X> : Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs_adaptor<X> { typedef adapt ILogFileGeneratedEventArgs; };
struct ILogFileGeneratedEventArgs : ILogFileGeneratedEventArgs_raw, generate<ILogFileGeneratedEventArgs> {};

// LogFileGeneratedEventArgs
template<typename X> struct statics<LogFileGeneratedEventArgs, X> : X {
	typedef typename X::root_type LogFileGeneratedEventArgs;
};
struct LogFileGeneratedEventArgs : generate<LogFileGeneratedEventArgs> {};

// IFileLoggingSession
struct IFileLoggingSession_raw : IInspectable {
	virtual STDMETHODIMP _get_Name(HSTRING *value) = 0;
	virtual STDMETHODIMP _AddLoggingChannel(ILoggingChannel* loggingChannel) = 0;
	virtual STDMETHODIMP _AddLoggingChannelWithLevel(ILoggingChannel* loggingChannel, LoggingLevel maxLevel) = 0;
	virtual STDMETHODIMP _RemoveLoggingChannel(ILoggingChannel* loggingChannel) = 0;
	virtual STDMETHODIMP _CloseAndSaveToFileAsync(IAsyncOperation<Storage::StorageFile*>* *operation) = 0;
	virtual STDMETHODIMP _add_LogFileGenerated(TypedEventHandler<IFileLoggingSession*, LogFileGeneratedEventArgs*>* handler, EventRegistrationToken *token) = 0;
	virtual STDMETHODIMP _remove_LogFileGenerated(EventRegistrationToken token) = 0;
};
template<typename X> struct IFileLoggingSession_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IFileLoggingSession_adaptor::Name)->_get_Name(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Name;
		struct : property {
			EventRegistrationToken operator+=(handler_ref<TypedEventHandler<ptr<IFileLoggingSession>, ptr<LogFileGeneratedEventArgs>>> handler) { EventRegistrationToken token; hrcheck(enc(&IFileLoggingSession_adaptor::LogFileGenerated)->_add_LogFileGenerated(to_abi(handler), &token)); return token; }
			void operator-=(const EventRegistrationToken& token) { hrcheck(enc(&IFileLoggingSession_adaptor::LogFileGenerated)->_remove_LogFileGenerated(token)); }
		} LogFileGenerated;
	};
	void AddLoggingChannel(pptr<ILoggingChannel> loggingChannel) { hrcheck(X::get()->_AddLoggingChannel(loggingChannel)); }
	void AddLoggingChannel(pptr<ILoggingChannel> loggingChannel, LoggingLevel maxLevel) { hrcheck(X::get()->_AddLoggingChannelWithLevel(loggingChannel, maxLevel)); }
	void RemoveLoggingChannel(pptr<ILoggingChannel> loggingChannel) { hrcheck(X::get()->_RemoveLoggingChannel(loggingChannel)); }
	ptr<IAsyncOperation<ptr<Storage::StorageFile>>> CloseAndSaveToFileAsync() { IAsyncOperation<Storage::StorageFile*>* operation; hrcheck(X::get()->_CloseAndSaveToFileAsync(&operation)); return from_abi(operation); }
	IFileLoggingSession_adaptor() {}
};
template<typename X> struct adapt<IFileLoggingSession, X> : Windows::Foundation::Diagnostics::IFileLoggingSession_adaptor<X> { typedef adapt IFileLoggingSession; };
template<typename X> struct IFileLoggingSession_unadaptor : X {
	STDMETHODIMP _get_Name(HSTRING *value) { return hrtry([&, this] { get_prop(value, Name); }); }
	STDMETHODIMP _AddLoggingChannel(ILoggingChannel* loggingChannel) { return hrtry([&, this] { X::get()->AddLoggingChannel(loggingChannel); }); }
	STDMETHODIMP _AddLoggingChannelWithLevel(ILoggingChannel* loggingChannel, LoggingLevel maxLevel) { return hrtry([&, this] { X::get()->AddLoggingChannel(loggingChannel, maxLevel); }); }
	STDMETHODIMP _RemoveLoggingChannel(ILoggingChannel* loggingChannel) { return hrtry([&, this] { X::get()->RemoveLoggingChannel(loggingChannel); }); }
	STDMETHODIMP _CloseAndSaveToFileAsync(IAsyncOperation<Storage::StorageFile*>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->CloseAndSaveToFileAsync()); }); }
	STDMETHODIMP _add_LogFileGenerated(TypedEventHandler<IFileLoggingSession*, LogFileGeneratedEventArgs*>* handler, EventRegistrationToken *token) { return hrtry([&, this] { *token = X::get()->LogFileGenerated+=handler; }); }
	STDMETHODIMP _remove_LogFileGenerated(EventRegistrationToken token) { return hrtry([&, this] { X::get()->LogFileGenerated-=token; }); }
};
template<typename X> struct unadapt<IFileLoggingSession, X> : Windows::Foundation::Diagnostics::IFileLoggingSession_unadaptor<X> {};
struct IFileLoggingSession : IFileLoggingSession_raw, generate<IFileLoggingSession> {};

// IFileLoggingSessionFactory
struct IFileLoggingSessionFactory : IInspectable {
	virtual STDMETHODIMP _Create(HSTRING name, FileLoggingSession* *result);
};

// FileLoggingSession
template<typename> struct FileLoggingSession_statics {
	static FileLoggingSession *activate(hstring_ref name) { FileLoggingSession *result; hrcheck(get_activation_factory<FileLoggingSession, IFileLoggingSessionFactory>()->_Create(name, &result)); return result; }
};

template<typename X> struct statics<FileLoggingSession, X> : X, Windows::Foundation::Diagnostics::FileLoggingSession_statics<void> {
	using Windows::Foundation::Diagnostics::FileLoggingSession_statics<void>::activate;
	typedef typename X::root_type FileLoggingSession;
};
struct FileLoggingSession : generate<FileLoggingSession> {
	using IFileLoggingSession::AddLoggingChannel;
};
}}}
} // namespace iso_winrt
