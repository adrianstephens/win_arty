#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.PointOfService

#include "Windows.Devices.PointOfService.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IIterable;
template<typename T> struct IVectorView;
template<typename K, typename V> struct IKeyValuePair;
template<typename K, typename V> struct IMapView;
}}
namespace Graphics { namespace Imaging {
struct BitmapFrame;
}}
namespace Storage { namespace Streams {
struct IBuffer;
struct IRandomAccessStreamWithContentType;
}
struct StorageFile;
}}

// defs

template<> struct def<Windows::Devices::PointOfService::UnifiedPosErrorSeverity> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::UnifiedPosPowerReportingType> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::UnifiedPosErrorReason> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationLevel> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterMapMode> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterCartridgeSensors> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterColorCapabilities> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterColorCartridge> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterMarkFeedCapabilities> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterRuledLineCapabilities> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterPrintSide> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterLineDirection> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterLineStyle> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterMarkFeedKind> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterAlignment> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterBarcodeTextPosition> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterRotation> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterStatusKind> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerStatusKind> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScannerStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayPowerStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayHorizontalAlignment> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayVerticalAlignment> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayScrollDirection> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayTextAttribute> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayCursorType> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayMarqueeFormat> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayDescriptorState> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayTextAttributeGranularity> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::PosConnectionTypes> : enum_type<unsigned> {};
template<> struct def<Windows::Devices::PointOfService::IUnifiedPosErrorData> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IUnifiedPosErrorDataFactory> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::UnifiedPosErrorData> : class_type<Platform::Object, Windows::Devices::PointOfService::IUnifiedPosErrorData>, custom_activators {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeSymbologiesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeSymbologiesStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeSymbologies> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeSymbologyDecodeLengthKind> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeSymbologyAttributes> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeSymbologyAttributes> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeSymbologyAttributes> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerReportFactory> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerReport> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScannerReport> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeScannerReport>, custom_activators {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerCapabilities> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerCapabilities1> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScannerCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeScannerCapabilities, Windows::Devices::PointOfService::IBarcodeScannerCapabilities1> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScannerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScanner2> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IBarcodeScanner> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::BarcodeScanner> : class_type<Platform::Object, Windows::Devices::PointOfService::IBarcodeScanner, Windows::Devices::PointOfService::IBarcodeScanner2, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedBarcodeScanner3> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedBarcodeScanner2> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedBarcodeScanner1> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedBarcodeScanner> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedBarcodeScanner> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedBarcodeScanner, Windows::Devices::PointOfService::IClaimedBarcodeScanner3, Windows::Devices::PointOfService::IClaimedBarcodeScanner1, Windows::Devices::PointOfService::IClaimedBarcodeScanner2> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderStatus> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationProtocol> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderTrackIds> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType> : enum_type<int> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderEncryptionAlgorithmsStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderEncryptionAlgorithms> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderCardTypesStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderCardTypes> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderTrackData> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderReport> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderTrackData> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderTrackData> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderReport> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderReport> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReaderCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedMagneticStripeReader> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedMagneticStripeReader> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReaderStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IMagneticStripeReader> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::MagneticStripeReader> : class_type<Platform::Object, Windows::Devices::PointOfService::IMagneticStripeReader, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterCharacterSetIdsStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterCharacterSetIds> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Devices::PointOfService::ICommonPosPrintStationCapabilities> : overridable_type<> {};
template<> struct def<Windows::Devices::PointOfService::ICommonReceiptSlipCapabilities> : overridable_type<Windows::Devices::PointOfService::ICommonPosPrintStationCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::IReceiptPrinterCapabilities> : interface_type<Windows::Devices::PointOfService::ICommonReceiptSlipCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::ReceiptPrinterCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::IReceiptPrinterCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::ISlipPrinterCapabilities> : interface_type<Windows::Devices::PointOfService::ICommonReceiptSlipCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::SlipPrinterCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::ISlipPrinterCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::IJournalPrinterCapabilities> : interface_type<Windows::Devices::PointOfService::ICommonPosPrintStationCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::JournalPrinterCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::IJournalPrinterCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterCapabilities> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::IPosPrinterCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterStatus> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterStatus> : class_type<Platform::Object, Windows::Devices::PointOfService::IPosPrinterStatus> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterStatusUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterStatusUpdatedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IPosPrinterStatusUpdatedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterReleaseDeviceRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinterReleaseDeviceRequestedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::IPosPrinterReleaseDeviceRequestedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinter> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::PosPrinter> : class_type<Platform::Object, Windows::Devices::PointOfService::IPosPrinter, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedPosPrinter> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedPosPrinter> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedPosPrinter> {};
template<> struct def<Windows::Devices::PointOfService::IPosPrinterJob> : overridable_type<> {};
template<> struct def<Windows::Devices::PointOfService::IReceiptOrSlipJob> : overridable_type<Windows::Devices::PointOfService::IPosPrinterJob> {};
template<> struct def<Windows::Devices::PointOfService::IReceiptPrintJob> : interface_type<Windows::Devices::PointOfService::IReceiptOrSlipJob> {};
template<> struct def<Windows::Devices::PointOfService::ReceiptPrintJob> : class_type<Platform::Object, Windows::Devices::PointOfService::IReceiptPrintJob> {};
template<> struct def<Windows::Devices::PointOfService::SlipPrintJob> : class_type<Platform::Object, Windows::Devices::PointOfService::IReceiptOrSlipJob> {};
template<> struct def<Windows::Devices::PointOfService::JournalPrintJob> : class_type<Platform::Object, Windows::Devices::PointOfService::IPosPrinterJob> {};
template<> struct def<Windows::Devices::PointOfService::ICommonClaimedPosPrinterStation> : overridable_type<> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedReceiptPrinter> : interface_type<Windows::Devices::PointOfService::ICommonClaimedPosPrinterStation> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedReceiptPrinter> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedReceiptPrinter> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedSlipPrinter> : interface_type<Windows::Devices::PointOfService::ICommonClaimedPosPrinterStation> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedSlipPrinter> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedSlipPrinter> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedJournalPrinter> : interface_type<Windows::Devices::PointOfService::ICommonClaimedPosPrinterStation> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedJournalPrinter> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedJournalPrinter> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerStatusUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerStatus> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerStatus> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawerStatus> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerStatusUpdatedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawerStatusUpdatedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerCapabilities> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawerCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerEventSourceEventArgs> : overridable_type<> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawer> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawer> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawer, Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerClosedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawerEventSourceEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerOpenedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawerEventSourceEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerEventSource> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerEventSource> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawerEventSource> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedCashDrawer> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedCashDrawer> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedCashDrawer> {};
template<> struct def<Windows::Devices::PointOfService::ICashDrawerCloseAlarm> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::CashDrawerCloseAlarm> : class_type<Platform::Object, Windows::Devices::PointOfService::ICashDrawerCloseAlarm> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayStatics2> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplay2> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplay> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplay> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplay, Windows::Devices::PointOfService::ILineDisplay2> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayStatisticsCategorySelector> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayStatisticsCategorySelector> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayStatisticsCategorySelector> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedLineDisplayStatics> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedLineDisplay2> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::IClaimedLineDisplay> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::ClaimedLineDisplay> : class_type<Platform::Object, Windows::Devices::PointOfService::IClaimedLineDisplay, Windows::Devices::PointOfService::IClaimedLineDisplay2> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayCursorAttributes> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayCursorAttributes> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayCursorAttributes> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayCursor> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayCursor> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayCursor> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayMarquee> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayMarquee> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayMarquee> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayStoredBitmap> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayStoredBitmap> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayStoredBitmap> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayWindow> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayWindow2> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayWindow> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayWindow, Windows::Devices::PointOfService::ILineDisplayWindow2> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayCustomGlyphs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayCustomGlyphs> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayCustomGlyphs> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayStatusUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayStatusUpdatedEventArgs> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayStatusUpdatedEventArgs> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayCapabilities> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayCapabilities> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayCapabilities> {};
template<> struct def<Windows::Devices::PointOfService::ILineDisplayAttributes> : interface_type<> {};
template<> struct def<Windows::Devices::PointOfService::LineDisplayAttributes> : class_type<Platform::Object, Windows::Devices::PointOfService::ILineDisplayAttributes> {};

// uuids

template<> struct uuid<Windows::Devices::PointOfService::IUnifiedPosErrorData> { define_guid(0x2B998C3A, 0x555C, 0x4889, 0x8E, 0xD8, 0xC5, 0x99, 0xBB, 0x3A, 0x71, 0x2A);};
template<> struct uuid<Windows::Devices::PointOfService::IUnifiedPosErrorDataFactory> { define_guid(0x4B982551, 0x1FFE, 0x451B, 0xA3, 0x68, 0x63, 0xE0, 0xCE, 0x46, 0x5F, 0x5A);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs> { define_guid(0x355D8586, 0x9C43, 0x462B, 0xA9, 0x1A, 0x81, 0x6D, 0xC9, 0x7F, 0x45, 0x2C);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeSymbologiesStatics> { define_guid(0xCA8549BB, 0x6D2, 0x43F4, 0xA4, 0x4B, 0xC6, 0x20, 0x67, 0x9F, 0xD8, 0xD0);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeSymbologiesStatics2> { define_guid(0x8B7518F4, 0x99D0, 0x40BF, 0x94, 0x24, 0xB9, 0x1D, 0x6D, 0xD4, 0xC6, 0xE0);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeSymbologyAttributes> { define_guid(0x66413A78, 0xAB7A, 0x4ADA, 0x8E, 0xCE, 0x93, 0x60, 0x14, 0xB2, 0xEA, 0xD7);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs> { define_guid(0x4234A7E2, 0xED97, 0x467D, 0xAD, 0x2B, 0x1, 0xE4, 0x43, 0x13, 0xA9, 0x29);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerReportFactory> { define_guid(0xA2547326, 0x2013, 0x457C, 0x89, 0x63, 0x49, 0xC1, 0x5D, 0xCA, 0x78, 0xCE);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerReport> { define_guid(0x5CE4D8B0, 0xA489, 0x4B96, 0x86, 0xC4, 0xF0, 0xBF, 0x8A, 0x37, 0x75, 0x3D);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs> { define_guid(0x2CD2602F, 0xCF3A, 0x4002, 0xA7, 0x5A, 0xC5, 0xEC, 0x46, 0x8F, 0xA, 0x20);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs> { define_guid(0xF3B7DE85, 0x6E8B, 0x434E, 0x9F, 0x58, 0x6, 0xEF, 0x26, 0xBC, 0x4B, 0xAF);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerCapabilities> { define_guid(0xC60691E4, 0xF2C8, 0x4420, 0xA3, 0x7, 0xB1, 0x2E, 0xF6, 0x62, 0x28, 0x57);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerCapabilities1> { define_guid(0x8E5AB3E9, 0xE2C, 0x472F, 0xA1, 0xCC, 0xEE, 0x80, 0x54, 0xB6, 0xA6, 0x84);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerStatics> { define_guid(0x5D115F6F, 0xDA49, 0x41E8, 0x8C, 0x8C, 0xF0, 0xCB, 0x62, 0xA9, 0xC4, 0xFC);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScannerStatics2> { define_guid(0xB8652473, 0xA36F, 0x4007, 0xB1, 0xD0, 0x27, 0x9E, 0xBE, 0x92, 0xA6, 0x56);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScanner2> { define_guid(0x89215167, 0x8CEE, 0x436D, 0x89, 0xAB, 0x8D, 0xFB, 0x43, 0xBB, 0x42, 0x86);};
template<> struct uuid<Windows::Devices::PointOfService::IBarcodeScanner> { define_guid(0xBEA33E06, 0xB264, 0x4F03, 0xA9, 0xC1, 0x45, 0xB2, 0xF, 0x1, 0x13, 0x4F);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedBarcodeScanner3> { define_guid(0xE6CEB430, 0x712E, 0x45FC, 0x8B, 0x86, 0xCD, 0x55, 0xF5, 0xAE, 0xF7, 0x9D);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedBarcodeScanner2> { define_guid(0xE3B59E8C, 0x2D8B, 0x4F70, 0x8A, 0xF3, 0x34, 0x48, 0xBE, 0xDD, 0x5F, 0xE2);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedBarcodeScanner1> { define_guid(0xF61AAD0C, 0x8551, 0x42B4, 0x99, 0x8C, 0x97, 0xC, 0x20, 0x21, 0xA, 0x22);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedBarcodeScanner> { define_guid(0x4A63B49C, 0x8FA4, 0x4332, 0xBB, 0x26, 0x94, 0x5D, 0x11, 0xD8, 0x1E, 0xF);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderEncryptionAlgorithmsStatics> { define_guid(0x53B57350, 0xC3DB, 0x4754, 0x9C, 0x0, 0x41, 0x39, 0x23, 0x74, 0xA1, 0x9);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderCardTypesStatics> { define_guid(0x528F2C5D, 0x2986, 0x474F, 0x84, 0x54, 0x7C, 0xCD, 0x5, 0x92, 0x8D, 0x5F);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderTrackData> { define_guid(0x104CF671, 0x4A9D, 0x446E, 0xAB, 0xC5, 0x20, 0x40, 0x23, 0x7, 0xBA, 0x36);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderReport> { define_guid(0x6A5B6047, 0x99B0, 0x4188, 0xBE, 0xF1, 0xED, 0xDF, 0x79, 0xF7, 0x8F, 0xE6);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs> { define_guid(0x2E958823, 0xA31A, 0x4763, 0x88, 0x2C, 0x23, 0x72, 0x5E, 0x39, 0xB0, 0x8E);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs> { define_guid(0xA4BBD51, 0xC316, 0x4910, 0x87, 0xF3, 0x7A, 0x62, 0xBA, 0x86, 0x2D, 0x31);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> { define_guid(0xAF0A5514, 0x59CC, 0x4A60, 0x99, 0xE8, 0x99, 0xA5, 0x3D, 0xAC, 0xE5, 0xAA);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs> { define_guid(0x1FEDF95D, 0x2C84, 0x41AD, 0xB7, 0x78, 0xF2, 0x35, 0x6A, 0x78, 0x9A, 0xB1);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs> { define_guid(0x9CC6BB0, 0x3262, 0x401D, 0x9E, 0x8A, 0xE8, 0xD, 0x63, 0x58, 0x90, 0x6B);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities> { define_guid(0x7128809C, 0xC440, 0x44A2, 0xA4, 0x67, 0x46, 0x91, 0x75, 0xD0, 0x28, 0x96);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedMagneticStripeReader> { define_guid(0x475CA8F3, 0x9417, 0x48BC, 0xB9, 0xD7, 0x41, 0x63, 0xA7, 0x84, 0x4C, 0x2);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderStatics> { define_guid(0xC45FAB4A, 0xEFD7, 0x4760, 0xA5, 0xCE, 0x15, 0xB0, 0xE4, 0x7E, 0x94, 0xEB);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReaderStatics2> { define_guid(0x8CADC362, 0xD667, 0x48FA, 0x86, 0xBC, 0xF5, 0xAE, 0x11, 0x89, 0x26, 0x2B);};
template<> struct uuid<Windows::Devices::PointOfService::IMagneticStripeReader> { define_guid(0x1A92B015, 0x47C3, 0x468A, 0x93, 0x33, 0xC, 0x65, 0x17, 0x57, 0x48, 0x83);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterCharacterSetIdsStatics> { define_guid(0x5C709EFF, 0x709A, 0x4FE7, 0xB2, 0x15, 0x6, 0xA7, 0x48, 0xA3, 0x8B, 0x39);};
template<> struct uuid<Windows::Devices::PointOfService::ICommonPosPrintStationCapabilities> { define_guid(0xDE5B52CA, 0xE02E, 0x40E9, 0x9E, 0x5E, 0x1B, 0x48, 0x8E, 0x6A, 0xAC, 0xFC);};
template<> struct uuid<Windows::Devices::PointOfService::ICommonReceiptSlipCapabilities> { define_guid(0x9286B8B, 0x9873, 0x4D05, 0xBF, 0xBE, 0x47, 0x27, 0xA6, 0x3, 0x8F, 0x69);};
template<> struct uuid<Windows::Devices::PointOfService::IReceiptPrinterCapabilities> { define_guid(0xB8F0B58F, 0x51A8, 0x43FC, 0x9B, 0xD5, 0x8D, 0xE2, 0x72, 0xA6, 0x41, 0x5B);};
template<> struct uuid<Windows::Devices::PointOfService::ISlipPrinterCapabilities> { define_guid(0x99B16399, 0x488C, 0x4157, 0x8A, 0xC2, 0x9F, 0x57, 0xF7, 0x8, 0xD3, 0xDB);};
template<> struct uuid<Windows::Devices::PointOfService::IJournalPrinterCapabilities> { define_guid(0x3B5CCC43, 0xE047, 0x4463, 0xBB, 0x58, 0x17, 0xB5, 0xBA, 0x1D, 0x80, 0x56);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterCapabilities> { define_guid(0xCDE95721, 0x4380, 0x4985, 0xAD, 0xC5, 0x39, 0xDB, 0x30, 0xCD, 0x93, 0xBC);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterStatus> { define_guid(0xD1F0C730, 0xDA40, 0x4328, 0xBF, 0x76, 0x51, 0x56, 0xFA, 0x33, 0xB7, 0x47);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterStatusUpdatedEventArgs> { define_guid(0x2EDB87DF, 0x13A6, 0x428D, 0xBA, 0x81, 0xB0, 0xE7, 0xC3, 0xE5, 0xA3, 0xCD);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterReleaseDeviceRequestedEventArgs> { define_guid(0x2BCBA359, 0x1CEF, 0x40B2, 0x9E, 0xCB, 0xF9, 0x27, 0xF8, 0x56, 0xAE, 0x3C);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterStatics> { define_guid(0x8CE0D4EA, 0x132F, 0x4CDF, 0xA6, 0x4A, 0x2D, 0xD, 0x7C, 0x96, 0xA8, 0x5B);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterStatics2> { define_guid(0xEECD2C1C, 0xB0D0, 0x42E7, 0xB1, 0x37, 0xB8, 0x9B, 0x16, 0x24, 0x4D, 0x41);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinter> { define_guid(0x2A03C10E, 0x9A19, 0x4A01, 0x99, 0x4F, 0x12, 0xDF, 0xAD, 0x6A, 0xDC, 0xBF);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedPosPrinter> { define_guid(0x6D64CE0C, 0xE03E, 0x4B14, 0xA3, 0x8E, 0xC2, 0x8C, 0x34, 0xB8, 0x63, 0x53);};
template<> struct uuid<Windows::Devices::PointOfService::IPosPrinterJob> { define_guid(0x9A94005C, 0x615, 0x4591, 0xA5, 0x8F, 0x30, 0xF8, 0x7E, 0xDF, 0xE2, 0xE4);};
template<> struct uuid<Windows::Devices::PointOfService::IReceiptOrSlipJob> { define_guid(0x532199BE, 0xC8C3, 0x4DC2, 0x89, 0xE9, 0x5C, 0x4A, 0x37, 0xB3, 0x4D, 0xDC);};
template<> struct uuid<Windows::Devices::PointOfService::IReceiptPrintJob> { define_guid(0xAA96066E, 0xACAD, 0x4B79, 0x9D, 0xF, 0xC0, 0xCF, 0xC0, 0x8D, 0xC7, 0x7B);};
template<> struct uuid<Windows::Devices::PointOfService::ICommonClaimedPosPrinterStation> { define_guid(0xB7EB66A8, 0xFE8A, 0x4CFB, 0x8B, 0x42, 0xE3, 0x5B, 0x28, 0xC, 0xB2, 0x7C);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedReceiptPrinter> { define_guid(0x9AD27A74, 0xDD61, 0x4EE2, 0x98, 0x37, 0x5B, 0x5D, 0x72, 0xD5, 0x38, 0xB9);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedSlipPrinter> { define_guid(0xBD5DEFF2, 0xAF90, 0x4E8A, 0xB7, 0x7B, 0xE3, 0xAE, 0x9C, 0xA6, 0x3A, 0x7F);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedJournalPrinter> { define_guid(0x67EA0630, 0x517D, 0x487F, 0x9F, 0xDF, 0xD2, 0xE0, 0xA0, 0xA2, 0x64, 0xA5);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerStatusUpdatedEventArgs> { define_guid(0x30AAE98A, 0xD70, 0x459C, 0x95, 0x53, 0x87, 0xE1, 0x24, 0xC5, 0x24, 0x88);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerStatus> { define_guid(0x6BBD78BF, 0xDCA1, 0x4E06, 0x99, 0xEB, 0x5A, 0xF6, 0xA5, 0xAE, 0xC1, 0x8);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerCapabilities> { define_guid(0xBC6DE0B, 0xE8E7, 0x4B1F, 0xB1, 0xD1, 0x3E, 0x50, 0x1A, 0xD0, 0x82, 0x47);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerEventSourceEventArgs> { define_guid(0x69CB3BC1, 0x147F, 0x421C, 0x9C, 0x23, 0x9, 0x1, 0x23, 0xBB, 0x78, 0x6C);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerStatics2> { define_guid(0x3E818121, 0x8C42, 0x40E8, 0x9C, 0xE, 0x40, 0x29, 0x70, 0x48, 0x10, 0x4C);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerStatics> { define_guid(0xDFA0955A, 0xD437, 0x4FFF, 0xB5, 0x47, 0xDD, 0xA9, 0x69, 0xA4, 0xF8, 0x83);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawer> { define_guid(0x9F88F5C8, 0xDE54, 0x4AEE, 0xA8, 0x90, 0x92, 0xB, 0xCB, 0xFE, 0x30, 0xFC);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerEventSource> { define_guid(0xE006E46C, 0xF2F9, 0x442F, 0x8D, 0xD6, 0x6, 0xC1, 0xA, 0x42, 0x27, 0xBA);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedCashDrawer> { define_guid(0xCA3F99AF, 0xABB8, 0x42C1, 0x8A, 0x84, 0x5C, 0x66, 0x51, 0x2F, 0x5A, 0x75);};
template<> struct uuid<Windows::Devices::PointOfService::ICashDrawerCloseAlarm> { define_guid(0x6BF88CC7, 0x6F63, 0x430E, 0xAB, 0x3B, 0x95, 0xD7, 0x5F, 0xFB, 0xE8, 0x7F);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayStatics> { define_guid(0x22DC0B6, 0x11B0, 0x4690, 0x95, 0x47, 0xB, 0x39, 0xC5, 0xAF, 0x21, 0x14);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayStatics2> { define_guid(0x600C3F1C, 0x77AB, 0x4968, 0xA7, 0xDE, 0xC0, 0x2F, 0xF1, 0x69, 0xF2, 0xCC);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplay2> { define_guid(0xC296A628, 0xEF44, 0x40F3, 0xBD, 0x1C, 0xB0, 0x4C, 0x6A, 0x5C, 0xDC, 0x7D);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplay> { define_guid(0x24F5DF4E, 0x3C99, 0x44E2, 0xB7, 0x3F, 0xE5, 0x1B, 0xE3, 0x63, 0x7A, 0x8C);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayStatisticsCategorySelector> { define_guid(0xB521C46B, 0x9274, 0x4D24, 0x94, 0xF3, 0xB6, 0x1, 0x7B, 0x83, 0x24, 0x44);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedLineDisplayStatics> { define_guid(0x78CA98FB, 0x8B6B, 0x4973, 0x86, 0xF0, 0x3E, 0x57, 0xC, 0x35, 0x18, 0x25);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedLineDisplay2> { define_guid(0xA31C75ED, 0x41F5, 0x4E76, 0xA0, 0x74, 0x79, 0x5E, 0x47, 0xA4, 0x6E, 0x97);};
template<> struct uuid<Windows::Devices::PointOfService::IClaimedLineDisplay> { define_guid(0x120AC970, 0x9A75, 0x4ACF, 0xAA, 0xE7, 0x9, 0x97, 0x2B, 0xCF, 0x87, 0x94);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayCursorAttributes> { define_guid(0x4E2D54FE, 0x4FFD, 0x4190, 0xAA, 0xE1, 0xCE, 0x28, 0x5F, 0x20, 0xC8, 0x96);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayCursor> { define_guid(0xECDFFC45, 0x754A, 0x4E3B, 0xAB, 0x2B, 0x15, 0x11, 0x81, 0x8, 0x56, 0x5);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayMarquee> { define_guid(0xA3D33E3E, 0xF46A, 0x4B7A, 0xBC, 0x21, 0x53, 0xEB, 0x3B, 0x57, 0xF8, 0xB4);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayStoredBitmap> { define_guid(0xF621515B, 0xD81E, 0x43BA, 0xBF, 0x1B, 0xBC, 0xFA, 0x3C, 0x78, 0x5B, 0xA0);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayWindow> { define_guid(0xD21FEEF4, 0x2364, 0x4BE5, 0xBE, 0xE1, 0x85, 0x16, 0x80, 0xAF, 0x49, 0x64);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayWindow2> { define_guid(0xA95CE2E6, 0xBDD8, 0x4365, 0x8E, 0x11, 0xDE, 0x94, 0xDE, 0x8D, 0xFF, 0x2);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayCustomGlyphs> { define_guid(0x2257F63C, 0xF263, 0x44F1, 0xA1, 0xA0, 0xE7, 0x50, 0xA6, 0xA0, 0xEC, 0x54);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayStatusUpdatedEventArgs> { define_guid(0xDDD57C1A, 0x86FB, 0x4EBA, 0x93, 0xD1, 0x6F, 0x5E, 0xDA, 0x52, 0xB7, 0x52);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayCapabilities> { define_guid(0x5A15B5D1, 0x8DC5, 0x4B9C, 0x91, 0x72, 0x30, 0x3E, 0x47, 0xB7, 0xC, 0x55);};
template<> struct uuid<Windows::Devices::PointOfService::ILineDisplayAttributes> { define_guid(0xC17DE99C, 0x229A, 0x4C14, 0xA6, 0xF1, 0xB4, 0xE4, 0xB1, 0xFE, 0xAD, 0x92);};

// types

namespace Windows { namespace Devices { namespace PointOfService {

// IUnifiedPosErrorData
struct IUnifiedPosErrorData_raw : IInspectable {
	virtual STDMETHODIMP _get_Message(HSTRING *value);
	virtual STDMETHODIMP _get_Severity(UnifiedPosErrorSeverity *value);
	virtual STDMETHODIMP _get_Reason(UnifiedPosErrorReason *value);
	virtual STDMETHODIMP _get_ExtendedReason(unsigned *value);
};
template<typename X> struct IUnifiedPosErrorData_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IUnifiedPosErrorData_adaptor::ExtendedReason)->_get_ExtendedReason(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ExtendedReason;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUnifiedPosErrorData_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Message;
		struct : property {
			UnifiedPosErrorReason get() { UnifiedPosErrorReason value; hrcheck(enc(&IUnifiedPosErrorData_adaptor::Reason)->_get_Reason(&value)); return value; }
			UnifiedPosErrorReason operator()() { return get(); }
			operator UnifiedPosErrorReason () { return get(); }
		} Reason;
		struct : property {
			UnifiedPosErrorSeverity get() { UnifiedPosErrorSeverity value; hrcheck(enc(&IUnifiedPosErrorData_adaptor::Severity)->_get_Severity(&value)); return value; }
			UnifiedPosErrorSeverity operator()() { return get(); }
			operator UnifiedPosErrorSeverity () { return get(); }
		} Severity;
	};
	IUnifiedPosErrorData_adaptor() {}
};
template<typename X> struct adapt<IUnifiedPosErrorData, X> : Windows::Devices::PointOfService::IUnifiedPosErrorData_adaptor<X> { typedef adapt IUnifiedPosErrorData; };
struct IUnifiedPosErrorData : IUnifiedPosErrorData_raw, generate<IUnifiedPosErrorData> {};

// IUnifiedPosErrorDataFactory
struct IUnifiedPosErrorDataFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(HSTRING message, UnifiedPosErrorSeverity severity, UnifiedPosErrorReason reason, unsigned extendedReason, UnifiedPosErrorData* *result);
};

// UnifiedPosErrorData
template<typename> struct UnifiedPosErrorData_statics {
	static UnifiedPosErrorData *activate(hstring_ref message, UnifiedPosErrorSeverity severity, UnifiedPosErrorReason reason, unsigned extendedReason) { UnifiedPosErrorData *result; hrcheck(get_activation_factory<UnifiedPosErrorData, IUnifiedPosErrorDataFactory>()->_CreateInstance(message, severity, reason, extendedReason, &result)); return result; }
};

template<typename X> struct statics<UnifiedPosErrorData, X> : X, Windows::Devices::PointOfService::UnifiedPosErrorData_statics<void> {
	using Windows::Devices::PointOfService::UnifiedPosErrorData_statics<void>::activate;
	typedef typename X::root_type UnifiedPosErrorData;
};
struct UnifiedPosErrorData : generate<UnifiedPosErrorData> {};

// IBarcodeScannerStatusUpdatedEventArgs
struct IBarcodeScannerStatusUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(BarcodeScannerStatus *value);
	virtual STDMETHODIMP _get_ExtendedStatus(unsigned *value);
};
template<typename X> struct IBarcodeScannerStatusUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarcodeScannerStatusUpdatedEventArgs_adaptor::ExtendedStatus)->_get_ExtendedStatus(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ExtendedStatus;
		struct : property {
			BarcodeScannerStatus get() { BarcodeScannerStatus value; hrcheck(enc(&IBarcodeScannerStatusUpdatedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			BarcodeScannerStatus operator()() { return get(); }
			operator BarcodeScannerStatus () { return get(); }
		} Status;
	};
	IBarcodeScannerStatusUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerStatusUpdatedEventArgs, X> : Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs_adaptor<X> { typedef adapt IBarcodeScannerStatusUpdatedEventArgs; };
struct IBarcodeScannerStatusUpdatedEventArgs : IBarcodeScannerStatusUpdatedEventArgs_raw, generate<IBarcodeScannerStatusUpdatedEventArgs> {};

// BarcodeScannerStatusUpdatedEventArgs
template<typename X> struct statics<BarcodeScannerStatusUpdatedEventArgs, X> : X {
	typedef typename X::root_type BarcodeScannerStatusUpdatedEventArgs;
};
struct BarcodeScannerStatusUpdatedEventArgs : generate<BarcodeScannerStatusUpdatedEventArgs> {};

// IBarcodeSymbologiesStatics
struct IBarcodeSymbologiesStatics : IInspectable {
	virtual STDMETHODIMP _get_Unknown(unsigned *value);
	virtual STDMETHODIMP _get_Ean8(unsigned *value);
	virtual STDMETHODIMP _get_Ean8Add2(unsigned *value);
	virtual STDMETHODIMP _get_Ean8Add5(unsigned *value);
	virtual STDMETHODIMP _get_Eanv(unsigned *value);
	virtual STDMETHODIMP _get_EanvAdd2(unsigned *value);
	virtual STDMETHODIMP _get_EanvAdd5(unsigned *value);
	virtual STDMETHODIMP _get_Ean13(unsigned *value);
	virtual STDMETHODIMP _get_Ean13Add2(unsigned *value);
	virtual STDMETHODIMP _get_Ean13Add5(unsigned *value);
	virtual STDMETHODIMP _get_Isbn(unsigned *value);
	virtual STDMETHODIMP _get_IsbnAdd5(unsigned *value);
	virtual STDMETHODIMP _get_Ismn(unsigned *value);
	virtual STDMETHODIMP _get_IsmnAdd2(unsigned *value);
	virtual STDMETHODIMP _get_IsmnAdd5(unsigned *value);
	virtual STDMETHODIMP _get_Issn(unsigned *value);
	virtual STDMETHODIMP _get_IssnAdd2(unsigned *value);
	virtual STDMETHODIMP _get_IssnAdd5(unsigned *value);
	virtual STDMETHODIMP _get_Ean99(unsigned *value);
	virtual STDMETHODIMP _get_Ean99Add2(unsigned *value);
	virtual STDMETHODIMP _get_Ean99Add5(unsigned *value);
	virtual STDMETHODIMP _get_Upca(unsigned *value);
	virtual STDMETHODIMP _get_UpcaAdd2(unsigned *value);
	virtual STDMETHODIMP _get_UpcaAdd5(unsigned *value);
	virtual STDMETHODIMP _get_Upce(unsigned *value);
	virtual STDMETHODIMP _get_UpceAdd2(unsigned *value);
	virtual STDMETHODIMP _get_UpceAdd5(unsigned *value);
	virtual STDMETHODIMP _get_UpcCoupon(unsigned *value);
	virtual STDMETHODIMP _get_TfStd(unsigned *value);
	virtual STDMETHODIMP _get_TfDis(unsigned *value);
	virtual STDMETHODIMP _get_TfInt(unsigned *value);
	virtual STDMETHODIMP _get_TfInd(unsigned *value);
	virtual STDMETHODIMP _get_TfMat(unsigned *value);
	virtual STDMETHODIMP _get_TfIata(unsigned *value);
	virtual STDMETHODIMP _get_Gs1DatabarType1(unsigned *value);
	virtual STDMETHODIMP _get_Gs1DatabarType2(unsigned *value);
	virtual STDMETHODIMP _get_Gs1DatabarType3(unsigned *value);
	virtual STDMETHODIMP _get_Code39(unsigned *value);
	virtual STDMETHODIMP _get_Code39Ex(unsigned *value);
	virtual STDMETHODIMP _get_Trioptic39(unsigned *value);
	virtual STDMETHODIMP _get_Code32(unsigned *value);
	virtual STDMETHODIMP _get_Pzn(unsigned *value);
	virtual STDMETHODIMP _get_Code93(unsigned *value);
	virtual STDMETHODIMP _get_Code93Ex(unsigned *value);
	virtual STDMETHODIMP _get_Code128(unsigned *value);
	virtual STDMETHODIMP _get_Gs1128(unsigned *value);
	virtual STDMETHODIMP _get_Gs1128Coupon(unsigned *value);
	virtual STDMETHODIMP _get_UccEan128(unsigned *value);
	virtual STDMETHODIMP _get_Sisac(unsigned *value);
	virtual STDMETHODIMP _get_Isbt(unsigned *value);
	virtual STDMETHODIMP _get_Codabar(unsigned *value);
	virtual STDMETHODIMP _get_Code11(unsigned *value);
	virtual STDMETHODIMP _get_Msi(unsigned *value);
	virtual STDMETHODIMP _get_Plessey(unsigned *value);
	virtual STDMETHODIMP _get_Telepen(unsigned *value);
	virtual STDMETHODIMP _get_Code16k(unsigned *value);
	virtual STDMETHODIMP _get_CodablockA(unsigned *value);
	virtual STDMETHODIMP _get_CodablockF(unsigned *value);
	virtual STDMETHODIMP _get_Codablock128(unsigned *value);
	virtual STDMETHODIMP _get_Code49(unsigned *value);
	virtual STDMETHODIMP _get_Aztec(unsigned *value);
	virtual STDMETHODIMP _get_DataCode(unsigned *value);
	virtual STDMETHODIMP _get_DataMatrix(unsigned *value);
	virtual STDMETHODIMP _get_HanXin(unsigned *value);
	virtual STDMETHODIMP _get_Maxicode(unsigned *value);
	virtual STDMETHODIMP _get_MicroPdf417(unsigned *value);
	virtual STDMETHODIMP _get_MicroQr(unsigned *value);
	virtual STDMETHODIMP _get_Pdf417(unsigned *value);
	virtual STDMETHODIMP _get_Qr(unsigned *value);
	virtual STDMETHODIMP _get_MsTag(unsigned *value);
	virtual STDMETHODIMP _get_Ccab(unsigned *value);
	virtual STDMETHODIMP _get_Ccc(unsigned *value);
	virtual STDMETHODIMP _get_Tlc39(unsigned *value);
	virtual STDMETHODIMP _get_AusPost(unsigned *value);
	virtual STDMETHODIMP _get_CanPost(unsigned *value);
	virtual STDMETHODIMP _get_ChinaPost(unsigned *value);
	virtual STDMETHODIMP _get_DutchKix(unsigned *value);
	virtual STDMETHODIMP _get_InfoMail(unsigned *value);
	virtual STDMETHODIMP _get_ItalianPost25(unsigned *value);
	virtual STDMETHODIMP _get_ItalianPost39(unsigned *value);
	virtual STDMETHODIMP _get_JapanPost(unsigned *value);
	virtual STDMETHODIMP _get_KoreanPost(unsigned *value);
	virtual STDMETHODIMP _get_SwedenPost(unsigned *value);
	virtual STDMETHODIMP _get_UkPost(unsigned *value);
	virtual STDMETHODIMP _get_UsIntelligent(unsigned *value);
	virtual STDMETHODIMP _get_UsIntelligentPkg(unsigned *value);
	virtual STDMETHODIMP _get_UsPlanet(unsigned *value);
	virtual STDMETHODIMP _get_UsPostNet(unsigned *value);
	virtual STDMETHODIMP _get_Us4StateFics(unsigned *value);
	virtual STDMETHODIMP _get_OcrA(unsigned *value);
	virtual STDMETHODIMP _get_OcrB(unsigned *value);
	virtual STDMETHODIMP _get_Micr(unsigned *value);
	virtual STDMETHODIMP _get_ExtendedBase(unsigned *value);
	virtual STDMETHODIMP _GetName(unsigned scanDataType, HSTRING *value);
};

// IBarcodeSymbologiesStatics2
struct IBarcodeSymbologiesStatics2 : IInspectable {
	virtual STDMETHODIMP _get_Gs1DWCode(unsigned *value);
};

// BarcodeSymbologies
template<typename> struct BarcodeSymbologies_statics {
	static struct _AusPost : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_AusPost(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} AusPost;
	static struct _Aztec : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Aztec(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Aztec;
	static struct _CanPost : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_CanPost(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} CanPost;
	static struct _Ccab : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ccab(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ccab;
	static struct _Ccc : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ccc(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ccc;
	static struct _ChinaPost : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_ChinaPost(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ChinaPost;
	static struct _Codabar : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Codabar(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Codabar;
	static struct _Codablock128 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Codablock128(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Codablock128;
	static struct _CodablockA : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_CodablockA(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} CodablockA;
	static struct _CodablockF : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_CodablockF(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} CodablockF;
	static struct _Code11 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code11(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code11;
	static struct _Code128 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code128(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code128;
	static struct _Code16k : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code16k(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code16k;
	static struct _Code32 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code32(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code32;
	static struct _Code39 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code39(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code39;
	static struct _Code39Ex : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code39Ex(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code39Ex;
	static struct _Code49 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code49(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code49;
	static struct _Code93 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code93(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code93;
	static struct _Code93Ex : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Code93Ex(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Code93Ex;
	static struct _DataCode : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_DataCode(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} DataCode;
	static struct _DataMatrix : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_DataMatrix(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} DataMatrix;
	static struct _DutchKix : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_DutchKix(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} DutchKix;
	static struct _Ean13 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean13(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean13;
	static struct _Ean13Add2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean13Add2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean13Add2;
	static struct _Ean13Add5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean13Add5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean13Add5;
	static struct _Ean8 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean8(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean8;
	static struct _Ean8Add2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean8Add2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean8Add2;
	static struct _Ean8Add5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean8Add5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean8Add5;
	static struct _Ean99 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean99(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean99;
	static struct _Ean99Add2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean99Add2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean99Add2;
	static struct _Ean99Add5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ean99Add5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ean99Add5;
	static struct _Eanv : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Eanv(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Eanv;
	static struct _EanvAdd2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_EanvAdd2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} EanvAdd2;
	static struct _EanvAdd5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_EanvAdd5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} EanvAdd5;
	static struct _ExtendedBase : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_ExtendedBase(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ExtendedBase;
	static struct _Gs1128 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Gs1128(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Gs1128;
	static struct _Gs1128Coupon : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Gs1128Coupon(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Gs1128Coupon;
	static struct _Gs1DatabarType1 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Gs1DatabarType1(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Gs1DatabarType1;
	static struct _Gs1DatabarType2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Gs1DatabarType2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Gs1DatabarType2;
	static struct _Gs1DatabarType3 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Gs1DatabarType3(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Gs1DatabarType3;
	static struct _HanXin : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_HanXin(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} HanXin;
	static struct _InfoMail : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_InfoMail(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} InfoMail;
	static struct _Isbn : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Isbn(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Isbn;
	static struct _IsbnAdd5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_IsbnAdd5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} IsbnAdd5;
	static struct _Isbt : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Isbt(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Isbt;
	static struct _Ismn : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Ismn(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ismn;
	static struct _IsmnAdd2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_IsmnAdd2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} IsmnAdd2;
	static struct _IsmnAdd5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_IsmnAdd5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} IsmnAdd5;
	static struct _Issn : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Issn(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Issn;
	static struct _IssnAdd2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_IssnAdd2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} IssnAdd2;
	static struct _IssnAdd5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_IssnAdd5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} IssnAdd5;
	static struct _ItalianPost25 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_ItalianPost25(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ItalianPost25;
	static struct _ItalianPost39 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_ItalianPost39(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ItalianPost39;
	static struct _JapanPost : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_JapanPost(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} JapanPost;
	static struct _KoreanPost : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_KoreanPost(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} KoreanPost;
	static struct _Maxicode : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Maxicode(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Maxicode;
	static struct _Micr : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Micr(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Micr;
	static struct _MicroPdf417 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_MicroPdf417(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MicroPdf417;
	static struct _MicroQr : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_MicroQr(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MicroQr;
	static struct _MsTag : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_MsTag(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MsTag;
	static struct _Msi : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Msi(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Msi;
	static struct _OcrA : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_OcrA(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} OcrA;
	static struct _OcrB : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_OcrB(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} OcrB;
	static struct _Pdf417 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Pdf417(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Pdf417;
	static struct _Plessey : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Plessey(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Plessey;
	static struct _Pzn : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Pzn(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Pzn;
	static struct _Qr : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Qr(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Qr;
	static struct _Sisac : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Sisac(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Sisac;
	static struct _SwedenPost : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_SwedenPost(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} SwedenPost;
	static struct _Telepen : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Telepen(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Telepen;
	static struct _TfDis : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_TfDis(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TfDis;
	static struct _TfIata : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_TfIata(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TfIata;
	static struct _TfInd : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_TfInd(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TfInd;
	static struct _TfInt : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_TfInt(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TfInt;
	static struct _TfMat : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_TfMat(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TfMat;
	static struct _TfStd : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_TfStd(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TfStd;
	static struct _Tlc39 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Tlc39(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Tlc39;
	static struct _Trioptic39 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Trioptic39(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Trioptic39;
	static struct _UccEan128 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UccEan128(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UccEan128;
	static struct _UkPost : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UkPost(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UkPost;
	static struct _Unknown : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Unknown(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Unknown;
	static struct _UpcCoupon : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UpcCoupon(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UpcCoupon;
	static struct _Upca : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Upca(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Upca;
	static struct _UpcaAdd2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UpcaAdd2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UpcaAdd2;
	static struct _UpcaAdd5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UpcaAdd5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UpcaAdd5;
	static struct _Upce : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Upce(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Upce;
	static struct _UpceAdd2 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UpceAdd2(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UpceAdd2;
	static struct _UpceAdd5 : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UpceAdd5(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UpceAdd5;
	static struct _Us4StateFics : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_Us4StateFics(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Us4StateFics;
	static struct _UsIntelligent : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UsIntelligent(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UsIntelligent;
	static struct _UsIntelligentPkg : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UsIntelligentPkg(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UsIntelligentPkg;
	static struct _UsPlanet : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UsPlanet(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UsPlanet;
	static struct _UsPostNet : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_get_UsPostNet(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} UsPostNet;
	static struct _Gs1DWCode : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics2>()->_get_Gs1DWCode(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Gs1DWCode;
	static hstring GetName(unsigned scanDataType) { HSTRING value; hrcheck(get_activation_factory<BarcodeSymbologies, IBarcodeSymbologiesStatics>()->_GetName(scanDataType, &value)); return from_abi(value); }
};
template<typename X> typename BarcodeSymbologies_statics<X>::_AusPost BarcodeSymbologies_statics<X>::AusPost;
template<typename X> typename BarcodeSymbologies_statics<X>::_Aztec BarcodeSymbologies_statics<X>::Aztec;
template<typename X> typename BarcodeSymbologies_statics<X>::_CanPost BarcodeSymbologies_statics<X>::CanPost;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ccab BarcodeSymbologies_statics<X>::Ccab;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ccc BarcodeSymbologies_statics<X>::Ccc;
template<typename X> typename BarcodeSymbologies_statics<X>::_ChinaPost BarcodeSymbologies_statics<X>::ChinaPost;
template<typename X> typename BarcodeSymbologies_statics<X>::_Codabar BarcodeSymbologies_statics<X>::Codabar;
template<typename X> typename BarcodeSymbologies_statics<X>::_Codablock128 BarcodeSymbologies_statics<X>::Codablock128;
template<typename X> typename BarcodeSymbologies_statics<X>::_CodablockA BarcodeSymbologies_statics<X>::CodablockA;
template<typename X> typename BarcodeSymbologies_statics<X>::_CodablockF BarcodeSymbologies_statics<X>::CodablockF;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code11 BarcodeSymbologies_statics<X>::Code11;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code128 BarcodeSymbologies_statics<X>::Code128;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code16k BarcodeSymbologies_statics<X>::Code16k;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code32 BarcodeSymbologies_statics<X>::Code32;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code39 BarcodeSymbologies_statics<X>::Code39;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code39Ex BarcodeSymbologies_statics<X>::Code39Ex;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code49 BarcodeSymbologies_statics<X>::Code49;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code93 BarcodeSymbologies_statics<X>::Code93;
template<typename X> typename BarcodeSymbologies_statics<X>::_Code93Ex BarcodeSymbologies_statics<X>::Code93Ex;
template<typename X> typename BarcodeSymbologies_statics<X>::_DataCode BarcodeSymbologies_statics<X>::DataCode;
template<typename X> typename BarcodeSymbologies_statics<X>::_DataMatrix BarcodeSymbologies_statics<X>::DataMatrix;
template<typename X> typename BarcodeSymbologies_statics<X>::_DutchKix BarcodeSymbologies_statics<X>::DutchKix;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean13 BarcodeSymbologies_statics<X>::Ean13;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean13Add2 BarcodeSymbologies_statics<X>::Ean13Add2;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean13Add5 BarcodeSymbologies_statics<X>::Ean13Add5;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean8 BarcodeSymbologies_statics<X>::Ean8;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean8Add2 BarcodeSymbologies_statics<X>::Ean8Add2;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean8Add5 BarcodeSymbologies_statics<X>::Ean8Add5;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean99 BarcodeSymbologies_statics<X>::Ean99;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean99Add2 BarcodeSymbologies_statics<X>::Ean99Add2;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ean99Add5 BarcodeSymbologies_statics<X>::Ean99Add5;
template<typename X> typename BarcodeSymbologies_statics<X>::_Eanv BarcodeSymbologies_statics<X>::Eanv;
template<typename X> typename BarcodeSymbologies_statics<X>::_EanvAdd2 BarcodeSymbologies_statics<X>::EanvAdd2;
template<typename X> typename BarcodeSymbologies_statics<X>::_EanvAdd5 BarcodeSymbologies_statics<X>::EanvAdd5;
template<typename X> typename BarcodeSymbologies_statics<X>::_ExtendedBase BarcodeSymbologies_statics<X>::ExtendedBase;
template<typename X> typename BarcodeSymbologies_statics<X>::_Gs1128 BarcodeSymbologies_statics<X>::Gs1128;
template<typename X> typename BarcodeSymbologies_statics<X>::_Gs1128Coupon BarcodeSymbologies_statics<X>::Gs1128Coupon;
template<typename X> typename BarcodeSymbologies_statics<X>::_Gs1DatabarType1 BarcodeSymbologies_statics<X>::Gs1DatabarType1;
template<typename X> typename BarcodeSymbologies_statics<X>::_Gs1DatabarType2 BarcodeSymbologies_statics<X>::Gs1DatabarType2;
template<typename X> typename BarcodeSymbologies_statics<X>::_Gs1DatabarType3 BarcodeSymbologies_statics<X>::Gs1DatabarType3;
template<typename X> typename BarcodeSymbologies_statics<X>::_HanXin BarcodeSymbologies_statics<X>::HanXin;
template<typename X> typename BarcodeSymbologies_statics<X>::_InfoMail BarcodeSymbologies_statics<X>::InfoMail;
template<typename X> typename BarcodeSymbologies_statics<X>::_Isbn BarcodeSymbologies_statics<X>::Isbn;
template<typename X> typename BarcodeSymbologies_statics<X>::_IsbnAdd5 BarcodeSymbologies_statics<X>::IsbnAdd5;
template<typename X> typename BarcodeSymbologies_statics<X>::_Isbt BarcodeSymbologies_statics<X>::Isbt;
template<typename X> typename BarcodeSymbologies_statics<X>::_Ismn BarcodeSymbologies_statics<X>::Ismn;
template<typename X> typename BarcodeSymbologies_statics<X>::_IsmnAdd2 BarcodeSymbologies_statics<X>::IsmnAdd2;
template<typename X> typename BarcodeSymbologies_statics<X>::_IsmnAdd5 BarcodeSymbologies_statics<X>::IsmnAdd5;
template<typename X> typename BarcodeSymbologies_statics<X>::_Issn BarcodeSymbologies_statics<X>::Issn;
template<typename X> typename BarcodeSymbologies_statics<X>::_IssnAdd2 BarcodeSymbologies_statics<X>::IssnAdd2;
template<typename X> typename BarcodeSymbologies_statics<X>::_IssnAdd5 BarcodeSymbologies_statics<X>::IssnAdd5;
template<typename X> typename BarcodeSymbologies_statics<X>::_ItalianPost25 BarcodeSymbologies_statics<X>::ItalianPost25;
template<typename X> typename BarcodeSymbologies_statics<X>::_ItalianPost39 BarcodeSymbologies_statics<X>::ItalianPost39;
template<typename X> typename BarcodeSymbologies_statics<X>::_JapanPost BarcodeSymbologies_statics<X>::JapanPost;
template<typename X> typename BarcodeSymbologies_statics<X>::_KoreanPost BarcodeSymbologies_statics<X>::KoreanPost;
template<typename X> typename BarcodeSymbologies_statics<X>::_Maxicode BarcodeSymbologies_statics<X>::Maxicode;
template<typename X> typename BarcodeSymbologies_statics<X>::_Micr BarcodeSymbologies_statics<X>::Micr;
template<typename X> typename BarcodeSymbologies_statics<X>::_MicroPdf417 BarcodeSymbologies_statics<X>::MicroPdf417;
template<typename X> typename BarcodeSymbologies_statics<X>::_MicroQr BarcodeSymbologies_statics<X>::MicroQr;
template<typename X> typename BarcodeSymbologies_statics<X>::_MsTag BarcodeSymbologies_statics<X>::MsTag;
template<typename X> typename BarcodeSymbologies_statics<X>::_Msi BarcodeSymbologies_statics<X>::Msi;
template<typename X> typename BarcodeSymbologies_statics<X>::_OcrA BarcodeSymbologies_statics<X>::OcrA;
template<typename X> typename BarcodeSymbologies_statics<X>::_OcrB BarcodeSymbologies_statics<X>::OcrB;
template<typename X> typename BarcodeSymbologies_statics<X>::_Pdf417 BarcodeSymbologies_statics<X>::Pdf417;
template<typename X> typename BarcodeSymbologies_statics<X>::_Plessey BarcodeSymbologies_statics<X>::Plessey;
template<typename X> typename BarcodeSymbologies_statics<X>::_Pzn BarcodeSymbologies_statics<X>::Pzn;
template<typename X> typename BarcodeSymbologies_statics<X>::_Qr BarcodeSymbologies_statics<X>::Qr;
template<typename X> typename BarcodeSymbologies_statics<X>::_Sisac BarcodeSymbologies_statics<X>::Sisac;
template<typename X> typename BarcodeSymbologies_statics<X>::_SwedenPost BarcodeSymbologies_statics<X>::SwedenPost;
template<typename X> typename BarcodeSymbologies_statics<X>::_Telepen BarcodeSymbologies_statics<X>::Telepen;
template<typename X> typename BarcodeSymbologies_statics<X>::_TfDis BarcodeSymbologies_statics<X>::TfDis;
template<typename X> typename BarcodeSymbologies_statics<X>::_TfIata BarcodeSymbologies_statics<X>::TfIata;
template<typename X> typename BarcodeSymbologies_statics<X>::_TfInd BarcodeSymbologies_statics<X>::TfInd;
template<typename X> typename BarcodeSymbologies_statics<X>::_TfInt BarcodeSymbologies_statics<X>::TfInt;
template<typename X> typename BarcodeSymbologies_statics<X>::_TfMat BarcodeSymbologies_statics<X>::TfMat;
template<typename X> typename BarcodeSymbologies_statics<X>::_TfStd BarcodeSymbologies_statics<X>::TfStd;
template<typename X> typename BarcodeSymbologies_statics<X>::_Tlc39 BarcodeSymbologies_statics<X>::Tlc39;
template<typename X> typename BarcodeSymbologies_statics<X>::_Trioptic39 BarcodeSymbologies_statics<X>::Trioptic39;
template<typename X> typename BarcodeSymbologies_statics<X>::_UccEan128 BarcodeSymbologies_statics<X>::UccEan128;
template<typename X> typename BarcodeSymbologies_statics<X>::_UkPost BarcodeSymbologies_statics<X>::UkPost;
template<typename X> typename BarcodeSymbologies_statics<X>::_Unknown BarcodeSymbologies_statics<X>::Unknown;
template<typename X> typename BarcodeSymbologies_statics<X>::_UpcCoupon BarcodeSymbologies_statics<X>::UpcCoupon;
template<typename X> typename BarcodeSymbologies_statics<X>::_Upca BarcodeSymbologies_statics<X>::Upca;
template<typename X> typename BarcodeSymbologies_statics<X>::_UpcaAdd2 BarcodeSymbologies_statics<X>::UpcaAdd2;
template<typename X> typename BarcodeSymbologies_statics<X>::_UpcaAdd5 BarcodeSymbologies_statics<X>::UpcaAdd5;
template<typename X> typename BarcodeSymbologies_statics<X>::_Upce BarcodeSymbologies_statics<X>::Upce;
template<typename X> typename BarcodeSymbologies_statics<X>::_UpceAdd2 BarcodeSymbologies_statics<X>::UpceAdd2;
template<typename X> typename BarcodeSymbologies_statics<X>::_UpceAdd5 BarcodeSymbologies_statics<X>::UpceAdd5;
template<typename X> typename BarcodeSymbologies_statics<X>::_Us4StateFics BarcodeSymbologies_statics<X>::Us4StateFics;
template<typename X> typename BarcodeSymbologies_statics<X>::_UsIntelligent BarcodeSymbologies_statics<X>::UsIntelligent;
template<typename X> typename BarcodeSymbologies_statics<X>::_UsIntelligentPkg BarcodeSymbologies_statics<X>::UsIntelligentPkg;
template<typename X> typename BarcodeSymbologies_statics<X>::_UsPlanet BarcodeSymbologies_statics<X>::UsPlanet;
template<typename X> typename BarcodeSymbologies_statics<X>::_UsPostNet BarcodeSymbologies_statics<X>::UsPostNet;
template<typename X> typename BarcodeSymbologies_statics<X>::_Gs1DWCode BarcodeSymbologies_statics<X>::Gs1DWCode;

template<typename X> struct statics<BarcodeSymbologies, X> : X, Windows::Devices::PointOfService::BarcodeSymbologies_statics<void> {
	typedef typename X::root_type BarcodeSymbologies;
};
struct BarcodeSymbologies : generate<BarcodeSymbologies> {};

// IBarcodeSymbologyAttributes
struct IBarcodeSymbologyAttributes_raw : IInspectable {
	virtual STDMETHODIMP _get_IsCheckDigitValidationEnabled(bool *value);
	virtual STDMETHODIMP _put_IsCheckDigitValidationEnabled(bool value);
	virtual STDMETHODIMP _get_IsCheckDigitValidationSupported(bool *value);
	virtual STDMETHODIMP _get_IsCheckDigitTransmissionEnabled(bool *value);
	virtual STDMETHODIMP _put_IsCheckDigitTransmissionEnabled(bool value);
	virtual STDMETHODIMP _get_IsCheckDigitTransmissionSupported(bool *value);
	virtual STDMETHODIMP _get_DecodeLength1(unsigned *value);
	virtual STDMETHODIMP _put_DecodeLength1(unsigned value);
	virtual STDMETHODIMP _get_DecodeLength2(unsigned *value);
	virtual STDMETHODIMP _put_DecodeLength2(unsigned value);
	virtual STDMETHODIMP _get_DecodeLengthKind(BarcodeSymbologyDecodeLengthKind *value);
	virtual STDMETHODIMP _put_DecodeLengthKind(BarcodeSymbologyDecodeLengthKind value);
	virtual STDMETHODIMP _get_IsDecodeLengthSupported(bool *value);
};
template<typename X> struct IBarcodeSymbologyAttributes_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::DecodeLength1)->_get_DecodeLength1(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::DecodeLength1)->_put_DecodeLength1(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DecodeLength1;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::DecodeLength2)->_get_DecodeLength2(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::DecodeLength2)->_put_DecodeLength2(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DecodeLength2;
		struct : property {
			BarcodeSymbologyDecodeLengthKind get() { BarcodeSymbologyDecodeLengthKind value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::DecodeLengthKind)->_get_DecodeLengthKind(&value)); return value; }
			BarcodeSymbologyDecodeLengthKind operator()() { return get(); }
			operator BarcodeSymbologyDecodeLengthKind () { return get(); }
			void put(BarcodeSymbologyDecodeLengthKind value) { hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::DecodeLengthKind)->_put_DecodeLengthKind(value)); }
			void operator=(BarcodeSymbologyDecodeLengthKind value) { put(value); }
			void operator()(BarcodeSymbologyDecodeLengthKind value) { put(value); }
		} DecodeLengthKind;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::IsCheckDigitTransmissionEnabled)->_get_IsCheckDigitTransmissionEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::IsCheckDigitTransmissionEnabled)->_put_IsCheckDigitTransmissionEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCheckDigitTransmissionEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::IsCheckDigitTransmissionSupported)->_get_IsCheckDigitTransmissionSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCheckDigitTransmissionSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::IsCheckDigitValidationEnabled)->_get_IsCheckDigitValidationEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::IsCheckDigitValidationEnabled)->_put_IsCheckDigitValidationEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCheckDigitValidationEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::IsCheckDigitValidationSupported)->_get_IsCheckDigitValidationSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCheckDigitValidationSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeSymbologyAttributes_adaptor::IsDecodeLengthSupported)->_get_IsDecodeLengthSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDecodeLengthSupported;
	};
	IBarcodeSymbologyAttributes_adaptor() {}
};
template<typename X> struct adapt<IBarcodeSymbologyAttributes, X> : Windows::Devices::PointOfService::IBarcodeSymbologyAttributes_adaptor<X> { typedef adapt IBarcodeSymbologyAttributes; };
struct IBarcodeSymbologyAttributes : IBarcodeSymbologyAttributes_raw, generate<IBarcodeSymbologyAttributes> {};

// BarcodeSymbologyAttributes
template<typename X> struct statics<BarcodeSymbologyAttributes, X> : X {
	typedef typename X::root_type BarcodeSymbologyAttributes;
};
struct BarcodeSymbologyAttributes : generate<BarcodeSymbologyAttributes> {};

// IBarcodeScannerDataReceivedEventArgs
struct IBarcodeScannerDataReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Report(BarcodeScannerReport* *value);
};
template<typename X> struct IBarcodeScannerDataReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<BarcodeScannerReport> get() { BarcodeScannerReport* value; hrcheck(enc(&IBarcodeScannerDataReceivedEventArgs_adaptor::Report)->_get_Report(&value)); return from_abi(value); }
			ptr<BarcodeScannerReport> operator()() { return get(); }
			operator ptr<BarcodeScannerReport> () { return get(); }
			ptr<BarcodeScannerReport> operator->() { return get(); }
		} Report;
	};
	IBarcodeScannerDataReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerDataReceivedEventArgs, X> : Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs_adaptor<X> { typedef adapt IBarcodeScannerDataReceivedEventArgs; };
struct IBarcodeScannerDataReceivedEventArgs : IBarcodeScannerDataReceivedEventArgs_raw, generate<IBarcodeScannerDataReceivedEventArgs> {};

// IBarcodeScannerReportFactory
struct IBarcodeScannerReportFactory : IInspectable {
	virtual STDMETHODIMP _CreateInstance(unsigned scanDataType, Storage::Streams::IBuffer* scanData, Storage::Streams::IBuffer* scanDataLabel, BarcodeScannerReport* *result);
};

// IBarcodeScannerReport
struct IBarcodeScannerReport_raw : IInspectable {
	virtual STDMETHODIMP _get_ScanDataType(unsigned *value);
	virtual STDMETHODIMP _get_ScanData(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_ScanDataLabel(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IBarcodeScannerReport_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IBarcodeScannerReport_adaptor::ScanData)->_get_ScanData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} ScanData;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IBarcodeScannerReport_adaptor::ScanDataLabel)->_get_ScanDataLabel(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} ScanDataLabel;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IBarcodeScannerReport_adaptor::ScanDataType)->_get_ScanDataType(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ScanDataType;
	};
	IBarcodeScannerReport_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerReport, X> : Windows::Devices::PointOfService::IBarcodeScannerReport_adaptor<X> { typedef adapt IBarcodeScannerReport; };
struct IBarcodeScannerReport : IBarcodeScannerReport_raw, generate<IBarcodeScannerReport> {};

// BarcodeScannerReport
template<typename> struct BarcodeScannerReport_statics {
	static BarcodeScannerReport *activate(unsigned scanDataType, pptr<Storage::Streams::IBuffer> scanData, pptr<Storage::Streams::IBuffer> scanDataLabel) { BarcodeScannerReport *result; hrcheck(get_activation_factory<BarcodeScannerReport, IBarcodeScannerReportFactory>()->_CreateInstance(scanDataType, scanData, scanDataLabel, &result)); return result; }
};

template<typename X> struct statics<BarcodeScannerReport, X> : X, Windows::Devices::PointOfService::BarcodeScannerReport_statics<void> {
	using Windows::Devices::PointOfService::BarcodeScannerReport_statics<void>::activate;
	typedef typename X::root_type BarcodeScannerReport;
};
struct BarcodeScannerReport : generate<BarcodeScannerReport> {};

// BarcodeScannerDataReceivedEventArgs
template<typename X> struct statics<BarcodeScannerDataReceivedEventArgs, X> : X {
	typedef typename X::root_type BarcodeScannerDataReceivedEventArgs;
};
struct BarcodeScannerDataReceivedEventArgs : generate<BarcodeScannerDataReceivedEventArgs> {};

// IBarcodeScannerErrorOccurredEventArgs
struct IBarcodeScannerErrorOccurredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_PartialInputData(BarcodeScannerReport* *value);
	virtual STDMETHODIMP _get_IsRetriable(bool *value);
	virtual STDMETHODIMP _get_ErrorData(UnifiedPosErrorData* *value);
};
template<typename X> struct IBarcodeScannerErrorOccurredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UnifiedPosErrorData> get() { UnifiedPosErrorData* value; hrcheck(enc(&IBarcodeScannerErrorOccurredEventArgs_adaptor::ErrorData)->_get_ErrorData(&value)); return from_abi(value); }
			ptr<UnifiedPosErrorData> operator()() { return get(); }
			operator ptr<UnifiedPosErrorData> () { return get(); }
			ptr<UnifiedPosErrorData> operator->() { return get(); }
		} ErrorData;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeScannerErrorOccurredEventArgs_adaptor::IsRetriable)->_get_IsRetriable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsRetriable;
		struct : property {
			ptr<BarcodeScannerReport> get() { BarcodeScannerReport* value; hrcheck(enc(&IBarcodeScannerErrorOccurredEventArgs_adaptor::PartialInputData)->_get_PartialInputData(&value)); return from_abi(value); }
			ptr<BarcodeScannerReport> operator()() { return get(); }
			operator ptr<BarcodeScannerReport> () { return get(); }
			ptr<BarcodeScannerReport> operator->() { return get(); }
		} PartialInputData;
	};
	IBarcodeScannerErrorOccurredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerErrorOccurredEventArgs, X> : Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs_adaptor<X> { typedef adapt IBarcodeScannerErrorOccurredEventArgs; };
struct IBarcodeScannerErrorOccurredEventArgs : IBarcodeScannerErrorOccurredEventArgs_raw, generate<IBarcodeScannerErrorOccurredEventArgs> {};

// BarcodeScannerErrorOccurredEventArgs
template<typename X> struct statics<BarcodeScannerErrorOccurredEventArgs, X> : X {
	typedef typename X::root_type BarcodeScannerErrorOccurredEventArgs;
};
struct BarcodeScannerErrorOccurredEventArgs : generate<BarcodeScannerErrorOccurredEventArgs> {};

// IBarcodeScannerImagePreviewReceivedEventArgs
struct IBarcodeScannerImagePreviewReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Preview(Storage::Streams::IRandomAccessStreamWithContentType* *preview);
};
template<typename X> struct IBarcodeScannerImagePreviewReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> get() { Storage::Streams::IRandomAccessStreamWithContentType* preview; hrcheck(enc(&IBarcodeScannerImagePreviewReceivedEventArgs_adaptor::Preview)->_get_Preview(&preview)); return from_abi(preview); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator()() { return get(); }
			operator ptr<Storage::Streams::IRandomAccessStreamWithContentType> () { return get(); }
			ptr<Storage::Streams::IRandomAccessStreamWithContentType> operator->() { return get(); }
		} Preview;
	};
	IBarcodeScannerImagePreviewReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerImagePreviewReceivedEventArgs, X> : Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs_adaptor<X> { typedef adapt IBarcodeScannerImagePreviewReceivedEventArgs; };
struct IBarcodeScannerImagePreviewReceivedEventArgs : IBarcodeScannerImagePreviewReceivedEventArgs_raw, generate<IBarcodeScannerImagePreviewReceivedEventArgs> {};

// BarcodeScannerImagePreviewReceivedEventArgs
template<typename X> struct statics<BarcodeScannerImagePreviewReceivedEventArgs, X> : X {
	typedef typename X::root_type BarcodeScannerImagePreviewReceivedEventArgs;
};
struct BarcodeScannerImagePreviewReceivedEventArgs : generate<BarcodeScannerImagePreviewReceivedEventArgs> {};

// IBarcodeScannerCapabilities
struct IBarcodeScannerCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_PowerReportingType(UnifiedPosPowerReportingType *value);
	virtual STDMETHODIMP _get_IsStatisticsReportingSupported(bool *value);
	virtual STDMETHODIMP _get_IsStatisticsUpdatingSupported(bool *value);
	virtual STDMETHODIMP _get_IsImagePreviewSupported(bool *value);
};
template<typename X> struct IBarcodeScannerCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeScannerCapabilities_adaptor::IsImagePreviewSupported)->_get_IsImagePreviewSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsImagePreviewSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeScannerCapabilities_adaptor::IsStatisticsReportingSupported)->_get_IsStatisticsReportingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsReportingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeScannerCapabilities_adaptor::IsStatisticsUpdatingSupported)->_get_IsStatisticsUpdatingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsUpdatingSupported;
		struct : property {
			UnifiedPosPowerReportingType get() { UnifiedPosPowerReportingType value; hrcheck(enc(&IBarcodeScannerCapabilities_adaptor::PowerReportingType)->_get_PowerReportingType(&value)); return value; }
			UnifiedPosPowerReportingType operator()() { return get(); }
			operator UnifiedPosPowerReportingType () { return get(); }
		} PowerReportingType;
	};
	IBarcodeScannerCapabilities_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerCapabilities, X> : Windows::Devices::PointOfService::IBarcodeScannerCapabilities_adaptor<X> { typedef adapt IBarcodeScannerCapabilities; };
struct IBarcodeScannerCapabilities : IBarcodeScannerCapabilities_raw, generate<IBarcodeScannerCapabilities> {};

// IBarcodeScannerCapabilities1
struct IBarcodeScannerCapabilities1_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSoftwareTriggerSupported(bool *value);
};
template<typename X> struct IBarcodeScannerCapabilities1_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBarcodeScannerCapabilities1_adaptor::IsSoftwareTriggerSupported)->_get_IsSoftwareTriggerSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSoftwareTriggerSupported;
	};
	IBarcodeScannerCapabilities1_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScannerCapabilities1, X> : Windows::Devices::PointOfService::IBarcodeScannerCapabilities1_adaptor<X> { typedef adapt IBarcodeScannerCapabilities1; };
struct IBarcodeScannerCapabilities1 : IBarcodeScannerCapabilities1_raw, generate<IBarcodeScannerCapabilities1> {};

// BarcodeScannerCapabilities
template<typename X> struct statics<BarcodeScannerCapabilities, X> : X {
	typedef typename X::root_type BarcodeScannerCapabilities;
};
struct BarcodeScannerCapabilities : generate<BarcodeScannerCapabilities> {};

// IBarcodeScannerStatics
struct IBarcodeScannerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<BarcodeScanner*>* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<BarcodeScanner*>* *result);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
};

// IBarcodeScannerStatics2
struct IBarcodeScannerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelectorWithConnectionTypes(PosConnectionTypes connectionTypes, HSTRING *value);
};

// IBarcodeScanner2
struct IBarcodeScanner2_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoDeviceId(HSTRING *value);
};
template<typename X> struct IBarcodeScanner2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBarcodeScanner2_adaptor::VideoDeviceId)->_get_VideoDeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} VideoDeviceId;
	};
	IBarcodeScanner2_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScanner2, X> : Windows::Devices::PointOfService::IBarcodeScanner2_adaptor<X> { typedef adapt IBarcodeScanner2; };
struct IBarcodeScanner2 : IBarcodeScanner2_raw, generate<IBarcodeScanner2> {};

// IBarcodeScanner
struct IBarcodeScanner_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Capabilities(BarcodeScannerCapabilities* *value);
	virtual STDMETHODIMP _ClaimScannerAsync(Foundation::IAsyncOperation<ClaimedBarcodeScanner*>* *operation);
	virtual STDMETHODIMP _CheckHealthAsync(UnifiedPosHealthCheckLevel level, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetSupportedSymbologiesAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<unsigned>*>* *operation);
	virtual STDMETHODIMP _IsSymbologySupportedAsync(unsigned barcodeSymbology, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _RetrieveStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *operation);
	virtual STDMETHODIMP _GetSupportedProfiles(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _IsProfileSupported(HSTRING profile, bool *isSupported);
	virtual STDMETHODIMP _add_StatusUpdated(Foundation::TypedEventHandler<BarcodeScanner*, BarcodeScannerStatusUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StatusUpdated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBarcodeScanner_adaptor : X {
	union {
		struct : property {
			ptr<BarcodeScannerCapabilities> get() { BarcodeScannerCapabilities* value; hrcheck(enc(&IBarcodeScanner_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<BarcodeScannerCapabilities> operator()() { return get(); }
			operator ptr<BarcodeScannerCapabilities> () { return get(); }
			ptr<BarcodeScannerCapabilities> operator->() { return get(); }
		} Capabilities;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IBarcodeScanner_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BarcodeScanner>, ptr<BarcodeScannerStatusUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBarcodeScanner_adaptor::StatusUpdated)->_add_StatusUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBarcodeScanner_adaptor::StatusUpdated)->_remove_StatusUpdated(token)); }
		} StatusUpdated;
	};
	ptr<Foundation::IAsyncOperation<ptr<ClaimedBarcodeScanner>>> ClaimScannerAsync() { Foundation::IAsyncOperation<ClaimedBarcodeScanner*>* operation; hrcheck(X::get()->_ClaimScannerAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> CheckHealthAsync(UnifiedPosHealthCheckLevel level) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_CheckHealthAsync(level, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<unsigned>>>> GetSupportedSymbologiesAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<unsigned>*>* operation; hrcheck(X::get()->_GetSupportedSymbologiesAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> IsSymbologySupportedAsync(unsigned barcodeSymbology) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_IsSymbologySupportedAsync(barcodeSymbology, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> RetrieveStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* operation; hrcheck(X::get()->_RetrieveStatisticsAsync(to_abi(statisticsCategories), &operation)); return from_abi(operation); }
	ptr<Foundation::Collections::IVectorView<hstring>> GetSupportedProfiles() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(X::get()->_GetSupportedProfiles(&value)); return from_abi(value); }
	bool IsProfileSupported(hstring_ref profile) { bool isSupported; hrcheck(X::get()->_IsProfileSupported(profile, &isSupported)); return isSupported; }
	IBarcodeScanner_adaptor() {}
};
template<typename X> struct adapt<IBarcodeScanner, X> : Windows::Devices::PointOfService::IBarcodeScanner_adaptor<X> { typedef adapt IBarcodeScanner; };
struct IBarcodeScanner : IBarcodeScanner_raw, generate<IBarcodeScanner> {};

// BarcodeScanner
template<typename> struct BarcodeScanner_statics {
	static hstring GetDeviceSelector(PosConnectionTypes connectionTypes) { HSTRING value; hrcheck(get_activation_factory<BarcodeScanner, IBarcodeScannerStatics2>()->_GetDeviceSelectorWithConnectionTypes(connectionTypes, &value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<BarcodeScanner>>> GetDefaultAsync() { Foundation::IAsyncOperation<BarcodeScanner*>* result; hrcheck(get_activation_factory<BarcodeScanner, IBarcodeScannerStatics>()->_GetDefaultAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<BarcodeScanner>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<BarcodeScanner*>* result; hrcheck(get_activation_factory<BarcodeScanner, IBarcodeScannerStatics>()->_FromIdAsync(deviceId, &result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<BarcodeScanner, IBarcodeScannerStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
};

template<typename X> struct statics<BarcodeScanner, X> : X, Windows::Devices::PointOfService::BarcodeScanner_statics<void> {
	typedef typename X::root_type BarcodeScanner;
};
struct BarcodeScanner : generate<BarcodeScanner> {};

// IClaimedBarcodeScanner3
struct IClaimedBarcodeScanner3_raw : IInspectable {
	virtual STDMETHODIMP _ShowVideoPreviewAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _HideVideoPreview();
	virtual STDMETHODIMP _put_IsVideoPreviewShownOnEnable(bool value);
	virtual STDMETHODIMP _get_IsVideoPreviewShownOnEnable(bool *value);
};
template<typename X> struct IClaimedBarcodeScanner3_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedBarcodeScanner3_adaptor::IsVideoPreviewShownOnEnable)->_get_IsVideoPreviewShownOnEnable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IClaimedBarcodeScanner3_adaptor::IsVideoPreviewShownOnEnable)->_put_IsVideoPreviewShownOnEnable(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsVideoPreviewShownOnEnable;
	};
	ptr<Foundation::IAsyncOperation<bool>> ShowVideoPreviewAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_ShowVideoPreviewAsync(&operation)); return from_abi(operation); }
	void HideVideoPreview() { hrcheck(X::get()->_HideVideoPreview()); }
	IClaimedBarcodeScanner3_adaptor() {}
};
template<typename X> struct adapt<IClaimedBarcodeScanner3, X> : Windows::Devices::PointOfService::IClaimedBarcodeScanner3_adaptor<X> { typedef adapt IClaimedBarcodeScanner3; };
struct IClaimedBarcodeScanner3 : IClaimedBarcodeScanner3_raw, generate<IClaimedBarcodeScanner3> {};

// IClaimedBarcodeScanner2
struct IClaimedBarcodeScanner2_raw : IInspectable {
	virtual STDMETHODIMP _GetSymbologyAttributesAsync(unsigned barcodeSymbology, Foundation::IAsyncOperation<BarcodeSymbologyAttributes*>* *result);
	virtual STDMETHODIMP _SetSymbologyAttributesAsync(unsigned barcodeSymbology, BarcodeSymbologyAttributes* attributes, Foundation::IAsyncOperation<bool>* *result);
};
template<typename X> struct IClaimedBarcodeScanner2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<BarcodeSymbologyAttributes>>> GetSymbologyAttributesAsync(unsigned barcodeSymbology) { Foundation::IAsyncOperation<BarcodeSymbologyAttributes*>* result; hrcheck(X::get()->_GetSymbologyAttributesAsync(barcodeSymbology, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> SetSymbologyAttributesAsync(unsigned barcodeSymbology, pptr<BarcodeSymbologyAttributes> attributes) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_SetSymbologyAttributesAsync(barcodeSymbology, attributes, &result)); return from_abi(result); }
};
template<typename X> struct adapt<IClaimedBarcodeScanner2, X> : Windows::Devices::PointOfService::IClaimedBarcodeScanner2_adaptor<X> { typedef adapt IClaimedBarcodeScanner2; };
struct IClaimedBarcodeScanner2 : IClaimedBarcodeScanner2_raw, generate<IClaimedBarcodeScanner2> {};

// IClaimedBarcodeScanner1
struct IClaimedBarcodeScanner1_raw : IInspectable {
	virtual STDMETHODIMP _StartSoftwareTriggerAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _StopSoftwareTriggerAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IClaimedBarcodeScanner1_adaptor : X {
	ptr<Foundation::IAsyncAction> StartSoftwareTriggerAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_StartSoftwareTriggerAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> StopSoftwareTriggerAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_StopSoftwareTriggerAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IClaimedBarcodeScanner1, X> : Windows::Devices::PointOfService::IClaimedBarcodeScanner1_adaptor<X> { typedef adapt IClaimedBarcodeScanner1; };
struct IClaimedBarcodeScanner1 : IClaimedBarcodeScanner1_raw, generate<IClaimedBarcodeScanner1> {};

// IClaimedBarcodeScanner
struct IClaimedBarcodeScanner_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsDisabledOnDataReceived(bool value);
	virtual STDMETHODIMP _get_IsDisabledOnDataReceived(bool *value);
	virtual STDMETHODIMP _put_IsDecodeDataEnabled(bool value);
	virtual STDMETHODIMP _get_IsDecodeDataEnabled(bool *value);
	virtual STDMETHODIMP _EnableAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _DisableAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _RetainDevice();
	virtual STDMETHODIMP _SetActiveSymbologiesAsync(Foundation::Collections::IIterable<unsigned>* symbologies, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ResetStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _UpdateStatisticsAsync(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, HSTRING>*>* statistics, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _SetActiveProfileAsync(HSTRING profile, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _add_DataReceived(Foundation::TypedEventHandler<ClaimedBarcodeScanner*, BarcodeScannerDataReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DataReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TriggerPressed(Foundation::EventHandler<ClaimedBarcodeScanner*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TriggerPressed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_TriggerReleased(Foundation::EventHandler<ClaimedBarcodeScanner*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_TriggerReleased(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ReleaseDeviceRequested(Foundation::EventHandler<ClaimedBarcodeScanner*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReleaseDeviceRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ImagePreviewReceived(Foundation::TypedEventHandler<ClaimedBarcodeScanner*, BarcodeScannerImagePreviewReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ImagePreviewReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ErrorOccurred(Foundation::TypedEventHandler<ClaimedBarcodeScanner*, BarcodeScannerErrorOccurredEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ErrorOccurred(Foundation::EventRegistrationToken token);
};
template<typename X> struct IClaimedBarcodeScanner_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::IsDecodeDataEnabled)->_get_IsDecodeDataEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::IsDecodeDataEnabled)->_put_IsDecodeDataEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDecodeDataEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::IsDisabledOnDataReceived)->_get_IsDisabledOnDataReceived(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::IsDisabledOnDataReceived)->_put_IsDisabledOnDataReceived(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDisabledOnDataReceived;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedBarcodeScanner>, ptr<BarcodeScannerDataReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::DataReceived)->_add_DataReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::DataReceived)->_remove_DataReceived(token)); }
		} DataReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedBarcodeScanner>, ptr<BarcodeScannerErrorOccurredEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::ErrorOccurred)->_add_ErrorOccurred(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::ErrorOccurred)->_remove_ErrorOccurred(token)); }
		} ErrorOccurred;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedBarcodeScanner>, ptr<BarcodeScannerImagePreviewReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::ImagePreviewReceived)->_add_ImagePreviewReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::ImagePreviewReceived)->_remove_ImagePreviewReceived(token)); }
		} ImagePreviewReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<ClaimedBarcodeScanner>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::ReleaseDeviceRequested)->_add_ReleaseDeviceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::ReleaseDeviceRequested)->_remove_ReleaseDeviceRequested(token)); }
		} ReleaseDeviceRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<ClaimedBarcodeScanner>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::TriggerPressed)->_add_TriggerPressed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::TriggerPressed)->_remove_TriggerPressed(token)); }
		} TriggerPressed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<ClaimedBarcodeScanner>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedBarcodeScanner_adaptor::TriggerReleased)->_add_TriggerReleased(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedBarcodeScanner_adaptor::TriggerReleased)->_remove_TriggerReleased(token)); }
		} TriggerReleased;
	};
	ptr<Foundation::IAsyncAction> EnableAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_EnableAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DisableAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_DisableAsync(&result)); return from_abi(result); }
	void RetainDevice() { hrcheck(X::get()->_RetainDevice()); }
	ptr<Foundation::IAsyncAction> SetActiveSymbologiesAsync(pptr<Foundation::Collections::IIterable<unsigned>> symbologies) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SetActiveSymbologiesAsync(to_abi(symbologies), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ResetStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ResetStatisticsAsync(to_abi(statisticsCategories), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> UpdateStatisticsAsync(pptr<Foundation::Collections::IIterable<ptr<Foundation::Collections::IKeyValuePair<hstring, hstring>>>> statistics) { Foundation::IAsyncAction* result; hrcheck(X::get()->_UpdateStatisticsAsync(to_abi(statistics), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> SetActiveProfileAsync(hstring_ref profile) { Foundation::IAsyncAction* result; hrcheck(X::get()->_SetActiveProfileAsync(profile, &result)); return from_abi(result); }
	IClaimedBarcodeScanner_adaptor() {}
};
template<typename X> struct adapt<IClaimedBarcodeScanner, X> : Windows::Devices::PointOfService::IClaimedBarcodeScanner_adaptor<X> { typedef adapt IClaimedBarcodeScanner; };
struct IClaimedBarcodeScanner : IClaimedBarcodeScanner_raw, generate<IClaimedBarcodeScanner> {};

// ClaimedBarcodeScanner
template<typename X> struct statics<ClaimedBarcodeScanner, X> : X {
	typedef typename X::root_type ClaimedBarcodeScanner;
};
struct ClaimedBarcodeScanner : generate<ClaimedBarcodeScanner> {};

// IMagneticStripeReaderEncryptionAlgorithmsStatics
struct IMagneticStripeReaderEncryptionAlgorithmsStatics : IInspectable {
	virtual STDMETHODIMP _get_None(unsigned *value);
	virtual STDMETHODIMP _get_TripleDesDukpt(unsigned *value);
	virtual STDMETHODIMP _get_ExtendedBase(unsigned *value);
};

// MagneticStripeReaderEncryptionAlgorithms
template<typename> struct MagneticStripeReaderEncryptionAlgorithms_statics {
	static struct _ExtendedBase : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>()->_get_ExtendedBase(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ExtendedBase;
	static struct _None : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>()->_get_None(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} None;
	static struct _TripleDesDukpt : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>()->_get_TripleDesDukpt(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TripleDesDukpt;
};
template<typename X> typename MagneticStripeReaderEncryptionAlgorithms_statics<X>::_ExtendedBase MagneticStripeReaderEncryptionAlgorithms_statics<X>::ExtendedBase;
template<typename X> typename MagneticStripeReaderEncryptionAlgorithms_statics<X>::_None MagneticStripeReaderEncryptionAlgorithms_statics<X>::None;
template<typename X> typename MagneticStripeReaderEncryptionAlgorithms_statics<X>::_TripleDesDukpt MagneticStripeReaderEncryptionAlgorithms_statics<X>::TripleDesDukpt;

template<typename X> struct statics<MagneticStripeReaderEncryptionAlgorithms, X> : X, Windows::Devices::PointOfService::MagneticStripeReaderEncryptionAlgorithms_statics<void> {
	typedef typename X::root_type MagneticStripeReaderEncryptionAlgorithms;
};
struct MagneticStripeReaderEncryptionAlgorithms : generate<MagneticStripeReaderEncryptionAlgorithms> {};

// IMagneticStripeReaderCardTypesStatics
struct IMagneticStripeReaderCardTypesStatics : IInspectable {
	virtual STDMETHODIMP _get_Unknown(unsigned *value);
	virtual STDMETHODIMP _get_Bank(unsigned *value);
	virtual STDMETHODIMP _get_Aamva(unsigned *value);
	virtual STDMETHODIMP _get_ExtendedBase(unsigned *value);
};

// MagneticStripeReaderCardTypes
template<typename> struct MagneticStripeReaderCardTypes_statics {
	static struct _Aamva : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>()->_get_Aamva(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Aamva;
	static struct _Bank : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>()->_get_Bank(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Bank;
	static struct _ExtendedBase : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>()->_get_ExtendedBase(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ExtendedBase;
	static struct _Unknown : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>()->_get_Unknown(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Unknown;
};
template<typename X> typename MagneticStripeReaderCardTypes_statics<X>::_Aamva MagneticStripeReaderCardTypes_statics<X>::Aamva;
template<typename X> typename MagneticStripeReaderCardTypes_statics<X>::_Bank MagneticStripeReaderCardTypes_statics<X>::Bank;
template<typename X> typename MagneticStripeReaderCardTypes_statics<X>::_ExtendedBase MagneticStripeReaderCardTypes_statics<X>::ExtendedBase;
template<typename X> typename MagneticStripeReaderCardTypes_statics<X>::_Unknown MagneticStripeReaderCardTypes_statics<X>::Unknown;

template<typename X> struct statics<MagneticStripeReaderCardTypes, X> : X, Windows::Devices::PointOfService::MagneticStripeReaderCardTypes_statics<void> {
	typedef typename X::root_type MagneticStripeReaderCardTypes;
};
struct MagneticStripeReaderCardTypes : generate<MagneticStripeReaderCardTypes> {};

// IMagneticStripeReaderTrackData
struct IMagneticStripeReaderTrackData_raw : IInspectable {
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_DiscretionaryData(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_EncryptedData(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IMagneticStripeReaderTrackData_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMagneticStripeReaderTrackData_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Data;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMagneticStripeReaderTrackData_adaptor::DiscretionaryData)->_get_DiscretionaryData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} DiscretionaryData;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMagneticStripeReaderTrackData_adaptor::EncryptedData)->_get_EncryptedData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} EncryptedData;
	};
	IMagneticStripeReaderTrackData_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderTrackData, X> : Windows::Devices::PointOfService::IMagneticStripeReaderTrackData_adaptor<X> { typedef adapt IMagneticStripeReaderTrackData; };
struct IMagneticStripeReaderTrackData : IMagneticStripeReaderTrackData_raw, generate<IMagneticStripeReaderTrackData> {};

// IMagneticStripeReaderReport
struct IMagneticStripeReaderReport_raw : IInspectable {
	virtual STDMETHODIMP _get_CardType(unsigned *value);
	virtual STDMETHODIMP _get_Track1(MagneticStripeReaderTrackData* *value);
	virtual STDMETHODIMP _get_Track2(MagneticStripeReaderTrackData* *value);
	virtual STDMETHODIMP _get_Track3(MagneticStripeReaderTrackData* *value);
	virtual STDMETHODIMP _get_Track4(MagneticStripeReaderTrackData* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<HSTRING, HSTRING>* *value);
	virtual STDMETHODIMP _get_CardAuthenticationData(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_CardAuthenticationDataLength(unsigned *value);
	virtual STDMETHODIMP _get_AdditionalSecurityInformation(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IMagneticStripeReaderReport_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::AdditionalSecurityInformation)->_get_AdditionalSecurityInformation(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} AdditionalSecurityInformation;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::CardAuthenticationData)->_get_CardAuthenticationData(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} CardAuthenticationData;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::CardAuthenticationDataLength)->_get_CardAuthenticationDataLength(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CardAuthenticationDataLength;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::CardType)->_get_CardType(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} CardType;
		struct : property {
			ptr<Foundation::Collections::IMapView<hstring, hstring>> get() { Foundation::Collections::IMapView<HSTRING, HSTRING>* value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<hstring, hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<hstring, hstring>> () { return get(); }
			ptr<Foundation::Collections::IMapView<hstring, hstring>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<MagneticStripeReaderTrackData> get() { MagneticStripeReaderTrackData* value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::Track1)->_get_Track1(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderTrackData> operator()() { return get(); }
			operator ptr<MagneticStripeReaderTrackData> () { return get(); }
			ptr<MagneticStripeReaderTrackData> operator->() { return get(); }
		} Track1;
		struct : property {
			ptr<MagneticStripeReaderTrackData> get() { MagneticStripeReaderTrackData* value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::Track2)->_get_Track2(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderTrackData> operator()() { return get(); }
			operator ptr<MagneticStripeReaderTrackData> () { return get(); }
			ptr<MagneticStripeReaderTrackData> operator->() { return get(); }
		} Track2;
		struct : property {
			ptr<MagneticStripeReaderTrackData> get() { MagneticStripeReaderTrackData* value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::Track3)->_get_Track3(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderTrackData> operator()() { return get(); }
			operator ptr<MagneticStripeReaderTrackData> () { return get(); }
			ptr<MagneticStripeReaderTrackData> operator->() { return get(); }
		} Track3;
		struct : property {
			ptr<MagneticStripeReaderTrackData> get() { MagneticStripeReaderTrackData* value; hrcheck(enc(&IMagneticStripeReaderReport_adaptor::Track4)->_get_Track4(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderTrackData> operator()() { return get(); }
			operator ptr<MagneticStripeReaderTrackData> () { return get(); }
			ptr<MagneticStripeReaderTrackData> operator->() { return get(); }
		} Track4;
	};
	IMagneticStripeReaderReport_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderReport, X> : Windows::Devices::PointOfService::IMagneticStripeReaderReport_adaptor<X> { typedef adapt IMagneticStripeReaderReport; };
struct IMagneticStripeReaderReport : IMagneticStripeReaderReport_raw, generate<IMagneticStripeReaderReport> {};

// MagneticStripeReaderTrackData
template<typename X> struct statics<MagneticStripeReaderTrackData, X> : X {
	typedef typename X::root_type MagneticStripeReaderTrackData;
};
struct MagneticStripeReaderTrackData : generate<MagneticStripeReaderTrackData> {};

// IMagneticStripeReaderBankCardDataReceivedEventArgs
struct IMagneticStripeReaderBankCardDataReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Report(MagneticStripeReaderReport* *value);
	virtual STDMETHODIMP _get_AccountNumber(HSTRING *value);
	virtual STDMETHODIMP _get_ExpirationDate(HSTRING *value);
	virtual STDMETHODIMP _get_ServiceCode(HSTRING *value);
	virtual STDMETHODIMP _get_Title(HSTRING *value);
	virtual STDMETHODIMP _get_FirstName(HSTRING *value);
	virtual STDMETHODIMP _get_MiddleInitial(HSTRING *value);
	virtual STDMETHODIMP _get_Surname(HSTRING *value);
	virtual STDMETHODIMP _get_Suffix(HSTRING *value);
};
template<typename X> struct IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::AccountNumber)->_get_AccountNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AccountNumber;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::ExpirationDate)->_get_ExpirationDate(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ExpirationDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::FirstName)->_get_FirstName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FirstName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::MiddleInitial)->_get_MiddleInitial(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MiddleInitial;
		struct : property {
			ptr<MagneticStripeReaderReport> get() { MagneticStripeReaderReport* value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::Report)->_get_Report(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderReport> operator()() { return get(); }
			operator ptr<MagneticStripeReaderReport> () { return get(); }
			ptr<MagneticStripeReaderReport> operator->() { return get(); }
		} Report;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::ServiceCode)->_get_ServiceCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ServiceCode;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::Suffix)->_get_Suffix(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Suffix;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::Surname)->_get_Surname(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Surname;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor::Title)->_get_Title(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Title;
	};
	IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderBankCardDataReceivedEventArgs, X> : Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs_adaptor<X> { typedef adapt IMagneticStripeReaderBankCardDataReceivedEventArgs; };
struct IMagneticStripeReaderBankCardDataReceivedEventArgs : IMagneticStripeReaderBankCardDataReceivedEventArgs_raw, generate<IMagneticStripeReaderBankCardDataReceivedEventArgs> {};

// MagneticStripeReaderReport
template<typename X> struct statics<MagneticStripeReaderReport, X> : X {
	typedef typename X::root_type MagneticStripeReaderReport;
};
struct MagneticStripeReaderReport : generate<MagneticStripeReaderReport> {};

// IMagneticStripeReaderAamvaCardDataReceivedEventArgs
struct IMagneticStripeReaderAamvaCardDataReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Report(MagneticStripeReaderReport* *value);
	virtual STDMETHODIMP _get_LicenseNumber(HSTRING *value);
	virtual STDMETHODIMP _get_ExpirationDate(HSTRING *value);
	virtual STDMETHODIMP _get_Restrictions(HSTRING *value);
	virtual STDMETHODIMP _get_Class(HSTRING *value);
	virtual STDMETHODIMP _get_Endorsements(HSTRING *value);
	virtual STDMETHODIMP _get_BirthDate(HSTRING *value);
	virtual STDMETHODIMP _get_FirstName(HSTRING *value);
	virtual STDMETHODIMP _get_Surname(HSTRING *value);
	virtual STDMETHODIMP _get_Suffix(HSTRING *value);
	virtual STDMETHODIMP _get_Gender(HSTRING *value);
	virtual STDMETHODIMP _get_HairColor(HSTRING *value);
	virtual STDMETHODIMP _get_EyeColor(HSTRING *value);
	virtual STDMETHODIMP _get_Height(HSTRING *value);
	virtual STDMETHODIMP _get_Weight(HSTRING *value);
	virtual STDMETHODIMP _get_Address(HSTRING *value);
	virtual STDMETHODIMP _get_City(HSTRING *value);
	virtual STDMETHODIMP _get_State(HSTRING *value);
	virtual STDMETHODIMP _get_PostalCode(HSTRING *value);
};
template<typename X> struct IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Address)->_get_Address(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Address;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::BirthDate)->_get_BirthDate(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} BirthDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::City)->_get_City(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} City;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Class)->_get_Class(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Class;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Endorsements)->_get_Endorsements(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Endorsements;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::ExpirationDate)->_get_ExpirationDate(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ExpirationDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::EyeColor)->_get_EyeColor(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} EyeColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::FirstName)->_get_FirstName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} FirstName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Gender)->_get_Gender(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Gender;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::HairColor)->_get_HairColor(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} HairColor;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Height)->_get_Height(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Height;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::LicenseNumber)->_get_LicenseNumber(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} LicenseNumber;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::PostalCode)->_get_PostalCode(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PostalCode;
		struct : property {
			ptr<MagneticStripeReaderReport> get() { MagneticStripeReaderReport* value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Report)->_get_Report(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderReport> operator()() { return get(); }
			operator ptr<MagneticStripeReaderReport> () { return get(); }
			ptr<MagneticStripeReaderReport> operator->() { return get(); }
		} Report;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Restrictions)->_get_Restrictions(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Restrictions;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::State)->_get_State(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} State;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Suffix)->_get_Suffix(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Suffix;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Surname)->_get_Surname(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Surname;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor::Weight)->_get_Weight(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Weight;
	};
	IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderAamvaCardDataReceivedEventArgs, X> : Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs_adaptor<X> { typedef adapt IMagneticStripeReaderAamvaCardDataReceivedEventArgs; };
struct IMagneticStripeReaderAamvaCardDataReceivedEventArgs : IMagneticStripeReaderAamvaCardDataReceivedEventArgs_raw, generate<IMagneticStripeReaderAamvaCardDataReceivedEventArgs> {};

// IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs
struct IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Report(MagneticStripeReaderReport* *value);
};
template<typename X> struct IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<MagneticStripeReaderReport> get() { MagneticStripeReaderReport* value; hrcheck(enc(&IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs_adaptor::Report)->_get_Report(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderReport> operator()() { return get(); }
			operator ptr<MagneticStripeReaderReport> () { return get(); }
			ptr<MagneticStripeReaderReport> operator->() { return get(); }
		} Report;
	};
	IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs, X> : Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs_adaptor<X> { typedef adapt IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs; };
struct IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs : IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs_raw, generate<IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> {};

// IMagneticStripeReaderErrorOccurredEventArgs
struct IMagneticStripeReaderErrorOccurredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Track1Status(MagneticStripeReaderTrackErrorType *value);
	virtual STDMETHODIMP _get_Track2Status(MagneticStripeReaderTrackErrorType *value);
	virtual STDMETHODIMP _get_Track3Status(MagneticStripeReaderTrackErrorType *value);
	virtual STDMETHODIMP _get_Track4Status(MagneticStripeReaderTrackErrorType *value);
	virtual STDMETHODIMP _get_ErrorData(UnifiedPosErrorData* *value);
	virtual STDMETHODIMP _get_PartialInputData(MagneticStripeReaderReport* *value);
};
template<typename X> struct IMagneticStripeReaderErrorOccurredEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<UnifiedPosErrorData> get() { UnifiedPosErrorData* value; hrcheck(enc(&IMagneticStripeReaderErrorOccurredEventArgs_adaptor::ErrorData)->_get_ErrorData(&value)); return from_abi(value); }
			ptr<UnifiedPosErrorData> operator()() { return get(); }
			operator ptr<UnifiedPosErrorData> () { return get(); }
			ptr<UnifiedPosErrorData> operator->() { return get(); }
		} ErrorData;
		struct : property {
			ptr<MagneticStripeReaderReport> get() { MagneticStripeReaderReport* value; hrcheck(enc(&IMagneticStripeReaderErrorOccurredEventArgs_adaptor::PartialInputData)->_get_PartialInputData(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderReport> operator()() { return get(); }
			operator ptr<MagneticStripeReaderReport> () { return get(); }
			ptr<MagneticStripeReaderReport> operator->() { return get(); }
		} PartialInputData;
		struct : property {
			MagneticStripeReaderTrackErrorType get() { MagneticStripeReaderTrackErrorType value; hrcheck(enc(&IMagneticStripeReaderErrorOccurredEventArgs_adaptor::Track1Status)->_get_Track1Status(&value)); return value; }
			MagneticStripeReaderTrackErrorType operator()() { return get(); }
			operator MagneticStripeReaderTrackErrorType () { return get(); }
		} Track1Status;
		struct : property {
			MagneticStripeReaderTrackErrorType get() { MagneticStripeReaderTrackErrorType value; hrcheck(enc(&IMagneticStripeReaderErrorOccurredEventArgs_adaptor::Track2Status)->_get_Track2Status(&value)); return value; }
			MagneticStripeReaderTrackErrorType operator()() { return get(); }
			operator MagneticStripeReaderTrackErrorType () { return get(); }
		} Track2Status;
		struct : property {
			MagneticStripeReaderTrackErrorType get() { MagneticStripeReaderTrackErrorType value; hrcheck(enc(&IMagneticStripeReaderErrorOccurredEventArgs_adaptor::Track3Status)->_get_Track3Status(&value)); return value; }
			MagneticStripeReaderTrackErrorType operator()() { return get(); }
			operator MagneticStripeReaderTrackErrorType () { return get(); }
		} Track3Status;
		struct : property {
			MagneticStripeReaderTrackErrorType get() { MagneticStripeReaderTrackErrorType value; hrcheck(enc(&IMagneticStripeReaderErrorOccurredEventArgs_adaptor::Track4Status)->_get_Track4Status(&value)); return value; }
			MagneticStripeReaderTrackErrorType operator()() { return get(); }
			operator MagneticStripeReaderTrackErrorType () { return get(); }
		} Track4Status;
	};
	IMagneticStripeReaderErrorOccurredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderErrorOccurredEventArgs, X> : Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs_adaptor<X> { typedef adapt IMagneticStripeReaderErrorOccurredEventArgs; };
struct IMagneticStripeReaderErrorOccurredEventArgs : IMagneticStripeReaderErrorOccurredEventArgs_raw, generate<IMagneticStripeReaderErrorOccurredEventArgs> {};

// IMagneticStripeReaderStatusUpdatedEventArgs
struct IMagneticStripeReaderStatusUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(MagneticStripeReaderStatus *value);
	virtual STDMETHODIMP _get_ExtendedStatus(unsigned *value);
};
template<typename X> struct IMagneticStripeReaderStatusUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagneticStripeReaderStatusUpdatedEventArgs_adaptor::ExtendedStatus)->_get_ExtendedStatus(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ExtendedStatus;
		struct : property {
			MagneticStripeReaderStatus get() { MagneticStripeReaderStatus value; hrcheck(enc(&IMagneticStripeReaderStatusUpdatedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			MagneticStripeReaderStatus operator()() { return get(); }
			operator MagneticStripeReaderStatus () { return get(); }
		} Status;
	};
	IMagneticStripeReaderStatusUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderStatusUpdatedEventArgs, X> : Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs_adaptor<X> { typedef adapt IMagneticStripeReaderStatusUpdatedEventArgs; };
struct IMagneticStripeReaderStatusUpdatedEventArgs : IMagneticStripeReaderStatusUpdatedEventArgs_raw, generate<IMagneticStripeReaderStatusUpdatedEventArgs> {};

// MagneticStripeReaderBankCardDataReceivedEventArgs
template<typename X> struct statics<MagneticStripeReaderBankCardDataReceivedEventArgs, X> : X {
	typedef typename X::root_type MagneticStripeReaderBankCardDataReceivedEventArgs;
};
struct MagneticStripeReaderBankCardDataReceivedEventArgs : generate<MagneticStripeReaderBankCardDataReceivedEventArgs> {};

// MagneticStripeReaderAamvaCardDataReceivedEventArgs
template<typename X> struct statics<MagneticStripeReaderAamvaCardDataReceivedEventArgs, X> : X {
	typedef typename X::root_type MagneticStripeReaderAamvaCardDataReceivedEventArgs;
};
struct MagneticStripeReaderAamvaCardDataReceivedEventArgs : generate<MagneticStripeReaderAamvaCardDataReceivedEventArgs> {};

// MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs
template<typename X> struct statics<MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs, X> : X {
	typedef typename X::root_type MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
};
struct MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs : generate<MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> {};

// MagneticStripeReaderErrorOccurredEventArgs
template<typename X> struct statics<MagneticStripeReaderErrorOccurredEventArgs, X> : X {
	typedef typename X::root_type MagneticStripeReaderErrorOccurredEventArgs;
};
struct MagneticStripeReaderErrorOccurredEventArgs : generate<MagneticStripeReaderErrorOccurredEventArgs> {};

// MagneticStripeReaderStatusUpdatedEventArgs
template<typename X> struct statics<MagneticStripeReaderStatusUpdatedEventArgs, X> : X {
	typedef typename X::root_type MagneticStripeReaderStatusUpdatedEventArgs;
};
struct MagneticStripeReaderStatusUpdatedEventArgs : generate<MagneticStripeReaderStatusUpdatedEventArgs> {};

// IMagneticStripeReaderCapabilities
struct IMagneticStripeReaderCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_CardAuthentication(HSTRING *value);
	virtual STDMETHODIMP _get_SupportedEncryptionAlgorithms(unsigned *value);
	virtual STDMETHODIMP _get_AuthenticationLevel(MagneticStripeReaderAuthenticationLevel *value);
	virtual STDMETHODIMP _get_IsIsoSupported(bool *value);
	virtual STDMETHODIMP _get_IsJisOneSupported(bool *value);
	virtual STDMETHODIMP _get_IsJisTwoSupported(bool *value);
	virtual STDMETHODIMP _get_PowerReportingType(UnifiedPosPowerReportingType *value);
	virtual STDMETHODIMP _get_IsStatisticsReportingSupported(bool *value);
	virtual STDMETHODIMP _get_IsStatisticsUpdatingSupported(bool *value);
	virtual STDMETHODIMP _get_IsTrackDataMaskingSupported(bool *value);
	virtual STDMETHODIMP _get_IsTransmitSentinelsSupported(bool *value);
};
template<typename X> struct IMagneticStripeReaderCapabilities_adaptor : X {
	union {
		struct : property {
			MagneticStripeReaderAuthenticationLevel get() { MagneticStripeReaderAuthenticationLevel value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::AuthenticationLevel)->_get_AuthenticationLevel(&value)); return value; }
			MagneticStripeReaderAuthenticationLevel operator()() { return get(); }
			operator MagneticStripeReaderAuthenticationLevel () { return get(); }
		} AuthenticationLevel;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::CardAuthentication)->_get_CardAuthentication(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} CardAuthentication;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::IsIsoSupported)->_get_IsIsoSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsIsoSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::IsJisOneSupported)->_get_IsJisOneSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsJisOneSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::IsJisTwoSupported)->_get_IsJisTwoSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsJisTwoSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::IsStatisticsReportingSupported)->_get_IsStatisticsReportingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsReportingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::IsStatisticsUpdatingSupported)->_get_IsStatisticsUpdatingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsUpdatingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::IsTrackDataMaskingSupported)->_get_IsTrackDataMaskingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTrackDataMaskingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::IsTransmitSentinelsSupported)->_get_IsTransmitSentinelsSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTransmitSentinelsSupported;
		struct : property {
			UnifiedPosPowerReportingType get() { UnifiedPosPowerReportingType value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::PowerReportingType)->_get_PowerReportingType(&value)); return value; }
			UnifiedPosPowerReportingType operator()() { return get(); }
			operator UnifiedPosPowerReportingType () { return get(); }
		} PowerReportingType;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IMagneticStripeReaderCapabilities_adaptor::SupportedEncryptionAlgorithms)->_get_SupportedEncryptionAlgorithms(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SupportedEncryptionAlgorithms;
	};
	IMagneticStripeReaderCapabilities_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReaderCapabilities, X> : Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities_adaptor<X> { typedef adapt IMagneticStripeReaderCapabilities; };
struct IMagneticStripeReaderCapabilities : IMagneticStripeReaderCapabilities_raw, generate<IMagneticStripeReaderCapabilities> {};

// MagneticStripeReaderCapabilities
template<typename X> struct statics<MagneticStripeReaderCapabilities, X> : X {
	typedef typename X::root_type MagneticStripeReaderCapabilities;
};
struct MagneticStripeReaderCapabilities : generate<MagneticStripeReaderCapabilities> {};

// IClaimedMagneticStripeReader
struct IClaimedMagneticStripeReader_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_IsDisabledOnDataReceived(bool value);
	virtual STDMETHODIMP _get_IsDisabledOnDataReceived(bool *value);
	virtual STDMETHODIMP _put_IsDecodeDataEnabled(bool value);
	virtual STDMETHODIMP _get_IsDecodeDataEnabled(bool *value);
	virtual STDMETHODIMP _get_IsDeviceAuthenticated(bool *value);
	virtual STDMETHODIMP _put_DataEncryptionAlgorithm(unsigned value);
	virtual STDMETHODIMP _get_DataEncryptionAlgorithm(unsigned *value);
	virtual STDMETHODIMP _put_TracksToRead(MagneticStripeReaderTrackIds value);
	virtual STDMETHODIMP _get_TracksToRead(MagneticStripeReaderTrackIds *value);
	virtual STDMETHODIMP _put_IsTransmitSentinelsEnabled(bool value);
	virtual STDMETHODIMP _get_IsTransmitSentinelsEnabled(bool *value);
	virtual STDMETHODIMP _EnableAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _DisableAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _RetainDevice();
	virtual STDMETHODIMP _SetErrorReportingType(MagneticStripeReaderErrorReportingType value);
	virtual STDMETHODIMP _RetrieveDeviceAuthenticationDataAsync(Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *operation);
	virtual STDMETHODIMP _AuthenticateDeviceAsync(unsigned responseTokenSize, unsigned char *responseToken, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _DeAuthenticateDeviceAsync(unsigned responseTokenSize, unsigned char *responseToken, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _UpdateKeyAsync(HSTRING key, HSTRING keyName, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ResetStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _UpdateStatisticsAsync(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, HSTRING>*>* statistics, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _add_BankCardDataReceived(Foundation::TypedEventHandler<ClaimedMagneticStripeReader*, MagneticStripeReaderBankCardDataReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BankCardDataReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_AamvaCardDataReceived(Foundation::TypedEventHandler<ClaimedMagneticStripeReader*, MagneticStripeReaderAamvaCardDataReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AamvaCardDataReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_VendorSpecificDataReceived(Foundation::TypedEventHandler<ClaimedMagneticStripeReader*, MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_VendorSpecificDataReceived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ReleaseDeviceRequested(Foundation::EventHandler<ClaimedMagneticStripeReader*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReleaseDeviceRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ErrorOccurred(Foundation::TypedEventHandler<ClaimedMagneticStripeReader*, MagneticStripeReaderErrorOccurredEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ErrorOccurred(Foundation::EventRegistrationToken token);
};
template<typename X> struct IClaimedMagneticStripeReader_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::DataEncryptionAlgorithm)->_get_DataEncryptionAlgorithm(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::DataEncryptionAlgorithm)->_put_DataEncryptionAlgorithm(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} DataEncryptionAlgorithm;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsDecodeDataEnabled)->_get_IsDecodeDataEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsDecodeDataEnabled)->_put_IsDecodeDataEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDecodeDataEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsDeviceAuthenticated)->_get_IsDeviceAuthenticated(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDeviceAuthenticated;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsDisabledOnDataReceived)->_get_IsDisabledOnDataReceived(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsDisabledOnDataReceived)->_put_IsDisabledOnDataReceived(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDisabledOnDataReceived;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsTransmitSentinelsEnabled)->_get_IsTransmitSentinelsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::IsTransmitSentinelsEnabled)->_put_IsTransmitSentinelsEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsTransmitSentinelsEnabled;
		struct : property {
			MagneticStripeReaderTrackIds get() { MagneticStripeReaderTrackIds value; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::TracksToRead)->_get_TracksToRead(&value)); return value; }
			MagneticStripeReaderTrackIds operator()() { return get(); }
			operator MagneticStripeReaderTrackIds () { return get(); }
			void put(MagneticStripeReaderTrackIds value) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::TracksToRead)->_put_TracksToRead(value)); }
			void operator=(MagneticStripeReaderTrackIds value) { put(value); }
			void operator()(MagneticStripeReaderTrackIds value) { put(value); }
		} TracksToRead;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedMagneticStripeReader>, ptr<MagneticStripeReaderAamvaCardDataReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::AamvaCardDataReceived)->_add_AamvaCardDataReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::AamvaCardDataReceived)->_remove_AamvaCardDataReceived(token)); }
		} AamvaCardDataReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedMagneticStripeReader>, ptr<MagneticStripeReaderBankCardDataReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::BankCardDataReceived)->_add_BankCardDataReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::BankCardDataReceived)->_remove_BankCardDataReceived(token)); }
		} BankCardDataReceived;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedMagneticStripeReader>, ptr<MagneticStripeReaderErrorOccurredEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::ErrorOccurred)->_add_ErrorOccurred(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::ErrorOccurred)->_remove_ErrorOccurred(token)); }
		} ErrorOccurred;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<ptr<ClaimedMagneticStripeReader>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::ReleaseDeviceRequested)->_add_ReleaseDeviceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::ReleaseDeviceRequested)->_remove_ReleaseDeviceRequested(token)); }
		} ReleaseDeviceRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedMagneticStripeReader>, ptr<MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::VendorSpecificDataReceived)->_add_VendorSpecificDataReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedMagneticStripeReader_adaptor::VendorSpecificDataReceived)->_remove_VendorSpecificDataReceived(token)); }
		} VendorSpecificDataReceived;
	};
	ptr<Foundation::IAsyncAction> EnableAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_EnableAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DisableAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_DisableAsync(&result)); return from_abi(result); }
	void RetainDevice() { hrcheck(X::get()->_RetainDevice()); }
	void SetErrorReportingType(MagneticStripeReaderErrorReportingType value) { hrcheck(X::get()->_SetErrorReportingType(value)); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> RetrieveDeviceAuthenticationDataAsync() { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* operation; hrcheck(X::get()->_RetrieveDeviceAuthenticationDataAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> AuthenticateDeviceAsync(const szarray<unsigned char>& responseToken) { Foundation::IAsyncAction* result; hrcheck(X::get()->_AuthenticateDeviceAsync(responseToken.size, to_abi(responseToken.p), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> DeAuthenticateDeviceAsync(const szarray<unsigned char>& responseToken) { Foundation::IAsyncAction* result; hrcheck(X::get()->_DeAuthenticateDeviceAsync(responseToken.size, to_abi(responseToken.p), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> UpdateKeyAsync(hstring_ref key, hstring_ref keyName) { Foundation::IAsyncAction* result; hrcheck(X::get()->_UpdateKeyAsync(key, keyName, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ResetStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ResetStatisticsAsync(to_abi(statisticsCategories), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> UpdateStatisticsAsync(pptr<Foundation::Collections::IIterable<ptr<Foundation::Collections::IKeyValuePair<hstring, hstring>>>> statistics) { Foundation::IAsyncAction* result; hrcheck(X::get()->_UpdateStatisticsAsync(to_abi(statistics), &result)); return from_abi(result); }
	IClaimedMagneticStripeReader_adaptor() {}
};
template<typename X> struct adapt<IClaimedMagneticStripeReader, X> : Windows::Devices::PointOfService::IClaimedMagneticStripeReader_adaptor<X> { typedef adapt IClaimedMagneticStripeReader; };
struct IClaimedMagneticStripeReader : IClaimedMagneticStripeReader_raw, generate<IClaimedMagneticStripeReader> {};

// ClaimedMagneticStripeReader
template<typename X> struct statics<ClaimedMagneticStripeReader, X> : X {
	typedef typename X::root_type ClaimedMagneticStripeReader;
};
struct ClaimedMagneticStripeReader : generate<ClaimedMagneticStripeReader> {};

// IMagneticStripeReaderStatics
struct IMagneticStripeReaderStatics : IInspectable {
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<MagneticStripeReader*>* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<MagneticStripeReader*>* *result);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
};

// IMagneticStripeReaderStatics2
struct IMagneticStripeReaderStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelectorWithConnectionTypes(PosConnectionTypes connectionTypes, HSTRING *value);
};

// IMagneticStripeReader
struct IMagneticStripeReader_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Capabilities(MagneticStripeReaderCapabilities* *value);
	virtual STDMETHODIMP _get_SupportedCardTypes(unsigned *valueSize, unsigned **value);
	virtual STDMETHODIMP _get_DeviceAuthenticationProtocol(MagneticStripeReaderAuthenticationProtocol *value);
	virtual STDMETHODIMP _CheckHealthAsync(UnifiedPosHealthCheckLevel level, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _ClaimReaderAsync(Foundation::IAsyncOperation<ClaimedMagneticStripeReader*>* *operation);
	virtual STDMETHODIMP _RetrieveStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* *operation);
	virtual STDMETHODIMP _GetErrorReportingType(MagneticStripeReaderErrorReportingType *value);
	virtual STDMETHODIMP _add_StatusUpdated(Foundation::TypedEventHandler<MagneticStripeReader*, MagneticStripeReaderStatusUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StatusUpdated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IMagneticStripeReader_adaptor : X {
	union {
		struct : property {
			ptr<MagneticStripeReaderCapabilities> get() { MagneticStripeReaderCapabilities* value; hrcheck(enc(&IMagneticStripeReader_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<MagneticStripeReaderCapabilities> operator()() { return get(); }
			operator ptr<MagneticStripeReaderCapabilities> () { return get(); }
			ptr<MagneticStripeReaderCapabilities> operator->() { return get(); }
		} Capabilities;
		struct : property {
			MagneticStripeReaderAuthenticationProtocol get() { MagneticStripeReaderAuthenticationProtocol value; hrcheck(enc(&IMagneticStripeReader_adaptor::DeviceAuthenticationProtocol)->_get_DeviceAuthenticationProtocol(&value)); return value; }
			MagneticStripeReaderAuthenticationProtocol operator()() { return get(); }
			operator MagneticStripeReaderAuthenticationProtocol () { return get(); }
		} DeviceAuthenticationProtocol;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMagneticStripeReader_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			szarray<unsigned> get() { szarray<unsigned> value; hrcheck(enc(&IMagneticStripeReader_adaptor::SupportedCardTypes)->_get_SupportedCardTypes(&value.size, &value.p)); return value; }
			szarray<unsigned> operator()() { return get(); }
			operator szarray<unsigned> () { return get(); }
		} SupportedCardTypes;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MagneticStripeReader>, ptr<MagneticStripeReaderStatusUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMagneticStripeReader_adaptor::StatusUpdated)->_add_StatusUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMagneticStripeReader_adaptor::StatusUpdated)->_remove_StatusUpdated(token)); }
		} StatusUpdated;
	};
	ptr<Foundation::IAsyncOperation<hstring>> CheckHealthAsync(UnifiedPosHealthCheckLevel level) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_CheckHealthAsync(level, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<ClaimedMagneticStripeReader>>> ClaimReaderAsync() { Foundation::IAsyncOperation<ClaimedMagneticStripeReader*>* operation; hrcheck(X::get()->_ClaimReaderAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IBuffer>>> RetrieveStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncOperation<Storage::Streams::IBuffer*>* operation; hrcheck(X::get()->_RetrieveStatisticsAsync(to_abi(statisticsCategories), &operation)); return from_abi(operation); }
	MagneticStripeReaderErrorReportingType GetErrorReportingType() { MagneticStripeReaderErrorReportingType value; hrcheck(X::get()->_GetErrorReportingType(&value)); return value; }
	IMagneticStripeReader_adaptor() {}
};
template<typename X> struct adapt<IMagneticStripeReader, X> : Windows::Devices::PointOfService::IMagneticStripeReader_adaptor<X> { typedef adapt IMagneticStripeReader; };
struct IMagneticStripeReader : IMagneticStripeReader_raw, generate<IMagneticStripeReader> {};

// MagneticStripeReader
template<typename> struct MagneticStripeReader_statics {
	static hstring GetDeviceSelector(PosConnectionTypes connectionTypes) { HSTRING value; hrcheck(get_activation_factory<MagneticStripeReader, IMagneticStripeReaderStatics2>()->_GetDeviceSelectorWithConnectionTypes(connectionTypes, &value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<MagneticStripeReader>>> GetDefaultAsync() { Foundation::IAsyncOperation<MagneticStripeReader*>* result; hrcheck(get_activation_factory<MagneticStripeReader, IMagneticStripeReaderStatics>()->_GetDefaultAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<MagneticStripeReader>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<MagneticStripeReader*>* result; hrcheck(get_activation_factory<MagneticStripeReader, IMagneticStripeReaderStatics>()->_FromIdAsync(deviceId, &result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<MagneticStripeReader, IMagneticStripeReaderStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
};

template<typename X> struct statics<MagneticStripeReader, X> : X, Windows::Devices::PointOfService::MagneticStripeReader_statics<void> {
	typedef typename X::root_type MagneticStripeReader;
};
struct MagneticStripeReader : generate<MagneticStripeReader> {};

// IPosPrinterCharacterSetIdsStatics
struct IPosPrinterCharacterSetIdsStatics : IInspectable {
	virtual STDMETHODIMP _get_Utf16LE(unsigned *value);
	virtual STDMETHODIMP _get_Ascii(unsigned *value);
	virtual STDMETHODIMP _get_Ansi(unsigned *value);
};

// PosPrinterCharacterSetIds
template<typename> struct PosPrinterCharacterSetIds_statics {
	static struct _Ansi : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<PosPrinterCharacterSetIds, IPosPrinterCharacterSetIdsStatics>()->_get_Ansi(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ansi;
	static struct _Ascii : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<PosPrinterCharacterSetIds, IPosPrinterCharacterSetIdsStatics>()->_get_Ascii(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Ascii;
	static struct _Utf16LE : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<PosPrinterCharacterSetIds, IPosPrinterCharacterSetIdsStatics>()->_get_Utf16LE(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} Utf16LE;
};
template<typename X> typename PosPrinterCharacterSetIds_statics<X>::_Ansi PosPrinterCharacterSetIds_statics<X>::Ansi;
template<typename X> typename PosPrinterCharacterSetIds_statics<X>::_Ascii PosPrinterCharacterSetIds_statics<X>::Ascii;
template<typename X> typename PosPrinterCharacterSetIds_statics<X>::_Utf16LE PosPrinterCharacterSetIds_statics<X>::Utf16LE;

template<typename X> struct statics<PosPrinterCharacterSetIds, X> : X, Windows::Devices::PointOfService::PosPrinterCharacterSetIds_statics<void> {
	typedef typename X::root_type PosPrinterCharacterSetIds;
};
struct PosPrinterCharacterSetIds : generate<PosPrinterCharacterSetIds> {};

// ICommonPosPrintStationCapabilities
struct ICommonPosPrintStationCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_IsPrinterPresent(bool *value) = 0;
	virtual STDMETHODIMP _get_IsDualColorSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_ColorCartridgeCapabilities(PosPrinterColorCapabilities *value) = 0;
	virtual STDMETHODIMP _get_CartridgeSensors(PosPrinterCartridgeSensors *value) = 0;
	virtual STDMETHODIMP _get_IsBoldSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsItalicSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsUnderlineSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsDoubleHighPrintSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsDoubleWidePrintSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsDoubleHighDoubleWidePrintSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsPaperEmptySensorSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsPaperNearEndSensorSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_SupportedCharactersPerLine(Foundation::Collections::IVectorView<unsigned>* *value) = 0;
};
template<typename X> struct ICommonPosPrintStationCapabilities_adaptor : X {
	union {
		struct : property {
			PosPrinterCartridgeSensors get() { PosPrinterCartridgeSensors value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::CartridgeSensors)->_get_CartridgeSensors(&value)); return value; }
			PosPrinterCartridgeSensors operator()() { return get(); }
			operator PosPrinterCartridgeSensors () { return get(); }
		} CartridgeSensors;
		struct : property {
			PosPrinterColorCapabilities get() { PosPrinterColorCapabilities value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::ColorCartridgeCapabilities)->_get_ColorCartridgeCapabilities(&value)); return value; }
			PosPrinterColorCapabilities operator()() { return get(); }
			operator PosPrinterColorCapabilities () { return get(); }
		} ColorCartridgeCapabilities;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsBoldSupported)->_get_IsBoldSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBoldSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsDoubleHighDoubleWidePrintSupported)->_get_IsDoubleHighDoubleWidePrintSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDoubleHighDoubleWidePrintSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsDoubleHighPrintSupported)->_get_IsDoubleHighPrintSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDoubleHighPrintSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsDoubleWidePrintSupported)->_get_IsDoubleWidePrintSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDoubleWidePrintSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsDualColorSupported)->_get_IsDualColorSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDualColorSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsItalicSupported)->_get_IsItalicSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsItalicSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsPaperEmptySensorSupported)->_get_IsPaperEmptySensorSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPaperEmptySensorSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsPaperNearEndSensorSupported)->_get_IsPaperNearEndSensorSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPaperNearEndSensorSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsPrinterPresent)->_get_IsPrinterPresent(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPrinterPresent;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::IsUnderlineSupported)->_get_IsUnderlineSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsUnderlineSupported;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(enc(&ICommonPosPrintStationCapabilities_adaptor::SupportedCharactersPerLine)->_get_SupportedCharactersPerLine(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
		} SupportedCharactersPerLine;
	};
	ICommonPosPrintStationCapabilities_adaptor() {}
};
template<typename X> struct adapt<ICommonPosPrintStationCapabilities, X> : Windows::Devices::PointOfService::ICommonPosPrintStationCapabilities_adaptor<X> { typedef adapt ICommonPosPrintStationCapabilities; };
template<typename X> struct ICommonPosPrintStationCapabilities_unadaptor : X {
	STDMETHODIMP _get_IsPrinterPresent(bool *value) { return hrtry([&, this] { get_prop(value, IsPrinterPresent); }); }
	STDMETHODIMP _get_IsDualColorSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsDualColorSupported); }); }
	STDMETHODIMP _get_ColorCartridgeCapabilities(PosPrinterColorCapabilities *value) { return hrtry([&, this] { get_prop(value, ColorCartridgeCapabilities); }); }
	STDMETHODIMP _get_CartridgeSensors(PosPrinterCartridgeSensors *value) { return hrtry([&, this] { get_prop(value, CartridgeSensors); }); }
	STDMETHODIMP _get_IsBoldSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsBoldSupported); }); }
	STDMETHODIMP _get_IsItalicSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsItalicSupported); }); }
	STDMETHODIMP _get_IsUnderlineSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsUnderlineSupported); }); }
	STDMETHODIMP _get_IsDoubleHighPrintSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsDoubleHighPrintSupported); }); }
	STDMETHODIMP _get_IsDoubleWidePrintSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsDoubleWidePrintSupported); }); }
	STDMETHODIMP _get_IsDoubleHighDoubleWidePrintSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsDoubleHighDoubleWidePrintSupported); }); }
	STDMETHODIMP _get_IsPaperEmptySensorSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsPaperEmptySensorSupported); }); }
	STDMETHODIMP _get_IsPaperNearEndSensorSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsPaperNearEndSensorSupported); }); }
	STDMETHODIMP _get_SupportedCharactersPerLine(Foundation::Collections::IVectorView<unsigned>* *value) { return hrtry([&, this] { get_prop(value, SupportedCharactersPerLine); }); }
};
template<typename X> struct unadapt<ICommonPosPrintStationCapabilities, X> : Windows::Devices::PointOfService::ICommonPosPrintStationCapabilities_unadaptor<X> {};
struct ICommonPosPrintStationCapabilities : ICommonPosPrintStationCapabilities_raw, generate<ICommonPosPrintStationCapabilities> {};

// ICommonReceiptSlipCapabilities
struct ICommonReceiptSlipCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_IsBarcodeSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsBitmapSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsLeft90RotationSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsRight90RotationSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_Is180RotationSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_IsPrintAreaSupported(bool *value) = 0;
	virtual STDMETHODIMP _get_RuledLineCapabilities(PosPrinterRuledLineCapabilities *value) = 0;
	virtual STDMETHODIMP _get_SupportedBarcodeRotations(Foundation::Collections::IVectorView<PosPrinterRotation>* *value) = 0;
	virtual STDMETHODIMP _get_SupportedBitmapRotations(Foundation::Collections::IVectorView<PosPrinterRotation>* *value) = 0;
};
template<typename X> struct ICommonReceiptSlipCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::Is180RotationSupported)->_get_Is180RotationSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} Is180RotationSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::IsBarcodeSupported)->_get_IsBarcodeSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBarcodeSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::IsBitmapSupported)->_get_IsBitmapSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBitmapSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::IsLeft90RotationSupported)->_get_IsLeft90RotationSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsLeft90RotationSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::IsPrintAreaSupported)->_get_IsPrintAreaSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPrintAreaSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::IsRight90RotationSupported)->_get_IsRight90RotationSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsRight90RotationSupported;
		struct : property {
			PosPrinterRuledLineCapabilities get() { PosPrinterRuledLineCapabilities value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::RuledLineCapabilities)->_get_RuledLineCapabilities(&value)); return value; }
			PosPrinterRuledLineCapabilities operator()() { return get(); }
			operator PosPrinterRuledLineCapabilities () { return get(); }
		} RuledLineCapabilities;
		struct : property {
			ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> get() { Foundation::Collections::IVectorView<PosPrinterRotation>* value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::SupportedBarcodeRotations)->_get_SupportedBarcodeRotations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> operator->() { return get(); }
		} SupportedBarcodeRotations;
		struct : property {
			ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> get() { Foundation::Collections::IVectorView<PosPrinterRotation>* value; hrcheck(enc(&ICommonReceiptSlipCapabilities_adaptor::SupportedBitmapRotations)->_get_SupportedBitmapRotations(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<PosPrinterRotation>> operator->() { return get(); }
		} SupportedBitmapRotations;
	};
	ICommonReceiptSlipCapabilities_adaptor() {}
};
template<typename X> struct adapt<ICommonReceiptSlipCapabilities, X> : Windows::Devices::PointOfService::ICommonReceiptSlipCapabilities_adaptor<X> { typedef adapt ICommonReceiptSlipCapabilities; };
template<typename X> struct ICommonReceiptSlipCapabilities_unadaptor : X {
	STDMETHODIMP _get_IsBarcodeSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsBarcodeSupported); }); }
	STDMETHODIMP _get_IsBitmapSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsBitmapSupported); }); }
	STDMETHODIMP _get_IsLeft90RotationSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsLeft90RotationSupported); }); }
	STDMETHODIMP _get_IsRight90RotationSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsRight90RotationSupported); }); }
	STDMETHODIMP _get_Is180RotationSupported(bool *value) { return hrtry([&, this] { get_prop(value, Is180RotationSupported); }); }
	STDMETHODIMP _get_IsPrintAreaSupported(bool *value) { return hrtry([&, this] { get_prop(value, IsPrintAreaSupported); }); }
	STDMETHODIMP _get_RuledLineCapabilities(PosPrinterRuledLineCapabilities *value) { return hrtry([&, this] { get_prop(value, RuledLineCapabilities); }); }
	STDMETHODIMP _get_SupportedBarcodeRotations(Foundation::Collections::IVectorView<PosPrinterRotation>* *value) { return hrtry([&, this] { get_prop(value, SupportedBarcodeRotations); }); }
	STDMETHODIMP _get_SupportedBitmapRotations(Foundation::Collections::IVectorView<PosPrinterRotation>* *value) { return hrtry([&, this] { get_prop(value, SupportedBitmapRotations); }); }
};
template<typename X> struct unadapt<ICommonReceiptSlipCapabilities, X> : Windows::Devices::PointOfService::ICommonReceiptSlipCapabilities_unadaptor<X> {};
struct ICommonReceiptSlipCapabilities : ICommonReceiptSlipCapabilities_raw, generate<ICommonReceiptSlipCapabilities> {};

// IReceiptPrinterCapabilities
struct IReceiptPrinterCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_CanCutPaper(bool *value);
	virtual STDMETHODIMP _get_IsStampSupported(bool *value);
	virtual STDMETHODIMP _get_MarkFeedCapabilities(PosPrinterMarkFeedCapabilities *value);
};
template<typename X> struct IReceiptPrinterCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IReceiptPrinterCapabilities_adaptor::CanCutPaper)->_get_CanCutPaper(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanCutPaper;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IReceiptPrinterCapabilities_adaptor::IsStampSupported)->_get_IsStampSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStampSupported;
		struct : property {
			PosPrinterMarkFeedCapabilities get() { PosPrinterMarkFeedCapabilities value; hrcheck(enc(&IReceiptPrinterCapabilities_adaptor::MarkFeedCapabilities)->_get_MarkFeedCapabilities(&value)); return value; }
			PosPrinterMarkFeedCapabilities operator()() { return get(); }
			operator PosPrinterMarkFeedCapabilities () { return get(); }
		} MarkFeedCapabilities;
	};
	IReceiptPrinterCapabilities_adaptor() {}
};
template<typename X> struct adapt<IReceiptPrinterCapabilities, X> : Windows::Devices::PointOfService::IReceiptPrinterCapabilities_adaptor<X> { typedef adapt IReceiptPrinterCapabilities; };
struct IReceiptPrinterCapabilities : IReceiptPrinterCapabilities_raw, generate<IReceiptPrinterCapabilities> {};

// ReceiptPrinterCapabilities
template<typename X> struct statics<ReceiptPrinterCapabilities, X> : X {
	typedef typename X::root_type ReceiptPrinterCapabilities;
};
struct ReceiptPrinterCapabilities : generate<ReceiptPrinterCapabilities> {};

// ISlipPrinterCapabilities
struct ISlipPrinterCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_IsFullLengthSupported(bool *value);
	virtual STDMETHODIMP _get_IsBothSidesPrintingSupported(bool *value);
};
template<typename X> struct ISlipPrinterCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISlipPrinterCapabilities_adaptor::IsBothSidesPrintingSupported)->_get_IsBothSidesPrintingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBothSidesPrintingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISlipPrinterCapabilities_adaptor::IsFullLengthSupported)->_get_IsFullLengthSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsFullLengthSupported;
	};
	ISlipPrinterCapabilities_adaptor() {}
};
template<typename X> struct adapt<ISlipPrinterCapabilities, X> : Windows::Devices::PointOfService::ISlipPrinterCapabilities_adaptor<X> { typedef adapt ISlipPrinterCapabilities; };
struct ISlipPrinterCapabilities : ISlipPrinterCapabilities_raw, generate<ISlipPrinterCapabilities> {};

// SlipPrinterCapabilities
template<typename X> struct statics<SlipPrinterCapabilities, X> : X {
	typedef typename X::root_type SlipPrinterCapabilities;
};
struct SlipPrinterCapabilities : generate<SlipPrinterCapabilities> {};

// IJournalPrinterCapabilities
struct IJournalPrinterCapabilities : IInspectable, generate<IJournalPrinterCapabilities> {};

// JournalPrinterCapabilities
template<typename X> struct statics<JournalPrinterCapabilities, X> : X {
	typedef typename X::root_type JournalPrinterCapabilities;
};
struct JournalPrinterCapabilities : generate<JournalPrinterCapabilities> {};

// IPosPrinterCapabilities
struct IPosPrinterCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_PowerReportingType(UnifiedPosPowerReportingType *value);
	virtual STDMETHODIMP _get_IsStatisticsReportingSupported(bool *value);
	virtual STDMETHODIMP _get_IsStatisticsUpdatingSupported(bool *value);
	virtual STDMETHODIMP _get_DefaultCharacterSet(unsigned *value);
	virtual STDMETHODIMP _get_HasCoverSensor(bool *value);
	virtual STDMETHODIMP _get_CanMapCharacterSet(bool *value);
	virtual STDMETHODIMP _get_IsTransactionSupported(bool *value);
	virtual STDMETHODIMP _get_Receipt(ReceiptPrinterCapabilities* *value);
	virtual STDMETHODIMP _get_Slip(SlipPrinterCapabilities* *value);
	virtual STDMETHODIMP _get_Journal(JournalPrinterCapabilities* *value);
};
template<typename X> struct IPosPrinterCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::CanMapCharacterSet)->_get_CanMapCharacterSet(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanMapCharacterSet;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::DefaultCharacterSet)->_get_DefaultCharacterSet(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} DefaultCharacterSet;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::HasCoverSensor)->_get_HasCoverSensor(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasCoverSensor;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::IsStatisticsReportingSupported)->_get_IsStatisticsReportingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsReportingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::IsStatisticsUpdatingSupported)->_get_IsStatisticsUpdatingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsUpdatingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::IsTransactionSupported)->_get_IsTransactionSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsTransactionSupported;
		struct : property {
			ptr<JournalPrinterCapabilities> get() { JournalPrinterCapabilities* value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::Journal)->_get_Journal(&value)); return from_abi(value); }
			ptr<JournalPrinterCapabilities> operator()() { return get(); }
			operator ptr<JournalPrinterCapabilities> () { return get(); }
			ptr<JournalPrinterCapabilities> operator->() { return get(); }
		} Journal;
		struct : property {
			UnifiedPosPowerReportingType get() { UnifiedPosPowerReportingType value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::PowerReportingType)->_get_PowerReportingType(&value)); return value; }
			UnifiedPosPowerReportingType operator()() { return get(); }
			operator UnifiedPosPowerReportingType () { return get(); }
		} PowerReportingType;
		struct : property {
			ptr<ReceiptPrinterCapabilities> get() { ReceiptPrinterCapabilities* value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::Receipt)->_get_Receipt(&value)); return from_abi(value); }
			ptr<ReceiptPrinterCapabilities> operator()() { return get(); }
			operator ptr<ReceiptPrinterCapabilities> () { return get(); }
			ptr<ReceiptPrinterCapabilities> operator->() { return get(); }
		} Receipt;
		struct : property {
			ptr<SlipPrinterCapabilities> get() { SlipPrinterCapabilities* value; hrcheck(enc(&IPosPrinterCapabilities_adaptor::Slip)->_get_Slip(&value)); return from_abi(value); }
			ptr<SlipPrinterCapabilities> operator()() { return get(); }
			operator ptr<SlipPrinterCapabilities> () { return get(); }
			ptr<SlipPrinterCapabilities> operator->() { return get(); }
		} Slip;
	};
	IPosPrinterCapabilities_adaptor() {}
};
template<typename X> struct adapt<IPosPrinterCapabilities, X> : Windows::Devices::PointOfService::IPosPrinterCapabilities_adaptor<X> { typedef adapt IPosPrinterCapabilities; };
struct IPosPrinterCapabilities : IPosPrinterCapabilities_raw, generate<IPosPrinterCapabilities> {};

// PosPrinterCapabilities
template<typename X> struct statics<PosPrinterCapabilities, X> : X {
	typedef typename X::root_type PosPrinterCapabilities;
};
struct PosPrinterCapabilities : generate<PosPrinterCapabilities> {};

// IPosPrinterStatus
struct IPosPrinterStatus_raw : IInspectable {
	virtual STDMETHODIMP _get_StatusKind(PosPrinterStatusKind *value);
	virtual STDMETHODIMP _get_ExtendedStatus(unsigned *value);
};
template<typename X> struct IPosPrinterStatus_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IPosPrinterStatus_adaptor::ExtendedStatus)->_get_ExtendedStatus(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ExtendedStatus;
		struct : property {
			PosPrinterStatusKind get() { PosPrinterStatusKind value; hrcheck(enc(&IPosPrinterStatus_adaptor::StatusKind)->_get_StatusKind(&value)); return value; }
			PosPrinterStatusKind operator()() { return get(); }
			operator PosPrinterStatusKind () { return get(); }
		} StatusKind;
	};
	IPosPrinterStatus_adaptor() {}
};
template<typename X> struct adapt<IPosPrinterStatus, X> : Windows::Devices::PointOfService::IPosPrinterStatus_adaptor<X> { typedef adapt IPosPrinterStatus; };
struct IPosPrinterStatus : IPosPrinterStatus_raw, generate<IPosPrinterStatus> {};

// PosPrinterStatus
template<typename X> struct statics<PosPrinterStatus, X> : X {
	typedef typename X::root_type PosPrinterStatus;
};
struct PosPrinterStatus : generate<PosPrinterStatus> {};

// IPosPrinterStatusUpdatedEventArgs
struct IPosPrinterStatusUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(PosPrinterStatus* *value);
};
template<typename X> struct IPosPrinterStatusUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PosPrinterStatus> get() { PosPrinterStatus* value; hrcheck(enc(&IPosPrinterStatusUpdatedEventArgs_adaptor::Status)->_get_Status(&value)); return from_abi(value); }
			ptr<PosPrinterStatus> operator()() { return get(); }
			operator ptr<PosPrinterStatus> () { return get(); }
			ptr<PosPrinterStatus> operator->() { return get(); }
		} Status;
	};
	IPosPrinterStatusUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IPosPrinterStatusUpdatedEventArgs, X> : Windows::Devices::PointOfService::IPosPrinterStatusUpdatedEventArgs_adaptor<X> { typedef adapt IPosPrinterStatusUpdatedEventArgs; };
struct IPosPrinterStatusUpdatedEventArgs : IPosPrinterStatusUpdatedEventArgs_raw, generate<IPosPrinterStatusUpdatedEventArgs> {};

// PosPrinterStatusUpdatedEventArgs
template<typename X> struct statics<PosPrinterStatusUpdatedEventArgs, X> : X {
	typedef typename X::root_type PosPrinterStatusUpdatedEventArgs;
};
struct PosPrinterStatusUpdatedEventArgs : generate<PosPrinterStatusUpdatedEventArgs> {};

// IPosPrinterReleaseDeviceRequestedEventArgs
struct IPosPrinterReleaseDeviceRequestedEventArgs : IInspectable, generate<IPosPrinterReleaseDeviceRequestedEventArgs> {};

// PosPrinterReleaseDeviceRequestedEventArgs
template<typename X> struct statics<PosPrinterReleaseDeviceRequestedEventArgs, X> : X {
	typedef typename X::root_type PosPrinterReleaseDeviceRequestedEventArgs;
};
struct PosPrinterReleaseDeviceRequestedEventArgs : generate<PosPrinterReleaseDeviceRequestedEventArgs> {};

// IPosPrinterStatics
struct IPosPrinterStatics : IInspectable {
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<PosPrinter*>* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<PosPrinter*>* *result);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
};

// IPosPrinterStatics2
struct IPosPrinterStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelectorWithConnectionTypes(PosConnectionTypes connectionTypes, HSTRING *value);
};

// IPosPrinter
struct IPosPrinter_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Capabilities(PosPrinterCapabilities* *value);
	virtual STDMETHODIMP _get_SupportedCharacterSets(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _get_SupportedTypeFaces(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_Status(PosPrinterStatus* *value);
	virtual STDMETHODIMP _ClaimPrinterAsync(Foundation::IAsyncOperation<ClaimedPosPrinter*>* *operation);
	virtual STDMETHODIMP _CheckHealthAsync(UnifiedPosHealthCheckLevel level, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _add_StatusUpdated(Foundation::TypedEventHandler<PosPrinter*, PosPrinterStatusUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StatusUpdated(Foundation::EventRegistrationToken token);
};
template<typename X> struct IPosPrinter_adaptor : X {
	union {
		struct : property {
			ptr<PosPrinterCapabilities> get() { PosPrinterCapabilities* value; hrcheck(enc(&IPosPrinter_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<PosPrinterCapabilities> operator()() { return get(); }
			operator ptr<PosPrinterCapabilities> () { return get(); }
			ptr<PosPrinterCapabilities> operator->() { return get(); }
		} Capabilities;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IPosPrinter_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			ptr<PosPrinterStatus> get() { PosPrinterStatus* value; hrcheck(enc(&IPosPrinter_adaptor::Status)->_get_Status(&value)); return from_abi(value); }
			ptr<PosPrinterStatus> operator()() { return get(); }
			operator ptr<PosPrinterStatus> () { return get(); }
			ptr<PosPrinterStatus> operator->() { return get(); }
		} Status;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(enc(&IPosPrinter_adaptor::SupportedCharacterSets)->_get_SupportedCharacterSets(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
		} SupportedCharacterSets;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IPosPrinter_adaptor::SupportedTypeFaces)->_get_SupportedTypeFaces(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} SupportedTypeFaces;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<PosPrinter>, ptr<PosPrinterStatusUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IPosPrinter_adaptor::StatusUpdated)->_add_StatusUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IPosPrinter_adaptor::StatusUpdated)->_remove_StatusUpdated(token)); }
		} StatusUpdated;
	};
	ptr<Foundation::IAsyncOperation<ptr<ClaimedPosPrinter>>> ClaimPrinterAsync() { Foundation::IAsyncOperation<ClaimedPosPrinter*>* operation; hrcheck(X::get()->_ClaimPrinterAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> CheckHealthAsync(UnifiedPosHealthCheckLevel level) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_CheckHealthAsync(level, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> GetStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_GetStatisticsAsync(to_abi(statisticsCategories), &operation)); return from_abi(operation); }
	IPosPrinter_adaptor() {}
};
template<typename X> struct adapt<IPosPrinter, X> : Windows::Devices::PointOfService::IPosPrinter_adaptor<X> { typedef adapt IPosPrinter; };
struct IPosPrinter : IPosPrinter_raw, generate<IPosPrinter> {};

// PosPrinter
template<typename> struct PosPrinter_statics {
	static hstring GetDeviceSelector(PosConnectionTypes connectionTypes) { HSTRING value; hrcheck(get_activation_factory<PosPrinter, IPosPrinterStatics2>()->_GetDeviceSelectorWithConnectionTypes(connectionTypes, &value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<PosPrinter>>> GetDefaultAsync() { Foundation::IAsyncOperation<PosPrinter*>* result; hrcheck(get_activation_factory<PosPrinter, IPosPrinterStatics>()->_GetDefaultAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<PosPrinter>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<PosPrinter*>* result; hrcheck(get_activation_factory<PosPrinter, IPosPrinterStatics>()->_FromIdAsync(deviceId, &result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<PosPrinter, IPosPrinterStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
};

template<typename X> struct statics<PosPrinter, X> : X, Windows::Devices::PointOfService::PosPrinter_statics<void> {
	typedef typename X::root_type PosPrinter;
};
struct PosPrinter : generate<PosPrinter> {};

// IClaimedPosPrinter
struct IClaimedPosPrinter_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _put_CharacterSet(unsigned value);
	virtual STDMETHODIMP _get_CharacterSet(unsigned *value);
	virtual STDMETHODIMP _get_IsCoverOpen(bool *value);
	virtual STDMETHODIMP _put_IsCharacterSetMappingEnabled(bool value);
	virtual STDMETHODIMP _get_IsCharacterSetMappingEnabled(bool *value);
	virtual STDMETHODIMP _put_MapMode(PosPrinterMapMode value);
	virtual STDMETHODIMP _get_MapMode(PosPrinterMapMode *value);
	virtual STDMETHODIMP _get_Receipt(ClaimedReceiptPrinter* *value);
	virtual STDMETHODIMP _get_Slip(ClaimedSlipPrinter* *value);
	virtual STDMETHODIMP _get_Journal(ClaimedJournalPrinter* *value);
	virtual STDMETHODIMP _EnableAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _DisableAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _RetainDeviceAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _ResetStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _UpdateStatisticsAsync(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, HSTRING>*>* statistics, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_ReleaseDeviceRequested(Foundation::TypedEventHandler<ClaimedPosPrinter*, PosPrinterReleaseDeviceRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReleaseDeviceRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IClaimedPosPrinter_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedPosPrinter_adaptor::CharacterSet)->_get_CharacterSet(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&IClaimedPosPrinter_adaptor::CharacterSet)->_put_CharacterSet(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CharacterSet;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedPosPrinter_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedPosPrinter_adaptor::IsCharacterSetMappingEnabled)->_get_IsCharacterSetMappingEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IClaimedPosPrinter_adaptor::IsCharacterSetMappingEnabled)->_put_IsCharacterSetMappingEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCharacterSetMappingEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedPosPrinter_adaptor::IsCoverOpen)->_get_IsCoverOpen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCoverOpen;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedPosPrinter_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsEnabled;
		struct : property {
			ptr<ClaimedJournalPrinter> get() { ClaimedJournalPrinter* value; hrcheck(enc(&IClaimedPosPrinter_adaptor::Journal)->_get_Journal(&value)); return from_abi(value); }
			ptr<ClaimedJournalPrinter> operator()() { return get(); }
			operator ptr<ClaimedJournalPrinter> () { return get(); }
			ptr<ClaimedJournalPrinter> operator->() { return get(); }
		} Journal;
		struct : property {
			PosPrinterMapMode get() { PosPrinterMapMode value; hrcheck(enc(&IClaimedPosPrinter_adaptor::MapMode)->_get_MapMode(&value)); return value; }
			PosPrinterMapMode operator()() { return get(); }
			operator PosPrinterMapMode () { return get(); }
			void put(PosPrinterMapMode value) { hrcheck(enc(&IClaimedPosPrinter_adaptor::MapMode)->_put_MapMode(value)); }
			void operator=(PosPrinterMapMode value) { put(value); }
			void operator()(PosPrinterMapMode value) { put(value); }
		} MapMode;
		struct : property {
			ptr<ClaimedReceiptPrinter> get() { ClaimedReceiptPrinter* value; hrcheck(enc(&IClaimedPosPrinter_adaptor::Receipt)->_get_Receipt(&value)); return from_abi(value); }
			ptr<ClaimedReceiptPrinter> operator()() { return get(); }
			operator ptr<ClaimedReceiptPrinter> () { return get(); }
			ptr<ClaimedReceiptPrinter> operator->() { return get(); }
		} Receipt;
		struct : property {
			ptr<ClaimedSlipPrinter> get() { ClaimedSlipPrinter* value; hrcheck(enc(&IClaimedPosPrinter_adaptor::Slip)->_get_Slip(&value)); return from_abi(value); }
			ptr<ClaimedSlipPrinter> operator()() { return get(); }
			operator ptr<ClaimedSlipPrinter> () { return get(); }
			ptr<ClaimedSlipPrinter> operator->() { return get(); }
		} Slip;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedPosPrinter>, ptr<PosPrinterReleaseDeviceRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedPosPrinter_adaptor::ReleaseDeviceRequested)->_add_ReleaseDeviceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedPosPrinter_adaptor::ReleaseDeviceRequested)->_remove_ReleaseDeviceRequested(token)); }
		} ReleaseDeviceRequested;
	};
	ptr<Foundation::IAsyncOperation<bool>> EnableAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_EnableAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> DisableAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_DisableAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> RetainDeviceAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_RetainDeviceAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> ResetStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_ResetStatisticsAsync(to_abi(statisticsCategories), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> UpdateStatisticsAsync(pptr<Foundation::Collections::IIterable<ptr<Foundation::Collections::IKeyValuePair<hstring, hstring>>>> statistics) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_UpdateStatisticsAsync(to_abi(statistics), &result)); return from_abi(result); }
	IClaimedPosPrinter_adaptor() {}
};
template<typename X> struct adapt<IClaimedPosPrinter, X> : Windows::Devices::PointOfService::IClaimedPosPrinter_adaptor<X> { typedef adapt IClaimedPosPrinter; };
struct IClaimedPosPrinter : IClaimedPosPrinter_raw, generate<IClaimedPosPrinter> {};

// ClaimedPosPrinter
template<typename X> struct statics<ClaimedPosPrinter, X> : X {
	typedef typename X::root_type ClaimedPosPrinter;
};
struct ClaimedPosPrinter : generate<ClaimedPosPrinter> {};

// IPosPrinterJob
struct IPosPrinterJob_raw : IInspectable {
	virtual STDMETHODIMP _Print(HSTRING data) = 0;
	virtual STDMETHODIMP _PrintLine(HSTRING data) = 0;
	virtual STDMETHODIMP _PrintNewline() = 0;
	virtual STDMETHODIMP _ExecuteAsync(Foundation::IAsyncOperation<bool>* *operation) = 0;
};
template<typename X> struct IPosPrinterJob_adaptor : X {
	void Print(hstring_ref data) { hrcheck(X::get()->_Print(data)); }
	void PrintLine(hstring_ref data) { hrcheck(X::get()->_PrintLine(data)); }
	void PrintLine() { hrcheck(X::get()->_PrintNewline()); }
	ptr<Foundation::IAsyncOperation<bool>> ExecuteAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_ExecuteAsync(&operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IPosPrinterJob, X> : Windows::Devices::PointOfService::IPosPrinterJob_adaptor<X> { typedef adapt IPosPrinterJob; };
template<typename X> struct IPosPrinterJob_unadaptor : X {
	STDMETHODIMP _Print(HSTRING data) { return hrtry([&, this] { X::get()->Print(data); }); }
	STDMETHODIMP _PrintLine(HSTRING data) { return hrtry([&, this] { X::get()->PrintLine(data); }); }
	STDMETHODIMP _PrintNewline() { return hrtry([&, this] { X::get()->PrintLine(); }); }
	STDMETHODIMP _ExecuteAsync(Foundation::IAsyncOperation<bool>* *operation) { return hrtry([&, this] { *operation = to_abi(X::get()->ExecuteAsync()); }); }
};
template<typename X> struct unadapt<IPosPrinterJob, X> : Windows::Devices::PointOfService::IPosPrinterJob_unadaptor<X> {};
struct IPosPrinterJob : IPosPrinterJob_raw, generate<IPosPrinterJob> {};

// IReceiptOrSlipJob
struct IReceiptOrSlipJob_raw : IInspectable {
	virtual STDMETHODIMP _SetBarcodeRotation(PosPrinterRotation value) = 0;
	virtual STDMETHODIMP _SetPrintRotation(PosPrinterRotation value, bool includeBitmaps) = 0;
	virtual STDMETHODIMP _SetPrintArea(Foundation::Rect value) = 0;
	virtual STDMETHODIMP _SetBitmap(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment) = 0;
	virtual STDMETHODIMP _SetBitmapCustomWidthStandardAlign(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment, unsigned width) = 0;
	virtual STDMETHODIMP _SetCustomAlignedBitmap(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance) = 0;
	virtual STDMETHODIMP _SetBitmapCustomWidthCustomAlign(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance, unsigned width) = 0;
	virtual STDMETHODIMP _PrintSavedBitmap(unsigned bitmapNumber) = 0;
	virtual STDMETHODIMP _DrawRuledLine(HSTRING positionList, PosPrinterLineDirection lineDirection, unsigned lineWidth, PosPrinterLineStyle lineStyle, unsigned lineColor) = 0;
	virtual STDMETHODIMP _PrintBarcode(HSTRING data, unsigned symbology, unsigned height, unsigned width, PosPrinterBarcodeTextPosition textPosition, PosPrinterAlignment alignment) = 0;
	virtual STDMETHODIMP _PrintBarcodeCustomAlign(HSTRING data, unsigned symbology, unsigned height, unsigned width, PosPrinterBarcodeTextPosition textPosition, unsigned alignmentDistance) = 0;
	virtual STDMETHODIMP _PrintBitmap(Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment) = 0;
	virtual STDMETHODIMP _PrintBitmapCustomWidthStandardAlign(Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment, unsigned width) = 0;
	virtual STDMETHODIMP _PrintCustomAlignedBitmap(Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance) = 0;
	virtual STDMETHODIMP _PrintBitmapCustomWidthCustomAlign(Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance, unsigned width) = 0;
};
template<typename X> struct IReceiptOrSlipJob_adaptor : X {
	void SetBarcodeRotation(PosPrinterRotation value) { hrcheck(X::get()->_SetBarcodeRotation(value)); }
	void SetPrintRotation(PosPrinterRotation value, bool includeBitmaps) { hrcheck(X::get()->_SetPrintRotation(value, includeBitmaps)); }
	void SetPrintArea(const Foundation::Rect& value) { hrcheck(X::get()->_SetPrintArea(value)); }
	void SetBitmap(unsigned bitmapNumber, pptr<Graphics::Imaging::BitmapFrame> bitmap, PosPrinterAlignment alignment) { hrcheck(X::get()->_SetBitmap(bitmapNumber, bitmap, alignment)); }
	void SetBitmap(unsigned bitmapNumber, pptr<Graphics::Imaging::BitmapFrame> bitmap, PosPrinterAlignment alignment, unsigned width) { hrcheck(X::get()->_SetBitmapCustomWidthStandardAlign(bitmapNumber, bitmap, alignment, width)); }
	void SetCustomAlignedBitmap(unsigned bitmapNumber, pptr<Graphics::Imaging::BitmapFrame> bitmap, unsigned alignmentDistance) { hrcheck(X::get()->_SetCustomAlignedBitmap(bitmapNumber, bitmap, alignmentDistance)); }
	void SetCustomAlignedBitmap(unsigned bitmapNumber, pptr<Graphics::Imaging::BitmapFrame> bitmap, unsigned alignmentDistance, unsigned width) { hrcheck(X::get()->_SetBitmapCustomWidthCustomAlign(bitmapNumber, bitmap, alignmentDistance, width)); }
	void PrintSavedBitmap(unsigned bitmapNumber) { hrcheck(X::get()->_PrintSavedBitmap(bitmapNumber)); }
	void DrawRuledLine(hstring_ref positionList, PosPrinterLineDirection lineDirection, unsigned lineWidth, PosPrinterLineStyle lineStyle, unsigned lineColor) { hrcheck(X::get()->_DrawRuledLine(positionList, lineDirection, lineWidth, lineStyle, lineColor)); }
	void PrintBarcode(hstring_ref data, unsigned symbology, unsigned height, unsigned width, PosPrinterBarcodeTextPosition textPosition, PosPrinterAlignment alignment) { hrcheck(X::get()->_PrintBarcode(data, symbology, height, width, textPosition, alignment)); }
	void PrintBarcodeCustomAlign(hstring_ref data, unsigned symbology, unsigned height, unsigned width, PosPrinterBarcodeTextPosition textPosition, unsigned alignmentDistance) { hrcheck(X::get()->_PrintBarcodeCustomAlign(data, symbology, height, width, textPosition, alignmentDistance)); }
	void PrintBitmap(pptr<Graphics::Imaging::BitmapFrame> bitmap, PosPrinterAlignment alignment) { hrcheck(X::get()->_PrintBitmap(bitmap, alignment)); }
	void PrintBitmap(pptr<Graphics::Imaging::BitmapFrame> bitmap, PosPrinterAlignment alignment, unsigned width) { hrcheck(X::get()->_PrintBitmapCustomWidthStandardAlign(bitmap, alignment, width)); }
	void PrintCustomAlignedBitmap(pptr<Graphics::Imaging::BitmapFrame> bitmap, unsigned alignmentDistance) { hrcheck(X::get()->_PrintCustomAlignedBitmap(bitmap, alignmentDistance)); }
	void PrintCustomAlignedBitmap(pptr<Graphics::Imaging::BitmapFrame> bitmap, unsigned alignmentDistance, unsigned width) { hrcheck(X::get()->_PrintBitmapCustomWidthCustomAlign(bitmap, alignmentDistance, width)); }
};
template<typename X> struct adapt<IReceiptOrSlipJob, X> : Windows::Devices::PointOfService::IReceiptOrSlipJob_adaptor<X> { typedef adapt IReceiptOrSlipJob; };
template<typename X> struct IReceiptOrSlipJob_unadaptor : X {
	STDMETHODIMP _SetBarcodeRotation(PosPrinterRotation value) { return hrtry([&, this] { X::get()->SetBarcodeRotation(value); }); }
	STDMETHODIMP _SetPrintRotation(PosPrinterRotation value, bool includeBitmaps) { return hrtry([&, this] { X::get()->SetPrintRotation(value, includeBitmaps); }); }
	STDMETHODIMP _SetPrintArea(Foundation::Rect value) { return hrtry([&, this] { X::get()->SetPrintArea(value); }); }
	STDMETHODIMP _SetBitmap(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment) { return hrtry([&, this] { X::get()->SetBitmap(bitmapNumber, bitmap, alignment); }); }
	STDMETHODIMP _SetBitmapCustomWidthStandardAlign(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment, unsigned width) { return hrtry([&, this] { X::get()->SetBitmap(bitmapNumber, bitmap, alignment, width); }); }
	STDMETHODIMP _SetCustomAlignedBitmap(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance) { return hrtry([&, this] { X::get()->SetCustomAlignedBitmap(bitmapNumber, bitmap, alignmentDistance); }); }
	STDMETHODIMP _SetBitmapCustomWidthCustomAlign(unsigned bitmapNumber, Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance, unsigned width) { return hrtry([&, this] { X::get()->SetCustomAlignedBitmap(bitmapNumber, bitmap, alignmentDistance, width); }); }
	STDMETHODIMP _PrintSavedBitmap(unsigned bitmapNumber) { return hrtry([&, this] { X::get()->PrintSavedBitmap(bitmapNumber); }); }
	STDMETHODIMP _DrawRuledLine(HSTRING positionList, PosPrinterLineDirection lineDirection, unsigned lineWidth, PosPrinterLineStyle lineStyle, unsigned lineColor) { return hrtry([&, this] { X::get()->DrawRuledLine(positionList, lineDirection, lineWidth, lineStyle, lineColor); }); }
	STDMETHODIMP _PrintBarcode(HSTRING data, unsigned symbology, unsigned height, unsigned width, PosPrinterBarcodeTextPosition textPosition, PosPrinterAlignment alignment) { return hrtry([&, this] { X::get()->PrintBarcode(data, symbology, height, width, textPosition, alignment); }); }
	STDMETHODIMP _PrintBarcodeCustomAlign(HSTRING data, unsigned symbology, unsigned height, unsigned width, PosPrinterBarcodeTextPosition textPosition, unsigned alignmentDistance) { return hrtry([&, this] { X::get()->PrintBarcodeCustomAlign(data, symbology, height, width, textPosition, alignmentDistance); }); }
	STDMETHODIMP _PrintBitmap(Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment) { return hrtry([&, this] { X::get()->PrintBitmap(bitmap, alignment); }); }
	STDMETHODIMP _PrintBitmapCustomWidthStandardAlign(Graphics::Imaging::BitmapFrame* bitmap, PosPrinterAlignment alignment, unsigned width) { return hrtry([&, this] { X::get()->PrintBitmap(bitmap, alignment, width); }); }
	STDMETHODIMP _PrintCustomAlignedBitmap(Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance) { return hrtry([&, this] { X::get()->PrintCustomAlignedBitmap(bitmap, alignmentDistance); }); }
	STDMETHODIMP _PrintBitmapCustomWidthCustomAlign(Graphics::Imaging::BitmapFrame* bitmap, unsigned alignmentDistance, unsigned width) { return hrtry([&, this] { X::get()->PrintCustomAlignedBitmap(bitmap, alignmentDistance, width); }); }
};
template<typename X> struct unadapt<IReceiptOrSlipJob, X> : Windows::Devices::PointOfService::IReceiptOrSlipJob_unadaptor<X> {};
struct IReceiptOrSlipJob : IReceiptOrSlipJob_raw, generate<IReceiptOrSlipJob> {};

// IReceiptPrintJob
struct IReceiptPrintJob_raw : IInspectable {
	virtual STDMETHODIMP _MarkFeed(PosPrinterMarkFeedKind kind);
	virtual STDMETHODIMP _CutPaper(double percentage);
	virtual STDMETHODIMP _CutPaperDefault();
};
template<typename X> struct IReceiptPrintJob_adaptor : X {
	void MarkFeed(PosPrinterMarkFeedKind kind) { hrcheck(X::get()->_MarkFeed(kind)); }
	void CutPaper(double percentage) { hrcheck(X::get()->_CutPaper(percentage)); }
	void CutPaper() { hrcheck(X::get()->_CutPaperDefault()); }
};
template<typename X> struct adapt<IReceiptPrintJob, X> : Windows::Devices::PointOfService::IReceiptPrintJob_adaptor<X> { typedef adapt IReceiptPrintJob; };
struct IReceiptPrintJob : IReceiptPrintJob_raw, generate<IReceiptPrintJob> {};

// ReceiptPrintJob
template<typename X> struct statics<ReceiptPrintJob, X> : X {
	typedef typename X::root_type ReceiptPrintJob;
};
struct ReceiptPrintJob : generate<ReceiptPrintJob> {
	using IReceiptOrSlipJob::SetBitmap;
	using IReceiptOrSlipJob::PrintCustomAlignedBitmap;
	using IReceiptOrSlipJob::SetCustomAlignedBitmap;
	using IPosPrinterJob::PrintLine;
	using IReceiptPrintJob::CutPaper;
	using IReceiptOrSlipJob::PrintBitmap;
};

// SlipPrintJob
template<typename X> struct statics<SlipPrintJob, X> : X {
	typedef typename X::root_type SlipPrintJob;
};
struct SlipPrintJob : generate<SlipPrintJob> {
	using IPosPrinterJob::PrintLine;
	using IReceiptOrSlipJob::SetBitmap;
	using IReceiptOrSlipJob::PrintCustomAlignedBitmap;
	using IReceiptOrSlipJob::SetCustomAlignedBitmap;
	using IReceiptOrSlipJob::PrintBitmap;
};

// JournalPrintJob
template<typename X> struct statics<JournalPrintJob, X> : X {
	typedef typename X::root_type JournalPrintJob;
};
struct JournalPrintJob : generate<JournalPrintJob> {
	using IPosPrinterJob::PrintLine;
};

// ICommonClaimedPosPrinterStation
struct ICommonClaimedPosPrinterStation_raw : IInspectable {
	virtual STDMETHODIMP _put_CharactersPerLine(unsigned value) = 0;
	virtual STDMETHODIMP _get_CharactersPerLine(unsigned *value) = 0;
	virtual STDMETHODIMP _put_LineHeight(unsigned value) = 0;
	virtual STDMETHODIMP _get_LineHeight(unsigned *value) = 0;
	virtual STDMETHODIMP _put_LineSpacing(unsigned value) = 0;
	virtual STDMETHODIMP _get_LineSpacing(unsigned *value) = 0;
	virtual STDMETHODIMP _get_LineWidth(unsigned *value) = 0;
	virtual STDMETHODIMP _put_IsLetterQuality(bool value) = 0;
	virtual STDMETHODIMP _get_IsLetterQuality(bool *value) = 0;
	virtual STDMETHODIMP _get_IsPaperNearEnd(bool *value) = 0;
	virtual STDMETHODIMP _put_ColorCartridge(PosPrinterColorCartridge value) = 0;
	virtual STDMETHODIMP _get_ColorCartridge(PosPrinterColorCartridge *value) = 0;
	virtual STDMETHODIMP _get_IsCoverOpen(bool *value) = 0;
	virtual STDMETHODIMP _get_IsCartridgeRemoved(bool *value) = 0;
	virtual STDMETHODIMP _get_IsCartridgeEmpty(bool *value) = 0;
	virtual STDMETHODIMP _get_IsHeadCleaning(bool *value) = 0;
	virtual STDMETHODIMP _get_IsPaperEmpty(bool *value) = 0;
	virtual STDMETHODIMP _get_IsReadyToPrint(bool *value) = 0;
	virtual STDMETHODIMP _ValidateData(HSTRING data, bool *result) = 0;
};
template<typename X> struct ICommonClaimedPosPrinterStation_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::CharactersPerLine)->_get_CharactersPerLine(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::CharactersPerLine)->_put_CharactersPerLine(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} CharactersPerLine;
		struct : property {
			PosPrinterColorCartridge get() { PosPrinterColorCartridge value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::ColorCartridge)->_get_ColorCartridge(&value)); return value; }
			PosPrinterColorCartridge operator()() { return get(); }
			operator PosPrinterColorCartridge () { return get(); }
			void put(PosPrinterColorCartridge value) { hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::ColorCartridge)->_put_ColorCartridge(value)); }
			void operator=(PosPrinterColorCartridge value) { put(value); }
			void operator()(PosPrinterColorCartridge value) { put(value); }
		} ColorCartridge;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsCartridgeEmpty)->_get_IsCartridgeEmpty(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCartridgeEmpty;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsCartridgeRemoved)->_get_IsCartridgeRemoved(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCartridgeRemoved;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsCoverOpen)->_get_IsCoverOpen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCoverOpen;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsHeadCleaning)->_get_IsHeadCleaning(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHeadCleaning;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsLetterQuality)->_get_IsLetterQuality(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsLetterQuality)->_put_IsLetterQuality(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsLetterQuality;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsPaperEmpty)->_get_IsPaperEmpty(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPaperEmpty;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsPaperNearEnd)->_get_IsPaperNearEnd(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsPaperNearEnd;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::IsReadyToPrint)->_get_IsReadyToPrint(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsReadyToPrint;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::LineHeight)->_get_LineHeight(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::LineHeight)->_put_LineHeight(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} LineHeight;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::LineSpacing)->_get_LineSpacing(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::LineSpacing)->_put_LineSpacing(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} LineSpacing;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICommonClaimedPosPrinterStation_adaptor::LineWidth)->_get_LineWidth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} LineWidth;
	};
	bool ValidateData(hstring_ref data) { bool result; hrcheck(X::get()->_ValidateData(data, &result)); return result; }
	ICommonClaimedPosPrinterStation_adaptor() {}
};
template<typename X> struct adapt<ICommonClaimedPosPrinterStation, X> : Windows::Devices::PointOfService::ICommonClaimedPosPrinterStation_adaptor<X> { typedef adapt ICommonClaimedPosPrinterStation; };
template<typename X> struct ICommonClaimedPosPrinterStation_unadaptor : X {
	STDMETHODIMP _put_CharactersPerLine(unsigned value) { return hrtry([&, this] { put_prop(value, CharactersPerLine); }); }
	STDMETHODIMP _get_CharactersPerLine(unsigned *value) { return hrtry([&, this] { get_prop(value, CharactersPerLine); }); }
	STDMETHODIMP _put_LineHeight(unsigned value) { return hrtry([&, this] { put_prop(value, LineHeight); }); }
	STDMETHODIMP _get_LineHeight(unsigned *value) { return hrtry([&, this] { get_prop(value, LineHeight); }); }
	STDMETHODIMP _put_LineSpacing(unsigned value) { return hrtry([&, this] { put_prop(value, LineSpacing); }); }
	STDMETHODIMP _get_LineSpacing(unsigned *value) { return hrtry([&, this] { get_prop(value, LineSpacing); }); }
	STDMETHODIMP _get_LineWidth(unsigned *value) { return hrtry([&, this] { get_prop(value, LineWidth); }); }
	STDMETHODIMP _put_IsLetterQuality(bool value) { return hrtry([&, this] { put_prop(value, IsLetterQuality); }); }
	STDMETHODIMP _get_IsLetterQuality(bool *value) { return hrtry([&, this] { get_prop(value, IsLetterQuality); }); }
	STDMETHODIMP _get_IsPaperNearEnd(bool *value) { return hrtry([&, this] { get_prop(value, IsPaperNearEnd); }); }
	STDMETHODIMP _put_ColorCartridge(PosPrinterColorCartridge value) { return hrtry([&, this] { put_prop(value, ColorCartridge); }); }
	STDMETHODIMP _get_ColorCartridge(PosPrinterColorCartridge *value) { return hrtry([&, this] { get_prop(value, ColorCartridge); }); }
	STDMETHODIMP _get_IsCoverOpen(bool *value) { return hrtry([&, this] { get_prop(value, IsCoverOpen); }); }
	STDMETHODIMP _get_IsCartridgeRemoved(bool *value) { return hrtry([&, this] { get_prop(value, IsCartridgeRemoved); }); }
	STDMETHODIMP _get_IsCartridgeEmpty(bool *value) { return hrtry([&, this] { get_prop(value, IsCartridgeEmpty); }); }
	STDMETHODIMP _get_IsHeadCleaning(bool *value) { return hrtry([&, this] { get_prop(value, IsHeadCleaning); }); }
	STDMETHODIMP _get_IsPaperEmpty(bool *value) { return hrtry([&, this] { get_prop(value, IsPaperEmpty); }); }
	STDMETHODIMP _get_IsReadyToPrint(bool *value) { return hrtry([&, this] { get_prop(value, IsReadyToPrint); }); }
	STDMETHODIMP _ValidateData(HSTRING data, bool *result) { return hrtry([&, this] { *result = X::get()->ValidateData(data); }); }
};
template<typename X> struct unadapt<ICommonClaimedPosPrinterStation, X> : Windows::Devices::PointOfService::ICommonClaimedPosPrinterStation_unadaptor<X> {};
struct ICommonClaimedPosPrinterStation : ICommonClaimedPosPrinterStation_raw, generate<ICommonClaimedPosPrinterStation> {};

// IClaimedReceiptPrinter
struct IClaimedReceiptPrinter_raw : IInspectable {
	virtual STDMETHODIMP _get_SidewaysMaxLines(unsigned *value);
	virtual STDMETHODIMP _get_SidewaysMaxChars(unsigned *value);
	virtual STDMETHODIMP _get_LinesToPaperCut(unsigned *value);
	virtual STDMETHODIMP _get_PageSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_PrintArea(Foundation::Rect *value);
	virtual STDMETHODIMP _CreateJob(ReceiptPrintJob* *value);
};
template<typename X> struct IClaimedReceiptPrinter_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedReceiptPrinter_adaptor::LinesToPaperCut)->_get_LinesToPaperCut(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} LinesToPaperCut;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IClaimedReceiptPrinter_adaptor::PageSize)->_get_PageSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} PageSize;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IClaimedReceiptPrinter_adaptor::PrintArea)->_get_PrintArea(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} PrintArea;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedReceiptPrinter_adaptor::SidewaysMaxChars)->_get_SidewaysMaxChars(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SidewaysMaxChars;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedReceiptPrinter_adaptor::SidewaysMaxLines)->_get_SidewaysMaxLines(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SidewaysMaxLines;
	};
	ptr<ReceiptPrintJob> CreateJob() { ReceiptPrintJob* value; hrcheck(X::get()->_CreateJob(&value)); return from_abi(value); }
	IClaimedReceiptPrinter_adaptor() {}
};
template<typename X> struct adapt<IClaimedReceiptPrinter, X> : Windows::Devices::PointOfService::IClaimedReceiptPrinter_adaptor<X> { typedef adapt IClaimedReceiptPrinter; };
struct IClaimedReceiptPrinter : IClaimedReceiptPrinter_raw, generate<IClaimedReceiptPrinter> {};

// ClaimedReceiptPrinter
template<typename X> struct statics<ClaimedReceiptPrinter, X> : X {
	typedef typename X::root_type ClaimedReceiptPrinter;
};
struct ClaimedReceiptPrinter : generate<ClaimedReceiptPrinter> {};

// IClaimedSlipPrinter
struct IClaimedSlipPrinter_raw : IInspectable {
	virtual STDMETHODIMP _get_SidewaysMaxLines(unsigned *value);
	virtual STDMETHODIMP _get_SidewaysMaxChars(unsigned *value);
	virtual STDMETHODIMP _get_MaxLines(unsigned *value);
	virtual STDMETHODIMP _get_LinesNearEndToEnd(unsigned *value);
	virtual STDMETHODIMP _get_PrintSide(PosPrinterPrintSide *value);
	virtual STDMETHODIMP _get_PageSize(Foundation::Size *value);
	virtual STDMETHODIMP _get_PrintArea(Foundation::Rect *value);
	virtual STDMETHODIMP _OpenJaws();
	virtual STDMETHODIMP _CloseJaws();
	virtual STDMETHODIMP _InsertSlipAsync(Foundation::TimeSpan timeout, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _RemoveSlipAsync(Foundation::TimeSpan timeout, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _ChangePrintSide(PosPrinterPrintSide printSide);
	virtual STDMETHODIMP _CreateJob(SlipPrintJob* *value);
};
template<typename X> struct IClaimedSlipPrinter_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedSlipPrinter_adaptor::LinesNearEndToEnd)->_get_LinesNearEndToEnd(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} LinesNearEndToEnd;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedSlipPrinter_adaptor::MaxLines)->_get_MaxLines(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxLines;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IClaimedSlipPrinter_adaptor::PageSize)->_get_PageSize(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} PageSize;
		struct : property {
			Foundation::Rect get() { Foundation::Rect value; hrcheck(enc(&IClaimedSlipPrinter_adaptor::PrintArea)->_get_PrintArea(&value)); return value; }
			Foundation::Rect operator()() { return get(); }
			operator Foundation::Rect () { return get(); }
		} PrintArea;
		struct : property {
			PosPrinterPrintSide get() { PosPrinterPrintSide value; hrcheck(enc(&IClaimedSlipPrinter_adaptor::PrintSide)->_get_PrintSide(&value)); return value; }
			PosPrinterPrintSide operator()() { return get(); }
			operator PosPrinterPrintSide () { return get(); }
		} PrintSide;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedSlipPrinter_adaptor::SidewaysMaxChars)->_get_SidewaysMaxChars(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SidewaysMaxChars;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IClaimedSlipPrinter_adaptor::SidewaysMaxLines)->_get_SidewaysMaxLines(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SidewaysMaxLines;
	};
	void OpenJaws() { hrcheck(X::get()->_OpenJaws()); }
	void CloseJaws() { hrcheck(X::get()->_CloseJaws()); }
	ptr<Foundation::IAsyncOperation<bool>> InsertSlipAsync(const Foundation::TimeSpan& timeout) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_InsertSlipAsync(timeout, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> RemoveSlipAsync(const Foundation::TimeSpan& timeout) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_RemoveSlipAsync(timeout, &result)); return from_abi(result); }
	void ChangePrintSide(PosPrinterPrintSide printSide) { hrcheck(X::get()->_ChangePrintSide(printSide)); }
	ptr<SlipPrintJob> CreateJob() { SlipPrintJob* value; hrcheck(X::get()->_CreateJob(&value)); return from_abi(value); }
	IClaimedSlipPrinter_adaptor() {}
};
template<typename X> struct adapt<IClaimedSlipPrinter, X> : Windows::Devices::PointOfService::IClaimedSlipPrinter_adaptor<X> { typedef adapt IClaimedSlipPrinter; };
struct IClaimedSlipPrinter : IClaimedSlipPrinter_raw, generate<IClaimedSlipPrinter> {};

// ClaimedSlipPrinter
template<typename X> struct statics<ClaimedSlipPrinter, X> : X {
	typedef typename X::root_type ClaimedSlipPrinter;
};
struct ClaimedSlipPrinter : generate<ClaimedSlipPrinter> {};

// IClaimedJournalPrinter
struct IClaimedJournalPrinter_raw : IInspectable {
	virtual STDMETHODIMP _CreateJob(JournalPrintJob* *value);
};
template<typename X> struct IClaimedJournalPrinter_adaptor : X {
	ptr<JournalPrintJob> CreateJob() { JournalPrintJob* value; hrcheck(X::get()->_CreateJob(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IClaimedJournalPrinter, X> : Windows::Devices::PointOfService::IClaimedJournalPrinter_adaptor<X> { typedef adapt IClaimedJournalPrinter; };
struct IClaimedJournalPrinter : IClaimedJournalPrinter_raw, generate<IClaimedJournalPrinter> {};

// ClaimedJournalPrinter
template<typename X> struct statics<ClaimedJournalPrinter, X> : X {
	typedef typename X::root_type ClaimedJournalPrinter;
};
struct ClaimedJournalPrinter : generate<ClaimedJournalPrinter> {};

// ICashDrawerStatusUpdatedEventArgs
struct ICashDrawerStatusUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(CashDrawerStatus* *value);
};
template<typename X> struct ICashDrawerStatusUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<CashDrawerStatus> get() { CashDrawerStatus* value; hrcheck(enc(&ICashDrawerStatusUpdatedEventArgs_adaptor::Status)->_get_Status(&value)); return from_abi(value); }
			ptr<CashDrawerStatus> operator()() { return get(); }
			operator ptr<CashDrawerStatus> () { return get(); }
			ptr<CashDrawerStatus> operator->() { return get(); }
		} Status;
	};
	ICashDrawerStatusUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICashDrawerStatusUpdatedEventArgs, X> : Windows::Devices::PointOfService::ICashDrawerStatusUpdatedEventArgs_adaptor<X> { typedef adapt ICashDrawerStatusUpdatedEventArgs; };
struct ICashDrawerStatusUpdatedEventArgs : ICashDrawerStatusUpdatedEventArgs_raw, generate<ICashDrawerStatusUpdatedEventArgs> {};

// ICashDrawerStatus
struct ICashDrawerStatus_raw : IInspectable {
	virtual STDMETHODIMP _get_StatusKind(CashDrawerStatusKind *value);
	virtual STDMETHODIMP _get_ExtendedStatus(unsigned *value);
};
template<typename X> struct ICashDrawerStatus_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICashDrawerStatus_adaptor::ExtendedStatus)->_get_ExtendedStatus(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ExtendedStatus;
		struct : property {
			CashDrawerStatusKind get() { CashDrawerStatusKind value; hrcheck(enc(&ICashDrawerStatus_adaptor::StatusKind)->_get_StatusKind(&value)); return value; }
			CashDrawerStatusKind operator()() { return get(); }
			operator CashDrawerStatusKind () { return get(); }
		} StatusKind;
	};
	ICashDrawerStatus_adaptor() {}
};
template<typename X> struct adapt<ICashDrawerStatus, X> : Windows::Devices::PointOfService::ICashDrawerStatus_adaptor<X> { typedef adapt ICashDrawerStatus; };
struct ICashDrawerStatus : ICashDrawerStatus_raw, generate<ICashDrawerStatus> {};

// CashDrawerStatus
template<typename X> struct statics<CashDrawerStatus, X> : X {
	typedef typename X::root_type CashDrawerStatus;
};
struct CashDrawerStatus : generate<CashDrawerStatus> {};

// CashDrawerStatusUpdatedEventArgs
template<typename X> struct statics<CashDrawerStatusUpdatedEventArgs, X> : X {
	typedef typename X::root_type CashDrawerStatusUpdatedEventArgs;
};
struct CashDrawerStatusUpdatedEventArgs : generate<CashDrawerStatusUpdatedEventArgs> {};

// ICashDrawerCapabilities
struct ICashDrawerCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_PowerReportingType(UnifiedPosPowerReportingType *value);
	virtual STDMETHODIMP _get_IsStatisticsReportingSupported(bool *value);
	virtual STDMETHODIMP _get_IsStatisticsUpdatingSupported(bool *value);
	virtual STDMETHODIMP _get_IsStatusReportingSupported(bool *value);
	virtual STDMETHODIMP _get_IsStatusMultiDrawerDetectSupported(bool *value);
	virtual STDMETHODIMP _get_IsDrawerOpenSensorAvailable(bool *value);
};
template<typename X> struct ICashDrawerCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICashDrawerCapabilities_adaptor::IsDrawerOpenSensorAvailable)->_get_IsDrawerOpenSensorAvailable(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDrawerOpenSensorAvailable;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICashDrawerCapabilities_adaptor::IsStatisticsReportingSupported)->_get_IsStatisticsReportingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsReportingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICashDrawerCapabilities_adaptor::IsStatisticsUpdatingSupported)->_get_IsStatisticsUpdatingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsUpdatingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICashDrawerCapabilities_adaptor::IsStatusMultiDrawerDetectSupported)->_get_IsStatusMultiDrawerDetectSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatusMultiDrawerDetectSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICashDrawerCapabilities_adaptor::IsStatusReportingSupported)->_get_IsStatusReportingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatusReportingSupported;
		struct : property {
			UnifiedPosPowerReportingType get() { UnifiedPosPowerReportingType value; hrcheck(enc(&ICashDrawerCapabilities_adaptor::PowerReportingType)->_get_PowerReportingType(&value)); return value; }
			UnifiedPosPowerReportingType operator()() { return get(); }
			operator UnifiedPosPowerReportingType () { return get(); }
		} PowerReportingType;
	};
	ICashDrawerCapabilities_adaptor() {}
};
template<typename X> struct adapt<ICashDrawerCapabilities, X> : Windows::Devices::PointOfService::ICashDrawerCapabilities_adaptor<X> { typedef adapt ICashDrawerCapabilities; };
struct ICashDrawerCapabilities : ICashDrawerCapabilities_raw, generate<ICashDrawerCapabilities> {};

// CashDrawerCapabilities
template<typename X> struct statics<CashDrawerCapabilities, X> : X {
	typedef typename X::root_type CashDrawerCapabilities;
};
struct CashDrawerCapabilities : generate<CashDrawerCapabilities> {};

// ICashDrawerEventSourceEventArgs
struct ICashDrawerEventSourceEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_CashDrawer(PointOfService::CashDrawer* *drawer) = 0;
};
template<typename X> struct ICashDrawerEventSourceEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<PointOfService::CashDrawer> get() { PointOfService::CashDrawer* drawer; hrcheck(enc(&ICashDrawerEventSourceEventArgs_adaptor::CashDrawer)->_get_CashDrawer(&drawer)); return from_abi(drawer); }
			ptr<PointOfService::CashDrawer> operator()() { return get(); }
			operator ptr<PointOfService::CashDrawer> () { return get(); }
			ptr<PointOfService::CashDrawer> operator->() { return get(); }
		} CashDrawer;
	};
	ICashDrawerEventSourceEventArgs_adaptor() {}
};
template<typename X> struct adapt<ICashDrawerEventSourceEventArgs, X> : Windows::Devices::PointOfService::ICashDrawerEventSourceEventArgs_adaptor<X> { typedef adapt ICashDrawerEventSourceEventArgs; };
template<typename X> struct ICashDrawerEventSourceEventArgs_unadaptor : X {
	STDMETHODIMP _get_CashDrawer(PointOfService::CashDrawer* *drawer) { return hrtry([&, this] { get_prop(drawer, CashDrawer); }); }
};
template<typename X> struct unadapt<ICashDrawerEventSourceEventArgs, X> : Windows::Devices::PointOfService::ICashDrawerEventSourceEventArgs_unadaptor<X> {};
struct ICashDrawerEventSourceEventArgs : ICashDrawerEventSourceEventArgs_raw, generate<ICashDrawerEventSourceEventArgs> {};

// ICashDrawerStatics2
struct ICashDrawerStatics2 : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelectorWithConnectionTypes(PosConnectionTypes connectionTypes, HSTRING *value);
};

// ICashDrawerStatics
struct ICashDrawerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<CashDrawer*>* *result);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<CashDrawer*>* *result);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
};

// ICashDrawer
struct ICashDrawer_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Capabilities(CashDrawerCapabilities* *value);
	virtual STDMETHODIMP _get_Status(CashDrawerStatus* *value);
	virtual STDMETHODIMP _get_IsDrawerOpen(bool *value);
	virtual STDMETHODIMP _get_DrawerEventSource(CashDrawerEventSource* *value);
	virtual STDMETHODIMP _ClaimDrawerAsync(Foundation::IAsyncOperation<ClaimedCashDrawer*>* *operation);
	virtual STDMETHODIMP _CheckHealthAsync(UnifiedPosHealthCheckLevel level, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _add_StatusUpdated(Foundation::TypedEventHandler<CashDrawer*, CashDrawerStatusUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StatusUpdated(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICashDrawer_adaptor : X {
	union {
		struct : property {
			ptr<CashDrawerCapabilities> get() { CashDrawerCapabilities* value; hrcheck(enc(&ICashDrawer_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<CashDrawerCapabilities> operator()() { return get(); }
			operator ptr<CashDrawerCapabilities> () { return get(); }
			ptr<CashDrawerCapabilities> operator->() { return get(); }
		} Capabilities;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICashDrawer_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			ptr<CashDrawerEventSource> get() { CashDrawerEventSource* value; hrcheck(enc(&ICashDrawer_adaptor::DrawerEventSource)->_get_DrawerEventSource(&value)); return from_abi(value); }
			ptr<CashDrawerEventSource> operator()() { return get(); }
			operator ptr<CashDrawerEventSource> () { return get(); }
			ptr<CashDrawerEventSource> operator->() { return get(); }
		} DrawerEventSource;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ICashDrawer_adaptor::IsDrawerOpen)->_get_IsDrawerOpen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDrawerOpen;
		struct : property {
			ptr<CashDrawerStatus> get() { CashDrawerStatus* value; hrcheck(enc(&ICashDrawer_adaptor::Status)->_get_Status(&value)); return from_abi(value); }
			ptr<CashDrawerStatus> operator()() { return get(); }
			operator ptr<CashDrawerStatus> () { return get(); }
			ptr<CashDrawerStatus> operator->() { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CashDrawer>, ptr<CashDrawerStatusUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICashDrawer_adaptor::StatusUpdated)->_add_StatusUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICashDrawer_adaptor::StatusUpdated)->_remove_StatusUpdated(token)); }
		} StatusUpdated;
	};
	ptr<Foundation::IAsyncOperation<ptr<ClaimedCashDrawer>>> ClaimDrawerAsync() { Foundation::IAsyncOperation<ClaimedCashDrawer*>* operation; hrcheck(X::get()->_ClaimDrawerAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> CheckHealthAsync(UnifiedPosHealthCheckLevel level) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_CheckHealthAsync(level, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<hstring>> GetStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_GetStatisticsAsync(to_abi(statisticsCategories), &operation)); return from_abi(operation); }
	ICashDrawer_adaptor() {}
};
template<typename X> struct adapt<ICashDrawer, X> : Windows::Devices::PointOfService::ICashDrawer_adaptor<X> { typedef adapt ICashDrawer; };
struct ICashDrawer : ICashDrawer_raw, generate<ICashDrawer> {};

// CashDrawer
template<typename> struct CashDrawer_statics {
	static hstring GetDeviceSelector(PosConnectionTypes connectionTypes) { HSTRING value; hrcheck(get_activation_factory<CashDrawer, ICashDrawerStatics2>()->_GetDeviceSelectorWithConnectionTypes(connectionTypes, &value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<CashDrawer>>> GetDefaultAsync() { Foundation::IAsyncOperation<CashDrawer*>* result; hrcheck(get_activation_factory<CashDrawer, ICashDrawerStatics>()->_GetDefaultAsync(&result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<ptr<CashDrawer>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<CashDrawer*>* result; hrcheck(get_activation_factory<CashDrawer, ICashDrawerStatics>()->_FromIdAsync(deviceId, &result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<CashDrawer, ICashDrawerStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
};

template<typename X> struct statics<CashDrawer, X> : X, Windows::Devices::PointOfService::CashDrawer_statics<void> {
	typedef typename X::root_type CashDrawer;
};
struct CashDrawer : generate<CashDrawer> {};

// CashDrawerClosedEventArgs
template<typename X> struct statics<CashDrawerClosedEventArgs, X> : X {
	typedef typename X::root_type CashDrawerClosedEventArgs;
};
struct CashDrawerClosedEventArgs : generate<CashDrawerClosedEventArgs> {};

// CashDrawerOpenedEventArgs
template<typename X> struct statics<CashDrawerOpenedEventArgs, X> : X {
	typedef typename X::root_type CashDrawerOpenedEventArgs;
};
struct CashDrawerOpenedEventArgs : generate<CashDrawerOpenedEventArgs> {};

// ICashDrawerEventSource
struct ICashDrawerEventSource_raw : IInspectable {
	virtual STDMETHODIMP _add_DrawerClosed(Foundation::TypedEventHandler<CashDrawerEventSource*, CashDrawerClosedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DrawerClosed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DrawerOpened(Foundation::TypedEventHandler<CashDrawerEventSource*, CashDrawerOpenedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DrawerOpened(Foundation::EventRegistrationToken token);
};
template<typename X> struct ICashDrawerEventSource_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CashDrawerEventSource>, ptr<CashDrawerClosedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICashDrawerEventSource_adaptor::DrawerClosed)->_add_DrawerClosed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICashDrawerEventSource_adaptor::DrawerClosed)->_remove_DrawerClosed(token)); }
		} DrawerClosed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CashDrawerEventSource>, ptr<CashDrawerOpenedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICashDrawerEventSource_adaptor::DrawerOpened)->_add_DrawerOpened(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICashDrawerEventSource_adaptor::DrawerOpened)->_remove_DrawerOpened(token)); }
		} DrawerOpened;
	};
	ICashDrawerEventSource_adaptor() {}
};
template<typename X> struct adapt<ICashDrawerEventSource, X> : Windows::Devices::PointOfService::ICashDrawerEventSource_adaptor<X> { typedef adapt ICashDrawerEventSource; };
struct ICashDrawerEventSource : ICashDrawerEventSource_raw, generate<ICashDrawerEventSource> {};

// CashDrawerEventSource
template<typename X> struct statics<CashDrawerEventSource, X> : X {
	typedef typename X::root_type CashDrawerEventSource;
};
struct CashDrawerEventSource : generate<CashDrawerEventSource> {};

// IClaimedCashDrawer
struct IClaimedCashDrawer_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_IsEnabled(bool *value);
	virtual STDMETHODIMP _get_IsDrawerOpen(bool *value);
	virtual STDMETHODIMP _get_CloseAlarm(CashDrawerCloseAlarm* *value);
	virtual STDMETHODIMP _OpenDrawerAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _EnableAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _DisableAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _RetainDeviceAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _ResetStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _UpdateStatisticsAsync(Foundation::Collections::IIterable<Foundation::Collections::IKeyValuePair<HSTRING, HSTRING>*>* statistics, Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_ReleaseDeviceRequested(Foundation::TypedEventHandler<ClaimedCashDrawer*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReleaseDeviceRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IClaimedCashDrawer_adaptor : X {
	union {
		struct : property {
			ptr<CashDrawerCloseAlarm> get() { CashDrawerCloseAlarm* value; hrcheck(enc(&IClaimedCashDrawer_adaptor::CloseAlarm)->_get_CloseAlarm(&value)); return from_abi(value); }
			ptr<CashDrawerCloseAlarm> operator()() { return get(); }
			operator ptr<CashDrawerCloseAlarm> () { return get(); }
			ptr<CashDrawerCloseAlarm> operator->() { return get(); }
		} CloseAlarm;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedCashDrawer_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedCashDrawer_adaptor::IsDrawerOpen)->_get_IsDrawerOpen(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsDrawerOpen;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IClaimedCashDrawer_adaptor::IsEnabled)->_get_IsEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedCashDrawer>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedCashDrawer_adaptor::ReleaseDeviceRequested)->_add_ReleaseDeviceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedCashDrawer_adaptor::ReleaseDeviceRequested)->_remove_ReleaseDeviceRequested(token)); }
		} ReleaseDeviceRequested;
	};
	ptr<Foundation::IAsyncOperation<bool>> OpenDrawerAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_OpenDrawerAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> EnableAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_EnableAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> DisableAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_DisableAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> RetainDeviceAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_RetainDeviceAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> ResetStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_ResetStatisticsAsync(to_abi(statisticsCategories), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> UpdateStatisticsAsync(pptr<Foundation::Collections::IIterable<ptr<Foundation::Collections::IKeyValuePair<hstring, hstring>>>> statistics) { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_UpdateStatisticsAsync(to_abi(statistics), &result)); return from_abi(result); }
	IClaimedCashDrawer_adaptor() {}
};
template<typename X> struct adapt<IClaimedCashDrawer, X> : Windows::Devices::PointOfService::IClaimedCashDrawer_adaptor<X> { typedef adapt IClaimedCashDrawer; };
struct IClaimedCashDrawer : IClaimedCashDrawer_raw, generate<IClaimedCashDrawer> {};

// ClaimedCashDrawer
template<typename X> struct statics<ClaimedCashDrawer, X> : X {
	typedef typename X::root_type ClaimedCashDrawer;
};
struct ClaimedCashDrawer : generate<ClaimedCashDrawer> {};

// ICashDrawerCloseAlarm
struct ICashDrawerCloseAlarm_raw : IInspectable {
	virtual STDMETHODIMP _put_AlarmTimeout(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_AlarmTimeout(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_BeepFrequency(unsigned value);
	virtual STDMETHODIMP _get_BeepFrequency(unsigned *value);
	virtual STDMETHODIMP _put_BeepDuration(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_BeepDuration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_BeepDelay(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_BeepDelay(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _add_AlarmTimeoutExpired(Foundation::TypedEventHandler<CashDrawerCloseAlarm*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AlarmTimeoutExpired(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncOperation<bool>* *result);
};
template<typename X> struct ICashDrawerCloseAlarm_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::AlarmTimeout)->_get_AlarmTimeout(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::AlarmTimeout)->_put_AlarmTimeout(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} AlarmTimeout;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::BeepDelay)->_get_BeepDelay(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::BeepDelay)->_put_BeepDelay(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} BeepDelay;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::BeepDuration)->_get_BeepDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::BeepDuration)->_put_BeepDuration(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} BeepDuration;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::BeepFrequency)->_get_BeepFrequency(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::BeepFrequency)->_put_BeepFrequency(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} BeepFrequency;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<CashDrawerCloseAlarm>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::AlarmTimeoutExpired)->_add_AlarmTimeoutExpired(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&ICashDrawerCloseAlarm_adaptor::AlarmTimeoutExpired)->_remove_AlarmTimeoutExpired(token)); }
		} AlarmTimeoutExpired;
	};
	ptr<Foundation::IAsyncOperation<bool>> StartAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_StartAsync(&result)); return from_abi(result); }
	ICashDrawerCloseAlarm_adaptor() {}
};
template<typename X> struct adapt<ICashDrawerCloseAlarm, X> : Windows::Devices::PointOfService::ICashDrawerCloseAlarm_adaptor<X> { typedef adapt ICashDrawerCloseAlarm; };
struct ICashDrawerCloseAlarm : ICashDrawerCloseAlarm_raw, generate<ICashDrawerCloseAlarm> {};

// CashDrawerCloseAlarm
template<typename X> struct statics<CashDrawerCloseAlarm, X> : X {
	typedef typename X::root_type CashDrawerCloseAlarm;
};
struct CashDrawerCloseAlarm : generate<CashDrawerCloseAlarm> {};

// ILineDisplayStatics
struct ILineDisplayStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<LineDisplay*>* *operation);
	virtual STDMETHODIMP _GetDefaultAsync(Foundation::IAsyncOperation<LineDisplay*>* *result);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _GetDeviceSelectorWithConnectionTypes(PosConnectionTypes connectionTypes, HSTRING *value);
};

// ILineDisplayStatics2
struct ILineDisplayStatics2 : IInspectable {
	virtual STDMETHODIMP _get_StatisticsCategorySelector(LineDisplayStatisticsCategorySelector* *value);
};

// ILineDisplay2
struct ILineDisplay2_raw : IInspectable {
	virtual STDMETHODIMP _CheckPowerStatusAsync(Foundation::IAsyncOperation<LineDisplayPowerStatus>* *result);
};
template<typename X> struct ILineDisplay2_adaptor : X {
	ptr<Foundation::IAsyncOperation<LineDisplayPowerStatus>> CheckPowerStatusAsync() { Foundation::IAsyncOperation<LineDisplayPowerStatus>* result; hrcheck(X::get()->_CheckPowerStatusAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<ILineDisplay2, X> : Windows::Devices::PointOfService::ILineDisplay2_adaptor<X> { typedef adapt ILineDisplay2; };
struct ILineDisplay2 : ILineDisplay2_raw, generate<ILineDisplay2> {};

// ILineDisplay
struct ILineDisplay_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Capabilities(LineDisplayCapabilities* *value);
	virtual STDMETHODIMP _get_PhysicalDeviceName(HSTRING *value);
	virtual STDMETHODIMP _get_PhysicalDeviceDescription(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceControlDescription(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceControlVersion(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceServiceVersion(HSTRING *value);
	virtual STDMETHODIMP _ClaimAsync(Foundation::IAsyncOperation<ClaimedLineDisplay*>* *result);
};
template<typename X> struct ILineDisplay_adaptor : X {
	union {
		struct : property {
			ptr<LineDisplayCapabilities> get() { LineDisplayCapabilities* value; hrcheck(enc(&ILineDisplay_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<LineDisplayCapabilities> operator()() { return get(); }
			operator ptr<LineDisplayCapabilities> () { return get(); }
			ptr<LineDisplayCapabilities> operator->() { return get(); }
		} Capabilities;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplay_adaptor::DeviceControlDescription)->_get_DeviceControlDescription(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceControlDescription;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplay_adaptor::DeviceControlVersion)->_get_DeviceControlVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceControlVersion;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplay_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplay_adaptor::DeviceServiceVersion)->_get_DeviceServiceVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceServiceVersion;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplay_adaptor::PhysicalDeviceDescription)->_get_PhysicalDeviceDescription(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhysicalDeviceDescription;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplay_adaptor::PhysicalDeviceName)->_get_PhysicalDeviceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhysicalDeviceName;
	};
	ptr<Foundation::IAsyncOperation<ptr<ClaimedLineDisplay>>> ClaimAsync() { Foundation::IAsyncOperation<ClaimedLineDisplay*>* result; hrcheck(X::get()->_ClaimAsync(&result)); return from_abi(result); }
	ILineDisplay_adaptor() {}
};
template<typename X> struct adapt<ILineDisplay, X> : Windows::Devices::PointOfService::ILineDisplay_adaptor<X> { typedef adapt ILineDisplay; };
struct ILineDisplay : ILineDisplay_raw, generate<ILineDisplay> {};

// LineDisplay
template<typename> struct LineDisplay_statics {
	static struct _StatisticsCategorySelector : property {
		ptr<LineDisplayStatisticsCategorySelector> get() { LineDisplayStatisticsCategorySelector* value; hrcheck(get_activation_factory<LineDisplay, ILineDisplayStatics2>()->_get_StatisticsCategorySelector(&value)); return from_abi(value); }
		ptr<LineDisplayStatisticsCategorySelector> operator()() { return get(); }
		operator ptr<LineDisplayStatisticsCategorySelector> () { return get(); }
		ptr<LineDisplayStatisticsCategorySelector> operator->() { return get(); }
	} StatisticsCategorySelector;
	static ptr<Foundation::IAsyncOperation<ptr<LineDisplay>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<LineDisplay*>* operation; hrcheck(get_activation_factory<LineDisplay, ILineDisplayStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<LineDisplay>>> GetDefaultAsync() { Foundation::IAsyncOperation<LineDisplay*>* result; hrcheck(get_activation_factory<LineDisplay, ILineDisplayStatics>()->_GetDefaultAsync(&result)); return from_abi(result); }
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<LineDisplay, ILineDisplayStatics>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static hstring GetDeviceSelector(PosConnectionTypes connectionTypes) { HSTRING value; hrcheck(get_activation_factory<LineDisplay, ILineDisplayStatics>()->_GetDeviceSelectorWithConnectionTypes(connectionTypes, &value)); return from_abi(value); }
};
template<typename X> typename LineDisplay_statics<X>::_StatisticsCategorySelector LineDisplay_statics<X>::StatisticsCategorySelector;

template<typename X> struct statics<LineDisplay, X> : X, Windows::Devices::PointOfService::LineDisplay_statics<void> {
	typedef typename X::root_type LineDisplay;
};
struct LineDisplay : generate<LineDisplay> {};

// ILineDisplayStatisticsCategorySelector
struct ILineDisplayStatisticsCategorySelector_raw : IInspectable {
	virtual STDMETHODIMP _get_AllStatistics(HSTRING *value);
	virtual STDMETHODIMP _get_UnifiedPosStatistics(HSTRING *value);
	virtual STDMETHODIMP _get_ManufacturerStatistics(HSTRING *value);
};
template<typename X> struct ILineDisplayStatisticsCategorySelector_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplayStatisticsCategorySelector_adaptor::AllStatistics)->_get_AllStatistics(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AllStatistics;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplayStatisticsCategorySelector_adaptor::ManufacturerStatistics)->_get_ManufacturerStatistics(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ManufacturerStatistics;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ILineDisplayStatisticsCategorySelector_adaptor::UnifiedPosStatistics)->_get_UnifiedPosStatistics(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UnifiedPosStatistics;
	};
	ILineDisplayStatisticsCategorySelector_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayStatisticsCategorySelector, X> : Windows::Devices::PointOfService::ILineDisplayStatisticsCategorySelector_adaptor<X> { typedef adapt ILineDisplayStatisticsCategorySelector; };
struct ILineDisplayStatisticsCategorySelector : ILineDisplayStatisticsCategorySelector_raw, generate<ILineDisplayStatisticsCategorySelector> {};

// LineDisplayStatisticsCategorySelector
template<typename X> struct statics<LineDisplayStatisticsCategorySelector, X> : X {
	typedef typename X::root_type LineDisplayStatisticsCategorySelector;
};
struct LineDisplayStatisticsCategorySelector : generate<LineDisplayStatisticsCategorySelector> {};

// IClaimedLineDisplayStatics
struct IClaimedLineDisplayStatics : IInspectable {
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Foundation::IAsyncOperation<ClaimedLineDisplay*>* *operation);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *result);
	virtual STDMETHODIMP _GetDeviceSelectorWithConnectionTypes(PosConnectionTypes connectionTypes, HSTRING *value);
};

// IClaimedLineDisplay2
struct IClaimedLineDisplay2_raw : IInspectable {
	virtual STDMETHODIMP _GetStatisticsAsync(Foundation::Collections::IIterable<HSTRING>* statisticsCategories, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _CheckHealthAsync(UnifiedPosHealthCheckLevel level, Foundation::IAsyncOperation<HSTRING>* *result);
	virtual STDMETHODIMP _CheckPowerStatusAsync(Foundation::IAsyncOperation<LineDisplayPowerStatus>* *result);
	virtual STDMETHODIMP _add_StatusUpdated(Foundation::TypedEventHandler<ClaimedLineDisplay*, LineDisplayStatusUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StatusUpdated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_SupportedScreenSizesInCharacters(Foundation::Collections::IVectorView<Foundation::Size>* *value);
	virtual STDMETHODIMP _get_MaxBitmapSizeInPixels(Foundation::Size *value);
	virtual STDMETHODIMP _get_SupportedCharacterSets(Foundation::Collections::IVectorView<int>* *value);
	virtual STDMETHODIMP _get_CustomGlyphs(LineDisplayCustomGlyphs* *value);
	virtual STDMETHODIMP _GetAttributes(LineDisplayAttributes* *value);
	virtual STDMETHODIMP _TryUpdateAttributesAsync(LineDisplayAttributes* attributes, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TrySetDescriptorAsync(unsigned descriptor, LineDisplayDescriptorState descriptorState, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryClearDescriptorsAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryCreateWindowAsync(Foundation::Rect viewport, Foundation::Size windowSize, Foundation::IAsyncOperation<LineDisplayWindow*>* *result);
	virtual STDMETHODIMP _TryStoreStorageFileBitmapAsync(Storage::StorageFile* bitmap, Foundation::IAsyncOperation<LineDisplayStoredBitmap*>* *result);
	virtual STDMETHODIMP _TryStoreStorageFileBitmapWithAlignmentAsync(Storage::StorageFile* bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment, Foundation::IAsyncOperation<LineDisplayStoredBitmap*>* *result);
	virtual STDMETHODIMP _TryStoreStorageFileBitmapWithAlignmentAndWidthAsync(Storage::StorageFile* bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment, int widthInPixels, Foundation::IAsyncOperation<LineDisplayStoredBitmap*>* *result);
};
template<typename X> struct IClaimedLineDisplay2_adaptor : X {
	union {
		struct : property {
			ptr<LineDisplayCustomGlyphs> get() { LineDisplayCustomGlyphs* value; hrcheck(enc(&IClaimedLineDisplay2_adaptor::CustomGlyphs)->_get_CustomGlyphs(&value)); return from_abi(value); }
			ptr<LineDisplayCustomGlyphs> operator()() { return get(); }
			operator ptr<LineDisplayCustomGlyphs> () { return get(); }
			ptr<LineDisplayCustomGlyphs> operator->() { return get(); }
		} CustomGlyphs;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&IClaimedLineDisplay2_adaptor::MaxBitmapSizeInPixels)->_get_MaxBitmapSizeInPixels(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} MaxBitmapSizeInPixels;
		struct : property {
			ptr<Foundation::Collections::IVectorView<int>> get() { Foundation::Collections::IVectorView<int>* value; hrcheck(enc(&IClaimedLineDisplay2_adaptor::SupportedCharacterSets)->_get_SupportedCharacterSets(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<int>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<int>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<int>> operator->() { return get(); }
		} SupportedCharacterSets;
		struct : property {
			ptr<Foundation::Collections::IVectorView<Foundation::Size>> get() { Foundation::Collections::IVectorView<Foundation::Size>* value; hrcheck(enc(&IClaimedLineDisplay2_adaptor::SupportedScreenSizesInCharacters)->_get_SupportedScreenSizesInCharacters(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<Foundation::Size>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<Foundation::Size>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<Foundation::Size>> operator->() { return get(); }
		} SupportedScreenSizesInCharacters;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedLineDisplay>, ptr<LineDisplayStatusUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedLineDisplay2_adaptor::StatusUpdated)->_add_StatusUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedLineDisplay2_adaptor::StatusUpdated)->_remove_StatusUpdated(token)); }
		} StatusUpdated;
	};
	ptr<Foundation::IAsyncOperation<hstring>> GetStatisticsAsync(pptr<Foundation::Collections::IIterable<hstring>> statisticsCategories) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_GetStatisticsAsync(to_abi(statisticsCategories), &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<hstring>> CheckHealthAsync(UnifiedPosHealthCheckLevel level) { Foundation::IAsyncOperation<HSTRING>* result; hrcheck(X::get()->_CheckHealthAsync(level, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<LineDisplayPowerStatus>> CheckPowerStatusAsync() { Foundation::IAsyncOperation<LineDisplayPowerStatus>* result; hrcheck(X::get()->_CheckPowerStatusAsync(&result)); return from_abi(result); }
	ptr<LineDisplayAttributes> GetAttributes() { LineDisplayAttributes* value; hrcheck(X::get()->_GetAttributes(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<bool>> TryUpdateAttributesAsync(pptr<LineDisplayAttributes> attributes) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryUpdateAttributesAsync(attributes, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TrySetDescriptorAsync(unsigned descriptor, LineDisplayDescriptorState descriptorState) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TrySetDescriptorAsync(descriptor, descriptorState, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryClearDescriptorsAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryClearDescriptorsAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<LineDisplayWindow>>> TryCreateWindowAsync(const Foundation::Rect& viewport, const Foundation::Size& windowSize) { Foundation::IAsyncOperation<LineDisplayWindow*>* result; hrcheck(X::get()->_TryCreateWindowAsync(viewport, windowSize, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<LineDisplayStoredBitmap>>> TryStoreStorageFileBitmapAsync(pptr<Storage::StorageFile> bitmap) { Foundation::IAsyncOperation<LineDisplayStoredBitmap*>* result; hrcheck(X::get()->_TryStoreStorageFileBitmapAsync(bitmap, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<LineDisplayStoredBitmap>>> TryStoreStorageFileBitmapAsync(pptr<Storage::StorageFile> bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment) { Foundation::IAsyncOperation<LineDisplayStoredBitmap*>* result; hrcheck(X::get()->_TryStoreStorageFileBitmapWithAlignmentAsync(bitmap, horizontalAlignment, verticalAlignment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<LineDisplayStoredBitmap>>> TryStoreStorageFileBitmapAsync(pptr<Storage::StorageFile> bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment, int widthInPixels) { Foundation::IAsyncOperation<LineDisplayStoredBitmap*>* result; hrcheck(X::get()->_TryStoreStorageFileBitmapWithAlignmentAndWidthAsync(bitmap, horizontalAlignment, verticalAlignment, widthInPixels, &result)); return from_abi(result); }
	IClaimedLineDisplay2_adaptor() {}
};
template<typename X> struct adapt<IClaimedLineDisplay2, X> : Windows::Devices::PointOfService::IClaimedLineDisplay2_adaptor<X> { typedef adapt IClaimedLineDisplay2; };
struct IClaimedLineDisplay2 : IClaimedLineDisplay2_raw, generate<IClaimedLineDisplay2> {};

// IClaimedLineDisplay
struct IClaimedLineDisplay_raw : IInspectable {
	virtual STDMETHODIMP _get_DeviceId(HSTRING *value);
	virtual STDMETHODIMP _get_Capabilities(LineDisplayCapabilities* *value);
	virtual STDMETHODIMP _get_PhysicalDeviceName(HSTRING *value);
	virtual STDMETHODIMP _get_PhysicalDeviceDescription(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceControlDescription(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceControlVersion(HSTRING *value);
	virtual STDMETHODIMP _get_DeviceServiceVersion(HSTRING *value);
	virtual STDMETHODIMP _get_DefaultWindow(LineDisplayWindow* *value);
	virtual STDMETHODIMP _RetainDevice();
	virtual STDMETHODIMP _add_ReleaseDeviceRequested(Foundation::TypedEventHandler<ClaimedLineDisplay*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ReleaseDeviceRequested(Foundation::EventRegistrationToken token);
};
template<typename X> struct IClaimedLineDisplay_adaptor : X {
	union {
		struct : property {
			ptr<LineDisplayCapabilities> get() { LineDisplayCapabilities* value; hrcheck(enc(&IClaimedLineDisplay_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<LineDisplayCapabilities> operator()() { return get(); }
			operator ptr<LineDisplayCapabilities> () { return get(); }
			ptr<LineDisplayCapabilities> operator->() { return get(); }
		} Capabilities;
		struct : property {
			ptr<LineDisplayWindow> get() { LineDisplayWindow* value; hrcheck(enc(&IClaimedLineDisplay_adaptor::DefaultWindow)->_get_DefaultWindow(&value)); return from_abi(value); }
			ptr<LineDisplayWindow> operator()() { return get(); }
			operator ptr<LineDisplayWindow> () { return get(); }
			ptr<LineDisplayWindow> operator->() { return get(); }
		} DefaultWindow;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedLineDisplay_adaptor::DeviceControlDescription)->_get_DeviceControlDescription(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceControlDescription;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedLineDisplay_adaptor::DeviceControlVersion)->_get_DeviceControlVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceControlVersion;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedLineDisplay_adaptor::DeviceId)->_get_DeviceId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedLineDisplay_adaptor::DeviceServiceVersion)->_get_DeviceServiceVersion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DeviceServiceVersion;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedLineDisplay_adaptor::PhysicalDeviceDescription)->_get_PhysicalDeviceDescription(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhysicalDeviceDescription;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IClaimedLineDisplay_adaptor::PhysicalDeviceName)->_get_PhysicalDeviceName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} PhysicalDeviceName;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<ClaimedLineDisplay>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IClaimedLineDisplay_adaptor::ReleaseDeviceRequested)->_add_ReleaseDeviceRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IClaimedLineDisplay_adaptor::ReleaseDeviceRequested)->_remove_ReleaseDeviceRequested(token)); }
		} ReleaseDeviceRequested;
	};
	void RetainDevice() { hrcheck(X::get()->_RetainDevice()); }
	IClaimedLineDisplay_adaptor() {}
};
template<typename X> struct adapt<IClaimedLineDisplay, X> : Windows::Devices::PointOfService::IClaimedLineDisplay_adaptor<X> { typedef adapt IClaimedLineDisplay; };
struct IClaimedLineDisplay : IClaimedLineDisplay_raw, generate<IClaimedLineDisplay> {};

// ClaimedLineDisplay
template<typename> struct ClaimedLineDisplay_statics {
	static ptr<Foundation::IAsyncOperation<ptr<ClaimedLineDisplay>>> FromIdAsync(hstring_ref deviceId) { Foundation::IAsyncOperation<ClaimedLineDisplay*>* operation; hrcheck(get_activation_factory<ClaimedLineDisplay, IClaimedLineDisplayStatics>()->_FromIdAsync(deviceId, &operation)); return from_abi(operation); }
	static hstring GetDeviceSelector() { HSTRING result; hrcheck(get_activation_factory<ClaimedLineDisplay, IClaimedLineDisplayStatics>()->_GetDeviceSelector(&result)); return from_abi(result); }
	static hstring GetDeviceSelector(PosConnectionTypes connectionTypes) { HSTRING value; hrcheck(get_activation_factory<ClaimedLineDisplay, IClaimedLineDisplayStatics>()->_GetDeviceSelectorWithConnectionTypes(connectionTypes, &value)); return from_abi(value); }
};

template<typename X> struct statics<ClaimedLineDisplay, X> : X, Windows::Devices::PointOfService::ClaimedLineDisplay_statics<void> {
	typedef typename X::root_type ClaimedLineDisplay;
};
struct ClaimedLineDisplay : generate<ClaimedLineDisplay> {
	using IClaimedLineDisplay2::TryStoreStorageFileBitmapAsync;
};

// ILineDisplayCursorAttributes
struct ILineDisplayCursorAttributes_raw : IInspectable {
	virtual STDMETHODIMP _get_IsBlinkEnabled(bool *value);
	virtual STDMETHODIMP _put_IsBlinkEnabled(bool value);
	virtual STDMETHODIMP _get_CursorType(LineDisplayCursorType *value);
	virtual STDMETHODIMP _put_CursorType(LineDisplayCursorType value);
	virtual STDMETHODIMP _get_IsAutoAdvanceEnabled(bool *value);
	virtual STDMETHODIMP _put_IsAutoAdvanceEnabled(bool value);
	virtual STDMETHODIMP _get_Position(Foundation::Point *value);
	virtual STDMETHODIMP _put_Position(Foundation::Point value);
};
template<typename X> struct ILineDisplayCursorAttributes_adaptor : X {
	union {
		struct : property {
			LineDisplayCursorType get() { LineDisplayCursorType value; hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::CursorType)->_get_CursorType(&value)); return value; }
			LineDisplayCursorType operator()() { return get(); }
			operator LineDisplayCursorType () { return get(); }
			void put(LineDisplayCursorType value) { hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::CursorType)->_put_CursorType(value)); }
			void operator=(LineDisplayCursorType value) { put(value); }
			void operator()(LineDisplayCursorType value) { put(value); }
		} CursorType;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::IsAutoAdvanceEnabled)->_get_IsAutoAdvanceEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::IsAutoAdvanceEnabled)->_put_IsAutoAdvanceEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsAutoAdvanceEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::IsBlinkEnabled)->_get_IsBlinkEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::IsBlinkEnabled)->_put_IsBlinkEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsBlinkEnabled;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
			void put(const Foundation::Point& value) { hrcheck(enc(&ILineDisplayCursorAttributes_adaptor::Position)->_put_Position(value)); }
			void operator=(const Foundation::Point& value) { put(value); }
			void operator()(const Foundation::Point& value) { put(value); }
		} Position;
	};
	ILineDisplayCursorAttributes_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayCursorAttributes, X> : Windows::Devices::PointOfService::ILineDisplayCursorAttributes_adaptor<X> { typedef adapt ILineDisplayCursorAttributes; };
struct ILineDisplayCursorAttributes : ILineDisplayCursorAttributes_raw, generate<ILineDisplayCursorAttributes> {};

// LineDisplayCursorAttributes
template<typename X> struct statics<LineDisplayCursorAttributes, X> : X {
	typedef typename X::root_type LineDisplayCursorAttributes;
};
struct LineDisplayCursorAttributes : generate<LineDisplayCursorAttributes> {};

// ILineDisplayCursor
struct ILineDisplayCursor_raw : IInspectable {
	virtual STDMETHODIMP _get_CanCustomize(bool *value);
	virtual STDMETHODIMP _get_IsBlinkSupported(bool *value);
	virtual STDMETHODIMP _get_IsBlockSupported(bool *value);
	virtual STDMETHODIMP _get_IsHalfBlockSupported(bool *value);
	virtual STDMETHODIMP _get_IsUnderlineSupported(bool *value);
	virtual STDMETHODIMP _get_IsReverseSupported(bool *value);
	virtual STDMETHODIMP _get_IsOtherSupported(bool *value);
	virtual STDMETHODIMP _GetAttributes(LineDisplayCursorAttributes* *result);
	virtual STDMETHODIMP _TryUpdateAttributesAsync(LineDisplayCursorAttributes* attributes, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ILineDisplayCursor_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursor_adaptor::CanCustomize)->_get_CanCustomize(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanCustomize;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursor_adaptor::IsBlinkSupported)->_get_IsBlinkSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBlinkSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursor_adaptor::IsBlockSupported)->_get_IsBlockSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBlockSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursor_adaptor::IsHalfBlockSupported)->_get_IsHalfBlockSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHalfBlockSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursor_adaptor::IsOtherSupported)->_get_IsOtherSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOtherSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursor_adaptor::IsReverseSupported)->_get_IsReverseSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsReverseSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCursor_adaptor::IsUnderlineSupported)->_get_IsUnderlineSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsUnderlineSupported;
	};
	ptr<LineDisplayCursorAttributes> GetAttributes() { LineDisplayCursorAttributes* result; hrcheck(X::get()->_GetAttributes(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryUpdateAttributesAsync(pptr<LineDisplayCursorAttributes> attributes) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryUpdateAttributesAsync(attributes, &operation)); return from_abi(operation); }
	ILineDisplayCursor_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayCursor, X> : Windows::Devices::PointOfService::ILineDisplayCursor_adaptor<X> { typedef adapt ILineDisplayCursor; };
struct ILineDisplayCursor : ILineDisplayCursor_raw, generate<ILineDisplayCursor> {};

// LineDisplayCursor
template<typename X> struct statics<LineDisplayCursor, X> : X {
	typedef typename X::root_type LineDisplayCursor;
};
struct LineDisplayCursor : generate<LineDisplayCursor> {};

// ILineDisplayMarquee
struct ILineDisplayMarquee_raw : IInspectable {
	virtual STDMETHODIMP _get_Format(LineDisplayMarqueeFormat *value);
	virtual STDMETHODIMP _put_Format(LineDisplayMarqueeFormat value);
	virtual STDMETHODIMP _get_RepeatWaitInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_RepeatWaitInterval(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_ScrollWaitInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_ScrollWaitInterval(Foundation::TimeSpan value);
	virtual STDMETHODIMP _TryStartScrollingAsync(LineDisplayScrollDirection direction, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryStopScrollingAsync(Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ILineDisplayMarquee_adaptor : X {
	union {
		struct : property {
			LineDisplayMarqueeFormat get() { LineDisplayMarqueeFormat value; hrcheck(enc(&ILineDisplayMarquee_adaptor::Format)->_get_Format(&value)); return value; }
			LineDisplayMarqueeFormat operator()() { return get(); }
			operator LineDisplayMarqueeFormat () { return get(); }
			void put(LineDisplayMarqueeFormat value) { hrcheck(enc(&ILineDisplayMarquee_adaptor::Format)->_put_Format(value)); }
			void operator=(LineDisplayMarqueeFormat value) { put(value); }
			void operator()(LineDisplayMarqueeFormat value) { put(value); }
		} Format;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ILineDisplayMarquee_adaptor::RepeatWaitInterval)->_get_RepeatWaitInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&ILineDisplayMarquee_adaptor::RepeatWaitInterval)->_put_RepeatWaitInterval(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} RepeatWaitInterval;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ILineDisplayMarquee_adaptor::ScrollWaitInterval)->_get_ScrollWaitInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&ILineDisplayMarquee_adaptor::ScrollWaitInterval)->_put_ScrollWaitInterval(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} ScrollWaitInterval;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryStartScrollingAsync(LineDisplayScrollDirection direction) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryStartScrollingAsync(direction, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryStopScrollingAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryStopScrollingAsync(&operation)); return from_abi(operation); }
	ILineDisplayMarquee_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayMarquee, X> : Windows::Devices::PointOfService::ILineDisplayMarquee_adaptor<X> { typedef adapt ILineDisplayMarquee; };
struct ILineDisplayMarquee : ILineDisplayMarquee_raw, generate<ILineDisplayMarquee> {};

// LineDisplayMarquee
template<typename X> struct statics<LineDisplayMarquee, X> : X {
	typedef typename X::root_type LineDisplayMarquee;
};
struct LineDisplayMarquee : generate<LineDisplayMarquee> {};

// ILineDisplayStoredBitmap
struct ILineDisplayStoredBitmap_raw : IInspectable {
	virtual STDMETHODIMP _get_EscapeSequence(HSTRING *escapeSequence);
	virtual STDMETHODIMP _TryDeleteAsync(Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ILineDisplayStoredBitmap_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING escapeSequence; hrcheck(enc(&ILineDisplayStoredBitmap_adaptor::EscapeSequence)->_get_EscapeSequence(&escapeSequence)); return from_abi(escapeSequence); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} EscapeSequence;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryDeleteAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDeleteAsync(&operation)); return from_abi(operation); }
	ILineDisplayStoredBitmap_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayStoredBitmap, X> : Windows::Devices::PointOfService::ILineDisplayStoredBitmap_adaptor<X> { typedef adapt ILineDisplayStoredBitmap; };
struct ILineDisplayStoredBitmap : ILineDisplayStoredBitmap_raw, generate<ILineDisplayStoredBitmap> {};

// LineDisplayStoredBitmap
template<typename X> struct statics<LineDisplayStoredBitmap, X> : X {
	typedef typename X::root_type LineDisplayStoredBitmap;
};
struct LineDisplayStoredBitmap : generate<LineDisplayStoredBitmap> {};

// ILineDisplayWindow
struct ILineDisplayWindow_raw : IInspectable {
	virtual STDMETHODIMP _get_SizeInCharacters(Foundation::Size *value);
	virtual STDMETHODIMP _get_InterCharacterWaitInterval(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_InterCharacterWaitInterval(Foundation::TimeSpan value);
	virtual STDMETHODIMP _TryRefreshAsync(Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayTextAsync(HSTRING text, LineDisplayTextAttribute displayAttribute, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayTextAtPositionAsync(HSTRING text, LineDisplayTextAttribute displayAttribute, Foundation::Point startPosition, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayTextNormalAsync(HSTRING text, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryScrollTextAsync(LineDisplayScrollDirection direction, unsigned numberOfColumnsOrRows, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryClearTextAsync(Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ILineDisplayWindow_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ILineDisplayWindow_adaptor::InterCharacterWaitInterval)->_get_InterCharacterWaitInterval(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&ILineDisplayWindow_adaptor::InterCharacterWaitInterval)->_put_InterCharacterWaitInterval(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} InterCharacterWaitInterval;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ILineDisplayWindow_adaptor::SizeInCharacters)->_get_SizeInCharacters(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} SizeInCharacters;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryRefreshAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryRefreshAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayTextAsync(hstring_ref text, LineDisplayTextAttribute displayAttribute) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayTextAsync(text, displayAttribute, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayTextAsync(hstring_ref text, LineDisplayTextAttribute displayAttribute, const Foundation::Point& startPosition) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayTextAtPositionAsync(text, displayAttribute, startPosition, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayTextAsync(hstring_ref text) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayTextNormalAsync(text, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryScrollTextAsync(LineDisplayScrollDirection direction, unsigned numberOfColumnsOrRows) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryScrollTextAsync(direction, numberOfColumnsOrRows, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryClearTextAsync() { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryClearTextAsync(&operation)); return from_abi(operation); }
	ILineDisplayWindow_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayWindow, X> : Windows::Devices::PointOfService::ILineDisplayWindow_adaptor<X> { typedef adapt ILineDisplayWindow; };
struct ILineDisplayWindow : ILineDisplayWindow_raw, generate<ILineDisplayWindow> {};

// ILineDisplayWindow2
struct ILineDisplayWindow2_raw : IInspectable {
	virtual STDMETHODIMP _get_Cursor(LineDisplayCursor* *value);
	virtual STDMETHODIMP _get_Marquee(LineDisplayMarquee* *value);
	virtual STDMETHODIMP _ReadCharacterAtCursorAsync(Foundation::IAsyncOperation<unsigned>* *result);
	virtual STDMETHODIMP _TryDisplayStoredBitmapAtCursorAsync(LineDisplayStoredBitmap* bitmap, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayStorageFileBitmapAtCursorAsync(Storage::StorageFile* bitmap, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayStorageFileBitmapAtCursorWithAlignmentAsync(Storage::StorageFile* bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayStorageFileBitmapAtCursorWithAlignmentAndWidthAsync(Storage::StorageFile* bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment, int widthInPixels, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayStorageFileBitmapAtPointAsync(Storage::StorageFile* bitmap, Foundation::Point offsetInPixels, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDisplayStorageFileBitmapAtPointWithWidthAsync(Storage::StorageFile* bitmap, Foundation::Point offsetInPixels, int widthInPixels, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ILineDisplayWindow2_adaptor : X {
	union {
		struct : property {
			ptr<LineDisplayCursor> get() { LineDisplayCursor* value; hrcheck(enc(&ILineDisplayWindow2_adaptor::Cursor)->_get_Cursor(&value)); return from_abi(value); }
			ptr<LineDisplayCursor> operator()() { return get(); }
			operator ptr<LineDisplayCursor> () { return get(); }
			ptr<LineDisplayCursor> operator->() { return get(); }
		} Cursor;
		struct : property {
			ptr<LineDisplayMarquee> get() { LineDisplayMarquee* value; hrcheck(enc(&ILineDisplayWindow2_adaptor::Marquee)->_get_Marquee(&value)); return from_abi(value); }
			ptr<LineDisplayMarquee> operator()() { return get(); }
			operator ptr<LineDisplayMarquee> () { return get(); }
			ptr<LineDisplayMarquee> operator->() { return get(); }
		} Marquee;
	};
	ptr<Foundation::IAsyncOperation<unsigned>> ReadCharacterAtCursorAsync() { Foundation::IAsyncOperation<unsigned>* result; hrcheck(X::get()->_ReadCharacterAtCursorAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayStoredBitmapAtCursorAsync(pptr<LineDisplayStoredBitmap> bitmap) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayStoredBitmapAtCursorAsync(bitmap, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayStorageFileBitmapAtCursorAsync(pptr<Storage::StorageFile> bitmap) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayStorageFileBitmapAtCursorAsync(bitmap, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayStorageFileBitmapAtCursorAsync(pptr<Storage::StorageFile> bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayStorageFileBitmapAtCursorWithAlignmentAsync(bitmap, horizontalAlignment, verticalAlignment, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayStorageFileBitmapAtCursorAsync(pptr<Storage::StorageFile> bitmap, LineDisplayHorizontalAlignment horizontalAlignment, LineDisplayVerticalAlignment verticalAlignment, int widthInPixels) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayStorageFileBitmapAtCursorWithAlignmentAndWidthAsync(bitmap, horizontalAlignment, verticalAlignment, widthInPixels, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayStorageFileBitmapAtPointAsync(pptr<Storage::StorageFile> bitmap, const Foundation::Point& offsetInPixels) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayStorageFileBitmapAtPointAsync(bitmap, offsetInPixels, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDisplayStorageFileBitmapAtPointAsync(pptr<Storage::StorageFile> bitmap, const Foundation::Point& offsetInPixels, int widthInPixels) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDisplayStorageFileBitmapAtPointWithWidthAsync(bitmap, offsetInPixels, widthInPixels, &operation)); return from_abi(operation); }
	ILineDisplayWindow2_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayWindow2, X> : Windows::Devices::PointOfService::ILineDisplayWindow2_adaptor<X> { typedef adapt ILineDisplayWindow2; };
struct ILineDisplayWindow2 : ILineDisplayWindow2_raw, generate<ILineDisplayWindow2> {};

// LineDisplayWindow
template<typename X> struct statics<LineDisplayWindow, X> : X {
	typedef typename X::root_type LineDisplayWindow;
};
struct LineDisplayWindow : generate<LineDisplayWindow> {
	using ILineDisplayWindow2::TryDisplayStorageFileBitmapAtPointAsync;
	using ILineDisplayWindow2::TryDisplayStorageFileBitmapAtCursorAsync;
	using ILineDisplayWindow::TryDisplayTextAsync;
};

// ILineDisplayCustomGlyphs
struct ILineDisplayCustomGlyphs_raw : IInspectable {
	virtual STDMETHODIMP _get_SizeInPixels(Foundation::Size *value);
	virtual STDMETHODIMP _get_SupportedGlyphCodes(Foundation::Collections::IVectorView<unsigned>* *value);
	virtual STDMETHODIMP _TryRedefineAsync(unsigned glyphCode, Storage::Streams::IBuffer* glyphData, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct ILineDisplayCustomGlyphs_adaptor : X {
	union {
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ILineDisplayCustomGlyphs_adaptor::SizeInPixels)->_get_SizeInPixels(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
		} SizeInPixels;
		struct : property {
			ptr<Foundation::Collections::IVectorView<unsigned>> get() { Foundation::Collections::IVectorView<unsigned>* value; hrcheck(enc(&ILineDisplayCustomGlyphs_adaptor::SupportedGlyphCodes)->_get_SupportedGlyphCodes(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<unsigned>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<unsigned>> operator->() { return get(); }
		} SupportedGlyphCodes;
	};
	ptr<Foundation::IAsyncOperation<bool>> TryRedefineAsync(unsigned glyphCode, pptr<Storage::Streams::IBuffer> glyphData) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryRedefineAsync(glyphCode, glyphData, &operation)); return from_abi(operation); }
	ILineDisplayCustomGlyphs_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayCustomGlyphs, X> : Windows::Devices::PointOfService::ILineDisplayCustomGlyphs_adaptor<X> { typedef adapt ILineDisplayCustomGlyphs; };
struct ILineDisplayCustomGlyphs : ILineDisplayCustomGlyphs_raw, generate<ILineDisplayCustomGlyphs> {};

// LineDisplayCustomGlyphs
template<typename X> struct statics<LineDisplayCustomGlyphs, X> : X {
	typedef typename X::root_type LineDisplayCustomGlyphs;
};
struct LineDisplayCustomGlyphs : generate<LineDisplayCustomGlyphs> {};

// ILineDisplayStatusUpdatedEventArgs
struct ILineDisplayStatusUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(LineDisplayPowerStatus *value);
};
template<typename X> struct ILineDisplayStatusUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			LineDisplayPowerStatus get() { LineDisplayPowerStatus value; hrcheck(enc(&ILineDisplayStatusUpdatedEventArgs_adaptor::Status)->_get_Status(&value)); return value; }
			LineDisplayPowerStatus operator()() { return get(); }
			operator LineDisplayPowerStatus () { return get(); }
		} Status;
	};
	ILineDisplayStatusUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayStatusUpdatedEventArgs, X> : Windows::Devices::PointOfService::ILineDisplayStatusUpdatedEventArgs_adaptor<X> { typedef adapt ILineDisplayStatusUpdatedEventArgs; };
struct ILineDisplayStatusUpdatedEventArgs : ILineDisplayStatusUpdatedEventArgs_raw, generate<ILineDisplayStatusUpdatedEventArgs> {};

// LineDisplayStatusUpdatedEventArgs
template<typename X> struct statics<LineDisplayStatusUpdatedEventArgs, X> : X {
	typedef typename X::root_type LineDisplayStatusUpdatedEventArgs;
};
struct LineDisplayStatusUpdatedEventArgs : generate<LineDisplayStatusUpdatedEventArgs> {};

// ILineDisplayCapabilities
struct ILineDisplayCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_IsStatisticsReportingSupported(bool *value);
	virtual STDMETHODIMP _get_IsStatisticsUpdatingSupported(bool *value);
	virtual STDMETHODIMP _get_PowerReportingType(UnifiedPosPowerReportingType *value);
	virtual STDMETHODIMP _get_CanChangeScreenSize(bool *value);
	virtual STDMETHODIMP _get_CanDisplayBitmaps(bool *value);
	virtual STDMETHODIMP _get_CanReadCharacterAtCursor(bool *value);
	virtual STDMETHODIMP _get_CanMapCharacterSets(bool *value);
	virtual STDMETHODIMP _get_CanDisplayCustomGlyphs(bool *value);
	virtual STDMETHODIMP _get_CanReverse(LineDisplayTextAttributeGranularity *value);
	virtual STDMETHODIMP _get_CanBlink(LineDisplayTextAttributeGranularity *value);
	virtual STDMETHODIMP _get_CanChangeBlinkRate(bool *value);
	virtual STDMETHODIMP _get_IsBrightnessSupported(bool *value);
	virtual STDMETHODIMP _get_IsCursorSupported(bool *value);
	virtual STDMETHODIMP _get_IsHorizontalMarqueeSupported(bool *value);
	virtual STDMETHODIMP _get_IsVerticalMarqueeSupported(bool *value);
	virtual STDMETHODIMP _get_IsInterCharacterWaitSupported(bool *value);
	virtual STDMETHODIMP _get_SupportedDescriptors(unsigned *value);
	virtual STDMETHODIMP _get_SupportedWindows(unsigned *value);
};
template<typename X> struct ILineDisplayCapabilities_adaptor : X {
	union {
		struct : property {
			LineDisplayTextAttributeGranularity get() { LineDisplayTextAttributeGranularity value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanBlink)->_get_CanBlink(&value)); return value; }
			LineDisplayTextAttributeGranularity operator()() { return get(); }
			operator LineDisplayTextAttributeGranularity () { return get(); }
		} CanBlink;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanChangeBlinkRate)->_get_CanChangeBlinkRate(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanChangeBlinkRate;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanChangeScreenSize)->_get_CanChangeScreenSize(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanChangeScreenSize;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanDisplayBitmaps)->_get_CanDisplayBitmaps(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanDisplayBitmaps;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanDisplayCustomGlyphs)->_get_CanDisplayCustomGlyphs(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanDisplayCustomGlyphs;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanMapCharacterSets)->_get_CanMapCharacterSets(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanMapCharacterSets;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanReadCharacterAtCursor)->_get_CanReadCharacterAtCursor(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanReadCharacterAtCursor;
		struct : property {
			LineDisplayTextAttributeGranularity get() { LineDisplayTextAttributeGranularity value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::CanReverse)->_get_CanReverse(&value)); return value; }
			LineDisplayTextAttributeGranularity operator()() { return get(); }
			operator LineDisplayTextAttributeGranularity () { return get(); }
		} CanReverse;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::IsBrightnessSupported)->_get_IsBrightnessSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBrightnessSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::IsCursorSupported)->_get_IsCursorSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsCursorSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::IsHorizontalMarqueeSupported)->_get_IsHorizontalMarqueeSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsHorizontalMarqueeSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::IsInterCharacterWaitSupported)->_get_IsInterCharacterWaitSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsInterCharacterWaitSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::IsStatisticsReportingSupported)->_get_IsStatisticsReportingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsReportingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::IsStatisticsUpdatingSupported)->_get_IsStatisticsUpdatingSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsStatisticsUpdatingSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::IsVerticalMarqueeSupported)->_get_IsVerticalMarqueeSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsVerticalMarqueeSupported;
		struct : property {
			UnifiedPosPowerReportingType get() { UnifiedPosPowerReportingType value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::PowerReportingType)->_get_PowerReportingType(&value)); return value; }
			UnifiedPosPowerReportingType operator()() { return get(); }
			operator UnifiedPosPowerReportingType () { return get(); }
		} PowerReportingType;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::SupportedDescriptors)->_get_SupportedDescriptors(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SupportedDescriptors;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ILineDisplayCapabilities_adaptor::SupportedWindows)->_get_SupportedWindows(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} SupportedWindows;
	};
	ILineDisplayCapabilities_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayCapabilities, X> : Windows::Devices::PointOfService::ILineDisplayCapabilities_adaptor<X> { typedef adapt ILineDisplayCapabilities; };
struct ILineDisplayCapabilities : ILineDisplayCapabilities_raw, generate<ILineDisplayCapabilities> {};

// LineDisplayCapabilities
template<typename X> struct statics<LineDisplayCapabilities, X> : X {
	typedef typename X::root_type LineDisplayCapabilities;
};
struct LineDisplayCapabilities : generate<LineDisplayCapabilities> {};

// ILineDisplayAttributes
struct ILineDisplayAttributes_raw : IInspectable {
	virtual STDMETHODIMP _get_IsPowerNotifyEnabled(bool *value);
	virtual STDMETHODIMP _put_IsPowerNotifyEnabled(bool value);
	virtual STDMETHODIMP _get_Brightness(int *value);
	virtual STDMETHODIMP _put_Brightness(int value);
	virtual STDMETHODIMP _get_BlinkRate(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _put_BlinkRate(Foundation::TimeSpan value);
	virtual STDMETHODIMP _get_ScreenSizeInCharacters(Foundation::Size *value);
	virtual STDMETHODIMP _put_ScreenSizeInCharacters(Foundation::Size value);
	virtual STDMETHODIMP _get_CharacterSet(int *value);
	virtual STDMETHODIMP _put_CharacterSet(int value);
	virtual STDMETHODIMP _get_IsCharacterSetMappingEnabled(bool *value);
	virtual STDMETHODIMP _put_IsCharacterSetMappingEnabled(bool value);
	virtual STDMETHODIMP _get_CurrentWindow(LineDisplayWindow* *value);
	virtual STDMETHODIMP _put_CurrentWindow(LineDisplayWindow* value);
};
template<typename X> struct ILineDisplayAttributes_adaptor : X {
	union {
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&ILineDisplayAttributes_adaptor::BlinkRate)->_get_BlinkRate(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
			void put(const Foundation::TimeSpan& value) { hrcheck(enc(&ILineDisplayAttributes_adaptor::BlinkRate)->_put_BlinkRate(value)); }
			void operator=(const Foundation::TimeSpan& value) { put(value); }
			void operator()(const Foundation::TimeSpan& value) { put(value); }
		} BlinkRate;
		struct : property {
			int get() { int value; hrcheck(enc(&ILineDisplayAttributes_adaptor::Brightness)->_get_Brightness(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ILineDisplayAttributes_adaptor::Brightness)->_put_Brightness(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Brightness;
		struct : property {
			int get() { int value; hrcheck(enc(&ILineDisplayAttributes_adaptor::CharacterSet)->_get_CharacterSet(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ILineDisplayAttributes_adaptor::CharacterSet)->_put_CharacterSet(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} CharacterSet;
		struct : property {
			ptr<LineDisplayWindow> get() { LineDisplayWindow* value; hrcheck(enc(&ILineDisplayAttributes_adaptor::CurrentWindow)->_get_CurrentWindow(&value)); return from_abi(value); }
			ptr<LineDisplayWindow> operator()() { return get(); }
			operator ptr<LineDisplayWindow> () { return get(); }
			ptr<LineDisplayWindow> operator->() { return get(); }
			void put(pptr<LineDisplayWindow> value) { hrcheck(enc(&ILineDisplayAttributes_adaptor::CurrentWindow)->_put_CurrentWindow(value)); }
			void operator=(pptr<LineDisplayWindow> value) { put(value); }
			void operator()(pptr<LineDisplayWindow> value) { put(value); }
		} CurrentWindow;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayAttributes_adaptor::IsCharacterSetMappingEnabled)->_get_IsCharacterSetMappingEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ILineDisplayAttributes_adaptor::IsCharacterSetMappingEnabled)->_put_IsCharacterSetMappingEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsCharacterSetMappingEnabled;
		struct : property {
			bool get() { bool value; hrcheck(enc(&ILineDisplayAttributes_adaptor::IsPowerNotifyEnabled)->_get_IsPowerNotifyEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ILineDisplayAttributes_adaptor::IsPowerNotifyEnabled)->_put_IsPowerNotifyEnabled(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsPowerNotifyEnabled;
		struct : property {
			Foundation::Size get() { Foundation::Size value; hrcheck(enc(&ILineDisplayAttributes_adaptor::ScreenSizeInCharacters)->_get_ScreenSizeInCharacters(&value)); return value; }
			Foundation::Size operator()() { return get(); }
			operator Foundation::Size () { return get(); }
			void put(const Foundation::Size& value) { hrcheck(enc(&ILineDisplayAttributes_adaptor::ScreenSizeInCharacters)->_put_ScreenSizeInCharacters(value)); }
			void operator=(const Foundation::Size& value) { put(value); }
			void operator()(const Foundation::Size& value) { put(value); }
		} ScreenSizeInCharacters;
	};
	ILineDisplayAttributes_adaptor() {}
};
template<typename X> struct adapt<ILineDisplayAttributes, X> : Windows::Devices::PointOfService::ILineDisplayAttributes_adaptor<X> { typedef adapt ILineDisplayAttributes; };
struct ILineDisplayAttributes : ILineDisplayAttributes_raw, generate<ILineDisplayAttributes> {};

// LineDisplayAttributes
template<typename X> struct statics<LineDisplayAttributes, X> : X {
	typedef typename X::root_type LineDisplayAttributes;
};
struct LineDisplayAttributes : generate<LineDisplayAttributes> {};
}}}
} // namespace iso_winrt
