#pragma once
// generated by isopod tools
// namespaces:
// Windows.Security.Authentication.Identity

#include "Windows.Security.Authentication.Identity.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}
template<typename TResult> struct IAsyncOperation;
}}

// defs

template<> struct def<Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationInfo> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationInfo> : class_type<Platform::Object, Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationInfo> {};
template<> struct def<Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationManagerStatics> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationManager> : interface_type<> {};
template<> struct def<Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager> : class_type<Platform::Object, Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationManager> {};

// uuids

template<> struct uuid<Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationInfo> { define_guid(0x38321ACC, 0x672B, 0x4823, 0xB6, 0x3, 0x6B, 0x3C, 0x75, 0x3D, 0xAF, 0x97);};
template<> struct uuid<Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationManagerStatics> { define_guid(0x77B85E9E, 0xACF4, 0x4BC0, 0xBA, 0xC2, 0x40, 0xBB, 0x46, 0xEF, 0xBB, 0x3F);};
template<> struct uuid<Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationManager> { define_guid(0x83F3BE3F, 0xA25F, 0x4CBA, 0xBB, 0x8E, 0xBD, 0xC3, 0x2D, 0x3, 0xC2, 0x97);};

// types

namespace Windows { namespace Security { namespace Authentication { namespace Identity {

// IEnterpriseKeyCredentialRegistrationInfo
struct IEnterpriseKeyCredentialRegistrationInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_TenantId(HSTRING *value);
	virtual STDMETHODIMP _get_TenantName(HSTRING *value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_KeyId(HSTRING *value);
	virtual STDMETHODIMP _get_KeyName(HSTRING *value);
};
template<typename X> struct IEnterpriseKeyCredentialRegistrationInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEnterpriseKeyCredentialRegistrationInfo_adaptor::KeyId)->_get_KeyId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} KeyId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEnterpriseKeyCredentialRegistrationInfo_adaptor::KeyName)->_get_KeyName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} KeyName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEnterpriseKeyCredentialRegistrationInfo_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subject;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEnterpriseKeyCredentialRegistrationInfo_adaptor::TenantId)->_get_TenantId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TenantId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IEnterpriseKeyCredentialRegistrationInfo_adaptor::TenantName)->_get_TenantName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} TenantName;
	};
	IEnterpriseKeyCredentialRegistrationInfo_adaptor() {}
};
template<typename X> struct adapt<IEnterpriseKeyCredentialRegistrationInfo, X> : Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationInfo_adaptor<X> { typedef adapt IEnterpriseKeyCredentialRegistrationInfo; };
struct IEnterpriseKeyCredentialRegistrationInfo : IEnterpriseKeyCredentialRegistrationInfo_raw, generate<IEnterpriseKeyCredentialRegistrationInfo> {};

// EnterpriseKeyCredentialRegistrationInfo
template<typename X> struct statics<EnterpriseKeyCredentialRegistrationInfo, X> : X {
	typedef typename X::root_type EnterpriseKeyCredentialRegistrationInfo;
};
struct EnterpriseKeyCredentialRegistrationInfo : generate<EnterpriseKeyCredentialRegistrationInfo> {};

// IEnterpriseKeyCredentialRegistrationManagerStatics
struct IEnterpriseKeyCredentialRegistrationManagerStatics : IInspectable {
	virtual STDMETHODIMP _get_Current(EnterpriseKeyCredentialRegistrationManager* *value);
};

// IEnterpriseKeyCredentialRegistrationManager
struct IEnterpriseKeyCredentialRegistrationManager_raw : IInspectable {
	virtual STDMETHODIMP _GetRegistrationsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EnterpriseKeyCredentialRegistrationInfo*>*>* *value);
};
template<typename X> struct IEnterpriseKeyCredentialRegistrationManager_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<EnterpriseKeyCredentialRegistrationInfo>>>>> GetRegistrationsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<EnterpriseKeyCredentialRegistrationInfo*>*>* value; hrcheck(X::get()->_GetRegistrationsAsync(&value)); return from_abi(value); }
};
template<typename X> struct adapt<IEnterpriseKeyCredentialRegistrationManager, X> : Windows::Security::Authentication::Identity::IEnterpriseKeyCredentialRegistrationManager_adaptor<X> { typedef adapt IEnterpriseKeyCredentialRegistrationManager; };
struct IEnterpriseKeyCredentialRegistrationManager : IEnterpriseKeyCredentialRegistrationManager_raw, generate<IEnterpriseKeyCredentialRegistrationManager> {};

// EnterpriseKeyCredentialRegistrationManager
template<typename> struct EnterpriseKeyCredentialRegistrationManager_statics {
	static struct _Current : property {
		ptr<EnterpriseKeyCredentialRegistrationManager> get() { EnterpriseKeyCredentialRegistrationManager* value; hrcheck(get_activation_factory<EnterpriseKeyCredentialRegistrationManager, IEnterpriseKeyCredentialRegistrationManagerStatics>()->_get_Current(&value)); return from_abi(value); }
		ptr<EnterpriseKeyCredentialRegistrationManager> operator()() { return get(); }
		operator ptr<EnterpriseKeyCredentialRegistrationManager> () { return get(); }
		ptr<EnterpriseKeyCredentialRegistrationManager> operator->() { return get(); }
	} Current;
};
template<typename X> typename EnterpriseKeyCredentialRegistrationManager_statics<X>::_Current EnterpriseKeyCredentialRegistrationManager_statics<X>::Current;

template<typename X> struct statics<EnterpriseKeyCredentialRegistrationManager, X> : X, Windows::Security::Authentication::Identity::EnterpriseKeyCredentialRegistrationManager_statics<void> {
	typedef typename X::root_type EnterpriseKeyCredentialRegistrationManager;
};
struct EnterpriseKeyCredentialRegistrationManager : generate<EnterpriseKeyCredentialRegistrationManager> {};
}}}}
} // namespace iso_winrt
