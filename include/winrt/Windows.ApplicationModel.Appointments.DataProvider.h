#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.Appointments.DataProvider

#include "Windows.ApplicationModel.Appointments.DataProvider.0.h"
#include "Windows.Foundation.0.h"
#include "Windows.ApplicationModel.Appointments.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}}

// defs

template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderTriggerDetails> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderConnection> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderConnection> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderConnection> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequestEventArgs> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequestEventArgs> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequestEventArgs> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequest> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentDataProviderTriggerDetails> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderTriggerDetails> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarSyncManagerSyncRequest> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequest> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCreateOrUpdateAppointmentRequest> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequest> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarCancelMeetingRequest> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequest> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarForwardMeetingRequest> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequest> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarProposeNewTimeForMeetingRequest> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequest> {};
template<> struct def<Windows::ApplicationModel::Appointments::DataProvider::AppointmentCalendarUpdateMeetingResponseRequest> : class_type<Platform::Object, Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequest> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderTriggerDetails> { define_guid(0xB3283C01, 0x7E12, 0x4E5E, 0xB1, 0xEF, 0x74, 0xFB, 0x68, 0xAC, 0x6F, 0x2A);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderConnection> { define_guid(0xF3DD9D83, 0x3254, 0x465F, 0xAB, 0xDB, 0x92, 0x80, 0x46, 0x55, 0x2C, 0xF4);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequestEventArgs> { define_guid(0xCA17C6F7, 0x284, 0x4EDD, 0x87, 0xBA, 0x4D, 0x8F, 0x69, 0xDC, 0xF5, 0xC0);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs> { define_guid(0xCF8DED28, 0x2E, 0x4BF7, 0x8E, 0x9D, 0x5E, 0x20, 0xD4, 0x9A, 0xA3, 0xBA);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequestEventArgs> { define_guid(0x1A79BE16, 0x7F30, 0x4E35, 0xBE, 0xEF, 0x9D, 0x2C, 0x7B, 0x6D, 0xCA, 0xE1);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequestEventArgs> { define_guid(0x3109151A, 0x23A2, 0x42FD, 0x9C, 0x82, 0xC9, 0xA6, 0xD, 0x59, 0xF8, 0xA8);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs> { define_guid(0xD2D777D8, 0xFED1, 0x4280, 0xA3, 0xBA, 0x2E, 0x1F, 0x47, 0x60, 0x9A, 0xA2);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequestEventArgs> { define_guid(0x88759883, 0x97BF, 0x479D, 0xAE, 0xD5, 0xB, 0xE8, 0xCE, 0x56, 0x7D, 0x1E);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequest> { define_guid(0x12AB382B, 0x7163, 0x4A56, 0x9A, 0x4E, 0x72, 0x23, 0xA8, 0x4A, 0xDF, 0x46);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequest> { define_guid(0x2E62F2B2, 0xCA96, 0x48AC, 0x91, 0x24, 0x40, 0x6B, 0x19, 0xFE, 0xFA, 0x70);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequest> { define_guid(0x49460F8D, 0x6434, 0x40D7, 0xAD, 0x46, 0x62, 0x97, 0x41, 0x93, 0x14, 0xD1);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequest> { define_guid(0x82E5EE56, 0x26B6, 0x4253, 0x8A, 0x8F, 0x6C, 0xF5, 0xF2, 0xFF, 0x78, 0x84);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequest> { define_guid(0xCE1C63F5, 0xEDF6, 0x43C3, 0x82, 0xB7, 0xBE, 0x6B, 0x36, 0x8C, 0x69, 0x0);};
template<> struct uuid<Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequest> { define_guid(0xA36D608C, 0xC29D, 0x4B94, 0xB0, 0x86, 0x7E, 0x9F, 0xF7, 0xBD, 0x84, 0xA0);};

// types

namespace Windows { namespace ApplicationModel { namespace Appointments { namespace DataProvider {

// IAppointmentDataProviderTriggerDetails
struct IAppointmentDataProviderTriggerDetails_raw : IInspectable {
	virtual STDMETHODIMP _get_Connection(AppointmentDataProviderConnection* *value);
};
template<typename X> struct IAppointmentDataProviderTriggerDetails_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentDataProviderConnection> get() { AppointmentDataProviderConnection* value; hrcheck(enc(&IAppointmentDataProviderTriggerDetails_adaptor::Connection)->_get_Connection(&value)); return from_abi(value); }
			ptr<AppointmentDataProviderConnection> operator()() { return get(); }
			operator ptr<AppointmentDataProviderConnection> () { return get(); }
			ptr<AppointmentDataProviderConnection> operator->() { return get(); }
		} Connection;
	};
	IAppointmentDataProviderTriggerDetails_adaptor() {}
};
template<typename X> struct adapt<IAppointmentDataProviderTriggerDetails, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderTriggerDetails_adaptor<X> { typedef adapt IAppointmentDataProviderTriggerDetails; };
struct IAppointmentDataProviderTriggerDetails : IAppointmentDataProviderTriggerDetails_raw, generate<IAppointmentDataProviderTriggerDetails> {};

// IAppointmentDataProviderConnection
struct IAppointmentDataProviderConnection_raw : IInspectable {
	virtual STDMETHODIMP _add_SyncRequested(Foundation::TypedEventHandler<AppointmentDataProviderConnection*, AppointmentCalendarSyncManagerSyncRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SyncRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CreateOrUpdateAppointmentRequested(Foundation::TypedEventHandler<AppointmentDataProviderConnection*, AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CreateOrUpdateAppointmentRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_CancelMeetingRequested(Foundation::TypedEventHandler<AppointmentDataProviderConnection*, AppointmentCalendarCancelMeetingRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CancelMeetingRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ForwardMeetingRequested(Foundation::TypedEventHandler<AppointmentDataProviderConnection*, AppointmentCalendarForwardMeetingRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ForwardMeetingRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ProposeNewTimeForMeetingRequested(Foundation::TypedEventHandler<AppointmentDataProviderConnection*, AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ProposeNewTimeForMeetingRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_UpdateMeetingResponseRequested(Foundation::TypedEventHandler<AppointmentDataProviderConnection*, AppointmentCalendarUpdateMeetingResponseRequestEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_UpdateMeetingResponseRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _Start();
};
template<typename X> struct IAppointmentDataProviderConnection_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentDataProviderConnection>, ptr<AppointmentCalendarCancelMeetingRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::CancelMeetingRequested)->_add_CancelMeetingRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::CancelMeetingRequested)->_remove_CancelMeetingRequested(token)); }
		} CancelMeetingRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentDataProviderConnection>, ptr<AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::CreateOrUpdateAppointmentRequested)->_add_CreateOrUpdateAppointmentRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::CreateOrUpdateAppointmentRequested)->_remove_CreateOrUpdateAppointmentRequested(token)); }
		} CreateOrUpdateAppointmentRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentDataProviderConnection>, ptr<AppointmentCalendarForwardMeetingRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::ForwardMeetingRequested)->_add_ForwardMeetingRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::ForwardMeetingRequested)->_remove_ForwardMeetingRequested(token)); }
		} ForwardMeetingRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentDataProviderConnection>, ptr<AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::ProposeNewTimeForMeetingRequested)->_add_ProposeNewTimeForMeetingRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::ProposeNewTimeForMeetingRequested)->_remove_ProposeNewTimeForMeetingRequested(token)); }
		} ProposeNewTimeForMeetingRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentDataProviderConnection>, ptr<AppointmentCalendarSyncManagerSyncRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::SyncRequested)->_add_SyncRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::SyncRequested)->_remove_SyncRequested(token)); }
		} SyncRequested;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<AppointmentDataProviderConnection>, ptr<AppointmentCalendarUpdateMeetingResponseRequestEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::UpdateMeetingResponseRequested)->_add_UpdateMeetingResponseRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IAppointmentDataProviderConnection_adaptor::UpdateMeetingResponseRequested)->_remove_UpdateMeetingResponseRequested(token)); }
		} UpdateMeetingResponseRequested;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	IAppointmentDataProviderConnection_adaptor() {}
};
template<typename X> struct adapt<IAppointmentDataProviderConnection, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentDataProviderConnection_adaptor<X> { typedef adapt IAppointmentDataProviderConnection; };
struct IAppointmentDataProviderConnection : IAppointmentDataProviderConnection_raw, generate<IAppointmentDataProviderConnection> {};

// AppointmentDataProviderConnection
template<typename X> struct statics<AppointmentDataProviderConnection, X> : X {
	typedef typename X::root_type AppointmentDataProviderConnection;
};
struct AppointmentDataProviderConnection : generate<AppointmentDataProviderConnection> {};

// IAppointmentCalendarSyncManagerSyncRequestEventArgs
struct IAppointmentCalendarSyncManagerSyncRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(AppointmentCalendarSyncManagerSyncRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IAppointmentCalendarSyncManagerSyncRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentCalendarSyncManagerSyncRequest> get() { AppointmentCalendarSyncManagerSyncRequest* value; hrcheck(enc(&IAppointmentCalendarSyncManagerSyncRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<AppointmentCalendarSyncManagerSyncRequest> operator()() { return get(); }
			operator ptr<AppointmentCalendarSyncManagerSyncRequest> () { return get(); }
			ptr<AppointmentCalendarSyncManagerSyncRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IAppointmentCalendarSyncManagerSyncRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarSyncManagerSyncRequestEventArgs, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequestEventArgs_adaptor<X> { typedef adapt IAppointmentCalendarSyncManagerSyncRequestEventArgs; };
struct IAppointmentCalendarSyncManagerSyncRequestEventArgs : IAppointmentCalendarSyncManagerSyncRequestEventArgs_raw, generate<IAppointmentCalendarSyncManagerSyncRequestEventArgs> {};

// AppointmentCalendarSyncManagerSyncRequestEventArgs
template<typename X> struct statics<AppointmentCalendarSyncManagerSyncRequestEventArgs, X> : X {
	typedef typename X::root_type AppointmentCalendarSyncManagerSyncRequestEventArgs;
};
struct AppointmentCalendarSyncManagerSyncRequestEventArgs : generate<AppointmentCalendarSyncManagerSyncRequestEventArgs> {};

// IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs
struct IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(AppointmentCalendarCreateOrUpdateAppointmentRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentCalendarCreateOrUpdateAppointmentRequest> get() { AppointmentCalendarCreateOrUpdateAppointmentRequest* value; hrcheck(enc(&IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<AppointmentCalendarCreateOrUpdateAppointmentRequest> operator()() { return get(); }
			operator ptr<AppointmentCalendarCreateOrUpdateAppointmentRequest> () { return get(); }
			ptr<AppointmentCalendarCreateOrUpdateAppointmentRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_adaptor<X> { typedef adapt IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs; };
struct IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs : IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs_raw, generate<IAppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs> {};

// AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs
template<typename X> struct statics<AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs, X> : X {
	typedef typename X::root_type AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs;
};
struct AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs : generate<AppointmentCalendarCreateOrUpdateAppointmentRequestEventArgs> {};

// IAppointmentCalendarCancelMeetingRequestEventArgs
struct IAppointmentCalendarCancelMeetingRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(AppointmentCalendarCancelMeetingRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IAppointmentCalendarCancelMeetingRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentCalendarCancelMeetingRequest> get() { AppointmentCalendarCancelMeetingRequest* value; hrcheck(enc(&IAppointmentCalendarCancelMeetingRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<AppointmentCalendarCancelMeetingRequest> operator()() { return get(); }
			operator ptr<AppointmentCalendarCancelMeetingRequest> () { return get(); }
			ptr<AppointmentCalendarCancelMeetingRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IAppointmentCalendarCancelMeetingRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarCancelMeetingRequestEventArgs, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequestEventArgs_adaptor<X> { typedef adapt IAppointmentCalendarCancelMeetingRequestEventArgs; };
struct IAppointmentCalendarCancelMeetingRequestEventArgs : IAppointmentCalendarCancelMeetingRequestEventArgs_raw, generate<IAppointmentCalendarCancelMeetingRequestEventArgs> {};

// AppointmentCalendarCancelMeetingRequestEventArgs
template<typename X> struct statics<AppointmentCalendarCancelMeetingRequestEventArgs, X> : X {
	typedef typename X::root_type AppointmentCalendarCancelMeetingRequestEventArgs;
};
struct AppointmentCalendarCancelMeetingRequestEventArgs : generate<AppointmentCalendarCancelMeetingRequestEventArgs> {};

// IAppointmentCalendarForwardMeetingRequestEventArgs
struct IAppointmentCalendarForwardMeetingRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(AppointmentCalendarForwardMeetingRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IAppointmentCalendarForwardMeetingRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentCalendarForwardMeetingRequest> get() { AppointmentCalendarForwardMeetingRequest* value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<AppointmentCalendarForwardMeetingRequest> operator()() { return get(); }
			operator ptr<AppointmentCalendarForwardMeetingRequest> () { return get(); }
			ptr<AppointmentCalendarForwardMeetingRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IAppointmentCalendarForwardMeetingRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarForwardMeetingRequestEventArgs, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequestEventArgs_adaptor<X> { typedef adapt IAppointmentCalendarForwardMeetingRequestEventArgs; };
struct IAppointmentCalendarForwardMeetingRequestEventArgs : IAppointmentCalendarForwardMeetingRequestEventArgs_raw, generate<IAppointmentCalendarForwardMeetingRequestEventArgs> {};

// AppointmentCalendarForwardMeetingRequestEventArgs
template<typename X> struct statics<AppointmentCalendarForwardMeetingRequestEventArgs, X> : X {
	typedef typename X::root_type AppointmentCalendarForwardMeetingRequestEventArgs;
};
struct AppointmentCalendarForwardMeetingRequestEventArgs : generate<AppointmentCalendarForwardMeetingRequestEventArgs> {};

// IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs
struct IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(AppointmentCalendarProposeNewTimeForMeetingRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentCalendarProposeNewTimeForMeetingRequest> get() { AppointmentCalendarProposeNewTimeForMeetingRequest* value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<AppointmentCalendarProposeNewTimeForMeetingRequest> operator()() { return get(); }
			operator ptr<AppointmentCalendarProposeNewTimeForMeetingRequest> () { return get(); }
			ptr<AppointmentCalendarProposeNewTimeForMeetingRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_adaptor<X> { typedef adapt IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs; };
struct IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs : IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs_raw, generate<IAppointmentCalendarProposeNewTimeForMeetingRequestEventArgs> {};

// AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs
template<typename X> struct statics<AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs, X> : X {
	typedef typename X::root_type AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs;
};
struct AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs : generate<AppointmentCalendarProposeNewTimeForMeetingRequestEventArgs> {};

// IAppointmentCalendarUpdateMeetingResponseRequestEventArgs
struct IAppointmentCalendarUpdateMeetingResponseRequestEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Request(AppointmentCalendarUpdateMeetingResponseRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IAppointmentCalendarUpdateMeetingResponseRequestEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<AppointmentCalendarUpdateMeetingResponseRequest> get() { AppointmentCalendarUpdateMeetingResponseRequest* value; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequestEventArgs_adaptor::Request)->_get_Request(&value)); return from_abi(value); }
			ptr<AppointmentCalendarUpdateMeetingResponseRequest> operator()() { return get(); }
			operator ptr<AppointmentCalendarUpdateMeetingResponseRequest> () { return get(); }
			ptr<AppointmentCalendarUpdateMeetingResponseRequest> operator->() { return get(); }
		} Request;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IAppointmentCalendarUpdateMeetingResponseRequestEventArgs_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarUpdateMeetingResponseRequestEventArgs, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequestEventArgs_adaptor<X> { typedef adapt IAppointmentCalendarUpdateMeetingResponseRequestEventArgs; };
struct IAppointmentCalendarUpdateMeetingResponseRequestEventArgs : IAppointmentCalendarUpdateMeetingResponseRequestEventArgs_raw, generate<IAppointmentCalendarUpdateMeetingResponseRequestEventArgs> {};

// AppointmentCalendarUpdateMeetingResponseRequestEventArgs
template<typename X> struct statics<AppointmentCalendarUpdateMeetingResponseRequestEventArgs, X> : X {
	typedef typename X::root_type AppointmentCalendarUpdateMeetingResponseRequestEventArgs;
};
struct AppointmentCalendarUpdateMeetingResponseRequestEventArgs : generate<AppointmentCalendarUpdateMeetingResponseRequestEventArgs> {};

// IAppointmentCalendarSyncManagerSyncRequest
struct IAppointmentCalendarSyncManagerSyncRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentCalendarLocalId(HSTRING *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IAppointmentCalendarSyncManagerSyncRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarSyncManagerSyncRequest_adaptor::AppointmentCalendarLocalId)->_get_AppointmentCalendarLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentCalendarLocalId;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IAppointmentCalendarSyncManagerSyncRequest_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarSyncManagerSyncRequest, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarSyncManagerSyncRequest_adaptor<X> { typedef adapt IAppointmentCalendarSyncManagerSyncRequest; };
struct IAppointmentCalendarSyncManagerSyncRequest : IAppointmentCalendarSyncManagerSyncRequest_raw, generate<IAppointmentCalendarSyncManagerSyncRequest> {};

// IAppointmentCalendarCreateOrUpdateAppointmentRequest
struct IAppointmentCalendarCreateOrUpdateAppointmentRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentCalendarLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_Appointment(Appointments::Appointment* *value);
	virtual STDMETHODIMP _get_NotifyInvitees(bool *value);
	virtual STDMETHODIMP _get_ChangedProperties(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Appointments::Appointment* createdOrUpdatedAppointment, Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IAppointmentCalendarCreateOrUpdateAppointmentRequest_adaptor : X {
	union {
		struct : property {
			ptr<Appointments::Appointment> get() { Appointments::Appointment* value; hrcheck(enc(&IAppointmentCalendarCreateOrUpdateAppointmentRequest_adaptor::Appointment)->_get_Appointment(&value)); return from_abi(value); }
			ptr<Appointments::Appointment> operator()() { return get(); }
			operator ptr<Appointments::Appointment> () { return get(); }
			ptr<Appointments::Appointment> operator->() { return get(); }
		} Appointment;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarCreateOrUpdateAppointmentRequest_adaptor::AppointmentCalendarLocalId)->_get_AppointmentCalendarLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentCalendarLocalId;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IAppointmentCalendarCreateOrUpdateAppointmentRequest_adaptor::ChangedProperties)->_get_ChangedProperties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} ChangedProperties;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendarCreateOrUpdateAppointmentRequest_adaptor::NotifyInvitees)->_get_NotifyInvitees(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} NotifyInvitees;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync(pptr<Appointments::Appointment> createdOrUpdatedAppointment) { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(createdOrUpdatedAppointment, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IAppointmentCalendarCreateOrUpdateAppointmentRequest_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarCreateOrUpdateAppointmentRequest, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCreateOrUpdateAppointmentRequest_adaptor<X> { typedef adapt IAppointmentCalendarCreateOrUpdateAppointmentRequest; };
struct IAppointmentCalendarCreateOrUpdateAppointmentRequest : IAppointmentCalendarCreateOrUpdateAppointmentRequest_raw, generate<IAppointmentCalendarCreateOrUpdateAppointmentRequest> {};

// IAppointmentCalendarCancelMeetingRequest
struct IAppointmentCalendarCancelMeetingRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentCalendarLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentOriginalStartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_Comment(HSTRING *value);
	virtual STDMETHODIMP _get_NotifyInvitees(bool *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IAppointmentCalendarCancelMeetingRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarCancelMeetingRequest_adaptor::AppointmentCalendarLocalId)->_get_AppointmentCalendarLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentCalendarLocalId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarCancelMeetingRequest_adaptor::AppointmentLocalId)->_get_AppointmentLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentLocalId;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointmentCalendarCancelMeetingRequest_adaptor::AppointmentOriginalStartTime)->_get_AppointmentOriginalStartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} AppointmentOriginalStartTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarCancelMeetingRequest_adaptor::Comment)->_get_Comment(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Comment;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendarCancelMeetingRequest_adaptor::NotifyInvitees)->_get_NotifyInvitees(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} NotifyInvitees;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarCancelMeetingRequest_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subject;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IAppointmentCalendarCancelMeetingRequest_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarCancelMeetingRequest, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarCancelMeetingRequest_adaptor<X> { typedef adapt IAppointmentCalendarCancelMeetingRequest; };
struct IAppointmentCalendarCancelMeetingRequest : IAppointmentCalendarCancelMeetingRequest_raw, generate<IAppointmentCalendarCancelMeetingRequest> {};

// IAppointmentCalendarForwardMeetingRequest
struct IAppointmentCalendarForwardMeetingRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentCalendarLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentOriginalStartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_Invitees(Foundation::Collections::IVectorView<AppointmentInvitee*>* *value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_ForwardHeader(HSTRING *value);
	virtual STDMETHODIMP _get_Comment(HSTRING *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IAppointmentCalendarForwardMeetingRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequest_adaptor::AppointmentCalendarLocalId)->_get_AppointmentCalendarLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentCalendarLocalId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequest_adaptor::AppointmentLocalId)->_get_AppointmentLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentLocalId;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequest_adaptor::AppointmentOriginalStartTime)->_get_AppointmentOriginalStartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} AppointmentOriginalStartTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequest_adaptor::Comment)->_get_Comment(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Comment;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequest_adaptor::ForwardHeader)->_get_ForwardHeader(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ForwardHeader;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<AppointmentInvitee>>> get() { Foundation::Collections::IVectorView<AppointmentInvitee*>* value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequest_adaptor::Invitees)->_get_Invitees(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<AppointmentInvitee>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<AppointmentInvitee>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<AppointmentInvitee>>> operator->() { return get(); }
		} Invitees;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarForwardMeetingRequest_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subject;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IAppointmentCalendarForwardMeetingRequest_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarForwardMeetingRequest, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarForwardMeetingRequest_adaptor<X> { typedef adapt IAppointmentCalendarForwardMeetingRequest; };
struct IAppointmentCalendarForwardMeetingRequest : IAppointmentCalendarForwardMeetingRequest_raw, generate<IAppointmentCalendarForwardMeetingRequest> {};

// IAppointmentCalendarProposeNewTimeForMeetingRequest
struct IAppointmentCalendarProposeNewTimeForMeetingRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentCalendarLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentOriginalStartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_NewStartTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _get_NewDuration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_Comment(HSTRING *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor::AppointmentCalendarLocalId)->_get_AppointmentCalendarLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentCalendarLocalId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor::AppointmentLocalId)->_get_AppointmentLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentLocalId;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor::AppointmentOriginalStartTime)->_get_AppointmentOriginalStartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} AppointmentOriginalStartTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor::Comment)->_get_Comment(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Comment;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor::NewDuration)->_get_NewDuration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} NewDuration;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor::NewStartTime)->_get_NewStartTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
		} NewStartTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subject;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarProposeNewTimeForMeetingRequest, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarProposeNewTimeForMeetingRequest_adaptor<X> { typedef adapt IAppointmentCalendarProposeNewTimeForMeetingRequest; };
struct IAppointmentCalendarProposeNewTimeForMeetingRequest : IAppointmentCalendarProposeNewTimeForMeetingRequest_raw, generate<IAppointmentCalendarProposeNewTimeForMeetingRequest> {};

// IAppointmentCalendarUpdateMeetingResponseRequest
struct IAppointmentCalendarUpdateMeetingResponseRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_AppointmentCalendarLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentLocalId(HSTRING *value);
	virtual STDMETHODIMP _get_AppointmentOriginalStartTime(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _get_Response(AppointmentParticipantResponse *response);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _get_Comment(HSTRING *value);
	virtual STDMETHODIMP _get_SendUpdate(bool *value);
	virtual STDMETHODIMP _ReportCompletedAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _ReportFailedAsync(Foundation::IAsyncAction* *result);
};
template<typename X> struct IAppointmentCalendarUpdateMeetingResponseRequest_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequest_adaptor::AppointmentCalendarLocalId)->_get_AppointmentCalendarLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentCalendarLocalId;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequest_adaptor::AppointmentLocalId)->_get_AppointmentLocalId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} AppointmentLocalId;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequest_adaptor::AppointmentOriginalStartTime)->_get_AppointmentOriginalStartTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
		} AppointmentOriginalStartTime;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequest_adaptor::Comment)->_get_Comment(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Comment;
		struct : property {
			AppointmentParticipantResponse get() { AppointmentParticipantResponse response; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequest_adaptor::Response)->_get_Response(&response)); return response; }
			AppointmentParticipantResponse operator()() { return get(); }
			operator AppointmentParticipantResponse () { return get(); }
		} Response;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequest_adaptor::SendUpdate)->_get_SendUpdate(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} SendUpdate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IAppointmentCalendarUpdateMeetingResponseRequest_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subject;
	};
	ptr<Foundation::IAsyncAction> ReportCompletedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportCompletedAsync(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncAction> ReportFailedAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_ReportFailedAsync(&result)); return from_abi(result); }
	IAppointmentCalendarUpdateMeetingResponseRequest_adaptor() {}
};
template<typename X> struct adapt<IAppointmentCalendarUpdateMeetingResponseRequest, X> : Windows::ApplicationModel::Appointments::DataProvider::IAppointmentCalendarUpdateMeetingResponseRequest_adaptor<X> { typedef adapt IAppointmentCalendarUpdateMeetingResponseRequest; };
struct IAppointmentCalendarUpdateMeetingResponseRequest : IAppointmentCalendarUpdateMeetingResponseRequest_raw, generate<IAppointmentCalendarUpdateMeetingResponseRequest> {};

// AppointmentDataProviderTriggerDetails
template<typename X> struct statics<AppointmentDataProviderTriggerDetails, X> : X {
	typedef typename X::root_type AppointmentDataProviderTriggerDetails;
};
struct AppointmentDataProviderTriggerDetails : generate<AppointmentDataProviderTriggerDetails> {};

// AppointmentCalendarSyncManagerSyncRequest
template<typename X> struct statics<AppointmentCalendarSyncManagerSyncRequest, X> : X {
	typedef typename X::root_type AppointmentCalendarSyncManagerSyncRequest;
};
struct AppointmentCalendarSyncManagerSyncRequest : generate<AppointmentCalendarSyncManagerSyncRequest> {};

// AppointmentCalendarCreateOrUpdateAppointmentRequest
template<typename X> struct statics<AppointmentCalendarCreateOrUpdateAppointmentRequest, X> : X {
	typedef typename X::root_type AppointmentCalendarCreateOrUpdateAppointmentRequest;
};
struct AppointmentCalendarCreateOrUpdateAppointmentRequest : generate<AppointmentCalendarCreateOrUpdateAppointmentRequest> {};

// AppointmentCalendarCancelMeetingRequest
template<typename X> struct statics<AppointmentCalendarCancelMeetingRequest, X> : X {
	typedef typename X::root_type AppointmentCalendarCancelMeetingRequest;
};
struct AppointmentCalendarCancelMeetingRequest : generate<AppointmentCalendarCancelMeetingRequest> {};

// AppointmentCalendarForwardMeetingRequest
template<typename X> struct statics<AppointmentCalendarForwardMeetingRequest, X> : X {
	typedef typename X::root_type AppointmentCalendarForwardMeetingRequest;
};
struct AppointmentCalendarForwardMeetingRequest : generate<AppointmentCalendarForwardMeetingRequest> {};

// AppointmentCalendarProposeNewTimeForMeetingRequest
template<typename X> struct statics<AppointmentCalendarProposeNewTimeForMeetingRequest, X> : X {
	typedef typename X::root_type AppointmentCalendarProposeNewTimeForMeetingRequest;
};
struct AppointmentCalendarProposeNewTimeForMeetingRequest : generate<AppointmentCalendarProposeNewTimeForMeetingRequest> {};

// AppointmentCalendarUpdateMeetingResponseRequest
template<typename X> struct statics<AppointmentCalendarUpdateMeetingResponseRequest, X> : X {
	typedef typename X::root_type AppointmentCalendarUpdateMeetingResponseRequest;
};
struct AppointmentCalendarUpdateMeetingResponseRequest : generate<AppointmentCalendarUpdateMeetingResponseRequest> {};
}}}}
} // namespace iso_winrt
