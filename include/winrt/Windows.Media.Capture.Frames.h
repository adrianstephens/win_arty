#pragma once
// generated by isopod tools
// namespaces:
// Windows.Media.Capture.Frames

#include "Windows.Media.Capture.Frames.0.h"
#include "Windows.Media.Capture.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Devices { namespace Enumeration {
struct DeviceInformation;
}}
namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename K, typename V> struct IMapView;
}}
namespace Graphics { namespace DirectX { namespace Direct3D11 {
struct IDirect3DSurface;
}}
namespace Imaging {
struct SoftwareBitmap;
}}
namespace Media { namespace Devices { namespace Core {
struct DepthCorrelatedCoordinateMapper;
struct CameraIntrinsics;
}
struct VideoDeviceController;
struct AudioDeviceController;
}
namespace MediaProperties {
struct MediaRatio;
struct AudioEncodingProperties;
}
struct VideoFrame;
struct AudioFrame;
}
namespace Perception { namespace Spatial {
struct SpatialCoordinateSystem;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Media::Capture::Frames::MediaFrameSourceKind> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceInfo2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceInfo> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameSourceInfo> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameSourceInfo, Windows::Media::Capture::Frames::IMediaFrameSourceInfo2> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceGroupStatics> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceGroup> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameSourceGroup> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameSourceGroup> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSource> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameSource> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameSource> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameReaderAcquisitionMode> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameReaderStartStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameReader2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameReader> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameReader> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameReader, Windows::Media::Capture::Frames::IMediaFrameReader2> {};
template<> struct def<Windows::Media::Capture::Frames::MultiSourceMediaFrameReaderStartStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Capture::Frames::MultiSourceMediaFrameReader> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader, Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader2> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameSourceSetPropertyStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyStatus> : enum_type<int> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceController3> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceController2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceController> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameSourceController> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameSourceController, Windows::Media::Capture::Frames::IMediaFrameSourceController2, Windows::Media::Capture::Frames::IMediaFrameSourceController3> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameFormat2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameFormat> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameFormat> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameFormat, Windows::Media::Capture::Frames::IMediaFrameFormat2> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameArrivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameArrivedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameArrivedEventArgs> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameReference2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameReference> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameReference> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameReference, Windows::Media::Capture::Frames::IMediaFrameReference2> {};
template<> struct def<Windows::Media::Capture::Frames::IMultiSourceMediaFrameArrivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MultiSourceMediaFrameArrivedEventArgs> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMultiSourceMediaFrameArrivedEventArgs> {};
template<> struct def<Windows::Media::Capture::Frames::IMultiSourceMediaFrameReference> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Media::Capture::Frames::MultiSourceMediaFrameReference> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMultiSourceMediaFrameReference> {};
template<> struct def<Windows::Media::Capture::Frames::IMediaFrameSourceGetPropertyResult> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::MediaFrameSourceGetPropertyResult> : class_type<Platform::Object, Windows::Media::Capture::Frames::IMediaFrameSourceGetPropertyResult> {};
template<> struct def<Windows::Media::Capture::Frames::IVideoMediaFrameFormat> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::VideoMediaFrameFormat> : class_type<Platform::Object, Windows::Media::Capture::Frames::IVideoMediaFrameFormat> {};
template<> struct def<Windows::Media::Capture::Frames::IDepthMediaFrameFormat> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::DepthMediaFrameFormat> : class_type<Platform::Object, Windows::Media::Capture::Frames::IDepthMediaFrameFormat> {};
template<> struct def<Windows::Media::Capture::Frames::IBufferMediaFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::BufferMediaFrame> : class_type<Platform::Object, Windows::Media::Capture::Frames::IBufferMediaFrame> {};
template<> struct def<Windows::Media::Capture::Frames::IVideoMediaFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::VideoMediaFrame> : class_type<Platform::Object, Windows::Media::Capture::Frames::IVideoMediaFrame> {};
template<> struct def<Windows::Media::Capture::Frames::IAudioMediaFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::AudioMediaFrame> : class_type<Platform::Object, Windows::Media::Capture::Frames::IAudioMediaFrame> {};
template<> struct def<Windows::Media::Capture::Frames::IInfraredMediaFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::InfraredMediaFrame> : class_type<Platform::Object, Windows::Media::Capture::Frames::IInfraredMediaFrame> {};
template<> struct def<Windows::Media::Capture::Frames::IDepthMediaFrame2> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::IDepthMediaFrame> : interface_type<> {};
template<> struct def<Windows::Media::Capture::Frames::DepthMediaFrame> : class_type<Platform::Object, Windows::Media::Capture::Frames::IDepthMediaFrame, Windows::Media::Capture::Frames::IDepthMediaFrame2> {};

// uuids

template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceInfo2> { define_guid(0x195A7855, 0x6457, 0x42C6, 0xA7, 0x69, 0x19, 0xB6, 0x5B, 0xD3, 0x2E, 0x6E);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceInfo> { define_guid(0x87BDC9CD, 0x4601, 0x408F, 0x91, 0xCF, 0x3, 0x83, 0x18, 0xCD, 0xA, 0xF3);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceGroupStatics> { define_guid(0x1C48BFC5, 0x436F, 0x4508, 0x94, 0xCF, 0xD5, 0xD8, 0xB7, 0x32, 0x64, 0x45);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceGroup> { define_guid(0x7F605B87, 0x4832, 0x4B5F, 0xAE, 0x3D, 0x41, 0x2F, 0xAA, 0xB3, 0x7D, 0x34);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSource> { define_guid(0xD6782953, 0x90DB, 0x46A8, 0x8A, 0xDD, 0x2A, 0xA8, 0x84, 0xA8, 0xD2, 0x53);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameReader2> { define_guid(0x871127B3, 0x8531, 0x4050, 0x87, 0xCC, 0xA1, 0x37, 0x33, 0xCF, 0x3E, 0x9B);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameReader> { define_guid(0xE4C94395, 0x2028, 0x48ED, 0x90, 0xB0, 0xD1, 0xC1, 0xB1, 0x62, 0xE2, 0x4C);};
template<> struct uuid<Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader2> { define_guid(0xEF5C8ABD, 0xFC5C, 0x4C6B, 0x9D, 0x81, 0x3C, 0xB9, 0xCC, 0x63, 0x7C, 0x26);};
template<> struct uuid<Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader> { define_guid(0x8D144402, 0xF763, 0x488D, 0x98, 0xF2, 0xB4, 0x37, 0xBC, 0xF0, 0x75, 0xE7);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceController3> { define_guid(0x1F0CF815, 0x2464, 0x4651, 0xB1, 0xE8, 0x4A, 0x82, 0xDB, 0xDB, 0x54, 0xDE);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceController2> { define_guid(0xEFC49FD4, 0xFCF2, 0x4A03, 0xB4, 0xE4, 0xAC, 0x96, 0x28, 0x73, 0x9B, 0xEE);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceController> { define_guid(0x6D076635, 0x316D, 0x4B8F, 0xB7, 0xB6, 0xEE, 0xB0, 0x4A, 0x8C, 0x65, 0x25);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameFormat2> { define_guid(0x63856340, 0x5E87, 0x4C10, 0x86, 0xD1, 0x6D, 0xF0, 0x97, 0xA6, 0xC6, 0xA8);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameFormat> { define_guid(0x71902B4E, 0xB279, 0x4A97, 0xA9, 0xDB, 0xBD, 0x5A, 0x2F, 0xB7, 0x8F, 0x39);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameArrivedEventArgs> { define_guid(0xB430ADD, 0xA490, 0x4435, 0xAD, 0xA1, 0x9A, 0xFF, 0xD5, 0x52, 0x39, 0xF7);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameReference2> { define_guid(0xDDBC3ECC, 0xD5B2, 0x49EF, 0x83, 0x6A, 0x94, 0x7D, 0x98, 0x9B, 0x80, 0xC1);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameReference> { define_guid(0xF6B88641, 0xF0DC, 0x4044, 0x8D, 0xC9, 0x96, 0x1C, 0xED, 0xD0, 0x5B, 0xAD);};
template<> struct uuid<Windows::Media::Capture::Frames::IMultiSourceMediaFrameArrivedEventArgs> { define_guid(0x63115E01, 0xCF51, 0x48FD, 0xAA, 0xB0, 0x6D, 0x69, 0x3E, 0xB4, 0x81, 0x27);};
template<> struct uuid<Windows::Media::Capture::Frames::IMultiSourceMediaFrameReference> { define_guid(0x21964B1A, 0x7FE2, 0x44D6, 0x92, 0xE5, 0x29, 0x8E, 0x6D, 0x28, 0x10, 0xE9);};
template<> struct uuid<Windows::Media::Capture::Frames::IMediaFrameSourceGetPropertyResult> { define_guid(0x88616C2, 0x3A64, 0x4BD5, 0xBD, 0x2B, 0xE7, 0xC8, 0x98, 0xD2, 0xF3, 0x7A);};
template<> struct uuid<Windows::Media::Capture::Frames::IVideoMediaFrameFormat> { define_guid(0x46027FC0, 0xD71B, 0x45C7, 0x8F, 0x14, 0x6D, 0x9A, 0xA, 0xE6, 0x4, 0xE4);};
template<> struct uuid<Windows::Media::Capture::Frames::IDepthMediaFrameFormat> { define_guid(0xC312CF40, 0xD729, 0x453E, 0x87, 0x80, 0x2E, 0x4, 0xF1, 0x40, 0xD2, 0x8E);};
template<> struct uuid<Windows::Media::Capture::Frames::IBufferMediaFrame> { define_guid(0xB5B153C7, 0x9B84, 0x4062, 0xB7, 0x9C, 0xA3, 0x65, 0xB2, 0x59, 0x68, 0x54);};
template<> struct uuid<Windows::Media::Capture::Frames::IVideoMediaFrame> { define_guid(0xDD4CCB, 0x32BD, 0x4FE1, 0xA0, 0x13, 0x7C, 0xC1, 0x3C, 0xF5, 0xDB, 0xCF);};
template<> struct uuid<Windows::Media::Capture::Frames::IAudioMediaFrame> { define_guid(0xA3A9FEFF, 0x8021, 0x441B, 0x9A, 0x46, 0xE7, 0xF0, 0x13, 0x7B, 0x79, 0x81);};
template<> struct uuid<Windows::Media::Capture::Frames::IInfraredMediaFrame> { define_guid(0x3FD13503, 0x4B, 0x4F0E, 0x91, 0xAC, 0x46, 0x52, 0x99, 0xB4, 0x16, 0x58);};
template<> struct uuid<Windows::Media::Capture::Frames::IDepthMediaFrame2> { define_guid(0x6CCA473D, 0xC4A4, 0x4176, 0xB0, 0xCD, 0x33, 0xEA, 0xE3, 0xB3, 0x5A, 0xA3);};
template<> struct uuid<Windows::Media::Capture::Frames::IDepthMediaFrame> { define_guid(0x47135E4F, 0x8549, 0x45C0, 0x92, 0x5B, 0x80, 0xD3, 0x5E, 0xFD, 0xB1, 0xA);};

// types

namespace Windows { namespace Media { namespace Capture { namespace Frames {

// IMediaFrameSourceInfo2
struct IMediaFrameSourceInfo2_raw : IInspectable {
	virtual STDMETHODIMP _get_ProfileId(HSTRING *value);
	virtual STDMETHODIMP _get_VideoProfileMediaDescription(Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* *value);
};
template<typename X> struct IMediaFrameSourceInfo2_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaFrameSourceInfo2_adaptor::ProfileId)->_get_ProfileId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ProfileId;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> get() { Foundation::Collections::IVectorView<MediaCaptureVideoProfileMediaDescription*>* value; hrcheck(enc(&IMediaFrameSourceInfo2_adaptor::VideoProfileMediaDescription)->_get_VideoProfileMediaDescription(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaCaptureVideoProfileMediaDescription>>> operator->() { return get(); }
		} VideoProfileMediaDescription;
	};
	IMediaFrameSourceInfo2_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameSourceInfo2, X> : Windows::Media::Capture::Frames::IMediaFrameSourceInfo2_adaptor<X> { typedef adapt IMediaFrameSourceInfo2; };
struct IMediaFrameSourceInfo2 : IMediaFrameSourceInfo2_raw, generate<IMediaFrameSourceInfo2> {};

// IMediaFrameSourceInfo
struct IMediaFrameSourceInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_MediaStreamType(Capture::MediaStreamType *value);
	virtual STDMETHODIMP _get_SourceKind(MediaFrameSourceKind *value);
	virtual STDMETHODIMP _get_SourceGroup(MediaFrameSourceGroup* *value);
	virtual STDMETHODIMP _get_DeviceInformation(Windows::Devices::Enumeration::DeviceInformation* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* *value);
	virtual STDMETHODIMP _get_CoordinateSystem(Perception::Spatial::SpatialCoordinateSystem* *value);
};
template<typename X> struct IMediaFrameSourceInfo_adaptor : X {
	union {
		struct : property {
			ptr<Perception::Spatial::SpatialCoordinateSystem> get() { Perception::Spatial::SpatialCoordinateSystem* value; hrcheck(enc(&IMediaFrameSourceInfo_adaptor::CoordinateSystem)->_get_CoordinateSystem(&value)); return from_abi(value); }
			ptr<Perception::Spatial::SpatialCoordinateSystem> operator()() { return get(); }
			operator ptr<Perception::Spatial::SpatialCoordinateSystem> () { return get(); }
			ptr<Perception::Spatial::SpatialCoordinateSystem> operator->() { return get(); }
		} CoordinateSystem;
		struct : property {
			ptr<Windows::Devices::Enumeration::DeviceInformation> get() { Windows::Devices::Enumeration::DeviceInformation* value; hrcheck(enc(&IMediaFrameSourceInfo_adaptor::DeviceInformation)->_get_DeviceInformation(&value)); return from_abi(value); }
			ptr<Windows::Devices::Enumeration::DeviceInformation> operator()() { return get(); }
			operator ptr<Windows::Devices::Enumeration::DeviceInformation> () { return get(); }
			ptr<Windows::Devices::Enumeration::DeviceInformation> operator->() { return get(); }
		} DeviceInformation;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaFrameSourceInfo_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			Capture::MediaStreamType get() { Capture::MediaStreamType value; hrcheck(enc(&IMediaFrameSourceInfo_adaptor::MediaStreamType)->_get_MediaStreamType(&value)); return value; }
			Capture::MediaStreamType operator()() { return get(); }
			operator Capture::MediaStreamType () { return get(); }
		} MediaStreamType;
		struct : property {
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> get() { Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* value; hrcheck(enc(&IMediaFrameSourceInfo_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<Platform::Guid, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			ptr<MediaFrameSourceGroup> get() { MediaFrameSourceGroup* value; hrcheck(enc(&IMediaFrameSourceInfo_adaptor::SourceGroup)->_get_SourceGroup(&value)); return from_abi(value); }
			ptr<MediaFrameSourceGroup> operator()() { return get(); }
			operator ptr<MediaFrameSourceGroup> () { return get(); }
			ptr<MediaFrameSourceGroup> operator->() { return get(); }
		} SourceGroup;
		struct : property {
			MediaFrameSourceKind get() { MediaFrameSourceKind value; hrcheck(enc(&IMediaFrameSourceInfo_adaptor::SourceKind)->_get_SourceKind(&value)); return value; }
			MediaFrameSourceKind operator()() { return get(); }
			operator MediaFrameSourceKind () { return get(); }
		} SourceKind;
	};
	IMediaFrameSourceInfo_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameSourceInfo, X> : Windows::Media::Capture::Frames::IMediaFrameSourceInfo_adaptor<X> { typedef adapt IMediaFrameSourceInfo; };
struct IMediaFrameSourceInfo : IMediaFrameSourceInfo_raw, generate<IMediaFrameSourceInfo> {};

// MediaFrameSourceInfo
template<typename X> struct statics<MediaFrameSourceInfo, X> : X {
	typedef typename X::root_type MediaFrameSourceInfo;
};
struct MediaFrameSourceInfo : generate<MediaFrameSourceInfo> {};

// IMediaFrameSourceGroupStatics
struct IMediaFrameSourceGroupStatics : IInspectable {
	virtual STDMETHODIMP _FindAllAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<MediaFrameSourceGroup*>*>* *value);
	virtual STDMETHODIMP _FromIdAsync(HSTRING id, Foundation::IAsyncOperation<MediaFrameSourceGroup*>* *value);
	virtual STDMETHODIMP _GetDeviceSelector(HSTRING *value);
};

// IMediaFrameSourceGroup
struct IMediaFrameSourceGroup_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_SourceInfos(Foundation::Collections::IVectorView<MediaFrameSourceInfo*>* *value);
};
template<typename X> struct IMediaFrameSourceGroup_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaFrameSourceGroup_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaFrameSourceGroup_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaFrameSourceInfo>>> get() { Foundation::Collections::IVectorView<MediaFrameSourceInfo*>* value; hrcheck(enc(&IMediaFrameSourceGroup_adaptor::SourceInfos)->_get_SourceInfos(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaFrameSourceInfo>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaFrameSourceInfo>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaFrameSourceInfo>>> operator->() { return get(); }
		} SourceInfos;
	};
	IMediaFrameSourceGroup_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameSourceGroup, X> : Windows::Media::Capture::Frames::IMediaFrameSourceGroup_adaptor<X> { typedef adapt IMediaFrameSourceGroup; };
struct IMediaFrameSourceGroup : IMediaFrameSourceGroup_raw, generate<IMediaFrameSourceGroup> {};

// MediaFrameSourceGroup
template<typename> struct MediaFrameSourceGroup_statics {
	static ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<MediaFrameSourceGroup>>>>> FindAllAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<MediaFrameSourceGroup*>*>* value; hrcheck(get_activation_factory<MediaFrameSourceGroup, IMediaFrameSourceGroupStatics>()->_FindAllAsync(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<ptr<MediaFrameSourceGroup>>> FromIdAsync(hstring_ref id) { Foundation::IAsyncOperation<MediaFrameSourceGroup*>* value; hrcheck(get_activation_factory<MediaFrameSourceGroup, IMediaFrameSourceGroupStatics>()->_FromIdAsync(id, &value)); return from_abi(value); }
	static hstring GetDeviceSelector() { HSTRING value; hrcheck(get_activation_factory<MediaFrameSourceGroup, IMediaFrameSourceGroupStatics>()->_GetDeviceSelector(&value)); return from_abi(value); }
};

template<typename X> struct statics<MediaFrameSourceGroup, X> : X, Windows::Media::Capture::Frames::MediaFrameSourceGroup_statics<void> {
	typedef typename X::root_type MediaFrameSourceGroup;
};
struct MediaFrameSourceGroup : generate<MediaFrameSourceGroup> {};

// IMediaFrameSource
struct IMediaFrameSource_raw : IInspectable {
	virtual STDMETHODIMP _get_Info(MediaFrameSourceInfo* *value);
	virtual STDMETHODIMP _get_Controller(MediaFrameSourceController* *value);
	virtual STDMETHODIMP _get_SupportedFormats(Foundation::Collections::IVectorView<MediaFrameFormat*>* *value);
	virtual STDMETHODIMP _get_CurrentFormat(MediaFrameFormat* *value);
	virtual STDMETHODIMP _SetFormatAsync(MediaFrameFormat* format, Foundation::IAsyncAction* *value);
	virtual STDMETHODIMP _add_FormatChanged(Foundation::TypedEventHandler<MediaFrameSource*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FormatChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _TryGetCameraIntrinsics(MediaFrameFormat* format, Devices::Core::CameraIntrinsics* *value);
};
template<typename X> struct IMediaFrameSource_adaptor : X {
	union {
		struct : property {
			ptr<MediaFrameSourceController> get() { MediaFrameSourceController* value; hrcheck(enc(&IMediaFrameSource_adaptor::Controller)->_get_Controller(&value)); return from_abi(value); }
			ptr<MediaFrameSourceController> operator()() { return get(); }
			operator ptr<MediaFrameSourceController> () { return get(); }
			ptr<MediaFrameSourceController> operator->() { return get(); }
		} Controller;
		struct : property {
			ptr<MediaFrameFormat> get() { MediaFrameFormat* value; hrcheck(enc(&IMediaFrameSource_adaptor::CurrentFormat)->_get_CurrentFormat(&value)); return from_abi(value); }
			ptr<MediaFrameFormat> operator()() { return get(); }
			operator ptr<MediaFrameFormat> () { return get(); }
			ptr<MediaFrameFormat> operator->() { return get(); }
		} CurrentFormat;
		struct : property {
			ptr<MediaFrameSourceInfo> get() { MediaFrameSourceInfo* value; hrcheck(enc(&IMediaFrameSource_adaptor::Info)->_get_Info(&value)); return from_abi(value); }
			ptr<MediaFrameSourceInfo> operator()() { return get(); }
			operator ptr<MediaFrameSourceInfo> () { return get(); }
			ptr<MediaFrameSourceInfo> operator->() { return get(); }
		} Info;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<MediaFrameFormat>>> get() { Foundation::Collections::IVectorView<MediaFrameFormat*>* value; hrcheck(enc(&IMediaFrameSource_adaptor::SupportedFormats)->_get_SupportedFormats(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaFrameFormat>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<MediaFrameFormat>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<MediaFrameFormat>>> operator->() { return get(); }
		} SupportedFormats;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaFrameSource>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaFrameSource_adaptor::FormatChanged)->_add_FormatChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaFrameSource_adaptor::FormatChanged)->_remove_FormatChanged(token)); }
		} FormatChanged;
	};
	ptr<Foundation::IAsyncAction> SetFormatAsync(pptr<MediaFrameFormat> format) { Foundation::IAsyncAction* value; hrcheck(X::get()->_SetFormatAsync(format, &value)); return from_abi(value); }
	ptr<Devices::Core::CameraIntrinsics> TryGetCameraIntrinsics(pptr<MediaFrameFormat> format) { Devices::Core::CameraIntrinsics* value; hrcheck(X::get()->_TryGetCameraIntrinsics(format, &value)); return from_abi(value); }
	IMediaFrameSource_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameSource, X> : Windows::Media::Capture::Frames::IMediaFrameSource_adaptor<X> { typedef adapt IMediaFrameSource; };
struct IMediaFrameSource : IMediaFrameSource_raw, generate<IMediaFrameSource> {};

// MediaFrameSource
template<typename X> struct statics<MediaFrameSource, X> : X {
	typedef typename X::root_type MediaFrameSource;
};
struct MediaFrameSource : generate<MediaFrameSource> {};

// IMediaFrameReader2
struct IMediaFrameReader2_raw : IInspectable {
	virtual STDMETHODIMP _put_AcquisitionMode(MediaFrameReaderAcquisitionMode value);
	virtual STDMETHODIMP _get_AcquisitionMode(MediaFrameReaderAcquisitionMode *value);
};
template<typename X> struct IMediaFrameReader2_adaptor : X {
	union {
		struct : property {
			MediaFrameReaderAcquisitionMode get() { MediaFrameReaderAcquisitionMode value; hrcheck(enc(&IMediaFrameReader2_adaptor::AcquisitionMode)->_get_AcquisitionMode(&value)); return value; }
			MediaFrameReaderAcquisitionMode operator()() { return get(); }
			operator MediaFrameReaderAcquisitionMode () { return get(); }
			void put(MediaFrameReaderAcquisitionMode value) { hrcheck(enc(&IMediaFrameReader2_adaptor::AcquisitionMode)->_put_AcquisitionMode(value)); }
			void operator=(MediaFrameReaderAcquisitionMode value) { put(value); }
			void operator()(MediaFrameReaderAcquisitionMode value) { put(value); }
		} AcquisitionMode;
	};
	IMediaFrameReader2_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameReader2, X> : Windows::Media::Capture::Frames::IMediaFrameReader2_adaptor<X> { typedef adapt IMediaFrameReader2; };
struct IMediaFrameReader2 : IMediaFrameReader2_raw, generate<IMediaFrameReader2> {};

// IMediaFrameReader
struct IMediaFrameReader_raw : IInspectable {
	virtual STDMETHODIMP _add_FrameArrived(Foundation::TypedEventHandler<MediaFrameReader*, MediaFrameArrivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FrameArrived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _TryAcquireLatestFrame(MediaFrameReference* *value);
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncOperation<MediaFrameReaderStartStatus>* *operation);
	virtual STDMETHODIMP _StopAsync(Foundation::IAsyncAction* *action);
};
template<typename X> struct IMediaFrameReader_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MediaFrameReader>, ptr<MediaFrameArrivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMediaFrameReader_adaptor::FrameArrived)->_add_FrameArrived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMediaFrameReader_adaptor::FrameArrived)->_remove_FrameArrived(token)); }
		} FrameArrived;
	};
	ptr<MediaFrameReference> TryAcquireLatestFrame() { MediaFrameReference* value; hrcheck(X::get()->_TryAcquireLatestFrame(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<MediaFrameReaderStartStatus>> StartAsync() { Foundation::IAsyncOperation<MediaFrameReaderStartStatus>* operation; hrcheck(X::get()->_StartAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> StopAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_StopAsync(&action)); return from_abi(action); }
	IMediaFrameReader_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameReader, X> : Windows::Media::Capture::Frames::IMediaFrameReader_adaptor<X> { typedef adapt IMediaFrameReader; };
struct IMediaFrameReader : IMediaFrameReader_raw, generate<IMediaFrameReader> {};

// MediaFrameReader
template<typename X> struct statics<MediaFrameReader, X> : X {
	typedef typename X::root_type MediaFrameReader;
};
struct MediaFrameReader : generate<MediaFrameReader> {};

// IMultiSourceMediaFrameReader2
struct IMultiSourceMediaFrameReader2_raw : IInspectable {
	virtual STDMETHODIMP _put_AcquisitionMode(MediaFrameReaderAcquisitionMode value);
	virtual STDMETHODIMP _get_AcquisitionMode(MediaFrameReaderAcquisitionMode *value);
};
template<typename X> struct IMultiSourceMediaFrameReader2_adaptor : X {
	union {
		struct : property {
			MediaFrameReaderAcquisitionMode get() { MediaFrameReaderAcquisitionMode value; hrcheck(enc(&IMultiSourceMediaFrameReader2_adaptor::AcquisitionMode)->_get_AcquisitionMode(&value)); return value; }
			MediaFrameReaderAcquisitionMode operator()() { return get(); }
			operator MediaFrameReaderAcquisitionMode () { return get(); }
			void put(MediaFrameReaderAcquisitionMode value) { hrcheck(enc(&IMultiSourceMediaFrameReader2_adaptor::AcquisitionMode)->_put_AcquisitionMode(value)); }
			void operator=(MediaFrameReaderAcquisitionMode value) { put(value); }
			void operator()(MediaFrameReaderAcquisitionMode value) { put(value); }
		} AcquisitionMode;
	};
	IMultiSourceMediaFrameReader2_adaptor() {}
};
template<typename X> struct adapt<IMultiSourceMediaFrameReader2, X> : Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader2_adaptor<X> { typedef adapt IMultiSourceMediaFrameReader2; };
struct IMultiSourceMediaFrameReader2 : IMultiSourceMediaFrameReader2_raw, generate<IMultiSourceMediaFrameReader2> {};

// IMultiSourceMediaFrameReader
struct IMultiSourceMediaFrameReader_raw : IInspectable {
	virtual STDMETHODIMP _add_FrameArrived(Foundation::TypedEventHandler<MultiSourceMediaFrameReader*, MultiSourceMediaFrameArrivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_FrameArrived(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _TryAcquireLatestFrame(MultiSourceMediaFrameReference* *value);
	virtual STDMETHODIMP _StartAsync(Foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus>* *operation);
	virtual STDMETHODIMP _StopAsync(Foundation::IAsyncAction* *action);
};
template<typename X> struct IMultiSourceMediaFrameReader_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<MultiSourceMediaFrameReader>, ptr<MultiSourceMediaFrameArrivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IMultiSourceMediaFrameReader_adaptor::FrameArrived)->_add_FrameArrived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IMultiSourceMediaFrameReader_adaptor::FrameArrived)->_remove_FrameArrived(token)); }
		} FrameArrived;
	};
	ptr<MultiSourceMediaFrameReference> TryAcquireLatestFrame() { MultiSourceMediaFrameReference* value; hrcheck(X::get()->_TryAcquireLatestFrame(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus>> StartAsync() { Foundation::IAsyncOperation<MultiSourceMediaFrameReaderStartStatus>* operation; hrcheck(X::get()->_StartAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> StopAsync() { Foundation::IAsyncAction* action; hrcheck(X::get()->_StopAsync(&action)); return from_abi(action); }
	IMultiSourceMediaFrameReader_adaptor() {}
};
template<typename X> struct adapt<IMultiSourceMediaFrameReader, X> : Windows::Media::Capture::Frames::IMultiSourceMediaFrameReader_adaptor<X> { typedef adapt IMultiSourceMediaFrameReader; };
struct IMultiSourceMediaFrameReader : IMultiSourceMediaFrameReader_raw, generate<IMultiSourceMediaFrameReader> {};

// MultiSourceMediaFrameReader
template<typename X> struct statics<MultiSourceMediaFrameReader, X> : X {
	typedef typename X::root_type MultiSourceMediaFrameReader;
};
struct MultiSourceMediaFrameReader : generate<MultiSourceMediaFrameReader> {};

// IMediaFrameSourceController3
struct IMediaFrameSourceController3_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioDeviceController(Devices::AudioDeviceController* *value);
};
template<typename X> struct IMediaFrameSourceController3_adaptor : X {
	union {
		struct : property {
			ptr<Devices::AudioDeviceController> get() { Devices::AudioDeviceController* value; hrcheck(enc(&IMediaFrameSourceController3_adaptor::AudioDeviceController)->_get_AudioDeviceController(&value)); return from_abi(value); }
			ptr<Devices::AudioDeviceController> operator()() { return get(); }
			operator ptr<Devices::AudioDeviceController> () { return get(); }
			ptr<Devices::AudioDeviceController> operator->() { return get(); }
		} AudioDeviceController;
	};
	IMediaFrameSourceController3_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameSourceController3, X> : Windows::Media::Capture::Frames::IMediaFrameSourceController3_adaptor<X> { typedef adapt IMediaFrameSourceController3; };
struct IMediaFrameSourceController3 : IMediaFrameSourceController3_raw, generate<IMediaFrameSourceController3> {};

// IMediaFrameSourceController2
struct IMediaFrameSourceController2_raw : IInspectable {
	virtual STDMETHODIMP _GetPropertyByExtendedIdAsync(unsigned extendedPropertyIdSize, unsigned char *extendedPropertyId, Foundation::IReference<unsigned>* maxPropertyValueSize, Foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult*>* *operation);
	virtual STDMETHODIMP _SetPropertyByExtendedIdAsync(unsigned extendedPropertyIdSize, unsigned char *extendedPropertyId, unsigned propertyValueSize, unsigned char *propertyValue, Foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus>* *operation);
};
template<typename X> struct IMediaFrameSourceController2_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<MediaFrameSourceGetPropertyResult>>> GetPropertyByExtendedIdAsync(const szarray<unsigned char>& extendedPropertyId, pptr<Foundation::IReference<unsigned>> maxPropertyValueSize) { Foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult*>* operation; hrcheck(X::get()->_GetPropertyByExtendedIdAsync(extendedPropertyId.size, to_abi(extendedPropertyId.p), to_abi(maxPropertyValueSize), &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus>> SetPropertyByExtendedIdAsync(const szarray<unsigned char>& extendedPropertyId, const szarray<unsigned char>& propertyValue) { Foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus>* operation; hrcheck(X::get()->_SetPropertyByExtendedIdAsync(extendedPropertyId.size, to_abi(extendedPropertyId.p), propertyValue.size, to_abi(propertyValue.p), &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IMediaFrameSourceController2, X> : Windows::Media::Capture::Frames::IMediaFrameSourceController2_adaptor<X> { typedef adapt IMediaFrameSourceController2; };
struct IMediaFrameSourceController2 : IMediaFrameSourceController2_raw, generate<IMediaFrameSourceController2> {};

// IMediaFrameSourceController
struct IMediaFrameSourceController_raw : IInspectable {
	virtual STDMETHODIMP _GetPropertyAsync(HSTRING propertyId, Foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult*>* *value);
	virtual STDMETHODIMP _SetPropertyAsync(HSTRING propertyId, IInspectable* propertyValue, Foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus>* *value);
	virtual STDMETHODIMP _get_VideoDeviceController(Devices::VideoDeviceController* *value);
};
template<typename X> struct IMediaFrameSourceController_adaptor : X {
	union {
		struct : property {
			ptr<Devices::VideoDeviceController> get() { Devices::VideoDeviceController* value; hrcheck(enc(&IMediaFrameSourceController_adaptor::VideoDeviceController)->_get_VideoDeviceController(&value)); return from_abi(value); }
			ptr<Devices::VideoDeviceController> operator()() { return get(); }
			operator ptr<Devices::VideoDeviceController> () { return get(); }
			ptr<Devices::VideoDeviceController> operator->() { return get(); }
		} VideoDeviceController;
	};
	ptr<Foundation::IAsyncOperation<ptr<MediaFrameSourceGetPropertyResult>>> GetPropertyAsync(hstring_ref propertyId) { Foundation::IAsyncOperation<MediaFrameSourceGetPropertyResult*>* value; hrcheck(X::get()->_GetPropertyAsync(propertyId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus>> SetPropertyAsync(hstring_ref propertyId, object_ref propertyValue) { Foundation::IAsyncOperation<MediaFrameSourceSetPropertyStatus>* value; hrcheck(X::get()->_SetPropertyAsync(propertyId, propertyValue, &value)); return from_abi(value); }
	IMediaFrameSourceController_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameSourceController, X> : Windows::Media::Capture::Frames::IMediaFrameSourceController_adaptor<X> { typedef adapt IMediaFrameSourceController; };
struct IMediaFrameSourceController : IMediaFrameSourceController_raw, generate<IMediaFrameSourceController> {};

// MediaFrameSourceController
template<typename X> struct statics<MediaFrameSourceController, X> : X {
	typedef typename X::root_type MediaFrameSourceController;
};
struct MediaFrameSourceController : generate<MediaFrameSourceController> {};

// IMediaFrameFormat2
struct IMediaFrameFormat2_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioEncodingProperties(MediaProperties::AudioEncodingProperties* *value);
};
template<typename X> struct IMediaFrameFormat2_adaptor : X {
	union {
		struct : property {
			ptr<MediaProperties::AudioEncodingProperties> get() { MediaProperties::AudioEncodingProperties* value; hrcheck(enc(&IMediaFrameFormat2_adaptor::AudioEncodingProperties)->_get_AudioEncodingProperties(&value)); return from_abi(value); }
			ptr<MediaProperties::AudioEncodingProperties> operator()() { return get(); }
			operator ptr<MediaProperties::AudioEncodingProperties> () { return get(); }
			ptr<MediaProperties::AudioEncodingProperties> operator->() { return get(); }
		} AudioEncodingProperties;
	};
	IMediaFrameFormat2_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameFormat2, X> : Windows::Media::Capture::Frames::IMediaFrameFormat2_adaptor<X> { typedef adapt IMediaFrameFormat2; };
struct IMediaFrameFormat2 : IMediaFrameFormat2_raw, generate<IMediaFrameFormat2> {};

// IMediaFrameFormat
struct IMediaFrameFormat_raw : IInspectable {
	virtual STDMETHODIMP _get_MajorType(HSTRING *value);
	virtual STDMETHODIMP _get_Subtype(HSTRING *value);
	virtual STDMETHODIMP _get_FrameRate(MediaProperties::MediaRatio* *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* *value);
	virtual STDMETHODIMP _get_VideoFormat(VideoMediaFrameFormat* *value);
};
template<typename X> struct IMediaFrameFormat_adaptor : X {
	union {
		struct : property {
			ptr<MediaProperties::MediaRatio> get() { MediaProperties::MediaRatio* value; hrcheck(enc(&IMediaFrameFormat_adaptor::FrameRate)->_get_FrameRate(&value)); return from_abi(value); }
			ptr<MediaProperties::MediaRatio> operator()() { return get(); }
			operator ptr<MediaProperties::MediaRatio> () { return get(); }
			ptr<MediaProperties::MediaRatio> operator->() { return get(); }
		} FrameRate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaFrameFormat_adaptor::MajorType)->_get_MajorType(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} MajorType;
		struct : property {
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> get() { Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* value; hrcheck(enc(&IMediaFrameFormat_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<Platform::Guid, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IMediaFrameFormat_adaptor::Subtype)->_get_Subtype(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Subtype;
		struct : property {
			ptr<VideoMediaFrameFormat> get() { VideoMediaFrameFormat* value; hrcheck(enc(&IMediaFrameFormat_adaptor::VideoFormat)->_get_VideoFormat(&value)); return from_abi(value); }
			ptr<VideoMediaFrameFormat> operator()() { return get(); }
			operator ptr<VideoMediaFrameFormat> () { return get(); }
			ptr<VideoMediaFrameFormat> operator->() { return get(); }
		} VideoFormat;
	};
	IMediaFrameFormat_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameFormat, X> : Windows::Media::Capture::Frames::IMediaFrameFormat_adaptor<X> { typedef adapt IMediaFrameFormat; };
struct IMediaFrameFormat : IMediaFrameFormat_raw, generate<IMediaFrameFormat> {};

// MediaFrameFormat
template<typename X> struct statics<MediaFrameFormat, X> : X {
	typedef typename X::root_type MediaFrameFormat;
};
struct MediaFrameFormat : generate<MediaFrameFormat> {};

// IMediaFrameArrivedEventArgs
struct IMediaFrameArrivedEventArgs : IInspectable, generate<IMediaFrameArrivedEventArgs> {};

// MediaFrameArrivedEventArgs
template<typename X> struct statics<MediaFrameArrivedEventArgs, X> : X {
	typedef typename X::root_type MediaFrameArrivedEventArgs;
};
struct MediaFrameArrivedEventArgs : generate<MediaFrameArrivedEventArgs> {};

// IMediaFrameReference2
struct IMediaFrameReference2_raw : IInspectable {
	virtual STDMETHODIMP _get_AudioMediaFrame(Frames::AudioMediaFrame* *value);
};
template<typename X> struct IMediaFrameReference2_adaptor : X {
	union {
		struct : property {
			ptr<Frames::AudioMediaFrame> get() { Frames::AudioMediaFrame* value; hrcheck(enc(&IMediaFrameReference2_adaptor::AudioMediaFrame)->_get_AudioMediaFrame(&value)); return from_abi(value); }
			ptr<Frames::AudioMediaFrame> operator()() { return get(); }
			operator ptr<Frames::AudioMediaFrame> () { return get(); }
			ptr<Frames::AudioMediaFrame> operator->() { return get(); }
		} AudioMediaFrame;
	};
	IMediaFrameReference2_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameReference2, X> : Windows::Media::Capture::Frames::IMediaFrameReference2_adaptor<X> { typedef adapt IMediaFrameReference2; };
struct IMediaFrameReference2 : IMediaFrameReference2_raw, generate<IMediaFrameReference2> {};

// IMediaFrameReference
struct IMediaFrameReference_raw : IInspectable {
	virtual STDMETHODIMP _get_SourceKind(MediaFrameSourceKind *value);
	virtual STDMETHODIMP _get_Format(MediaFrameFormat* *value);
	virtual STDMETHODIMP _get_SystemRelativeTime(Foundation::IReference<Foundation::TimeSpan>* *value);
	virtual STDMETHODIMP _get_Duration(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _get_Properties(Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* *value);
	virtual STDMETHODIMP _get_BufferMediaFrame(Frames::BufferMediaFrame* *value);
	virtual STDMETHODIMP _get_VideoMediaFrame(Frames::VideoMediaFrame* *value);
	virtual STDMETHODIMP _get_CoordinateSystem(Perception::Spatial::SpatialCoordinateSystem* *value);
};
template<typename X> struct IMediaFrameReference_adaptor : X {
	union {
		struct : property {
			ptr<Frames::BufferMediaFrame> get() { Frames::BufferMediaFrame* value; hrcheck(enc(&IMediaFrameReference_adaptor::BufferMediaFrame)->_get_BufferMediaFrame(&value)); return from_abi(value); }
			ptr<Frames::BufferMediaFrame> operator()() { return get(); }
			operator ptr<Frames::BufferMediaFrame> () { return get(); }
			ptr<Frames::BufferMediaFrame> operator->() { return get(); }
		} BufferMediaFrame;
		struct : property {
			ptr<Perception::Spatial::SpatialCoordinateSystem> get() { Perception::Spatial::SpatialCoordinateSystem* value; hrcheck(enc(&IMediaFrameReference_adaptor::CoordinateSystem)->_get_CoordinateSystem(&value)); return from_abi(value); }
			ptr<Perception::Spatial::SpatialCoordinateSystem> operator()() { return get(); }
			operator ptr<Perception::Spatial::SpatialCoordinateSystem> () { return get(); }
			ptr<Perception::Spatial::SpatialCoordinateSystem> operator->() { return get(); }
		} CoordinateSystem;
		struct : property {
			Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(enc(&IMediaFrameReference_adaptor::Duration)->_get_Duration(&value)); return value; }
			Foundation::TimeSpan operator()() { return get(); }
			operator Foundation::TimeSpan () { return get(); }
		} Duration;
		struct : property {
			ptr<MediaFrameFormat> get() { MediaFrameFormat* value; hrcheck(enc(&IMediaFrameReference_adaptor::Format)->_get_Format(&value)); return from_abi(value); }
			ptr<MediaFrameFormat> operator()() { return get(); }
			operator ptr<MediaFrameFormat> () { return get(); }
			ptr<MediaFrameFormat> operator->() { return get(); }
		} Format;
		struct : property {
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> get() { Foundation::Collections::IMapView<Platform::Guid, IInspectable*>* value; hrcheck(enc(&IMediaFrameReference_adaptor::Properties)->_get_Properties(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IMapView<Platform::Guid, object>> () { return get(); }
			ptr<Foundation::Collections::IMapView<Platform::Guid, object>> operator->() { return get(); }
		} Properties;
		struct : property {
			MediaFrameSourceKind get() { MediaFrameSourceKind value; hrcheck(enc(&IMediaFrameReference_adaptor::SourceKind)->_get_SourceKind(&value)); return value; }
			MediaFrameSourceKind operator()() { return get(); }
			operator MediaFrameSourceKind () { return get(); }
		} SourceKind;
		struct : property {
			ptr<Foundation::IReference<Foundation::TimeSpan>> get() { Foundation::IReference<Foundation::TimeSpan>* value; hrcheck(enc(&IMediaFrameReference_adaptor::SystemRelativeTime)->_get_SystemRelativeTime(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::TimeSpan>> () { return get(); }
			ptr<Foundation::IReference<Foundation::TimeSpan>> operator->() { return get(); }
		} SystemRelativeTime;
		struct : property {
			ptr<Frames::VideoMediaFrame> get() { Frames::VideoMediaFrame* value; hrcheck(enc(&IMediaFrameReference_adaptor::VideoMediaFrame)->_get_VideoMediaFrame(&value)); return from_abi(value); }
			ptr<Frames::VideoMediaFrame> operator()() { return get(); }
			operator ptr<Frames::VideoMediaFrame> () { return get(); }
			ptr<Frames::VideoMediaFrame> operator->() { return get(); }
		} VideoMediaFrame;
	};
	IMediaFrameReference_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameReference, X> : Windows::Media::Capture::Frames::IMediaFrameReference_adaptor<X> { typedef adapt IMediaFrameReference; };
struct IMediaFrameReference : IMediaFrameReference_raw, generate<IMediaFrameReference> {};

// MediaFrameReference
template<typename X> struct statics<MediaFrameReference, X> : X {
	typedef typename X::root_type MediaFrameReference;
};
struct MediaFrameReference : generate<MediaFrameReference> {};

// IMultiSourceMediaFrameArrivedEventArgs
struct IMultiSourceMediaFrameArrivedEventArgs : IInspectable, generate<IMultiSourceMediaFrameArrivedEventArgs> {};

// MultiSourceMediaFrameArrivedEventArgs
template<typename X> struct statics<MultiSourceMediaFrameArrivedEventArgs, X> : X {
	typedef typename X::root_type MultiSourceMediaFrameArrivedEventArgs;
};
struct MultiSourceMediaFrameArrivedEventArgs : generate<MultiSourceMediaFrameArrivedEventArgs> {};

// IMultiSourceMediaFrameReference
struct IMultiSourceMediaFrameReference_raw : IInspectable {
	virtual STDMETHODIMP _TryGetFrameReferenceBySourceId(HSTRING sourceId, MediaFrameReference* *value);
};
template<typename X> struct IMultiSourceMediaFrameReference_adaptor : X {
	ptr<MediaFrameReference> TryGetFrameReferenceBySourceId(hstring_ref sourceId) { MediaFrameReference* value; hrcheck(X::get()->_TryGetFrameReferenceBySourceId(sourceId, &value)); return from_abi(value); }
};
template<typename X> struct adapt<IMultiSourceMediaFrameReference, X> : Windows::Media::Capture::Frames::IMultiSourceMediaFrameReference_adaptor<X> { typedef adapt IMultiSourceMediaFrameReference; };
struct IMultiSourceMediaFrameReference : IMultiSourceMediaFrameReference_raw, generate<IMultiSourceMediaFrameReference> {};

// MultiSourceMediaFrameReference
template<typename X> struct statics<MultiSourceMediaFrameReference, X> : X {
	typedef typename X::root_type MultiSourceMediaFrameReference;
};
struct MultiSourceMediaFrameReference : generate<MultiSourceMediaFrameReference> {};

// IMediaFrameSourceGetPropertyResult
struct IMediaFrameSourceGetPropertyResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(MediaFrameSourceGetPropertyStatus *value);
	virtual STDMETHODIMP _get_Value(IInspectable* *value);
};
template<typename X> struct IMediaFrameSourceGetPropertyResult_adaptor : X {
	union {
		struct : property {
			MediaFrameSourceGetPropertyStatus get() { MediaFrameSourceGetPropertyStatus value; hrcheck(enc(&IMediaFrameSourceGetPropertyResult_adaptor::Status)->_get_Status(&value)); return value; }
			MediaFrameSourceGetPropertyStatus operator()() { return get(); }
			operator MediaFrameSourceGetPropertyStatus () { return get(); }
		} Status;
		struct : property {
			object get() { IInspectable* value; hrcheck(enc(&IMediaFrameSourceGetPropertyResult_adaptor::Value)->_get_Value(&value)); return from_abi(value); }
			object operator()() { return get(); }
			operator object () { return get(); }
		} Value;
	};
	IMediaFrameSourceGetPropertyResult_adaptor() {}
};
template<typename X> struct adapt<IMediaFrameSourceGetPropertyResult, X> : Windows::Media::Capture::Frames::IMediaFrameSourceGetPropertyResult_adaptor<X> { typedef adapt IMediaFrameSourceGetPropertyResult; };
struct IMediaFrameSourceGetPropertyResult : IMediaFrameSourceGetPropertyResult_raw, generate<IMediaFrameSourceGetPropertyResult> {};

// MediaFrameSourceGetPropertyResult
template<typename X> struct statics<MediaFrameSourceGetPropertyResult, X> : X {
	typedef typename X::root_type MediaFrameSourceGetPropertyResult;
};
struct MediaFrameSourceGetPropertyResult : generate<MediaFrameSourceGetPropertyResult> {};

// IVideoMediaFrameFormat
struct IVideoMediaFrameFormat_raw : IInspectable {
	virtual STDMETHODIMP _get_MediaFrameFormat(Frames::MediaFrameFormat* *value);
	virtual STDMETHODIMP _get_DepthFormat(DepthMediaFrameFormat* *value);
	virtual STDMETHODIMP _get_Width(unsigned *value);
	virtual STDMETHODIMP _get_Height(unsigned *value);
};
template<typename X> struct IVideoMediaFrameFormat_adaptor : X {
	union {
		struct : property {
			ptr<DepthMediaFrameFormat> get() { DepthMediaFrameFormat* value; hrcheck(enc(&IVideoMediaFrameFormat_adaptor::DepthFormat)->_get_DepthFormat(&value)); return from_abi(value); }
			ptr<DepthMediaFrameFormat> operator()() { return get(); }
			operator ptr<DepthMediaFrameFormat> () { return get(); }
			ptr<DepthMediaFrameFormat> operator->() { return get(); }
		} DepthFormat;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoMediaFrameFormat_adaptor::Height)->_get_Height(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Height;
		struct : property {
			ptr<Frames::MediaFrameFormat> get() { Frames::MediaFrameFormat* value; hrcheck(enc(&IVideoMediaFrameFormat_adaptor::MediaFrameFormat)->_get_MediaFrameFormat(&value)); return from_abi(value); }
			ptr<Frames::MediaFrameFormat> operator()() { return get(); }
			operator ptr<Frames::MediaFrameFormat> () { return get(); }
			ptr<Frames::MediaFrameFormat> operator->() { return get(); }
		} MediaFrameFormat;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IVideoMediaFrameFormat_adaptor::Width)->_get_Width(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Width;
	};
	IVideoMediaFrameFormat_adaptor() {}
};
template<typename X> struct adapt<IVideoMediaFrameFormat, X> : Windows::Media::Capture::Frames::IVideoMediaFrameFormat_adaptor<X> { typedef adapt IVideoMediaFrameFormat; };
struct IVideoMediaFrameFormat : IVideoMediaFrameFormat_raw, generate<IVideoMediaFrameFormat> {};

// VideoMediaFrameFormat
template<typename X> struct statics<VideoMediaFrameFormat, X> : X {
	typedef typename X::root_type VideoMediaFrameFormat;
};
struct VideoMediaFrameFormat : generate<VideoMediaFrameFormat> {};

// IDepthMediaFrameFormat
struct IDepthMediaFrameFormat_raw : IInspectable {
	virtual STDMETHODIMP _get_VideoFormat(VideoMediaFrameFormat* *value);
	virtual STDMETHODIMP _get_DepthScaleInMeters(double *value);
};
template<typename X> struct IDepthMediaFrameFormat_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IDepthMediaFrameFormat_adaptor::DepthScaleInMeters)->_get_DepthScaleInMeters(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} DepthScaleInMeters;
		struct : property {
			ptr<VideoMediaFrameFormat> get() { VideoMediaFrameFormat* value; hrcheck(enc(&IDepthMediaFrameFormat_adaptor::VideoFormat)->_get_VideoFormat(&value)); return from_abi(value); }
			ptr<VideoMediaFrameFormat> operator()() { return get(); }
			operator ptr<VideoMediaFrameFormat> () { return get(); }
			ptr<VideoMediaFrameFormat> operator->() { return get(); }
		} VideoFormat;
	};
	IDepthMediaFrameFormat_adaptor() {}
};
template<typename X> struct adapt<IDepthMediaFrameFormat, X> : Windows::Media::Capture::Frames::IDepthMediaFrameFormat_adaptor<X> { typedef adapt IDepthMediaFrameFormat; };
struct IDepthMediaFrameFormat : IDepthMediaFrameFormat_raw, generate<IDepthMediaFrameFormat> {};

// DepthMediaFrameFormat
template<typename X> struct statics<DepthMediaFrameFormat, X> : X {
	typedef typename X::root_type DepthMediaFrameFormat;
};
struct DepthMediaFrameFormat : generate<DepthMediaFrameFormat> {};

// IBufferMediaFrame
struct IBufferMediaFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameReference(MediaFrameReference* *value);
	virtual STDMETHODIMP _get_Buffer(Storage::Streams::IBuffer* *value);
};
template<typename X> struct IBufferMediaFrame_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IBufferMediaFrame_adaptor::Buffer)->_get_Buffer(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Buffer;
		struct : property {
			ptr<MediaFrameReference> get() { MediaFrameReference* value; hrcheck(enc(&IBufferMediaFrame_adaptor::FrameReference)->_get_FrameReference(&value)); return from_abi(value); }
			ptr<MediaFrameReference> operator()() { return get(); }
			operator ptr<MediaFrameReference> () { return get(); }
			ptr<MediaFrameReference> operator->() { return get(); }
		} FrameReference;
	};
	IBufferMediaFrame_adaptor() {}
};
template<typename X> struct adapt<IBufferMediaFrame, X> : Windows::Media::Capture::Frames::IBufferMediaFrame_adaptor<X> { typedef adapt IBufferMediaFrame; };
struct IBufferMediaFrame : IBufferMediaFrame_raw, generate<IBufferMediaFrame> {};

// BufferMediaFrame
template<typename X> struct statics<BufferMediaFrame, X> : X {
	typedef typename X::root_type BufferMediaFrame;
};
struct BufferMediaFrame : generate<BufferMediaFrame> {};

// IVideoMediaFrame
struct IVideoMediaFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameReference(MediaFrameReference* *value);
	virtual STDMETHODIMP _get_VideoFormat(VideoMediaFrameFormat* *value);
	virtual STDMETHODIMP _get_SoftwareBitmap(Graphics::Imaging::SoftwareBitmap* *value);
	virtual STDMETHODIMP _get_Direct3DSurface(Graphics::DirectX::Direct3D11::IDirect3DSurface* *value);
	virtual STDMETHODIMP _get_CameraIntrinsics(Devices::Core::CameraIntrinsics* *value);
	virtual STDMETHODIMP _get_InfraredMediaFrame(Frames::InfraredMediaFrame* *value);
	virtual STDMETHODIMP _get_DepthMediaFrame(Frames::DepthMediaFrame* *value);
	virtual STDMETHODIMP _GetVideoFrame(VideoFrame* *value);
};
template<typename X> struct IVideoMediaFrame_adaptor : X {
	union {
		struct : property {
			ptr<Devices::Core::CameraIntrinsics> get() { Devices::Core::CameraIntrinsics* value; hrcheck(enc(&IVideoMediaFrame_adaptor::CameraIntrinsics)->_get_CameraIntrinsics(&value)); return from_abi(value); }
			ptr<Devices::Core::CameraIntrinsics> operator()() { return get(); }
			operator ptr<Devices::Core::CameraIntrinsics> () { return get(); }
			ptr<Devices::Core::CameraIntrinsics> operator->() { return get(); }
		} CameraIntrinsics;
		struct : property {
			ptr<Frames::DepthMediaFrame> get() { Frames::DepthMediaFrame* value; hrcheck(enc(&IVideoMediaFrame_adaptor::DepthMediaFrame)->_get_DepthMediaFrame(&value)); return from_abi(value); }
			ptr<Frames::DepthMediaFrame> operator()() { return get(); }
			operator ptr<Frames::DepthMediaFrame> () { return get(); }
			ptr<Frames::DepthMediaFrame> operator->() { return get(); }
		} DepthMediaFrame;
		struct : property {
			ptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> get() { Graphics::DirectX::Direct3D11::IDirect3DSurface* value; hrcheck(enc(&IVideoMediaFrame_adaptor::Direct3DSurface)->_get_Direct3DSurface(&value)); return from_abi(value); }
			ptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> operator()() { return get(); }
			operator ptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> () { return get(); }
			ptr<Graphics::DirectX::Direct3D11::IDirect3DSurface> operator->() { return get(); }
		} Direct3DSurface;
		struct : property {
			ptr<MediaFrameReference> get() { MediaFrameReference* value; hrcheck(enc(&IVideoMediaFrame_adaptor::FrameReference)->_get_FrameReference(&value)); return from_abi(value); }
			ptr<MediaFrameReference> operator()() { return get(); }
			operator ptr<MediaFrameReference> () { return get(); }
			ptr<MediaFrameReference> operator->() { return get(); }
		} FrameReference;
		struct : property {
			ptr<Frames::InfraredMediaFrame> get() { Frames::InfraredMediaFrame* value; hrcheck(enc(&IVideoMediaFrame_adaptor::InfraredMediaFrame)->_get_InfraredMediaFrame(&value)); return from_abi(value); }
			ptr<Frames::InfraredMediaFrame> operator()() { return get(); }
			operator ptr<Frames::InfraredMediaFrame> () { return get(); }
			ptr<Frames::InfraredMediaFrame> operator->() { return get(); }
		} InfraredMediaFrame;
		struct : property {
			ptr<Graphics::Imaging::SoftwareBitmap> get() { Graphics::Imaging::SoftwareBitmap* value; hrcheck(enc(&IVideoMediaFrame_adaptor::SoftwareBitmap)->_get_SoftwareBitmap(&value)); return from_abi(value); }
			ptr<Graphics::Imaging::SoftwareBitmap> operator()() { return get(); }
			operator ptr<Graphics::Imaging::SoftwareBitmap> () { return get(); }
			ptr<Graphics::Imaging::SoftwareBitmap> operator->() { return get(); }
		} SoftwareBitmap;
		struct : property {
			ptr<VideoMediaFrameFormat> get() { VideoMediaFrameFormat* value; hrcheck(enc(&IVideoMediaFrame_adaptor::VideoFormat)->_get_VideoFormat(&value)); return from_abi(value); }
			ptr<VideoMediaFrameFormat> operator()() { return get(); }
			operator ptr<VideoMediaFrameFormat> () { return get(); }
			ptr<VideoMediaFrameFormat> operator->() { return get(); }
		} VideoFormat;
	};
	ptr<VideoFrame> GetVideoFrame() { VideoFrame* value; hrcheck(X::get()->_GetVideoFrame(&value)); return from_abi(value); }
	IVideoMediaFrame_adaptor() {}
};
template<typename X> struct adapt<IVideoMediaFrame, X> : Windows::Media::Capture::Frames::IVideoMediaFrame_adaptor<X> { typedef adapt IVideoMediaFrame; };
struct IVideoMediaFrame : IVideoMediaFrame_raw, generate<IVideoMediaFrame> {};

// VideoMediaFrame
template<typename X> struct statics<VideoMediaFrame, X> : X {
	typedef typename X::root_type VideoMediaFrame;
};
struct VideoMediaFrame : generate<VideoMediaFrame> {};

// IAudioMediaFrame
struct IAudioMediaFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameReference(MediaFrameReference* *value);
	virtual STDMETHODIMP _get_AudioEncodingProperties(MediaProperties::AudioEncodingProperties* *value);
	virtual STDMETHODIMP _GetAudioFrame(AudioFrame* *value);
};
template<typename X> struct IAudioMediaFrame_adaptor : X {
	union {
		struct : property {
			ptr<MediaProperties::AudioEncodingProperties> get() { MediaProperties::AudioEncodingProperties* value; hrcheck(enc(&IAudioMediaFrame_adaptor::AudioEncodingProperties)->_get_AudioEncodingProperties(&value)); return from_abi(value); }
			ptr<MediaProperties::AudioEncodingProperties> operator()() { return get(); }
			operator ptr<MediaProperties::AudioEncodingProperties> () { return get(); }
			ptr<MediaProperties::AudioEncodingProperties> operator->() { return get(); }
		} AudioEncodingProperties;
		struct : property {
			ptr<MediaFrameReference> get() { MediaFrameReference* value; hrcheck(enc(&IAudioMediaFrame_adaptor::FrameReference)->_get_FrameReference(&value)); return from_abi(value); }
			ptr<MediaFrameReference> operator()() { return get(); }
			operator ptr<MediaFrameReference> () { return get(); }
			ptr<MediaFrameReference> operator->() { return get(); }
		} FrameReference;
	};
	ptr<AudioFrame> GetAudioFrame() { AudioFrame* value; hrcheck(X::get()->_GetAudioFrame(&value)); return from_abi(value); }
	IAudioMediaFrame_adaptor() {}
};
template<typename X> struct adapt<IAudioMediaFrame, X> : Windows::Media::Capture::Frames::IAudioMediaFrame_adaptor<X> { typedef adapt IAudioMediaFrame; };
struct IAudioMediaFrame : IAudioMediaFrame_raw, generate<IAudioMediaFrame> {};

// AudioMediaFrame
template<typename X> struct statics<AudioMediaFrame, X> : X {
	typedef typename X::root_type AudioMediaFrame;
};
struct AudioMediaFrame : generate<AudioMediaFrame> {};

// IInfraredMediaFrame
struct IInfraredMediaFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameReference(MediaFrameReference* *value);
	virtual STDMETHODIMP _get_VideoMediaFrame(Frames::VideoMediaFrame* *value);
	virtual STDMETHODIMP _get_IsIlluminated(bool *value);
};
template<typename X> struct IInfraredMediaFrame_adaptor : X {
	union {
		struct : property {
			ptr<MediaFrameReference> get() { MediaFrameReference* value; hrcheck(enc(&IInfraredMediaFrame_adaptor::FrameReference)->_get_FrameReference(&value)); return from_abi(value); }
			ptr<MediaFrameReference> operator()() { return get(); }
			operator ptr<MediaFrameReference> () { return get(); }
			ptr<MediaFrameReference> operator->() { return get(); }
		} FrameReference;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IInfraredMediaFrame_adaptor::IsIlluminated)->_get_IsIlluminated(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsIlluminated;
		struct : property {
			ptr<Frames::VideoMediaFrame> get() { Frames::VideoMediaFrame* value; hrcheck(enc(&IInfraredMediaFrame_adaptor::VideoMediaFrame)->_get_VideoMediaFrame(&value)); return from_abi(value); }
			ptr<Frames::VideoMediaFrame> operator()() { return get(); }
			operator ptr<Frames::VideoMediaFrame> () { return get(); }
			ptr<Frames::VideoMediaFrame> operator->() { return get(); }
		} VideoMediaFrame;
	};
	IInfraredMediaFrame_adaptor() {}
};
template<typename X> struct adapt<IInfraredMediaFrame, X> : Windows::Media::Capture::Frames::IInfraredMediaFrame_adaptor<X> { typedef adapt IInfraredMediaFrame; };
struct IInfraredMediaFrame : IInfraredMediaFrame_raw, generate<IInfraredMediaFrame> {};

// InfraredMediaFrame
template<typename X> struct statics<InfraredMediaFrame, X> : X {
	typedef typename X::root_type InfraredMediaFrame;
};
struct InfraredMediaFrame : generate<InfraredMediaFrame> {};

// IDepthMediaFrame2
struct IDepthMediaFrame2_raw : IInspectable {
	virtual STDMETHODIMP _get_MaxReliableDepth(unsigned *value);
	virtual STDMETHODIMP _get_MinReliableDepth(unsigned *value);
};
template<typename X> struct IDepthMediaFrame2_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IDepthMediaFrame2_adaptor::MaxReliableDepth)->_get_MaxReliableDepth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MaxReliableDepth;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IDepthMediaFrame2_adaptor::MinReliableDepth)->_get_MinReliableDepth(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} MinReliableDepth;
	};
	IDepthMediaFrame2_adaptor() {}
};
template<typename X> struct adapt<IDepthMediaFrame2, X> : Windows::Media::Capture::Frames::IDepthMediaFrame2_adaptor<X> { typedef adapt IDepthMediaFrame2; };
struct IDepthMediaFrame2 : IDepthMediaFrame2_raw, generate<IDepthMediaFrame2> {};

// IDepthMediaFrame
struct IDepthMediaFrame_raw : IInspectable {
	virtual STDMETHODIMP _get_FrameReference(MediaFrameReference* *value);
	virtual STDMETHODIMP _get_VideoMediaFrame(Frames::VideoMediaFrame* *value);
	virtual STDMETHODIMP _get_DepthFormat(DepthMediaFrameFormat* *value);
	virtual STDMETHODIMP _TryCreateCoordinateMapper(Devices::Core::CameraIntrinsics* cameraIntrinsics, Perception::Spatial::SpatialCoordinateSystem* coordinateSystem, Devices::Core::DepthCorrelatedCoordinateMapper* *value);
};
template<typename X> struct IDepthMediaFrame_adaptor : X {
	union {
		struct : property {
			ptr<DepthMediaFrameFormat> get() { DepthMediaFrameFormat* value; hrcheck(enc(&IDepthMediaFrame_adaptor::DepthFormat)->_get_DepthFormat(&value)); return from_abi(value); }
			ptr<DepthMediaFrameFormat> operator()() { return get(); }
			operator ptr<DepthMediaFrameFormat> () { return get(); }
			ptr<DepthMediaFrameFormat> operator->() { return get(); }
		} DepthFormat;
		struct : property {
			ptr<MediaFrameReference> get() { MediaFrameReference* value; hrcheck(enc(&IDepthMediaFrame_adaptor::FrameReference)->_get_FrameReference(&value)); return from_abi(value); }
			ptr<MediaFrameReference> operator()() { return get(); }
			operator ptr<MediaFrameReference> () { return get(); }
			ptr<MediaFrameReference> operator->() { return get(); }
		} FrameReference;
		struct : property {
			ptr<Frames::VideoMediaFrame> get() { Frames::VideoMediaFrame* value; hrcheck(enc(&IDepthMediaFrame_adaptor::VideoMediaFrame)->_get_VideoMediaFrame(&value)); return from_abi(value); }
			ptr<Frames::VideoMediaFrame> operator()() { return get(); }
			operator ptr<Frames::VideoMediaFrame> () { return get(); }
			ptr<Frames::VideoMediaFrame> operator->() { return get(); }
		} VideoMediaFrame;
	};
	ptr<Devices::Core::DepthCorrelatedCoordinateMapper> TryCreateCoordinateMapper(pptr<Devices::Core::CameraIntrinsics> cameraIntrinsics, pptr<Perception::Spatial::SpatialCoordinateSystem> coordinateSystem) { Devices::Core::DepthCorrelatedCoordinateMapper* value; hrcheck(X::get()->_TryCreateCoordinateMapper(cameraIntrinsics, coordinateSystem, &value)); return from_abi(value); }
	IDepthMediaFrame_adaptor() {}
};
template<typename X> struct adapt<IDepthMediaFrame, X> : Windows::Media::Capture::Frames::IDepthMediaFrame_adaptor<X> { typedef adapt IDepthMediaFrame; };
struct IDepthMediaFrame : IDepthMediaFrame_raw, generate<IDepthMediaFrame> {};

// DepthMediaFrame
template<typename X> struct statics<DepthMediaFrame, X> : X {
	typedef typename X::root_type DepthMediaFrame;
};
struct DepthMediaFrame : generate<DepthMediaFrame> {};
}}}}
} // namespace iso_winrt
