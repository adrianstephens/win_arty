#pragma once
// generated by isopod tools
// namespaces:
// Windows.Graphics.Display

#include "Windows.Graphics.Display.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IRandomAccessStream;
}}}

// defs

template<> struct def<Windows::Graphics::Display::DisplayOrientations> : enum_type<unsigned> {};
template<> struct def<Windows::Graphics::Display::IDisplayInformationStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::ResolutionScale> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::IDisplayInformation5> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IDisplayInformation4> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IDisplayInformation3> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IDisplayInformation> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IDisplayInformation2> : interface_type<Windows::Graphics::Display::IDisplayInformation> {};
template<> struct def<Windows::Graphics::Display::DisplayInformation> : class_type<Platform::Object, Windows::Graphics::Display::IDisplayInformation, Windows::Graphics::Display::IDisplayInformation2, Windows::Graphics::Display::IDisplayInformation3, Windows::Graphics::Display::IDisplayInformation4, Windows::Graphics::Display::IDisplayInformation5> {};
template<> struct def<Windows::Graphics::Display::AdvancedColorKind> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::HdrMetadataFormat> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::IAdvancedColorInfo> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::AdvancedColorInfo> : class_type<Platform::Object, Windows::Graphics::Display::IAdvancedColorInfo> {};
template<> struct def<Windows::Graphics::Display::DisplayPropertiesEventHandler> : delegate_type {};
template<> struct def<Windows::Graphics::Display::IDisplayPropertiesStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::DisplayProperties> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::Graphics::Display::DisplayBrightnessScenario> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::DisplayBrightnessOverrideOptions> : enum_type<unsigned> {};
template<> struct def<Windows::Graphics::Display::IBrightnessOverrideStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IBrightnessOverride> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::BrightnessOverride> : class_type<Platform::Object, Windows::Graphics::Display::IBrightnessOverride> {};
template<> struct def<Windows::Graphics::Display::NitRange> : value_type<float, float, float> {};
template<> struct def<Windows::Graphics::Display::DisplayColorOverrideScenario> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::DisplayBrightnessOverrideScenario> : enum_type<int> {};
template<> struct def<Windows::Graphics::Display::IBrightnessOverrideSettingsStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IBrightnessOverrideSettings> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::BrightnessOverrideSettings> : class_type<Platform::Object, Windows::Graphics::Display::IBrightnessOverrideSettings> {};
template<> struct def<Windows::Graphics::Display::IColorOverrideSettingsStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IColorOverrideSettings> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::ColorOverrideSettings> : class_type<Platform::Object, Windows::Graphics::Display::IColorOverrideSettings> {};
template<> struct def<Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilitiesChangedEventArgs> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilities> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::DisplayEnhancementOverrideCapabilities> : class_type<Platform::Object, Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilities> {};
template<> struct def<Windows::Graphics::Display::DisplayEnhancementOverrideCapabilitiesChangedEventArgs> : class_type<Platform::Object, Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilitiesChangedEventArgs> {};
template<> struct def<Windows::Graphics::Display::IDisplayEnhancementOverrideStatics> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::IDisplayEnhancementOverride> : interface_type<> {};
template<> struct def<Windows::Graphics::Display::DisplayEnhancementOverride> : class_type<Platform::Object, Windows::Graphics::Display::IDisplayEnhancementOverride> {};

// uuids

template<> struct uuid<Windows::Graphics::Display::IDisplayInformationStatics> { define_guid(0xC6A02A6C, 0xD452, 0x44DC, 0xBA, 0x7, 0x96, 0xF3, 0xC6, 0xAD, 0xF9, 0xD1);};
template<> struct uuid<Windows::Graphics::Display::IDisplayInformation5> { define_guid(0x3A5442DC, 0x2CDE, 0x4A8D, 0x80, 0xD1, 0x21, 0xDC, 0x5A, 0xDC, 0xC1, 0xAA);};
template<> struct uuid<Windows::Graphics::Display::IDisplayInformation4> { define_guid(0xC972CE2F, 0x1242, 0x46BE, 0xB5, 0x36, 0xE1, 0xAA, 0xFE, 0x9E, 0x7A, 0xCF);};
template<> struct uuid<Windows::Graphics::Display::IDisplayInformation3> { define_guid(0xDB15011D, 0xF09, 0x4466, 0x8F, 0xF3, 0x11, 0xDE, 0x9A, 0x3C, 0x92, 0x9A);};
template<> struct uuid<Windows::Graphics::Display::IDisplayInformation> { define_guid(0xBED112AE, 0xADC3, 0x4DC9, 0xAE, 0x65, 0x85, 0x1F, 0x4D, 0x7D, 0x47, 0x99);};
template<> struct uuid<Windows::Graphics::Display::IDisplayInformation2> { define_guid(0x4DCD0021, 0xFAD1, 0x4B8E, 0x8E, 0xDF, 0x77, 0x58, 0x87, 0xB8, 0xBF, 0x19);};
template<> struct uuid<Windows::Graphics::Display::IAdvancedColorInfo> { define_guid(0x8797DCFB, 0xB229, 0x4081, 0xAE, 0x9A, 0x2C, 0xC8, 0x5E, 0x34, 0xAD, 0x6A);};
template<> struct uuid<Windows::Graphics::Display::DisplayPropertiesEventHandler> { define_guid(0xDBDD8B01, 0xF1A1, 0x46D1, 0x9E, 0xE3, 0x54, 0x3B, 0xCC, 0x99, 0x59, 0x80);};
template<> struct uuid<Windows::Graphics::Display::IDisplayPropertiesStatics> { define_guid(0x6937ED8D, 0x30EA, 0x4DED, 0x82, 0x71, 0x45, 0x53, 0xFF, 0x2, 0xF6, 0x8A);};
template<> struct uuid<Windows::Graphics::Display::IBrightnessOverrideStatics> { define_guid(0x3A7B9ED, 0xE1F1, 0x4A68, 0xA1, 0x1F, 0x94, 0x6A, 0xD8, 0xCE, 0x53, 0x93);};
template<> struct uuid<Windows::Graphics::Display::IBrightnessOverride> { define_guid(0x96C9621A, 0xC143, 0x4392, 0xBE, 0xDD, 0x4A, 0x7E, 0x95, 0x74, 0xC8, 0xFD);};
template<> struct uuid<Windows::Graphics::Display::IBrightnessOverrideSettingsStatics> { define_guid(0xD487DC90, 0x6F74, 0x440B, 0xB3, 0x83, 0x5F, 0xE9, 0x6C, 0xF0, 0xB, 0xF);};
template<> struct uuid<Windows::Graphics::Display::IBrightnessOverrideSettings> { define_guid(0xD112AB2A, 0x7604, 0x4DBA, 0xBC, 0xF8, 0x4B, 0x6F, 0x49, 0x50, 0x2C, 0xB0);};
template<> struct uuid<Windows::Graphics::Display::IColorOverrideSettingsStatics> { define_guid(0xB068E05F, 0xC41F, 0x4AC9, 0xAF, 0xAB, 0x82, 0x7A, 0xB6, 0x24, 0x8F, 0x9A);};
template<> struct uuid<Windows::Graphics::Display::IColorOverrideSettings> { define_guid(0xFBEFA134, 0x4A81, 0x4C4D, 0xA5, 0xB6, 0x7D, 0x1B, 0x5C, 0x4B, 0xD0, 0xB);};
template<> struct uuid<Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilitiesChangedEventArgs> { define_guid(0xDB61E664, 0x15FA, 0x49DA, 0x8B, 0x77, 0x7, 0xDB, 0xD2, 0xAF, 0x58, 0x5D);};
template<> struct uuid<Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilities> { define_guid(0x457060DE, 0xEE5A, 0x47B7, 0x99, 0x18, 0x1E, 0x51, 0xE8, 0x12, 0xCC, 0xC8);};
template<> struct uuid<Windows::Graphics::Display::IDisplayEnhancementOverrideStatics> { define_guid(0xCF5B7EC1, 0x9791, 0x4453, 0xB0, 0x13, 0x29, 0xB6, 0xF7, 0x78, 0xE5, 0x19);};
template<> struct uuid<Windows::Graphics::Display::IDisplayEnhancementOverride> { define_guid(0x429594CF, 0xD97A, 0x4B02, 0xA4, 0x28, 0x5C, 0x42, 0x92, 0xF7, 0xF5, 0x22);};

// types

namespace Windows { namespace Graphics { namespace Display {

// IDisplayInformationStatics
struct IDisplayInformationStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(DisplayInformation* *current);
	virtual STDMETHODIMP _get_AutoRotationPreferences(DisplayOrientations *value);
	virtual STDMETHODIMP _put_AutoRotationPreferences(DisplayOrientations value);
	virtual STDMETHODIMP _add_DisplayContentsInvalidated(Foundation::TypedEventHandler<DisplayInformation*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DisplayContentsInvalidated(Foundation::EventRegistrationToken token);
};

// IDisplayInformation5
struct IDisplayInformation5_raw : IInspectable {
	virtual STDMETHODIMP _GetAdvancedColorInfo(AdvancedColorInfo* *value);
	virtual STDMETHODIMP _add_AdvancedColorInfoChanged(Foundation::TypedEventHandler<DisplayInformation*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_AdvancedColorInfoChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IDisplayInformation5_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayInformation>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayInformation5_adaptor::AdvancedColorInfoChanged)->_add_AdvancedColorInfoChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayInformation5_adaptor::AdvancedColorInfoChanged)->_remove_AdvancedColorInfoChanged(token)); }
		} AdvancedColorInfoChanged;
	};
	ptr<AdvancedColorInfo> GetAdvancedColorInfo() { AdvancedColorInfo* value; hrcheck(X::get()->_GetAdvancedColorInfo(&value)); return from_abi(value); }
	IDisplayInformation5_adaptor() {}
};
template<typename X> struct adapt<IDisplayInformation5, X> : Windows::Graphics::Display::IDisplayInformation5_adaptor<X> { typedef adapt IDisplayInformation5; };
struct IDisplayInformation5 : IDisplayInformation5_raw, generate<IDisplayInformation5> {};

// IDisplayInformation4
struct IDisplayInformation4_raw : IInspectable {
	virtual STDMETHODIMP _get_ScreenWidthInRawPixels(unsigned *value);
	virtual STDMETHODIMP _get_ScreenHeightInRawPixels(unsigned *value);
};
template<typename X> struct IDisplayInformation4_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IDisplayInformation4_adaptor::ScreenHeightInRawPixels)->_get_ScreenHeightInRawPixels(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ScreenHeightInRawPixels;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IDisplayInformation4_adaptor::ScreenWidthInRawPixels)->_get_ScreenWidthInRawPixels(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ScreenWidthInRawPixels;
	};
	IDisplayInformation4_adaptor() {}
};
template<typename X> struct adapt<IDisplayInformation4, X> : Windows::Graphics::Display::IDisplayInformation4_adaptor<X> { typedef adapt IDisplayInformation4; };
struct IDisplayInformation4 : IDisplayInformation4_raw, generate<IDisplayInformation4> {};

// IDisplayInformation3
struct IDisplayInformation3_raw : IInspectable {
	virtual STDMETHODIMP _get_DiagonalSizeInInches(Foundation::IReference<double>* *value);
};
template<typename X> struct IDisplayInformation3_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<double>> get() { Foundation::IReference<double>* value; hrcheck(enc(&IDisplayInformation3_adaptor::DiagonalSizeInInches)->_get_DiagonalSizeInInches(&value)); return from_abi(value); }
			ptr<Foundation::IReference<double>> operator()() { return get(); }
			operator ptr<Foundation::IReference<double>> () { return get(); }
			ptr<Foundation::IReference<double>> operator->() { return get(); }
		} DiagonalSizeInInches;
	};
	IDisplayInformation3_adaptor() {}
};
template<typename X> struct adapt<IDisplayInformation3, X> : Windows::Graphics::Display::IDisplayInformation3_adaptor<X> { typedef adapt IDisplayInformation3; };
struct IDisplayInformation3 : IDisplayInformation3_raw, generate<IDisplayInformation3> {};

// IDisplayInformation
struct IDisplayInformation_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentOrientation(DisplayOrientations *value);
	virtual STDMETHODIMP _get_NativeOrientation(DisplayOrientations *value);
	virtual STDMETHODIMP _add_OrientationChanged(Foundation::TypedEventHandler<DisplayInformation*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_OrientationChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_ResolutionScale(Display::ResolutionScale *value);
	virtual STDMETHODIMP _get_LogicalDpi(float *value);
	virtual STDMETHODIMP _get_RawDpiX(float *value);
	virtual STDMETHODIMP _get_RawDpiY(float *value);
	virtual STDMETHODIMP _add_DpiChanged(Foundation::TypedEventHandler<DisplayInformation*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DpiChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_StereoEnabled(bool *value);
	virtual STDMETHODIMP _add_StereoEnabledChanged(Foundation::TypedEventHandler<DisplayInformation*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StereoEnabledChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetColorProfileAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *asyncInfo);
	virtual STDMETHODIMP _add_ColorProfileChanged(Foundation::TypedEventHandler<DisplayInformation*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ColorProfileChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IDisplayInformation_adaptor : X {
	union {
		struct : property {
			DisplayOrientations get() { DisplayOrientations value; hrcheck(enc(&IDisplayInformation_adaptor::CurrentOrientation)->_get_CurrentOrientation(&value)); return value; }
			DisplayOrientations operator()() { return get(); }
			operator DisplayOrientations () { return get(); }
		} CurrentOrientation;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayInformation_adaptor::LogicalDpi)->_get_LogicalDpi(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} LogicalDpi;
		struct : property {
			DisplayOrientations get() { DisplayOrientations value; hrcheck(enc(&IDisplayInformation_adaptor::NativeOrientation)->_get_NativeOrientation(&value)); return value; }
			DisplayOrientations operator()() { return get(); }
			operator DisplayOrientations () { return get(); }
		} NativeOrientation;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayInformation_adaptor::RawDpiX)->_get_RawDpiX(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} RawDpiX;
		struct : property {
			float get() { float value; hrcheck(enc(&IDisplayInformation_adaptor::RawDpiY)->_get_RawDpiY(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} RawDpiY;
		struct : property {
			Display::ResolutionScale get() { Display::ResolutionScale value; hrcheck(enc(&IDisplayInformation_adaptor::ResolutionScale)->_get_ResolutionScale(&value)); return value; }
			Display::ResolutionScale operator()() { return get(); }
			operator Display::ResolutionScale () { return get(); }
		} ResolutionScale;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDisplayInformation_adaptor::StereoEnabled)->_get_StereoEnabled(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} StereoEnabled;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayInformation>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayInformation_adaptor::ColorProfileChanged)->_add_ColorProfileChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayInformation_adaptor::ColorProfileChanged)->_remove_ColorProfileChanged(token)); }
		} ColorProfileChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayInformation>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayInformation_adaptor::DpiChanged)->_add_DpiChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayInformation_adaptor::DpiChanged)->_remove_DpiChanged(token)); }
		} DpiChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayInformation>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayInformation_adaptor::OrientationChanged)->_add_OrientationChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayInformation_adaptor::OrientationChanged)->_remove_OrientationChanged(token)); }
		} OrientationChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayInformation>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayInformation_adaptor::StereoEnabledChanged)->_add_StereoEnabledChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayInformation_adaptor::StereoEnabledChanged)->_remove_StereoEnabledChanged(token)); }
		} StereoEnabledChanged;
	};
	ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStream>>> GetColorProfileAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* asyncInfo; hrcheck(X::get()->_GetColorProfileAsync(&asyncInfo)); return from_abi(asyncInfo); }
	IDisplayInformation_adaptor() {}
};
template<typename X> struct adapt<IDisplayInformation, X> : Windows::Graphics::Display::IDisplayInformation_adaptor<X> { typedef adapt IDisplayInformation; };
struct IDisplayInformation : IDisplayInformation_raw, generate<IDisplayInformation> {};

// IDisplayInformation2
struct IDisplayInformation2_raw : IInspectable {
	virtual STDMETHODIMP _get_RawPixelsPerViewPixel(double *value);
};
template<typename X> struct IDisplayInformation2_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IDisplayInformation2_adaptor::RawPixelsPerViewPixel)->_get_RawPixelsPerViewPixel(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} RawPixelsPerViewPixel;
	};
	IDisplayInformation2_adaptor() {}
};
template<typename X> struct adapt<IDisplayInformation2, X> : Windows::Graphics::Display::IDisplayInformation2_adaptor<X> { typedef adapt IDisplayInformation2; };
struct IDisplayInformation2 : IDisplayInformation2_raw, generate<IDisplayInformation2> {};

// DisplayInformation
template<typename> struct DisplayInformation_statics {
	static struct _AutoRotationPreferences : property {
		DisplayOrientations get() { DisplayOrientations value; hrcheck(get_activation_factory<DisplayInformation, IDisplayInformationStatics>()->_get_AutoRotationPreferences(&value)); return value; }
		DisplayOrientations operator()() { return get(); }
		operator DisplayOrientations () { return get(); }
		void put(DisplayOrientations value) { hrcheck(get_activation_factory<DisplayInformation, IDisplayInformationStatics>()->_put_AutoRotationPreferences(value)); }
		void operator=(DisplayOrientations value) { put(value); }
		void operator()(DisplayOrientations value) { put(value); }
	} AutoRotationPreferences;
	static struct _DisplayContentsInvalidated : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayInformation>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<DisplayInformation, IDisplayInformationStatics>()->_add_DisplayContentsInvalidated(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<DisplayInformation, IDisplayInformationStatics>()->_remove_DisplayContentsInvalidated(token)); }
	} DisplayContentsInvalidated;
	static ptr<DisplayInformation> GetForCurrentView() { DisplayInformation* current; hrcheck(get_activation_factory<DisplayInformation, IDisplayInformationStatics>()->_GetForCurrentView(&current)); return from_abi(current); }
};
template<typename X> typename DisplayInformation_statics<X>::_AutoRotationPreferences DisplayInformation_statics<X>::AutoRotationPreferences;
template<typename X> typename DisplayInformation_statics<X>::_DisplayContentsInvalidated DisplayInformation_statics<X>::DisplayContentsInvalidated;

template<typename X> struct statics<DisplayInformation, X> : X, Windows::Graphics::Display::DisplayInformation_statics<void> {
	typedef typename X::root_type DisplayInformation;
};
struct DisplayInformation : generate<DisplayInformation> {};

// IAdvancedColorInfo
struct IAdvancedColorInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_CurrentAdvancedColorKind(AdvancedColorKind *value);
	virtual STDMETHODIMP _get_RedPrimary(Foundation::Point *value);
	virtual STDMETHODIMP _get_GreenPrimary(Foundation::Point *value);
	virtual STDMETHODIMP _get_BluePrimary(Foundation::Point *value);
	virtual STDMETHODIMP _get_WhitePoint(Foundation::Point *value);
	virtual STDMETHODIMP _get_MaxLuminanceInNits(float *value);
	virtual STDMETHODIMP _get_MinLuminanceInNits(float *value);
	virtual STDMETHODIMP _get_MaxAverageFullFrameLuminanceInNits(float *value);
	virtual STDMETHODIMP _get_SdrWhiteLevelInNits(float *value);
	virtual STDMETHODIMP _IsHdrMetadataFormatCurrentlySupported(HdrMetadataFormat format, bool *result);
	virtual STDMETHODIMP _IsAdvancedColorKindAvailable(AdvancedColorKind kind, bool *result);
};
template<typename X> struct IAdvancedColorInfo_adaptor : X {
	union {
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IAdvancedColorInfo_adaptor::BluePrimary)->_get_BluePrimary(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} BluePrimary;
		struct : property {
			AdvancedColorKind get() { AdvancedColorKind value; hrcheck(enc(&IAdvancedColorInfo_adaptor::CurrentAdvancedColorKind)->_get_CurrentAdvancedColorKind(&value)); return value; }
			AdvancedColorKind operator()() { return get(); }
			operator AdvancedColorKind () { return get(); }
		} CurrentAdvancedColorKind;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IAdvancedColorInfo_adaptor::GreenPrimary)->_get_GreenPrimary(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} GreenPrimary;
		struct : property {
			float get() { float value; hrcheck(enc(&IAdvancedColorInfo_adaptor::MaxAverageFullFrameLuminanceInNits)->_get_MaxAverageFullFrameLuminanceInNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MaxAverageFullFrameLuminanceInNits;
		struct : property {
			float get() { float value; hrcheck(enc(&IAdvancedColorInfo_adaptor::MaxLuminanceInNits)->_get_MaxLuminanceInNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MaxLuminanceInNits;
		struct : property {
			float get() { float value; hrcheck(enc(&IAdvancedColorInfo_adaptor::MinLuminanceInNits)->_get_MinLuminanceInNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} MinLuminanceInNits;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IAdvancedColorInfo_adaptor::RedPrimary)->_get_RedPrimary(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} RedPrimary;
		struct : property {
			float get() { float value; hrcheck(enc(&IAdvancedColorInfo_adaptor::SdrWhiteLevelInNits)->_get_SdrWhiteLevelInNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} SdrWhiteLevelInNits;
		struct : property {
			Foundation::Point get() { Foundation::Point value; hrcheck(enc(&IAdvancedColorInfo_adaptor::WhitePoint)->_get_WhitePoint(&value)); return value; }
			Foundation::Point operator()() { return get(); }
			operator Foundation::Point () { return get(); }
		} WhitePoint;
	};
	bool IsHdrMetadataFormatCurrentlySupported(HdrMetadataFormat format) { bool result; hrcheck(X::get()->_IsHdrMetadataFormatCurrentlySupported(format, &result)); return result; }
	bool IsAdvancedColorKindAvailable(AdvancedColorKind kind) { bool result; hrcheck(X::get()->_IsAdvancedColorKindAvailable(kind, &result)); return result; }
	IAdvancedColorInfo_adaptor() {}
};
template<typename X> struct adapt<IAdvancedColorInfo, X> : Windows::Graphics::Display::IAdvancedColorInfo_adaptor<X> { typedef adapt IAdvancedColorInfo; };
struct IAdvancedColorInfo : IAdvancedColorInfo_raw, generate<IAdvancedColorInfo> {};

// AdvancedColorInfo
template<typename X> struct statics<AdvancedColorInfo, X> : X {
	typedef typename X::root_type AdvancedColorInfo;
};
struct AdvancedColorInfo : generate<AdvancedColorInfo> {};

// DisplayPropertiesEventHandler
struct DisplayPropertiesEventHandler : IUnknown {
	virtual STDMETHODIMP _Invoke(IInspectable* sender) = 0;
};

// IDisplayPropertiesStatics
struct IDisplayPropertiesStatics : IInspectable {
	virtual STDMETHODIMP _get_CurrentOrientation(DisplayOrientations *value);
	virtual STDMETHODIMP _get_NativeOrientation(DisplayOrientations *value);
	virtual STDMETHODIMP _get_AutoRotationPreferences(DisplayOrientations *value);
	virtual STDMETHODIMP _put_AutoRotationPreferences(DisplayOrientations value);
	virtual STDMETHODIMP _add_OrientationChanged(DisplayPropertiesEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_OrientationChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_ResolutionScale(Display::ResolutionScale *value);
	virtual STDMETHODIMP _get_LogicalDpi(float *value);
	virtual STDMETHODIMP _add_LogicalDpiChanged(DisplayPropertiesEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_LogicalDpiChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_StereoEnabled(bool *value);
	virtual STDMETHODIMP _add_StereoEnabledChanged(DisplayPropertiesEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_StereoEnabledChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _GetColorProfileAsync(Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* *asyncInfo);
	virtual STDMETHODIMP _add_ColorProfileChanged(DisplayPropertiesEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ColorProfileChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DisplayContentsInvalidated(DisplayPropertiesEventHandler* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DisplayContentsInvalidated(Foundation::EventRegistrationToken token);
};

// DisplayProperties
template<typename> struct DisplayProperties_statics {
	static struct _AutoRotationPreferences : property {
		DisplayOrientations get() { DisplayOrientations value; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_get_AutoRotationPreferences(&value)); return value; }
		DisplayOrientations operator()() { return get(); }
		operator DisplayOrientations () { return get(); }
		void put(DisplayOrientations value) { hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_put_AutoRotationPreferences(value)); }
		void operator=(DisplayOrientations value) { put(value); }
		void operator()(DisplayOrientations value) { put(value); }
	} AutoRotationPreferences;
	static struct _CurrentOrientation : property {
		DisplayOrientations get() { DisplayOrientations value; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_get_CurrentOrientation(&value)); return value; }
		DisplayOrientations operator()() { return get(); }
		operator DisplayOrientations () { return get(); }
	} CurrentOrientation;
	static struct _LogicalDpi : property {
		float get() { float value; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_get_LogicalDpi(&value)); return value; }
		float operator()() { return get(); }
		operator float () { return get(); }
	} LogicalDpi;
	static struct _NativeOrientation : property {
		DisplayOrientations get() { DisplayOrientations value; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_get_NativeOrientation(&value)); return value; }
		DisplayOrientations operator()() { return get(); }
		operator DisplayOrientations () { return get(); }
	} NativeOrientation;
	static struct _ResolutionScale : property {
		Display::ResolutionScale get() { Display::ResolutionScale value; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_get_ResolutionScale(&value)); return value; }
		Display::ResolutionScale operator()() { return get(); }
		operator Display::ResolutionScale () { return get(); }
	} ResolutionScale;
	static struct _StereoEnabled : property {
		bool get() { bool value; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_get_StereoEnabled(&value)); return value; }
		bool operator()() { return get(); }
		operator bool () { return get(); }
	} StereoEnabled;
	static struct _ColorProfileChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<DisplayPropertiesEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_add_ColorProfileChanged(handler, &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_remove_ColorProfileChanged(token)); }
	} ColorProfileChanged;
	static struct _DisplayContentsInvalidated : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<DisplayPropertiesEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_add_DisplayContentsInvalidated(handler, &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_remove_DisplayContentsInvalidated(token)); }
	} DisplayContentsInvalidated;
	static struct _LogicalDpiChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<DisplayPropertiesEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_add_LogicalDpiChanged(handler, &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_remove_LogicalDpiChanged(token)); }
	} LogicalDpiChanged;
	static struct _OrientationChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<DisplayPropertiesEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_add_OrientationChanged(handler, &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_remove_OrientationChanged(token)); }
	} OrientationChanged;
	static struct _StereoEnabledChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<DisplayPropertiesEventHandler> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_add_StereoEnabledChanged(handler, &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_remove_StereoEnabledChanged(token)); }
	} StereoEnabledChanged;
	static ptr<Foundation::IAsyncOperation<ptr<Storage::Streams::IRandomAccessStream>>> GetColorProfileAsync() { Foundation::IAsyncOperation<Storage::Streams::IRandomAccessStream*>* asyncInfo; hrcheck(get_activation_factory<DisplayProperties, IDisplayPropertiesStatics>()->_GetColorProfileAsync(&asyncInfo)); return from_abi(asyncInfo); }
};
template<typename X> typename DisplayProperties_statics<X>::_AutoRotationPreferences DisplayProperties_statics<X>::AutoRotationPreferences;
template<typename X> typename DisplayProperties_statics<X>::_CurrentOrientation DisplayProperties_statics<X>::CurrentOrientation;
template<typename X> typename DisplayProperties_statics<X>::_LogicalDpi DisplayProperties_statics<X>::LogicalDpi;
template<typename X> typename DisplayProperties_statics<X>::_NativeOrientation DisplayProperties_statics<X>::NativeOrientation;
template<typename X> typename DisplayProperties_statics<X>::_ResolutionScale DisplayProperties_statics<X>::ResolutionScale;
template<typename X> typename DisplayProperties_statics<X>::_StereoEnabled DisplayProperties_statics<X>::StereoEnabled;
template<typename X> typename DisplayProperties_statics<X>::_ColorProfileChanged DisplayProperties_statics<X>::ColorProfileChanged;
template<typename X> typename DisplayProperties_statics<X>::_DisplayContentsInvalidated DisplayProperties_statics<X>::DisplayContentsInvalidated;
template<typename X> typename DisplayProperties_statics<X>::_LogicalDpiChanged DisplayProperties_statics<X>::LogicalDpiChanged;
template<typename X> typename DisplayProperties_statics<X>::_OrientationChanged DisplayProperties_statics<X>::OrientationChanged;
template<typename X> typename DisplayProperties_statics<X>::_StereoEnabledChanged DisplayProperties_statics<X>::StereoEnabledChanged;

template<typename X> struct statics<DisplayProperties, X> : X, Windows::Graphics::Display::DisplayProperties_statics<void> {
	typedef typename X::root_type DisplayProperties;
};
struct DisplayProperties : generate<DisplayProperties> {};

// IBrightnessOverrideStatics
struct IBrightnessOverrideStatics : IInspectable {
	virtual STDMETHODIMP _GetDefaultForSystem(BrightnessOverride* *value);
	virtual STDMETHODIMP _GetForCurrentView(BrightnessOverride* *value);
	virtual STDMETHODIMP _SaveForSystemAsync(BrightnessOverride* value, Foundation::IAsyncOperation<bool>* *operation);
};

// IBrightnessOverride
struct IBrightnessOverride_raw : IInspectable {
	virtual STDMETHODIMP _get_IsSupported(bool *value);
	virtual STDMETHODIMP _get_IsOverrideActive(bool *value);
	virtual STDMETHODIMP _get_BrightnessLevel(double *level);
	virtual STDMETHODIMP _SetBrightnessLevel(double brightnessLevel, DisplayBrightnessOverrideOptions options);
	virtual STDMETHODIMP _SetBrightnessScenario(DisplayBrightnessScenario scenario, DisplayBrightnessOverrideOptions options);
	virtual STDMETHODIMP _GetLevelForScenario(DisplayBrightnessScenario scenario, double *brightnessLevel);
	virtual STDMETHODIMP _StartOverride();
	virtual STDMETHODIMP _StopOverride();
	virtual STDMETHODIMP _add_IsSupportedChanged(Foundation::TypedEventHandler<BrightnessOverride*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsSupportedChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_IsOverrideActiveChanged(Foundation::TypedEventHandler<BrightnessOverride*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsOverrideActiveChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_BrightnessLevelChanged(Foundation::TypedEventHandler<BrightnessOverride*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BrightnessLevelChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IBrightnessOverride_adaptor : X {
	union {
		struct : property {
			double get() { double level; hrcheck(enc(&IBrightnessOverride_adaptor::BrightnessLevel)->_get_BrightnessLevel(&level)); return level; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} BrightnessLevel;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBrightnessOverride_adaptor::IsOverrideActive)->_get_IsOverrideActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOverrideActive;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IBrightnessOverride_adaptor::IsSupported)->_get_IsSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsSupported;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BrightnessOverride>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBrightnessOverride_adaptor::BrightnessLevelChanged)->_add_BrightnessLevelChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBrightnessOverride_adaptor::BrightnessLevelChanged)->_remove_BrightnessLevelChanged(token)); }
		} BrightnessLevelChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BrightnessOverride>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBrightnessOverride_adaptor::IsOverrideActiveChanged)->_add_IsOverrideActiveChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBrightnessOverride_adaptor::IsOverrideActiveChanged)->_remove_IsOverrideActiveChanged(token)); }
		} IsOverrideActiveChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<BrightnessOverride>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IBrightnessOverride_adaptor::IsSupportedChanged)->_add_IsSupportedChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IBrightnessOverride_adaptor::IsSupportedChanged)->_remove_IsSupportedChanged(token)); }
		} IsSupportedChanged;
	};
	void SetBrightnessLevel(double brightnessLevel, DisplayBrightnessOverrideOptions options) { hrcheck(X::get()->_SetBrightnessLevel(brightnessLevel, options)); }
	void SetBrightnessScenario(DisplayBrightnessScenario scenario, DisplayBrightnessOverrideOptions options) { hrcheck(X::get()->_SetBrightnessScenario(scenario, options)); }
	double GetLevelForScenario(DisplayBrightnessScenario scenario) { double brightnessLevel; hrcheck(X::get()->_GetLevelForScenario(scenario, &brightnessLevel)); return brightnessLevel; }
	void StartOverride() { hrcheck(X::get()->_StartOverride()); }
	void StopOverride() { hrcheck(X::get()->_StopOverride()); }
	IBrightnessOverride_adaptor() {}
};
template<typename X> struct adapt<IBrightnessOverride, X> : Windows::Graphics::Display::IBrightnessOverride_adaptor<X> { typedef adapt IBrightnessOverride; };
struct IBrightnessOverride : IBrightnessOverride_raw, generate<IBrightnessOverride> {};

// BrightnessOverride
template<typename> struct BrightnessOverride_statics {
	static ptr<BrightnessOverride> GetDefaultForSystem() { BrightnessOverride* value; hrcheck(get_activation_factory<BrightnessOverride, IBrightnessOverrideStatics>()->_GetDefaultForSystem(&value)); return from_abi(value); }
	static ptr<BrightnessOverride> GetForCurrentView() { BrightnessOverride* value; hrcheck(get_activation_factory<BrightnessOverride, IBrightnessOverrideStatics>()->_GetForCurrentView(&value)); return from_abi(value); }
	static ptr<Foundation::IAsyncOperation<bool>> SaveForSystemAsync(pptr<BrightnessOverride> value) { Foundation::IAsyncOperation<bool>* operation; hrcheck(get_activation_factory<BrightnessOverride, IBrightnessOverrideStatics>()->_SaveForSystemAsync(value, &operation)); return from_abi(operation); }
};

template<typename X> struct statics<BrightnessOverride, X> : X, Windows::Graphics::Display::BrightnessOverride_statics<void> {
	typedef typename X::root_type BrightnessOverride;
};
struct BrightnessOverride : generate<BrightnessOverride> {};

// IBrightnessOverrideSettingsStatics
struct IBrightnessOverrideSettingsStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromLevel(double level, BrightnessOverrideSettings* *result);
	virtual STDMETHODIMP _CreateFromNits(float nits, BrightnessOverrideSettings* *result);
	virtual STDMETHODIMP _CreateFromDisplayBrightnessOverrideScenario(DisplayBrightnessOverrideScenario overrideScenario, BrightnessOverrideSettings* *result);
};

// IBrightnessOverrideSettings
struct IBrightnessOverrideSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_DesiredLevel(double *value);
	virtual STDMETHODIMP _get_DesiredNits(float *value);
};
template<typename X> struct IBrightnessOverrideSettings_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IBrightnessOverrideSettings_adaptor::DesiredLevel)->_get_DesiredLevel(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
		} DesiredLevel;
		struct : property {
			float get() { float value; hrcheck(enc(&IBrightnessOverrideSettings_adaptor::DesiredNits)->_get_DesiredNits(&value)); return value; }
			float operator()() { return get(); }
			operator float () { return get(); }
		} DesiredNits;
	};
	IBrightnessOverrideSettings_adaptor() {}
};
template<typename X> struct adapt<IBrightnessOverrideSettings, X> : Windows::Graphics::Display::IBrightnessOverrideSettings_adaptor<X> { typedef adapt IBrightnessOverrideSettings; };
struct IBrightnessOverrideSettings : IBrightnessOverrideSettings_raw, generate<IBrightnessOverrideSettings> {};

// BrightnessOverrideSettings
template<typename> struct BrightnessOverrideSettings_statics {
	static ptr<BrightnessOverrideSettings> CreateFromLevel(double level) { BrightnessOverrideSettings* result; hrcheck(get_activation_factory<BrightnessOverrideSettings, IBrightnessOverrideSettingsStatics>()->_CreateFromLevel(level, &result)); return from_abi(result); }
	static ptr<BrightnessOverrideSettings> CreateFromNits(float nits) { BrightnessOverrideSettings* result; hrcheck(get_activation_factory<BrightnessOverrideSettings, IBrightnessOverrideSettingsStatics>()->_CreateFromNits(nits, &result)); return from_abi(result); }
	static ptr<BrightnessOverrideSettings> CreateFromDisplayBrightnessOverrideScenario(DisplayBrightnessOverrideScenario overrideScenario) { BrightnessOverrideSettings* result; hrcheck(get_activation_factory<BrightnessOverrideSettings, IBrightnessOverrideSettingsStatics>()->_CreateFromDisplayBrightnessOverrideScenario(overrideScenario, &result)); return from_abi(result); }
};

template<typename X> struct statics<BrightnessOverrideSettings, X> : X, Windows::Graphics::Display::BrightnessOverrideSettings_statics<void> {
	typedef typename X::root_type BrightnessOverrideSettings;
};
struct BrightnessOverrideSettings : generate<BrightnessOverrideSettings> {};

// IColorOverrideSettingsStatics
struct IColorOverrideSettingsStatics : IInspectable {
	virtual STDMETHODIMP _CreateFromDisplayColorOverrideScenario(DisplayColorOverrideScenario overrideScenario, ColorOverrideSettings* *result);
};

// IColorOverrideSettings
struct IColorOverrideSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_DesiredDisplayColorOverrideScenario(DisplayColorOverrideScenario *value);
};
template<typename X> struct IColorOverrideSettings_adaptor : X {
	union {
		struct : property {
			DisplayColorOverrideScenario get() { DisplayColorOverrideScenario value; hrcheck(enc(&IColorOverrideSettings_adaptor::DesiredDisplayColorOverrideScenario)->_get_DesiredDisplayColorOverrideScenario(&value)); return value; }
			DisplayColorOverrideScenario operator()() { return get(); }
			operator DisplayColorOverrideScenario () { return get(); }
		} DesiredDisplayColorOverrideScenario;
	};
	IColorOverrideSettings_adaptor() {}
};
template<typename X> struct adapt<IColorOverrideSettings, X> : Windows::Graphics::Display::IColorOverrideSettings_adaptor<X> { typedef adapt IColorOverrideSettings; };
struct IColorOverrideSettings : IColorOverrideSettings_raw, generate<IColorOverrideSettings> {};

// ColorOverrideSettings
template<typename> struct ColorOverrideSettings_statics {
	static ptr<ColorOverrideSettings> CreateFromDisplayColorOverrideScenario(DisplayColorOverrideScenario overrideScenario) { ColorOverrideSettings* result; hrcheck(get_activation_factory<ColorOverrideSettings, IColorOverrideSettingsStatics>()->_CreateFromDisplayColorOverrideScenario(overrideScenario, &result)); return from_abi(result); }
};

template<typename X> struct statics<ColorOverrideSettings, X> : X, Windows::Graphics::Display::ColorOverrideSettings_statics<void> {
	typedef typename X::root_type ColorOverrideSettings;
};
struct ColorOverrideSettings : generate<ColorOverrideSettings> {};

// IDisplayEnhancementOverrideCapabilitiesChangedEventArgs
struct IDisplayEnhancementOverrideCapabilitiesChangedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Capabilities(DisplayEnhancementOverrideCapabilities* *value);
};
template<typename X> struct IDisplayEnhancementOverrideCapabilitiesChangedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<DisplayEnhancementOverrideCapabilities> get() { DisplayEnhancementOverrideCapabilities* value; hrcheck(enc(&IDisplayEnhancementOverrideCapabilitiesChangedEventArgs_adaptor::Capabilities)->_get_Capabilities(&value)); return from_abi(value); }
			ptr<DisplayEnhancementOverrideCapabilities> operator()() { return get(); }
			operator ptr<DisplayEnhancementOverrideCapabilities> () { return get(); }
			ptr<DisplayEnhancementOverrideCapabilities> operator->() { return get(); }
		} Capabilities;
	};
	IDisplayEnhancementOverrideCapabilitiesChangedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IDisplayEnhancementOverrideCapabilitiesChangedEventArgs, X> : Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilitiesChangedEventArgs_adaptor<X> { typedef adapt IDisplayEnhancementOverrideCapabilitiesChangedEventArgs; };
struct IDisplayEnhancementOverrideCapabilitiesChangedEventArgs : IDisplayEnhancementOverrideCapabilitiesChangedEventArgs_raw, generate<IDisplayEnhancementOverrideCapabilitiesChangedEventArgs> {};

// IDisplayEnhancementOverrideCapabilities
struct IDisplayEnhancementOverrideCapabilities_raw : IInspectable {
	virtual STDMETHODIMP _get_IsBrightnessControlSupported(bool *value);
	virtual STDMETHODIMP _get_IsBrightnessNitsControlSupported(bool *value);
	virtual STDMETHODIMP _GetSupportedNitRanges(Foundation::Collections::IVectorView<NitRange>* *result);
};
template<typename X> struct IDisplayEnhancementOverrideCapabilities_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDisplayEnhancementOverrideCapabilities_adaptor::IsBrightnessControlSupported)->_get_IsBrightnessControlSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBrightnessControlSupported;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDisplayEnhancementOverrideCapabilities_adaptor::IsBrightnessNitsControlSupported)->_get_IsBrightnessNitsControlSupported(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsBrightnessNitsControlSupported;
	};
	ptr<Foundation::Collections::IVectorView<NitRange>> GetSupportedNitRanges() { Foundation::Collections::IVectorView<NitRange>* result; hrcheck(X::get()->_GetSupportedNitRanges(&result)); return from_abi(result); }
	IDisplayEnhancementOverrideCapabilities_adaptor() {}
};
template<typename X> struct adapt<IDisplayEnhancementOverrideCapabilities, X> : Windows::Graphics::Display::IDisplayEnhancementOverrideCapabilities_adaptor<X> { typedef adapt IDisplayEnhancementOverrideCapabilities; };
struct IDisplayEnhancementOverrideCapabilities : IDisplayEnhancementOverrideCapabilities_raw, generate<IDisplayEnhancementOverrideCapabilities> {};

// DisplayEnhancementOverrideCapabilities
template<typename X> struct statics<DisplayEnhancementOverrideCapabilities, X> : X {
	typedef typename X::root_type DisplayEnhancementOverrideCapabilities;
};
struct DisplayEnhancementOverrideCapabilities : generate<DisplayEnhancementOverrideCapabilities> {};

// DisplayEnhancementOverrideCapabilitiesChangedEventArgs
template<typename X> struct statics<DisplayEnhancementOverrideCapabilitiesChangedEventArgs, X> : X {
	typedef typename X::root_type DisplayEnhancementOverrideCapabilitiesChangedEventArgs;
};
struct DisplayEnhancementOverrideCapabilitiesChangedEventArgs : generate<DisplayEnhancementOverrideCapabilitiesChangedEventArgs> {};

// IDisplayEnhancementOverrideStatics
struct IDisplayEnhancementOverrideStatics : IInspectable {
	virtual STDMETHODIMP _GetForCurrentView(DisplayEnhancementOverride* *result);
};

// IDisplayEnhancementOverride
struct IDisplayEnhancementOverride_raw : IInspectable {
	virtual STDMETHODIMP _get_ColorOverrideSettings(Display::ColorOverrideSettings* *value);
	virtual STDMETHODIMP _put_ColorOverrideSettings(Display::ColorOverrideSettings* value);
	virtual STDMETHODIMP _get_BrightnessOverrideSettings(Display::BrightnessOverrideSettings* *value);
	virtual STDMETHODIMP _put_BrightnessOverrideSettings(Display::BrightnessOverrideSettings* value);
	virtual STDMETHODIMP _get_CanOverride(bool *value);
	virtual STDMETHODIMP _get_IsOverrideActive(bool *value);
	virtual STDMETHODIMP _GetCurrentDisplayEnhancementOverrideCapabilities(DisplayEnhancementOverrideCapabilities* *value);
	virtual STDMETHODIMP _RequestOverride();
	virtual STDMETHODIMP _StopOverride();
	virtual STDMETHODIMP _add_CanOverrideChanged(Foundation::TypedEventHandler<DisplayEnhancementOverride*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_CanOverrideChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_IsOverrideActiveChanged(Foundation::TypedEventHandler<DisplayEnhancementOverride*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_IsOverrideActiveChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_DisplayEnhancementOverrideCapabilitiesChanged(Foundation::TypedEventHandler<DisplayEnhancementOverride*, DisplayEnhancementOverrideCapabilitiesChangedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_DisplayEnhancementOverrideCapabilitiesChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IDisplayEnhancementOverride_adaptor : X {
	union {
		struct : property {
			ptr<Display::BrightnessOverrideSettings> get() { Display::BrightnessOverrideSettings* value; hrcheck(enc(&IDisplayEnhancementOverride_adaptor::BrightnessOverrideSettings)->_get_BrightnessOverrideSettings(&value)); return from_abi(value); }
			ptr<Display::BrightnessOverrideSettings> operator()() { return get(); }
			operator ptr<Display::BrightnessOverrideSettings> () { return get(); }
			ptr<Display::BrightnessOverrideSettings> operator->() { return get(); }
			void put(pptr<Display::BrightnessOverrideSettings> value) { hrcheck(enc(&IDisplayEnhancementOverride_adaptor::BrightnessOverrideSettings)->_put_BrightnessOverrideSettings(value)); }
			void operator=(pptr<Display::BrightnessOverrideSettings> value) { put(value); }
			void operator()(pptr<Display::BrightnessOverrideSettings> value) { put(value); }
		} BrightnessOverrideSettings;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDisplayEnhancementOverride_adaptor::CanOverride)->_get_CanOverride(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} CanOverride;
		struct : property {
			ptr<Display::ColorOverrideSettings> get() { Display::ColorOverrideSettings* value; hrcheck(enc(&IDisplayEnhancementOverride_adaptor::ColorOverrideSettings)->_get_ColorOverrideSettings(&value)); return from_abi(value); }
			ptr<Display::ColorOverrideSettings> operator()() { return get(); }
			operator ptr<Display::ColorOverrideSettings> () { return get(); }
			ptr<Display::ColorOverrideSettings> operator->() { return get(); }
			void put(pptr<Display::ColorOverrideSettings> value) { hrcheck(enc(&IDisplayEnhancementOverride_adaptor::ColorOverrideSettings)->_put_ColorOverrideSettings(value)); }
			void operator=(pptr<Display::ColorOverrideSettings> value) { put(value); }
			void operator()(pptr<Display::ColorOverrideSettings> value) { put(value); }
		} ColorOverrideSettings;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IDisplayEnhancementOverride_adaptor::IsOverrideActive)->_get_IsOverrideActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsOverrideActive;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayEnhancementOverride>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayEnhancementOverride_adaptor::CanOverrideChanged)->_add_CanOverrideChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayEnhancementOverride_adaptor::CanOverrideChanged)->_remove_CanOverrideChanged(token)); }
		} CanOverrideChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayEnhancementOverride>, ptr<DisplayEnhancementOverrideCapabilitiesChangedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayEnhancementOverride_adaptor::DisplayEnhancementOverrideCapabilitiesChanged)->_add_DisplayEnhancementOverrideCapabilitiesChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayEnhancementOverride_adaptor::DisplayEnhancementOverrideCapabilitiesChanged)->_remove_DisplayEnhancementOverrideCapabilitiesChanged(token)); }
		} DisplayEnhancementOverrideCapabilitiesChanged;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<DisplayEnhancementOverride>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IDisplayEnhancementOverride_adaptor::IsOverrideActiveChanged)->_add_IsOverrideActiveChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IDisplayEnhancementOverride_adaptor::IsOverrideActiveChanged)->_remove_IsOverrideActiveChanged(token)); }
		} IsOverrideActiveChanged;
	};
	ptr<DisplayEnhancementOverrideCapabilities> GetCurrentDisplayEnhancementOverrideCapabilities() { DisplayEnhancementOverrideCapabilities* value; hrcheck(X::get()->_GetCurrentDisplayEnhancementOverrideCapabilities(&value)); return from_abi(value); }
	void RequestOverride() { hrcheck(X::get()->_RequestOverride()); }
	void StopOverride() { hrcheck(X::get()->_StopOverride()); }
	IDisplayEnhancementOverride_adaptor() {}
};
template<typename X> struct adapt<IDisplayEnhancementOverride, X> : Windows::Graphics::Display::IDisplayEnhancementOverride_adaptor<X> { typedef adapt IDisplayEnhancementOverride; };
struct IDisplayEnhancementOverride : IDisplayEnhancementOverride_raw, generate<IDisplayEnhancementOverride> {};

// DisplayEnhancementOverride
template<typename> struct DisplayEnhancementOverride_statics {
	static ptr<DisplayEnhancementOverride> GetForCurrentView() { DisplayEnhancementOverride* result; hrcheck(get_activation_factory<DisplayEnhancementOverride, IDisplayEnhancementOverrideStatics>()->_GetForCurrentView(&result)); return from_abi(result); }
};

template<typename X> struct statics<DisplayEnhancementOverride, X> : X, Windows::Graphics::Display::DisplayEnhancementOverride_statics<void> {
	typedef typename X::root_type DisplayEnhancementOverride;
};
struct DisplayEnhancementOverride : generate<DisplayEnhancementOverride> {};
}}}
} // namespace iso_winrt
