#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.Power

#include "Windows.System.Power.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::System::Power::BatteryStatus> : enum_type<int> {};
template<> struct def<Windows::System::Power::EnergySaverStatus> : enum_type<int> {};
template<> struct def<Windows::System::Power::PowerSupplyStatus> : enum_type<int> {};
template<> struct def<Windows::System::Power::IPowerManagerStatics> : interface_type<> {};
template<> struct def<Windows::System::Power::PowerManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Power::IBackgroundEnergyManagerStatics> : interface_type<> {};
template<> struct def<Windows::System::Power::IForegroundEnergyManagerStatics> : interface_type<> {};
template<> struct def<Windows::System::Power::BackgroundEnergyManager> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::Power::ForegroundEnergyManager> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::System::Power::IPowerManagerStatics> { define_guid(0x1394825D, 0x62CE, 0x4364, 0x98, 0xD5, 0xAA, 0x28, 0xC7, 0xFB, 0xD1, 0x5B);};
template<> struct uuid<Windows::System::Power::IBackgroundEnergyManagerStatics> { define_guid(0xB3161D95, 0x1180, 0x4376, 0x96, 0xE1, 0x40, 0x95, 0x56, 0x81, 0x47, 0xCE);};
template<> struct uuid<Windows::System::Power::IForegroundEnergyManagerStatics> { define_guid(0x9FF86872, 0xE677, 0x4814, 0x9A, 0x20, 0x53, 0x37, 0xCA, 0x73, 0x2B, 0x98);};

// types

namespace Windows { namespace System { namespace Power {

// IPowerManagerStatics
struct IPowerManagerStatics : IInspectable {
	virtual STDMETHODIMP _get_EnergySaverStatus(Power::EnergySaverStatus *value);
	virtual STDMETHODIMP _add_EnergySaverStatusChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnergySaverStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_BatteryStatus(Power::BatteryStatus *value);
	virtual STDMETHODIMP _add_BatteryStatusChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_BatteryStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_PowerSupplyStatus(Power::PowerSupplyStatus *value);
	virtual STDMETHODIMP _add_PowerSupplyStatusChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_PowerSupplyStatusChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_RemainingChargePercent(int *value);
	virtual STDMETHODIMP _add_RemainingChargePercentChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemainingChargePercentChanged(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _get_RemainingDischargeTime(Foundation::TimeSpan *value);
	virtual STDMETHODIMP _add_RemainingDischargeTimeChanged(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemainingDischargeTimeChanged(Foundation::EventRegistrationToken token);
};

// PowerManager
template<typename> struct PowerManager_statics {
	static struct _BatteryStatus : property {
		Power::BatteryStatus get() { Power::BatteryStatus value; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_get_BatteryStatus(&value)); return value; }
		Power::BatteryStatus operator()() { return get(); }
		operator Power::BatteryStatus () { return get(); }
	} BatteryStatus;
	static struct _EnergySaverStatus : property {
		Power::EnergySaverStatus get() { Power::EnergySaverStatus value; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_get_EnergySaverStatus(&value)); return value; }
		Power::EnergySaverStatus operator()() { return get(); }
		operator Power::EnergySaverStatus () { return get(); }
	} EnergySaverStatus;
	static struct _PowerSupplyStatus : property {
		Power::PowerSupplyStatus get() { Power::PowerSupplyStatus value; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_get_PowerSupplyStatus(&value)); return value; }
		Power::PowerSupplyStatus operator()() { return get(); }
		operator Power::PowerSupplyStatus () { return get(); }
	} PowerSupplyStatus;
	static struct _RemainingChargePercent : property {
		int get() { int value; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_get_RemainingChargePercent(&value)); return value; }
		int operator()() { return get(); }
		operator int () { return get(); }
	} RemainingChargePercent;
	static struct _RemainingDischargeTime : property {
		Foundation::TimeSpan get() { Foundation::TimeSpan value; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_get_RemainingDischargeTime(&value)); return value; }
		Foundation::TimeSpan operator()() { return get(); }
		operator Foundation::TimeSpan () { return get(); }
	} RemainingDischargeTime;
	static struct _BatteryStatusChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_add_BatteryStatusChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_remove_BatteryStatusChanged(token)); }
	} BatteryStatusChanged;
	static struct _EnergySaverStatusChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_add_EnergySaverStatusChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_remove_EnergySaverStatusChanged(token)); }
	} EnergySaverStatusChanged;
	static struct _PowerSupplyStatusChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_add_PowerSupplyStatusChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_remove_PowerSupplyStatusChanged(token)); }
	} PowerSupplyStatusChanged;
	static struct _RemainingChargePercentChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_add_RemainingChargePercentChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_remove_RemainingChargePercentChanged(token)); }
	} RemainingChargePercentChanged;
	static struct _RemainingDischargeTimeChanged : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_add_RemainingDischargeTimeChanged(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<PowerManager, IPowerManagerStatics>()->_remove_RemainingDischargeTimeChanged(token)); }
	} RemainingDischargeTimeChanged;
};
template<typename X> typename PowerManager_statics<X>::_BatteryStatus PowerManager_statics<X>::BatteryStatus;
template<typename X> typename PowerManager_statics<X>::_EnergySaverStatus PowerManager_statics<X>::EnergySaverStatus;
template<typename X> typename PowerManager_statics<X>::_PowerSupplyStatus PowerManager_statics<X>::PowerSupplyStatus;
template<typename X> typename PowerManager_statics<X>::_RemainingChargePercent PowerManager_statics<X>::RemainingChargePercent;
template<typename X> typename PowerManager_statics<X>::_RemainingDischargeTime PowerManager_statics<X>::RemainingDischargeTime;
template<typename X> typename PowerManager_statics<X>::_BatteryStatusChanged PowerManager_statics<X>::BatteryStatusChanged;
template<typename X> typename PowerManager_statics<X>::_EnergySaverStatusChanged PowerManager_statics<X>::EnergySaverStatusChanged;
template<typename X> typename PowerManager_statics<X>::_PowerSupplyStatusChanged PowerManager_statics<X>::PowerSupplyStatusChanged;
template<typename X> typename PowerManager_statics<X>::_RemainingChargePercentChanged PowerManager_statics<X>::RemainingChargePercentChanged;
template<typename X> typename PowerManager_statics<X>::_RemainingDischargeTimeChanged PowerManager_statics<X>::RemainingDischargeTimeChanged;

template<typename X> struct statics<PowerManager, X> : X, Windows::System::Power::PowerManager_statics<void> {
	typedef typename X::root_type PowerManager;
};
struct PowerManager : generate<PowerManager> {};

// IBackgroundEnergyManagerStatics
struct IBackgroundEnergyManagerStatics : IInspectable {
	virtual STDMETHODIMP _get_LowUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_NearMaxAcceptableUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_MaxAcceptableUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_ExcessiveUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_NearTerminationUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_TerminationUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_RecentEnergyUsage(unsigned *value);
	virtual STDMETHODIMP _get_RecentEnergyUsageLevel(unsigned *value);
	virtual STDMETHODIMP _add_RecentEnergyUsageIncreased(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RecentEnergyUsageIncreased(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RecentEnergyUsageReturnedToLow(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RecentEnergyUsageReturnedToLow(Foundation::EventRegistrationToken token);
};

// IForegroundEnergyManagerStatics
struct IForegroundEnergyManagerStatics : IInspectable {
	virtual STDMETHODIMP _get_LowUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_NearMaxAcceptableUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_MaxAcceptableUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_ExcessiveUsageLevel(unsigned *value);
	virtual STDMETHODIMP _get_RecentEnergyUsage(unsigned *value);
	virtual STDMETHODIMP _get_RecentEnergyUsageLevel(unsigned *value);
	virtual STDMETHODIMP _add_RecentEnergyUsageIncreased(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RecentEnergyUsageIncreased(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RecentEnergyUsageReturnedToLow(Foundation::EventHandler<IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RecentEnergyUsageReturnedToLow(Foundation::EventRegistrationToken token);
};

// BackgroundEnergyManager
template<typename> struct BackgroundEnergyManager_statics {
	static struct _ExcessiveUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_ExcessiveUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ExcessiveUsageLevel;
	static struct _LowUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_LowUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} LowUsageLevel;
	static struct _MaxAcceptableUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_MaxAcceptableUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MaxAcceptableUsageLevel;
	static struct _NearMaxAcceptableUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_NearMaxAcceptableUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} NearMaxAcceptableUsageLevel;
	static struct _NearTerminationUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_NearTerminationUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} NearTerminationUsageLevel;
	static struct _RecentEnergyUsage : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_RecentEnergyUsage(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} RecentEnergyUsage;
	static struct _RecentEnergyUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_RecentEnergyUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} RecentEnergyUsageLevel;
	static struct _TerminationUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_get_TerminationUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} TerminationUsageLevel;
	static struct _RecentEnergyUsageIncreased : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_add_RecentEnergyUsageIncreased(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_remove_RecentEnergyUsageIncreased(token)); }
	} RecentEnergyUsageIncreased;
	static struct _RecentEnergyUsageReturnedToLow : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_add_RecentEnergyUsageReturnedToLow(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>()->_remove_RecentEnergyUsageReturnedToLow(token)); }
	} RecentEnergyUsageReturnedToLow;
};
template<typename X> typename BackgroundEnergyManager_statics<X>::_ExcessiveUsageLevel BackgroundEnergyManager_statics<X>::ExcessiveUsageLevel;
template<typename X> typename BackgroundEnergyManager_statics<X>::_LowUsageLevel BackgroundEnergyManager_statics<X>::LowUsageLevel;
template<typename X> typename BackgroundEnergyManager_statics<X>::_MaxAcceptableUsageLevel BackgroundEnergyManager_statics<X>::MaxAcceptableUsageLevel;
template<typename X> typename BackgroundEnergyManager_statics<X>::_NearMaxAcceptableUsageLevel BackgroundEnergyManager_statics<X>::NearMaxAcceptableUsageLevel;
template<typename X> typename BackgroundEnergyManager_statics<X>::_NearTerminationUsageLevel BackgroundEnergyManager_statics<X>::NearTerminationUsageLevel;
template<typename X> typename BackgroundEnergyManager_statics<X>::_RecentEnergyUsage BackgroundEnergyManager_statics<X>::RecentEnergyUsage;
template<typename X> typename BackgroundEnergyManager_statics<X>::_RecentEnergyUsageLevel BackgroundEnergyManager_statics<X>::RecentEnergyUsageLevel;
template<typename X> typename BackgroundEnergyManager_statics<X>::_TerminationUsageLevel BackgroundEnergyManager_statics<X>::TerminationUsageLevel;
template<typename X> typename BackgroundEnergyManager_statics<X>::_RecentEnergyUsageIncreased BackgroundEnergyManager_statics<X>::RecentEnergyUsageIncreased;
template<typename X> typename BackgroundEnergyManager_statics<X>::_RecentEnergyUsageReturnedToLow BackgroundEnergyManager_statics<X>::RecentEnergyUsageReturnedToLow;

template<typename X> struct statics<BackgroundEnergyManager, X> : X, Windows::System::Power::BackgroundEnergyManager_statics<void> {
	typedef typename X::root_type BackgroundEnergyManager;
};
struct BackgroundEnergyManager : generate<BackgroundEnergyManager> {};

// ForegroundEnergyManager
template<typename> struct ForegroundEnergyManager_statics {
	static struct _ExcessiveUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_get_ExcessiveUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} ExcessiveUsageLevel;
	static struct _LowUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_get_LowUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} LowUsageLevel;
	static struct _MaxAcceptableUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_get_MaxAcceptableUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} MaxAcceptableUsageLevel;
	static struct _NearMaxAcceptableUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_get_NearMaxAcceptableUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} NearMaxAcceptableUsageLevel;
	static struct _RecentEnergyUsage : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_get_RecentEnergyUsage(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} RecentEnergyUsage;
	static struct _RecentEnergyUsageLevel : property {
		unsigned get() { unsigned value; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_get_RecentEnergyUsageLevel(&value)); return value; }
		unsigned operator()() { return get(); }
		operator unsigned () { return get(); }
	} RecentEnergyUsageLevel;
	static struct _RecentEnergyUsageIncreased : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_add_RecentEnergyUsageIncreased(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_remove_RecentEnergyUsageIncreased(token)); }
	} RecentEnergyUsageIncreased;
	static struct _RecentEnergyUsageReturnedToLow : property {
		Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::EventHandler<object>> handler) { Foundation::EventRegistrationToken token; hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_add_RecentEnergyUsageReturnedToLow(to_abi(handler), &token)); return token; }
		void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(get_activation_factory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>()->_remove_RecentEnergyUsageReturnedToLow(token)); }
	} RecentEnergyUsageReturnedToLow;
};
template<typename X> typename ForegroundEnergyManager_statics<X>::_ExcessiveUsageLevel ForegroundEnergyManager_statics<X>::ExcessiveUsageLevel;
template<typename X> typename ForegroundEnergyManager_statics<X>::_LowUsageLevel ForegroundEnergyManager_statics<X>::LowUsageLevel;
template<typename X> typename ForegroundEnergyManager_statics<X>::_MaxAcceptableUsageLevel ForegroundEnergyManager_statics<X>::MaxAcceptableUsageLevel;
template<typename X> typename ForegroundEnergyManager_statics<X>::_NearMaxAcceptableUsageLevel ForegroundEnergyManager_statics<X>::NearMaxAcceptableUsageLevel;
template<typename X> typename ForegroundEnergyManager_statics<X>::_RecentEnergyUsage ForegroundEnergyManager_statics<X>::RecentEnergyUsage;
template<typename X> typename ForegroundEnergyManager_statics<X>::_RecentEnergyUsageLevel ForegroundEnergyManager_statics<X>::RecentEnergyUsageLevel;
template<typename X> typename ForegroundEnergyManager_statics<X>::_RecentEnergyUsageIncreased ForegroundEnergyManager_statics<X>::RecentEnergyUsageIncreased;
template<typename X> typename ForegroundEnergyManager_statics<X>::_RecentEnergyUsageReturnedToLow ForegroundEnergyManager_statics<X>::RecentEnergyUsageReturnedToLow;

template<typename X> struct statics<ForegroundEnergyManager, X> : X, Windows::System::Power::ForegroundEnergyManager_statics<void> {
	typedef typename X::root_type ForegroundEnergyManager;
};
struct ForegroundEnergyManager : generate<ForegroundEnergyManager> {};
}}}
} // namespace iso_winrt
