#pragma once
// generated by isopod tools
// namespaces:
// Windows.Globalization.NumberFormatting

#include "Windows.Globalization.NumberFormatting.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
template<typename T> struct IIterable;
}
template<typename T> struct IReference;
}}

// defs

template<> struct def<Windows::Globalization::NumberFormatting::INumberRounder> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::RoundingAlgorithm> : enum_type<int> {};
template<> struct def<Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::IIncrementNumberRounder> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder> : class_type<Platform::Object, Windows::Globalization::NumberFormatting::INumberRounder, Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder> {};
template<> struct def<Windows::Globalization::NumberFormatting::IncrementNumberRounder> : class_type<Platform::Object, Windows::Globalization::NumberFormatting::INumberRounder, Windows::Globalization::NumberFormatting::IIncrementNumberRounder> {};
template<> struct def<Windows::Globalization::NumberFormatting::INumberFormatter> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::INumberFormatter2> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::INumberParser> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::INumberFormatterOptions> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::ISignificantDigitsOption> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::INumberRounderOption> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::ISignedZeroOption> : overridable_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::IDecimalFormatterFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::DecimalFormatter> : class_type<Platform::Object, Windows::Globalization::NumberFormatting::INumberFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>, custom_activators {};
template<> struct def<Windows::Globalization::NumberFormatting::IPercentFormatterFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::PercentFormatter> : class_type<Platform::Object, Windows::Globalization::NumberFormatting::INumberFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>, custom_activators {};
template<> struct def<Windows::Globalization::NumberFormatting::IPermilleFormatterFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::PermilleFormatter> : class_type<Platform::Object, Windows::Globalization::NumberFormatting::INumberFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>, custom_activators {};
template<> struct def<Windows::Globalization::NumberFormatting::CurrencyFormatterMode> : enum_type<int> {};
template<> struct def<Windows::Globalization::NumberFormatting::ICurrencyFormatterFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::ICurrencyFormatter2> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::ICurrencyFormatter> : interface_type<Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser> {};
template<> struct def<Windows::Globalization::NumberFormatting::CurrencyFormatter> : class_type<Platform::Object, Windows::Globalization::NumberFormatting::ICurrencyFormatter, Windows::Globalization::NumberFormatting::ISignedZeroOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::ICurrencyFormatter2>, custom_activators {};
template<> struct def<Windows::Globalization::NumberFormatting::INumeralSystemTranslatorFactory> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::INumeralSystemTranslator> : interface_type<> {};
template<> struct def<Windows::Globalization::NumberFormatting::NumeralSystemTranslator> : class_type<Platform::Object, Windows::Globalization::NumberFormatting::INumeralSystemTranslator>, custom_activators {};

// uuids

template<> struct uuid<Windows::Globalization::NumberFormatting::INumberRounder> { define_guid(0x5473C375, 0x38ED, 0x4631, 0xB8, 0xC, 0xEF, 0x34, 0xFC, 0x48, 0xB7, 0xF5);};
template<> struct uuid<Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder> { define_guid(0xF5941BCA, 0x6646, 0x4913, 0x8C, 0x76, 0x1B, 0x19, 0x1F, 0xF9, 0x4D, 0xFD);};
template<> struct uuid<Windows::Globalization::NumberFormatting::IIncrementNumberRounder> { define_guid(0x70A64FF8, 0x66AB, 0x4155, 0x9D, 0xA1, 0x73, 0x9E, 0x46, 0x76, 0x45, 0x43);};
template<> struct uuid<Windows::Globalization::NumberFormatting::INumberFormatter> { define_guid(0xA5007C49, 0x7676, 0x4DB7, 0x86, 0x31, 0x1B, 0x6F, 0xF2, 0x65, 0xCA, 0xA9);};
template<> struct uuid<Windows::Globalization::NumberFormatting::INumberFormatter2> { define_guid(0xD4A8C1F0, 0x80D0, 0x4B0D, 0xA8, 0x9E, 0x88, 0x2C, 0x1E, 0x8F, 0x83, 0x10);};
template<> struct uuid<Windows::Globalization::NumberFormatting::INumberParser> { define_guid(0xE6659412, 0x4A13, 0x4A53, 0x83, 0xA1, 0x39, 0x2F, 0xBE, 0x4C, 0xFF, 0x9F);};
template<> struct uuid<Windows::Globalization::NumberFormatting::INumberFormatterOptions> { define_guid(0x80332D21, 0xAEE1, 0x4A39, 0xBA, 0xA2, 0x7, 0xED, 0x8C, 0x96, 0xDA, 0xF6);};
template<> struct uuid<Windows::Globalization::NumberFormatting::ISignificantDigitsOption> { define_guid(0x1D4DFCDD, 0x2D43, 0x4EE8, 0xBB, 0xF1, 0xC1, 0xB2, 0x6A, 0x71, 0x1A, 0x58);};
template<> struct uuid<Windows::Globalization::NumberFormatting::INumberRounderOption> { define_guid(0x3B088433, 0x646F, 0x4EFE, 0x8D, 0x48, 0x66, 0xEB, 0x2E, 0x49, 0xE7, 0x36);};
template<> struct uuid<Windows::Globalization::NumberFormatting::ISignedZeroOption> { define_guid(0xFD1CDD31, 0xA3C, 0x49C4, 0xA6, 0x42, 0x96, 0xA1, 0x56, 0x4F, 0x4F, 0x30);};
template<> struct uuid<Windows::Globalization::NumberFormatting::IDecimalFormatterFactory> { define_guid(0xD018C9A, 0xE393, 0x46B8, 0xB8, 0x30, 0x7A, 0x69, 0xC8, 0xF8, 0x9F, 0xBB);};
template<> struct uuid<Windows::Globalization::NumberFormatting::IPercentFormatterFactory> { define_guid(0xB7828AEF, 0xFED4, 0x4018, 0xA6, 0xE2, 0xE0, 0x99, 0x61, 0xE0, 0x37, 0x65);};
template<> struct uuid<Windows::Globalization::NumberFormatting::IPermilleFormatterFactory> { define_guid(0x2B37B4AC, 0xE638, 0x4ED5, 0xA9, 0x98, 0x62, 0xF6, 0xB0, 0x6A, 0x49, 0xAE);};
template<> struct uuid<Windows::Globalization::NumberFormatting::ICurrencyFormatterFactory> { define_guid(0x86C7537E, 0xB938, 0x4AA2, 0x84, 0xB0, 0x2C, 0x33, 0xDC, 0x5B, 0x14, 0x50);};
template<> struct uuid<Windows::Globalization::NumberFormatting::ICurrencyFormatter2> { define_guid(0x72C2F1D, 0xE7BA, 0x4197, 0x92, 0xE, 0x24, 0x7C, 0x92, 0xF7, 0xDE, 0xA6);};
template<> struct uuid<Windows::Globalization::NumberFormatting::ICurrencyFormatter> { define_guid(0x11730CA5, 0x4B00, 0x41B2, 0xB3, 0x32, 0x73, 0xB1, 0x2A, 0x49, 0x7D, 0x54);};
template<> struct uuid<Windows::Globalization::NumberFormatting::INumeralSystemTranslatorFactory> { define_guid(0x9630C8DA, 0x36EF, 0x4D88, 0xA8, 0x5C, 0x6F, 0xD, 0x98, 0xD6, 0x20, 0xA6);};
template<> struct uuid<Windows::Globalization::NumberFormatting::INumeralSystemTranslator> { define_guid(0x28F5BC2C, 0x8C23, 0x4234, 0xAD, 0x2E, 0xFA, 0x5A, 0x3A, 0x42, 0x6E, 0x9B);};

// types

namespace Windows { namespace Globalization { namespace NumberFormatting {

// INumberRounder
struct INumberRounder_raw : IInspectable {
	virtual STDMETHODIMP _RoundInt32(int value, int *result) = 0;
	virtual STDMETHODIMP _RoundUInt32(unsigned value, unsigned *result) = 0;
	virtual STDMETHODIMP _RoundInt64(__int64 value, __int64 *result) = 0;
	virtual STDMETHODIMP _RoundUInt64(unsigned __int64 value, unsigned __int64 *result) = 0;
	virtual STDMETHODIMP _RoundSingle(float value, float *result) = 0;
	virtual STDMETHODIMP _RoundDouble(double value, double *result) = 0;
};
template<typename X> struct INumberRounder_adaptor : X {
	int RoundInt32(int value) { int result; hrcheck(X::get()->_RoundInt32(value, &result)); return result; }
	unsigned RoundUInt32(unsigned value) { unsigned result; hrcheck(X::get()->_RoundUInt32(value, &result)); return result; }
	__int64 RoundInt64(__int64 value) { __int64 result; hrcheck(X::get()->_RoundInt64(value, &result)); return result; }
	unsigned __int64 RoundUInt64(unsigned __int64 value) { unsigned __int64 result; hrcheck(X::get()->_RoundUInt64(value, &result)); return result; }
	float RoundSingle(float value) { float result; hrcheck(X::get()->_RoundSingle(value, &result)); return result; }
	double RoundDouble(double value) { double result; hrcheck(X::get()->_RoundDouble(value, &result)); return result; }
};
template<typename X> struct adapt<INumberRounder, X> : Windows::Globalization::NumberFormatting::INumberRounder_adaptor<X> { typedef adapt INumberRounder; };
template<typename X> struct INumberRounder_unadaptor : X {
	STDMETHODIMP _RoundInt32(int value, int *result) { return hrtry([&, this] { *result = X::get()->RoundInt32(value); }); }
	STDMETHODIMP _RoundUInt32(unsigned value, unsigned *result) { return hrtry([&, this] { *result = X::get()->RoundUInt32(value); }); }
	STDMETHODIMP _RoundInt64(__int64 value, __int64 *result) { return hrtry([&, this] { *result = X::get()->RoundInt64(value); }); }
	STDMETHODIMP _RoundUInt64(unsigned __int64 value, unsigned __int64 *result) { return hrtry([&, this] { *result = X::get()->RoundUInt64(value); }); }
	STDMETHODIMP _RoundSingle(float value, float *result) { return hrtry([&, this] { *result = X::get()->RoundSingle(value); }); }
	STDMETHODIMP _RoundDouble(double value, double *result) { return hrtry([&, this] { *result = X::get()->RoundDouble(value); }); }
};
template<typename X> struct unadapt<INumberRounder, X> : Windows::Globalization::NumberFormatting::INumberRounder_unadaptor<X> {};
struct INumberRounder : INumberRounder_raw, generate<INumberRounder> {};

// ISignificantDigitsNumberRounder
struct ISignificantDigitsNumberRounder_raw : IInspectable {
	virtual STDMETHODIMP _get_RoundingAlgorithm(NumberFormatting::RoundingAlgorithm *value);
	virtual STDMETHODIMP _put_RoundingAlgorithm(NumberFormatting::RoundingAlgorithm value);
	virtual STDMETHODIMP _get_SignificantDigits(unsigned *value);
	virtual STDMETHODIMP _put_SignificantDigits(unsigned value);
};
template<typename X> struct ISignificantDigitsNumberRounder_adaptor : X {
	union {
		struct : property {
			NumberFormatting::RoundingAlgorithm get() { NumberFormatting::RoundingAlgorithm value; hrcheck(enc(&ISignificantDigitsNumberRounder_adaptor::RoundingAlgorithm)->_get_RoundingAlgorithm(&value)); return value; }
			NumberFormatting::RoundingAlgorithm operator()() { return get(); }
			operator NumberFormatting::RoundingAlgorithm () { return get(); }
			void put(NumberFormatting::RoundingAlgorithm value) { hrcheck(enc(&ISignificantDigitsNumberRounder_adaptor::RoundingAlgorithm)->_put_RoundingAlgorithm(value)); }
			void operator=(NumberFormatting::RoundingAlgorithm value) { put(value); }
			void operator()(NumberFormatting::RoundingAlgorithm value) { put(value); }
		} RoundingAlgorithm;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&ISignificantDigitsNumberRounder_adaptor::SignificantDigits)->_get_SignificantDigits(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
			void put(unsigned value) { hrcheck(enc(&ISignificantDigitsNumberRounder_adaptor::SignificantDigits)->_put_SignificantDigits(value)); }
			void operator=(unsigned value) { put(value); }
			void operator()(unsigned value) { put(value); }
		} SignificantDigits;
	};
	ISignificantDigitsNumberRounder_adaptor() {}
};
template<typename X> struct adapt<ISignificantDigitsNumberRounder, X> : Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder_adaptor<X> { typedef adapt ISignificantDigitsNumberRounder; };
struct ISignificantDigitsNumberRounder : ISignificantDigitsNumberRounder_raw, generate<ISignificantDigitsNumberRounder> {};

// IIncrementNumberRounder
struct IIncrementNumberRounder_raw : IInspectable {
	virtual STDMETHODIMP _get_RoundingAlgorithm(NumberFormatting::RoundingAlgorithm *value);
	virtual STDMETHODIMP _put_RoundingAlgorithm(NumberFormatting::RoundingAlgorithm value);
	virtual STDMETHODIMP _get_Increment(double *value);
	virtual STDMETHODIMP _put_Increment(double value);
};
template<typename X> struct IIncrementNumberRounder_adaptor : X {
	union {
		struct : property {
			double get() { double value; hrcheck(enc(&IIncrementNumberRounder_adaptor::Increment)->_get_Increment(&value)); return value; }
			double operator()() { return get(); }
			operator double () { return get(); }
			void put(double value) { hrcheck(enc(&IIncrementNumberRounder_adaptor::Increment)->_put_Increment(value)); }
			void operator=(double value) { put(value); }
			void operator()(double value) { put(value); }
		} Increment;
		struct : property {
			NumberFormatting::RoundingAlgorithm get() { NumberFormatting::RoundingAlgorithm value; hrcheck(enc(&IIncrementNumberRounder_adaptor::RoundingAlgorithm)->_get_RoundingAlgorithm(&value)); return value; }
			NumberFormatting::RoundingAlgorithm operator()() { return get(); }
			operator NumberFormatting::RoundingAlgorithm () { return get(); }
			void put(NumberFormatting::RoundingAlgorithm value) { hrcheck(enc(&IIncrementNumberRounder_adaptor::RoundingAlgorithm)->_put_RoundingAlgorithm(value)); }
			void operator=(NumberFormatting::RoundingAlgorithm value) { put(value); }
			void operator()(NumberFormatting::RoundingAlgorithm value) { put(value); }
		} RoundingAlgorithm;
	};
	IIncrementNumberRounder_adaptor() {}
};
template<typename X> struct adapt<IIncrementNumberRounder, X> : Windows::Globalization::NumberFormatting::IIncrementNumberRounder_adaptor<X> { typedef adapt IIncrementNumberRounder; };
struct IIncrementNumberRounder : IIncrementNumberRounder_raw, generate<IIncrementNumberRounder> {};

// SignificantDigitsNumberRounder
template<typename X> struct statics<SignificantDigitsNumberRounder, X> : X {
	typedef typename X::root_type SignificantDigitsNumberRounder;
};
struct SignificantDigitsNumberRounder : generate<SignificantDigitsNumberRounder> {};

// IncrementNumberRounder
template<typename X> struct statics<IncrementNumberRounder, X> : X {
	typedef typename X::root_type IncrementNumberRounder;
};
struct IncrementNumberRounder : generate<IncrementNumberRounder> {};

// INumberFormatter
struct INumberFormatter_raw : IInspectable {
	virtual STDMETHODIMP _FormatInt(__int64 value, HSTRING *result) = 0;
	virtual STDMETHODIMP _FormatUInt(unsigned __int64 value, HSTRING *result) = 0;
	virtual STDMETHODIMP _FormatDouble(double value, HSTRING *result) = 0;
};
template<typename X> struct INumberFormatter_adaptor : X {
	hstring Format(__int64 value) { HSTRING result; hrcheck(X::get()->_FormatInt(value, &result)); return from_abi(result); }
	hstring Format(unsigned __int64 value) { HSTRING result; hrcheck(X::get()->_FormatUInt(value, &result)); return from_abi(result); }
	hstring Format(double value) { HSTRING result; hrcheck(X::get()->_FormatDouble(value, &result)); return from_abi(result); }
};
template<typename X> struct adapt<INumberFormatter, X> : Windows::Globalization::NumberFormatting::INumberFormatter_adaptor<X> { typedef adapt INumberFormatter; };
template<typename X> struct INumberFormatter_unadaptor : X {
	STDMETHODIMP _FormatInt(__int64 value, HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->Format(value)); }); }
	STDMETHODIMP _FormatUInt(unsigned __int64 value, HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->Format(value)); }); }
	STDMETHODIMP _FormatDouble(double value, HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->Format(value)); }); }
};
template<typename X> struct unadapt<INumberFormatter, X> : Windows::Globalization::NumberFormatting::INumberFormatter_unadaptor<X> {};
struct INumberFormatter : INumberFormatter_raw, generate<INumberFormatter> {};

// INumberFormatter2
struct INumberFormatter2_raw : IInspectable {
	virtual STDMETHODIMP _FormatInt(__int64 value, HSTRING *result) = 0;
	virtual STDMETHODIMP _FormatUInt(unsigned __int64 value, HSTRING *result) = 0;
	virtual STDMETHODIMP _FormatDouble(double value, HSTRING *result) = 0;
};
template<typename X> struct INumberFormatter2_adaptor : X {
	hstring FormatInt(__int64 value) { HSTRING result; hrcheck(X::get()->_FormatInt(value, &result)); return from_abi(result); }
	hstring FormatUInt(unsigned __int64 value) { HSTRING result; hrcheck(X::get()->_FormatUInt(value, &result)); return from_abi(result); }
	hstring FormatDouble(double value) { HSTRING result; hrcheck(X::get()->_FormatDouble(value, &result)); return from_abi(result); }
};
template<typename X> struct adapt<INumberFormatter2, X> : Windows::Globalization::NumberFormatting::INumberFormatter2_adaptor<X> { typedef adapt INumberFormatter2; };
template<typename X> struct INumberFormatter2_unadaptor : X {
	STDMETHODIMP _FormatInt(__int64 value, HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->FormatInt(value)); }); }
	STDMETHODIMP _FormatUInt(unsigned __int64 value, HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->FormatUInt(value)); }); }
	STDMETHODIMP _FormatDouble(double value, HSTRING *result) { return hrtry([&, this] { *result = to_abi(X::get()->FormatDouble(value)); }); }
};
template<typename X> struct unadapt<INumberFormatter2, X> : Windows::Globalization::NumberFormatting::INumberFormatter2_unadaptor<X> {};
struct INumberFormatter2 : INumberFormatter2_raw, generate<INumberFormatter2> {};

// INumberParser
struct INumberParser_raw : IInspectable {
	virtual STDMETHODIMP _ParseInt(HSTRING text, Foundation::IReference<__int64>* *result) = 0;
	virtual STDMETHODIMP _ParseUInt(HSTRING text, Foundation::IReference<unsigned __int64>* *result) = 0;
	virtual STDMETHODIMP _ParseDouble(HSTRING text, Foundation::IReference<double>* *result) = 0;
};
template<typename X> struct INumberParser_adaptor : X {
	ptr<Foundation::IReference<__int64>> ParseInt(hstring_ref text) { Foundation::IReference<__int64>* result; hrcheck(X::get()->_ParseInt(text, &result)); return from_abi(result); }
	ptr<Foundation::IReference<unsigned __int64>> ParseUInt(hstring_ref text) { Foundation::IReference<unsigned __int64>* result; hrcheck(X::get()->_ParseUInt(text, &result)); return from_abi(result); }
	ptr<Foundation::IReference<double>> ParseDouble(hstring_ref text) { Foundation::IReference<double>* result; hrcheck(X::get()->_ParseDouble(text, &result)); return from_abi(result); }
};
template<typename X> struct adapt<INumberParser, X> : Windows::Globalization::NumberFormatting::INumberParser_adaptor<X> { typedef adapt INumberParser; };
template<typename X> struct INumberParser_unadaptor : X {
	STDMETHODIMP _ParseInt(HSTRING text, Foundation::IReference<__int64>* *result) { return hrtry([&, this] { *result = to_abi(X::get()->ParseInt(text)); }); }
	STDMETHODIMP _ParseUInt(HSTRING text, Foundation::IReference<unsigned __int64>* *result) { return hrtry([&, this] { *result = to_abi(X::get()->ParseUInt(text)); }); }
	STDMETHODIMP _ParseDouble(HSTRING text, Foundation::IReference<double>* *result) { return hrtry([&, this] { *result = to_abi(X::get()->ParseDouble(text)); }); }
};
template<typename X> struct unadapt<INumberParser, X> : Windows::Globalization::NumberFormatting::INumberParser_unadaptor<X> {};
struct INumberParser : INumberParser_raw, generate<INumberParser> {};

// INumberFormatterOptions
struct INumberFormatterOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_Languages(Foundation::Collections::IVectorView<HSTRING>* *value) = 0;
	virtual STDMETHODIMP _get_GeographicRegion(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_IntegerDigits(int *value) = 0;
	virtual STDMETHODIMP _put_IntegerDigits(int value) = 0;
	virtual STDMETHODIMP _get_FractionDigits(int *value) = 0;
	virtual STDMETHODIMP _put_FractionDigits(int value) = 0;
	virtual STDMETHODIMP _get_IsGrouped(bool *value) = 0;
	virtual STDMETHODIMP _put_IsGrouped(bool value) = 0;
	virtual STDMETHODIMP _get_IsDecimalPointAlwaysDisplayed(bool *value) = 0;
	virtual STDMETHODIMP _put_IsDecimalPointAlwaysDisplayed(bool value) = 0;
	virtual STDMETHODIMP _get_NumeralSystem(HSTRING *value) = 0;
	virtual STDMETHODIMP _put_NumeralSystem(HSTRING value) = 0;
	virtual STDMETHODIMP _get_ResolvedLanguage(HSTRING *value) = 0;
	virtual STDMETHODIMP _get_ResolvedGeographicRegion(HSTRING *value) = 0;
};
template<typename X> struct INumberFormatterOptions_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&INumberFormatterOptions_adaptor::FractionDigits)->_get_FractionDigits(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&INumberFormatterOptions_adaptor::FractionDigits)->_put_FractionDigits(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} FractionDigits;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INumberFormatterOptions_adaptor::GeographicRegion)->_get_GeographicRegion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} GeographicRegion;
		struct : property {
			int get() { int value; hrcheck(enc(&INumberFormatterOptions_adaptor::IntegerDigits)->_get_IntegerDigits(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&INumberFormatterOptions_adaptor::IntegerDigits)->_put_IntegerDigits(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} IntegerDigits;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INumberFormatterOptions_adaptor::IsDecimalPointAlwaysDisplayed)->_get_IsDecimalPointAlwaysDisplayed(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&INumberFormatterOptions_adaptor::IsDecimalPointAlwaysDisplayed)->_put_IsDecimalPointAlwaysDisplayed(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsDecimalPointAlwaysDisplayed;
		struct : property {
			bool get() { bool value; hrcheck(enc(&INumberFormatterOptions_adaptor::IsGrouped)->_get_IsGrouped(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&INumberFormatterOptions_adaptor::IsGrouped)->_put_IsGrouped(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsGrouped;
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&INumberFormatterOptions_adaptor::Languages)->_get_Languages(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} Languages;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INumberFormatterOptions_adaptor::NumeralSystem)->_get_NumeralSystem(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&INumberFormatterOptions_adaptor::NumeralSystem)->_put_NumeralSystem(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} NumeralSystem;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INumberFormatterOptions_adaptor::ResolvedGeographicRegion)->_get_ResolvedGeographicRegion(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResolvedGeographicRegion;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INumberFormatterOptions_adaptor::ResolvedLanguage)->_get_ResolvedLanguage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResolvedLanguage;
	};
	INumberFormatterOptions_adaptor() {}
};
template<typename X> struct adapt<INumberFormatterOptions, X> : Windows::Globalization::NumberFormatting::INumberFormatterOptions_adaptor<X> { typedef adapt INumberFormatterOptions; };
template<typename X> struct INumberFormatterOptions_unadaptor : X {
	STDMETHODIMP _get_Languages(Foundation::Collections::IVectorView<HSTRING>* *value) { return hrtry([&, this] { get_prop(value, Languages); }); }
	STDMETHODIMP _get_GeographicRegion(HSTRING *value) { return hrtry([&, this] { get_prop(value, GeographicRegion); }); }
	STDMETHODIMP _get_IntegerDigits(int *value) { return hrtry([&, this] { get_prop(value, IntegerDigits); }); }
	STDMETHODIMP _put_IntegerDigits(int value) { return hrtry([&, this] { put_prop(value, IntegerDigits); }); }
	STDMETHODIMP _get_FractionDigits(int *value) { return hrtry([&, this] { get_prop(value, FractionDigits); }); }
	STDMETHODIMP _put_FractionDigits(int value) { return hrtry([&, this] { put_prop(value, FractionDigits); }); }
	STDMETHODIMP _get_IsGrouped(bool *value) { return hrtry([&, this] { get_prop(value, IsGrouped); }); }
	STDMETHODIMP _put_IsGrouped(bool value) { return hrtry([&, this] { put_prop(value, IsGrouped); }); }
	STDMETHODIMP _get_IsDecimalPointAlwaysDisplayed(bool *value) { return hrtry([&, this] { get_prop(value, IsDecimalPointAlwaysDisplayed); }); }
	STDMETHODIMP _put_IsDecimalPointAlwaysDisplayed(bool value) { return hrtry([&, this] { put_prop(value, IsDecimalPointAlwaysDisplayed); }); }
	STDMETHODIMP _get_NumeralSystem(HSTRING *value) { return hrtry([&, this] { get_prop(value, NumeralSystem); }); }
	STDMETHODIMP _put_NumeralSystem(HSTRING value) { return hrtry([&, this] { put_prop(value, NumeralSystem); }); }
	STDMETHODIMP _get_ResolvedLanguage(HSTRING *value) { return hrtry([&, this] { get_prop(value, ResolvedLanguage); }); }
	STDMETHODIMP _get_ResolvedGeographicRegion(HSTRING *value) { return hrtry([&, this] { get_prop(value, ResolvedGeographicRegion); }); }
};
template<typename X> struct unadapt<INumberFormatterOptions, X> : Windows::Globalization::NumberFormatting::INumberFormatterOptions_unadaptor<X> {};
struct INumberFormatterOptions : INumberFormatterOptions_raw, generate<INumberFormatterOptions> {};

// ISignificantDigitsOption
struct ISignificantDigitsOption_raw : IInspectable {
	virtual STDMETHODIMP _get_SignificantDigits(int *value) = 0;
	virtual STDMETHODIMP _put_SignificantDigits(int value) = 0;
};
template<typename X> struct ISignificantDigitsOption_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&ISignificantDigitsOption_adaptor::SignificantDigits)->_get_SignificantDigits(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&ISignificantDigitsOption_adaptor::SignificantDigits)->_put_SignificantDigits(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} SignificantDigits;
	};
	ISignificantDigitsOption_adaptor() {}
};
template<typename X> struct adapt<ISignificantDigitsOption, X> : Windows::Globalization::NumberFormatting::ISignificantDigitsOption_adaptor<X> { typedef adapt ISignificantDigitsOption; };
template<typename X> struct ISignificantDigitsOption_unadaptor : X {
	STDMETHODIMP _get_SignificantDigits(int *value) { return hrtry([&, this] { get_prop(value, SignificantDigits); }); }
	STDMETHODIMP _put_SignificantDigits(int value) { return hrtry([&, this] { put_prop(value, SignificantDigits); }); }
};
template<typename X> struct unadapt<ISignificantDigitsOption, X> : Windows::Globalization::NumberFormatting::ISignificantDigitsOption_unadaptor<X> {};
struct ISignificantDigitsOption : ISignificantDigitsOption_raw, generate<ISignificantDigitsOption> {};

// INumberRounderOption
struct INumberRounderOption_raw : IInspectable {
	virtual STDMETHODIMP _get_NumberRounder(INumberRounder* *value) = 0;
	virtual STDMETHODIMP _put_NumberRounder(INumberRounder* value) = 0;
};
template<typename X> struct INumberRounderOption_adaptor : X {
	union {
		struct : property {
			ptr<INumberRounder> get() { INumberRounder* value; hrcheck(enc(&INumberRounderOption_adaptor::NumberRounder)->_get_NumberRounder(&value)); return from_abi(value); }
			ptr<INumberRounder> operator()() { return get(); }
			operator ptr<INumberRounder> () { return get(); }
			ptr<INumberRounder> operator->() { return get(); }
			void put(pptr<INumberRounder> value) { hrcheck(enc(&INumberRounderOption_adaptor::NumberRounder)->_put_NumberRounder(value)); }
			void operator=(pptr<INumberRounder> value) { put(value); }
			void operator()(pptr<INumberRounder> value) { put(value); }
		} NumberRounder;
	};
	INumberRounderOption_adaptor() {}
};
template<typename X> struct adapt<INumberRounderOption, X> : Windows::Globalization::NumberFormatting::INumberRounderOption_adaptor<X> { typedef adapt INumberRounderOption; };
template<typename X> struct INumberRounderOption_unadaptor : X {
	STDMETHODIMP _get_NumberRounder(INumberRounder* *value) { return hrtry([&, this] { get_prop(value, NumberRounder); }); }
	STDMETHODIMP _put_NumberRounder(INumberRounder* value) { return hrtry([&, this] { put_prop(value, NumberRounder); }); }
};
template<typename X> struct unadapt<INumberRounderOption, X> : Windows::Globalization::NumberFormatting::INumberRounderOption_unadaptor<X> {};
struct INumberRounderOption : INumberRounderOption_raw, generate<INumberRounderOption> {};

// ISignedZeroOption
struct ISignedZeroOption_raw : IInspectable {
	virtual STDMETHODIMP _get_IsZeroSigned(bool *value) = 0;
	virtual STDMETHODIMP _put_IsZeroSigned(bool value) = 0;
};
template<typename X> struct ISignedZeroOption_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&ISignedZeroOption_adaptor::IsZeroSigned)->_get_IsZeroSigned(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&ISignedZeroOption_adaptor::IsZeroSigned)->_put_IsZeroSigned(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsZeroSigned;
	};
	ISignedZeroOption_adaptor() {}
};
template<typename X> struct adapt<ISignedZeroOption, X> : Windows::Globalization::NumberFormatting::ISignedZeroOption_adaptor<X> { typedef adapt ISignedZeroOption; };
template<typename X> struct ISignedZeroOption_unadaptor : X {
	STDMETHODIMP _get_IsZeroSigned(bool *value) { return hrtry([&, this] { get_prop(value, IsZeroSigned); }); }
	STDMETHODIMP _put_IsZeroSigned(bool value) { return hrtry([&, this] { put_prop(value, IsZeroSigned); }); }
};
template<typename X> struct unadapt<ISignedZeroOption, X> : Windows::Globalization::NumberFormatting::ISignedZeroOption_unadaptor<X> {};
struct ISignedZeroOption : ISignedZeroOption_raw, generate<ISignedZeroOption> {};

// IDecimalFormatterFactory
struct IDecimalFormatterFactory : IInspectable {
	virtual STDMETHODIMP _CreateDecimalFormatter(Foundation::Collections::IIterable<HSTRING>* languages, HSTRING geographicRegion, DecimalFormatter* *result);
};

// DecimalFormatter
template<typename> struct DecimalFormatter_statics {
	static DecimalFormatter *activate() { DecimalFormatter *t; get_activation_factory<DecimalFormatter>()->ActivateInstance((IInspectable**)&t); return t; }
	static DecimalFormatter *activate(pptr<Foundation::Collections::IIterable<hstring>> languages, hstring_ref geographicRegion) { DecimalFormatter *result; hrcheck(get_activation_factory<DecimalFormatter, IDecimalFormatterFactory>()->_CreateDecimalFormatter(to_abi(languages), geographicRegion, &result)); return result; }
};

template<typename X> struct statics<DecimalFormatter, X> : X, Windows::Globalization::NumberFormatting::DecimalFormatter_statics<void> {
	using Windows::Globalization::NumberFormatting::DecimalFormatter_statics<void>::activate;
	typedef typename X::root_type DecimalFormatter;
};
struct DecimalFormatter : generate<DecimalFormatter> {
	using INumberFormatter::Format;
};

// IPercentFormatterFactory
struct IPercentFormatterFactory : IInspectable {
	virtual STDMETHODIMP _CreatePercentFormatter(Foundation::Collections::IIterable<HSTRING>* languages, HSTRING geographicRegion, PercentFormatter* *result);
};

// PercentFormatter
template<typename> struct PercentFormatter_statics {
	static PercentFormatter *activate(pptr<Foundation::Collections::IIterable<hstring>> languages, hstring_ref geographicRegion) { PercentFormatter *result; hrcheck(get_activation_factory<PercentFormatter, IPercentFormatterFactory>()->_CreatePercentFormatter(to_abi(languages), geographicRegion, &result)); return result; }
	static PercentFormatter *activate() { PercentFormatter *t; get_activation_factory<PercentFormatter>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<PercentFormatter, X> : X, Windows::Globalization::NumberFormatting::PercentFormatter_statics<void> {
	using Windows::Globalization::NumberFormatting::PercentFormatter_statics<void>::activate;
	typedef typename X::root_type PercentFormatter;
};
struct PercentFormatter : generate<PercentFormatter> {
	using INumberFormatter::Format;
};

// IPermilleFormatterFactory
struct IPermilleFormatterFactory : IInspectable {
	virtual STDMETHODIMP _CreatePermilleFormatter(Foundation::Collections::IIterable<HSTRING>* languages, HSTRING geographicRegion, PermilleFormatter* *result);
};

// PermilleFormatter
template<typename> struct PermilleFormatter_statics {
	static PermilleFormatter *activate(pptr<Foundation::Collections::IIterable<hstring>> languages, hstring_ref geographicRegion) { PermilleFormatter *result; hrcheck(get_activation_factory<PermilleFormatter, IPermilleFormatterFactory>()->_CreatePermilleFormatter(to_abi(languages), geographicRegion, &result)); return result; }
	static PermilleFormatter *activate() { PermilleFormatter *t; get_activation_factory<PermilleFormatter>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<PermilleFormatter, X> : X, Windows::Globalization::NumberFormatting::PermilleFormatter_statics<void> {
	using Windows::Globalization::NumberFormatting::PermilleFormatter_statics<void>::activate;
	typedef typename X::root_type PermilleFormatter;
};
struct PermilleFormatter : generate<PermilleFormatter> {
	using INumberFormatter::Format;
};

// ICurrencyFormatterFactory
struct ICurrencyFormatterFactory : IInspectable {
	virtual STDMETHODIMP _CreateCurrencyFormatterCode(HSTRING currencyCode, CurrencyFormatter* *result);
	virtual STDMETHODIMP _CreateCurrencyFormatterCodeContext(HSTRING currencyCode, Foundation::Collections::IIterable<HSTRING>* languages, HSTRING geographicRegion, CurrencyFormatter* *result);
};

// ICurrencyFormatter2
struct ICurrencyFormatter2_raw : IInspectable {
	virtual STDMETHODIMP _get_Mode(CurrencyFormatterMode *value);
	virtual STDMETHODIMP _put_Mode(CurrencyFormatterMode value);
	virtual STDMETHODIMP _ApplyRoundingForCurrency(RoundingAlgorithm roundingAlgorithm);
};
template<typename X> struct ICurrencyFormatter2_adaptor : X {
	union {
		struct : property {
			CurrencyFormatterMode get() { CurrencyFormatterMode value; hrcheck(enc(&ICurrencyFormatter2_adaptor::Mode)->_get_Mode(&value)); return value; }
			CurrencyFormatterMode operator()() { return get(); }
			operator CurrencyFormatterMode () { return get(); }
			void put(CurrencyFormatterMode value) { hrcheck(enc(&ICurrencyFormatter2_adaptor::Mode)->_put_Mode(value)); }
			void operator=(CurrencyFormatterMode value) { put(value); }
			void operator()(CurrencyFormatterMode value) { put(value); }
		} Mode;
	};
	void ApplyRoundingForCurrency(RoundingAlgorithm roundingAlgorithm) { hrcheck(X::get()->_ApplyRoundingForCurrency(roundingAlgorithm)); }
	ICurrencyFormatter2_adaptor() {}
};
template<typename X> struct adapt<ICurrencyFormatter2, X> : Windows::Globalization::NumberFormatting::ICurrencyFormatter2_adaptor<X> { typedef adapt ICurrencyFormatter2; };
struct ICurrencyFormatter2 : ICurrencyFormatter2_raw, generate<ICurrencyFormatter2> {};

// ICurrencyFormatter
struct ICurrencyFormatter_raw : IInspectable {
	virtual STDMETHODIMP _get_Currency(HSTRING *value);
	virtual STDMETHODIMP _put_Currency(HSTRING value);
};
template<typename X> struct ICurrencyFormatter_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&ICurrencyFormatter_adaptor::Currency)->_get_Currency(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&ICurrencyFormatter_adaptor::Currency)->_put_Currency(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Currency;
	};
	ICurrencyFormatter_adaptor() {}
};
template<typename X> struct adapt<ICurrencyFormatter, X> : Windows::Globalization::NumberFormatting::ICurrencyFormatter_adaptor<X> { typedef adapt ICurrencyFormatter; };
struct ICurrencyFormatter : ICurrencyFormatter_raw, generate<ICurrencyFormatter> {};

// CurrencyFormatter
template<typename> struct CurrencyFormatter_statics {
	static CurrencyFormatter *activate(hstring_ref currencyCode) { CurrencyFormatter *result; hrcheck(get_activation_factory<CurrencyFormatter, ICurrencyFormatterFactory>()->_CreateCurrencyFormatterCode(currencyCode, &result)); return result; }
	static CurrencyFormatter *activate(hstring_ref currencyCode, pptr<Foundation::Collections::IIterable<hstring>> languages, hstring_ref geographicRegion) { CurrencyFormatter *result; hrcheck(get_activation_factory<CurrencyFormatter, ICurrencyFormatterFactory>()->_CreateCurrencyFormatterCodeContext(currencyCode, to_abi(languages), geographicRegion, &result)); return result; }
};

template<typename X> struct statics<CurrencyFormatter, X> : X, Windows::Globalization::NumberFormatting::CurrencyFormatter_statics<void> {
	using Windows::Globalization::NumberFormatting::CurrencyFormatter_statics<void>::activate;
	typedef typename X::root_type CurrencyFormatter;
};
struct CurrencyFormatter : generate<CurrencyFormatter> {
	using INumberFormatter::Format;
};

// INumeralSystemTranslatorFactory
struct INumeralSystemTranslatorFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Collections::IIterable<HSTRING>* languages, NumeralSystemTranslator* *result);
};

// INumeralSystemTranslator
struct INumeralSystemTranslator_raw : IInspectable {
	virtual STDMETHODIMP _get_Languages(Foundation::Collections::IVectorView<HSTRING>* *value);
	virtual STDMETHODIMP _get_ResolvedLanguage(HSTRING *value);
	virtual STDMETHODIMP _get_NumeralSystem(HSTRING *value);
	virtual STDMETHODIMP _put_NumeralSystem(HSTRING value);
	virtual STDMETHODIMP _TranslateNumerals(HSTRING value, HSTRING *result);
};
template<typename X> struct INumeralSystemTranslator_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&INumeralSystemTranslator_adaptor::Languages)->_get_Languages(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} Languages;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INumeralSystemTranslator_adaptor::NumeralSystem)->_get_NumeralSystem(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&INumeralSystemTranslator_adaptor::NumeralSystem)->_put_NumeralSystem(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} NumeralSystem;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&INumeralSystemTranslator_adaptor::ResolvedLanguage)->_get_ResolvedLanguage(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ResolvedLanguage;
	};
	hstring TranslateNumerals(hstring_ref value) { HSTRING result; hrcheck(X::get()->_TranslateNumerals(value, &result)); return from_abi(result); }
	INumeralSystemTranslator_adaptor() {}
};
template<typename X> struct adapt<INumeralSystemTranslator, X> : Windows::Globalization::NumberFormatting::INumeralSystemTranslator_adaptor<X> { typedef adapt INumeralSystemTranslator; };
struct INumeralSystemTranslator : INumeralSystemTranslator_raw, generate<INumeralSystemTranslator> {};

// NumeralSystemTranslator
template<typename> struct NumeralSystemTranslator_statics {
	static NumeralSystemTranslator *activate(pptr<Foundation::Collections::IIterable<hstring>> languages) { NumeralSystemTranslator *result; hrcheck(get_activation_factory<NumeralSystemTranslator, INumeralSystemTranslatorFactory>()->_Create(to_abi(languages), &result)); return result; }
	static NumeralSystemTranslator *activate() { NumeralSystemTranslator *t; get_activation_factory<NumeralSystemTranslator>()->ActivateInstance((IInspectable**)&t); return t; }
};

template<typename X> struct statics<NumeralSystemTranslator, X> : X, Windows::Globalization::NumberFormatting::NumeralSystemTranslator_statics<void> {
	using Windows::Globalization::NumberFormatting::NumeralSystemTranslator_statics<void>::activate;
	typedef typename X::root_type NumeralSystemTranslator;
};
struct NumeralSystemTranslator : generate<NumeralSystemTranslator> {};
}}}
} // namespace iso_winrt
