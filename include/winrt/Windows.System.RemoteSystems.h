#pragma once
// generated by isopod tools
// namespaces:
// Windows.System.RemoteSystems

#include "Windows.System.RemoteSystems.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
struct ValueSet;
template<typename T> struct IIterable;
}}
namespace Networking {
struct HostName;
}}

// defs

template<> struct def<Windows::System::RemoteSystems::RemoteSystemStatus> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemDiscoveryType> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemStatusType> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemAccessStatus> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemAuthorizationKind> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemPlatform> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemWatcherError> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemFilter> : overridable_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemStatics> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemStatics2> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystem4> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystem3> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystem2> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystem> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystem> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystem, Windows::System::RemoteSystems::IRemoteSystem2, Windows::System::RemoteSystems::IRemoteSystem3, Windows::System::RemoteSystems::IRemoteSystem4> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemWatcher2> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemWatcher> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemWatcher> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemWatcher, Windows::System::RemoteSystems::IRemoteSystemWatcher2> {};
template<> struct def<Windows::System::RemoteSystems::IKnownRemoteSystemCapabilitiesStatics> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::KnownRemoteSystemCapabilities> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemAuthorizationKindFilterFactory> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemAuthorizationKindFilter> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemAuthorizationKindFilter> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemAuthorizationKindFilter, Windows::System::RemoteSystems::IRemoteSystemFilter>, custom_activators {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemAddedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemAddedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemUpdatedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemUpdatedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemRemovedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemRemovedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemEnumerationCompletedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemEnumerationCompletedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemEnumerationCompletedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemWatcherErrorOccurredEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemWatcherErrorOccurredEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemWatcherErrorOccurredEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemConnectionRequestFactory> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemConnectionRequest> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemConnectionRequest> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemConnectionRequest>, custom_activators {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemKindStatics> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemKindStatics2> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemKinds> : class_type<Platform::Object, Platform::Object> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemKindFilterFactory> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemKindFilter> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemKindFilter> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemKindFilter, Windows::System::RemoteSystems::IRemoteSystemFilter>, custom_activators {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemDiscoveryTypeFilterFactory> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemDiscoveryTypeFilter> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemDiscoveryTypeFilter> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemDiscoveryTypeFilter, Windows::System::RemoteSystems::IRemoteSystemFilter>, custom_activators {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemStatusTypeFilterFactory> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemStatusTypeFilter> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemStatusTypeFilter> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemStatusTypeFilter, Windows::System::RemoteSystems::IRemoteSystemFilter>, custom_activators {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionJoinStatus> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionJoinResult> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionStatics> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSession> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSession> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSession> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionJoinResult> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionJoinResult> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionInfo> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionInfo> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionInfo> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionAddedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionAddedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionUpdatedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionUpdatedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionUpdatedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionRemovedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionRemovedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionWatcher> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionWatcher> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionWatcher> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionInvitation> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionInvitation> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionInvitation> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionInvitationReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionInvitationReceivedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionInvitationReceivedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionInvitationListener> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionInvitationListener> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionInvitationListener> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionParticipant> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionParticipant> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionParticipant> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionParticipantWatcherStatus> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionParticipantAddedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionParticipantRemovedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionParticipantAddedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionParticipantAddedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionParticipantRemovedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionParticipantRemovedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionParticipantWatcher> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionParticipantWatcher> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionParticipantWatcher> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequest> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionJoinRequest> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequest> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequestedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionJoinRequestedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequestedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionCreationStatus> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionCreationResult> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionCreationResult> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionCreationResult> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionOptions> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionOptions> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionOptions> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionController> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionControllerFactory> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionController> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionController>, custom_activators {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionDisconnectedReason> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionDisconnectedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionDisconnectedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionDisconnectedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionValueSetReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionValueSetReceivedEventArgs> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionValueSetReceivedEventArgs> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionMessageChannelReliability> : enum_type<int> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionMessageChannel> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::IRemoteSystemSessionMessageChannelFactory> : interface_type<> {};
template<> struct def<Windows::System::RemoteSystems::RemoteSystemSessionMessageChannel> : class_type<Platform::Object, Windows::System::RemoteSystems::IRemoteSystemSessionMessageChannel>, custom_activators {};

// uuids

template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemFilter> { define_guid(0x4A3BA9E4, 0x99EB, 0x45EB, 0xBA, 0x16, 0x3, 0x67, 0x72, 0x8F, 0xF3, 0x74);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemStatics> { define_guid(0xA485B392, 0xFF2B, 0x4B47, 0xBE, 0x62, 0x74, 0x3F, 0x2F, 0x14, 0xF, 0x30);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemStatics2> { define_guid(0xC98EDCA, 0x6F99, 0x4C52, 0xA2, 0x72, 0xEA, 0x4F, 0x36, 0x47, 0x17, 0x44);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystem4> { define_guid(0xF164FFE5, 0xB987, 0x4CA5, 0x99, 0x26, 0xFA, 0x4, 0x38, 0xBE, 0x62, 0x73);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystem3> { define_guid(0x72B4B495, 0xB7C6, 0x40BE, 0x83, 0x1B, 0x73, 0x56, 0x2F, 0x12, 0xFF, 0xA8);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystem2> { define_guid(0x9DFE4EC, 0xFB8B, 0x4A08, 0xA7, 0x58, 0x68, 0x76, 0x43, 0x5D, 0x76, 0x9E);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystem> { define_guid(0xED5838CD, 0x1E10, 0x4A8C, 0xB4, 0xA6, 0x4E, 0x5F, 0xD6, 0xF9, 0x77, 0x21);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemWatcher2> { define_guid(0x73436700, 0x19CA, 0x48F9, 0xA4, 0xCD, 0x78, 0xF, 0x7A, 0xD5, 0x8C, 0x71);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemWatcher> { define_guid(0x5D600C7E, 0x2C07, 0x48C5, 0x88, 0x9C, 0x45, 0x5D, 0x2B, 0x9, 0x97, 0x71);};
template<> struct uuid<Windows::System::RemoteSystems::IKnownRemoteSystemCapabilitiesStatics> { define_guid(0x8108E380, 0x7F8A, 0x44E4, 0x92, 0xCD, 0x3, 0xB6, 0x46, 0x9B, 0x94, 0xA3);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemAuthorizationKindFilterFactory> { define_guid(0xAD65DF4D, 0xB66A, 0x45A4, 0x81, 0x77, 0x8C, 0xAE, 0xD7, 0x5D, 0x9E, 0x5A);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemAuthorizationKindFilter> { define_guid(0x6B0DDE8E, 0x4D0, 0x40F4, 0xA2, 0x7F, 0xC2, 0xAC, 0xBB, 0xD6, 0xB7, 0x34);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemAddedEventArgs> { define_guid(0x8F39560F, 0xE534, 0x4697, 0x88, 0x36, 0x7A, 0xBE, 0xA1, 0x51, 0x51, 0x6E);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemUpdatedEventArgs> { define_guid(0x7502FF0E, 0xDBCB, 0x4155, 0xB4, 0xCA, 0xB3, 0xA, 0x4, 0xF2, 0x76, 0x27);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemRemovedEventArgs> { define_guid(0x8B3D16BB, 0x7306, 0x49EA, 0xB7, 0xDF, 0x67, 0xD5, 0x71, 0x4C, 0xB0, 0x13);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemEnumerationCompletedEventArgs> { define_guid(0xC6E83D5F, 0x4030, 0x4354, 0xA0, 0x60, 0x14, 0xF1, 0xB2, 0x2C, 0x54, 0x5D);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemWatcherErrorOccurredEventArgs> { define_guid(0x74C5C6AF, 0x5114, 0x4426, 0x92, 0x16, 0x20, 0xD8, 0x1F, 0x85, 0x19, 0xAE);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemConnectionRequestFactory> { define_guid(0xAA0A0A20, 0xBAEB, 0x4575, 0xB5, 0x30, 0x81, 0xB, 0xB9, 0x78, 0x63, 0x34);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemConnectionRequest> { define_guid(0x84ED4104, 0x8D5E, 0x4D72, 0x82, 0x38, 0x76, 0x21, 0x57, 0x6C, 0x7A, 0x67);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemKindStatics> { define_guid(0xF6317633, 0xAB14, 0x41D0, 0x95, 0x53, 0x79, 0x6A, 0xAD, 0xB8, 0x82, 0xDB);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemKindStatics2> { define_guid(0xB9E3A3D0, 0x466, 0x4749, 0x91, 0xE8, 0x65, 0xF9, 0xD1, 0x9A, 0x96, 0xA5);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemKindFilterFactory> { define_guid(0xA1FB18EE, 0x99EA, 0x40BC, 0x9A, 0x39, 0xC6, 0x70, 0xAA, 0x80, 0x4A, 0x28);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemKindFilter> { define_guid(0x38E1C9EC, 0x22C3, 0x4EF6, 0x90, 0x1A, 0xBB, 0xB1, 0xC7, 0xAA, 0xD4, 0xED);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemDiscoveryTypeFilterFactory> { define_guid(0x9F9EB993, 0xC260, 0x4161, 0x92, 0xF2, 0x9C, 0x2, 0x1F, 0x23, 0xFE, 0x5D);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemDiscoveryTypeFilter> { define_guid(0x42D9041F, 0xEE5A, 0x43DA, 0xAC, 0x6A, 0x6F, 0xEE, 0x25, 0x46, 0x7, 0x41);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemStatusTypeFilterFactory> { define_guid(0x33CF78FA, 0xD724, 0x4125, 0xAC, 0x7A, 0x8D, 0x28, 0x1E, 0x44, 0xC9, 0x49);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemStatusTypeFilter> { define_guid(0xC39514E, 0xCBB6, 0x4777, 0x85, 0x34, 0x2E, 0xC, 0x52, 0x1A, 0xFF, 0xA2);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionJoinResult> { define_guid(0xCE7B1F04, 0xA03E, 0x41A4, 0x90, 0xB, 0x1E, 0x79, 0x32, 0x8C, 0x12, 0x67);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionStatics> { define_guid(0x8524899F, 0xFD20, 0x44E3, 0x95, 0x65, 0xE7, 0x5A, 0x3B, 0x14, 0xC6, 0x6E);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSession> { define_guid(0x69476A01, 0x9ADA, 0x490F, 0x95, 0x49, 0xD3, 0x1C, 0xB1, 0x4C, 0x9E, 0x95);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionInfo> { define_guid(0xFF4DF648, 0x8B0A, 0x4E9A, 0x99, 0x5, 0x69, 0xE4, 0xB8, 0x41, 0xC5, 0x88);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionAddedEventArgs> { define_guid(0xD585D754, 0xBC97, 0x4C39, 0x99, 0xB4, 0xBE, 0xCA, 0x76, 0xE0, 0x4C, 0x3F);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionUpdatedEventArgs> { define_guid(0x16875069, 0x231E, 0x4C91, 0x8E, 0xC8, 0xB3, 0xA3, 0x9D, 0x9E, 0x55, 0xA3);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionRemovedEventArgs> { define_guid(0xAF82914E, 0x39A1, 0x4DEA, 0x9D, 0x63, 0x43, 0x79, 0x8D, 0x5B, 0xBB, 0xD0);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionWatcher> { define_guid(0x8003E340, 0xC41, 0x4A62, 0xB6, 0xD7, 0xBD, 0xBE, 0x2B, 0x19, 0xBE, 0x2D);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionInvitation> { define_guid(0x3E32CC91, 0x51D7, 0x4766, 0xA1, 0x21, 0x25, 0x51, 0x6C, 0x3B, 0x82, 0x94);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionInvitationReceivedEventArgs> { define_guid(0x5E964A2D, 0xA10D, 0x4EDB, 0x8D, 0xEA, 0x54, 0xD2, 0xA, 0xC1, 0x95, 0x43);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionInvitationListener> { define_guid(0x8F4003F, 0xBC71, 0x49E1, 0x87, 0x4A, 0x31, 0xDD, 0xFF, 0x9A, 0x27, 0xB9);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionParticipant> { define_guid(0x7E90058C, 0xACF9, 0x4729, 0x8A, 0x17, 0x44, 0xE7, 0xBA, 0xED, 0x5D, 0xCC);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionParticipantAddedEventArgs> { define_guid(0xD35A57D8, 0xC9A1, 0x4BB7, 0xB6, 0xB0, 0x79, 0xBB, 0x91, 0xAD, 0xF9, 0x3D);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionParticipantRemovedEventArgs> { define_guid(0x866EF088, 0xDE68, 0x4ABF, 0x88, 0xA1, 0xF9, 0xD, 0x16, 0x27, 0x41, 0x92);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionParticipantWatcher> { define_guid(0xDCDD02CC, 0xAA87, 0x4D79, 0xB6, 0xCC, 0x44, 0x59, 0xB3, 0xE9, 0x20, 0x75);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequest> { define_guid(0x20600068, 0x7994, 0x4331, 0x86, 0xD1, 0xD8, 0x9D, 0x88, 0x25, 0x85, 0xEE);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequestedEventArgs> { define_guid(0xDBCA4FC3, 0x82B9, 0x4816, 0x9C, 0x24, 0xE4, 0xE, 0x61, 0x77, 0x4B, 0xD8);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionCreationResult> { define_guid(0xA79812C2, 0x37DE, 0x448C, 0x8B, 0x83, 0xA3, 0xA, 0xA3, 0xC4, 0xEA, 0xD6);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionOptions> { define_guid(0x740ED755, 0x8418, 0x4F01, 0x93, 0x53, 0xE2, 0x1C, 0x9E, 0xCC, 0x6C, 0xFC);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionController> { define_guid(0xE48B2DD2, 0x6820, 0x4867, 0xB4, 0x25, 0xD8, 0x9C, 0xA, 0x3E, 0xF7, 0xBA);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionControllerFactory> { define_guid(0xBFCC2F6B, 0xAC3D, 0x4199, 0x82, 0xCD, 0x66, 0x70, 0xA7, 0x73, 0xEF, 0x2E);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionDisconnectedEventArgs> { define_guid(0xDE0BC69B, 0x77C5, 0x461C, 0x82, 0x9, 0x7C, 0x6C, 0x5D, 0x31, 0x11, 0xAB);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionValueSetReceivedEventArgs> { define_guid(0x6F31785, 0x2DA5, 0x4E58, 0xA7, 0x8F, 0x9E, 0x8D, 0x7, 0x84, 0xEE, 0x25);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionMessageChannel> { define_guid(0x9524D12A, 0x73D9, 0x4C10, 0xB7, 0x51, 0xC2, 0x67, 0x84, 0x43, 0x71, 0x27);};
template<> struct uuid<Windows::System::RemoteSystems::IRemoteSystemSessionMessageChannelFactory> { define_guid(0x295E1C4A, 0xBD16, 0x4298, 0xB7, 0xCE, 0x41, 0x54, 0x82, 0xB0, 0xE1, 0x1D);};

// types

namespace Windows { namespace System { namespace RemoteSystems {

// IRemoteSystemFilter
struct IRemoteSystemFilter : IInspectable, generate<IRemoteSystemFilter> {};

// IRemoteSystemStatics
struct IRemoteSystemStatics : IInspectable {
	virtual STDMETHODIMP _FindByHostNameAsync(Networking::HostName* hostName, Foundation::IAsyncOperation<RemoteSystem*>* *operation);
	virtual STDMETHODIMP _CreateWatcher(RemoteSystemWatcher* *result);
	virtual STDMETHODIMP _CreateWatcherWithFilters(Foundation::Collections::IIterable<IRemoteSystemFilter*>* filters, RemoteSystemWatcher* *result);
	virtual STDMETHODIMP _RequestAccessAsync(Foundation::IAsyncOperation<RemoteSystemAccessStatus>* *operation);
};

// IRemoteSystemStatics2
struct IRemoteSystemStatics2 : IInspectable {
	virtual STDMETHODIMP _IsAuthorizationKindEnabled(RemoteSystemAuthorizationKind kind, bool *value);
};

// IRemoteSystem4
struct IRemoteSystem4_raw : IInspectable {
	virtual STDMETHODIMP _get_Platform(RemoteSystemPlatform *value);
};
template<typename X> struct IRemoteSystem4_adaptor : X {
	union {
		struct : property {
			RemoteSystemPlatform get() { RemoteSystemPlatform value; hrcheck(enc(&IRemoteSystem4_adaptor::Platform)->_get_Platform(&value)); return value; }
			RemoteSystemPlatform operator()() { return get(); }
			operator RemoteSystemPlatform () { return get(); }
		} Platform;
	};
	IRemoteSystem4_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystem4, X> : Windows::System::RemoteSystems::IRemoteSystem4_adaptor<X> { typedef adapt IRemoteSystem4; };
struct IRemoteSystem4 : IRemoteSystem4_raw, generate<IRemoteSystem4> {};

// IRemoteSystem3
struct IRemoteSystem3_raw : IInspectable {
	virtual STDMETHODIMP _get_ManufacturerDisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_ModelDisplayName(HSTRING *value);
};
template<typename X> struct IRemoteSystem3_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystem3_adaptor::ManufacturerDisplayName)->_get_ManufacturerDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ManufacturerDisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystem3_adaptor::ModelDisplayName)->_get_ModelDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ModelDisplayName;
	};
	IRemoteSystem3_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystem3, X> : Windows::System::RemoteSystems::IRemoteSystem3_adaptor<X> { typedef adapt IRemoteSystem3; };
struct IRemoteSystem3 : IRemoteSystem3_raw, generate<IRemoteSystem3> {};

// IRemoteSystem2
struct IRemoteSystem2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsAvailableBySpatialProximity(bool *value);
	virtual STDMETHODIMP _GetCapabilitySupportedAsync(HSTRING capabilityName, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IRemoteSystem2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRemoteSystem2_adaptor::IsAvailableBySpatialProximity)->_get_IsAvailableBySpatialProximity(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAvailableBySpatialProximity;
	};
	ptr<Foundation::IAsyncOperation<bool>> GetCapabilitySupportedAsync(hstring_ref capabilityName) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_GetCapabilitySupportedAsync(capabilityName, &operation)); return from_abi(operation); }
	IRemoteSystem2_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystem2, X> : Windows::System::RemoteSystems::IRemoteSystem2_adaptor<X> { typedef adapt IRemoteSystem2; };
struct IRemoteSystem2 : IRemoteSystem2_raw, generate<IRemoteSystem2> {};

// IRemoteSystem
struct IRemoteSystem_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_Kind(HSTRING *value);
	virtual STDMETHODIMP _get_Status(RemoteSystemStatus *value);
	virtual STDMETHODIMP _get_IsAvailableByProximity(bool *value);
};
template<typename X> struct IRemoteSystem_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystem_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystem_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRemoteSystem_adaptor::IsAvailableByProximity)->_get_IsAvailableByProximity(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAvailableByProximity;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystem_adaptor::Kind)->_get_Kind(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Kind;
		struct : property {
			RemoteSystemStatus get() { RemoteSystemStatus value; hrcheck(enc(&IRemoteSystem_adaptor::Status)->_get_Status(&value)); return value; }
			RemoteSystemStatus operator()() { return get(); }
			operator RemoteSystemStatus () { return get(); }
		} Status;
	};
	IRemoteSystem_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystem, X> : Windows::System::RemoteSystems::IRemoteSystem_adaptor<X> { typedef adapt IRemoteSystem; };
struct IRemoteSystem : IRemoteSystem_raw, generate<IRemoteSystem> {};

// RemoteSystem
template<typename> struct RemoteSystem_statics {
	static bool IsAuthorizationKindEnabled(RemoteSystemAuthorizationKind kind) { bool value; hrcheck(get_activation_factory<RemoteSystem, IRemoteSystemStatics2>()->_IsAuthorizationKindEnabled(kind, &value)); return value; }
	static ptr<Foundation::IAsyncOperation<ptr<RemoteSystem>>> FindByHostNameAsync(pptr<Networking::HostName> hostName) { Foundation::IAsyncOperation<RemoteSystem*>* operation; hrcheck(get_activation_factory<RemoteSystem, IRemoteSystemStatics>()->_FindByHostNameAsync(hostName, &operation)); return from_abi(operation); }
	static ptr<RemoteSystemWatcher> CreateWatcher() { RemoteSystemWatcher* result; hrcheck(get_activation_factory<RemoteSystem, IRemoteSystemStatics>()->_CreateWatcher(&result)); return from_abi(result); }
	static ptr<RemoteSystemWatcher> CreateWatcher(pptr<Foundation::Collections::IIterable<ptr<IRemoteSystemFilter>>> filters) { RemoteSystemWatcher* result; hrcheck(get_activation_factory<RemoteSystem, IRemoteSystemStatics>()->_CreateWatcherWithFilters(to_abi(filters), &result)); return from_abi(result); }
	static ptr<Foundation::IAsyncOperation<RemoteSystemAccessStatus>> RequestAccessAsync() { Foundation::IAsyncOperation<RemoteSystemAccessStatus>* operation; hrcheck(get_activation_factory<RemoteSystem, IRemoteSystemStatics>()->_RequestAccessAsync(&operation)); return from_abi(operation); }
};

template<typename X> struct statics<RemoteSystem, X> : X, Windows::System::RemoteSystems::RemoteSystem_statics<void> {
	typedef typename X::root_type RemoteSystem;
};
struct RemoteSystem : generate<RemoteSystem> {};

// IRemoteSystemWatcher2
struct IRemoteSystemWatcher2_raw : IInspectable {
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<RemoteSystemWatcher*, RemoteSystemEnumerationCompletedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_ErrorOccurred(Foundation::TypedEventHandler<RemoteSystemWatcher*, RemoteSystemWatcherErrorOccurredEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ErrorOccurred(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRemoteSystemWatcher2_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemWatcher>, ptr<RemoteSystemEnumerationCompletedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemWatcher2_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemWatcher2_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemWatcher>, ptr<RemoteSystemWatcherErrorOccurredEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemWatcher2_adaptor::ErrorOccurred)->_add_ErrorOccurred(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemWatcher2_adaptor::ErrorOccurred)->_remove_ErrorOccurred(token)); }
		} ErrorOccurred;
	};
	IRemoteSystemWatcher2_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemWatcher2, X> : Windows::System::RemoteSystems::IRemoteSystemWatcher2_adaptor<X> { typedef adapt IRemoteSystemWatcher2; };
struct IRemoteSystemWatcher2 : IRemoteSystemWatcher2_raw, generate<IRemoteSystemWatcher2> {};

// IRemoteSystemWatcher
struct IRemoteSystemWatcher_raw : IInspectable {
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _add_RemoteSystemAdded(Foundation::TypedEventHandler<RemoteSystemWatcher*, RemoteSystemAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemoteSystemAdded(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RemoteSystemUpdated(Foundation::TypedEventHandler<RemoteSystemWatcher*, RemoteSystemUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemoteSystemUpdated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_RemoteSystemRemoved(Foundation::TypedEventHandler<RemoteSystemWatcher*, RemoteSystemRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_RemoteSystemRemoved(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRemoteSystemWatcher_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemWatcher>, ptr<RemoteSystemAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemWatcher_adaptor::RemoteSystemAdded)->_add_RemoteSystemAdded(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemWatcher_adaptor::RemoteSystemAdded)->_remove_RemoteSystemAdded(token)); }
		} RemoteSystemAdded;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemWatcher>, ptr<RemoteSystemRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemWatcher_adaptor::RemoteSystemRemoved)->_add_RemoteSystemRemoved(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemWatcher_adaptor::RemoteSystemRemoved)->_remove_RemoteSystemRemoved(token)); }
		} RemoteSystemRemoved;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemWatcher>, ptr<RemoteSystemUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemWatcher_adaptor::RemoteSystemUpdated)->_add_RemoteSystemUpdated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemWatcher_adaptor::RemoteSystemUpdated)->_remove_RemoteSystemUpdated(token)); }
		} RemoteSystemUpdated;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IRemoteSystemWatcher_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemWatcher, X> : Windows::System::RemoteSystems::IRemoteSystemWatcher_adaptor<X> { typedef adapt IRemoteSystemWatcher; };
struct IRemoteSystemWatcher : IRemoteSystemWatcher_raw, generate<IRemoteSystemWatcher> {};

// RemoteSystemWatcher
template<typename X> struct statics<RemoteSystemWatcher, X> : X {
	typedef typename X::root_type RemoteSystemWatcher;
};
struct RemoteSystemWatcher : generate<RemoteSystemWatcher> {};

// IKnownRemoteSystemCapabilitiesStatics
struct IKnownRemoteSystemCapabilitiesStatics : IInspectable {
	virtual STDMETHODIMP _get_AppService(HSTRING *value);
	virtual STDMETHODIMP _get_LaunchUri(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteSession(HSTRING *value);
	virtual STDMETHODIMP _get_SpatialEntity(HSTRING *value);
};

// KnownRemoteSystemCapabilities
template<typename> struct KnownRemoteSystemCapabilities_statics {
	static struct _AppService : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRemoteSystemCapabilities, IKnownRemoteSystemCapabilitiesStatics>()->_get_AppService(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} AppService;
	static struct _LaunchUri : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRemoteSystemCapabilities, IKnownRemoteSystemCapabilitiesStatics>()->_get_LaunchUri(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} LaunchUri;
	static struct _RemoteSession : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRemoteSystemCapabilities, IKnownRemoteSystemCapabilitiesStatics>()->_get_RemoteSession(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} RemoteSession;
	static struct _SpatialEntity : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<KnownRemoteSystemCapabilities, IKnownRemoteSystemCapabilitiesStatics>()->_get_SpatialEntity(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} SpatialEntity;
};
template<typename X> typename KnownRemoteSystemCapabilities_statics<X>::_AppService KnownRemoteSystemCapabilities_statics<X>::AppService;
template<typename X> typename KnownRemoteSystemCapabilities_statics<X>::_LaunchUri KnownRemoteSystemCapabilities_statics<X>::LaunchUri;
template<typename X> typename KnownRemoteSystemCapabilities_statics<X>::_RemoteSession KnownRemoteSystemCapabilities_statics<X>::RemoteSession;
template<typename X> typename KnownRemoteSystemCapabilities_statics<X>::_SpatialEntity KnownRemoteSystemCapabilities_statics<X>::SpatialEntity;

template<typename X> struct statics<KnownRemoteSystemCapabilities, X> : X, Windows::System::RemoteSystems::KnownRemoteSystemCapabilities_statics<void> {
	typedef typename X::root_type KnownRemoteSystemCapabilities;
};
struct KnownRemoteSystemCapabilities : generate<KnownRemoteSystemCapabilities> {};

// IRemoteSystemAuthorizationKindFilterFactory
struct IRemoteSystemAuthorizationKindFilterFactory : IInspectable {
	virtual STDMETHODIMP _Create(RemoteSystemAuthorizationKind remoteSystemAuthorizationKind, RemoteSystemAuthorizationKindFilter* *result);
};

// IRemoteSystemAuthorizationKindFilter
struct IRemoteSystemAuthorizationKindFilter_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystemAuthorizationKind(RemoteSystems::RemoteSystemAuthorizationKind *value);
};
template<typename X> struct IRemoteSystemAuthorizationKindFilter_adaptor : X {
	union {
		struct : property {
			RemoteSystems::RemoteSystemAuthorizationKind get() { RemoteSystems::RemoteSystemAuthorizationKind value; hrcheck(enc(&IRemoteSystemAuthorizationKindFilter_adaptor::RemoteSystemAuthorizationKind)->_get_RemoteSystemAuthorizationKind(&value)); return value; }
			RemoteSystems::RemoteSystemAuthorizationKind operator()() { return get(); }
			operator RemoteSystems::RemoteSystemAuthorizationKind () { return get(); }
		} RemoteSystemAuthorizationKind;
	};
	IRemoteSystemAuthorizationKindFilter_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemAuthorizationKindFilter, X> : Windows::System::RemoteSystems::IRemoteSystemAuthorizationKindFilter_adaptor<X> { typedef adapt IRemoteSystemAuthorizationKindFilter; };
struct IRemoteSystemAuthorizationKindFilter : IRemoteSystemAuthorizationKindFilter_raw, generate<IRemoteSystemAuthorizationKindFilter> {};

// RemoteSystemAuthorizationKindFilter
template<typename> struct RemoteSystemAuthorizationKindFilter_statics {
	static RemoteSystemAuthorizationKindFilter *activate(RemoteSystems::RemoteSystemAuthorizationKind remoteSystemAuthorizationKind) { RemoteSystemAuthorizationKindFilter *result; hrcheck(get_activation_factory<RemoteSystemAuthorizationKindFilter, IRemoteSystemAuthorizationKindFilterFactory>()->_Create(remoteSystemAuthorizationKind, &result)); return result; }
};

template<typename X> struct statics<RemoteSystemAuthorizationKindFilter, X> : X, Windows::System::RemoteSystems::RemoteSystemAuthorizationKindFilter_statics<void> {
	using Windows::System::RemoteSystems::RemoteSystemAuthorizationKindFilter_statics<void>::activate;
	typedef typename X::root_type RemoteSystemAuthorizationKindFilter;
};
struct RemoteSystemAuthorizationKindFilter : generate<RemoteSystemAuthorizationKindFilter> {};

// IRemoteSystemAddedEventArgs
struct IRemoteSystemAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystem(RemoteSystems::RemoteSystem* *value);
};
template<typename X> struct IRemoteSystemAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystems::RemoteSystem> get() { RemoteSystems::RemoteSystem* value; hrcheck(enc(&IRemoteSystemAddedEventArgs_adaptor::RemoteSystem)->_get_RemoteSystem(&value)); return from_abi(value); }
			ptr<RemoteSystems::RemoteSystem> operator()() { return get(); }
			operator ptr<RemoteSystems::RemoteSystem> () { return get(); }
			ptr<RemoteSystems::RemoteSystem> operator->() { return get(); }
		} RemoteSystem;
	};
	IRemoteSystemAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemAddedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemAddedEventArgs_adaptor<X> { typedef adapt IRemoteSystemAddedEventArgs; };
struct IRemoteSystemAddedEventArgs : IRemoteSystemAddedEventArgs_raw, generate<IRemoteSystemAddedEventArgs> {};

// RemoteSystemAddedEventArgs
template<typename X> struct statics<RemoteSystemAddedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemAddedEventArgs;
};
struct RemoteSystemAddedEventArgs : generate<RemoteSystemAddedEventArgs> {};

// IRemoteSystemUpdatedEventArgs
struct IRemoteSystemUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystem(RemoteSystems::RemoteSystem* *value);
};
template<typename X> struct IRemoteSystemUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystems::RemoteSystem> get() { RemoteSystems::RemoteSystem* value; hrcheck(enc(&IRemoteSystemUpdatedEventArgs_adaptor::RemoteSystem)->_get_RemoteSystem(&value)); return from_abi(value); }
			ptr<RemoteSystems::RemoteSystem> operator()() { return get(); }
			operator ptr<RemoteSystems::RemoteSystem> () { return get(); }
			ptr<RemoteSystems::RemoteSystem> operator->() { return get(); }
		} RemoteSystem;
	};
	IRemoteSystemUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemUpdatedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemUpdatedEventArgs_adaptor<X> { typedef adapt IRemoteSystemUpdatedEventArgs; };
struct IRemoteSystemUpdatedEventArgs : IRemoteSystemUpdatedEventArgs_raw, generate<IRemoteSystemUpdatedEventArgs> {};

// RemoteSystemUpdatedEventArgs
template<typename X> struct statics<RemoteSystemUpdatedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemUpdatedEventArgs;
};
struct RemoteSystemUpdatedEventArgs : generate<RemoteSystemUpdatedEventArgs> {};

// IRemoteSystemRemovedEventArgs
struct IRemoteSystemRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystemId(HSTRING *value);
};
template<typename X> struct IRemoteSystemRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystemRemovedEventArgs_adaptor::RemoteSystemId)->_get_RemoteSystemId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} RemoteSystemId;
	};
	IRemoteSystemRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemRemovedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemRemovedEventArgs_adaptor<X> { typedef adapt IRemoteSystemRemovedEventArgs; };
struct IRemoteSystemRemovedEventArgs : IRemoteSystemRemovedEventArgs_raw, generate<IRemoteSystemRemovedEventArgs> {};

// RemoteSystemRemovedEventArgs
template<typename X> struct statics<RemoteSystemRemovedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemRemovedEventArgs;
};
struct RemoteSystemRemovedEventArgs : generate<RemoteSystemRemovedEventArgs> {};

// IRemoteSystemEnumerationCompletedEventArgs
struct IRemoteSystemEnumerationCompletedEventArgs : IInspectable, generate<IRemoteSystemEnumerationCompletedEventArgs> {};

// RemoteSystemEnumerationCompletedEventArgs
template<typename X> struct statics<RemoteSystemEnumerationCompletedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemEnumerationCompletedEventArgs;
};
struct RemoteSystemEnumerationCompletedEventArgs : generate<RemoteSystemEnumerationCompletedEventArgs> {};

// IRemoteSystemWatcherErrorOccurredEventArgs
struct IRemoteSystemWatcherErrorOccurredEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Error(RemoteSystemWatcherError *value);
};
template<typename X> struct IRemoteSystemWatcherErrorOccurredEventArgs_adaptor : X {
	union {
		struct : property {
			RemoteSystemWatcherError get() { RemoteSystemWatcherError value; hrcheck(enc(&IRemoteSystemWatcherErrorOccurredEventArgs_adaptor::Error)->_get_Error(&value)); return value; }
			RemoteSystemWatcherError operator()() { return get(); }
			operator RemoteSystemWatcherError () { return get(); }
		} Error;
	};
	IRemoteSystemWatcherErrorOccurredEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemWatcherErrorOccurredEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemWatcherErrorOccurredEventArgs_adaptor<X> { typedef adapt IRemoteSystemWatcherErrorOccurredEventArgs; };
struct IRemoteSystemWatcherErrorOccurredEventArgs : IRemoteSystemWatcherErrorOccurredEventArgs_raw, generate<IRemoteSystemWatcherErrorOccurredEventArgs> {};

// RemoteSystemWatcherErrorOccurredEventArgs
template<typename X> struct statics<RemoteSystemWatcherErrorOccurredEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemWatcherErrorOccurredEventArgs;
};
struct RemoteSystemWatcherErrorOccurredEventArgs : generate<RemoteSystemWatcherErrorOccurredEventArgs> {};

// IRemoteSystemConnectionRequestFactory
struct IRemoteSystemConnectionRequestFactory : IInspectable {
	virtual STDMETHODIMP _Create(RemoteSystem* remoteSystem, RemoteSystemConnectionRequest* *result);
};

// IRemoteSystemConnectionRequest
struct IRemoteSystemConnectionRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystem(RemoteSystems::RemoteSystem* *value);
};
template<typename X> struct IRemoteSystemConnectionRequest_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystems::RemoteSystem> get() { RemoteSystems::RemoteSystem* value; hrcheck(enc(&IRemoteSystemConnectionRequest_adaptor::RemoteSystem)->_get_RemoteSystem(&value)); return from_abi(value); }
			ptr<RemoteSystems::RemoteSystem> operator()() { return get(); }
			operator ptr<RemoteSystems::RemoteSystem> () { return get(); }
			ptr<RemoteSystems::RemoteSystem> operator->() { return get(); }
		} RemoteSystem;
	};
	IRemoteSystemConnectionRequest_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemConnectionRequest, X> : Windows::System::RemoteSystems::IRemoteSystemConnectionRequest_adaptor<X> { typedef adapt IRemoteSystemConnectionRequest; };
struct IRemoteSystemConnectionRequest : IRemoteSystemConnectionRequest_raw, generate<IRemoteSystemConnectionRequest> {};

// RemoteSystemConnectionRequest
template<typename> struct RemoteSystemConnectionRequest_statics {
	static RemoteSystemConnectionRequest *activate(pptr<RemoteSystems::RemoteSystem> remoteSystem) { RemoteSystemConnectionRequest *result; hrcheck(get_activation_factory<RemoteSystemConnectionRequest, IRemoteSystemConnectionRequestFactory>()->_Create(remoteSystem, &result)); return result; }
};

template<typename X> struct statics<RemoteSystemConnectionRequest, X> : X, Windows::System::RemoteSystems::RemoteSystemConnectionRequest_statics<void> {
	using Windows::System::RemoteSystems::RemoteSystemConnectionRequest_statics<void>::activate;
	typedef typename X::root_type RemoteSystemConnectionRequest;
};
struct RemoteSystemConnectionRequest : generate<RemoteSystemConnectionRequest> {};

// IRemoteSystemKindStatics
struct IRemoteSystemKindStatics : IInspectable {
	virtual STDMETHODIMP _get_Phone(HSTRING *value);
	virtual STDMETHODIMP _get_Hub(HSTRING *value);
	virtual STDMETHODIMP _get_Holographic(HSTRING *value);
	virtual STDMETHODIMP _get_Desktop(HSTRING *value);
	virtual STDMETHODIMP _get_Xbox(HSTRING *value);
};

// IRemoteSystemKindStatics2
struct IRemoteSystemKindStatics2 : IInspectable {
	virtual STDMETHODIMP _get_Iot(HSTRING *value);
	virtual STDMETHODIMP _get_Tablet(HSTRING *value);
	virtual STDMETHODIMP _get_Laptop(HSTRING *value);
};

// RemoteSystemKinds
template<typename> struct RemoteSystemKinds_statics {
	static struct _Desktop : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics>()->_get_Desktop(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Desktop;
	static struct _Holographic : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics>()->_get_Holographic(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Holographic;
	static struct _Hub : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics>()->_get_Hub(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Hub;
	static struct _Phone : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics>()->_get_Phone(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Phone;
	static struct _Xbox : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics>()->_get_Xbox(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Xbox;
	static struct _Iot : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics2>()->_get_Iot(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Iot;
	static struct _Laptop : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics2>()->_get_Laptop(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Laptop;
	static struct _Tablet : property {
		hstring get() { HSTRING value; hrcheck(get_activation_factory<RemoteSystemKinds, IRemoteSystemKindStatics2>()->_get_Tablet(&value)); return from_abi(value); }
		hstring operator()() { return get(); }
		operator hstring_ref () { return get(); }
	} Tablet;
};
template<typename X> typename RemoteSystemKinds_statics<X>::_Desktop RemoteSystemKinds_statics<X>::Desktop;
template<typename X> typename RemoteSystemKinds_statics<X>::_Holographic RemoteSystemKinds_statics<X>::Holographic;
template<typename X> typename RemoteSystemKinds_statics<X>::_Hub RemoteSystemKinds_statics<X>::Hub;
template<typename X> typename RemoteSystemKinds_statics<X>::_Phone RemoteSystemKinds_statics<X>::Phone;
template<typename X> typename RemoteSystemKinds_statics<X>::_Xbox RemoteSystemKinds_statics<X>::Xbox;
template<typename X> typename RemoteSystemKinds_statics<X>::_Iot RemoteSystemKinds_statics<X>::Iot;
template<typename X> typename RemoteSystemKinds_statics<X>::_Laptop RemoteSystemKinds_statics<X>::Laptop;
template<typename X> typename RemoteSystemKinds_statics<X>::_Tablet RemoteSystemKinds_statics<X>::Tablet;

template<typename X> struct statics<RemoteSystemKinds, X> : X, Windows::System::RemoteSystems::RemoteSystemKinds_statics<void> {
	typedef typename X::root_type RemoteSystemKinds;
};
struct RemoteSystemKinds : generate<RemoteSystemKinds> {};

// IRemoteSystemKindFilterFactory
struct IRemoteSystemKindFilterFactory : IInspectable {
	virtual STDMETHODIMP _Create(Foundation::Collections::IIterable<HSTRING>* remoteSystemKinds, RemoteSystemKindFilter* *result);
};

// IRemoteSystemKindFilter
struct IRemoteSystemKindFilter_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystemKinds(Foundation::Collections::IVectorView<HSTRING>* *value);
};
template<typename X> struct IRemoteSystemKindFilter_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<hstring>> get() { Foundation::Collections::IVectorView<HSTRING>* value; hrcheck(enc(&IRemoteSystemKindFilter_adaptor::RemoteSystemKinds)->_get_RemoteSystemKinds(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<hstring>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<hstring>> operator->() { return get(); }
		} RemoteSystemKinds;
	};
	IRemoteSystemKindFilter_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemKindFilter, X> : Windows::System::RemoteSystems::IRemoteSystemKindFilter_adaptor<X> { typedef adapt IRemoteSystemKindFilter; };
struct IRemoteSystemKindFilter : IRemoteSystemKindFilter_raw, generate<IRemoteSystemKindFilter> {};

// RemoteSystemKindFilter
template<typename> struct RemoteSystemKindFilter_statics {
	static RemoteSystemKindFilter *activate(pptr<Foundation::Collections::IIterable<hstring>> remoteSystemKinds) { RemoteSystemKindFilter *result; hrcheck(get_activation_factory<RemoteSystemKindFilter, IRemoteSystemKindFilterFactory>()->_Create(to_abi(remoteSystemKinds), &result)); return result; }
};

template<typename X> struct statics<RemoteSystemKindFilter, X> : X, Windows::System::RemoteSystems::RemoteSystemKindFilter_statics<void> {
	using Windows::System::RemoteSystems::RemoteSystemKindFilter_statics<void>::activate;
	typedef typename X::root_type RemoteSystemKindFilter;
};
struct RemoteSystemKindFilter : generate<RemoteSystemKindFilter> {};

// IRemoteSystemDiscoveryTypeFilterFactory
struct IRemoteSystemDiscoveryTypeFilterFactory : IInspectable {
	virtual STDMETHODIMP _Create(RemoteSystemDiscoveryType discoveryType, RemoteSystemDiscoveryTypeFilter* *result);
};

// IRemoteSystemDiscoveryTypeFilter
struct IRemoteSystemDiscoveryTypeFilter_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystemDiscoveryType(RemoteSystems::RemoteSystemDiscoveryType *value);
};
template<typename X> struct IRemoteSystemDiscoveryTypeFilter_adaptor : X {
	union {
		struct : property {
			RemoteSystems::RemoteSystemDiscoveryType get() { RemoteSystems::RemoteSystemDiscoveryType value; hrcheck(enc(&IRemoteSystemDiscoveryTypeFilter_adaptor::RemoteSystemDiscoveryType)->_get_RemoteSystemDiscoveryType(&value)); return value; }
			RemoteSystems::RemoteSystemDiscoveryType operator()() { return get(); }
			operator RemoteSystems::RemoteSystemDiscoveryType () { return get(); }
		} RemoteSystemDiscoveryType;
	};
	IRemoteSystemDiscoveryTypeFilter_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemDiscoveryTypeFilter, X> : Windows::System::RemoteSystems::IRemoteSystemDiscoveryTypeFilter_adaptor<X> { typedef adapt IRemoteSystemDiscoveryTypeFilter; };
struct IRemoteSystemDiscoveryTypeFilter : IRemoteSystemDiscoveryTypeFilter_raw, generate<IRemoteSystemDiscoveryTypeFilter> {};

// RemoteSystemDiscoveryTypeFilter
template<typename> struct RemoteSystemDiscoveryTypeFilter_statics {
	static RemoteSystemDiscoveryTypeFilter *activate(RemoteSystems::RemoteSystemDiscoveryType discoveryType) { RemoteSystemDiscoveryTypeFilter *result; hrcheck(get_activation_factory<RemoteSystemDiscoveryTypeFilter, IRemoteSystemDiscoveryTypeFilterFactory>()->_Create(discoveryType, &result)); return result; }
};

template<typename X> struct statics<RemoteSystemDiscoveryTypeFilter, X> : X, Windows::System::RemoteSystems::RemoteSystemDiscoveryTypeFilter_statics<void> {
	using Windows::System::RemoteSystems::RemoteSystemDiscoveryTypeFilter_statics<void>::activate;
	typedef typename X::root_type RemoteSystemDiscoveryTypeFilter;
};
struct RemoteSystemDiscoveryTypeFilter : generate<RemoteSystemDiscoveryTypeFilter> {};

// IRemoteSystemStatusTypeFilterFactory
struct IRemoteSystemStatusTypeFilterFactory : IInspectable {
	virtual STDMETHODIMP _Create(RemoteSystemStatusType remoteSystemStatusType, RemoteSystemStatusTypeFilter* *result);
};

// IRemoteSystemStatusTypeFilter
struct IRemoteSystemStatusTypeFilter_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystemStatusType(RemoteSystems::RemoteSystemStatusType *value);
};
template<typename X> struct IRemoteSystemStatusTypeFilter_adaptor : X {
	union {
		struct : property {
			RemoteSystems::RemoteSystemStatusType get() { RemoteSystems::RemoteSystemStatusType value; hrcheck(enc(&IRemoteSystemStatusTypeFilter_adaptor::RemoteSystemStatusType)->_get_RemoteSystemStatusType(&value)); return value; }
			RemoteSystems::RemoteSystemStatusType operator()() { return get(); }
			operator RemoteSystems::RemoteSystemStatusType () { return get(); }
		} RemoteSystemStatusType;
	};
	IRemoteSystemStatusTypeFilter_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemStatusTypeFilter, X> : Windows::System::RemoteSystems::IRemoteSystemStatusTypeFilter_adaptor<X> { typedef adapt IRemoteSystemStatusTypeFilter; };
struct IRemoteSystemStatusTypeFilter : IRemoteSystemStatusTypeFilter_raw, generate<IRemoteSystemStatusTypeFilter> {};

// RemoteSystemStatusTypeFilter
template<typename> struct RemoteSystemStatusTypeFilter_statics {
	static RemoteSystemStatusTypeFilter *activate(RemoteSystems::RemoteSystemStatusType remoteSystemStatusType) { RemoteSystemStatusTypeFilter *result; hrcheck(get_activation_factory<RemoteSystemStatusTypeFilter, IRemoteSystemStatusTypeFilterFactory>()->_Create(remoteSystemStatusType, &result)); return result; }
};

template<typename X> struct statics<RemoteSystemStatusTypeFilter, X> : X, Windows::System::RemoteSystems::RemoteSystemStatusTypeFilter_statics<void> {
	using Windows::System::RemoteSystems::RemoteSystemStatusTypeFilter_statics<void>::activate;
	typedef typename X::root_type RemoteSystemStatusTypeFilter;
};
struct RemoteSystemStatusTypeFilter : generate<RemoteSystemStatusTypeFilter> {};

// IRemoteSystemSessionJoinResult
struct IRemoteSystemSessionJoinResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(RemoteSystemSessionJoinStatus *value);
	virtual STDMETHODIMP _get_Session(RemoteSystemSession* *value);
};
template<typename X> struct IRemoteSystemSessionJoinResult_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSession> get() { RemoteSystemSession* value; hrcheck(enc(&IRemoteSystemSessionJoinResult_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<RemoteSystemSession> operator()() { return get(); }
			operator ptr<RemoteSystemSession> () { return get(); }
			ptr<RemoteSystemSession> operator->() { return get(); }
		} Session;
		struct : property {
			RemoteSystemSessionJoinStatus get() { RemoteSystemSessionJoinStatus value; hrcheck(enc(&IRemoteSystemSessionJoinResult_adaptor::Status)->_get_Status(&value)); return value; }
			RemoteSystemSessionJoinStatus operator()() { return get(); }
			operator RemoteSystemSessionJoinStatus () { return get(); }
		} Status;
	};
	IRemoteSystemSessionJoinResult_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionJoinResult, X> : Windows::System::RemoteSystems::IRemoteSystemSessionJoinResult_adaptor<X> { typedef adapt IRemoteSystemSessionJoinResult; };
struct IRemoteSystemSessionJoinResult : IRemoteSystemSessionJoinResult_raw, generate<IRemoteSystemSessionJoinResult> {};

// IRemoteSystemSessionStatics
struct IRemoteSystemSessionStatics : IInspectable {
	virtual STDMETHODIMP _CreateWatcher(RemoteSystemSessionWatcher* *result);
};

// IRemoteSystemSession
struct IRemoteSystemSession_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_ControllerDisplayName(HSTRING *value);
	virtual STDMETHODIMP _add_Disconnected(Foundation::TypedEventHandler<RemoteSystemSession*, RemoteSystemSessionDisconnectedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Disconnected(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _CreateParticipantWatcher(RemoteSystemSessionParticipantWatcher* *result);
	virtual STDMETHODIMP _SendInvitationAsync(RemoteSystem* invitee, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IRemoteSystemSession_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystemSession_adaptor::ControllerDisplayName)->_get_ControllerDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ControllerDisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystemSession_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystemSession_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSession>, ptr<RemoteSystemSessionDisconnectedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSession_adaptor::Disconnected)->_add_Disconnected(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSession_adaptor::Disconnected)->_remove_Disconnected(token)); }
		} Disconnected;
	};
	ptr<RemoteSystemSessionParticipantWatcher> CreateParticipantWatcher() { RemoteSystemSessionParticipantWatcher* result; hrcheck(X::get()->_CreateParticipantWatcher(&result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<bool>> SendInvitationAsync(pptr<RemoteSystem> invitee) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_SendInvitationAsync(invitee, &operation)); return from_abi(operation); }
	IRemoteSystemSession_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSession, X> : Windows::System::RemoteSystems::IRemoteSystemSession_adaptor<X> { typedef adapt IRemoteSystemSession; };
struct IRemoteSystemSession : IRemoteSystemSession_raw, generate<IRemoteSystemSession> {};

// RemoteSystemSession
template<typename> struct RemoteSystemSession_statics {
	static ptr<RemoteSystemSessionWatcher> CreateWatcher() { RemoteSystemSessionWatcher* result; hrcheck(get_activation_factory<RemoteSystemSession, IRemoteSystemSessionStatics>()->_CreateWatcher(&result)); return from_abi(result); }
};

template<typename X> struct statics<RemoteSystemSession, X> : X, Windows::System::RemoteSystems::RemoteSystemSession_statics<void> {
	typedef typename X::root_type RemoteSystemSession;
};
struct RemoteSystemSession : generate<RemoteSystemSession> {};

// RemoteSystemSessionJoinResult
template<typename X> struct statics<RemoteSystemSessionJoinResult, X> : X {
	typedef typename X::root_type RemoteSystemSessionJoinResult;
};
struct RemoteSystemSessionJoinResult : generate<RemoteSystemSessionJoinResult> {};

// IRemoteSystemSessionInfo
struct IRemoteSystemSessionInfo_raw : IInspectable {
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_ControllerDisplayName(HSTRING *value);
	virtual STDMETHODIMP _JoinAsync(Foundation::IAsyncOperation<RemoteSystemSessionJoinResult*>* *operation);
};
template<typename X> struct IRemoteSystemSessionInfo_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystemSessionInfo_adaptor::ControllerDisplayName)->_get_ControllerDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ControllerDisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IRemoteSystemSessionInfo_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} DisplayName;
	};
	ptr<Foundation::IAsyncOperation<ptr<RemoteSystemSessionJoinResult>>> JoinAsync() { Foundation::IAsyncOperation<RemoteSystemSessionJoinResult*>* operation; hrcheck(X::get()->_JoinAsync(&operation)); return from_abi(operation); }
	IRemoteSystemSessionInfo_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionInfo, X> : Windows::System::RemoteSystems::IRemoteSystemSessionInfo_adaptor<X> { typedef adapt IRemoteSystemSessionInfo; };
struct IRemoteSystemSessionInfo : IRemoteSystemSessionInfo_raw, generate<IRemoteSystemSessionInfo> {};

// RemoteSystemSessionInfo
template<typename X> struct statics<RemoteSystemSessionInfo, X> : X {
	typedef typename X::root_type RemoteSystemSessionInfo;
};
struct RemoteSystemSessionInfo : generate<RemoteSystemSessionInfo> {};

// IRemoteSystemSessionAddedEventArgs
struct IRemoteSystemSessionAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SessionInfo(RemoteSystemSessionInfo* *value);
};
template<typename X> struct IRemoteSystemSessionAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionInfo> get() { RemoteSystemSessionInfo* value; hrcheck(enc(&IRemoteSystemSessionAddedEventArgs_adaptor::SessionInfo)->_get_SessionInfo(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionInfo> operator()() { return get(); }
			operator ptr<RemoteSystemSessionInfo> () { return get(); }
			ptr<RemoteSystemSessionInfo> operator->() { return get(); }
		} SessionInfo;
	};
	IRemoteSystemSessionAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionAddedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionAddedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionAddedEventArgs; };
struct IRemoteSystemSessionAddedEventArgs : IRemoteSystemSessionAddedEventArgs_raw, generate<IRemoteSystemSessionAddedEventArgs> {};

// RemoteSystemSessionAddedEventArgs
template<typename X> struct statics<RemoteSystemSessionAddedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionAddedEventArgs;
};
struct RemoteSystemSessionAddedEventArgs : generate<RemoteSystemSessionAddedEventArgs> {};

// IRemoteSystemSessionUpdatedEventArgs
struct IRemoteSystemSessionUpdatedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SessionInfo(RemoteSystemSessionInfo* *value);
};
template<typename X> struct IRemoteSystemSessionUpdatedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionInfo> get() { RemoteSystemSessionInfo* value; hrcheck(enc(&IRemoteSystemSessionUpdatedEventArgs_adaptor::SessionInfo)->_get_SessionInfo(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionInfo> operator()() { return get(); }
			operator ptr<RemoteSystemSessionInfo> () { return get(); }
			ptr<RemoteSystemSessionInfo> operator->() { return get(); }
		} SessionInfo;
	};
	IRemoteSystemSessionUpdatedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionUpdatedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionUpdatedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionUpdatedEventArgs; };
struct IRemoteSystemSessionUpdatedEventArgs : IRemoteSystemSessionUpdatedEventArgs_raw, generate<IRemoteSystemSessionUpdatedEventArgs> {};

// RemoteSystemSessionUpdatedEventArgs
template<typename X> struct statics<RemoteSystemSessionUpdatedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionUpdatedEventArgs;
};
struct RemoteSystemSessionUpdatedEventArgs : generate<RemoteSystemSessionUpdatedEventArgs> {};

// IRemoteSystemSessionRemovedEventArgs
struct IRemoteSystemSessionRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_SessionInfo(RemoteSystemSessionInfo* *value);
};
template<typename X> struct IRemoteSystemSessionRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionInfo> get() { RemoteSystemSessionInfo* value; hrcheck(enc(&IRemoteSystemSessionRemovedEventArgs_adaptor::SessionInfo)->_get_SessionInfo(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionInfo> operator()() { return get(); }
			operator ptr<RemoteSystemSessionInfo> () { return get(); }
			ptr<RemoteSystemSessionInfo> operator->() { return get(); }
		} SessionInfo;
	};
	IRemoteSystemSessionRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionRemovedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionRemovedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionRemovedEventArgs; };
struct IRemoteSystemSessionRemovedEventArgs : IRemoteSystemSessionRemovedEventArgs_raw, generate<IRemoteSystemSessionRemovedEventArgs> {};

// RemoteSystemSessionRemovedEventArgs
template<typename X> struct statics<RemoteSystemSessionRemovedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionRemovedEventArgs;
};
struct RemoteSystemSessionRemovedEventArgs : generate<RemoteSystemSessionRemovedEventArgs> {};

// IRemoteSystemSessionWatcher
struct IRemoteSystemSessionWatcher_raw : IInspectable {
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _get_Status(RemoteSystemSessionWatcherStatus *value);
	virtual STDMETHODIMP _add_Added(Foundation::TypedEventHandler<RemoteSystemSessionWatcher*, RemoteSystemSessionAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Added(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Updated(Foundation::TypedEventHandler<RemoteSystemSessionWatcher*, RemoteSystemSessionUpdatedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Updated(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Removed(Foundation::TypedEventHandler<RemoteSystemSessionWatcher*, RemoteSystemSessionRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Removed(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRemoteSystemSessionWatcher_adaptor : X {
	union {
		struct : property {
			RemoteSystemSessionWatcherStatus get() { RemoteSystemSessionWatcherStatus value; hrcheck(enc(&IRemoteSystemSessionWatcher_adaptor::Status)->_get_Status(&value)); return value; }
			RemoteSystemSessionWatcherStatus operator()() { return get(); }
			operator RemoteSystemSessionWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionWatcher>, ptr<RemoteSystemSessionAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionWatcher_adaptor::Added)->_add_Added(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionWatcher_adaptor::Added)->_remove_Added(token)); }
		} Added;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionWatcher>, ptr<RemoteSystemSessionRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionWatcher_adaptor::Removed)->_add_Removed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionWatcher_adaptor::Removed)->_remove_Removed(token)); }
		} Removed;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionWatcher>, ptr<RemoteSystemSessionUpdatedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionWatcher_adaptor::Updated)->_add_Updated(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionWatcher_adaptor::Updated)->_remove_Updated(token)); }
		} Updated;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IRemoteSystemSessionWatcher_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionWatcher, X> : Windows::System::RemoteSystems::IRemoteSystemSessionWatcher_adaptor<X> { typedef adapt IRemoteSystemSessionWatcher; };
struct IRemoteSystemSessionWatcher : IRemoteSystemSessionWatcher_raw, generate<IRemoteSystemSessionWatcher> {};

// RemoteSystemSessionWatcher
template<typename X> struct statics<RemoteSystemSessionWatcher, X> : X {
	typedef typename X::root_type RemoteSystemSessionWatcher;
};
struct RemoteSystemSessionWatcher : generate<RemoteSystemSessionWatcher> {};

// IRemoteSystemSessionInvitation
struct IRemoteSystemSessionInvitation_raw : IInspectable {
	virtual STDMETHODIMP _get_Sender(RemoteSystem* *value);
	virtual STDMETHODIMP _get_SessionInfo(RemoteSystemSessionInfo* *value);
};
template<typename X> struct IRemoteSystemSessionInvitation_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystem> get() { RemoteSystem* value; hrcheck(enc(&IRemoteSystemSessionInvitation_adaptor::Sender)->_get_Sender(&value)); return from_abi(value); }
			ptr<RemoteSystem> operator()() { return get(); }
			operator ptr<RemoteSystem> () { return get(); }
			ptr<RemoteSystem> operator->() { return get(); }
		} Sender;
		struct : property {
			ptr<RemoteSystemSessionInfo> get() { RemoteSystemSessionInfo* value; hrcheck(enc(&IRemoteSystemSessionInvitation_adaptor::SessionInfo)->_get_SessionInfo(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionInfo> operator()() { return get(); }
			operator ptr<RemoteSystemSessionInfo> () { return get(); }
			ptr<RemoteSystemSessionInfo> operator->() { return get(); }
		} SessionInfo;
	};
	IRemoteSystemSessionInvitation_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionInvitation, X> : Windows::System::RemoteSystems::IRemoteSystemSessionInvitation_adaptor<X> { typedef adapt IRemoteSystemSessionInvitation; };
struct IRemoteSystemSessionInvitation : IRemoteSystemSessionInvitation_raw, generate<IRemoteSystemSessionInvitation> {};

// RemoteSystemSessionInvitation
template<typename X> struct statics<RemoteSystemSessionInvitation, X> : X {
	typedef typename X::root_type RemoteSystemSessionInvitation;
};
struct RemoteSystemSessionInvitation : generate<RemoteSystemSessionInvitation> {};

// IRemoteSystemSessionInvitationReceivedEventArgs
struct IRemoteSystemSessionInvitationReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Invitation(RemoteSystemSessionInvitation* *value);
};
template<typename X> struct IRemoteSystemSessionInvitationReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionInvitation> get() { RemoteSystemSessionInvitation* value; hrcheck(enc(&IRemoteSystemSessionInvitationReceivedEventArgs_adaptor::Invitation)->_get_Invitation(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionInvitation> operator()() { return get(); }
			operator ptr<RemoteSystemSessionInvitation> () { return get(); }
			ptr<RemoteSystemSessionInvitation> operator->() { return get(); }
		} Invitation;
	};
	IRemoteSystemSessionInvitationReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionInvitationReceivedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionInvitationReceivedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionInvitationReceivedEventArgs; };
struct IRemoteSystemSessionInvitationReceivedEventArgs : IRemoteSystemSessionInvitationReceivedEventArgs_raw, generate<IRemoteSystemSessionInvitationReceivedEventArgs> {};

// RemoteSystemSessionInvitationReceivedEventArgs
template<typename X> struct statics<RemoteSystemSessionInvitationReceivedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionInvitationReceivedEventArgs;
};
struct RemoteSystemSessionInvitationReceivedEventArgs : generate<RemoteSystemSessionInvitationReceivedEventArgs> {};

// IRemoteSystemSessionInvitationListener
struct IRemoteSystemSessionInvitationListener_raw : IInspectable {
	virtual STDMETHODIMP _add_InvitationReceived(Foundation::TypedEventHandler<RemoteSystemSessionInvitationListener*, RemoteSystemSessionInvitationReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_InvitationReceived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRemoteSystemSessionInvitationListener_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionInvitationListener>, ptr<RemoteSystemSessionInvitationReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionInvitationListener_adaptor::InvitationReceived)->_add_InvitationReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionInvitationListener_adaptor::InvitationReceived)->_remove_InvitationReceived(token)); }
		} InvitationReceived;
	};
	IRemoteSystemSessionInvitationListener_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionInvitationListener, X> : Windows::System::RemoteSystems::IRemoteSystemSessionInvitationListener_adaptor<X> { typedef adapt IRemoteSystemSessionInvitationListener; };
struct IRemoteSystemSessionInvitationListener : IRemoteSystemSessionInvitationListener_raw, generate<IRemoteSystemSessionInvitationListener> {};

// RemoteSystemSessionInvitationListener
template<typename X> struct statics<RemoteSystemSessionInvitationListener, X> : X {
	typedef typename X::root_type RemoteSystemSessionInvitationListener;
};
struct RemoteSystemSessionInvitationListener : generate<RemoteSystemSessionInvitationListener> {};

// IRemoteSystemSessionParticipant
struct IRemoteSystemSessionParticipant_raw : IInspectable {
	virtual STDMETHODIMP _get_RemoteSystem(RemoteSystems::RemoteSystem* *value);
	virtual STDMETHODIMP _GetHostNames(Foundation::Collections::IVectorView<Networking::HostName*>* *result);
};
template<typename X> struct IRemoteSystemSessionParticipant_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystems::RemoteSystem> get() { RemoteSystems::RemoteSystem* value; hrcheck(enc(&IRemoteSystemSessionParticipant_adaptor::RemoteSystem)->_get_RemoteSystem(&value)); return from_abi(value); }
			ptr<RemoteSystems::RemoteSystem> operator()() { return get(); }
			operator ptr<RemoteSystems::RemoteSystem> () { return get(); }
			ptr<RemoteSystems::RemoteSystem> operator->() { return get(); }
		} RemoteSystem;
	};
	ptr<Foundation::Collections::IVectorView<ptr<Networking::HostName>>> GetHostNames() { Foundation::Collections::IVectorView<Networking::HostName*>* result; hrcheck(X::get()->_GetHostNames(&result)); return from_abi(result); }
	IRemoteSystemSessionParticipant_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionParticipant, X> : Windows::System::RemoteSystems::IRemoteSystemSessionParticipant_adaptor<X> { typedef adapt IRemoteSystemSessionParticipant; };
struct IRemoteSystemSessionParticipant : IRemoteSystemSessionParticipant_raw, generate<IRemoteSystemSessionParticipant> {};

// RemoteSystemSessionParticipant
template<typename X> struct statics<RemoteSystemSessionParticipant, X> : X {
	typedef typename X::root_type RemoteSystemSessionParticipant;
};
struct RemoteSystemSessionParticipant : generate<RemoteSystemSessionParticipant> {};

// IRemoteSystemSessionParticipantAddedEventArgs
struct IRemoteSystemSessionParticipantAddedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Participant(RemoteSystemSessionParticipant* *value);
};
template<typename X> struct IRemoteSystemSessionParticipantAddedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionParticipant> get() { RemoteSystemSessionParticipant* value; hrcheck(enc(&IRemoteSystemSessionParticipantAddedEventArgs_adaptor::Participant)->_get_Participant(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionParticipant> operator()() { return get(); }
			operator ptr<RemoteSystemSessionParticipant> () { return get(); }
			ptr<RemoteSystemSessionParticipant> operator->() { return get(); }
		} Participant;
	};
	IRemoteSystemSessionParticipantAddedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionParticipantAddedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionParticipantAddedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionParticipantAddedEventArgs; };
struct IRemoteSystemSessionParticipantAddedEventArgs : IRemoteSystemSessionParticipantAddedEventArgs_raw, generate<IRemoteSystemSessionParticipantAddedEventArgs> {};

// IRemoteSystemSessionParticipantRemovedEventArgs
struct IRemoteSystemSessionParticipantRemovedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Participant(RemoteSystemSessionParticipant* *value);
};
template<typename X> struct IRemoteSystemSessionParticipantRemovedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionParticipant> get() { RemoteSystemSessionParticipant* value; hrcheck(enc(&IRemoteSystemSessionParticipantRemovedEventArgs_adaptor::Participant)->_get_Participant(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionParticipant> operator()() { return get(); }
			operator ptr<RemoteSystemSessionParticipant> () { return get(); }
			ptr<RemoteSystemSessionParticipant> operator->() { return get(); }
		} Participant;
	};
	IRemoteSystemSessionParticipantRemovedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionParticipantRemovedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionParticipantRemovedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionParticipantRemovedEventArgs; };
struct IRemoteSystemSessionParticipantRemovedEventArgs : IRemoteSystemSessionParticipantRemovedEventArgs_raw, generate<IRemoteSystemSessionParticipantRemovedEventArgs> {};

// RemoteSystemSessionParticipantAddedEventArgs
template<typename X> struct statics<RemoteSystemSessionParticipantAddedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionParticipantAddedEventArgs;
};
struct RemoteSystemSessionParticipantAddedEventArgs : generate<RemoteSystemSessionParticipantAddedEventArgs> {};

// RemoteSystemSessionParticipantRemovedEventArgs
template<typename X> struct statics<RemoteSystemSessionParticipantRemovedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionParticipantRemovedEventArgs;
};
struct RemoteSystemSessionParticipantRemovedEventArgs : generate<RemoteSystemSessionParticipantRemovedEventArgs> {};

// IRemoteSystemSessionParticipantWatcher
struct IRemoteSystemSessionParticipantWatcher_raw : IInspectable {
	virtual STDMETHODIMP _Start();
	virtual STDMETHODIMP _Stop();
	virtual STDMETHODIMP _get_Status(RemoteSystemSessionParticipantWatcherStatus *value);
	virtual STDMETHODIMP _add_Added(Foundation::TypedEventHandler<RemoteSystemSessionParticipantWatcher*, RemoteSystemSessionParticipantAddedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Added(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_Removed(Foundation::TypedEventHandler<RemoteSystemSessionParticipantWatcher*, RemoteSystemSessionParticipantRemovedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_Removed(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _add_EnumerationCompleted(Foundation::TypedEventHandler<RemoteSystemSessionParticipantWatcher*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_EnumerationCompleted(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRemoteSystemSessionParticipantWatcher_adaptor : X {
	union {
		struct : property {
			RemoteSystemSessionParticipantWatcherStatus get() { RemoteSystemSessionParticipantWatcherStatus value; hrcheck(enc(&IRemoteSystemSessionParticipantWatcher_adaptor::Status)->_get_Status(&value)); return value; }
			RemoteSystemSessionParticipantWatcherStatus operator()() { return get(); }
			operator RemoteSystemSessionParticipantWatcherStatus () { return get(); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionParticipantWatcher>, ptr<RemoteSystemSessionParticipantAddedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionParticipantWatcher_adaptor::Added)->_add_Added(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionParticipantWatcher_adaptor::Added)->_remove_Added(token)); }
		} Added;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionParticipantWatcher>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionParticipantWatcher_adaptor::EnumerationCompleted)->_add_EnumerationCompleted(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionParticipantWatcher_adaptor::EnumerationCompleted)->_remove_EnumerationCompleted(token)); }
		} EnumerationCompleted;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionParticipantWatcher>, ptr<RemoteSystemSessionParticipantRemovedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionParticipantWatcher_adaptor::Removed)->_add_Removed(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionParticipantWatcher_adaptor::Removed)->_remove_Removed(token)); }
		} Removed;
	};
	void Start() { hrcheck(X::get()->_Start()); }
	void Stop() { hrcheck(X::get()->_Stop()); }
	IRemoteSystemSessionParticipantWatcher_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionParticipantWatcher, X> : Windows::System::RemoteSystems::IRemoteSystemSessionParticipantWatcher_adaptor<X> { typedef adapt IRemoteSystemSessionParticipantWatcher; };
struct IRemoteSystemSessionParticipantWatcher : IRemoteSystemSessionParticipantWatcher_raw, generate<IRemoteSystemSessionParticipantWatcher> {};

// RemoteSystemSessionParticipantWatcher
template<typename X> struct statics<RemoteSystemSessionParticipantWatcher, X> : X {
	typedef typename X::root_type RemoteSystemSessionParticipantWatcher;
};
struct RemoteSystemSessionParticipantWatcher : generate<RemoteSystemSessionParticipantWatcher> {};

// IRemoteSystemSessionJoinRequest
struct IRemoteSystemSessionJoinRequest_raw : IInspectable {
	virtual STDMETHODIMP _get_Participant(RemoteSystemSessionParticipant* *value);
	virtual STDMETHODIMP _Accept();
};
template<typename X> struct IRemoteSystemSessionJoinRequest_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionParticipant> get() { RemoteSystemSessionParticipant* value; hrcheck(enc(&IRemoteSystemSessionJoinRequest_adaptor::Participant)->_get_Participant(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionParticipant> operator()() { return get(); }
			operator ptr<RemoteSystemSessionParticipant> () { return get(); }
			ptr<RemoteSystemSessionParticipant> operator->() { return get(); }
		} Participant;
	};
	void Accept() { hrcheck(X::get()->_Accept()); }
	IRemoteSystemSessionJoinRequest_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionJoinRequest, X> : Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequest_adaptor<X> { typedef adapt IRemoteSystemSessionJoinRequest; };
struct IRemoteSystemSessionJoinRequest : IRemoteSystemSessionJoinRequest_raw, generate<IRemoteSystemSessionJoinRequest> {};

// RemoteSystemSessionJoinRequest
template<typename X> struct statics<RemoteSystemSessionJoinRequest, X> : X {
	typedef typename X::root_type RemoteSystemSessionJoinRequest;
};
struct RemoteSystemSessionJoinRequest : generate<RemoteSystemSessionJoinRequest> {};

// IRemoteSystemSessionJoinRequestedEventArgs
struct IRemoteSystemSessionJoinRequestedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_JoinRequest(RemoteSystemSessionJoinRequest* *value);
	virtual STDMETHODIMP _GetDeferral(Foundation::Deferral* *value);
};
template<typename X> struct IRemoteSystemSessionJoinRequestedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSessionJoinRequest> get() { RemoteSystemSessionJoinRequest* value; hrcheck(enc(&IRemoteSystemSessionJoinRequestedEventArgs_adaptor::JoinRequest)->_get_JoinRequest(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionJoinRequest> operator()() { return get(); }
			operator ptr<RemoteSystemSessionJoinRequest> () { return get(); }
			ptr<RemoteSystemSessionJoinRequest> operator->() { return get(); }
		} JoinRequest;
	};
	ptr<Foundation::Deferral> GetDeferral() { Foundation::Deferral* value; hrcheck(X::get()->_GetDeferral(&value)); return from_abi(value); }
	IRemoteSystemSessionJoinRequestedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionJoinRequestedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionJoinRequestedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionJoinRequestedEventArgs; };
struct IRemoteSystemSessionJoinRequestedEventArgs : IRemoteSystemSessionJoinRequestedEventArgs_raw, generate<IRemoteSystemSessionJoinRequestedEventArgs> {};

// RemoteSystemSessionJoinRequestedEventArgs
template<typename X> struct statics<RemoteSystemSessionJoinRequestedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionJoinRequestedEventArgs;
};
struct RemoteSystemSessionJoinRequestedEventArgs : generate<RemoteSystemSessionJoinRequestedEventArgs> {};

// IRemoteSystemSessionCreationResult
struct IRemoteSystemSessionCreationResult_raw : IInspectable {
	virtual STDMETHODIMP _get_Status(RemoteSystemSessionCreationStatus *value);
	virtual STDMETHODIMP _get_Session(RemoteSystemSession* *value);
};
template<typename X> struct IRemoteSystemSessionCreationResult_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSession> get() { RemoteSystemSession* value; hrcheck(enc(&IRemoteSystemSessionCreationResult_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<RemoteSystemSession> operator()() { return get(); }
			operator ptr<RemoteSystemSession> () { return get(); }
			ptr<RemoteSystemSession> operator->() { return get(); }
		} Session;
		struct : property {
			RemoteSystemSessionCreationStatus get() { RemoteSystemSessionCreationStatus value; hrcheck(enc(&IRemoteSystemSessionCreationResult_adaptor::Status)->_get_Status(&value)); return value; }
			RemoteSystemSessionCreationStatus operator()() { return get(); }
			operator RemoteSystemSessionCreationStatus () { return get(); }
		} Status;
	};
	IRemoteSystemSessionCreationResult_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionCreationResult, X> : Windows::System::RemoteSystems::IRemoteSystemSessionCreationResult_adaptor<X> { typedef adapt IRemoteSystemSessionCreationResult; };
struct IRemoteSystemSessionCreationResult : IRemoteSystemSessionCreationResult_raw, generate<IRemoteSystemSessionCreationResult> {};

// RemoteSystemSessionCreationResult
template<typename X> struct statics<RemoteSystemSessionCreationResult, X> : X {
	typedef typename X::root_type RemoteSystemSessionCreationResult;
};
struct RemoteSystemSessionCreationResult : generate<RemoteSystemSessionCreationResult> {};

// IRemoteSystemSessionOptions
struct IRemoteSystemSessionOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_IsInviteOnly(bool *value);
	virtual STDMETHODIMP _put_IsInviteOnly(bool value);
};
template<typename X> struct IRemoteSystemSessionOptions_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IRemoteSystemSessionOptions_adaptor::IsInviteOnly)->_get_IsInviteOnly(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IRemoteSystemSessionOptions_adaptor::IsInviteOnly)->_put_IsInviteOnly(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsInviteOnly;
	};
	IRemoteSystemSessionOptions_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionOptions, X> : Windows::System::RemoteSystems::IRemoteSystemSessionOptions_adaptor<X> { typedef adapt IRemoteSystemSessionOptions; };
struct IRemoteSystemSessionOptions : IRemoteSystemSessionOptions_raw, generate<IRemoteSystemSessionOptions> {};

// RemoteSystemSessionOptions
template<typename X> struct statics<RemoteSystemSessionOptions, X> : X {
	typedef typename X::root_type RemoteSystemSessionOptions;
};
struct RemoteSystemSessionOptions : generate<RemoteSystemSessionOptions> {};

// IRemoteSystemSessionController
struct IRemoteSystemSessionController_raw : IInspectable {
	virtual STDMETHODIMP _add_JoinRequested(Foundation::TypedEventHandler<RemoteSystemSessionController*, RemoteSystemSessionJoinRequestedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_JoinRequested(Foundation::EventRegistrationToken token);
	virtual STDMETHODIMP _RemoveParticipantAsync(RemoteSystemSessionParticipant* pParticipant, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _CreateSessionAsync(Foundation::IAsyncOperation<RemoteSystemSessionCreationResult*>* *operation);
};
template<typename X> struct IRemoteSystemSessionController_adaptor : X {
	union {
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionController>, ptr<RemoteSystemSessionJoinRequestedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionController_adaptor::JoinRequested)->_add_JoinRequested(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionController_adaptor::JoinRequested)->_remove_JoinRequested(token)); }
		} JoinRequested;
	};
	ptr<Foundation::IAsyncOperation<bool>> RemoveParticipantAsync(pptr<RemoteSystemSessionParticipant> pParticipant) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_RemoveParticipantAsync(pParticipant, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<RemoteSystemSessionCreationResult>>> CreateSessionAsync() { Foundation::IAsyncOperation<RemoteSystemSessionCreationResult*>* operation; hrcheck(X::get()->_CreateSessionAsync(&operation)); return from_abi(operation); }
	IRemoteSystemSessionController_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionController, X> : Windows::System::RemoteSystems::IRemoteSystemSessionController_adaptor<X> { typedef adapt IRemoteSystemSessionController; };
struct IRemoteSystemSessionController : IRemoteSystemSessionController_raw, generate<IRemoteSystemSessionController> {};

// IRemoteSystemSessionControllerFactory
struct IRemoteSystemSessionControllerFactory : IInspectable {
	virtual STDMETHODIMP _CreateController(HSTRING displayName, RemoteSystemSessionController* *result);
	virtual STDMETHODIMP _CreateControllerWithSessionOptions(HSTRING displayName, RemoteSystemSessionOptions* options, RemoteSystemSessionController* *result);
};

// RemoteSystemSessionController
template<typename> struct RemoteSystemSessionController_statics {
	static RemoteSystemSessionController *activate(hstring_ref displayName) { RemoteSystemSessionController *result; hrcheck(get_activation_factory<RemoteSystemSessionController, IRemoteSystemSessionControllerFactory>()->_CreateController(displayName, &result)); return result; }
	static RemoteSystemSessionController *activate(hstring_ref displayName, pptr<RemoteSystemSessionOptions> options) { RemoteSystemSessionController *result; hrcheck(get_activation_factory<RemoteSystemSessionController, IRemoteSystemSessionControllerFactory>()->_CreateController(displayName, options, &result)); return result; }
};

template<typename X> struct statics<RemoteSystemSessionController, X> : X, Windows::System::RemoteSystems::RemoteSystemSessionController_statics<void> {
	using Windows::System::RemoteSystems::RemoteSystemSessionController_statics<void>::activate;
	typedef typename X::root_type RemoteSystemSessionController;
};
struct RemoteSystemSessionController : generate<RemoteSystemSessionController> {};

// IRemoteSystemSessionDisconnectedEventArgs
struct IRemoteSystemSessionDisconnectedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Reason(RemoteSystemSessionDisconnectedReason *value);
};
template<typename X> struct IRemoteSystemSessionDisconnectedEventArgs_adaptor : X {
	union {
		struct : property {
			RemoteSystemSessionDisconnectedReason get() { RemoteSystemSessionDisconnectedReason value; hrcheck(enc(&IRemoteSystemSessionDisconnectedEventArgs_adaptor::Reason)->_get_Reason(&value)); return value; }
			RemoteSystemSessionDisconnectedReason operator()() { return get(); }
			operator RemoteSystemSessionDisconnectedReason () { return get(); }
		} Reason;
	};
	IRemoteSystemSessionDisconnectedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionDisconnectedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionDisconnectedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionDisconnectedEventArgs; };
struct IRemoteSystemSessionDisconnectedEventArgs : IRemoteSystemSessionDisconnectedEventArgs_raw, generate<IRemoteSystemSessionDisconnectedEventArgs> {};

// RemoteSystemSessionDisconnectedEventArgs
template<typename X> struct statics<RemoteSystemSessionDisconnectedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionDisconnectedEventArgs;
};
struct RemoteSystemSessionDisconnectedEventArgs : generate<RemoteSystemSessionDisconnectedEventArgs> {};

// IRemoteSystemSessionValueSetReceivedEventArgs
struct IRemoteSystemSessionValueSetReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Sender(RemoteSystemSessionParticipant* *value);
	virtual STDMETHODIMP _get_Message(Foundation::Collections::ValueSet* *value);
};
template<typename X> struct IRemoteSystemSessionValueSetReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::ValueSet> get() { Foundation::Collections::ValueSet* value; hrcheck(enc(&IRemoteSystemSessionValueSetReceivedEventArgs_adaptor::Message)->_get_Message(&value)); return from_abi(value); }
			ptr<Foundation::Collections::ValueSet> operator()() { return get(); }
			operator ptr<Foundation::Collections::ValueSet> () { return get(); }
			ptr<Foundation::Collections::ValueSet> operator->() { return get(); }
		} Message;
		struct : property {
			ptr<RemoteSystemSessionParticipant> get() { RemoteSystemSessionParticipant* value; hrcheck(enc(&IRemoteSystemSessionValueSetReceivedEventArgs_adaptor::Sender)->_get_Sender(&value)); return from_abi(value); }
			ptr<RemoteSystemSessionParticipant> operator()() { return get(); }
			operator ptr<RemoteSystemSessionParticipant> () { return get(); }
			ptr<RemoteSystemSessionParticipant> operator->() { return get(); }
		} Sender;
	};
	IRemoteSystemSessionValueSetReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionValueSetReceivedEventArgs, X> : Windows::System::RemoteSystems::IRemoteSystemSessionValueSetReceivedEventArgs_adaptor<X> { typedef adapt IRemoteSystemSessionValueSetReceivedEventArgs; };
struct IRemoteSystemSessionValueSetReceivedEventArgs : IRemoteSystemSessionValueSetReceivedEventArgs_raw, generate<IRemoteSystemSessionValueSetReceivedEventArgs> {};

// RemoteSystemSessionValueSetReceivedEventArgs
template<typename X> struct statics<RemoteSystemSessionValueSetReceivedEventArgs, X> : X {
	typedef typename X::root_type RemoteSystemSessionValueSetReceivedEventArgs;
};
struct RemoteSystemSessionValueSetReceivedEventArgs : generate<RemoteSystemSessionValueSetReceivedEventArgs> {};

// IRemoteSystemSessionMessageChannel
struct IRemoteSystemSessionMessageChannel_raw : IInspectable {
	virtual STDMETHODIMP _get_Session(RemoteSystemSession* *value);
	virtual STDMETHODIMP _BroadcastValueSetAsync(Foundation::Collections::ValueSet* messageData, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _SendValueSetAsync(Foundation::Collections::ValueSet* messageData, RemoteSystemSessionParticipant* participant, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _SendValueSetToParticipantsAsync(Foundation::Collections::ValueSet* messageData, Foundation::Collections::IIterable<RemoteSystemSessionParticipant*>* participants, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _add_ValueSetReceived(Foundation::TypedEventHandler<RemoteSystemSessionMessageChannel*, RemoteSystemSessionValueSetReceivedEventArgs*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_ValueSetReceived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IRemoteSystemSessionMessageChannel_adaptor : X {
	union {
		struct : property {
			ptr<RemoteSystemSession> get() { RemoteSystemSession* value; hrcheck(enc(&IRemoteSystemSessionMessageChannel_adaptor::Session)->_get_Session(&value)); return from_abi(value); }
			ptr<RemoteSystemSession> operator()() { return get(); }
			operator ptr<RemoteSystemSession> () { return get(); }
			ptr<RemoteSystemSession> operator->() { return get(); }
		} Session;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<RemoteSystemSessionMessageChannel>, ptr<RemoteSystemSessionValueSetReceivedEventArgs>>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IRemoteSystemSessionMessageChannel_adaptor::ValueSetReceived)->_add_ValueSetReceived(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IRemoteSystemSessionMessageChannel_adaptor::ValueSetReceived)->_remove_ValueSetReceived(token)); }
		} ValueSetReceived;
	};
	ptr<Foundation::IAsyncOperation<bool>> BroadcastValueSetAsync(pptr<Foundation::Collections::ValueSet> messageData) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_BroadcastValueSetAsync(messageData, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> SendValueSetAsync(pptr<Foundation::Collections::ValueSet> messageData, pptr<RemoteSystemSessionParticipant> participant) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_SendValueSetAsync(messageData, participant, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> SendValueSetToParticipantsAsync(pptr<Foundation::Collections::ValueSet> messageData, pptr<Foundation::Collections::IIterable<ptr<RemoteSystemSessionParticipant>>> participants) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_SendValueSetToParticipantsAsync(messageData, to_abi(participants), &operation)); return from_abi(operation); }
	IRemoteSystemSessionMessageChannel_adaptor() {}
};
template<typename X> struct adapt<IRemoteSystemSessionMessageChannel, X> : Windows::System::RemoteSystems::IRemoteSystemSessionMessageChannel_adaptor<X> { typedef adapt IRemoteSystemSessionMessageChannel; };
struct IRemoteSystemSessionMessageChannel : IRemoteSystemSessionMessageChannel_raw, generate<IRemoteSystemSessionMessageChannel> {};

// IRemoteSystemSessionMessageChannelFactory
struct IRemoteSystemSessionMessageChannelFactory : IInspectable {
	virtual STDMETHODIMP _Create(RemoteSystemSession* session, HSTRING channelName, RemoteSystemSessionMessageChannel* *result);
	virtual STDMETHODIMP _CreateWithReliability(RemoteSystemSession* session, HSTRING channelName, RemoteSystemSessionMessageChannelReliability reliability, RemoteSystemSessionMessageChannel* *result);
};

// RemoteSystemSessionMessageChannel
template<typename> struct RemoteSystemSessionMessageChannel_statics {
	static RemoteSystemSessionMessageChannel *activate(pptr<RemoteSystemSession> session, hstring_ref channelName) { RemoteSystemSessionMessageChannel *result; hrcheck(get_activation_factory<RemoteSystemSessionMessageChannel, IRemoteSystemSessionMessageChannelFactory>()->_Create(session, channelName, &result)); return result; }
	static RemoteSystemSessionMessageChannel *activate(pptr<RemoteSystemSession> session, hstring_ref channelName, RemoteSystemSessionMessageChannelReliability reliability) { RemoteSystemSessionMessageChannel *result; hrcheck(get_activation_factory<RemoteSystemSessionMessageChannel, IRemoteSystemSessionMessageChannelFactory>()->_Create(session, channelName, reliability, &result)); return result; }
};

template<typename X> struct statics<RemoteSystemSessionMessageChannel, X> : X, Windows::System::RemoteSystems::RemoteSystemSessionMessageChannel_statics<void> {
	using Windows::System::RemoteSystems::RemoteSystemSessionMessageChannel_statics<void>::activate;
	typedef typename X::root_type RemoteSystemSessionMessageChannel;
};
struct RemoteSystemSessionMessageChannel : generate<RemoteSystemSessionMessageChannel> {};
}}}
} // namespace iso_winrt
