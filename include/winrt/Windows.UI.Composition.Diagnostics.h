#pragma once
// generated by isopod tools
// namespaces:
// Windows.UI.Composition.Diagnostics

#include "Windows.UI.Composition.Diagnostics.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace UI { namespace Composition {
struct Visual;
struct Compositor;
}}}

// defs

template<> struct def<Windows::UI::Composition::Diagnostics::ICompositionDebugSettings> : interface_type<> {};
template<> struct def<Windows::UI::Composition::Diagnostics::CompositionDebugOverdrawContentKinds> : enum_type<unsigned> {};
template<> struct def<Windows::UI::Composition::Diagnostics::ICompositionDebugHeatMaps> : interface_type<> {};
template<> struct def<Windows::UI::Composition::Diagnostics::CompositionDebugHeatMaps> : class_type<Platform::Object, Windows::UI::Composition::Diagnostics::ICompositionDebugHeatMaps> {};
template<> struct def<Windows::UI::Composition::Diagnostics::ICompositionDebugSettingsStatics> : interface_type<> {};
template<> struct def<Windows::UI::Composition::Diagnostics::CompositionDebugSettings> : class_type<Platform::Object, Windows::UI::Composition::Diagnostics::ICompositionDebugSettings> {};

// uuids

template<> struct uuid<Windows::UI::Composition::Diagnostics::ICompositionDebugSettings> { define_guid(0x2831987E, 0x1D82, 0x4D38, 0xB7, 0xB7, 0xEF, 0xD1, 0x1C, 0x7B, 0xC3, 0xD1);};
template<> struct uuid<Windows::UI::Composition::Diagnostics::ICompositionDebugHeatMaps> { define_guid(0xE49C90AC, 0x2FF3, 0x5805, 0x71, 0x8C, 0xB7, 0x25, 0xEE, 0x7, 0x65, 0xF);};
template<> struct uuid<Windows::UI::Composition::Diagnostics::ICompositionDebugSettingsStatics> { define_guid(0x64EC1F1E, 0x6AF8, 0x4AF8, 0xB8, 0x14, 0xC8, 0x70, 0xFD, 0x5A, 0x95, 0x5);};

// types

namespace Windows { namespace UI { namespace Composition { namespace Diagnostics {

// ICompositionDebugSettings
struct ICompositionDebugSettings_raw : IInspectable {
	virtual STDMETHODIMP _get_HeatMaps(CompositionDebugHeatMaps* *result);
};
template<typename X> struct ICompositionDebugSettings_adaptor : X {
	union {
		struct : property {
			ptr<CompositionDebugHeatMaps> get() { CompositionDebugHeatMaps* result; hrcheck(enc(&ICompositionDebugSettings_adaptor::HeatMaps)->_get_HeatMaps(&result)); return from_abi(result); }
			ptr<CompositionDebugHeatMaps> operator()() { return get(); }
			operator ptr<CompositionDebugHeatMaps> () { return get(); }
			ptr<CompositionDebugHeatMaps> operator->() { return get(); }
		} HeatMaps;
	};
	ICompositionDebugSettings_adaptor() {}
};
template<typename X> struct adapt<ICompositionDebugSettings, X> : Windows::UI::Composition::Diagnostics::ICompositionDebugSettings_adaptor<X> { typedef adapt ICompositionDebugSettings; };
struct ICompositionDebugSettings : ICompositionDebugSettings_raw, generate<ICompositionDebugSettings> {};

// ICompositionDebugHeatMaps
struct ICompositionDebugHeatMaps_raw : IInspectable {
	virtual STDMETHODIMP _Hide(Visual* subtree);
	virtual STDMETHODIMP _ShowMemoryUsage(Visual* subtree);
	virtual STDMETHODIMP _ShowOverdraw(Visual* subtree, CompositionDebugOverdrawContentKinds contentKinds);
	virtual STDMETHODIMP _ShowRedraw(Visual* subtree);
};
template<typename X> struct ICompositionDebugHeatMaps_adaptor : X {
	void Hide(pptr<Visual> subtree) { hrcheck(X::get()->_Hide(subtree)); }
	void ShowMemoryUsage(pptr<Visual> subtree) { hrcheck(X::get()->_ShowMemoryUsage(subtree)); }
	void ShowOverdraw(pptr<Visual> subtree, CompositionDebugOverdrawContentKinds contentKinds) { hrcheck(X::get()->_ShowOverdraw(subtree, contentKinds)); }
	void ShowRedraw(pptr<Visual> subtree) { hrcheck(X::get()->_ShowRedraw(subtree)); }
};
template<typename X> struct adapt<ICompositionDebugHeatMaps, X> : Windows::UI::Composition::Diagnostics::ICompositionDebugHeatMaps_adaptor<X> { typedef adapt ICompositionDebugHeatMaps; };
struct ICompositionDebugHeatMaps : ICompositionDebugHeatMaps_raw, generate<ICompositionDebugHeatMaps> {};

// CompositionDebugHeatMaps
template<typename X> struct statics<CompositionDebugHeatMaps, X> : X {
	typedef typename X::root_type CompositionDebugHeatMaps;
};
struct CompositionDebugHeatMaps : generate<CompositionDebugHeatMaps> {};

// ICompositionDebugSettingsStatics
struct ICompositionDebugSettingsStatics : IInspectable {
	virtual STDMETHODIMP _TryGetSettings(Compositor* compositor, CompositionDebugSettings* *result);
};

// CompositionDebugSettings
template<typename> struct CompositionDebugSettings_statics {
	static ptr<CompositionDebugSettings> TryGetSettings(pptr<Compositor> compositor) { CompositionDebugSettings* result; hrcheck(get_activation_factory<CompositionDebugSettings, ICompositionDebugSettingsStatics>()->_TryGetSettings(compositor, &result)); return from_abi(result); }
};

template<typename X> struct statics<CompositionDebugSettings, X> : X, Windows::UI::Composition::Diagnostics::CompositionDebugSettings_statics<void> {
	typedef typename X::root_type CompositionDebugSettings;
};
struct CompositionDebugSettings : generate<CompositionDebugSettings> {};
}}}}
} // namespace iso_winrt
