#pragma once
// generated by isopod tools
// namespaces:
// Windows.Devices.HumanInterfaceDevice

#include "Windows.Devices.HumanInterfaceDevice.0.h"
#include "Windows.Storage.0.h"
#include "Windows.Foundation.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Devices::HumanInterfaceDevice::HidReportType> : enum_type<int> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidCollectionType> : enum_type<int> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidDeviceStatics> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidDevice> : interface_type<Windows::Foundation::IClosable> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidDevice> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidDevice> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidInputReport> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidInputReport> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidInputReport> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidFeatureReport> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidFeatureReport> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidOutputReport> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidOutputReport> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidOutputReport> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription2> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription, Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription2> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidCollection> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidCollection> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidCollection> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidBooleanControl> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidBooleanControl> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::IHidNumericControl> : interface_type<> {};
template<> struct def<Windows::Devices::HumanInterfaceDevice::HidNumericControl> : class_type<Platform::Object, Windows::Devices::HumanInterfaceDevice::IHidNumericControl> {};

// uuids

template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidDeviceStatics> { define_guid(0x9E5981E4, 0x9856, 0x418C, 0x9F, 0x73, 0x77, 0xDE, 0xC, 0xD8, 0x57, 0x54);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidDevice> { define_guid(0x5F8A14E7, 0x2200, 0x432E, 0x95, 0xDA, 0xD0, 0x9B, 0x87, 0xD5, 0x74, 0xA8);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidInputReport> { define_guid(0xC35D0E50, 0xF7E7, 0x4E8D, 0xB2, 0x3E, 0xCA, 0xBB, 0xE5, 0x6B, 0x90, 0xE9);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidFeatureReport> { define_guid(0x841D9B79, 0x5AE5, 0x46E3, 0x82, 0xEF, 0x1F, 0xEC, 0x5C, 0x89, 0x42, 0xF4);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidOutputReport> { define_guid(0x62CB2544, 0xC896, 0x4463, 0x93, 0xC1, 0xDF, 0x9D, 0xB0, 0x53, 0xC4, 0x50);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription2> { define_guid(0xC8EED2EA, 0x8A77, 0x4C36, 0xAA, 0x0, 0x5F, 0xF0, 0x44, 0x9D, 0x3E, 0x73);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription> { define_guid(0x6196E543, 0x29D8, 0x4A2A, 0x86, 0x83, 0x84, 0x9E, 0x20, 0x7B, 0xBE, 0x31);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription> { define_guid(0x638D5E86, 0x1D97, 0x4C75, 0x92, 0x7F, 0x5F, 0xF5, 0x8B, 0xA0, 0x5E, 0x32);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs> { define_guid(0x7059C5CB, 0x59B2, 0x4DC2, 0x98, 0x5C, 0xA, 0xDC, 0x61, 0x36, 0xFA, 0x2D);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidCollection> { define_guid(0x7189F5A3, 0x32F1, 0x46E3, 0xBE, 0xFD, 0x44, 0xD2, 0x66, 0x3B, 0x7E, 0x6A);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidBooleanControl> { define_guid(0x524DF48A, 0x3695, 0x408C, 0xBB, 0xA2, 0xE2, 0xEB, 0x5A, 0xBF, 0xBC, 0x20);};
template<> struct uuid<Windows::Devices::HumanInterfaceDevice::IHidNumericControl> { define_guid(0xE38A12A5, 0x35A7, 0x4B75, 0x89, 0xC8, 0xFB, 0x1F, 0x28, 0xB1, 0x8, 0x23);};

// types

namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

// IHidDeviceStatics
struct IHidDeviceStatics : IInspectable {
	virtual STDMETHODIMP _GetDeviceSelector(unsigned short usagePage, unsigned short usageId, HSTRING *selector);
	virtual STDMETHODIMP _GetDeviceSelectorVidPid(unsigned short usagePage, unsigned short usageId, unsigned short vendorId, unsigned short productId, HSTRING *selector);
	virtual STDMETHODIMP _FromIdAsync(HSTRING deviceId, Storage::FileAccessMode accessMode, Foundation::IAsyncOperation<HidDevice*>* *hidDevice);
};

// IHidDevice
struct IHidDevice_raw : IInspectable {
	virtual STDMETHODIMP _get_VendorId(unsigned short *value);
	virtual STDMETHODIMP _get_ProductId(unsigned short *value);
	virtual STDMETHODIMP _get_Version(unsigned short *value);
	virtual STDMETHODIMP _get_UsagePage(unsigned short *value);
	virtual STDMETHODIMP _get_UsageId(unsigned short *value);
	virtual STDMETHODIMP _GetInputReportAsync(Foundation::IAsyncOperation<HidInputReport*>* *value);
	virtual STDMETHODIMP _GetInputReportByIdAsync(unsigned short reportId, Foundation::IAsyncOperation<HidInputReport*>* *value);
	virtual STDMETHODIMP _GetFeatureReportAsync(Foundation::IAsyncOperation<HidFeatureReport*>* *value);
	virtual STDMETHODIMP _GetFeatureReportByIdAsync(unsigned short reportId, Foundation::IAsyncOperation<HidFeatureReport*>* *value);
	virtual STDMETHODIMP _CreateOutputReport(HidOutputReport* *outputReport);
	virtual STDMETHODIMP _CreateOutputReportById(unsigned short reportId, HidOutputReport* *outputReport);
	virtual STDMETHODIMP _CreateFeatureReport(HidFeatureReport* *featureReport);
	virtual STDMETHODIMP _CreateFeatureReportById(unsigned short reportId, HidFeatureReport* *featureReport);
	virtual STDMETHODIMP _SendOutputReportAsync(HidOutputReport* outputReport, Foundation::IAsyncOperation<unsigned>* *operation);
	virtual STDMETHODIMP _SendFeatureReportAsync(HidFeatureReport* featureReport, Foundation::IAsyncOperation<unsigned>* *operation);
	virtual STDMETHODIMP _GetBooleanControlDescriptions(HidReportType reportType, unsigned short usagePage, unsigned short usageId, Foundation::Collections::IVectorView<HidBooleanControlDescription*>* *value);
	virtual STDMETHODIMP _GetNumericControlDescriptions(HidReportType reportType, unsigned short usagePage, unsigned short usageId, Foundation::Collections::IVectorView<HidNumericControlDescription*>* *value);
	virtual STDMETHODIMP _add_InputReportReceived(Foundation::TypedEventHandler<HidDevice*, HidInputReportReceivedEventArgs*>* reportHandler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_InputReportReceived(Foundation::EventRegistrationToken token);
};
template<typename X> struct IHidDevice_adaptor : X {
	union {
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidDevice_adaptor::ProductId)->_get_ProductId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} ProductId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidDevice_adaptor::UsageId)->_get_UsageId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsageId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidDevice_adaptor::UsagePage)->_get_UsagePage(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsagePage;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidDevice_adaptor::VendorId)->_get_VendorId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} VendorId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidDevice_adaptor::Version)->_get_Version(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Version;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<HidDevice>, ptr<HidInputReportReceivedEventArgs>>> reportHandler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IHidDevice_adaptor::InputReportReceived)->_add_InputReportReceived(to_abi(reportHandler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IHidDevice_adaptor::InputReportReceived)->_remove_InputReportReceived(token)); }
		} InputReportReceived;
	};
	ptr<Foundation::IAsyncOperation<ptr<HidInputReport>>> GetInputReportAsync() { Foundation::IAsyncOperation<HidInputReport*>* value; hrcheck(X::get()->_GetInputReportAsync(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<HidInputReport>>> GetInputReportAsync(unsigned short reportId) { Foundation::IAsyncOperation<HidInputReport*>* value; hrcheck(X::get()->_GetInputReportByIdAsync(reportId, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<HidFeatureReport>>> GetFeatureReportAsync() { Foundation::IAsyncOperation<HidFeatureReport*>* value; hrcheck(X::get()->_GetFeatureReportAsync(&value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<HidFeatureReport>>> GetFeatureReportAsync(unsigned short reportId) { Foundation::IAsyncOperation<HidFeatureReport*>* value; hrcheck(X::get()->_GetFeatureReportByIdAsync(reportId, &value)); return from_abi(value); }
	ptr<HidOutputReport> CreateOutputReport() { HidOutputReport* outputReport; hrcheck(X::get()->_CreateOutputReport(&outputReport)); return from_abi(outputReport); }
	ptr<HidOutputReport> CreateOutputReport(unsigned short reportId) { HidOutputReport* outputReport; hrcheck(X::get()->_CreateOutputReportById(reportId, &outputReport)); return from_abi(outputReport); }
	ptr<HidFeatureReport> CreateFeatureReport() { HidFeatureReport* featureReport; hrcheck(X::get()->_CreateFeatureReport(&featureReport)); return from_abi(featureReport); }
	ptr<HidFeatureReport> CreateFeatureReport(unsigned short reportId) { HidFeatureReport* featureReport; hrcheck(X::get()->_CreateFeatureReportById(reportId, &featureReport)); return from_abi(featureReport); }
	ptr<Foundation::IAsyncOperation<unsigned>> SendOutputReportAsync(pptr<HidOutputReport> outputReport) { Foundation::IAsyncOperation<unsigned>* operation; hrcheck(X::get()->_SendOutputReportAsync(outputReport, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<unsigned>> SendFeatureReportAsync(pptr<HidFeatureReport> featureReport) { Foundation::IAsyncOperation<unsigned>* operation; hrcheck(X::get()->_SendFeatureReportAsync(featureReport, &operation)); return from_abi(operation); }
	ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControlDescription>>> GetBooleanControlDescriptions(HidReportType reportType, unsigned short usagePage, unsigned short usageId) { Foundation::Collections::IVectorView<HidBooleanControlDescription*>* value; hrcheck(X::get()->_GetBooleanControlDescriptions(reportType, usagePage, usageId, &value)); return from_abi(value); }
	ptr<Foundation::Collections::IVectorView<ptr<HidNumericControlDescription>>> GetNumericControlDescriptions(HidReportType reportType, unsigned short usagePage, unsigned short usageId) { Foundation::Collections::IVectorView<HidNumericControlDescription*>* value; hrcheck(X::get()->_GetNumericControlDescriptions(reportType, usagePage, usageId, &value)); return from_abi(value); }
	IHidDevice_adaptor() {}
};
template<typename X> struct adapt<IHidDevice, X> : Windows::Devices::HumanInterfaceDevice::IHidDevice_adaptor<X> { typedef adapt IHidDevice; };
struct IHidDevice : IHidDevice_raw, generate<IHidDevice> {};

// HidDevice
template<typename> struct HidDevice_statics {
	static hstring GetDeviceSelector(unsigned short usagePage, unsigned short usageId) { HSTRING selector; hrcheck(get_activation_factory<HidDevice, IHidDeviceStatics>()->_GetDeviceSelector(usagePage, usageId, &selector)); return from_abi(selector); }
	static hstring GetDeviceSelector(unsigned short usagePage, unsigned short usageId, unsigned short vendorId, unsigned short productId) { HSTRING selector; hrcheck(get_activation_factory<HidDevice, IHidDeviceStatics>()->_GetDeviceSelectorVidPid(usagePage, usageId, vendorId, productId, &selector)); return from_abi(selector); }
	static ptr<Foundation::IAsyncOperation<ptr<HidDevice>>> FromIdAsync(hstring_ref deviceId, Storage::FileAccessMode accessMode) { Foundation::IAsyncOperation<HidDevice*>* hidDevice; hrcheck(get_activation_factory<HidDevice, IHidDeviceStatics>()->_FromIdAsync(deviceId, accessMode, &hidDevice)); return from_abi(hidDevice); }
};

template<typename X> struct statics<HidDevice, X> : X, Windows::Devices::HumanInterfaceDevice::HidDevice_statics<void> {
	typedef typename X::root_type HidDevice;
};
struct HidDevice : generate<HidDevice> {
	using IHidDevice::CreateFeatureReport;
	using IHidDevice::CreateOutputReport;
	using IHidDevice::GetInputReportAsync;
	using IHidDevice::GetFeatureReportAsync;
};

// IHidInputReport
struct IHidInputReport_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned short *value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _get_ActivatedBooleanControls(Foundation::Collections::IVectorView<HidBooleanControl*>* *value);
	virtual STDMETHODIMP _get_TransitionedBooleanControls(Foundation::Collections::IVectorView<HidBooleanControl*>* *value);
	virtual STDMETHODIMP _GetBooleanControl(unsigned short usagePage, unsigned short usageId, HidBooleanControl* *value);
	virtual STDMETHODIMP _GetBooleanControlByDescription(HidBooleanControlDescription* controlDescription, HidBooleanControl* *value);
	virtual STDMETHODIMP _GetNumericControl(unsigned short usagePage, unsigned short usageId, HidNumericControl* *value);
	virtual STDMETHODIMP _GetNumericControlByDescription(HidNumericControlDescription* controlDescription, HidNumericControl* *value);
};
template<typename X> struct IHidInputReport_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> get() { Foundation::Collections::IVectorView<HidBooleanControl*>* value; hrcheck(enc(&IHidInputReport_adaptor::ActivatedBooleanControls)->_get_ActivatedBooleanControls(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> operator->() { return get(); }
		} ActivatedBooleanControls;
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IHidInputReport_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
		} Data;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidInputReport_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Id;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> get() { Foundation::Collections::IVectorView<HidBooleanControl*>* value; hrcheck(enc(&IHidInputReport_adaptor::TransitionedBooleanControls)->_get_TransitionedBooleanControls(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HidBooleanControl>>> operator->() { return get(); }
		} TransitionedBooleanControls;
	};
	ptr<HidBooleanControl> GetBooleanControl(unsigned short usagePage, unsigned short usageId) { HidBooleanControl* value; hrcheck(X::get()->_GetBooleanControl(usagePage, usageId, &value)); return from_abi(value); }
	ptr<HidBooleanControl> GetBooleanControlByDescription(pptr<HidBooleanControlDescription> controlDescription) { HidBooleanControl* value; hrcheck(X::get()->_GetBooleanControlByDescription(controlDescription, &value)); return from_abi(value); }
	ptr<HidNumericControl> GetNumericControl(unsigned short usagePage, unsigned short usageId) { HidNumericControl* value; hrcheck(X::get()->_GetNumericControl(usagePage, usageId, &value)); return from_abi(value); }
	ptr<HidNumericControl> GetNumericControlByDescription(pptr<HidNumericControlDescription> controlDescription) { HidNumericControl* value; hrcheck(X::get()->_GetNumericControlByDescription(controlDescription, &value)); return from_abi(value); }
	IHidInputReport_adaptor() {}
};
template<typename X> struct adapt<IHidInputReport, X> : Windows::Devices::HumanInterfaceDevice::IHidInputReport_adaptor<X> { typedef adapt IHidInputReport; };
struct IHidInputReport : IHidInputReport_raw, generate<IHidInputReport> {};

// HidInputReport
template<typename X> struct statics<HidInputReport, X> : X {
	typedef typename X::root_type HidInputReport;
};
struct HidInputReport : generate<HidInputReport> {};

// IHidFeatureReport
struct IHidFeatureReport_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned short *value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_Data(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _GetBooleanControl(unsigned short usagePage, unsigned short usageId, HidBooleanControl* *value);
	virtual STDMETHODIMP _GetBooleanControlByDescription(HidBooleanControlDescription* controlDescription, HidBooleanControl* *value);
	virtual STDMETHODIMP _GetNumericControl(unsigned short usagePage, unsigned short usageId, HidNumericControl* *value);
	virtual STDMETHODIMP _GetNumericControlByDescription(HidNumericControlDescription* controlDescription, HidNumericControl* *value);
};
template<typename X> struct IHidFeatureReport_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IHidFeatureReport_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IHidFeatureReport_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} Data;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidFeatureReport_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Id;
	};
	ptr<HidBooleanControl> GetBooleanControl(unsigned short usagePage, unsigned short usageId) { HidBooleanControl* value; hrcheck(X::get()->_GetBooleanControl(usagePage, usageId, &value)); return from_abi(value); }
	ptr<HidBooleanControl> GetBooleanControlByDescription(pptr<HidBooleanControlDescription> controlDescription) { HidBooleanControl* value; hrcheck(X::get()->_GetBooleanControlByDescription(controlDescription, &value)); return from_abi(value); }
	ptr<HidNumericControl> GetNumericControl(unsigned short usagePage, unsigned short usageId) { HidNumericControl* value; hrcheck(X::get()->_GetNumericControl(usagePage, usageId, &value)); return from_abi(value); }
	ptr<HidNumericControl> GetNumericControlByDescription(pptr<HidNumericControlDescription> controlDescription) { HidNumericControl* value; hrcheck(X::get()->_GetNumericControlByDescription(controlDescription, &value)); return from_abi(value); }
	IHidFeatureReport_adaptor() {}
};
template<typename X> struct adapt<IHidFeatureReport, X> : Windows::Devices::HumanInterfaceDevice::IHidFeatureReport_adaptor<X> { typedef adapt IHidFeatureReport; };
struct IHidFeatureReport : IHidFeatureReport_raw, generate<IHidFeatureReport> {};

// HidFeatureReport
template<typename X> struct statics<HidFeatureReport, X> : X {
	typedef typename X::root_type HidFeatureReport;
};
struct HidFeatureReport : generate<HidFeatureReport> {};

// IHidOutputReport
struct IHidOutputReport_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned short *value);
	virtual STDMETHODIMP _get_Data(Storage::Streams::IBuffer* *value);
	virtual STDMETHODIMP _put_Data(Storage::Streams::IBuffer* value);
	virtual STDMETHODIMP _GetBooleanControl(unsigned short usagePage, unsigned short usageId, HidBooleanControl* *value);
	virtual STDMETHODIMP _GetBooleanControlByDescription(HidBooleanControlDescription* controlDescription, HidBooleanControl* *value);
	virtual STDMETHODIMP _GetNumericControl(unsigned short usagePage, unsigned short usageId, HidNumericControl* *value);
	virtual STDMETHODIMP _GetNumericControlByDescription(HidNumericControlDescription* controlDescription, HidNumericControl* *value);
};
template<typename X> struct IHidOutputReport_adaptor : X {
	union {
		struct : property {
			ptr<Storage::Streams::IBuffer> get() { Storage::Streams::IBuffer* value; hrcheck(enc(&IHidOutputReport_adaptor::Data)->_get_Data(&value)); return from_abi(value); }
			ptr<Storage::Streams::IBuffer> operator()() { return get(); }
			operator ptr<Storage::Streams::IBuffer> () { return get(); }
			ptr<Storage::Streams::IBuffer> operator->() { return get(); }
			void put(pptr<Storage::Streams::IBuffer> value) { hrcheck(enc(&IHidOutputReport_adaptor::Data)->_put_Data(value)); }
			void operator=(pptr<Storage::Streams::IBuffer> value) { put(value); }
			void operator()(pptr<Storage::Streams::IBuffer> value) { put(value); }
		} Data;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidOutputReport_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} Id;
	};
	ptr<HidBooleanControl> GetBooleanControl(unsigned short usagePage, unsigned short usageId) { HidBooleanControl* value; hrcheck(X::get()->_GetBooleanControl(usagePage, usageId, &value)); return from_abi(value); }
	ptr<HidBooleanControl> GetBooleanControlByDescription(pptr<HidBooleanControlDescription> controlDescription) { HidBooleanControl* value; hrcheck(X::get()->_GetBooleanControlByDescription(controlDescription, &value)); return from_abi(value); }
	ptr<HidNumericControl> GetNumericControl(unsigned short usagePage, unsigned short usageId) { HidNumericControl* value; hrcheck(X::get()->_GetNumericControl(usagePage, usageId, &value)); return from_abi(value); }
	ptr<HidNumericControl> GetNumericControlByDescription(pptr<HidNumericControlDescription> controlDescription) { HidNumericControl* value; hrcheck(X::get()->_GetNumericControlByDescription(controlDescription, &value)); return from_abi(value); }
	IHidOutputReport_adaptor() {}
};
template<typename X> struct adapt<IHidOutputReport, X> : Windows::Devices::HumanInterfaceDevice::IHidOutputReport_adaptor<X> { typedef adapt IHidOutputReport; };
struct IHidOutputReport : IHidOutputReport_raw, generate<IHidOutputReport> {};

// HidOutputReport
template<typename X> struct statics<HidOutputReport, X> : X {
	typedef typename X::root_type HidOutputReport;
};
struct HidOutputReport : generate<HidOutputReport> {};

// IHidBooleanControlDescription2
struct IHidBooleanControlDescription2_raw : IInspectable {
	virtual STDMETHODIMP _get_IsAbsolute(bool *value);
};
template<typename X> struct IHidBooleanControlDescription2_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHidBooleanControlDescription2_adaptor::IsAbsolute)->_get_IsAbsolute(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAbsolute;
	};
	IHidBooleanControlDescription2_adaptor() {}
};
template<typename X> struct adapt<IHidBooleanControlDescription2, X> : Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription2_adaptor<X> { typedef adapt IHidBooleanControlDescription2; };
struct IHidBooleanControlDescription2 : IHidBooleanControlDescription2_raw, generate<IHidBooleanControlDescription2> {};

// IHidBooleanControlDescription
struct IHidBooleanControlDescription_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_ReportId(unsigned short *value);
	virtual STDMETHODIMP _get_ReportType(HidReportType *value);
	virtual STDMETHODIMP _get_UsagePage(unsigned short *value);
	virtual STDMETHODIMP _get_UsageId(unsigned short *value);
	virtual STDMETHODIMP _get_ParentCollections(Foundation::Collections::IVectorView<HidCollection*>* *value);
};
template<typename X> struct IHidBooleanControlDescription_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidBooleanControlDescription_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> get() { Foundation::Collections::IVectorView<HidCollection*>* value; hrcheck(enc(&IHidBooleanControlDescription_adaptor::ParentCollections)->_get_ParentCollections(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> operator->() { return get(); }
		} ParentCollections;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidBooleanControlDescription_adaptor::ReportId)->_get_ReportId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} ReportId;
		struct : property {
			HidReportType get() { HidReportType value; hrcheck(enc(&IHidBooleanControlDescription_adaptor::ReportType)->_get_ReportType(&value)); return value; }
			HidReportType operator()() { return get(); }
			operator HidReportType () { return get(); }
		} ReportType;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidBooleanControlDescription_adaptor::UsageId)->_get_UsageId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsageId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidBooleanControlDescription_adaptor::UsagePage)->_get_UsagePage(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsagePage;
	};
	IHidBooleanControlDescription_adaptor() {}
};
template<typename X> struct adapt<IHidBooleanControlDescription, X> : Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription_adaptor<X> { typedef adapt IHidBooleanControlDescription; };
struct IHidBooleanControlDescription : IHidBooleanControlDescription_raw, generate<IHidBooleanControlDescription> {};

// HidBooleanControlDescription
template<typename X> struct statics<HidBooleanControlDescription, X> : X {
	typedef typename X::root_type HidBooleanControlDescription;
};
struct HidBooleanControlDescription : generate<HidBooleanControlDescription> {};

// IHidNumericControlDescription
struct IHidNumericControlDescription_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_ReportId(unsigned short *value);
	virtual STDMETHODIMP _get_ReportType(HidReportType *value);
	virtual STDMETHODIMP _get_ReportSize(unsigned *value);
	virtual STDMETHODIMP _get_ReportCount(unsigned *value);
	virtual STDMETHODIMP _get_UsagePage(unsigned short *value);
	virtual STDMETHODIMP _get_UsageId(unsigned short *value);
	virtual STDMETHODIMP _get_LogicalMinimum(int *value);
	virtual STDMETHODIMP _get_LogicalMaximum(int *value);
	virtual STDMETHODIMP _get_PhysicalMinimum(int *value);
	virtual STDMETHODIMP _get_PhysicalMaximum(int *value);
	virtual STDMETHODIMP _get_UnitExponent(unsigned *value);
	virtual STDMETHODIMP _get_Unit(unsigned *value);
	virtual STDMETHODIMP _get_IsAbsolute(bool *value);
	virtual STDMETHODIMP _get_HasNull(bool *value);
	virtual STDMETHODIMP _get_ParentCollections(Foundation::Collections::IVectorView<HidCollection*>* *value);
};
template<typename X> struct IHidNumericControlDescription_adaptor : X {
	union {
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHidNumericControlDescription_adaptor::HasNull)->_get_HasNull(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} HasNull;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidNumericControlDescription_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHidNumericControlDescription_adaptor::IsAbsolute)->_get_IsAbsolute(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsAbsolute;
		struct : property {
			int get() { int value; hrcheck(enc(&IHidNumericControlDescription_adaptor::LogicalMaximum)->_get_LogicalMaximum(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LogicalMaximum;
		struct : property {
			int get() { int value; hrcheck(enc(&IHidNumericControlDescription_adaptor::LogicalMinimum)->_get_LogicalMinimum(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} LogicalMinimum;
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> get() { Foundation::Collections::IVectorView<HidCollection*>* value; hrcheck(enc(&IHidNumericControlDescription_adaptor::ParentCollections)->_get_ParentCollections(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<HidCollection>>> operator->() { return get(); }
		} ParentCollections;
		struct : property {
			int get() { int value; hrcheck(enc(&IHidNumericControlDescription_adaptor::PhysicalMaximum)->_get_PhysicalMaximum(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} PhysicalMaximum;
		struct : property {
			int get() { int value; hrcheck(enc(&IHidNumericControlDescription_adaptor::PhysicalMinimum)->_get_PhysicalMinimum(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
		} PhysicalMinimum;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidNumericControlDescription_adaptor::ReportCount)->_get_ReportCount(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ReportCount;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidNumericControlDescription_adaptor::ReportId)->_get_ReportId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} ReportId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidNumericControlDescription_adaptor::ReportSize)->_get_ReportSize(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} ReportSize;
		struct : property {
			HidReportType get() { HidReportType value; hrcheck(enc(&IHidNumericControlDescription_adaptor::ReportType)->_get_ReportType(&value)); return value; }
			HidReportType operator()() { return get(); }
			operator HidReportType () { return get(); }
		} ReportType;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidNumericControlDescription_adaptor::Unit)->_get_Unit(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Unit;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidNumericControlDescription_adaptor::UnitExponent)->_get_UnitExponent(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} UnitExponent;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidNumericControlDescription_adaptor::UsageId)->_get_UsageId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsageId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidNumericControlDescription_adaptor::UsagePage)->_get_UsagePage(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsagePage;
	};
	IHidNumericControlDescription_adaptor() {}
};
template<typename X> struct adapt<IHidNumericControlDescription, X> : Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription_adaptor<X> { typedef adapt IHidNumericControlDescription; };
struct IHidNumericControlDescription : IHidNumericControlDescription_raw, generate<IHidNumericControlDescription> {};

// HidNumericControlDescription
template<typename X> struct statics<HidNumericControlDescription, X> : X {
	typedef typename X::root_type HidNumericControlDescription;
};
struct HidNumericControlDescription : generate<HidNumericControlDescription> {};

// IHidInputReportReceivedEventArgs
struct IHidInputReportReceivedEventArgs_raw : IInspectable {
	virtual STDMETHODIMP _get_Report(HidInputReport* *value);
};
template<typename X> struct IHidInputReportReceivedEventArgs_adaptor : X {
	union {
		struct : property {
			ptr<HidInputReport> get() { HidInputReport* value; hrcheck(enc(&IHidInputReportReceivedEventArgs_adaptor::Report)->_get_Report(&value)); return from_abi(value); }
			ptr<HidInputReport> operator()() { return get(); }
			operator ptr<HidInputReport> () { return get(); }
			ptr<HidInputReport> operator->() { return get(); }
		} Report;
	};
	IHidInputReportReceivedEventArgs_adaptor() {}
};
template<typename X> struct adapt<IHidInputReportReceivedEventArgs, X> : Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs_adaptor<X> { typedef adapt IHidInputReportReceivedEventArgs; };
struct IHidInputReportReceivedEventArgs : IHidInputReportReceivedEventArgs_raw, generate<IHidInputReportReceivedEventArgs> {};

// HidInputReportReceivedEventArgs
template<typename X> struct statics<HidInputReportReceivedEventArgs, X> : X {
	typedef typename X::root_type HidInputReportReceivedEventArgs;
};
struct HidInputReportReceivedEventArgs : generate<HidInputReportReceivedEventArgs> {};

// IHidCollection
struct IHidCollection_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_Type(HidCollectionType *value);
	virtual STDMETHODIMP _get_UsagePage(unsigned *value);
	virtual STDMETHODIMP _get_UsageId(unsigned *value);
};
template<typename X> struct IHidCollection_adaptor : X {
	union {
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidCollection_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			HidCollectionType get() { HidCollectionType value; hrcheck(enc(&IHidCollection_adaptor::Type)->_get_Type(&value)); return value; }
			HidCollectionType operator()() { return get(); }
			operator HidCollectionType () { return get(); }
		} Type;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidCollection_adaptor::UsageId)->_get_UsageId(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} UsageId;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidCollection_adaptor::UsagePage)->_get_UsagePage(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} UsagePage;
	};
	IHidCollection_adaptor() {}
};
template<typename X> struct adapt<IHidCollection, X> : Windows::Devices::HumanInterfaceDevice::IHidCollection_adaptor<X> { typedef adapt IHidCollection; };
struct IHidCollection : IHidCollection_raw, generate<IHidCollection> {};

// HidCollection
template<typename X> struct statics<HidCollection, X> : X {
	typedef typename X::root_type HidCollection;
};
struct HidCollection : generate<HidCollection> {};

// IHidBooleanControl
struct IHidBooleanControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_UsagePage(unsigned short *value);
	virtual STDMETHODIMP _get_UsageId(unsigned short *value);
	virtual STDMETHODIMP _get_IsActive(bool *value);
	virtual STDMETHODIMP _put_IsActive(bool value);
	virtual STDMETHODIMP _get_ControlDescription(HidBooleanControlDescription* *value);
};
template<typename X> struct IHidBooleanControl_adaptor : X {
	union {
		struct : property {
			ptr<HidBooleanControlDescription> get() { HidBooleanControlDescription* value; hrcheck(enc(&IHidBooleanControl_adaptor::ControlDescription)->_get_ControlDescription(&value)); return from_abi(value); }
			ptr<HidBooleanControlDescription> operator()() { return get(); }
			operator ptr<HidBooleanControlDescription> () { return get(); }
			ptr<HidBooleanControlDescription> operator->() { return get(); }
		} ControlDescription;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidBooleanControl_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHidBooleanControl_adaptor::IsActive)->_get_IsActive(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
			void put(bool value) { hrcheck(enc(&IHidBooleanControl_adaptor::IsActive)->_put_IsActive(value)); }
			void operator=(bool value) { put(value); }
			void operator()(bool value) { put(value); }
		} IsActive;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidBooleanControl_adaptor::UsageId)->_get_UsageId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsageId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidBooleanControl_adaptor::UsagePage)->_get_UsagePage(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsagePage;
	};
	IHidBooleanControl_adaptor() {}
};
template<typename X> struct adapt<IHidBooleanControl, X> : Windows::Devices::HumanInterfaceDevice::IHidBooleanControl_adaptor<X> { typedef adapt IHidBooleanControl; };
struct IHidBooleanControl : IHidBooleanControl_raw, generate<IHidBooleanControl> {};

// HidBooleanControl
template<typename X> struct statics<HidBooleanControl, X> : X {
	typedef typename X::root_type HidBooleanControl;
};
struct HidBooleanControl : generate<HidBooleanControl> {};

// IHidNumericControl
struct IHidNumericControl_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(unsigned *value);
	virtual STDMETHODIMP _get_IsGrouped(bool *value);
	virtual STDMETHODIMP _get_UsagePage(unsigned short *value);
	virtual STDMETHODIMP _get_UsageId(unsigned short *value);
	virtual STDMETHODIMP _get_Value(__int64 *value);
	virtual STDMETHODIMP _put_Value(__int64 value);
	virtual STDMETHODIMP _get_ScaledValue(__int64 *value);
	virtual STDMETHODIMP _put_ScaledValue(__int64 value);
	virtual STDMETHODIMP _get_ControlDescription(HidNumericControlDescription* *value);
};
template<typename X> struct IHidNumericControl_adaptor : X {
	union {
		struct : property {
			ptr<HidNumericControlDescription> get() { HidNumericControlDescription* value; hrcheck(enc(&IHidNumericControl_adaptor::ControlDescription)->_get_ControlDescription(&value)); return from_abi(value); }
			ptr<HidNumericControlDescription> operator()() { return get(); }
			operator ptr<HidNumericControlDescription> () { return get(); }
			ptr<HidNumericControlDescription> operator->() { return get(); }
		} ControlDescription;
		struct : property {
			unsigned get() { unsigned value; hrcheck(enc(&IHidNumericControl_adaptor::Id)->_get_Id(&value)); return value; }
			unsigned operator()() { return get(); }
			operator unsigned () { return get(); }
		} Id;
		struct : property {
			bool get() { bool value; hrcheck(enc(&IHidNumericControl_adaptor::IsGrouped)->_get_IsGrouped(&value)); return value; }
			bool operator()() { return get(); }
			operator bool () { return get(); }
		} IsGrouped;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IHidNumericControl_adaptor::ScaledValue)->_get_ScaledValue(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
			void put(__int64 value) { hrcheck(enc(&IHidNumericControl_adaptor::ScaledValue)->_put_ScaledValue(value)); }
			void operator=(__int64 value) { put(value); }
			void operator()(__int64 value) { put(value); }
		} ScaledValue;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidNumericControl_adaptor::UsageId)->_get_UsageId(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsageId;
		struct : property {
			unsigned short get() { unsigned short value; hrcheck(enc(&IHidNumericControl_adaptor::UsagePage)->_get_UsagePage(&value)); return value; }
			unsigned short operator()() { return get(); }
			operator unsigned short () { return get(); }
		} UsagePage;
		struct : property {
			__int64 get() { __int64 value; hrcheck(enc(&IHidNumericControl_adaptor::Value)->_get_Value(&value)); return value; }
			__int64 operator()() { return get(); }
			operator __int64 () { return get(); }
			void put(__int64 value) { hrcheck(enc(&IHidNumericControl_adaptor::Value)->_put_Value(value)); }
			void operator=(__int64 value) { put(value); }
			void operator()(__int64 value) { put(value); }
		} Value;
	};
	IHidNumericControl_adaptor() {}
};
template<typename X> struct adapt<IHidNumericControl, X> : Windows::Devices::HumanInterfaceDevice::IHidNumericControl_adaptor<X> { typedef adapt IHidNumericControl; };
struct IHidNumericControl : IHidNumericControl_raw, generate<IHidNumericControl> {};

// HidNumericControl
template<typename X> struct statics<HidNumericControl, X> : X {
	typedef typename X::root_type HidNumericControl;
};
struct HidNumericControl : generate<HidNumericControl> {};
}}}
} // namespace iso_winrt
