#pragma once
// generated by isopod tools
// namespaces:
// Windows.Phone.System.UserProfile.GameServices.Core

#include "Windows.Phone.System.UserProfile.GameServices.Core.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation {
template<typename TResult> struct IAsyncOperation;
struct Uri;
}
namespace Storage { namespace Streams {
struct IBuffer;
}}}

// defs

template<> struct def<Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection> : interface_type<> {};
template<> struct def<Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection> : class_type<Platform::Object, Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection> {};
template<> struct def<Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind> : enum_type<int> {};
template<> struct def<Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome> : enum_type<int> {};
template<> struct def<Windows::Phone::System::UserProfile::GameServices::Core::IGameService> : interface_type<> {};
template<> struct def<Windows::Phone::System::UserProfile::GameServices::Core::IGameService2> : interface_type<> {};
template<> struct def<Windows::Phone::System::UserProfile::GameServices::Core::GameService> : class_type<Platform::Object, Platform::Object> {};

// uuids

template<> struct uuid<Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection> { define_guid(0x7E57FC8, 0xDEBB, 0x4609, 0x9C, 0xC8, 0x52, 0x9D, 0x16, 0xBC, 0x2B, 0xD9);};
template<> struct uuid<Windows::Phone::System::UserProfile::GameServices::Core::IGameService> { define_guid(0x2E2D5098, 0x48A9, 0x4EFC, 0xAF, 0xD6, 0x8E, 0x6D, 0xA0, 0x90, 0x3, 0xFB);};
template<> struct uuid<Windows::Phone::System::UserProfile::GameServices::Core::IGameService2> { define_guid(0xD2364EF6, 0xEA17, 0x4BE5, 0x8D, 0x8A, 0xC8, 0x60, 0x88, 0x5E, 0x5, 0x1F);};

// types

namespace Windows { namespace Phone { namespace System { namespace UserProfile { namespace GameServices { namespace Core {

// IGameServicePropertyCollection
struct IGameServicePropertyCollection_raw : IInspectable {
	virtual STDMETHODIMP _GetPropertyAsync(HSTRING propertyName, Foundation::IAsyncOperation<IInspectable*>* *operation);
};
template<typename X> struct IGameServicePropertyCollection_adaptor : X {
	ptr<Foundation::IAsyncOperation<object>> GetPropertyAsync(hstring_ref propertyName) { Foundation::IAsyncOperation<IInspectable*>* operation; hrcheck(X::get()->_GetPropertyAsync(propertyName, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IGameServicePropertyCollection, X> : Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection_adaptor<X> { typedef adapt IGameServicePropertyCollection; };
struct IGameServicePropertyCollection : IGameServicePropertyCollection_raw, generate<IGameServicePropertyCollection> {};

// GameServicePropertyCollection
template<typename X> struct statics<GameServicePropertyCollection, X> : X {
	typedef typename X::root_type GameServicePropertyCollection;
};
struct GameServicePropertyCollection : generate<GameServicePropertyCollection> {};

// IGameService
struct IGameService : IInspectable {
	virtual STDMETHODIMP _get_ServiceUri(Foundation::Uri* *value);
	virtual STDMETHODIMP _GetGamerProfileAsync(Foundation::IAsyncOperation<GameServicePropertyCollection*>* *operation);
	virtual STDMETHODIMP _GetInstalledGameItemsAsync(Foundation::IAsyncOperation<GameServicePropertyCollection*>* *operation);
	virtual STDMETHODIMP _GetPartnerTokenAsync(Foundation::Uri* audienceUri, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GetPrivilegesAsync(Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _GrantAchievement(unsigned achievementId);
	virtual STDMETHODIMP _GrantAvatarAward(unsigned avatarAwardId);
	virtual STDMETHODIMP _PostResult(unsigned gameVariant, GameServiceScoreKind scoreKind, __int64 scoreValue, GameServiceGameOutcome gameOutcome, Storage::Streams::IBuffer* buffer);
};

// IGameService2
struct IGameService2 : IInspectable {
	virtual STDMETHODIMP _NotifyPartnerTokenExpired(Foundation::Uri* audienceUri);
	virtual STDMETHODIMP _GetAuthenticationStatus(unsigned *status);
};

// GameService
template<typename> struct GameService_statics {
	static struct _ServiceUri : property {
		ptr<Foundation::Uri> get() { Foundation::Uri* value; hrcheck(get_activation_factory<GameService, IGameService>()->_get_ServiceUri(&value)); return from_abi(value); }
		ptr<Foundation::Uri> operator()() { return get(); }
		operator ptr<Foundation::Uri> () { return get(); }
		ptr<Foundation::Uri> operator->() { return get(); }
	} ServiceUri;
	static void NotifyPartnerTokenExpired(pptr<Foundation::Uri> audienceUri) { hrcheck(get_activation_factory<GameService, IGameService2>()->_NotifyPartnerTokenExpired(audienceUri)); }
	static unsigned GetAuthenticationStatus() { unsigned status; hrcheck(get_activation_factory<GameService, IGameService2>()->_GetAuthenticationStatus(&status)); return status; }
	static ptr<Foundation::IAsyncOperation<ptr<GameServicePropertyCollection>>> GetGamerProfileAsync() { Foundation::IAsyncOperation<GameServicePropertyCollection*>* operation; hrcheck(get_activation_factory<GameService, IGameService>()->_GetGamerProfileAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<ptr<GameServicePropertyCollection>>> GetInstalledGameItemsAsync() { Foundation::IAsyncOperation<GameServicePropertyCollection*>* operation; hrcheck(get_activation_factory<GameService, IGameService>()->_GetInstalledGameItemsAsync(&operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetPartnerTokenAsync(pptr<Foundation::Uri> audienceUri) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<GameService, IGameService>()->_GetPartnerTokenAsync(audienceUri, &operation)); return from_abi(operation); }
	static ptr<Foundation::IAsyncOperation<hstring>> GetPrivilegesAsync() { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(get_activation_factory<GameService, IGameService>()->_GetPrivilegesAsync(&operation)); return from_abi(operation); }
	static void GrantAchievement(unsigned achievementId) { hrcheck(get_activation_factory<GameService, IGameService>()->_GrantAchievement(achievementId)); }
	static void GrantAvatarAward(unsigned avatarAwardId) { hrcheck(get_activation_factory<GameService, IGameService>()->_GrantAvatarAward(avatarAwardId)); }
	static void PostResult(unsigned gameVariant, GameServiceScoreKind scoreKind, __int64 scoreValue, GameServiceGameOutcome gameOutcome, pptr<Storage::Streams::IBuffer> buffer) { hrcheck(get_activation_factory<GameService, IGameService>()->_PostResult(gameVariant, scoreKind, scoreValue, gameOutcome, buffer)); }
};
template<typename X> typename GameService_statics<X>::_ServiceUri GameService_statics<X>::ServiceUri;

template<typename X> struct statics<GameService, X> : X, Windows::Phone::System::UserProfile::GameServices::Core::GameService_statics<void> {
	typedef typename X::root_type GameService;
};
struct GameService : generate<GameService> {};
}}}}}}
} // namespace iso_winrt
