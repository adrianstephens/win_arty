#pragma once
// generated by isopod tools
// namespaces:
// Windows.Perception.People

#include "Windows.Perception.People.0.h"
#include "Windows.Foundation.Numerics.0.h"

namespace iso_winrt {

// forward types


// defs

template<> struct def<Windows::Perception::People::IHeadPose> : interface_type<> {};
template<> struct def<Windows::Perception::People::HeadPose> : class_type<Platform::Object, Windows::Perception::People::IHeadPose> {};

// uuids

template<> struct uuid<Windows::Perception::People::IHeadPose> { define_guid(0x7F5AC5A5, 0x49DB, 0x379F, 0x94, 0x29, 0x32, 0xA2, 0xFA, 0xF3, 0x4F, 0xA6);};

// types

namespace Windows { namespace Perception { namespace People {

// IHeadPose
struct IHeadPose_raw : IInspectable {
	virtual STDMETHODIMP _get_Position(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _get_ForwardDirection(Foundation::Numerics::Vector3 *value);
	virtual STDMETHODIMP _get_UpDirection(Foundation::Numerics::Vector3 *value);
};
template<typename X> struct IHeadPose_adaptor : X {
	union {
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&IHeadPose_adaptor::ForwardDirection)->_get_ForwardDirection(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} ForwardDirection;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&IHeadPose_adaptor::Position)->_get_Position(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} Position;
		struct : property {
			Foundation::Numerics::Vector3 get() { Foundation::Numerics::Vector3 value; hrcheck(enc(&IHeadPose_adaptor::UpDirection)->_get_UpDirection(&value)); return value; }
			Foundation::Numerics::Vector3 operator()() { return get(); }
			operator Foundation::Numerics::Vector3 () { return get(); }
		} UpDirection;
	};
	IHeadPose_adaptor() {}
};
template<typename X> struct adapt<IHeadPose, X> : Windows::Perception::People::IHeadPose_adaptor<X> { typedef adapt IHeadPose; };
struct IHeadPose : IHeadPose_raw, generate<IHeadPose> {};

// HeadPose
template<typename X> struct statics<HeadPose, X> : X {
	typedef typename X::root_type HeadPose;
};
struct HeadPose : generate<HeadPose> {};
}}}
} // namespace iso_winrt
