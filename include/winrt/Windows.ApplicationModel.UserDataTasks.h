#pragma once
// generated by isopod tools
// namespaces:
// Windows.ApplicationModel.UserDataTasks

#include "Windows.ApplicationModel.UserDataTasks.0.h"
#include "Windows.Foundation.0.h"

namespace iso_winrt {

// forward types

namespace Windows { namespace Foundation { namespace Collections {
template<typename T> struct IVectorView;
}}
namespace System {
struct User;
}}

// defs

template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskStoreAccessType> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskListOtherAppReadAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskListOtherAppWriteAccess> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskPriority> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskSensitivity> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskDetailsKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceUnit> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationUnit> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskDaysOfWeek> : enum_type<unsigned> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskQuerySortProperty> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryKind> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskWeekOfMonth> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncStatus> : enum_type<int> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskManagerStatics> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskManager> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskManager> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskStore> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskStore> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskStore> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskList> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskList> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskList> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskQueryOptions> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskListLimitedWriteOperations> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskListLimitedWriteOperations> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskListLimitedWriteOperations> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskListSyncManager> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskListSyncManager> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskListSyncManager> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskReader> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskReader> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskReader> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskQueryOptions> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskQueryOptions> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTask> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTask> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTask> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskBatch> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskBatch> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskBatch> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskRecurrenceProperties> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskRecurrenceProperties> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskRecurrenceProperties> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::IUserDataTaskRegenerationProperties> : interface_type<> {};
template<> struct def<Windows::ApplicationModel::UserDataTasks::UserDataTaskRegenerationProperties> : class_type<Platform::Object, Windows::ApplicationModel::UserDataTasks::IUserDataTaskRegenerationProperties> {};

// uuids

template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskManagerStatics> { define_guid(0xB35539F8, 0xC502, 0x47FC, 0xA8, 0x1E, 0x10, 0x8, 0x83, 0x71, 0x9D, 0x55);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskManager> { define_guid(0x8451C914, 0xE60B, 0x48A9, 0x92, 0x11, 0x7F, 0xB8, 0xA5, 0x6C, 0xB8, 0x4C);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskStore> { define_guid(0xF06A9CB0, 0xF1DB, 0x45BA, 0x8A, 0x62, 0x8, 0x60, 0x4, 0xC0, 0x21, 0x3D);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskList> { define_guid(0x49412E39, 0x7C1D, 0x4DF1, 0xBE, 0xD3, 0x31, 0x4B, 0x7C, 0xBF, 0x5E, 0x4E);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskQueryOptions> { define_guid(0x959F27ED, 0x909A, 0x4D30, 0x8C, 0x1B, 0x33, 0x1D, 0x8F, 0xE6, 0x67, 0xE2);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskListLimitedWriteOperations> { define_guid(0x7AA267F2, 0x6078, 0x4183, 0x91, 0x9E, 0x4F, 0x29, 0xF1, 0x9C, 0xFA, 0xE9);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskListSyncManager> { define_guid(0x8E591A95, 0x1DCF, 0x469F, 0x93, 0xEC, 0xBA, 0x48, 0xBB, 0x55, 0x3C, 0x6B);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskReader> { define_guid(0x3E688B1, 0x4CCF, 0x4500, 0x88, 0x3B, 0xE7, 0x62, 0x90, 0xCF, 0xED, 0x63);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTask> { define_guid(0x7C6585D1, 0xE0D4, 0x4F99, 0xAE, 0xE2, 0xBC, 0x2D, 0x5D, 0xDA, 0xDF, 0x4C);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskBatch> { define_guid(0x382DA5FE, 0x20B5, 0x431C, 0x8F, 0x42, 0xA5, 0xD2, 0x92, 0xEC, 0x93, 0xC);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskRecurrenceProperties> { define_guid(0x73DF80B0, 0x27C6, 0x40CE, 0xB1, 0x49, 0x9C, 0xD4, 0x14, 0x85, 0xA6, 0x9E);};
template<> struct uuid<Windows::ApplicationModel::UserDataTasks::IUserDataTaskRegenerationProperties> { define_guid(0x92AB0007, 0x90E, 0x4704, 0xBB, 0x5C, 0x84, 0xFC, 0xB, 0xD, 0x9C, 0x31);};

// types

namespace Windows { namespace ApplicationModel { namespace UserDataTasks {

// IUserDataTaskManagerStatics
struct IUserDataTaskManagerStatics : IInspectable {
	virtual STDMETHODIMP _GetDefault(UserDataTaskManager* *result);
	virtual STDMETHODIMP _GetForUser(System::User* user, UserDataTaskManager* *result);
};

// IUserDataTaskManager
struct IUserDataTaskManager_raw : IInspectable {
	virtual STDMETHODIMP _RequestStoreAsync(UserDataTaskStoreAccessType accessType, Foundation::IAsyncOperation<UserDataTaskStore*>* *operation);
	virtual STDMETHODIMP _get_User(System::User* *value);
};
template<typename X> struct IUserDataTaskManager_adaptor : X {
	union {
		struct : property {
			ptr<System::User> get() { System::User* value; hrcheck(enc(&IUserDataTaskManager_adaptor::User)->_get_User(&value)); return from_abi(value); }
			ptr<System::User> operator()() { return get(); }
			operator ptr<System::User> () { return get(); }
			ptr<System::User> operator->() { return get(); }
		} User;
	};
	ptr<Foundation::IAsyncOperation<ptr<UserDataTaskStore>>> RequestStoreAsync(UserDataTaskStoreAccessType accessType) { Foundation::IAsyncOperation<UserDataTaskStore*>* operation; hrcheck(X::get()->_RequestStoreAsync(accessType, &operation)); return from_abi(operation); }
	IUserDataTaskManager_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskManager, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskManager_adaptor<X> { typedef adapt IUserDataTaskManager; };
struct IUserDataTaskManager : IUserDataTaskManager_raw, generate<IUserDataTaskManager> {};

// UserDataTaskManager
template<typename> struct UserDataTaskManager_statics {
	static ptr<UserDataTaskManager> GetDefault() { UserDataTaskManager* result; hrcheck(get_activation_factory<UserDataTaskManager, IUserDataTaskManagerStatics>()->_GetDefault(&result)); return from_abi(result); }
	static ptr<UserDataTaskManager> GetForUser(pptr<System::User> user) { UserDataTaskManager* result; hrcheck(get_activation_factory<UserDataTaskManager, IUserDataTaskManagerStatics>()->_GetForUser(user, &result)); return from_abi(result); }
};

template<typename X> struct statics<UserDataTaskManager, X> : X, Windows::ApplicationModel::UserDataTasks::UserDataTaskManager_statics<void> {
	typedef typename X::root_type UserDataTaskManager;
};
struct UserDataTaskManager : generate<UserDataTaskManager> {};

// IUserDataTaskStore
struct IUserDataTaskStore_raw : IInspectable {
	virtual STDMETHODIMP _CreateListAsync(HSTRING name, Foundation::IAsyncOperation<UserDataTaskList*>* *operation);
	virtual STDMETHODIMP _CreateListInAccountAsync(HSTRING name, HSTRING userDataAccountId, Foundation::IAsyncOperation<UserDataTaskList*>* *result);
	virtual STDMETHODIMP _FindListsAsync(Foundation::IAsyncOperation<Foundation::Collections::IVectorView<UserDataTaskList*>*>* *operation);
	virtual STDMETHODIMP _GetListAsync(HSTRING taskListId, Foundation::IAsyncOperation<UserDataTaskList*>* *operation);
};
template<typename X> struct IUserDataTaskStore_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<UserDataTaskList>>> CreateListAsync(hstring_ref name) { Foundation::IAsyncOperation<UserDataTaskList*>* operation; hrcheck(X::get()->_CreateListAsync(name, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<UserDataTaskList>>> CreateListAsync(hstring_ref name, hstring_ref userDataAccountId) { Foundation::IAsyncOperation<UserDataTaskList*>* result; hrcheck(X::get()->_CreateListInAccountAsync(name, userDataAccountId, &result)); return from_abi(result); }
	ptr<Foundation::IAsyncOperation<ptr<Foundation::Collections::IVectorView<ptr<UserDataTaskList>>>>> FindListsAsync() { Foundation::IAsyncOperation<Foundation::Collections::IVectorView<UserDataTaskList*>*>* operation; hrcheck(X::get()->_FindListsAsync(&operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<ptr<UserDataTaskList>>> GetListAsync(hstring_ref taskListId) { Foundation::IAsyncOperation<UserDataTaskList*>* operation; hrcheck(X::get()->_GetListAsync(taskListId, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IUserDataTaskStore, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskStore_adaptor<X> { typedef adapt IUserDataTaskStore; };
struct IUserDataTaskStore : IUserDataTaskStore_raw, generate<IUserDataTaskStore> {};

// UserDataTaskStore
template<typename X> struct statics<UserDataTaskStore, X> : X {
	typedef typename X::root_type UserDataTaskStore;
};
struct UserDataTaskStore : generate<UserDataTaskStore> {
	using IUserDataTaskStore::CreateListAsync;
};

// IUserDataTaskList
struct IUserDataTaskList_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_UserDataAccountId(HSTRING *value);
	virtual STDMETHODIMP _get_DisplayName(HSTRING *value);
	virtual STDMETHODIMP _put_DisplayName(HSTRING value);
	virtual STDMETHODIMP _get_SourceDisplayName(HSTRING *value);
	virtual STDMETHODIMP _get_OtherAppReadAccess(UserDataTaskListOtherAppReadAccess *value);
	virtual STDMETHODIMP _put_OtherAppReadAccess(UserDataTaskListOtherAppReadAccess value);
	virtual STDMETHODIMP _get_OtherAppWriteAccess(UserDataTaskListOtherAppWriteAccess *value);
	virtual STDMETHODIMP _put_OtherAppWriteAccess(UserDataTaskListOtherAppWriteAccess value);
	virtual STDMETHODIMP _get_LimitedWriteOperations(UserDataTaskListLimitedWriteOperations* *value);
	virtual STDMETHODIMP _get_SyncManager(UserDataTaskListSyncManager* *value);
	virtual STDMETHODIMP _RegisterSyncManagerAsync(Foundation::IAsyncAction* *result);
	virtual STDMETHODIMP _GetTaskReader(UserDataTaskReader* *result);
	virtual STDMETHODIMP _GetTaskReaderWithOptions(UserDataTaskQueryOptions* options, UserDataTaskReader* *value);
	virtual STDMETHODIMP _GetTaskAsync(HSTRING userDataTask, Foundation::IAsyncOperation<UserDataTask*>* *operation);
	virtual STDMETHODIMP _SaveTaskAsync(UserDataTask* userDataTask, Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _DeleteTaskAsync(HSTRING userDataTaskId, Foundation::IAsyncAction* *action);
	virtual STDMETHODIMP _DeleteAsync(Foundation::IAsyncAction* *asyncAction);
	virtual STDMETHODIMP _SaveAsync(Foundation::IAsyncAction* *asyncAction);
};
template<typename X> struct IUserDataTaskList_adaptor : X {
	union {
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskList_adaptor::DisplayName)->_get_DisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserDataTaskList_adaptor::DisplayName)->_put_DisplayName(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} DisplayName;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskList_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			ptr<UserDataTaskListLimitedWriteOperations> get() { UserDataTaskListLimitedWriteOperations* value; hrcheck(enc(&IUserDataTaskList_adaptor::LimitedWriteOperations)->_get_LimitedWriteOperations(&value)); return from_abi(value); }
			ptr<UserDataTaskListLimitedWriteOperations> operator()() { return get(); }
			operator ptr<UserDataTaskListLimitedWriteOperations> () { return get(); }
			ptr<UserDataTaskListLimitedWriteOperations> operator->() { return get(); }
		} LimitedWriteOperations;
		struct : property {
			UserDataTaskListOtherAppReadAccess get() { UserDataTaskListOtherAppReadAccess value; hrcheck(enc(&IUserDataTaskList_adaptor::OtherAppReadAccess)->_get_OtherAppReadAccess(&value)); return value; }
			UserDataTaskListOtherAppReadAccess operator()() { return get(); }
			operator UserDataTaskListOtherAppReadAccess () { return get(); }
			void put(UserDataTaskListOtherAppReadAccess value) { hrcheck(enc(&IUserDataTaskList_adaptor::OtherAppReadAccess)->_put_OtherAppReadAccess(value)); }
			void operator=(UserDataTaskListOtherAppReadAccess value) { put(value); }
			void operator()(UserDataTaskListOtherAppReadAccess value) { put(value); }
		} OtherAppReadAccess;
		struct : property {
			UserDataTaskListOtherAppWriteAccess get() { UserDataTaskListOtherAppWriteAccess value; hrcheck(enc(&IUserDataTaskList_adaptor::OtherAppWriteAccess)->_get_OtherAppWriteAccess(&value)); return value; }
			UserDataTaskListOtherAppWriteAccess operator()() { return get(); }
			operator UserDataTaskListOtherAppWriteAccess () { return get(); }
			void put(UserDataTaskListOtherAppWriteAccess value) { hrcheck(enc(&IUserDataTaskList_adaptor::OtherAppWriteAccess)->_put_OtherAppWriteAccess(value)); }
			void operator=(UserDataTaskListOtherAppWriteAccess value) { put(value); }
			void operator()(UserDataTaskListOtherAppWriteAccess value) { put(value); }
		} OtherAppWriteAccess;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskList_adaptor::SourceDisplayName)->_get_SourceDisplayName(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} SourceDisplayName;
		struct : property {
			ptr<UserDataTaskListSyncManager> get() { UserDataTaskListSyncManager* value; hrcheck(enc(&IUserDataTaskList_adaptor::SyncManager)->_get_SyncManager(&value)); return from_abi(value); }
			ptr<UserDataTaskListSyncManager> operator()() { return get(); }
			operator ptr<UserDataTaskListSyncManager> () { return get(); }
			ptr<UserDataTaskListSyncManager> operator->() { return get(); }
		} SyncManager;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTaskList_adaptor::UserDataAccountId)->_get_UserDataAccountId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} UserDataAccountId;
	};
	ptr<Foundation::IAsyncAction> RegisterSyncManagerAsync() { Foundation::IAsyncAction* result; hrcheck(X::get()->_RegisterSyncManagerAsync(&result)); return from_abi(result); }
	ptr<UserDataTaskReader> GetTaskReader() { UserDataTaskReader* result; hrcheck(X::get()->_GetTaskReader(&result)); return from_abi(result); }
	ptr<UserDataTaskReader> GetTaskReader(pptr<UserDataTaskQueryOptions> options) { UserDataTaskReader* value; hrcheck(X::get()->_GetTaskReaderWithOptions(options, &value)); return from_abi(value); }
	ptr<Foundation::IAsyncOperation<ptr<UserDataTask>>> GetTaskAsync(hstring_ref userDataTask) { Foundation::IAsyncOperation<UserDataTask*>* operation; hrcheck(X::get()->_GetTaskAsync(userDataTask, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncAction> SaveTaskAsync(pptr<UserDataTask> userDataTask) { Foundation::IAsyncAction* action; hrcheck(X::get()->_SaveTaskAsync(userDataTask, &action)); return from_abi(action); }
	ptr<Foundation::IAsyncAction> DeleteTaskAsync(hstring_ref userDataTaskId) { Foundation::IAsyncAction* action; hrcheck(X::get()->_DeleteTaskAsync(userDataTaskId, &action)); return from_abi(action); }
	ptr<Foundation::IAsyncAction> DeleteAsync() { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_DeleteAsync(&asyncAction)); return from_abi(asyncAction); }
	ptr<Foundation::IAsyncAction> SaveAsync() { Foundation::IAsyncAction* asyncAction; hrcheck(X::get()->_SaveAsync(&asyncAction)); return from_abi(asyncAction); }
	IUserDataTaskList_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskList, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskList_adaptor<X> { typedef adapt IUserDataTaskList; };
struct IUserDataTaskList : IUserDataTaskList_raw, generate<IUserDataTaskList> {};

// UserDataTaskList
template<typename X> struct statics<UserDataTaskList, X> : X {
	typedef typename X::root_type UserDataTaskList;
};
struct UserDataTaskList : generate<UserDataTaskList> {
	using IUserDataTaskList::GetTaskReader;
};

// IUserDataTaskQueryOptions
struct IUserDataTaskQueryOptions_raw : IInspectable {
	virtual STDMETHODIMP _get_SortProperty(UserDataTaskQuerySortProperty *value);
	virtual STDMETHODIMP _put_SortProperty(UserDataTaskQuerySortProperty value);
	virtual STDMETHODIMP _get_Kind(UserDataTaskQueryKind *value);
	virtual STDMETHODIMP _put_Kind(UserDataTaskQueryKind value);
};
template<typename X> struct IUserDataTaskQueryOptions_adaptor : X {
	union {
		struct : property {
			UserDataTaskQueryKind get() { UserDataTaskQueryKind value; hrcheck(enc(&IUserDataTaskQueryOptions_adaptor::Kind)->_get_Kind(&value)); return value; }
			UserDataTaskQueryKind operator()() { return get(); }
			operator UserDataTaskQueryKind () { return get(); }
			void put(UserDataTaskQueryKind value) { hrcheck(enc(&IUserDataTaskQueryOptions_adaptor::Kind)->_put_Kind(value)); }
			void operator=(UserDataTaskQueryKind value) { put(value); }
			void operator()(UserDataTaskQueryKind value) { put(value); }
		} Kind;
		struct : property {
			UserDataTaskQuerySortProperty get() { UserDataTaskQuerySortProperty value; hrcheck(enc(&IUserDataTaskQueryOptions_adaptor::SortProperty)->_get_SortProperty(&value)); return value; }
			UserDataTaskQuerySortProperty operator()() { return get(); }
			operator UserDataTaskQuerySortProperty () { return get(); }
			void put(UserDataTaskQuerySortProperty value) { hrcheck(enc(&IUserDataTaskQueryOptions_adaptor::SortProperty)->_put_SortProperty(value)); }
			void operator=(UserDataTaskQuerySortProperty value) { put(value); }
			void operator()(UserDataTaskQuerySortProperty value) { put(value); }
		} SortProperty;
	};
	IUserDataTaskQueryOptions_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskQueryOptions, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskQueryOptions_adaptor<X> { typedef adapt IUserDataTaskQueryOptions; };
struct IUserDataTaskQueryOptions : IUserDataTaskQueryOptions_raw, generate<IUserDataTaskQueryOptions> {};

// IUserDataTaskListLimitedWriteOperations
struct IUserDataTaskListLimitedWriteOperations_raw : IInspectable {
	virtual STDMETHODIMP _TryCompleteTaskAsync(HSTRING userDataTaskId, Foundation::IAsyncOperation<HSTRING>* *operation);
	virtual STDMETHODIMP _TryCreateOrUpdateTaskAsync(UserDataTask* userDataTask, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TryDeleteTaskAsync(HSTRING userDataTaskId, Foundation::IAsyncOperation<bool>* *operation);
	virtual STDMETHODIMP _TrySkipOccurrenceAsync(HSTRING userDataTaskId, Foundation::IAsyncOperation<bool>* *operation);
};
template<typename X> struct IUserDataTaskListLimitedWriteOperations_adaptor : X {
	ptr<Foundation::IAsyncOperation<hstring>> TryCompleteTaskAsync(hstring_ref userDataTaskId) { Foundation::IAsyncOperation<HSTRING>* operation; hrcheck(X::get()->_TryCompleteTaskAsync(userDataTaskId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryCreateOrUpdateTaskAsync(pptr<UserDataTask> userDataTask) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryCreateOrUpdateTaskAsync(userDataTask, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TryDeleteTaskAsync(hstring_ref userDataTaskId) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TryDeleteTaskAsync(userDataTaskId, &operation)); return from_abi(operation); }
	ptr<Foundation::IAsyncOperation<bool>> TrySkipOccurrenceAsync(hstring_ref userDataTaskId) { Foundation::IAsyncOperation<bool>* operation; hrcheck(X::get()->_TrySkipOccurrenceAsync(userDataTaskId, &operation)); return from_abi(operation); }
};
template<typename X> struct adapt<IUserDataTaskListLimitedWriteOperations, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskListLimitedWriteOperations_adaptor<X> { typedef adapt IUserDataTaskListLimitedWriteOperations; };
struct IUserDataTaskListLimitedWriteOperations : IUserDataTaskListLimitedWriteOperations_raw, generate<IUserDataTaskListLimitedWriteOperations> {};

// UserDataTaskListLimitedWriteOperations
template<typename X> struct statics<UserDataTaskListLimitedWriteOperations, X> : X {
	typedef typename X::root_type UserDataTaskListLimitedWriteOperations;
};
struct UserDataTaskListLimitedWriteOperations : generate<UserDataTaskListLimitedWriteOperations> {};

// IUserDataTaskListSyncManager
struct IUserDataTaskListSyncManager_raw : IInspectable {
	virtual STDMETHODIMP _get_LastAttemptedSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_LastAttemptedSyncTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_LastSuccessfulSyncTime(Foundation::DateTime *value);
	virtual STDMETHODIMP _put_LastSuccessfulSyncTime(Foundation::DateTime value);
	virtual STDMETHODIMP _get_Status(UserDataTaskListSyncStatus *value);
	virtual STDMETHODIMP _put_Status(UserDataTaskListSyncStatus value);
	virtual STDMETHODIMP _SyncAsync(Foundation::IAsyncOperation<bool>* *result);
	virtual STDMETHODIMP _add_SyncStatusChanged(Foundation::TypedEventHandler<UserDataTaskListSyncManager*, IInspectable*>* handler, Foundation::EventRegistrationToken *token);
	virtual STDMETHODIMP _remove_SyncStatusChanged(Foundation::EventRegistrationToken token);
};
template<typename X> struct IUserDataTaskListSyncManager_adaptor : X {
	union {
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::LastAttemptedSyncTime)->_get_LastAttemptedSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::LastAttemptedSyncTime)->_put_LastAttemptedSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastAttemptedSyncTime;
		struct : property {
			Foundation::DateTime get() { Foundation::DateTime value; hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::LastSuccessfulSyncTime)->_get_LastSuccessfulSyncTime(&value)); return value; }
			Foundation::DateTime operator()() { return get(); }
			operator Foundation::DateTime () { return get(); }
			void put(const Foundation::DateTime& value) { hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::LastSuccessfulSyncTime)->_put_LastSuccessfulSyncTime(value)); }
			void operator=(const Foundation::DateTime& value) { put(value); }
			void operator()(const Foundation::DateTime& value) { put(value); }
		} LastSuccessfulSyncTime;
		struct : property {
			UserDataTaskListSyncStatus get() { UserDataTaskListSyncStatus value; hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::Status)->_get_Status(&value)); return value; }
			UserDataTaskListSyncStatus operator()() { return get(); }
			operator UserDataTaskListSyncStatus () { return get(); }
			void put(UserDataTaskListSyncStatus value) { hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::Status)->_put_Status(value)); }
			void operator=(UserDataTaskListSyncStatus value) { put(value); }
			void operator()(UserDataTaskListSyncStatus value) { put(value); }
		} Status;
		struct : property {
			Foundation::EventRegistrationToken operator+=(handler_ref<Foundation::TypedEventHandler<ptr<UserDataTaskListSyncManager>, object>> handler) { Foundation::EventRegistrationToken token; hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::SyncStatusChanged)->_add_SyncStatusChanged(to_abi(handler), &token)); return token; }
			void operator-=(const Foundation::EventRegistrationToken& token) { hrcheck(enc(&IUserDataTaskListSyncManager_adaptor::SyncStatusChanged)->_remove_SyncStatusChanged(token)); }
		} SyncStatusChanged;
	};
	ptr<Foundation::IAsyncOperation<bool>> SyncAsync() { Foundation::IAsyncOperation<bool>* result; hrcheck(X::get()->_SyncAsync(&result)); return from_abi(result); }
	IUserDataTaskListSyncManager_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskListSyncManager, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskListSyncManager_adaptor<X> { typedef adapt IUserDataTaskListSyncManager; };
struct IUserDataTaskListSyncManager : IUserDataTaskListSyncManager_raw, generate<IUserDataTaskListSyncManager> {};

// UserDataTaskListSyncManager
template<typename X> struct statics<UserDataTaskListSyncManager, X> : X {
	typedef typename X::root_type UserDataTaskListSyncManager;
};
struct UserDataTaskListSyncManager : generate<UserDataTaskListSyncManager> {};

// IUserDataTaskReader
struct IUserDataTaskReader_raw : IInspectable {
	virtual STDMETHODIMP _ReadBatchAsync(Foundation::IAsyncOperation<UserDataTaskBatch*>* *result);
};
template<typename X> struct IUserDataTaskReader_adaptor : X {
	ptr<Foundation::IAsyncOperation<ptr<UserDataTaskBatch>>> ReadBatchAsync() { Foundation::IAsyncOperation<UserDataTaskBatch*>* result; hrcheck(X::get()->_ReadBatchAsync(&result)); return from_abi(result); }
};
template<typename X> struct adapt<IUserDataTaskReader, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskReader_adaptor<X> { typedef adapt IUserDataTaskReader; };
struct IUserDataTaskReader : IUserDataTaskReader_raw, generate<IUserDataTaskReader> {};

// UserDataTaskReader
template<typename X> struct statics<UserDataTaskReader, X> : X {
	typedef typename X::root_type UserDataTaskReader;
};
struct UserDataTaskReader : generate<UserDataTaskReader> {};

// UserDataTaskQueryOptions
template<typename X> struct statics<UserDataTaskQueryOptions, X> : X {
	typedef typename X::root_type UserDataTaskQueryOptions;
};
struct UserDataTaskQueryOptions : generate<UserDataTaskQueryOptions> {};

// IUserDataTask
struct IUserDataTask_raw : IInspectable {
	virtual STDMETHODIMP _get_Id(HSTRING *value);
	virtual STDMETHODIMP _get_ListId(HSTRING *value);
	virtual STDMETHODIMP _get_RemoteId(HSTRING *value);
	virtual STDMETHODIMP _put_RemoteId(HSTRING value);
	virtual STDMETHODIMP _get_CompletedDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_CompletedDate(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Details(HSTRING *value);
	virtual STDMETHODIMP _put_Details(HSTRING value);
	virtual STDMETHODIMP _get_DetailsKind(UserDataTaskDetailsKind *value);
	virtual STDMETHODIMP _put_DetailsKind(UserDataTaskDetailsKind value);
	virtual STDMETHODIMP _get_DueDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_DueDate(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Kind(UserDataTaskKind *value);
	virtual STDMETHODIMP _get_Priority(UserDataTaskPriority *value);
	virtual STDMETHODIMP _put_Priority(UserDataTaskPriority value);
	virtual STDMETHODIMP _get_RecurrenceProperties(UserDataTaskRecurrenceProperties* *value);
	virtual STDMETHODIMP _put_RecurrenceProperties(UserDataTaskRecurrenceProperties* value);
	virtual STDMETHODIMP _get_RegenerationProperties(UserDataTaskRegenerationProperties* *value);
	virtual STDMETHODIMP _put_RegenerationProperties(UserDataTaskRegenerationProperties* value);
	virtual STDMETHODIMP _get_Reminder(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_Reminder(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Sensitivity(UserDataTaskSensitivity *value);
	virtual STDMETHODIMP _put_Sensitivity(UserDataTaskSensitivity value);
	virtual STDMETHODIMP _get_Subject(HSTRING *value);
	virtual STDMETHODIMP _put_Subject(HSTRING value);
	virtual STDMETHODIMP _get_StartDate(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_StartDate(Foundation::IReference<Foundation::DateTime>* value);
};
template<typename X> struct IUserDataTask_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IUserDataTask_adaptor::CompletedDate)->_get_CompletedDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IUserDataTask_adaptor::CompletedDate)->_put_CompletedDate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} CompletedDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTask_adaptor::Details)->_get_Details(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserDataTask_adaptor::Details)->_put_Details(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Details;
		struct : property {
			UserDataTaskDetailsKind get() { UserDataTaskDetailsKind value; hrcheck(enc(&IUserDataTask_adaptor::DetailsKind)->_get_DetailsKind(&value)); return value; }
			UserDataTaskDetailsKind operator()() { return get(); }
			operator UserDataTaskDetailsKind () { return get(); }
			void put(UserDataTaskDetailsKind value) { hrcheck(enc(&IUserDataTask_adaptor::DetailsKind)->_put_DetailsKind(value)); }
			void operator=(UserDataTaskDetailsKind value) { put(value); }
			void operator()(UserDataTaskDetailsKind value) { put(value); }
		} DetailsKind;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IUserDataTask_adaptor::DueDate)->_get_DueDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IUserDataTask_adaptor::DueDate)->_put_DueDate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} DueDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTask_adaptor::Id)->_get_Id(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} Id;
		struct : property {
			UserDataTaskKind get() { UserDataTaskKind value; hrcheck(enc(&IUserDataTask_adaptor::Kind)->_get_Kind(&value)); return value; }
			UserDataTaskKind operator()() { return get(); }
			operator UserDataTaskKind () { return get(); }
		} Kind;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTask_adaptor::ListId)->_get_ListId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
		} ListId;
		struct : property {
			UserDataTaskPriority get() { UserDataTaskPriority value; hrcheck(enc(&IUserDataTask_adaptor::Priority)->_get_Priority(&value)); return value; }
			UserDataTaskPriority operator()() { return get(); }
			operator UserDataTaskPriority () { return get(); }
			void put(UserDataTaskPriority value) { hrcheck(enc(&IUserDataTask_adaptor::Priority)->_put_Priority(value)); }
			void operator=(UserDataTaskPriority value) { put(value); }
			void operator()(UserDataTaskPriority value) { put(value); }
		} Priority;
		struct : property {
			ptr<UserDataTaskRecurrenceProperties> get() { UserDataTaskRecurrenceProperties* value; hrcheck(enc(&IUserDataTask_adaptor::RecurrenceProperties)->_get_RecurrenceProperties(&value)); return from_abi(value); }
			ptr<UserDataTaskRecurrenceProperties> operator()() { return get(); }
			operator ptr<UserDataTaskRecurrenceProperties> () { return get(); }
			ptr<UserDataTaskRecurrenceProperties> operator->() { return get(); }
			void put(pptr<UserDataTaskRecurrenceProperties> value) { hrcheck(enc(&IUserDataTask_adaptor::RecurrenceProperties)->_put_RecurrenceProperties(value)); }
			void operator=(pptr<UserDataTaskRecurrenceProperties> value) { put(value); }
			void operator()(pptr<UserDataTaskRecurrenceProperties> value) { put(value); }
		} RecurrenceProperties;
		struct : property {
			ptr<UserDataTaskRegenerationProperties> get() { UserDataTaskRegenerationProperties* value; hrcheck(enc(&IUserDataTask_adaptor::RegenerationProperties)->_get_RegenerationProperties(&value)); return from_abi(value); }
			ptr<UserDataTaskRegenerationProperties> operator()() { return get(); }
			operator ptr<UserDataTaskRegenerationProperties> () { return get(); }
			ptr<UserDataTaskRegenerationProperties> operator->() { return get(); }
			void put(pptr<UserDataTaskRegenerationProperties> value) { hrcheck(enc(&IUserDataTask_adaptor::RegenerationProperties)->_put_RegenerationProperties(value)); }
			void operator=(pptr<UserDataTaskRegenerationProperties> value) { put(value); }
			void operator()(pptr<UserDataTaskRegenerationProperties> value) { put(value); }
		} RegenerationProperties;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IUserDataTask_adaptor::Reminder)->_get_Reminder(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IUserDataTask_adaptor::Reminder)->_put_Reminder(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} Reminder;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTask_adaptor::RemoteId)->_get_RemoteId(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserDataTask_adaptor::RemoteId)->_put_RemoteId(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} RemoteId;
		struct : property {
			UserDataTaskSensitivity get() { UserDataTaskSensitivity value; hrcheck(enc(&IUserDataTask_adaptor::Sensitivity)->_get_Sensitivity(&value)); return value; }
			UserDataTaskSensitivity operator()() { return get(); }
			operator UserDataTaskSensitivity () { return get(); }
			void put(UserDataTaskSensitivity value) { hrcheck(enc(&IUserDataTask_adaptor::Sensitivity)->_put_Sensitivity(value)); }
			void operator=(UserDataTaskSensitivity value) { put(value); }
			void operator()(UserDataTaskSensitivity value) { put(value); }
		} Sensitivity;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IUserDataTask_adaptor::StartDate)->_get_StartDate(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IUserDataTask_adaptor::StartDate)->_put_StartDate(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} StartDate;
		struct : property {
			hstring get() { HSTRING value; hrcheck(enc(&IUserDataTask_adaptor::Subject)->_get_Subject(&value)); return from_abi(value); }
			hstring operator()() { return get(); }
			operator hstring_ref () { return get(); }
			void put(hstring_ref value) { hrcheck(enc(&IUserDataTask_adaptor::Subject)->_put_Subject(value)); }
			void operator=(hstring_ref value) { put(value); }
			void operator()(hstring_ref value) { put(value); }
		} Subject;
	};
	IUserDataTask_adaptor() {}
};
template<typename X> struct adapt<IUserDataTask, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTask_adaptor<X> { typedef adapt IUserDataTask; };
struct IUserDataTask : IUserDataTask_raw, generate<IUserDataTask> {};

// UserDataTask
template<typename X> struct statics<UserDataTask, X> : X {
	typedef typename X::root_type UserDataTask;
};
struct UserDataTask : generate<UserDataTask> {};

// IUserDataTaskBatch
struct IUserDataTaskBatch_raw : IInspectable {
	virtual STDMETHODIMP _get_Tasks(Foundation::Collections::IVectorView<UserDataTask*>* *value);
};
template<typename X> struct IUserDataTaskBatch_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::Collections::IVectorView<ptr<UserDataTask>>> get() { Foundation::Collections::IVectorView<UserDataTask*>* value; hrcheck(enc(&IUserDataTaskBatch_adaptor::Tasks)->_get_Tasks(&value)); return from_abi(value); }
			ptr<Foundation::Collections::IVectorView<ptr<UserDataTask>>> operator()() { return get(); }
			operator ptr<Foundation::Collections::IVectorView<ptr<UserDataTask>>> () { return get(); }
			ptr<Foundation::Collections::IVectorView<ptr<UserDataTask>>> operator->() { return get(); }
		} Tasks;
	};
	IUserDataTaskBatch_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskBatch, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskBatch_adaptor<X> { typedef adapt IUserDataTaskBatch; };
struct IUserDataTaskBatch : IUserDataTaskBatch_raw, generate<IUserDataTaskBatch> {};

// UserDataTaskBatch
template<typename X> struct statics<UserDataTaskBatch, X> : X {
	typedef typename X::root_type UserDataTaskBatch;
};
struct UserDataTaskBatch : generate<UserDataTaskBatch> {};

// IUserDataTaskRecurrenceProperties
struct IUserDataTaskRecurrenceProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Unit(UserDataTaskRecurrenceUnit *value);
	virtual STDMETHODIMP _put_Unit(UserDataTaskRecurrenceUnit value);
	virtual STDMETHODIMP _get_Occurrences(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_Occurrences(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_Until(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_Until(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Interval(int *value);
	virtual STDMETHODIMP _put_Interval(int value);
	virtual STDMETHODIMP _get_DaysOfWeek(Foundation::IReference<UserDataTaskDaysOfWeek>* *value);
	virtual STDMETHODIMP _put_DaysOfWeek(Foundation::IReference<UserDataTaskDaysOfWeek>* value);
	virtual STDMETHODIMP _get_WeekOfMonth(Foundation::IReference<UserDataTaskWeekOfMonth>* *value);
	virtual STDMETHODIMP _put_WeekOfMonth(Foundation::IReference<UserDataTaskWeekOfMonth>* value);
	virtual STDMETHODIMP _get_Month(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_Month(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_Day(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_Day(Foundation::IReference<int>* value);
};
template<typename X> struct IUserDataTaskRecurrenceProperties_adaptor : X {
	union {
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Day)->_get_Day(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Day)->_put_Day(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} Day;
		struct : property {
			ptr<Foundation::IReference<UserDataTaskDaysOfWeek>> get() { Foundation::IReference<UserDataTaskDaysOfWeek>* value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::DaysOfWeek)->_get_DaysOfWeek(&value)); return from_abi(value); }
			ptr<Foundation::IReference<UserDataTaskDaysOfWeek>> operator()() { return get(); }
			operator ptr<Foundation::IReference<UserDataTaskDaysOfWeek>> () { return get(); }
			ptr<Foundation::IReference<UserDataTaskDaysOfWeek>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<UserDataTaskDaysOfWeek>> value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::DaysOfWeek)->_put_DaysOfWeek(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<UserDataTaskDaysOfWeek>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<UserDataTaskDaysOfWeek>> value) { put(to_abi(value)); }
		} DaysOfWeek;
		struct : property {
			int get() { int value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Interval)->_get_Interval(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Interval)->_put_Interval(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Interval;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Month)->_get_Month(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Month)->_put_Month(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} Month;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Occurrences)->_get_Occurrences(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Occurrences)->_put_Occurrences(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} Occurrences;
		struct : property {
			UserDataTaskRecurrenceUnit get() { UserDataTaskRecurrenceUnit value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Unit)->_get_Unit(&value)); return value; }
			UserDataTaskRecurrenceUnit operator()() { return get(); }
			operator UserDataTaskRecurrenceUnit () { return get(); }
			void put(UserDataTaskRecurrenceUnit value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Unit)->_put_Unit(value)); }
			void operator=(UserDataTaskRecurrenceUnit value) { put(value); }
			void operator()(UserDataTaskRecurrenceUnit value) { put(value); }
		} Unit;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Until)->_get_Until(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::Until)->_put_Until(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} Until;
		struct : property {
			ptr<Foundation::IReference<UserDataTaskWeekOfMonth>> get() { Foundation::IReference<UserDataTaskWeekOfMonth>* value; hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::WeekOfMonth)->_get_WeekOfMonth(&value)); return from_abi(value); }
			ptr<Foundation::IReference<UserDataTaskWeekOfMonth>> operator()() { return get(); }
			operator ptr<Foundation::IReference<UserDataTaskWeekOfMonth>> () { return get(); }
			ptr<Foundation::IReference<UserDataTaskWeekOfMonth>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<UserDataTaskWeekOfMonth>> value) { hrcheck(enc(&IUserDataTaskRecurrenceProperties_adaptor::WeekOfMonth)->_put_WeekOfMonth(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<UserDataTaskWeekOfMonth>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<UserDataTaskWeekOfMonth>> value) { put(to_abi(value)); }
		} WeekOfMonth;
	};
	IUserDataTaskRecurrenceProperties_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskRecurrenceProperties, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskRecurrenceProperties_adaptor<X> { typedef adapt IUserDataTaskRecurrenceProperties; };
struct IUserDataTaskRecurrenceProperties : IUserDataTaskRecurrenceProperties_raw, generate<IUserDataTaskRecurrenceProperties> {};

// UserDataTaskRecurrenceProperties
template<typename X> struct statics<UserDataTaskRecurrenceProperties, X> : X {
	typedef typename X::root_type UserDataTaskRecurrenceProperties;
};
struct UserDataTaskRecurrenceProperties : generate<UserDataTaskRecurrenceProperties> {};

// IUserDataTaskRegenerationProperties
struct IUserDataTaskRegenerationProperties_raw : IInspectable {
	virtual STDMETHODIMP _get_Unit(UserDataTaskRegenerationUnit *value);
	virtual STDMETHODIMP _put_Unit(UserDataTaskRegenerationUnit value);
	virtual STDMETHODIMP _get_Occurrences(Foundation::IReference<int>* *value);
	virtual STDMETHODIMP _put_Occurrences(Foundation::IReference<int>* value);
	virtual STDMETHODIMP _get_Until(Foundation::IReference<Foundation::DateTime>* *value);
	virtual STDMETHODIMP _put_Until(Foundation::IReference<Foundation::DateTime>* value);
	virtual STDMETHODIMP _get_Interval(int *value);
	virtual STDMETHODIMP _put_Interval(int value);
};
template<typename X> struct IUserDataTaskRegenerationProperties_adaptor : X {
	union {
		struct : property {
			int get() { int value; hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Interval)->_get_Interval(&value)); return value; }
			int operator()() { return get(); }
			operator int () { return get(); }
			void put(int value) { hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Interval)->_put_Interval(value)); }
			void operator=(int value) { put(value); }
			void operator()(int value) { put(value); }
		} Interval;
		struct : property {
			ptr<Foundation::IReference<int>> get() { Foundation::IReference<int>* value; hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Occurrences)->_get_Occurrences(&value)); return from_abi(value); }
			ptr<Foundation::IReference<int>> operator()() { return get(); }
			operator ptr<Foundation::IReference<int>> () { return get(); }
			ptr<Foundation::IReference<int>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<int>> value) { hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Occurrences)->_put_Occurrences(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<int>> value) { put(to_abi(value)); }
		} Occurrences;
		struct : property {
			UserDataTaskRegenerationUnit get() { UserDataTaskRegenerationUnit value; hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Unit)->_get_Unit(&value)); return value; }
			UserDataTaskRegenerationUnit operator()() { return get(); }
			operator UserDataTaskRegenerationUnit () { return get(); }
			void put(UserDataTaskRegenerationUnit value) { hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Unit)->_put_Unit(value)); }
			void operator=(UserDataTaskRegenerationUnit value) { put(value); }
			void operator()(UserDataTaskRegenerationUnit value) { put(value); }
		} Unit;
		struct : property {
			ptr<Foundation::IReference<Foundation::DateTime>> get() { Foundation::IReference<Foundation::DateTime>* value; hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Until)->_get_Until(&value)); return from_abi(value); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator()() { return get(); }
			operator ptr<Foundation::IReference<Foundation::DateTime>> () { return get(); }
			ptr<Foundation::IReference<Foundation::DateTime>> operator->() { return get(); }
			void put(pptr<Foundation::IReference<Foundation::DateTime>> value) { hrcheck(enc(&IUserDataTaskRegenerationProperties_adaptor::Until)->_put_Until(to_abi(value))); }
			void operator=(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
			void operator()(pptr<Foundation::IReference<Foundation::DateTime>> value) { put(to_abi(value)); }
		} Until;
	};
	IUserDataTaskRegenerationProperties_adaptor() {}
};
template<typename X> struct adapt<IUserDataTaskRegenerationProperties, X> : Windows::ApplicationModel::UserDataTasks::IUserDataTaskRegenerationProperties_adaptor<X> { typedef adapt IUserDataTaskRegenerationProperties; };
struct IUserDataTaskRegenerationProperties : IUserDataTaskRegenerationProperties_raw, generate<IUserDataTaskRegenerationProperties> {};

// UserDataTaskRegenerationProperties
template<typename X> struct statics<UserDataTaskRegenerationProperties, X> : X {
	typedef typename X::root_type UserDataTaskRegenerationProperties;
};
struct UserDataTaskRegenerationProperties : generate<UserDataTaskRegenerationProperties> {};
}}}
} // namespace iso_winrt
